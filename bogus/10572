From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Nov 11 09:30:00 2009
Received: from mail-yw0-f183.google.com (mail-yw0-f183.google.com [209.85.211.183])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id nABETts7003270
	for <bugs@bugs.plt-scheme.org>; Wed, 11 Nov 2009 09:29:55 -0500
Message-Id: <200911111429.nABETqhv003262@champlain.ccs.neu.edu>
Date: Wed, 11 Nov 2009 09:29:52 -0500
From: raju.saji@gmail.com
To: bugs@plt-scheme.org
Subject: Continuation error.

>Number:         10572
>Category:       bogus
>Synopsis:       Continuation error.
>Class:          not-a-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Nov 11 09:32:01 -0500 2009
>Closed-Date:    Fri Sep 03 21:20:29 -0400 2010
>Last-Modified:  Fri Sep 03 21:20:29 -0400 2010
>Originator:     Saji
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.5
>Environment:
unix "Linux desktop 2.6.31-14-generic #48-Ubuntu SMP Fri Oct 16 14:04:26 UTC 2009 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 123257916

Collections:
(("/home/sivu/.plt-scheme/4.1.5/collects" non-existent-path) ("/usr/lib/plt/collects" "gui-debugger" "test-box-recovery" "compiler" "2htdp" "graphics" "r6rs" "tex2page" "at-exp" "syntax-color" "icons" "srfi" "lang" "plot" "deinprogramm" "config" "net" "framework" "afm" "algol60" "frtime" "stepper" "wxme" "scriblib" "scribble" "slideshow" "ffi" "version" "errortrace" "mysterx" "scribblings" "test-engine" "scheme" "macro-debugger" "redex" "slatex" "browser" "make" "html" "web-server" "xml" "htdp" "lazy" "mrlib" "hierlist" "embedded-gui" "parser-tools" "dynext" "mred" "openssl" "games" "syntax" "texpict" "help" "string-constants" "planet" "mzcom" "teachpack" "defaults" "typed-scheme" "swindle" "trace" "readline" "drscheme" "preprocessor" "tests" "rnrs" "profj" "info-domain" "mzscheme" "typed" "setup" "s-exp" "mzlib" "r5rs" "sgl" "htdch" "eopl" "combinator-parser" "file" "launcher" "stxclass"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
Expects the following to work. As is shown in the documentation at /plt/doc/guide/Continuations.html

#lang scheme
(define saved-k #f)
(define (save-it!)
  (call-with-composable-continuation
   (lambda (k) ; k is the captured continuation
     (set! saved-k k)
     0)))
(+ 1 (+ 1 (+ 1 (save-it!))))

(saved-k (saved-k 0))

But fails with the following message.
+: expects type <number> as 2nd argument, given: #<void>; other arguments were: 1
>How-To-Repeat:
Put the given snippet in DrScheme.
Click run.
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: raju.saji@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10572: Continuation error.
Date: Wed, 11 Nov 2009 07:37:37 -0700

 At Wed, 11 Nov 2009 09:32:01 -0500, raju.saji@gmail.com wrote:
 > Expects the following to work. As is shown in the documentation at 
 > /plt/doc/guide/Continuations.html
 > 
 > #lang scheme
 > (define saved-k #f)
 > (define (save-it!)
 >   (call-with-composable-continuation
 >    (lambda (k) ; k is the captured continuation
 >      (set! saved-k k)
 >      0)))
 > (+ 1 (+ 1 (+ 1 (save-it!))))
 > 
 > (saved-k (saved-k 0))
 > 
 > But fails with the following message.
 > +: expects type <number> as 2nd argument, given: #<void>; other arguments 
 > were: 1
 
 The documentation shows those expression in the REPL, as opposed to a
 program. It works at the REPL because there's an implicit prompt around
 each interaction. There's no implicit prompt around each form within a
 module, though, and so the captured continuation extends further than
 you expected.
 
 The difference is certainly confusing, and maybe we should add a prompt
 around each form in a module.
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10572: Continuation error.
Date: Wed, 11 Nov 2009 10:41:53 -0700

 At Wed, 11 Nov 2009 10:38:47 -0600, Robby Findler wrote:
 > On Wed, Nov 11, 2009 at 8:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > The documentation shows those expression in the REPL, as opposed to a
 > > program. It works at the REPL because there's an implicit prompt around
 > > each interaction. There's no implicit prompt around each form within a
 > > module, though, and so the captured continuation extends further than
 > > you expected.
 > >
 > > The difference is certainly confusing, and maybe we should add a prompt
 > > around each form in a module.
 > 
 > How about we just explain this issue in the docs instead? I'm not sure
 > we want to put prompts into programs like that (esp. when they usually
 > do nothing).
 > 
 > Or perhaps you have a rationale for that? I'm not tied to my opinion.
 
 This issue keeps showing up in toy programs and examples. Prabhakar ran
 into it in his class. Meanwhile, I don't think I've seen a toy where
 you want to capture the continuation of a module invocation.
 
 I think the cost of the prompt can be small, because the prompt can be
 skipped in the common case of a definition of a procedure (which is
 easy to detect dynamically).
 
 But since the trouble happens only with small examples and other toys,
 it hasn't been a high priority.
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10572: Continuation error.
Date: Wed, 11 Nov 2009 11:44:49 -0600

 On Wed, Nov 11, 2009 at 11:41 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Wed, 11 Nov 2009 10:38:47 -0600, Robby Findler wrote:
 >> On Wed, Nov 11, 2009 at 8:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 >> > The documentation shows those expression in the REPL, as opposed to a
 >> > program. It works at the REPL because there's an implicit prompt around
 >> > each interaction. There's no implicit prompt around each form within a
 >> > module, though, and so the captured continuation extends further than
 >> > you expected.
 >> >
 >> > The difference is certainly confusing, and maybe we should add a prompt
 >> > around each form in a module.
 >>
 >> How about we just explain this issue in the docs instead? I'm not sure
 >> we want to put prompts into programs like that (esp. when they usually
 >> do nothing).
 >>
 >> Or perhaps you have a rationale for that? I'm not tied to my opinion.
 >
 > This issue keeps showing up in toy programs and examples. Prabhakar ran
 > into it in his class. Meanwhile, I don't think I've seen a toy where
 > you want to capture the continuation of a module invocation.
 >
 > I think the cost of the prompt can be small, because the prompt can be
 > skipped in the common case of a definition of a procedure (which is
 > easy to detect dynamically).
 >
 > But since the trouble happens only with small examples and other toys,
 > it hasn't been a high priority.
 
 My instinct is that it makes a nice "learning experience" of the sharp
 edges involved in continuations (so documentation is the proper
 response).
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Bugs PLT <bugs@plt-scheme.org>, Matthew Flatt <mflatt@cs.utah.edu>
Cc: 
Subject: Re: [plt-bug] all/10572: Continuation error.
Date: Sun, 15 Nov 2009 16:26:00 -0600

 I figured Matthew didn't reply because there wasn't anything to say. :)
 
 Robby
 
 On Sun, Nov 15, 2009 at 4:22 PM, Bugs PLT <bugs@plt-scheme.org> wrote:
 > I found this message in the spam folder of bugs@plt-scheme.org. =C2=A0Wou=
 ld
 > be good to check that it wasn't lost.
 >
 >
 >
 > ---------- Forwarded message ----------
 > From: Robby Findler <robby@eecs.northwestern.edu>
 > Date: Wed, Nov 11, 2009 at 11:38 AM
 > Subject: Re: [plt-bug] all/10572: Continuation error.
 > To: Matthew Flatt <mflatt@cs.utah.edu>
 > Cc: bugs@plt-scheme.org
 >
 >
 > On Wed, Nov 11, 2009 at 8:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote=
 :
 >> The documentation shows those expression in the REPL, as opposed to a
 >> program. It works at the REPL because there's an implicit prompt around
 >> each interaction. There's no implicit prompt around each form within a
 >> module, though, and so the captured continuation extends further than
 >> you expected.
 >>
 >> The difference is certainly confusing, and maybe we should add a prompt
 >> around each form in a module.
 >
 > How about we just explain this issue in the docs instead? I'm not sure
 > we want to put prompts into programs like that (esp. when they usually
 > do nothing).
 >
 > Or perhaps you have a rationale for that? I'm not tied to my opinion.
 >
 > Robby
 >

Class changed from "sw-bug" to "not-a-bug" by eli at Fri, 03 Sep 2010 21:20:29 -0400
Reason>>> See replies

Responsible changed from "nobody" to "eli" by eli at Fri, 03 Sep 2010 21:20:29 -0400
Reason>>> .

State changed from "open" to "closed" by eli at Fri, 03 Sep 2010 21:20:29 -0400
Reason>>> See replies

