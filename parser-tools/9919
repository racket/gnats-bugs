From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Nov 16 21:45:26 2008
Received: from yx-out-2324.google.com (yx-out-2324.google.com [74.125.44.29])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id mAH2jKEl009175
	for <bugs@bugs.plt-scheme.org>; Sun, 16 Nov 2008 21:45:20 -0500
Message-Id: <200811170245.mAH2jH3g009169@champlain.ccs.neu.edu>
Date: Sun, 16 Nov 2008 21:45:17 -0500
From: hdg@cox.net
To: bugs@plt-scheme.org
Subject: datum->syntax-object records bad location information in REPL

>Number:         9919
>Category:       parser-tools
>Synopsis:       datum->syntax-object records bad location information in REPL
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Nov 16 21:48:01 -0500 2008
>Last-Modified:  Sat Dec 03 11:23:22 -0500 2011
>Originator:     David Goering
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.2
>Environment:
macosx "Darwin ip68-103-104-96.ks.ok.cox.net 8.11.1 Darwin Kernel Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 74301844

Collections:
(("/Users/hdg/Library/PLT Scheme/4.1.2/collects" non-existent-path) ("/Applications/PLT Scheme v4.1.2/collects" ".DS_Store" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "\n"))
>Description:
In an interactive session managed by a REPL lines of input in the listener are interspersed with lines of output.  The syntax object for the first token read on an input line is incorrently given a start position at the end of the previous input line and spans the intervening lines of output.  The lexeme is nonetheless correct.

I'm writing an indentation-aware parser. Correct location information is essential.
>How-To-Repeat:
1. Run the attached repl-read.ss.  
2. In the interactions window enter "(repl)"
3. In the text box enter "1 2 <CR>". Two syntax objects will be displayed.
4. In the next text box enter "3 4 <CR". Two more syntax object will be displayed.
5. Expand the syntax objects and compare the location information. Note that 2 and 3 are shown to be on the same line.
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@plt-scheme.org>
To: hdg@cox.net, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9919: datum->syntax-object records bad location information in REPL
Date: Sun, 16 Nov 2008 20:59:06 -0600

 I don't have the attachment yet, but a simple test as below works
 properly (the "1 2<cr>3 4<cr>" I typed myself, as with the "5 6<cr>7
 8<cr>").
 
 Maybe you can make an example of a similar simplicity? That would help a lot.
 
 Thanks,
 Robby
 
 Welcome to DrScheme, version 4.1.2.4-svn12nov2008 [3m].
 Language: Module; memory limit: 128 megabytes.
 > (map syntax-line (list (read-syntax) (read-syntax) (read-syntax) (read-syntax)))
 1 2
 3 4
 (4 4 5 5)
 > (map syntax-line (list (read-syntax) (read-syntax) (read-syntax) (read-syntax)))
 5 6
 7 8
 (8 8 9 9)
 >
 
 On Sun, Nov 16, 2008 at 8:48 PM,  <hdg@cox.net> wrote:
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=9919
 >
 > Reported by David Goering for release: 4.1.2
 >
 > *** Description:
 > In an interactive session managed by a REPL lines of input in the listener are interspersed with lines of output.  The syntax object for the first token read on an input line is incorrently given a start position at the end of the previous input line and spans the intervening lines of output.  The lexeme is nonetheless correct.
 >
 > I'm writing an indentation-aware parser. Correct location information is essential.
 >
 > *** How to repeat:
 > 1. Run the attached repl-read.ss.
 > 2. In the interactions window enter "(repl)"
 > 3. In the text box enter "1 2 <CR>". Two syntax objects will be displayed.
 > 4. In the next text box enter "3 4 <CR". Two more syntax object will be displayed.
 > 5. Expand the syntax objects and compare the location information. Note that 2 and 3 are shown to be on the same line.
 >
 > *** Environment:
 > macosx "Darwin ip68-103-104-96.ks.ok.cox.net 8.11.1 Darwin Kernel Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 74301844
 >
 > Collections:
 > (("/Users/hdg/Library/PLT Scheme/4.1.2/collects" non-existent-path) ("/Applications/PLT Scheme v4.1.2/collects" ".DS_Store" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed-scheme" "version" "web-server" "wxme" "xml"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "\n"))
 >
 >
From: H David Goering <hdg@cox.net>
To: Robby Findler <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9919: datum->syntax-object records bad location information in REPL
Date: Mon, 17 Nov 2008 07:28:32 -0600

 --Apple-Mail-17--486790760
 Content-Transfer-Encoding: 7bit
 Content-Type: application/octet-stream;
 	x-mac-type=54584554;
 	x-unix-mode=0644;
 	x-mac-creator=63537244;
 	name=repl-read.ss
 Content-Disposition: attachment;
 	filename=repl-read.ss
 
 ;; This implements the equivalent of mzscheme's read-syntax for R5RS scheme.
 ;; It has not been thoroughly tested.  Also it will read an entire file into a 
 ;; list of syntax objects, instead of returning one syntax object at a time
 
 (module repl-read mzscheme
   
   (require parser-tools/lex
            (prefix : parser-tools/lex-sre)
            parser-tools/yacc
            syntax/readerr)
   
   (define-tokens data (DATUM))
   (define-empty-tokens delim (OP CP HASHOP QUOTE QUASIQUOTE UNQUOTE UNQUOTE-SPLICING DOT EOL EOF))
   
   (define scheme-lexer
     (lexer-src-pos
      
      ;; Skip comments, without accumulating extra position information
      [(:or scheme-whitespace comment) (return-without-pos (scheme-lexer input-port))]
      
      ["#t" (token-DATUM #t)]
      ["#f" (token-DATUM #f)]
      [(:: "#\\" any-char) (token-DATUM (caddr (string->list lexeme)))]
      ["#\\space" (token-DATUM #\space)]
      ["#\\newline" (token-DATUM #\newline)]
      [(:or (:: initial (:* subsequent)) "+" "-" "...") (token-DATUM (string->symbol lexeme))]
      [#\" (token-DATUM (list->string (get-string-token input-port)))]
      [#\( 'OP]
      [#\) 'CP]
      [#\[ 'OP]
      [#\] 'CP]
      ["#(" 'HASHOP]
      [num2 (token-DATUM (string->number lexeme 2))]
      [num8 (token-DATUM (string->number lexeme 8))]
      [num10 (token-DATUM (string->number lexeme 10))]
      [num16 (token-DATUM (string->number lexeme 16))]
      ["'" 'QUOTE]
      ["`" 'QUASIQUOTE]
      ["," 'UNQUOTE]
      [",@" 'UNQUOTE-SPLICING]
      ["." 'DOT]
      [#\newline 'EOL]
      [(eof) 'EOF]))
   
   (define get-string-token
     (lexer
      [(:~ #\" #\\) (cons (car (string->list lexeme))
                          (get-string-token input-port))]
      [(:: #\\ #\\) (cons #\\ (get-string-token input-port))]
      [(:: #\\ #\") (cons #\" (get-string-token input-port))]
      [#\" null]))
   
   
   (define-lex-abbrevs
    [letter (:or (:/ "a" "z") (:/ #\A #\Z))]
    [digit (:/ #\0 #\9)]
    [scheme-whitespace (:or #\return #\tab #\space #\vtab)]
    [initial (:or letter (char-set "!$%&*/:<=>?^_~@"))]
    [subsequent (:or initial digit (char-set "+-.@"))]
    [comment (:: #\; (:* (:~ #\newline)) #\newline)]
    
    
    ;; See ${PLTHOME}/collects/syntax-color/scheme-lexer.ss for an example of
    ;; using regexp macros to avoid the cut and paste.
    ;   [numR (:: prefixR complexR)]
    ;   [complexR (:or realR
    ;                (:: realR "@" realR)
    ;                (:: realR "+" urealR "i")
    ;                (:: realR "-" urealR "i")
    ;                (:: realR "+i")
    ;                (:: realR "-i")
    ;                (:: "+" urealR "i")
    ;                (:: "-" urealR "i")
    ;                (:: "+i")
    ;                (:: "-i"))]
    ;   [realR (:: sign urealR)]
    ;   [urealR (:or uintegerR (:: uintegerR "/" uintegerR) decimalR)]
    ;   [uintegerR (:: (:+ digitR) (:* #\#))]
    ;   [prefixR (:or (:: radixR exactness)
    ;               (:: exactness radixR))]
    
    [num2 (:: prefix2 complex2)]
    [complex2 (:or real2
                   (:: real2 "@" real2)
                   (:: real2 "+" ureal2 "i")
                   (:: real2 "-" ureal2 "i")
                   (:: real2 "+i")
                   (:: real2 "-i")
                   (:: "+" ureal2 "i")
                   (:: "-" ureal2 "i")
                   (:: "+i")
                   (:: "-i"))]
    [real2 (:: sign ureal2)]
    [ureal2 (:or uinteger2 (:: uinteger2 "/" uinteger2))]
    [uinteger2 (:: (:+ digit2) (:* #\#))]
    [prefix2 (:or (:: radix2 exactness)
                  (:: exactness radix2))]
    [radix2 "#b"]
    [digit2 (:or "0" "1")]
    [num8 (:: prefix8 complex8)]
    [complex8 (:or real8
                   (:: real8 "@" real8)
                   (:: real8 "+" ureal8 "i")
                   (:: real8 "-" ureal8 "i")
                   (:: real8 "+i")
                   (:: real8 "-i")
                   (:: "+" ureal8 "i")
                   (:: "-" ureal8 "i")
                   (:: "+i")
                   (:: "-i"))]
    [real8 (:: sign ureal8)]
    [ureal8 (:or uinteger8 (:: uinteger8 "/" uinteger8))]
    [uinteger8 (:: (:+ digit8) (:* #\#))]
    [prefix8 (:or (:: radix8 exactness)
                  (:: exactness radix8))]
    [radix8 "#o"]
    [digit8 (:/ "0" "7")]
    
    [num10 (:: prefix10 complex10)]
    [complex10 (:or real10
                    (:: real10 "@" real10)
                    (:: real10 "+" ureal10 "i")
                    (:: real10 "-" ureal10 "i")
                    (:: real10 "+i")
                    (:: real10 "-i")
                    (:: "+" ureal10 "i")
                    (:: "-" ureal10 "i")
                    (:: "+i")
                    (:: "-i"))]
    [real10 (:: sign ureal10)]
    [ureal10 (:or uinteger10 (:: uinteger10 "/" uinteger10) decimal10)]
    [uinteger10 (:: (:+ digit10) (:* #\#))]
    [prefix10 (:or (:: radix10 exactness)
                   (:: exactness radix10))]
    [radix10 (:? "#d")]
    [digit10 digit]
    [decimal10 (:or (:: uinteger10 suffix)
                    (:: #\. (:+ digit10) (:* #\#) suffix)
                    (:: (:+ digit10) #\. (:* digit10) (:* #\#) suffix)
                    (:: (:+ digit10) (:+ #\#) #\. (:* #\#) suffix))]
    
    [num16 (:: prefix16 complex16)]
    [complex16 (:or real16
                    (:: real16 "@" real16)
                    (:: real16 "+" ureal16 "i")
                    (:: real16 "-" ureal16 "i")
                    (:: real16 "+i")
                    (:: real16 "-i")
                    (:: "+" ureal16 "i")
                    (:: "-" ureal16 "i")
                    "+i"
                    "-i")]
    [real16 (:: sign ureal16)]
    [ureal16 (:or uinteger16 (:: uinteger16 "/" uinteger16))]
    [uinteger16 (:: (:+ digit16) (:* #\#))]
    [prefix16 (:or (:: radix16 exactness)
                   (:: exactness radix16))]
    [radix16 "#x"]
    [digit16 (:or digit (:/ #\a #\f) (:/ #\A #\F))]
    
    
    [suffix (:or "" (:: exponent-marker sign (:+ digit10)))]
    [exponent-marker (:or "e" "s" "f" "d" "l")]
    [sign (:or "" "+" "-")]
    [exactness (:or "" "#i" "#e")])
   
   
   (define stx-for-original-property (read-syntax #f (open-input-string "original")))
   
   ;; A macro to build the syntax object
   (define-syntax (build-so stx)
     (syntax-case stx ()
       ((_ value start end)
        (with-syntax ((start-pos (datum->syntax-object 
                                  (syntax end)
                                  (string->symbol 
                                   (format "$~a-start-pos"
                                           (syntax-object->datum (syntax start))))))
                      (end-pos (datum->syntax-object 
                                (syntax end)
                                (string->symbol 
                                 (format "$~a-end-pos"
                                         (syntax-object->datum (syntax end))))))
                      (source (datum->syntax-object
                               (syntax end)
                               'source-name)))
          (syntax
           (datum->syntax-object 
            #f
            value
            (list source 
                  (position-line start-pos)
                  (position-col start-pos)
                  (position-offset start-pos)
                  (- (position-offset end-pos)
                     (position-offset start-pos)))
            stx-for-original-property))))))
   
   (define (scheme-parser source-name)
     (parser
      (src-pos)
      
      (start s)
      (end EOL EOF)
      (error (lambda (a name val start end)
               (raise-read-error 
                "read-error"
                source-name
                (position-line start)
                (position-col start)
                (position-offset start)
                (- (position-offset end)
                   (position-offset start)))))
      (tokens data delim)
      
      
      (grammar
       
       (s [(sexp-list) (reverse $1)])
             
       (sexp [(DATUM) (build-so $1 1 1)]
             [(OP sexp-list CP) (build-so (reverse $2) 1 3)]
             [(HASHOP sexp-list CP) (build-so (list->vector (reverse $2)) 1 3)]
             [(QUOTE sexp) (build-so (list 'quote $2) 1 2)]
             [(QUASIQUOTE sexp) (build-so (list 'quasiquote $2) 1 2)]
             [(UNQUOTE sexp) (build-so (list 'unquote $2) 1 2)]
             [(UNQUOTE-SPLICING sexp) (build-so (list 'unquote-splicing $2) 1 2)]
             [(OP sexp-list DOT sexp CP) (build-so (append (reverse $2) $4) 1 5)])
       
       (sexp-list [() null]
                  [(sexp-list sexp) (cons $2 $1)]))))
   
   (define (rs sn ip)
     (port-count-lines! ip)
     ((scheme-parser sn) (lambda () (scheme-lexer ip))))
     
   (define (repl)
     (parameterize 
       (
         [current-prompt-read repl-read]
         [current-eval repl-eval]
         [current-print repl-print])
       (read-eval-print-loop)))  ;)
 
   (define (repl-read)
     (rs "listener" (current-input-port)))
   
   (define (repl-eval expr)
     expr)
        
   (define (repl-print expr)
     (printf "~a~n" expr)
     (void))
     
   (provide repl)
    
   )
 
 --Apple-Mail-17--486790760
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=US-ASCII;
 	delsp=yes;
 	format=flowed
 
 
 
 Robby,
 
 Thank you for looking into this so promptly.
 
 My example (attached) uses a custom parser invoked through (read-eval- 
 print-loop).  The parser is slightly modified from collects/parser- 
 tools/examples/read.ss.
 
 I've experimented with the build-so syntax function from read.ss, but  
 I can't see how to overcome the discrepancy between the lexeme and  
 the position information.
 
 Thanks,
 
 David
 
 
 
 
 
 On Nov 16, 2008, at 8:59 PM, Robby Findler wrote:
 
 > I don't have the attachment yet, but a simple test as below works
 > properly (the "1 2<cr>3 4<cr>" I typed myself, as with the "5 6<cr>7
 > 8<cr>").
 >
 > Maybe you can make an example of a similar simplicity? That would  
 > help a lot.
 >
 > Thanks,
 > Robby
 >
 > Welcome to DrScheme, version 4.1.2.4-svn12nov2008 [3m].
 > Language: Module; memory limit: 128 megabytes.
 >> (map syntax-line (list (read-syntax) (read-syntax) (read-syntax)  
 >> (read-syntax)))
 > 1 2
 > 3 4
 > (4 4 5 5)
 >> (map syntax-line (list (read-syntax) (read-syntax) (read-syntax)  
 >> (read-syntax)))
 > 5 6
 > 7 8
 > (8 8 9 9)
 >>
 >
 > On Sun, Nov 16, 2008 at 8:48 PM,  <hdg@cox.net> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9919
 >>
 >> Reported by David Goering for release: 4.1.2
 >>
 >> *** Description:
 >> In an interactive session managed by a REPL lines of input in the  
 >> listener are interspersed with lines of output.  The syntax object  
 >> for the first token read on an input line is incorrently given a  
 >> start position at the end of the previous input line and spans the  
 >> intervening lines of output.  The lexeme is nonetheless correct.
 >>
 >> I'm writing an indentation-aware parser. Correct location  
 >> information is essential.
 >>
 >> *** How to repeat:
 >> 1. Run the attached repl-read.ss.
 >> 2. In the interactions window enter "(repl)"
 >> 3. In the text box enter "1 2 <CR>". Two syntax objects will be  
 >> displayed.
 >> 4. In the next text box enter "3 4 <CR". Two more syntax object  
 >> will be displayed.
 >> 5. Expand the syntax objects and compare the location information.  
 >> Note that 2 and 3 are shown to be on the same line.
 >>
 >> *** Environment:
 >> macosx "Darwin ip68-103-104-96.ks.ok.cox.net 8.11.1 Darwin Kernel  
 >> Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/ 
 >> RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 74301844
 >>
 >> Collections:
 >> (("/Users/hdg/Library/PLT Scheme/4.1.2/collects" non-existent- 
 >> path) ("/Applications/PLT Scheme v4.1.2/collects" ".DS_Store"  
 >> "afm" "algol60" "browser" "combinator-parser" "compiler" "config"  
 >> "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace"  
 >> "ffi" "file" "framework" "frtime" "games" "graphics" "gui- 
 >> debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info- 
 >> domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred"  
 >> "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"  
 >> "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs"  
 >> "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble"  
 >> "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"  
 >> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"  
 >> "test-box-recovery" "test-engine" "tex2page" "texpict" "trace"  
 >> "typed-scheme" "version" "web-server" "wxme" "xml"))
 >> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t  
 >> debug) (default) #() "\n"))
 >>
 >>
 
 
 --Apple-Mail-17--486790760--
From: H David Goering <hdg@cox.net>
To: bugs@plt-scheme.org, H David Goering <hdg@cox.net>
Cc: 
Subject: Re: all/9919: datum->syntax-object records bad location information in REPL
Date: Wed, 15 Jul 2009 11:26:59 -0500

 --Apple-Mail-31-932563815
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=US-ASCII;
 	delsp=yes;
 	format=flowed
 
 
 
 
 
 Could someone please take another look at this bug?
 
 I sent the reply below to Robby Findler on 17 November '08, and  
 received no reply.  I see now that my message must have been  
 misplaced, as it didn't make it into the bug's audit trail.
 
 Thanks,
 
 David
 
 ------------------------------------------------------------------------ 
 -------------
 
 
 
 
 --Apple-Mail-31-932563815
 Content-Transfer-Encoding: 7bit
 Content-Type: application/octet-stream;
 	x-mac-type=54584554;
 	x-unix-mode=0644;
 	x-mac-creator=63537244;
 	name=repl-read.ss
 Content-Disposition: attachment;
 	filename=repl-read.ss
 
 ;; This implements the equivalent of mzscheme's read-syntax for R5RS scheme.
 ;; It has not been thoroughly tested.  Also it will read an entire file into a 
 ;; list of syntax objects, instead of returning one syntax object at a time
 
 (module repl-read mzscheme
   
   (require parser-tools/lex
            (prefix : parser-tools/lex-sre)
            parser-tools/yacc
            syntax/readerr)
   
   (define-tokens data (DATUM))
   (define-empty-tokens delim (OP CP HASHOP QUOTE QUASIQUOTE UNQUOTE UNQUOTE-SPLICING DOT EOL EOF))
   
   (define scheme-lexer
     (lexer-src-pos
      
      ;; Skip comments, without accumulating extra position information
      [(:or scheme-whitespace comment) (return-without-pos (scheme-lexer input-port))]
      
      ["#t" (token-DATUM #t)]
      ["#f" (token-DATUM #f)]
      [(:: "#\\" any-char) (token-DATUM (caddr (string->list lexeme)))]
      ["#\\space" (token-DATUM #\space)]
      ["#\\newline" (token-DATUM #\newline)]
      [(:or (:: initial (:* subsequent)) "+" "-" "...") (token-DATUM (string->symbol lexeme))]
      [#\" (token-DATUM (list->string (get-string-token input-port)))]
      [#\( 'OP]
      [#\) 'CP]
      [#\[ 'OP]
      [#\] 'CP]
      ["#(" 'HASHOP]
      [num2 (token-DATUM (string->number lexeme 2))]
      [num8 (token-DATUM (string->number lexeme 8))]
      [num10 (token-DATUM (string->number lexeme 10))]
      [num16 (token-DATUM (string->number lexeme 16))]
      ["'" 'QUOTE]
      ["`" 'QUASIQUOTE]
      ["," 'UNQUOTE]
      [",@" 'UNQUOTE-SPLICING]
      ["." 'DOT]
      [#\newline 'EOL]
      [(eof) 'EOF]))
   
   (define get-string-token
     (lexer
      [(:~ #\" #\\) (cons (car (string->list lexeme))
                          (get-string-token input-port))]
      [(:: #\\ #\\) (cons #\\ (get-string-token input-port))]
      [(:: #\\ #\") (cons #\" (get-string-token input-port))]
      [#\" null]))
   
   
   (define-lex-abbrevs
    [letter (:or (:/ "a" "z") (:/ #\A #\Z))]
    [digit (:/ #\0 #\9)]
    [scheme-whitespace (:or #\return #\tab #\space #\vtab)]
    [initial (:or letter (char-set "!$%&*/:<=>?^_~@"))]
    [subsequent (:or initial digit (char-set "+-.@"))]
    [comment (:: #\; (:* (:~ #\newline)) #\newline)]
    
    
    ;; See ${PLTHOME}/collects/syntax-color/scheme-lexer.ss for an example of
    ;; using regexp macros to avoid the cut and paste.
    ;   [numR (:: prefixR complexR)]
    ;   [complexR (:or realR
    ;                (:: realR "@" realR)
    ;                (:: realR "+" urealR "i")
    ;                (:: realR "-" urealR "i")
    ;                (:: realR "+i")
    ;                (:: realR "-i")
    ;                (:: "+" urealR "i")
    ;                (:: "-" urealR "i")
    ;                (:: "+i")
    ;                (:: "-i"))]
    ;   [realR (:: sign urealR)]
    ;   [urealR (:or uintegerR (:: uintegerR "/" uintegerR) decimalR)]
    ;   [uintegerR (:: (:+ digitR) (:* #\#))]
    ;   [prefixR (:or (:: radixR exactness)
    ;               (:: exactness radixR))]
    
    [num2 (:: prefix2 complex2)]
    [complex2 (:or real2
                   (:: real2 "@" real2)
                   (:: real2 "+" ureal2 "i")
                   (:: real2 "-" ureal2 "i")
                   (:: real2 "+i")
                   (:: real2 "-i")
                   (:: "+" ureal2 "i")
                   (:: "-" ureal2 "i")
                   (:: "+i")
                   (:: "-i"))]
    [real2 (:: sign ureal2)]
    [ureal2 (:or uinteger2 (:: uinteger2 "/" uinteger2))]
    [uinteger2 (:: (:+ digit2) (:* #\#))]
    [prefix2 (:or (:: radix2 exactness)
                  (:: exactness radix2))]
    [radix2 "#b"]
    [digit2 (:or "0" "1")]
    [num8 (:: prefix8 complex8)]
    [complex8 (:or real8
                   (:: real8 "@" real8)
                   (:: real8 "+" ureal8 "i")
                   (:: real8 "-" ureal8 "i")
                   (:: real8 "+i")
                   (:: real8 "-i")
                   (:: "+" ureal8 "i")
                   (:: "-" ureal8 "i")
                   (:: "+i")
                   (:: "-i"))]
    [real8 (:: sign ureal8)]
    [ureal8 (:or uinteger8 (:: uinteger8 "/" uinteger8))]
    [uinteger8 (:: (:+ digit8) (:* #\#))]
    [prefix8 (:or (:: radix8 exactness)
                  (:: exactness radix8))]
    [radix8 "#o"]
    [digit8 (:/ "0" "7")]
    
    [num10 (:: prefix10 complex10)]
    [complex10 (:or real10
                    (:: real10 "@" real10)
                    (:: real10 "+" ureal10 "i")
                    (:: real10 "-" ureal10 "i")
                    (:: real10 "+i")
                    (:: real10 "-i")
                    (:: "+" ureal10 "i")
                    (:: "-" ureal10 "i")
                    (:: "+i")
                    (:: "-i"))]
    [real10 (:: sign ureal10)]
    [ureal10 (:or uinteger10 (:: uinteger10 "/" uinteger10) decimal10)]
    [uinteger10 (:: (:+ digit10) (:* #\#))]
    [prefix10 (:or (:: radix10 exactness)
                   (:: exactness radix10))]
    [radix10 (:? "#d")]
    [digit10 digit]
    [decimal10 (:or (:: uinteger10 suffix)
                    (:: #\. (:+ digit10) (:* #\#) suffix)
                    (:: (:+ digit10) #\. (:* digit10) (:* #\#) suffix)
                    (:: (:+ digit10) (:+ #\#) #\. (:* #\#) suffix))]
    
    [num16 (:: prefix16 complex16)]
    [complex16 (:or real16
                    (:: real16 "@" real16)
                    (:: real16 "+" ureal16 "i")
                    (:: real16 "-" ureal16 "i")
                    (:: real16 "+i")
                    (:: real16 "-i")
                    (:: "+" ureal16 "i")
                    (:: "-" ureal16 "i")
                    "+i"
                    "-i")]
    [real16 (:: sign ureal16)]
    [ureal16 (:or uinteger16 (:: uinteger16 "/" uinteger16))]
    [uinteger16 (:: (:+ digit16) (:* #\#))]
    [prefix16 (:or (:: radix16 exactness)
                   (:: exactness radix16))]
    [radix16 "#x"]
    [digit16 (:or digit (:/ #\a #\f) (:/ #\A #\F))]
    
    
    [suffix (:or "" (:: exponent-marker sign (:+ digit10)))]
    [exponent-marker (:or "e" "s" "f" "d" "l")]
    [sign (:or "" "+" "-")]
    [exactness (:or "" "#i" "#e")])
   
   
   (define stx-for-original-property (read-syntax #f (open-input-string "original")))
   
   ;; A macro to build the syntax object
   (define-syntax (build-so stx)
     (syntax-case stx ()
       ((_ value start end)
        (with-syntax ((start-pos (datum->syntax-object 
                                  (syntax end)
                                  (string->symbol 
                                   (format "$~a-start-pos"
                                           (syntax-object->datum (syntax start))))))
                      (end-pos (datum->syntax-object 
                                (syntax end)
                                (string->symbol 
                                 (format "$~a-end-pos"
                                         (syntax-object->datum (syntax end))))))
                      (source (datum->syntax-object
                               (syntax end)
                               'source-name)))
          (syntax
           (datum->syntax-object 
            #f
            value
            (list source 
                  (position-line start-pos)
                  (position-col start-pos)
                  (position-offset start-pos)
                  (- (position-offset end-pos)
                     (position-offset start-pos)))
            stx-for-original-property))))))
   
   (define (scheme-parser source-name)
     (parser
      (src-pos)
      
      (start s)
      (end EOL EOF)
      (error (lambda (a name val start end)
               (raise-read-error 
                "read-error"
                source-name
                (position-line start)
                (position-col start)
                (position-offset start)
                (- (position-offset end)
                   (position-offset start)))))
      (tokens data delim)
      
      
      (grammar
       
       (s [(sexp-list) (reverse $1)])
             
       (sexp [(DATUM) (build-so $1 1 1)]
             [(OP sexp-list CP) (build-so (reverse $2) 1 3)]
             [(HASHOP sexp-list CP) (build-so (list->vector (reverse $2)) 1 3)]
             [(QUOTE sexp) (build-so (list 'quote $2) 1 2)]
             [(QUASIQUOTE sexp) (build-so (list 'quasiquote $2) 1 2)]
             [(UNQUOTE sexp) (build-so (list 'unquote $2) 1 2)]
             [(UNQUOTE-SPLICING sexp) (build-so (list 'unquote-splicing $2) 1 2)]
             [(OP sexp-list DOT sexp CP) (build-so (append (reverse $2) $4) 1 5)])
       
       (sexp-list [() null]
                  [(sexp-list sexp) (cons $2 $1)]))))
   
   (define (rs sn ip)
     (port-count-lines! ip)
     ((scheme-parser sn) (lambda () (scheme-lexer ip))))
     
   (define (repl)
     (parameterize 
       (
         [current-prompt-read repl-read]
         [current-eval repl-eval]
         [current-print repl-print])
       (read-eval-print-loop)))  ;)
 
   (define (repl-read)
     (rs "listener" (current-input-port)))
   
   (define (repl-eval expr)
     expr)
        
   (define (repl-print expr)
     (printf "~a~n" expr)
     (void))
     
   (provide repl)
    
   )
 
 --Apple-Mail-31-932563815
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=US-ASCII;
 	delsp=yes;
 	format=flowed
 
 
 
 
 Robby,
 
 Thank you for looking into this so promptly.
 
 My example (attached) uses a custom parser invoked through (read-eval- 
 print-loop).  The parser is slightly modified from collects/parser- 
 tools/examples/read.ss.
 
 I've experimented with the build-so syntax function from read.ss, but  
 I can't see how to overcome the discrepancy between the lexeme and  
 the position information.
 
 Thanks,
 
 David
 
 
 
 
 
 On Nov 16, 2008, at 8:59 PM, Robby Findler wrote:
 
 > I don't have the attachment yet, but a simple test as below works
 > properly (the "1 2<cr>3 4<cr>" I typed myself, as with the "5 6<cr>7
 > 8<cr>").
 >
 > Maybe you can make an example of a similar simplicity? That would  
 > help a lot.
 >
 > Thanks,
 > Robby
 >
 > Welcome to DrScheme, version 4.1.2.4-svn12nov2008 [3m].
 > Language: Module; memory limit: 128 megabytes.
 >> (map syntax-line (list (read-syntax) (read-syntax) (read-syntax)  
 >> (read-syntax)))
 > 1 2
 > 3 4
 > (4 4 5 5)
 >> (map syntax-line (list (read-syntax) (read-syntax) (read-syntax)  
 >> (read-syntax)))
 > 5 6
 > 7 8
 > (8 8 9 9)
 >>
 >
 > On Sun, Nov 16, 2008 at 8:48 PM,  <hdg@cox.net> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9919
 >>
 >> Reported by David Goering for release: 4.1.2
 >>
 >> *** Description:
 >> In an interactive session managed by a REPL lines of input in the  
 >> listener are interspersed with lines of output.  The syntax object  
 >> for the first token read on an input line is incorrently given a  
 >> start position at the end of the previous input line and spans the  
 >> intervening lines of output.  The lexeme is nonetheless correct.
 >>
 >> I'm writing an indentation-aware parser. Correct location  
 >> information is essential.
 >>
 >> *** How to repeat:
 >> 1. Run the attached repl-read.ss.
 >> 2. In the interactions window enter "(repl)"
 >> 3. In the text box enter "1 2 <CR>". Two syntax objects will be  
 >> displayed.
 >> 4. In the next text box enter "3 4 <CR". Two more syntax object  
 >> will be displayed.
 >> 5. Expand the syntax objects and compare the location information.  
 >> Note that 2 and 3 are shown to be on the same line.
 >>
 >> *** Environment:
 >> macosx "Darwin ip68-103-104-96.ks.ok.cox.net 8.11.1 Darwin Kernel  
 >> Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/ 
 >> RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 74301844
 >>
 >> Collections:
 >> (("/Users/hdg/Library/PLT Scheme/4.1.2/collects" non-existent- 
 >> path) ("/Applications/PLT Scheme v4.1.2/collects" ".DS_Store"  
 >> "afm" "algol60" "browser" "combinator-parser" "compiler" "config"  
 >> "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace"  
 >> "ffi" "file" "framework" "frtime" "games" "graphics" "gui- 
 >> debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info- 
 >> domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred"  
 >> "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"  
 >> "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs"  
 >> "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble"  
 >> "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"  
 >> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"  
 >> "test-box-recovery" "test-engine" "tex2page" "texpict" "trace"  
 >> "typed-scheme" "version" "web-server" "wxme" "xml"))
 >> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t  
 >> debug) (default) #() "\n"))
 >>
 >>
 
 --Apple-Mail-31-932563815--

