From eli@barzilay.org Fri Jul  1 00:46:03 2005
Received: from localhost (winooski.ccs.neu.edu [129.10.115.117])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j614k0v2004015
	for <bugs>; Fri, 1 Jul 2005 00:46:00 -0400
Message-Id: <200507010446.j614k0v2004015@champlain.ccs.neu.edu>
Date: Fri, 1 Jul 2005 00:46:00 -0400
From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Subject: #! and mzc, again

>Number:         7476
>Category:       mzc
>Synopsis:       #! and mzc, again
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jul 01 00:50:00 -0400 2005
>Last-Modified:  Wed Nov 23 09:10:00 -0500 2005
>Originator:     Eli Barzilay
>Organization:
titan
>Submitter-Id:   unknown
>Release:        209
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.10-1.771_FC2 #1 Mon Mar 28 00:50:14 EST 2005 i686 i686 i386 GNU/Linux" (i386-linux) (get-display-depth) = 16
Docs Installed:
("/home/eli/plt/collects/doc/misclib" "/home/eli/plt/collects/doc/plot" "/home/eli/plt/collects/doc/tools" "/home/eli/plt/collects/doc/srfi" "/home/eli/plt/collects/doc/profj-advanced" "/home/eli/plt/collects/doc/drscheme" "/home/eli/plt/collects/doc/profj-beginner" "/home/eli/plt/collects/doc/tour" "/home/eli/plt/collects/doc/t-y-scheme" "/home/eli/plt/collects/doc/teachpack" "/home/eli/plt/collects/doc/tex2page" "/home/eli/plt/collects/doc/profj-intermediate" "/home/eli/plt/collects/doc/mzscheme" "/home/eli/plt/collects/doc/beginning" "/home/eli/plt/collects/doc/swindle" "/home/eli/plt/collects/doc/mzlib" "/home/eli/plt/collects/doc/help" "/home/eli/plt/collects/doc/insidemz" "/home/eli/plt/collects/doc/web-server" "/home/eli/plt/collects/doc/framework" "/home/eli/plt/collects/doc/mred" "/home/eli/plt/collects/doc/intermediate" "/home/eli/plt/collects/doc/advanced" "/home/eli/plt/collects/doc/mzc" "/home/eli/plt/collects/doc/beginning-abbr" "/home/eli/plt/collects/doc/intermediate-lambda" "/home/eli/plt/collects/doc/r5rs")
Collections: 
(("/home/eli/scheme/my-plt" ("pics")) ("/home/eli/.plt-scheme/209/collects" ("CSU660" "plai" "webit")) ("/home/eli/plt/collects" ("browser" "errortrace" "htdp" "htdch" "version" "slideshow" "setup" "defaults" "make" "slatex" "openssl" "embedded-gui" "doc" "mred" "syntax-color" "dynext" "net" "framework" "games" "ssax" "web-server" "profjWizard" "help" "mzlib" "swindle" "graphics" "compiler" "mzscheme" "eopl" "xml" "lang" "string-constants" "frtime" "tex2page" "slibinit" "hierlist" "trace" "syntax" "html" "mrlib" "icons" "profj" "afm" "launcher" "test-suite" "drscheme" "algol60" "parser-tools" "srfi" "sgl" "planet" "plot" "waterworld" "preprocessor" "texpict" "stepper")))
 
Human Language: english
 
>Description:
I managed to locate a PR that I submitted a long time ago: PR6064,
it seems that at some point it creeped in again, since mzc in both 209
and 299 suffer from the same thing.

Maybe making #!/ into a line comment only if it appears at position 0
in the input stream will make it and many other problems go away?

>How-To-Repeat:
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by mflatt at Tue, 22 Nov 2005 17:36:28 -0500
Reason>>> I'm not enthusiastic about making the lexical syntax
depend on port positions, so I've just fixed the immediate
problem for now. I at least added `strip-shell-command-
start'
to `(lib "port.ss")' so we don't have to keep
re-implementing the skipping code.

(Note: native-code compilation did still handle #!
correctly, which was probably the complaint in the
original PR. Still, there's certainly a problem with
implementing this consistently.)

From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Cc: mflatt@cs.utah.edu
Subject: Re: mzc/7476 #! and mzc, again
Date: Tue, 22 Nov 2005 17:57:05 -0500

 On Nov 22, mflatt@cs.utah.edu wrote:
 > 
 > I'm not enthusiastic about making the lexical syntax depend on port
 > positions, so I've just fixed the immediate problem for now.
 
 Why not?  It seems like that kills all birds, present and future, with
 one stone which is exactly why I liked it...  It seems like a fine
 behavior as long as it's documented.  Perhaps a little more
 restrictive -- #! behaves as a line comment only if it is at position
 0 *and* if the port is a file...
 
 And if you're worried about some possible #!eof extension, then yet
 another restriction could be to make it a comment only if followed by
 " */", but maybe some people like relative paths there...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: mzc/7476 #! and mzc, again
Date: Tue, 22 Nov 2005 20:58:13 -0700

 At Tue, 22 Nov 2005 17:57:05 -0500, Eli Barzilay wrote:
 > On Nov 22, mflatt@cs.utah.edu wrote:
 > > 
 > > I'm not enthusiastic about making the lexical syntax depend on port
 > > positions, so I've just fixed the immediate problem for now.
 > 
 > Why not?
 
 I think it interacts badly with port compositions. For example, it's
 easy to make sub-ports that start in the middle of another port, to
 pull sections of a string out of a port, and so on. Restricting to file
 ports doesn't work with functions like `reencode-input-port'.
 
 Overall, I think it makes more sense to have the programmer declare the
 initial read. It seems like the same sort of problem as with byte-order
 marks in Unicode encodings --- which ultimately works only when the
 programmer declares explicitly the start of a stream where a BOM should
 be recognized.
 
 One difference compared to BOM is that #! is currently a syntax error,
 so we could make it a comment form. Previously, I've imagined that #!
 would used eventually for literals like #!eof. But maybe in v301 we
 should experiment with making #! a comment.
 
 Matthew
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: mzc/7476 #! and mzc, again
Date: Wed, 23 Nov 2005 02:52:18 -0500

 On Nov 22, Matthew Flatt wrote:
 > At Tue, 22 Nov 2005 17:57:05 -0500, Eli Barzilay wrote:
 > > On Nov 22, mflatt@cs.utah.edu wrote:
 > > > 
 > > > I'm not enthusiastic about making the lexical syntax depend on port
 > > > positions, so I've just fixed the immediate problem for now.
 > > 
 > > Why not?
 > 
 > I think it interacts badly with port compositions. For example, it's
 > easy to make sub-ports that start in the middle of another port, to
 > pull sections of a string out of a port, and so on. Restricting to
 > file ports doesn't work with functions like `reencode-input-port'.
 
 OK, this makes sense.
 
 
 > Overall, I think it makes more sense to have the programmer declare
 > the initial read. It seems like the same sort of problem as with
 > byte-order marks in Unicode encodings --- which ultimately works
 > only when the programmer declares explicitly the start of a stream
 > where a BOM should be recognized.
 > 
 > One difference compared to BOM is that #! is currently a syntax
 > error, so we could make it a comment form. Previously, I've imagined
 > that #!  would used eventually for literals like #!eof. But maybe in
 > v301 we should experiment with making #! a comment.
 
 The problem is that it looks like there is absolutely no agreement on
 what #! does --
 
 * Scsh and Guile use #! ... !# for comments
 
 * Bigloo uses #! as a line comment in *some* cases (looks like when it
   is followed by a space), ignores it and the following word in other
   cases (like #!foo), produces special values in some cases (the dsssl
   stuff -- #!optional, #!key, #!rest), and an error in yet other cases
   (like #!(+ 1 2)).
 
 * Chez produces an error
 
 * MIT Scheme makes it an error except for some known named constants
   (the dsssl ones).
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: mzc/7476 #! and mzc, again
Date: Wed, 23 Nov 2005 07:05:24 -0700

 At Wed, 23 Nov 2005 02:52:18 -0500, Eli Barzilay wrote:
 > The problem is that it looks like there is absolutely no agreement on
 > what #! does --
 > 
 > * Scsh and Guile use #! ... !# for comments
 > 
 > * Bigloo uses #! as a line comment in *some* cases (looks like when it
 >   is followed by a space), ignores it and the following word in other
 >   cases (like #!foo), produces special values in some cases (the dsssl
 >   stuff -- #!optional, #!key, #!rest), and an error in yet other cases
 >   (like #!(+ 1 2)).
 > 
 > * Chez produces an error
 > 
 > * MIT Scheme makes it an error except for some known named constants
 >   (the dsssl ones).
 
 Chez recognizes #!eof, at least. So, this points to the idea that #!
 could start a comment as long as it's not followed by eof, etc.
 
 I'm more and more convinced that we should try this in v301.
 
 Matthew
 
