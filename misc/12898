From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jul 12 12:07:07 2012
Received: from mail-vc0-f172.google.com (mail-vc0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q6CG74Q4024326
	for <bugs@bugs.plt-scheme.org>; Thu, 12 Jul 2012 12:07:05 -0400
Message-Id: <201207121607.q6CG70uJ024320@champlain.ccs.neu.edu>
Date: Thu, 12 Jul 2012 12:07:00 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: Futures Visualizer GUI issues

>Number:         12898
>Category:       misc
>Synopsis:       Futures Visualizer GUI issues
>Class:          sw-bug
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Jul 12 12:08:01 -0400 2012
>Last-Modified:  Tue Jul 24 20:21:40 -0400 2012
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.14--2012-07-10(685f6597/d)
>Environment:
unix "Linux schroder 2.6.38-15-generic #61-Ubuntu SMP Tue Jun 12 19:43:39 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 399421592
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/neil/.racket/5.3.0.14/collects"
 (non-existent-path))
("/home/neil/plt-math/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-debugger" "framework" "web-server" "d!
 einprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f ((main) (test))))
>Description:
I can't bring up all these GUI issues without tempering them with some praise. The Visualizer is very useful, looks modern, and is immediately easy to understand and work with.

That said, let's fix these problems:


Dragging
--------
Dragging the divider between the timeline and the tree doesn't work unless the mouse pointer remains within about 40px from the divider.

Dragging the divider between blocks/syncs and the timeline usually loses track of an offset somewhere, resulting in inconsistent mouse motion and GUI response. For example, it appears that the GUI thinks the divider is to the right of the mouse after dragging the divider left.

Dragging the divider between the lower panel and the two upper panels doesn't work at all.


Layout
------
The Visualizer starts tall enough to automatically maximize on my 1920x1080 monitor, and can't be vertically shrunk to fit. (Ubuntu automatically maximizes windows that are too tall.)

The blocks and syncs panel could be thinner. Alternatively, move the future creation tree to above it and extend the timeline rightward. This would give the timeline, which is most used, more space. It would also present the information in a top-down fashion, in left-to-right reading order: overall futures (tree), at-a-glance events (timeline), event summary (blocks and syncs panel), then event details.

Could the blocks and syncs panel start with expanded entries?

Is a block the same thing as a barricade?

Probably don't need the status bar, or memory and GC indicators.


Mousing
-------
Mouse-wheel scroll doesn't work on the timeline window.

Mousing over events in the timeline can be very slow if there are many events. Consider delaying drawing the lines until the mouse has hovered over a single event for 100ms. (Check Syntax does this with its arrows.)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12898: Futures Visualizer GUI issues
Date: Thu, 12 Jul 2012 14:23:45 -0500

 The dragging problem is because the dragable panel does not work well
 when the paint callbacks for other things in the window take a long
 time. I'll look into that (but the paint callback should probably be
 fixed to be faster).
 
 Robby
 
 On Thu, Jul 12, 2012 at 11:08 AM,  <neil.toronto@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12898
 >
 > Reported by Neil Toronto for release: 5.3.0.14--2012-07-10(685f6597/d)
 >
 > *** Description:
 > I can't bring up all these GUI issues without tempering them with some praise. The Visualizer is very useful, looks modern, and is immediately easy to understand and work with.
 >
 > That said, let's fix these problems:
 >
 >
 > Dragging
 > --------
 > Dragging the divider between the timeline and the tree doesn't work unless the mouse pointer remains within about 40px from the divider.
 >
 > Dragging the divider between blocks/syncs and the timeline usually loses track of an offset somewhere, resulting in inconsistent mouse motion and GUI response. For example, it appears that the GUI thinks the divider is to the right of the mouse after dragging the divider left.
 >
 > Dragging the divider between the lower panel and the two upper panels doesn't work at all.
 >
 >
 > Layout
 > ------
 > The Visualizer starts tall enough to automatically maximize on my 1920x1080 monitor, and can't be vertically shrunk to fit. (Ubuntu automatically maximizes windows that are too tall.)
 >
 > The blocks and syncs panel could be thinner. Alternatively, move the future creation tree to above it and extend the timeline rightward. This would give the timeline, which is most used, more space. It would also present the information in a top-down fashion, in left-to-right reading order: overall futures (tree), at-a-glance events (timeline), event summary (blocks and syncs panel), then event details.
 >
 > Could the blocks and syncs panel start with expanded entries?
 >
 > Is a block the same thing as a barricade?
 >
 > Probably don't need the status bar, or memory and GC indicators.
 >
 >
 > Mousing
 > -------
 > Mouse-wheel scroll doesn't work on the timeline window.
 >
 > Mousing over events in the timeline can be very slow if there are many events. Consider delaying drawing the lines until the mouse has hovered over a single event for 100ms. (Check Syntax does this with its arrows.)
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux schroder 2.6.38-15-generic #61-Ubuntu SMP Tue Jun 12 19:43:39 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 399421592
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/neil/.racket/5.3.0.14/collects"
 >  (non-existent-path))
 > ("/home/neil/plt-math/collects"
 >  ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-debugger" "framework" "web-server" "d!
 >  einprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f ((main) (test))))
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12898: Futures Visualizer GUI issues
Date: Thu, 12 Jul 2012 14:25:28 -0500

 Eg, compare how dragging works in this program with and without the sleep.
 
 
 #lang racket/gui
 (require framework)
 
 (define f (new frame% [width 1000] [height 400] [label ""]))
 (define p (new panel:horizontal-dragable% [parent f]))
 (define c1 (new canvas%
                 [parent p]
                 [paint-callback (λ (c dc) (draw c dc "red"))]))
 (define c2 (new canvas%
                 [parent p]
                 [paint-callback (λ (c dc) (draw c dc "blue"))]))
 
 (define (draw c dc color)
   (define-values (cw ch) (send c get-client-size))
   (send dc set-smoothing 'aligned)
   (send dc set-brush color 'solid)
   (send dc set-pen "black" 1 'transparent)
   (send dc draw-ellipse 0 0 cw ch)
   (sleep .4))
 
 (send f show #t)
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12898: Futures Visualizer GUI issues
Date: Thu, 12 Jul 2012 20:15:09 -0500

 Looking into this more, I think that the panel:dragable level is
 working as well as it can and that what needs to be done is improve
 the running time of the repainting of the window.
 
 Probably the right thing to do is to figure out what is the slow
 aspect of redrawing (probably creating the picts and all that) and
 then come up with some stop-gap thing that always runs fast (drawing
 from some fixed bitmap) and then only re-create the bitmap (ie bring
 the drawing canvas up to date with how it is supposed to look) if
 there haven't been any events in a while (100 msec or something).
 
 James: you and I can talk about how to think about this problem and
 we'll probably figure out a good way to structure this code. (I don't
 quite see how it works now, but probably we can work it out together.)
 
 Robby
 
 On Thu, Jul 12, 2012 at 2:25 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Eg, compare how dragging works in this program with and without the sleep.
 >
 >
 > #lang racket/gui
 > (require framework)
 >
 > (define f (new frame% [width 1000] [height 400] [label ""]))
 > (define p (new panel:horizontal-dragable% [parent f]))
 > (define c1 (new canvas%
 >                 [parent p]
 >                 [paint-callback (λ (c dc) (draw c dc "red"))]))
 > (define c2 (new canvas%
 >                 [parent p]
 >                 [paint-callback (λ (c dc) (draw c dc "blue"))]))
 >
 > (define (draw c dc color)
 >   (define-values (cw ch) (send c get-client-size))
 >   (send dc set-smoothing 'aligned)
 >   (send dc set-brush color 'solid)
 >   (send dc set-pen "black" 1 'transparent)
 >   (send dc draw-ellipse 0 0 cw ch)
 >   (sleep .4))
 >
 > (send f show #t)
 
From: James Swaine <james.swaine@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12898: Futures Visualizer GUI issues
Date: Thu, 12 Jul 2012 20:21:11 -0500

 --f46d042ef4f144a2af04c4abe584
 Content-Type: text/plain; charset=ISO-8859-7
 Content-Transfer-Encoding: quoted-printable
 
 On Thu, Jul 12, 2012 at 8:15 PM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > Looking into this more, I think that the panel:dragable level is
 > working as well as it can and that what needs to be done is improve
 > the running time of the repainting of the window.
 >
 > Probably the right thing to do is to figure out what is the slow
 > aspect of redrawing (probably creating the picts and all that) and
 > then come up with some stop-gap thing that always runs fast (drawing
 > from some fixed bitmap) and then only re-create the bitmap (ie bring
 > the drawing canvas up to date with how it is supposed to look) if
 > there haven't been any events in a while (100 msec or something).
 >
 > James: you and I can talk about how to think about this problem and
 > we'll probably figure out a good way to structure this code. (I don't
 > quite see how it works now, but probably we can work it out together.)
 >
 
 Yes, maybe we can talk when we meet tomorrow.
 
 
 >
 > Robby
 >
 > On Thu, Jul 12, 2012 at 2:25 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > Eg, compare how dragging works in this program with and without the
 > sleep.
 > >
 > >
 > > #lang racket/gui
 > > (require framework)
 > >
 > > (define f (new frame% [width 1000] [height 400] [label ""]))
 > > (define p (new panel:horizontal-dragable% [parent f]))
 > > (define c1 (new canvas%
 > >                 [parent p]
 > >                 [paint-callback (=EB (c dc) (draw c dc "red"))]))
 > > (define c2 (new canvas%
 > >                 [parent p]
 > >                 [paint-callback (=EB (c dc) (draw c dc "blue"))]))
 > >
 > > (define (draw c dc color)
 > >   (define-values (cw ch) (send c get-client-size))
 > >   (send dc set-smoothing 'aligned)
 > >   (send dc set-brush color 'solid)
 > >   (send dc set-pen "black" 1 'transparent)
 > >   (send dc draw-ellipse 0 0 cw ch)
 > >   (sleep .4))
 > >
 > > (send f show #t)
 >
 
 --f46d042ef4f144a2af04c4abe584
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <br><br><div class=3D"gmail_quote">On Thu, Jul 12, 2012 at 8:15 PM, Robby F=
 indler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu"=
  target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><bl=
 ockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #=
 ccc solid;padding-left:1ex">
 Looking into this more, I think that the panel:dragable level is<br>
 working as well as it can and that what needs to be done is improve<br>
 the running time of the repainting of the window.<br>
 <br>
 Probably the right thing to do is to figure out what is the slow<br>
 aspect of redrawing (probably creating the picts and all that) and<br>
 then come up with some stop-gap thing that always runs fast (drawing<br>
 from some fixed bitmap) and then only re-create the bitmap (ie bring<br>
 the drawing canvas up to date with how it is supposed to look) if<br>
 there haven&#39;t been any events in a while (100 msec or something).<br>
 <br>
 James: you and I can talk about how to think about this problem and<br>
 we&#39;ll probably figure out a good way to structure this code. (I don&#39=
 ;t<br>
 quite see how it works now, but probably we can work it out together.)<br><=
 /blockquote><div><br></div><div>Yes, maybe we can talk when we meet tomorro=
 w.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:=
 0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 
 <span class=3D"HOEnZb"><font color=3D"#888888"><br>
 Robby<br>
 </font></span><div class=3D"im HOEnZb"><br>
 On Thu, Jul 12, 2012 at 2:25 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 </div><div class=3D"HOEnZb"><div class=3D"h5">&gt; Eg, compare how dragging=
  works in this program with and without the sleep.<br>
 &gt;<br>
 &gt;<br>
 &gt; #lang racket/gui<br>
 &gt; (require framework)<br>
 &gt;<br>
 &gt; (define f (new frame% [width 1000] [height 400] [label &quot;&quot;]))=
 <br>
 &gt; (define p (new panel:horizontal-dragable% [parent f]))<br>
 &gt; (define c1 (new canvas%<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [parent p]<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [paint-callbac=
 k (=CE=BB (c dc) (draw c dc &quot;red&quot;))]))<br>
 &gt; (define c2 (new canvas%<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [parent p]<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [paint-callbac=
 k (=CE=BB (c dc) (draw c dc &quot;blue&quot;))]))<br>
 &gt;<br>
 &gt; (define (draw c dc color)<br>
 &gt; =C2=A0 (define-values (cw ch) (send c get-client-size))<br>
 &gt; =C2=A0 (send dc set-smoothing &#39;aligned)<br>
 &gt; =C2=A0 (send dc set-brush color &#39;solid)<br>
 &gt; =C2=A0 (send dc set-pen &quot;black&quot; 1 &#39;transparent)<br>
 &gt; =C2=A0 (send dc draw-ellipse 0 0 cw ch)<br>
 &gt; =C2=A0 (sleep .4))<br>
 &gt;<br>
 &gt; (send f show #t)<br>
 </div></div></blockquote></div><br>
 
 --f46d042ef4f144a2af04c4abe584--

