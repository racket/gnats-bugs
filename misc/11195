From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Sep 12 13:23:43 2010
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o8CHNdRD027692
	for <bugs@bugs.plt-scheme.org>; Sun, 12 Sep 2010 13:23:39 -0400
Message-Id: <201009121723.o8CHNbPN027684@champlain.ccs.neu.edu>
Date: Sun, 12 Sep 2010 13:23:37 -0400
From: wmfarr@gmail.com
To: bugs@racket-lang.org
Subject: Building racket with --enable-places causes blame errors in define/contract

>Number:         11195
>Category:       misc
>Synopsis:       Building racket with --enable-places causes blame errors in define/contract
>Class:          sw-bug
>Responsible:    mflatt
>Notify-List:    tewk@cs.utah.edu, robby@racket-lang.org
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Sep 12 13:24:01 -0400 2010
>Last-Modified:  Wed Sep 15 21:17:51 -0400 2010
>Originator:     Will M. Farr
>Organization:
plt
>Submitter-Id:   unknown
>Release:        Latest git
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.9) Gecko/20100824 Firefox/3.6.9
>Description:
Building racket with --enable-places on my Mac OS 10.6.4 machine (Core 2 Duo, 64-bit mode, with --enable-mac64 and --disable-gracket) results in errors in the contract and mzlib/contract sections of the test suite because the surrounding context is incorrectly identified for blame assignment in define/contract contracts.  I've attached test suite output below.

-----------
>>> racket/quiet.rktl: running...
Section(basic)
Section(unicode)
Section(rx)
Section(reading)
Section(readtable)
Section(printing)
Section(macro)
Section(syntax)
Section(procs)
Section(stx)
Section(module)
Section(numbers)
Section(unsafe)
Section(object)
Section(struct)
Section(unit)
Section(unit/sig)
Section(threads)
Section(logger)
Section(synchronization)
Section(deep)
Section(continuation-marks)
Section(prompt)
Section(wills)
Section(namespaces)
Section(modprot)
Section(chaperones)
Section(parameters)
Section(port)
Section(file)
Section(udp)
Section(file-after-udp)
Section(path)
Section(optimization)
Section(names)
Section(for)
Section(list)
Section(math)
Section(vector)
Section(function)
Section(dict)
Section(contract)

Performed 3084 expression tests (1891 value expressions, 1193 exn expressions)
and 2386 exception field tests.

Errors were:
(Section (got expected (call)))
((contract) (#(struct:exn:fail:contract:blame "foo-dc13: top-level broke the contract (-> number? number?) on foo-dc13; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc13 scheme/base (require scheme/contract) (define/contract (foo-dc13 n) (-> number? number?) (+ n 1)) (foo-dc13 #t)))) (eval (quote (require (quote foo-dc13)))))))
((contract) (#(struct:exn:fail:contract:blame "foo-dc14: top-level broke the contract (-> number? number?) on foo-dc14; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc14 scheme/base (require scheme/contract) (provide foo-dc14) (define/contract (foo-dc14 n) (-> number? number?) (+ n 1))))) (eval (quote (module bar-dc14 scheme/base (require (quote foo-dc14)) (foo-dc14 #t)))) (eval (quote (require (quote bar-dc14)))))))
((contract) (#(struct:exn:fail:contract:blame "foo-dc15: top-level broke the contract (-> number? number?) on foo-dc15; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc15 scheme/base (require scheme/contract) (provide foo-dc15) (define/contract (foo-dc15 n) (-> number? number?) (+ n 1))))) (eval (quote (require (quote foo-dc15)))) (eval (quote (foo-dc15 #t))))))
((contract) (#(struct:exn:fail:contract:blame "contract-test-suite3: top-level broke the contract integer? on x; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (let () (eval (quote (module contract-test-suite3 scheme/base (require scheme/contract) (define x #f) (provide/contract (x integer?))))) (eval (quote (require (quote contract-test-suite3)))) (eval (quote x)))))
((contract) (#(struct:exn:fail:contract:blame "pos: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module pos scheme/base (require scheme/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote pos)))))))
((contract) (#(struct:exn:fail:contract:blame "neg: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module neg scheme/base (require scheme/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote neg)))))))
(Other messages report successful tests of error-handling behavior.)
Section(fixnum)
Section(flonum)
Section(mpair)
Section(etc)
Section(structlib)
Section(async-channel)
Section(restart)
Section(mzlib-string)
Section(path)
Section(filelib)
Section(port)
Section(threadlib)
Section(sets)
Section(date)
Section(compat)
Section(command-line)
Section(pconvert)
Section(pretty)
Section(control)
Section(serialization)
Section(packages)
Section(mzlib/contract)

Performed 1790 expression tests (1132 value expressions, 658 exn expressions)
and 1316 exception field tests.

Errors were:
(Section (got expected (call)))
((mzlib/contract) (#(struct:exn:fail:contract:blame "contract-test-suite3: top-level broke the contract integer? on x; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (let () (eval (quote (module contract-test-suite3 mzscheme (require mzlib/contract) (define x #f) (provide/contract (x integer?))))) (eval (quote (require (quote contract-test-suite3)))) (eval (quote x)))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "pos: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module pos mzscheme (require mzlib/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote pos)))))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "neg: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module neg mzscheme (require mzlib/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote neg)))))))
(Other messages report successful tests of error-handling behavior.)
Section(sandbox)

Performed 279 expression tests (279 value expressions, 0 exn expressions)
and 0 exception field tests.

Errors were:
(Section (got expected (call)))
((sandbox) ((bad-exception-message: "with-limit: out of time") #t (#<procedure:e-match?> "out of memor(?:y)" #<procedure:run> #<procedure:...ket/sandbox.rktl:71:55>)))
((sandbox) (#f #t (#<procedure:run*> #<procedure:...ket/sandbox.rktl:67:55>)))
(Other messages report successful tests of error-handling behavior.)
Section(shared)
Section(kw)
Section(macrolib)

Performed 141207 expression tests (127997 value expressions, 13210 exn expressions)
and 27950 exception field tests.

Errors were:
(Section (got expected (call)))
((contract) (#(struct:exn:fail:contract:blame "foo-dc13: top-level broke the contract (-> number? number?) on foo-dc13; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc13 scheme/base (require scheme/contract) (define/contract (foo-dc13 n) (-> number? number?) (+ n 1)) (foo-dc13 #t)))) (eval (quote (require (quote foo-dc13)))))))
((contract) (#(struct:exn:fail:contract:blame "foo-dc14: top-level broke the contract (-> number? number?) on foo-dc14; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc14 scheme/base (require scheme/contract) (provide foo-dc14) (define/contract (foo-dc14 n) (-> number? number?) (+ n 1))))) (eval (quote (module bar-dc14 scheme/base (require (quote foo-dc14)) (foo-dc14 #t)))) (eval (quote (require (quote bar-dc14)))))))
((contract) (#(struct:exn:fail:contract:blame "foo-dc15: top-level broke the contract (-> number? number?) on foo-dc15; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc15 scheme/base (require scheme/contract) (provide foo-dc15) (define/contract (foo-dc15 n) (-> number? number?) (+ n 1))))) (eval (quote (require (quote foo-dc15)))) (eval (quote (foo-dc15 #t))))))
((contract) (#(struct:exn:fail:contract:blame "contract-test-suite3: top-level broke the contract integer? on x; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (let () (eval (quote (module contract-test-suite3 scheme/base (require scheme/contract) (define x #f) (provide/contract (x integer?))))) (eval (quote (require (quote contract-test-suite3)))) (eval (quote x)))))
((contract) (#(struct:exn:fail:contract:blame "pos: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module pos scheme/base (require scheme/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote pos)))))))
((contract) (#(struct:exn:fail:contract:blame "neg: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module neg scheme/base (require scheme/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote neg)))))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "contract-test-suite3: top-level broke the contract integer? on x; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (let () (eval (quote (module contract-test-suite3 mzscheme (require mzlib/contract) (define x #f) (provide/contract (x integer?))))) (eval (quote (require (quote contract-test-suite3)))) (eval (quote x)))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "pos: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module pos mzscheme (require mzlib/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote pos)))))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "neg: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module neg mzscheme (require mzlib/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote neg)))))))
((sandbox) ((bad-exception-message: "with-limit: out of time") #t (#<procedure:e-match?> "out of memor(?:y)" #<procedure:run> #<procedure:...ket/sandbox.rktl:71:55>)))
((sandbox) (#f #t (#<procedure:run*> #<procedure:...ket/sandbox.rktl:67:55>)))
(Other messages report successful tests of error-handling behavior.)
Section(moddep)
Section(boundmap)
Section(id-table)
Section(cm)
Section(module-reader)

Performed 141779 expression tests (128560 value expressions, 13219 exn expressions)
and 27968 exception field tests.

Errors were:
(Section (got expected (call)))
((contract) (#(struct:exn:fail:contract:blame "foo-dc13: top-level broke the contract (-> number? number?) on foo-dc13; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc13 scheme/base (require scheme/contract) (define/contract (foo-dc13 n) (-> number? number?) (+ n 1)) (foo-dc13 #t)))) (eval (quote (require (quote foo-dc13)))))))
((contract) (#(struct:exn:fail:contract:blame "foo-dc14: top-level broke the contract (-> number? number?) on foo-dc14; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc14 scheme/base (require scheme/contract) (provide foo-dc14) (define/contract (foo-dc14 n) (-> number? number?) (+ n 1))))) (eval (quote (module bar-dc14 scheme/base (require (quote foo-dc14)) (foo-dc14 #t)))) (eval (quote (require (quote bar-dc14)))))))
((contract) (#(struct:exn:fail:contract:blame "foo-dc15: top-level broke the contract (-> number? number?) on foo-dc15; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc15 scheme/base (require scheme/contract) (provide foo-dc15) (define/contract (foo-dc15 n) (-> number? number?) (+ n 1))))) (eval (quote (require (quote foo-dc15)))) (eval (quote (foo-dc15 #t))))))
((contract) (#(struct:exn:fail:contract:blame "contract-test-suite3: top-level broke the contract integer? on x; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (let () (eval (quote (module contract-test-suite3 scheme/base (require scheme/contract) (define x #f) (provide/contract (x integer?))))) (eval (quote (require (quote contract-test-suite3)))) (eval (quote x)))))
((contract) (#(struct:exn:fail:contract:blame "pos: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module pos scheme/base (require scheme/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote pos)))))))
((contract) (#(struct:exn:fail:contract:blame "neg: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module neg scheme/base (require scheme/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote neg)))))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "contract-test-suite3: top-level broke the contract integer? on x; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (let () (eval (quote (module contract-test-suite3 mzscheme (require mzlib/contract) (define x #f) (provide/contract (x integer?))))) (eval (quote (require (quote contract-test-suite3)))) (eval (quote x)))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "pos: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module pos mzscheme (require mzlib/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote pos)))))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "neg: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module neg mzscheme (require mzlib/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote neg)))))))
((sandbox) ((bad-exception-message: "with-limit: out of time") #t (#<procedure:e-match?> "out of memor(?:y)" #<procedure:run> #<procedure:...ket/sandbox.rktl:71:55>)))
((sandbox) (#f #t (#<procedure:run*> #<procedure:...ket/sandbox.rktl:67:55>)))
(Other messages report successful tests of error-handling behavior.)
Section(version)
Section(foreign)
Section(uni-norm)

Performed 494141 expression tests (480922 value expressions, 13219 exn expressions)
and 27968 exception field tests.

Errors were:
(Section (got expected (call)))
((contract) (#(struct:exn:fail:contract:blame "foo-dc13: top-level broke the contract (-> number? number?) on foo-dc13; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc13 scheme/base (require scheme/contract) (define/contract (foo-dc13 n) (-> number? number?) (+ n 1)) (foo-dc13 #t)))) (eval (quote (require (quote foo-dc13)))))))
((contract) (#(struct:exn:fail:contract:blame "foo-dc14: top-level broke the contract (-> number? number?) on foo-dc14; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc14 scheme/base (require scheme/contract) (provide foo-dc14) (define/contract (foo-dc14 n) (-> number? number?) (+ n 1))))) (eval (quote (module bar-dc14 scheme/base (require (quote foo-dc14)) (foo-dc14 #t)))) (eval (quote (require (quote bar-dc14)))))))
((contract) (#(struct:exn:fail:contract:blame "foo-dc15: top-level broke the contract (-> number? number?) on foo-dc15; expected <number?>, given: #t" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module foo-dc15 scheme/base (require scheme/contract) (provide foo-dc15) (define/contract (foo-dc15 n) (-> number? number?) (+ n 1))))) (eval (quote (require (quote foo-dc15)))) (eval (quote (foo-dc15 #t))))))
((contract) (#(struct:exn:fail:contract:blame "contract-test-suite3: top-level broke the contract integer? on x; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (let () (eval (quote (module contract-test-suite3 scheme/base (require scheme/contract) (define x #f) (provide/contract (x integer?))))) (eval (quote (require (quote contract-test-suite3)))) (eval (quote x)))))
((contract) (#(struct:exn:fail:contract:blame "pos: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module pos scheme/base (require scheme/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote pos)))))))
((contract) (#(struct:exn:fail:contract:blame "neg: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module neg scheme/base (require scheme/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote neg)))))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "contract-test-suite3: top-level broke the contract integer? on x; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (let () (eval (quote (module contract-test-suite3 mzscheme (require mzlib/contract) (define x #f) (provide/contract (x integer?))))) (eval (quote (require (quote contract-test-suite3)))) (eval (quote x)))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "pos: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module pos mzscheme (require mzlib/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote pos)))))))
((mzlib/contract) (#(struct:exn:fail:contract:blame "neg: top-level broke the contract integer? on i; expected <integer?>, given: #f" #<continuation-mark-set> #<blame>) exn-type (begin (eval (quote (module neg mzscheme (require mzlib/contract) (define i #f) (provide/contract (i integer?))))) (eval (quote (require (quote neg)))))))
((sandbox) ((bad-exception-message: "with-limit: out of time") #t (#<procedure:e-match?> "out of memor(?:y)" #<procedure:run> #<procedure:...ket/sandbox.rktl:71:55>)))
((sandbox) (#f #t (#<procedure:run*> #<procedure:...ket/sandbox.rktl:67:55>)))
>>> racket/quiet.rktl: exit with error code 1
>>> racket/quiet.rktl: BOOM!

>>> typed-scheme/nightly-run.rkt: running...
>>> typed-scheme/nightly-run.rkt: no failures.

>>> match/plt-match-tests.rkt: running...
342 success(es) 0 failure(s) 0 error(s) 342 test(s) run
>>> match/plt-match-tests.rkt: no failures.

>>> lazy/main.rkt: running...
282 tests passed
>>> lazy/main.rkt: no failures.

>>> scribble/main.rkt: running...
324 tests passed
>>> scribble/main.rkt: no failures.

>>> net/main.rkt: running...
109 tests passed
71535 tests passed
>>> net/main.rkt: no failures.

>>> file/main.rkt: running...
112 tests passed
>>> file/main.rkt: no failures.

>>> profile/main.rkt: running...
21 tests passed
>>> profile/main.rkt: no failures.
>How-To-Repeat:
Build racket with --enable-places, run the test suite.  (I don't have access to another system, so I don't know if it's dependent on mac 64-bit or not.)
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "mflatt" by ryanc at Wed, 15 Sep 2010 15:33:06 -0400
Reason>>> responsible


