From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Sep 14 05:03:02 2007
Received: from nf-out-0910.google.com (nf-out-0910.google.com [64.233.182.188])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l8E9301I011838
	for <bugs@bugs.plt-scheme.org>; Fri, 14 Sep 2007 05:03:00 -0400
Message-Id: <200709140902.l8E92rVG011833@champlain.ccs.neu.edu>
Date: Fri, 14 Sep 2007 05:02:53 -0400
From: d.j.gurnell@gmail.com
To: bugs@plt-scheme.org
Subject: Bug in date->string in SRFI-19

>Number:         8931
>Category:       misc
>Synopsis:       Bug in date->string in SRFI-19
>Class:          sw-bug
>Responsible:    clements
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Sep 14 05:05:01 -0400 2007
>Closed-Date:    Fri Sep 14 13:41:57 -0400 2007
>Last-Modified:  Fri Sep 14 13:41:57 -0400 2007
>Originator:     Dave Gurnell
>Organization:
plt
>Submitter-Id:   unknown
>Release:        371.2
>Environment:
macosx "Darwin Daisy.local 8.10.0 Darwin Kernel Version 8.10.0: Wed May 23 16:50:59 PDT 2007; root:xnu-792.21.3~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/usr/local/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "gui" "guide" "quick" "reference" "release-notes" "scribble" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-intermediate-access" "profj-advanced") (* "/Users/djg/Library/PLT Scheme/planet/300/371.2/cache/neil/csv.plt/1/1/doc"))
Human Language: english
(current-memory-use) 67405964

Collections:
(("/Users/djg/Library/PLT Scheme/371.2/collects" non-existent-path) ("/usr/local/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml") ("/Users/djg/Documents/Programming!
 /Scheme/Lylux/src" non-existent-path) ("/Users/djg/Documents/Programming/Scheme/Snooze/trunk/src" non-existent-path) ("/Users/djg/Documents/Programming/Scheme/Unlib/trunk/src" non-existent-path) ("/Users/djg/Documents/Programming/Scheme/SBCS/src" non-existent-path) ("/Users/djg/Documents/Programming/Scheme/IDCheck/src" non-existent-path))
>Description:
The date->string procedure SRFI 19 does not pad nanoseconds (the ~N switch) correctly. An example:

    > (date->string (make-srfi:date 123456789 2 3 4 5 6 2007 0) "~N")
      "123456789" ; this is correct

    > (date->string (make-srfi:date 123 2 3 4 5 6 2007 0) "~N")
      "0000123" ; this is NOT correct

From the source code it looks as if date->string is padding to 7 characters instead of 9.

I've modified the SRFI-19 test suite to use SchemeUnit 2 (it was using SchemeUnit 1) and added a
test-case that demonstrates the problem. The new test suite is included in the "Steps To 
Reproduce" section.

Note that:

  - there are two existing tests that fail (my new test has [DJG] in the description);
  - the existing date->string test doesn't actually test the ~N option (or some others);
  - the expected value in the existing date->string test looks like it's wrong.

I also have a feature request for string->date (it doesn't support ~N) but I'm not sure that's 
a feature request for this system so I'll file it separately.

Cheers!

-- Dave
>How-To-Repeat:
(module tests mzscheme
  
  ;; Tests by Will Fitzgerald, augmented by John Clements -- 2004-08-16
  
  ;; Updated to SchemeUnit 2 syntax by Dave Gurnell -- 2007-09-14
  
  (require (lib "time.ss" "srfi" "19"))
  
  (require (planet "test.ss" ("schematics" "schemeunit.plt" 2))
           (planet "text-ui.ss" ("schematics" "schemeunit.plt" 2)))
  
  ; Test suite -----------------------------------
  
  (define srfi-19-test-suite
    (test-suite
     "Tests for SRFI 19"
     
     (test-not-exn
      "Creating time structures"
      (lambda ()
        (list (current-time 'time-tai)
              (current-time 'time-utc)
              (current-time 'time-monotonic)
              (current-time 'time-thread)
              (current-time 'time-process))))
     
     (test-not-exn
      "Testing time resolutions"
      (lambda ()
        (list (time-resolution 'time-tai)
              (time-resolution 'time-utc)
              (time-resolution 'time-monotonic)
              (time-resolution 'time-thread)
              (time-resolution 'time-process))))
     
     (test-case 
      "Time comparisons (time=?, etc.)"
      (let ((t1 (make-time 'time-utc 0 1))
            (t2 (make-time 'time-utc 0 1))
            (t3 (make-time 'time-utc 0 2))
            (t11 (make-time 'time-utc 1001 1))
            (t12 (make-time 'time-utc 1001 1))
            (t13 (make-time 'time-utc 1001 2)))
        (check time=? t1 t2)
        (check time>? t3 t2)
        (check time<? t2 t3)
        (check time>=? t1 t2)
        (check time>=? t3 t2)
        (check time<=? t1 t2)
        (check time<=? t2 t3)
        (check time=? t11 t12)
        (check time>? t13 t12)
        (check time<? t12 t13)
        (check time>=? t11 t12)
        (check time>=? t13 t12)
        (check time<=? t11 t12)
        (check time<=? t12 t13)))
     
     (test-case
      "Time difference"
      (let ((t1 (make-time 'time-utc 0 3000))
            (t2 (make-time 'time-utc 0 1000))
            (t3 (make-time 'time-duration 0 2000))
            (t4 (make-time 'time-duration 0 -2000)))
        (check time=? t3 (time-difference t1 t2))
        (check time=? t4 (time-difference t2 t1))))
     
     (test-case
      "TAI-UTC Conversions"
      (check-one-utc-tai-edge 915148800  32 31)
      (check-one-utc-tai-edge 867715200  31 30)
      (check-one-utc-tai-edge 820454400  30 29)
      (check-one-utc-tai-edge 773020800  29 28)
      (check-one-utc-tai-edge 741484800  28 27)
      (check-one-utc-tai-edge 709948800  27 26)
      (check-one-utc-tai-edge 662688000  26 25)
      (check-one-utc-tai-edge 631152000  25 24)
      (check-one-utc-tai-edge 567993600  24 23)
      (check-one-utc-tai-edge 489024000  23 22)
      (check-one-utc-tai-edge 425865600  22 21)
      (check-one-utc-tai-edge 394329600  21 20)
      (check-one-utc-tai-edge 362793600  20 19)
      (check-one-utc-tai-edge 315532800  19 18)
      (check-one-utc-tai-edge 283996800  18 17)
      (check-one-utc-tai-edge 252460800  17 16)
      (check-one-utc-tai-edge 220924800  16 15)
      (check-one-utc-tai-edge 189302400  15 14)
      (check-one-utc-tai-edge 157766400  14 13)
      (check-one-utc-tai-edge 126230400  13 12)
      (check-one-utc-tai-edge 94694400   12 11)
      (check-one-utc-tai-edge 78796800   11 10)
      (check-one-utc-tai-edge 63072000   10 0)
      (check-one-utc-tai-edge 0           0 0)   ;; at the epoch
      (check-one-utc-tai-edge 10          0 0)   ;; close to it ...
      (check-one-utc-tai-edge 1045789645 32 32)) ;; about now ...
     
     (test-case
      "TAI-Date Conversions"
      (check tm:date= (time-tai->date (make-time time-tai 0 (+ 915148800 29)) 0)
             (make-srfi:date 0 58 59 23 31 12 1998 0))
      (check tm:date= (time-tai->date (make-time time-tai 0 (+ 915148800 30)) 0)
             (make-srfi:date 0 59 59 23 31 12 1998 0))
      (check tm:date= (time-tai->date (make-time time-tai 0 (+ 915148800 31)) 0)
             (make-srfi:date 0 60 59 23 31 12 1998 0))
      (check tm:date= (time-tai->date (make-time time-tai 0 (+ 915148800 32)) 0)
             (make-srfi:date 0 0 0 0 1 1 1999 0)))
     
     (test-case 
      "Date-UTC Conversions"
      (check time=? (make-time time-utc 0 (- 915148800 2))
             (date->time-utc (make-srfi:date 0 58 59 23 31 12 1998 0)))
      (check time=? (make-time time-utc 0 (- 915148800 1))
             (date->time-utc (make-srfi:date 0 59 59 23 31 12 1998 0)))
      ;; yes, I think this is actually right.
      (check time=? (make-time time-utc 0 (- 915148800 0))
             (date->time-utc (make-srfi:date 0 60 59 23 31 12 1998 0)))
      (check time=? (make-time time-utc 0 (- 915148800 0))
             (date->time-utc (make-srfi:date 0 0 0 0 1 1 1999 0)))
      (check time=? (make-time time-utc 0 (+ 915148800 1))
             (date->time-utc (make-srfi:date 0 1 0 0 1 1 1999 0))))
     
     (test-case 
      "TZ Offset conversions"
      (let ((ct-utc (make-time time-utc 6320000 1045944859))
            (ct-tai (make-time time-tai 6320000 1045944891))
            (cd (make-srfi:date 6320000 19 14 15 22 2 2003 -18000)))
        (check time=? ct-utc (date->time-utc cd))
        (check time=? ct-tai (date->time-tai cd))))
     
     (test-case
      "date->string conversions"
      (check-equal? (date->string (make-srfi:date 1000 2 3 4 5 6 2007 -120)
                                  "~~.~a.~A.~b.~B.~c.~d.~D.~e,~f,~h.~H")
                    "~.Tue.Tuesday.Jun.June.Tue Jun 5 4:03:02-0200 2007.05.06/05/07. 5,2.000001,Jun.03"))
     
     (test-case
      "[DJG] date->string conversions of dates with nanosecond components"
      (check-equal? (date->string (make-srfi:date 123456789 2 3 4 5 6 2007 0) "~N") "123456789")
      (check-equal? (date->string (make-srfi:date 12345678  2 3 4 5 6 2007 0) "~N") "012345678")
      (check-equal? (date->string (make-srfi:date 1234567   2 3 4 5 6 2007 0) "~N") "001234567")
      (check-equal? (date->string (make-srfi:date 123456    2 3 4 5 6 2007 0) "~N") "000123456")
      (check-equal? (date->string (make-srfi:date 12345     2 3 4 5 6 2007 0) "~N") "000012345")
      (check-equal? (date->string (make-srfi:date 1234      2 3 4 5 6 2007 0) "~N") "000001234")
      (check-equal? (date->string (make-srfi:date 123       2 3 4 5 6 2007 0) "~N") "000000123")
      (check-equal? (date->string (make-srfi:date 12        2 3 4 5 6 2007 0) "~N") "000000012")
      (check-equal? (date->string (make-srfi:date 1         2 3 4 5 6 2007 0) "~N") "000000001"))
     
     (test-case
      "date<->julian-day conversion"
      (check = 365 (- (date->julian-day (make-srfi:date 0 0 0 0 1 1 2004 0))
                      (date->julian-day (make-srfi:date 0 0 0 0 1 1 2003 0))))
      (let ([test-date (make-srfi:date 0 0 0 0 1 1 2003 -7200)])
        (check tm:date= test-date (julian-day->date (date->julian-day test-date) -7200))))
     
     (test-case
      "date->modified-julian-day conversion"
      (check = 365 (- (date->modified-julian-day (make-srfi:date 0 0 0 0 1 1 2004 0))
                      (date->modified-julian-day (make-srfi:date 0 0 0 0 1 1 2003 0))))
      (let ([test-date (make-srfi:date 0 0 0 0 1 1 2003 -7200)])
        (check tm:date= test-date (modified-julian-day->date (date->modified-julian-day test-date) -7200))))
     
     ))
  
  ; Helper checks and procedures -----------------
  
  (define-check (check-one-utc-tai-edge utc tai-diff tai-last-diff)
    (let* (;; right on the edge they should be the same
           (utc-basic (make-time 'time-utc 0 utc))
           (tai-basic (make-time 'time-tai 0 (+ utc tai-diff)))
           (utc->tai-basic (time-utc->time-tai utc-basic))
           (tai->utc-basic (time-tai->time-utc tai-basic))
           
           ;; a second before they should be the old diff
           (utc-basic-1 (make-time 'time-utc 0 (- utc 1)))
           (tai-basic-1 (make-time 'time-tai 0 (- (+ utc tai-last-diff) 1)))
           (utc->tai-basic-1 (time-utc->time-tai utc-basic-1))
           (tai->utc-basic-1 (time-tai->time-utc tai-basic-1))
           
           ;; a second later they should be the new diff
           (utc-basic+1 (make-time 'time-utc 0 (+ utc 1)))
           (tai-basic+1 (make-time 'time-tai 0 (+ (+ utc tai-diff) 1)))
           (utc->tai-basic+1 (time-utc->time-tai utc-basic+1))
           (tai->utc-basic+1 (time-tai->time-utc tai-basic+1))
           
           ;; ok, let's move the clock half a month or so plus half a second
           (shy (* 15 24 60 60))
           (hs (/ (expt 10 9) 2))
           ;; a second later they should be the new diff
           (utc-basic+2 (make-time 'time-utc hs (+ utc shy)))
           (tai-basic+2 (make-time 'time-tai hs (+ (+ utc tai-diff) shy)))
           (utc->tai-basic+2 (time-utc->time-tai utc-basic+2))
           (tai->utc-basic+2 (time-tai->time-utc tai-basic+2)))
      
      (check time=? utc-basic tai->utc-basic)
      (check time=? tai-basic utc->tai-basic)
      (check time=? utc-basic-1 tai->utc-basic-1)
      (check time=? tai-basic-1 utc->tai-basic-1)
      (check time=? utc-basic+1 tai->utc-basic+1)
      (check time=? tai-basic+1 utc->tai-basic+1)
      (check time=? utc-basic+2 tai->utc-basic+2)
      (check time=? tai-basic+2 utc->tai-basic+2)))
  
  (define (tm:date= d1 d2)
    (and (= (srfi:date-year d1) (srfi:date-year d2))
         (= (srfi:date-month d1) (srfi:date-month d2))
         (= (srfi:date-day d1) (srfi:date-day d2))
         (= (srfi:date-hour d1) (srfi:date-hour d2))
         (= (srfi:date-second d1) (srfi:date-second d2))
         (= (date-nanosecond d1) (date-nanosecond d2))
         (= (date-zone-offset d1) (date-zone-offset d2))))
  
  ; Main module body -----------------------------
  
  (test/text-ui srfi-19-test-suite)
  
  )
 
>Fix:
>Audit-Trail:
From: Dave Gurnell <d.j.gurnell@gmail.com>
To: bugs@plt-scheme.org
Cc: 
Subject: Re: all/8931: Bug in date->string in SRFI-19
Date: Fri, 14 Sep 2007 11:04:55 +0100

 Further progress:
 
 I just noticed that string->date has the same problem: the procedure  
 only reads up to 7 characters to find the nanosecond component. Here  
 is a new test-case that demonstrates the problem:
 
       (test-case
        "[DJG] string->date conversions"
        (check-equal? (string->date "2007-09-14 10:11:05.123456789+0"  
 "~Y-~m-~d ~H:~M:~S.~N~z")
                      (make-srfi:date 123456789 05 11 10 14 09 2007 0)
                      "check 1")
        (check-equal? (string->date "2007-09-14 10:11:05.000000123+0"  
 "~Y-~m-~d ~H:~M:~S.~N~z")
                      (make-srfi:date 123 05 11 10 14 09 2007 0)
                      "check 2")
        (check-equal? (string->date "2007-09-14 10:11:05.000123000+0"  
 "~Y-~m-~d ~H:~M:~S.~N~z")
                      (make-srfi:date 123000 05 11 10 14 09 2007 0)
                      "check 3")
        (check-equal? (string->date "2007-09-14 10:11:05.123000000+0"  
 "~Y-~m-~d ~H:~M:~S.~N~z")
                      (make-srfi:date 123000000 05 11 10 14 09 2007 0)
                      "check 4")
        (check-equal? (string->date "2007-09-14 10:11:05.123+0" "~Y-~m- 
 ~d ~H:~M:~S.~N~z")
                      (make-srfi:date 123000000 05 11 10 14 09 2007 0)
                      "check 5"))
 
 Simply changing the number of characters read to 9 isn't enough,  
 however, because the reader assumes it's reading an integer value  
 rather than a fractional value. If the reader encounters less than 9  
 characters it doesn't normalize the value to be in billionths of a  
 second. Check 5 in the above test-case demonstrates this:
 
    > (date-nanosecond (string->date "2007-09-14 10:11:05.123+0" "~Y- 
 ~m-~d ~H:~M:~S.~N~z"))
      123 ; this ought to be 123000000
 
 I've run through time.ss and fixed the string->date and date->string  
 problems. I haven't looked at the other failing test-cases mentioned  
 in my original bug report. I've attached the diffs for my edits to  
 the end of this email.
 
 Cheers,
 
 -- Dave
 
 /usr/local/plt/collects/srfi/19 djg$ svn diff time.ss
 Index: time.ss
 ===================================================================
 --- time.ss     (revision 7307)
 +++ time.ss     (working copy)
 @@ -1087,7 +1087,7 @@
                   (newline port)))
        (cons #\N (lambda (date pad-with port)
                   (display (tm:padding (date-nanosecond date)
 -                                     pad-with 7)
 +                                     pad-with 9)
                            port)))
        (cons #\p (lambda (date pad-with port)
                   (display (tm:locale-am/pm (srfi:date-hour date))  
 port)))
 @@ -1249,6 +1249,24 @@
       (lambda (port)
         (tm:integer-reader upto port)))
 
 +  ;; read an fractional integer upto n characters long on port; upto  
 -> #f if any length
 +  ;;
 +  ;; The return value is normalized to upto decimal places. For  
 example, if upto is 9 and
 +  ;; the string read is "123", the return value is 123000000.
 +  (define (tm:fractional-integer-reader upto port)
 +    (define (accum-int port accum nchars)
 +      (let ((ch (peek-char port)))
 +       (if (or (eof-object? ch)
 +               (not (char-numeric? ch))
 +               (and upto (>= nchars  upto )))
 +           (* accum (expt 10 (- upto nchars)))
 +           (accum-int port (+ (* accum 10) (tm:char->int (read-char  
 port))) (+ nchars 1)))))
 +    (accum-int port 0 0))
 +
 +  (define (tm:make-fractional-integer-reader upto)
 +    (lambda (port)
 +      (tm:fractional-integer-reader upto port)))
 +
     ;; read *exactly* n characters and convert to integer; could be  
 padded
     (define (tm:integer-reader-exact n port)
       (let ( (padding-ok #t) )
 @@ -1355,7 +1373,7 @@
     (define tm:read-directives
       (let ( (ireader4 (tm:make-integer-reader 4))
              (ireader2 (tm:make-integer-reader 2))
 -           (ireader7 (tm:make-integer-reader 7))
 +           (fireader9 (tm:make-fractional-integer-reader 9))
             (ireaderf (tm:make-integer-reader #f))
             (eireader2 (tm:make-integer-exact-reader 2))
             (eireader4 (tm:make-integer-exact-reader 4))
 @@ -1398,8 +1416,8 @@
          (list #\M char-numeric? ireader2 (lambda (val object)
                                            (tm:set-date-minute!
                                             object val)))
 -       (list #\N char-numeric? ireader7 (lambda (val object)
 -                                          (tm:set-date-nanosecond!  
 object val)))
 +       (list #\N char-numeric? fireader9 (lambda (val object)
 +                                           (tm:set-date-nanosecond!  
 object val)))
          (list #\S char-numeric? ireader2 (lambda (val object)
                                            (tm:set-date-second!  
 object val)))
          (list #\y char-fail eireader2
 @@ -1438,6 +1456,7 @@
                    (tm:time-error 'string->date 'bad-date-format- 
 string template-string)
                    (let* ( (format-char (string-ref format-string (+  
 index 1)))
                            (format-info (assoc format-char tm:read- 
 directives)) )
 +                    (printf "format-char ~s format-info ~s~n" format- 
 char format-info)
                      (if (not format-info)
                          (tm:time-error 'string->date 'bad-date- 
 format-string template-string)
                          (begin
From: John Clements <clements@brinckerhoff.org>
To: d.j.gurnell@gmail.com, bugs@plt-scheme.org
Cc: eli@plt-scheme.org
Subject: Re: [plt-bug] all/8931: Bug in date->string in SRFI-19
Date: Fri, 14 Sep 2007 10:39:41 -0700

 On Sep 14, 2007, at 2:05 AM, d.j.gurnell@gmail.com wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8931
 >
 > Reported by Dave Gurnell for release: 371.2
 >
 > *** Description:
 > The date->string procedure SRFI 19 does not pad nanoseconds (the ~N  
 > switch) correctly. An example:
 >
 >> (date->string (make-srfi:date 123456789 2 3 4 5 6 2007 0) "~N")
 >       "123456789" ; this is correct
 >
 >> (date->string (make-srfi:date 123 2 3 4 5 6 2007 0) "~N")
 >       "0000123" ; this is NOT correct
 >
 >> From the source code it looks as if date->string is padding to 7  
 >> characters instead of 9.
 >
 > I've modified the SRFI-19 test suite to use SchemeUnit 2 (it was  
 > using SchemeUnit 1) and added a
 > test-case that demonstrates the problem. The new test suite is  
 > included in the "Steps To
 > Reproduce" section.
 >
 > Note that:
 >
 >   - there are two existing tests that fail (my new test has [DJG]  
 > in the description);
 
 Fixed.
 
 >   - the existing date->string test doesn't actually test the ~N  
 > option (or some others);
 
 Yep, but your test does.
 
 >   - the expected value in the existing date->string test looks like  
 > it's wrong.
 
 Yep.
 
 Committed code & also your updated test suite.
 
 Closing this bug.
 
 Thanks!
 
 John
 
 
Responsible changed from "nobody" to "clements" by clements at Fri, 14 Sep 2007 13:41:57 -0400
Reason>>> fixed it.

State changed from "open" to "closed" by clements at Fri, 14 Sep 2007 13:41:57 -0400
Reason>>> fixed, per suggestion, also many thanks for the updated test suite.

