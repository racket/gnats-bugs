From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Jan  6 21:38:39 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.237])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l072cXQo022928
	for <bugs@bugs.plt-scheme.org>; Sat, 6 Jan 2007 21:38:33 -0500
Message-Id: <200701070238.l072cVSN022922@champlain.ccs.neu.edu>
Date: Sat, 6 Jan 2007 21:38:31 -0500
From: derick_eddington@yahoo.com
To: bugs@plt-scheme.org
Subject: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1

>Number:         8467
>Category:       misc
>Synopsis:       (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
>Class:          sw-bug
>Responsible:    eli
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Jan 06 21:40:01 -0500 2007
>Closed-Date:    Sun Jan 07 04:32:55 -0500 2007
>Last-Modified:  Sun Jan 07 21:55:01 -0500 2007
>Originator:     Derick Eddington
>Organization:
plt
>Submitter-Id:   unknown
>Release:        360
>Environment:
unix "" (i386-linux) (get-display-depth) = 24
Docs Installed:
(("/home/plt/plt-360/share/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 142163968

Collections:
(("/home/zone/.plt-scheme/360/collects" "info-domain") ("/home/plt/plt-360/lib/plt/collects" "afm" "ffi" "net" "sgl" "xml" "eopl" "help" "htdp" "html" "lang" "lazy" "make" "r5rs" "mred" "plot" "srfi" "framework" "teachpack" "profjBoxes" "mzscheme" "games" "icons" "htdch" "mrlib" "mzlib" "graphics" "profj" "setup" "tests" "trace" "preprocessor" "tex2page" "test-suite" "texpict" "profjWizard" "stepper" "web-server" "config" "compiler" "swindle" "dynext" "hierlist" "macro-debugger" "frtime" "defaults" "drscheme" "syntax-color" "mztake" "slibinit" "planet" "errortrace" "slatex" "syntax" "version" "algol60" "parser-tools" "openssl" "embedded-gui" "slideshow" "info-domain" "readline" "launcher" "string-constants" "browser"))
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#t write mixed-fraction-e #f #t debug/profile))
>Description:
RFC 3986 section 3.1 says:
Scheme names consist of a sequence of characters beginning with a
   letter and followed by any combination of letters, digits, plus
   ("+"), period ("."), or hyphen ("-").
scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )

However, url-rx in url-unit.ss only supports letters:
"(?:([a-zA-Z]*):)?"

(I am working on a project which needs string->url to support scheme names with more than letters.)

I have fixed by changing the above regexp piece in url-rx to:
"(?:([a-zA-Z][a-zA-Z0-9+-.]*):)?"

However, this change does not cause string->url to error if the first character of the scheme name is not a letter, as RFC 3986 section 3.1 would strictly require.
>How-To-Repeat:
(require (lib "url.ss" "net"))

(url-scheme 
  (string->url 
    "a+b-c456.d://that.scheme.name/should/be/valid"))  ; => #f
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: derick_eddington@yahoo.com, bugs@plt-scheme.org
Cc: robby@plt-scheme.org
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sat, 6 Jan 2007 22:08:14 -0500

 On Jan  6, derick_eddington@yahoo.com wrote:
 > RFC 3986 section 3.1 says:
 > Scheme names consist of a sequence of characters beginning with a
 >    letter and followed by any combination of letters, digits, plus
 >    ("+"), period ("."), or hyphen ("-").
 > scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
 > [...]
 > I have fixed by changing the above regexp piece in url-rx to:
 > "(?:([a-zA-Z][a-zA-Z0-9+-.]*):)?"
 
 This should be:
 
   "(?:([a-zA-Z][a-zA-Z0-9+.-]*):)?"
 
 to include `-' as a character.
 
 I can commit this change -- but I'm not a URL expert...  Robby?
 
 
 
 > However, this change does not cause string->url to error if the
 > first character of the scheme name is not a letter, as RFC 3986
 > section 3.1 would strictly require.
 
 This is because it's being parsed as a scheme-less path:
 
   > (map path/param-path
          (url-path (string->url "9a://that.scheme.name/should/be/valid")))
   ("9a:" "" "that.scheme.name" "should" "be" "valid")
 
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby.findler@gmail.com>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: derick_eddington@yahoo.com, bugs@plt-scheme.org, robby@plt-scheme.org
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sat, 6 Jan 2007 21:56:41 -0600

 What you've done looks right to me, but I'm no regexp expert either.
 I'd say "add a test case" :)
 
 I'll do it, if you'd like.
 
 Robby
 
 On 1/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jan  6, derick_eddington@yahoo.com wrote:
 > > RFC 3986 section 3.1 says:
 > > Scheme names consist of a sequence of characters beginning with a
 > >    letter and followed by any combination of letters, digits, plus
 > >    ("+"), period ("."), or hyphen ("-").
 > > scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
 > > [...]
 > > I have fixed by changing the above regexp piece in url-rx to:
 > > "(?:([a-zA-Z][a-zA-Z0-9+-.]*):)?"
 >
 > This should be:
 >
 >   "(?:([a-zA-Z][a-zA-Z0-9+.-]*):)?"
 >
 > to include `-' as a character.
 >
 > I can commit this change -- but I'm not a URL expert...  Robby?
 >
 >
 >
 > > However, this change does not cause string->url to error if the
 > > first character of the scheme name is not a letter, as RFC 3986
 > > section 3.1 would strictly require.
 >
 > This is because it's being parsed as a scheme-less path:
 >
 >   > (map path/param-path
 >          (url-path (string->url "9a://that.scheme.name/should/be/valid")))
 >   ("9a:" "" "that.scheme.name" "should" "be" "valid")
 >
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 >
From: "Robby Findler" <robby.findler@gmail.com>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: derick_eddington@yahoo.com, bugs@plt-scheme.org, robby@plt-scheme.org
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sat, 6 Jan 2007 22:03:22 -0600

 On 1/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jan  6, Robby Findler wrote:
 > > What you've done looks right to me, but I'm no regexp expert either.
 > > I'd say "add a test case" :)
 > >
 > > I'll do it, if you'd like.
 >
 > It's not the regexp expertise that bothers me -- it's the URL
 > expertise.  As Derick pointed out, making the scheme part more
 > permissive means that some paths will have a different interpretation:
 >
 >   foo9://blah
 >
 > is currently considered as a no-scheme URL with three path elements,
 > and after the change it will have a "foo9" scheme.  If this sounds
 > fine, then the change is safe.
 
 I have no clue.
 
 I just read the rfc when I implemented it.
 
 There is a test suite that comes with the rfc which I translated and used.
 
 Does it still pass with your change?
 
 I can't look right now, but I will later, if you don't.
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: derick_eddington@yahoo.com, bugs@plt-scheme.org, robby@plt-scheme.org
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sat, 6 Jan 2007 23:00:08 -0500

 On Jan  6, Robby Findler wrote:
 > What you've done looks right to me, but I'm no regexp expert either.
 > I'd say "add a test case" :)
 > 
 > I'll do it, if you'd like.
 
 It's not the regexp expertise that bothers me -- it's the URL
 expertise.  As Derick pointed out, making the scheme part more
 permissive means that some paths will have a different interpretation:
 
   foo9://blah
 
 is currently considered as a no-scheme URL with three path elements,
 and after the change it will have a "foo9" scheme.  If this sounds
 fine, then the change is safe.
 
 
 > On 1/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > > On Jan  6, derick_eddington@yahoo.com wrote:
 > > > RFC 3986 section 3.1 says:
 > > > Scheme names consist of a sequence of characters beginning with a
 > > >    letter and followed by any combination of letters, digits, plus
 > > >    ("+"), period ("."), or hyphen ("-").
 > > > scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
 > > > [...]
 > > > I have fixed by changing the above regexp piece in url-rx to:
 > > > "(?:([a-zA-Z][a-zA-Z0-9+-.]*):)?"
 > >
 > > This should be:
 > >
 > >   "(?:([a-zA-Z][a-zA-Z0-9+.-]*):)?"
 > >
 > > to include `-' as a character.
 > >
 > > I can commit this change -- but I'm not a URL expert...  Robby?
 > >
 > >
 > >
 > > > However, this change does not cause string->url to error if the
 > > > first character of the scheme name is not a letter, as RFC 3986
 > > > section 3.1 would strictly require.
 > >
 > > This is because it's being parsed as a scheme-less path:
 > >
 > >   > (map path/param-path
 > >          (url-path (string->url "9a://that.scheme.name/should/be/valid")))
 > >   ("9a:" "" "that.scheme.name" "should" "be" "valid")
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: derick_eddington@yahoo.com, bugs@plt-scheme.org, robby@plt-scheme.org
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sun, 7 Jan 2007 04:17:15 -0500

 On Jan  6, Robby Findler wrote:
 > 
 > I have no clue.
 > 
 > I just read the rfc when I implemented it.
 > 
 > There is a test suite that comes with the rfc which I translated and
 > used.
 > 
 > Does it still pass with your change?
 > 
 > I can't look right now, but I will later, if you don't.
 
 So -- I skimmed the RFC quickly, and it looks like a ":" is a required
 part of a URI.  The url library behavior was to parse
 
   invalid scheme://whatever
 
 as a no-scheme url that has "invalid scheme:" as the first path
 element.  It seems like making a regexp that enforces that is going to
 be tricky, and possibly require some of the #px capabilities -- but
 then it hit me that there is a much easier solution: url-rx accepts
 anything as a scheme (using "(?:([^:]*):)?"), and then the body of
 string->url checks that if there is a scheme, then it should have a
 "^[a-zA-Z][a-zA-Z0-9+-.]*$" shape.  So now URLs like the one from this
 PR:
 
   a+b-c456.d://that.scheme.name/should/be/valid
 
 work as expected.
 
 (Previous tests pass, and I added some tests for these, and also some
 test that check that URLs with bad scheme parts throw an error.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Responsible changed from "nobody" to "eli" by eli at Sun, 07 Jan 2007 04:32:55 -0500
Reason>>> fixing

State changed from "open" to "closed" by eli at Sun, 07 Jan 2007 04:32:55 -0500
Reason>>> fixed

From: "Robby Findler" <robby.findler@gmail.com>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: derick_eddington@yahoo.com, bugs@plt-scheme.org, robby@plt-scheme.org
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sun, 7 Jan 2007 05:00:32 -0600

 Thanks, Eli.
 
 Robby
 
 On 1/7/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jan  6, Robby Findler wrote:
 > >
 > > I have no clue.
 > >
 > > I just read the rfc when I implemented it.
 > >
 > > There is a test suite that comes with the rfc which I translated and
 > > used.
 > >
 > > Does it still pass with your change?
 > >
 > > I can't look right now, but I will later, if you don't.
 >
 > So -- I skimmed the RFC quickly, and it looks like a ":" is a required
 > part of a URI.  The url library behavior was to parse
 >
 >   invalid scheme://whatever
 >
 > as a no-scheme url that has "invalid scheme:" as the first path
 > element.  It seems like making a regexp that enforces that is going to
 > be tricky, and possibly require some of the #px capabilities -- but
 > then it hit me that there is a much easier solution: url-rx accepts
 > anything as a scheme (using "(?:([^:]*):)?"), and then the body of
 > string->url checks that if there is a scheme, then it should have a
 > "^[a-zA-Z][a-zA-Z0-9+-.]*$" shape.  So now URLs like the one from this
 > PR:
 >
 >   a+b-c456.d://that.scheme.name/should/be/valid
 >
 > work as expected.
 >
 > (Previous tests pass, and I added some tests for these, and also some
 > test that check that URLs with bad scheme parts throw an error.)
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 >
From: Derick Eddington <derick_eddington@yahoo.com>
To: eli@plt-scheme.org, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sun, 7 Jan 2007 11:35:08 -0800 (PST)

 Sorry I was the bad influence, but that should be a "^[a-zA-Z][a-zA-Z0-9+.-]*$" shape to include
 "-" (and exclude ",").  I noticed the incorrect "+-." was commited.
 
 --Derick
 
 
 --- Eli Barzilay <eli@barzilay.org> wrote:
 
 > On Jan  6, Robby Findler wrote:
 > > 
 > > I have no clue.
 > > 
 > > I just read the rfc when I implemented it.
 > > 
 > > There is a test suite that comes with the rfc which I translated and
 > > used.
 > > 
 > > Does it still pass with your change?
 > > 
 > > I can't look right now, but I will later, if you don't.
 > 
 > So -- I skimmed the RFC quickly, and it looks like a ":" is a required
 > part of a URI.  The url library behavior was to parse
 > 
 >   invalid scheme://whatever
 > 
 > as a no-scheme url that has "invalid scheme:" as the first path
 > element.  It seems like making a regexp that enforces that is going to
 > be tricky, and possibly require some of the #px capabilities -- but
 > then it hit me that there is a much easier solution: url-rx accepts
 > anything as a scheme (using "(?:([^:]*):)?"), and then the body of
 > string->url checks that if there is a scheme, then it should have a
 > "^[a-zA-Z][a-zA-Z0-9+-.]*$" shape.  So now URLs like the one from this
 > PR:
 > 
 >   a+b-c456.d://that.scheme.name/should/be/valid
 > 
 > work as expected.
 > 
 > (Previous tests pass, and I added some tests for these, and also some
 > test that check that URLs with bad scheme parts throw an error.)
 > 
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 > 
 
 
 __________________________________________________
 Do You Yahoo!?
 Tired of spam?  Yahoo! Mail has the best spam protection around 
 http://mail.yahoo.com 
From: Eli Barzilay <eli@barzilay.org>
To: Derick Eddington <derick_eddington@yahoo.com>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sun, 7 Jan 2007 15:15:03 -0500

 On Jan  7, Derick Eddington wrote:
 > Sorry I was the bad influence, but that should be a
 > "^[a-zA-Z][a-zA-Z0-9+.-]*$" shape to include "-" (and exclude ",").
 > I noticed the incorrect "+-." was commited.
 
 Ah, sorry -- I caught that initially, but ended up copy+pasting your
 regexp...  Fixed now.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: derick_eddington@yahoo.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        goldberg@plt-scheme.org, dskippy@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8467: (lib "url.ss" "net") incomplete support for RFC 3986 section 3.1
Date: Sun, 7 Jan 2007 21:51:12 -0500

 This seems to call for a contracted library:
 
   (provide/contract
    [string->url (-> (and/c string? (lambda (s) (is-letter? (string- 
 ref s 0)))) url?)])
 
 would do it. -- Matthias
 
 
 On Jan 6, 2007, at 9:40 PM, derick_eddington@yahoo.com wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8467
 >
 > Reported by Derick Eddington for release: 360
 >
 > *** Description:
 > RFC 3986 section 3.1 says:
 > Scheme names consist of a sequence of characters beginning with a
 >    letter and followed by any combination of letters, digits, plus
 >    ("+"), period ("."), or hyphen ("-").
 > scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
 >
 > However, url-rx in url-unit.ss only supports letters:
 > "(?:([a-zA-Z]*):)?"
 >
 > (I am working on a project which needs string->url to support  
 > scheme names with more than letters.)
 >
 > I have fixed by changing the above regexp piece in url-rx to:
 > "(?:([a-zA-Z][a-zA-Z0-9+-.]*):)?"
 >
 > However, this change does not cause string->url to error if the  
 > first character of the scheme name is not a letter, as RFC 3986  
 > section 3.1 would strictly require.
 >
 > *** How to repeat:
 > (require (lib "url.ss" "net"))
 >
 > (url-scheme
 >   (string->url
 >     "a+b-c456.d://that.scheme.name/should/be/valid"))  ; => #f
 >
 > *** Environment:
 > unix "" (i386-linux) (get-display-depth) = 24
 > Docs Installed:
 > (("/home/plt/plt-360/share/plt/doc" "r5rs" "mzscheme" "mred" "help"  
 > "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework"  
 > "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot"  
 > "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning- 
 > abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack"  
 > "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj- 
 > advanced"))
 > Human Language: english
 > (current-memory-use) 142163968
 >
 > Collections:
 > (("/home/zone/.plt-scheme/360/collects" "info-domain") ("/home/plt/ 
 > plt-360/lib/plt/collects" "afm" "ffi" "net" "sgl" "xml" "eopl"  
 > "help" "htdp" "html" "lang" "lazy" "make" "r5rs" "mred" "plot"  
 > "srfi" "framework" "teachpack" "profjBoxes" "mzscheme" "games"  
 > "icons" "htdch" "mrlib" "mzlib" "graphics" "profj" "setup" "tests"  
 > "trace" "preprocessor" "tex2page" "test-suite" "texpict"  
 > "profjWizard" "stepper" "web-server" "config" "compiler" "swindle"  
 > "dynext" "hierlist" "macro-debugger" "frtime" "defaults" "drscheme"  
 > "syntax-color" "mztake" "slibinit" "planet" "errortrace" "slatex"  
 > "syntax" "version" "algol60" "parser-tools" "openssl" "embedded- 
 > gui" "slideshow" "info-domain" "readline" "launcher" "string- 
 > constants" "browser"))
 > Teachpack filenames: ()
 > Computer Language: (("Professional Languages" "PLT" "Textual  
 > (MzScheme, includes R5RS)") #6(#t write mixed-fraction-e #f #t  
 > debug/profile))
 >
 
