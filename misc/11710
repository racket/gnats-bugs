From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Feb  4 07:59:17 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.3) with ESMTP id p14CxDRB001798
	for <bugs@bugs.plt-scheme.org>; Fri, 4 Feb 2011 07:59:13 -0500
Message-Id: <201102041259.p14CxAYo001791@champlain.ccs.neu.edu>
Date: Fri, 4 Feb 2011 07:59:10 -0500
From: robby@eecs.northwestern.edu
To: bugs@racket-lang.org
Subject: handin server: always save submission mode

>Number:         11710
>Category:       misc
>Synopsis:       handin server: always save submission mode
>Class:          change-request
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Feb 04 08:00:01 -0500 2011
>Last-Modified:  Thu Feb 17 18:52:01 -0500 2011
>Originator:     Robby Findler
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.0.2--2011-02-03(d2a6da75/d)
>Environment:
macosx "Darwin gaoping.local 10.6.0 Darwin Kernel Version 10.6.0: Wed Nov 10 18:13:17 PST 2010; root:xnu-1504.9.26~3/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 155223268

Collections:
("/Users/robby/Library/Racket/5.1.0.2/collects"
 (non-existent-path))
("/Users/robby/git/exp/plt/collects"
 (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-schem!
 e" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t))
>Description:
I would like a mode where the handin server saves every submission that the user presents. Apologies if this is there, I didn't see it in the docs.

Currently, I'm using my own checker and doing various checks explicitly with a with-handlers wrapped around them that sends a message back with the error, so that the submission is saved most of the time. 

With that in place, the problem I'm running into is that the checker is being terminated for running out of memory which rejects the student's submission. My checker is running random tests and the student's code is buggy here (presumably) but I would rather get the code from the student and have a chance to look at it than just throw it away.

I think I could mimic the handin server's checking here with a slightly lower limit and probably then catch an exception, but this is getting painful.

Below is the transcript that I see for one instance where this happened, in case that's relevant.
>How-To-Repeat:
[31|2011-02-04 01:59:17] connect from 165.124.142.137
[31|2011-02-04 01:59:20] running 8KB (69MB 75MB)
[31|2011-02-04 01:59:21] login: (amz716)
[31|2011-02-04 01:59:21] assignment for (amz716): hw4
[31|2011-02-04 01:59:22] timeout-control: reset
[31|2011-02-04 01:59:22] checking hw4 for (amz716)
[31|2011-02-04 01:59:23] running 4MB (73MB 79MB)
[31|2011-02-04 01:59:27] running 7MB (75MB 83MB)
[31|2011-02-04 01:59:30] running 11MB (79MB 90MB)
[31|2011-02-04 01:59:34] running 14MB (83MB 96MB)
[31|2011-02-04 01:59:37] running 16MB (85MB 91MB)
[31|2011-02-04 01:59:41] running 16MB (85MB 91MB)
[31|2011-02-04 01:59:44] running 19MB (88MB 96MB)
[31|2011-02-04 01:59:48] running 23MB (92MB 102MB)
[31|2011-02-04 01:59:51] running 27MB (96MB 108MB)
[31|2011-02-04 01:59:55] running 28MB (97MB 103MB)
[31|2011-02-04 01:59:58] running 28MB (97MB 103MB)
[31|2011-02-04 02:00:02] running 30MB (99MB 106MB)
[31|2011-02-04 02:00:05] running 33MB (102MB 112MB)
[31|2011-02-04 02:00:09] running 36MB (105MB 117MB)
[31|2011-02-04 02:00:12] running 40MB (109MB 115MB)
[31|2011-02-04 02:00:12] session killed (memory) while running tests
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: robby@eecs.northwestern.edu, bugs@racket-lang.org
Cc: bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11710: handin server: always save submission mode
Date: Fri, 4 Feb 2011 10:30:19 -0500

 Two hours ago, robby@eecs.northwestern.edu wrote:
 > I would like a mode where the handin server saves every submission
 > that the user presents. Apologies if this is there, I didn't see it
 > in the docs.
 > 
 > Currently, I'm using my own checker and doing various checks
 > explicitly with a with-handlers wrapped around them that sends a
 > message back with the error, so that the submission is saved most of
 > the time.
 > 
 > With that in place, the problem I'm running into is that the checker
 > is being terminated for running out of memory which rejects the
 > student's submission. My checker is running random tests and the
 > student's code is buggy here (presumably) but I would rather get the
 > code from the student and have a chance to look at it than just
 > throw it away.
 > 
 > I think I could mimic the handin server's checking here with a
 > slightly lower limit and probably then catch an exception, but this
 > is getting painful.
 
 I can see three ways to do what (I think that) you want:
 
 1. Set the server's memory/time limits to something very high, then
    set the memory limit for the sandbox to a realistic value, which
    means that you rely on that to throw an error.  (The sandbox that
    the handin server uses has no memory or time limits, since those
    are handled by the server to avoid problems at the connection
    level.)
 
 2. Accept all submissions, and later run an off-line checker to
    analyze the submissions.
 
 Those two suffer from obvious problems, so my guess is that the best
 solution is:
 
 3. Run all tests in the "post" block, eg, using (post: ...tests...).
    The post part of the code is invoked in the same way as the
    checker, except that (to quote the docs):
 
      The post-checker is used at the end of the process, after the
      "ATTEMPT" directory was renamed to "SUCCESS-0".  At this stage,
      the submission is considered successful, so this function should
      avoid throwing an exception (it can, but the submission will
      still be in place).  [...]
 
    So in your case it sounds like you'd want it to throw errors, since
    you want the user to know that something went wrong, but you want
    to do this when the homework is already committed.
 
 If that works for you, then maybe I should change the above blurb to
 note this usage case?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: John Clements <clements@brinckerhoff.org>
To: Eli Barzilay <eli@barzilay.org>
Cc: robby@eecs.northwestern.edu, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11710: handin server: always save submission mode
Date: Fri, 4 Feb 2011 20:44:02 -0800

 On Feb 4, 2011, at 7:30 AM, Eli Barzilay wrote:
 
 > Two hours ago, robby@eecs.northwestern.edu wrote:
 >> I would like a mode where the handin server saves every submission
 >> that the user presents. Apologies if this is there, I didn't see it
 >> in the docs.
 >>=20
 >> Currently, I'm using my own checker and doing various checks
 >> explicitly with a with-handlers wrapped around them that sends a
 >> message back with the error, so that the submission is saved most of
 >> the time.
 >>=20
 >> With that in place, the problem I'm running into is that the checker
 >> is being terminated for running out of memory which rejects the
 >> student's submission. My checker is running random tests and the
 >> student's code is buggy here (presumably) but I would rather get the
 >> code from the student and have a chance to look at it than just
 >> throw it away.
 >>=20
 >> I think I could mimic the handin server's checking here with a
 >> slightly lower limit and probably then catch an exception, but this
 >> is getting painful.
 >=20
 > I can see three ways to do what (I think that) you want:
 >=20
 > 1. Set the server's memory/time limits to something very high, then
 >   set the memory limit for the sandbox to a realistic value, which
 >   means that you rely on that to throw an error.  (The sandbox that
 >   the handin server uses has no memory or time limits, since those
 >   are handled by the server to avoid problems at the connection
 >   level.)
 >=20
 > 2. Accept all submissions, and later run an off-line checker to
 >   analyze the submissions.
 >=20
 > Those two suffer from obvious problems, so my guess is that the best
 > solution is:
 >=20
 > 3. Run all tests in the "post" block, eg, using (post: ...tests...).
 >   The post part of the code is invoked in the same way as the
 >   checker, except that (to quote the docs):
 >=20
 >     The post-checker is used at the end of the process, after the
 >     "ATTEMPT" directory was renamed to "SUCCESS-0".  At this stage,
 >     the submission is considered successful, so this function should
 >     avoid throwing an exception (it can, but the submission will
 >     still be in place).  [...]
 >=20
 >   So in your case it sounds like you'd want it to throw errors, since
 >   you want the user to know that something went wrong, but you want
 >   to do this when the homework is already committed.
 
 This sounds like an improvement.  My students are also running into this =
 quite frequently.  The one thing that (IIUC) this solution would not =
 address is that the existing message-box does not signal to the user =
 which test case was running when the evaluation ran out of memory.  In =
 order to address this, I'm currently instructing my students to add a =
 mutated counter to the beginning of their 'interp' functions, so that =
 they get bogus errors which allow them to inspect the test cases that =
 caused the blow-up.  Am I missing an obvious way to catch these?
 
 John
 
 
 >=20
 > If that works for you, then maybe I should change the above blurb to
 > note this usage case?
 >=20
 > --=20
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli =
 Barzilay:
 >                    http://barzilay.org/                   Maze is =
 Life!
 
 
Responsible changed from "nobody" to "eli" by ryanc at Fri, 11 Feb 2011 17:30:12 -0500
Reason>>> handin-server

From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11710: handin server: always save submission mode
Date: Thu, 17 Feb 2011 17:01:57 -0600

 On Fri, Feb 4, 2011 at 9:30 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > 3. Run all tests in the "post" block, eg, using (post: ...tests...).
 >   The post part of the code is invoked in the same way as the
 >   checker, except that (to quote the docs):
 >
 >     The post-checker is used at the end of the process, after the
 >     "ATTEMPT" directory was renamed to "SUCCESS-0".  At this stage,
 >     the submission is considered successful, so this function should
 >     avoid throwing an exception (it can, but the submission will
 >     still be in place).  [...]
 >
 >   So in your case it sounds like you'd want it to throw errors, since
 >   you want the user to know that something went wrong, but you want
 >   to do this when the homework is already committed.
 >
 > If that works for you, then maybe I should change the above blurb to
 > note this usage case?
 
 That sounds promising, thanks!
 
 I am using the handin-server/check language, and it seems like I
 should be able to change the check: into a post:, but apparently
 :language doesn't work in a post:.
 
 The only other flag I'm using is
 
   :maxwidth #f
 
 which I assume I have to keep in the check: clause.
 
 Robby
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11710: handin server: always save submission mode
Date: Thu, 17 Feb 2011 17:51:00 -0600

 A little more.
 
 My usual checkers look like this:
 
 (check:
  :language '(module plai)
  :maxwidth #f)
 
  (!eval (dynamic-require ''anonymous-module #f))
  (!eval (current-namespace (module->namespace ''anonymous-module)))
 
  (with-handlers ((exn? (λ (x) ... (message ... '(ok)))))
    (!procedure parse 1) ;; make sure homework requirements are there
    ...   (!eval ...) ... ;; run some tests
  )
 
 but when I tried this with post:, I found that the first !eval call
 above produced this:
 
 
 [5|2011-02-17 17:45:49] ERROR: procedure application: expected
 procedure, given: #f; arguments were: '(dynamic-require
 ''anonymous-module #f)
 
 Robby
 
