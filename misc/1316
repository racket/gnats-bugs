From nobody@cs.rice.edu  Fri Jan  7 08:24:44 2000
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id IAA19515
	for <plt-gnats@cs.rice.edu>; Fri, 7 Jan 2000 08:24:44 -0600 (CST)
Message-Id: <200001071424.IAA04316@web.cs.rice.edu>
Date: Fri, 7 Jan 2000 08:24:42 -0600 (CST)
From: johan.brichau@vub.ac.be
Reply-To: johan.brichau@vub.ac.be
To: plt-gnats@cs.rice.edu
Subject: strange scope problem? 

>Number:         1316
>Category:       misc
>Synopsis:       strange scope problem?
>Confidential:   no
>Severity:       critical
>Priority:       high
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Fri Jan  7 14:30:02 GMT 2000
>Last-Modified:  Fri Jan  7 15:00:02 GMT 2000
>Originator:     Johan Brichau
>Organization:
titan
>Release:        101
>Environment:
Linux
>Description:
This is a small reproduction of the problem:
>How-To-Repeat:
This is a small reproduction of the problem:
>Fix:

>Audit-Trail:

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri Jan  7 08:52:04 2000
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Fri Jan  7 08:52:08 2000
State-Changed-Why:
No bug.


From: Matthew Flatt <mflatt@cs.utah.edu>
To: johan.brichau@vub.ac.be
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1316: strange scope problem? 
Date: Fri, 7 Jan 2000 06:46:44 -0800

 Quoting johan.brichau@vub.ac.be:
 > >(define (make-thunk)
 >     (define (aho) 4)
 >     (define (dispatch)
 >         (apply (eval 'aho) '()))
 >     dispatch)
 > > (define test (make-thunk))
 > > (test)
 > reference to undefined identifier: aho
 > > (define boe 4)
 > > (eval 'boe)
 > 4
 > 
 > In the second case, the interpreter does seem to eval a symbol to a 'variable'
 > and is also able to look it up in the environment. In the first case however,
 > it does not seem to retrieve it's value as in the first case. Other Scheme 
 > implementations do not produce this strange result.
 
 `eval' always evaluates its argument as a top-level expression, so
 that's why `aho' is undefined.
 
 Note that R5RS doesn't have a one-argument `eval', and R4RS didn't
 contain `eval' at all, so there's really no standardization. As it
 happens, the `eval' in Chez, Gambit, and SCM (hence Guile) all behave
 the same as `eval' in DrScheme/MzScheme. More importantly, the MzScheme
 manual specifies that `eval' evaluates its expression in the current
 "namespace", which corresponds to a top-level environment.
 
 Hope that helps,
 Matthew
 
>Unformatted:
>(define (make-thunk)
    (define (aho) 4)
    (define (dispatch)
        (apply (eval 'aho) '()))
    dispatch)
> (define test (make-thunk))
> (test)
reference to undefined identifier: aho
> (define boe 4)
> (eval 'boe)
4

In the second case, the interpreter does seem to eval a symbol to a 'variable'
and is also able to look it up in the environment. In the first case however,
it does not seem to retrieve it's value as in the first case. Other Scheme 
implementations do not produce this strange result.
>(define (make-thunk)
    (define (aho) 4)
    (define (dispatch)
        (apply (eval 'aho) '()))
    dispatch)
> (define test (make-thunk))
> (test)
reference to undefined identifier: aho
> (define boe 4)
> (eval 'boe)
4
