From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Mar 10 17:34:48 2009
Received: from qw-out-2122.google.com (qw-out-2122.google.com [74.125.92.27])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n2ALYbqW006023
	for <bugs@bugs.plt-scheme.org>; Tue, 10 Mar 2009 17:34:37 -0400
Message-Id: <200903102134.n2ALYYB2006016@champlain.ccs.neu.edu>
Date: Tue, 10 Mar 2009 17:34:34 -0400
From: dmarshall207@gmail.com
To: bugs@plt-scheme.org
Subject: I'm providing a fix for a errant code in PLT Scheme Guide

>Number:         10120
>Category:       misc
>Synopsis:       I'm providing a fix for a errant code in PLT Scheme Guide
>Class:          doc-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Mar 10 17:36:01 -0400 2009
>Closed-Date:    Fri Jan 08 08:57:44 -0500 2010
>Last-Modified:  Fri Jan 08 08:57:44 -0500 2010
>Originator:     D L Marshall
>Organization:
plt
>Submitter-Id:   unknown
>Release:        352
>Environment:
linux-ubuntu
>Description:
First let me express my gratitude for the
incredible Scheme language implementation and
tools your group has produced.

A few years back I attempted to learn Lisp
and while I learn to appreciated it I was
overwhelmed and never reached a point where
I was at all comfortable with it.

I only started a couple of months ago in my
effort to learn Scheme and while I can
clearly see that my previous efforts at
learning Lisp help prime me I also can see
that the organization and tools PLT provides
has made for a far easier learning curve than
any thing I've *ever* come across (not just
Scheme).

I am not sending this through the DrScheme
bug report system as suggested because #1 
I don't use DrScheme but rather MzScheme
(I can't live w/o Emacs) and #2 this is
not about a bug in MzScheme per-say.

The problem I found is with the example
provided in the guide on page:

  http://docs.plt-scheme.org/guide/pattern-macros.html

I have version (352) of MzScheme but I do not
believe this is a version problem (maybe I'm
wrong though)

Rather try to explain I'm just sending what I
think is a working version of what it was
aiming at (simple enough):

  (define-values 
    (struct:clock  make-clock clock? clock-ref clock-set!)
    (make-struct-type 
          'clock        #f       1      0      'uninitialized  
          null          #f       #f    null    #f))
  (define clock-inst       (make-clock  0))
  (define (put-clock! v)   (clock-set!  clock-inst 0 v))
  (define (get-clock)      (clock-ref   clock-inst 0))
  
  (define-syntax define-get/put-id
    (syntax-rules ()
      [(define-get/put-id id get put!) 
            (define-syntax id
             (syntax-id-rules (set!)
               [(set! id e)        
                    (begin 
                      (display (format "`id' (1)   it worked!~n"))
                      (put-clock! e))]
               [(id a (... ...))   
                    (begin 
                      (display (format  "`id' (2)~n"))
                      ((get-clock) a (... ...)))]
               [id                 
                     (begin 
                       (display (format  "`id' (3)~n"))
                       (get-clock))]))
            ]))
  (define-get/put-id clock get-clock put-clock!)  
  (let*()
    (set! clock 123)
    (display (format  "results : ~s~n" (clock-ref clock-inst  0))))
  
Once I get more comfortable with PLT-Scheme I hope to
make some contributions.

>How-To-Repeat:
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "mflatt" by eli at Sat, 09 May 2009 15:07:21 -0400
Reason>>> guide


State changed from "open" to "closed" by mflatt at Fri, 08 Jan 2010 08:57:44 -0500
Reason>>> I was very slow to fix the bug in th guide, 
but I got around to it sometime last year.

Thanks for the report!

