From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Apr 20 14:23:24 2007
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.170])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l3KINOBK028119
	for <bugs@bugs.plt-scheme.org>; Fri, 20 Apr 2007 14:23:24 -0400
Message-Id: <200704201823.l3KINFn7028095@champlain.ccs.neu.edu>
Date: Fri, 20 Apr 2007 14:23:15 -0400
From: airfoil@bellsouth.net
To: bugs@plt-scheme.org
Subject: string->symbol handles "|A|" oddly

>Number:         8620
>Category:       misc
>Synopsis:       string->symbol handles "|A|" oddly
>Class:          not-a-bug
>Responsible:    eli
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Apr 20 14:25:03 -0400 2007
>Closed-Date:    Fri May 04 02:51:29 -0400 2007
>Last-Modified:  Fri May 04 02:51:29 -0400 2007
>Originator:     Kyle Smith
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.8-svn5apr2007
>Environment:
macosx "Darwin macsalot.local 8.9.1 Darwin Kernel Version 8.9.1: Thu Feb 22 20:55:00 PST 2007; root:xnu-792.18.15~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Applications/PLT/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 126721184

Collections:
(("/Users/kylesmith/Library/PLT Scheme/369.8/collects" non-existent-path) ("/Applications/PLT/collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "schemekeys" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Teachpack filenames: ()
Computer Language: (("FloridaKeys" "SchemeKeys") #6(#t write mixed-fraction-e #f #t debug))
>Description:
I was playing around with a set function library, and thought I would extend it to be able to use symbols;  it had only been demonstrated for strings and numbers.  So, I built a function number->string and was surprised by the results.  It turns out that (string->symbol "|3|") => \|3\| not |3| as I would expect.  This has nothing to do with it being a number; (string->symbol "|A|") => \|A\| as well.  The trouble I see with this is that "\|" is not a legal string, although it turns out to be a perfectly valid symbol.  The question, if this is correct behaviour, is how does one construct the symbol |3|?  If you simply juxtapose characters, #\|#\3#\|, the reader generates a multivalued expression, one for each character, not the equivalent of |3|.  So, is the case that the bars are a reader special character, and as such the symbol |3| can only be expressed through the interpretation the reader gives those special bars?  It would seem to me that string->symbol should treat thos!
 e bars in the same manner as does the reader.  Especially, since other string functions do so, namely eval-string.

See below for a simple interactive session log that verifies the information presented above.

Thanks,

--kyle
>How-To-Repeat:
> (define A 'A)
> "\|"
#<struct:object:...plt/1/1/diva-link.ss:495:4>:61:2: read: unknown escape sequence \| in string
> "|A|"
"|A|"
> (string->symbol "|A|")
\|A\|
> (eval-string "|A|")
A
>
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: airfoil@bellsouth.net, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8620: string->symbol handles "|A|" oddly
Date: Fri, 20 Apr 2007 15:12:10 -0400

 On Apr 20, airfoil@bellsouth.net wrote:
 > I was playing around with a set function library, and thought I
 > would extend it to be able to use symbols; it had only been
 > demonstrated for strings and numbers.  So, I built a function
 > number->string and was surprised by the results.  It turns out that
 > (string->symbol "|3|") => \|3\| not |3| as I would expect.  This has
 > nothing to do with it being a number; (string->symbol "|A|") =>
 > \|A\| as well.  The trouble I see with this is that "\|" is not a
 > legal string, although it turns out to be a perfectly valid symbol.
 > The question, if this is correct behaviour, is how does one
 > construct the symbol |3|?  If you simply juxtapose characters,
 > #\|#\3#\|, the reader generates a multivalued expression, one for
 > each character, not the equivalent of |3|.  So, is the case that the
 > bars are a reader special character, and as such the symbol |3| can
 > only be expressed through the interpretation the reader gives those
 > special bars?  It would seem to me that string->symbol should treat
 > those bars in the same manner as does the reader.  Especially, since
 > other string functions do so, namely eval-string.
 
 Yes, this behavior is correct.  MzScheme uses |...| as a kind of
 quotation marks for symbols when they wouldn't be parsed as symbols
 otherwise.  For example, if you want to define an identifier whose
 name is 3, you enter:
 
   (define |3| "some value")
 
 This way you can use almost anything as a symbol.  The problem with
 this is that even backslash is quoted this way, so |\| is the symbol
 whose name is a single backslash.  In other words, the stuff between
 the |...| bars is the name of the symbol, whatever it may be.
 
 So the question is how do you type a symbol with a | in its name.  For
 this, the syntax of symbols also uses backslash to say that *whatever*
 character follows is part of a symbol, for example, if you enter
 '\ \3\ \\ then the result is a symbol whose name is
 space-three-space-backslash.  If you do type that in, you'll see that
 when MzScheme prints the result back, it prefers the more concise form
 that uses bars: '| 3 \| (which is the same symbol).  But when MzScheme
 needs to print a symbol that has a bar in its name it cannot use bars
 to mark the symbol, so it uses backslash escapes.
 
 The general rule for printing symbols is:
 
 * print the symbol as is, if it contains only characters that parse as
   part of a symbol,
 * otherwise use |...| around the symbol, as long at it has no |
   characters,
 * otherwise use \ before each character that doesn't parse normally as
   a symbol.
 
 You can mix any of these in a single symbol, for example 'ab\c\d|ef|
 is the same as 'abcdef -- and MzScheme prints it that way.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Class changed from "sw-bug" to "not-a-bug" by eli at Fri, 04 May 2007 02:51:29 -0400
Reason>>> intended behavior

Responsible changed from "nobody" to "eli" by eli at Fri, 04 May 2007 02:51:29 -0400
Reason>>> replied

State changed from "open" to "closed" by eli at Fri, 04 May 2007 02:51:29 -0400
Reason>>> Not a bug.

