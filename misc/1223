From nobody@cs.rice.edu  Tue Oct 12 04:34:43 1999
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id EAA09245
	for <plt-gnats@cs.rice.edu>; Tue, 12 Oct 1999 04:34:43 -0500 (CDT)
Message-Id: <199910120934.EAA14151@web.cs.rice.edu>
Date: Tue, 12 Oct 1999 04:34:42 -0500 (CDT)
From: roy@unice.fr
Reply-To: roy@unice.fr
To: plt-gnats@cs.rice.edu
Subject: bug with floating point numbers 

>Number:         1223
>Category:       misc
>Synopsis:       bug with floating point numbers
>Confidential:   no
>Severity:       serious
>Priority:       high
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Oct 12 09:45:02 GMT 1999
>Last-Modified:  Thu Nov 11 21:30:02 GMT 1999
>Originator:     ROY Jean-Paul
>Organization:
titan
>Release:        100p2
>Environment:
Mac PowerPC
>Description:
(define (fac n)
  (if (zero? n)
      1
      (* n (fac (- n 1)))))

(define (stirling n)
  (* (sqrt (* 2 pi n)) (expt (/ n e) n)))

(- (fac 100) (stirling 100))  ; should be near zero

>How-To-Repeat:

>Fix:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: roy@unice.fr
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1223: bug with floating point numbers 
Date: Tue, 12 Oct 1999 05:26:50 -0700

 Quoting roy@unice.fr:
 > (define (fac n)
 >   (if (zero? n)
 >       1
 >       (* n (fac (- n 1)))))
 > 
 > (define (stirling n)
 >   (* (sqrt (* 2 pi n)) (expt (/ n e) n)))
 > 
 > (- (fac 100) (stirling 100))  ; should be near zero
 
 I believe you're seeing a lack of precision that is inherent in inexact
 numbers, rather than an actual bug.
 
 (fac 100), when converted to an inexact number, gives
   9.332621544394415e+157  [digits = start of the exact form]
 (stirling 100) gives
   9.32484762526942e+157
 
 The results differ by an amount on the order of 10^155. But 100/e is
 only precise to 15 or so decimal places (due to the limitations of
 inexact numbers), and it's being raised to the 100th power. Such
 imprecision easily accounts for the difference:
 
   (let ([v (inexact->exact (/ 100 (exp 1)))])
      ;; v = an exact number approxmiating e/100.
      ;; Calculate diff btwn v^100 and (v + 1e-15)^100:
      (exact->inexact (- (expt (+ v (expt 1 -15)) 100)
                         (expt v 100))))
 
  = 5.0645806585385166e+157
 
 Matthew

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri Oct 15 15:51:23 1999
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Fri Oct 15 15:51:28 1999
State-Changed-Why:
see above.

 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: roy@unice.fr
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1223: bug with floating point numbers 
Date: Tue, 12 Oct 1999 05:26:50 -0700

 Quoting roy@unice.fr:
 > (define (fac n)
 >   (if (zero? n)
 >       1
 >       (* n (fac (- n 1)))))
 > 
 > (define (stirling n)
 >   (* (sqrt (* 2 pi n)) (expt (/ n e) n)))
 > 
 > (- (fac 100) (stirling 100))  ; should be near zero
 
 I believe you're seeing a lack of precision that is inherent in inexact
 numbers, rather than an actual bug.
 
 (fac 100), when converted to an inexact number, gives
   9.332621544394415e+157  [digits = start of the exact form]
 (stirling 100) gives
   9.32484762526942e+157
 
 The results differ by an amount on the order of 10^155. But 100/e is
 only precise to 15 or so decimal places (due to the limitations of
 inexact numbers), and it's being raised to the 100th power. Such
 imprecision easily accounts for the difference:
 
   (let ([v (inexact->exact (/ 100 (exp 1)))])
      ;; v = an exact number approxmiating e/100.
      ;; Calculate diff btwn v^100 and (v + 1e-15)^100:
      (exact->inexact (- (expt (+ v (expt 1 -15)) 100)
                         (expt v 100))))
 
  = 5.0645806585385166e+157
 
 Matthew
 
>Unformatted:
