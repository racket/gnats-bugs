From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Oct 17 22:29:16 2010
Received: from mail-gw0-f44.google.com (mail-gw0-f44.google.com [74.125.83.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o9I2TD9O025369
	for <bugs@bugs.plt-scheme.org>; Sun, 17 Oct 2010 22:29:13 -0400
Message-Id: <201010180229.o9I2TAKn025361@champlain.ccs.neu.edu>
Date: Sun, 17 Oct 2010 22:29:10 -0400
From: sk@cs.brown.edu
To: bugs@racket-lang.org
Subject: don't use cdr

>Number:         11327
>Category:       misc
>Synopsis:       don't use cdr
>Class:          doc-bug
>Responsible:    eli
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Oct 17 22:32:01 -0400 2010
>Closed-Date:    Wed Apr 18 10:34:10 -0400 2012
>Last-Modified:  Wed Apr 18 10:34:10 -0400 2012
>Originator:     Shriram Krishnamurthi
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1
>Environment:
windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 256465428

Collections:
(("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0.1\\collects" "info-domain" "installed-teachpacks" "margrave" "plai") ("C:\\Program Files (x86)\\Racket\\5.0.1\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "!
 typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
The following is one of the example programs on the racket-lang.org home page:

#lang lazy
;; An infinite list:
(define fibs
  (list* 1 1 (map + fibs (cdr fibs))))
 
;; Print the 1000th Fibonacci number:
(print (list-ref fibs 1000))

What is this "cdr" thing?
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: sk@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 21:45:21 -0500

 As Matthew points out, changing cdr to rest a) this should not work,
 since that is not a list? and b) since it does actually work, that
 means that rest in lazy is not the same as rest in #lang racket, since
 that checks list?-ness (which fails to terminate in the given
 example).
 
 Anyways, I think that means the example should be left alone.
 
 Unless Shriram's unrepentant obscurity there confused me and he's
 talking about something else entirely.
 
 Robby
 
 On Sun, Oct 17, 2010 at 9:32 PM,  <sk@cs.brown.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11327
 >
 > Reported by Shriram Krishnamurthi for release: 5.0.1
 >
 > *** Description:
 > The following is one of the example programs on the racket-lang.org home =
 page:
 >
 > #lang lazy
 > ;; An infinite list:
 > (define fibs
 > =C2=A0(list* 1 1 (map + fibs (cdr fibs))))
 >
 > ;; Print the 1000th Fibonacci number:
 > (print (list-ref fibs 1000))
 >
 > What is this "cdr" thing?
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth)=
  =3D 32
 > Human Language: english
 > (current-memory-use) 256465428
 >
 > Collections:
 > (("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0.1\\collects" "info-domain=
 " "installed-teachpacks" "margrave" "plai") ("C:\\Program Files (x86)\\Rack=
 et\\5.0.1\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator=
 -parser" "compiler" "config" "datalog" "defaults" "deinprogramm" "drracket"=
  "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "frame=
 work" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "=
 html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make=
 " "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "pars=
 er-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "ra=
 cket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp=
 " "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "=
 slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" =
 "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "te=
 xpict" "trace" "!
 > =C2=A0typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml=
 "))
 > Computer Language: (("Determine language from source") (#(#t print mixed-=
 fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
 >
 >
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 22:49:49 -0400

 I was under the impression (from pas mail from Matthias) that we were
 getting the words "car" and "cdr" out as much as possible.  So it was
 surprising to see it show up on our home page.  And when I tried
 "rest" it worked.  So there seemed to be even less reason to have
 "cdr" there.
 
 Since #lang lazy redefines the meaning of a whole bunch of Racket
 primitives, it seems odd to complain that this one primitive behaves
 differently than in Racket.  Eg: (define 1s (cons 1 1s)) works in
 #lang lazy, so clearly it too has a different meaning.
 
 But maybe I'm missing something as to why cdr is still the right choice.
 
 Shriram
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 21:59:32 -0500

 So you're agreeing it is wrong to change the example on the web page
 (because rest shoudl fail to terminate because it calls list?)?
 
 Robby
 
 On Sun, Oct 17, 2010 at 9:59 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > It is my personal preference to not use car/cdr whenever possible.
 > (I know in some 'syntactic' contexts I don't have first/rest, so
 > I recall my silly Lisp past and use them anyway, because I am too
 > lazy to import first/rest into the right phase. And yes, for some
 > things it won't even work.)
 >
 >
 >
 >
 > On Oct 17, 2010, at 10:49 PM, Shriram Krishnamurthi wrote:
 >
 >> I was under the impression (from pas mail from Matthias) that we were
 >> getting the words "car" and "cdr" out as much as possible. =C2=A0So it w=
 as
 >> surprising to see it show up on our home page. =C2=A0And when I tried
 >> "rest" it worked. =C2=A0So there seemed to be even less reason to have
 >> "cdr" there.
 >>
 >> Since #lang lazy redefines the meaning of a whole bunch of Racket
 >> primitives, it seems odd to complain that this one primitive behaves
 >> differently than in Racket. =C2=A0Eg: (define 1s (cons 1 1s)) works in
 >> #lang lazy, so clearly it too has a different meaning.
 >>
 >> But maybe I'm missing something as to why cdr is still the right choice.
 >>
 >> Shriram
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 22:59:26 -0400

 It is my personal preference to not use car/cdr whenever possible. 
 (I know in some 'syntactic' contexts I don't have first/rest, so 
 I recall my silly Lisp past and use them anyway, because I am too
 lazy to import first/rest into the right phase. And yes, for some
 things it won't even work.) 
 
 
 
 
 On Oct 17, 2010, at 10:49 PM, Shriram Krishnamurthi wrote:
 
 > I was under the impression (from pas mail from Matthias) that we were
 > getting the words "car" and "cdr" out as much as possible.  So it was
 > surprising to see it show up on our home page.  And when I tried
 > "rest" it worked.  So there seemed to be even less reason to have
 > "cdr" there.
 > 
 > Since #lang lazy redefines the meaning of a whole bunch of Racket
 > primitives, it seems odd to complain that this one primitive behaves
 > differently than in Racket.  Eg: (define 1s (cons 1 1s)) works in
 > #lang lazy, so clearly it too has a different meaning.
 > 
 > But maybe I'm missing something as to why cdr is still the right choice.
 > 
 > Shriram
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 21:58:52 -0500

 rest is supposed to be for lists which I think means things terminated
 with an empty. In any case, in lazy we have this:
 
 > (rest (cons 1 2))
 1
 
 but in racket we have this:
 
 > (rest (cons 1 2))
 rest: expected argument of type <non-empty list>; given '(1 . 2)
 
 which is nothing to do with laziness and so presumably a difference
 that we don't want (and thus just a simple bug).
 
 Just to complete the discussion, rest is defined like this in
 collects/racket/list.rkt:
 
 (define (rest l)
   (if (and (pair? l) (list? l))
     (cdr l)
     (raise-type-error 'rest "non-empty list" l)))
 
 but if it were defined like that in lazy then you'd get
 non-termination in the example program.
 
 Robby
 
 On Sun, Oct 17, 2010 at 9:49 PM, Shriram Krishnamurthi <sk@cs.brown.edu> wr=
 ote:
 > I was under the impression (from pas mail from Matthias) that we were
 > getting the words "car" and "cdr" out as much as possible. =C2=A0So it wa=
 s
 > surprising to see it show up on our home page. =C2=A0And when I tried
 > "rest" it worked. =C2=A0So there seemed to be even less reason to have
 > "cdr" there.
 >
 > Since #lang lazy redefines the meaning of a whole bunch of Racket
 > primitives, it seems odd to complain that this one primitive behaves
 > differently than in Racket. =C2=A0Eg: (define 1s (cons 1 1s)) works in
 > #lang lazy, so clearly it too has a different meaning.
 >
 > But maybe I'm missing something as to why cdr is still the right choice.
 >
 > Shriram
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 23:03:17 -0400

 cons for constructor is kind of okay.=20
 
 if we were to go to pair, the selectors should be left/right.=20
 so i am not sure that's the right thing to do.=20
 
 
 On Oct 17, 2010, at 11:00 PM, Jay McCarthy wrote:
 
 > I almost never use cons either. I try to use list* exclusively.
 >=20
 > I would like to see pair, fst, and snd added to the language to fill
 > the place of cons, car, and cdr.
 >=20
 > Jay
 >=20
 > On Sun, Oct 17, 2010 at 8:58 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> rest is supposed to be for lists which I think means things =
 terminated
 >> with an empty. In any case, in lazy we have this:
 >>=20
 >>> (rest (cons 1 2))
 >> 1
 >>=20
 >> but in racket we have this:
 >>=20
 >>> (rest (cons 1 2))
 >> rest: expected argument of type <non-empty list>; given '(1 . 2)
 >>=20
 >> which is nothing to do with laziness and so presumably a difference
 >> that we don't want (and thus just a simple bug).
 >>=20
 >> Just to complete the discussion, rest is defined like this in
 >> collects/racket/list.rkt:
 >>=20
 >> (define (rest l)
 >>  (if (and (pair? l) (list? l))
 >>    (cdr l)
 >>    (raise-type-error 'rest "non-empty list" l)))
 >>=20
 >> but if it were defined like that in lazy then you'd get
 >> non-termination in the example program.
 >>=20
 >> Robby
 >>=20
 >> On Sun, Oct 17, 2010 at 9:49 PM, Shriram Krishnamurthi =
 <sk@cs.brown.edu> wrote:
 >>> I was under the impression (from pas mail from Matthias) that we =
 were
 >>> getting the words "car" and "cdr" out as much as possible.  So it =
 was
 >>> surprising to see it show up on our home page.  And when I tried
 >>> "rest" it worked.  So there seemed to be even less reason to have
 >>> "cdr" there.
 >>>=20
 >>> Since #lang lazy redefines the meaning of a whole bunch of Racket
 >>> primitives, it seems odd to complain that this one primitive behaves
 >>> differently than in Racket.  Eg: (define 1s (cons 1 1s)) works in
 >>> #lang lazy, so clearly it too has a different meaning.
 >>>=20
 >>> But maybe I'm missing something as to why cdr is still the right =
 choice.
 >>>=20
 >>> Shriram
 >>>=20
 >>=20
 >=20
 >=20
 >=20
 > --=20
 > Jay McCarthy <jay@cs.byu.edu>
 > Assistant Professor / Brigham Young University
 > http://teammccarthy.org/jay
 >=20
 > "The glory of God is Intelligence" - D&C 93
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 23:01:33 -0400

 yes 
 
 (but I find it embarrassing that we perpetuate car/cdr as names.
 Let's break with this silly past.) 
 
 On Oct 17, 2010, at 10:59 PM, Robby Findler wrote:
 
 > So you're agreeing it is wrong to change the example on the web page
 > (because rest shoudl fail to terminate because it calls list?)?
 > 
 > Robby
 > 
 > On Sun, Oct 17, 2010 at 9:59 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >> 
 >> It is my personal preference to not use car/cdr whenever possible.
 >> (I know in some 'syntactic' contexts I don't have first/rest, so
 >> I recall my silly Lisp past and use them anyway, because I am too
 >> lazy to import first/rest into the right phase. And yes, for some
 >> things it won't even work.)
 >> 
 >> 
 >> 
 >> 
 >> On Oct 17, 2010, at 10:49 PM, Shriram Krishnamurthi wrote:
 >> 
 >>> I was under the impression (from pas mail from Matthias) that we were
 >>> getting the words "car" and "cdr" out as much as possible.  So it was
 >>> surprising to see it show up on our home page.  And when I tried
 >>> "rest" it worked.  So there seemed to be even less reason to have
 >>> "cdr" there.
 >>> 
 >>> Since #lang lazy redefines the meaning of a whole bunch of Racket
 >>> primitives, it seems odd to complain that this one primitive behaves
 >>> differently than in Racket.  Eg: (define 1s (cons 1 1s)) works in
 >>> #lang lazy, so clearly it too has a different meaning.
 >>> 
 >>> But maybe I'm missing something as to why cdr is still the right choice.
 >>> 
 >>> Shriram
 >> 
 >> 
 
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 21:03:35 -0600

 I'm cool with left and right as well. (I think I think of fst/snd
 first because of ML?)
 
 Jay
 
 On Sun, Oct 17, 2010 at 9:03 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > cons for constructor is kind of okay.
 >
 > if we were to go to pair, the selectors should be left/right.
 > so i am not sure that's the right thing to do.
 >
 >
 > On Oct 17, 2010, at 11:00 PM, Jay McCarthy wrote:
 >
 >> I almost never use cons either. I try to use list* exclusively.
 >>
 >> I would like to see pair, fst, and snd added to the language to fill
 >> the place of cons, car, and cdr.
 >>
 >> Jay
 >>
 >> On Sun, Oct 17, 2010 at 8:58 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> rest is supposed to be for lists which I think means things terminated
 >>> with an empty. In any case, in lazy we have this:
 >>>
 >>>> (rest (cons 1 2))
 >>> 1
 >>>
 >>> but in racket we have this:
 >>>
 >>>> (rest (cons 1 2))
 >>> rest: expected argument of type <non-empty list>; given '(1 . 2)
 >>>
 >>> which is nothing to do with laziness and so presumably a difference
 >>> that we don't want (and thus just a simple bug).
 >>>
 >>> Just to complete the discussion, rest is defined like this in
 >>> collects/racket/list.rkt:
 >>>
 >>> (define (rest l)
 >>> =C2=A0(if (and (pair? l) (list? l))
 >>> =C2=A0 =C2=A0(cdr l)
 >>> =C2=A0 =C2=A0(raise-type-error 'rest "non-empty list" l)))
 >>>
 >>> but if it were defined like that in lazy then you'd get
 >>> non-termination in the example program.
 >>>
 >>> Robby
 >>>
 >>> On Sun, Oct 17, 2010 at 9:49 PM, Shriram Krishnamurthi <sk@cs.brown.edu=
 > wrote:
 >>>> I was under the impression (from pas mail from Matthias) that we were
 >>>> getting the words "car" and "cdr" out as much as possible. =C2=A0So it=
  was
 >>>> surprising to see it show up on our home page. =C2=A0And when I tried
 >>>> "rest" it worked. =C2=A0So there seemed to be even less reason to have
 >>>> "cdr" there.
 >>>>
 >>>> Since #lang lazy redefines the meaning of a whole bunch of Racket
 >>>> primitives, it seems odd to complain that this one primitive behaves
 >>>> differently than in Racket. =C2=A0Eg: (define 1s (cons 1 1s)) works in
 >>>> #lang lazy, so clearly it too has a different meaning.
 >>>>
 >>>> But maybe I'm missing something as to why cdr is still the right choic=
 e.
 >>>>
 >>>> Shriram
 >>>>
 >>>
 >>
 >>
 >>
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://teammccarthy.org/jay
 >>
 >> "The glory of God is Intelligence" - D&C 93
 >
 >
 
 
 
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 21:00:53 -0600

 I almost never use cons either. I try to use list* exclusively.
 
 I would like to see pair, fst, and snd added to the language to fill
 the place of cons, car, and cdr.
 
 Jay
 
 On Sun, Oct 17, 2010 at 8:58 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > rest is supposed to be for lists which I think means things terminated
 > with an empty. In any case, in lazy we have this:
 >
 >> (rest (cons 1 2))
 > 1
 >
 > but in racket we have this:
 >
 >> (rest (cons 1 2))
 > rest: expected argument of type <non-empty list>; given '(1 . 2)
 >
 > which is nothing to do with laziness and so presumably a difference
 > that we don't want (and thus just a simple bug).
 >
 > Just to complete the discussion, rest is defined like this in
 > collects/racket/list.rkt:
 >
 > (define (rest l)
 > =C2=A0(if (and (pair? l) (list? l))
 > =C2=A0 =C2=A0(cdr l)
 > =C2=A0 =C2=A0(raise-type-error 'rest "non-empty list" l)))
 >
 > but if it were defined like that in lazy then you'd get
 > non-termination in the example program.
 >
 > Robby
 >
 > On Sun, Oct 17, 2010 at 9:49 PM, Shriram Krishnamurthi <sk@cs.brown.edu> =
 wrote:
 >> I was under the impression (from pas mail from Matthias) that we were
 >> getting the words "car" and "cdr" out as much as possible. =C2=A0So it w=
 as
 >> surprising to see it show up on our home page. =C2=A0And when I tried
 >> "rest" it worked. =C2=A0So there seemed to be even less reason to have
 >> "cdr" there.
 >>
 >> Since #lang lazy redefines the meaning of a whole bunch of Racket
 >> primitives, it seems odd to complain that this one primitive behaves
 >> differently than in Racket. =C2=A0Eg: (define 1s (cons 1 1s)) works in
 >> #lang lazy, so clearly it too has a different meaning.
 >>
 >> But maybe I'm missing something as to why cdr is still the right choice.
 >>
 >> Shriram
 >>
 >
 
 
 
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 23:04:14 -0400

 That's a good argument.  I look forward to Eli's response. (-:
 
 Shriram
 
 On Sun, Oct 17, 2010 at 10:58 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > rest is supposed to be for lists which I think means things terminated
 > with an empty. In any case, in lazy we have this:
 >
 >> (rest (cons 1 2))
 > 1
 >
 > but in racket we have this:
 >
 >> (rest (cons 1 2))
 > rest: expected argument of type <non-empty list>; given '(1 . 2)
 >
 > which is nothing to do with laziness and so presumably a difference
 > that we don't want (and thus just a simple bug).
 >
 > Just to complete the discussion, rest is defined like this in
 > collects/racket/list.rkt:
 >
 > (define (rest l)
 > =A0(if (and (pair? l) (list? l))
 > =A0 =A0(cdr l)
 > =A0 =A0(raise-type-error 'rest "non-empty list" l)))
 >
 > but if it were defined like that in lazy then you'd get
 > non-termination in the example program.
 >
 > Robby
 >
 > On Sun, Oct 17, 2010 at 9:49 PM, Shriram Krishnamurthi <sk@cs.brown.edu> =
 wrote:
 >> I was under the impression (from pas mail from Matthias) that we were
 >> getting the words "car" and "cdr" out as much as possible. =A0So it was
 >> surprising to see it show up on our home page. =A0And when I tried
 >> "rest" it worked. =A0So there seemed to be even less reason to have
 >> "cdr" there.
 >>
 >> Since #lang lazy redefines the meaning of a whole bunch of Racket
 >> primitives, it seems odd to complain that this one primitive behaves
 >> differently than in Racket. =A0Eg: (define 1s (cons 1 1s)) works in
 >> #lang lazy, so clearly it too has a different meaning.
 >>
 >> But maybe I'm missing something as to why cdr is still the right choice.
 >>
 >> Shriram
 >>
 >
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Jay McCarthy <jay.mccarthy@gmail.com>,
        Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Sun, 17 Oct 2010 23:03:44 -0400

 fst/snd is perfectly reasonable in that pair is the specialization of
 n-tuple, and if they were indeed tuples, you would address the fields
 by ordinals, not by "left/right".
 
 On Sun, Oct 17, 2010 at 11:03 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > cons for constructor is kind of okay.
 >
 > if we were to go to pair, the selectors should be left/right.
 > so i am not sure that's the right thing to do.
 >
 >
 > On Oct 17, 2010, at 11:00 PM, Jay McCarthy wrote:
 >
 >> I almost never use cons either. I try to use list* exclusively.
 >>
 >> I would like to see pair, fst, and snd added to the language to fill
 >> the place of cons, car, and cdr.
 >>
 >> Jay
 >>
 >> On Sun, Oct 17, 2010 at 8:58 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> rest is supposed to be for lists which I think means things terminated
 >>> with an empty. In any case, in lazy we have this:
 >>>
 >>>> (rest (cons 1 2))
 >>> 1
 >>>
 >>> but in racket we have this:
 >>>
 >>>> (rest (cons 1 2))
 >>> rest: expected argument of type <non-empty list>; given '(1 . 2)
 >>>
 >>> which is nothing to do with laziness and so presumably a difference
 >>> that we don't want (and thus just a simple bug).
 >>>
 >>> Just to complete the discussion, rest is defined like this in
 >>> collects/racket/list.rkt:
 >>>
 >>> (define (rest l)
 >>> =A0(if (and (pair? l) (list? l))
 >>> =A0 =A0(cdr l)
 >>> =A0 =A0(raise-type-error 'rest "non-empty list" l)))
 >>>
 >>> but if it were defined like that in lazy then you'd get
 >>> non-termination in the example program.
 >>>
 >>> Robby
 >>>
 >>> On Sun, Oct 17, 2010 at 9:49 PM, Shriram Krishnamurthi <sk@cs.brown.edu=
 > wrote:
 >>>> I was under the impression (from pas mail from Matthias) that we were
 >>>> getting the words "car" and "cdr" out as much as possible. =A0So it wa=
 s
 >>>> surprising to see it show up on our home page. =A0And when I tried
 >>>> "rest" it worked. =A0So there seemed to be even less reason to have
 >>>> "cdr" there.
 >>>>
 >>>> Since #lang lazy redefines the meaning of a whole bunch of Racket
 >>>> primitives, it seems odd to complain that this one primitive behaves
 >>>> differently than in Racket. =A0Eg: (define 1s (cons 1 1s)) works in
 >>>> #lang lazy, so clearly it too has a different meaning.
 >>>>
 >>>> But maybe I'm missing something as to why cdr is still the right choic=
 e.
 >>>>
 >>>> Shriram
 >>>>
 >>>
 >>
 >>
 >>
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://teammccarthy.org/jay
 >>
 >> "The glory of God is Intelligence" - D&C 93
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 11:14:33 -0400

 12 hours ago, Robby Findler wrote:
 > rest is supposed to be for lists which I think means things terminated
 > with an empty. In any case, in lazy we have this:
 > 
 > > (rest (cons 1 2))
 > 1
 > 
 > but in racket we have this:
 > 
 > > (rest (cons 1 2))
 > rest: expected argument of type <non-empty list>; given '(1 . 2)
 > 
 > which is nothing to do with laziness and so presumably a difference
 > that we don't want (and thus just a simple bug).
 > 
 > Just to complete the discussion, rest is defined like this in
 > collects/racket/list.rkt:
 > 
 > (define (rest l)
 >   (if (and (pair? l) (list? l))
 >     (cdr l)
 >     (raise-type-error 'rest "non-empty list" l)))
 > 
 > but if it were defined like that in lazy then you'd get
 > non-termination in the example program.
 
 To clarify the example -- there is no idiology behind it, I'm not
 fighting for the oppressed `car' and `cdr', but I'm also not being
 fanatic about abolishing them.  The above is a good explanation for
 the inherent difference between `rest' in strict and in lazy -- I
 could make `rest' throw a similar error, but of course it would be a
 dynamic kind of test.  (It's also a good explanation for why
 connecting TR and lazy is going to be very useful.)
 
 So, if most people want to use `rest', I'm fine with changing it.
 
 
 12 hours ago, Jay McCarthy wrote:
 > I'm cool with left and right as well. (I think I think of fst/snd
 > first because of ML?)
 
 I've had first hand experience with `left' / `right' (in the context
 of `inl' and `inr'), and I'd personally puke if these names were used.
 
 
 12 hours ago, Shriram Krishnamurthi wrote:
 > fst/snd is perfectly reasonable in that pair is the specialization of
 > n-tuple, and if they were indeed tuples, you would address the fields
 > by ordinals, not by "left/right".
 
 These (and `left' / `right') also suffer from discouraging the
 restriction of `cons' being used only for lists.  So I'd be fine with
 that in a context of a new type that is used for tuples only.  (But
 then what's the point of just a binary tuple...)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 10:25:42 -0500

 I, for one, think rest in lazy should be changed.
 
 Robby
 
 On Mon, Oct 18, 2010 at 10:14 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > 12 hours ago, Robby Findler wrote:
 >> rest is supposed to be for lists which I think means things terminated
 >> with an empty. In any case, in lazy we have this:
 >>
 >> > (rest (cons 1 2))
 >> 1
 >>
 >> but in racket we have this:
 >>
 >> > (rest (cons 1 2))
 >> rest: expected argument of type <non-empty list>; given '(1 . 2)
 >>
 >> which is nothing to do with laziness and so presumably a difference
 >> that we don't want (and thus just a simple bug).
 >>
 >> Just to complete the discussion, rest is defined like this in
 >> collects/racket/list.rkt:
 >>
 >> (define (rest l)
 >> =C2=A0 (if (and (pair? l) (list? l))
 >> =C2=A0 =C2=A0 (cdr l)
 >> =C2=A0 =C2=A0 (raise-type-error 'rest "non-empty list" l)))
 >>
 >> but if it were defined like that in lazy then you'd get
 >> non-termination in the example program.
 >
 > To clarify the example -- there is no idiology behind it, I'm not
 > fighting for the oppressed `car' and `cdr', but I'm also not being
 > fanatic about abolishing them. =C2=A0The above is a good explanation for
 > the inherent difference between `rest' in strict and in lazy -- I
 > could make `rest' throw a similar error, but of course it would be a
 > dynamic kind of test. =C2=A0(It's also a good explanation for why
 > connecting TR and lazy is going to be very useful.)
 >
 > So, if most people want to use `rest', I'm fine with changing it.
 >
 >
 > 12 hours ago, Jay McCarthy wrote:
 >> I'm cool with left and right as well. (I think I think of fst/snd
 >> first because of ML?)
 >
 > I've had first hand experience with `left' / `right' (in the context
 > of `inl' and `inr'), and I'd personally puke if these names were used.
 >
 >
 > 12 hours ago, Shriram Krishnamurthi wrote:
 >> fst/snd is perfectly reasonable in that pair is the specialization of
 >> n-tuple, and if they were indeed tuples, you would address the fields
 >> by ordinals, not by "left/right".
 >
 > These (and `left' / `right') also suffer from discouraging the
 > restriction of `cons' being used only for lists. =C2=A0So I'd be fine wit=
 h
 > that in a context of a new type that is used for tuples only. =C2=A0(But
 > then what's the point of just a binary tuple...)
 >
 > --
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0((lambda (x) (x x)) (lambda (x) (x x)))=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0http=
 ://barzilay.org/ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 Maze is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 12:03:43 -0400

 40 minutes ago, Robby Findler wrote:
 > I, for one, think rest in lazy should be changed.
 
 Actually, I take that part back -- making it throw will make it do so
 at exactly the same time...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 11:05:17 -0500

 On Mon, Oct 18, 2010 at 11:03 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > 40 minutes ago, Robby Findler wrote:
 >> I, for one, think rest in lazy should be changed.
 >
 > Actually, I take that part back -- making it throw will make it do so
 > at exactly the same time...
 
 I don't get this comment. Are you saying that
 
  > (rest (cons 1 2))
 
 would signal an error? (If so, good!)
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 12:11:20 -0400

 Four minutes ago, Robby Findler wrote:
 > On Mon, Oct 18, 2010 at 11:03 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > > 40 minutes ago, Robby Findler wrote:
 > >> I, for one, think rest in lazy should be changed.
 > >
 > > Actually, I take that part back -- making it throw will make it do so
 > > at exactly the same time...
 > 
 > I don't get this comment. Are you saying that
 > 
 >  > (rest (cons 1 2))
 > 
 > would signal an error? (If so, good!)
 
 Ugh.  I take back part of taking back that part.
 
 No, it doesn't throw an error in that case -- I had `first', `second',
 etc in mind when I said that they couldn't change.
 
 As for `rest', the problem is with the actual error message.  What
 error would you make the above throw?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 11:20:36 -0500

 On Mon, Oct 18, 2010 at 11:11 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > Four minutes ago, Robby Findler wrote:
 >> On Mon, Oct 18, 2010 at 11:03 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > 40 minutes ago, Robby Findler wrote:
 >> >> I, for one, think rest in lazy should be changed.
 >> >
 >> > Actually, I take that part back -- making it throw will make it do so
 >> > at exactly the same time...
 >>
 >> I don't get this comment. Are you saying that
 >>
 >> =C2=A0> (rest (cons 1 2))
 >>
 >> would signal an error? (If so, good!)
 >
 > Ugh. =C2=A0I take back part of taking back that part.
 >
 > No, it doesn't throw an error in that case -- I had `first', `second',
 > etc in mind when I said that they couldn't change.
 
 Huh?
 
 > (first (cons 1 2))
 
 is an error too in #lang racket. I believe it should be in lazy. Are
 you agreeing with that or disagreeing?
 
 > As for `rest', the problem is with the actual error message. =C2=A0What
 > error would you make the above throw?
 
 I would make rest be this function (in lazy):
 
 (define (rest l)
  (if (and (pair? l) (list? l))
    (cdr l)
    (raise-type-error 'rest "non-empty list" l)))
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 12:27:34 -0400

 About a minute ago, Robby Findler wrote:
 > On Mon, Oct 18, 2010 at 11:11 AM, Eli Barzilay <eli@barzilay.org> wro=
 te:
 > > Four minutes ago, Robby Findler wrote:
 > >> On Mon, Oct 18, 2010 at 11:03 AM, Eli Barzilay <eli@barzilay.org> =
 wrote:
 > >> > 40 minutes ago, Robby Findler wrote:
 > >> >> I, for one, think rest in lazy should be changed.
 > >> >
 > >> > Actually, I take that part back -- making it throw will make it =
 do so
 > >> > at exactly the same time...
 > >>
 > >> I don't get this comment. Are you saying that
 > >>
 > >> =C2=A0> (rest (cons 1 2))
 > >>
 > >> would signal an error=3F (If so, good!)
 > >
 > > Ugh. =C2=A0I take back part of taking back that part.
 > >
 > > No, it doesn't throw an error in that case -- I had `first', `secon=
 d',
 > > etc in mind when I said that they couldn't change.
 >=20
 > Huh=3F
 
 For those, you'd get the same error unless you force the list (which
 will make the language very different), but...
 
 
 > > (first (cons 1 2))
 >=20
 > is an error too in #lang racket. I believe it should be in lazy. Are
 > you agreeing with that or disagreeing=3F
 >=20
 > > As for `rest', the problem is with the actual error message. =C2=A0=
 What
 > > error would you make the above throw=3F
 >=20
 > I would make rest be this function (in lazy):
 >=20
 > (define (rest l)
 >  (if (and (pair=3F l) (list=3F l))
 >    (cdr l)
 >    (raise-type-error 'rest "non-empty list" l)))
 
 ... that will be that kind of a change.  Infinite lists are one of the
 main thing to use and talk about in this language -- and that
 disqualifies that kind of eagerness.  What will happen as a result is
 that you'll get confusion when people do try to use it (get into an
 infinite loop and eventually out of memory), and since they'd all do
 the same (I'm assuming that you'd want `first', `second', to be as
 eager) -- you'll be making `car' and `cdr' be strictly more powerful
 and therefore you'd contribute to keeping them.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 11:36:57 -0500

 On Mon, Oct 18, 2010 at 11:27 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > About a minute ago, Robby Findler wrote:
 >> On Mon, Oct 18, 2010 at 11:11 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > Four minutes ago, Robby Findler wrote:
 >> >> On Mon, Oct 18, 2010 at 11:03 AM, Eli Barzilay <eli@barzilay.org> wro=
 te:
 >> >> > 40 minutes ago, Robby Findler wrote:
 >> >> >> I, for one, think rest in lazy should be changed.
 >> >> >
 >> >> > Actually, I take that part back -- making it throw will make it do =
 so
 >> >> > at exactly the same time...
 >> >>
 >> >> I don't get this comment. Are you saying that
 >> >>
 >> >> =C2=A0> (rest (cons 1 2))
 >> >>
 >> >> would signal an error? (If so, good!)
 >> >
 >> > Ugh. =C2=A0I take back part of taking back that part.
 >> >
 >> > No, it doesn't throw an error in that case -- I had `first', `second',
 >> > etc in mind when I said that they couldn't change.
 >>
 >> Huh?
 >
 > For those, you'd get the same error unless you force the list (which
 > will make the language very different), but...
 >
 >
 >> > (first (cons 1 2))
 >>
 >> is an error too in #lang racket. I believe it should be in lazy. Are
 >> you agreeing with that or disagreeing?
 >>
 >> > As for `rest', the problem is with the actual error message. =C2=A0Wha=
 t
 >> > error would you make the above throw?
 >>
 >> I would make rest be this function (in lazy):
 >>
 >> (define (rest l)
 >> =C2=A0(if (and (pair? l) (list? l))
 >> =C2=A0 =C2=A0(cdr l)
 >> =C2=A0 =C2=A0(raise-type-error 'rest "non-empty list" l)))
 >
 > ... that will be that kind of a change. =C2=A0Infinite lists are one of t=
 he
 > main thing to use and talk about in this language -- and that
 > disqualifies that kind of eagerness. =C2=A0What will happen as a result i=
 s
 > that you'll get confusion when people do try to use it (get into an
 > infinite loop and eventually out of memory), and since they'd all do
 > the same (I'm assuming that you'd want `first', `second', to be as
 > eager) -- you'll be making `car' and `cdr' be strictly more powerful
 > and therefore you'd contribute to keeping them.
 
 Yes, they are more powerful (as they are in racket too) and yes, we'd
 have to keep them in lazy and we'd have to keep it on the front of the
 web page for that program for that reason. I think that is right and
 proper. I also think that rest and first having that check has to be
 there.
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 12:43:10 -0400

 About a minute ago, Robby Findler wrote:
 > 
 > Yes, they are more powerful (as they are in racket too) and yes,
 > we'd have to keep them in lazy and we'd have to keep it on the front
 > of the web page for that program for that reason. I think that is
 > right and proper. I also think that rest and first having that check
 > has to be there.
 
 They are more powerful in racket since they admit non-lists.  They
 would be more powerful in lazy in a different way -- they'd admit
 infinite lists.  Giving up dealing with infinite lists in the same way
 as plain lists in a lazy language is IMO a major mistake, and will
 kill practically all uses for it in both teaching and hacking.  IOW, I
 expect Shriram and others to send more bug reports like:
 
   The following is one of the example programs on the racket-lang.org
   home page:
 
     #lang lazy
     ;; An infinite list:
     (define fibs (list* 1 1 (map + fibs (cdr fibs))))
     ;; Print the 1000th Fibonacci number:
     (print (list-ref fibs 1000))
 
   this example doesn't work -- drracket was working for a while and
   then it ran out of memory.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 11:52:51 -0500

 On Mon, Oct 18, 2010 at 11:43 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > About a minute ago, Robby Findler wrote:
 >>
 >> Yes, they are more powerful (as they are in racket too) and yes,
 >> we'd have to keep them in lazy and we'd have to keep it on the front
 >> of the web page for that program for that reason. I think that is
 >> right and proper. I also think that rest and first having that check
 >> has to be there.
 >
 > They are more powerful in racket since they admit non-lists. =C2=A0They
 > would be more powerful in lazy in a different way -- they'd admit
 > infinite lists. =C2=A0Giving up dealing with infinite lists in the same w=
 ay
 > as plain lists in a lazy language is IMO a major mistake, and will
 > kill practically all uses for it in both teaching and hacking. =C2=A0IOW,=
  I
 > expect Shriram and others to send more bug reports like:
 >
 > =C2=A0The following is one of the example programs on the racket-lang.org
 > =C2=A0home page:
 >
 > =C2=A0 =C2=A0#lang lazy
 > =C2=A0 =C2=A0;; An infinite list:
 > =C2=A0 =C2=A0(define fibs (list* 1 1 (map + fibs (cdr fibs))))
 > =C2=A0 =C2=A0;; Print the 1000th Fibonacci number:
 > =C2=A0 =C2=A0(print (list-ref fibs 1000))
 >
 > =C2=A0this example doesn't work -- drracket was working for a while and
 > =C2=A0then it ran out of memory.
 
 You mean where you put a "rest" in place of the "cdr"?
 
 If it were me, then I would just point them to the check in rest and
 say "too bad".
 
 Alternatively, you could have cons cells be fancier and have some kind
 of a delayed check that only signals an error when you reach a pair
 that has a non-pair/non-empty value in its cdr position.
 
 That gets tricky, tho.
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11327: don't use cdr
Date: Mon, 18 Oct 2010 12:58:46 -0400

 Three minutes ago, Robby Findler wrote:
 > On Mon, Oct 18, 2010 at 11:43 AM, Eli Barzilay <eli@barzilay.org> wro=
 te:
 > > About a minute ago, Robby Findler wrote:
 > >>
 > >> Yes, they are more powerful (as they are in racket too) and yes,
 > >> we'd have to keep them in lazy and we'd have to keep it on the fro=
 nt
 > >> of the web page for that program for that reason. I think that is
 > >> right and proper. I also think that rest and first having that che=
 ck
 > >> has to be there.
 > >
 > > They are more powerful in racket since they admit non-lists. =C2=A0=
 They
 > > would be more powerful in lazy in a different way -- they'd admit
 > > infinite lists. =C2=A0Giving up dealing with infinite lists in the =
 same way
 > > as plain lists in a lazy language is IMO a major mistake, and will
 > > kill practically all uses for it in both teaching and hacking. =C2=A0=
 IOW, I
 > > expect Shriram and others to send more bug reports like:
 > >
 > > =C2=A0The following is one of the example programs on the racket-la=
 ng.org
 > > =C2=A0home page:
 > >
 > > =C2=A0 =C2=A0#lang lazy
 > > =C2=A0 =C2=A0;; An infinite list:
 > > =C2=A0 =C2=A0(define fibs (list* 1 1 (map + fibs (cdr fibs))))
 > > =C2=A0 =C2=A0;; Print the 1000th Fibonacci number:
 > > =C2=A0 =C2=A0(print (list-ref fibs 1000))
 > >
 > > =C2=A0this example doesn't work -- drracket was working for a while=
  and
 > > =C2=A0then it ran out of memory.
 >=20
 > You mean where you put a "rest" in place of the "cdr"=3F
 
 No -- it's `list-ref' that would run into the infinite loop.
 
 And if you forgive that one, then someone will try
 
   (second fibs)
 
 
 > If it were me, then I would just point them to the check in rest and
 > say "too bad".
 >=20
 > Alternatively, you could have cons cells be fancier and have some
 > kind of a delayed check that only signals an error when you reach a
 > pair that has a non-pair/non-empty value in its cdr position.
 >=20
 > That gets tricky, tho.
 
 That will make `cons' be very different from what it is in racket, and
 will break the nice change-almost-nothing property.  (TR does the
 same, and keeps the type in plain racket.)
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !


State changed from "open" to "closed" by eli at Wed, 18 Apr 2012 10:34:10 -0400
Reason>>> I intentionally chose `cdr' -- it also uses `list*' which is
even more obscure.  (The intention is to make it look cute for
random people who know Scheme/Lisp.)

