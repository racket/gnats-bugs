From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Sep  8 20:35:05 2013
Received: from mail-wi0-f171.google.com (mail-wi0-f171.google.com [209.85.212.171])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r890Z0dk025799
	for <bugs@bugs.plt-scheme.org>; Sun, 8 Sep 2013 20:35:00 -0400
Message-Id: <201309090034.r890Yv0S025793@champlain.ccs.neu.edu>
Date: Sun, 8 Sep 2013 20:34:57 -0400
From: alexander@knauth.org
To: bugs@racket-lang.org
Subject: vector-field in plot module doesn't work for composed funtions

>Number:         14008
>Category:       misc
>Synopsis:       vector-field in plot module doesn't work for composed funtions
>Class:          sw-bug
>Responsible:    ntoronto
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Sep 08 20:36:01 -0400 2013
>Last-Modified:  Sat Apr 05 08:40:02 -0400 2014
>Originator:     Alex Knauth
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4
>Environment:
macosx "Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 331559908
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.4):
 [none]



Collections:
("/Users/Alex/Library/Racket/5.3.4/collects"
 ("installed-teachpacks"))
("/Applications/Racket v5.3.4/collects"
 ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "pkg" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
If I define a function to be (compose ...), and try to plot it as a vector-field, then it returns this error:

vector-field: contract violation
 two of the clauses in the or/c might both match: (-> (vector/c real? real?) (sequence/c real?)) and (-> real? real? (sequence/c real?))
 given: #<procedure:composed>
 in: the 1st argument of
      (->*
       ((or/c
         (-> real? real? (sequence/c real?))
         (->
          (vector/c real? real?)
          (sequence/c real?))))
       ((or/c rational? #f)
        (or/c rational? #f)
        (or/c rational? #f)
        (or/c rational? #f)
        #:alpha
        (between/c 0 1)
        #:color
        (or/c
         exact-integer?
         (or/c
          (list/c real? real? real?)
          string?
          symbol?
          (is-a?/c color%)))
        #:label
        (or/c string? #f)
        #:line-style
        (or/c
         exact-integer?
         (or/c
          'transparent
          'solid
          'dot
          'long-dash
          'short-dash
          'dot-dash))
        #:line-width
        (>=/c 0)
        #:samples
        exact-positive-integer?
        #:scale
        (or/c real? (or/c 'auto 'normalized)))
       renderer2d?)
 contract from: <collects>/plot/main.rkt
 blaming: anonymous-module
 at: <collects>/plot/main.rkt:35.39
>How-To-Repeat:
Enter this into DrRacket:
#lang racket
(require plot)
(define (f x y) 
  (vector (- y) x))
(define other-f
  (compose identity f))
(plot (list (axes)
            (function identity -5 5)
            (vector-field other-f)))

But it works fine if you use f instead of other-f, even though other-f should be the same thing as f.  
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: alexander@knauth.org, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Sun, 8 Sep 2013 19:51:23 -0500

 --089e01634ec28af83904e5e8c997
 Content-Type: text/plain; charset=UTF-8
 
 Unfortunately, I think that this has to be considered a limitation of
 compose. Presumably putting in a procedure-reduce-arity somewhere in it
 would help.
 
 I have some vague recollection that Eli didn't want to do this at some
 point in the past, but I'm not completely sure.
 
 Robby
 
 
 On Sun, Sep 8, 2013 at 7:36 PM, <alexander@knauth.org> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14008
 >
 > Reported by Alex Knauth for release: 5.3.4
 >
 > *** Description:
 > If I define a function to be (compose ...), and try to plot it as a
 > vector-field, then it returns this error:
 >
 > vector-field: contract violation
 >  two of the clauses in the or/c might both match: (-> (vector/c real?
 > real?) (sequence/c real?)) and (-> real? real? (sequence/c real?))
 >  given: #<procedure:composed>
 >  in: the 1st argument of
 >       (->*
 >        ((or/c
 >          (-> real? real? (sequence/c real?))
 >          (->
 >           (vector/c real? real?)
 >           (sequence/c real?))))
 >        ((or/c rational? #f)
 >         (or/c rational? #f)
 >         (or/c rational? #f)
 >         (or/c rational? #f)
 >         #:alpha
 >         (between/c 0 1)
 >         #:color
 >         (or/c
 >          exact-integer?
 >          (or/c
 >           (list/c real? real? real?)
 >           string?
 >           symbol?
 >           (is-a?/c color%)))
 >         #:label
 >         (or/c string? #f)
 >         #:line-style
 >         (or/c
 >          exact-integer?
 >          (or/c
 >           'transparent
 >           'solid
 >           'dot
 >           'long-dash
 >           'short-dash
 >           'dot-dash))
 >         #:line-width
 >         (>=/c 0)
 >         #:samples
 >         exact-positive-integer?
 >         #:scale
 >         (or/c real? (or/c 'auto 'normalized)))
 >        renderer2d?)
 >  contract from: <collects>/plot/main.rkt
 >  blaming: anonymous-module
 >  at: <collects>/plot/main.rkt:35.39
 >
 > *** How to repeat:
 > Enter this into DrRacket:
 > #lang racket
 > (require plot)
 > (define (f x y)
 >   (vector (- y) x))
 > (define other-f
 >   (compose identity f))
 > (plot (list (axes)
 >             (function identity -5 5)
 >             (vector-field other-f)))
 >
 > But it works fine if you use f instead of other-f, even though other-f
 > should be the same thing as f.
 >
 > *** Environment:
 > macosx "Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin Kernel
 > Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009;
 > root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m)
 > (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 331559908
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 > (links #:user? #f #:root? #t) = ()
 > raco pkg (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific (5.3.4):
 >  [none]
 >
 >
 >
 > Collections:
 > ("/Users/Alex/Library/Racket/5.3.4/collects"
 >  ("installed-teachpacks"))
 > ("/Applications/Racket v5.3.4/collects"
 >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config"
 > "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme"
 > "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework"
 > "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help"
 > "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang"
 > "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx"
 > "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 > "picturing-programs" "pkg" "plai" "planet" "plot" "preprocessor" "profile"
 > "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline"
 > "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings"
 > "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"
 > "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 > "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme"
 > "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 > (test))))
 >
 >
 
 --089e01634ec28af83904e5e8c997
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Unfortunately, I think that this has to be considered a li=
 mitation of compose. Presumably putting in a procedure-reduce-arity somewhe=
 re in it would help.<div><br></div><div>I have some vague recollection that=
  Eli didn&#39;t want to do this at some point in the past, but I&#39;m not =
 completely sure.</div>
 <div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br><br><di=
 v class=3D"gmail_quote">On Sun, Sep 8, 2013 at 7:36 PM,  <span dir=3D"ltr">=
 &lt;<a href=3D"mailto:alexander@knauth.org" target=3D"_blank">alexander@kna=
 uth.org</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 008" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14008</a><br>
 <br>
 Reported by Alex Knauth for release: 5.3.4<br>
 <br>
 *** Description:<br>
 If I define a function to be (compose ...), and try to plot it as a vector-=
 field, then it returns this error:<br>
 <br>
 vector-field: contract violation<br>
 =C2=A0two of the clauses in the or/c might both match: (-&gt; (vector/c rea=
 l? real?) (sequence/c real?)) and (-&gt; real? real? (sequence/c real?))<br=
 >
 =C2=A0given: #&lt;procedure:composed&gt;<br>
 =C2=A0in: the 1st argument of<br>
 =C2=A0 =C2=A0 =C2=A0 (-&gt;*<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt; real? real? (sequence/c real?))<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (vector/c real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (sequence/c real?))))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:alpha<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (between/c 0 1)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:color<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0exact-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (list/c real? real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 string?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 symbol?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (is-a?/c color%)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:label<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c string? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:line-style<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0exact-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;transparent<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;solid<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;dot<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;long-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;short-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;dot-dash))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:line-width<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&gt;=3D/c 0)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:samples<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 exact-positive-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:scale<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c real? (or/c &#39;auto &#39;normalized)))<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0renderer2d?)<br>
 =C2=A0contract from: &lt;collects&gt;/plot/main.rkt<br>
 =C2=A0blaming: anonymous-module<br>
 =C2=A0at: &lt;collects&gt;/plot/main.rkt:35.39<br>
 <br>
 *** How to repeat:<br>
 Enter this into DrRacket:<br>
 #lang racket<br>
 (require plot)<br>
 (define (f x y)<br>
 =C2=A0 (vector (- y) x))<br>
 (define other-f<br>
 =C2=A0 (compose identity f))<br>
 (plot (list (axes)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (function identity -5 5)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (vector-field other-f)))<br>
 <br>
 But it works fine if you use f instead of other-f, even though other-f shou=
 ld be the same thing as f.<br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin Kernel =
 Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I=
 386 i386 i386&quot; (i386-macosx/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 331559908<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D ()<br>
 raco pkg (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific (5.3.4):<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/Alex/Library/Racket/5.3.4/collects&quot;<br>
 =C2=A0(&quot;installed-teachpacks&quot;))<br>
 (&quot;/Applications/Racket v5.3.4/collects&quot;<br>
 =C2=A0(&quot;2htdp&quot; &quot;algol60&quot; &quot;at-exp&quot; &quot;brows=
 er&quot; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot; =
 &quot;data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &q=
 uot;deinprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dyne=
 xt&quot; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &=
 quot;ffi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; &q=
 uot;future-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gu=
 i-debugger&quot; &quot;help&quot; &quot;hierlist&quot; &quot;htdp&quot; &qu=
 ot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; =
 &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &qu=
 ot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;mred&quot; =
 &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;mzlib&quot; &=
 quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;parser-tools&=
 quot; &quot;picturing-programs&quot; &quot;pkg&quot; &quot;plai&quot; &quot=
 ;planet&quot; &quot;plot&quot; &quot;preprocessor&quot; &quot;profile&quot;=
  &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quot; &=
 quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &quot;readline&quot=
 ; &quot;redex&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quot; &=
 quot;schemeunit&quot; &quot;scribble&quot; &quot;scribblings&quot; &quot;sc=
 riblib&quot; &quot;setup&quot; &quot;sgl&quot; &quot;slatex&quot; &quot;sli=
 deshow&quot; &quot;srfi&quot; &quot;stepper&quot; &quot;string-constants&qu=
 ot; &quot;swindle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &quot;t=
 eachpack&quot; &quot;test-engine&quot; &quot;texpict&quot; &quot;trace&quot=
 ; &quot;typed&quot; &quot;typed-racket&quot; &quot;typed-scheme&quot; &quot=
 ;unstable&quot; &quot;version&quot; &quot;web-server&quot; &quot;wxme&quot;=
  &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 
 --089e01634ec28af83904e5e8c997--
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, alexander@knauth.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Sun, 8 Sep 2013 22:43:38 -0400

 --001a1130ca2e00082e04e5ea5b92
 Content-Type: text/plain; charset=UTF-8
 
 We could also think of this as a weakness in the contract system. After
 all, what plot wants is either a two argument or a one argument function,
 and one is provided. The contract system could delay this check, turning
 the given contract into a dependent contract based on the number of
 arguments provided.
 
 Sam
 On Sep 8, 2013 8:51 PM, "Robby Findler" <robby@eecs.northwestern.edu> wrote:
 
 > Unfortunately, I think that this has to be considered a limitation of
 > compose. Presumably putting in a procedure-reduce-arity somewhere in it
 > would help.
 >
 > I have some vague recollection that Eli didn't want to do this at some
 > point in the past, but I'm not completely sure.
 >
 > Robby
 >
 >
 > On Sun, Sep 8, 2013 at 7:36 PM, <alexander@knauth.org> wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14008
 >>
 >> Reported by Alex Knauth for release: 5.3.4
 >>
 >> *** Description:
 >> If I define a function to be (compose ...), and try to plot it as a
 >> vector-field, then it returns this error:
 >>
 >> vector-field: contract violation
 >>  two of the clauses in the or/c might both match: (-> (vector/c real?
 >> real?) (sequence/c real?)) and (-> real? real? (sequence/c real?))
 >>  given: #<procedure:composed>
 >>  in: the 1st argument of
 >>       (->*
 >>        ((or/c
 >>          (-> real? real? (sequence/c real?))
 >>          (->
 >>           (vector/c real? real?)
 >>           (sequence/c real?))))
 >>        ((or/c rational? #f)
 >>         (or/c rational? #f)
 >>         (or/c rational? #f)
 >>         (or/c rational? #f)
 >>         #:alpha
 >>         (between/c 0 1)
 >>         #:color
 >>         (or/c
 >>          exact-integer?
 >>          (or/c
 >>           (list/c real? real? real?)
 >>           string?
 >>           symbol?
 >>           (is-a?/c color%)))
 >>         #:label
 >>         (or/c string? #f)
 >>         #:line-style
 >>         (or/c
 >>          exact-integer?
 >>          (or/c
 >>           'transparent
 >>           'solid
 >>           'dot
 >>           'long-dash
 >>           'short-dash
 >>           'dot-dash))
 >>         #:line-width
 >>         (>=/c 0)
 >>         #:samples
 >>         exact-positive-integer?
 >>         #:scale
 >>         (or/c real? (or/c 'auto 'normalized)))
 >>        renderer2d?)
 >>  contract from: <collects>/plot/main.rkt
 >>  blaming: anonymous-module
 >>  at: <collects>/plot/main.rkt:35.39
 >>
 >> *** How to repeat:
 >> Enter this into DrRacket:
 >> #lang racket
 >> (require plot)
 >> (define (f x y)
 >>   (vector (- y) x))
 >> (define other-f
 >>   (compose identity f))
 >> (plot (list (axes)
 >>             (function identity -5 5)
 >>             (vector-field other-f)))
 >>
 >> But it works fine if you use f instead of other-f, even though other-f
 >> should be the same thing as f.
 >>
 >> *** Environment:
 >> macosx "Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin Kernel
 >> Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009;
 >> root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m)
 >> (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 331559908
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >> (links #:user? #f #:root? #t) = ()
 >> raco pkg (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  [none]
 >> User-specific, version-specific (5.3.4):
 >>  [none]
 >>
 >>
 >>
 >> Collections:
 >> ("/Users/Alex/Library/Racket/5.3.4/collects"
 >>  ("installed-teachpacks"))
 >> ("/Applications/Racket v5.3.4/collects"
 >>  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler"
 >> "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket"
 >> "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"
 >> "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger"
 >> "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 >> "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib"
 >> "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 >> "picturing-programs" "pkg" "plai" "planet" "plot" "preprocessor" "profile"
 >> "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline"
 >> "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings"
 >> "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"
 >> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 >> "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme"
 >> "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print
 >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >> (test))))
 >>
 >>
 >
 
 --001a1130ca2e00082e04e5ea5b92
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">We could also think of this as a weakness in the contract sy=
 stem. After all, what plot wants is either a two argument or a one argument=
  function, and one is provided. The contract system could delay this check,=
  turning the given contract into a dependent contract based on the number o=
 f arguments provided.</p>
 
 <p dir=3D"ltr">Sam</p>
 <div class=3D"gmail_quote">On Sep 8, 2013 8:51 PM, &quot;Robby Findler&quot=
 ; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwester=
 n.edu</a>&gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_quo=
 te" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"=
 >
 <div dir=3D"ltr">Unfortunately, I think that this has to be considered a li=
 mitation of compose. Presumably putting in a procedure-reduce-arity somewhe=
 re in it would help.<div><br></div><div>I have some vague recollection that=
  Eli didn&#39;t want to do this at some point in the past, but I&#39;m not =
 completely sure.</div>
 
 <div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br><br><di=
 v class=3D"gmail_quote">On Sun, Sep 8, 2013 at 7:36 PM,  <span dir=3D"ltr">=
 &lt;<a href=3D"mailto:alexander@knauth.org" target=3D"_blank">alexander@kna=
 uth.org</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 008" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14008</a><br>
 <br>
 Reported by Alex Knauth for release: 5.3.4<br>
 <br>
 *** Description:<br>
 If I define a function to be (compose ...), and try to plot it as a vector-=
 field, then it returns this error:<br>
 <br>
 vector-field: contract violation<br>
 =C2=A0two of the clauses in the or/c might both match: (-&gt; (vector/c rea=
 l? real?) (sequence/c real?)) and (-&gt; real? real? (sequence/c real?))<br=
 >
 =C2=A0given: #&lt;procedure:composed&gt;<br>
 =C2=A0in: the 1st argument of<br>
 =C2=A0 =C2=A0 =C2=A0 (-&gt;*<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt; real? real? (sequence/c real?))<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (vector/c real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (sequence/c real?))))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:alpha<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (between/c 0 1)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:color<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0exact-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (list/c real? real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 string?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 symbol?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (is-a?/c color%)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:label<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c string? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:line-style<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0exact-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;transparent<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;solid<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;dot<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;long-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;short-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;dot-dash))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:line-width<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&gt;=3D/c 0)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:samples<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 exact-positive-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:scale<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c real? (or/c &#39;auto &#39;normalized)))<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0renderer2d?)<br>
 =C2=A0contract from: &lt;collects&gt;/plot/main.rkt<br>
 =C2=A0blaming: anonymous-module<br>
 =C2=A0at: &lt;collects&gt;/plot/main.rkt:35.39<br>
 <br>
 *** How to repeat:<br>
 Enter this into DrRacket:<br>
 #lang racket<br>
 (require plot)<br>
 (define (f x y)<br>
 =C2=A0 (vector (- y) x))<br>
 (define other-f<br>
 =C2=A0 (compose identity f))<br>
 (plot (list (axes)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (function identity -5 5)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (vector-field other-f)))<br>
 <br>
 But it works fine if you use f instead of other-f, even though other-f shou=
 ld be the same thing as f.<br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin Kernel =
 Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I=
 386 i386 i386&quot; (i386-macosx/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 331559908<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D ()<br>
 raco pkg (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific (5.3.4):<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/Alex/Library/Racket/5.3.4/collects&quot;<br>
 =C2=A0(&quot;installed-teachpacks&quot;))<br>
 (&quot;/Applications/Racket v5.3.4/collects&quot;<br>
 =C2=A0(&quot;2htdp&quot; &quot;algol60&quot; &quot;at-exp&quot; &quot;brows=
 er&quot; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot; =
 &quot;data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &q=
 uot;deinprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dyne=
 xt&quot; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &=
 quot;ffi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; &q=
 uot;future-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gu=
 i-debugger&quot; &quot;help&quot; &quot;hierlist&quot; &quot;htdp&quot; &qu=
 ot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; =
 &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &qu=
 ot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;mred&quot; =
 &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;mzlib&quot; &=
 quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;parser-tools&=
 quot; &quot;picturing-programs&quot; &quot;pkg&quot; &quot;plai&quot; &quot=
 ;planet&quot; &quot;plot&quot; &quot;preprocessor&quot; &quot;profile&quot;=
  &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quot; &=
 quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &quot;readline&quot=
 ; &quot;redex&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quot; &=
 quot;schemeunit&quot; &quot;scribble&quot; &quot;scribblings&quot; &quot;sc=
 riblib&quot; &quot;setup&quot; &quot;sgl&quot; &quot;slatex&quot; &quot;sli=
 deshow&quot; &quot;srfi&quot; &quot;stepper&quot; &quot;string-constants&qu=
 ot; &quot;swindle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &quot;t=
 eachpack&quot; &quot;test-engine&quot; &quot;texpict&quot; &quot;trace&quot=
 ; &quot;typed&quot; &quot;typed-racket&quot; &quot;typed-scheme&quot; &quot=
 ;unstable&quot; &quot;version&quot; &quot;web-server&quot; &quot;wxme&quot;=
  &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 </blockquote></div>
 
 --001a1130ca2e00082e04e5ea5b92--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, alexander@knauth.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Mon, 9 Sep 2013 07:48:17 -0500

 --047d7b2e477c68803204e5f2cdcd
 Content-Type: text/plain; charset=UTF-8
 
 Oh, I suppose that's right. Altho it seems much simpler to just fix
 compose. After all:
 
 > (procedure-arity (compose identity f))
 (arity-at-least 0)
 > ((compose identity f) 1 2 3)
 f: arity mismatch;
  the expected number of arguments does not match the given number
   expected: 2
   given: 3
   arguments...:
    1
    2
    3
   context...:
    /Users/robby/git/plt/racket/collects/racket/private/list.rkt:325:18
    /Users/robby/git/plt/racket/collects/racket/private/misc.rkt:87:7
 
 
 
 
 On Sun, Sep 8, 2013 at 9:43 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>wrote:
 
 > We could also think of this as a weakness in the contract system. After
 > all, what plot wants is either a two argument or a one argument function,
 > and one is provided. The contract system could delay this check, turning
 > the given contract into a dependent contract based on the number of
 > arguments provided.
 >
 > Sam
 > On Sep 8, 2013 8:51 PM, "Robby Findler" <robby@eecs.northwestern.edu>
 > wrote:
 >
 >> Unfortunately, I think that this has to be considered a limitation of
 >> compose. Presumably putting in a procedure-reduce-arity somewhere in it
 >> would help.
 >>
 >> I have some vague recollection that Eli didn't want to do this at some
 >> point in the past, but I'm not completely sure.
 >>
 >> Robby
 >>
 >>
 >> On Sun, Sep 8, 2013 at 7:36 PM, <alexander@knauth.org> wrote:
 >>
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=14008
 >>>
 >>> Reported by Alex Knauth for release: 5.3.4
 >>>
 >>> *** Description:
 >>> If I define a function to be (compose ...), and try to plot it as a
 >>> vector-field, then it returns this error:
 >>>
 >>> vector-field: contract violation
 >>>  two of the clauses in the or/c might both match: (-> (vector/c real?
 >>> real?) (sequence/c real?)) and (-> real? real? (sequence/c real?))
 >>>  given: #<procedure:composed>
 >>>  in: the 1st argument of
 >>>       (->*
 >>>        ((or/c
 >>>          (-> real? real? (sequence/c real?))
 >>>          (->
 >>>           (vector/c real? real?)
 >>>           (sequence/c real?))))
 >>>        ((or/c rational? #f)
 >>>         (or/c rational? #f)
 >>>         (or/c rational? #f)
 >>>         (or/c rational? #f)
 >>>         #:alpha
 >>>         (between/c 0 1)
 >>>         #:color
 >>>         (or/c
 >>>          exact-integer?
 >>>          (or/c
 >>>           (list/c real? real? real?)
 >>>           string?
 >>>           symbol?
 >>>           (is-a?/c color%)))
 >>>         #:label
 >>>         (or/c string? #f)
 >>>         #:line-style
 >>>         (or/c
 >>>          exact-integer?
 >>>          (or/c
 >>>           'transparent
 >>>           'solid
 >>>           'dot
 >>>           'long-dash
 >>>           'short-dash
 >>>           'dot-dash))
 >>>         #:line-width
 >>>         (>=/c 0)
 >>>         #:samples
 >>>         exact-positive-integer?
 >>>         #:scale
 >>>         (or/c real? (or/c 'auto 'normalized)))
 >>>        renderer2d?)
 >>>  contract from: <collects>/plot/main.rkt
 >>>  blaming: anonymous-module
 >>>  at: <collects>/plot/main.rkt:35.39
 >>>
 >>> *** How to repeat:
 >>> Enter this into DrRacket:
 >>> #lang racket
 >>> (require plot)
 >>> (define (f x y)
 >>>   (vector (- y) x))
 >>> (define other-f
 >>>   (compose identity f))
 >>> (plot (list (axes)
 >>>             (function identity -5 5)
 >>>             (vector-field other-f)))
 >>>
 >>> But it works fine if you use f instead of other-f, even though other-f
 >>> should be the same thing as f.
 >>>
 >>> *** Environment:
 >>> macosx "Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin Kernel
 >>> Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009;
 >>> root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m)
 >>> (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 331559908
 >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >>> (links #:user? #f #:root? #t) = ()
 >>> raco pkg (show):
 >>> Installation-wide:
 >>>  [none]
 >>> User-specific, all-version:
 >>>  [none]
 >>> User-specific, version-specific (5.3.4):
 >>>  [none]
 >>>
 >>>
 >>>
 >>> Collections:
 >>> ("/Users/Alex/Library/Racket/5.3.4/collects"
 >>>  ("installed-teachpacks"))
 >>> ("/Applications/Racket v5.3.4/collects"
 >>>  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler"
 >>> "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket"
 >>> "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"
 >>> "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger"
 >>> "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 >>> "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib"
 >>> "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 >>> "picturing-programs" "pkg" "plai" "planet" "plot" "preprocessor" "profile"
 >>> "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline"
 >>> "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings"
 >>> "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"
 >>> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 >>> "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme"
 >>> "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print
 >>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >>> (test))))
 >>>
 >>>
 >>
 
 --047d7b2e477c68803204e5f2cdcd
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Oh, I suppose that&#39;s right. Altho it seems much simple=
 r to just fix compose. After all:<div><br></div><div><div>&gt; (procedure-a=
 rity (compose identity f))</div><div>(arity-at-least 0)</div><div>&gt; ((co=
 mpose identity f) 1 2 3)</div>
 <div>f: arity mismatch;</div><div>=C2=A0the expected number of arguments do=
 es not match the given number</div><div>=C2=A0 expected: 2</div><div>=C2=A0=
  given: 3</div><div>=C2=A0 arguments...:</div><div>=C2=A0 =C2=A01</div><div=
 >=C2=A0 =C2=A02</div><div>=C2=A0 =C2=A03</div>
 <div>=C2=A0 context...:</div><div>=C2=A0 =C2=A0/Users/robby/git/plt/racket/=
 collects/racket/private/list.rkt:325:18</div><div>=C2=A0 =C2=A0/Users/robby=
 /git/plt/racket/collects/racket/private/misc.rkt:87:7</div><div><br></div><=
 /div><div><br></div></div>
 <div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Sun, Sep 8=
 , 2013 at 9:43 PM, Sam Tobin-Hochstadt <span dir=3D"ltr">&lt;<a href=3D"mai=
 lto:samth@cs.indiana.edu" target=3D"_blank">samth@cs.indiana.edu</a>&gt;</s=
 pan> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><p dir=3D"ltr">We could also think of this a=
 s a weakness in the contract system. After all, what plot wants is either a=
  two argument or a one argument function, and one is provided. The contract=
  system could delay this check, turning the given contract into a dependent=
  contract based on the number of arguments provided.</p>
 <span class=3D"HOEnZb"><font color=3D"#888888">
 
 <p dir=3D"ltr">Sam</p></font></span><div class=3D"HOEnZb"><div class=3D"h5"=
 >
 <div class=3D"gmail_quote">On Sep 8, 2013 8:51 PM, &quot;Robby Findler&quot=
 ; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blank">robb=
 y@eecs.northwestern.edu</a>&gt; wrote:<br type=3D"attribution"><blockquote =
 class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid=
 ;padding-left:1ex">
 
 <div dir=3D"ltr">Unfortunately, I think that this has to be considered a li=
 mitation of compose. Presumably putting in a procedure-reduce-arity somewhe=
 re in it would help.<div><br></div><div>I have some vague recollection that=
  Eli didn&#39;t want to do this at some point in the past, but I&#39;m not =
 completely sure.</div>
 
 
 <div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br><br><di=
 v class=3D"gmail_quote">On Sun, Sep 8, 2013 at 7:36 PM,  <span dir=3D"ltr">=
 &lt;<a href=3D"mailto:alexander@knauth.org" target=3D"_blank">alexander@kna=
 uth.org</a>&gt;</span> wrote:<br>
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 008" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14008</a><br>
 <br>
 Reported by Alex Knauth for release: 5.3.4<br>
 <br>
 *** Description:<br>
 If I define a function to be (compose ...), and try to plot it as a vector-=
 field, then it returns this error:<br>
 <br>
 vector-field: contract violation<br>
 =C2=A0two of the clauses in the or/c might both match: (-&gt; (vector/c rea=
 l? real?) (sequence/c real?)) and (-&gt; real? real? (sequence/c real?))<br=
 >
 =C2=A0given: #&lt;procedure:composed&gt;<br>
 =C2=A0in: the 1st argument of<br>
 =C2=A0 =C2=A0 =C2=A0 (-&gt;*<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt; real? real? (sequence/c real?))<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (vector/c real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (sequence/c real?))))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c rational? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:alpha<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (between/c 0 1)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:color<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0exact-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (list/c real? real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 string?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 symbol?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (is-a?/c color%)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:label<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c string? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:line-style<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0exact-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;transparent<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;solid<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;dot<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;long-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;short-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &#39;dot-dash))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:line-width<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&gt;=3D/c 0)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:samples<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 exact-positive-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:scale<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c real? (or/c &#39;auto &#39;normalized)))<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0renderer2d?)<br>
 =C2=A0contract from: &lt;collects&gt;/plot/main.rkt<br>
 =C2=A0blaming: anonymous-module<br>
 =C2=A0at: &lt;collects&gt;/plot/main.rkt:35.39<br>
 <br>
 *** How to repeat:<br>
 Enter this into DrRacket:<br>
 #lang racket<br>
 (require plot)<br>
 (define (f x y)<br>
 =C2=A0 (vector (- y) x))<br>
 (define other-f<br>
 =C2=A0 (compose identity f))<br>
 (plot (list (axes)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (function identity -5 5)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (vector-field other-f)))<br>
 <br>
 But it works fine if you use f instead of other-f, even though other-f shou=
 ld be the same thing as f.<br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin Kernel =
 Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I=
 386 i386 i386&quot; (i386-macosx/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 331559908<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D ()<br>
 raco pkg (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific (5.3.4):<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/Alex/Library/Racket/5.3.4/collects&quot;<br>
 =C2=A0(&quot;installed-teachpacks&quot;))<br>
 (&quot;/Applications/Racket v5.3.4/collects&quot;<br>
 =C2=A0(&quot;2htdp&quot; &quot;algol60&quot; &quot;at-exp&quot; &quot;brows=
 er&quot; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot; =
 &quot;data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &q=
 uot;deinprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dyne=
 xt&quot; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &=
 quot;ffi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; &q=
 uot;future-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gu=
 i-debugger&quot; &quot;help&quot; &quot;hierlist&quot; &quot;htdp&quot; &qu=
 ot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; =
 &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &qu=
 ot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;mred&quot; =
 &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;mzlib&quot; &=
 quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;parser-tools&=
 quot; &quot;picturing-programs&quot; &quot;pkg&quot; &quot;plai&quot; &quot=
 ;planet&quot; &quot;plot&quot; &quot;preprocessor&quot; &quot;profile&quot;=
  &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quot; &=
 quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &quot;readline&quot=
 ; &quot;redex&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quot; &=
 quot;schemeunit&quot; &quot;scribble&quot; &quot;scribblings&quot; &quot;sc=
 riblib&quot; &quot;setup&quot; &quot;sgl&quot; &quot;slatex&quot; &quot;sli=
 deshow&quot; &quot;srfi&quot; &quot;stepper&quot; &quot;string-constants&qu=
 ot; &quot;swindle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &quot;t=
 eachpack&quot; &quot;test-engine&quot; &quot;texpict&quot; &quot;trace&quot=
 ; &quot;typed&quot; &quot;typed-racket&quot; &quot;typed-scheme&quot; &quot=
 ;unstable&quot; &quot;version&quot; &quot;web-server&quot; &quot;wxme&quot;=
  &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 </blockquote></div>
 </div></div></blockquote></div><br></div>
 
 --047d7b2e477c68803204e5f2cdcd--
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, alexander@knauth.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Mon, 9 Sep 2013 10:01:45 -0400

 An hour ago, Robby Findler wrote:
 > Oh, I suppose that's right.
 
 IIUC, the code is dispatching on arity to do two different things,
 which IMO is a bad idea.
 
 
 > Altho it seems much simpler to just fix compose.  After all:
 
 Yes, that would be the right thing -- as my comment in the code says,
 even better would be something that does the full keyword arity
 reduction (`procedure-reduce-keyword-arity') and renames the result
 with some indicative name (`procedure-rename').  But last time I
 tried, there is a significant speed hit with all of these, which is in
 a function that IMO people expect to have a very small (if any) speed
 issue.
 
 (BTW, I think that the speed there is important enough that it would
 be better to implement it as a macro, with a non-sophisticated version
 for value uses.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, alexander@knauth.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Mon, 9 Sep 2013 09:15:04 -0500

 --089e01161b46c2318604e5f4035d
 Content-Type: text/plain; charset=UTF-8
 
 On Mon, Sep 9, 2013 at 9:01 AM, Eli Barzilay <eli@barzilay.org> wrote:
 
 > An hour ago, Robby Findler wrote:
 > > Oh, I suppose that's right.
 >
 > IIUC, the code is dispatching on arity to do two different things,
 > which IMO is a bad idea.
 >
 >
 >
 Just to be sure we're on the same page here, the contract that was written
 was:
 
   (or/c (-> real? real? c) (-> (vector/c real? real?) c)
 
 (for some contract 'c') which seems to be asking for that. In other words,
 this comment seems to be directed at the math library, not the contract
 library.
 
 And actually, I find this kind of a contract to be quite convenient. (Not
 that I've used such functions much myself, but it just smacks of
 convenience.)
 
 Robby
 
 --089e01161b46c2318604e5f4035d
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Mon, Sep 9, 2013 at 9:01 AM, Eli Barzilay <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:eli@barzilay.org" target=3D"_blank">eli@barzilay.org</a>&=
 gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex"><div class=3D"im">An hour ago, Robby Findler wrote:<br>
 &gt; Oh, I suppose that&#39;s right.<br>
 <br>
 </div>IIUC, the code is dispatching on arity to do two different things,<br=
 >
 which IMO is a bad idea.<br>
 <div class=3D"im"><br>
 <br></div></blockquote><div><br></div><div>Just to be sure we&#39;re on the=
  same page here, the contract that was written was:<br><br>=C2=A0 (or/c (-&=
 gt; real? real? c) (-&gt; (vector/c real? real?) c)<br><br>(for some contra=
 ct &#39;c&#39;) which seems to be asking for that. In other words, this com=
 ment seems to be directed at the math library, not the contract library.<br=
 >
 <br>And actually, I find this kind of a contract to be quite convenient. (N=
 ot that I&#39;ve used such functions much myself, but it just smacks of con=
 venience.)</div><div><br></div><div>Robby</div><div><br></div></div></div>
 </div>
 
 --089e01161b46c2318604e5f4035d--
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, alexander@knauth.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Mon, 9 Sep 2013 10:18:48 -0400

 Just now, Robby Findler wrote:
 > On Mon, Sep 9, 2013 at 9:01 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > 
 >     An hour ago, Robby Findler wrote:
 >     > Oh, I suppose that's right.
 >    
 >     IIUC, the code is dispatching on arity to do two different things,
 >     which IMO is a bad idea.
 > 
 > Just to be sure we're on the same page here, the contract that was written
 > was:
 > 
 >   (or/c (-> real? real? c) (-> (vector/c real? real?) c)
 > 
 > (for some contract 'c') which seems to be asking for that. In other
 > words, this comment seems to be directed at the math library, not
 > the contract library.
 
 Yes, and that looks like the code deals with functions in a different
 way based on their arity.  (And I thought that it was in plot, not in
 math.)
 
 
 > And actually, I find this kind of a contract to be quite
 > convenient. (Not that I've used such functions much myself, but it
 > just smacks of convenience.)
 
 I have used such things occasionally -- mostly by dispatching over the
 function being a thunk or not -- and while I found such uses
 convenient for my own use, I always thought that for a public
 interface they're not a good idea.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
 
From: Stephen Bloch <bloch@adelphi.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, alexander@knauth.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work for composed funtions
Date: Mon, 9 Sep 2013 11:23:36 -0400

 --Apple-Mail=_B6A0A479-E17E-4F46-AB85-5B930AA35C33
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 >>   (or/c (-> real? real? c) (-> (vector/c real? real?) c)
 >>=20
 >> (for some contract 'c') which seems to be asking for that. In other
 >> words, this comment seems to be directed at the math library, not
 >> the contract library.
 >=20
 > Yes, and that looks like the code deals with functions in a different
 > way based on their arity.  (And I thought that it was in plot, not in
 > math.)
 >=20
 >=20
 >> And actually, I find this kind of a contract to be quite
 >> convenient. (Not that I've used such functions much myself, but it
 >> just smacks of convenience.)
 
 I did something like that in the picturing-programs library with the =
 function parameter to "map-image".
 If that function has arity 1, it calls that function on the color of =
 each pixel of the existing image.
 If it has arity 3, it calls that function on the color, x and y =
 coordinates of each pixel of the existing image.
 If the arity is anything else, it complains.
 Again, this is a convenience measure: it allows you to apply a =
 color->color function to an image without writing a separate version of =
 it that takes in x and y parameters and ignores them.
 
 
 Stephen Bloch
 sbloch@adelphi.edu
 GPG key at http://home.adelphi.edu/sbloch/sbloch.pubkey.asc
 
 
 --Apple-Mail=_B6A0A479-E17E-4F46-AB85-5B930AA35C33
 Content-Transfer-Encoding: 7bit
 Content-Disposition: attachment;
 	filename=signature.asc
 Content-Type: application/pgp-signature;
 	name=signature.asc
 Content-Description: Message signed with OpenPGP using GPGMail
 
 -----BEGIN PGP SIGNATURE-----
 
 iQEcBAEBAgAGBQJSLef4AAoJEFpYErlTRMKOx0sH/1t1BDh32Ph3s88wVQVCdih6
 nKhSL/65yKRvi/UdISRTpobv/6WeMD6O/XTTdkBYU6Og0AED7R4NU1go3alca4nb
 A66cBOQn5vgU86gd76x6xPiNLjyr9H7NGgJ6ijOVlpTUOmIBbHl6idtVKtip4B/j
 MOn1v0/aS491QXzNJfH1FrVoww7hh6WPyI9SQtuHukUliz5yqZ2yCmER5rVLNof6
 EWTnXnYoaSp31DWXStQ3yGqc8srFB5F4jRdn8jJgEgTRAv0mT50WvsyhFbZbMP7o
 d6tuw3pWCntrk2mrqujn0AoYH6MqKPtaiY/vY8wl+ax5Mx3V23YVo7/ATnp/9DI=
 =FlhZ
 -----END PGP SIGNATURE-----
 
 --Apple-Mail=_B6A0A479-E17E-4F46-AB85-5B930AA35C33--
From: Neil Toronto <neil.toronto@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, alexander@knauth.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Mon, 09 Sep 2013 09:49:11 -0600

 On 09/09/2013 08:18 AM, Eli Barzilay wrote:
 > Just now, Robby Findler wrote:
 >> On Mon, Sep 9, 2013 at 9:01 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >>
 >>      An hour ago, Robby Findler wrote:
 >>      > Oh, I suppose that's right.
 >>
 >>      IIUC, the code is dispatching on arity to do two different things,
 >>      which IMO is a bad idea.
 >>
 >> Just to be sure we're on the same page here, the contract that was written
 >> was:
 >>
 >>    (or/c (-> real? real? c) (-> (vector/c real? real?) c)
 >>
 >> (for some contract 'c') which seems to be asking for that. In other
 >> words, this comment seems to be directed at the math library, not
 >> the contract library.
 >
 > Yes, and that looks like the code deals with functions in a different
 > way based on their arity.  (And I thought that it was in plot, not in
 > math.)
 >
 >
 >> And actually, I find this kind of a contract to be quite
 >> convenient. (Not that I've used such functions much myself, but it
 >> just smacks of convenience.)
 >
 > I have used such things occasionally -- mostly by dispatching over the
 > function being a thunk or not -- and while I found such uses
 > convenient for my own use, I always thought that for a public
 > interface they're not a good idea.
 
 I usually don't like them, either. IIRC, the old plot library's 
 `vector-field' required the function to accept a single vector-valued 
 argument. I was trying to make it backward-compatible and make the 
 `vector-field' type match that of other RxR->R renderers (e.g. those for 
 plotting surfaces) by having its function argument accept either two 
 reals or a vector.
 
 FWIW, I agree that `compose' ought to be fast in typical uses. If it has 
 to be manually inlined because procedures' arities are observable, so be 
 it. I don't know how that would affect uses in Typed Racket.
 
 Neil ⊥
 

Responsible changed from "nobody" to "ntoronto" by samth at Mon, 21 Oct 2013 10:06:56 -0400
Reason>>> .

From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, alexander@knauth.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Fri, 04 Apr 2014 21:56:17 -0600

 An update: Alexander's test case now produces this error:
 
 . . plt/racket/collects/racket/contract/private/blame.rkt:245:0: 
 default-blame-format: contract violation
    expected: a blame object with a non-#f positive field
    given: #<blame>
 
 I'm not sure what to make of it, nor in what direction it's heading.
 
 Neil ⊥
 
 On 09/08/2013 08:43 PM, Sam Tobin-Hochstadt wrote:
 > We could also think of this as a weakness in the contract system. After
 > all, what plot wants is either a two argument or a one argument
 > function, and one is provided. The contract system could delay this
 > check, turning the given contract into a dependent contract based on the
 > number of arguments provided.
 >
 > Sam
 >
 > On Sep 8, 2013 8:51 PM, "Robby Findler" <robby@eecs.northwestern.edu
 > <mailto:robby@eecs.northwestern.edu>> wrote:
 >
 >     Unfortunately, I think that this has to be considered a limitation
 >     of compose. Presumably putting in a procedure-reduce-arity somewhere
 >     in it would help.
 >
 >     I have some vague recollection that Eli didn't want to do this at
 >     some point in the past, but I'm not completely sure.
 >
 >     Robby
 >
 >
 >     On Sun, Sep 8, 2013 at 7:36 PM, <alexander@knauth.org
 >     <mailto:alexander@knauth.org>> wrote:
 >
 >         A new problem report is waiting at
 >         http://bugs.racket-lang.org/query/?cmd=view&pr=14008
 >
 >         Reported by Alex Knauth for release: 5.3.4
 >
 >         *** Description:
 >         If I define a function to be (compose ...), and try to plot it
 >         as a vector-field, then it returns this error:
 >
 >         vector-field: contract violation
 >           two of the clauses in the or/c might both match: (-> (vector/c
 >         real? real?) (sequence/c real?)) and (-> real? real? (sequence/c
 >         real?))
 >           given: #<procedure:composed>
 >           in: the 1st argument of
 >                (->*
 >                 ((or/c
 >                   (-> real? real? (sequence/c real?))
 >                   (->
 >                    (vector/c real? real?)
 >                    (sequence/c real?))))
 >                 ((or/c rational? #f)
 >                  (or/c rational? #f)
 >                  (or/c rational? #f)
 >                  (or/c rational? #f)
 >                  #:alpha
 >                  (between/c 0 1)
 >                  #:color
 >                  (or/c
 >                   exact-integer?
 >                   (or/c
 >                    (list/c real? real? real?)
 >                    string?
 >                    symbol?
 >                    (is-a?/c color%)))
 >                  #:label
 >                  (or/c string? #f)
 >                  #:line-style
 >                  (or/c
 >                   exact-integer?
 >                   (or/c
 >                    'transparent
 >                    'solid
 >                    'dot
 >                    'long-dash
 >                    'short-dash
 >                    'dot-dash))
 >                  #:line-width
 >                  (>=/c 0)
 >                  #:samples
 >                  exact-positive-integer?
 >                  #:scale
 >                  (or/c real? (or/c 'auto 'normalized)))
 >                 renderer2d?)
 >           contract from: <collects>/plot/main.rkt
 >           blaming: anonymous-module
 >           at: <collects>/plot/main.rkt:35.39
 >
 >         *** How to repeat:
 >         Enter this into DrRacket:
 >         #lang racket
 >         (require plot)
 >         (define (f x y)
 >            (vector (- y) x))
 >         (define other-f
 >            (compose identity f))
 >         (plot (list (axes)
 >                      (function identity -5 5)
 >                      (vector-field other-f)))
 >
 >         But it works fine if you use f instead of other-f, even though
 >         other-f should be the same thing as f.
 >
 >         *** Environment:
 >         macosx "Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin
 >         Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009;
 >         root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m)
 >         (get-display-depth) = 32
 >         Human Language: english
 >         (current-memory-use) 331559908
 >         Links: (links) = (); (links #:user? #f) = (); (links #:root? #t)
 >         = (); (links #:user? #f #:root? #t) = ()
 >         raco pkg (show):
 >         Installation-wide:
 >           [none]
 >         User-specific, all-version:
 >           [none]
 >         User-specific, version-specific (5.3.4):
 >           [none]
 >
 >
 >
 >         Collections:
 >         ("/Users/Alex/Library/Racket/5.3.4/collects"
 >           ("installed-teachpacks"))
 >         ("/Applications/Racket v5.3.4/collects"
 >           ("2htdp" "algol60" "at-exp" "browser" "compatibility"
 >         "compiler" "config" "data" "datalog" "db" "defaults"
 >         "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui"
 >         "eopl" "errortrace" "ffi" "file" "framework" "frtime"
 >         "future-visualizer" "games" "graphics" "gui-debugger" "help"
 >         "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 >         "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred"
 >         "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"
 >         "parser-tools" "picturing-programs" "pkg" "plai" "planet" "plot"
 >         "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog"
 >         "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp"
 >         "scheme" "schemeunit" "scribble" "scribblings" "scriblib"
 >         "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"
 >         "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 >         "test-engine" "texpict" "trace" "typed" "typed-racket"
 >         "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"
 >         "xrepl"))
 >
 >         Computer Language: (("Determine language from source") (#(#t
 >         print mixed-fraction-e #f #t debug) (default) #() "#lang
 >         racket\n" #t #t ((main) (test))))
 >
 >
 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Robby Findler <robby@eecs.northwestern.edu>, alexander@knauth.org,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Sat, 5 Apr 2014 05:31:06 -0400

 --089e013a0f8a3230d104f6484b55
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 That definitely shouldn't happen, and looks on the surface like a problem
 with the contract system.
 
 Sam
 On Apr 4, 2014 11:56 PM, "Neil Toronto" <neil.toronto@gmail.com> wrote:
 
 > An update: Alexander's test case now produces this error:
 >
 > . . plt/racket/collects/racket/contract/private/blame.rkt:245:0:
 > default-blame-format: contract violation
 >   expected: a blame object with a non-#f positive field
 >   given: #<blame>
 >
 > I'm not sure what to make of it, nor in what direction it's heading.
 >
 > Neil =E2=8A=A5
 >
 > On 09/08/2013 08:43 PM, Sam Tobin-Hochstadt wrote:
 >
 >> We could also think of this as a weakness in the contract system. After
 >> all, what plot wants is either a two argument or a one argument
 >> function, and one is provided. The contract system could delay this
 >> check, turning the given contract into a dependent contract based on the
 >> number of arguments provided.
 >>
 >> Sam
 >>
 >> On Sep 8, 2013 8:51 PM, "Robby Findler" <robby@eecs.northwestern.edu
 >> <mailto:robby@eecs.northwestern.edu>> wrote:
 >>
 >>     Unfortunately, I think that this has to be considered a limitation
 >>     of compose. Presumably putting in a procedure-reduce-arity somewhere
 >>     in it would help.
 >>
 >>     I have some vague recollection that Eli didn't want to do this at
 >>     some point in the past, but I'm not completely sure.
 >>
 >>     Robby
 >>
 >>
 >>     On Sun, Sep 8, 2013 at 7:36 PM, <alexander@knauth.org
 >>     <mailto:alexander@knauth.org>> wrote:
 >>
 >>         A new problem report is waiting at
 >>         http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D14008
 >>
 >>         Reported by Alex Knauth for release: 5.3.4
 >>
 >>         *** Description:
 >>         If I define a function to be (compose ...), and try to plot it
 >>         as a vector-field, then it returns this error:
 >>
 >>         vector-field: contract violation
 >>           two of the clauses in the or/c might both match: (-> (vector/c
 >>         real? real?) (sequence/c real?)) and (-> real? real? (sequence/c
 >>         real?))
 >>           given: #<procedure:composed>
 >>           in: the 1st argument of
 >>                (->*
 >>                 ((or/c
 >>                   (-> real? real? (sequence/c real?))
 >>                   (->
 >>                    (vector/c real? real?)
 >>                    (sequence/c real?))))
 >>                 ((or/c rational? #f)
 >>                  (or/c rational? #f)
 >>                  (or/c rational? #f)
 >>                  (or/c rational? #f)
 >>                  #:alpha
 >>                  (between/c 0 1)
 >>                  #:color
 >>                  (or/c
 >>                   exact-integer?
 >>                   (or/c
 >>                    (list/c real? real? real?)
 >>                    string?
 >>                    symbol?
 >>                    (is-a?/c color%)))
 >>                  #:label
 >>                  (or/c string? #f)
 >>                  #:line-style
 >>                  (or/c
 >>                   exact-integer?
 >>                   (or/c
 >>                    'transparent
 >>                    'solid
 >>                    'dot
 >>                    'long-dash
 >>                    'short-dash
 >>                    'dot-dash))
 >>                  #:line-width
 >>                  (>=3D/c 0)
 >>                  #:samples
 >>                  exact-positive-integer?
 >>                  #:scale
 >>                  (or/c real? (or/c 'auto 'normalized)))
 >>                 renderer2d?)
 >>           contract from: <collects>/plot/main.rkt
 >>           blaming: anonymous-module
 >>           at: <collects>/plot/main.rkt:35.39
 >>
 >>         *** How to repeat:
 >>         Enter this into DrRacket:
 >>         #lang racket
 >>         (require plot)
 >>         (define (f x y)
 >>            (vector (- y) x))
 >>         (define other-f
 >>            (compose identity f))
 >>         (plot (list (axes)
 >>                      (function identity -5 5)
 >>                      (vector-field other-f)))
 >>
 >>         But it works fine if you use f instead of other-f, even though
 >>         other-f should be the same thing as f.
 >>
 >>         *** Environment:
 >>         macosx "Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin
 >>         Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009;
 >>         root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m)
 >>         (get-display-depth) =3D 32
 >>         Human Language: english
 >>         (current-memory-use) 331559908
 >>         Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root?=
  #t)
 >>         =3D (); (links #:user? #f #:root? #t) =3D ()
 >>         raco pkg (show):
 >>         Installation-wide:
 >>           [none]
 >>         User-specific, all-version:
 >>           [none]
 >>         User-specific, version-specific (5.3.4):
 >>           [none]
 >>
 >>
 >>
 >>         Collections:
 >>         ("/Users/Alex/Library/Racket/5.3.4/collects"
 >>           ("installed-teachpacks"))
 >>         ("/Applications/Racket v5.3.4/collects"
 >>           ("2htdp" "algol60" "at-exp" "browser" "compatibility"
 >>         "compiler" "config" "data" "datalog" "db" "defaults"
 >>         "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui"
 >>         "eopl" "errortrace" "ffi" "file" "framework" "frtime"
 >>         "future-visualizer" "games" "graphics" "gui-debugger" "help"
 >>         "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 >>         "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred"
 >>         "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"
 >>         "parser-tools" "picturing-programs" "pkg" "plai" "planet" "plot"
 >>         "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog"
 >>         "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp"
 >>         "scheme" "schemeunit" "scribble" "scribblings" "scriblib"
 >>         "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"
 >>         "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 >>         "test-engine" "texpict" "trace" "typed" "typed-racket"
 >>         "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"
 >>         "xrepl"))
 >>
 >>         Computer Language: (("Determine language from source") (#(#t
 >>         print mixed-fraction-e #f #t debug) (default) #() "#lang
 >>         racket\n" #t #t ((main) (test))))
 >>
 >>
 >>
 >
 
 --089e013a0f8a3230d104f6484b55
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">That definitely shouldn&#39;t happen, and looks on the surfa=
 ce like a problem with the contract system.</p>
 <p dir=3D"ltr">Sam</p>
 <div class=3D"gmail_quote">On Apr 4, 2014 11:56 PM, &quot;Neil Toronto&quot=
 ; &lt;<a href=3D"mailto:neil.toronto@gmail.com">neil.toronto@gmail.com</a>&=
 gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_quote" style=
 =3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 An update: Alexander&#39;s test case now produces this error:<br>
 <br>
 . . plt/racket/collects/racket/<u></u>contract/private/blame.rkt:<u></u>245=
 :0: default-blame-format: contract violation<br>
 =C2=A0 expected: a blame object with a non-#f positive field<br>
 =C2=A0 given: #&lt;blame&gt;<br>
 <br>
 I&#39;m not sure what to make of it, nor in what direction it&#39;s heading=
 .<br>
 <br>
 Neil =E2=8A=A5<br>
 <br>
 On 09/08/2013 08:43 PM, Sam Tobin-Hochstadt wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 We could also think of this as a weakness in the contract system. After<br>
 all, what plot wants is either a two argument or a one argument<br>
 function, and one is provided. The contract system could delay this<br>
 check, turning the given contract into a dependent contract based on the<br=
 >
 number of arguments provided.<br>
 <br>
 Sam<br>
 <br>
 On Sep 8, 2013 8:51 PM, &quot;Robby Findler&quot; &lt;<a href=3D"mailto:rob=
 by@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu</a>=
 <br>
 &lt;mailto:<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blank"=
 >robby@eecs.<u></u>northwestern.edu</a>&gt;&gt; wrote:<br>
 <br>
 =C2=A0 =C2=A0 Unfortunately, I think that this has to be considered a limit=
 ation<br>
 =C2=A0 =C2=A0 of compose. Presumably putting in a procedure-reduce-arity so=
 mewhere<br>
 =C2=A0 =C2=A0 in it would help.<br>
 <br>
 =C2=A0 =C2=A0 I have some vague recollection that Eli didn&#39;t want to do=
  this at<br>
 =C2=A0 =C2=A0 some point in the past, but I&#39;m not completely sure.<br>
 <br>
 =C2=A0 =C2=A0 Robby<br>
 <br>
 <br>
 =C2=A0 =C2=A0 On Sun, Sep 8, 2013 at 7:36 PM, &lt;<a href=3D"mailto:alexand=
 er@knauth.org" target=3D"_blank">alexander@knauth.org</a><br>
 =C2=A0 =C2=A0 &lt;mailto:<a href=3D"mailto:alexander@knauth.org" target=3D"=
 _blank">alexander@knauth.org</a>&gt;&gt; wrote:<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 A new problem report is waiting at<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?c=
 md=3Dview&amp;pr=3D14008" target=3D"_blank">http://bugs.racket-lang.org/<u>=
 </u>query/?cmd=3Dview&amp;pr=3D14008</a><br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Reported by Alex Knauth for release: 5.3.4<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 *** Description:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 If I define a function to be (compose ...), and=
  try to plot it<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 as a vector-field, then it returns this error:<=
 br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 vector-field: contract violation<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 two of the clauses in the or/c might bot=
 h match: (-&gt; (vector/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 real? real?) (sequence/c real?)) and (-&gt; rea=
 l? real? (sequence/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 real?))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 given: #&lt;procedure:composed&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 in: the 1st argument of<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt;*<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (-&gt; real?=
  real? (sequence/c real?))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(vecto=
 r/c real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(seque=
 nce/c real?))))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((or/c rational? #f=
 )<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c rationa=
 l? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c rationa=
 l? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c rationa=
 l? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:alpha<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(between/c 0 =
 1)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:color<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 exact-intege=
 r?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(list/=
 c real? real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0string=
 ?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0symbol=
 ?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(is-a?=
 /c color%)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:label<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c string?=
  #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:line-style<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 exact-intege=
 r?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;t=
 ransparent<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;s=
 olid<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;d=
 ot<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;l=
 ong-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;s=
 hort-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;d=
 ot-dash))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:line-width<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(&gt;=3D/c 0)=
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:samples<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0exact-positiv=
 e-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:scale<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c real? (=
 or/c &#39;auto &#39;normalized)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 renderer2d?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 contract from: &lt;collects&gt;/plot/mai=
 n.rkt<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 blaming: anonymous-module<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 at: &lt;collects&gt;/plot/main.rkt:35.39=
 <br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 *** How to repeat:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Enter this into DrRacket:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #lang racket<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (require plot)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (define (f x y)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(vector (- y) x))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (define other-f<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(compose identity f))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (plot (list (axes)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0(function identity -5 5)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0(vector-field other-f)))<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 But it works fine if you use f instead of other=
 -f, even though<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 other-f should be the same thing as f.<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 *** Environment:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 macosx &quot;Darwin Alexander-D-Knauths-Compute=
 r.<u></u>local 9.8.0 Darwin<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2=
 009;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 root:xnu-1228.15.4~1/RELEASE_<u></u>I386 i386 i=
 386&quot; (i386-macosx/3m)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (get-display-depth) =3D 32<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Human Language: english<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (current-memory-use) 331559908<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Links: (links) =3D (); (links #:user? #f) =3D (=
 ); (links #:root? #t)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =3D (); (links #:user? #f #:root? #t) =3D ()<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 raco pkg (show):<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Installation-wide:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [none]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 User-specific, all-version:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [none]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 User-specific, version-specific (5.3.4):<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [none]<br>
 <br>
 <br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Collections:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&quot;/Users/Alex/Library/Racket/<u></u>5.3.4/=
 collects&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&quot;installed-teachpacks&quot;))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&quot;/Applications/Racket v5.3.4/collects&quo=
 t;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&quot;2htdp&quot; &quot;algol60&quot; &=
 quot;at-exp&quot; &quot;browser&quot; &quot;compatibility&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;compiler&quot; &quot;config&quot; &quot;d=
 ata&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;deinprogramm&quot; &quot;drracket&quot; &=
 quot;drscheme&quot; &quot;dynext&quot; &quot;embedded-gui&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;eopl&quot; &quot;errortrace&quot; &quot;f=
 fi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;future-visualizer&quot; &quot;games&quot;=
  &quot;graphics&quot; &quot;gui-debugger&quot; &quot;help&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;hierlist&quot; &quot;htdp&quot; &quot;htm=
 l&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; &quot;=
 json&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;lang&quot; &quot;launcher&quot; &quot;laz=
 y&quot; &quot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;=
 mred&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzc=
 om&quot; &quot;mzlib&quot; &quot;mzscheme&quot; &quot;net&quot; &quot;opens=
 sl&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;parser-tools&quot; &quot;picturing-progra=
 ms&quot; &quot;pkg&quot; &quot;plai&quot; &quot;planet&quot; &quot;plot&quo=
 t;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;preprocessor&quot; &quot;profile&quot; &q=
 uot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;rackunit&quot; &quot;raco&quot; &quot;rea=
 der&quot; &quot;readline&quot; &quot;redex&quot; &quot;rnrs&quot; &quot;s-e=
 xp&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;scheme&quot; &quot;schemeunit&quot; &quot=
 ;scribble&quot; &quot;scribblings&quot; &quot;scriblib&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;setup&quot; &quot;sgl&quot; &quot;slatex&=
 quot; &quot;slideshow&quot; &quot;srfi&quot; &quot;stepper&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;string-constants&quot; &quot;swindle&quot=
 ; &quot;syntax&quot; &quot;syntax-color&quot; &quot;teachpack&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;test-engine&quot; &quot;texpict&quot; &qu=
 ot;trace&quot; &quot;typed&quot; &quot;typed-racket&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;typed-scheme&quot; &quot;unstable&quot; &=
 quot;version&quot; &quot;web-server&quot; &quot;wxme&quot; &quot;xml&quot;<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;xrepl&quot;))<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Computer Language: ((&quot;Determine language f=
 rom source&quot;) (#(#t<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 print mixed-fraction-e #f #t debug) (default) #=
 () &quot;#lang<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 racket\n&quot; #t #t ((main) (test))))<br>
 <br>
 <br>
 </blockquote>
 <br>
 </blockquote></div>
 
 --089e013a0f8a3230d104f6484b55--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        "Alexander D. Knauth" <alexander@knauth.org>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/14008: vector-field in plot module doesn't work
 for composed funtions
Date: Sat, 5 Apr 2014 07:38:43 -0500

 --089e01183fe82c1f9004f64aea97
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I've pushed a fix for the bad error from the contract system, I believe.
 Probably now you'll get a contract violation involving or/c and the wrong
 number of branches matching.
 
 Robby
 
 
 
 On Sat, Apr 5, 2014 at 4:31 AM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>w=
 rote:
 
 > That definitely shouldn't happen, and looks on the surface like a problem
 > with the contract system.
 >
 > Sam
 > On Apr 4, 2014 11:56 PM, "Neil Toronto" <neil.toronto@gmail.com> wrote:
 >
 >> An update: Alexander's test case now produces this error:
 >>
 >> . . plt/racket/collects/racket/contract/private/blame.rkt:245:0:
 >> default-blame-format: contract violation
 >>   expected: a blame object with a non-#f positive field
 >>   given: #<blame>
 >>
 >> I'm not sure what to make of it, nor in what direction it's heading.
 >>
 >> Neil =E2=8A=A5
 >>
 >> On 09/08/2013 08:43 PM, Sam Tobin-Hochstadt wrote:
 >>
 >>> We could also think of this as a weakness in the contract system. After
 >>> all, what plot wants is either a two argument or a one argument
 >>> function, and one is provided. The contract system could delay this
 >>> check, turning the given contract into a dependent contract based on th=
 e
 >>> number of arguments provided.
 >>>
 >>> Sam
 >>>
 >>> On Sep 8, 2013 8:51 PM, "Robby Findler" <robby@eecs.northwestern.edu
 >>> <mailto:robby@eecs.northwestern.edu>> wrote:
 >>>
 >>>     Unfortunately, I think that this has to be considered a limitation
 >>>     of compose. Presumably putting in a procedure-reduce-arity somewher=
 e
 >>>     in it would help.
 >>>
 >>>     I have some vague recollection that Eli didn't want to do this at
 >>>     some point in the past, but I'm not completely sure.
 >>>
 >>>     Robby
 >>>
 >>>
 >>>     On Sun, Sep 8, 2013 at 7:36 PM, <alexander@knauth.org
 >>>     <mailto:alexander@knauth.org>> wrote:
 >>>
 >>>         A new problem report is waiting at
 >>>         http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D14008
 >>>
 >>>         Reported by Alex Knauth for release: 5.3.4
 >>>
 >>>         *** Description:
 >>>         If I define a function to be (compose ...), and try to plot it
 >>>         as a vector-field, then it returns this error:
 >>>
 >>>         vector-field: contract violation
 >>>           two of the clauses in the or/c might both match: (-> (vector/=
 c
 >>>         real? real?) (sequence/c real?)) and (-> real? real? (sequence/=
 c
 >>>         real?))
 >>>           given: #<procedure:composed>
 >>>           in: the 1st argument of
 >>>                (->*
 >>>                 ((or/c
 >>>                   (-> real? real? (sequence/c real?))
 >>>                   (->
 >>>                    (vector/c real? real?)
 >>>                    (sequence/c real?))))
 >>>                 ((or/c rational? #f)
 >>>                  (or/c rational? #f)
 >>>                  (or/c rational? #f)
 >>>                  (or/c rational? #f)
 >>>                  #:alpha
 >>>                  (between/c 0 1)
 >>>                  #:color
 >>>                  (or/c
 >>>                   exact-integer?
 >>>                   (or/c
 >>>                    (list/c real? real? real?)
 >>>                    string?
 >>>                    symbol?
 >>>                    (is-a?/c color%)))
 >>>                  #:label
 >>>                  (or/c string? #f)
 >>>                  #:line-style
 >>>                  (or/c
 >>>                   exact-integer?
 >>>                   (or/c
 >>>                    'transparent
 >>>                    'solid
 >>>                    'dot
 >>>                    'long-dash
 >>>                    'short-dash
 >>>                    'dot-dash))
 >>>                  #:line-width
 >>>                  (>=3D/c 0)
 >>>                  #:samples
 >>>                  exact-positive-integer?
 >>>                  #:scale
 >>>                  (or/c real? (or/c 'auto 'normalized)))
 >>>                 renderer2d?)
 >>>           contract from: <collects>/plot/main.rkt
 >>>           blaming: anonymous-module
 >>>           at: <collects>/plot/main.rkt:35.39
 >>>
 >>>         *** How to repeat:
 >>>         Enter this into DrRacket:
 >>>         #lang racket
 >>>         (require plot)
 >>>         (define (f x y)
 >>>            (vector (- y) x))
 >>>         (define other-f
 >>>            (compose identity f))
 >>>         (plot (list (axes)
 >>>                      (function identity -5 5)
 >>>                      (vector-field other-f)))
 >>>
 >>>         But it works fine if you use f instead of other-f, even though
 >>>         other-f should be the same thing as f.
 >>>
 >>>         *** Environment:
 >>>         macosx "Darwin Alexander-D-Knauths-Computer.local 9.8.0 Darwin
 >>>         Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009;
 >>>         root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m)
 >>>         (get-display-depth) =3D 32
 >>>         Human Language: english
 >>>         (current-memory-use) 331559908
 >>>         Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root=
 ? #t)
 >>>         =3D (); (links #:user? #f #:root? #t) =3D ()
 >>>         raco pkg (show):
 >>>         Installation-wide:
 >>>           [none]
 >>>         User-specific, all-version:
 >>>           [none]
 >>>         User-specific, version-specific (5.3.4):
 >>>           [none]
 >>>
 >>>
 >>>
 >>>         Collections:
 >>>         ("/Users/Alex/Library/Racket/5.3.4/collects"
 >>>           ("installed-teachpacks"))
 >>>         ("/Applications/Racket v5.3.4/collects"
 >>>           ("2htdp" "algol60" "at-exp" "browser" "compatibility"
 >>>         "compiler" "config" "data" "datalog" "db" "defaults"
 >>>         "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui"
 >>>         "eopl" "errortrace" "ffi" "file" "framework" "frtime"
 >>>         "future-visualizer" "games" "graphics" "gui-debugger" "help"
 >>>         "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 >>>         "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred"
 >>>         "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"
 >>>         "parser-tools" "picturing-programs" "pkg" "plai" "planet" "plot=
 "
 >>>         "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog"
 >>>         "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp"
 >>>         "scheme" "schemeunit" "scribble" "scribblings" "scriblib"
 >>>         "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"
 >>>         "string-constants" "swindle" "syntax" "syntax-color" "teachpack=
 "
 >>>         "test-engine" "texpict" "trace" "typed" "typed-racket"
 >>>         "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"
 >>>         "xrepl"))
 >>>
 >>>         Computer Language: (("Determine language from source") (#(#t
 >>>         print mixed-fraction-e #f #t debug) (default) #() "#lang
 >>>         racket\n" #t #t ((main) (test))))
 >>>
 >>>
 >>>
 >>
 
 --089e01183fe82c1f9004f64aea97
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I&#39;ve pushed a fix for the bad error from the contract =
 system, I believe. Probably now you&#39;ll get a contract violation involvi=
 ng or/c and the wrong number of branches matching.<div><br></div><div>Robby=
 </div>
 <div><br></div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Sat, Apr 5, 2014 at 4:31 AM, Sam Tobin-Hochstadt <span dir=3D"lt=
 r">&lt;<a href=3D"mailto:samth@cs.indiana.edu" target=3D"_blank">samth@cs.i=
 ndiana.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><p dir=3D"ltr">That definitely shouldn&#39;t=
  happen, and looks on the surface like a problem with the contract system.<=
 /p>
 <span class=3D"HOEnZb"><font color=3D"#888888">
 <p dir=3D"ltr">Sam</p></font></span><div class=3D"HOEnZb"><div class=3D"h5"=
 >
 <div class=3D"gmail_quote">On Apr 4, 2014 11:56 PM, &quot;Neil Toronto&quot=
 ; &lt;<a href=3D"mailto:neil.toronto@gmail.com" target=3D"_blank">neil.toro=
 nto@gmail.com</a>&gt; wrote:<br type=3D"attribution"><blockquote class=3D"g=
 mail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
 eft:1ex">
 
 An update: Alexander&#39;s test case now produces this error:<br>
 <br>
 . . plt/racket/collects/racket/<u></u>contract/private/blame.rkt:<u></u>245=
 :0: default-blame-format: contract violation<br>
 =C2=A0 expected: a blame object with a non-#f positive field<br>
 =C2=A0 given: #&lt;blame&gt;<br>
 <br>
 I&#39;m not sure what to make of it, nor in what direction it&#39;s heading=
 .<br>
 <br>
 Neil =E2=8A=A5<br>
 <br>
 On 09/08/2013 08:43 PM, Sam Tobin-Hochstadt wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 We could also think of this as a weakness in the contract system. After<br>
 all, what plot wants is either a two argument or a one argument<br>
 function, and one is provided. The contract system could delay this<br>
 check, turning the given contract into a dependent contract based on the<br=
 >
 number of arguments provided.<br>
 <br>
 Sam<br>
 <br>
 On Sep 8, 2013 8:51 PM, &quot;Robby Findler&quot; &lt;<a href=3D"mailto:rob=
 by@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu</a>=
 <br>
 &lt;mailto:<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blank"=
 >robby@eecs.<u></u>northwestern.edu</a>&gt;&gt; wrote:<br>
 <br>
 =C2=A0 =C2=A0 Unfortunately, I think that this has to be considered a limit=
 ation<br>
 =C2=A0 =C2=A0 of compose. Presumably putting in a procedure-reduce-arity so=
 mewhere<br>
 =C2=A0 =C2=A0 in it would help.<br>
 <br>
 =C2=A0 =C2=A0 I have some vague recollection that Eli didn&#39;t want to do=
  this at<br>
 =C2=A0 =C2=A0 some point in the past, but I&#39;m not completely sure.<br>
 <br>
 =C2=A0 =C2=A0 Robby<br>
 <br>
 <br>
 =C2=A0 =C2=A0 On Sun, Sep 8, 2013 at 7:36 PM, &lt;<a href=3D"mailto:alexand=
 er@knauth.org" target=3D"_blank">alexander@knauth.org</a><br>
 =C2=A0 =C2=A0 &lt;mailto:<a href=3D"mailto:alexander@knauth.org" target=3D"=
 _blank">alexander@knauth.org</a>&gt;&gt; wrote:<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 A new problem report is waiting at<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?c=
 md=3Dview&amp;pr=3D14008" target=3D"_blank">http://bugs.racket-lang.org/<u>=
 </u>query/?cmd=3Dview&amp;pr=3D14008</a><br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Reported by Alex Knauth for release: 5.3.4<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 *** Description:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 If I define a function to be (compose ...), and=
  try to plot it<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 as a vector-field, then it returns this error:<=
 br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 vector-field: contract violation<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 two of the clauses in the or/c might bot=
 h match: (-&gt; (vector/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 real? real?) (sequence/c real?)) and (-&gt; rea=
 l? real? (sequence/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 real?))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 given: #&lt;procedure:composed&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 in: the 1st argument of<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt;*<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (-&gt; real?=
  real? (sequence/c real?))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(vecto=
 r/c real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(seque=
 nce/c real?))))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((or/c rational? #f=
 )<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c rationa=
 l? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c rationa=
 l? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c rationa=
 l? #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:alpha<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(between/c 0 =
 1)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:color<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 exact-intege=
 r?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(list/=
 c real? real? real?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0string=
 ?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0symbol=
 ?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(is-a?=
 /c color%)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:label<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c string?=
  #f)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:line-style<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 exact-intege=
 r?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (or/c<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;t=
 ransparent<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;s=
 olid<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;d=
 ot<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;l=
 ong-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;s=
 hort-dash<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;d=
 ot-dash))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:line-width<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(&gt;=3D/c 0)=
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:samples<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0exact-positiv=
 e-integer?<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:scale<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or/c real? (=
 or/c &#39;auto &#39;normalized)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 renderer2d?)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 contract from: &lt;collects&gt;/plot/mai=
 n.rkt<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 blaming: anonymous-module<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 at: &lt;collects&gt;/plot/main.rkt:35.39=
 <br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 *** How to repeat:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Enter this into DrRacket:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #lang racket<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (require plot)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (define (f x y)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(vector (- y) x))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (define other-f<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(compose identity f))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (plot (list (axes)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0(function identity -5 5)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0(vector-field other-f)))<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 But it works fine if you use f instead of other=
 -f, even though<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 other-f should be the same thing as f.<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 *** Environment:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 macosx &quot;Darwin Alexander-D-Knauths-Compute=
 r.<u></u>local 9.8.0 Darwin<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2=
 009;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 root:xnu-1228.15.4~1/RELEASE_<u></u>I386 i386 i=
 386&quot; (i386-macosx/3m)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (get-display-depth) =3D 32<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Human Language: english<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (current-memory-use) 331559908<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Links: (links) =3D (); (links #:user? #f) =3D (=
 ); (links #:root? #t)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =3D (); (links #:user? #f #:root? #t) =3D ()<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 raco pkg (show):<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Installation-wide:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [none]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 User-specific, all-version:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [none]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 User-specific, version-specific (5.3.4):<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [none]<br>
 <br>
 <br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Collections:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&quot;/Users/Alex/Library/Racket/<u></u>5.3.4/=
 collects&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&quot;installed-teachpacks&quot;))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&quot;/Applications/Racket v5.3.4/collects&quo=
 t;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (&quot;2htdp&quot; &quot;algol60&quot; &=
 quot;at-exp&quot; &quot;browser&quot; &quot;compatibility&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;compiler&quot; &quot;config&quot; &quot;d=
 ata&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;deinprogramm&quot; &quot;drracket&quot; &=
 quot;drscheme&quot; &quot;dynext&quot; &quot;embedded-gui&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;eopl&quot; &quot;errortrace&quot; &quot;f=
 fi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;future-visualizer&quot; &quot;games&quot;=
  &quot;graphics&quot; &quot;gui-debugger&quot; &quot;help&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;hierlist&quot; &quot;htdp&quot; &quot;htm=
 l&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; &quot;=
 json&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;lang&quot; &quot;launcher&quot; &quot;laz=
 y&quot; &quot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;=
 mred&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzc=
 om&quot; &quot;mzlib&quot; &quot;mzscheme&quot; &quot;net&quot; &quot;opens=
 sl&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;parser-tools&quot; &quot;picturing-progra=
 ms&quot; &quot;pkg&quot; &quot;plai&quot; &quot;planet&quot; &quot;plot&quo=
 t;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;preprocessor&quot; &quot;profile&quot; &q=
 uot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;rackunit&quot; &quot;raco&quot; &quot;rea=
 der&quot; &quot;readline&quot; &quot;redex&quot; &quot;rnrs&quot; &quot;s-e=
 xp&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;scheme&quot; &quot;schemeunit&quot; &quot=
 ;scribble&quot; &quot;scribblings&quot; &quot;scriblib&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;setup&quot; &quot;sgl&quot; &quot;slatex&=
 quot; &quot;slideshow&quot; &quot;srfi&quot; &quot;stepper&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;string-constants&quot; &quot;swindle&quot=
 ; &quot;syntax&quot; &quot;syntax-color&quot; &quot;teachpack&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;test-engine&quot; &quot;texpict&quot; &qu=
 ot;trace&quot; &quot;typed&quot; &quot;typed-racket&quot;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;typed-scheme&quot; &quot;unstable&quot; &=
 quot;version&quot; &quot;web-server&quot; &quot;wxme&quot; &quot;xml&quot;<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 &quot;xrepl&quot;))<br>
 <br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Computer Language: ((&quot;Determine language f=
 rom source&quot;) (#(#t<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 print mixed-fraction-e #f #t debug) (default) #=
 () &quot;#lang<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 racket\n&quot; #t #t ((main) (test))))<br>
 <br>
 <br>
 </blockquote>
 <br>
 </blockquote></div>
 </div></div></blockquote></div><br></div>
 
 --089e01183fe82c1f9004f64aea97--
