From apache@plt-scheme.org Sun Mar 12 11:57:45 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k2CGvhY1008921
	for <bugs@plt-scheme.org>; Sun, 12 Mar 2006 11:57:43 -0500
Message-Id: <200603121657.k2CGvhYv008919@champlain.ccs.neu.edu>
Date: Sun, 12 Mar 2006 11:57:43 -0500
From: alonneubach@gmail.com
To: bugs@plt-scheme.org
Subject: Mem usage on infinite recursion

>Number:         7956
>Category:       misc
>Synopsis:       Mem usage on infinite recursion
>Class:          not-a-bug
>Responsible:    clements
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Mar 12 12:00:00 -0500 2006
>Last-Modified:  Thu Mar 16 01:00:11 -0500 2006
>Originator:     Alon Neubach
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
(#<path:C:\Program Files\PLT\collects\doc\web-server> #<path:C:\Program Files\PLT\collects\doc\tour> #<path:C:\Program Files\PLT\collects\doc\tools> #<path:C:\Program Files\PLT\collects\doc\tex2page> #<path:C:\Program Files\PLT\collects\doc\teachpack> #<path:C:\Program Files\PLT\collects\doc\t-y-scheme> #<path:C:\Program Files\PLT\collects\doc\swindle> #<path:C:\Program Files\PLT\collects\doc\srfi> #<path:C:\Program Files\PLT\collects\doc\r5rs> #<path:C:\Program Files\PLT\collects\doc\profj-intermediate> #<path:C:\Program Files\PLT\collects\doc\profj-beginner> #<path:C:\Program Files\PLT\collects\doc\profj-advanced> #<path:C:\Program Files\PLT\collects\doc\plot> #<path:C:\Program Files\PLT\collects\doc\mzscheme> #<path:C:\Program Files\PLT\collects\doc\mzlib> #<path:C:\Program Files\PLT\collects\doc\mzc> #<path:C:\Program Files\PLT\collects\doc\mrlib> #<path:C:\Program Files\PLT\collects\doc\mred> #<path:C:\Program Files\PLT\collects\doc\misclib> #<path:C:\Program Files\PLT\collects\doc\intermediate-lambda> #<path:C:\Program Files\PLT\collects\doc\intermediate> #<path:C:\Program Files\PLT\collects\doc\insidemz> #<path:C:\Program Files\PLT\collects\doc\help> #<path:C:\Program Files\PLT\collects\doc\framework> #<path:C:\Program Files\PLT\collects\doc\foreign> #<path:C:\Program Files\PLT\collects\doc\drscheme> #<path:C:\Program Files\PLT\collects\doc\beginning-abbr> #<path:C:\Program Files\PLT\collects\doc\beginning> #<path:C:\Program Files\PLT\collects\doc\advanced>)
Collections:
((#<path:C:\Documents and Settings\AN\Application Data\PLT Scheme\301\collects> "non-existent path") (#<path:C:\Program Files\PLT\collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:r5rs> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#f constructor mixed-fraction-e #f #f none))
>Description:
When (accidently) wrinting a procedure that goes into an 
infinite recursion, the memory usage of the DrScheme 
process just keeps getting bigger and bigger, with nothing
stopping it.
I checked this on WinXP with the task manager.

Thanks,
   Alon.
>How-To-Repeat:
(define (closest-power a n) (if (= a 1) 1 (cp-helper a a n 0)))
(define (cp-helper x a n k) (if (> (* x a) n) 1 
                            (+ 1 (cp-helper (* x a) a n (+ k 1)))))
(closest-power 0 3) ;;This line goes into an infinite recursion that eats up all the system's memory
>Fix:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: alonneubach@gmail.com, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7956: Mem usage on infinite recursion
Date: Sun, 12 Mar 2006 19:15:58 -0800

 On Mar 12, 2006, at 9:00 AM, alonneubach@gmail.com wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=7956
 >
 > Reported by Alon Neubach for release: 301
 >
 > *** Description:
 > When (accidently) wrinting a procedure that goes into an
 > infinite recursion, the memory usage of the DrScheme
 > process just keeps getting bigger and bigger, with nothing
 > stopping it.
 > I checked this on WinXP with the task manager.
 >
 > Thanks,
 >    Alon.
 >
 > *** How to repeat:
 > (define (closest-power a n) (if (= a 1) 1 (cp-helper a a n 0)))
 > (define (cp-helper x a n k) (if (> (* x a) n) 1
 >                             (+ 1 (cp-helper (* x a) a n (+ k 1)))))
 > (closest-power 0 3) ;;This line goes into an infinite recursion  
 > that eats up all the system's memory
 
 Yes, that's the behavior I expect.  Can you explain why you believe  
 this shouldn't happen?
 
 John Clements
 
 
From: John Clements <clements@brinckerhoff.org>
To: "Alon Neubach" <alonneubach@gmail.com>
Cc: bugs@plt-scheme.org, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: all/7956: Mem usage on infinite recursion
Date: Mon, 13 Mar 2006 10:52:42 -0800

 On Mar 13, 2006, at 8:08 AM, Alon Neubach wrote:
 
 > Well, in every other programming language I used, at some point,  
 > you would
 > get a runtime error like "stack overflow" - I don't think it's  
 > reasonable to
 > let the program I wrote eat up the whole memory of the system... If  
 > it's
 > left to run unsupervised, it would fill up the system's main memory  
 > and/or
 > virtual memory, and all other programs could not get any memory  
 > resources
 > after that.
 
 1) You can certainly limit the amount of memory consumed by a  
 mzscheme process using OS features.  Using bash, for instance,  
 'ulimit' allows you to limit the amount of memory available to a  
 process, in a variety of ways.
 
 2) This kind of limit (i.e., one placed at the OS level) is more  
 flexible and less painful than a limit on the number of stack  
 frames.  You'd probably be irritated, for instance, if a long-running  
 process suddenly died because it hit its stack limit when in fact  
 there was plenty of heap space left.
 
 3) In fact, MzScheme can be compiled with a more fine-grained form of  
 memory accounting that allows the programmer to limit the amount of  
 memory used by a particular part of the program, a feature not found  
 in most languages.
 
 Does this answer your question?
 
 John Clements

Responsible changed from "nobody" to "clements" by eli at Thu, 16 Mar 2006 00:41:05 -0500
Reason>>> Moving to John who started the interaction -- possibly to 
close.


Class changed from "sw-bug" to "not-a-bug" by clements at Thu, 16 Mar 2006 01:00:11 -0500
Reason>>> submitter agrees that this is a plausible specified behavior of mzscheme

State changed from "open" to "closed" by clements at Thu, 16 Mar 2006 01:00:11 -0500
Reason>>> discussion reached natural end, submitter apparently satisfied.

