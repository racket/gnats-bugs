From ethan.aubin@pobox.com  Wed Jul 30 22:05:40 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id WAA07934
	for <bugs>; Wed, 30 Jul 2003 22:05:37 -0400
Message-Id: <200307310205.WAA07934@champlain.ccs.neu.edu>
Date: Wed, 30 Jul 2003 22:05:37 -0400
From: Ethan Aubin <ethan.aubin@pobox.com>
To: bugs@plt-scheme.org
Subject: Feature request: contract for functions bound in lets

>Number:         6390
>Category:       misc
>Synopsis:       Feature request: contract for functions bound in lets
>Class:          change-request
>Responsible:    eli
>Severity:       non-critical
>Priority:       low
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jul 30 22:10:01 -0400 2003
>Closed-Date:    Thu Jul 31 17:42:56 -0400 2003
>Last-Modified:  Mon May 05 16:29:01 -0400 2008
>Originator:     Ethan Aubin
>Organization:
titan
>Submitter-Id:   unknown
>Release:        204
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 1" (win32\i386) (get-display-depth) = 32
Docs Installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "icons" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("C:\\PROGRA~1\\plt\\./collects/setup/..\\..\\collects\\mzlib\\..\\..\\collects" ("afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mzlib" "mzscheme" "net" "parser-tools" "setup" "slibinit" "srfi" "stepper" "string-constants" "syntax" "test-suite" "tex2page" "version" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#f write mixed-fraction-e #f #t debug))
>Description:
I would like to be able to do something like

(let/contract 
  ([add (integer? integer? . -> . integer?) (lambda (x y) (+ x y))])
    (add "error" (add 1 (add 2 3))))

I can get around this using something like

(letrec ([add
         (let ([f (lambda (x y) (+ x y))])
             (contract (integer? integer? . -> . integer?) f `add `client (quote-syntax f)))])
    (add "error" (add 1 (add 2 3))))

but the when the contract is violated it would be useful to have line numbers instead of [unknown source] in

STDIN: 176: add: client broke f's contract: expected type <integer>, given: "error"
[unknown source]: (check-contract integer?16 integer?110 neg-blame pos-blame src-info)
[unknown source]: (val (check-contract integer?16 integer?110 neg-blame pos-blame src-info) (check-contract integer...
[unknown source]: (let-values (((integer?514) (val (check-contract integer?16 integer?110 neg-blame pos-blame src-i...
>How-To-Repeat:
>Fix:
>Release-Note:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6390: Feature request: contract for functions bound in lets
Date: Wed, 30 Jul 2003 22:13:26 -0500

 How about define/contract? You can use it in any definition context,
 including the body of a function and the body of a let (and other
 places)
 
 Robby

From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6390: Feature request: contract for functions bound in lets
Date: Wed, 30 Jul 2003 22:44:11 -0500

 At Wed, 30 Jul 2003 22:05:37 -0400, Ethan Aubin wrote:
 > I can get around this using something like
 > 
 > (letrec ([add
 >          (let ([f (lambda (x y) (+ x y))])
 >              (contract (integer? integer? . -> . integer?) f `add `client (quote-syntax 
 > f)))])
 >     (add "error" (add 1 (add 2 3))))
 > 
 > but the when the contract is violated it would be useful to have line numbers instead of 
 > [unknown source] in
 
 Anoher note: If I put the example above in a file and remove the last
 argument to contract (so it gets the default), you do get the source
 location of the error:
 
 [pingtung] ~% mzscheme -qr tmp.ss
 /Users/robby/tmp.ss: 5.12: add: client broke here's contract: expected type <integer>, given: "error"
 
 The contents of tmp.ss, for reference:
 
 (require (lib "contract.ss"))
 
 (letrec ([add
 	  (let ([f (lambda (x y) (+ x y))])
 	    (contract (integer? integer? . -> . integer?) f `add `client))])
   (add "error" (add 1 (add 2 3))))
 
 
 Robby
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Thu Jul 31 17:42:56 2003
State-Changed-Why:
    define/contract
>Unformatted:
