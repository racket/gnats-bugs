From acone@uchicago.edu  Tue Dec  2 12:56:18 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.9.3) with ESMTP id MAA17526
	for <bugs>; Tue, 2 Dec 2003 12:56:17 -0500
Message-Id: <200312021756.MAA17526@champlain.ccs.neu.edu>
Date: Tue, 2 Dec 2003 12:56:17 -0500
From: Andrew Cone <acone@uchicago.edu>
To: bugs@plt-scheme.org
Subject: inconsistency in set! vs vector-set!

>Number:         6582
>Category:       misc
>Synopsis:       inconsistency in set! vs vector-set!
>Confidential:   no
>Severity:       non-critical
>Priority:       low
>Responsible:    matthias
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Dec 02 13:00:01 EST 2003
>Closed-Date:    Tue Dec 02 13:41:03 EST 2003
>Last-Modified:  Wed Dec  3 01:10:01 EST 2003
>Originator:     Andrew Cone
>Release:        205
>Organization:
titan
>Environment:
macosx "Darwin royalsociety.cs.uchicago.edu 6.7.5 Darwin Kernel Version 6.7.5: Mon Aug 11 19:28:40 PDT 2003; root:xnu/xnu-344.21.73.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("/nfs/harper/hc0/acone/Library/PLT Scheme/205/collects" "non-existent path") ("/Applications/PLT v205/collects/mzlib/../../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" "afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mzlib" "mzscheme" "net" "parser-tools" "profj" "setup" "slibinit" "srfi" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tests" "tex2page" "version" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student") #6(#t constructor repeating-decimal #f #t none))
>Description:
In the teaching language, set! requires a defined name, and can
therefore not take a function argument. The function
(define (f x)
  (set! x 1))
therefore produces an error.

Vector-set!, however, does fine with a function argument, working
in the same manner as it does in R5RS.

This seems inconsistent: set!-type functions should resemble each
other in behavior.

Even if you have some reason to keep it this way, it would be
much less confusing if the exact behavior of each function
were clarified in the documentation.
>How-To-Repeat:

>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: eli->matthias
Responsible-Changed-By: matthias
Responsible-Changed-When: Tue Dec  2 13:41:03 2003
Responsible-Changed-Why:
    .
State-Changed-From-To: open->closed
State-Changed-By: matthias
State-Changed-When: Tue Dec  2 13:41:03 2003
State-Changed-Why:
    set! is not a function.
    vector-set! is a function. 
    Please discuss the details with Prof. Dr. Robert Bruce Findler. 

From: John Clements <clements@brinckerhoff.org>
To: Andrew Cone <acone@uchicago.edu>
Cc: bugs@plt-scheme.org, plt-internal@po.cs.brown.edu
Subject: Re: all/6582: inconsistency in set! vs vector-set!
Date: Tue, 2 Dec 2003 12:15:49 -0500

 On Tuesday, Dec 2, 2003, at 12:56 US/Eastern, Andrew Cone wrote:
 >> Description:
 > In the teaching language, set! requires a defined name, and can
 > therefore not take a function argument. The function
 > (define (f x)
 >   (set! x 1))
 > therefore produces an error.
 >
 > Vector-set!, however, does fine with a function argument, working
 > in the same manner as it does in R5RS.
 >
 > This seems inconsistent: set!-type functions should resemble each
 > other in behavior.
 >
 > Even if you have some reason to keep it this way, it would be
 > much less confusing if the exact behavior of each function
 > were clarified in the documentation.
 
 There is a problem here, but not the one you think; the problem is that 
 since 'set!' and 'vector-set!' both have names that include 'set!', 
 users assume that their behavior should be similar.  In fact, they have 
 almost nothing to do with each other, and there's a very good reason 
 for the difference you observe.
 
 set! is a special form; it doesn't change a value, it changes a 
 binding.  It is therefore unlike most other scheme expressions in that 
 it does not evaluate its first expression.  Rather, the name given as 
 the first argument is used to locate a binding.
 
 vector-set! is _not_ a special form, and it changes a value, not a 
 binding.
 
 To see the difference, try these two expressions:
 
 (vector-set! (vector 1 2) 1 3)
 
 (set! (vector 1 2) 4)
 
 I think the appropriate change might  simply be to change one of these 
 names so that they look less alike.
 
 john
 

From: John Clements <clements@brinckerhoff.org>
To: Andrew Cone <acone@uchicago.edu>
Cc: bugs@plt-scheme.org, plt-internal@po.cs.brown.edu
Subject: Re: all/6582: inconsistency in set! vs vector-set!
Date: Tue, 2 Dec 2003 12:15:49 -0500

 On Tuesday, Dec 2, 2003, at 12:56 US/Eastern, Andrew Cone wrote:
 >> Description:
 > In the teaching language, set! requires a defined name, and can
 > therefore not take a function argument. The function
 > (define (f x)
 >   (set! x 1))
 > therefore produces an error.
 >
 > Vector-set!, however, does fine with a function argument, working
 > in the same manner as it does in R5RS.
 >
 > This seems inconsistent: set!-type functions should resemble each
 > other in behavior.
 >
 > Even if you have some reason to keep it this way, it would be
 > much less confusing if the exact behavior of each function
 > were clarified in the documentation.
 
 There is a problem here, but not the one you think; the problem is that 
 since 'set!' and 'vector-set!' both have names that include 'set!', 
 users assume that their behavior should be similar.  In fact, they have 
 almost nothing to do with each other, and there's a very good reason 
 for the difference you observe.
 
 set! is a special form; it doesn't change a value, it changes a 
 binding.  It is therefore unlike most other scheme expressions in that 
 it does not evaluate its first expression.  Rather, the name given as 
 the first argument is used to locate a binding.
 
 vector-set! is _not_ a special form, and it changes a value, not a 
 binding.
 
 To see the difference, try these two expressions:
 
 (vector-set! (vector 1 2) 1 3)
 
 (set! (vector 1 2) 4)
 
 I think the appropriate change might  simply be to change one of these 
 names so that they look less alike.
 
 john
 
>Unformatted:

