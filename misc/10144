From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Mar 21 19:06:01 2009
Received: from mail-qy0-f130.google.com (mail-qy0-f130.google.com [209.85.221.130])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n2LN5k9d021357
	for <bugs@bugs.plt-scheme.org>; Sat, 21 Mar 2009 19:05:47 -0400
Message-Id: <200903212305.n2LN5iZV021350@champlain.ccs.neu.edu>
Date: Sat, 21 Mar 2009 19:05:44 -0400
From: robby@cs.uchicago.edu
To: bugs@plt-scheme.org
Subject: define/contract blocks check syntax arrows on parameters

>Number:         10144
>Category:       misc
>Synopsis:       define/contract blocks check syntax arrows on parameters
>Class:          sw-bug
>Responsible:    sstrickl
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Mar 21 19:08:01 -0400 2009
>Closed-Date:    Thu Nov 05 18:07:47 -0500 2009
>Last-Modified:  Fri Feb 05 23:10:13 -0500 2010
>Originator:     Robby Findler
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.5.3-svn20mar2009
>Environment:
macosx "Darwin chienshi.local 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 180616196

Collections:
(("/Users/robby/Library/PLT Scheme/4.1.5.3/collects" non-existent-path) ("/Users/robby/svn/exp/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "!
 typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t constructor mixed-fraction-e #f #f none) (default) #() "#lang scheme\n" #f))
>Description:
>How-To-Repeat:
Run check syntax on this program:

#lang scheme
(define/contract (f x)
  any/c
  x)

expect to see an arrow from the binding x to the bound one.
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "sstrickl" by sstrickl at Sun, 22 Mar 2009 08:10:03 -0400
Reason>>> define/contract bug

From: Stevie Strickland <sstrickl@plt-scheme.org>
To: robby@cs.uchicago.edu, bugs@plt-scheme.org
Cc: mflatt@plt-scheme.org
Subject: Re: [plt-bug] all/10144: define/contract blocks check syntax arrows on parameters
Date: Sun, 22 Mar 2009 13:16:25 +0000

 On Mar 21, 2009, at 11:08 PM, robby@cs.uchicago.edu wrote:
 > Run check syntax on this program:
 >
 > #lang scheme
 > (define/contract (f x)
 >  any/c
 >  x)
 >
 > expect to see an arrow from the binding x to the bound one.
 
 If you run check syntax on the following program, you don't get an =20
 arrow from the binding x to the use of x inside the mark expression.  =20=
 
 I think this is what's causing the arrows to get lost, but I'm not =20
 sure why.  Matthew, is there something going wrong here, or should we =20=
 
 not expect an arrow there?
 
 #lang scheme
 
 (define-syntax (mark stx)
    (syntax-case stx ()
      [(_ . body)
       (let ([marker (make-syntax-introducer)])
         (with-syntax ([body (marker #'body)])
           (syntax/loc stx
             (begin . body))))]))
 
 ((mark (=CE=BB (x) x)) 1)
 
 Stevie=
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Stevie Strickland <sstrickl@plt-scheme.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10144: define/contract blocks check syntax arrows 
	on parameters
Date: Sun, 22 Mar 2009 08:27:00 -0500

 Stevie: if you know precisely which identifiers are getting marked,
 you can either construct a let-expression or use the disappeared-use
 property to make them show up.
 
 Robby
 
 On Sun, Mar 22, 2009 at 8:25 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Sun, 22 Mar 2009 13:16:25 +0000, Stevie Strickland wrote:
 >> On Mar 21, 2009, at 11:08 PM, robby@cs.uchicago.edu wrote:
 >> > Run check syntax on this program:
 >> >
 >> > #lang scheme
 >> > (define/contract (f x)
 >> > =C2=A0any/c
 >> > =C2=A0x)
 >> >
 >> > expect to see an arrow from the binding x to the bound one.
 >>
 >> If you run check syntax on the following program, you don't get an
 >> arrow from the binding x to the use of x inside the mark expression.
 >> I think this is what's causing the arrows to get lost, but I'm not
 >> sure why. =C2=A0Matthew, is there something going wrong here, or should =
 we
 >> not expect an arrow there?
 >>
 >> #lang scheme
 >>
 >> (define-syntax (mark stx)
 >> =C2=A0 =C2=A0(syntax-case stx ()
 >> =C2=A0 =C2=A0 =C2=A0[(_ . body)
 >> =C2=A0 =C2=A0 =C2=A0 (let ([marker (make-syntax-introducer)])
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 (with-syntax ([body (marker #'body)])
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (syntax/loc stx
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (begin . body))))]))
 >>
 >> ((mark (=CE=BB (x) x)) 1)
 >
 > Check Syntax only draws arrows to/from "original" identifiers, which is
 > supposed to correspond to the identifiers in the source program. An
 > identifier with a mark is not original.
 >
 >
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Stevie Strickland <sstrickl@plt-scheme.org>
Cc: robby@cs.uchicago.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10144: define/contract blocks check syntax arrows on parameters
Date: Sun, 22 Mar 2009 07:25:04 -0600

 At Sun, 22 Mar 2009 13:16:25 +0000, Stevie Strickland wrote:
 > On Mar 21, 2009, at 11:08 PM, robby@cs.uchicago.edu wrote:
 > > Run check syntax on this program:
 > >
 > > #lang scheme
 > > (define/contract (f x)
 > >  any/c
 > >  x)
 > >
 > > expect to see an arrow from the binding x to the bound one.
 >=20
 > If you run check syntax on the following program, you don't get an =20
 > arrow from the binding x to the use of x inside the mark expression.  =20=
 
 > I think this is what's causing the arrows to get lost, but I'm not =20
 > sure why.  Matthew, is there something going wrong here, or should we =20=
 
 > not expect an arrow there?
 >=20
 > #lang scheme
 >=20
 > (define-syntax (mark stx)
 >    (syntax-case stx ()
 >      [(_ . body)
 >       (let ([marker (make-syntax-introducer)])
 >         (with-syntax ([body (marker #'body)])
 >           (syntax/loc stx
 >             (begin . body))))]))
 >=20
 > ((mark (=CE=BB (x) x)) 1)
 
 Check Syntax only draws arrows to/from "original" identifiers, which is
 supposed to correspond to the identifiers in the source program. An
 identifier with a mark is not original.
 
From: Stevie Strickland <sstrickl@plt-scheme.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10144: define/contract blocks check syntax arrows  on parameters
Date: Sun, 22 Mar 2009 13:35:11 +0000

 On Mar 22, 2009, at 1:27 PM, Robby Findler wrote:
 > Stevie: if you know precisely which identifiers are getting marked,
 > you can either construct a let-expression or use the disappeared-use
 > property to make them show up.
 
 Every identifier appearing within a with-contract gets marked, since  
 we paint the entire body and then set up new rename/set! transformers  
 to get at the ones that are exported.  So by the time I've done the  
 local expansions and have the define-values and such in hand, they're  
 already marked.  (And even if they weren't all marked in one go at the  
 start, I'd still have to mark before locally expanding each element of  
 the body, thus causing the same inability to see the unmarked versions  
 of the identifiers.)
 
 Hmm.  I'll have to think about this at some point when I've gotten  
 some sleep.
 
 Stevie
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stevie Strickland <sstrickl@plt-scheme.org>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10144: define/contract blocks check syntax arrows 
	on parameters
Date: Sun, 22 Mar 2009 09:03:11 -0500

 On Sun, Mar 22, 2009 at 8:35 AM, Stevie Strickland
 <sstrickl@plt-scheme.org> wrote:
 > On Mar 22, 2009, at 1:27 PM, Robby Findler wrote:
 >>
 >> Stevie: if you know precisely which identifiers are getting marked,
 >> you can either construct a let-expression or use the disappeared-use
 >> property to make them show up.
 >
 > Every identifier appearing within a with-contract gets marked, since we
 > paint the entire body and then set up new rename/set! transformers to get=
  at
 > the ones that are exported.
 
 Maybe those rename/set! transformers can somehow arrange to put the
 original ids in a place that check syntax can find?
 
 >=C2=A0So by the time I've done the local expansions
 > and have the define-values and such in hand, they're already marked. =C2=
 =A0(And
 > even if they weren't all marked in one go at the start, I'd still have to
 > mark before locally expanding each element of the body, thus causing the
 > same inability to see the unmarked versions of the identifiers.)
 >
 > Hmm. =C2=A0I'll have to think about this at some point when I've gotten s=
 ome
 > sleep.
 >
 > Stevie
 >
From: Stevie Strickland <sstrickl@plt-scheme.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org,
        Ryan Culpepper <ryanc@ccs.neu.edu>
Subject: Re: [plt-bug] all/10144: define/contract blocks check syntax arrows  on parameters
Date: Sun, 22 Mar 2009 14:28:44 +0000

 On Mar 22, 2009, at 2:03 PM, Robby Findler wrote:
 > On Sun, Mar 22, 2009 at 8:35 AM, Stevie Strickland
 > <sstrickl@plt-scheme.org> wrote:
 >> On Mar 22, 2009, at 1:27 PM, Robby Findler wrote:
 >>>
 >>> Stevie: if you know precisely which identifiers are getting marked,
 >>> you can either construct a let-expression or use the disappeared-use
 >>> property to make them show up.
 >>
 >> Every identifier appearing within a with-contract gets marked,  
 >> since we
 >> paint the entire body and then set up new rename/set! transformers  
 >> to get at
 >> the ones that are exported.
 >
 > Maybe those rename/set! transformers can somehow arrange to put the
 > original ids in a place that check syntax can find?
 
 Those aren't the ids we're having problems with, though, unless I'm  
 misunderstanding.  It's not the function name that's not getting  
 arrows drawn, it's the parameter names, which aren't handled by the  
 transformers.
 
 I imagine this also affects all locally scoped variables inside those  
 definitions as well, so... I just need to sit down and think about  
 this.  Perhaps there's a better way of doing what I want that doesn't  
 involve a paint-the-world approach, or maybe there's a better way of  
 fixing things back up afterwards.
 
 (CCing Ryan, both to bring his attention to this thread and to get his  
 input, if he has any.)
 
 Stevie

State changed from "open" to "analyzed" by sstrickl at Wed, 29 Apr 2009 09:59:08 -0400
Reason>>> checked it out, working on fix


State changed from "analyzed" to "closed" by sstrickl at Thu, 05 Nov 2009 18:07:47 -0500
Reason>>> Through happenstance, I fixed this bug as a by-product of reworking with-
contract etc. recently.  So rejoice, your arrows should be correct now!


