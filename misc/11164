From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Sep  7 00:19:25 2010
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o874JN3w008218
	for <bugs@bugs.plt-scheme.org>; Tue, 7 Sep 2010 00:19:23 -0400
Message-Id: <201009070419.o874JKMu008209@champlain.ccs.neu.edu>
Date: Tue, 7 Sep 2010 00:19:20 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: syntax-parse docs

>Number:         11164
>Category:       misc
>Synopsis:       syntax-parse docs
>Class:          doc-bug
>Responsible:    ryanc
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Sep 07 00:20:02 -0400 2010
>Closed-Date:    Wed Apr 20 20:38:37 -0400 2011
>Last-Modified:  Wed Apr 20 20:38:37 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        master
>Environment:
Any
>Description:
Many examples in the `syntax-parse' docs have a `racket/base` language
but then do (require (for-syntax scheme/base)).

(Also, it would be nice for these examples to use "#lang".)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/11164: syntax-parse docs
Date: Tue, 7 Sep 2010 00:43:16 -0400

 On Sep  7, eli@barzilay.org wrote:
 > [...]
 
 More docs things:
 
 * There are also some `for-template' uses of `scheme/base'.
 
 * This sentence: "The macro is defined as a procedure that takes one
   argument, stx." is completely redundant.  (It's unrelated to
   `syntax-parse', and if you don't know this fact, you better be doing
   something other than writing macros.)
 
 * I'd argue that having a syntax class definition in a separate module
   as a first example is worse than having it inside the
   `define-syntax' body (or a `begin-for-syntax').
 
 * Since the above would work (which you mention in the next
   paragraph), the "must be defined in a separate module" is wrong.
 
 * When you do give an example for defining a syntax class in the
   function, I'd like to have some soothing words telling me that doing
   so doesn't add too much syntax-time overhead -- or that it does, but
   it's negligible, or something like that.
 
 * Side comment: if such soothing words cannot be said, then you should
   shout at Sam -- who has lots of such uses, and who maintains the
   single piece of code with the most obnoxious syntax-time runtime.
 
 * "... from evaluating #'#f"
   --> The code uses #''#f
   --> "from evaluating" sounds bad, and I'd just drop it here.
       (Sounds like it used to say something about evaluating the
       expression after `#:with'.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/11164: syntax-parse docs
Date: Mon, 06 Sep 2010 23:11:52 -0600

 I think you're looking at an old version of the docs. I pushed an update 
 to syntax/parse and its documentation last week that fixed most of 
 these. (Except the request for more soothing words, maybe.)
 
 Ryan
 
 eli@barzilay.org wrote:
  > A new problem report is waiting at
  >   http://bugs.racket-lang.org/query/?cmd=view&pr=11164
  >
  > Reported by Eli Barzilay for release: master
  >
  > *** Description:
  > Many examples in the `syntax-parse' docs have a `racket/base` language
  > but then do (require (for-syntax scheme/base)).
  >
  > (Also, it would be nice for these examples to use "#lang".)
 
 Eli Barzilay wrote:
 > On Sep  7, eli@barzilay.org wrote:
 >> [...]
 > 
 > More docs things:
 > 
 > * There are also some `for-template' uses of `scheme/base'.
 > 
 > * This sentence: "The macro is defined as a procedure that takes one
 >   argument, stx." is completely redundant.  (It's unrelated to
 >   `syntax-parse', and if you don't know this fact, you better be doing
 >   something other than writing macros.)
 > 
 > * I'd argue that having a syntax class definition in a separate module
 >   as a first example is worse than having it inside the
 >   `define-syntax' body (or a `begin-for-syntax').
 > 
 > * Since the above would work (which you mention in the next
 >   paragraph), the "must be defined in a separate module" is wrong.
 > 
 > * When you do give an example for defining a syntax class in the
 >   function, I'd like to have some soothing words telling me that doing
 >   so doesn't add too much syntax-time overhead -- or that it does, but
 >   it's negligible, or something like that.
 > 
 > * Side comment: if such soothing words cannot be said, then you should
 >   shout at Sam -- who has lots of such uses, and who maintains the
 >   single piece of code with the most obnoxious syntax-time runtime.
 > 
 > * "... from evaluating #'#f"
 >   --> The code uses #''#f
 >   --> "from evaluating" sounds bad, and I'd just drop it here.
 >       (Sounds like it used to say something about evaluating the
 >       expression after `#:with'.)
 
From: Eli Barzilay <eli@barzilay.org>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/11164: syntax-parse docs
Date: Tue, 7 Sep 2010 01:58:35 -0400

 On Sep  6, Ryan Culpepper wrote:
 > I think you're looking at an old version of the docs. I pushed an
 > update to syntax/parse and its documentation last week that fixed
 > most of these. (Except the request for more soothing words, maybe.)
 
 Indeed -- I should have said "5.0.1" -- I missed the docs changes in
 your push.
 
 * The section title problem is still there, only its 8.3.
 
 * "The task is ..." --> bad start?  ("Say that we want to ..." or
   something like that sounds better than attacking me with a
   self-detructing mission-impossible tape recorder.)
 
 * "The macro should good error messages"
                    ^
 
 * I'd give the simple `syntax-rules' version first, then show some
   horrible ways in which it breaks -- leaving the first shot at
   `mylet' with a simpler text saying that it has all of these problems
   too.
 
 * "we import syntax-parse for-syntax"
   --> the last "for-syntax" is rendered as a rackey keyword which
       looks confusing (it's like (for-syntax syntax/parse), except
       swapped, unparenthesized, and with a "-" instead of a "/").  I
       think it's better to say "to the syntax level".
 
 * "Only ... may be used in the template"
   --> I'd say "Note that ...+ cannot be used on the template RHS"
       because "...+" is less confusing as a piece of text, and because
       "the template" is a confusing term that can make sense as the
       name for the input pattern too.  (And actually, that's what I
       thought it said, and wondered why the obviously bogus text.)
 
 * "struct eval:120:0: expects 0"
   --> that "struct" there seems like it might be some scribble
       rendering issue.
 
 * "At least, not often. After an initial learning curve."
   --> Something is very weird in those bunch of short sentences.  I
       can't figure out if it's supposed to be funny or whether it's
       serious.
 
 * "do not appear in the template"
   --> Same as above, I'd say "resulting template" to avoid confusion.
 
 * And since you just pushed a bunch of stuff again, I'll stop here.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/11164: syntax-parse docs
Date: Tue, 07 Sep 2010 14:50:23 -0600

 On 09/06/2010 11:58 PM, Eli Barzilay wrote:
 > On Sep  6, Ryan Culpepper wrote:
 >> I think you're looking at an old version of the docs. I pushed an
 >> update to syntax/parse and its documentation last week that fixed
 >> most of these. (Except the request for more soothing words, maybe.)
 >
 > Indeed -- I should have said "5.0.1" -- I missed the docs changes in
 > your push.
 >
 > * The section title problem is still there, only its 8.3.
 
 Fixed in yesterday's push.
 
 > * "The task is ..." -->  bad start?  ("Say that we want to ..." or
 >    something like that sounds better than attacking me with a
 >    self-detructing mission-impossible tape recorder.)
 
 I'll fix that.
 
 > * "The macro should good error messages"
 >                     ^
 
 And that.
 
 > * I'd give the simple `syntax-rules' version first, then show some
 >    horrible ways in which it breaks -- leaving the first shot at
 >    `mylet' with a simpler text saying that it has all of these problems
 >    too.
 
 Not sure I want to this. I'll think about it.
 
 > * "we import syntax-parse for-syntax"
 >    -->  the last "for-syntax" is rendered as a rackey keyword which
 >        looks confusing (it's like (for-syntax syntax/parse), except
 >        swapped, unparenthesized, and with a "-" instead of a "/").  I
 >        think it's better to say "to the syntax level".
 
 Changed to "into the transformer environment", where the latter is 
 @tech'd to the explanation of phase levels in the reference.
 
 > * "Only ... may be used in the template"
 >    -->  I'd say "Note that ...+ cannot be used on the template RHS"
 >        because "...+" is less confusing as a piece of text, and because
 >        "the template" is a confusing term that can make sense as the
 >        name for the input pattern too.  (And actually, that's what I
 >        thought it said, and wondered why the obviously bogus text.)
 
 No. Templates are strictly for constructing output. If there are any 
 places that use "template" to mean "pattern", they should be eliminated. 
 (And vice versa, although "pattern" is a more generic term than "template".)
 
 > * "struct eval:120:0: expects 0"
 >    -->  that "struct" there seems like it might be some scribble
 >        rendering issue.
 
 IIUC, since the procedure is anonymous, its object-name comes from the 
 syntax source of the lambda expression, which either scribble or the 
 sandbox is setting to what you see. Suggestions?
 
 > * "At least, not often. After an initial learning curve."
 >    -->  Something is very weird in those bunch of short sentences.  I
 >        can't figure out if it's supposed to be funny or whether it's
 >        serious.
 
 (Slightly) funny. Read it as someone piling conditions and limitations 
 on an earlier statement. ("Used car, runs great! Well, downhill, anyway. 
 As long as you replace the duct tape once a month.")
 
 Ryan
 
 
 > * "do not appear in the template"
 >    -->  Same as above, I'd say "resulting template" to avoid confusion.
 >
 > * And since you just pushed a bunch of stuff again, I'll stop here.
From: Eli Barzilay <eli@barzilay.org>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/11164: syntax-parse docs
Date: Tue, 7 Sep 2010 17:16:41 -0400

 On Sep  7, Ryan Culpepper wrote:
 > On 09/06/2010 11:58 PM, Eli Barzilay wrote:
 > 
 > > * I'd give the simple `syntax-rules' version first, then show some
 > >   horrible ways in which it breaks -- leaving the first shot at
 > >   `mylet' with a simpler text saying that it has all of these
 > >   problems too.
 > 
 > Not sure I want to this. I'll think about it.
 
 (Just the target crowd for your sale...)
 
 
 > > * "we import syntax-parse for-syntax"
 > >    -->  the last "for-syntax" is rendered as a rackey keyword which
 > >         looks confusing (it's like (for-syntax syntax/parse),
 > >         except swapped, unparenthesized, and with a "-" instead of
 > >         a "/").  I think it's better to say "to the syntax level".
 > 
 > Changed to "into the transformer environment", where the latter is 
 > @tech'd to the explanation of phase levels in the reference.
 
 Much better.
 
 
 > > * "Only ... may be used in the template"
 > >    -->  I'd say "Note that ...+ cannot be used on the template RHS"
 > >         because "...+" is less confusing as a piece of text, and
 > >         because "the template" is a confusing term that can make
 > >         sense as the name for the input pattern too.  (And
 > >         actually, that's what I thought it said, and wondered why
 > >         the obviously bogus text.)
 > 
 > No. Templates are strictly for constructing output. If there are any
 > places that use "template" to mean "pattern", they should be
 > eliminated.  (And vice versa, although "pattern" is a more generic
 > term than "template".)
 
 I didn't mean that it's right or wrong for *you*, or in general macro
 papers -- it's unclear for your target audience (me, in this case).  I
 even checked thesaurus.com, thinking that there's some difference
 between the words in general that I'm missing -- and the two words are
 synonyms, which means that this *will* be confusing regardless of your
 own decision or common macro-writing practice.  The least you should
 do is define the two terms in the beginning, and have margin notes and
 tech links to there.  That would still be a weaker solution, since it
 doesn't help me if I jump into the middle to read about something.
 
 
 > > * "struct eval:120:0: expects 0"
 > >    -->  that "struct" there seems like it might be some scribble
 > >         rendering issue.
 > 
 > IIUC, since the procedure is anonymous, its object-name comes from the 
 > syntax source of the lambda expression, which either scribble or the 
 > sandbox is setting to what you see. Suggestions?
 
 It's the "struct " prefix that looks suspicious.
 
 
 > > * "At least, not often. After an initial learning curve."
 > >    -->  Something is very weird in those bunch of short sentences.  I
 > >         can't figure out if it's supposed to be funny or whether
 > >         it's serious.
 > 
 > (Slightly) funny. Read it as someone piling conditions and
 > limitations on an earlier statement. ("Used car, runs great! Well,
 > downhill, anyway.  As long as you replace the duct tape once a
 > month.")
 
 Well, you have a clear advantage and a good point there, making it
 depend on getting the humor is risking diminishing the apparent value
 of the point.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

Responsible changed from "nobody" to "ryanc" by ryanc at Wed, 15 Sep 2010 15:20:09 -0400
Reason>>> responsible



State changed from "open" to "closed" by ryanc at Wed, 20 Apr 2011 20:38:37 -0400
Reason>>> .

