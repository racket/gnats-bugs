From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Apr 21 12:23:07 2009
Received: from qw-out-2122.google.com (qw-out-2122.google.com [74.125.92.25])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n3LGMtRV027541
	for <bugs@bugs.plt-scheme.org>; Tue, 21 Apr 2009 12:22:55 -0400
Message-Id: <200904211622.n3LGMegJ027531@champlain.ccs.neu.edu>
Date: Tue, 21 Apr 2009 12:22:40 -0400
From: will@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: incorrect test in R6RS test program

>Number:         10210
>Category:       misc
>Synopsis:       incorrect test in R6RS test program
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Apr 21 12:24:01 -0400 2009
>Closed-Date:    Tue Apr 21 12:45:27 -0400 2009
>Last-Modified:  Wed Apr 22 11:04:01 -0400 2009
>Originator:     William D Clinger
>Organization:
plt
>Submitter-Id:   unknown
>Release:        14573
>Environment:
>Description:
In the PLT R6RS test program, the following test is not portable:

    (test (free-identifier=? #'cons #'kons) #t)

Although the result expected by that test is allowed by the R6RS,
the R6RS also allows implementations to raise an exception [1,2]:

     When an identifier appears as an expression in a
     phase that is inconsistent with the identifierâ€™s
     level, then an implementation may raise an exception
     either at expand time or run time, or it may allow
     the reference.

Since the PLT test program is serving as a black-box test of
basic R6RS compliance, it should not contain tests that expect
PLT-specific behaviors.

[1] http://lists.ccs.neu.edu/pipermail/larceny-users/2009-April/000642.html
[2] http://lists.ccs.neu.edu/pipermail/larceny-users/2009-April/000645.html
>How-To-Repeat:
This is one of the two tests Larceny v0.97b1 has been failing since
August 2008.  I had not reported this earlier because I wasn't sure
whether it was a bug in Larceny or a portability problem in the test
program.  Now that Andre van Tonder and Aziz Ghuloum are in violent
agreement that implementations may raise an exception for that test,
I feel confident enough to report it.
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "mflatt" by mflatt at Tue, 21 Apr 2009 12:45:27 -0400
Reason>>> r6rs

State changed from "open" to "closed" by mflatt at Tue, 21 Apr 2009 12:45:27 -0400
Reason>>> Test dropped in SVN.

From: Sam TH <samth@ccs.neu.edu>
To: will@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10210: incorrect test in R6RS test program
Date: Tue, 21 Apr 2009 13:37:01 -0400

 On Tue, Apr 21, 2009 at 12:24 PM,  <will@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10210
 >
 > Reported by William D Clinger for release: 14573
 >
 > *** Description:
 > In the PLT R6RS test program, the following test is not portable:
 >
 > =A0 =A0(test (free-identifier=3D? #'cons #'kons) #t)
 >
 > Although the result expected by that test is allowed by the R6RS,
 > the R6RS also allows implementations to raise an exception [1,2]:
 >
 > =A0 =A0 When an identifier appears as an expression in a
 > =A0 =A0 phase that is inconsistent with the identifier=92s
 > =A0 =A0 level, then an implementation may raise an exception
 > =A0 =A0 either at expand time or run time, or it may allow
 > =A0 =A0 the reference.
 
 This would definitely be the case if the references to the `cons' and
 `kons' identifiers occurred at a phase where they were not imported,
 but that doesn't seem to be the case here.  In particular, the R6RS
 states that "top-level expressions" (of which the `test' form is one)
 "are evaluated at run-time (i.e. phase 0)".
 
 It appears (from reading the cited larceny-users discussion) that
 Larceny treats identifiers occurring inside of a `syntax' form as
 occurring at one phase level lower than the context surrounding the
 `syntax' form.  However, I can't find any place in Section 12.4 of the
 R6RS Library Report that suggests this interpretation of the `syntax'
 form.
 
 --=20
 sam th
 samth@ccs.neu.edu
From: William D Clinger <will@ccs.neu.edu>
To: bugs@plt-scheme.org, samth@ccs.neu.edu, will@ccs.neu.edu
Cc: cce@plt-scheme.org, clements@plt-scheme.org, eli@plt-scheme.org,
        gcooper@plt-scheme.org, jacobm@plt-scheme.org, jay@plt-scheme.org,
        kathyg@plt-scheme.org, matthias@plt-scheme.org, meunier@plt-scheme.org,
        mflatt@plt-scheme.org, nobody@plt-scheme.org, robby@plt-scheme.org,
        ryanc@plt-scheme.org, sk@plt-scheme.org, sperber@deinprogramm.de,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10210: incorrect test in R6RS test program
Date: Wed, 22 Apr 2009 11:00:06 -0400

 First let me correct what I said in my problem report about
 how to reproduce the problem.  I said Andre van Tonder and
 Aziz Ghuloum were in violent agreement that the R6RS allows
 (but does not require) implementations to raise an exception
 for the problematic test.  In reality, Andre is convinced of
 that, while Aziz says he does not know [1].
 
 Sam TH wrote:
 > It appears (from reading the cited larceny-users discussion) that
 > Larceny treats identifiers occurring inside of a `syntax' form as
 > occurring at one phase level lower than the context surrounding the
 > `syntax' form.  However, I can't find any place in Section 12.4 of the
 > R6RS Library Report that suggests this interpretation of the `syntax'
 > form.
 
 Similarly, I can't find anything in R6RS 11.4.1 to suggest
 that a quoted identifier should evaluate to a symbol.  In
 fact, the quoted datum "should be a syntactic datum", which
 would rule out identifiers.
 
 The analogy is relevant because R6RS library section 12.4
 says "a syntax expression is similar to a quote expression".
 Evidently implementors are expected to read between the
 lines of both specifications.
 
 The difference between an operational description and an
 operational semantics is that a semantics distinguishes
 the consequences of the description that are required of
 every implementation from the consequences that are merely
 incidental to the description.  The R6RS specification of
 macro expansion is a description, not a semantics.
 
 That came about in part because the R6RS specification was
 "designed to admit both of the reference implementations"
 developed by Andre van Tonder and by Ghuloum and Dybvig
 [2].  Larceny uses Andre van Tonder's implementation.
 
 The R6RS is not perfect.  As the editors wrote in their
 response to Andre's formal comment 92 [2]:  "As a design
 process, this implementation-driven approach leaves
 something to be desired, but it seems to be the surest
 way forward."
 
 My more detailed review of the public record concerning
 this issue can be read in the archives of the Larceny
 mailing list [3].
 
 Will
 
 
 [1] http://lists.ccs.neu.edu/pipermail/larceny-users/2009-April/000647.html
 [2] http://www.r6rs.org/formal-comments/comment-92.txt
 [3] http://lists.ccs.neu.edu/pipermail/larceny-users/2009-April/000652.html
