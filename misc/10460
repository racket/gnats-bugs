From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Sep 15 18:01:24 2009
Received: from mail-yw0-f187.google.com (mail-yw0-f187.google.com [209.85.211.187])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n8FM1I44017224
	for <bugs@bugs.plt-scheme.org>; Tue, 15 Sep 2009 18:01:18 -0400
Message-Id: <200909152201.n8FM1Dp5017217@champlain.ccs.neu.edu>
Date: Tue, 15 Sep 2009 18:01:13 -0400
From: derick.eddington@gmail.com
To: bugs@plt-scheme.org
Subject: [R6RS] phase level 2 let-syntax bug

>Number:         10460
>Category:       misc
>Synopsis:       [R6RS] phase level 2 let-syntax bug
>Class:          sw-bug
>Responsible:    ryanc
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Sep 15 18:04:01 -0400 2009
>Closed-Date:    Fri May 06 02:32:00 -0400 2011
>Last-Modified:  Mon Feb 18 23:53:28 -0500 2013
>Originator:     Derick Eddington
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1.7-svn29aug2009
>Environment:
unix "Linux eep 2.6.28-15-generic #49-Ubuntu SMP Tue Aug 18 18:40:08 UTC 2009 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 115854532

Collections:
(("/home/d/.plt-scheme/4.2.1.7/collects" "xitomatl") ("/home/d/plt/collects" "afm" "ffi" "net" "sgl" "xml" "eopl" "file" "help" "htdp" "html" "lang" "lazy" "make" "r5rs" "r6rs" "mred" "plot" "rnrs" "srfi" "wxme" "framework" "2htdp" "teachpack" "mzscheme" "games" "icons" "htdch" "s-exp" "mrlib" "mzcom" "mzlib" "deinprogramm" "graphics" "profj" "redex" "setup" "trace" "typed" "test-engine" "combinator-parser" "preprocessor" "test-box-recovery" "tex2page" "texpict" "scribblings" "at-exp" "stepper" "scribble" "scriblib" "typed-scheme" "web-server" "config" "compiler" "swindle" "dynext" "hierlist" "macro-debugger" "frtime" "defaults" "gui-debugger" "drscheme" "syntax-color" "planet" "mysterx" "errortrace" "scheme" "slatex" "syntax" "version" "algol60" "parser-tools" "openssl" "embedded-gui" "slideshow" "repos-time-stamp" "info-domain" "readline" "launcher" "string-constants" "browser" "profile" "stxclass"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#!r6rs\n(import\n  (rnrs))\n" #f))
>Description:
I believe the below program is R6RS-conforming and so should work.  (It works in Ikarus, Larceny, and Ypsilon.)
>How-To-Repeat:
#!r6rs
(import (rnrs)
        (for (only (rnrs) syntax-rules) (meta 2)))

(define foo 1)

(let-syntax
    ((define
      (let-syntax
          ((vanish-define
            (syntax-rules ()
              ((_ id ...)
               (let ((to-vanish (list (syntax id) ...)))
                 (lambda (stx)
                   (define (vanish? x)
                     (memp (lambda (y) (free-identifier=? x y))
                           to-vanish))
                   (syntax-case stx ()
                     ((_ name . _)
                      (vanish? (syntax name))
                      (syntax (begin)))
                     ((_ . r)
                      (syntax (define . r))))))))))
        (vanish-define foo))))
  (define foo foo))

(write foo) (newline)

ERROR=>

vanish-define: bad syntax in: (vanish-define foo)
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: derick.eddington@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10460: [R6RS] phase level 2 let-syntax bug
Date: Tue, 15 Sep 2009 18:55:10 -0600

 Don't you need to import `...' along with `syntax-rules'?
 
 At Tue, 15 Sep 2009 18:04:01 -0400, derick.eddington@gmail.com wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=10460
 > 
 > Reported by Derick Eddington for release: 4.2.1.7-svn29aug2009
 > 
 > *** Description:
 > I believe the below program is R6RS-conforming and so should work.  (It works 
 > in Ikarus, Larceny, and Ypsilon.)
 > 
 > *** How to repeat:
 > #!r6rs
 > (import (rnrs)
 >         (for (only (rnrs) syntax-rules) (meta 2)))
 > 
 > (define foo 1)
 > 
 > (let-syntax
 >     ((define
 >       (let-syntax
 >           ((vanish-define
 >             (syntax-rules ()
 >               ((_ id ...)
 >                (let ((to-vanish (list (syntax id) ...)))
 >                  (lambda (stx)
 >                    (define (vanish? x)
 >                      (memp (lambda (y) (free-identifier=? x y))
 >                            to-vanish))
 >                    (syntax-case stx ()
 >                      ((_ name . _)
 >                       (vanish? (syntax name))
 >                       (syntax (begin)))
 >                      ((_ . r)
 >                       (syntax (define . r))))))))))
 >         (vanish-define foo))))
 >   (define foo foo))
 > 
 > (write foo) (newline)
 > 
 > ERROR=>
 > 
 > vanish-define: bad syntax in: (vanish-define foo)
 > 
 > *** Environment:
 > unix "Linux eep 2.6.28-15-generic #49-Ubuntu SMP Tue Aug 18 18:40:08 UTC 2009 
 > i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 > Human Language: english
 > (current-memory-use) 115854532
 > 
 > Collections:
 > (("/home/d/.plt-scheme/4.2.1.7/collects" "xitomatl") ("/home/d/plt/collects" 
 > "afm" "ffi" "net" "sgl" "xml" "eopl" "file" "help" "htdp" "html" "lang" "lazy" 
 > "make" "r5rs" "r6rs" "mred" "plot" "rnrs" "srfi" "wxme" "framework" "2htdp" 
 > "teachpack" "mzscheme" "games" "icons" "htdch" "s-exp" "mrlib" "mzcom" "mzlib" 
 > "deinprogramm" "graphics" "profj" "redex" "setup" "trace" "typed" 
 > "test-engine" "combinator-parser" "preprocessor" "test-box-recovery" 
 > "tex2page" "texpict" "scribblings" "at-exp" "stepper" "scribble" "scriblib" 
 > "typed-scheme" "web-server" "config" "compiler" "swindle" "dynext" "hierlist" 
 > "macro-debugger" "frtime" "defaults" "gui-debugger" "drscheme" "syntax-color" 
 > "planet" "mysterx" "errortrace" "scheme" "slatex" "syntax" "version" "algol60" 
 > "parser-tools" "openssl" "embedded-gui" "slideshow" "repos-time-stamp" 
 > "info-domain" "readline" "launcher" "string-constants" "browser" "profile" 
 > "stxclass"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) 
 > (default) #() "#!r6rs\n(import\n  (rnrs))\n" #f))
From: Derick Eddington <derick.eddington@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10460: [R6RS] phase level 2 let-syntax bug
Date: Tue, 15 Sep 2009 20:53:58 -0700

 Oh, yeah.  Thanks.  I forgot about `...' being "auxiliary syntax", and
 because the program worked in "explicit-phasing" Larceny I thought it
 should be OK for "explicit-phasing" systems.  After re-pondering the
 relevant parts of R6RS for a while, I now understand what the levels are
 supposed to be and that it's Larceny's bug for allowing the program to
 work.  I'll report the Larceny bug.
 
 BTW, R6RS is not clear about `...'.  It says: "An <ellipsis> is the
 identifier "..." (three periods).".  This makes it seem like `...'
 cannot be renamed (which I think is the purpose of making `...' be
 auxiliary syntax).  It barely hints at the issue by saying 
 "...    auxiliary syntax" and "_ and ... are the same as in the 
 (rnrs base (6)) library".
 
 BTW, I've found it quite confusing and inconsistent that R6RS exports
 some bindings at levels other than 0 so that these bindings do not need
 explicit level declarations to be imported at levels other than 0, which
 is the entire purpose of "implicit phasing", and in "explicit-phasing"
 systems, these bindings get the benefit of "implicit phasing" but all
 other bindings do not get the benefit.  If the purpose of "explicit
 phasing" is to make it explicitly declared at what phases bindings
 exist, then how can you reconcile this "implicit phasing" for these R6RS
 bindings?  If the convenience of not having to make explicit import
 level declarations for these bindings is good, then why shouldn't all
 bindings get this convenience, i.e. "implicit phasing" for all bindings,
 like psyntax systems and Ypsilon.  Also, these export levels other than
 0 really further complicate the already-confusing "explicit phasing"
 levels arithmetic necessary to actually use your imports.  I doubt
 "explicit phasing" helps many people actually understand the
 ramifications of instantiation phases because they just try to do the
 level arithmetic voodoo, probably with some unnecessary levels thrown in
 because it's confusing, and continue without further thought.
 
 -- 
 : Derick
 ----------------------------------------------------------------
 
 
 On Tue, 2009-09-15 at 18:55 -0600, Matthew Flatt wrote: 
 > Don't you need to import `...' along with `syntax-rules'?
 > 
 > At Tue, 15 Sep 2009 18:04:01 -0400, derick.eddington@gmail.com wrote:
 > > A new problem report is waiting at
 > >   http://bugs.plt-scheme.org/query/?cmd=view&pr=10460
 > > 
 > > Reported by Derick Eddington for release: 4.2.1.7-svn29aug2009
 > > 
 > > *** Description:
 > > I believe the below program is R6RS-conforming and so should work.  (It works 
 > > in Ikarus, Larceny, and Ypsilon.)
 > > 
 > > *** How to repeat:
 > > #!r6rs
 > > (import (rnrs)
 > >         (for (only (rnrs) syntax-rules) (meta 2)))
 > > 
 > > (define foo 1)
 > > 
 > > (let-syntax
 > >     ((define
 > >       (let-syntax
 > >           ((vanish-define
 > >             (syntax-rules ()
 > >               ((_ id ...)
 > >                (let ((to-vanish (list (syntax id) ...)))
 > >                  (lambda (stx)
 > >                    (define (vanish? x)
 > >                      (memp (lambda (y) (free-identifier=? x y))
 > >                            to-vanish))
 > >                    (syntax-case stx ()
 > >                      ((_ name . _)
 > >                       (vanish? (syntax name))
 > >                       (syntax (begin)))
 > >                      ((_ . r)
 > >                       (syntax (define . r))))))))))
 > >         (vanish-define foo))))
 > >   (define foo foo))
 > > 
 > > (write foo) (newline)
 > > 
 > > ERROR=>
 > > 
 > > vanish-define: bad syntax in: (vanish-define foo)
 > > 
 > > *** Environment:
 > > unix "Linux eep 2.6.28-15-generic #49-Ubuntu SMP Tue Aug 18 18:40:08 UTC 2009 
 > > i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 > > Human Language: english
 > > (current-memory-use) 115854532
 > > 
 > > Collections:
 > > (("/home/d/.plt-scheme/4.2.1.7/collects" "xitomatl") ("/home/d/plt/collects" 
 > > "afm" "ffi" "net" "sgl" "xml" "eopl" "file" "help" "htdp" "html" "lang" "lazy" 
 > > "make" "r5rs" "r6rs" "mred" "plot" "rnrs" "srfi" "wxme" "framework" "2htdp" 
 > > "teachpack" "mzscheme" "games" "icons" "htdch" "s-exp" "mrlib" "mzcom" "mzlib" 
 > > "deinprogramm" "graphics" "profj" "redex" "setup" "trace" "typed" 
 > > "test-engine" "combinator-parser" "preprocessor" "test-box-recovery" 
 > > "tex2page" "texpict" "scribblings" "at-exp" "stepper" "scribble" "scriblib" 
 > > "typed-scheme" "web-server" "config" "compiler" "swindle" "dynext" "hierlist" 
 > > "macro-debugger" "frtime" "defaults" "gui-debugger" "drscheme" "syntax-color" 
 > > "planet" "mysterx" "errortrace" "scheme" "slatex" "syntax" "version" "algol60" 
 > > "parser-tools" "openssl" "embedded-gui" "slideshow" "repos-time-stamp" 
 > > "info-domain" "readline" "launcher" "string-constants" "browser" "profile" 
 > > "stxclass"))
 > > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) 
 > > (default) #() "#!r6rs\n(import\n  (rnrs))\n" #f))
 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Derick Eddington <derick.eddington@gmail.com>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10460: [R6RS] phase level 2 let-syntax bug
Date: Wed, 16 Sep 2009 02:19:44 -0500

 On Tue, Sep 15, 2009 at 10:53 PM, Derick Eddington
 <derick.eddington@gmail.com> wrote:
 > BTW, I've found it quite confusing and inconsistent that R6RS exports
 > some bindings at levels other than 0 so that these bindings do not need
 > explicit level declarations to be imported at levels other than 0, which
 > is the entire purpose of "implicit phasing", and in "explicit-phasing"
 > systems, these bindings get the benefit of "implicit phasing" but all
 > other bindings do not get the benefit. =C2=A0If the purpose of "explicit
 > phasing" is to make it explicitly declared at what phases bindings
 > exist, then how can you reconcile this "implicit phasing" for these R6RS
 > bindings? =C2=A0If the convenience of not having to make explicit import
 > level declarations for these bindings is good, then why shouldn't all
 > bindings get this convenience, i.e. "implicit phasing" for all bindings,
 > like psyntax systems and Ypsilon. =C2=A0Also, these export levels other t=
 han
 > 0 really further complicate the already-confusing "explicit phasing"
 > levels arithmetic necessary to actually use your imports. =C2=A0I doubt
 > "explicit phasing" helps many people actually understand the
 > ramifications of instantiation phases because they just try to do the
 > level arithmetic voodoo, probably with some unnecessary levels thrown in
 > because it's confusing, and continue without further thought.
 
 I have never (seriously (just toy programs)) programmed in an implicit
 phasing system so perhaps my brain was already warped from the
 beginning, but this is certainly not my experience at all. I import
 things for syntax when I need to use them in macros and I import them
 for template when there are variables in a template in some helper
 function that is going to be used via for-syntax in some other module.
 I never did any arithmetic or any voodoo.
 
 (Of course, the notation & terminology is different in PLT Scheme
 since it predates R6RS, and maybe that helped me.)
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Derick Eddington <derick.eddington@gmail.com>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10460: [R6RS] phase level 2 let-syntax bug
Date: Wed, 16 Sep 2009 06:14:06 -0600

 At Tue, 15 Sep 2009 20:53:58 -0700, Derick Eddington wrote:
 > BTW, I've found it quite confusing and inconsistent that R6RS exports
 > some bindings at levels other than 0 so that these bindings do not need
 > explicit level declarations to be imported at levels other than 0, which
 > is the entire purpose of "implicit phasing", and in "explicit-phasing"
 > systems, these bindings get the benefit of "implicit phasing" but all
 > other bindings do not get the benefit. 
 
 I don't understand what you mean. The `syntax-rules' and `...' bindings
 are exported from `(rnrs)' at phase 1, but that's different than saying
 that they're implicitly imported at any phase where you use them. (The
 difference, of course, was the issue with your code.) Did you have some
 other bindings in mind?
 
 > Also, these export levels other than
 > 0 really further complicate the already-confusing "explicit phasing"
 > levels arithmetic necessary to actually use your imports.  I doubt
 > "explicit phasing" helps many people actually understand the
 > ramifications of instantiation phases because they just try to do the
 > level arithmetic voodoo, probably with some unnecessary levels thrown in
 > because it's confusing, and continue without further thought.
 
 I agree that programmers sometimes throw in extra levels without
 understanding why they are needed. At the same time, I'm sure that
 explicit phasing helps PLT Scheme developers understand each others'
 code. There are trade offs, and the trade offs are related to other
 parts of the language design (notably separate instantiation); the
 relative merits of different points probably depend on what you're
 trying to do.
 
From: Derick Eddington <derick.eddington@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10460: [R6RS] phase level 2 let-syntax bug
Date: Wed, 16 Sep 2009 17:14:23 -0700

 On Wed, 2009-09-16 at 06:14 -0600, Matthew Flatt wrote: 
 > At Tue, 15 Sep 2009 20:53:58 -0700, Derick Eddington wrote:
 > > BTW, I've found it quite confusing and inconsistent that R6RS exports
 > > some bindings at levels other than 0 so that these bindings do not need
 > > explicit level declarations to be imported at levels other than 0, which
 > > is the entire purpose of "implicit phasing", and in "explicit-phasing"
 > > systems, these bindings get the benefit of "implicit phasing" but all
 > > other bindings do not get the benefit. 
 > 
 > I don't understand what you mean. The `syntax-rules' and `...' bindings
 > are exported from `(rnrs)' at phase 1, but that's different than saying
 > that they're implicitly imported at any phase where you use them. (The
 > difference, of course, was the issue with your code.) Did you have some
 > other bindings in mind?
 
 What I mean is: 
 
 Because the purpose of exporting bindings (any bindings) with levels
 other than 0 is so that these bindings do not have to be imported with a
 declaration of the levels you want them for, this says to me that
 pro-"explicit phasing" people consider it desirable to not have to
 declare the actual levels these bindings are imported for -- the actual
 levels are the result of adding the export levels to the import levels,
 which is not explicit declaration.  E.g., the `(rnrs)' library exporting
 all its bindings with level 1 so that the common case of defining macros
 which involve only phase 1 does not require importing `(rnrs)' for
 `(meta 1)'.  Or another example, someone could make a wrapper library
 whose purpose is to re-export bindings at levels other than 0 so that
 these bindings are imported at those levels without requiring an import
 level declaration.  The purpose is the convenience of not having to make
 import level declarations (right?).  I see this as contradictory to the
 purpose of "explicit phasing" because the actual levels bindings are
 imported for are not explicitly declared.
 
 You might say that bindings exported at levels other than 0 are
 specified to be exported at those levels, and so it's OK because it's
 specified.  However, I think this makes it worse because it makes it
 more difficult to understand what the actual levels are because you have
 to also know the export levels and do the arithmetic.
 
 When reviewing code, if the only possible export level was 0, then I
 could more easily understand why people think "explicit phasing" is
 beneficial because it's declared at what phases bindings exist.
 However, the existence of export levels other than 0 removes this
 benefit (IMO), because it's not declared at what phases bindings exist
 because I have to learn the export levels and do the arithmetic, which I
 don't consider better than just finding at what levels a binding is
 referenced in the code I'm already looking at (which is what you do with
 "implicit phasing").
 
 When writing code, you should already know at what levels you're
 referencing bindings so that you understand the phasing ramifications.
 "Explicit phasing" with export levels other than 0 makes it worse
 because you also have to know the export levels to get the import level
 declarations correct.  I already know what levels I referenced bindings
 at and so does the compiler, so I don't want to be distracted with
 jumping through these hoops which are superfluous because they don't
 actually give any benefit (IMO) because of export levels other than 0.
 
 If it's desirable to not have to make import level declarations for some
 bindings at some phases (which I think it is, and so do pro-"explicit
 phasing" people apparently), then why not extend this to all bindings at
 all phases?  You can accomplish this with export levels for every
 desired phase (unwieldy) or with "implicit phasing".
 
 > > Also, these export levels other than
 > > 0 really further complicate the already-confusing "explicit phasing"
 > > levels arithmetic necessary to actually use your imports.  I doubt
 > > "explicit phasing" helps many people actually understand the
 > > ramifications of instantiation phases because they just try to do the
 > > level arithmetic voodoo, probably with some unnecessary levels thrown in
 > > because it's confusing, and continue without further thought.
 > 
 > I agree that programmers sometimes throw in extra levels without
 > understanding why they are needed. At the same time, I'm sure that
 > explicit phasing helps PLT Scheme developers understand each others'
 > code. There are trade offs, and the trade offs are related to other
 > parts of the language design (notably separate instantiation); the
 > relative merits of different points probably depend on what you're
 > trying to do.
 
 I'm willing to continue using "explicit phasing" to keep my code
 portable and to gain more experience with it.  So far (2 years), I've
 become more convinced I like "implicit phasing" better.  I think a
 better compromise would be that imports without level declarations are
 always "implicit phasing" and imports with level declarations are always
 verified (which I suppose would always require declarations for level 0
 to verify that only level 0 is used, and I see that as more consistent
 with the purpose of "explicit phasing"), instead of the current
 compromise where "implicit phasing" style is not portable and "explicit
 phasing" style is ignored by some systems and so not portable according
 to the authors' intent  -- this way both sides can do it their way *and*
 be portable.
 
 -- 
 : Derick
 ----------------------------------------------------------------
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Derick Eddington <derick.eddington@gmail.com>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10460: [R6RS] phase level 2 let-syntax bug
Date: Wed, 16 Sep 2009 19:03:16 -0600

 Thanks for the clarification, and I think I see what you mean. Although
 I disagree on many points, I don't have any novel arguments.
 
 Meanwhile, I can easily agree that the R6RS compromise is inferior to
 other design points. I don't buy your suggestion on how to fix R6RS,
 but I'm more than happy to leave that issue to others.
 
 Matthew
 
 At Wed, 16 Sep 2009 17:14:23 -0700, Derick Eddington wrote:
 > On Wed, 2009-09-16 at 06:14 -0600, Matthew Flatt wrote: 
 > > At Tue, 15 Sep 2009 20:53:58 -0700, Derick Eddington wrote:
 > > > BTW, I've found it quite confusing and inconsistent that R6RS exports
 > > > some bindings at levels other than 0 so that these bindings do not need
 > > > explicit level declarations to be imported at levels other than 0, which
 > > > is the entire purpose of "implicit phasing", and in "explicit-phasing"
 > > > systems, these bindings get the benefit of "implicit phasing" but all
 > > > other bindings do not get the benefit. 
 > > 
 > > I don't understand what you mean. The `syntax-rules' and `...' bindings
 > > are exported from `(rnrs)' at phase 1, but that's different than saying
 > > that they're implicitly imported at any phase where you use them. (The
 > > difference, of course, was the issue with your code.) Did you have some
 > > other bindings in mind?
 > 
 > What I mean is: 
 > 
 > Because the purpose of exporting bindings (any bindings) with levels
 > other than 0 is so that these bindings do not have to be imported with a
 > declaration of the levels you want them for, this says to me that
 > pro-"explicit phasing" people consider it desirable to not have to
 > declare the actual levels these bindings are imported for -- the actual
 > levels are the result of adding the export levels to the import levels,
 > which is not explicit declaration.  E.g., the `(rnrs)' library exporting
 > all its bindings with level 1 so that the common case of defining macros
 > which involve only phase 1 does not require importing `(rnrs)' for
 > `(meta 1)'.  Or another example, someone could make a wrapper library
 > whose purpose is to re-export bindings at levels other than 0 so that
 > these bindings are imported at those levels without requiring an import
 > level declaration.  The purpose is the convenience of not having to make
 > import level declarations (right?).  I see this as contradictory to the
 > purpose of "explicit phasing" because the actual levels bindings are
 > imported for are not explicitly declared.
 > 
 > You might say that bindings exported at levels other than 0 are
 > specified to be exported at those levels, and so it's OK because it's
 > specified.  However, I think this makes it worse because it makes it
 > more difficult to understand what the actual levels are because you have
 > to also know the export levels and do the arithmetic.
 > 
 > When reviewing code, if the only possible export level was 0, then I
 > could more easily understand why people think "explicit phasing" is
 > beneficial because it's declared at what phases bindings exist.
 > However, the existence of export levels other than 0 removes this
 > benefit (IMO), because it's not declared at what phases bindings exist
 > because I have to learn the export levels and do the arithmetic, which I
 > don't consider better than just finding at what levels a binding is
 > referenced in the code I'm already looking at (which is what you do with
 > "implicit phasing").
 > 
 > When writing code, you should already know at what levels you're
 > referencing bindings so that you understand the phasing ramifications.
 > "Explicit phasing" with export levels other than 0 makes it worse
 > because you also have to know the export levels to get the import level
 > declarations correct.  I already know what levels I referenced bindings
 > at and so does the compiler, so I don't want to be distracted with
 > jumping through these hoops which are superfluous because they don't
 > actually give any benefit (IMO) because of export levels other than 0.
 > 
 > If it's desirable to not have to make import level declarations for some
 > bindings at some phases (which I think it is, and so do pro-"explicit
 > phasing" people apparently), then why not extend this to all bindings at
 > all phases?  You can accomplish this with export levels for every
 > desired phase (unwieldy) or with "implicit phasing".
 > 
 > > > Also, these export levels other than
 > > > 0 really further complicate the already-confusing "explicit phasing"
 > > > levels arithmetic necessary to actually use your imports.  I doubt
 > > > "explicit phasing" helps many people actually understand the
 > > > ramifications of instantiation phases because they just try to do the
 > > > level arithmetic voodoo, probably with some unnecessary levels thrown in
 > > > because it's confusing, and continue without further thought.
 > > 
 > > I agree that programmers sometimes throw in extra levels without
 > > understanding why they are needed. At the same time, I'm sure that
 > > explicit phasing helps PLT Scheme developers understand each others'
 > > code. There are trade offs, and the trade offs are related to other
 > > parts of the language design (notably separate instantiation); the
 > > relative merits of different points probably depend on what you're
 > > trying to do.
 > 
 > I'm willing to continue using "explicit phasing" to keep my code
 > portable and to gain more experience with it.  So far (2 years), I've
 > become more convinced I like "implicit phasing" better.  I think a
 > better compromise would be that imports without level declarations are
 > always "implicit phasing" and imports with level declarations are always
 > verified (which I suppose would always require declarations for level 0
 > to verify that only level 0 is used, and I see that as more consistent
 > with the purpose of "explicit phasing"), instead of the current
 > compromise where "implicit phasing" style is not portable and "explicit
 > phasing" style is ignored by some systems and so not portable according
 > to the authors' intent  -- this way both sides can do it their way *and*
 > be portable.
 > 
 > -- 
 > : Derick
 > ----------------------------------------------------------------

State changed from "open" to "closed" by ryanc at Fri, 06 May 2011 02:32:00 -0400
Reason>>> resolved


Responsible changed from "nobody" to "ryanc" by eli at Mon, 18 Feb 2013 23:53:28 -0500
Reason>>> ryanc closed

