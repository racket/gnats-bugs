From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Apr 28 16:35:18 2009
Received: from mail-qy0-f127.google.com (mail-qy0-f127.google.com [209.85.221.127])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n3SKZ2Nl025913
	for <bugs@bugs.plt-scheme.org>; Tue, 28 Apr 2009 16:35:02 -0400
Message-Id: <200904282034.n3SKYwkw025902@champlain.ccs.neu.edu>
Date: Tue, 28 Apr 2009 16:34:58 -0400
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Infinite loop when using scheme/package

>Number:         10220
>Category:       misc
>Synopsis:       Infinite loop when using scheme/package
>Class:          not-a-bug
>Responsible:    cce
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Apr 28 16:36:01 -0400 2009
>Closed-Date:    Tue Apr 28 17:45:13 -0400 2009
>Last-Modified:  Sat May 09 11:37:49 -0400 2009
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.5.5-svn28apr2009
>Environment:
macosx "Darwin Kauai.ccs.neu.edu 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:39:01 PST 2008; root:xnu-1228.9.59~1/RELEASE_PPC Power Macintosh" (ppc-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 436994652

Collections:
(("/Users/cce/Library/PLT Scheme/4.1.5.5/collects" non-existent-path) ("/Users/cce/plt/trunk/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" !
 "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
The code below results in an infinite loop; I don't know if it happens at run-time or compile-time, or which term it might be in.  Replacing the first occurrence of "g" with "add1" yields code that compiles and runs quickly and without error.
>How-To-Repeat:
#lang scheme

(require scheme/package)

(define-package my-package #:all-defined
  
  (define* (f x) (g (add1 x)))
  
  (define* (g x) (f (f x)))
  
  )

(open-package my-package)

(f 1)
(g 1)
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: cce@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10220: Infinite loop when using scheme/package
Date: Tue, 28 Apr 2009 16:44:54 -0400

 On Apr 28, cce@ccs.neu.edu wrote:
 > The code below results in an infinite loop; I don't know if it
 > happens at run-time or compile-time, or which term it might be in.
 > Replacing the first occurrence of "g" with "add1" yields code that
 > compiles and runs quickly and without error.
 
 It's a runtime loop.  An easier way to see the problem is:
 
   #lang scheme
   (require scheme/package)
   (define-package my-package #:all-defined
     ;; (define* (g x) (list 'gg x))
     (define* (f x) (list 'f (g x)))
     (define* (g x) (list 'g x)))
   (open-package my-package)
   (f 1)
 
 Uncommenting the first definition of `g' makes it do the right thing
 again.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Carl Eastlund <cce@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10220: Infinite loop when using scheme/package
Date: Tue, 28 Apr 2009 17:35:48 -0400

 On Tue, Apr 28, 2009 at 4:44 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Apr 28, cce@ccs.neu.edu wrote:
 >> The code below results in an infinite loop; I don't know if it
 >> happens at run-time or compile-time, or which term it might be in.
 >> Replacing the first occurrence of "g" with "add1" yields code that
 >> compiles and runs quickly and without error.
 >
 > It's a runtime loop. =A0An easier way to see the problem is:
 >
 > =A0#lang scheme
 > =A0(require scheme/package)
 > =A0(define-package my-package #:all-defined
 > =A0 =A0;; (define* (g x) (list 'gg x))
 > =A0 =A0(define* (f x) (list 'f (g x)))
 > =A0 =A0(define* (g x) (list 'g x)))
 > =A0(open-package my-package)
 > =A0(f 1)
 >
 > Uncommenting the first definition of `g' makes it do the right thing
 > again.
 
 I'm not sure how this clarifies that it is a runtime loop.  The
 commented-out line is going to affect both expansion and execution,
 isn't it?
 
 --=20
 Carl Eastlund
From: Eli Barzilay <eli@barzilay.org>
To: Carl Eastlund <cce@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10220: Infinite loop when using scheme/package
Date: Tue, 28 Apr 2009 17:39:04 -0400

 On Apr 28, Carl Eastlund wrote:
 > On Tue, Apr 28, 2009 at 4:44 PM, Eli Barzilay <eli@barzilay.org> wrot=
 e:
 > > On Apr 28, cce@ccs.neu.edu wrote:
 > >> The code below results in an infinite loop; I don't know if it
 > >> happens at run-time or compile-time, or which term it might be in.=
 
 > >> Replacing the first occurrence of "g" with "add1" yields code that=
 
 > >> compiles and runs quickly and without error.
 > >
 > > It's a runtime loop. =A0An easier way to see the problem is:
 > >
 > > =A0#lang scheme
 > > =A0(require scheme/package)
 > > =A0(define-package my-package #:all-defined
 > > =A0 =A0;; (define* (g x) (list 'gg x))
 > > =A0 =A0(define* (f x) (list 'f (g x)))
 > > =A0 =A0(define* (g x) (list 'g x)))
 > > =A0(open-package my-package)
 > > =A0(f 1)
 > >
 > > Uncommenting the first definition of `g' makes it do the right thin=
 g
 > > again.
 >=20
 > I'm not sure how this clarifies that it is a runtime loop.  The
 > commented-out line is going to affect both expansion and execution,
 > isn't it=3F
 
 If you run the above code you get a bad result instead of an error.
 The bad result is that `f' was able to see `g', and this was the
 source of the infinite loop in your code.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                   http://www.barzilay.org/                 Maze is Life=
 !
From: Matthew Flatt <mflatt@cs.utah.edu>
To: cce@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10220: Infinite loop when using scheme/package
Date: Tue, 28 Apr 2009 15:40:19 -0600

 At Tue, 28 Apr 2009 16:36:01 -0400, cce@ccs.neu.edu wrote:
 > #lang scheme
 > 
 > (require scheme/package)
 > 
 > (define-package my-package #:all-defined
 >   
 >   (define* (f x) (g (add1 x)))
 >   
 >   (define* (g x) (f (f x)))
 >   
 >   )
 > 
 > (open-package my-package)
 > 
 > (f 1)
 > (g 1)
 
 This is supposed to be an infinite loop.
 
 The `define-package' form is not like `module'; bindings available in
 the environment of `define-package' are visible in the body of
 `define-package'. In this case, the `open-package' form exposes the
 binding of `g' so that it's visible in the body of `f'.
 
 Unfortunately, Check Syntax can't make this clear. It just draws an
 arrow from the definition of `g' to its use, even though the
 `open-package' is the part that made the binding visible. (Then again,
 Check Syntax completes, which shows that it's a run-time loop.)
 
From: Carl Eastlund <cce@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10220: Infinite loop when using scheme/package
Date: Tue, 28 Apr 2009 17:43:11 -0400

 On Tue, Apr 28, 2009 at 5:40 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Tue, 28 Apr 2009 16:36:01 -0400, cce@ccs.neu.edu wrote:
 >> #lang scheme
 >>
 >> (require scheme/package)
 >>
 >> (define-package my-package #:all-defined
 >>
 >> =A0 (define* (f x) (g (add1 x)))
 >>
 >> =A0 (define* (g x) (f (f x)))
 >>
 >> =A0 )
 >>
 >> (open-package my-package)
 >>
 >> (f 1)
 >> (g 1)
 >
 > This is supposed to be an infinite loop.
 >
 > The `define-package' form is not like `module'; bindings available in
 > the environment of `define-package' are visible in the body of
 > `define-package'. In this case, the `open-package' form exposes the
 > binding of `g' so that it's visible in the body of `f'.
 >
 > Unfortunately, Check Syntax can't make this clear. It just draws an
 > arrow from the definition of `g' to its use, even though the
 > `open-package' is the part that made the binding visible. (Then again,
 > Check Syntax completes, which shows that it's a run-time loop.)
 
 Oh, of course.  Thanks, Matthew and Eli.  I fixed it by putting the
 open-package and function calls in a (let () ...).
 
 --=20
 Carl Eastlund

Class changed from "sw-bug" to "not-a-bug" by cce at Tue, 28 Apr 2009 17:45:13 -0400
Reason>>> Eli and Matthew pointed out my error.

Responsible changed from "nobody" to "cce" by cce at Tue, 28 Apr 2009 17:45:13 -0400
Reason>>> My mistake!

State changed from "open" to "closed" by cce at Tue, 28 Apr 2009 17:45:13 -0400
Reason>>> Wasn't a bug to begin with.

From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: cce@ccs.neu.edu, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10220: Infinite loop when using scheme/package
Date: Tue, 28 Apr 2009 18:47:03 -0400

 On Apr 28, Matthew Flatt wrote:
 > At Tue, 28 Apr 2009 16:36:01 -0400, cce@ccs.neu.edu wrote:
 > > #lang scheme
 > > 
 > > (require scheme/package)
 > > 
 > > (define-package my-package #:all-defined
 > >   
 > >   (define* (f x) (g (add1 x)))
 > >   
 > >   (define* (g x) (f (f x)))
 > >   
 > >   )
 > > 
 > > (open-package my-package)
 > > 
 > > (f 1)
 > > (g 1)
 > 
 > This is supposed to be an infinite loop.
 > 
 > The `define-package' form is not like `module'; bindings available
 > in the environment of `define-package' are visible in the body of
 > `define-package'. In this case, the `open-package' form exposes the
 > binding of `g' so that it's visible in the body of `f'.
 
 Ah, I completely forgot about that part -- IIRC, `f' doesn't see the
 following `g' definition, but it does see global bindings, so
 `open-package' is what makes it recursive...  Showing this in the docs
 is probably a good idea -- should I add something?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

