From steck@ccs.neu.edu  Thu Mar 21 16:42:11 2002
Received: from localhost (localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id QAA19281
	for <plt-gnats>; Thu, 21 Mar 2002 16:42:11 -0500
Message-Id: <200203212142.QAA19281@champlain.ccs.neu.edu>
Date: Thu, 21 Mar 2002 16:42:11 -0500
From: Paul Steckler <steck@ccs.neu.edu>
To: bugs@plt-scheme.org
Subject: Spurious exn/crash

>Number:         5325
>Category:       misc
>Synopsis:       Spurious exn/crash
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    steck
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Thu Mar 21 16:50:00 EST 2002
>Closed-Date:    Sun Apr 21 19:31:32 EDT 2002
>Last-Modified:  Sun Apr 21 19:31:32 EDT 2002
>Originator:     Paul Steckler
>Release:        200alpha14
>Organization:
titan
>Environment:
unix "SunOS sulafat.ccs.neu.edu 5.8 Generic_108528-12 sun4u sparc SUNW,Sun-Blade-100" (sparc-solaris) (get-display-depth) = 24
Docs Installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "icons" "framework" "help" "teachpack" "r5rs" "insidemz" "misclib" "mred" "intermediate" "mzlib" "mrspidey" "mzc" "mzscheme" "t-y-scheme" "tools" "intermediate-lambda" "recipes" "tex2page" "4726file")
Collections: 
(("/proj/scheme/plt/collects" ("CVS" "browser" "compiler" "debug" "defaults" "drjava" "drscheme" "dynext" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "readline" "setup" "slatex" "srpersist" "stepper" "string-constants" "syntax" "tests" "texpict" "parser-tools" "xml" "doc" "mrflow" "sirmail" "slibinit" "afm" "version" "typeset" "eopl" "web-server" "algol60" "cvs-time-stamp" "waterworld" "tex2page")))
Human Language: english
>Description:
In SrPersist, wrapping a with-handlers around an ODBC API call
shows an exception (sometimes) and crashes (other times).

If we have the call

  (extended-fetch hstmt)

all goes fine - no exception.

If we have

  (with-handlers 
    ([void (lamda (exn) (printf "exn: ~a~n" exn))])
    (extended-fetch hstmt))

we see an exception, exn:application:type.  But the SrPersist
code doesn't appear to be generating the exception.

With different handlers installed (SrPersist predicates), we
get a crash.  According to Francisco Solsona, gdb shows

#0  0x8068554 in scheme_check_proc_arity (where=0x80bda66 "current-exception-handler", a=1, which=0, argc=1, argv=0x81a0eec) at ./fun.c:1378

1378      if (!SCHEME_PROCP(p) || SCHEME_FALSEP(get_or_check_arity(p, a))) {

So it appears that wrapping the code inside a handler causes
the exception/crash.  If the SrPersist code were causing the
exception, wouldn't the default exception handler show it?

This phenomenon happens in both Dr and Mz.

>How-To-Repeat:
as above
>Fix:

>Release-Note:

>Audit-Trail:

From: "Paul Steckler" <steck@ccs.neu.edu>
To: "'Paul Steckler'" <steck@ccs.neu.edu>, <bugs@plt-scheme.org>
Cc:  
Subject: RE: all/5325: Spurious exn/crash
Date: Thu, 21 Mar 2002 16:51:49 -0500

 > So it appears that wrapping the code inside a handler causes
 > the exception/crash.  If the SrPersist code were causing the
 > exception, wouldn't the default exception handler show it?
 
 My current guess is that this is a SrPersist bug.  Using `fetch' instead
 of `extended-fetch' makes the problem disappear.  More debugging needed
 ...
 
 -- Paul
 
 

From: "Paul Steckler" <steck@ccs.neu.edu>
To: <steck@ccs.neu.edu>, <bugs@plt-scheme.org>
Cc: "'Matthew Flatt'" <mflatt@cs.utah.edu>
Subject: RE: all/5325: Spurious exn/crash
Date: Fri, 22 Mar 2002 13:21:29 -0500

 I found the bug, which was, indeed, in SrPersist.
 
 But perhaps it could have been found earlier.  SrPersist was passing 0
 as a size to scheme_malloc().  Matthew, is it possible to have
 scheme_malloc() raise an exception when the size is 0?  Is it ever
 legitimate to pass 0 and expect a sensible return value?
 
 -- Paul
 
 > -----Original Message-----
 > From: Paul Steckler [mailto:steck@ccs.neu.edu]
 > Sent: Thursday, March 21, 2002 4:52 PM
 > To: 'Paul Steckler'; bugs@plt-scheme.org
 > Subject: RE: all/5325: Spurious exn/crash
 > 
 > > So it appears that wrapping the code inside a handler causes
 > > the exception/crash.  If the SrPersist code were causing the
 > > exception, wouldn't the default exception handler show it?
 > 
 > My current guess is that this is a SrPersist bug.  Using `fetch'
 > instead
 > of `extended-fetch' makes the problem disappear.  More debugging
 > needed
 > ...
 > 
 > -- Paul
 
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: <steck@ccs.neu.edu>
Cc: <bugs@plt-scheme.org>
Subject: RE: all/5325: Spurious exn/crash
Date: Fri, 22 Mar 2002 12:01:58 -0700 (MST)

 At Fri, 22 Mar 2002 13:21:29 -0500, "Paul Steckler" wrote:
 > But perhaps it could have been found earlier.  SrPersist was passing 0
 > as a size to scheme_malloc().  Matthew, is it possible to have
 > scheme_malloc() raise an exception when the size is 0?  Is it ever
 > legitimate to pass 0 and expect a sensible return value?
 
 MzScheme sometimes calls scheme_malloc() with size 0. Those calls could
 be eliminated by inserting a suitable check at many call sites, but it
 seems nicer to me to allow 0-byte requests.
 
 Matthew
 
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Sun Apr 21 19:31:32 2002
State-Changed-Why:
    Paul sorted it out.
>Unformatted:

