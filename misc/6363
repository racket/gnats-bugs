From kevmc@ida.liu.se  Sun Jul 13 06:29:01 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id GAA23507
	for <bugs>; Sun, 13 Jul 2003 06:28:59 -0400
Message-Id: <200307131028.GAA23507@champlain.ccs.neu.edu>
Date: Sun, 13 Jul 2003 06:28:59 -0400
From: Kevin McGee <kevmc@ida.liu.se>
To: bugs@plt-scheme.org
Subject: substitution evaluation vs. optimization

>Number:         6363
>Category:       misc
>Synopsis:       substitution evaluation vs. optimization
>Class:          sw-bug
>Responsible:    eli
>Severity:       non-critical
>Priority:       low
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jul 13 06:30:00 -0400 2003
>Closed-Date:    Sun Jul 13 10:56:35 -0400 2003
>Last-Modified:  Mon May 05 17:12:13 -0400 2008
>Originator:     Kevin McGee
>Organization:
titan
>Submitter-Id:   unknown
>Release:        204
>Environment:
windows "Windows NT 5.0 (Build 2195) Service Pack 4" (win32\i386) (get-display-depth) = 32
Docs Installed:
("help" "mzscheme" "mzlib" "mzc" "r5rs" "icons" "drscheme" "teachpack" "misclib" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "framework" "mred" "tex2page" "tools" "tour" "t-y-scheme")
Collections: 
(("C:\\PROGRA~1\\plt\\./collects/setup/..\\..\\collects\\mzlib\\..\\..\\collects" ("browser" "compiler" "defaults" "drscheme" "dynext" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mzlib" "mzscheme" "net" "setup" "stepper" "string-constants" "syntax" "parser-tools" "xml" "slibinit" "afm" "version" "eopl" "web-server" "tex2page" "mrlib" "test-suite" "srfi" "doc")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") #6(#t constructor repeating-decimal #f #t none))
>Description:
I'm not sure, but I think Dr. Scheme is doing some optimization that makes it difficult to demonstrate the "substitution model" of evaluation to students.
In the examples below, the first call involves a noticable delay.
But the second call is very fast -- which shouldn't be the case if Scheme is doing eager evaluation.
Note: if we do the second call inside the Stepper, it *does* take a while.
If I am correct, it would seem to me that it would be less confusing for students if the second call actually performed by using eager evaluation (and not just in the Stepper environment).
I have tried to have the second call perform as an eager evaluation in different "language modes", but no luck.

Apropos: it would be nice if the Stepper window had a "BREAK" button.

cheers,

kevin
>How-To-Repeat:
; Call 01:
=> (expt 1000 10000)

; Call 02:
=> (* (expt 1000 10000) 0)
>Fix:
>Release-Note:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: Kevin McGee <kevmc@ida.liu.se>
Cc: bugs@plt-scheme.org
Subject: Re: all/6363: substitution evaluation vs. optimization
Date: Sun, 13 Jul 2003 06:53:56 -0500

 The slowdown you are seeing has nothing to do with the model of
 evaluation that drscheme uses. Instead, it is in the printing of the
 value that takes a long time. DrScheme's printer is slow.
 
 Robby
State-Changed-From-To: open->closed
State-Changed-By: matthias
State-Changed-When: Sun Jul 13 10:56:35 2003
State-Changed-Why:
    It is not the evaluation that takes time but the printing of the (large)
    result. In the first case, you have to print N digits, which means you 
    have to insert them into a GUI buffer, etc. In the second case, you're
    printing one digit. 
    
    To confirm this answer, test the same expression evaluations
    in mzscheme, the text based version of PLT Scheme. It uses a
    plain console and prints chars directly rather than inserting them
    in a GUI buffer. 
    
    Finally, the stepper is guaranteed to terminate on students' code. So
    a break button doesn't truly make sense. You could at most interrupt
    a single step. 

From: Robby Findler <robby@cs.uchicago.edu>
To: matthias@ccs.neu.edu
Cc: clements@ccs.neu.edu, bugs@plt-scheme.org, mflatt@cs.utah.edu
Subject: Re: all/6363
Date: Sun, 13 Jul 2003 10:11:29 -0500

 FWIW, it makes some sense in the presence of teachpacks (which are
 treated like a single step) or other unannotated code (read, etc).
 
 I doesn't seem very high on the list of things to do, however, when
 compared to intermediate and advanced stepping.
 
 Robby
 
 At Sun, 13 Jul 2003 10:56:35 -0400, matthias@ccs.neu.edu wrote:
 > Synopsis: substitution evaluation vs. optimization
 > 
 > State-Changed-From-To: open->closed
 > State-Changed-By: matthias
 > State-Changed-When: Sun Jul 13 10:56:35 2003
 > State-Changed-Why:
 >     It is not the evaluation that takes time but the printing of the (large)
 >     result. In the first case, you have to print N digits, which means you 
 >     have to insert them into a GUI buffer, etc. In the second case, you're
 >     printing one digit. 
 >     
 >     To confirm this answer, test the same expression evaluations
 >     in mzscheme, the text based version of PLT Scheme. It uses a
 >     plain console and prints chars directly rather than inserting them
 >     in a GUI buffer. 
 >     
 >     Finally, the stepper is guaranteed to terminate on students' code. So
 >     a break button doesn't truly make sense. You could at most interrupt
 >     a single step. 
 > 
 > http://bugs.plt-scheme.org/cgi-bin/gnats-query?pr-number=6363&query-type=pr-number
 > 
 

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: clements@ccs.neu.edu, bugs@plt-scheme.org, mflatt@cs.utah.edu
Subject: Re: all/6363
Date: Sun, 13 Jul 2003 11:14:42 -0400

 That's why I wrote "students' code" -- I am keenly aware of my shortcomings
 (I wrote most of these tp's) but they aren't important compared to other goals
 :-) -- Matthias
 
 
 
 At Sun, 13 Jul 2003 10:11:29 -0500, Robby Findler wrote:
 > FWIW, it makes some sense in the presence of teachpacks (which are
 > treated like a single step) or other unannotated code (read, etc).
 > 
 > I doesn't seem very high on the list of things to do, however, when
 > compared to intermediate and advanced stepping.
 > 
 > Robby
 > 
 > At Sun, 13 Jul 2003 10:56:35 -0400, matthias@ccs.neu.edu wrote:
 > > Synopsis: substitution evaluation vs. optimization
 > > 
 > > State-Changed-From-To: open->closed
 > > State-Changed-By: matthias
 > > State-Changed-When: Sun Jul 13 10:56:35 2003
 > > State-Changed-Why:
 > >     It is not the evaluation that takes time but the printing of the (large)
 > >     result. In the first case, you have to print N digits, which means you 
 > >     have to insert them into a GUI buffer, etc. In the second case, you're
 > >     printing one digit. 
 > >     
 > >     To confirm this answer, test the same expression evaluations
 > >     in mzscheme, the text based version of PLT Scheme. It uses a
 > >     plain console and prints chars directly rather than inserting them
 > >     in a GUI buffer. 
 > >     
 > >     Finally, the stepper is guaranteed to terminate on students' code. So
 > >     a break button doesn't truly make sense. You could at most interrupt
 > >     a single step. 
 > > 
 > > http://bugs.plt-scheme.org/cgi-bin/gnats-query?pr-number=6363&query-type=pr-number
 > > 
 

From: Kevin McGee <kevmc@ida.liu.se>
To: Robby Findler  <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6363: substitution evaluation vs. optimization
Date: Sun, 13 Jul 2003 21:00:22 +0200

 > -----Original Message-----
 > From: Robby Findler [mailto:robby@cs.uchicago.edu]
 > 
 > The slowdown you are seeing has nothing to do with the model of
 > evaluation that drscheme uses. Instead, it is in the printing of the
 > value that takes a long time. DrScheme's printer is slow.
 
 Thanks for the clarification that the delay is in the printer.
 
 > -----Original Message-----
 > From: matthias@ccs.neu.edu [mailto:matthias@ccs.neu.edu]
 >   
 >     Finally, the stepper is guaranteed to terminate on students' code.
 So
 >     a break button doesn't truly make sense. You could at most interrupt
 >     a single step. 
 
 Perhaps I didn't express the motivation for a "BREAK" button on the
 Stepper window very clearly.
 
 We would like to encourage students to experiment with writing different
 kinds of procedures; having a "Break" button lets them know they can
 escape from some of their experiments that take too long.
 
 Outside the Stepper, it is currently possible to break out of waiting for
 the following call to print:
 
 (expt 10000 100000)
 
 But there does not seem to be any way to unlock Dr. Scheme (before the
 value is printed) if this same call is tried in the Stepper. This can mean
 minutes of waiting ...
 
 Anyway, I didn't mean to clog this list with feature requests. And by the
 way, I agree completely with the comment that all of this seems like a low
 priority compared to having a Stepper that works for the more advanced
 language levels.
 
 You are all doing amazing work on the Dr. Scheme environment. Thanks!
 
 kevin
>Unformatted:
