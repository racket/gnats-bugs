From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Sep 21 17:52:34 2010
Received: from mail-yx0-f172.google.com (mail-yx0-f172.google.com [209.85.213.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o8LLqWXl031484
	for <bugs@bugs.plt-scheme.org>; Tue, 21 Sep 2010 17:52:32 -0400
Message-Id: <201009212152.o8LLqUrf031477@champlain.ccs.neu.edu>
Date: Tue, 21 Sep 2010 17:52:30 -0400
From: ryanc@racket-lang.org
To: bugs@racket-lang.org
Subject: contracts de-struct applicable structs

>Number:         11238
>Category:       misc
>Synopsis:       contracts de-struct applicable structs
>Class:          duplicate
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Sep 21 17:56:01 -0400 2010
>Closed-Date:    Thu Sep 23 06:38:58 -0400 2010
>Last-Modified:  Thu Sep 23 06:38:58 -0400 2010
>Originator:     Ryan Culpepper
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1.6
>Environment:
Linux i686 / Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.9) Gecko/20100825 Ubuntu/10.04 (lucid) Firefox/3.6.9
>Description:
Applying a flat contract to an applicable struct (prop:procedure) results in a value that 
 - is no longer recognized by the struct predicate
 - has no applicable clauses
 - is not eq? to the un-contracted instance (why wrap on flat contract?)

Also, procedure-arity seems to be broken for applicable structs with certain arities (regardles of contracts).
>How-To-Repeat:
> (module a racket
    (struct s () #:property prop:procedure void)
    (provide s?)
    (define x (s))
    (provide/contract [rename x xc s?])
    (provide (rename-out [x xnc])))
> (require 'a)
> (s? xnc)
#t
> (s? xc)
#f
> (xnc 1 2 3 4 5)
> (xc 1 2 3 4 5)
struct s: no clause matching 5 arguments: 1 2 3 4 5

;; The arity problem:
> (procedure-arity xnc)
'()
> (procedure-arity xc)
'()
>Fix:
>Audit-Trail:
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: ryanc@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11238: contracts de-struct applicable structs
Date: Tue, 21 Sep 2010 18:00:34 -0400

 On Sep 21, 2010, at 5:56 PM, ryanc@racket-lang.org wrote:
 > Applying a flat contract to an applicable struct (prop:procedure) =
 results in a value that=20
 > - is no longer recognized by the struct predicate
 > - has no applicable clauses
 > - is not eq? to the un-contracted instance (why wrap on flat =
 contract?)
 
 This definitely shouldn't be happening; in fact, now flat contracts =
 _enforce_ that the value returned by the "projection" is the original =
 value.
 
 ... except I bet that this is related to Robby's recent changes in =
 forcing procedure-rename more often during execution of the `contract' =
 form (since we're dealing with applicable structs).  That would cause =
 the behavior you're seeing, since procedure-rename causes structures to =
 be wrapped with a new layer that would cause all the issues you've =
 mentioned.
 
 Stevie=
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: ryanc@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11238: contracts de-struct applicable structs
Date: Tue, 21 Sep 2010 18:19:10 -0500

 There are two prs on this subject too. 11221 and 11222.
 
 Robby
 
 On Tue, Sep 21, 2010 at 5:00 PM, Stevie Strickland <sstrickl@ccs.neu.edu> w=
 rote:
 > On Sep 21, 2010, at 5:56 PM, ryanc@racket-lang.org wrote:
 >> Applying a flat contract to an applicable struct (prop:procedure) result=
 s in a value that
 >> - is no longer recognized by the struct predicate
 >> - has no applicable clauses
 >> - is not eq? to the un-contracted instance (why wrap on flat contract?)
 >
 > This definitely shouldn't be happening; in fact, now flat contracts _enfo=
 rce_ that the value returned by the "projection" is the original value.
 >
 > ... except I bet that this is related to Robby's recent changes in forcin=
 g procedure-rename more often during execution of the `contract' form (sinc=
 e we're dealing with applicable structs). =C2=A0That would cause the behavi=
 or you're seeing, since procedure-rename causes structures to be wrapped wi=
 th a new layer that would cause all the issues you've mentioned.
 >
 > Stevie

Responsible changed from "nobody" to "robby" by ryanc at Thu, 23 Sep 2010 04:11:08 -0400
Reason>>> contracts


Class changed from "sw-bug" to "duplicate" by robby at Thu, 23 Sep 2010 06:38:58 -0400
Reason>>> as mentioned in audit trail

State changed from "open" to "closed" by robby at Thu, 23 Sep 2010 06:38:58 -0400
Reason>>> duplicate

