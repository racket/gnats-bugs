From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Oct 19 13:19:36 2007
Received: from ik-out-1112.google.com (ik-out-1112.google.com [66.249.90.176])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l9JHJZqi011415
	for <bugs@bugs.plt-scheme.org>; Fri, 19 Oct 2007 13:19:35 -0400
Message-Id: <200710191719.l9JHJUBN011410@champlain.ccs.neu.edu>
Date: Fri, 19 Oct 2007 13:19:30 -0400
From: chrdimo@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Create executable bug

>Number:         9010
>Category:       misc
>Synopsis:       Create executable bug
>Class:          sw-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Oct 19 13:20:01 -0400 2007
>Closed-Date:    Fri May 09 15:08:10 -0400 2008
>Last-Modified:  Fri May 09 15:08:10 -0400 2008
>Originator:     Christos Dimoulas
>Organization:
plt
>Submitter-Id:   unknown
>Release:        371
>Environment:
unix "Linux pandora 2.6.20-16-generic #2 SMP Sun Sep 23 19:50:39 UTC 2007 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Docs Installed:
(("/usr/share/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-intermediate-access" "profj-advanced"))
Human Language: english
(current-memory-use) 81765884

Collections:
(("/home/chrdimo/.plt-scheme/371/collects" non-existent-path) ("/usr/lib/plt/collects" "web-server" "mzlib" "algol60" "embedded-gui" "test-box-recovery" "mzscheme" "slideshow" "sgl" "mred" "lazy" "lang" "graphics" "slatex" "frtime" "make" "icons" "syntax-color" "eopl" "config" "openssl" "planet" "combinator-parser" "parser-tools" "swindle" "syntax" "profjWizard" "compiler" "afm" "dynext" "htdch" "srfi" "help" "string-constants" "mrlib" "trace" "mztake" "errortrace" "browser" "wxme" "readline" "tex2page" "html" "ffi" "teachpack" "net" "plot" "drscheme" "defaults" "games" "setup" "hierlist" "stepper" "r5rs" "xml" "info-domain" "htdp" "launcher" "profj" "framework" "macro-debugger" "texpict" "preprocessor" "version"))
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
I am writing a small program in the Advanced Student Language with the world teachpack. 

I am using Dr Scheme v.371 on Ubuntu Feisty.

I tried to create an executable for my code
using the Create Executable... option from 
the Scheme menu and I get the following message.   


split-path: expects argument of type <path (for any platform) or string>; given #<struct:object:text%>

 === context ===
/usr/lib/plt/collects/mred/private/snipfile.ss:217:19
/usr/lib/plt/collects/compiler/embed-unit.ss:346:4: get-code
/usr/lib/plt/collects/compiler/embed-unit.ss:575:4: write-module-bundle

The actual code follows:


;; the World is a Posn of Posns 
;; interpretation: (where is the cross-hair?, where is the duck?)

;; --- defining constructors and selectors for the World to simulate struct --- 

(define (make-world x duck) (make-posn x duck))
(define (world-x w)  (posn-x w))
(define (world-duck w) (posn-y w))
(define (set-world-duck! w d) (set-posn-y w d))
(define (set-world-x! w d) (set-posn-x w d))

;; --- these are destructive update routines (Christo) ---

(define (set-posn-x p x) ((lambda (r) p) (set-posn-x! p x)))
(define (set-posn-y p y) ((lambda (r) p) (set-posn-y! p y)))
(define (set-world-duck w d) (set-world-duck! w d))
(define (set-world-x w d) (set-world-x! w d))

;; --- basic parameters --- 

(define WIDTH 600)
(define HEIGHT 600)
(define DELTA-X 1)
(define DELTA-Y 1)


;; Scene 
(define BACKGROUND 
  (place-image (nw:rectangle WIDTH HEIGHT 'solid 'brown) 
               0 0
               (empty-scene WIDTH HEIGHT)))

;; Image
(define CROSS-HAIR
  (overlay (put-pinhole (rectangle 1 10 'solid 'black) 1 20)
           (put-pinhole (rectangle 1 10 'solid 'black) 1 -10)
           (put-pinhole (rectangle 10 1 'solid 'black) 20 1)
           (put-pinhole (rectangle 10 1 'solid 'black) -10 1)
           (circle 20 'outline 'red)))

(define DUCK (overlay . (circle 10 'solid 'blue)))


;; --- the world event handlers --- 

;; World -> World  
(define (world-move w) 
  (local ((define d (world-duck w)))
    ((lambda (r) (time (cond
      [(wall-close? (duck->posn d)) (end-of-time "the duck escaped")]
      [else (set-world-duck w (duck-move d))]))) 
     (printf "tick-event:\n"))))

;; World -> Image 
(define (world-image w)
  (cross+image (world-x w) (duck+image (world-duck w) BACKGROUND)))


;; World Nat Nat MouseEvent -> World  
(define (world-change w x y me)
  (local ((define p (make-posn x y)))
    ((lambda (r) (time (cond
      [(symbol=? me 'move) (set-world-x w p)]
      [(symbol=? me 'button-down) 
       (if (close? (duck->posn (world-duck w)) (x->posn p))
           (end-of-time "enjoy dinner")
           (set-world-x w p))]
      [else w])))
     (printf "mouse-event:\n"))))

;; --- auxiliaries ---

;; Image -> (World Scene -> Scene)
(define (+image img)
  (lambda (w s)
    (place-image img (posn-x w) (posn-y w) s)))

;; Y -> Y
(define (id x) x)

;; --- dealing with the cross hair --- 

;; X = Posn 

;; X -> Posn 
(define x->posn id)

;; X Scene -> Scene
(define cross+image (+image CROSS-HAIR))

;; --- dealing with ducks --- 

;; Duck = Posn 

;; Duck -> Posn 
(define duck->posn id)

;; Duck -> Duck
(define (duck-move d)
 (set-posn-y (set-posn-x d (+ (posn-x d) DELTA-X)) 
       (- (posn-y d) DELTA-Y))) 

;; Duck Scene -> Scene 
(define duck+image (+image DUCK))

;; --- dealing with geometry --- 

;; Posn Posn -> Boolean 
(define (close? s t)
  (local ((define EPSILON 10)
          (define sx (posn-x s))
          (define sy (posn-y s))
          (define tx (posn-x t))
          (define ty (posn-y t)))
    (<= (sqrt (+ (sqr (- sx tx)) (sqr (- sy ty)))) EPSILON)))

;; Posn -> Boolean 
(define (wall-close? p)
  (local ((define EPSILON 10)
          (define x (posn-x p))
          (define y (posn-y p)))
    (or (<= (- WIDTH EPSILON) x)
        (<= y EPSILON))))

;; --- run program run --

(define world0 (make-world (make-posn (/ WIDTH 2) (/ HEIGHT 2))
                           (make-posn 10 #;(random WIDTH) (- HEIGHT 10) #; (random HEIGHT))))

(big-bang WIDTH HEIGHT (/ 1 30) world0)

(on-redraw world-image)
(on-tick-event world-move)
(on-mouse-event world-change)
>How-To-Repeat:
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "eli" by eli at Fri, 09 May 2008 15:08:10 -0400
Reason>>> .

State changed from "open" to "closed" by eli at Fri, 09 May 2008 15:08:10 -0400
Reason>>> I think that the executable packaging was fixed in v4, so
I'm closing this.  Please reply if it's still a problem.
(v4 will be released soon.)

