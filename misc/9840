From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Oct 16 14:32:51 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.239])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m9GIWfDY024830
	for <bugs@bugs.plt-scheme.org>; Thu, 16 Oct 2008 14:32:41 -0400
Message-Id: <200810161832.m9GIWaaG024824@champlain.ccs.neu.edu>
Date: Thu, 16 Oct 2008 14:32:36 -0400
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: regexp match contracts misdocumented

>Number:         9840
>Category:       misc
>Synopsis:       regexp match contracts misdocumented
>Class:          doc-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Oct 16 14:36:01 -0400 2008
>Closed-Date:    Tue Feb 09 11:13:42 -0500 2010
>Last-Modified:  Tue Feb 09 11:16:01 -0500 2010
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.1.3-svn16oct2008
>Environment:
macosx "Darwin Kauai.ccs.neu.edu 9.4.0 Darwin Kernel Version 9.4.0: Mon Jun  9 19:36:17 PDT 2008; root:xnu-1228.5.20~1/RELEASE_PPC Power Macintosh" (ppc-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 364043472

Collections:
(("/Users/cce/Library/PLT Scheme/4.1.1.3/collects" non-existent-path) ("/Users/cce/plt/trunk/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Dracula" "Dracula ACL") #(#t write mixed-fraction-e #f #t debug))
>Description:
The documented result contracts for regexp matching functions contain cons where they mean cons/c, or in some cases where cons/c should have been removed during a copy/paste (presumably).  Also, some patterns contain (listof (or/c string? bytes?)) where (or/c (listof string?) (listof bytes?)) would be more precise.  The relevant functions are:

regexp-match
regexp-match*
regexp-try-match
regexp-match-positions
regexp-match-positions*
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: cce@ccs.neu.edu, bugs@plt-scheme.org
Cc: matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9840: regexp match contracts misdocumented
Date: Fri, 17 Oct 2008 10:56:53 -0400

 On Oct 16, cce@ccs.neu.edu wrote:
 > The documented result contracts for regexp matching functions
 > contain cons where they mean cons/c, or in some cases where cons/c
 > should have been removed during a copy/paste (presumably).  Also,
 > some patterns contain (listof (or/c string? bytes?)) where (or/c
 > (listof string?) (listof bytes?)) would be more precise.  The
 > relevant functions are:
 > 
 > regexp-match
 > regexp-match*
 > regexp-try-match
 > regexp-match-positions
 > regexp-match-positions*
 
 There were several others.  I fixed all the obvious things, but I
 didn't fix the (listof (or/c string? bytes?)) -- a proper fix for that
 means duplicating the whole definition form once for bytes and once
 for strings.  I didn't do that since I'm not sure that it follows
 Matthew's style.  Another result of this is two places that use
 
                        (or/c (or/c string? bytes?)
                              #f)
 
 Where the nesting is not really needed but helps clarify things a
 little.
 
 Matthew -- should I do the full fix?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: cce@ccs.neu.edu, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9840: regexp match contracts misdocumented
Date: Sun, 19 Oct 2008 06:15:31 -0500

 At Fri, 17 Oct 2008 10:56:53 -0400, Eli Barzilay wrote:
 > On Oct 16, cce@ccs.neu.edu wrote:
 > > The documented result contracts for regexp matching functions
 > > contain cons where they mean cons/c, or in some cases where cons/c
 > > should have been removed during a copy/paste (presumably).  Also,
 > > some patterns contain (listof (or/c string? bytes?)) where (or/c
 > > (listof string?) (listof bytes?)) would be more precise.  The
 > > relevant functions are:
 > > 
 > > regexp-match
 > > regexp-match*
 > > regexp-try-match
 > > regexp-match-positions
 > > regexp-match-positions*
 > 
 > There were several others.  I fixed all the obvious things, but I
 > didn't fix the (listof (or/c string? bytes?)) -- a proper fix for that
 > means duplicating the whole definition form once for bytes and once
 > for strings.  I didn't do that since I'm not sure that it follows
 > Matthew's style.  Another result of this is two places that use
 > 
 >                        (or/c (or/c string? bytes?)
 >                              #f)
 > 
 > Where the nesting is not really needed but helps clarify things a
 > little.
 > 
 > Matthew -- should I do the full fix?
 
 It's certainly worth refining the result contract to show that all the
 list elements will be either bytes or strings, and I've done that.
 
 I don't think it's worth refining the contract to try to correlate the
 result details with the input details. That would be messy and worse as
 documentation, since lots of different combinations lead to byte-string
 results.
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9840: regexp match contracts misdocumented
Date: Sun, 19 Oct 2008 22:30:32 -0400

 On Oct 19, Matthew Flatt wrote:
 > 
 > I don't think it's worth refining the contract to try to correlate the
 > result details with the input details. That would be messy and worse as
 > documentation, since lots of different combinations lead to byte-string
 > results.
 
 There is some point in doing that to make it clearer when bytes come
 out (something that I keep stumbling on is the fact that you get bytes
 from matching on a port), but I didn't know the messy vs informative
 threshold you'd want...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Eli Barzilay <eli@barzilay.org>, cce@ccs.neu.edu, bugs@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9840: regexp match contracts misdocumented
Date: Sun, 19 Oct 2008 23:31:34 -0400

 On Oct 19, 2008, at 7:15 AM, Matthew Flatt wrote:
 
 > That would be messy and worse as
 > documentation, since lots of different combinations lead to byte- 
 > string
 > results.
 
 
 It could be interesting for contract checking and static analysis.  
 Indeed, it could be a neat exercise to express the Philippe-Dave  
 paper in terms of such contracts and to figure out whether Real  
 Partial Evaluation would get us these results. (The PLT compiler  
 v17.2 should benefit from that, being a pure whole program compiler w/ 
 o respect for any of these 2008-ish REPL stuff.)
 
 -- Matthias
 
 P.S. Agreed: If we come up with a good contract, it could serve as  
 supplementary documentation but not as primary.
 
From: "Robby Findler" <robby@plt-scheme.org>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, "Eli Barzilay" <eli@barzilay.org>,
        cce@ccs.neu.edu, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9840: regexp match contracts misdocumented
Date: Mon, 20 Oct 2008 00:29:35 -0500

 I believe that this function is one of about two examples that Casey
 and I found where you want an or contract ouside a pair of function
 contracts, so I'm interested too.
 
 Robby
 
 On Sun, Oct 19, 2008 at 10:31 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Oct 19, 2008, at 7:15 AM, Matthew Flatt wrote:
 >
 >> That would be messy and worse as
 >> documentation, since lots of different combinations lead to byte-string
 >> results.
 >
 >
 > It could be interesting for contract checking and static analysis. Indeed,
 > it could be a neat exercise to express the Philippe-Dave paper in terms of
 > such contracts and to figure out whether Real Partial Evaluation would get
 > us these results. (The PLT compiler v17.2 should benefit from that, being a
 > pure whole program compiler w/o respect for any of these 2008-ish REPL
 > stuff.)
 >
 > -- Matthias
 >
 > P.S. Agreed: If we come up with a good contract, it could serve as
 > supplementary documentation but not as primary.
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Matthew Flatt" <mflatt@cs.utah.edu>, cce@ccs.neu.edu,
        bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9840: regexp match contracts misdocumented
Date: Mon, 20 Oct 2008 02:34:44 -0400

 A possibly stupid question: isn't this a case for a dependent
 contract?  Something simple that specifies the result based on the
 input types?
 
 
 On Oct 20, Robby Findler wrote:
 > I believe that this function is one of about two examples that Casey
 > and I found where you want an or contract ouside a pair of function
 > contracts, so I'm interested too.
 > 
 > Robby
 > 
 > On Sun, Oct 19, 2008 at 10:31 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 > >
 > > On Oct 19, 2008, at 7:15 AM, Matthew Flatt wrote:
 > >
 > >> That would be messy and worse as
 > >> documentation, since lots of different combinations lead to byte-string
 > >> results.
 > >
 > >
 > > It could be interesting for contract checking and static analysis. Indeed,
 > > it could be a neat exercise to express the Philippe-Dave paper in terms of
 > > such contracts and to figure out whether Real Partial Evaluation would get
 > > us these results. (The PLT compiler v17.2 should benefit from that, being a
 > > pure whole program compiler w/o respect for any of these 2008-ish REPL
 > > stuff.)
 > >
 > > -- Matthias
 > >
 > > P.S. Agreed: If we come up with a good contract, it could serve as
 > > supplementary documentation but not as primary.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@plt-scheme.org>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Matthew Flatt" <mflatt@cs.utah.edu>, cce@ccs.neu.edu,
        bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9840: regexp match contracts misdocumented
Date: Mon, 20 Oct 2008 06:50:21 -0500

 Yes, that works too (one of the reasons why we didn't end up pursuing
 or/c very vigorously ...)
 
 Robby
 
 On Mon, Oct 20, 2008 at 1:34 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > A possibly stupid question: isn't this a case for a dependent
 > contract?  Something simple that specifies the result based on the
 > input types?
 >
 >
 > On Oct 20, Robby Findler wrote:
 >> I believe that this function is one of about two examples that Casey
 >> and I found where you want an or contract ouside a pair of function
 >> contracts, so I'm interested too.
 >>
 >> Robby
 >>
 >> On Sun, Oct 19, 2008 at 10:31 PM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >> >
 >> > On Oct 19, 2008, at 7:15 AM, Matthew Flatt wrote:
 >> >
 >> >> That would be messy and worse as
 >> >> documentation, since lots of different combinations lead to byte-string
 >> >> results.
 >> >
 >> >
 >> > It could be interesting for contract checking and static analysis. Indeed,
 >> > it could be a neat exercise to express the Philippe-Dave paper in terms of
 >> > such contracts and to figure out whether Real Partial Evaluation would get
 >> > us these results. (The PLT compiler v17.2 should benefit from that, being a
 >> > pure whole program compiler w/o respect for any of these 2008-ish REPL
 >> > stuff.)
 >> >
 >> > -- Matthias
 >> >
 >> > P.S. Agreed: If we come up with a good contract, it could serve as
 >> > supplementary documentation but not as primary.
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life!
 >

Responsible changed from "nobody" to "robby" by eli at Sat, 06 Feb 2010 00:20:50 -0500
Reason>>> in case there's something left, otherwise, to be closed.

From: Robby Findler <robby@eecs.northwestern.edu>
To: bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, cce@ccs.neu.edu,
        Matthew Flatt <mflatt@cs.utah.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] misc/9840 regexp match contracts misdocumented
Date: Sat, 6 Feb 2010 07:33:07 -0600

 My understanding from reading the transcript of the email on this pr
 is that the proper contract for this should be using something that
 shows 'regexp-match' twice, once with bytes and once with strings. But
 the docs don't currently do that.
 
 Shall I change the docs?
 
 Robby
 
 On Fri, Feb 5, 2010 at 11:20 PM,  <eli@plt-scheme.org> wrote:
 >
 > Responsible changed from "nobody" to "robby" by eli at Sat, 06 Feb 2010 0=
 0:20:50 -0500
 > Reason>>> in case there's something left, otherwise, to be closed.
 >
 >
 > View:
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D9840
 >
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        cce@ccs.neu.edu, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] misc/9840 regexp match contracts misdocumented
Date: Sat, 6 Feb 2010 06:44:20 -0700

 At Sat, 6 Feb 2010 07:33:07 -0600, Robby Findler wrote:
 > My understanding from reading the transcript of the email on this pr
 > is that the proper contract for this should be using something that
 > shows 'regexp-match' twice, once with bytes and once with strings. But
 > the docs don't currently do that.
 > 
 > Shall I change the docs?
 
 I remain in favor of the less precise but more readable version.
 
 Alternately, I think it would be reasonable to use an `if' with
 `pattern' and `input' in the result contract.
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, cce@ccs.neu.edu,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] misc/9840 regexp match contracts misdocumented
Date: Sat, 6 Feb 2010 09:46:25 -0600

 On Saturday, February 6, 2010, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > I remain in favor of the less precise but more readable version.
 
 Maybe I just don't understand how unreadable the unreadable one is.
 I'm not advocating explicating the connection between the regexp and
 the length of the list but just clarifying if you get bytes back or
 strings back. Are we talking about the same thing?
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, cce@ccs.neu.edu,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] misc/9840 regexp match contracts misdocumented
Date: Sat, 6 Feb 2010 09:34:21 -0700

 At Sat, 6 Feb 2010 09:46:25 -0600, Robby Findler wrote:
 > On Saturday, February 6, 2010, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > I remain in favor of the less precise but more readable version.
 > 
 > Maybe I just don't understand how unreadable the unreadable one is.
 > I'm not advocating explicating the connection between the regexp and
 > the length of the list but just clarifying if you get bytes back or
 > strings back. Are we talking about the same thing?
 
 Yes, I think so. I much prefer having a single `regexp-match' entry
 instead of two that are slightly different --- and where I'll have to
 stare a while to figure out the intended difference.
 
 Also, it occurs to me now that two entries won't do the job. You'd need
 three to cover the combinations:
 
    string pattern and string input => string result
    bytes pattern and string input => bytes result
    (string or bytes) pattern and (bytes or port) input = bytes result
 
 
 An `if' in the result contract would probably be an improvement over
 the current contact+prose:
 
   (or/c (if (and (or (string? pattern) (regexp? pattern))
                  (string? input))
             (cons/c string? (listof (or/c string? #f)))
             (cons/c bytes?  (listof (or/c bytes?  #f))))
         #f)
 
 Instead of forcing me to diff two contracts, that tells me exactly
 where the difference is supposed to be.
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, cce@ccs.neu.edu
Subject: Re: [plt-bug] misc/9840 regexp match contracts misdocumented
Date: Sat, 6 Feb 2010 12:51:19 -0500

 I second the if-style contract until we need more from such contracts. 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        cce@ccs.neu.edu, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] misc/9840 regexp match contracts misdocumented
Date: Sat, 6 Feb 2010 14:30:52 -0600

 On Sat, Feb 6, 2010 at 10:34 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > An `if' in the result contract would probably be an improvement over
 > the current contact+prose:
 >
 > =C2=A0(or/c (if (and (or (string? pattern) (regexp? pattern))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (string? input))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(cons/c string? (listof (or/c st=
 ring? #f)))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(cons/c bytes? =C2=A0(listof (or=
 /c bytes? =C2=A0#f))))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0#f)
 >
 > Instead of forcing me to diff two contracts, that tells me exactly
 > where the difference is supposed to be.
 
 That looks great to me.
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        cce@ccs.neu.edu, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] misc/9840 regexp match contracts misdocumented
Date: Tue, 9 Feb 2010 10:03:07 -0600

 Okay, so below is a commit I just made. Did I get it right?
 
 Robby
 
 [taitung] plt/collects/scribblings/reference% svn diff
 Index: regexps.scrbl
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 --- regexps.scrbl	(revision 18029)
 +++ regexps.scrbl	(working copy)
 @@ -204,9 +204,10 @@
                         [start-pos exact-nonnegative-integer? 0]
                         [end-pos (or/c exact-nonnegative-integer? #f) #f]
                         [output-port (or/c output-port? #f) #f])
 -         (or/c (cons/c string? (listof (or/c string? #f)))
 -               (cons/c bytes?  (listof (or/c bytes?  #f)))
 -               #f)]{
 +         (if (and (or (string? pattern) (regexp? pattern))
 +                  (string? input))
 +             (or/c #f (cons/c string? (listof (or/c string? #f))))
 +             (or/c #f (cons/c bytes?  (listof (or/c bytes?  #f)))))]{
 
  Attempts to match @scheme[pattern] (a string, byte string, @tech{regexp
  value}, or byte-@tech{regexp value}) once to a portion of @scheme[input]. =
  The
 @@ -302,7 +303,10 @@
                          [input (or/c string? bytes? input-port?)]
                          [start-pos exact-nonnegative-integer? 0]
                          [end-pos (or/c exact-nonnegative-integer? #f) #f])
 -         (or/c (listof string?) (listof bytes?))]{
 +         (if (and (or (string? pattern) (regexp? pattern))
 +                  (string? input))
 +             (listof string?)
 +             (listof bytes?))]{
 
  Like @scheme[regexp-match], but the result is a list of strings or
  byte strings corresponding to a sequence of matches of
 @@ -331,15 +335,15 @@
  ]}
 
 
 -@defproc[(regexp-try-match
 -                       [pattern (or/c string? bytes? regexp? byte-regexp?)=
 ]
 -                       [input input-port?]
 -                       [start-pos exact-nonnegative-integer? 0]
 -                       [end-pos (or/c exact-nonnegative-integer? #f) #f]
 -                       [output-port (or/c output-port? #f) #f])
 -         (or/c (cons/c string? (listof (or/c string? #f)))
 -               (cons/c bytes?  (listof (or/c bytes?  #f)))
 -               #f)]{
 +@defproc[(regexp-try-match [pattern (or/c string? bytes? regexp? byte-rege=
 xp?)]
 +                           [input input-port?]
 +                           [start-pos exact-nonnegative-integer? 0]
 +                           [end-pos (or/c exact-nonnegative-integer? #f) #=
 f]
 +                           [output-port (or/c output-port? #f) #f])
 +         (if (and (or (string? pattern) (regexp? pattern))
 +                  (string? input))
 +             (or/c #f (cons/c string? (listof (or/c string? #f))))
 +             (or/c #f (cons/c bytes?  (listof (or/c bytes?  #f)))))]{
 
  Like @scheme[regexp-match] on input ports, except that if the match
  fails, no characters are read and discarded from @scheme[in].
 @@ -353,10 +357,10 @@
 
 
  @defproc[(regexp-match-positions [pattern (or/c string? bytes?
 regexp? byte-regexp?)]
 -                        [input (or/c string? bytes? input-port?)]
 -                        [start-pos exact-nonnegative-integer? 0]
 -                        [end-pos (or/c exact-nonnegative-integer? #f) #f]
 -                        [output-port (or/c output-port? #f) #f])
 +                                 [input (or/c string? bytes? input-port?)]
 +                                 [start-pos exact-nonnegative-integer? 0]
 +                                 [end-pos (or/c
 exact-nonnegative-integer? #f) #f]
 +                                 [output-port (or/c output-port? #f) #f])
            (or/c (cons/c (cons/c exact-nonnegative-integer?
                                  exact-nonnegative-integer?)
                          (listof (or/c (cons/c exact-nonnegative-integer?
 @@ -386,9 +390,9 @@
 
 
  @defproc[(regexp-match-positions* [pattern (or/c string? bytes?
 regexp? byte-regexp?)]
 -                        [input (or/c string? bytes? input-port?)]
 -                        [start-pos exact-nonnegative-integer? 0]
 -                        [end-pos (or/c exact-nonnegative-integer? #f) #f])
 +                                  [input (or/c string? bytes? input-port?)=
 ]
 +                                  [start-pos exact-nonnegative-integer? 0]
 +                                  [end-pos (or/c
 exact-nonnegative-integer? #f) #f])
           (listof (cons/c exact-nonnegative-integer?
                           exact-nonnegative-integer?))]{
 
 @@ -524,7 +528,10 @@
                         [input (or/c string? bytes? input-port?)]
                         [start-pos exact-nonnegative-integer? 0]
                         [end-pos (or/c exact-nonnegative-integer? #f) #f])
 -         (cons/c (or/c string? bytes?) (listof (or/c string? bytes?)))]{
 +         (if (and (or (string? pattern) (regexp? pattern))
 +                  (string? input))
 +             (cons/c string? (listof string?))
 +             (cons/c bytes? (listof bytes?)))]{
 
  The complement of @scheme[regexp-match*]: the result is a list of
  strings (if @scheme[pattern] is a string or character regexp and
 @@ -561,7 +568,10 @@
                           [insert (or/c string? bytes?
                                         ((string?) () #:rest (listof
 string?) . ->* . string?)
                                         ((bytes?) () #:rest (listof
 bytes?) . ->* . bytes?))])
 -         (or/c string? bytes?)]{
 +         (if (and (or (string? pattern) (regexp? pattern))
 +                  (string? input))
 +             string?
 +             bytes?)]{
 
  Performs a match using @scheme[pattern] on @scheme[input], and then
  returns a string or byte string in which the matching portion of
 [taitung] plt/collects/scribblings/reference%
 
 
 On Sat, Feb 6, 2010 at 2:30 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Sat, Feb 6, 2010 at 10:34 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote=
 :
 >> An `if' in the result contract would probably be an improvement over
 >> the current contact+prose:
 >>
 >> =C2=A0(or/c (if (and (or (string? pattern) (regexp? pattern))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (string? input))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(cons/c string? (listof (or/c s=
 tring? #f)))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(cons/c bytes? =C2=A0(listof (o=
 r/c bytes? =C2=A0#f))))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0#f)
 >>
 >> Instead of forcing me to diff two contracts, that tells me exactly
 >> where the difference is supposed to be.
 >
 > That looks great to me.
 >
 > Robby
 >

State changed from "open" to "closed" by robby at Tue, 09 Feb 2010 11:13:42 -0500
Reason>>> fixed up the regexp-match docs.

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        cce@ccs.neu.edu, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] misc/9840 regexp match contracts misdocumented
Date: Tue, 9 Feb 2010 09:12:38 -0700

 Looks right to me.
 
 At Tue, 9 Feb 2010 10:03:07 -0600, Robby Findler wrote:
 > Okay, so below is a commit I just made. Did I get it right?
 >=20
 > Robby
 >=20
 > [taitung] plt/collects/scribblings/reference% svn diff
 > Index: regexps.scrbl
 > =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 > --- regexps.scrbl	(revision 18029)
 > +++ regexps.scrbl	(working copy)
 > @@ -204,9 +204,10 @@
 >                         [start-pos exact-nonnegative-integer? 0]
 >                         [end-pos (or/c exact-nonnegative-integer? #f) #f]=
 
 >                         [output-port (or/c output-port? #f) #f])
 > -         (or/c (cons/c string? (listof (or/c string? #f)))
 > -               (cons/c bytes?  (listof (or/c bytes?  #f)))
 > -               #f)]{
 > +         (if (and (or (string? pattern) (regexp? pattern))
 > +                  (string? input))
 > +             (or/c #f (cons/c string? (listof (or/c string? #f))))
 > +             (or/c #f (cons/c bytes?  (listof (or/c bytes?  #f)))))]{
 >=20
 >  Attempts to match @scheme[pattern] (a string, byte string, @tech{regexp
 >  value}, or byte-@tech{regexp value}) once to a portion of @scheme[input]=
 .  The
 > @@ -302,7 +303,10 @@
 >                          [input (or/c string? bytes? input-port?)]
 >                          [start-pos exact-nonnegative-integer? 0]
 >                          [end-pos (or/c exact-nonnegative-integer? #f) #f=
 ])
 > -         (or/c (listof string?) (listof bytes?))]{
 > +         (if (and (or (string? pattern) (regexp? pattern))
 > +                  (string? input))
 > +             (listof string?)
 > +             (listof bytes?))]{
 >=20
 >  Like @scheme[regexp-match], but the result is a list of strings or
 >  byte strings corresponding to a sequence of matches of
 > @@ -331,15 +335,15 @@
 >  ]}
 >=20
 >=20
 > -@defproc[(regexp-try-match
 > -                       [pattern (or/c string? bytes? regexp? byte-regexp=
 ?)]
 > -                       [input input-port?]
 > -                       [start-pos exact-nonnegative-integer? 0]
 > -                       [end-pos (or/c exact-nonnegative-integer? #f) #f]=
 
 > -                       [output-port (or/c output-port? #f) #f])
 > -         (or/c (cons/c string? (listof (or/c string? #f)))
 > -               (cons/c bytes?  (listof (or/c bytes?  #f)))
 > -               #f)]{
 > +@defproc[(regexp-try-match [pattern (or/c string? bytes? regexp?=20
 > byte-regexp?)]
 > +                           [input input-port?]
 > +                           [start-pos exact-nonnegative-integer? 0]
 > +                           [end-pos (or/c exact-nonnegative-integer? #f)=
  #f]
 > +                           [output-port (or/c output-port? #f) #f])
 > +         (if (and (or (string? pattern) (regexp? pattern))
 > +                  (string? input))
 > +             (or/c #f (cons/c string? (listof (or/c string? #f))))
 > +             (or/c #f (cons/c bytes?  (listof (or/c bytes?  #f)))))]{
 >=20
 >  Like @scheme[regexp-match] on input ports, except that if the match
 >  fails, no characters are read and discarded from @scheme[in].
 > @@ -353,10 +357,10 @@
 >=20
 >=20
 >  @defproc[(regexp-match-positions [pattern (or/c string? bytes?
 > regexp? byte-regexp?)]
 > -                        [input (or/c string? bytes? input-port?)]
 > -                        [start-pos exact-nonnegative-integer? 0]
 > -                        [end-pos (or/c exact-nonnegative-integer? #f) #f=
 ]
 > -                        [output-port (or/c output-port? #f) #f])
 > +                                 [input (or/c string? bytes? input-port?=
 )]
 > +                                 [start-pos exact-nonnegative-integer? 0=
 ]
 > +                                 [end-pos (or/c
 > exact-nonnegative-integer? #f) #f]
 > +                                 [output-port (or/c output-port? #f) #f]=
 )
 >            (or/c (cons/c (cons/c exact-nonnegative-integer?
 >                                  exact-nonnegative-integer?)
 >                          (listof (or/c (cons/c exact-nonnegative-integer?=
 
 > @@ -386,9 +390,9 @@
 >=20
 >=20
 >  @defproc[(regexp-match-positions* [pattern (or/c string? bytes?
 > regexp? byte-regexp?)]
 > -                        [input (or/c string? bytes? input-port?)]
 > -                        [start-pos exact-nonnegative-integer? 0]
 > -                        [end-pos (or/c exact-nonnegative-integer? #f) #f=
 ])
 > +                                  [input (or/c string? bytes? input-port=
 ?)]
 > +                                  [start-pos exact-nonnegative-integer? =
 0]
 > +                                  [end-pos (or/c
 > exact-nonnegative-integer? #f) #f])
 >           (listof (cons/c exact-nonnegative-integer?
 >                           exact-nonnegative-integer?))]{
 >=20
 > @@ -524,7 +528,10 @@
 >                         [input (or/c string? bytes? input-port?)]
 >                         [start-pos exact-nonnegative-integer? 0]
 >                         [end-pos (or/c exact-nonnegative-integer? #f) #f]=
 )
 > -         (cons/c (or/c string? bytes?) (listof (or/c string? bytes?)))]{=
 
 > +         (if (and (or (string? pattern) (regexp? pattern))
 > +                  (string? input))
 > +             (cons/c string? (listof string?))
 > +             (cons/c bytes? (listof bytes?)))]{
 >=20
 >  The complement of @scheme[regexp-match*]: the result is a list of
 >  strings (if @scheme[pattern] is a string or character regexp and
 > @@ -561,7 +568,10 @@
 >                           [insert (or/c string? bytes?
 >                                         ((string?) () #:rest (listof
 > string?) . ->* . string?)
 >                                         ((bytes?) () #:rest (listof
 > bytes?) . ->* . bytes?))])
 > -         (or/c string? bytes?)]{
 > +         (if (and (or (string? pattern) (regexp? pattern))
 > +                  (string? input))
 > +             string?
 > +             bytes?)]{
 >=20
 >  Performs a match using @scheme[pattern] on @scheme[input], and then
 >  returns a string or byte string in which the matching portion of
 > [taitung] plt/collects/scribblings/reference%
 >=20
 >=20
 > On Sat, Feb 6, 2010 at 2:30 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > On Sat, Feb 6, 2010 at 10:34 AM, Matthew Flatt <mflatt@cs.utah.edu> wro=
 te:
 > >> An `if' in the result contract would probably be an improvement over
 > >> the current contact+prose:
 > >>
 > >> =C2=A0(or/c (if (and (or (string? pattern) (regexp? pattern))
 > >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (string? input=
 ))
 > >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(cons/c string? (listof (or/c=
  string? #f)))
 > >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(cons/c bytes? =C2=A0(listof =
 (or/c bytes? =C2=A0#f))))
 > >> =C2=A0 =C2=A0 =C2=A0 =C2=A0#f)
 > >>
 > >> Instead of forcing me to diff two contracts, that tells me exactly
 > >> where the difference is supposed to be.
 > >
 > > That looks great to me.
 > >
 > > Robby
 > >
