From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jun 27 08:12:43 2012
Received: from mail-vc0-f172.google.com (mail-vc0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q5RCCeVR010684
	for <bugs@bugs.plt-scheme.org>; Wed, 27 Jun 2012 08:12:40 -0400
Message-Id: <201206271212.q5RCCbHx010676@champlain.ccs.neu.edu>
Date: Wed, 27 Jun 2012 08:12:37 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Documentation for `~or', `~and', etc

>Number:         12871
>Category:       misc
>Synopsis:       Documentation for `~or', `~and', etc
>Class:          doc-bug
>Responsible:    ryanc
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jun 27 08:16:01 -0400 2012
>Closed-Date:    
>Last-Modified:  Tue Jul 17 00:16:01 -0400 2012
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
Any
>Description:
The index entries for `~or', `~and', and a few others go to the
grammar section instead of the description.  At least `~seq' is
fine though.
>How-To-Repeat:
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "ryanc" by ryanc at Fri, 13 Jul 2012 12:16:38 -0400
Reason>>> syntax/parse

State changed from "open" to "closed" by ryanc at Fri, 13 Jul 2012 12:16:38 -0400
Reason>>> This is the intended behavior. The index entries for ~and,
~or, and similar forms go to a disambiguation entry, with
links to each of the variants.


State changed from "closed" to "open" by eli at Tue, 17 Jul 2012 00:00:16 -0400
Reason>>> Will followup.

From: Eli Barzilay <eli@barzilay.org>
To: bugs@racket-lang.org
Cc: ryanc@racket-lang.org
Subject: Re: [racket-bug] misc/12871 Documentation for `~or', `~and', etc
Date: Tue, 17 Jul 2012 00:15:14 -0400

 On Friday, ryanc@racket-lang.org wrote:
 > 
 > This is the intended behavior. The index entries for ~and, ~or, and
 > similar forms go to a disambiguation entry, with links to each of
 > the variants.
 
 [Re-opened it.]
 
 Please add some paragraph to that entry that describes what the form
 is used and somehow makes the fact that the listed forms are where the
 real documentation is.  I think that this can be done with less work
 than it sounds.  Each of these look like
 
   One of ~X, ~Y, or ~Z:
   * ~X if ...
   * ~Y if ...
   * ~Z if ...
 
 AFAICT, the first sentence is useless in all of these -- and worse, it
 obscures the fact that they're the links that you really want to read
 about.  So I think that it will help to remove it, and instead add a
 short description of what the ~foo thing is used for.
 
 In addition, I find the whole thing very confusing with the "H", "EH",
 etc.  (And it doesn't help that "EH" makes the text look funny.)  I
 think that it would help to dump attempted abbreviations like
 "EH-pattern" and use "ellipsis-head-pattern" etc.
 
 Yet another thing that makes it look very obscure is the fact that you
 only list the full BNF as the way to specify which kind of patterns
 happen at which places.  BNFs are great for formal specification, but
 they are a complete failure when it comes to me (and I assume many
 other people) reading the docs.  So I'd like to see a human
 description of wach of these things, in a way that is understandable
 without a formal BNF.  I'm not saying that the formal BNF should be
 dumped -- it's nice to have it around in cases where it matters -- but
 at least when I'm trying to understand how things work it is not
 helping me.  To make a concrete point, at my current level of need I
 certainly did not bother to track the BNF, leaving me with a very
 vague understanding which is full of guesses like "prbably a pattern
 that is at the head and has an ellipsis".
 
 Yes, you could argue that I should read the whole thing, or that I
 should go through the whole guide section.  But I think that I'm at a
 point where I operate like many people who are potential customers of
 `syntax/parse' -- I have a specific need, so I want to get there as
 fast as possible, and it's really better if I actually understand
 something on the way.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
