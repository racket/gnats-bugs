From apache@plt-scheme.org Sun May 21 21:52:17 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k4M1qF3X026576
	for <bugs@plt-scheme.org>; Sun, 21 May 2006 21:52:15 -0400
Message-Id: <200605220152.k4M1qFS6026574@champlain.ccs.neu.edu>
Date: Sun, 21 May 2006 21:52:15 -0400
From: dyoo@hkn.eecs.berkeley.edu
To: bugs@plt-scheme.org
Subject: url.ss in the net collection doesn't handle file URLs in an expected way

>Number:         8060
>Category:       misc
>Synopsis:       url.ss in the net collection doesn't handle file URLs in an expected way
>Class:          sw-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun May 21 21:55:00 -0400 2006
>Last-Modified:  Thu Apr 10 13:50:01 -0400 2008
>Originator:     Danny Yoo
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301
>Environment:
unknown-platform
>Description:
The following diff:

mumak:~/local/plt/collects dyoo$ svn diff net/url-unit.ss
Index: net/url-unit.ss
===================================================================
--- net/url-unit.ss     (revision 2902)
+++ net/url-unit.ss     (working copy)
@@ -145,6 +145,7 @@
         (open-input-file 
          (apply
           build-path
+          "/"
           (map
            path/param-path
            (url-path url)))))

should repair a problem with the handling of file urls.

A better solution to this will probably require some platform-dependent code, since one will want to do something different on Windows.
>How-To-Repeat:
Without this patch, code like:


(require (lib "url.ss" "net")
         (lib "port.ss"))
(define p (get-pure-port (string->url "file:///etc/passwd")))

will raise the following error:

open-input-file: cannot open input file: "/Users/dyoo/local/plt/collects/etc/passwd" (No such file or directory; errno=2)
/Users/dyoo/local/plt/collects/net/url-unit.ss:145:8: (open-input-file (apply build-path (map lifted (lifted url))))
[unknown source]: (lifted (lifted "file:///etc/passwd"))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: dyoo@hkn.eecs.berkeley.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@barzilay.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, gnats@brinckerhoff.org,
        jay@kenyamountain.com, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu, cce@ccs.neu.edu,
        dalev@ccs.neu.edu
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 22 May 2006 04:26:54 -0500

 I don't think that's the right change. I will refer you to rfc 3986 for
 this. I hope that's okay (let me know if you see anything fishy after
 that.)
 
 Thanks,
 Robby
 
 At Sun, 21 May 2006 21:55:08 -0400, dyoo@hkn.eecs.berkeley.edu wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8060
 > 
 > Reported by Danny Yoo for release: 301
 > 
 > *** Description:
 > The following diff:
 > 
 > mumak:~/local/plt/collects dyoo$ svn diff net/url-unit.ss
 > Index: net/url-unit.ss
 > ===================================================================
 > --- net/url-unit.ss     (revision 2902)
 > +++ net/url-unit.ss     (working copy)
 > @@ -145,6 +145,7 @@
 >          (open-input-file 
 >           (apply
 >            build-path
 > +          "/"
 >            (map
 >             path/param-path
 >             (url-path url)))))
 > 
 > should repair a problem with the handling of file urls.
 > 
 > A better solution to this will probably require some platform-dependent code, since one 
 > will want to do something different on Windows.
 > 
 > *** How to repeat:
 > Without this patch, code like:
 > 
 > 
 > (require (lib "url.ss" "net")
 >          (lib "port.ss"))
 > (define p (get-pure-port (string->url "file:///etc/passwd")))
 > 
 > will raise the following error:
 > 
 > open-input-file: cannot open input file: "/Users/dyoo/local/plt/collects/etc/passwd" (No 
 > such file or directory; errno=2)
 > /Users/dyoo/local/plt/collects/net/url-unit.ss:145:8: (open-input-file (apply build-path 
 > (map lifted (lifted url))))
 > [unknown source]: (lifted (lifted "file:///etc/passwd"))
 > 
 > *** Environment:
 > unknown-platform

Responsible changed from "nobody" to "robby" by eli at Wed, 24 May 2006 13:16:24 -0400
Reason>>> url.ss

BTW, I've seen that the behavior right now is that:
  file://...A.../...B...
always ignores the "...A..." part, which is weird.

From: Danny Yoo <dyoo@hkn.eecs.berkeley.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        Eli Barzilay <eli@barzilay.org>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>, gnats@brinckerhoff.org,
        Jay McCarthy <jay@kenyamountain.com>, meunier@ccs.neu.edu,
        sowens@cs.utah.edu, kathyg@cs.utah.edu, awick@cs.utah.edu,
        goldberg@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs
 in an expected way
Date: Fri, 26 May 2006 09:21:57 -0700 (PDT)

 On Mon, 22 May 2006, Robby Findler wrote:
 
 > I don't think that's the right change. I will refer you to rfc 3986 for
 > this. I hope that's okay (let me know if you see anything fishy after
 > that.)
 
 
 Hi Robby,
 
 
 RFC3986 talks about the syntax of URI's, and I agree that what url.ss 
 treats the url properly:
 
 ;;;;;;
 > (map path/param-path (url-path (string->url "file://localhost/etc/passwd")))
 ("etc" "passwd")
 >
 > (map path/param-path (url-path (string->url "file:///etc/passwd")))
 ("etc" "passwd")
 ;;;;;;
 
 
 So that seems fine.  But the problem, though, is the semantics of treating 
 the path.  In my reading of RFC 3986, there's no mention of what it means 
 to open a file URL; they delegate the meaning off for each particular 
 scheme to define.
 
 From examples in other programs and other language API's, I believe the 
 majority of web browsers treat the path components of a file url as an 
 absolute path, and not a relative one based on current-directory.
 
 The mozilla folks use a test suite on file urls:
 
      http://www.mozilla.org/quality/networking/testing/filetests.html
 
 that support this interpretation.  Python does this as well:
 
 ######
 metcalfe ~/work/plt/collects/mzlib $ python
 Python 2.3.5 (#2, Sep  4 2005, 22:01:42)
 [GCC 3.3.5 (Debian 1:3.3.5-13)] on linux2
 Type "help", "copyright", "credits" or "license" for more information.
 >>> import urllib
 >>> urllib.urlopen("file:///etc/passwd").readline()
 'root:x:0:0:root:/root:/bin/bash\n'
 ######
 
 (But I realize I shouldn't automatically assume that Python is doing the 
 right thing here.)
 
 
 Am I understanding the issue correctly here, or do you have something else 
 in mind?
 
 
 Best of wishes!
From: Robby Findler <robby@cs.uchicago.edu>
To: Danny Yoo <dyoo@hkn.eecs.berkeley.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        Eli Barzilay <eli@barzilay.org>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>, gnats@brinckerhoff.org,
        Jay McCarthy <jay@kenyamountain.com>, meunier@ccs.neu.edu,
        sowens@cs.utah.edu, kathyg@cs.utah.edu, awick@cs.utah.edu,
        goldberg@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs
 in an expected way
Date: Fri, 26 May 2006 12:47:40 -0500

 At Fri, 26 May 2006 09:21:57 -0700 (PDT), Danny Yoo wrote:
 > 
 > 
 > On Mon, 22 May 2006, Robby Findler wrote:
 > 
 > > I don't think that's the right change. I will refer you to rfc 3986 for
 > > this. I hope that's okay (let me know if you see anything fishy after
 > > that.)
 > 
 > 
 > Hi Robby,
 > 
 > 
 > RFC3986 talks about the syntax of URI's, and I agree that what url.ss 
 > treats the url properly:
 > 
 > ;;;;;;
 > > (map path/param-path (url-path (string->url "file://localhost/etc/passwd")))
 > ("etc" "passwd")
 > >
 > > (map path/param-path (url-path (string->url "file:///etc/passwd")))
 > ("etc" "passwd")
 > ;;;;;;
 > 
 > 
 > So that seems fine.  But the problem, though, is the semantics of treating 
 > the path.  In my reading of RFC 3986, there's no mention of what it means 
 > to open a file URL; they delegate the meaning off for each particular 
 > scheme to define.
 > 
 > From examples in other programs and other language API's, I believe the 
 > majority of web browsers treat the path components of a file url as an 
 > absolute path, and not a relative one based on current-directory.
 > 
 > The mozilla folks use a test suite on file urls:
 > 
 >      http://www.mozilla.org/quality/networking/testing/filetests.html
 > 
 > that support this interpretation.  Python does this as well:
 > 
 > ######
 > metcalfe ~/work/plt/collects/mzlib $ python
 > Python 2.3.5 (#2, Sep  4 2005, 22:01:42)
 > [GCC 3.3.5 (Debian 1:3.3.5-13)] on linux2
 > Type "help", "copyright", "credits" or "license" for more information.
 > >>> import urllib
 > >>> urllib.urlopen("file:///etc/passwd").readline()
 > 'root:x:0:0:root:/root:/bin/bash\n'
 > ######
 > 
 > (But I realize I shouldn't automatically assume that Python is doing the 
 > right thing here.)
 > 
 > 
 > Am I understanding the issue correctly here, or do you have something else 
 > in mind?
 
 Oh, I see.
 
 But the patch from PR assumes that "/" is always the filesystem root
 which isn't the case in general. In fact, each filesystem may have
 multiple roots (the various drives, under windows and mac os classic
 has something similar). 
 
 What happens there? Do we special case things and look to see if the
 first component of the path is one of the file system's roots, as is
 suggested by this page:
 http://www.mozilla.org/quality/networking/testing/filetests.html and
 and otherwise just pick a root (perhaps the first one returned by
 filesystem-root-list)?
 
 Robby
 
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Danny Yoo <dyoo@hkn.eecs.berkeley.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, Matthias Felleisen <matthias@ccs.neu.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>, gnats@brinckerhoff.org,
        Jay McCarthy <jay@kenyamountain.com>, meunier@ccs.neu.edu,
        sowens@cs.utah.edu, kathyg@cs.utah.edu, awick@cs.utah.edu,
        goldberg@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs
 in an expected way
Date: Fri, 26 May 2006 14:03:48 -0400

 On May 26, Robby Findler wrote:
 > At Fri, 26 May 2006 09:21:57 -0700 (PDT), Danny Yoo wrote:
 > > 
 > > 
 > > On Mon, 22 May 2006, Robby Findler wrote:
 > > 
 > > > I don't think that's the right change. I will refer you to rfc 3986 for
 > > > this. I hope that's okay (let me know if you see anything fishy after
 > > > that.)
 > > 
 > > 
 > > Hi Robby,
 > > 
 > > 
 > > RFC3986 talks about the syntax of URI's, and I agree that what url.ss 
 > > treats the url properly:
 > > 
 > > ;;;;;;
 > > > (map path/param-path (url-path (string->url "file://localhost/etc/passwd")))
 > > ("etc" "passwd")
 > > >
 > > > (map path/param-path (url-path (string->url "file:///etc/passwd")))
 > > ("etc" "passwd")
 > > ;;;;;;
 > > 
 > > 
 > > So that seems fine.  But the problem, though, is the semantics of treating 
 > > the path.  In my reading of RFC 3986, there's no mention of what it means 
 > > to open a file URL; they delegate the meaning off for each particular 
 > > scheme to define.
 > > 
 > > From examples in other programs and other language API's, I believe the 
 > > majority of web browsers treat the path components of a file url as an 
 > > absolute path, and not a relative one based on current-directory.
 > > 
 > > The mozilla folks use a test suite on file urls:
 > > 
 > >      http://www.mozilla.org/quality/networking/testing/filetests.html
 > > 
 > > that support this interpretation.  Python does this as well:
 > > 
 > > ######
 > > metcalfe ~/work/plt/collects/mzlib $ python
 > > Python 2.3.5 (#2, Sep  4 2005, 22:01:42)
 > > [GCC 3.3.5 (Debian 1:3.3.5-13)] on linux2
 > > Type "help", "copyright", "credits" or "license" for more information.
 > > >>> import urllib
 > > >>> urllib.urlopen("file:///etc/passwd").readline()
 > > 'root:x:0:0:root:/root:/bin/bash\n'
 > > ######
 > > 
 > > (But I realize I shouldn't automatically assume that Python is doing the 
 > > right thing here.)
 > > 
 > > 
 > > Am I understanding the issue correctly here, or do you have something else 
 > > in mind?
 > 
 > Oh, I see.
 > 
 > But the patch from PR assumes that "/" is always the filesystem root
 > which isn't the case in general. In fact, each filesystem may have
 > multiple roots (the various drives, under windows and mac os classic
 > has something similar). 
 > 
 > What happens there? Do we special case things and look to see if the
 > first component of the path is one of the file system's roots, as is
 > suggested by this page:
 > http://www.mozilla.org/quality/networking/testing/filetests.html and
 > and otherwise just pick a root (perhaps the first one returned by
 > filesystem-root-list)?
 
 I'm probably jumping to something that I don't understand (since I
 don't have patience to look at RFCs etc), but it sounds like not much
 is needed -- `complete-path?' tells you if the path is `rooted',
 otherwise it is relative -- and on Windows there is a third option of
 `complete-path?' being #f and `absolute-path?' #t, which happens on an
 absolute path without a drive specification (and that resolves to the
 path for the `current-drive'.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Danny Yoo <dyoo@hkn.eecs.berkeley.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        Eli Barzilay <eli@barzilay.org>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>, gnats@brinckerhoff.org,
        Jay McCarthy <jay@kenyamountain.com>, meunier@ccs.neu.edu,
        sowens@cs.utah.edu, kathyg@cs.utah.edu, awick@cs.utah.edu,
        goldberg@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs
 in an expected way
Date: Sat, 27 May 2006 13:46:39 -0700 (PDT)

 >> (But I realize I shouldn't automatically assume that Python is doing the
 >> right thing here.)
 >>
 >>
 >> Am I understanding the issue correctly here, or do you have something else
 >> in mind?
 >
 > Oh, I see.
 >
 > But the patch from PR assumes that "/" is always the filesystem root 
 > which isn't the case in general. In fact, each filesystem may have 
 > multiple roots (the various drives, under windows and mac os classic has 
 > something similar).
 
 
 I took Eli's suggestion of using filesystem-root-list, and generalized the 
 code:
 
        ;; file://url-path->complete-path: url -> path
        (define (file://url-path->complete-path url)
          (let* ([path (apply build-path
                              (map path/param-path (url-path url)))])
            (cond [(complete-path? path) path]
                  [else
                   (path->complete-path path
                                        (car (filesystem-root-list)))])))
 
        ;; file://get-pure-port : url -> in-port
        (define (file://get-pure-port url)
          (open-input-file (file://url-path->complete-path url)))
 
 
 Does this seem more reasonable to you?
 
 
 Best of wishes!
From: Eli Barzilay <eli@barzilay.org>
To: Danny Yoo <dyoo@hkn.eecs.berkeley.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, Matthias Felleisen <matthias@ccs.neu.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>, gnats@brinckerhoff.org,
        Jay McCarthy <jay@kenyamountain.com>, meunier@ccs.neu.edu,
        sowens@cs.utah.edu, kathyg@cs.utah.edu, awick@cs.utah.edu,
        goldberg@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs
 in an expected way
Date: Sat, 27 May 2006 17:09:51 -0400

 On May 27, Danny Yoo wrote:
 > 
 > I took Eli's suggestion of using filesystem-root-list, and generalized the 
 > code:
 > 
 >        ;; file://url-path->complete-path: url -> path
 >        (define (file://url-path->complete-path url)
 >          (let* ([path (apply build-path
 >                              (map path/param-path (url-path url)))])
 >            (cond [(complete-path? path) path]
 >                  [else
 >                   (path->complete-path path
 >                                        (car (filesystem-root-list)))])))
 
 That's the part I don't understand -- instead of arbitrarily choosing
 the first root, why not use the current directory:
 
      ;; file://url-path->complete-path: url -> path
      (define (file://url-path->complete-path url)
        (let* ([path (apply build-path
                            (map path/param-path (url-path url)))])
          (cond [(complete-path? path) path]
                [else
                 (path->complete-path path (current-directory))])))
 
 And then all that collapses to:
 
      ;; file://url-path->complete-path: url -> path
      (define (file://url-path->complete-path url)
        (path->complete-path
         (apply build-path (map path/param-path (url-path url)))))
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Danny Yoo <dyoo@hkn.eecs.berkeley.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, Matthias Felleisen <matthias@ccs.neu.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>, gnats@brinckerhoff.org,
        Jay McCarthy <jay@kenyamountain.com>, meunier@ccs.neu.edu,
        sowens@cs.utah.edu, kathyg@cs.utah.edu, awick@cs.utah.edu,
        goldberg@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs
 in an expected way
Date: Sat, 27 May 2006 17:37:16 -0700 (PDT)

   This message is in MIME format.  The first part should be readable text,
   while the remaining parts are likely unreadable without MIME-aware tools.
 
 --545311344-237687214-1148776636=:1933
 Content-Type: TEXT/PLAIN; charset=US-ASCII; format=flowed
 
 
 
 > That's the part I don't understand -- instead of arbitrarily choosing
 > the first root, why not use the current directory:
 >
 >     ;; file://url-path->complete-path: url -> path
 >     (define (file://url-path->complete-path url)
 >       (let* ([path (apply build-path
 >                           (map path/param-path (url-path url)))])
 >         (cond [(complete-path? path) path]
 >               [else
 >                (path->complete-path path (current-directory))])))
 
 Hi Eli,
 
 The thing, though, is that this will then treat the path as a relative 
 path rather than an absolute path.  The point is that the current behavior 
 does behave by treating the path as relative rather than absolute, and 
 that's not consistant with what how other web programs treat file:// urls.
 
 That is, on Unix, I want the URL 
 "file:///etc/passwd" to refer to (build-path "/" "etc" "passwd"), not 
 (build-path (current-directory) "etc" "passwd").
 
 (By the way, I also badly named the function; it should have been 
 file://url->complete-path.  My apologies about that; I was rushing.)
 
 
 A compromise can be made to preserve existing behavior by making a public 
 parameter to allow clients to decide what the treatment of file:// urls 
 should be for themselves, be it relative or absolute.  I'll attach a patch 
 here that introduces a current-file://url-relative? parameter.
 
 
 I've set the default here to preserve existing behavior.  But I want the 
 option to be able to treat 'file://' urls as absolute paths.  For example:
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 > (current-directory)
 #<path:/home/dyoo/work/plt/collects/net/>
 >
 >
 > (parameterize ([current-file://url-relative? #t])
      (read-line (get-pure-port (string->url "file:///etc/passwd"))))
 url-unit.ss::6795: open-input-file: cannot open input file: 
 "/home/dyoo/work/plt/collects/net/etc/passwd" (No such file or directory; 
 errno=2)
 >
 >
 > (parameterize ([current-file://url-relative? #f])
      (read-line (get-pure-port (string->url "file:///etc/passwd"))))
 "root:x:0:0:root:/root:/bin/bash"
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
 
 
 I hope this helps!
 --545311344-237687214-1148776636=:1933
 Content-Type: TEXT/plain; charset=US-ASCII; name=file-url.diff
 Content-Transfer-Encoding: BASE64
 Content-ID: <Pine.LNX.4.64.0605271737160.1933@hkn.eecs.berkeley.edu>
 Content-Description: 
 Content-Disposition: attachment; filename=file-url.diff
 
 SW5kZXg6IGNvbGxlY3RzL25ldC91cmwtdW5pdC5zcw0KPT09PT09PT09PT09
 PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
 PT09PT09PT09PQ0KLS0tIGNvbGxlY3RzL25ldC91cmwtdW5pdC5zcwkocmV2
 aXNpb24gMzA3NCkNCisrKyBjb2xsZWN0cy9uZXQvdXJsLXVuaXQuc3MJKHdv
 cmtpbmcgY29weSkNCkBAIC0xNDAsMTQgKzE0MCwyMyBAQA0KIAkgICAgKHRj
 cC1hYmFuZG9uLXBvcnQgY2xpZW50LT5zZXJ2ZXIpIDsgZmx1c2hlcw0KICAg
 ICAgICAgICAgIHNlcnZlci0+Y2xpZW50KSkpDQogDQorICAgICAgDQorICAg
 ICAgKGRlZmluZSBjdXJyZW50LWZpbGU6Ly91cmwtcmVsYXRpdmU/IChtYWtl
 LXBhcmFtZXRlciAjdCkpDQorICAgICAgDQorICAgICAgOzsgZmlsZTovL3Vy
 bC0+Y29tcGxldGUtcGF0aDogdXJsIC0+IHBhdGgNCisgICAgICAoZGVmaW5l
 IChmaWxlOi8vdXJsLT5jb21wbGV0ZS1wYXRoIHVybCkNCisgICAgICAgIChs
 ZXQgKFtwYXRoIA0KKyAgICAgICAgICAgICAgIChhcHBseSBidWlsZC1wYXRo
 IChtYXAgcGF0aC9wYXJhbS1wYXRoICh1cmwtcGF0aCB1cmwpKSldKQ0KKyAg
 ICAgICAgICAoY29uZCBbKGN1cnJlbnQtZmlsZTovL3VybC1yZWxhdGl2ZT8p
 IA0KKyAgICAgICAgICAgICAgICAgcGF0aF0NCisgICAgICAgICAgICAgICAg
 Wyhjb21wbGV0ZS1wYXRoPyBwYXRoKSBwYXRoXQ0KKyAgICAgICAgICAgICAg
 ICBbZWxzZQ0KKyAgICAgICAgICAgICAgICAgKHBhdGgtPmNvbXBsZXRlLXBh
 dGggcGF0aCANCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
 ICAgIChjYXIgKGZpbGVzeXN0ZW0tcm9vdC1saXN0KSkpXSkpKQ0KKyAgICAg
 ICAgDQogICAgICAgOzsgZmlsZTovL2dldC1wdXJlLXBvcnQgOiB1cmwgLT4g
 aW4tcG9ydA0KICAgICAgIChkZWZpbmUgKGZpbGU6Ly9nZXQtcHVyZS1wb3J0
 IHVybCkNCi0gICAgICAgIChvcGVuLWlucHV0LWZpbGUgDQotICAgICAgICAg
 KGFwcGx5DQotICAgICAgICAgIGJ1aWxkLXBhdGgNCi0gICAgICAgICAgKG1h
 cA0KLSAgICAgICAgICAgcGF0aC9wYXJhbS1wYXRoDQotICAgICAgICAgICAo
 dXJsLXBhdGggdXJsKSkpKSkNCisgICAgICAgIChvcGVuLWlucHV0LWZpbGUg
 KGZpbGU6Ly91cmwtPmNvbXBsZXRlLXBhdGggdXJsKSkpDQogDQogICAgICAg
 KGRlZmluZSAoc2NoZW1lbGVzcy11cmwgdXJsKQ0KICAgICAgICAgKHVybC1l
 cnJvciAiTWlzc2luZyBwcm90b2NvbCAodXN1YWxseSBcImh0dHA6XCIpIGF0
 IHRoZSBiZWdpbm5pbmcgb2YgVVJMOiB+YSIgdXJsKSkNCkluZGV4OiBjb2xs
 ZWN0cy9uZXQvdXJsLXNpZy5zcw0KPT09PT09PT09PT09PT09PT09PT09PT09
 PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0K
 LS0tIGNvbGxlY3RzL25ldC91cmwtc2lnLnNzCShyZXZpc2lvbiAzMDc0KQ0K
 KysrIGNvbGxlY3RzL25ldC91cmwtc2lnLnNzCSh3b3JraW5nIGNvcHkpDQpA
 QCAtMTUsNSArMTUsNiBAQA0KICAgICAgY2FsbC9pbnB1dC11cmwNCiAgICAg
 IGNvbWJpbmUtdXJsL3JlbGF0aXZlDQogICAgICB1cmwtZXhjZXB0aW9uPw0K
 LSAgICAgY3VycmVudC1wcm94eS1zZXJ2ZXJzKSkpDQorICAgICBjdXJyZW50
 LXByb3h5LXNlcnZlcnMNCisgICAgIGN1cnJlbnQtZmlsZTovL3VybC1yZWxh
 dGl2ZT8pKSkNCiANCkluZGV4OiBjb2xsZWN0cy9uZXQvdXJsLnNzDQo9PT09
 PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
 PT09PT09PT09PT09PT09PT09DQotLS0gY29sbGVjdHMvbmV0L3VybC5zcwko
 cmV2aXNpb24gMzA3NCkNCisrKyBjb2xsZWN0cy9uZXQvdXJsLnNzCSh3b3Jr
 aW5nIGNvcHkpDQpAQCAtNDcsNSArNDcsOCBAQA0KICAgICh1cmwtZXhjZXB0
 aW9uPyAoYW55L2MgLiAtPiAuIGJvb2xlYW4/KSkNCiAgICAoY3VycmVudC1w
 cm94eS1zZXJ2ZXJzDQogICAgIChjYXNlLT4gKChvci9jIGZhbHNlL2MgKGxp
 c3RvZiAobGlzdC9jIHN0cmluZz8gc3RyaW5nPyBudW1iZXI/KSkpIC4gLT4g
 LiB2b2lkPykNCi0gICAgICAgICAgICAoLT4gKG9yL2MgZmFsc2UvYyAobGlz
 dG9mIChsaXN0L2Mgc3RyaW5nPyBzdHJpbmc/IG51bWJlcj8pKSkpKSkpKQ0K
 KyAgICAgICAgICAgICgtPiAob3IvYyBmYWxzZS9jIChsaXN0b2YgKGxpc3Qv
 YyBzdHJpbmc/IHN0cmluZz8gbnVtYmVyPykpKSkpKQ0KKyAgIChjdXJyZW50
 LWZpbGU6Ly91cmwtcmVsYXRpdmU/DQorICAgIChjYXNlLT4gWy0+IGJvb2xl
 YW4/XQ0KKyAgICAgICAgICAgIFstPiBib29sZWFuPyBhbnldKSkpKQ0KIA0K
 
 --545311344-237687214-1148776636=:1933--
From: Eli Barzilay <eli@barzilay.org>
To: Danny Yoo <dyoo@hkn.eecs.berkeley.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, Matthias Felleisen <matthias@ccs.neu.edu>,
        Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>, gnats@brinckerhoff.org,
        Jay McCarthy <jay@kenyamountain.com>, meunier@ccs.neu.edu,
        sowens@cs.utah.edu, kathyg@cs.utah.edu, awick@cs.utah.edu,
        goldberg@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs
 in an expected way
Date: Sun, 28 May 2006 17:57:46 -0400

 This is going to be longer than I thought it would, but I think that I
 managed to find a soluiton.
 
 On May 27, Danny Yoo wrote:
 > 
 > [...]
 > That is, on Unix, I want the URL "file:///etc/passwd" to refer to
 > (build-path "/" "etc" "passwd"), not (build-path (current-directory)
 > "etc" "passwd").
 
 Me too.  I had to read the RFC to see if the parsing is right.  It
 looks like there is an issue with parsing these paths.  Specifically,
 in
 
   file:///foo
 
 the path part according to RFC3986 should be "/foo" -- and the huge
 regexp in `string->url' treats that correctly.  The problem is that
 `separate-path-strings' then throws away the initial "/" (this is
 after I fixed it to use regexp-split):
 
       ;; separate-path-strings : string[starting with /] -> (listof path/param)
       (define (separate-path-strings str)
         (if (string=? str "")
           '()
           (let ([str (if (char=? #\/ (string-ref str 0))
                        (substring str 1 (string-length str))
                        str)])
             (map separate-params (regexp-split #rx"/" str)))))
 
 I'm not sure that this is a good thing, including the null treatment
 of a "" path -- but that's all consistent with just ignoring a first
 path element of "", so I rewrote this function again to this
 equivalent code:
 
       ;; separate-path-strings : string[starting with /] -> (listof path/param)
       (define (separate-path-strings str)
         (let ([strs (regexp-split #rx"/" str)])
           (map separate-params (if (string=? "" (car strs)) (cdr strs) strs))))
 
 The information about the first "/" is not lost -- it is part of the
 resulting url struct as the `path-absolute?' field.  Now, trying to
 see what different browser/OSs do with these paths, this is what I
 see this:
 
 Windows (IE, Firefox agrees on most, can't find some):
   file:c:/temp/              --> c:/temp/
   file:/c:/temp/             --> c:/temp/
   file://c:/temp/            --> c:/temp/
   file:///c:/temp/           --> c:/temp/
   file:////c:/temp/          --> c:/temp/
   file://///c:/temp/         --> CAN'T FIND!
   file://////c:/temp/        --> CAN'T FIND!
   ...
   file:winooski/eli/         --> CAN'T FIND!
   file:/winooski/eli/        --> CAN'T FIND!
   file://winooski/eli/       --> //winooski/eli/
   file:///winooski/eli/      --> CAN'T FIND!
   file:////winooski/eli/     --> //winooski/eli/
   file://///winooski/eli/    --> //winooski/eli/
   file://////winooski/eli/   --> //winooski/eli/
   file:///////winooski/eli/  --> CAN'T FIND
   file:////////winooski/eli/ --> CAN'T FIND
   ...
 
 Unix (Mozilla):
   file:home/eli              --> /home/eli
   file:/home/eli             --> /home/eli
   file://home/eli            --> CAN'T FIND "/eli"
   file://home/home/eli       --> /home/eli
   file:///home/eli           --> /home/eli
   file:////home/eli          --> /home/eli
   file://///home/eli         --> /home/eli
   ...
 
 First, I had to fix the URL parsing so instead of taking
 
   :[0-9]*
 
 as the port part, it forces digits:
 
   :[0-9]+
 
 (I ran this on all text in the PLT docs and on all the PLT web pages,
 and the only difference was in one place where a bug generated bogus
 URLs.)  This change makes the parsing of "file://c:/..." have ":" as
 the first path element (otherwise the ":" is just lost).
 
 A reasonable algorithm to turn a url struct to a file:// path needs to
 be different on Windows and on Unix (all non-windows), because Windows
 does have a notion of host for paths, like that "\\winooski\eli" which
 is the "eli" resource from the "winooski" server.  So here is my
 algorithm (the path elts I refer to are the strings):
 
 * remove all "" from the head and tail of path elt list
 
 * Unix =>
     (when url-path-absolute?
       add "/" to head of paths)
     (build-path path ...)
 
 * Windows =>
     (when (and (not url-path-absolute?)
                the first path elt is ":")
       change the first path elt to (string-append hostname ":")
       change hostname to "")
     (when hostname is a non-empty string
       push hostname as the first elt in paths)
     (if (or (not url-path-sbsolute?)
             the first path elt matches "^.*:$")
       (build-path path ...)
       (build-path "\\\\path1\\path2" path3 ...))
 
 This agrees with the above interpretation of the browser/platforms
 except for a few cases:
 
 * (Unix) file:home/eli -- mozilla takes this as "/home/eli", the above
   takes it as "home/eli" relative to the current directory
 
 * (Win) file:winooski/eli/ -- IE didn't find it, the above takes it as
   a relative directory same as before.
 
 * (Win) file:/winooski/eli/ and file:///winooski/eli/ -- IE didn't
   find it, the above takes it as "\\winooski\eli", but I would prefer
   it if it was "/winooski/eli" which is an absolute path using the
   current-drive, but I see no sane way of doing that.
 
 * (Win) file://///c:/temp/ (or more slashes) -- Windows doesn't find
   it, the above makes it all refer to "c:/temp/"
 
 * (Win) file:///////winooski/eli/ (or more slashes) -- Windows doesn't
   find it, the above make it all refer to "\\winooski\eli\"
 
 I'll commit this change in a few minutes.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Responsible changed from "robby" to "eli" by eli at Sun, 28 May 2006 18:39:25 -0400
Reason>>> fixed, hopefully

State changed from "open" to "closed" by eli at Sun, 28 May 2006 18:39:25 -0400
Reason>>> I think it's fixed, re-open if not.

From: Robby Findler <robby@cs.uchicago.edu>
To: bugs@plt-scheme.org
Cc: eli@barzilay.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Sun, 28 May 2006 23:07:02 -0500

 You were sure to re-run the test suite, right?
 
 Robby
 
 On May 28, 2006, at 5:39 PM, eli@barzilay.org wrote:
 
 >
 > Responsible changed from "robby" to "eli" by eli at Sun, 28 May  
 > 2006 18:39:25 -0400
 > Reason>>> fixed, hopefully
 >
 > State changed from "open" to "closed" by eli at Sun, 28 May 2006  
 > 18:39:25 -0400
 > Reason>>> I think it's fixed, re-open if not.
 >
 >
 > View:
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8060
 >
 >
 
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 29 May 2006 00:32:08 -0400

 On May 28, Robby Findler wrote:
 > You were sure to re-run the test suite, right?
 
 No, I didn't find it so I assumed there wasn't any.
 
 I now saw it, and all tests pass except for a few failures due to a
 change I made -- making all %HH encodings uppercase, which is the
 normal form of these things according to the RFC.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@cs.uchicago.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 29 May 2006 08:15:31 -0500

 On May 28, 2006, at 11:32 PM, Eli Barzilay wrote:
 
 > On May 28, Robby Findler wrote:
 >> You were sure to re-run the test suite, right?
 >
 > No, I didn't find it so I assumed there wasn't any.
 >
 > I now saw it, and all tests pass except for a few failures due to a
 > change I made -- making all %HH encodings uppercase, which is the
 > normal form of these things according to the RFC.
 
 Great, thanks.
 
 Please also add test cases that test for the new behavior you added.
 
 Robby
 
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 29 May 2006 11:55:30 -0400

 On May 29, Robby Findler wrote:
 > 
 > On May 28, 2006, at 11:32 PM, Eli Barzilay wrote:
 > 
 > > On May 28, Robby Findler wrote:
 > >> You were sure to re-run the test suite, right?
 > >
 > > No, I didn't find it so I assumed there wasn't any.
 > >
 > > I now saw it, and all tests pass except for a few failures due to
 > > a change I made -- making all %HH encodings uppercase, which is
 > > the normal form of these things according to the RFC.
 > 
 > Great, thanks.
 > 
 > Please also add test cases that test for the new behavior you added.
 
 I actually reverted it so empty port is again possible, and made a
 better hack -- after the regexp parser is done, if the scheme is
 "file" and there is an empty port spec *and* we're on Windows, then
 change the parsed path to "<host>:<path>" and the host to #f.  This is
 after I saw that on Windows "http://foo.com:/..." still goes to
 foo.com, so it's a "file:"-only behavior.
 
 The behavior is now as it was before, except on Windows and when using
 file: urls.  So there is no way to test that without a way to fake
 `(system-type)'.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@cs.uchicago.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 29 May 2006 11:17:12 -0500

 On May 29, 2006, at 10:55 AM, Eli Barzilay wrote:
 
 > On May 29, Robby Findler wrote:
 >>
 >> On May 28, 2006, at 11:32 PM, Eli Barzilay wrote:
 >>
 >>> On May 28, Robby Findler wrote:
 >>>> You were sure to re-run the test suite, right?
 >>>
 >>> No, I didn't find it so I assumed there wasn't any.
 >>>
 >>> I now saw it, and all tests pass except for a few failures due to
 >>> a change I made -- making all %HH encodings uppercase, which is
 >>> the normal form of these things according to the RFC.
 >>
 >> Great, thanks.
 >>
 >> Please also add test cases that test for the new behavior you added.
 >
 > I actually reverted it so empty port is again possible, and made a
 > better hack -- after the regexp parser is done, if the scheme is
 > "file" and there is an empty port spec *and* we're on Windows, then
 > change the parsed path to "<host>:<path>" and the host to #f.  This is
 > after I saw that on Windows "http://foo.com:/..." still goes to
 > foo.com, so it's a "file:"-only behavior.
 >
 > The behavior is now as it was before, except on Windows and when using
 > file: urls.  So there is no way to test that without a way to fake
 > `(system-type)'.
 
 That change seems wrong: the rfc is clearly written to make parsing  
 indepedent of the scheme.
 
 Robby
 
 
 
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 29 May 2006 12:28:49 -0400

 On May 29, Robby Findler wrote:
 > 
 > On May 29, 2006, at 10:55 AM, Eli Barzilay wrote:
 > 
 > > I actually reverted it so empty port is again possible, and made a
 > > better hack -- after the regexp parser is done, if the scheme is
 > > "file" and there is an empty port spec *and* we're on Windows, then
 > > change the parsed path to "<host>:<path>" and the host to #f.  This is
 > > after I saw that on Windows "http://foo.com:/..." still goes to
 > > foo.com, so it's a "file:"-only behavior.
 > >
 > > The behavior is now as it was before, except on Windows and when using
 > > file: urls.  So there is no way to test that without a way to fake
 > > `(system-type)'.
 > 
 > That change seems wrong: the rfc is clearly written to make parsing  
 > indepedent of the scheme.
 
 Actually, as Danny said in the beginning of this thread, the RFC
 doesn't say anything about the syntax of a file: url, and it just
 happens that on Windows the syntax of paths is significantly better to
 change the parsing based on that.
 
 (In any case, I think that a native browser's choice for "file:" urls
 reflect user expectations, so they should be used.  It's usually the
 RFCs that chase common OS practices for stuff like that, especially
 with MS -- otherwise Windows would switch to forward slashes years
 ago.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@cs.uchicago.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 29 May 2006 12:00:26 -0500

 Okay. Please codify this in the test suite. The easiest way I can see  
 to do that is to have a separate (mostly internal) function that  
 accepts a boolean indicating if things should be parsed windows style  
 or not. The real function will just call that one.
 
 Thanks,
 Robby
 
 On May 29, 2006, at 11:28 AM, Eli Barzilay wrote:
 
 > On May 29, Robby Findler wrote:
 >>
 >> On May 29, 2006, at 10:55 AM, Eli Barzilay wrote:
 >>
 >>> I actually reverted it so empty port is again possible, and made a
 >>> better hack -- after the regexp parser is done, if the scheme is
 >>> "file" and there is an empty port spec *and* we're on Windows, then
 >>> change the parsed path to "<host>:<path>" and the host to #f.   
 >>> This is
 >>> after I saw that on Windows "http://foo.com:/..." still goes to
 >>> foo.com, so it's a "file:"-only behavior.
 >>>
 >>> The behavior is now as it was before, except on Windows and when  
 >>> using
 >>> file: urls.  So there is no way to test that without a way to fake
 >>> `(system-type)'.
 >>
 >> That change seems wrong: the rfc is clearly written to make parsing
 >> indepedent of the scheme.
 >
 > Actually, as Danny said in the beginning of this thread, the RFC
 > doesn't say anything about the syntax of a file: url, and it just
 > happens that on Windows the syntax of paths is significantly better to
 > change the parsing based on that.
 >
 > (In any case, I think that a native browser's choice for "file:" urls
 > reflect user expectations, so they should be used.  It's usually the
 > RFCs that chase common OS practices for stuff like that, especially
 > with MS -- otherwise Windows would switch to forward slashes years
 > ago.)
 >
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli  
 > Barzilay:
 >                   http://www.barzilay.org/                 Maze is  
 > Life!
 >
 
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 29 May 2006 14:14:26 -0400

 On May 29, Robby Findler wrote:
 > Okay. Please codify this in the test suite. The easiest way I can
 > see to do that is to have a separate (mostly internal) function that
 > accepts a boolean indicating if things should be parsed windows
 > style or not. The real function will just call that one.
 
 I did it with a toplevel binding in the module, which is visible only
 if you require url-unit.ss directly.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@cs.uchicago.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, dyoo@hkn.eecs.berkeley.edu
Subject: Re: misc/8060 url.ss in the net collection doesn't handle file URLs in an expected way
Date: Mon, 29 May 2006 14:04:37 -0500

 At Mon, 29 May 2006 14:14:26 -0400, Eli Barzilay wrote:
 > On May 29, Robby Findler wrote:
 > > Okay. Please codify this in the test suite. The easiest way I can
 > > see to do that is to have a separate (mostly internal) function that
 > > accepts a boolean indicating if things should be parsed windows
 > > style or not. The real function will just call that one.
 > 
 > I did it with a toplevel binding in the module, which is visible only
 > if you require url-unit.ss directly.
 
 Thanks, Eli.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: robby@cs.uchicago.edu, eli@barzilay.org, dyoo@hkn.eecs.berkeley.edu,
        bugs@plt-scheme.org
Cc: 
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs in an expected way
Date: Thu, 10 Apr 2008 09:18:46 -0600

 I'm going to make more changes.
 
 My motivation is that Check Syntax's "View documentation for ..."
 doesn't work under Windows. Check Syntax generates a URL using `(format
 "file:~s" (path->string ...))', which creates backslashes in the
 string, which causes embeddings of the string-URL in another web page
 to to be encoded as `%5c', which disables the browser's
 backslash-handling hack for broken "file:" URLs.
 
 Here's my plan:
 
  * I'll change `string->url' so that it still treats "file:" URLs
    specially under Windows, but it will generate a URL that breaks the
    filename into parts. That way, composing `string->url' and
    `url->string' generates properly formatted "file:" URLs.
 
  * I'll add a `path->url' function that does the right thing in the
    first place, instead of going through strings.
 
  * I'll replaced the undocumented hook for testing with a parameter to
    determining the parsing mode for Windows-specific parsing. (If you
    need a back door for testing, then the API is broken, so fix the
    API.)
 
  * I'll document what the library does with "file: URLs. (I'm happy to
    see that the PR resulted in test cases, but I'm disappointed that
    none of the PR's discussion got translated into documentation.)
 
 Matthew
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: eli@barzilay.org, dyoo@hkn.eecs.berkeley.edu, bugs@plt-scheme.org
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs in an expected way
Date: Thu, 10 Apr 2008 10:32:38 -0500

 Thanks, Matthew!
 
 On Thu, Apr 10, 2008 at 10:18 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > I'm going to make more changes.
 >
 >  My motivation is that Check Syntax's "View documentation for ..."
 >  doesn't work under Windows. Check Syntax generates a URL using `(format
 >  "file:~s" (path->string ...))', which creates backslashes in the
 >  string, which causes embeddings of the string-URL in another web page
 >  to to be encoded as `%5c', which disables the browser's
 >  backslash-handling hack for broken "file:" URLs.
 >
 >  Here's my plan:
 >
 >   * I'll change `string->url' so that it still treats "file:" URLs
 >    specially under Windows, but it will generate a URL that breaks the
 >    filename into parts. That way, composing `string->url' and
 >    `url->string' generates properly formatted "file:" URLs.
 >
 >   * I'll add a `path->url' function that does the right thing in the
 >    first place, instead of going through strings.
 >
 >   * I'll replaced the undocumented hook for testing with a parameter to
 >    determining the parsing mode for Windows-specific parsing. (If you
 >    need a back door for testing, then the API is broken, so fix the
 >    API.)
 >
 >   * I'll document what the library does with "file: URLs. (I'm happy to
 >    see that the PR resulted in test cases, but I'm disappointed that
 >    none of the PR's discussion got translated into documentation.)
 >
 >  Matthew
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: robby@cs.uchicago.edu, dyoo@hkn.eecs.berkeley.edu, bugs@plt-scheme.org
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs in an expected way
Date: Thu, 10 Apr 2008 13:44:01 -0400

 On Apr 10, Matthew Flatt wrote:
 > I'm going to make more changes.
 > 
 > My motivation is that Check Syntax's "View documentation for ..."
 > doesn't work under Windows. Check Syntax generates a URL using
 > `(format "file:~s" (path->string ...))', which creates backslashes
 > in the string, which causes embeddings of the string-URL in another
 > web page to to be encoded as `%5c', which disables the browser's
 > backslash-handling hack for broken "file:" URLs.
 
 FWIW, I think that a (format "file://~a" (path->complete-path path))
 would work much better.
 
 
 > Here's my plan:
 > 
 >  * I'll change `string->url' so that it still treats "file:" URLs
 >    specially under Windows, but it will generate a URL that breaks
 >    the filename into parts. That way, composing `string->url' and
 >    `url->string' generates properly formatted "file:" URLs.
 
 Note that it does do some Windows-specific things already.  Some parts
 might not be right in that -- the whole `file:' thing is extremely
 messy, because different browsers+platforms treat it differently.
 
 
 >  * I'll add a `path->url' function that does the right thing in the
 >    first place, instead of going through strings.
 
 This sounds like a very good idea.
 
 
 >  * I'll replaced the undocumented hook for testing with a parameter
 >    to determining the parsing mode for Windows-specific parsing. (If
 >    you need a back door for testing, then the API is broken, so fix
 >    the API.)
 > 
 >  * I'll document what the library does with "file: URLs. (I'm happy
 >    to see that the PR resulted in test cases, but I'm disappointed
 >    that none of the PR's discussion got translated into
 >    documentation.)
 
 (The main problem I had with it is that it's close to impossible to
 make sure that the code works in all cases...)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, dyoo@hkn.eecs.berkeley.edu,
        bugs@plt-scheme.org
Subject: Re: all/8060: url.ss in the net collection doesn't handle file URLs in an expected way
Date: Thu, 10 Apr 2008 12:45:25 -0500

 Well, its a good thing we don't wait for workign code before we
 document then, isn't it?!
 
 (translation: You know better.)
 
 Robby
 
 On Thu, Apr 10, 2008 at 12:44 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Apr 10, Matthew Flatt wrote:
 >  > I'm going to make more changes.
 >  >
 >  > My motivation is that Check Syntax's "View documentation for ..."
 >  > doesn't work under Windows. Check Syntax generates a URL using
 >  > `(format "file:~s" (path->string ...))', which creates backslashes
 >  > in the string, which causes embeddings of the string-URL in another
 >  > web page to to be encoded as `%5c', which disables the browser's
 >  > backslash-handling hack for broken "file:" URLs.
 >
 >  FWIW, I think that a (format "file://~a" (path->complete-path path))
 >  would work much better.
 >
 >
 >
 >  > Here's my plan:
 >  >
 >  >  * I'll change `string->url' so that it still treats "file:" URLs
 >  >    specially under Windows, but it will generate a URL that breaks
 >  >    the filename into parts. That way, composing `string->url' and
 >  >    `url->string' generates properly formatted "file:" URLs.
 >
 >  Note that it does do some Windows-specific things already.  Some parts
 >  might not be right in that -- the whole `file:' thing is extremely
 >  messy, because different browsers+platforms treat it differently.
 >
 >
 >
 >  >  * I'll add a `path->url' function that does the right thing in the
 >  >    first place, instead of going through strings.
 >
 >  This sounds like a very good idea.
 >
 >
 >
 >  >  * I'll replaced the undocumented hook for testing with a parameter
 >  >    to determining the parsing mode for Windows-specific parsing. (If
 >  >    you need a back door for testing, then the API is broken, so fix
 >  >    the API.)
 >  >
 >  >  * I'll document what the library does with "file: URLs. (I'm happy
 >  >    to see that the PR resulted in test cases, but I'm disappointed
 >  >    that none of the PR's discussion got translated into
 >  >    documentation.)
 >
 >  (The main problem I had with it is that it's close to impossible to
 >  make sure that the code works in all cases...)
 >
 >  --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 >
