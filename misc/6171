From schlie@attbi.com  Tue Mar 25 18:23:18 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id SAA32635
	for <bugs>; Tue, 25 Mar 2003 18:23:18 -0500
Message-Id: <200303252323.SAA32635@champlain.ccs.neu.edu>
Date: Tue, 25 Mar 2003 18:23:18 -0500
From: Paul Schlie <schlie@attbi.com>
Reply-To:
To: bugs@plt-scheme.org
Subject: DrScheme OSX, latest cvs verson appears to be about 50% slower than previous versions

>Number:         6171
>Category:       misc
>Synopsis:       DrScheme OSX, latest cvs verson appears to be about 50% slower than previous versions
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Mar 25 18:25:00 EST 2003
>Closed-Date:    Mon Jul 14 18:26:30 EDT 2003
>Last-Modified:  Mon Jul 14 18:26:30 EDT 2003
>Originator:     Paul Schlie
>Release:        203.6
>Organization:
plt
>Environment:
macosx "Darwin fusion.local. 6.4 Darwin Kernel Version 6.4: Wed Jan 29 18:50:42 PST 2003; root:xnu/xnu-344.26.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx)

Docs installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "CVS" "drscheme" "help" "icons" "intermediate" "intermediate-lambda" "mred" "mzlib" "mzscheme" "r5rs" "teachpack")

Collections:
(("/Applications/plt-cvs/plt/collects/mzlib/../../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "dromedary" "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "readline" "reduction-semantics" "setup" "sirmail" "slatex" "slibinit" "srpersist" "stepper" "string-constants" "syntax" "test-suite" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))

Human language: english
Computer language: ("Professional Languages" "PLT" "Graphical (MrEd, includes MzScheme)")
>Description:
on my machine, 600MHz ibook,

(define (fib x) (if (< x 2) x (+ (fib (- x 1)) (fib (- x 2)))))

(time (fib 30))

used to run in ~830msec,
but now takes ~12,100msec.

using language Graphical MzScheme,
with debugging support.
>How-To-Repeat:
(NA)
>Fix:

>Release-Note:

>Audit-Trail:

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org, mflatt@cs.utah.edu
Subject: Re: all/6171: DrScheme OSX, latest cvs verson appears to be about 50% slower than previous versions
Date: Tue, 25 Mar 2003 19:33:37 -0600

 When I run the test on v203 and v203.6 I get the same timings. Is it 
 possible you had debugging disabled in the earlier tests?
 
 Robby
 

From: Paul Schlie <schlie@attbi.com>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>, <mflatt@cs.utah.edu>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be
	about 50% slower than previous versions
Date: Tue, 25 Mar 2003 23:07:03 -0500

 I'm certain that it has always been run with debug enabled as it's of the
 simple minded metrics that I've been using to monitor performance over the
 past few years.
 
 Did you run your test after incorporating today's stepper/debug cvs updates?
 
  (which I suspect is likely the source of what I see as a slowdown,
  as well as apparently some more garbage collection activity as well.)
 
 Thanks again,
 
 -paul-
 
 
 on 3/25/03 8:33 PM, Robert Bruce Findler wrote:
 >
 > When I run the test on v203 and v203.6 I get the same timings. Is it
 > possible you had debugging disabled in the earlier tests?
 > 
 > Robby
 > 
 

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: <bugs@plt-scheme.org>, <mflatt@cs.utah.edu>, clements@ccs.neu.edu,
        matthias@ccs.neu.edu
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be about 50% slower than previous versions
Date: Tue, 25 Mar 2003 22:11:06 -0600

 No, I didn't. Of course, you're right. I'm sure that's the reason. John 
 Clements earlier seemed to think that the slowdown for the new debugger 
 would be less than the old. Perhaps he'll have a chance to re-evaluate 
 that?
 
 Robby
 
 On Tuesday, March 25, 2003, at 10:07  PM, Paul Schlie wrote:
 
 > I'm certain that it has always been run with debug enabled as it's of 
 > the
 > simple minded metrics that I've been using to monitor performance over 
 > the
 > past few years.
 >
 > Did you run your test after incorporating today's stepper/debug cvs 
 > updates?
 >
 >  (which I suspect is likely the source of what I see as a slowdown,
 >  as well as apparently some more garbage collection activity as well.)
 >
 > Thanks again,
 >
 > -paul-
 >
 >
 > on 3/25/03 8:33 PM, Robert Bruce Findler wrote:
 >>
 >> When I run the test on v203 and v203.6 I get the same timings. Is it
 >> possible you had debugging disabled in the earlier tests?
 >>
 >> Robby
 >>
 >
 >
 

From: John Clements <clements@brinckerhoff.org>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6171: DrScheme OSX, latest cvs verson appears to be about 50% slower than previous versions
Date: Wed, 26 Mar 2003 08:08:45 -0500

 On Tuesday, March 25, 2003, at 06:23  PM, Paul Schlie wrote:
 >> Description:
 > on my machine, 600MHz ibook,
 >
 > (define (fib x) (if (< x 2) x (+ (fib (- x 1)) (fib (- x 2)))))
 >
 > (time (fib 30))
 >
 > used to run in ~830msec,
 > but now takes ~12,100msec.
 >
 > using language Graphical MzScheme,
 > with debugging support.
 
 That's not a bug, that's a feature!
 
 1) I'm guessing that there's a typo in your report; you did mean 8300 
 msec, not 830, right?
 
 2) the slowdown is likely due to the new debugging annotator.  In 
 particular, the new annotator captures variable values and shows them 
 in the errortrace window.  Some optimization is possible; I haven't 
 looked into it too hard yet.  Also, I expect the slowdown to be less 
 pronounced in code that uses let, begin, and if heavily.
 
 Thanks for the report; I'm going to close this PR, if you don't mind.
 
 john
 

From: John Clements <clements@brinckerhoff.org>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: Paul Schlie <schlie@attbi.com>, <bugs@plt-scheme.org>,
        <mflatt@cs.utah.edu>, clements@ccs.neu.edu, matthias@ccs.neu.edu
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be about 50% slower than previous versions
Date: Wed, 26 Mar 2003 09:08:41 -0500

 On Tuesday, March 25, 2003, at 11:11  PM, Robert Bruce Findler wrote:
 
 > No, I didn't. Of course, you're right. I'm sure that's the reason. 
 > John Clements earlier seemed to think that the slowdown for the new 
 > debugger would be less than the old. Perhaps he'll have a chance to 
 > re-evaluate that?
 >
 > Robby
 
 Things that should make the new one faster:
 
 We only annotate expressions which might cause an error or which are 
 the topmost ones to contain a binding.  In particular, we don't mark 
 all ifs, begins, lets, and wcms.  I claim that all lost information can 
 be recovered at breakpoint time.
 
 Things that should make the new one slower:
 
 Rather than a single source location, the mark is now a closure which 
 captures the source position and the variable bindings.
 
 
 
 In an effort to see whether it's faster to make a closure which 
 captures the bindings or some other kind of structure, I ran the 
 following program (with debugging turned off):
 
 (define-struct capturer (a b c d e f g h i j k l m n o p))
 
 (let-values ([(a b c d e f g h i j k l m n o p)
                (values 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8)])
 (time
   (let loop ([n 20000])
     (unless (= n 0)
       (make-capturer a b c d e f g h i j k l m n o p)
       (make-capturer a b c d e f g h i j k l m n o p)
 
 ...( 60x ) ...
       (make-capturer a b c d e f g h i j k l m n o p)
       (make-capturer a b c d e f g h i j k l m n o p)
       (loop (- n 1))))))
 
 along with a version which replaces the call to make-capturer with 
 closure creation.
 
 The version with closure creation ran faster.  MUCH faster.  In fact, 
 it took only 30ms, instead of 3 seconds, which makes me wonder whether 
 they're all somehow getting optimized away?
 
 
 Another possible optimization would be to remove the annotations on 
 variables bound in other modules.  Can a variable reference to one 
 bound in another module ever cause an error?
 
 john
 

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: Paul Schlie <schlie@attbi.com>, bugs@plt-scheme.org, mflatt@cs.utah.edu,
        clements@ccs.neu.edu, matthias@ccs.neu.edu
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be about 50% slower than previous versions
Date: Wed, 26 Mar 2003 08:17:11 -0600

 I tried the two programs below and the struct one was faster, 5070ms vs
 4540ms.
 
 Still, this is only a small change. Paul Sc.'s original test shows a 2x
 slow down. Perhaps there's nothing we can do about that?
 
 Robby
 
 (define-struct capturer (a b c d e f g h i j k l m n o p))
 '(define (make-capturer a b c d e f g h i j k l m n o p)
   (lambda ()
     (list a b c d e f g h i j k l m n o p)))
 
 (define (f) (values 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8))
 
 (let-values ([(a b c d e f g h i j k l m n o p)
               (f)])
   (time
    (let loop ([n 20000])
      (unless (= n 0)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (make-capturer a b c d e f g h i j k l m n o p)
        (loop (- n 1))))))
 

From: John Clements <clements@brinckerhoff.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Paul Schlie <schlie@attbi.com>, bugs@plt-scheme.org, mflatt@cs.utah.edu,
        clements@ccs.neu.edu, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be about 50% slower than previous versions
Date: Wed, 26 Mar 2003 09:24:44 -0500

 On Wednesday, March 26, 2003, at 09:17  AM, Robby Findler wrote:
 
 > I tried the two programs below and the struct one was faster, 5070ms vs
 > 4540ms.
 >
 > Still, this is only a small change. Paul Sc.'s original test shows a 2x
 > slow down. Perhaps there's nothing we can do about that?
 >
 > Robby
 >
 > (define-struct capturer (a b c d e f g h i j k l m n o p))
 > '(define (make-capturer a b c d e f g h i j k l m n o p)
 >   (lambda ()
 >     (list a b c d e f g h i j k l m n o p)))
 
 
 This is different than what I did.  Rather than making make-capturer a 
 procedure which creates a closure, I did a direct textual substitution 
 of (lambda () a ... p) for (make-capturer a ... p).  Doing it this way 
 saves ... er ... 1.2 million procedure calls.
 
 john
 

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: Paul Schlie <schlie@attbi.com>, bugs@plt-scheme.org, mflatt@cs.utah.edu,
        clements@ccs.neu.edu, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be about 50% slower than previous versions
Date: Wed, 26 Mar 2003 08:51:01 -0600

 The original 2x slowdown? Any thoughts?
 
 Anyone think it is it worth having 2 levels of debugging in the
 language dialog (details section)?
 
 Robby
 

From: Paul Schlie <schlie@attbi.com>
To: John Clements <clements@brinckerhoff.org>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be
	about 50% slower than previous versions
Date: Wed, 26 Mar 2003 10:26:59 -0500

 - Yes, should have reported ~8k vs ~12k msec.
 
 - I appreciate that new features often have costs, but wanted
   to highlight the magnitude of this the cost, which may be
   acceptable given the value of being able to monitor variable
   values if there are no obvious tweaks to enable us to have
   our cake and eat it too.
 
 (any insight as to when PLT plans to support a more traditional
  interactive procedural debugging environment, i.e. interactively
  displays basic &/ conditional source break-points, and thread
  call-chain & corresponding lexically scoped variable/value hierarchy)
 
  Which I know is more easily said than done, but believe it would
  often make the use of the environment much more productive when
  trying to debug non-trivial problems.
 
 
 Thanks again, (I do like being able to finally see call values)
 
 -paul-
 
 
 on 3/26/03 8:08 AM, John Clements wrote:
 > 
 > On Tuesday, March 25, 2003, at 06:23  PM, Paul Schlie wrote:
 >>> Description:
 >> on my machine, 600MHz ibook,
 >> 
 >> (define (fib x) (if (< x 2) x (+ (fib (- x 1)) (fib (- x 2)))))
 >> 
 >> (time (fib 30))
 >> 
 >> used to run in ~830msec,
 >> but now takes ~12,100msec.
 >> 
 >> using language Graphical MzScheme,
 >> with debugging support.
 > 
 > That's not a bug, that's a feature!
 > 
 > 1) I'm guessing that there's a typo in your report; you did mean 8300
 > msec, not 830, right?
 > 
 > 2) the slowdown is likely due to the new debugging annotator.  In
 > particular, the new annotator captures variable values and shows them
 > in the errortrace window.  Some optimization is possible; I haven't
 > looked into it too hard yet.  Also, I expect the slowdown to be less
 > pronounced in code that uses let, begin, and if heavily.
 > 
 > Thanks for the report; I'm going to close this PR, if you don't mind.
 > 
 > john
 > 
 

From: John Clements <clements@brinckerhoff.org>
To: Paul Schlie <schlie@attbi.com>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be about 50% slower than previous versions
Date: Wed, 26 Mar 2003 10:39:12 -0500

 On Wednesday, March 26, 2003, at 10:26  AM, Paul Schlie wrote:
 
 > - Yes, should have reported ~8k vs ~12k msec.
 >
 > - I appreciate that new features often have costs, but wanted
 >   to highlight the magnitude of this the cost, which may be
 >   acceptable given the value of being able to monitor variable
 >   values if there are no obvious tweaks to enable us to have
 >   our cake and eat it too.
 >
 > (any insight as to when PLT plans to support a more traditional
 >  interactive procedural debugging environment, i.e. interactively
 >  displays basic &/ conditional source break-points, and thread
 >  call-chain & corresponding lexically scoped variable/value hierarchy)
 
 You don't mention single-stepping; I see this as the 'big deal' missing 
 issue.  The other thing you really really want is the ability to break 
 & continue; currently, if you use an error to break, you can't then 
 continue.
 
 Actually, adding the ability to continue is relatively trivial; all we 
 need is a new exception type that includes a continuation that's 
 grabbed when the breakpoint occurs.  Then, the errortrace window can 
 recognize this kind of exception and provide a 'continue' button which 
 invokes the continuation.
 
 I won't be spending much time on this in the next month; after a paper 
 deadline this Saturday, I need to prepare a talk for Warsaw which is 
 followed by two weeks in europe.  ... And after that, I'll probably 
 work on an intermediate stepper for a while.
 
 john
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>,
        John Clements <clements@brinckerhoff.org>
Cc: <bugs@plt-scheme.org>, <mflatt@cs.utah.edu>, <clements@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be
	about 50% slower than previous versions
Date: Wed, 26 Mar 2003 11:09:05 -0500

 Personally: (~cost/~function)
 
 1.0x - fast (negligible error detection/reporting)
 1.2x - safe (reasonable error detection/reporting)
 1.5x - trace (reasonable error detection/reporting, with call trace)
 2.0x - profile (reasonable error detection/reporting, with call profile)
 2.5x - full-debug (full dynamic thread/call/value frame tracing/display)
 
 -paul-
 
 on 3/26/03 9:51 AM, Robby Findler wrote:
 >
 > The original 2x slowdown? Any thoughts?
 > 
 > Anyone think it is it worth having 2 levels of debugging in the
 > language dialog (details section)?
 > 
 > Robby
 > 
 

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: John Clements <clements@brinckerhoff.org>, <bugs@plt-scheme.org>,
        <mflatt@cs.utah.edu>, <clements@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be about 50% slower than previous versions
Date: Wed, 26 Mar 2003 10:36:10 -0600

 Ha! I think that we're at 3 or 4x for your 1.5x. Sorry...
 
 Robby
 
 On Wednesday, March 26, 2003, at 10:09  AM, Paul Schlie wrote:
 
 > Personally: (~cost/~function)
 >
 > 1.0x - fast (negligible error detection/reporting)
 > 1.2x - safe (reasonable error detection/reporting)
 > 1.5x - trace (reasonable error detection/reporting, with call trace)
 > 2.0x - profile (reasonable error detection/reporting, with call 
 > profile)
 > 2.5x - full-debug (full dynamic thread/call/value frame 
 > tracing/display)
 >
 > -paul-
 >
 > on 3/26/03 9:51 AM, Robby Findler wrote:
 >>
 >> The original 2x slowdown? Any thoughts?
 >>
 >> Anyone think it is it worth having 2 levels of debugging in the
 >> language dialog (details section)?
 >>
 >> Robby
 >>
 >
 >
 

From: Paul Schlie <schlie@attbi.com>
To: John Clements <clements@brinckerhoff.org>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be
	about 50% slower than previous versions
Date: Wed, 26 Mar 2003 11:46:48 -0500

 Fully agreed; continue was not explicitly mentioned as I considered it an
 implicit required complement of a "break" (triggered by either a
 single-step, a previously associated source code expression, a conditional
 variable/value monitor, a user-break, and/or an error); where when in
 "full-debug" mode, I would also expect to be able to inspect and view/modify
 any lexically scoped variable value within it's call chain (and/or other
 parallel threads), and then resume execution from the current break-point
 (or from another previously suspended thread's break/continuation-point).
 
 on 3/26/03 10:39 AM, John Clements wrote:
 >
 > You don't mention single-stepping; I see this as the 'big deal' missing
 > issue.  The other thing you really really want is the ability to break
 > & continue; currently, if you use an error to break, you can't then
 > continue.
 

From: Paul Schlie <schlie@attbi.com>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: John Clements <clements@brinckerhoff.org>, <bugs@plt-scheme.org>,
        <mflatt@cs.utah.edu>, <clements@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be
	about 50% slower than previous versions
Date: Wed, 26 Mar 2003 11:55:16 -0500

 Guess I'm also a believer in that it's likely better to first have a
 capability than not, which then through time and with some luck it's
 cost may be able to be further optimized once all the issues are better
 understood.
 
 on 3/26/03 11:36 AM, Robert Bruce Findler wrote:
 >
 > Ha! I think that we're at 3 or 4x for your 1.5x. Sorry...
 > 
 > Robby
 

From: John Clements <clements@brinckerhoff.org>
To: Paul Schlie <schlie@attbi.com>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be about 50% slower than previous versions
Date: Wed, 26 Mar 2003 11:58:14 -0500

 On Wednesday, March 26, 2003, at 11:46  AM, Paul Schlie wrote:
 
 > Fully agreed; continue was not explicitly mentioned as I considered it 
 > an
 > implicit required complement of a "break" (triggered by either a
 > single-step, a previously associated source code expression, a 
 > conditional
 > variable/value monitor, a user-break, and/or an error); where when in
 > "full-debug" mode, I would also expect to be able to inspect and 
 > view/modify
 > any lexically scoped variable value within it's call chain
 
 Just to clarify: the current errortrace does allow you to inspect any 
 lexically
 scoped variable within its call chain, yes?
 
 FWIW, adding modification is more or less a one-liner, except for the
 UI support.  It may or may not make the code run slower.
 
 john
 

From: Paul Schlie <schlie@attbi.com>
To: John Clements <clements@brinckerhoff.org>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6171: DrScheme OSX, latest cvs version appears to be
	about 50% slower than previous versions
Date: Wed, 26 Mar 2003 12:21:47 -0500

 Yes, understood; but aren't these the same features that you would
 also find useful (if not invaluable in occasional circumstances)?
 
 on 3/26/03 11:58 AM, John Clements wrote:
 > 
 > On Wednesday, March 26, 2003, at 11:46  AM, Paul Schlie wrote:
 > 
 >> Fully agreed; continue was not explicitly mentioned as I considered it
 >> an
 >> implicit required complement of a "break" (triggered by either a
 >> single-step, a previously associated source code expression, a
 >> conditional
 >> variable/value monitor, a user-break, and/or an error); where when in
 >> "full-debug" mode, I would also expect to be able to inspect and
 >> view/modify
 >> any lexically scoped variable value within it's call chain
 > 
 > Just to clarify: the current errortrace does allow you to inspect any
 > lexically
 > scoped variable within its call chain, yes?
 > 
 > FWIW, adding modification is more or less a one-liner, except for the
 > UI support.  It may or may not make the code run slower.
 > 
 > john
 > 
 
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon Jul 14 18:26:30 2003
Responsible-Changed-Why:
    perf
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Mon Jul 14 18:26:30 2003
State-Changed-Why:
    resolved as much as possible
>Unformatted:

