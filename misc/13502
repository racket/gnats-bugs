From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Feb  7 12:43:54 2013
Received: from mail-oa0-f48.google.com (mail-oa0-f48.google.com [209.85.219.48])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r17Hho4d019897
	for <bugs@bugs.plt-scheme.org>; Thu, 7 Feb 2013 12:43:51 -0500
Message-Id: <201302071743.r17Hhl4J019891@champlain.ccs.neu.edu>
Date: Thu, 7 Feb 2013 12:43:47 -0500
From: 9grenzin@informatik.uni-hamburg.de
To: bugs@racket-lang.org
Subject: apply on higher-order functions - produces an error

>Number:         13502
>Category:       misc
>Synopsis:       apply on higher-order functions - produces an error
>Class:          sw-bug
>Responsible:    matthias
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Feb 07 12:44:01 -0500 2013
>Closed-Date:    Thu Feb 07 13:17:31 -0500 2013
>Last-Modified:  Mon Feb 18 22:58:49 -0500 2013
>Originator:     Andreas Grenzing
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64; rv:10.0.11) Gecko/20100101 Firefox/10.0.11 Iceweasel/10.0.11
>Description:
The function "apply" works correctly on "normal" functions, e.g. (apply + '(2 3)), but not on higher-order functions, e.g. (apply compose '(not =)). It produces an error!

I wrote my own apply function - maybe this is a help for troubleshooting:
(define (my-apply-withEVAL f xs)
  (if (null? xs)
      (f)
      (my-apply-withEVAL (curry f (eval (car xs))) (cdr xs))))
When I first tried it WITHOUT the (eval ...) in the last line I produced the same error as the normal apply. The bug?

(I personally don't like the way quotes are evaluated. '3 evaluates to 3 but 'sin evaluates to 'sin. Why?)

Greetings
Andreas Grenzing
>How-To-Repeat:
Try one of the following ones:

(apply compose '(not =))
(apply compose '(sin cos))
(apply map '(identity '(1 2 3)))
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: 9grenzin@informatik.uni-hamburg.de, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13502: apply on higher-order functions - produces an error
Date: Thu, 7 Feb 2013 13:14:48 -0500

 On Feb 7, 2013, at 12:44 PM, 9grenzin@informatik.uni-hamburg.de wrote:
 
 > The function "apply" works correctly on "normal" functions, e.g. (apply + '(2 3)), but not on higher-order functions, e.g. (apply compose '(not =)). It produces an error!
 
 
 It does work like a charm when used properly: 
 
 > ((apply compose `(,not ,=)) 1 2)
 #t
 
 
 What you typed in according to your bug report is this: 
 
 > > ((apply compose '(not =)) 1 2)
 
 The error you got is here: 
 
 
 > compose: contract violation
 >   expected: procedure?
 >   given: 'not
 >   argument position: 1st
 >   other arguments...:
 >    '=
 >   context...:
 >    /Users/matthias/plt/collects/racket/private/list.rkt:388:12: compose
 >    /Users/matthias/plt/collects/racket/private/misc.rkt:87:7
 
 
 Which tells you that compose was correctly applied to something from your argument list, 'not. 
 
 ;; ---
 
 In general, Racket inherits quote from Lisp in that 'sin is a symbol and '3 is still a number. History trumps logic here (perhaps), and it is such a small issue that this is fine. 
 
 When we introduce quote into a language (and quasi, back) and we have higher-order functions, we need to make a decision about what to do with the latter when quoted. Racket says that 'sin is the symbol with printname sin and that's all. As decades of Scheme programming have shown, this decision is pragmatic and useful. 
 
 

State changed from "open" to "closed" by matthias at Thu, 07 Feb 2013 13:17:31 -0500
Reason>>> misunderstanding about 'not (the symbol) and not (the function)


Responsible changed from "nobody" to "matthias" by eli at Mon, 18 Feb 2013 22:58:49 -0500
Reason>>> matthias closed

