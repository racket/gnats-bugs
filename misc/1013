From matthias@cs.rice.edu  Thu May 27 23:21:47 1999
Received: from africa.cs.rice.edu (africa.cs.rice.edu [128.42.1.175])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id XAA11142
	for <plt-gnats@cs.rice.edu>; Thu, 27 May 1999 23:21:47 -0500 (CDT)
Message-Id: <199905280421.XAA20160@africa.cs.rice.edu>
Date: Thu, 27 May 1999 23:21:47 -0500 (CDT)
From: Matthias Felleisen <matthias@cs.rice.edu>
Reply-To: matthias@rice.edu
To: plt-gnats@cs.rice.edu
Subject: libs don't have proper set! semantics
X-Send-Pr-Version: 3.101

>Number:         1013
>Category:       misc
>Synopsis:       libs don't have proper set! semantics
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Fri May 28 04:30:03 GMT 1999
>Last-Modified:  Mon Jun  7 15:06:17 CDT 1999
>Originator:     Matthias Felleisen
>Organization:
titan
>Release:        unknown
>Environment:
     100 d39
>Description:
	
    The new invoke-open-unit semantics kills set!'s on exported variables. 

>How-To-Repeat:

    bug-lib.ss

      (define bugU
	(unit/sig (set-twice a-setter) (import plt:userspace^)

	  (define set-twice 
	    (lambda x (error "can't happen")))

	  (define (a-setter x)
	    (set! set-twice (lambda (y) x)))

	  (set! set-twice (lambda (z) 5)) ))

      bugU


    bug.ss 

       ;; the following three should produce #t void #t
       (= (set-twice 'a) 5)
       (a-setter 6)
       (= (set-twice 'a) 6)

       ;; but don't because 
       (set-twice 'a) ;; is unfortunately 5 

>Fix:
   don't use old invoke-open-unit to implement repl!


>Audit-Trail:

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon Jun  7 15:05:47 1999
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Mon Jun  7 15:06:03 1999
State-Changed-Why:
I think we agree that it's a reasonable semantics after all.

>Unformatted:
