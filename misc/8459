From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jan  3 09:39:19 2007
Received: from wr-out-0506.google.com (wr-out-0506.google.com [64.233.184.239])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l03EcmcD026024
	for <bugs@bugs.plt-scheme.org>; Wed, 3 Jan 2007 09:38:48 -0500
Message-Id: <200701031438.l03EckxB026019@champlain.ccs.neu.edu>
Date: Wed, 3 Jan 2007 09:38:46 -0500
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: duplicate identifier in contracted module generated

>Number:         8459
>Category:       misc
>Synopsis:       duplicate identifier in contracted module generated
>Class:          sw-bug
>Responsible:    jacobm
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jan 03 09:40:01 -0500 2007
>Last-Modified:  Sat May 05 13:52:23 -0400 2007
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.2-svn21dec2006
>Environment:
macosx "Darwin america.local 8.8.0 Darwin Kernel Version 8.8.0: Fri Sep  8 17:18:57 PDT 2006; root:xnu-792.12.6.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "help" "acl2" "teachpack"))
Human Language: english
(current-memory-use) 102838476

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/369.2/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "browser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "finish-install" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "reduction-semantics" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "ssax" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack"!
  "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "xelda" "xml"))
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
I just got this error report: 

module: duplicate definition for identifier in: provide/contract-field-contract-string?-discard

Why? I had accidentally inverted the field name/contract pair in a struct export. 

;; --- 

In general I find that the error messages concerning 
missing or duplicate identifier definitions
at the module language level are subpar. We all get 
used to this but they remain painful. 
>How-To-Repeat:
>Fix:
There is now better error checking.
>Release-Note:
This was a contract violation, at a lower level. Duplicate identifiers don't seem like a type error (its not a
structural invariant, anyways).
>Audit-Trail:
From: "Robby Findler" <robby.findler@gmail.com>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/8459: duplicate identifier in contracted module generated
Date: Wed, 3 Jan 2007 09:22:36 -0600

 If you can send an example expression and a suggestion for a better
 error message, that would be helpful.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8459: duplicate identifier in contracted module generated
Date: Wed, 3 Jan 2007 11:11:35 -0500

 On Jan 3, 2007, at 10:22 AM, Robby Findler wrote:
 
 > If you can send an example expression and a suggestion for a better
 > error message, that would be helpful.
 >
 > Robby
 
 (module bad-error-for-ill-formed-export-struct mzscheme
    (require (lib "contract.ss"))
 
    (define-struct bad (a b))
 
    (provide/contract
     [struct bad ((string? a) (string? b))]))
 
 yields
 
 Welcome to DrScheme, version 369.2-svn21dec2006.
 Language: (module ...).
 module: duplicate definition for identifier in: provide/contract- 
 field-contract-string?-bad
 
 without high-lighting the clause with the bug.
 
 Ideally,
 
 [1] it should hightlight the first line in the provide/contract
 [2] say that a is not a defined value
 [3] MOST IDEAL: suggest that (string? a) should really be (a string?)
 
 But I can see why [3] is difficult and beyond reach.
 
 ;; ---
 
 BTW, splitting the screen messes up all kinds of things (when you  
 then flip back and forth between buffers, you lose focus; when you  
 have an unbound-identifier error with high-lighting, it doesn't  
 refocus and show the problem; etc)
 
 -- Matthias
 
 
 
 
From: "Robby Findler" <robby.findler@gmail.com>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8459: duplicate identifier in contracted module generated
Date: Wed, 3 Jan 2007 21:27:57 -0600

 Matthew: for provide/contract with structs, the programmer writes down
 the field names. How do I get those names to do error checking? Right
 now, I look at the struct info and then use string operations on the
 identifiers I get back. Is that right?
 
 On 1/3/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > On Jan 3, 2007, at 10:22 AM, Robby Findler wrote:
 >
 > > If you can send an example expression and a suggestion for a better
 > > error message, that would be helpful.
 > >
 > > Robby
 >
 > (module bad-error-for-ill-formed-export-struct mzscheme
 >    (require (lib "contract.ss"))
 >
 >    (define-struct bad (a b))
 >
 >    (provide/contract
 >     [struct bad ((string? a) (string? b))]))
 >
 > yields
 >
 > Welcome to DrScheme, version 369.2-svn21dec2006.
 > Language: (module ...).
 > module: duplicate definition for identifier in: provide/contract-
 > field-contract-string?-bad
 >
 > without high-lighting the clause with the bug.
 >
 > Ideally,
 >
 > [1] it should hightlight the first line in the provide/contract
 > [2] say that a is not a defined value
 > [3] MOST IDEAL: suggest that (string? a) should really be (a string?)
 >
 > But I can see why [3] is difficult and beyond reach.
 
 Thanks for the example. That helps a lot.
 
 That's not how I see the best errors, tho. Here's what I think we can do.
 
 I can highlight the line in the provide/contract and say "two fields
 with same name: string?". I've fixed that in my branch.
 
 If you had written two different names in there, say,
 
   (provide/contract
    [struct bad ((string? a) (boolean? b))])
 
 the error now is that `a' is free. That error comes before the
 provide/define check. That is the right error message, imo.
 
 If you had somehow written this module:
 
 (module bad-error-for-ill-formed-export-struct mzscheme
   (require (lib "contract.ss"))
 
   (define a 1)
   (define b 2)
 
   (define-struct bad (a b))
 
   (provide/contract
    [struct bad ((string? a) (boolean? b))]))
 
 You get another bad error message:
 
 ->: expected contract or procedure of arity 1, got 1
 
 but the best I can do is a runtime error:
 
 provide/contract: expected contract or procedure of arity 1, got 1.
 
 I've fixed that in my branch too.
 
 If you somehow magically did this:
 
 (module bad-error-for-ill-formed-export-struct mzscheme
   (require (lib "contract.ss"))
 
   (define a integer?)
   (define b boolean?)
 
   (define-struct bad (a b))
 
   (provide/contract
    [struct bad ((string? a) (boolean? b))]))
 
 you get no error message.
 
 Okay, I've fixed that one, but now you get a different error for the
 very first program, namely:
 
 /Users/robby/tmp.ss:7:17: provide/contract: expected field name to be
 a, but found string? at: string? in: (provide/contract (struct bad
 ((string? a) (string? b))))
 
 That's in my branch too, now.
 
 I'll release the branch when I get time to get back to fixing the
 performance bug in struct contracts (or when my co-author does).
 
 > BTW, splitting the screen messes up all kinds of things (when you
 > then flip back and forth between buffers, you lose focus; when you
 > have an unbound-identifier error with high-lighting, it doesn't
 > refocus and show the problem; etc)
 
 A separate and very old problem. With numerous bug reports from you, I
 believe. I'll ignore that for now. You'll want to talk to Matthew
 about it.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8459: duplicate identifier in contracted module generated
Date: Thu, 4 Jan 2007 14:43:56 +0800

 At Wed, 3 Jan 2007 21:27:57 -0600, "Robby Findler" wrote:
 > Matthew: for provide/contract with structs, the programmer writes down
 > the field names. How do I get those names to do error checking? Right
 > now, I look at the struct info and then use string operations on the
 > identifiers I get back. Is that right?
 
 Yes, that's the best we could do, as I remember.
 
 Matthew
 

Responsible changed from "nobody" to "robby" by eli at Fri, 04 May 2007 03:48:01 -0400
Reason>>> contracts


Responsible changed from "robby" to "jacobm" by robby at Sat, 05 May 2007 13:52:23 -0400
Reason>>> 
I believe I've fixed this bug, but I'm a little bit nervous, 
since the change I made is in code that has historically
been problematic (namely struct clauses in provide/contract).

I've beefed up the test suite a little bit, but I want more
assurance. So, I'm moving the PR to Jacob and asking him to
re-compile the .zo files in planet with the latest contract
library in his PLT tree.

Is that possible?

Thanks,
Robby

