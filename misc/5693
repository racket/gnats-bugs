From schlie@attbi.com  Sun Jul 28 11:02:37 2002
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id LAA13139
	for <bugs>; Sun, 28 Jul 2002 11:02:37 -0400
Message-Id: <200207281502.LAA13139@champlain.ccs.neu.edu>
Date: Sun, 28 Jul 2002 11:02:37 -0400
From: Paul Schlie <schlie@attbi.com>
Reply-To:
To: bugs@plt-scheme.org
Subject: DrScheme OSX, possible language bug or simply my confusion or feature

>Number:         5693
>Category:       misc
>Synopsis:       DrScheme OSX, possible language bug or simply my confusion or feature
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sun Jul 28 11:10:00 EDT 2002
>Closed-Date:    Tue Aug 20 17:17:58 EDT 2002
>Last-Modified:  Tue Aug 20 17:17:58 EDT 2002
>Originator:     Paul Schlie
>Release:        201
>Organization:
plt
>Environment:
macosx "Darwin localhost 5.5 Darwin Kernel Version 5.5: Thu May 30 14:51:26 PDT 2002; root:xnu/xnu-201.42.3.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx)

Docs Installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "CVS" "drscheme" "framework" "help" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "tex2page" "tools" "tour")

Collections:
(("/Users/paul/Desktop/plt-cvs/plt/bin/../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "drjava" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "parser-tools" "readline" "setup" "sirmail" "slatex" "slibinit" "srpersist" "stepper" "string-constants" "syntax" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))

Human Language: english
>Description:

> (define x 0)
> (eval '(define ,x (lambda (y) y)))
> x
0 ; seems reasonable
> ,x ; is this legal?
#<procedure> ; interesting?
> (,x 1) ; more interesting?
1
> (x, 1) ; where'd the #<procedure> argument below come from?
{error} procedure application:
   expected procedure, given: 0;
   arguments were: #<procedure>
> 


>How-To-Repeat:
(as above)

>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: bugs@plt-scheme.org
Cc: robby@cs.rice.edu, Paul Schlie <schlie@attbi.com>
Subject: Re: all/5693: DrScheme OSX, possible language bug or simply my confusion or feature
Date: Sun, 28 Jul 2002 10:29:55 -0600 (MDT)

 [Re-send, because I mangled addresses the first time.]
 
 Sun, 28 Jul 2002 11:02:37 -0400, Paul Schlie wrote:
 > > (define x 0)
 > > (eval '(define ,x (lambda (y) y)))
 
 Ah - the most confusing thing in standard Scheme...
 
 The above is equivalent (at the reader level) to
 
  > (eval (quote (define (unquote x) (lambda (y) y)))))
           ^-- not quasi!   ^-- define a function `unquote'
 
 Then
 
 > > ,x ; is this legal?
 
 is the same as
 
  > (unquote x)
 
 which produces the identity function by applying the newly defined
 `unquote' function to 0.
 
 > > (x, 1) ; where'd the #<procedure> argument below come from?
 > {error} procedure application:
 >    expected procedure, given: 0;
 >    arguments were: #<procedure>
 
 Ok - I'm impressed. That's even more confusing.
 
 The whitespace before and after "," doesn't matter, so the above is the
 same as
 
   (x ,1)
 
 or
 
  (x (unquote 1)) ; apply x to the require of applying the `unquote' 
                  ; function to 1
 
 
 Matthew
 

From: Paul Schlie <schlie@attbi.com>
To: Matthew Flatt <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Cc: <robby@cs.rice.edu>
Subject: Re: all/5693: DrScheme OSX, possible language bug or simply my
	confusion or feature
Date: Sun, 28 Jul 2002 12:48:22 -0400

 Got it, thanks, it never occurred to me, sorry for the noise.
 
 (all this actually began by my screwing around trying to bind a
  generated "(gensym)" to an anonymous lambda definition, where in
  the process actually first tried (define x (gensym)) (eval ...),
  stumbling upon what I though was weird, not realizing the facts.)
 
 On this related topic, I've sent in a minor addendum to my loose
 thoughts/change-request #5692 on the anonymous lambda naming policy.
 I realize that there are likely better approaches, but it seems
 that it would be nice to be able to directly reference anonymous
 lambda definitions distinctly and directly rather than than attempting
 to reference them from what may be convoluted nested list structures.
 
 Do you foresee any short term tweaks to help, or is explicitly wrapping
 them in your let expression naming extension as the best pragmatic
 short-term approach?
 
 Thanks again, -paul-
 
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org, robby@cs.rice.edu
Subject: Re: all/5693: DrScheme OSX, possible language bug or simply my
	confusion or feature
Date: Sun, 28 Jul 2002 10:51:01 -0600 (MDT)

 At Sun, 28 Jul 2002 12:48:22 -0400, Paul Schlie wrote:
 > On this related topic, I've sent in a minor addendum to my loose
 > thoughts/change-request #5692 on the anonymous lambda naming policy.
 
 Sorry that I still haven't gotten back to you about this...
 
 > Do you foresee any short term tweaks to help, or is explicitly wrapping
 > them in your let expression naming extension as the best pragmatic
 > short-term approach?
 
 No, not in the short term.
 
 There will be a good opportunity to revisit this in a couple of weeks,
 though, as we generalize structs to support new datatypes that act like
 procedures.
 
 Matthew
 
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Aug 20 17:17:58 2002
Responsible-Changed-Why:
    misc
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Tue Aug 20 17:17:58 2002
State-Changed-Why:
    qq shortcuts are confusing!
>Unformatted:

