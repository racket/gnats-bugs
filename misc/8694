From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed May 23 05:05:43 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.229])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l4N95hlu021770
	for <bugs@bugs.plt-scheme.org>; Wed, 23 May 2007 05:05:43 -0400
Message-Id: <200705230905.l4N95eM9021766@champlain.ccs.neu.edu>
Date: Wed, 23 May 2007 05:05:40 -0400
From: tilde@tilde.co.kr
To: bugs@plt-scheme.org
Subject: Incorrect results in real->decimal-string

>Number:         8694
>Category:       misc
>Synopsis:       Incorrect results in real->decimal-string
>Class:          sw-bug
>Responsible:    clements
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed May 23 05:10:01 -0400 2007
>Closed-Date:    Sat Jul 07 00:53:38 -0400 2007
>Last-Modified:  Sun Jul 08 21:15:01 -0400 2007
>Originator:     Joo ChurlSoo
>Organization:
plt
>Submitter-Id:   unknown
>Release:        Mzscheme 370
>Environment:
windows-xp
>Description:
> (real->decimal-string 1.23456789e+20)
"123456788999999995904.00"
> 1.23456789e+20
1.23456789e+020
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: tilde@tilde.co.kr, bugs@plt-scheme.org
Cc: eli@plt-scheme.org, John Clements <clements@plt-scheme.org>,
        cce@plt-scheme.org
Subject: Re: [plt-bug] all/8694: Incorrect results in real->decimal-string
Date: Tue, 29 May 2007 09:25:41 -0700

 On May 23, 2007, at 2:10 AM, tilde@tilde.co.kr wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8694
 >
 > Reported by Joo ChurlSoo for release: Mzscheme 370
 >
 > *** Description:
 >> (real->decimal-string 1.23456789e+20)
 > "123456788999999995904.00"
 >> 1.23456789e+20
 > 1.23456789e+020
 >
 > *** How to repeat:
 
 It appears that no one has responded to this...
 
 This is not a bug.  This is how IEEE doubles work.  To see this,  
 consider the result of the following program written in C:
 
 computer:/tmp clements$ gcc foo.c
 computer:/tmp clements$ ./a.out
 123456788999999995904.000000
 computer:/tmp clements$ less foo.c
 #include <stdio.h>
 #include <stdlib.h>
 
 int main () {
    double d = 1.23456789e+20;
 
    printf ("%f\n",d);
    return 1;
 }
 
 This is a FAQ.  Search the mailing list for more info, if desired.
 
 John Clements
 
 
From: "soo" <tilde@tilde.co.kr>
To: <bugs@plt-scheme.org>, <tilde@tilde.co.kr>, <clements@brinckerhoff.org>
Cc: 
Subject: Re: all/8694: Incorrect results in real->decimal-string
Date: Thu, 31 May 2007 18:04:19 +0900

  * From: John Clements <clements@brinckerhoff.org>
  * Date: Tue, 29 May 2007 09:25:41 -0700
  * Subj: Re: [plt-bug] all/8694:
 
  | On May 23, 2007, at 2:10 AM, tilde@tilde.co.kr wrote:
    >> A new problem report is waiting at
    >> http://bugs.plt-scheme.org/query/?cmd=view&pr=8694
    >> 
    >> Reported by Joo ChurlSoo for release: Mzscheme 370
    >> 
    >> *** Description:
    >>> (real->decimal-string 1.23456789e+20)
    >> "123456788999999995904.00"
    >>> 1.23456789e+20
    >> 1.23456789e+020
 
  | It appears that no one has responded to this...
  | This is not a bug.  This is how IEEE doubles work.
  | To see this,  consider the
  | result of the following program written in C:
  | computer:/tmp clements$ gcc foo.c
  | computer:/tmp clements$ ./a.out
  | 123456788999999995904.000000
  | computer:/tmp clements$ less foo.c
  | #include <stdio.h>
  | #include <stdlib.h>
 
  | int main () {
    double d = 1.23456789e+20;
 
    printf ("%f\n",d);
    return 1;
  | }
 
 If it is REAL->DECIMAL-NUMBER, I can understand the result.
 But I think REAL->DECIMAL-STRING can be defined with string-manipulated 
 procedures more efficiently in MzScheme.
 
 --
 Joo ChurlSoo 
 
 
 
 
 
From: John Clements <clements@brinckerhoff.org>
To: "soo" <tilde@tilde.co.kr>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/8694: Incorrect results in real->decimal-string
Date: Thu, 31 May 2007 09:23:02 -0700

 On May 31, 2007, at 2:04 AM, soo wrote:
 
 >  * From: John Clements <clements@brinckerhoff.org>
 >  * Date: Tue, 29 May 2007 09:25:41 -0700
 >  * Subj: Re: [plt-bug] all/8694:
 >
 >  | On May 23, 2007, at 2:10 AM, tilde@tilde.co.kr wrote:
 >>> A new problem report is waiting at
 >>> http://bugs.plt-scheme.org/query/?cmd=view&pr=8694
 >>>
 >>> Reported by Joo ChurlSoo for release: Mzscheme 370
 >>>
 >>> *** Description:
 >>>> (real->decimal-string 1.23456789e+20)
 >>> "123456788999999995904.00"
 >>>> 1.23456789e+20
 >>> 1.23456789e+020
 >
 >  | It appears that no one has responded to this...
 >  | This is not a bug.  This is how IEEE doubles work.
 >  | To see this,  consider the
 >  | result of the following program written in C:
 >  | computer:/tmp clements$ gcc foo.c
 >  | computer:/tmp clements$ ./a.out
 >  | 123456788999999995904.000000
 >  | computer:/tmp clements$ less foo.c
 >  | #include <stdio.h>
 >  | #include <stdlib.h>
 >
 >  | int main () {
 >    double d = 1.23456789e+20;
 >
 >    printf ("%f\n",d);
 >    return 1;
 >  | }
 >
 > If it is REAL->DECIMAL-NUMBER, I can understand the result.
 > But I think REAL->DECIMAL-STRING can be defined with string- 
 > manipulated
 > procedures more efficiently in MzScheme.
 
 I don't understand what you're proposing.
 
 Perhaps you can start by writing down what it is that you believe  
 this call to real->decimal-string should produce?
 
 John Clements
 
 
From: "soo" <tilde@tilde.co.kr>
To: <bugs@plt-scheme.org>, <tilde@tilde.co.kr>, <clements@brinckerhoff.org>
Cc: 
Subject: Re: all/8694: Incorrect results in real->decimal-string
Date: Fri, 1 Jun 2007 11:12:13 +0900

  * From: John Clements <clements@brinckerhoff.org>
  * Date: Thu, 31 May 2007 09:23:02 -0700
  * Subj: Re: all/8694: Incorrect results in real->decimal-string
 
  | I don't understand what you're proposing.
 
 Here are simple tests (not benchmark) and procedures.
 
 Welcome to MzScheme v370 [3m], Copyright (c) 2004-2007 PLT Scheme Inc.
 > (real->decimal-string 123e+20)
 "12299999999999998951424.00"
 > (real->fixnum-string 123e+20)
 "12300000000000000000000.0"
 > (real->decimal-string 123e-22 22)
 "0.0000000000000000000123"
 > (real->fixnum-string 123e-22)
 "0.0000000000000000000123"
 
 > (real->scientific-string -12345678.00009 12)
 "-1.234567800009e7"
 > (real->flonum-string -12345678.00009)
 "-1.234567800009e+7"
 > (real->scientific-string -12345678.00009 20)
 "-1.23456780000899990490e7"
 > (number->flonum-string -12345678.00009 20)
 "-1.23456780000900000000e+7"
 
 > (collect-garbage) (time (dotimes 10000
 	   (real->decimal-string 123e+20)
 	   (real->decimal-string 123e+20)
 	   (real->decimal-string 123e+20)
 	   (real->decimal-string 123e+20)
 	   (real->decimal-string 123e+20)))
 > cpu time: 2824 real time: 3095 gc time: 60
 > (collect-garbage) (time (dotimes 10000
 	   (real->fixnum-string 123e+20)
 	   (real->fixnum-string 123e+20)
 	   (real->fixnum-string 123e+20)
 	   (real->fixnum-string 123e+20)
 	   (real->fixnum-string 123e+20)))
 > cpu time: 1552 real time: 1683 gc time: 20
 > (collect-garbage) (time (dotimes 10000
 	   (real->decimal-string 123e-22 22)
 	   (real->decimal-string 123e-22 22)
 	   (real->decimal-string 123e-22 22)
 	   (real->decimal-string 123e-22 22)
 	   (real->decimal-string 123e-22 22)))
 > cpu time: 19728 real time: 21391 gc time: 370
 > (collect-garbage) (time (dotimes 10000
 	   (real->fixnum-string 123e-22)
 	   (real->fixnum-string 123e-22)
 	   (real->fixnum-string 123e-22)
 	   (real->fixnum-string 123e-22)
 	   (real->fixnum-string 123e-22)))
 > cpu time: 1593 real time: 1732 gc time: 10
 
 
 (define (str-index str char)
   (let ((len (string-length str)))
     (let lp ((n 0))
       (if (= n len)
 	  #f
 	  (if (char=? char (string-ref str n))
 	      n
 	      (lp (+ n 1)))))))
 
 (define (str-char-index str char start end)
   (let lp ((n start))
     (if (= n end)
 	#f
 	(if (char=? char (string-ref str n))
 	    n
 	    (lp (+ n 1))))))
 
 (define (mold str pre)
   (let ((ind (str-index str #\.)))
     (if ind
 	(let ((d-len (- (string-length str) (+ ind 1))))
 	  (cond
 	   ((= d-len pre) str)
 	   ((< d-len pre) (string-append str (make-string (- pre d-len)
 #\0)))
 	   ;;((char<? #\4 (string-ref str (+ 1 ind pre)))
 	   ;;(let ((com (expt 10 pre)))
 	   ;;  (number->string (/ (round (* (string->number str) com))
 com))))
 	   ((or (char<? #\5 (string-ref str (+ 1 ind pre)))
 		(and (char=? #\5 (string-ref str (+ 1 ind pre)))
 		     (or (< (+ 1 pre) d-len)
 			 (memv (string-ref str (+ ind (if (= 0 pre) -1
 pre)))
 			       '(#\1 #\3 #\5 #\7 #\9)))))
 	    (apply
 	     string
 	     (let* ((minus (char=? #\- (string-ref str 0)))
 		    (str (substring str (if minus 1 0) (+ 1 ind pre)))
 		    (char-list
 		     (reverse
 		      (let lp ((index (- (string-length str) 1))
 			       (raise #t))
 			(if (= -1 index)
 			    (if raise '(#\1) '())
 			    (let ((chr (string-ref str index)))
 			      (if (char=? #\. chr)
 				  (cons chr (lp (- index 1) raise))
 				  (if raise
 				      (if (char=? #\9 chr)
 					  (cons #\0 (lp (- index 1)
 raise))
 					  (cons (integer->char
 						 (+ 1 (char->integer
 chr)))
 						(lp (- index 1) #f)))
 				      (cons chr (lp (- index 1)
 raise))))))))))
 	       (if minus (cons #\- char-list) char-list))))
 	   (else
 	    (substring str 0 (+ 1 ind pre)))))
 	(string-append str "." (make-string pre #\0)))))
 
 (define (e-mold num pre)
   (let* ((str (number->string (exact->inexact num)))
 	 (e-index (str-index str #\e)))
     (if e-index
 	(string-append (mold (substring str 0 e-index) pre)
 		       (substring str e-index (string-length str)))
 	(mold str pre))))
 
 (define (flonum-mold str pre)
   (let ((e-index (str-index str #\e)))
     (string-append (mold (substring str 0 e-index) pre)
 		   (substring str e-index (string-length str)))))
 
 (define (remove-zero str len negative)
   (if negative
       (let lp ((n 1))
 	(let ((c (string-ref str n)))
 	  (cond
 	   ((char=? #\0 c) (lp (+ 1 n)))
 	   ((char=? #\. c)
 	    (if (= n 2)
 		str
 		(string-append "-" (substring str (- n 1) len))))
 	   (else
 	    (if (= n 1)
 		str
 		(string-append "-" (substring str n len)))))))
       (let lp ((n 0))
 	(let ((c (string-ref str n)))
 	  (cond
 	   ((char=? #\0 c) (lp (+ 1 n)))
 	   ((char=? #\. c)
 	    (if (= n 1)
 		str
 		(substring str (- n 1) len)))
 	   (else
 	    (if (zero? n)
 		str
 		(substring str n len))))))))
 
 (define (real->fixnum-string n)
   (let* ((str (number->string (exact->inexact n)))
 	 (len (string-length str))
 	 (e-index (str-char-index str #\e 0 len)))
     (if e-index
 	(let ((e-number (string->number (substring str (+ 1 e-index)
 len)))
 	      (d-index (str-char-index str #\. 0 e-index)))
 	  (if (negative? e-number)
 	      (if d-index
 		  (if (negative? n)
 		      (let ((p-number (- (abs e-number) (- d-index 1))))
 			(if (negative? p-number)
 			    (string-append (substring str 0
 						      (+ 1 (abs
 p-number)))
 					   "."
 					   (substring str (+ 1 (abs
 p-number))
 						      d-index)
 					   (substring str (+ 1 d-index)
 						      e-index))
 			    (string-append "-0."
 					   (make-string (abs p-number)
 #\0)
 					   (substring str 1 d-index)
 					   (substring str (+ 1 d-index)
 						      e-index))))
 		      (let ((p-number (- (abs e-number) d-index)))
 			(if (negative? p-number)
 			    (string-append (substring str 0 (abs
 p-number))
 					   "."
 					   (substring str (abs p-number)
 						      d-index)
 					   (substring str (+ 1 d-index)
 						      e-index))
 			    (string-append "0."
 					   (make-string (abs p-number)
 #\0)
 					   (substring str 0 d-index)
 					   (substring str (+ 1 d-index)
 						      e-index)))))
 		  (if (negative? n)
 		      (let ((p-number (- (abs e-number) (- e-index 1))))
 			(if (negative? p-number)
 			    (string-append (substring str 0
 						      (+ 1 (abs
 p-number)))
 					   "."
 					   (substring str (+ 1 (abs
 p-number))
 						      e-index))
 			    (string-append "-0."
 					   (make-string (abs p-number)
 #\0)
 					   (substring str 1 e-index))))
 		      (let ((p-number (- (abs e-number) e-index)))
 			(if (negative? p-number)
 			    (string-append (substring str 0 (abs
 p-number))
 					   "."
 					   (substring str (abs p-number)
 						      e-index))
 			    (string-append "0."
 					   (make-string (abs p-number)
 #\0)
 					   (substring str 0
 e-index))))))
 	      (if d-index
 		  (let ((p-number (- e-number (- e-index (+ d-index
 1)))))
 		    (if (negative? p-number)
 			;; A procedure REMOVE-ZERO is unnecessary
 			;; due to number->string.
 			;; 0.00123 -> 00.0123 or 000123
 			;; -0.00123 -> -00.0123 or -000123
 			;;(remove-zero (string-append
 			;;	      (substring str 0 d-index)
 			;;	      (substring str (+ 1 d-index)
 			;;			 (+ 1 d-index e-number))
 			;;	      "."
 			;;	      (substring str (+ 1 d-index
 e-number)
 			;;			 e-index))
 			;;	     e-index
 			;;	     (< n 0))
 			(string-append (substring str 0 d-index)
 				       (substring str (+ 1 d-index)
 						  (+ 1 d-index
 e-number))
 				       "."
 				       (substring str (+ 1 d-index
 e-number)
 						  e-index))
 			;; A procedure REMOVE-ZERO is unnecessary
 			;; due to number->string.
 			;; 0.00123 -> 00.0123 or 000123
 			;; -0.00123 -> -00.0123 or -000123
 			;;(remove-zero (string-append
 			;;	      (substring str 0 d-index)
 			;;	      (substring str (+ 1 d-index)
 e-index)
 			;;	      (make-string p-number #\0)
 			;;	      ".0")
 			;;	     (+ e-index p-number 1)
 			;;	     (< n 0))))
 			(string-append (substring str 0 d-index)
 				       (substring str (+ 1 d-index)
 e-index)
 				       (make-string p-number #\0)
 				       ".0")))
 		  (string-append (substring str 0 e-index)
 				 (make-string e-number #\0)
 				 ".0"))))
 	str)))
 
 (define (number->fixnum-string num precision)
   (if precision
       (let ((imag (imag-part num))
 	    (p (inexact->exact (abs precision))))
 	(if (zero? imag)
 	    (mold (real->fixnum-string num) p)
 	    (string-append (mold (real->fixnum-string (real-part num))
 p)
 			   (if (positive? imag) "+" "")
 			   (mold (real->fixnum-string imag) p)
 			   "i")))
       (let ((imag (imag-part num)))
 	(if (zero? imag)
 	    (real->fixnum-string num)
 	    (string-append (real->fixnum-string (real-part num))
 			   (if (positive? imag) "+" "")
 			   (real->fixnum-string imag)
 			   "i")))))
 
 (define (non-0-index str start end)
   (let lp ((n start))
     (if (char=? #\0 (string-ref str n))
 	(lp (+ 1 n))
 	 n)))
 
 (define (non-0-dot-index str start end)
   (let lp ((n (- end 1)))
     (let ((c (string-ref str n)))
       (if (or (char=? #\0 c) (char=? #\. c))
 	  (lp (- n 1))
 	      n))))
 
 (define (real->flonum-string n)
   (let* ((str (number->string (exact->inexact n)))
 	 (len (string-length str))
 	 (e-index (str-char-index str #\e 0 len)))
     (if e-index
 	str
 	(let ((d-index (str-char-index str #\. 0 len)))
 	  (if (< -1 n 1)
 	      (if (zero? n)
 		  "0.0e+0"
 		  (let ((n-index (non-0-index str (+ 1 d-index) len)))
 		    (string-append (if (< n 0) "-" "")
 				   (substring str n-index (+ 1 n-index))
 				   "."
 				   (if (= n-index (- len 1))
 				       "0"
 				       (substring str (+ 1 n-index)
 len))
 				   "e-"
 				   (number->string (- n-index
 d-index)))))
 	      (let ((n-index (non-0-dot-index str 0 len)))
 		(if (< n-index d-index)
 		    (if (negative? n)
 			(string-append (substring str 0 2)
 				       "."
 				       (if (= n-index 1)
 					   "0"
 					   (substring str 2 (+ 1
 n-index)))
 				       "e+"
 				       (number->string (- d-index 2)))
 			(string-append (substring str 0 1)
 				       "."
 				       (if (= n-index 0)
 					   "0"
 					   (substring str 1 (+ 1
 n-index)))
 				       "e+"
 				       (number->string (- d-index 1))))
 		    (if (negative? n)
 			(string-append (substring str 0 2)
 				       "."
 				       (substring str 2 d-index)
 				       (substring str (+ 1 d-index)
 						  (+ 1 n-index))
 				       "e+"
 				       (number->string (- d-index 2)))
 			(string-append (substring str 0 1)
 				       "."
 				       (substring str 1 d-index)
 				       (substring str (+ 1 d-index)
 						  (+ 1 n-index))
 				       "e+"
 				       (number->string (- d-index
 1)))))))))))
 
 (define (number->flonum-string num precision)
   (if precision
       (let ((p (inexact->exact (abs precision)))
 	    (imag (imag-part num)))
 	(if (zero? imag)
 	    (flonum-mold (real->flonum-string num) p)
 	    (string-append
 	     (flonum-mold (real->flonum-string (real-part num)) p)
 	     (if (positive? imag) "+" "")
 	     (flonum-mold (real->flonum-string imag) p)
 	     "i")))
       (let ((imag (imag-part num)))
 	(if (zero? imag)
 	    (real->flonum-string num)
 	    (string-append (real->flonum-string (real-part num))
 			   (if (positive? imag) "+" "")
 			   (real->flonum-string imag)
 			   "i")))))
 
 (define-syntax dotimes
   (syntax-rules ()
     ((dotimes (i count) b d ...)
      (do ((i 0 (+ i 1)))
 	 ((= i count))
        b d ...))
     ((dotimes count b d ...)
      (do ((i 0 (+ i 1)))
 	 ((= i count))
        b d ...))))
 
 --
 Joo ChurlSoo 
 
 
 
 
 
From: John Clements <clements@brinckerhoff.org>
To: "soo" <tilde@tilde.co.kr>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/8694: Incorrect results in real->decimal-string
Date: Thu, 31 May 2007 21:48:51 -0700

 On May 31, 2007, at 7:12 PM, soo wrote:
 
 >  * From: John Clements <clements@brinckerhoff.org>
 >  * Date: Thu, 31 May 2007 09:23:02 -0700
 >  * Subj: Re: all/8694: Incorrect results in real->decimal-string
 >
 >  | I don't understand what you're proposing.
 >
 > Here are simple tests (not benchmark) and procedures.
 >
 > Welcome to MzScheme v370 [3m], Copyright (c) 2004-2007 PLT Scheme Inc.
 >> (real->decimal-string 123e+20)
 > "12299999999999998951424.00"
 >> (real->fixnum-string 123e+20)
 > "12300000000000000000000.0"
 >> (real->decimal-string 123e-22 22)
 > "0.0000000000000000000123"
 >> (real->fixnum-string 123e-22)
 > "0.0000000000000000000123"
 
 ...
 
 No, this is not what I asked.  I'm sorry to be so pedantic, but what  
 do you believe the _correct_ result should be for
 
 (real->decimal-string 1.23456789e+20 2)
 
 ?
 
 John Clements
 
 
From: "soo" <tilde@tilde.co.kr>
To: <bugs@plt-scheme.org>, <tilde@tilde.co.kr>, <clements@brinckerhoff.org>
Cc: 
Subject: Re: all/8694: Incorrect results in real->decimal-string
Date: Fri, 1 Jun 2007 15:47:32 +0900

  * From: John Clements <clements@brinckerhoff.org>
  * Date: Thu, 31 May 2007 21:48:51 -0700
  * Subj: Re: all/8694: Incorrect results in real->decimal-string
 
  | On May 31, 2007, at 7:12 PM, soo wrote:
    >> * From: John Clements <clements@brinckerhoff.org>
    >> * Date: Thu, 31 May 2007 09:23:02 -0700
    >> * Subj: Re: all/8694: Incorrect results in real->decimal-string
    >> 
    >> | I don't understand what you're proposing.
    >> 
    >> Here are simple tests (not benchmark) and procedures.
    >> 
    >> Welcome to MzScheme v370 [3m], Copyright (c) 2004-2007 PLT Scheme
 Inc.
    >>> (real->decimal-string 123e+20)
    >> "12299999999999998951424.00"
    >>> (real->fixnum-string 123e+20)
    >> "12300000000000000000000.0"
    >>> (real->decimal-string 123e-22 22)
    >> "0.0000000000000000000123"
    >>> (real->fixnum-string 123e-22)
    >> "0.0000000000000000000123"
 
  | ...
 
  | No, this is not what I asked.  I'm sorry to be so pedantic, but what
 do you
  | believe the _correct_ result should be for
 
 Although I am neither mathemtician nor computer scientist, I think the
 correct
 result should be for a programming language to be.  Programming is not
 hard
 unlike life because it is a simple game of true and false unlike life.
 
 --
 Joo ChurlSoo 
 
 
 
 
 
From: "soo" <tilde@tilde.co.kr>
To: <bugs@plt-scheme.org>, <tilde@tilde.co.kr>, <clements@brinckerhoff.org>
Cc: 
Subject: Re: all/8694: Incorrect results in real->decimal-string
Date: Sat, 2 Jun 2007 04:07:47 +0900

 Although I don't know well C and Common Lisp as well as Scheme,
 I can do some tests.
 Take a look at the following.
 
 FORMAT written 1992-1994 by Dirk Lutzebaeck (lutzeb@cs.tu-berlin.de)
 for Scheme seems to be more correct than FORMAT of Common Lisp.
 
 Welcome to MzScheme v370 [3m], Copyright (c) 2004-2007 PLT Scheme Inc.
 > (real->decimal-string 123e+20)
 "12299999999999998951424.00"
 > (real->fixnum-string 123e+20)
 "12300000000000000000000.0"
 > (slib-format  "~f" 123e+20)
 "12300000000000000000000.0"
 > (real->scientific-string -12345678.00009 12)
 "-1.234567800009e7"
 > (real->flonum-string -12345678.00009)
 "-1.234567800009e+7"
 > (slib-format "~e" -12345678.00009)
 "-1.234567800009E+7"
 > (real->scientific-string -12345678.00009 20)
 "-1.23456780000899990490e7"
 > (number->flonum-string -12345678.00009 20)
 "-1.23456780000900000000e+7"
 > (slib-format "~,20e" -12345678.00009)
 "-1.23456780000900000000E+7"
 
 soo@iniTerm:~$ clisp
   i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
   I I I I I I I      8     8   8           8     8     o  8    8
   I  \ `+' /  I      8         8           8     8        8    8
    \  `-+-'  /       8         8           8      ooooo   8oooo
     `-__|__-'        8         8           8           8  8
         |            8     o   8           8     o     8  8
   ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8
 
 Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
 Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
 Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
 Copyright (c) Bruno Haible, Sam Steingold 1999-2001
 
 
 [1]> (format nil "~f" 123e+20)
 "12300000000000000000000.0"
 [2]> (format nil "~,20e" -12345678.00009)
 "-1.23456776000000000000E+7"
 
 soo@iniTerm:~$ sbcl 
 This is SBCL 0.7.2, an implementation of ANSI Common Lisp.
 
 SBCL is derived from the CMU CL system created at Carnegie Mellon
 University.
 Besides software and documentation originally created at Carnegie Mellon
 University, SBCL contains some software originally from the
 Massachusetts
 Institute of Technology, Symbolics Incorporated, and Xerox Corporation,
 and
 material contributed by volunteers since the release of CMU CL into the
 public domain. See the CREDITS file in the distribution for more
 information.
 
 SBCL is a free software system, provided as is, with absolutely no
 warranty.
 It is mostly in the public domain, but also includes some software
 copyrighted
   Massachusetts Institute of Technology, 1986;
   Symbolics, Inc., 1989, 1990, 1991, 1992; and
   Xerox Corporation, 1985, 1986, 1987, 1988, 1989, 1990
 used under BSD-style licenses allowing copying only under certain
 conditions.
 See the COPYING file in the distribution for more information.
 
 More information on SBCL is available at <http://sbcl.sourceforge.net/>.
 * (format nil "~f" 123e+20)
 
 "1.23e+22"
 * (format nil "~,20e" -12345678.00009)
 
 "-1.23456780000000000000e+7"
 --
 Joo ChurlSoo 
 
 
 
 
 

Responsible changed from "nobody" to "clements" by eli at Fri, 06 Jul 2007 23:03:13 -0400
Reason>>> (I'm not sure where this has come to a conclusion, John -- 
pass it around if there is an issue)


State changed from "open" to "closed" by clements at Sat, 07 Jul 2007 00:53:38 -0400
Reason>>> no evidence that this is a bug.

From: John Clements <clements@brinckerhoff.org>
To: eli@plt-scheme.org, bugs@plt-scheme.org, clements@plt-scheme.org,
        soo <tilde@tilde.co.kr>
Cc: 
Subject: Re: misc/8694: Incorrect results in real->decimal-string
Date: Sat, 7 Jul 2007 00:52:19 -0400

 %3Fcmd%3Dview%2520audit-trail%26database%3Ddefault%26pr%3D8694
 
 I would like to close this bug.  It's not clear to me that you (Joo  
 ChurlSoo) are satisfied--indeed, it very much appears that you are  
 not--but you repeatedly failed to communicate what it is that you  
 believed that this call should be producing;  it appears to me that  
 you are unhappy about the fact that mzscheme uses IEEE floating point  
 numbers.  I would encourage you to take a closer look at mzscheme's  
 precise numbers (rationals), which can express the computations that  
 you're looking for in a precise way.
 
 I certainly hope that you are satisfied and that you'll continue to  
 use Mz/DrScheme.
 
 Thanks!
 
 John Clements
 
 
From: "soo" <tilde@tilde.co.kr>
To: <bugs@plt-scheme.org>, <tilde@tilde.co.kr>,
        "'John Clements'" <clements@brinckerhoff.org>
Cc: 
Subject: Re: misc/8694: Incorrect results in real->decimal-string
Date: Mon, 9 Jul 2007 10:14:09 +0900

  * From: John Clements <clements@brinckerhoff.org>
  * Date: Sat, 7 Jul 2007 00:52:19 -0400
  * Subj: Re: misc/8694: Incorrect results in real->decimal-string
 
  | it appears to me that you are unhappy about the fact that mzscheme
 uses
  | IEEE floating point numbers.  I would encourage you to take a closer
 look
  | at mzscheme's precise numbers (rationals), which can express the
  | computations that you're looking for in a precise way.
 
 Thank you for your advice.
 
 --
 Joo ChurlSoo 
 
 
 
 
 
