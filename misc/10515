From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Oct  6 15:09:45 2009
Received: from mail-yx0-f176.google.com (mail-yx0-f176.google.com [209.85.210.176])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n96J9eRv024922
	for <bugs@bugs.plt-scheme.org>; Tue, 6 Oct 2009 15:09:40 -0400
Message-Id: <200910061909.n96J9Zpi024914@champlain.ccs.neu.edu>
Date: Tue, 6 Oct 2009 15:09:35 -0400
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Error using splicing syntax classes

>Number:         10515
>Category:       misc
>Synopsis:       Error using splicing syntax classes
>Class:          sw-bug
>Responsible:    ryanc
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Oct 06 15:12:01 -0400 2009
>Closed-Date:    Wed May 04 04:39:40 -0400 2011
>Last-Modified:  Wed May 04 04:39:40 -0400 2011
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.2.4
>Environment:
MacPPC / Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10.5; en-US; rv:1.9.0.1) Gecko/2008070206 Firefox/3.0.1
>Description:
The syntax/parse collection mis-applies car if I use a splicing syntax class without wrapping it in ~seq.  Here is a mzscheme transcript demonstrating the problem:
>How-To-Repeat:
Welcome to MzScheme v4.2.2.4 [3m], Copyright (c) 2004-2009 PLT Scheme Inc.
> (require syntax/parse)
> (define-splicing-syntax-class term
    #:attributes [body check]
    (pattern (~seq body:expr #:? e:expr) #:with check #'(eval/predicate e))
    (pattern (~seq body:expr #:= e:expr) #:with check #'(eval/equal? e))
    (pattern (~seq body:expr #:! e:expr) #:with check #'(eval/failure e))
    (pattern body:expr #:with check #'eval/success))
> (syntax-parse #'(a #:= b) [(t:term ...) (syntax ([t.body t.check] ...))])
car: expects argument of type <pair>; given ()

 === context ===
/Users/cce/plt/two/collects/syntax/stx.ss:37:0: stx-car
/Users/cce/plt/two/collects/syntax/private/stxparse/runtime.ss:276:0: stx-list-take
/Users/cce/plt/two/collects/scheme/private/misc.ss:74:7

>  (syntax-parse #'(a #:= b) [((~seq t:term) ...) (syntax ([t.body t.check] ...))])
#<syntax::495 ((a (eval/equal? b)))>
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "ryanc" by ryanc at Wed, 04 May 2011 04:39:40 -0400
Reason>>> syntax/parse

State changed from "open" to "closed" by ryanc at Wed, 04 May 2011 04:39:40 -0400
Reason>>> fixed

