From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jun  9 19:35:14 2011
Received: from mail-vw0-f44.google.com (mail-vw0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p59NZBW7015947
	for <bugs@bugs.plt-scheme.org>; Thu, 9 Jun 2011 19:35:12 -0400
Message-Id: <201106092335.p59NZ8H1015942@champlain.ccs.neu.edu>
Date: Thu, 9 Jun 2011 19:35:08 -0400
From: eric.hanchrow@gmail.com
To: bugs@racket-lang.org
Subject: How about a "setof" predicate?

>Number:         11969
>Category:       misc
>Synopsis:       How about a "setof" predicate?
>Class:          change-request
>Responsible:    ryanc
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jun 09 19:36:01 -0400 2011
>Closed-Date:    Wed Jun 22 15:20:29 -0400 2011
>Last-Modified:  Wed Jun 22 15:20:29 -0400 2011
>Originator:     Eric Hanchrow
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.1
>Environment:
unix "Linux erich-laptop 2.6.38-8-generic #42-Ubuntu SMP Mon Apr 11 03:31:50 UTC 2011 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 101154056

Collections:
("/home/erich/.racket/5.1.1/collects"
 ("amazon"))
("/usr/local/racket-5.1.1/collects"
 ("net" "trace" "dynext" "errortrace" "mzlib" "hierlist" "typed" "launcher" "browser" "test-box-recovery" "profile" "test-engine" "mzscheme" "games" "embedded-gui" "parser-tools" "drscheme" "version" "mrlib" "r6rs" "datalog" "s-exp" "rackunit" "unstable" "mzcom" "preprocessor" "schemeunit" "eopl" "deinprogramm" "texpict" "config" "syntax" "frtime" "file" "gui-debugger" "html" "defaults" "scribble" "scheme" "slatex" "scribblings" "icons" "scriblib" "mysterx" "compiler" "framework" "racket" "at-exp" "ffi" "reader" "xml" "2htdp" "macro-debugger" "planet" "readline" "plai" "lang" "algol60" "stepper" "rnrs" "redex" "lazy" "swindle" "graphics" "sgl" "wxme" "r5rs" "srfi" "tex2page" "plot" "picturing-programs" "typed-scheme" "setup" "syntax-color" "teachpack" "racklog" "info-domain" "help" "openssl" "combinator-parser" "mred" "htdp" "raco" "web-server" "make" "drracket" "string-constants" "data" "slideshow"))

Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
Behold:

#lang racket

(require rackunit)

(define (setof pred)
  (lambda (thing)
    (and (set? thing)
         (for/and ([item (in-set thing)])
                  (pred item)))))

(check-true  ((setof integer?) (set)))
(check-true  ((setof integer?) (set 1 2 3)))
(check-false ((setof integer?) (set 1 2 'frotz 3)))
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: eric.hanchrow@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11969: How about a "setof" predicate?
Date: Fri, 10 Jun 2011 00:34:43 -0600

 On 06/09/2011 05:36 PM, eric.hanchrow@gmail.com wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=11969
 >
 > Reported by Eric Hanchrow for release: 5.1.1
 >
 > *** Description:
 > Behold:
 >
 > #lang racket
 >
 > (require rackunit)
 >
 > (define (setof pred)
 >    (lambda (thing)
 >      (and (set? thing)
 >           (for/and ([item (in-set thing)])
 >                    (pred item)))))
 >
 > (check-true  ((setof integer?) (set)))
 > (check-true  ((setof integer?) (set 1 2 3)))
 > (check-false ((setof integer?) (set 1 2 'frotz 3)))
 
 The 'set/c' function does just that. If you give 'set/c' a flat 
 contract, you get back a flat contract, and flat contracts are 
 applicable as predicates.
 
    > ((set/c integer?) (set 1 2 3))
    #t
    > ((set/c integer?) (set 1 2 'frotz 3))
    #f
 
 Ryan
From: Robby Findler <robby@eecs.northwestern.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: eric.hanchrow@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11969: How about a "setof" predicate?
Date: Fri, 10 Jun 2011 09:11:53 -0500

 And boy do I wish that they weren't. :(
 
 (Ie, I think that there should be an explicit coercion to turn the
 flat-contract into a predicate.)
 
 Robby
 
 On Fri, Jun 10, 2011 at 1:34 AM, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 > On 06/09/2011 05:36 PM, eric.hanchrow@gmail.com wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=11969
 >>
 >> Reported by Eric Hanchrow for release: 5.1.1
 >>
 >> *** Description:
 >> Behold:
 >>
 >> #lang racket
 >>
 >> (require rackunit)
 >>
 >> (define (setof pred)
 >>   (lambda (thing)
 >>     (and (set? thing)
 >>          (for/and ([item (in-set thing)])
 >>                   (pred item)))))
 >>
 >> (check-true  ((setof integer?) (set)))
 >> (check-true  ((setof integer?) (set 1 2 3)))
 >> (check-false ((setof integer?) (set 1 2 'frotz 3)))
 >
 > The 'set/c' function does just that. If you give 'set/c' a flat contract,
 > you get back a flat contract, and flat contracts are applicable as
 > predicates.
 >
 >  > ((set/c integer?) (set 1 2 3))
 >  #t
 >  > ((set/c integer?) (set 1 2 'frotz 3))
 >  #f
 >
 > Ryan
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Ryan Culpepper <ryanc@ccs.neu.edu>, eric.hanchrow@gmail.com,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11969: How about a "setof" predicate?
Date: Fri, 10 Jun 2011 10:18:29 -0400

 BTW, I find the use of for/and really bad in this case; andmap is so much better. 
 
 I didn't know set/c existed (even though I looked for it) and I wrote it like this: 
 
 (define (setof c)
   (define p (flat-contract-predicate c))
   (define n (format "(setof ~a)" (contract-name c)))
   (flat-named-contract n (and/c set? (lambda (s) (andmap p (set-map s values))))))
 
 
 
 
 On Jun 10, 2011, at 10:11 AM, Robby Findler wrote:
 
 > And boy do I wish that they weren't. :(
 > 
 > (Ie, I think that there should be an explicit coercion to turn the
 > flat-contract into a predicate.)
 > 
 > Robby
 > 
 > On Fri, Jun 10, 2011 at 1:34 AM, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 >> On 06/09/2011 05:36 PM, eric.hanchrow@gmail.com wrote:
 >>> 
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=11969
 >>> 
 >>> Reported by Eric Hanchrow for release: 5.1.1
 >>> 
 >>> *** Description:
 >>> Behold:
 >>> 
 >>> #lang racket
 >>> 
 >>> (require rackunit)
 >>> 
 >>> (define (setof pred)
 >>>   (lambda (thing)
 >>>     (and (set? thing)
 >>>          (for/and ([item (in-set thing)])
 >>>                   (pred item)))))
 >>> 
 >>> (check-true  ((setof integer?) (set)))
 >>> (check-true  ((setof integer?) (set 1 2 3)))
 >>> (check-false ((setof integer?) (set 1 2 'frotz 3)))
 >> 
 >> The 'set/c' function does just that. If you give 'set/c' a flat contract,
 >> you get back a flat contract, and flat contracts are applicable as
 >> predicates.
 >> 
 >>  > ((set/c integer?) (set 1 2 3))
 >>  #t
 >>  > ((set/c integer?) (set 1 2 'frotz 3))
 >>  #f
 >> 
 >> Ryan
 >> 
 
 
From: Eric Hanchrow <eric.hanchrow@gmail.com>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11969: How about a "setof" predicate?
Date: Fri, 10 Jun 2011 07:26:19 -0700

 On Thu, Jun 9, 2011 at 11:34 PM, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 > The 'set/c' function does just that. If you give 'set/c' a flat contract,
 > you get back a flat contract, and flat contracts are applicable as
 > predicates.
 
 Aha!  I'd noticed that set/c existed, but it didn't occur to me that
 it worked that way.
 
 Why is there both "list/c" and "listof", but only "set/c", and no "setof"?

Responsible changed from "nobody" to "ryanc" by ryanc at Wed, 22 Jun 2011 15:20:29 -0400
Reason>>> answered

State changed from "open" to "closed" by ryanc at Wed, 22 Jun 2011 15:20:29 -0400
Reason>>> resolved

