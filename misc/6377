From nobody@champlain.ccs.neu.edu  Thu Jul 24 03:53:55 2003
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id DAA01803
	for bugs@plt-scheme.org; Thu, 24 Jul 2003 03:53:55 -0400
Message-Id: <200307240753.DAA01803@champlain.ccs.neu.edu>
Date: Thu, 24 Jul 2003 03:53:55 -0400
From: hari@uchicago.edu
To: bugs@plt-scheme.org
Subject: (set-cdr! s r)  in a procedure P changes the parameters of  the program calling P. 

>Number:         6377
>Category:       misc
>Synopsis:       (set-cdr! s r)  in a procedure P changes the parameters of  the program calling P.
>Class:          not-a-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jul 24 03:55:00 -0400 2003
>Closed-Date:    Thu Jul 24 07:41:12 -0400 2003
>Last-Modified:  Fri May 02 22:30:06 -0400 2008
>Originator:     Hariharan Narayanan
>Organization:
plt
>Submitter-Id:   unknown
>Release:        
>Environment:
unknown-platform
>Description:
set-cdr! seems to mutilate parameters passed a
 procedure containing to it...
for example
(define set0
  (lambda (s)
    (begin (set-cdr! s (list)) s)))
followed by 
(let ((s (list 1 2 3))) (begin (display (set0 s)) 
(display s)))
results in 
(1)(1),
while it ought to result in
(1)(1 2 3).
>How-To-Repeat:
(define set0
  (lambda (s)
    (begin (set-cdr! s (list)) s)))
(let ((s (list 1 2 3))) (begin (display (set0 s)) 
(display s)))
>Fix:
>Release-Note:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: hari@uchicago.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/6377: (set-cdr! s r)  in a procedure P changes the parameters of  the program calling P. 
Date: Thu, 24 Jul 2003 08:28:52 -0400

 That's the standard call-by-value semantics, according to the Scheme Report
 and the literature on parameter-passing. Put differently, set! would change
 a local variable, but set-cdr! changes the value of the variable. 
 
 Pls contact Prof Robert Bruce Findler in the CS department at Chicago. 
 
 -- Matthias
 
 At Thu, 24 Jul 2003 03:53:55 -0400, hari@uchicago.edu wrote:
 > You may claim or edit this problem report at
 > 
 > https://internal.plt-scheme.org/cgis-bin/gnatsweb.pl?cmd=edit&pr=6377&database=plt
 > 
 > >Number:         6377
 > >Category:       all
 > >Synopsis:       (set-cdr! s r)  in a procedure P changes the parameters of  the program calling P.
 > >Confidential:   no
 > >Severity:       serious
 > >Priority:       medium
 > >Responsible:    eli
 > >State:          open
 > >Class:          sw-bug
 > >Submitter-Id:   unknown
 > >Arrival-Date:   Thu Jul 24 03:55:00 EDT 2003
 > >Closed-Date:
 > >Last-Modified:
 > >Originator:     Hariharan Narayanan
 > >Release:        
 > >Organization:
 > plt
 > >Environment:
 > unknown-platform
 > >Description:
 > set-cdr! seems to mutilate parameters passed a
 >  procedure containing to it...
 > for example
 > (define set0
 >   (lambda (s)
 >     (begin (set-cdr! s (list)) s)))
 > followed by 
 > (let ((s (list 1 2 3))) (begin (display (set0 s)) 
 > (display s)))
 > results in 
 > (1)(1),
 > while it ought to result in
 > (1)(1 2 3).
 > 
 > >How-To-Repeat:
 > (define set0
 >   (lambda (s)
 >     (begin (set-cdr! s (list)) s)))
 > (let ((s (list 1 2 3))) (begin (display (set0 s)) 
 > (display s)))
 > >Fix:
 > >Release-Note:
 > >Audit-Trail:
 > >Unformatted:
 
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Thu Jul 24 07:41:12 2003
State-Changed-Why:
    this is cbv.
Class changed from "sw-bug" to "not-a-bug" by eli at Fri, 02 May 2008 22:30:06 -0400
Reason>>> .

Responsible changed from "eli" to "robby" by eli at Fri, 02 May 2008 22:30:06 -0400
Reason>>> .

>Unformatted:
