From jensaxel@soegaard.net  Wed May 21 11:41:50 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id LAA22453
	for <bugs>; Wed, 21 May 2003 11:41:46 -0400
Message-Id: <200305211541.LAA22453@champlain.ccs.neu.edu>
Date: Wed, 21 May 2003 11:41:46 -0400
From: Jens Axel Søgaard <jensaxel@soegaard.net>
To: bugs@plt-scheme.org
Subject: send: target is not an obejct: ... for method: get-admin

>Number:         6277
>Category:       misc
>Synopsis:       send: target is not an obejct: ... for method: get-admin
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed May 21 11:45:01 -0400 2003
>Closed-Date:    Fri Jun 27 09:13:59 -0400 2003
>Last-Modified:  Mon May 05 16:14:52 -0400 2008
>Originator:     Jens Axel Søgaard
>Organization:
titan
>Submitter-Id:   unknown
>Release:        204
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 1" (win32\i386) (get-display-depth) = 32
Docs Installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "icons" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("C:\\PROGRA~1\\PLT\\./collects/setup/..\\..\\collects\\mzlib\\..\\..\\collects" ("afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mzlib" "mzscheme" "net" "parser-tools" "setup" "slibinit" "srfi" "stepper" "string-constants" "syntax" "test-suite" "tex2page" "version" "web-server" "xml")))
 
Human Language: danish
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Temmelig omfattende Scheme") #6(#f write mixed-fraction-e #f #t debug))
>Description:
I get the following internal error from DrScheme 204 winXP.

  send: target is not an object: 
  |C:\Documents and Settings\js\Skrivebord\BOG\Datastrukturer\Okasaki\set.scm| 
  for method: get-admin

To reproduce:

  1. Save the three files below in
      "unbalanced-bst.scm",  "set.scm" and "ordered.scm".
  2. Open "unbalanced.scm" 
  3. Click execute

NB: A possibility to attach source files with an bug report would be nice.


>How-To-Repeat:
;;; unbalanced-bst.scm  --  Jens Axel Søgaard

; Unbalanced search trees

(include "set.scm")

(define simple-unbalanced-search-tree-set@
  (simple-set->set
   (unit/sig simple-set^
     (import)
     
     ; An ST (search tree) is 
     ;     empty
     ; or 
     ;     (st x l r)
     ; where l and r are search trees and (elements) < x < (elements r),
     ; with respect to the given order.
     
     (define empty '())
     (define empty? null?)
     
     (define-struct search-tree (elm left right))
     (define st make-search-tree)
     ;(define (st x l r) (make-st x l r))
     (define left  search-tree-left)
     (define elm   search-tree-elm)
     (define right search-tree-right)
     
     (define (elm> x y)
       (elm< y x))
     
     (define (insert1 x s)
       ; insert x in s
       ; if x is present (wrt to elm=) then replace old-x with new
       (cond
         [(empty? s)        (st x empty empty)]
         [(elm< x (elm s))  (st (elm s) (insert1 x (left s)) (right s))]
         [(elm> x (elm s))  (st (elm s) (left s) (insert1 x (right s)))]
         [else              (st x (left s) (right s))]))
     
     (define (member? x s)
       (cond
         [(empty? s)        #f]
         [(elm< x (elm s))  (member? x (left s))]
         [(elm> x (elm s))  (member? x (right s))]
         [else              #t]))
     
     (define (foldl f base s)
       (define (foldl- base s)
         (if (empty? s)
             base
             (foldl- (f (elm s) (foldl- base (right s)))
                     (left s))))
       (foldl- base s))

     (define (union s1 s2)
       (foldl (lambda (x s)
                (insert1 x s))
              s2 s1))
     
     (define (remove1 x s)
       (if (empty? s)
           empty
           (cond
             [(elm< x (elm s))  (st (elm s) (remove x (left s)) (right s))]
             [(elm> x (elm s))  (st (elm s) (left s) (remove x (right s)))]
             [else              (union (left s) (left s))])))
     )))


(define unbalanced-search-tree-set@
  (unit/sig set^ 
    (import ordered^)
    
    ; An ST (search tree) is 
    ;     empty
    ; or 
    ;     (st x l r)
    ; where l and r are search trees and (elements) < x < (elements r),
    ; with respect to the given order.
    
    (define empty '())
    (define empty? null?)
    
    (define-struct search-tree (elm left right))
    (define st make-search-tree)
    ;(define (st x l r) (make-st x l r))
    (define left  search-tree-left)
    (define elm   search-tree-elm)
    (define right search-tree-right)
    
    (define (elm> x y)
      (elm< y x))
    
    (define (singleton x)
      (insert1 x empty))
    
    (define (insert1 x s)
      ; insert x in s
      ; if x is present (wrt to elm=) then replace old-x with new
      (cond
        [(empty? s)        (st x empty empty)]
        [(elm< x (elm s))  (st (elm s) (insert1 x (left s)) (right s))]
        [(elm> x (elm s))  (st (elm s) (left s) (insert1 x (right s)))]
        [else              (st x (left s) (right s))]))
    
    (define (insert s . xs)
      (list:foldl insert1 s xs))
    
    (define (member? x s)
      (cond
        [(empty? s)        #f]
        [(elm< x (elm s))  (member? x (left s))]
        [(elm> x (elm s))  (member? x (right s))]
        [else              #t]))
    
    (define (foldl f base s)
      (define (foldl- base s)
        (if (empty? s)
            base
            (foldl- (f (elm s) (foldl- base (right s)))
                    (left s))))
      (foldl- base s))
    
    (define (union s1 s2)
      (foldl insert1 s2 s1))
    
    (define (remove1 x s)
      (if (empty? s)
          empty
          (cond
            [(elm< x (elm s))  (st (elm s) (remove x (left s)) (right s))]
            [(elm> x (elm s))  (st (elm s) (left s) (remove x (right s)))]
            [else              (union (left s) (left r))])))
    
    (define (remove s xs)
      (list:foldl remove1 s xs))
    
    (define (filter p? s)
      (foldl (lambda (x s)
               (if (p? x)
                   (cons x s)
                   s))
             '() s))
    
    (define (intersection s1 s2)
      (filter (lambda (x)
                (member? x s2))
              s1))
    
    (define (difference s1 s2)
      (filter (lambda (x)
                (not (member? x s2)))
              s1))
    
    (define (subset? s1 s2)
      (andmap (lambda (x)
                (member? x s2))
              s1))
    
    (define (equal? s1 s2)
      (and (subset? s1 s2)
           (subset? s2 s1)))
    
    (define (size s)
      (foldl (lambda (x n)
               (add1 n))
             0 s))
    
    (define (set . xs)
      (list:foldl insert1 empty xs))))

;;; TEST

(use-set (instantiate-ordered-set simple-unbalanced-search-tree-set@ integers@))
empty
(insert empty 1)
(insert (insert empty 2) 1)
(insert (insert empty 1) 2)
(singleton 3)
(insert empty 4 5 6 7 4 5)


(define A (set 1 2 3))
(define B (set 3 4 5))
(union A B)
(intersection A B)
(difference A B)

;(use-set (instantiate-ordered-set ordered-list-set@ strings@))
;(union (list "a" "b" "c") (list "a" "c" "d"))

(define (interval m n)
  (if (> m n)
      '()
      (cons m (interval (add1 m) n))))

-----------------------------------------------

; set.scm  --  Jens Axel Søgaard -- 17 may 2003

(include "ordered.scm")

(require (lib "list.ss" "mzlib"))
(define list:foldl foldl)

; Set
(define-signature set^    
  (empty         ; empty = {}
   singleton     ; (singleton a) = { a }
   set           ; (set x1 ...) =  {x1, ...}

   union         ; x in (union A B)          <=>   x in A  or   x in B
   intersection  ; x in (intersection A B)   <=>   x in A  and  x in B
   difference    ; x in (difference A B)     <=>   x in A  and  x not in B
   
   empty?        ; (empty? A)          <=>   A={}
   member?       ; (member? x A)       <=>   x in A
   subset?       ; (subset? A B)       <=>  (x in A   =>  x in B)
   equal?        ; (equal? A B)        <=>  (x in A  <=>  x in B)
   
   insert        ; (insert A x1 ...) = A U {x1, ...}    
   remove        ; (remove A x1 ...) = A \ {x1, ...}
   size          ; (size (set x1 ... xn)) = n
   foldl         ; (fold f b (set x1 ...)) = (f ... (f x2 (f x1 b))...)
   ))

; Simple Set
(define-signature simple-set^
  (empty
   empty?
   insert1       ; (insert1 x A) =  A U {x1}
   remove1       ; (remove1 x A) =  A \ {x1}
   member?
   foldl))


; instantiate-ordered-set : ordered-set-unit ordered-unit -> compound-unit
;  return set-unit representing a set of alpha elements
(define (instantiate-ordered-set ordered-set@ order@)
  (compound-unit/sig 
    (import)
    (link (ALPHA      : ordered^ (order@))
          (ALPHA-SET  : set^     (ordered-set@ ALPHA)))
    (export (open ALPHA-SET))))


(define-syntax use-set
  (syntax-rules ()
    [(use-queue set-unit)        (namespace-variable-bind/invoke-unit/sig set^ set-unit)]
    [(use-queue set-unit prefix) (namespace-variable-bind/invoke-unit/sig set^ set-unit prefix)]))

(define-syntax use-simple-set
  (syntax-rules ()
    [(use-queue simple-set-unit)        (namespace-variable-bind/invoke-unit/sig simple-set^ simple-set-unit)]
    [(use-queue simple-set-unit prefix) (namespace-variable-bind/invoke-unit/sig simple-set^ simple-set-unit prefix)]))

(define (simple-set->set simple-set@)
  (unit/sig set^ 
    (import ordered^)

    (use-simple-set simple-set@ simple)

    (define empty   simple:empty)
    (define empty?  simple:empty?)
    (define foldl   simple:foldl)
    (define insert1 simple:insert1)
    (define remove1 simple:remove1)
    (define member? simple:member?)

    (define (singleton x)
      (insert1 x empty))
    
    (define (insert s . xs)
      (list:foldl insert1 s xs))
        
    (define (union s1 s2)
      (foldl insert1 s2 s1))
    
    (define (remove s xs)
      (foldl remove1 s xs))
      
    (define (filter p? s)
      (foldl (lambda (x s)
               (if (p? x)
                   (cons x s)
                   s))
             '() s))
    
    (define (intersection s1 s2)
      (filter (lambda (x)
                (member? x s2))
              s1))
    
    (define (difference s1 s2)
      (filter (lambda (x)
                (not (member? x s2)))
              s1))
    
    (define (subset? s1 s2)
      (andmap (lambda (x)
                (member? x s2))
              s1))
    
    (define (equal? s1 s2)
      (and (subset? s1 s2)
           (subset? s2 s1)))
    
    (define (size s)
      (foldl (lambda (x n)
               (add1 n))
             0 s))
    
    (define (set . xs)
      (list:foldl insert1 empty xs))))



;;; ORDERED-LIST-SET 
(define ordered-list-set@
  (unit/sig set^ 
    (import ordered^)

    (define empty '())
    (define empty? null?)
    
    (define <  elm<)
    (define <= elm<=)
    (define =  elm=)
    (define (> x y)  (elm< y x))
    (define (>= x y) (elm<= y x))

    (define (set . xs)
      (mergesort xs <))
      
    (define (insert s . xs)
      (foldl xinsert1 s xs))
    
    (define (insert1 s x)
      (if (null? s)
          (list x)
          (let ([y (car s)])
            (cond 
              [(> x y) (cons y (insert1 (cdr s) x))]
              [(< x y) (cons x s)]
              [else    s]))))
    
    (define (xinsert1 x s)
      (insert1 s x))
            
    (define (member? x s)
      (ormap (lambda (y)
               (= x y))
             s))
    
    (define singleton list)

    (define (union2 s1 s2)
      (cond
        [(null? s1) s2]
        [(null? s2) s1]
        [else  (let ([x (car s1)]
                     [y (car s2)])
                 (cond 
                   [(< x y) (cons x (union2 s2 (cdr s1)))]
                   [(> x y) (cons y (union2 s1 (cdr s2)))]
                   [else    (cons x (union2 (cdr s1) (cdr s2)))]))]))

    
    (define (union s1 s2)
      ; union1 : set set -> set
      ;  s1 is non-empty
      (define (union1 s1 s2)
        (cond
          [(null? s2) s1]
          [else  (let ([x (car s1)]
                       [y (car s2)])
                   (cond 
                     [(< x y) (cons x (union1 s2 (cdr s1)))]
                     [(> x y) (cons y (union1 s1 (cdr s2)))]
                     [else    (cons x (union (cdr s1) (cdr s2)))]))]))
      (if (null? s1)
          s2
          (union1 s1 s2)))
    
    
    (define (intersection s1 s2)
      (cond
        [(null? s1) empty]
        [(null? s2) empty]
        [else   (let ([x (car s1)]
                      [y (car s2)])
                  (cond 
                    [(= x y) (cons x (intersection (cdr s1) (cdr s2)))]
                    [(< x y) (intersection (cdr s1) s2)]
                    [else    (intersection s1 (cdr s2))]))]))
    
    (define (difference s1 s2)
      (cond 
        [(null? s2) s1]
        [(null? s1) empty]
        [else   (let ([x (car s1)]
                      [y (car s2)])
                  (cond 
                    [(= x y) (difference (cdr s1) (cdr s2))]
                    [(< x y) (cons x (difference (cdr s1) s2))]
                    [else    (difference s1 (cdr s2))]))]))
    
    (define (subset? s1 s2)
      (cond
        [(null? s1) #t]
        [(null? s2) #f]
        [else   (let ([x (car s1)]
                      [y (car s2)])
                  (cond 
                    [(= x y) (subset? (cdr s1) (cdr s2))]
                    [(< x y) #f]
                    [else    (subset? s1 (cdr s2))]))]))
    
    (define (remove s xs)
      (difference s (apply set xs)))
    
    (define equal? equal?)
    (define size length)
    (define foldl foldl)
    ))

-----------------------------------------------

; ordered.scm  --  Jens Axel Søgaard

;;; ORDERED TYPES

; Signature for a totally ordered type
(define-signature ordered^ 
  (elm= elm< elm<=))

; predicates->ordered : (elm elm -> boolean) (elm elm -> boolean) (elm elm -> boolean) -> unit/sig
;  return signed unit given the order predicates
(define (predicates->ordered = < <=)
  (unit/sig ordered^
    (import)
    (define elm=  =)
    (define elm<  <)
    (define elm<= <=)))

; reverse-order : ordered-unit -> ordered-unit
;  return a ordered^ signed unit with the reverse order
;  of the given su.
(define (reverse-order su)
  (unit/sig ordered^
    (import)
    (define-values/invoke-unit/sig ordered^ su old) 
    (define elm= old:elm=)
    (define elm<  (lambda (x y)
                    (not (old:elm<= x y))))
    (define elm<= (lambda (x y)
                    (or (elm= x y)
                        (not (old:elm<= x y)))))))

;; PRIMITIVE TYPES WITH NATURAL ORDERS

(define numbers@  (predicates->ordered = < <=))
(define integers@ numbers@)
(define strings@  (predicates->ordered string=? string<? string<=?))
(define chars@    (predicates->ordered char=? char<? char<=?))
(define symbols@  (predicates->ordered eq? 
                                       (lambda (x y) (string<?  (symbol->string x) (symbol->string y)))
                                       (lambda (x y) (string<=? (symbol->string x) (symbol->string y)))))

(define numbers-reverse@  (reverse-order numbers@))
(define integers-reverse@ numbers-reverse@)
(define strings-reverse@  (reverse-order strings@))
(define chars-reverse@    (reverse-order chars@))
(define symbols-reverse@  (reverse-order symbols@))

;; HASH ORDERS

(define eq-hash-order@ (predicates->ordered eq? 
                                            (lambda (x y) (< (eq-hash-code x) (eq-hash-code y)))
                                            (lambda (x y) (or (eq? x y)
                                                              (< (eq-hash-code x) (eq-hash-code y))))))

(define equal-hash-order@ (predicates->ordered equal? 
                                               (lambda (x y) (< (equal-hash-code x) (equal-hash-code y)))
                                               (lambda (x y) (or (equal? x y)
                                                                 (< (equal-hash-code x) (equal-hash-code y))))))
>Fix:
>Release-Note:
>Audit-Trail:
From: =?ISO-8859-1?Q?Jens_Axel_S=F8gaard?= <jensaxel@soegaard.net>
To: bugs@plt-scheme.org
Cc:  
Subject: Re: all/6277: send: target is not an obejct: ... for method: get-admin
Date: Thu, 22 May 2003 22:08:13 +0200

 bugs@plt-scheme.org wrote:
 
 >http://bugs.plt-scheme.org/cgi-bin/gnats-query?pr-number=6277&query-type=pr-number
 >
 >>Category:       all
 >>Responsible:    steck
 >>Synopsis:       send: target is not an obejct: ... for method: get-admin
 >>Arrival-Date:   Wed May 21 11:45:01 EDT 2003
 >>
 
 I have one bit of additional information.
 
 The error shows up, when there is an error in my source.
 If I have a signed unit with an unbound variabel and
 that signed unit is passed to a function from another
 file, which uses the unit and thus runs into an error.
 DrScheme then gets confused, it apparently can't figure
 out where the unbound name stems from. It gives
 the error above and then freezes completely.
 
 -- 
 Jens Axel Søgaard
 
 
 
Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Fri Jun 27 09:13:59 2003
Responsible-Changed-Why:
    rbf
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Fri Jun 27 09:13:59 2003
State-Changed-Why:
    fixed and released to CVS.
    
    Thanks for the report!
>Unformatted:
