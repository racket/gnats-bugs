From nobody@champlain.ccs.neu.edu  Thu Jun 26 23:53:56 2003
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id XAA11521
	for bugs@plt-scheme.org; Thu, 26 Jun 2003 23:53:56 -0400
Message-Id: <200306270353.XAA11521@champlain.ccs.neu.edu>
Date: Thu, 26 Jun 2003 23:53:56 -0400
From: jgoodwin@chriskaine.com.au
To: bugs@plt-scheme.org
Subject: Can redifine intrinsic language constructs (eg, define & lambda)

>Number:         6333
>Category:       misc
>Synopsis:       Can redifine intrinsic language constructs (eg, define & lambda)
>Confidential:   no
>Severity:       critical
>Priority:       medium
>Responsible:    clements
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Thu Jun 26 23:55:01 EDT 2003
>Closed-Date:    Mon Jan 05 11:22:42 EST 2004
>Last-Modified:  Mon Jan 05 11:22:42 EST 2004
>Originator:     Julien Goodwin
>Release:        204
>Organization:
plt
>Environment:
windows-9x
>Description:
It is possible to re-define without warning or error intrinsic language contstructs like lambda and define.

Here's the comment that was at the top of the code segment:
; The following should not be allowed for the following reason:
;     1. You should not be able to redifine intrinsic procedures (lambda, define etc.)
;     2. A warning should be given when redefining basic procedures (-,+ etc.)
; The code segment fails in all of the "How to design programs" (except advanced 
; student) due to lambda not accepting a 0 length argument list.
; All other language packs allow this.
; "Advanced Student" is the only language that shows correct behaviour (even though 
; an attempt to redifine a basic procedure should be a warning not an error.
>How-To-Repeat:
(define square ( lambda  (X) (* X X)))
(define - ( lambda  (X) (+ X)))
(define one ( lambda  () 1))
(define two ( lambda  () 2))
(define three ( lambda  () 3))
(define lambda "bug")
(define two ( lambda  () 2))
(define three (lambda () 3))
(square (three))
(one)
>Fix:

>Release-Note:

>Audit-Trail:

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: jgoodwin@chriskaine.com.au
Cc: bugs@plt-scheme.org
Subject: Re: all/6333: Can redifine intrinsic language constructs (eg, define & lambda)
Date: Fri, 27 Jun 2003 09:39:12 -0400

 1. Note that the Scheme report explicitly allows the redefinition of
 primitives and keywords. 
 
 2. Note that I can't reconstruct this bug in any of the teaching languages
 because we do not believe that beginners should be able to do such things. 
 Your code just doesn't run in these languages, with expected error messages. 
 
 -- Matthias
 
 
 At Thu, 26 Jun 2003 23:53:56 -0400, jgoodwin@chriskaine.com.au wrote:
 > You may claim or edit this problem report at
 > 
 > https://internal.plt-scheme.org/cgis-bin/gnatsweb.pl?cmd=edit&pr=6333&database=plt
 > 
 > >Number:         6333
 > >Category:       all
 > >Synopsis:       Can redifine intrinsic language constructs (eg, define & lambda)
 > >Confidential:   no
 > >Severity:       critical
 > >Priority:       medium
 > >Responsible:    eli
 > >State:          open
 > >Class:          sw-bug
 > >Submitter-Id:   unknown
 > >Arrival-Date:   Thu Jun 26 23:55:01 EDT 2003
 > >Closed-Date:
 > >Last-Modified:
 > >Originator:     Julien Goodwin
 > >Release:        204
 > >Organization:
 > plt
 > >Environment:
 > windows-9x
 > >Description:
 > It is possible to re-define without warning or error intrinsic language contstructs like lambda and define.
 > 
 > Here's the comment that was at the top of the code segment:
 > ; The following should not be allowed for the following reason:
 > ;     1. You should not be able to redifine intrinsic procedures (lambda, define etc.)
 > ;     2. A warning should be given when redefining basic procedures (-,+ etc.)
 > ; The code segment fails in all of the "How to design programs" (except advanced 
 > ; student) due to lambda not accepting a 0 length argument list.
 > ; All other language packs allow this.
 > ; "Advanced Student" is the only language that shows correct behaviour (even though 
 > ; an attempt to redifine a basic procedure should be a warning not an error.
 > >How-To-Repeat:
 > (define square ( lambda  (X) (* X X)))
 > (define - ( lambda  (X) (+ X)))
 > (define one ( lambda  () 1))
 > (define two ( lambda  () 2))
 > (define three ( lambda  () 3))
 > (define lambda "bug")
 > (define two ( lambda  () 2))
 > (define three (lambda () 3))
 > (square (three))
 > (one)
 > >Fix:
 > >Release-Note:
 > >Audit-Trail:
 > >Unformatted:
 
Responsible-Changed-From-To: eli->clements
Responsible-Changed-By: clements
Responsible-Changed-When: Mon Jan  5 11:22:42 2004
Responsible-Changed-Why:
    I closed it.
State-Changed-From-To: open->closed
State-Changed-By: clements
State-Changed-When: Mon Jan  5 11:22:42 2004
State-Changed-Why:
    question about scheme
>Unformatted:

