From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Sep 24 09:50:07 2009
Received: from mail-yx0-f176.google.com (mail-yx0-f176.google.com [209.85.210.176])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n8ODo3RA021451
	for <bugs@bugs.plt-scheme.org>; Thu, 24 Sep 2009 09:50:03 -0400
Message-Id: <200909241350.n8ODo1ms021441@champlain.ccs.neu.edu>
Date: Thu, 24 Sep 2009 09:50:01 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: `define-match-expander' patterns for identifiers

>Number:         10482
>Category:       misc
>Synopsis:       `define-match-expander' patterns for identifiers
>Class:          change-request
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Sep 24 09:52:01 -0400 2009
>Last-Modified:  Sat Feb 06 00:21:24 -0500 2010
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 165030640

Collections:
(("/home/eli/.plt-scheme/4.2.1/collects" "info-domain" "pl") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "stxclass" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "profj" "framework" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-coverage) (default) #() "#lang scheme\n" #t))
>Description:
It would be very nice if `define-match-expander' supported identifier macros.
I was suprised by this when I couldn't make `null' into the obvious thing.
(And without this I need to somehow explain in class why we need to use
`(list)' on the pattern side when needed.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Sam TH <samth@ccs.neu.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10482: `define-match-expander' patterns for 
	identifiers
Date: Thu, 24 Sep 2009 09:55:29 -0400

 This would totally break the current pattern of the match grammar,
 which is that every constructor is of the form (pattern-constructor
 stuff ...), and identifiers in patterns are always pattern variables.
 There would need to be a much stronger case for this than the `null'
 example.
 
 On Thu, Sep 24, 2009 at 9:52 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10482
 >
 > Reported by Eli Barzilay for release: 4.2.1
 >
 > *** Description:
 > It would be very nice if `define-match-expander' supported identifier mac=
 ros.
 > I was suprised by this when I couldn't make `null' into the obvious thing=
 .
 > (And without this I need to somehow explain in class why we need to use
 > `(list)' on the pattern side when needed.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02=
 :29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display=
 -depth) =3D 16
 > Human Language: english
 > (current-memory-use) 165030640
 >
 > Collections:
 > (("/home/eli/.plt-scheme/4.2.1/collects" "info-domain" "pl") ("/home/eli/=
 plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor=
 " "file" "openssl" "sgl" "htdch" "scriblib" "s-exp" "slideshow" "mysterx" "=
 graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debu=
 gger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "st=
 xclass" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "a=
 lgol60" "browser" "profj" "framework" "typed-scheme" "at-exp" "info-domain"=
  "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-consta=
 nts" "html" "slatex" "stepper" "launcher" "htdp" "lang" "rnrs" "setup" "dei=
 nprogramm" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "pars=
 er-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version=
 " "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "=
 redex"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-co=
 verage) (default) #() "#lang scheme\n" #t))
 >
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam TH <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10482: `define-match-expander' patterns for 
	identifiers
Date: Thu, 24 Sep 2009 09:57:55 -0400

 On Sep 24, Sam TH wrote:
 > This would totally break the current pattern of the match grammar,
 > which is that every constructor is of the form (pattern-constructor
 > stuff ...), and identifiers in patterns are always pattern
 > variables.  There would need to be a much stronger case for this
 > than the `null' example.
 
 How would this break when function applications don't?  It seems to be
 a simple matter of (match-)expanding identifiers in patterns when they
 are bound to match macros.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Sam TH <samth@ccs.neu.edu>
Cc: bugs <bugs@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10482: `define-match-expander' patterns for 
	identifiers
Date: Thu, 24 Sep 2009 10:37:00 -0400

 On Sep 24, Sam TH wrote:
 > On Thu, Sep 24, 2009 at 9:57 AM, Eli Barzilay <eli@barzilay.org> wrot=
 e:
 > >
 > > How would this break when function applications don't=3F =C2=A0It s=
 eems
 > > to be a simple matter of (match-)expanding identifiers in patterns
 > > when they are bound to match macros.
 >=20
 > I'm not saying that it would break the implementation - it would
 > break an invariant that makes it easy to reason about match
 > patterns.  This uniformity is one of the reasons that new-style
 > match is nicer than old-style match.
 
 Still the same -- how is this different than the same argument against
 identifier macros in plain application forms=3F
 
 AFAICT, this is a different issue from the old-style vs new-style
 matchers.  The confusing thing there is that parens were always just
 matching lists, which made it very confusing if you wanted to extend
 the system.  To use the same plain application analogy, the old-style
 matchers did something similar to defining `#%app' as `list'.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Sam TH <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs <bugs@plt-scheme.org>, nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10482: `define-match-expander' patterns for 
	identifiers
Date: Thu, 24 Sep 2009 10:26:43 -0400

 On Thu, Sep 24, 2009 at 9:57 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Sep 24, Sam TH wrote:
 >> This would totally break the current pattern of the match grammar,
 >> which is that every constructor is of the form (pattern-constructor
 >> stuff ...), and identifiers in patterns are always pattern
 >> variables. =A0There would need to be a much stronger case for this
 >> than the `null' example.
 >
 > How would this break when function applications don't? =A0It seems to be
 > a simple matter of (match-)expanding identifiers in patterns when they
 > are bound to match macros.
 
 I'm not saying that it would break the implementation - it would break
 an invariant that makes it easy to reason about match patterns.  This
 uniformity is one of the reasons that new-style match is nicer than
 old-style match.
 
 --=20
 sam th
 samth@ccs.neu.edu

Responsible changed from "nobody" to "samth" by eli at Sat, 06 Feb 2010 00:21:24 -0500
Reason>>> match

