From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Mar 30 16:32:48 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p2UKWjhS028906
	for <bugs@bugs.plt-scheme.org>; Wed, 30 Mar 2011 16:32:45 -0400
Message-Id: <201103302032.p2UKWdH5028901@champlain.ccs.neu.edu>
Date: Wed, 30 Mar 2011 16:32:39 -0400
From: geoff@knauth.org
To: bugs@racket-lang.org
Subject: question about regexp in purify-port

>Number:         11829
>Category:       misc
>Synopsis:       question about regexp in purify-port
>Class:          doc-bug
>Responsible:    eli
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Mar 30 16:36:01 -0400 2011
>Closed-Date:    Wed Mar 30 17:13:48 -0400 2011
>Last-Modified:  Thu Mar 31 08:52:02 -0400 2011
>Originator:     Geoffrey Knauth
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.0.2--2011-02-26(-/f)
>Environment:
macosx "Darwin merlin 10.7.0 Darwin Kernel Version 10.7.0: Sat Jan 29 15:17:16 PST 2011; root:xnu-1504.9.37~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 206950888

Collections:
("/Users/gknauth/Library/Racket/5.1.0.2/collects"
 (non-existent-path))
("/usr/local/plt/collects"
 ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysqlclient" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" "u!
 nstable" "version" "waterworld" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
file collects/net/url-unit.rkt
function purify-port

The scribble docs give the regexp as:
  #rx"^HTTP/.*?(\r\n\r\n|\n\n|\r\r)"

I was puzzled by the question mark coming right after .* so I looked in url-unit.rkt, where I found:
  #rx"^HTTP/.*?(?:\r\n\r\n|\n\n|\r\r)"

which made a little more sense to me (the (?: part), but I'm still puzzled by the first question mark in the regexp.

In any case, there's a slight discrepancy between the source code and the scribble doc.
>How-To-Repeat:
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "eli" by eli at Wed, 30 Mar 2011 17:13:48 -0400
Reason>>> replying

State changed from "open" to "closed" by eli at Wed, 30 Mar 2011 17:13:48 -0400
Reason>>> See reply.

From: Eli Barzilay <eli@barzilay.org>
To: geoff@knauth.org, bugs@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/11829: question about regexp in purify-port
Date: Wed, 30 Mar 2011 17:13:07 -0400

 30 minutes ago, geoff@knauth.org wrote:
 > file collects/net/url-unit.rkt
 > function purify-port
 > 
 > The scribble docs give the regexp as:
 >   #rx"^HTTP/.*?(\r\n\r\n|\n\n|\r\r)"
 > 
 > I was puzzled by the question mark coming right after .*
 
 It makes the previous "*" be non-greedy.  For example, say that you
 want to match any number of characters with no "X"s followed by an
 "X", the common way to do that is #rx"^[^X]*X" -- but an alternative
 is to use #rx"^.*?X" where the ".*?" part will match the smallest
 number of characters that still has an "X" after that.  The first way
 is a little more common as long as you can easily negate the pattern
 in the end -- like that "[^X]" -- but in some cases like the HTTP
 headers constructing a pattern that matches anything *except* the
 terminating double-newline is much harder, so the non-greedy match
 becomes much easier to use.
 
 
 > so I looked in url-unit.rkt, where I found:
 >   #rx"^HTTP/.*?(?:\r\n\r\n|\n\n|\r\r)"
 > 
 > which made a little more sense to me (the (?: part), but I'm still
 > puzzled by the first question mark in the regexp.
 > 
 > In any case, there's a slight discrepancy between the source code
 > and the scribble doc.
 
 There's no real discrepancy -- the "?:" just avoids capturing the
 terminator sequence, which shouldn't matter at all for reading the
 documentation.  I think that it makes sense to drop it since it's an
 extra implementation detail, done to make things a bit more efficient.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: geoff@knauth.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11829: question about regexp in purify-port
Date: Wed, 30 Mar 2011 15:19:58 -0600

 At Wed, 30 Mar 2011 16:36:02 -0400, geoff@knauth.org wrote:
 > file collects/net/url-unit.rkt
 > function purify-port
 > 
 > The scribble docs give the regexp as:
 >   #rx"^HTTP/.*?(\r\n\r\n|\n\n|\r\r)"
 > 
 > I was puzzled by the question mark coming right after .* so I looked in 
 > url-unit.rkt, where I found:
 >   #rx"^HTTP/.*?(?:\r\n\r\n|\n\n|\r\r)"
 > 
 > which made a little more sense to me (the (?: part), but I'm still puzzled by 
 > the first question mark in the regexp.
 
 The pattern ".*" matches any number of characters, and when multiple
 matches are possible, it uses the longest match.
 
 The pattern ".*?" matches any number of characters, and when multiple
 matches are possible, it uses the shortest match.
 
 > In any case, there's a slight discrepancy between the source code and the 
 > scribble doc.
 
 The extra "?:" doesn't affect the matches --- just the way results are
 returned by `regexp-match' --- and I think it's clearer to leave the
 "?:" out in the docs.
 
From: "Geoffrey S. Knauth" <geoff@knauth.org>
To: Eli Barzilay <eli@barzilay.org>, Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/11829: question about regexp in purify-port
Date: Wed, 30 Mar 2011 17:35:27 -0400

 Thanks for the explanations, Eli and Matthew.  I'm happy to see the non-greedy regexp option.  Regexps have sure grown up since I first used them.
 
 After reading your emails, I found the non-greedy *? +? ?? {m}? {m,n}? explained at the bottom of doc/guide/regexp-quant.html.
 
 But originally I was looking at doc/reference/regexp.html.  I'm not sure the notation is documented there (I couldn't find it).
 
 Geoff
 
 On Mar 30, 2011, at 17:13 , Eli Barzilay wrote:
 
 > 30 minutes ago, geoff@knauth.org wrote:
 >> file collects/net/url-unit.rkt
 >> function purify-port
 >> 
 >> The scribble docs give the regexp as:
 >>  #rx"^HTTP/.*?(\r\n\r\n|\n\n|\r\r)"
 >> 
 >> I was puzzled by the question mark coming right after .*
 > 
 > It makes the previous "*" be non-greedy.  For example, say that you
 > want to match any number of characters with no "X"s followed by an
 > "X", the common way to do that is #rx"^[^X]*X" -- but an alternative
 > is to use #rx"^.*?X" where the ".*?" part will match the smallest
 > number of characters that still has an "X" after that.  The first way
 > is a little more common as long as you can easily negate the pattern
 > in the end -- like that "[^X]" -- but in some cases like the HTTP
 > headers constructing a pattern that matches anything *except* the
 > terminating double-newline is much harder, so the non-greedy match
 > becomes much easier to use.
 > 
 > 
 >> so I looked in url-unit.rkt, where I found:
 >>  #rx"^HTTP/.*?(?:\r\n\r\n|\n\n|\r\r)"
 >> 
 >> which made a little more sense to me (the (?: part), but I'm still
 >> puzzled by the first question mark in the regexp.
 >> 
 >> In any case, there's a slight discrepancy between the source code
 >> and the scribble doc.
 > 
 > There's no real discrepancy -- the "?:" just avoids capturing the
 > terminator sequence, which shouldn't matter at all for reading the
 > documentation.  I think that it makes sense to drop it since it's an
 > extra implementation detail, done to make things a bit more efficient.
 > 
 > -- 
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                    http://barzilay.org/                   Maze is Life!
 
 
From: Eli Barzilay <eli@barzilay.org>
To: "Geoffrey S. Knauth" <geoff@knauth.org>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@racket-lang.org
Subject: Re: [racket-bug] all/11829: question about regexp in purify-port
Date: Wed, 30 Mar 2011 22:44:42 -0400

 5 hours ago, Geoffrey S. Knauth wrote:
 > Thanks for the explanations, Eli and Matthew.  I'm happy to see the
 > non-greedy regexp option.  Regexps have sure grown up since I first
 > used them.
 > 
 > After reading your emails, I found the non-greedy *? +? ?? {m}?
 > {m,n}? explained at the bottom of doc/guide/regexp-quant.html.
 > 
 > But originally I was looking at doc/reference/regexp.html.  I'm not
 > sure the notation is documented there (I couldn't find it).
 
 It's described in the regexp syntax -- it says that a "<pce>" can be
 "<repeat>" or "<repeat>?" where the latter mattches shortest possible.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: "Geoffrey S. Knauth" <geoff@knauth.org>
To: Eli Barzilay <eli@barzilay.org>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@racket-lang.org
Subject: Re: [racket-bug] all/11829: question about regexp in purify-port
Date: Thu, 31 Mar 2011 08:48:58 -0400

 --Apple-Mail-47--1001492514
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 On Mar 30, 2011, at 22:44 , Eli Barzilay wrote:
 
 > It's described in the regexp syntax -- it says that a "<pce>" can be
 > "<repeat>" or "<repeat>?" where the latter mattches shortest possible.
 
 Thanks, you're right, and I appreciate the help.  Of course it's clear =
 as day now.
 
 I might not have missed it if it had read:
 
 < <pce> ::=3D <repeat>        Match <repeat>, longest possible
 <        |  <repeat>?       Match <repeat>, shortest possible
 --
 > <pce> ::=3D <repeat>        Match <repeat>, longest possible (greedy)
 >        |  <repeat>?       Match <repeat>, shortest possible =
 (non-greedy)
 
 My eyes were scanning down the BNF, and I didn't even see the words =
 longest or shortest.  Maybe having (greedy) and (non-greedy) stand out =
 would have hooked the part of my brain that fires when it sees "greedy."
 
 Geoff
 
 
 --Apple-Mail-47--1001492514
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=us-ascii
 
 <html><head></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
 "><div><div>On Mar 30, 2011, at 22:44 , Eli Barzilay wrote:</div><br =
 class=3D"Apple-interchange-newline"><blockquote type=3D"cite"><span =
 class=3D"Apple-style-span" style=3D"border-collapse: separate; =
 font-family: Verdana; font-style: normal; font-variant: normal; =
 font-weight: normal; letter-spacing: normal; line-height: normal; =
 orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; =
 widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; =
 -webkit-border-vertical-spacing: 0px; =
 -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: =
 auto; -webkit-text-stroke-width: 0px; font-size: medium; ">It's =
 described in the regexp syntax -- it says that a "&lt;pce&gt;" can =
 be<br>"&lt;repeat&gt;" or "&lt;repeat&gt;?" where the latter mattches =
 shortest possible.</span></blockquote><br></div><div>Thanks, you're =
 right, and I appreciate the help. &nbsp;Of course it's clear as day =
 now.</div><div><br></div><div>I might not have missed it if it had =
 read:</div><div><br></div><div><font class=3D"Apple-style-span" =
 face=3D"Monaco">&lt; &lt;pce&gt; ::=3D &lt;repeat&gt; &nbsp; &nbsp; =
 &nbsp; &nbsp;Match &lt;repeat&gt;, longest possible</font></div><font =
 class=3D"Apple-style-span" face=3D"Monaco">&lt; &nbsp; &nbsp; &nbsp; =
 &nbsp;| &nbsp;&lt;repeat&gt;? &nbsp; &nbsp; &nbsp; Match &lt;repeat&gt;, =
 shortest possible<br>--<br>&gt; &lt;pce&gt; ::=3D &lt;repeat&gt; &nbsp; =
 &nbsp; &nbsp; &nbsp;Match &lt;repeat&gt;, longest possible =
 (greedy)<br>&gt; &nbsp; &nbsp; &nbsp; &nbsp;| &nbsp;&lt;repeat&gt;? =
 &nbsp; &nbsp; &nbsp; Match &lt;repeat&gt;, shortest possible =
 (non-greedy)<br></font><br><div>My eyes were scanning down the BNF, and =
 I didn't even see the words longest or shortest. &nbsp;Maybe having =
 (greedy) and (non-greedy) stand out would have hooked the part of my =
 brain that fires when it sees =
 "greedy."</div><div><br></div><div>Geoff</div><div><br></div></body></html=
 >=
 
 --Apple-Mail-47--1001492514--
