From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat May 12 11:04:22 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.239])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l4CF4LHs021075
	for <bugs@bugs.plt-scheme.org>; Sat, 12 May 2007 11:04:21 -0400
Message-Id: <200705121504.l4CF4Kib021070@champlain.ccs.neu.edu>
Date: Sat, 12 May 2007 11:04:20 -0400
From: robby@cs.uchicago.edu
To: bugs@plt-scheme.org
Subject: macro stepper fails to build reduction sequence

>Number:         8666
>Category:       misc
>Synopsis:       macro stepper fails to build reduction sequence
>Class:          sw-bug
>Responsible:    ryanc
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat May 12 11:05:01 -0400 2007
>Closed-Date:    Wed Apr 01 15:12:35 -0400 2009
>Last-Modified:  Wed Apr 01 15:12:35 -0400 2009
>Originator:     Robby Findler
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.100-svn12may2007
>Environment:
macosx "Darwin penghu.cs.uchicago.edu 8.9.1 Darwin Kernel Version 8.9.1: Thu Feb 22 20:55:00 PST 2007; root:xnu-792.18.15~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/robby/svn/exp/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 316133140

Collections:
(("/Users/robby/Library/PLT Scheme/369.100/collects" "installed-teachpacks") ("/Users/robby/svn/exp/plt/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student with List Abbreviations") (#6(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
This program:

  (module tmp mzscheme
    (require-for-syntax (lib "boundmap.ss" "syntax"))
    (define-syntax -reduction-relation
      (λ (stx)
        (begin
          module-identifier-mapping-put!
          module-identifier-mapping-get
          #''whatever))))

produces the error below twice (in two separate dialogs), when in the 
module language and when one clicks the "Macro Stepper" button

  Internal errors in macro stepper:
  Macro hiding failed on one or more terms. The macro stepper is
  showing the terms with macro hiding disabled.
  The macro stepper failed to compute the reduction sequence for 
  one or more terms.

The macro stepper window also has this:

.
Internal error computing reductions. Original term:
(module tmp mzscheme
  (require-for-syntax (lib "boundmap.ss" "syntax"))
  (define-syntax
   -reduction-relation
   (λ (stx) (begin module-identifier-mapping-put! module-identifier-mapping-get #''whatever))))
#7(struct:trec #6(struct:p:module #<syntax:1:0> #<syntax:1:0> (#<syntax:1:1>) #f #5(struct:mrule #<syntax:1:0> #<syntax:1:0> #8(struct:transformation #<syntax:1:0> #<syntax:1:0> (#<syntax:1:0>) #<syntax:1:0> #<syntax:1:0> () 0) #6(struct:p:#%module-begin #<syntax:1:0> #<syntax:1:0> (#<syntax>) (#3(struct:mod:prim #4(struct:p:stop #<syntax> #<syntax> (#<syntax>)) #4(struct:p:require-for-syntax #<syntax> #<syntax> ())) #3(struct:mod:prim #4(struct:p:stop #<syntax:2:2> #<syntax:2:2> (#<syntax:2:3>)) #4(struct:p:require-for-syntax #<syntax:2:2> #<syntax:2:2> ())) #3(struct:mod:prim #5(struct:mrule #<syntax:4:2> #<syntax:4:2> #8(struct:transformation #<syntax:4:2> #<syntax:4:2> (#<syntax:4:3>) #<syntax:4:2> #<syntax:4:2> () 1) #4(struct:p:stop #<syntax:4:2> #<syntax:4:2> (#<syntax>))) #5(struct:p:define-syntaxes #<syntax:4:2> #<syntax:4:2> () #6(struct:lift/let-deriv #<syntax:5:4> #<syntax:5:4> #5(struct:mrule #<syntax:5:4> #<syntax:5:4> #8(struct:transformation #<syntax:5:4> #<s!
 yntax:5:4> (#<syntax:5:5>) #<syntax:5:4> #<syntax:5:4> () 2) #6(struct:p:lambda #<syntax:5:4> #<syntax:5:4> (#<syntax:5:5>) (#<syntax:5:7> . #<syntax:5:4>) #6(struct:bderiv #<syntax:5:4> #<syntax:5:4> (#4(struct:b:splice (#<syntax:6:6> . #<syntax:6:6>) #4(struct:p:stop #<syntax:6:6> #<syntax:6:6> ()) (#<syntax:7:8> #<syntax:8:8> #<syntax:9:8>)) #3(struct:b:expr (#<syntax:7:8> . #<syntax:7:8>) #5(struct:mrule #<syntax:7:8> #<syntax> #8(struct:transformation #<syntax:7:8> #<syntax> (#<syntax:7:8>) #<syntax:7:8> #<syntax> () 3) #5(struct:mrule #<syntax> #<syntax> #8(struct:transformation #<syntax> #<syntax> (#<syntax>) #<syntax> #<syntax> (#3(struct:local-lift #<syntax> #<syntax>)) 4) #4(struct:p:stop #<syntax> #<syntax> ()))))) list #4(struct:lderiv #<syntax:5:4> #<syntax:5:4> (#4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #5(struct:mrule #<syntax:8:8> #<syntax> #8(struct:transformation #<syntax:8:8> #<syntax> (#<syntax:8:8>) #<syntax:8:8> #<syntax> () 5) #5(struct:mr!
 ule #<syntax> #<syntax> #8(struct:transformation #<syntax> #<s!
 yntax> (
#<syntax>) #<syntax> #<syntax> (#3(struct:local-lift #<syntax> #<syntax>)) 6) #4(struct:p:variable #<syntax> #<syntax> (#<syntax>)))) #5(struct:mrule #<syntax:9:8> #<syntax:9:8> #8(struct:transformation #<syntax:9:8> #<syntax:9:8> (#<syntax:9:8>) #<syntax:9:8> #<syntax:9:8> () 7) #4(struct:p:quote-syntax #<syntax:9:8> #<syntax:9:8> (#<syntax>)))))))) #<syntax:5:4> #7(struct:p:let-values #<syntax:5:4> #<syntax:5:4> (#<syntax>) ((#<syntax:5:4>) . #<syntax:5:4>) (#5(struct:p:begin #<syntax> #<syntax> (#<syntax>) #4(struct:lderiv #<syntax> #<syntax> (#5(struct:mrule #<syntax> #<syntax> #8(struct:transformation #<syntax> #<syntax> (#<syntax>) #<syntax> #<syntax> () 8) #5(struct:p:begin #<syntax> #<syntax> (#<syntax>) #4(struct:lderiv #<syntax> #<syntax> (#6(struct:p:#%app #<syntax> #<syntax> (#<syntax> #<syntax>) #<syntax> #4(struct:lderiv #<syntax> #<syntax> (#4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #4(struct:p:v!
 ariable #<syntax> #<syntax> (#<syntax>)) #4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #6(struct:p:#%app #<syntax> #<syntax> (#<syntax> #<syntax>) #<syntax> #4(struct:lderiv #<syntax> #<syntax> (#4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #5(struct:mrule #<syntax> #<syntax> #8(struct:transformation #<syntax> #<syntax> (#<syntax>) #<syntax> #<syntax> () 9) #4(struct:p:quote-syntax #<syntax> #<syntax> (#<syntax>)))))) #4(struct:p:quote-syntax #<syntax> #<syntax> (#<syntax>))))))))))))) #6(struct:bderiv #<syntax:5:4> #<syntax:5:4> (#3(struct:b:expr (#<syntax:5:4> . #<syntax:5:4>) #4(struct:p:stop #<syntax:5:4> #<syntax:5:4> ()))) list #4(struct:lderiv #<syntax:5:4> #<syntax:5:4> (#7(struct:p:let-values #<syntax:5:4> #<syntax:5:4> (#<syntax>) ((#<syntax:5:4>) . #<syntax:5:4>) (#5(struct:p:begin #<syntax> #<syntax> (#<syntax>) #4(struct:lderiv #<syntax> #<syntax> (#5(struct:mrule #<syntax> #<syntax> #8(struct:transformation #<syntax> #<syntax> (#<syntax>) #<syn!
 tax> #<syntax> () 10) #5(struct:p:begin #<syntax> #<syntax> (#!
 <syntax>
) #4(struct:lderiv #<syntax> #<syntax> (#6(struct:p:#%app #<syntax> #<syntax> (#<syntax> #<syntax>) #<syntax> #4(struct:lderiv #<syntax> #<syntax> (#4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #6(struct:p:#%app #<syntax> #<syntax> (#<syntax> #<syntax>) #<syntax> #4(struct:lderiv #<syntax> #<syntax> (#4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #5(struct:mrule #<syntax> #<syntax> #8(struct:transformation #<syntax> #<syntax> (#<syntax>) #<syntax> #<syntax> () 11) #4(struct:p:quote-syntax #<syntax> #<syntax> (#<syntax>)))))) #4(struct:p:quote-syntax #<syntax> #<syntax> (#<syntax>))))))))))))) #6(struct:bderiv #<syntax:5:4> #<syntax:5:4> (#3(struct:b:expr (#<syntax:5:4> . #<syntax:5:4>) #4(struct:p:stop #<syntax:5:4> #<syntax:5:4> ()))) list #4(struct:lderiv #<syntax:5:4> #<syntax:5:4> (#6(struct:p:lam!
 bda #<syntax:5:4> #<syntax:5:4> (#<syntax:5:5>) (#<syntax:5:7> . #<syntax:5:4>) #6(struct:bderiv #<syntax:5:4> #<syntax:5:4> (#3(struct:b:expr (#<syntax> . #<syntax>) #4(struct:p:stop #<syntax> #<syntax> ()))) list #4(struct:lderiv #<syntax:5:4> #<syntax:5:4> (#4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #4(struct:p:variable #<syntax> #<syntax> (#<syntax>)) #4(struct:p:quote-syntax #<syntax:9:8> #<syntax:9:8> (#<syntax>))))))))))))))))) #2(struct:mod:lift-end ())) (#1(struct:mod:skip) #1(struct:mod:skip) #1(struct:mod:skip))))) error #<syntax:1:0> error)
.
>How-To-Repeat:
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "ryanc" by eli at Sat, 12 May 2007 11:57:19 -0400
Reason>>> macro stepper


State changed from "open" to "analyzed" by ryanc at Thu, 17 May 2007 15:49:06 -0400
Reason>>> lift/let (used for lifts inside of define-syntaxes) requires different code from 
ordinary lifts


State changed from "analyzed" to "closed" by ryanc at Wed, 01 Apr 2009 15:12:35 -0400
Reason>>> Fixed a while back.

