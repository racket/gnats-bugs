From apache@plt-scheme.org Fri Jun  2 11:48:04 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k52Flv3X012600
	for <bugs@plt-scheme.org>; Fri, 2 Jun 2006 11:47:57 -0400
Message-Id: <200606021547.k52FlvWe012598@champlain.ccs.neu.edu>
Date: Fri, 2 Jun 2006 11:47:57 -0400
From: sbloch@adelphi.edu
To: bugs@plt-scheme.org
Subject: make language and teachpack changes effective immediately

>Number:         8085
>Category:       drscheme
>Synopsis:       make language and teachpack changes effective immediately
>Class:          change-request
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Jun 02 11:50:00 -0400 2006
>Last-Modified:  Wed Jun 07 02:18:26 -0400 2006
>Originator:     Stephen Bloch
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301
>Environment:
macosx "Darwin user-0cdflme.cable.mindspring.com 8.6.0 Darwin Kernel Version 8.6.0: Tue Mar  7 16:58:48 PST 2006; root:xnu-792.6.70.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Applications/PLT Scheme v301/collects/doc/web-server> #<path:/Applications/PLT Scheme v301/collects/doc/tour> #<path:/Applications/PLT Scheme v301/collects/doc/tools> #<path:/Applications/PLT Scheme v301/collects/doc/tex2page> #<path:/Applications/PLT Scheme v301/collects/doc/teachpack> #<path:/Applications/PLT Scheme v301/collects/doc/t-y-scheme> #<path:/Applications/PLT Scheme v301/collects/doc/swindle> #<path:/Applications/PLT Scheme v301/collects/doc/srfi> #<path:/Applications/PLT Scheme v301/collects/doc/r5rs> #<path:/Applications/PLT Scheme v301/collects/doc/profj-intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/profj-beginner> #<path:/Applications/PLT Scheme v301/collects/doc/profj-advanced> #<path:/Applications/PLT Scheme v301/collects/doc/plot> #<path:/Applications/PLT Scheme v301/collects/doc/mzscheme> #<path:/Applications/PLT Scheme v301/collects/doc/mzlib> #<path:/Applications/PLT Scheme v301/collects/doc/mzc> #<path:/Applications/PLT Scheme v301/collects/doc/mrlib> #<path:/Applications/PLT Scheme v301/collects/doc/mred> #<path:/Applications/PLT Scheme v301/collects/doc/misclib> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate-lambda> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/insidemz> #<path:/Applications/PLT Scheme v301/collects/doc/help> #<path:/Applications/PLT Scheme v301/collects/doc/framework> #<path:/Applications/PLT Scheme v301/collects/doc/foreign> #<path:/Applications/PLT Scheme v301/collects/doc/drscheme> #<path:/Applications/PLT Scheme v301/collects/doc/beginning-abbr> #<path:/Applications/PLT Scheme v301/collects/doc/beginning> #<path:/Applications/PLT Scheme v301/collects/doc/advanced>)
Collections:
((#<path:/Users/teeb/Library/PLT Scheme/301/collects> (#<path:info-domain> #<path:profj>)) (#<path:/Applications/PLT Scheme v301/collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:r5rs> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#6(#t constructor repeating-decimal #f #t none) #f))
>Description:
Is there a good reason (from the user's perspective) that when you
change language, add or clear a teachpack, the change doesn't take
effect until the next time you click "Run"?  If you don't, a warning
message tells you that you SHOULD, but (from the user's perspective)
if the computer is smart enough to figure out that you need to
click "Run", why isn't it smart enough to do the job itself?

The only situation I can think of in which you'd want to NOT click
"Run" immediately after changing language or teachpack is if there's
something in the interactions pane you want to copy.  In which
case, arguably, a better behavior would be to display a message at
the end of the current interactions pane indicating the new language
and/or teachpacks, and allow the user to go on working in said pane
immediately.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: sbloch@adelphi.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@barzilay.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, gnats@brinckerhoff.org,
        jay@kenyamountain.com, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu, cce@ccs.neu.edu,
        dalev@ccs.neu.edu
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 10:53:29 -0500

 Clicking the Run button has arbitrary effects on thigns like the
 network and filesystem and shouldn't be automatically clicked, I don't
 think.
 
 Robby
From: Stephen Bloch <sbloch@panther.adelphi.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: sbloch@adelphi.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@barzilay.org, matthias@ccs.neu.edu, sk@cs.brown.edu,
        mflatt@cs.utah.edu, gnats@brinckerhoff.org, jay@kenyamountain.com,
        meunier@ccs.neu.edu, sowens@cs.utah.edu, kathyg@cs.utah.edu,
        awick@cs.utah.edu, goldberg@cs.utah.edu, dskippy@ccs.neu.edu,
        jacobm@cs.uchicago.edu, cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 14:02:45 -0400 (EDT)

 Robby Findler writes:
 >Clicking the Run button has arbitrary effects on thigns like the
 >network and filesystem and shouldn't be automatically clicked, I don't
 >think.
 
 But if changing languages and/or teachpacks leaves you in a state in
 which the only reasonable thing to do is click the Run button, what's
 the benefit of making the user do it manually?
 
 Of course, my preferred solution was NOT to "automatically click the Run
 button," but rather to change languages and/or teachpacks immediately
 without re-executing the Definitions window.  Is that feasible?
 
                                                  Stephen Bloch
                                               sbloch@adelphi.edu
                                         Math/CS Dept, Adelphi University
From: Robby Findler <robby@cs.uchicago.edu>
To: Stephen Bloch <sbloch@panther.adelphi.edu>
Cc: sbloch@adelphi.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@barzilay.org, matthias@ccs.neu.edu, sk@cs.brown.edu,
        mflatt@cs.utah.edu, gnats@brinckerhoff.org, jay@kenyamountain.com,
        meunier@ccs.neu.edu, sowens@cs.utah.edu, kathyg@cs.utah.edu,
        awick@cs.utah.edu, goldberg@cs.utah.edu, dskippy@ccs.neu.edu,
        jacobm@cs.uchicago.edu, cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 13:06:01 -0500

 At Fri, 2 Jun 2006 14:02:45 -0400 (EDT), Stephen Bloch wrote:
 > Robby Findler writes:
 > >Clicking the Run button has arbitrary effects on thigns like the
 > >network and filesystem and shouldn't be automatically clicked, I don't
 > >think.
 > 
 > But if changing languages and/or teachpacks leaves you in a state in
 > which the only reasonable thing to do is click the Run button, what's
 > the benefit of making the user do it manually?
 
 So the effects of the run button are under the user's control, of course.
 
 > Of course, my preferred solution was NOT to "automatically click the Run
 > button," but rather to change languages and/or teachpacks immediately
 > without re-executing the Definitions window.  Is that feasible?
 
 I don't even understand what that means.
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Stephen Bloch <sbloch@panther.adelphi.edu>, sbloch@adelphi.edu,
        bugs@plt-scheme.org
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 14:11:41 -0400

 On Jun  2, Robby Findler wrote:
 > At Fri, 2 Jun 2006 14:02:45 -0400 (EDT), Stephen Bloch wrote:
 > > Robby Findler writes:
 > > >Clicking the Run button has arbitrary effects on thigns like the
 > > >network and filesystem and shouldn't be automatically clicked, I
 > > >don't think.
 > > 
 > > But if changing languages and/or teachpacks leaves you in a state
 > > in which the only reasonable thing to do is click the Run button,
 > > what's the benefit of making the user do it manually?
 > 
 > So the effects of the run button are under the user's control, of
 > course.
 > 
 > > Of course, my preferred solution was NOT to "automatically click
 > > the Run button," but rather to change languages and/or teachpacks
 > > immediately without re-executing the Definitions window.  Is that
 > > feasible?
 > 
 > I don't even understand what that means.
 
 I think that what Stephen suggests is to just `require' the new
 teachpack into the repl.  (I don't think that it is a good idea, BTW.)
 
 How about popping a dialog box that says:
 
   The working environment/language/whatever has changed, and you need
   to re-click "Run" for the changes to take effect.
 
   [ ] remember this choice
 
                  [Re-Run]  [Ignore]
 
 ?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Stephen Bloch <sbloch@panther.adelphi.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: sbloch@adelphi.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@barzilay.org, matthias@ccs.neu.edu, sk@cs.brown.edu,
        mflatt@cs.utah.edu, gnats@brinckerhoff.org, jay@kenyamountain.com,
        meunier@ccs.neu.edu, sowens@cs.utah.edu, kathyg@cs.utah.edu,
        awick@cs.utah.edu, goldberg@cs.utah.edu, dskippy@ccs.neu.edu,
        jacobm@cs.uchicago.edu, cce@ccs.neu.edu, dalev@ccs.neu.edu
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 14:39:53 -0400 (EDT)

 I wrote:
 >> But if changing languages and/or teachpacks leaves you in a state in
 >> which the only reasonable thing to do is click the Run button, what's
 >> the benefit of making the user do it manually?
 
 Robby Findler replies:
 >So the effects of the run button are under the user's control, of course.
 
 But if the user doesn't have a realistic alternative to clicking the Run
 button, then you haven't really offered the user a choice, have you?
 
 However, I don't really like this solution either: from the user's
 perspective, there's no obvious reason that changing languages or
 teachpacks should have the side effect of re-Running the definitions
 window (much less that changing languages, clearing one teachpack, and
 loading another should cause THREE re-Runs!), NOR that it should
 obligate the user to re-Run the definitions window manually.
 
 >> Of course, my preferred solution was NOT to "automatically click the Run
 >> button," but rather to change languages and/or teachpacks immediately
 >> without re-executing the Definitions window.  Is that feasible?
 >
 >I don't even understand what that means.
 
 It means two things:
 
 1) the NEXT time the "Run" button is clicked, it'll evaluate the
 Definitions window in the context of the new language and/or teachpack.
 
 2) Expressions typed subsequently into the Interactions window will be
 evaluated in the context of the new language and/or teachpack.
 
 To avoid confusion in the Interactions window, I suggested appending a
 message to the end of the current Interactions window indicating the new
 language and/or teachpack, just like what you normally see at the
 beginning of the Interactions window after clicking "Run".  For example,
 
 Welcome to DrScheme, version 301.
 Language: Beginning Student.
 > (define friends (cons "Joe" (cons "Mary" (cons "Bill" empty))))
 > friends
 (cons "Joe" (cons "Mary" (cons "Bill" empty)))
 >
 Language: Beginning Student with List Abbreviations.
 > friends
 (list "Joe" "Mary" "Bill")
 >
 
 I'm sure there are subtle issues that I don't know about, like what if a
 thread was started before changing languages: does its subsequent
 execution need to be in the context of the new language/teachpack?  But
 I suspect such situations occur very rarely (at least in classroom use),
 and that the user interface would be cleaner and friendlier if it were
 optimized for the common situation rather than these special cases.
 
                                                  Stephen Bloch
                                               sbloch@adelphi.edu
                                         Math/CS Dept, Adelphi University
From: Stephen Bloch <sbloch@panther.adelphi.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@cs.uchicago.edu>, sbloch@adelphi.edu,
        bugs@plt-scheme.org
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 15:05:59 -0400 (EDT)

 Eli Barzilay writes:
 >I think that what Stephen suggests is to just `require' the new
 >teachpack into the repl.  (I don't think that it is a good idea, BTW.)
 
 Can you explain to us peons WHY it's not a good idea? :-)
 
 >How about popping a dialog box that says:
 >
 >  The working environment/language/whatever has changed, and you need
 >  to re-click "Run" for the changes to take effect.
 >
 >  [ ] remember this choice
 >
 >                 [Re-Run]  [Ignore]
 
 Yecch.
 Frankly, this strikes me as the worst of both worlds.  If I'm making
 multiple changes (change language, clear a teachpack, load another), I
 have to go through this dialog three times, choosing "ignore" the first
 two times and "Re-Run" the third.  OTOH, if I'm making only one change,
 I (as a naive user) still don't see any good REASON that "you need to
 re-click "Run" for the changes to take effect;" if there IS a good
 reason, why can't the computer do whatever's necessary without bothering
 me?  (Another example of this is the Eudora e-mail reader: if you're
 using IMAP, every once in a while it pops up a dialog saying "The
 mailbox has changed on the server.  Please resynchronize the mailbox."
 Excuse me... why is this my problem?  If the program is smart enough to
 recognize that resynchronization is necessary, why isn't it smart enough
 to do it?)
 
 Read _About Face 2.0_ for some interesting principles of user-interface
 design.  One of them is "don't ask the user a question that the user
 doesn't have the information to answer."  (A classic example is the
 Windows "Abort, Retry, Ignore?" dialog.)  Related principles include
 "don't ask the user a question if you already know the answer"
 (unnecessarily disrupting the user's workflow) and "don't bother the
 user 'confirming' the common case"  (which is like "crying wolf": if
 there are too many confirmation dialogs, the user gets into the habit
 of clicking "yes" automatically, with eventual disastrous results).
 
                                                  Stephen Bloch
                                               sbloch@adelphi.edu
                                         Math/CS Dept, Adelphi University
From: Eli Barzilay <eli@barzilay.org>
To: Stephen Bloch <sbloch@panther.adelphi.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, sbloch@adelphi.edu,
        bugs@plt-scheme.org
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 15:35:13 -0400

 On Jun  2, Stephen Bloch wrote:
 > Eli Barzilay writes:
 > >I think that what Stephen suggests is to just `require' the new
 > >teachpack into the repl.  (I don't think that it is a good idea, BTW.)
 > 
 > Can you explain to us peons WHY it's not a good idea? :-)
 
 Because requiring a new module into a working repl brings with it
 diseases that are related to the repl.  What happens when the new
 teachpack defines something that was defined in my code (or on my
 repl)?  What happens when code refers to something that was undefined
 and now becomes available?  It looks like you know the result that
 should happen -- my guess is that you want this kind of interaction:
 
     > (define (bar) ... use foo ...)
     > (bar)
     reference to iundefined identifier: foo
   [Add a `foo' teachpack, continue using the repl]
     > (bar)
     "works as expected"
 
 which is sort of what people want with the "Scheme REPL" -- until
 things start to break in subtle ways, like when `foo' turns out to be
 a syntax instead of a procedure etc.
 
 
 > >How about popping a dialog box that says:
 > >
 > >  The working environment/language/whatever has changed, and you need
 > >  to re-click "Run" for the changes to take effect.
 > >
 > >  [ ] remember this choice
 > >
 > >                 [Re-Run]  [Ignore]
 > 
 > Yecch.
 > Frankly, this strikes me as the worst of both worlds.  If I'm making
 > multiple changes (change language, clear a teachpack, load another),
 > I have to go through this dialog three times, choosing "ignore" the
 > first two times and "Re-Run" the third.  OTOH, if I'm making only
 > one change, I (as a naive user) still don't see any good REASON that
 > "you need to re-click "Run" for the changes to take effect;" if
 > there IS a good reason, why can't the computer do whatever's
 > necessary without bothering me?  [...]
 
 If you're doing three changes, and you want an automatic run when a
 change requires it, then you need to either get three re-runs or
 none.  At least with the suggested dialog you can choose if you'll do
 the single click when you want to, or let the machine do it over and
 over after every change.  (My guess is that it would be useful only
 for students, not for developers.)
 
 -or-
 
 Maybe you're talking about a *single* interaction at the time where
 the machine tells you that you should click run to re-synchronize.
 Then, my suggestion turns to a dialog that says the same thing but
 happens not after a change, but when you type something at the repl.
 
 We now have this:
 
   Q: What exactly should the machine do by itself?
   A: Re-run the code when needed.
 
   Q: When should it do it?
   A: After a change happened, and at the time that the user enters an
      expression in the REPL.  (*Not* immediately after a change
      happened)
 
   Q: What should happen with the expression that triggered the
      auto-re-run?
   A: ??
 
 I don't think that there's a sensible answer to the last question: if
 the new expression that I just typed depends only on things that are
 built-in, provided by the language/teachpack, or part of my
 definitions, then everything is fine.  But what if the new expression
 depends on previously REPL-defined values?  Something like this
 interaction:
 
     > (define (foo) ...)
   [change the language, add a teachpack, nothing happened to the repl yet]
     > (foo)
   [what should happen now?]
 
 > Read _About Face 2.0_ for some interesting principles of
 > user-interface design.  One of them is "don't ask the user a
 > question that the user doesn't have the information to answer."  (A
 > classic example is the Windows "Abort, Retry, Ignore?" dialog.)
 > Related principles include "don't ask the user a question if you
 > already know the answer" (unnecessarily disrupting the user's
 > workflow) and "don't bother the user 'confirming' the common case"
 > (which is like "crying wolf": if there are too many confirmation
 > dialogs, the user gets into the habit of clicking "yes"
 > automatically, with eventual disastrous results).
 
 In the general case, I completely agree with you.  I never liked
 programs that ask me three times if I'm sure that I want to quit -- I
 opened the menu and selected the "Quit", why would I do that if I
 don't want to quit??
 
 But in this case, an automatic re-run means that you lose everything
 you constructed on the REPL.  This is fine if you know the
 consequences, but it might be surprising for a newbie who carefully
 made up a world of values, realized he's missing a teachpack, adds it,
 and *poof* his world disappears automatically without even a chance to
 copy the text elsewhere (like copy it to proper test cases in the
 definition window).
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Stephen Bloch <sbloch@panther.adelphi.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@cs.uchicago.edu>, sbloch@adelphi.edu,
        bugs@plt-scheme.org
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 16:08:35 -0400 (EDT)

 I wrote:
 >> Can you explain to us peons WHY it's not a good idea? :-)
 
 Eli Barzilay replies::
 >Because requiring a new module into a working repl brings with it
 >diseases that are related to the repl.  What happens when the new
 >teachpack defines something that was defined in my code (or on my
 >repl)?  What happens when code refers to something that was undefined
 >and now becomes available?
 
 Yes, those would be tricky issues.  As a user, my naive answer is
 "don't bother me unless those issues actually come up."  In other
 words, check whether there are unresolvable conflicts, and if not,
 go ahead and do it.  If there ARE unresolvable conflicts, I guess
 we pop up a dialog box with "Re-Run" and "Not yet" options, as Eli
 suggested; the user is still no worse off than at present, and 90%
 of the time is better off.
 
 Name conflicts with an added teachpack should be easy to detect, and
 to explain to an unsophisticated user; in this case, re-running won't
 solve the problem anyway, so it's not the right thing to do.
 Clearing a teachpack shouldn't create any non-obvious problems (where
 "obvious" includes "user code refers to something that was defined in
 the teachpack").  Changing languages is trickier, because it can change
 the meaning -- even the parsing -- of everything in the definitions
 window.
 
 >But in this case, an automatic re-run means that you lose everything
 >you constructed on the REPL.  This is fine if you know the
 >consequences, but it might be surprising for a newbie who carefully
 >made up a world of values, realized he's missing a teachpack, adds it,
 >and *poof* his world disappears automatically without even a chance to
 >copy the text elsewhere (like copy it to proper test cases in the
 >definition window).
 
 Right... which is why I don't like the automatic re-run solution either.
 
                                                  Stephen Bloch
                                               sbloch@adelphi.edu
                                         Math/CS Dept, Adelphi University
From: Eli Barzilay <eli@barzilay.org>
To: Stephen Bloch <sbloch@panther.adelphi.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, sbloch@adelphi.edu,
        bugs@plt-scheme.org
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 16:18:38 -0400

 On Jun  2, Stephen Bloch wrote:
 > I wrote:
 > >> Can you explain to us peons WHY it's not a good idea? :-)
 > 
 > Eli Barzilay replies::
 > >Because requiring a new module into a working repl brings with it
 > >diseases that are related to the repl.  What happens when the new
 > >teachpack defines something that was defined in my code (or on my
 > >repl)?  What happens when code refers to something that was undefined
 > >and now becomes available?
 > 
 > Yes, those would be tricky issues.  As a user, my naive answer is
 > "don't bother me unless those issues actually come up."  In other
 > words, check whether there are unresolvable conflicts, and if not,
 > go ahead and do it.  If there ARE unresolvable conflicts, I guess
 > we pop up a dialog box with "Re-Run" and "Not yet" options, as Eli
 > suggested; the user is still no worse off than at present, and 90%
 > of the time is better off.
 > 
 > Name conflicts with an added teachpack should be easy to detect, and
 > to explain to an unsophisticated user; in this case, re-running won't
 > solve the problem anyway, so it's not the right thing to do.
 > Clearing a teachpack shouldn't create any non-obvious problems (where
 > "obvious" includes "user code refers to something that was defined in
 > the teachpack").  Changing languages is trickier, because it can change
 > the meaning -- even the parsing -- of everything in the definitions
 > window.
 
 What you're talking about requires a far-from-trivial analysis of the
 change that was just done (new available bindings and the kind of
 these bindings, removed bindings, and a new language that can change
 things in completely arbitrary ways -- if I switch from Scheme to
 profj, my guess is that the reader change pales in comparison to other
 changes), then trying to "thread" the changes into the running repl if
 possible in ways that are also far-from-trivial (like undefining
 bindings if a teachpack was removed, recompiling code if needed etc).
 
 This is much more than a simple GUI-level problem.  Actually, it's
 related to making a "sane" repl -- there might be some changes to the
 definitions code that can be categorized as simple enough to have an
 immediate effect on the running repl.  Because of this, my guess is
 that it will take some *long* time to solve the way you want to...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@cs.uchicago.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Stephen Bloch <sbloch@panther.adelphi.edu>, sbloch@adelphi.edu,
        bugs@plt-scheme.org
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 15:20:32 -0500

 Put it another way: this is a research question, not a bug report. Feel
 free to take DrScheme as your basis for experimentation and let us know
 when you've got the answer.
 
 Robby
 
 At Fri, 2 Jun 2006 16:18:38 -0400, Eli Barzilay wrote:
 > On Jun  2, Stephen Bloch wrote:
 > > I wrote:
 > > >> Can you explain to us peons WHY it's not a good idea? :-)
 > > 
 > > Eli Barzilay replies::
 > > >Because requiring a new module into a working repl brings with it
 > > >diseases that are related to the repl.  What happens when the new
 > > >teachpack defines something that was defined in my code (or on my
 > > >repl)?  What happens when code refers to something that was undefined
 > > >and now becomes available?
 > > 
 > > Yes, those would be tricky issues.  As a user, my naive answer is
 > > "don't bother me unless those issues actually come up."  In other
 > > words, check whether there are unresolvable conflicts, and if not,
 > > go ahead and do it.  If there ARE unresolvable conflicts, I guess
 > > we pop up a dialog box with "Re-Run" and "Not yet" options, as Eli
 > > suggested; the user is still no worse off than at present, and 90%
 > > of the time is better off.
 > > 
 > > Name conflicts with an added teachpack should be easy to detect, and
 > > to explain to an unsophisticated user; in this case, re-running won't
 > > solve the problem anyway, so it's not the right thing to do.
 > > Clearing a teachpack shouldn't create any non-obvious problems (where
 > > "obvious" includes "user code refers to something that was defined in
 > > the teachpack").  Changing languages is trickier, because it can change
 > > the meaning -- even the parsing -- of everything in the definitions
 > > window.
 > 
 > What you're talking about requires a far-from-trivial analysis of the
 > change that was just done (new available bindings and the kind of
 > these bindings, removed bindings, and a new language that can change
 > things in completely arbitrary ways -- if I switch from Scheme to
 > profj, my guess is that the reader change pales in comparison to other
 > changes), then trying to "thread" the changes into the running repl if
 > possible in ways that are also far-from-trivial (like undefining
 > bindings if a teachpack was removed, recompiling code if needed etc).
 > 
 > This is much more than a simple GUI-level problem.  Actually, it's
 > related to making a "sane" repl -- there might be some changes to the
 > definitions code that can be categorized as simple enough to have an
 > immediate effect on the running repl.  Because of this, my guess is
 > that it will take some *long* time to solve the way you want to...
 > 
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
From: Stephen Bloch <sbloch@panther.adelphi.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@cs.uchicago.edu>, sbloch@adelphi.edu,
        bugs@plt-scheme.org
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 19:51:43 -0400 (EDT)

 Eli Barzilay writes:
 >What you're talking about requires a far-from-trivial analysis of the
 >change that was just done (new available bindings and the kind of
 >these bindings, removed bindings, and a new language that can change
 >things in completely arbitrary ways -- if I switch from Scheme to
 >profj, my guess is that the reader change pales in comparison to other
 >changes), then trying to "thread" the changes into the running repl if
 >possible in ways that are also far-from-trivial (like undefining
 >bindings if a teachpack was removed, recompiling code if needed etc).
 
 Yes, it does sound difficult.  Are there any "easy" cases that are
 common enough to be worth handling by themselves?  Is "add a teachpack"
 easy?  Is "switch languages to a superset of the current language" easy?
 I guess, as a research question, this falls into the same category as
 incremental compilation....
 
 Anyway, I think I have a better understanding now of why it's done the
 way it is :-)  If I come up with a better interface that doesn't require
 solving dubiously-decidable problems, I'll let you know.
 
                                                  Stephen Bloch
                                               sbloch@adelphi.edu
                                         Math/CS Dept, Adelphi University
From: Eli Barzilay <eli@barzilay.org>
To: Stephen Bloch <sbloch@panther.adelphi.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, sbloch@adelphi.edu,
        bugs@plt-scheme.org
Subject: Re: all/8085: make language and teachpack changes effective immediately
Date: Fri, 2 Jun 2006 19:56:18 -0400

 On Jun  2, Stephen Bloch wrote:
 > Eli Barzilay writes:
 > >What you're talking about requires a far-from-trivial analysis of the
 > >change that was just done (new available bindings and the kind of
 > >these bindings, removed bindings, and a new language that can change
 > >things in completely arbitrary ways -- if I switch from Scheme to
 > >profj, my guess is that the reader change pales in comparison to other
 > >changes), then trying to "thread" the changes into the running repl if
 > >possible in ways that are also far-from-trivial (like undefining
 > >bindings if a teachpack was removed, recompiling code if needed etc).
 > 
 > Yes, it does sound difficult.  Are there any "easy" cases that are
 > common enough to be worth handling by themselves?
 
 I'm sure there are, but they do require some analysis of the code in
 any case, and even just that would be difficult.
 
 
 > Is "add a teachpack" easy?  Is "switch languages to a superset of
 > the current language" easy?  I guess, as a research question, this
 > falls into the same category as incremental compilation....
 
 And that opens up much more stuff to talk about...  There's a whole
 bunch of things that are really problematic to deal with.
 
 
 > Anyway, I think I have a better understanding now of why it's done the
 > way it is :-)  If I come up with a better interface that doesn't require
 > solving dubiously-decidable problems, I'll let you know.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Responsible changed from "nobody" to "robby" by eli at Wed, 07 Jun 2006 02:18:26 -0400
Reason>>> Probably to be closed (or suspended)

