From nobody@cs.rice.edu  Mon Oct 20 22:02:41 1997
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163]) by cs.rice.edu (8.8.5/8.7.1) with ESMTP id WAA08513 for <plt-gnats@cs.rice.edu>; Mon, 20 Oct 1997 22:02:40 -0500 (CDT)
Message-Id: <199710210302.WAA23945@web.cs.rice.edu>
Date: Mon, 20 Oct 1997 22:02:39 -0500 (CDT)
From: Deinst@world.std.com
Reply-To: Deinst@world.std.com
To: plt-gnats@cs.rice.edu
Subject: REPL returns prompt early when calling old continuations 

>Number:         349
>Category:       drscheme
>Synopsis:       REPL returns prompt early when calling old continuations
>Confidential:   no
>Severity:       non-critical
>Priority:       low
>Responsible:    steck
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Oct 21 03:05:01 GMT 1997
>Last-Modified:  Fri Apr 23 13:16:01 CDT 1999
>Originator:     David Einstein
>Organization:
titan
>Release:        
>Environment:
MS Windows NT
>Description:
;if you execute the attached code, an then type

(foo)

; at the prompt everything works fine. you get

(1 4)
>

; now if you type

(call-failure)

; the command prompt returns first and then the result. and you have to
;  hit return to get the prompt back

>
(2 3)

There is probably a simpler way to cause this, but I'm not very comfortable
with call/cc yet. (as is probably evident)
>How-To-Repeat:
(define fail-stack ())

(define empty-fail-stack?
  (lambda ()
    (null? fail-stack)))

(define pop-fail-stack!
  (lambda ()
    (let ((x (first fail-stack)))
      (set! fail-stack (rest fail-stack))
      x)))

(define push-fail-stack!
  (lambda (fail-cont)
    (set! fail-stack (cons fail-cont fail-stack))))

(define amb
  (lambda (choices)
    (if (null? choices)
	(call-failure)
	(call/cc
	 (lambda (cont)
	   (push-fail-stack! (lambda () (cont (amb (rest choices)))))
	   (first choices))))))

;; call the failure continuation handler
(define call-failure "any continuation")

;; returns a function that calls the top failure continuation
;; or returns to the repl
(define fail-cont
  (lambda (break)
    (lambda ()
      (if (empty-fail-stack?)
	  (break "No more values")
	  ((pop-fail-stack!))))))

;; installs the handler
(define fail-reciever
  (lambda (break)
    (set! call-failure
	  (fail-cont break))))

;; install the handler
(call/cc fail-reciever)

(define require
  (lambda (bool)
    (if (not bool) (call-failure))))

(define foo
  (lambda ()
    (let ((a (amb '(1 2 3 4 5)))
	  (b (amb '(1 2 3 4 5))))
      (require (= 5 (+ a b)))
      (list a b))))
>Fix:

>Audit-Trail:

Responsible-Changed-From-To: ptg->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Tue Oct 21 11:43:21 1997
Responsible-Changed-Why:

Responsible-Changed-From-To: robby->steck
Responsible-Changed-By: steck
Responsible-Changed-When: Wed Mar 11 13:43:22 1998
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Fri Apr 23 13:15:51 1999
State-Changed-Why:
fixed (long ago)


>Unformatted:
