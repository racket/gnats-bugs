From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Feb 18 19:49:57 2007
Received: from nf-out-0910.google.com (nf-out-0910.google.com [64.233.182.187])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l1J0nupl018725
	for <bugs@bugs.plt-scheme.org>; Sun, 18 Feb 2007 19:49:56 -0500
Message-Id: <200702190049.l1J0nllC018719@champlain.ccs.neu.edu>
Date: Sun, 18 Feb 2007 19:49:47 -0500
From: areilly@bigpond.net.au
To: bugs@plt-scheme.org
Subject: Scheme->Create Executable... result crashes

>Number:         8534
>Category:       drscheme
>Synopsis:       Scheme->Create Executable... result crashes
>Class:          sw-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Feb 18 19:50:01 -0500 2007
>Last-Modified:  Sun May 06 15:25:01 -0400 2007
>Originator:     Andrew Reilly
>Organization:
plt
>Submitter-Id:   unknown
>Release:        360
>Environment:
macosx "Darwin apr-laptop.local 8.8.0 Darwin Kernel Version 8.8.0: Fri Sep  8 17:18:57 PDT 2006; root:xnu-792.12.6.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(("/Applications/PLT Scheme v360/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 62812160

Collections:
(("/Users/andrew/Library/PLT Scheme/360/collects" non-existent-path) ("/Applications/PLT Scheme v360/collects" "afm" "algol60" "browser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "readline" "setup" "sgl" "slatex" "slibinit" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tex2page" "texpict" "trace" "version" "web-server" "xml"))
Teachpack filenames: ()
Computer Language: (("Professional Languages" "Swindle" "Full Swindle") #6(#f current-print mixed-fraction-e #f #t debug/profile))
>Description:
I have just tried turning my first PLT scheme program (which draws a graph using mred) into an executable, using the "this machine only, compiled" option.  On both Windows and OS X I get the following error in a Standard Output window:
standard-module-name-resolver: collection not found: "errortrace" in any of: (#<path:/Users/andrew/Library/PLT Scheme/360/collects>)

 === context ===
cloop
#f::353: loop


[Exited]
>How-To-Repeat:
Create plt-graphics-foo.ss containing the following program, then select Scheme->Create Executable... and choose the second of three compile options, then run the resulting program.

#!/usr/bin/env mred -r
(require (lib "graphics.ss" "graphics"))

(define (rnd-vals n)
  "Create a vector of random data"
  (cond ((<= 0 n) (do ((vec (make-vector n))
                      (i 0 (+ i 1)))
                   ((= i n) vec)
                   (vector-set! vec i (- (* 2.0 (random)) 1.0))))
        (else (rnd-vals 0))))

(define (block-poly v w h)
  "Make a polygon that is a rectangle with height determined by the first
   (only) element of vector v."
  (let ((val (vector-ref v 0))
        (dy (/ h 2)))
    (list (make-posn 0 dy)
          (make-posn 0 (- dy (* val dy)))
          (make-posn w (- dy (* val dy)))
          (make-posn w dy))))

(define (simple-poly v w h)
  "Make a polygon with a vertex from every element of v."
  (let ((n (vector-length v))
        (dx (/ w (- (vector-length v) 1)))
        (dy (/ h 2)))
    (let ((vec (list (make-posn 0 dy))))
      (set-cdr!
       (do ((end vec (cdr end))
            (i 0 (+ i 1)))
         ((= i n) end)
         (set-cdr! end (list (make-posn (* dx i)
                                        (- dy (* dy (vector-ref v i)))))))
       (list (make-posn w dy)))
      vec)))

(define (disp-poly l)
  (begin 
    (display (map (lambda (x) (list (posn-x x) (posn-y x))) l))
    (newline)))

(define (band-poly v w h)
  "Make a polygon with number of vertexes determined by width (w, pixels),
   rather than number of elements in v."
  (let* ((n (vector-length v))
         (dx (/ w n))
         (dy (/ h 2))
         (maxpoly (list (make-posn 0 dy)))
         (minpoly (list))
         (pos (lambda (x y) (make-posn x (- dy (* dy y)))))
         (add-max (lambda (e x y) (set-cdr! e (list (pos x y)))))
         (add-min (lambda (x y) (set! minpoly (cons (pos x y) minpoly))))
         (j 0))
    (do ((end-h maxpoly (cdr end-h))
         (i 0 (1+ i)))
      ((= i w) (set-cdr! end-h minpoly) maxpoly)
      (let ((vh (vector-ref v j))
            (vl (vector-ref v j)))
        (do ()
          ((< i (* dx j)) (add-max end-h i vh) (add-min i vl))
          (set! vh (max vh (vector-ref v j)))
          (set! vl (min vl (vector-ref v j)))
          (set! j (1+ j)))))))

(define (vec->poly v w h)
  "Wrap data in vector v as the points of a polygon to plot them.
   The polygon is bounded by a rectangle with width w and height h.
   v must contain at least two values"
  (cond ((< (vector-length v) 1) (block-poly #(0.0) w h))
        ((< (vector-length v) 2) (block-poly v w h))
        ((< (vector-length v) (1+ w)) (simple-poly v w h))
        (else (band-poly v w h))))

(define (run n)
  (begin
    (open-graphics)
    (let* ((dim-x 800)
           (dim-y 600)
           (v (open-viewport "foo" dim-x dim-y)))
      (dynamic-wind
       void
       (lambda ()
         (let ((lft (* 0.1 dim-x)) 
               (rght (* 0.9 dim-x))
               (top (* 0.1 dim-y)) 
               (btm (* 0.9 dim-y)))
           (let ((hgt (- btm top))
                 (wdth (- rght lft))
                 (rect (draw-rectangle v))
                 (polys (draw-solid-polygon v))
                 (poly (draw-polygon v))
                 (p1 (make-posn lft top))
                 (data (rnd-vals n)))
             (rect p1 wdth hgt)
             (polys (vec->poly data wdth hgt) p1 2)
             (poly (vec->poly data wdth hgt) p1 2)
             (get-mouse-click v))))
       (lambda ()
         (close-viewport v))))
    (close-graphics)))
(run 512)
>Fix:
>Audit-Trail:
From: Andrew Reilly <areilly@bigpond.net.au>
To: bugs@plt-scheme.org, Andrew Reilly <areilly@bigpond.net.au>
Cc: 
Subject: Re: all/8534: Scheme->Create Executable... result crashes
Date: Mon, 19 Feb 2007 12:45:52 +1100

 Work-around on OS X:
 Create ~/Library/PLT Scheme/360
 Symlink /Applications/PLT Scheme v360/collects to collects in that  
 360 directory.
 (That gets past the first error.)
 Comment-out shebang on first line.
 (That gets past the next error, which is a reader complaining about  
 syntax.  I thought that this was supposed to be a compiled option?   
 If I want to run from source, then the shebang script form seems to  
 do the job nicely.)
 
 I guess that this means that the installation needs an extra step,  
 and that the compiler needs to whinge about syntax earlier.
 
 Cheers,
 
 Andrew
 
 
 -----------------------------------------
 This message (including any attachments) may contain confidential
 information intended for a specific individual and purpose.  If you
 are not the intended recipient, delete this message.  If you are
 not the intended recipient, disclosing, copying, distributing, or
 taking any action based on this message is strictly prohibited.
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: areilly@bigpond.net.au, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/8534: Scheme->Create Executable... result crashes
Date: Mon, 19 Feb 2007 09:09:28 -0500

 Just out of curiosity: have you looked at the plot collection that  
 comes with the distribution? -- Matthias
 
 
 On Feb 18, 2007, at 7:50 PM, areilly@bigpond.net.au wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8534
 >
 > Reported by Andrew Reilly for release: 360
 >
 > *** Description:
 > I have just tried turning my first PLT scheme program (which draws  
 > a graph using mred) into an executable, using the "this machine  
 > only, compiled" option.  On both Windows and OS X I get the  
 > following error in a Standard Output window:
 > standard-module-name-resolver: collection not found: "errortrace"  
 > in any of: (#<path:/Users/andrew/Library/PLT Scheme/360/collects>)
 >
 >  === context ===
 > cloop
 > #f::353: loop
 >
 >
 > [Exited]
 >
 > *** How to repeat:
 > Create plt-graphics-foo.ss containing the following program, then  
 > select Scheme->Create Executable... and choose the second of three  
 > compile options, then run the resulting program.
 >
 > #!/usr/bin/env mred -r
 > (require (lib "graphics.ss" "graphics"))
 >
 > (define (rnd-vals n)
 >   "Create a vector of random data"
 >   (cond ((<= 0 n) (do ((vec (make-vector n))
 >                       (i 0 (+ i 1)))
 >                    ((= i n) vec)
 >                    (vector-set! vec i (- (* 2.0 (random)) 1.0))))
 >         (else (rnd-vals 0))))
 >
 > (define (block-poly v w h)
 >   "Make a polygon that is a rectangle with height determined by the  
 > first
 >    (only) element of vector v."
 >   (let ((val (vector-ref v 0))
 >         (dy (/ h 2)))
 >     (list (make-posn 0 dy)
 >           (make-posn 0 (- dy (* val dy)))
 >           (make-posn w (- dy (* val dy)))
 >           (make-posn w dy))))
 >
 > (define (simple-poly v w h)
 >   "Make a polygon with a vertex from every element of v."
 >   (let ((n (vector-length v))
 >         (dx (/ w (- (vector-length v) 1)))
 >         (dy (/ h 2)))
 >     (let ((vec (list (make-posn 0 dy))))
 >       (set-cdr!
 >        (do ((end vec (cdr end))
 >             (i 0 (+ i 1)))
 >          ((= i n) end)
 >          (set-cdr! end (list (make-posn (* dx i)
 >                                         (- dy (* dy (vector-ref v  
 > i)))))))
 >        (list (make-posn w dy)))
 >       vec)))
 >
 > (define (disp-poly l)
 >   (begin
 >     (display (map (lambda (x) (list (posn-x x) (posn-y x))) l))
 >     (newline)))
 >
 > (define (band-poly v w h)
 >   "Make a polygon with number of vertexes determined by width (w,  
 > pixels),
 >    rather than number of elements in v."
 >   (let* ((n (vector-length v))
 >          (dx (/ w n))
 >          (dy (/ h 2))
 >          (maxpoly (list (make-posn 0 dy)))
 >          (minpoly (list))
 >          (pos (lambda (x y) (make-posn x (- dy (* dy y)))))
 >          (add-max (lambda (e x y) (set-cdr! e (list (pos x y)))))
 >          (add-min (lambda (x y) (set! minpoly (cons (pos x y)  
 > minpoly))))
 >          (j 0))
 >     (do ((end-h maxpoly (cdr end-h))
 >          (i 0 (1+ i)))
 >       ((= i w) (set-cdr! end-h minpoly) maxpoly)
 >       (let ((vh (vector-ref v j))
 >             (vl (vector-ref v j)))
 >         (do ()
 >           ((< i (* dx j)) (add-max end-h i vh) (add-min i vl))
 >           (set! vh (max vh (vector-ref v j)))
 >           (set! vl (min vl (vector-ref v j)))
 >           (set! j (1+ j)))))))
 >
 > (define (vec->poly v w h)
 >   "Wrap data in vector v as the points of a polygon to plot them.
 >    The polygon is bounded by a rectangle with width w and height h.
 >    v must contain at least two values"
 >   (cond ((< (vector-length v) 1) (block-poly #(0.0) w h))
 >         ((< (vector-length v) 2) (block-poly v w h))
 >         ((< (vector-length v) (1+ w)) (simple-poly v w h))
 >         (else (band-poly v w h))))
 >
 > (define (run n)
 >   (begin
 >     (open-graphics)
 >     (let* ((dim-x 800)
 >            (dim-y 600)
 >            (v (open-viewport "foo" dim-x dim-y)))
 >       (dynamic-wind
 >        void
 >        (lambda ()
 >          (let ((lft (* 0.1 dim-x))
 >                (rght (* 0.9 dim-x))
 >                (top (* 0.1 dim-y))
 >                (btm (* 0.9 dim-y)))
 >            (let ((hgt (- btm top))
 >                  (wdth (- rght lft))
 >                  (rect (draw-rectangle v))
 >                  (polys (draw-solid-polygon v))
 >                  (poly (draw-polygon v))
 >                  (p1 (make-posn lft top))
 >                  (data (rnd-vals n)))
 >              (rect p1 wdth hgt)
 >              (polys (vec->poly data wdth hgt) p1 2)
 >              (poly (vec->poly data wdth hgt) p1 2)
 >              (get-mouse-click v))))
 >        (lambda ()
 >          (close-viewport v))))
 >     (close-graphics)))
 > (run 512)
 >
 > *** Environment:
 > macosx "Darwin apr-laptop.local 8.8.0 Darwin Kernel Version 8.8.0:  
 > Fri Sep  8 17:18:57 PDT 2006; root:xnu-792.12.6.obj~1/RELEASE_PPC  
 > Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
 > Docs Installed:
 > (("/Applications/PLT Scheme v360/doc" "r5rs" "mzscheme" "mred"  
 > "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib"  
 > "framework" "foreign" "mzc" "tools" "insidemz" "web-server"  
 > "swindle" "plot" "release-notes" "t-y-scheme" "tex2page"  
 > "beginning" "beginning-abbr" "intermediate" "intermediate-lambda"  
 > "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj- 
 > intermediate" "profj-advanced"))
 > Human Language: english
 > (current-memory-use) 62812160
 >
 > Collections:
 > (("/Users/andrew/Library/PLT Scheme/360/collects" non-existent- 
 > path) ("/Applications/PLT Scheme v360/collects" "afm" "algol60"  
 > "browser" "compiler" "config" "defaults" "drscheme" "dynext"  
 > "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime"  
 > "games" "graphics" "help" "hierlist" "htdch" "htdp" "html" "icons"  
 > "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make"  
 > "mred" "mrlib" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser- 
 > tools" "planet" "plot" "preprocessor" "profj" "profjBoxes"  
 > "profjWizard" "r5rs" "readline" "setup" "sgl" "slatex" "slibinit"  
 > "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax"  
 > "syntax-color" "teachpack" "test-suite" "tex2page" "texpict"  
 > "trace" "version" "web-server" "xml"))
 > Teachpack filenames: ()
 > Computer Language: (("Professional Languages" "Swindle" "Full  
 > Swindle") #6(#f current-print mixed-fraction-e #f #t debug/profile))
 >
 

Responsible changed from "nobody" to "robby" by eli at Fri, 04 May 2007 05:48:55 -0400
Reason>>> either drscheme or mzscheme, maybe solved


Responsible changed from "robby" to "eli" by robby at Sat, 05 May 2007 12:30:41 -0400
Reason>>> This appears to be a bug in swindle executable creation.

From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>, Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 05:28:42 -0400

 On May  5, robby@plt-scheme.org wrote:
 > 
 > This appears to be a bug in swindle executable creation.
 
 I don't think that there's anything specific to swindle there.  (But I
 can't verify it with v360 right now.)
 
 But this turned up a few suspicious things:
 
 * when I try to create the executable, when the language is `Full
   Swindle', I get
 
     create-embedding-executable: unknown keyword: #:mred
     
      === context ===
     /home/scheme/plt/collects/mzlib/kw.ss:515:0: error*
     language-object
     /home/scheme/plt/collects/mred/private/mrmenu.ss:237:17: command method in basic-selectable-menu-item%
     call-with-break-parameterization
 
 * For some reason, choosing the same menu item in `Pretty Big' creates
   a launcher (using a different dialog).
 
 * When I think about it, the `create executable' is better put in the
   `file' menu, no?
 
 * More general: I don't see any items in the Scheme menu that are
   related to Scheme.
 
 * Also, why isn't `S' the shortcut character for the Scheme menu?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 07:21:10 -0500

 The create-executable method of swindle's language is called. If you
 didn't write it, can you tell me where you get it from?
 
 Robby
 
 On 5/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On May  5, robby@plt-scheme.org wrote:
 > >
 > > This appears to be a bug in swindle executable creation.
 >
 > I don't think that there's anything specific to swindle there.  (But I
 > can't verify it with v360 right now.)
 >
 > But this turned up a few suspicious things:
 >
 > * when I try to create the executable, when the language is `Full
 >   Swindle', I get
 >
 >     create-embedding-executable: unknown keyword: #:mred
 >
 >      === context ===
 >     /home/scheme/plt/collects/mzlib/kw.ss:515:0: error*
 >     language-object
 >     /home/scheme/plt/collects/mred/private/mrmenu.ss:237:17: command method in basic-selectable-menu-item%
 >     call-with-break-parameterization
 >
 > * For some reason, choosing the same menu item in `Pretty Big' creates
 >   a launcher (using a different dialog).
 >
 > * When I think about it, the `create executable' is better put in the
 >   `file' menu, no?
 >
 > * More general: I don't see any items in the Scheme menu that are
 >   related to Scheme.
 >
 > * Also, why isn't `S' the shortcut character for the Scheme menu?
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 08:26:13 -0400

 On May  6, Robby Findler wrote:
 > The create-executable method of swindle's language is called. If you
 > didn't write it, can you tell me where you get it from?
 
 I didn't write it, and it's not there.  Whatever is in must be some
 default.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "Robby Findler" <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 20:35:23 +0800

 A quick grep for "#:mred" suggests that the problem is in
 "drscheme/private/langauge.ss".
 
 Matthew
 
 At Sun, 6 May 2007 08:26:13 -0400, Eli Barzilay wrote:
 > On May  6, Robby Findler wrote:
 > > The create-executable method of swindle's language is called. If you
 > > didn't write it, can you tell me where you get it from?
 > 
 > I didn't write it, and it's not there.  Whatever is in must be some
 > default.
 > 
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 08:06:22 -0500

 On 5/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On May  6, Robby Findler wrote:
 > > The create-executable method of swindle's language is called. If you
 > > didn't write it, can you tell me where you get it from?
 >
 > I didn't write it, and it's not there.  Whatever is in must be some
 > default.
 
 I'll look at your code later on today (hopefully), but what you write
 above suggests that the bug is that swindle doesn't change the default
 behavior.
 
 (the #:mred bug may be something else.)
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 09:48:38 -0400

 On May  6, Robby Findler wrote:
 > On 5/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > > On May  6, Robby Findler wrote:
 > > > The create-executable method of swindle's language is called. If
 > > > you didn't write it, can you tell me where you get it from?
 > >
 > > I didn't write it, and it's not there.  Whatever is in must be
 > > some default.
 > 
 > I'll look at your code later on today (hopefully), but what you
 > write above suggests that the bug is that swindle doesn't change the
 > default behavior.
 
 Shouldn't not-changing-the-default never be a bug?
 
 
 > (the #:mred bug may be something else.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 11:31:43 -0500

 That's not what you did, of course.
 
 If you change some defaults, but fail to change others in a consistent
 way, that's a bug.
 
 Robby
 
 On 5/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On May  6, Robby Findler wrote:
 > > On 5/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > > > On May  6, Robby Findler wrote:
 > > > > The create-executable method of swindle's language is called. If
 > > > > you didn't write it, can you tell me where you get it from?
 > > >
 > > > I didn't write it, and it's not there.  Whatever is in must be
 > > > some default.
 > >
 > > I'll look at your code later on today (hopefully), but what you
 > > write above suggests that the bug is that swindle doesn't change the
 > > default behavior.
 >
 > Shouldn't not-changing-the-default never be a bug?
 >
 >
 > > (the #:mred bug may be something else.)
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 14:26:11 -0400

 On May  6, Robby Findler wrote:
 > That's not what you did, of course.
 > 
 > If you change some defaults, but fail to change others in a
 > consistent way, that's a bug.
 
 1. I did the tool well before the create executable menu entry.
 
 2. As usual, I copied some example (eopl, probably) and adjusted
    that.
 
 3. I will not be surprised if the same problem happens with other
    tools.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 14:16:44 -0500

 1. why are you numbering things?
 
 2. copied code is as copied code does.
 
 3. i will not be surprised if the sky falls on my head.
 
 On 5/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On May  6, Robby Findler wrote:
 > > That's not what you did, of course.
 > >
 > > If you change some defaults, but fail to change others in a
 > > consistent way, that's a bug.
 >
 > 1. I did the tool well before the create executable menu entry.
 >
 > 2. As usual, I copied some example (eopl, probably) and adjusted
 >    that.
 >
 > 3. I will not be surprised if the same problem happens with other
 >    tools.
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] drscheme/8534 Scheme->Create Executable... result crashes
Date: Sun, 6 May 2007 15:22:07 -0400

 I number things because it helps me to write shorter texts, which I'm
 sure everyone enjoys.  Maybe I'll get used to doing that after using
 items for a while.  As for the copied code, the main implication that
 should be worrying you (as the interface programmer) is item #3.  (My
 item #3, the sky looks fine modulo certain gases.)
 
 
 On May  6, Robby Findler wrote:
 > 1. why are you numbering things?
 > 
 > 2. copied code is as copied code does.
 > 
 > 3. i will not be surprised if the sky falls on my head.
 > 
 > On 5/6/07, Eli Barzilay <eli@barzilay.org> wrote:
 > > On May  6, Robby Findler wrote:
 > > > That's not what you did, of course.
 > > >
 > > > If you change some defaults, but fail to change others in a
 > > > consistent way, that's a bug.
 > >
 > > 1. I did the tool well before the create executable menu entry.
 > >
 > > 2. As usual, I copied some example (eopl, probably) and adjusted
 > >    that.
 > >
 > > 3. I will not be surprised if the same problem happens with other
 > >    tools.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
