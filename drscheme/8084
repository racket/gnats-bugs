From apache@plt-scheme.org Fri Jun  2 11:39:07 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k52Fd03X012504
	for <bugs@plt-scheme.org>; Fri, 2 Jun 2006 11:39:00 -0400
Message-Id: <200606021539.k52Fd0mG012502@champlain.ccs.neu.edu>
Date: Fri, 2 Jun 2006 11:39:00 -0400
From: sbloch@adelphi.edu
To: bugs@plt-scheme.org
Subject: error message still present after fixing & checking syntax

>Number:         8084
>Category:       drscheme
>Synopsis:       error message still present after fixing & checking syntax
>Class:          change-request
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jun 02 11:40:00 -0400 2006
>Last-Modified:  Fri Jun 02 19:45:00 -0400 2006
>Originator:     Stephen Bloch
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301
>Environment:
macosx "Darwin user-0cdflme.cable.mindspring.com 8.6.0 Darwin Kernel Version 8.6.0: Tue Mar  7 16:58:48 PST 2006; root:xnu-792.6.70.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Applications/PLT Scheme v301/collects/doc/web-server> #<path:/Applications/PLT Scheme v301/collects/doc/tour> #<path:/Applications/PLT Scheme v301/collects/doc/tools> #<path:/Applications/PLT Scheme v301/collects/doc/tex2page> #<path:/Applications/PLT Scheme v301/collects/doc/teachpack> #<path:/Applications/PLT Scheme v301/collects/doc/t-y-scheme> #<path:/Applications/PLT Scheme v301/collects/doc/swindle> #<path:/Applications/PLT Scheme v301/collects/doc/srfi> #<path:/Applications/PLT Scheme v301/collects/doc/r5rs> #<path:/Applications/PLT Scheme v301/collects/doc/profj-intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/profj-beginner> #<path:/Applications/PLT Scheme v301/collects/doc/profj-advanced> #<path:/Applications/PLT Scheme v301/collects/doc/plot> #<path:/Applications/PLT Scheme v301/collects/doc/mzscheme> #<path:/Applications/PLT Scheme v301/collects/doc/mzlib> #<path:/Applications/PLT Scheme v301/collects/doc/mzc> #<path:/Applications/PLT Scheme v301/collects/doc/mrlib> #<path:/Applications/PLT Scheme v301/collects/doc/mred> #<path:/Applications/PLT Scheme v301/collects/doc/misclib> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate-lambda> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/insidemz> #<path:/Applications/PLT Scheme v301/collects/doc/help> #<path:/Applications/PLT Scheme v301/collects/doc/framework> #<path:/Applications/PLT Scheme v301/collects/doc/foreign> #<path:/Applications/PLT Scheme v301/collects/doc/drscheme> #<path:/Applications/PLT Scheme v301/collects/doc/beginning-abbr> #<path:/Applications/PLT Scheme v301/collects/doc/beginning> #<path:/Applications/PLT Scheme v301/collects/doc/advanced>)
Collections:
((#<path:/Users/teeb/Library/PLT Scheme/301/collects> (#<path:info-domain> #<path:profj>)) (#<path:/Applications/PLT Scheme v301/collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:r5rs> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#6(#t constructor repeating-decimal #f #t none) #f))
>Description:
If I write some code (say, in Beginning Student) with a syntax error,
and hit "Run", an error message appears in the interactions pane.  If
I then fix the error and hit "Check Syntax", the error message is
still in the interactions pane, which leads many students to think
they haven't successfully fixed it (after all, "Check Syntax" is
supposed to tell whether there are syntax errors, and there's a
syntax error message staring me in the face).  I've been complaining
about this since about version 207; is there a way to fix it?
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 12:47:48 -0500

 At Fri, 2 Jun 2006 11:22:40 -0600, Matthew Flatt wrote:
 > At Fri, 2 Jun 2006 12:19:37 -0500, Robby Findler wrote:
 > > Perhaps "how" is the wrong word. We're clearly talking across each
 > > other here. Let me repeat Bloch's sequence of actions:
 > > 
 > >   1) write a buggy (syntax erroring, say) program
 > >   2) click run.
 > >   3) see error message in interactions window.
 > >   4) fix bug
 > >   5) click check syntax
 > >   6) still see bug in interactions window.
 > >   7) be confused.
 > > 
 > > It is step 7 we want to avoid :)
 > 
 > Is there any particular reason to not clear interactions, aside from
 > the fact that it's not strictly necessary?
 > 
 > (I can imagine some implementation reasons, but I don't see a
 > GUI-design reason.)
 
 Okay, I called Matthias and I think we are all on the same page about
 the problem.
 
 There aren't any implementation reasons not to do the above, as far as
 I can tell, but I worry about user complaints. In particular, I can
 imagine disabling the REPL and clearing it out when you click check
 syntax (and even replacing the "Welcome" message with a
 language-appropriate one). But, each time I've shortened the life of
 the REPL, I've gotten complaints.
 
 Matthias countered with the suggestion that the REPL be cleared, but
 not disabled and still be "alive" with the old version of the program
 (but still keep the yellow/black warnings). I find that to be too
 confusing for my taste and actually prefer to get complaints, but I'm
 not positive about that.
 
 Other thoughts?
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 13:52:23 -0400

 On Jun 2, 2006, at 1:47 PM, Robby Findler wrote:
 
 > At Fri, 2 Jun 2006 11:22:40 -0600, Matthew Flatt wrote:
 >> At Fri, 2 Jun 2006 12:19:37 -0500, Robby Findler wrote:
 >>> Perhaps "how" is the wrong word. We're clearly talking across each
 >>> other here. Let me repeat Bloch's sequence of actions:
 >>>
 >>>   1) write a buggy (syntax erroring, say) program
 >>>   2) click run.
 >>>   3) see error message in interactions window.
 >>>   4) fix bug
 >>>   5) click check syntax
 >>>   6) still see bug in interactions window.
 >>>   7) be confused.
 >>>
 >>> It is step 7 we want to avoid :)
 >>
 >> Is there any particular reason to not clear interactions, aside from
 >> the fact that it's not strictly necessary?
 >>
 >> (I can imagine some implementation reasons, but I don't see a
 >> GUI-design reason.)
 >
 > Okay, I called Matthias and I think we are all on the same page about
 > the problem.
 >
 > There aren't any implementation reasons not to do the above, as far as
 > I can tell, but I worry about user complaints. In particular, I can
 > imagine disabling the REPL and clearing it out when you click check
 > syntax (and even replacing the "Welcome" message with a
 > language-appropriate one). But, each time I've shortened the life of
 > the REPL, I've gotten complaints.
 >
 > Matthias countered with the suggestion that the REPL be cleared, but
 > not disabled and still be "alive" with the old version of the program
 
 I didn't say that and I know you can't mean it either. When you
 have a sequence of definitions and one of them blows up on you,
 your repl knows NOTHING:
 
 (define g 10)
 
 (define f 0 10)
 
 RUN this and type g. You get undefined identifier g.
 
 1. What I wanted: people should be able to type in a closed
 expression and get an answer.
 
 2. What you could do is lengthen the life of the REPL and
 get some kudos but I think this is useless:
 
 Make the definitions up to the syntax bug available and
 take into account that this may cause "undefined" errors.
 Big deal.
 
 -- Matthias
 
 
 
 
 > (but still keep the yellow/black warnings). I find that to be too
 > confusing for my taste and actually prefer to get complaints, but I'm
 > not positive about that.
 >
 > Other thoughts?
 >
 > Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 12:56:51 -0500

 At Fri, 2 Jun 2006 13:52:23 -0400, Matthias Felleisen wrote:
 > 
 > On Jun 2, 2006, at 1:47 PM, Robby Findler wrote:
 > 
 > > At Fri, 2 Jun 2006 11:22:40 -0600, Matthew Flatt wrote:
 > >> At Fri, 2 Jun 2006 12:19:37 -0500, Robby Findler wrote:
 > >>> Perhaps "how" is the wrong word. We're clearly talking across each
 > >>> other here. Let me repeat Bloch's sequence of actions:
 > >>>
 > >>>   1) write a buggy (syntax erroring, say) program
 > >>>   2) click run.
 > >>>   3) see error message in interactions window.
 > >>>   4) fix bug
 > >>>   5) click check syntax
 > >>>   6) still see bug in interactions window.
 > >>>   7) be confused.
 > >>>
 > >>> It is step 7 we want to avoid :)
 > >>
 > >> Is there any particular reason to not clear interactions, aside from
 > >> the fact that it's not strictly necessary?
 > >>
 > >> (I can imagine some implementation reasons, but I don't see a
 > >> GUI-design reason.)
 > >
 > > Okay, I called Matthias and I think we are all on the same page about
 > > the problem.
 > >
 > > There aren't any implementation reasons not to do the above, as far as
 > > I can tell, but I worry about user complaints. In particular, I can
 > > imagine disabling the REPL and clearing it out when you click check
 > > syntax (and even replacing the "Welcome" message with a
 > > language-appropriate one). But, each time I've shortened the life of
 > > the REPL, I've gotten complaints.
 > >
 > > Matthias countered with the suggestion that the REPL be cleared, but
 > > not disabled and still be "alive" with the old version of the program
 > 
 > I didn't say that and I know you can't mean it either. 
 
 Looks like the confusing wasn't cleared up on the phone. This whole
 exchange is going into the twilight zone. I'm going to try one more
 time to get us somewhere that makes sense to me, but after that I'm
 going to have to give up, unless you want to have a try of starting it
 over.
 
 > When you
 > have a sequence of definitions and one of them blows up on you,
 > your repl knows NOTHING:
 > 
 > (define g 10)
 > 
 > (define f 0 10)
 > 
 > RUN this and type g. You get undefined identifier g.
 
 Okay ... but this is a completely different issue than the one we are
 talking about. Do you agree with that statement?
 
 > 1. What I wanted: people should be able to type in a closed
 > expression and get an answer.
 
 But that means no + or cons, for example (after all, the meaning of
 those depends on the language level, so you can't get that meaning
 until you click Run and we don't want to click Run automatically)
 
 > 2. What you could do is lengthen the life of the REPL and
 > get some kudos but I think this is useless:
 
 I agree with that.
 
 > Make the definitions up to the syntax bug available and
 > take into account that this may cause "undefined" errors.
 > Big deal.
 
 Again, just to double check -- are you talking about Bloch's original
 point, or your new one (from above)?
 
  
 > -- Matthias
 > 
 > 
 > 
 > 
 > > (but still keep the yellow/black warnings). I find that to be too
 > > confusing for my taste and actually prefer to get complaints, but I'm
 > > not positive about that.
 > >
 > > Other thoughts?
 > >
 > > Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 14:02:46 -0400

 On Jun 2, 2006, at 1:56 PM, Robby Findler wrote:
 
 >>> Matthias countered with the suggestion that the REPL be cleared, but
 >>> not disabled and still be "alive" with the old version of the program
 >>
 >> I didn't say that and I know you can't mean it either.
 >
 > Looks like the confusing wasn't cleared up on the phone. This whole
 > exchange is going into the twilight zone. I'm going to try one more
 > time to get us somewhere that makes sense to me, but after that I'm
 > going to have to give up, unless you want to have a try of starting it
 > over.
 
 In my mind, I am making a very minor correction to our phone 
 conversation.
 All I am disagreeing with is that there is anything "alive" in the REPL.
 It should be the language level and nothing else [see point 1 below].
 
 >> When you
 >> have a sequence of definitions and one of them blows up on you,
 >> your repl knows NOTHING:
 >>
 >> (define g 10)
 >>
 >> (define f 0 10)
 >>
 >> RUN this and type g. You get undefined identifier g.
 >
 > Okay ... but this is a completely different issue than the one we are
 > talking about. Do you agree with that statement?
 
 Of course.
 
 >> 1. What I wanted: people should be able to type in a closed
 >> expression and get an answer.
 >
 > But that means no + or cons, for example (after all, the meaning of
 > those depends on the language level, so you can't get that meaning
 > until you click Run and we don't want to click Run automatically)
 
 When I say closed I mean "closed wrt language level."
 
 >> 2. What you could do is lengthen the life of the REPL and
 >> get some kudos but I think this is useless:
 >
 > I agree with that.
 >
 >> Make the definitions up to the syntax bug available and
 >> take into account that this may cause "undefined" errors.
 >> Big deal.
 >
 > Again, just to double check -- are you talking about Bloch's original
 > point, or your new one (from above)?
 
 I am talking about the Bloch's bug and my proposed fix.
 
 -- Matthias
 
 
 >
 >
 >> -- Matthias
 >>
 >>
 >>
 >>
 >>> (but still keep the yellow/black warnings). I find that to be too
 >>> confusing for my taste and actually prefer to get complaints, but I'm
 >>> not positive about that.
 >>>
 >>> Other thoughts?
 >>>
 >>> Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 13:05:18 -0500

 At Fri, 2 Jun 2006 14:02:46 -0400, Matthias Felleisen wrote:
 > 
 > On Jun 2, 2006, at 1:56 PM, Robby Findler wrote:
 > 
 > >>> Matthias countered with the suggestion that the REPL be cleared, but
 > >>> not disabled and still be "alive" with the old version of the program
 > >>
 > >> I didn't say that and I know you can't mean it either.
 > >
 > > Looks like the confusing wasn't cleared up on the phone. This whole
 > > exchange is going into the twilight zone. I'm going to try one more
 > > time to get us somewhere that makes sense to me, but after that I'm
 > > going to have to give up, unless you want to have a try of starting it
 > > over.
 > 
 > In my mind, I am making a very minor correction to our phone 
 > conversation.
 > All I am disagreeing with is that there is anything "alive" in the REPL.
 > It should be the language level and nothing else [see point 1 below].
 > 
 > >> When you
 > >> have a sequence of definitions and one of them blows up on you,
 > >> your repl knows NOTHING:
 > >>
 > >> (define g 10)
 > >>
 > >> (define f 0 10)
 > >>
 > >> RUN this and type g. You get undefined identifier g.
 > >
 > > Okay ... but this is a completely different issue than the one we are
 > > talking about. Do you agree with that statement?
 > 
 > Of course.
 > 
 > >> 1. What I wanted: people should be able to type in a closed
 > >> expression and get an answer.
 > >
 > > But that means no + or cons, for example (after all, the meaning of
 > > those depends on the language level, so you can't get that meaning
 > > until you click Run and we don't want to click Run automatically)
 > 
 > When I say closed I mean "closed wrt language level."
 
 What do I do if it isn't?
 
 > >> 2. What you could do is lengthen the life of the REPL and
 > >> get some kudos but I think this is useless:
 > >
 > > I agree with that.
 > >
 > >> Make the definitions up to the syntax bug available and
 > >> take into account that this may cause "undefined" errors.
 > >> Big deal.
 > >
 > > Again, just to double check -- are you talking about Bloch's original
 > > point, or your new one (from above)?
 > 
 > I am talking about the Bloch's bug and my proposed fix.
 
 How can your proposed fix to Bloch's bug have anything to do with
 definitions "up to the syntax bug"?!
 
 Argh.
 
 > -- Matthias
 > 
 > 
 > >
 > >
 > >> -- Matthias
 > >>
 > >>
 > >>
 > >>
 > >>> (but still keep the yellow/black warnings). I find that to be too
 > >>> confusing for my taste and actually prefer to get complaints, but I'm
 > >>> not positive about that.
 > >>>
 > >>> Other thoughts?
 > >>>
 > >>> Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 14:12:01 -0400

 On Jun 2, 2006, at 2:05 PM, Robby Findler wrote:
 >> When I say closed I mean "closed wrt language level."
 >
 > What do I do if it isn't?
 
 Raise an error.
 
 >>>> 2. What you could do is lengthen the life of the REPL and
 >>>> get some kudos but I think this is useless:
 >>>
 >>> I agree with that.
 >>>
 >>>> Make the definitions up to the syntax bug available and
 >>>> take into account that this may cause "undefined" errors.
 >>>> Big deal.
 >>>
 >>> Again, just to double check -- are you talking about Bloch's original
 >>> point, or your new one (from above)?
 >>
 >> I am talking about the Bloch's bug and my proposed fix.
 >
 > How can your proposed fix to Bloch's bug have anything to do with
 > definitions "up to the syntax bug"?!
 
 Step by step:
 
 1. You run the buggy program. The error message appears.
 
 2. You edit the text.
 
 3. If you were to move the cursor to the REPL, what would you be able 
 to evaluate? Currently NOTHING, except for expressions that are closed 
 wrt the language level.
 
 The current implementation does not add anything to the REPL's "eval 
 context" when the DEF buffer contains a bug.
 
 My proposal 1 is to provide exactly that state of the REPL with a GUI 
 that doesn't contain the error message anymore.
 
 ;; ---
 
 My proposal 2 is to provide what the Emacs repl would provide, but as I 
 have said before, I think that the kudos you get for this have become 
 useless in my mind.
 
 In this scenario, you do steps 1, 2, and 3. Then you can evaluate 
 expressions that are closed with respect to the language level PLUS the 
 definitions that were evaluated w/o error before you hit the error.
 
 Does this make sense? -- Matthias
 
 
 
 
 
 
 
 >
 > Argh.
 >
 >> -- Matthias
 >>
 >>
 >>>
 >>>
 >>>> -- Matthias
 >>>>
 >>>>
 >>>>
 >>>>
 >>>>> (but still keep the yellow/black warnings). I find that to be too
 >>>>> confusing for my taste and actually prefer to get complaints, but 
 >>>>> I'm
 >>>>> not positive about that.
 >>>>>
 >>>>> Other thoughts?
 >>>>>
 >>>>> Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 13:24:57 -0500

 At Fri, 2 Jun 2006 14:12:01 -0400, Matthias Felleisen wrote:
 > 
 > On Jun 2, 2006, at 2:05 PM, Robby Findler wrote:
 > >> When I say closed I mean "closed wrt language level."
 > >
 > > What do I do if it isn't?
 > 
 > Raise an error.
 >
 > >>>> 2. What you could do is lengthen the life of the REPL and
 > >>>> get some kudos but I think this is useless:
 > >>>
 > >>> I agree with that.
 > >>>
 > >>>> Make the definitions up to the syntax bug available and
 > >>>> take into account that this may cause "undefined" errors.
 > >>>> Big deal.
 > >>>
 > >>> Again, just to double check -- are you talking about Bloch's original
 > >>> point, or your new one (from above)?
 > >>
 > >> I am talking about the Bloch's bug and my proposed fix.
 > >
 > > How can your proposed fix to Bloch's bug have anything to do with
 > > definitions "up to the syntax bug"?!
 > 
 > Step by step:
 > 
 > 1. You run the buggy program. The error message appears.
 > 
 > 2. You edit the text.
 > 
 > 3. If you were to move the cursor to the REPL, what would you be able 
 > to evaluate? Currently NOTHING, except for expressions that are closed 
 > wrt the language level.
 
 What if the language level is `module'? Then, no open expressions at
 all (after all, they might have changed the second argument to
 `module')? (keeping in mind that we're trying to move towards the
 teaching language levels being module-like)
 
 > The current implementation does not add anything to the REPL's "eval 
 > context" when the DEF buffer contains a bug.
 
 Only in module-basd language levels (ie, the teaching languages & the
 module language). Changing this entails changing module somehow (not
 that that matters too much, just pointing it out).
 
 > My proposal 1 is to provide exactly that state of the REPL with a GUI 
 > that doesn't contain the error message anymore.
 > 
 > ;; ---
 > 
 > My proposal 2 is to provide what the Emacs repl would provide, but as I 
 > have said before, I think that the kudos you get for this have become 
 > useless in my mind.
 
 I don't see a need for proposal 2 (and I think you don't either,
 right?)
 
 > In this scenario, you do steps 1, 2, and 3. Then you can evaluate 
 > expressions that are closed with respect to the language level PLUS the 
 > definitions that were evaluated w/o error before you hit the error.
 > 
 > Does this make sense? -- Matthias
 
 Much better, thanks!
 
 It doesn't seem to have anything to do with Bloch's original issue,
 however. Can you explain how that fits in?
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: bugs@plt-scheme.org, sbloch@adelphi.edu
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 15:17:52 -0500

 Steve, I'm thinking of following Matthew's suggestion for the upcoming
 350 release. Would that help?
 
 Thanks,
 Robby
 
 At Fri, 2 Jun 2006 12:53:35 -0600, Matthew Flatt wrote:
 > Would it make sense to just hide the interactions window when Check
 > Syntax is clicked? Would it solve the problem?
 > 
 > Matthew
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 15:53:42 -0500

 Okay, I've checked in that change. I think it works nicely.
 
 Robby
 
 At Fri, 2 Jun 2006 12:53:35 -0600, Matthew Flatt wrote:
 > Would it make sense to just hide the interactions window when Check
 > Syntax is clicked? Would it solve the problem?
 > 
 > Matthew

State changed from "open" to "closed" by robby at Fri, 02 Jun 2006 17:23:11 -0400
Reason>>> I just went ahead and now drscheme hides the interactions window when
clicking check syntax. hopefully this does the trick (if not, we can re-open
the PR)

From: Stephen Bloch <sbloch@panther.adelphi.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, sbloch@adelphi.edu,
        Matthew Flatt <mflatt@cs.utah.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: all/8084: error message still present after fixing & checking syntax
Date: Fri, 2 Jun 2006 19:41:42 -0400 (EDT)

 At Fri, 2 Jun 2006 12:53:35 -0600, Matthew Flatt wrote:
 >> Would it make sense to just hide the interactions window when Check
 >> Syntax is clicked? Would it solve the problem?
 
 Robby Findler writes:
 >Steve, I'm thinking of following Matthew's suggestion for the upcoming
 >350 release. Would that help?
 
 That would certainly be simple.  If a student REALLY wants to see what
 was in the Interactions window before Check Syntax, (s)he can "show
 interactions", but most will just click "Run" and get the right answers.
 And it has the side benefit that, immediately after Check Syntax, you
 see a full page of colored source code rather than half a page, so you're
 more likely to spot funny stuff.  Sure, that should work.
 
                                                  Stephen Bloch
                                               sbloch@adelphi.edu
                                         Math/CS Dept, Adelphi University
