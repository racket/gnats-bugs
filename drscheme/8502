From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jan 26 13:33:32 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.236])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l0QIXV95018654
	for <bugs@bugs.plt-scheme.org>; Fri, 26 Jan 2007 13:33:31 -0500
Message-Id: <200701261833.l0QIXU5F018649@champlain.ccs.neu.edu>
Date: Fri, 26 Jan 2007 13:33:30 -0500
From: samth@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Check Syntax draws extra arrows when modules are required multiple time.

>Number:         8502
>Category:       drscheme
>Synopsis:       Check Syntax draws extra arrows when modules are required multiple time.
>Class:          change-request
>Responsible:    mflatt
>Notify-List:    mflatt@plt-scheme.org
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jan 26 13:35:01 -0500 2007
>Closed-Date:    Sat Jan 27 00:07:29 -0500 2007
>Last-Modified:  Fri May 04 07:56:28 -0400 2007
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.6-svn26jan2007
>Environment:
unix "Linux punge 2.6.17-10-386 #2 Tue Dec 5 22:26:18 UTC 2006 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Docs Installed:
(("/home/samth/sw/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") (* "/home/samth/work/typed-scheme/doc"))
Human Language: english
(current-memory-use) 117990732

Collections:
(("/home/samth/scheme" "infix4.diff" "info-domain" "assembler") ("/home/samth/.plt-scheme/369.6/collects" non-existent-path) ("/home/samth/sw/plt/collects" ".svn" "tex2page" "string-constants" "planet" "mzcom" "drscheme" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "syntax-color" "srfi" "algol60" "dynext" "slibinit" "make" "plot" "lang" "web-server" "openssl" "scribble" "frtime" "mred" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "config" "defaults" "icons" "skipper" "handin-client" "texpict" "profjBoxes" "browser" "teachpack" "parser-tools" "waterworld" "r5rs" "mztake" "games" "honu-module" "eopl" "tests" "html" "swindle" "handin-server" "repos-time-stamp" "mrflow" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "syntax" "preprocessor" "net" "help" "htdch" "xelda" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "test-suite" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "lazy" "macro-debugger" "wxme"))
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
If you do Check Syntax on the following module:

(module n mzscheme
  (require (prefix x: mzscheme))
  +)

And then mouse over the +, two arrows are drawn: one to the language position, where the + comes from, and one to the require line, where the + doesn't come from.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby.findler@gmail.com>
To: samth@ccs.neu.edu, bugs@plt-scheme.org
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 13:37:08 -0600

 Matthew: is it true that the x:+ is a different binding (in the syntax
 identity sense) than the +?
 
 I recall making check syntax do this on purpose at one point, but I
 can't recall why.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: samth@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Sat, 27 Jan 2007 05:49:15 +0800

 At Fri, 26 Jan 2007 13:37:08 -0600, "Robby Findler" wrote:
 > Matthew: is it true that the x:+ is a different binding (in the syntax
 > identity sense) than the +?
 
 No, they're `module-identifier=?'.
 
 Matthew
 
From: "Robby Findler" <robby.findler@gmail.com>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: samth@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 15:52:46 -0600

 On 1/26/07, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Fri, 26 Jan 2007 13:37:08 -0600, "Robby Findler" wrote:
 > > Matthew: is it true that the x:+ is a different binding (in the syntax
 > > identity sense) than the +?
 >
 > No, they're `module-identifier=?'.
 
 So .. not a bug?
 
 Robby
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 17:05:33 -0500

 On 1/26/07, Robby Findler <robby.findler@gmail.com> wrote:
 > On 1/26/07, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > At Fri, 26 Jan 2007 13:37:08 -0600, "Robby Findler" wrote:
 > > > Matthew: is it true that the x:+ is a different binding (in the syntax
 > > > identity sense) than the +?
 > >
 > > No, they're `module-identifier=?'.
 >
 > So .. not a bug?
 
 I think it's definitely a bug.  It's telling the user that + is bound
 by a location that does not, in fact, bind it.  Further, it breaks the
 invariant (well, mostly invariant) that references only point to one
 binder.
 
 FWIW, the people I've asked around the lab (Ryan and Matthias) both
 think it's definitely a bug.
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: "Sam TH" <samth@ccs.neu.edu>, "Matthew Flatt" <mflatt@cs.utah.edu>,
        bugs@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 17:12:32 -0500

 I agree. This is a problem with identifiermodule-=
 
 -- Matthias
 
 
 On Jan 26, 2007, at 5:10 PM, Robby Findler wrote:
 
 > Sorry: not a bug in Check Syntax is what I meant. Check Syntax just
 > reports te module-identifier=? information.
 >
 > Indeed, given that they are module-idenifier=?, I don't see how check
 > syntax should be expected to tell them apart. (the prefixed and
 > unprefixed + that is).
 >
 > Robby
 >
 > On 1/26/07, Sam TH <samth@ccs.neu.edu> wrote:
 >> On 1/26/07, Robby Findler <robby.findler@gmail.com> wrote:
 >> > On 1/26/07, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 >> > > At Fri, 26 Jan 2007 13:37:08 -0600, "Robby Findler" wrote:
 >> > > > Matthew: is it true that the x:+ is a different binding (in  
 >> the syntax
 >> > > > identity sense) than the +?
 >> > >
 >> > > No, they're `module-identifier=?'.
 >> >
 >> > So .. not a bug?
 >>
 >> I think it's definitely a bug.  It's telling the user that + is bound
 >> by a location that does not, in fact, bind it.  Further, it breaks  
 >> the
 >> invariant (well, mostly invariant) that references only point to one
 >> binder.
 >>
 >> FWIW, the people I've asked around the lab (Ryan and Matthias) both
 >> think it's definitely a bug.
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 
From: "Robby Findler" <robby.findler@gmail.com>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org,
        "Matthias Felleisen" <matthias@ccs.neu.edu>, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 16:10:44 -0600

 Sorry: not a bug in Check Syntax is what I meant. Check Syntax just
 reports te module-identifier=? information.
 
 Indeed, given that they are module-idenifier=?, I don't see how check
 syntax should be expected to tell them apart. (the prefixed and
 unprefixed + that is).
 
 Robby
 
 On 1/26/07, Sam TH <samth@ccs.neu.edu> wrote:
 > On 1/26/07, Robby Findler <robby.findler@gmail.com> wrote:
 > > On 1/26/07, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > > At Fri, 26 Jan 2007 13:37:08 -0600, "Robby Findler" wrote:
 > > > > Matthew: is it true that the x:+ is a different binding (in the syntax
 > > > > identity sense) than the +?
 > > >
 > > > No, they're `module-identifier=?'.
 > >
 > > So .. not a bug?
 >
 > I think it's definitely a bug.  It's telling the user that + is bound
 > by a location that does not, in fact, bind it.  Further, it breaks the
 > invariant (well, mostly invariant) that references only point to one
 > binder.
 >
 > FWIW, the people I've asked around the lab (Ryan and Matthias) both
 > think it's definitely a bug.
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: "Robby Findler" <robby.findler@gmail.com>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Sat, 27 Jan 2007 06:19:10 +0800

 `module-identifier=?' is working correctly, but it may not be enough or
 the right thing to implement Check Syntax.
 
 I'm not sure, but maybe the macro expander needs to change so that
 `bound-identifier=?' is the right comparison. This change would be
 similar to the recent change in the expansion of local-binding uses.
 
 Matthew
 
 At Fri, 26 Jan 2007 17:12:32 -0500, Matthias Felleisen wrote:
 > I agree. This is a problem with identifiermodule-=
 > 
 > -- Matthias
 > 
 > 
 > On Jan 26, 2007, at 5:10 PM, Robby Findler wrote:
 > 
 > > Sorry: not a bug in Check Syntax is what I meant. Check Syntax just
 > > reports te module-identifier=? information.
 > >
 > > Indeed, given that they are module-idenifier=?, I don't see how check
 > > syntax should be expected to tell them apart. (the prefixed and
 > > unprefixed + that is).
 > >
 > > Robby
 > >
 > > On 1/26/07, Sam TH <samth@ccs.neu.edu> wrote:
 > >> On 1/26/07, Robby Findler <robby.findler@gmail.com> wrote:
 > >> > On 1/26/07, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > >> > > At Fri, 26 Jan 2007 13:37:08 -0600, "Robby Findler" wrote:
 > >> > > > Matthew: is it true that the x:+ is a different binding (in  
 > >> the syntax
 > >> > > > identity sense) than the +?
 > >> > >
 > >> > > No, they're `module-identifier=?'.
 > >> >
 > >> > So .. not a bug?
 > >>
 > >> I think it's definitely a bug.  It's telling the user that + is bound
 > >> by a location that does not, in fact, bind it.  Further, it breaks  
 > >> the
 > >> invariant (well, mostly invariant) that references only point to one
 > >> binder.
 > >>
 > >> FWIW, the people I've asked around the lab (Ryan and Matthias) both
 > >> think it's definitely a bug.
 > >>
 > >> --
 > >> sam th
 > >> samth@ccs.neu.edu
 > >>
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: ryanc@plt-scheme.org, bugs@plt-scheme.org,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        "Sam TH" <samth@ccs.neu.edu>,
        "Robby Findler" <robby.findler@gmail.com>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 17:27:28 -0500

 'module-identifier=?' to what? It seems like matching imported 
 identifier uses to the require form that imports them would need to use 
 identifier-binding, not an equivalence predicate. (Locally defined and 
 lexically bound variables I can see.) What am I missing?
 
 Also, free-identifier=? distinguishes them but otherwise *mostly* has 
 the meaning "same binding", right?
 
 Ryan
 
 
 On Jan 26, 2007, at 5:19 PM, Matthew Flatt wrote:
 
 > `module-identifier=?' is working correctly, but it may not be enough or
 > the right thing to implement Check Syntax.
 >
 > I'm not sure, but maybe the macro expander needs to change so that
 > `bound-identifier=?' is the right comparison. This change would be
 > similar to the recent change in the expansion of local-binding uses.
 >
 > Matthew
 >
 > At Fri, 26 Jan 2007 17:12:32 -0500, Matthias Felleisen wrote:
 >> I agree. This is a problem with identifiermodule-=
 >>
 >> -- Matthias
 >>
 >>
 >> On Jan 26, 2007, at 5:10 PM, Robby Findler wrote:
 >>
 >>> Sorry: not a bug in Check Syntax is what I meant. Check Syntax just
 >>> reports te module-identifier=? information.
 >>>
 >>> Indeed, given that they are module-idenifier=?, I don't see how check
 >>> syntax should be expected to tell them apart. (the prefixed and
 >>> unprefixed + that is).
 >>>
 >>> Robby
 >>>
 >>> On 1/26/07, Sam TH <samth@ccs.neu.edu> wrote:
 >>>> On 1/26/07, Robby Findler <robby.findler@gmail.com> wrote:
 >>>>> On 1/26/07, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 >>>>>> At Fri, 26 Jan 2007 13:37:08 -0600, "Robby Findler" wrote:
 >>>>>>> Matthew: is it true that the x:+ is a different binding (in
 >>>> the syntax
 >>>>>>> identity sense) than the +?
 >>>>>>
 >>>>>> No, they're `module-identifier=?'.
 >>>>>
 >>>>> So .. not a bug?
 >>>>
 >>>> I think it's definitely a bug.  It's telling the user that + is 
 >>>> bound
 >>>> by a location that does not, in fact, bind it.  Further, it breaks
 >>>> the
 >>>> invariant (well, mostly invariant) that references only point to one
 >>>> binder.
 >>>>
 >>>> FWIW, the people I've asked around the lab (Ryan and Matthias) both
 >>>> think it's definitely a bug.
 >>>>
 >>>> --
 >>>> sam th
 >>>> samth@ccs.neu.edu
 >>>>
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: ryanc@plt-scheme.org, bugs@plt-scheme.org,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        "Sam TH" <samth@ccs.neu.edu>,
        "Robby Findler" <robby.findler@gmail.com>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Sat, 27 Jan 2007 06:34:06 +0800

 At Fri, 26 Jan 2007 17:27:28 -0500, Ryan Culpepper wrote:
 > 'module-identifier=?' to what? It seems like matching imported 
 > identifier uses to the require form that imports them would need to use 
 > identifier-binding, not an equivalence predicate.
 
 That's an interesting idea, but then Check Syntax still has to work to
 figure out which import is relevant if there are two imports for the
 same library with different prefixes.
 
 > Also, free-identifier=? distinguishes them but otherwise *mostly* has 
 > the meaning "same binding", right?
 
 No, `free-identifier=?' in MzScheme makes sense only for things that
 are really unbound. I doubt that it's useful at all, and it exists only
 from a misguided attempt to be compatible with other `syntax-case'
 implementations. (I thought that the same-symbol aspect of
 `free-identifier=?' might be important, so I created
 `module-identifier=?' instead of adjusting the meaning of
 `free-identifier=?'.)
 
 Matthew
 
From: "Robby Findler" <robby.findler@gmail.com>
To: "Ryan Culpepper" <ryanc@ccs.neu.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, ryanc@plt-scheme.org,
        bugs@plt-scheme.org, "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Sam TH" <samth@ccs.neu.edu>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 16:35:18 -0600

 On 1/26/07, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 > 'module-identifier=?' to what? It seems like matching imported
 > identifier uses to the require form that imports them would need to use
 > identifier-binding, not an equivalence predicate. (Locally defined and
 > lexically bound variables I can see.) What am I missing?
 
 Yes, you're right. I've explained this poorly.
 
 Here's the infor check syntax has to work with. What do you propose I
 do with it? (Or do you propose I get different info?)
 
 (module m mzscheme
   (require (lib "list.ss")
            (prefix x: (lib "list.ss")))
 
   ;; short verison of print-convert. Just makes the printouts below legible
   (define (conv x)
     (let loop ([x x])
       (cond
         [(list? x) `(list ,@(map loop x))]
         [(module-path-index? x)
          (let-values ([(a b) (module-path-index-split x)])
            `(module-path-index-join ,(loop a) ,(loop b)))]
         [(symbol? x)
          `',x]
         [else x])))
 
   (printf "~s\n" (conv (identifier-binding #'foldl)))
   (printf "~s\n" (conv (identifier-binding #'x:foldl))))
 
 It prints this:
 
 Welcome to DrScheme, version 369.6-svn24jan2007 [3m].
 Language: (module ...).
 (list (module-path-index-join (list 'lib "list.ss") 'm) 'foldl
 (module-path-index-join (list 'lib "list.ss") 'm) 'foldl #f)
 (list (module-path-index-join (list 'lib "list.ss") 'm) 'foldl
 (module-path-index-join (list 'lib "list.ss") 'm) 'foldl #f)
 >
 
 Robby
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: ryanc@plt-scheme.org, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Sam TH" <samth@ccs.neu.edu>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 19:07:43 -0500

 Ah, it seems that identifier-binding gives the same nominal name (4th 
 thing aka cadddr) for both. But it does look like the difference 
 between the nominal name and the underlying symbol of the syntax object 
 is equal to the prefix.
 
 (identifier-binding gives back:
    "nominal module": the module you got it from
    "nominal name": the name *they* called it (ie, provided it as))
 
 So here's how I believe it works:
 Given an identifier ID, let
    S = (syntax-e ID)  ;; the underlying symbol
    NN = (cadddr (identifier-binding ID)) ;; the nominal name
    NMOD = (caddr (identifier-binding ID)) ;; the nominal module
 
 - If S = NN, then it was imported through a normal require
 - If there was a require of (prefix P NMOD) and S = concat(P, NN), then 
 it came from that import
 - If there was a require of (rename NMOD S NN), then it came from that 
 import
 
 Does that seem right?
 
 Ryan
 
 On Jan 26, 2007, at 5:35 PM, Robby Findler wrote:
 
 > On 1/26/07, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 >> 'module-identifier=?' to what? It seems like matching imported
 >> identifier uses to the require form that imports them would need to 
 >> use
 >> identifier-binding, not an equivalence predicate. (Locally defined and
 >> lexically bound variables I can see.) What am I missing?
 >
 > Yes, you're right. I've explained this poorly.
 >
 > Here's the infor check syntax has to work with. What do you propose I
 > do with it? (Or do you propose I get different info?)
 >
 > (module m mzscheme
 >  (require (lib "list.ss")
 >           (prefix x: (lib "list.ss")))
 >
 >  ;; short verison of print-convert. Just makes the printouts below 
 > legible
 >  (define (conv x)
 >    (let loop ([x x])
 >      (cond
 >        [(list? x) `(list ,@(map loop x))]
 >        [(module-path-index? x)
 >         (let-values ([(a b) (module-path-index-split x)])
 >           `(module-path-index-join ,(loop a) ,(loop b)))]
 >        [(symbol? x)
 >         `',x]
 >        [else x])))
 >
 >  (printf "~s\n" (conv (identifier-binding #'foldl)))
 >  (printf "~s\n" (conv (identifier-binding #'x:foldl))))
 >
 > It prints this:
 >
 > Welcome to DrScheme, version 369.6-svn24jan2007 [3m].
 > Language: (module ...).
 > (list (module-path-index-join (list 'lib "list.ss") 'm) 'foldl
 > (module-path-index-join (list 'lib "list.ss") 'm) 'foldl #f)
 > (list (module-path-index-join (list 'lib "list.ss") 'm) 'foldl
 > (module-path-index-join (list 'lib "list.ss") 'm) 'foldl #f)
 >>
 >
 > Robby
 
From: "Robby Findler" <robby.findler@gmail.com>
To: "Ryan Culpepper" <ryanc@ccs.neu.edu>
Cc: ryanc@plt-scheme.org, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Sam TH" <samth@ccs.neu.edu>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 18:18:09 -0600

 Yes, that does seem like something check syntax could do. thanks.
 
 I do think that the current behavior is a little bit illuminating,
 however. Indeed, since there is only a single binding for the
 identifier, it does come from both require lines.
 
 I guess that's a bit too technical for our casual users, however.
 
 Would you agree?
 
 Robby
 
 On 1/26/07, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 > Ah, it seems that identifier-binding gives the same nominal name (4th
 > thing aka cadddr) for both. But it does look like the difference
 > between the nominal name and the underlying symbol of the syntax object
 > is equal to the prefix.
 >
 > (identifier-binding gives back:
 >    "nominal module": the module you got it from
 >    "nominal name": the name *they* called it (ie, provided it as))
 >
 > So here's how I believe it works:
 > Given an identifier ID, let
 >    S = (syntax-e ID)  ;; the underlying symbol
 >    NN = (cadddr (identifier-binding ID)) ;; the nominal name
 >    NMOD = (caddr (identifier-binding ID)) ;; the nominal module
 >
 > - If S = NN, then it was imported through a normal require
 > - If there was a require of (prefix P NMOD) and S = concat(P, NN), then
 > it came from that import
 > - If there was a require of (rename NMOD S NN), then it came from that
 > import
 >
 > Does that seem right?
 >
 > Ryan
 >
 > On Jan 26, 2007, at 5:35 PM, Robby Findler wrote:
 >
 > > On 1/26/07, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 > >> 'module-identifier=?' to what? It seems like matching imported
 > >> identifier uses to the require form that imports them would need to
 > >> use
 > >> identifier-binding, not an equivalence predicate. (Locally defined and
 > >> lexically bound variables I can see.) What am I missing?
 > >
 > > Yes, you're right. I've explained this poorly.
 > >
 > > Here's the infor check syntax has to work with. What do you propose I
 > > do with it? (Or do you propose I get different info?)
 > >
 > > (module m mzscheme
 > >  (require (lib "list.ss")
 > >           (prefix x: (lib "list.ss")))
 > >
 > >  ;; short verison of print-convert. Just makes the printouts below
 > > legible
 > >  (define (conv x)
 > >    (let loop ([x x])
 > >      (cond
 > >        [(list? x) `(list ,@(map loop x))]
 > >        [(module-path-index? x)
 > >         (let-values ([(a b) (module-path-index-split x)])
 > >           `(module-path-index-join ,(loop a) ,(loop b)))]
 > >        [(symbol? x)
 > >         `',x]
 > >        [else x])))
 > >
 > >  (printf "~s\n" (conv (identifier-binding #'foldl)))
 > >  (printf "~s\n" (conv (identifier-binding #'x:foldl))))
 > >
 > > It prints this:
 > >
 > > Welcome to DrScheme, version 369.6-svn24jan2007 [3m].
 > > Language: (module ...).
 > > (list (module-path-index-join (list 'lib "list.ss") 'm) 'foldl
 > > (module-path-index-join (list 'lib "list.ss") 'm) 'foldl #f)
 > > (list (module-path-index-join (list 'lib "list.ss") 'm) 'foldl
 > > (module-path-index-join (list 'lib "list.ss") 'm) 'foldl #f)
 > >>
 > >
 > > Robby
 >
 >

Class changed from "sw-bug" to "change-request" by robby at Sat, 27 Jan 2007 00:07:29 -0500
Reason>>> Since this is the intended behavior, I'll have to consider
this a change, rather than a bug, per se.

State changed from "open" to "closed" by robby at Sat, 27 Jan 2007 00:07:29 -0500
Reason>>> fixed and released to SVN.

From: "Robby Findler" <robby.findler@gmail.com>
To: "Ryan Culpepper" <ryanc@ccs.neu.edu>
Cc: ryanc@plt-scheme.org, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Sam TH" <samth@ccs.neu.edu>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Fri, 26 Jan 2007 23:07:58 -0600

 Well, I went ahead and followed Ryan's suggestion (roughly).
 
 Thanks all.
 
 Robby
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: "Ryan Culpepper" <ryanc@ccs.neu.edu>, ryanc@plt-scheme.org,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Sat, 27 Jan 2007 08:09:32 -0500

 Thanks!  However, I now get no arrows at all on imported identifiers.
 In particular, there are no arrows at all in this module:
 
 (module m mzscheme
   (require (prefix x: mzscheme))
   x:+
   +)
 
 Thanks,
 
 sam th
 
 On 1/27/07, Robby Findler <robby.findler@gmail.com> wrote:
 > Well, I went ahead and followed Ryan's suggestion (roughly).
 >
 > Thanks all.
 >
 > Robby
 >
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby.findler@gmail.com>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: "Ryan Culpepper" <ryanc@ccs.neu.edu>, ryanc@plt-scheme.org,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Sat, 27 Jan 2007 08:08:47 -0600

 Matthew: should #%top-interaction be wrapped around modules that
 appear in the top-level, say in the mred language level?
 
 I'm running into a problem where check syntax no longer colors `module' in
 
   (module m mzscheme +)
 
 because its origin field now contains #%top-interaction. I'm not sure
 of the right way to deal with that.
 
 Check Syntax used to look at the origin field to decide if keywords
 that are core forms (like module, let-values, etc) that it sees in the
 fully expanded text were there in the source program or not. That
 seemed to have been a good test, pre #%top-interaction but maybe not
 anymore.
 
 Suggestions?
 
 Sam: I've checked in a version that fixes the problem you see, but
 since the test suite is all screwy due to the above, there may be
 other bugs. Lets hope not ...
 
 Thanks,
 Robby
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby.findler@gmail.com>
Cc: "Ryan Culpepper" <ryanc@ccs.neu.edu>, ryanc@plt-scheme.org,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/8502: Check Syntax draws extra arrows when modules are required multiple time.
Date: Sun, 28 Jan 2007 10:43:41 -0500

 On 1/27/07, Robby Findler <robby.findler@gmail.com> wrote:
 
 > Sam: I've checked in a version that fixes the problem you see, but
 > since the test suite is all screwy due to the above, there may be
 > other bugs. Lets hope not ...
 
 Works great now, thanks!
 
 -- 
 sam th
 samth@ccs.neu.edu

Responsible changed from "nobody" to "robby" by eli at Fri, 04 May 2007 05:24:24 -0400
Reason>>> looks like there are some loose ends here


Responsible changed from "robby" to "mflatt" by robby at Fri, 04 May 2007 07:56:28 -0400
Reason>>> pending is a question for Matthew.

