From dskippy@ccs.neu.edu  Tue Nov 18 16:29:09 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id QAA07615
	for <bugs>; Tue, 18 Nov 2003 16:29:09 -0500
Message-Id: <200311182129.QAA07615@champlain.ccs.neu.edu>
Date: Tue, 18 Nov 2003 16:29:09 -0500
From: Mike MacHenry <dskippy@ccs.neu.edu>
To: bugs@plt-scheme.org
Subject: Shaddowing a required function with a recursive function.

>Number:         6563
>Category:       drscheme
>Synopsis:       Check Syntax and arrows
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    robby
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Nov 18 16:30:00 EST 2003
>Closed-Date:    Tue Dec 30 10:18:20 EST 2003
>Last-Modified:  Tue Dec 30 10:18:20 EST 2003
>Originator:     Mike MacHenry
>Release:        205.5-cvs5nov2003
>Organization:
titan
>Environment:
unix "Linux accessory.cs.uchicago.edu 2.4.17 #2 Thu Feb 14 16:48:33 CST 2002 i586 unknown" (i386-linux) (get-display-depth) = 24
Docs Installed:
("/home/dskippy/plt/collects/doc/tex2page" "/home/dskippy/plt/collects/doc/t-y-scheme" "/home/dskippy/plt/collects/doc/tour" "/home/dskippy/plt/collects/doc/tools" "/home/dskippy/plt/collects/doc/insidemz" "/home/dskippy/plt/collects/doc/mzc" "/home/dskippy/plt/collects/doc/misclib" "/home/dskippy/plt/collects/doc/framework" "/home/dskippy/plt/collects/doc/mred" "/home/dskippy/plt/collects/doc/mzlib" "/home/dskippy/plt/collects/doc/mzscheme" "/home/dskippy/plt/collects/doc/r5rs" "/home/dskippy/plt/collects/doc/drscheme" "/home/dskippy/plt/collects/doc/intermediate-lambda" "/home/dskippy/plt/collects/doc/intermediate" "/home/dskippy/plt/collects/doc/advanced" "/home/dskippy/plt/collects/doc/beginning-abbr" "/home/dskippy/plt/collects/doc/beginning" "/home/dskippy/plt/collects/doc/help")
Collections: 
(("~/collects" ("lambda-calculus" "shriram" "test-box" "mike-lib" "copy-paste")) ("/home/dskippy/.plt-scheme/205.5/collects" "non-existent path") ("/home/dskippy/plt/collects" ("CVS" "afm" "algol60" "browser" "compiler" "countdwn" "cvs-time-stamp" "defaults" "dromedary" "drscheme" "drscheme-jr" "dynext" "eopl" "errortrace" "file-browser" "finish-install" "framework" "games" "graphics" "guibuilder" "frtime" "handin-client" "handin-server" "help" "hierlist" "htdp" "html" "icfp-robot-gui" "icons" "lang" "launcher" "libsndfile" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plot" "profj" "python" "readline" "reduction-semantics" "setup" "sgl" "sirmail" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xelda" "xml" "doc")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#f write mixed-fraction-e #f #t debug))
>Description:
Running the following program produces a contract violation for
the build-list function provided from etc.ss that I should be
shaddowing. The syntax highlighting arrows point out that the
recursive call indeed references the definition like it should
but it's a different story at runtime.
>How-To-Repeat:
(require (lib "etc.ss"))

(define (build-list l)
  (cond
    [(null? l) '()]
    [else (cons (car l) (build-list (cdr l)))]))

(build-list '(1 2 3))
>Fix:

>Release-Note:

>Audit-Trail:

From: Robby Findler <robby@cs.uchicago.edu>
To: mflatt@cs.utah.edu
Cc: Mike MacHenry <dskippy@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6563: Shaddowing a required function with a recursive function.
Date: Tue, 18 Nov 2003 14:52:46 -0600

 Here's a simpler program that demonstrates the problem:
 
 (module m mzscheme
   (provide build-list)
   (define (build-list x y) 1))
 
 (require m)
 
 (define (build-list l)
   (cond
     [(null? l) '()]
     [else (cons (car l) (build-list (cdr l)))]))
 
 (build-list '(1 2 3))
 
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Mike MacHenry <dskippy@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6563: Shaddowing a required function with a recursive function.
Date: Tue, 18 Nov 2003 19:23:42 -0700

 Yep, the recursive call to `build-list' is compiled before the new
 `build-list' has been defined (which happens at run-time).
 
 It's too bad that Check Syntax disagrees with Execute, but we know that
 Check Syntax doesn't entirely work at the top level. (Arguably, neither
 does Execute. :)
 
 Matthew
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Mike MacHenry <dskippy@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6563: Shaddowing a required function with a recursive function.
Date: Tue, 18 Nov 2003 22:26:44 -0600

 At Tue, 18 Nov 2003 19:23:42 -0700, Matthew Flatt wrote:
 > Yep, the recursive call to `build-list' is compiled before the new
 > `build-list' has been defined (which happens at run-time).
 > 
 > It's too bad that Check Syntax disagrees with Execute, but we know that
 > Check Syntax doesn't entirely work at the top level. (Arguably, neither
 > does Execute. :)
 
 This can only happen when the reference is inside a top-level
 definition that defines that variable, no? So, could the compiler see
 that this is a definition and change how the variable compiles?
 
 (fwiw, this is *really* an ugly corner!)
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Mike MacHenry <dskippy@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6563: Shaddowing a required function with a recursive function.
Date: Wed, 19 Nov 2003 06:36:53 -0700

 At Tue, 18 Nov 2003 22:26:44 -0600, Robby Findler wrote:
 > This can only happen when the reference is inside a top-level
 > definition that defines that variable, no? So, could the compiler see
 > that this is a definition and change how the variable compiles?
 
 I don't know. I'm pretty sure that flattening this bubble would just
 make one appear in another corner, it doesn't generalize consistently
 to mutually recursive definitions, and I doubt that it's a good idea to
 make MzScheme's top-level behave differently than Chez's.
 
 Matthew
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Mike MacHenry <dskippy@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6563: Shaddowing a required function with a recursive function.
Date: Wed, 19 Nov 2003 07:49:41 -0600

 At Wed, 19 Nov 2003 06:36:53 -0700, Matthew Flatt wrote:
 > At Tue, 18 Nov 2003 22:26:44 -0600, Robby Findler wrote:
 > > This can only happen when the reference is inside a top-level
 > > definition that defines that variable, no? So, could the compiler see
 > > that this is a definition and change how the variable compiles?
 > 
 > I don't know. I'm pretty sure that flattening this bubble would just
 > make one appear in another corner, 
 
 :)
 
 > it doesn't generalize consistently
 > to mutually recursive definitions, 
 
 yes, silly me.
 
 > and I doubt that it's a good idea to
 > make MzScheme's top-level behave differently than Chez's.
 
 Out of curiosity, how does this apply to Chez? Chez doesn't have our
 module system and that's what's causing the problem right?
 
 BTW, do you think that it is possible to fix Check Syntax? In
 principle, it could act like the compiler, no? They both work with the
 same information?
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Mike MacHenry <dskippy@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6563: Shaddowing a required function with a recursive function.
Date: Wed, 19 Nov 2003 07:51:56 -0700

 At Wed, 19 Nov 2003 07:49:41 -0600, Robby Findler wrote:
 > > and I doubt that it's a good idea to
 > > make MzScheme's top-level behave differently than Chez's.
 > 
 > Out of curiosity, how does this apply to Chez? Chez doesn't have our
 > module system and that's what's causing the problem right?
 
 The same thing happens with macros, though. For example, instead of
 putting the first `build-list' in a module, couldn't you use
 `define/contract' at the top level to get the same behavior?
 
 > BTW, do you think that it is possible to fix Check Syntax? 
 
 In thisparticular case? After thinking about it, I don't know why Check
 Syntax draws an arrow from the recursive call to the new definition.
 
 Matthew
 
 
Responsible-Changed-From-To: eli->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Wed Nov 19 10:59:22 2003
Responsible-Changed-Why:
    rbf

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Mike MacHenry <dskippy@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6563: Shaddowing a required function with a recursive function.
Date: Wed, 19 Nov 2003 09:03:25 -0600

 At Wed, 19 Nov 2003 07:51:56 -0700, Matthew Flatt wrote:
 > 
 > > BTW, do you think that it is possible to fix Check Syntax? 
 > 
 > In thisparticular case? After thinking about it, I don't know why Check
 > Syntax draws an arrow from the recursive call to the new definition.
 
 Seems like it is time to build the arrows portion of the check syntax
 test suite...
 
 Robby

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Mike MacHenry <dskippy@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6563: Shaddowing a required function with a recursive function.
Date: Wed, 19 Nov 2003 09:06:47 -0600

 In this program, both definitions of `f' claim both uses...
 
 (require (lib "contract.ss"))
 (define/contract f any? (lambda (x y) x))
 (define (f x) (f x))
 (f 1)
 
 In this program:
 
 (module m mzscheme (provide f) (define (f x y) 1))
 (require m)
 (define (f x) (f x))
 (f 1)
 
 I don't know why the `require' doesn't claim all of the `f's. In fact,
 Check Sytnax turns the require m red, as if it isn't used.
 
 Robby
 
 
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Tue Dec 30 10:18:20 2003
State-Changed-Why:
    fixed in check syntax rewrite.
>Unformatted:

