From ethan.aubin@pobox.com  Tue Oct 21 23:29:36 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id XAA00978
	for <bugs>; Tue, 21 Oct 2003 23:29:36 -0400
Message-Id: <200310220329.XAA00978@champlain.ccs.neu.edu>
Date: Tue, 21 Oct 2003 23:29:36 -0400
From: Ethan Aubin <ethan.aubin@pobox.com>
To: bugs@plt-scheme.org
Subject: flat-named-contract? predicate

>Number:         6511
>Category:       drscheme
>Synopsis:       flat-named-contract? predicate
>Confidential:   no
>Severity:       non-critical
>Priority:       low
>Responsible:    robby
>State:          closed
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Tue Oct 21 23:30:00 EDT 2003
>Closed-Date:    Wed Oct 22 14:30:21 EDT 2003
>Last-Modified:  Wed Oct 22 14:30:21 EDT 2003
>Originator:     Ethan Aubin
>Release:        204
>Organization:
titan
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 1" (win32\i386) (get-display-depth) = 32
Docs Installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "icons" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("C:\\PROGRA~1\\plt\\./collects/setup/..\\..\\collects\\mzlib\\..\\..\\collects" ("afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mzlib" "mzscheme" "net" "parser-tools" "setup" "slibinit" "srfi" "stepper" "string-constants" "syntax" "test-suite" "tex2page" "version" "web-server" "xml")))
 
Human Language: english
 
>Description:
Could you export the flat-named-contract? predicate? I'd like to make new flat-named-contract 
which takes either a predicate or another flat-named-contract as a parameter. E.g. I'd like 
to make a listplus contract which works like listof but requires at least one element.  If the 
flat-named-contract? were exported I could do something like test-flat-contract in contract.ss.
>How-To-Repeat:

>Fix:

>Release-Note:

>Audit-Trail:

From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6511: flat-named-contract? predicate
Date: Tue, 21 Oct 2003 22:58:26 -0500

 How about
 
   (cons/p number? (listof number?))
 
 or even:
 
   (define (listof-at-least-one x)
     (cons/p x (listof x)))
 
 ?
 
 Robby

From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6511: flat-named-contract? predicate
Date: Tue, 21 Oct 2003 23:00:36 -0500

 Oh wait -- you want to do error checking in your new function on
 contracts?
 
 Things have changed already in v205.5 to let you do this. You'd use the
 flat-contract? predicate.
 
 Robby

From: Ethan Aubin <ethan.aubin@pobox.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6511: flat-named-contract? predicate
Date: Wed, 22 Oct 2003 14:15:17 -0400

 On Tue, Oct 21, 2003 at 11:00:36PM -0500, Robby Findler wrote:
 > Oh wait -- you want to do error checking in your new function on
 > contracts?
 Yes, thats half of it. The other half knowing when I have to extract
 the predicate from the flat-named-contract.
 
 Similar to the listof-at-least-one contract, I think I could put
 together a listof-at-least-n contract w/ by composing listof and
 cons/p n times because the contracts for the lisp data types are
 already present in contracts.ss.  Lets say I want to create a contract
 against an tree interface w/o assuming its implemented as pair?s. If I
 had a flat-named-contract? predicate then I could do something
 
 ; (union predicate flat-named-contract) -> flat-named-contract
 (define (treeof contract)
     (unless (flat-contract? contract)
 	    (error treeof "None contract parameter ~a" contract))
     (let ([node-pred (if (flat-named-contract? contract)
 			 (flat-named-contract-predicate contract)
 			 contract)])
       (make-flat-named-contract "treeof"
         (letrec ([all-nodes (lambda (tree)
 			      (and (node-pred tree)
 				   (andmap all-nodes (get-children tree))))])
 	  all-nodes))))
 
 and have the client of the contract use both (treeof even?) and
 (treeof natural-number?).  Maybe though, this is just an indication
 that an 'all-children' contract should be present in the tree
 interface.
 
 Thanks for the quick response! -- ethan.aubin@pobox.com
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6511: flat-named-contract? predicate
Date: Wed, 22 Oct 2003 13:20:51 -0500

 At Wed, 22 Oct 2003 14:15:17 -0400, Ethan Aubin wrote:
 > On Tue, Oct 21, 2003 at 11:00:36PM -0500, Robby Findler wrote:
 > > Oh wait -- you want to do error checking in your new function on
 > > contracts?
 > Yes, thats half of it. The other half knowing when I have to extract
 > the predicate from the flat-named-contract.
 
 The second half you don't actually need (as you seem to understand from
 the rest of your message).
 
 As far as the tree contracts go, what you are missing is a way to build
 a recursive contract. For example:
 
 (define (treeof contract)
   (flat-rec-contract treeof
     contract
     (cons/p treeof treeof)))
 
 or
 
 (define (treeof contract)
   (flat-rec-contract tree
     contract
     (listof tree)))
 
 would give you the treeof function you want.
 
 This is available in the nightly builds and in CVS but hasn't been
 released yet (details are in those docs). The CVS and nightly build
 versions are pretty stable, but do have occasional problems:
 
   http://download.plt-scheme.org/scheme/
   http://www.plt-scheme.org/anoncvs/
 
 Certainly, they should be easy to install and test out.
 
 Robby
Responsible-Changed-From-To: eli->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Wed Oct 22 14:30:21 2003
Responsible-Changed-Why:
    rbf
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Wed Oct 22 14:30:21 2003
State-Changed-Why:
    the things needed are already in the (as yet unreleased) version of drscheme.
>Unformatted:

