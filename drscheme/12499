From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jan 18 19:19:43 2012
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q0J0Jdsj004306
	for <bugs@bugs.plt-scheme.org>; Wed, 18 Jan 2012 19:19:39 -0500
Message-Id: <201201190019.q0J0Jabp004301@champlain.ccs.neu.edu>
Date: Wed, 18 Jan 2012 19:19:36 -0500
From: ryanc@racket-lang.org
To: bugs@racket-lang.org
Subject: drracket causes surprising program slowdown

>Number:         12499
>Category:       drscheme
>Synopsis:       drracket causes surprising program slowdown
>Class:          sw-bug
>Responsible:    ryanc
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jan 18 19:20:01 -0500 2012
>Closed-Date:    Thu Jan 19 13:18:28 -0500 2012
>Last-Modified:  Thu Jan 19 13:18:28 -0500 2012
>Originator:     Ryan Culpepper
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1.3--2012-01-18(481bc2f/g)
>Environment:
unix "Linux thistle 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 368086080
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/ryan/.racket/5.2.1.3/collects"
 (non-existent-path))
("/home/ryan/projects/racket/collects"
 ("tests" "racklog" "lazy" "mzlib" "data" "texpict" "r5rs" "honu" "schemeunit" "plot" "lang" "parser-tools" "htdp" "version" "icons" "s-exp" "slatex" "eopl" "launcher" "picturing-programs" "mred" "swindle" "frtime" "framework" "net" "drracket" "setup" "macro-debugger" "racket" "help" "syntax-color" "file" "combinator-parser" "meta" "mrlib" ".gitignore" "readline" "tex2page" "at-exp" "plai" "test-box-recovery" "guibuilder" "xrepl" "scriblib" "preprocessor" "syntax" "test-engine" "web-server" "gui-debugger" "planet" "dynext" "stepper" "slideshow" "handin-client" "datalog" "deinprogramm" "errortrace" "algol60" "openssl" "mzcom" "games" "info-domain" "unstable" "string-constants" "compiler" "make" "embedded-gui" "srfi" "html" "scribble" "scheme" "wxme" "sirmail" "handin-server" "typed" "db" "ffi" "config" "redex" "browser" "2htdp" "sgl" "rackunit" "reader" "scribblings" "mzscheme" "raco" "images" "rnrs" "graphics" "hierlist" "profile" "typed-racket" "defaults" "mysterx" "drschem!
 e" "xml" "trace" "r6rs" "teachpack" "typed-scheme" "repo-time-stamp"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
>Description:
I have a set of little benchmarks for the dictionary implementations in the data collection. I ran them as part of the release testing, and as it happened I ran them in DrRacket this time, and I got surprising results. Most of them run 50% to 100% slower than in racket, but one test runs nearly 20 times slower.

I double-checked my language settings. I have "No debugging or profiling" selected and both "Populate compiled directories" and "Preserve stacktrace (disable some optimizations)" turned off. I also turned memory limits off.

In racket:

  > (require tests/data/ordered-dict)
  > (performance)
  Using ordered-dict interface, w/ search
  splay-tree : 1508
  adj splay  : 1576
  skip-list  : 1520
  splay w/ c : 1888
  skip w/ c  : 1900
  
  Using custom interfaces, w/ search
  splay-tree : 1356
  adj splay  : 1408
  skip-list  : 1344
  splay w/ c : 1373
  skip w/ c  : 1360
  
  Using custom interfaces, w/o search
  splay-tree : 1196
  adj splay  : 1188
  skip-list  : 1196
  splay w/ c : 1200
  skip w/ c  : 1204
  hash       : 1324

In DrRacket:

  > (require tests/data/ordered-dict)
  > (performance)
  Using ordered-dict interface, w/ search
  splay-tree : 3108
  adj splay  : 2744
  skip-list  : 2676
  splay w/ c : 3057
  skip w/ c  : 3060

  Using custom interfaces, w/ search
  splay-tree : 2460
  adj splay  : 2520
  skip-list  : 2448
  splay w/ c : 2492
  skip w/ c  : 2480

  Using custom interfaces, w/o search
  splay-tree : 2288
  adj splay  : 2276
  skip-list  : 2265
  splay w/ c : 2284
  skip w/ c  : 2288
  hash       : 26254

I'm surprised by the size of the slowdowns in general, but the hash test slowdown is pathological; the test takes nearly 20 times as long in DrRacket as it does in racket.

This behavior doesn't seem to be new; I got similar results in 5.1.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: ryanc@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12499: drracket causes surprising program slowdown
Date: Wed, 18 Jan 2012 19:25:56 -0600

 Oh, and is the slowdown all in gc time?
 
 On Wed, Jan 18, 2012 at 7:25 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > That is mysterious. I believe that should be the same as Racket,
 > except that GC will take longer (as the heap is larger).
 >
 > Did you try with online compilation disabled (restart DrRacket after
 > disabling it)?
 >
 > Robby
 >
 > On Wed, Jan 18, 2012 at 6:20 PM,  <ryanc@racket-lang.org> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12499
 >>
 >> Reported by Ryan Culpepper for release: 5.2.1.3--2012-01-18(481bc2f/g)
 >>
 >> *** Description:
 >> I have a set of little benchmarks for the dictionary implementations in the data collection. I ran them as part of the release testing, and as it happened I ran them in DrRacket this time, and I got surprising results. Most of them run 50% to 100% slower than in racket, but one test runs nearly 20 times slower.
 >>
 >> I double-checked my language settings. I have "No debugging or profiling" selected and both "Populate compiled directories" and "Preserve stacktrace (disable some optimizations)" turned off. I also turned memory limits off.
 >>
 >> In racket:
 >>
 >>  > (require tests/data/ordered-dict)
 >>  > (performance)
 >>  Using ordered-dict interface, w/ search
 >>  splay-tree : 1508
 >>  adj splay  : 1576
 >>  skip-list  : 1520
 >>  splay w/ c : 1888
 >>  skip w/ c  : 1900
 >>
 >>  Using custom interfaces, w/ search
 >>  splay-tree : 1356
 >>  adj splay  : 1408
 >>  skip-list  : 1344
 >>  splay w/ c : 1373
 >>  skip w/ c  : 1360
 >>
 >>  Using custom interfaces, w/o search
 >>  splay-tree : 1196
 >>  adj splay  : 1188
 >>  skip-list  : 1196
 >>  splay w/ c : 1200
 >>  skip w/ c  : 1204
 >>  hash       : 1324
 >>
 >> In DrRacket:
 >>
 >>  > (require tests/data/ordered-dict)
 >>  > (performance)
 >>  Using ordered-dict interface, w/ search
 >>  splay-tree : 3108
 >>  adj splay  : 2744
 >>  skip-list  : 2676
 >>  splay w/ c : 3057
 >>  skip w/ c  : 3060
 >>
 >>  Using custom interfaces, w/ search
 >>  splay-tree : 2460
 >>  adj splay  : 2520
 >>  skip-list  : 2448
 >>  splay w/ c : 2492
 >>  skip w/ c  : 2480
 >>
 >>  Using custom interfaces, w/o search
 >>  splay-tree : 2288
 >>  adj splay  : 2276
 >>  skip-list  : 2265
 >>  splay w/ c : 2284
 >>  skip w/ c  : 2288
 >>  hash       : 26254
 >>
 >> I'm surprised by the size of the slowdowns in general, but the hash test slowdown is pathological; the test takes nearly 20 times as long in DrRacket as it does in racket.
 >>
 >> This behavior doesn't seem to be new; I got similar results in 5.1.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux thistle 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 368086080
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/ryan/.racket/5.2.1.3/collects"
 >>  (non-existent-path))
 >> ("/home/ryan/projects/racket/collects"
 >>  ("tests" "racklog" "lazy" "mzlib" "data" "texpict" "r5rs" "honu" "schemeunit" "plot" "lang" "parser-tools" "htdp" "version" "icons" "s-exp" "slatex" "eopl" "launcher" "picturing-programs" "mred" "swindle" "frtime" "framework" "net" "drracket" "setup" "macro-debugger" "racket" "help" "syntax-color" "file" "combinator-parser" "meta" "mrlib" ".gitignore" "readline" "tex2page" "at-exp" "plai" "test-box-recovery" "guibuilder" "xrepl" "scriblib" "preprocessor" "syntax" "test-engine" "web-server" "gui-debugger" "planet" "dynext" "stepper" "slideshow" "handin-client" "datalog" "deinprogramm" "errortrace" "algol60" "openssl" "mzcom" "games" "info-domain" "unstable" "string-constants" "compiler" "make" "embedded-gui" "srfi" "html" "scribble" "scheme" "wxme" "sirmail" "handin-server" "typed" "db" "ffi" "config" "redex" "browser" "2htdp" "sgl" "rackunit" "reader" "scribblings" "mzscheme" "raco" "images" "rnrs" "graphics" "hierlist" "profile" "typed-racket" "defaults" "mysterx" "drschem!
 >>  e" "xml" "trace" "r6rs" "teachpack" "typed-scheme" "repo-time-stamp"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 >>
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: ryanc@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12499: drracket causes surprising program slowdown
Date: Wed, 18 Jan 2012 19:25:40 -0600

 That is mysterious. I believe that should be the same as Racket,
 except that GC will take longer (as the heap is larger).
 
 Did you try with online compilation disabled (restart DrRacket after
 disabling it)?
 
 Robby
 
 On Wed, Jan 18, 2012 at 6:20 PM,  <ryanc@racket-lang.org> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12499
 >
 > Reported by Ryan Culpepper for release: 5.2.1.3--2012-01-18(481bc2f/g)
 >
 > *** Description:
 > I have a set of little benchmarks for the dictionary implementations in the data collection. I ran them as part of the release testing, and as it happened I ran them in DrRacket this time, and I got surprising results. Most of them run 50% to 100% slower than in racket, but one test runs nearly 20 times slower.
 >
 > I double-checked my language settings. I have "No debugging or profiling" selected and both "Populate compiled directories" and "Preserve stacktrace (disable some optimizations)" turned off. I also turned memory limits off.
 >
 > In racket:
 >
 >  > (require tests/data/ordered-dict)
 >  > (performance)
 >  Using ordered-dict interface, w/ search
 >  splay-tree : 1508
 >  adj splay  : 1576
 >  skip-list  : 1520
 >  splay w/ c : 1888
 >  skip w/ c  : 1900
 >
 >  Using custom interfaces, w/ search
 >  splay-tree : 1356
 >  adj splay  : 1408
 >  skip-list  : 1344
 >  splay w/ c : 1373
 >  skip w/ c  : 1360
 >
 >  Using custom interfaces, w/o search
 >  splay-tree : 1196
 >  adj splay  : 1188
 >  skip-list  : 1196
 >  splay w/ c : 1200
 >  skip w/ c  : 1204
 >  hash       : 1324
 >
 > In DrRacket:
 >
 >  > (require tests/data/ordered-dict)
 >  > (performance)
 >  Using ordered-dict interface, w/ search
 >  splay-tree : 3108
 >  adj splay  : 2744
 >  skip-list  : 2676
 >  splay w/ c : 3057
 >  skip w/ c  : 3060
 >
 >  Using custom interfaces, w/ search
 >  splay-tree : 2460
 >  adj splay  : 2520
 >  skip-list  : 2448
 >  splay w/ c : 2492
 >  skip w/ c  : 2480
 >
 >  Using custom interfaces, w/o search
 >  splay-tree : 2288
 >  adj splay  : 2276
 >  skip-list  : 2265
 >  splay w/ c : 2284
 >  skip w/ c  : 2288
 >  hash       : 26254
 >
 > I'm surprised by the size of the slowdowns in general, but the hash test slowdown is pathological; the test takes nearly 20 times as long in DrRacket as it does in racket.
 >
 > This behavior doesn't seem to be new; I got similar results in 5.1.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux thistle 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 368086080
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/ryan/.racket/5.2.1.3/collects"
 >  (non-existent-path))
 > ("/home/ryan/projects/racket/collects"
 >  ("tests" "racklog" "lazy" "mzlib" "data" "texpict" "r5rs" "honu" "schemeunit" "plot" "lang" "parser-tools" "htdp" "version" "icons" "s-exp" "slatex" "eopl" "launcher" "picturing-programs" "mred" "swindle" "frtime" "framework" "net" "drracket" "setup" "macro-debugger" "racket" "help" "syntax-color" "file" "combinator-parser" "meta" "mrlib" ".gitignore" "readline" "tex2page" "at-exp" "plai" "test-box-recovery" "guibuilder" "xrepl" "scriblib" "preprocessor" "syntax" "test-engine" "web-server" "gui-debugger" "planet" "dynext" "stepper" "slideshow" "handin-client" "datalog" "deinprogramm" "errortrace" "algol60" "openssl" "mzcom" "games" "info-domain" "unstable" "string-constants" "compiler" "make" "embedded-gui" "srfi" "html" "scribble" "scheme" "wxme" "sirmail" "handin-server" "typed" "db" "ffi" "config" "redex" "browser" "2htdp" "sgl" "rackunit" "reader" "scribblings" "mzscheme" "raco" "images" "rnrs" "graphics" "hierlist" "profile" "typed-racket" "defaults" "mysterx" "drschem!
 >  e" "xml" "trace" "r6rs" "teachpack" "typed-scheme" "repo-time-stamp"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 >
 
From: Ryan Culpepper <ryan@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: ryanc@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12499: drracket causes surprising program slowdown
Date: Wed, 18 Jan 2012 19:47:21 -0700

 Online expansion is disabled.
 
 GC time is larger in the DrRacket version, but it doesn't account for 
 the whole difference.
 
 In DrRacket:
 
    Using ordered-dict interface, w/ search
    splay-tree :  3150 (560 gc)
    adj splay  :  2900 (140 gc)
    skip-list  :  2760 (140 gc)
    splay w/ c :  3190 (170 gc)
    skip w/ c  :  3190 (140 gc)
 
    Using custom interfaces, w/ search
    splay-tree :  2570 (100 gc)
    adj splay  :  2670 (130 gc)
    skip-list  :  2620 (150 gc)
    splay w/ c :  2660 (180 gc)
    skip w/ c  :  2600 (120 gc)
 
    Using custom interfaces, w/o search
    splay-tree :  2380 (120 gc)
    adj splay  :  2370 (130 gc)
    skip-list  :  2370 (150 gc)
    splay w/ c :  2390 (130 gc)
    skip w/ c  :  2390 (140 gc)
    hash       : 28580 (790 gc)
 
 In racket, the GC times vary from 0 to 50.
 
 Ryan
 
 
 On 01/18/2012 06:25 PM, Robby Findler wrote:
 > Oh, and is the slowdown all in gc time?
 >
 > On Wed, Jan 18, 2012 at 7:25 PM, Robby Findler
 > <robby@eecs.northwestern.edu>  wrote:
 >> That is mysterious. I believe that should be the same as Racket,
 >> except that GC will take longer (as the heap is larger).
 >>
 >> Did you try with online compilation disabled (restart DrRacket after
 >> disabling it)?
 >>
 >> Robby
 >>
 >> On Wed, Jan 18, 2012 at 6:20 PM,<ryanc@racket-lang.org>  wrote:
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=12499
 >>>
 >>> Reported by Ryan Culpepper for release: 5.2.1.3--2012-01-18(481bc2f/g)
 >>>
 >>> *** Description:
 >>> I have a set of little benchmarks for the dictionary implementations in the data collection. I ran them as part of the release testing, and as it happened I ran them in DrRacket this time, and I got surprising results. Most of them run 50% to 100% slower than in racket, but one test runs nearly 20 times slower.
 >>>
 >>> I double-checked my language settings. I have "No debugging or profiling" selected and both "Populate compiled directories" and "Preserve stacktrace (disable some optimizations)" turned off. I also turned memory limits off.
 >>>
 >>> In racket:
 >>>
 >>>   >  (require tests/data/ordered-dict)
 >>>   >  (performance)
 >>>   Using ordered-dict interface, w/ search
 >>>   splay-tree : 1508
 >>>   adj splay  : 1576
 >>>   skip-list  : 1520
 >>>   splay w/ c : 1888
 >>>   skip w/ c  : 1900
 >>>
 >>>   Using custom interfaces, w/ search
 >>>   splay-tree : 1356
 >>>   adj splay  : 1408
 >>>   skip-list  : 1344
 >>>   splay w/ c : 1373
 >>>   skip w/ c  : 1360
 >>>
 >>>   Using custom interfaces, w/o search
 >>>   splay-tree : 1196
 >>>   adj splay  : 1188
 >>>   skip-list  : 1196
 >>>   splay w/ c : 1200
 >>>   skip w/ c  : 1204
 >>>   hash       : 1324
 >>>
 >>> In DrRacket:
 >>>
 >>>   >  (require tests/data/ordered-dict)
 >>>   >  (performance)
 >>>   Using ordered-dict interface, w/ search
 >>>   splay-tree : 3108
 >>>   adj splay  : 2744
 >>>   skip-list  : 2676
 >>>   splay w/ c : 3057
 >>>   skip w/ c  : 3060
 >>>
 >>>   Using custom interfaces, w/ search
 >>>   splay-tree : 2460
 >>>   adj splay  : 2520
 >>>   skip-list  : 2448
 >>>   splay w/ c : 2492
 >>>   skip w/ c  : 2480
 >>>
 >>>   Using custom interfaces, w/o search
 >>>   splay-tree : 2288
 >>>   adj splay  : 2276
 >>>   skip-list  : 2265
 >>>   splay w/ c : 2284
 >>>   skip w/ c  : 2288
 >>>   hash       : 26254
 >>>
 >>> I'm surprised by the size of the slowdowns in general, but the hash test slowdown is pathological; the test takes nearly 20 times as long in DrRacket as it does in racket.
 >>>
 >>> This behavior doesn't seem to be new; I got similar results in 5.1.
 >>>
 >>> *** How to repeat:
 >>>
 >>>
 >>> *** Environment:
 >>> unix "Linux thistle 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 368086080
 >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>
 >>>
 >>> Collections:
 >>> ("/home/ryan/.racket/5.2.1.3/collects"
 >>>   (non-existent-path))
 >>> ("/home/ryan/projects/racket/collects"
 >>>   ("tests" "racklog" "lazy" "mzlib" "data" "texpict" "r5rs" "honu" "schemeunit" "plot" "lang" "parser-tools" "htdp" "version" "icons" "s-exp" "slatex" "eopl" "launcher" "picturing-programs" "mred" "swindle" "frtime" "framework" "net" "drracket" "setup" "macro-debugger" "racket" "help" "syntax-color" "file" "combinator-parser" "meta" "mrlib" ".gitignore" "readline" "tex2page" "at-exp" "plai" "test-box-recovery" "guibuilder" "xrepl" "scriblib" "preprocessor" "syntax" "test-engine" "web-server" "gui-debugger" "planet" "dynext" "stepper" "slideshow" "handin-client" "datalog" "deinprogramm" "errortrace" "algol60" "openssl" "mzcom" "games" "info-domain" "unstable" "string-constants" "compiler" "make" "embedded-gui" "srfi" "html" "scribble" "scheme" "wxme" "sirmail" "handin-server" "typed" "db" "ffi" "config" "redex" "browser" "2htdp" "sgl" "rackunit" "reader" "scribblings" "mzscheme" "raco" "images" "rnrs" "graphics" "hierlist" "profile" "typed-racket" "defaults" "mysterx" "drs
 chem!
 >>>   e" "xml" "trace" "r6rs" "teachpack" "typed-scheme" "repo-time-stamp"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 >>>
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Ryan Culpepper <ryan@cs.utah.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, ryanc@racket-lang.org,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12499: drracket causes surprising program slowdown
Date: Wed, 18 Jan 2012 22:03:07 -0700

 The test runs faster and roughly the same in both environments if I
 replace `check-equal?' with `c-e?':
 
  (define-syntax c-e? 
    (syntax-rules ()
      [(_ x y whatever)
       (unless (equal? x y) (error whatever))]
      [(_ x y) (c-e? x y "failed")]))
 
 
 At Wed, 18 Jan 2012 19:47:21 -0700, Ryan Culpepper wrote:
 > Online expansion is disabled.
 > 
 > GC time is larger in the DrRacket version, but it doesn't account for 
 > the whole difference.
 > 
 > In DrRacket:
 > 
 >    Using ordered-dict interface, w/ search
 >    splay-tree :  3150 (560 gc)
 >    adj splay  :  2900 (140 gc)
 >    skip-list  :  2760 (140 gc)
 >    splay w/ c :  3190 (170 gc)
 >    skip w/ c  :  3190 (140 gc)
 > 
 >    Using custom interfaces, w/ search
 >    splay-tree :  2570 (100 gc)
 >    adj splay  :  2670 (130 gc)
 >    skip-list  :  2620 (150 gc)
 >    splay w/ c :  2660 (180 gc)
 >    skip w/ c  :  2600 (120 gc)
 > 
 >    Using custom interfaces, w/o search
 >    splay-tree :  2380 (120 gc)
 >    adj splay  :  2370 (130 gc)
 >    skip-list  :  2370 (150 gc)
 >    splay w/ c :  2390 (130 gc)
 >    skip w/ c  :  2390 (140 gc)
 >    hash       : 28580 (790 gc)
 > 
 > In racket, the GC times vary from 0 to 50.
 > 
 > Ryan
 > 
 > 
 > On 01/18/2012 06:25 PM, Robby Findler wrote:
 > > Oh, and is the slowdown all in gc time?
 > >
 > > On Wed, Jan 18, 2012 at 7:25 PM, Robby Findler
 > > <robby@eecs.northwestern.edu>  wrote:
 > >> That is mysterious. I believe that should be the same as Racket,
 > >> except that GC will take longer (as the heap is larger).
 > >>
 > >> Did you try with online compilation disabled (restart DrRacket after
 > >> disabling it)?
 > >>
 > >> Robby
 > >>
 > >> On Wed, Jan 18, 2012 at 6:20 PM,<ryanc@racket-lang.org>  wrote:
 > >>> A new problem report is waiting at
 > >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=12499
 > >>>
 > >>> Reported by Ryan Culpepper for release: 5.2.1.3--2012-01-18(481bc2f/g)
 > >>>
 > >>> *** Description:
 > >>> I have a set of little benchmarks for the dictionary implementations in the 
 > data collection. I ran them as part of the release testing, and as it happened 
 > I ran them in DrRacket this time, and I got surprising results. Most of them 
 > run 50% to 100% slower than in racket, but one test runs nearly 20 times slower.
 > >>>
 > >>> I double-checked my language settings. I have "No debugging or profiling" 
 > selected and both "Populate compiled directories" and "Preserve stacktrace 
 > (disable some optimizations)" turned off. I also turned memory limits off.
 > >>>
 > >>> In racket:
 > >>>
 > >>>   >  (require tests/data/ordered-dict)
 > >>>   >  (performance)
 > >>>   Using ordered-dict interface, w/ search
 > >>>   splay-tree : 1508
 > >>>   adj splay  : 1576
 > >>>   skip-list  : 1520
 > >>>   splay w/ c : 1888
 > >>>   skip w/ c  : 1900
 > >>>
 > >>>   Using custom interfaces, w/ search
 > >>>   splay-tree : 1356
 > >>>   adj splay  : 1408
 > >>>   skip-list  : 1344
 > >>>   splay w/ c : 1373
 > >>>   skip w/ c  : 1360
 > >>>
 > >>>   Using custom interfaces, w/o search
 > >>>   splay-tree : 1196
 > >>>   adj splay  : 1188
 > >>>   skip-list  : 1196
 > >>>   splay w/ c : 1200
 > >>>   skip w/ c  : 1204
 > >>>   hash       : 1324
 > >>>
 > >>> In DrRacket:
 > >>>
 > >>>   >  (require tests/data/ordered-dict)
 > >>>   >  (performance)
 > >>>   Using ordered-dict interface, w/ search
 > >>>   splay-tree : 3108
 > >>>   adj splay  : 2744
 > >>>   skip-list  : 2676
 > >>>   splay w/ c : 3057
 > >>>   skip w/ c  : 3060
 > >>>
 > >>>   Using custom interfaces, w/ search
 > >>>   splay-tree : 2460
 > >>>   adj splay  : 2520
 > >>>   skip-list  : 2448
 > >>>   splay w/ c : 2492
 > >>>   skip w/ c  : 2480
 > >>>
 > >>>   Using custom interfaces, w/o search
 > >>>   splay-tree : 2288
 > >>>   adj splay  : 2276
 > >>>   skip-list  : 2265
 > >>>   splay w/ c : 2284
 > >>>   skip w/ c  : 2288
 > >>>   hash       : 26254
 > >>>
 > >>> I'm surprised by the size of the slowdowns in general, but the hash test 
 > slowdown is pathological; the test takes nearly 20 times as long in DrRacket as 
 > it does in racket.
 > >>>
 > >>> This behavior doesn't seem to be new; I got similar results in 5.1.
 > >>>
 > >>> *** How to repeat:
 > >>>
 > >>>
 > >>> *** Environment:
 > >>> unix "Linux thistle 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC 
 > 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > >>> Human Language: english
 > >>> (current-memory-use) 368086080
 > >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); 
 > (links #:user? #f #:root? #t) = ()
 > >>>
 > >>>
 > >>> Collections:
 > >>> ("/home/ryan/.racket/5.2.1.3/collects"
 > >>>   (non-existent-path))
 > >>> ("/home/ryan/projects/racket/collects"
 > >>>   ("tests" "racklog" "lazy" "mzlib" "data" "texpict" "r5rs" "honu" 
 > "schemeunit" "plot" "lang" "parser-tools" "htdp" "version" "icons" "s-exp" 
 > "slatex" "eopl" "launcher" "picturing-programs" "mred" "swindle" "frtime" 
 > "framework" "net" "drracket" "setup" "macro-debugger" "racket" "help" 
 > "syntax-color" "file" "combinator-parser" "meta" "mrlib" ".gitignore" 
 > "readline" "tex2page" "at-exp" "plai" "test-box-recovery" "guibuilder" "xrepl" 
 > "scriblib" "preprocessor" "syntax" "test-engine" "web-server" "gui-debugger" 
 > "planet" "dynext" "stepper" "slideshow" "handin-client" "datalog" 
 > "deinprogramm" "errortrace" "algol60" "openssl" "mzcom" "games" "info-domain" 
 > "unstable" "string-constants" "compiler" "make" "embedded-gui" "srfi" "html" 
 > "scribble" "scheme" "wxme" "sirmail" "handin-server" "typed" "db" "ffi" 
 > "config" "redex" "browser" "2htdp" "sgl" "rackunit" "reader" "scribblings" 
 > "mzscheme" "raco" "images" "rnrs" "graphics" "hierlist" "profile" 
 > "typed-racket" "defaults" "mysterx" "drs
 > chem!
 > >>>   e" "xml" "trace" "r6rs" "teachpack" "typed-scheme" "repo-time-stamp"))
 > >>>
 > >>> Computer Language: (("Determine language from source") (#(#t print 
 > mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 > >>>
From: Ryan Culpepper <ryan@cs.utah.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, ryanc@racket-lang.org,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12499: drracket causes surprising program slowdown
Date: Thu, 19 Jan 2012 11:14:20 -0700

 Ah, it seems the difference is almost entirely due to the "~e" in the 
 format string. And that explains it; "~e" involves a print handler that 
 DrRacket overrides. I'll close the bug report; it's my fault for using 
 (format "~e" ....) in a loop.
 
 Thanks,
 Ryan
 
 
 On 01/18/2012 10:03 PM, Matthew Flatt wrote:
 > The test runs faster and roughly the same in both environments if I
 > replace `check-equal?' with `c-e?':
 >
 >   (define-syntax c-e?
 >     (syntax-rules ()
 >       [(_ x y whatever)
 >        (unless (equal? x y) (error whatever))]
 >       [(_ x y) (c-e? x y "failed")]))
 >
 >
 > At Wed, 18 Jan 2012 19:47:21 -0700, Ryan Culpepper wrote:
 >> Online expansion is disabled.
 >>
 >> GC time is larger in the DrRacket version, but it doesn't account for
 >> the whole difference.
 >>
 >> In DrRacket:
 >>
 >>     Using ordered-dict interface, w/ search
 >>     splay-tree :  3150 (560 gc)
 >>     adj splay  :  2900 (140 gc)
 >>     skip-list  :  2760 (140 gc)
 >>     splay w/ c :  3190 (170 gc)
 >>     skip w/ c  :  3190 (140 gc)
 >>
 >>     Using custom interfaces, w/ search
 >>     splay-tree :  2570 (100 gc)
 >>     adj splay  :  2670 (130 gc)
 >>     skip-list  :  2620 (150 gc)
 >>     splay w/ c :  2660 (180 gc)
 >>     skip w/ c  :  2600 (120 gc)
 >>
 >>     Using custom interfaces, w/o search
 >>     splay-tree :  2380 (120 gc)
 >>     adj splay  :  2370 (130 gc)
 >>     skip-list  :  2370 (150 gc)
 >>     splay w/ c :  2390 (130 gc)
 >>     skip w/ c  :  2390 (140 gc)
 >>     hash       : 28580 (790 gc)
 >>
 >> In racket, the GC times vary from 0 to 50.
 >>
 >> Ryan
 >>
 >>
 >> On 01/18/2012 06:25 PM, Robby Findler wrote:
 >>> Oh, and is the slowdown all in gc time?
 >>>
 >>> On Wed, Jan 18, 2012 at 7:25 PM, Robby Findler
 >>> <robby@eecs.northwestern.edu>   wrote:
 >>>> That is mysterious. I believe that should be the same as Racket,
 >>>> except that GC will take longer (as the heap is larger).
 >>>>
 >>>> Did you try with online compilation disabled (restart DrRacket after
 >>>> disabling it)?
 >>>>
 >>>> Robby
 >>>>
 >>>> On Wed, Jan 18, 2012 at 6:20 PM,<ryanc@racket-lang.org>   wrote:
 >>>>> A new problem report is waiting at
 >>>>>    http://bugs.racket-lang.org/query/?cmd=view&pr=12499
 >>>>>
 >>>>> Reported by Ryan Culpepper for release: 5.2.1.3--2012-01-18(481bc2f/g)
 >>>>>
 >>>>> *** Description:
 >>>>> I have a set of little benchmarks for the dictionary implementations in the
 >> data collection. I ran them as part of the release testing, and as it happened
 >> I ran them in DrRacket this time, and I got surprising results. Most of them
 >> run 50% to 100% slower than in racket, but one test runs nearly 20 times slower.
 >>>>>
 >>>>> I double-checked my language settings. I have "No debugging or profiling"
 >> selected and both "Populate compiled directories" and "Preserve stacktrace
 >> (disable some optimizations)" turned off. I also turned memory limits off.
 >>>>>
 >>>>> In racket:
 >>>>>
 >>>>>    >   (require tests/data/ordered-dict)
 >>>>>    >   (performance)
 >>>>>    Using ordered-dict interface, w/ search
 >>>>>    splay-tree : 1508
 >>>>>    adj splay  : 1576
 >>>>>    skip-list  : 1520
 >>>>>    splay w/ c : 1888
 >>>>>    skip w/ c  : 1900
 >>>>>
 >>>>>    Using custom interfaces, w/ search
 >>>>>    splay-tree : 1356
 >>>>>    adj splay  : 1408
 >>>>>    skip-list  : 1344
 >>>>>    splay w/ c : 1373
 >>>>>    skip w/ c  : 1360
 >>>>>
 >>>>>    Using custom interfaces, w/o search
 >>>>>    splay-tree : 1196
 >>>>>    adj splay  : 1188
 >>>>>    skip-list  : 1196
 >>>>>    splay w/ c : 1200
 >>>>>    skip w/ c  : 1204
 >>>>>    hash       : 1324
 >>>>>
 >>>>> In DrRacket:
 >>>>>
 >>>>>    >   (require tests/data/ordered-dict)
 >>>>>    >   (performance)
 >>>>>    Using ordered-dict interface, w/ search
 >>>>>    splay-tree : 3108
 >>>>>    adj splay  : 2744
 >>>>>    skip-list  : 2676
 >>>>>    splay w/ c : 3057
 >>>>>    skip w/ c  : 3060
 >>>>>
 >>>>>    Using custom interfaces, w/ search
 >>>>>    splay-tree : 2460
 >>>>>    adj splay  : 2520
 >>>>>    skip-list  : 2448
 >>>>>    splay w/ c : 2492
 >>>>>    skip w/ c  : 2480
 >>>>>
 >>>>>    Using custom interfaces, w/o search
 >>>>>    splay-tree : 2288
 >>>>>    adj splay  : 2276
 >>>>>    skip-list  : 2265
 >>>>>    splay w/ c : 2284
 >>>>>    skip w/ c  : 2288
 >>>>>    hash       : 26254
 >>>>>
 >>>>> I'm surprised by the size of the slowdowns in general, but the hash test
 >> slowdown is pathological; the test takes nearly 20 times as long in DrRacket as
 >> it does in racket.
 >>>>>
 >>>>> This behavior doesn't seem to be new; I got similar results in 5.1.
 >>>>>
 >>>>> *** How to repeat:
 >>>>>
 >>>>>
 >>>>> *** Environment:
 >>>>> unix "Linux thistle 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC
 >> 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>>>> Human Language: english
 >>>>> (current-memory-use) 368086080
 >>>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >> (links #:user? #f #:root? #t) = ()
 >>>>>
 >>>>>
 >>>>> Collections:
 >>>>> ("/home/ryan/.racket/5.2.1.3/collects"
 >>>>>    (non-existent-path))
 >>>>> ("/home/ryan/projects/racket/collects"
 >>>>>    ("tests" "racklog" "lazy" "mzlib" "data" "texpict" "r5rs" "honu"
 >> "schemeunit" "plot" "lang" "parser-tools" "htdp" "version" "icons" "s-exp"
 >> "slatex" "eopl" "launcher" "picturing-programs" "mred" "swindle" "frtime"
 >> "framework" "net" "drracket" "setup" "macro-debugger" "racket" "help"
 >> "syntax-color" "file" "combinator-parser" "meta" "mrlib" ".gitignore"
 >> "readline" "tex2page" "at-exp" "plai" "test-box-recovery" "guibuilder" "xrepl"
 >> "scriblib" "preprocessor" "syntax" "test-engine" "web-server" "gui-debugger"
 >> "planet" "dynext" "stepper" "slideshow" "handin-client" "datalog"
 >> "deinprogramm" "errortrace" "algol60" "openssl" "mzcom" "games" "info-domain"
 >> "unstable" "string-constants" "compiler" "make" "embedded-gui" "srfi" "html"
 >> "scribble" "scheme" "wxme" "sirmail" "handin-server" "typed" "db" "ffi"
 >> "config" "redex" "browser" "2htdp" "sgl" "rackunit" "reader" "scribblings"
 >> "mzscheme" "raco" "images" "rnrs" "graphics" "hierlist" "profile"
 >> "typed-racket" "defaults" "mysterx" "drs
 >> chem!
 >>>>>    e" "xml" "trace" "r6rs" "teachpack" "typed-scheme" "repo-time-stamp"))
 >>>>>
 >>>>> Computer Language: (("Determine language from source") (#(#t print
 >> mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 >>>>>
 

Responsible changed from "nobody" to "ryanc" by ryanc at Thu, 19 Jan 2012 13:18:28 -0500
Reason>>> .

State changed from "open" to "closed" by ryanc at Thu, 19 Jan 2012 13:18:28 -0500
Reason>>> Not a bug. The slowdown is caused by (format "~e" ...).

