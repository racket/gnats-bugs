From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Apr  5 17:25:20 2012
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q35LP2Dd020898
	for <bugs@bugs.plt-scheme.org>; Thu, 5 Apr 2012 17:25:02 -0400
Message-Id: <201204052124.q35LOugS020887@champlain.ccs.neu.edu>
Date: Thu, 5 Apr 2012 17:24:56 -0400
From: schmurrp@hsd.k12.or.us
To: bugs@racket-lang.org
Subject: Cannot create executable

>Number:         12685
>Category:       drscheme
>Synopsis:       Cannot create executable
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Apr 05 17:28:01 -0400 2012
>Closed-Date:    Thu Aug 02 16:44:24 -0400 2012
>Last-Modified:  Thu Aug 02 16:44:24 -0400 2012
>Originator:     Peter Schmurr
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 308404680
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("C:\\Users\\schmpete\\AppData\\Roaming\\Racket\\5.2.1\\collects"
 (non-existent-path))
("C:\\Program Files\\Racket\\collects"
 ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
When attempting to create an executable, the process aborts after a few minutes with the following error:


standard-module-name-resolver: collection not found: "drscheme/private" in any of: (#<path:C:\Users\schmpete\AppData\Roaming\Racket\5.2.1\collects> #<path:C:\Program Files\Racket\collects>)

 === context ===
standard-module-name-resolver
C:\Program Files\Racket\collects\syntax\modresolve.rkt:29:0: resolve-module-path
/var/tmp/racket/collects/racket/private/map.rkt:26:19: loop
C:\Program Files\Racket\collects\compiler\embed-unit.rkt:336:4: get-code
/var/tmp/racket/collects/racket/private/map.rkt:64:19: loop
C:\Program Files\Racket\collects\compiler\embed-unit.rkt:800:4: do-write-module-bundle
C:\Program Files\Racket\collects\compiler\embed-unit.rkt:1182:19: write-module

CODE:

(require 2htdp/image)
(require 2htdp/universe)
(require 2htdp/batch-io)
(define movement1 1000)
(define movement2 1500)
(define movement3 2000)
(define koopa .)
(define balloon .)
(define blooper .)
(define ghost .)

(define falcon .)
(define bat .)
(define bat1 .)
(define bat2 .)
(define pu.)
(define pd.)
(define pl.)
(define pr.)
(define pli .)
(define pri .)


(define main  .)
  
(define 1b .)
;tick-hit-t is for bag/inv work
;tick-food-t is for something else

;a biff is a (make-biff p pa pd b e bag tick) where p is a person pa is a pah, pd is a string, b is a backround, e is a list of enemys, bag is a bag and tick is a tick
;a person is a (make-person 1 2 3 4 5 6 7 8 9) where 1-9 are all items or strings
;a pah is a (make-pah h p) where h is a number, and p is a person
;a background is a (make-background x y v) where x and y are numbers, and v is a string
;a enemy is a (make-enemy l h x y m) where l is an image, h x y and m are numbers
;a item is a (make-item s h sp st w e) where s is a string, and the rest are numbers
;a bag is a (make-bag m i) where m is a number, and i is a list of items
;a tick is a (make-tick f j h) where f j and h are all numbers
; (define bifffff (make-biff (make-person (make-item "head" 0 1 0 0 0)(make-item "body" 0 1 0 0 0)(make-item "shoulders" 0 1 0 0 0)(make-item "hands" 0 1 0 0 0)(make-item "legs" 0 1 0 0 0)(make-item "feet" 0 1 0 0 0)(make-item "mhand" 0 1 1 0 0)(make-item "ohand" 0 1 0 0 0)(make-item "special" 0 1 0 0 0)) (make-pah 100 (make-person "none" "none" "none" "none" "none" "none" "sword" "none" "none")) "right" (make-background 250 250 "main") (list (make-enemy pu 1 1000000000 1000000000 movement1)) (make-bag 5 (list (make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0))) (make-tick 0 0 0)))
; (define personnnnn (make-person "none" "none" "none" "none" "none" "none" "sword" "none" "none"))
; (define pahhhhh (make-pah 100 (make-person "none" "none" "none" "none" "none" "none" "sword" "none" 80)))
; (define backgroundddd (make-background 250 250 "main"))
; (define enemyyy (make-enemy pu 1 1000000000 1000000000 movement1))
; (define itemmmmm (make-item "feet" 0 1 0 0 0))
; (define baggggg  (make-bag 5 (list (make-item "feet" 0 0 0 2 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "head" 0 0 4 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0))))
; (define tickkkk (make-tick 3 3 3))

; ;(define (funforabiff biff)
; ;(make-biff...(biff-p biff)...
; ;...(biff-pa biff)...
; ;...(biff-pd biff)...
; ;...(biff-b biff)...
; ;...(biff-e biff)...
; ;...(biff-bag biff)...
; ;...(biff-tick biff)...))

  
; (define (funforaperson p)
;  (make-person ...(person-head p)...
;   ...(person-body p)...
;   ...(person-shoulders p)...
;   ...(person-hands p)...
;   ...(person-legs p)...
;   ...(person-feet p)...
;   ...(person-mhand p)...
;   ...(person-ohand p)...
;   ...(person-special p)...))

; (define (funforapah p)
;   (make-pah (pah-health p) 
;             (make-person ...(person-head p)...
;   ...(person-body p)...
;   ...(person-shoulders p)...
;   ...(person-hands p)...
;   ...(person-legs p)...
;   ...(person-feet p)...
;   ...(person-mhand p)...
;   ...(person-ohand p)...
;   ...(person-special p)...)))

; (define (funforaitem i)
;   (make-item ...(item-slot i)...
;              ...(item-health i)...
;              ...(item-speed i)...
;              ...(item-strength i) ...
;              ...(item-weight i) ...
;              ...(item-energy i)...))
; 

; (define (funforabackground b)
;   (make-background (background-x b)
;                    (background-y b)
;                    (background-v b)))

; (define (funforaenemy e)
;   (make-enemy ...(enemy-look e)...
;               ...(enemy-health e)...
;               ...(enemy-x e)...
;               ...(enemy-y e)...
;               ...(enemy-m e)...))

; (define (funforatick t)
;   (make-tick ...(tick-food-t t)...
;              ...(tick-jump-t t)...
;              ...(tick-hit-t t)...))

; (define (funforabag b)
;   (make-bag ...(bag-money b)...
;             ...(bag-itemlist b)...))


;a list of enemies is either 
;1. empty, or
;2. (cons e loe) where e is an enemy and loe is a list of enemies

; (define (f-for-a-loe aloe)
;   (cond
;     [(empty? aloe)...]
;     [(cons? a-loe) ...(f-for-a-enemy(first aloe))...
;                    ...(f-for-a-loe (rest aloe))]))

;(define loe1 empty)
;(define loe2 (list e e2))

;a list of items is either
;1. empty, or
;2. (cons i loi) where i is an item and loi is a list of items
; (define (f-loi i)
;   (cond
;     [(empty? aloe)...]
;     [(cons? i) ...(f-for-i(first i))...
;                ...(f-loi (rest i))]))


(define-struct biff (p pa pd b e bag tick))
(define-struct person (head body shoulders hands legs feet mhand ohand special))
(define-struct pah (health person))
(define-struct background (x y v))
(define-struct enemy (look health x y m))
(define-struct item (slot health speed strength weight energy))
(define-struct bag (money itemlist))
(define-struct tick (food-t jump-t hit-t))

(define world (make-biff (make-person (make-item "head" 0 1 0 0 0)(make-item "body" 0 0 0 1 0)(make-item "shoulders" 0 1 0 0 0)(make-item "hands" 0 1 0 0 0)(make-item "legs" 0 1 0 0 0)(make-item "feet" 0 1 0 0 0)(make-item "mhand" 0 1 1 0 0)(make-item "ohand" 0 0 0 1 0)(make-item "special" 0 1 0 0 0)) (make-pah 100 (make-person "none" "none" "none" "none" "none" "save.txt" "sword" "none" 75)) "right" (make-background 250 250 "main") (list (make-enemy pu 1 1000000000 1000000000 movement1)) (make-bag 75 (list (make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0))) (make-tick 0 0 0)))

(define (keyy bif k)
  (cond
    [(string=? "main" (background-v (biff-b bif))) (cond
                                                     [(key=? k "up") (make-biff (biff-p bif) (biff-pa bif) "up" (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) (movement-main bif)) (background-v (biff-b bif)))(biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                     [(key=? k "down") (make-biff (biff-p bif) (biff-pa bif) "down" (make-background (background-x (biff-b bif)) (- (background-y (biff-b bif)) (movement-main bif)) (background-v (biff-b bif)))(biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                     [(key=? k "right") (make-biff (biff-p bif) (biff-pa bif) "right" (make-background (- (background-x (biff-b bif)) (movement-main bif)) (background-y (biff-b bif)) (background-v (biff-b bif)))(biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                     [(key=? k "left") (make-biff (biff-p bif) (biff-pa bif) "left" (make-background (+ (background-x (biff-b bif)) (movement-main bif)) (background-y (biff-b bif)) (background-v (biff-b bif)))(biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                     [(key=? k "f12") (make-biff (biff-p bif) (make-pah  (pah-health (biff-pa bif)) (make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders(pah-person (biff-pa bif)))(person-hands (pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(write-file "output.txt" (biff-string bif))(person-mhand (pah-person (biff-pa bif)))(person-ohand (pah-person (biff-pa bif)))(person-special (pah-person (biff-pa bif)))))(biff-pd bif) (biff-b bif)(biff-e bif)(biff-bag bif) (biff-tick bif))]
                                                     [(key=? k "f11") (listofstrings-biff (read-words "output.txt"))]
                                                     [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 235 10) (=~ (background-y (biff-b bif)) 245 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif))) "righti" (make-background 1000 15 "1b") (list (make-enemy bat 1000 700 200 movement1) (make-enemy bat 1000 1400 200 movement1)(make-enemy pu 1 100000000 100000000 movement1))(biff-bag bif) (biff-tick bif))]
                                                     [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 285 10) (=~ (background-y (biff-b bif)) 300 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif))) "righti" (make-background 1000 15 "1b") (list (make-enemy bat1 1500 700 200 movement2) (make-enemy bat1 1500 1400 200 movement2)(make-enemy bat2 2000 2000 200 movement3)(make-enemy pu 1 100000000 100000000 movement1))(biff-bag bif) (biff-tick bif))]
                                                     [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 218 10) (=~ (background-y (biff-b bif)) 330 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif)))"righti"(make-background 1000 15 "1b") (list (make-enemy falcon 2100 400 220 2100) (make-enemy falcon 2100 700 350 2100)(make-enemy bat1 1500 720 200 1500) (make-enemy falcon 2200 1000 100 2200)(make-enemy pu 1 100000000 100000000 movement1)) (biff-bag bif)(biff-tick bif))]
                                                     [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 282 10) (=~ (background-y (biff-b bif)) 369 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif)))"righti"(make-background 1000 15 "1b") (list (make-enemy ghost 3000 400 220 3000) (make-enemy ghost 3000 900 350 3000)(make-enemy bat 1000 1205 200 1000) (make-enemy bat 1000 1220 200 1000) (make-enemy bat 1000 1235 200 1000) (make-enemy bat 1000 1250 200 1000) (make-enemy bat 1000 1232 98 1000)(make-enemy ghost 3000 1500 200 3000)(make-enemy blooper 6000 2000 250 6000)(make-enemy pu 1 100000000 100000000 movement1)) (biff-bag bif)(biff-tick bif))]
                                                     [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 220 10) (=~ (background-y (biff-b bif)) 423 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif)))"righti"(make-background 1000 15 "1b") (list (make-enemy balloon 500 250 250 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (rando!
 m 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy koopa 2200 800 250 2200)(make-enemy koopa 2200 1200 250 2200)(make-enemy pu 1 100000000 100000000 movement1)) (biff-bag bif)(biff-tick bif))]
                                                     [(key=? k "b") (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "none" (person-body (pah-person (biff-pa bif))) (person-shoulders(pah-person (biff-pa bif)))(person-hands (pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet(pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(person-ohand (pah-person (biff-pa bif)))(person-special (pah-person (biff-pa bif))))) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (if (> (tick-food-t (biff-tick bif)) 0) 0 1) (tick-jump-t (biff-tick bif)) (tick-hit-t (biff-tick bif))))]
                                                     [(key=? k "s") (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (+ (price-of-item (first (bag-itemlist (biff-bag bif)))) (bag-money (biff-bag bif))) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif)))))(biff-tick bif))]
                                                     [(key=? k "c") (if (string=?(person-head (pah-person (biff-pa bif))) "none")(make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "choose" "none" "none" "none" "none" "none" "none" "none" "none")) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick 0 (tick-jump-t (biff-tick bif)) (tick-hit-t (biff-tick bif))))(make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "none" "none" "none" "none" "none" "none" "none" "none" "none")) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick 0 (tick-jump-t (biff-tick bif)) (tick-hit-t (biff-tick bif)))))]
                                                     [else bif])]
                                                   
   [else (cond
           [(and (key=? k "z") (false? (string=? (person-ohand (pah-person (biff-pa bif))) "none"))(=~ (enemy-x (first (biff-e bif))) 250 10)(=~ (enemy-y (first (biff-e bif))) 250 10))(make-biff (biff-p bif)(make-pah(pah-health (biff-pa bif))(make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders(pah-person (biff-pa bif)))(person-hands (pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet(pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(person-ohand (pah-person (biff-pa bif)))(- (person-special (pah-person (biff-pa bif)))50))) (biff-pd bif)(biff-b bif)(cons (make-enemy (enemy-look (first (biff-e bif))) (- (enemy-health (first (biff-e bif))) (MEGAHIT bif)) (enemy-x (first (biff-e bif)))(enemy-y (first (biff-e bif)))(enemy-m (first (biff-e bif))))(rest (biff-e bif))) (biff-bag bif) (biff-tick bif))]
           [(and (key=? k "up") (gravity bif))(make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) 27 (tick-hit-t (biff-tick bif))))]
           [(key=? k "right") (make-biff (biff-p bif) (biff-pa bif) "righti" (make-background (- (background-x (biff-b bif)) (movement bif)) (background-y (biff-b bif)) (background-v (biff-b bif)))(emr bif)(biff-bag bif) (biff-tick bif))]
           [(key=? k "left") (make-biff (biff-p bif) (biff-pa bif) "lefti" (make-background (+ (background-x (biff-b bif)) (movement bif)) (background-y (biff-b bif))
                                                                                              (background-v (biff-b bif)))(eml bif)(biff-bag bif) (biff-tick bif))]
           [(key=? k "b") (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (if (> (tick-food-t (biff-tick bif)) 0) 0 1) (tick-jump-t (biff-tick bif)) (tick-hit-t (biff-tick bif))))]
           [(and (key=? k "\r") (string=? (background-v (biff-b bif)) "1b")(=~ (background-x (biff-b bif)) -357
                                                                               10))(make-biff (biff-p bif) (biff-pa bif) "right" (make-background 250 250 "main") (list (make-enemy pu 1 1000000000 1000000000 movement1)) (biff-bag bif) (biff-tick bif))]
           [else bif])]))
                                                     
                                                     
                                                     
                                                     
                                                     
    (define(drawer bif)
      (cond
        [(> (tick-food-t (biff-tick bif)) 0) (bag-scene bif)]
        [(false? (string=? (person-head (pah-person(biff-pa bif))) "none")) (shopscene bif)] 
      [else (place-image (rectangle (* 3 (healthbar bif)) 6 "solid" "green") 0 3 (place-image (rectangle 60 6 "solid" "red") 0 3(cond
        [(cons? (biff-e bif))
   (place-image (enemy-look (first(biff-e bif)))(enemy-x (first(biff-e bif))) (enemy-y (first(biff-e bif))) (place-image (if(> (ceiling (/ (enemy-health (first (biff-e bif))) (/ (enemy-m (first (biff-e bif))) 20))) 0)(rectangle (ceiling (/ (enemy-health (first (biff-e bif))) (/ (enemy-m (first (biff-e bif))) 20))) 5 "solid" "green") (rectangle 0 0 "solid" "green")) (enemy-x (first(biff-e bif))) (-(enemy-y (first(biff-e bif))) 9)  (place-image (rectangle 20 5 "solid" "red") (enemy-x (first(biff-e bif))) (-(enemy-y (first(biff-e bif))) 9)(drawer (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (rest (biff-e bif)) (biff-bag bif) (biff-tick bif))))))]
        [else (place-image (cond
                  [(string=? "up" (biff-pd bif)) pu]
                  [(string=? "down" (biff-pd bif)) pd]
                  [(string=? "left" (biff-pd bif)) pl]
                  [(string=? "right" (biff-pd bif)) pr]
                  [(string=? "lefti" (biff-pd bif)) pli]
                  [(string=? "righti" (biff-pd bif)) pri]) 250 250 (place-image (rectangle (energybar bif) 5 "solid" "cyan") 0 9(place-image (rectangle 60 5 "solid" "blue") 0 9 (place-image (cond
                                                                              [(string=? (background-v (biff-b bif)) "main")main]
                                                                              [(string=? (background-v (biff-b bif)) "1b")1b])
                                                                               
                                                                               (background-x (biff-b bif)) (background-y (biff-b bif))(empty-scene 500 500)))))])))]))
    
    (define (master-tick bif)
      (cond
        [(= (tick-food-t (biff-tick bif)) 1) bif]
        [(false? (string=?(person-head (pah-person (biff-pa bif))) "none")) bif]
        [else (tick-handler bif)]))
    
    (define (tick-handler bif)
      (cond
        [(<= (pah-health (biff-pa bif))  0) (make-biff (make-person (make-item "head" 0 1 0 0 0)(make-item "body" 0 1 0 0 0)(make-item "shoulders" 0 1 0 0 0)(make-item "hands" 0 1 0 0 0)(make-item "legs" 0 1 0 0 0)(make-item "feet" 0 1 0 0 0)(make-item "mhand" 0 1 1 0 0)(make-item "ohand" 0 1 0 0 0)(make-item "special" 0 1 0 0 0))(make-pah 100 (make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders (pah-person (biff-pa bif)))(person-hands(pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet (pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(person-ohand (pah-person (biff-pa bif)))(regen? bif)))"right"(make-background 250 250 "main")(list (make-enemy pu 1 1000000000 1000000000 movement1))(biff-bag bif)(make-tick 0 0 0))]
      [else (enemydamage(make-biff (biff-p bif) (if (string=? (background-v (biff-b bif)) "main") (make-pah (healthz bif) (make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders (pah-person (biff-pa bif)))(person-hands(pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet (pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(if (> (person-special (pah-person (biff-pa bif))) 50) "something" "none")(regen? bif))) (make-pah (if (< (pah-health(biff-pa bif)) (healthz bif)) (+(pah-health (biff-pa bif)) .1) (pah-health(biff-pa bif))) (make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders (pah-person (biff-pa bif)))(person-hands(pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet (pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(if (> (person-special (pah-person (biff-pa bif))) 50) "so!
 mething" "none")(regen? bif))))  (biff-pd bif) (cond
                                                            [(= (tick-jump-t (biff-tick bif)) 26) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 12) (background-v (biff-b bif)))]
                                                            [(= (tick-jump-t (biff-tick bif)) 25) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 12) (background-v (biff-b bif)))]
                                                            [(= (tick-jump-t (biff-tick bif)) 24) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 8) (background-v (biff-b bif)))]
                                                            [(= (tick-jump-t (biff-tick bif)) 23) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 6) (background-v (biff-b bif)))]
                                                            [(= (tick-jump-t (biff-tick bif)) 22) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 3) (background-v (biff-b bif)))]
                                                              [else (if (false? (gravity bif)) (make-background (background-x (biff-b bif)) (- (background-y (biff-b bif)) 1) (background-v (biff-b bif))) (biff-b bif))]) (fighte (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (superdead (ze (biff-e bif))) (biff-bag bif) (biff-tick bif)))  
                 (cond
                   [(and (= (tick-food-t (biff-tick bif)) 0) (eh0 (biff-e bif))) (make-bag (cond
                                                                                             [(image=? (enemy-look (first (biff-e bif))) balloon) (+ (bag-money (biff-bag bif)) 2)] [else (bag-money (biff-bag bif))])(putinbag (bag-itemlist (biff-bag bif)) (cond
                                                                                                                                                            [(image=? (enemy-look (first (biff-e bif))) bat)   (roller-bat (random 100))]
                                                                                                                                                            [(image=? (enemy-look (first (biff-e bif))) bat1)  (roller-bat1 (random 100))]
                                                                                                                                                            [(image=? (enemy-look (first (biff-e bif))) bat2)  (roller-bat2 (random 100))]
                             [(image=? (enemy-look (first (biff-e bif))) falcon) (if (= (random 3) 1) (make-item "none" 0 0 0 0 0) (roller-falcon (random 9) (random 9)(random 9)(random 9) (random 9) (random 9)))]
                             [(image=? (enemy-look (first (biff-e bif))) ghost) (if (= (random 3) 1) (make-item "none" 0 0 0 0 0) (roller-falcon (random 9) (random 11)(random 11)(random 11) (random 11) (random 11)))] 
                             [(image=? (enemy-look (first (biff-e bif))) blooper) (if (= (random 3) 1) (make-item "none" 0 0 0 0 0) (roller-falcon (random 9) (random 15)(random 12)(random 8) (random 9) (random 9)))] 
                                                                                                                               [(image=? (enemy-look (first (biff-e bif))) koopa) (if (= (random 3) 1) (make-item "none" 0 0 0 0 0) (roller-falcon (random 9) (random 11)(random 10)(random 9) (random 12) (random 7)))]
                                                                                                                               [else (make-item "none" 0 0 0 0 0)])))]
                                                                                                                                                               
                   [else (biff-bag bif)])
                 
                 
                 
                 (make-tick (tick-food-t(biff-tick bif))(if (= (tick-jump-t(biff-tick bif)) 0) 0 (- (tick-jump-t(biff-tick bif)) 1))(if (and (<  (enemy-health (first (biff-e bif))) 0) (> (enemy-health (first (biff-e bif))) -10000 ))20 (if (= (tick-hit-t(biff-tick bif)) 0) 0 (- (tick-hit-t(biff-tick bif)) 1))))))]))
    
    (define (ze e)
      (cond
        [(and (cons? e) (=~ (enemy-x (first e)) 250 275) (=~ (enemy-y (first e)) 250 275)(> (enemy-health (first e))0))(cond
                                                                                            [(or(equal? (enemy-look (first e)) bat)(equal? (enemy-look (first e)) bat1)(equal? (enemy-look (first e)) bat2)(equal? (enemy-look (first e)) falcon)(equal? (enemy-look (first e)) ghost)(equal? (enemy-look (first e)) blooper) (equal? (enemy-look (first e)) balloon)(equal? (enemy-look (first e)) koopa)) (cond 
                                                                                                      [(and (< (enemy-x (first e)) 250)(< (enemy-y (first e)) 250))(cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(+ (enemy-x (first e)) 2) (+ (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
                                             
                                                                                                      [(and (< (enemy-x (first e)) 250)(> (enemy-y (first e)) 250))(cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(+ (enemy-x (first e)) 2) (- (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
                                                                                                      
                                                                                                      [(and (> (enemy-x (first e)) 250)(< (enemy-y (first e)) 250))(cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(- (enemy-x (first e)) 2) (+ (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
                                                                                                      
                                                                                                      [(and (> (enemy-x (first e)) 250)(> (enemy-y (first e)) 250))(cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(- (enemy-x (first e)) 2) (- (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
                                                                                                      [(> (enemy-y (first e)) 250) (cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(enemy-x (first e)) (- (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
                                                                                                      [(< (enemy-y (first e)) 250) (cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(enemy-x (first e)) (+ (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
                                                                                                      [(> (enemy-x (first e)) 250) (cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(- (enemy-x (first e)) 2) (enemy-y (first e)) (enemy-m (first e))) (ze (rest e)))]
                                                                                                      [(< (enemy-x (first e)) 250) (cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(+ (enemy-x (first e)) 2) (enemy-y (first e)) (enemy-m (first e))) (ze (rest e)))]
                                                                                                      [else (cons (first e) (ze (rest e)))])]
                                                                                            [else e])]
        [else e]))
                                                                                                      
                                                                                            
        
                         
    
    (define (gravity bif)
      (cond
        [(string=? (background-v (biff-b bif)) "main") true]
        [(and (string=? (background-v (biff-b bif)) "1b") (< (background-y (biff-b bif)) 19)) true]
         [else false]))
                        
    ;consumes a biff and returns a list where all of the parts of list (biff-e) are moved (movement function) left
    ;(define (emr bif)..)
    ;biff-> list of enemies
    
    
    
   
                              
 (define (eml bif)
   (cond
     [(empty?  (biff-e bif)) empty]
     [else (cons (make-enemy (enemy-look (first (biff-e bif))) (enemy-health (first (biff-e bif))) (+ (enemy-x (first (biff-e bif)))(movement bif))(enemy-y (first (biff-e bif))) (enemy-m (first (biff-e bif)))) (eml (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (rest (biff-e bif)) (biff-bag bif) (biff-tick bif))))]))
    
 (define (emr bif)
   (cond
     [(empty?  (biff-e bif)) empty]
     [else (cons (make-enemy (enemy-look (first (biff-e bif))) (enemy-health (first (biff-e bif))) (- (enemy-x (first (biff-e bif)))(movement bif))(enemy-y (first (biff-e bif))) (enemy-m (first (biff-e bif)))) (emr (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (rest (biff-e bif)) (biff-bag bif) (biff-tick bif))))]))
    

    
    
;movement formula -->   (/ (+ 100 (+ (item-speed (person-head (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-speed (person-hands (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-speed (person-special (biff-p bif))))) 40)
 ;movement main formula --> (/ (+ 100 (+ (item-speed (person-head (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-speed (person-hands (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-speed (person-special (biff-p bif))))) 80)
 
 (define (movement bif) 
   (/ (+ 100 (+ (item-speed (person-head (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-speed (person-hands (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-speed (person-special (biff-p bif))))) 40))
   
   (define (movement-main bif)
     (/ (+ 100 (+ (item-speed (person-head (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-speed (person-hands (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-speed (person-special (biff-p bif))))) 80))
   
   (define (roller-bat n)
     (cond
       [(> 30 n) (make-item "none" 0 0 0 0 0)]
       [(> 33 n) (make-item "mhand" 2 0 3 1 0)]
       [(> 40 n) (make-item "mhand" 0 3 1 0 1)]
       [(> 50 n) (make-item "feet" 1 1 0 0 0)]
       [(> 55 n) (make-item "hands" 1 0 2 2 0)]
       [(> 60 n) (make-item "legs" 0 3 0 0 1)]
       [(> 70 n) (make-item "legs" 0 0 2 0 1)]
       [(> 80 n) (make-item "legs" 3 0 1 2 0)]
       [(> 81 n) (make-item "special" 2 2 2 2 2)]
       [(> 85 n) (make-item "head" 1 1 1 1 0)]
       [(> 90 n) (make-item "head" 3 0 0 0 1)]
       [(> 91 n) (make-item "ohand" 1 0 3 1 1)]
       [(>= 100 n) (make-item "legs" 1 1 1 1 1)]))
   
   
   (define (roller-bat1 n)
     (cond
       [(> 20 n) (make-item "none" 0 0 0 0 0)]
       [(> 25 n) (make-item "hands" 6 0 4 0 0)]
       [(> 33 n) (make-item "mhand" 4 0 6 1 0)]
       [(> 40 n) (make-item "mhand" 0 7 2 0 0)]
       [(> 50 n) (make-item "feet" 6 0 0 0 0)]
       [(> 55 n) (make-item "hands" 4 0 3 3 0)]
       [(> 60 n) (make-item "legs" 0 6 1 0 1)]
       [(> 70 n) (make-item "body" 8 0 1 0 1)]
       [(> 80 n) (make-item "legs" 6 0 1 2 0)]
       [(> 81 n) (make-item "special" 5 2 3 2 2)]
       [(> 85 n) (make-item "head" 2 2 3 2 0)]
       [(> 90 n) (make-item "head" 1 0 5 0 1)]
       [(> 93 n) (make-item "ohand" 4 0 4 0 1)]
       [(>= 100 n) (make-item "legs" 3 0 6 0 0)]))
   
   (define (roller-bat2 n)
     (cond
       [(> 25 n) (make-item "feet" 5 2 6 0 1)]
       [(> 30 n) (make-item "mhand" 3 2 11 1 1)]
       [(> 45 n) (make-item "feet" 2 5 5 0 2)]
       [(> 50 n) (make-item "mhand" 8 3 6 0 0)]
       [(> 60 n) (make-item "head" 4 3 2 1 0)]
       [(> 67 n) (make-item "shoulders" 3 0 4 0 4)]
       [(> 73 n) (make-item "shoulders" 0 13 0 0 1)]
       [(> 85 n) (make-item "feet" 3 8 3 1 2)]
       [(> 98 n) (make-item "special" 8 0 4 0 0)]
       [(>= 100 n) (make-item "feet" 10 0 12 0 2)]))
       
   (define (roller-falcon q w e r t y)
     (make-item (cond
                  [(= q 0) "head"]
                  [(= q 1) "body"]
                  [(= q 2) "shoulders"]
                  [(= q 3) "hands"]
                  [(= q 4) "legs"]
                  [(= q 5) "feet"]
                  [(= q 6) "mhand"]
                  [(= q 7) "ohand"]
                  [(= q 8) "special"]) w e r t y))
       
     (define (eh0 e)
       (cond
         [(and (cons? e) (< (enemy-health(first e)) .01)(> (enemy-health(first e)) -10000)) true]
         [(cons?  e) (eh0 (rest e))]
         [else false]))
         
   ; (define (bso b)
;      (cond 
;        [(and (cons? b) (string=? (item-slot (first b)) "none")) true]
;        [(cons? b) (bso (rest b))]
;        [else false]))

   
(define (putinbag b i)
  (cond
    [(string=? (item-slot (first b)) "none") (cons i (rest b))]
    [(string=? (item-slot (second b)) "none") (cons (first b) (cons i (rest (rest b))))]
    [(string=? (item-slot (third b)) "none") (cons (first b) (cons (second b) (cons i (rest (rest (rest b))))))]
    [(string=? (item-slot (fourth b)) "none") (cons (first b) (cons (second b) (cons (third b)(cons i (rest (rest (rest (rest b))))))))]
    [(string=? (item-slot (fifth b)) "none") (cons (first b)(cons (second b) (cons(third b) (cons(fourth b) (cons i (rest (rest (rest (rest (rest b))))))))))]
    [(string=? (item-slot (sixth b)) "none") (cons (first b) (cons(second b) (cons(third b) (cons(fourth b) (cons(fifth b) (cons i (rest (rest (rest (rest (rest (rest b))))))))))))]
    [(string=? (item-slot (seventh b)) "none") (cons (first b)(cons (second b) (cons(third b) (cons(fourth b) (cons(fifth b) (cons(sixth b) (cons i (rest (rest (rest (rest (rest (rest (rest b))))))))))))))]
    [(string=? (item-slot (eighth b)) "none") (cons (first b)(cons (second b) (cons(third b) (cons(fourth b) (cons(fifth b) (cons(sixth b) (cons(seventh b)(cons i (rest(rest(rest(rest (rest(rest(rest(rest b))))))))))))))))]
    [else (cons (first b)(cons (second b)(cons (third b)(cons (fourth b)(cons (fifth b)(cons (sixth b)(cons (seventh b)(cons (eighth b)(cons i empty)))))))))]))
   
(define (fighte bif)
  (cond
    [(and (cons? (rest (biff-e bif)))(=~ (enemy-x (first (biff-e bif))) 250 20) (=~ (enemy-y (first (biff-e bif))) 250 10)) (ft bif)]
    [(empty? (rest(biff-e bif))) (biff-e bif)]
    [else (biff-e bif)]))

(define (healthbar bif)
  (cond
    [(>= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 10) 20]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 9) 18]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 8) 16]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 7) 14]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 6) 12]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 5) 10]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 4) 8]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 3) 6]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 2) 4]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 1) 2]
    [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 0) 0]
    [else 0]))
    

(define (damageme bif)
  (+ 10 (item-strength (person-head (biff-p bif))) (item-strength (person-body (biff-p bif))) (item-strength (person-shoulders (biff-p bif)))(item-strength (person-hands (biff-p bif))) (item-strength (person-legs (biff-p bif))) (item-strength (person-feet (biff-p bif))) (* (item-strength (person-mhand (biff-p bif))) 3) (* (item-strength (person-ohand (biff-p bif))) 2) (item-strength (person-special (biff-p bif))))) 
      
      (define (healthz bif)
        (+ 50 (item-health (person-head (biff-p bif))) (item-health (person-body (biff-p bif))) (item-health (person-shoulders (biff-p bif))) (item-health (person-hands (biff-p bif))) (item-health (person-legs(biff-p bif))) (item-health (person-feet (biff-p bif))) (item-health (person-mhand (biff-p bif))) (item-health (person-ohand (biff-p bif))) (item-health (person-special (biff-p bif)))))

      
      (define(ft bif)
        (cons (make-enemy (enemy-look(first (biff-e bif))) (- (enemy-health (first (biff-e bif))) (/ (* (random 6) (damageme bif)) 10)) (enemy-x (first (biff-e bif))) (enemy-y (first (biff-e bif))) (enemy-m (first (biff-e bif)))) (rest (biff-e bif))))
      
 (define (bag-scene bif)
    (place-image (cond
     [(= (tick-hit-t (biff-tick bif)) 1) (text (string-append (item-slot (person-head (biff-p bif))) "   health:" (number->string (item-health(person-head (biff-p bif)))) " speed:" (number->string (item-speed(person-head (biff-p bif)))) " strength:" (number->string (item-strength(person-head (biff-p bif)))) " weight:" (number->string (item-weight(person-head (biff-p bif)))) " energy:" (number->string (item-energy(person-head (biff-p bif))))) 9 "black")]
     [(= (tick-hit-t (biff-tick bif)) 2) (text (string-append (item-slot (person-body (biff-p bif))) "   health:" (number->string (item-health(person-body (biff-p bif)))) " speed:" (number->string (item-speed(person-body (biff-p bif)))) " strength:" (number->string (item-strength(person-body (biff-p bif)))) " weight:" (number->string (item-weight(person-body (biff-p bif)))) " energy:" (number->string (item-energy(person-body (biff-p bif))))) 9 "black")] 
     [(= (tick-hit-t (biff-tick bif)) 3)  (text (string-append (item-slot (person-shoulders (biff-p bif))) "   health:" (number->string (item-health(person-shoulders (biff-p bif)))) " speed:" (number->string (item-speed(person-shoulders (biff-p bif)))) " strength:" (number->string (item-strength(person-shoulders (biff-p bif)))) " weight:" (number->string (item-weight(person-shoulders (biff-p bif)))) " energy:" (number->string (item-energy(person-shoulders (biff-p bif))))) 9 "black")] 
     [(= (tick-hit-t (biff-tick bif)) 4) (text (string-append (item-slot (person-hands (biff-p bif))) "   health:" (number->string (item-health(person-hands (biff-p bif)))) " speed:" (number->string (item-speed(person-hands (biff-p bif)))) " strength:" (number->string (item-strength(person-hands (biff-p bif)))) " weight:" (number->string (item-weight(person-hands (biff-p bif)))) " energy:" (number->string (item-energy(person-hands (biff-p bif))))) 9 "black")] 
     [(= (tick-hit-t (biff-tick bif)) 5) (text (string-append (item-slot (person-legs (biff-p bif))) "   health:" (number->string (item-health(person-legs (biff-p bif)))) " speed:" (number->string (item-speed(person-legs (biff-p bif)))) " strength:" (number->string (item-strength(person-legs (biff-p bif)))) " weight:" (number->string (item-weight(person-legs (biff-p bif)))) " energy:" (number->string (item-energy(person-legs (biff-p bif))))) 9 "black")] 
     [(= (tick-hit-t (biff-tick bif)) 6) (text (string-append (item-slot (person-feet (biff-p bif))) "   health:" (number->string (item-health(person-feet (biff-p bif)))) " speed:" (number->string (item-speed(person-feet (biff-p bif)))) " strength:" (number->string (item-strength(person-feet (biff-p bif)))) " weight:" (number->string (item-weight(person-feet (biff-p bif)))) " energy:" (number->string (item-energy(person-feet (biff-p bif))))) 9 "black")] 
     [(= (tick-hit-t (biff-tick bif)) 7) (text (string-append (item-slot (person-mhand (biff-p bif))) "   health:" (number->string (item-health(person-mhand (biff-p bif)))) " speed:" (number->string (item-speed(person-mhand (biff-p bif)))) " strength:" (number->string (item-strength(person-mhand (biff-p bif)))) " weight:" (number->string (item-weight(person-mhand (biff-p bif)))) " energy:" (number->string (item-energy(person-mhand (biff-p bif))))) 9 "black")] 
     [(= (tick-hit-t (biff-tick bif)) 8) (text (string-append (item-slot (person-ohand (biff-p bif))) "   health:" (number->string (item-health(person-ohand (biff-p bif)))) " speed:" (number->string (item-speed(person-ohand (biff-p bif)))) " strength:" (number->string (item-strength(person-ohand (biff-p bif)))) " weight:" (number->string (item-weight(person-ohand (biff-p bif)))) " energy:" (number->string (item-energy(person-ohand (biff-p bif))))) 9 "black")] 
     [(= (tick-hit-t (biff-tick bif)) 9) (text (string-append (item-slot (person-special (biff-p bif))) "   health:" (number->string (item-health(person-special (biff-p bif)))) " speed:" (number->string (item-speed(person-special (biff-p bif)))) " strength:" (number->string (item-strength(person-special (biff-p bif)))) " weight:" (number->string (item-weight(person-special (biff-p bif)))) " energy:" (number->string (item-energy(person-special (biff-p bif))))) 9 "black")]
     [(= (tick-hit-t (biff-tick bif)) 10) (text (string-append (item-slot (first (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(first (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (first (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (first (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(first (bag-itemlist (biff-bag bif))))) " energy:" (number->string (item-energy (first (bag-itemlist (biff-bag bif)))))) 9 "black")
                 ]
     [(= (tick-hit-t (biff-tick bif)) 11) (text (string-append (item-slot (second (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(second (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (second (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (second (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(second (bag-itemlist (biff-bag bif))))) " energy:" (number->string (item-energy (second (bag-itemlist (biff-bag bif)))))) 9 "black")
                 ]
     [(= (tick-hit-t (biff-tick bif)) 12) (text (string-append (item-slot (third (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(third (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (third (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (third (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(third (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (third (bag-itemlist (biff-bag bif)))))) 9 "black")
                 ]
     [(= (tick-hit-t (biff-tick bif)) 13) (text (string-append (item-slot (fourth (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(fourth (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (fourth (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (fourth (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(fourth (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (fourth (bag-itemlist (biff-bag bif)))))) 9 "black")
                 ]
     [(= (tick-hit-t (biff-tick bif)) 14) (text (string-append (item-slot (fifth (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(fifth (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (fifth (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (fifth (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(fifth (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (fifth (bag-itemlist (biff-bag bif)))))) 9 "black")
                 ]
     [(= (tick-hit-t (biff-tick bif)) 15) (text (string-append (item-slot (sixth (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(sixth (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (sixth (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (sixth (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(sixth (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (sixth (bag-itemlist (biff-bag bif)))))) 9 "black")
                 ]
     [(= (tick-hit-t (biff-tick bif)) 16) (text (string-append (item-slot (seventh (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(seventh (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (seventh (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (seventh (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(seventh (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (seventh (bag-itemlist (biff-bag bif)))))) 9 "black")
                 ]
     [(= (tick-hit-t (biff-tick bif)) 17) (text (string-append (item-slot (eighth (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(eighth (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (eighth (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (eighth (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(eighth (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (eighth (bag-itemlist (biff-bag bif)))))) 9 "black")
                 ]
     [(= (tick-hit-t (biff-tick bif)) 18) (text (string-append (item-slot (first (rest (rest (rest (rest (rest(rest(rest(rest (bag-itemlist (biff-bag bif))))))))))))  "   health:" (number->string (item-health(first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif))))))))))))) " speed:" (number->string (item-speed (first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif))))))))))))) " strength:" (number->string (item-strength (first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif))))))))))))) " weight:" (number->string (item-weight(first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif))))))))))))) " energy:" (number->string(item-energy (first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif)))))))))))))) 9 "black")]
                 
    [else (text "item stats" 20 "black")])
                 250 250
      
         (place-image (text (string-append "Cash: $"(number->string (bag-money (biff-bag bif)))) 10 "gold")400 320(place-image (text "head:" 10 "darkbrown") 30 160(place-image (text "body:" 10 "darkbrown") 80 160(place-image (text "shoulders:" 10 "darkbrown") 130 160(place-image (text "hands:" 10 "darkbrown") 180 160(place-image (text "legs:" 10 "darkbrown") 230 160(place-image (text "feet:" 10 "darkbrown") 280 160(place-image (text "weapon:" 10 "darkbrown") 330 160(place-image (text "weapon2:" 10 "darkbrown") 380 160(place-image (text "special:" 10 "darkbrown") 430 160(place-image (text "Equipment:" 60 "black") 200 60 (place-image (square 40 "solid" "gray") 180 200 (place-image (square 40 "solid" "gray") 230 200 (place-image (square 40 "solid" "gray") 280 200 (place-image (square 40 "solid" "gray") 330 200 (place-image (square 40 "solid" "gray") 380 200 (place-image (square 40 "solid" "gray") 430 200 (place-image (square 40 "solid" "gray") 130 200 (place-image (square 40 "s!
 olid" "gray") 80 200 (place-image (square 40 "solid" "gray") 30 200(place-image (text "Bag:" 60 "black") 100 370(place-image (square 40 "solid" "gray") 30 450 (place-image (square 40 "solid" "gray") 80 450 (place-image (square 40 "solid" "gray") 130 450 (place-image (square 40 "solid" "gray") 180 450 (place-image (square 40 "solid" "gray") 230 450 (place-image (square 40 "solid" "gray") 280 450 (place-image (square 40 "solid" "gray") 330 450 (place-image (square 40 "solid" "gray") 380 450 (place-image (square 40 "solid" "gray") 430 450  (place-image (square 44 "solid" "red") 30 450 (place-image (square 500 "solid" "brown") 250 250 (empty-scene 500 500)))))))))))))))))))))))))))))))))))

 (define (mouz bif x y click)
     (cond
       [(> (tick-food-t (biff-tick bif)) 0)(cond [(and (> (tick-hit-t (biff-tick bif)) 9) (string=? click "button-down")) (cond
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 10) (false? (string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "none"))) (equip1 bif) ]
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 11) (false? (string=? (item-slot (second (bag-itemlist (biff-bag bif)))) "none"))) (equip2 bif) ]
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 12) (false? (string=? (item-slot (third (bag-itemlist (biff-bag bif)))) "none"))) (equip3 bif) ]
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 13) (false? (string=? (item-slot (fourth (bag-itemlist (biff-bag bif)))) "none"))) (equip4 bif) ]
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 14) (false? (string=? (item-slot (fifth (bag-itemlist (biff-bag bif)))) "none"))) (equip5 bif) ]
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 15) (false? (string=? (item-slot (sixth (bag-itemlist (biff-bag bif)))) "none"))) (equip6 bif) ]
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 16) (false? (string=? (item-slot (seventh (bag-itemlist (biff-bag bif)))) "none"))) (equip7 bif) ]
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 17) (false? (string=? (item-slot (eighth (bag-itemlist (biff-bag bif)))) "none"))) (equip8 bif) ]
                                                                                [(and (=(tick-hit-t(biff-tick bif)) 18) (false? (string=? (item-slot (first(rest(rest(rest(rest(rest(rest(rest(rest (bag-itemlist (biff-bag bif)))))))))))) "none"))) (equip9 bif) ]
                                                                                [else bif])
                                                                                ]
     [(and (=~ x 30 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 1))]
     [(and (=~ x 80 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 2))]
     [(and (=~ x 130 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 3))]
     [(and (=~ x 180 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 4))]
     [(and (=~ x 230 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 5))]
     [(and (=~ x 280 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 6))]
     [(and (=~ x 330 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 7))]
     [(and (=~ x 380 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 8))]
     [(and (=~ x 430 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 9))]
     [(and (=~ x 30 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 10))]
     [(and (=~ x 80 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 11))]
     [(and (=~ x 130 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 12))]
     [(and (=~ x 180 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 13))]
     [(and (=~ x 230 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 14))]
     [(and (=~ x 280 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 15))]
     [(and (=~ x 330 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 16))]
     [(and (=~ x 380 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 17))]
     [(and (=~ x 430 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 18))]
     
     [else (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 0))])]
       [(false? (string=? (person-head (pah-person(biff-pa bif)))"none")) (cond
                                                                      [(and (=~ x 40 20) (=~ y 15 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "head" "none" "none" "none" "none" "none" "none" "none" "none")) (biff-pd bif)(biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (=~ x 40 20) (=~ y 30 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "body" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (=~ x 40 20) (=~ y 45 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "shoulders" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (=~ x 40 20) (=~ y 60 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "hands" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (=~ x 40 20) (=~ y 75 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "legs" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (=~ x 40 20) (=~ y 90 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "feet" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (=~ x 40 20) (=~ y 105 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "weapon1" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (=~ x 40 20) (=~ y 120 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "weapon2" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (=~ x 40 20) (=~ y 135 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "special" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
                                                                      [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 50 15) (=~ y 400 15) (string=? click "button-down"))(cond
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (+(item-health (person-head (biff-p bif)))1) (item-speed (person-head (biff-p bif))) (item-strength (person-head (biff-p bif))) (item-weight (person-head (biff-p bif))) (item-energy(person-head (biff-p bif)))) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (+(item-health (person-body (biff-p bif)))1) (item-speed (person-body (biff-p bif))) (item-strength (person-body (biff-p bif))) (item-weight (person-body (biff-p bif))) (item-energy(person-body (biff-p bif)))) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (+(item-health (person-shoulders (biff-p bif)))1) (item-speed (person-shoulders (biff-p bif))) (item-strength (person-shoulders (biff-p bif))) (item-weight (person-shoulders (biff-p bif))) (item-energy(person-shoulders (biff-p bif)))) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (+(item-health (person-hands (biff-p bif)))1) (item-speed (person-hands (biff-p bif))) (item-strength (person-hands (biff-p bif))) (item-weight (person-hands (biff-p bif))) (item-energy(person-hands (biff-p bif)))) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (+(item-health (person-legs (biff-p bif)))1) (item-speed (person-legs (biff-p bif))) (item-strength (person-legs (biff-p bif))) (item-weight (person-legs (biff-p bif))) (item-energy(person-legs (biff-p bif))))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (+(item-health (person-feet (biff-p bif)))1) (item-speed (person-feet (biff-p bif))) (item-strength (person-feet (biff-p bif))) (item-weight (person-feet (biff-p bif))) (item-energy(person-feet (biff-p bif)))) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (+(item-health (person-mhand (biff-p bif)))1) (item-speed (person-mhand (biff-p bif))) (item-strength (person-mhand (biff-p bif))) (item-weight (person-mhand (biff-p bif))) (item-energy(person-mhand (biff-p bif)))) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (+(item-health (person-ohand (biff-p bif)))1) (item-speed (person-ohand (biff-p bif))) (item-strength (person-ohand (biff-p bif))) (item-weight (person-ohand (biff-p bif))) (item-energy(person-ohand (biff-p bif)))) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (+(item-health (person-special (biff-p bif)))1) (item-speed (person-special (biff-p bif))) (item-strength (person-special (biff-p bif))) (item-weight (person-special (biff-p bif))) (item-energy(person-special (biff-p bif))))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [else bif])]
                                                                      
                                                                      [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 150 15) (=~ y 400 15) (string=? click "button-down"))(cond
                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (item-health (person-head (biff-p bif))) (+(item-speed (person-head (biff-p bif)))1) (item-strength (person-head (biff-p bif))) (item-weight (person-head (biff-p bif))) (item-energy(person-head (biff-p bif)))) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (item-health (person-body (biff-p bif))) (+(item-speed (person-body (biff-p bif)))1) (item-strength (person-body (biff-p bif))) (item-weight (person-body (biff-p bif))) (item-energy(person-body (biff-p bif)))) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (item-health (person-shoulders (biff-p bif))) (+(item-speed (person-shoulders (biff-p bif)))1) (item-strength (person-shoulders (biff-p bif))) (item-weight (person-shoulders (biff-p bif))) (item-energy(person-shoulders (biff-p bif)))) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (item-health (person-hands (biff-p bif)))(+ (item-speed (person-hands (biff-p bif)))1) (item-strength (person-hands (biff-p bif))) (item-weight (person-hands (biff-p bif))) (item-energy(person-hands (biff-p bif)))) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (item-health (person-legs (biff-p bif))) (+(item-speed (person-legs (biff-p bif)))1) (item-strength (person-legs (biff-p bif))) (item-weight (person-legs (biff-p bif))) (item-energy(person-legs (biff-p bif))))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (item-health (person-feet (biff-p bif))) (+(item-speed (person-feet (biff-p bif)))1) (item-strength (person-feet (biff-p bif))) (item-weight (person-feet (biff-p bif))) (item-energy(person-feet (biff-p bif)))) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (item-health (person-mhand (biff-p bif))) (+(item-speed (person-mhand (biff-p bif)))1) (item-strength (person-mhand (biff-p bif))) (item-weight (person-mhand (biff-p bif))) (item-energy(person-mhand (biff-p bif)))) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (item-health (person-ohand (biff-p bif))) (+(item-speed (person-ohand (biff-p bif)))1) (item-strength (person-ohand (biff-p bif))) (item-weight (person-ohand (biff-p bif))) (item-energy(person-ohand (biff-p bif)))) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (item-health (person-special (biff-p bif))) (+(item-speed (person-special (biff-p bif)))1) (item-strength (person-special (biff-p bif))) (item-weight (person-special (biff-p bif))) (item-energy(person-special (biff-p bif))))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [else bif])]
                                                                      [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 250 15) (=~ y 400 15) (string=? click "button-down"))(cond
                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (item-health (person-head (biff-p bif))) (item-speed (person-head (biff-p bif))) (+(item-strength (person-head (biff-p bif)))1) (item-weight (person-head (biff-p bif))) (item-energy(person-head (biff-p bif)))) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (item-health (person-body (biff-p bif))) (item-speed (person-body (biff-p bif))) (+(item-strength (person-body (biff-p bif)))1) (item-weight (person-body (biff-p bif))) (item-energy(person-body (biff-p bif)))) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (item-health (person-shoulders (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (+(item-strength (person-shoulders (biff-p bif)))1) (item-weight (person-shoulders (biff-p bif))) (item-energy(person-shoulders (biff-p bif)))) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (item-health (person-hands (biff-p bif)))(item-speed (person-hands (biff-p bif))) (+(item-strength (person-hands (biff-p bif)))1) (item-weight (person-hands (biff-p bif))) (item-energy(person-hands (biff-p bif)))) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (item-health (person-legs (biff-p bif))) (item-speed (person-legs (biff-p bif))) (+(item-strength (person-legs (biff-p bif)))1) (item-weight (person-legs (biff-p bif))) (item-energy(person-legs (biff-p bif))))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (item-health (person-feet (biff-p bif))) (item-speed (person-feet (biff-p bif))) (+(item-strength (person-feet (biff-p bif)))1) (item-weight (person-feet (biff-p bif))) (item-energy(person-feet (biff-p bif)))) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (item-health (person-mhand (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (+(item-strength (person-mhand (biff-p bif)))1) (item-weight (person-mhand (biff-p bif))) (item-energy(person-mhand (biff-p bif)))) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (item-health (person-ohand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (+(item-strength (person-ohand (biff-p bif)))1) (item-weight (person-ohand (biff-p bif))) (item-energy(person-ohand (biff-p bif)))) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (item-health (person-special (biff-p bif))) (item-speed (person-special (biff-p bif))) (+(item-strength (person-special (biff-p bif)))1) (item-weight (person-special (biff-p bif))) (item-energy(person-special (biff-p bif))))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [else bif])]
                                                                      
                                                                      [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 350 15) (=~ y 400 15) (string=? click "button-down"))(cond
                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (item-health (person-head (biff-p bif))) (item-speed (person-head (biff-p bif))) (item-strength (person-head (biff-p bif))) (+(item-weight (person-head (biff-p bif)))1) (item-energy(person-head (biff-p bif)))) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (item-health (person-body (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-strength (person-body (biff-p bif))) (+(item-weight (person-body (biff-p bif)))1) (item-energy(person-body (biff-p bif)))) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (item-health (person-shoulders (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-strength (person-shoulders (biff-p bif))) (+(item-weight (person-shoulders (biff-p bif)))1) (item-energy(person-shoulders (biff-p bif)))) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (item-health (person-hands (biff-p bif)))(item-speed (person-hands (biff-p bif))) (item-strength (person-hands (biff-p bif))) (+(item-weight (person-hands (biff-p bif)))1) (item-energy(person-hands (biff-p bif)))) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (item-health (person-legs (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-strength (person-legs (biff-p bif))) (+(item-weight (person-legs (biff-p bif)))1) (item-energy(person-legs (biff-p bif))))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (item-health (person-feet (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-strength (person-feet (biff-p bif))) (+(item-weight (person-feet (biff-p bif)))1) (item-energy(person-feet (biff-p bif)))) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (item-health (person-mhand (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-strength (person-mhand (biff-p bif))) (+(item-weight (person-mhand (biff-p bif)))1) (item-energy(person-mhand (biff-p bif)))) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (item-health (person-ohand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-strength (person-ohand (biff-p bif))) (+(item-weight (person-ohand (biff-p bif)))1) (item-energy(person-ohand (biff-p bif)))) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (item-health (person-special (biff-p bif))) (item-speed (person-special (biff-p bif))) (item-strength (person-special (biff-p bif))) (+(item-weight (person-special (biff-p bif)))1) (item-energy(person-special (biff-p bif))))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [else bif])]
                                                                      
                                                                      [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 450 15) (=~ y 400 15) (string=? click "button-down"))(cond
                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (item-health (person-head (biff-p bif))) (item-speed (person-head (biff-p bif))) (item-strength (person-head (biff-p bif))) (item-weight (person-head (biff-p bif))) (+(item-energy(person-head (biff-p bif)))1)) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (item-health (person-body (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-strength (person-body (biff-p bif))) (item-weight (person-body (biff-p bif))) (+(item-energy(person-body (biff-p bif)))1)) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (item-health (person-shoulders (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-strength (person-shoulders (biff-p bif))) (item-weight (person-shoulders (biff-p bif))) (+(item-energy(person-shoulders (biff-p bif)))1)) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (item-health (person-hands (biff-p bif)))(item-speed (person-hands (biff-p bif))) (item-strength (person-hands (biff-p bif))) (item-weight (person-hands (biff-p bif))) (+(item-energy(person-hands (biff-p bif)))1)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (item-health (person-legs (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-strength (person-legs (biff-p bif))) (item-weight (person-legs (biff-p bif))) (+(item-energy(person-legs (biff-p bif)))1))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (item-health (person-feet (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-strength (person-feet (biff-p bif))) (item-weight (person-feet (biff-p bif))) (+(item-energy(person-feet (biff-p bif)))1)) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (item-health (person-mhand (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-strength (person-mhand (biff-p bif))) (item-weight (person-mhand (biff-p bif))) (+(item-energy(person-mhand (biff-p bif)))1)) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (item-health (person-ohand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-strength (person-ohand (biff-p bif))) (item-weight (person-ohand (biff-p bif))) (+(item-energy(person-ohand (biff-p bif)))1)) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (item-health (person-special (biff-p bif))) (item-speed (person-special (biff-p bif))) (item-strength (person-special (biff-p bif))) (item-weight (person-special (biff-p bif))) (+(item-energy(person-special (biff-p bif)))1))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
                                                                                                                                                                           [else bif])]
                                                                      
                                                                      [else bif])]
       [else bif]))
                                                                     
   
 
 (define (superdead e)
   (cond
     [(< (enemy-health (first e)) .1) (rest e)]
     [else e]))
     
 (define (equip1 bif)
   (cond
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "head") (make-biff (make-person (first (bag-itemlist (biff-bag bif))) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "body") (make-biff (make-person (person-head (biff-p bif)) (first (bag-itemlist (biff-bag bif))) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "shoulders") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (first (bag-itemlist (biff-bag bif)))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "hands") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "legs") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "feet") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "mhand") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "ohand") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "special") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(first (bag-itemlist (biff-bag bif)))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
     [else bif]))
     
   
 (define (enemydamage bif)
   (cond
     [(=~ (enemy-x (first (biff-e bif))) 250 10)
   (make-biff (biff-p bif) (make-pah (- (pah-health (biff-pa bif)) (cond 
                                                                     [(image=? (enemy-look (first (biff-e bif))) bat) (/ (random 3)4)]
                                                                     [(image=? (enemy-look (first (biff-e bif))) bat1) (/ (/ (random 3) 4)(armor-help bif))]
                                                                     [(image=? (enemy-look (first (biff-e bif))) bat2) (/(/ (random 4) 4)(armor-help bif))]
                                                                     [(image=? (enemy-look (first (biff-e bif))) falcon) (/(/ (random 5) 3)(armor-help bif))]
                                                                     [(image=? (enemy-look (first (biff-e bif))) ghost) (/(/ (random 8) 4)(armor-help bif))]
                                                                     [(image=? (enemy-look (first (biff-e bif))) blooper) (/(/ (random 5) 3)(armor-help bif))]
                                                                     [(image=? (enemy-look (first (biff-e bif))) balloon) (/(/ (random 3) 3)(armor-help bif))]
                                                                     [(image=? (enemy-look (first (biff-e bif))) koopa) (/(/ (random 13) 3)(armor-help bif))]
                                                                     [else 3])) (pah-person(biff-pa bif))) (biff-pd bif)(biff-b bif)(biff-e bif)(biff-bag bif) (biff-tick bif))]
     [else bif]))
 
 (define (equip2 bif)
   (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list 
                                                                                            (second (bag-itemlist (biff-bag bif)))
                                                                                            (first (bag-itemlist (biff-bag bif)))
                                                                                            (third (bag-itemlist (biff-bag bif)))
                                                                                            (fourth (bag-itemlist (biff-bag bif)))
                                                                                            (fifth (bag-itemlist (biff-bag bif)))
                                                                                            (sixth (bag-itemlist (biff-bag bif)))
                                                                                            (seventh (bag-itemlist (biff-bag bif)))
                                                                                            (eighth (bag-itemlist (biff-bag bif)))
                                                                                            (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 (define (equip3 bif)
   (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list 
                                                                                            (third (bag-itemlist (biff-bag bif)))
                                                                                            (second (bag-itemlist (biff-bag bif)))
                                                                                            (first (bag-itemlist (biff-bag bif)))
                                                                                            (fourth (bag-itemlist (biff-bag bif)))
                                                                                            (fifth (bag-itemlist (biff-bag bif)))
                                                                                            (sixth (bag-itemlist (biff-bag bif)))
                                                                                            (seventh (bag-itemlist (biff-bag bif)))
                                                                                            (eighth (bag-itemlist (biff-bag bif)))
                                                                                            (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 (define (equip4 bif)
   (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list 
                                                                                            (fourth (bag-itemlist (biff-bag bif)))
                                                                                            (second (bag-itemlist (biff-bag bif)))
                                                                                            (third (bag-itemlist (biff-bag bif)))
                                                                                            (first (bag-itemlist (biff-bag bif)))
                                                                                            (fifth (bag-itemlist (biff-bag bif)))
                                                                                            (sixth (bag-itemlist (biff-bag bif)))
                                                                                            (seventh (bag-itemlist (biff-bag bif)))
                                                                                            (eighth (bag-itemlist (biff-bag bif)))
                                                                                            (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 (define (equip5 bif)
   (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list 
                                                                                            (fifth (bag-itemlist (biff-bag bif)))
                                                                                            (second (bag-itemlist (biff-bag bif)))
                                                                                            (third (bag-itemlist (biff-bag bif)))
                                                                                            (fourth (bag-itemlist (biff-bag bif)))
                                                                                            (first (bag-itemlist (biff-bag bif)))
                                                                                            (sixth (bag-itemlist (biff-bag bif)))
                                                                                            (seventh (bag-itemlist (biff-bag bif)))
                                                                                            (eighth (bag-itemlist (biff-bag bif)))
                                                                                            (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 (define (equip6 bif)
   (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list 
                                                                                            (sixth (bag-itemlist (biff-bag bif)))
                                                                                            (second (bag-itemlist (biff-bag bif)))
                                                                                            (third (bag-itemlist (biff-bag bif)))
                                                                                            (fourth (bag-itemlist (biff-bag bif)))
                                                                                            (fifth (bag-itemlist (biff-bag bif)))
                                                                                            (first (bag-itemlist (biff-bag bif)))
                                                                                            (seventh (bag-itemlist (biff-bag bif)))
                                                                                            (eighth (bag-itemlist (biff-bag bif)))
                                                                                            (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 (define (equip7 bif)
   (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list 
                                                                                            (seventh (bag-itemlist (biff-bag bif)))
                                                                                            (second (bag-itemlist (biff-bag bif)))
                                                                                            (third (bag-itemlist (biff-bag bif)))
                                                                                            (fourth (bag-itemlist (biff-bag bif)))
                                                                                            (fifth (bag-itemlist (biff-bag bif)))
                                                                                            (sixth (bag-itemlist (biff-bag bif)))
                                                                                            (first (bag-itemlist (biff-bag bif)))
                                                                                            (eighth (bag-itemlist (biff-bag bif)))
                                                                                            (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 (define (equip8 bif)
   (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list 
                                                                                            (eighth (bag-itemlist (biff-bag bif)))
                                                                                            (second (bag-itemlist (biff-bag bif)))
                                                                                            (third (bag-itemlist (biff-bag bif)))
                                                                                            (fourth (bag-itemlist (biff-bag bif)))
                                                                                            (fifth (bag-itemlist (biff-bag bif)))
                                                                                            (sixth (bag-itemlist (biff-bag bif)))
                                                                                            (seventh (bag-itemlist (biff-bag bif)))
                                                                                            (first (bag-itemlist (biff-bag bif)))
                                                                                            (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 (define (equip9 bif)
   (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list 
                                                                                            (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))
                                                                                            (second (bag-itemlist (biff-bag bif)))
                                                                                            (third (bag-itemlist (biff-bag bif)))
                                                                                            (fourth (bag-itemlist (biff-bag bif)))
                                                                                            (fifth (bag-itemlist (biff-bag bif)))
                                                                                            (sixth (bag-itemlist (biff-bag bif)))
                                                                                            (seventh (bag-itemlist (biff-bag bif)))
                                                                                            (eighth (bag-itemlist (biff-bag bif)))
                                                                                            (first (bag-itemlist (biff-bag bif))))) (biff-tick bif)))
   
 (define (price-of-item item)
   (* (+ (item-health item) (item-speed item) (item-strength item) (item-weight item) (item-energy item))2))
   
 (define (shopscene bif)
   (place-image (text "+health" 18 "crimson") 50 400 (place-image (text "+speed" 18 "lime") 150 400 (place-image (text "+strength" 18 "brown") 250 400(place-image (text "+weight" 18 "darkgray") 350 400(place-image (text "+energy" 18 "orange") 450 400(place-image (text (string-append "Cash: $"(number->string (bag-money (biff-bag bif)))) 20 "gold") 400 150(place-image (text "cost= $50" 33 "gold") 250 250(place-image (text "changing:" 15 "green") 400 40(place-image (text (person-head (pah-person (biff-pa bif))) 20 "limegreen") 400 70(place-image (text "head" 10 "red") 40 15(place-image (text "body" 10 "red") 40 30(place-image (text "shoulders" 10 "red") 40 45(place-image (text "hands" 10 "red") 40 60(place-image (text "legs" 10 "red") 40 75(place-image (text "feet" 10 "red") 40 90(place-image (text "weapon1" 10 "red") 40 105(place-image (text "weapon2" 10 "red") 40 120(place-image (text "special" 10 "red") 40 135 (place-image (rectangle 60 15 "solid" "black") 40 (cond
string=? (person-head (pah-person (biff-pa bif))) "head") 15]
string=? (person-head (pah-person (biff-pa bif))) "body") 30]
string=? (person-head (pah-person (biff-pa bif))) "shoulders") 45]
string=? (person-head (pah-person (biff-pa bif))) "hands") 60]
string=? (person-head (pah-person (biff-pa bif))) "legs") 75]
string=? (person-head (pah-person (biff-pa bif))) "feet") 90]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") 105]
string=? (person-head (pah-person (biff-pa bif))) "weapon2") 120]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           [(string=? (person-head (pah-person (biff-pa bif))) "special") 135]
else -200])


place-image (square 1000 "solid" "gray") 0 0(empty-scene 500 500))))))))))))))))))))))
 
 (define (armor-help bif)
  (/ (+ 90 (item-weight (person-head (biff-p bif))) (* (item-weight (person-body (biff-p bif)))1.3) (item-weight (person-shoulders (biff-p bif)))(item-weight (person-hands (biff-p bif))) (item-weight (person-legs (biff-p bif))) (item-weight (person-feet (biff-p bif))) (* (item-weight (person-mhand (biff-p bif))).5)  (* (item-weight (person-ohand (biff-p bif))) 1.2) (* (item-weight (person-special (biff-p bif))).7)) 100))
 
 (define (energy-regen bif)
   (/(+ 200(*(item-energy (person-head (biff-p bif)))1.3) (item-energy (person-body (biff-p bif))) (*(item-energy (person-shoulders (biff-p bif)))1.2)(item-energy (person-hands (biff-p bif))) (item-energy (person-legs (biff-p bif))) (item-energy (person-feet (biff-p bif))) (item-energy (person-mhand (biff-p bif)))  (item-energy (person-ohand (biff-p bif)))  (item-energy (person-special (biff-p bif))))400))
 
 (define (regen? bif)
   (cond 
     [(< (person-special (pah-person (biff-pa bif))) 80) (+ (person-special (pah-person (biff-pa bif))) (energy-regen bif))]
     [else (person-special (pah-person (biff-pa bif)))]))
 
 (define (MEGAHIT bif)
   (* (+ 10 (item-strength (person-head (biff-p bif))) (item-strength (person-body (biff-p bif))) (item-strength (person-shoulders (biff-p bif)))(item-strength (person-hands (biff-p bif))) (item-strength (person-legs (biff-p bif))) (item-strength (person-feet (biff-p bif))) (* (item-strength (person-mhand (biff-p bif))) 3) (* (item-strength (person-ohand (biff-p bif))) 2) (item-strength (person-special (biff-p bif)))) (+ (random 3) 1)))
 
 
 (define (energybar bif)
   (* (person-special (pah-person (biff-pa bif))) .75))
 
 (define ian (make-biff
 (make-person
  (make-item "head" 6 3 7 10 6)
  (make-item "body" 18 0 1 0 1)
  (make-item "shoulders" 3 0 4 0 4)
  (make-item "hands" 5 0 10 4 7)
  (make-item "legs" 9 0 7 7 4)
  (make-item "feet" 5 2 6 0 1)
  (make-item "mhand" 9 3 25 0 0)
  (make-item "ohand" 6 10 10 1 6)
  (make-item "special" 10 6 1 0 2))
 (make-pah 121 (make-person "weapon1" "none" "none" "none" "none" "none" "none" "none" "none"))
 "right"
 (make-background 250 250 "main")
 (cons (make-enemy . 1 1000000000 1000000000 1000) empty)
 (make-bag
  9
  (cons
   (make-item "none" 0 0 0 0 0)
   (cons
    (make-item "none" 0 0 0 0 0)
    (cons
     (make-item "none" 0 0 0 0 0)
     (cons
      (make-item "none" 0 0 0 0 0)
      (cons
       (make-item "none" 0 0 0 0 0)
       (cons
        (make-item "none" 0 0 0 0 0)
        (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) empty))))))))))
 (make-tick 0 0 0)))

 (define carson (make-biff
 (make-person
  (make-item "head" 2 2 3 2 0)
  (make-item "body" 0 1 0 0 0)
  (make-item "shoulders" 0 1 0 0 0)
  (make-item "hands" 0 1 0 0 0)
  (make-item "legs" 0 1 0 0 0)
  (make-item "feet" 0 1 0 0 0)
  (make-item "mhand" 0 3 1 0 1)
  (make-item "ohand" 0 1 0 0 0)
  (make-item "special" 0 1 0 0 0))
 (make-pah 52.06 (make-person "none" "none" "none" "none" "none" "none" "sword" "none" "none"))
 "righti"
 (make-background 274 15 "1b")
 (cons (make-enemy . 1500 674 200 1500) (cons (make-enemy . 2000 1274 200 2000) (cons (make-enemy . 1 99999274 100000000 1000) empty)))
 (make-bag
  75
  (cons
   (make-item "none" 0 0 0 0 0)
   (cons
    (make-item "none" 0 0 0 0 0)
    (cons
     (make-item "none" 0 0 0 0 0)
     (cons
      (make-item "none" 0 0 0 0 0)
      (cons
       (make-item "none" 0 0 0 0 0)
       (cons
        (make-item "none" 0 0 0 0 0)
        (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) empty))))))))))
 (make-tick 0 0 0)))
 
 (define alix (make-biff
 (make-person
  (make-item "head" 0 1 0 0 0)
  (make-item "body" 0 1 0 0 0)
  (make-item "shoulders" 0 1 0 0 0)
  (make-item "hands" 1 0 2 2 0)
  (make-item "legs" 3 0 1 2 0)
  (make-item "feet" 0 1 0 0 0)
  (make-item "mhand" 2 0 4 1 0)
  (make-item "ohand" 0 1 0 0 0)
  (make-item "special" 0 1 0 0 0))
 (make-pah 56 (make-person "none" "none" "none" "none" "none" "none" "none" "none" "none"))
 "right"
 (make-background 250 250 "main")
 (cons (make-enemy . 1 1000000000 1000000000 1000) empty)
 (make-bag
  49
  (cons
   (make-item "none" 0 0 0 0 0)
   (cons
    (make-item "none" 0 0 0 0 0)
    (cons
     (make-item "none" 0 0 0 0 0)
     (cons
      (make-item "none" 0 0 0 0 0)
      (cons
       (make-item "none" 0 0 0 0 0)
       (cons
        (make-item "none" 0 0 0 0 0)
        (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) empty))))))))))
 (make-tick 0 0 0)))

 (define (listofstrings-biff lis)
   (make-biff (make-person (make-item "head" (string->number(first lis)) (string->number(first (rest lis))) (string->number(first (rest (rest lis)))) (string->number(first (rest(rest(rest lis))))) (string->number(first (rest(rest(rest(rest lis))))))) (make-item "body" (string->number(first (rest(rest(rest(rest(rest lis))))))) (string->number(first (rest(rest(rest(rest(rest(rest lis))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest lis))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))) (make-item "shoulders"(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(r!
 est(rest(rest(rest(rest(rest lis))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))) (make-item "hands" (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))) (make-item "legs" (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))!
 ))))))))))))))) (string->number(first (rest(rest(rest(rest(res!
 t(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))(make-item "feet" (string->number(first (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))(string->number(first (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))!
 )))) (string->number(first (rest(rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))(string->number(first (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))(string->number(first (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))
                        (make-item "mhand" (string->number(first (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))
                                   (string->number(first (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))
                                   (string->number(first (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))
                        (make-item "ohand" (string->number(first (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(!
 rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))
                        (make-item "special" (string->number(first (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest!
  (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))
           (make-pah (string->number(first (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))(make-person (first (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(res!
 t(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(re!
 st(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (!
 rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))) (first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(re!
 st(rest(rest(rest (rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"right" (make-background 250 250 "main")(list (make-enemy pu 1 1000000000 1000000000 movement1))(make-bag (string->number (first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(list (make-item (first (rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest !
 (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(!
 rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(r!
 est(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest!
  (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest!
 (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->numbe!
 r (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(!
 rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(res!
 t (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(!
 rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 st(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))!
 ))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))!
 ))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(s!
 tring->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(!
 rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(re!
 st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest(rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->numb!
 er(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(r!
 est(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest(rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first !
 (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))!
 ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(st!
 ring->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest!
 (rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (res!
 t (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (r!
 est (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(r!
 est(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 st(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))!
 )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest !
 (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(r!
 est(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(r!
 est(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest li!
 s))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))!
 )))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(!
 rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(r!
 est(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(res!
 t(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(res!
 t(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(!
 rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(r!
 est(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(r!
 est(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(res!
 t(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest(rest(rest (rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(res!
 t(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest(rest (rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (make-tick 0 0 0))
                                   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             !

                                                               !
                                                                                                                                                                                                                                                   


                                                               !
                                                                                                                                                                                                                                                   )
   
   
 (define (biff-string bif)
   (string-append
(number->string (item-health (person-head (biff-p bif))))
" "
(number->string (item-speed (person-head (biff-p bif))))
" "
(number->string (item-strength (person-head (biff-p bif))))
" "
(number->string (item-weight (person-head (biff-p bif))))
" "
(number->string (item-energy (person-head (biff-p bif))))
" "
(number->string (item-health (person-body (biff-p bif))))
" "
(number->string (item-speed (person-body (biff-p bif))))
" "
(number->string (item-strength (person-body (biff-p bif))))
" "
(number->string (item-weight (person-body (biff-p bif))))
" "
(number->string (item-energy (person-body (biff-p bif))))
" "
(number->string (item-health (person-shoulders (biff-p bif))))
" "
(number->string (item-speed (person-shoulders (biff-p bif))))
" "
(number->string (item-strength (person-shoulders (biff-p bif))))
" "
(number->string (item-weight (person-shoulders (biff-p bif))))
" "
(number->string (item-energy (person-shoulders (biff-p bif))))
" "
(number->string (item-health (person-hands (biff-p bif))))
" "
(number->string (item-speed (person-hands (biff-p bif))))
" "
(number->string (item-strength (person-hands (biff-p bif))))
" "
(number->string (item-weight (person-hands (biff-p bif))))
" "
(number->string (item-energy (person-hands (biff-p bif))))
" "
(number->string (item-health (person-legs (biff-p bif))))
" "
(number->string (item-speed (person-legs (biff-p bif))))
" "
(number->string (item-strength (person-legs (biff-p bif))))
" "
(number->string (item-weight (person-legs (biff-p bif))))
" "
(number->string (item-energy (person-legs (biff-p bif))))
" "
(number->string (item-health (person-feet (biff-p bif))))
" "
(number->string (item-speed (person-feet (biff-p bif))))
" "
(number->string (item-strength (person-feet (biff-p bif))))
" "
(number->string (item-weight (person-feet (biff-p bif))))
" "
(number->string (item-energy (person-feet (biff-p bif))))
" "
(number->string (item-health (person-mhand (biff-p bif))))
" "
(number->string (item-speed (person-mhand (biff-p bif))))
" "
(number->string (item-strength (person-mhand (biff-p bif))))
" "
(number->string (item-weight (person-mhand (biff-p bif))))
" "
(number->string (item-energy (person-mhand (biff-p bif))))
" "
(number->string (item-health (person-ohand (biff-p bif))))
" "
(number->string (item-speed (person-ohand (biff-p bif))))
" "
(number->string (item-strength (person-ohand (biff-p bif))))
" "
(number->string (item-weight (person-ohand (biff-p bif))))
" "
(number->string (item-energy (person-ohand (biff-p bif))))
" "
(number->string (item-health (person-special (biff-p bif))))
" "
(number->string (item-speed (person-special (biff-p bif))))
" "
(number->string (item-strength (person-special (biff-p bif))))
" "
(number->string (item-weight (person-special (biff-p bif))))
" "
(number->string (item-energy (person-special (biff-p bif))))
" "
(number->string (pah-health (biff-pa bif)))
" ""helloworld-unused-space"" "
(person-head (pah-person (biff-pa bif)))
" "
(person-body (pah-person (biff-pa bif)))
" "
(person-shoulders (pah-person (biff-pa bif)))
" "
(person-hands (pah-person (biff-pa bif)))
" "
(person-legs (pah-person (biff-pa bif)))
" "
(person-feet (pah-person (biff-pa bif)))
" "
(person-mhand (pah-person (biff-pa bif)))
" "
(person-ohand (pah-person (biff-pa bif)))
" "
(number->string (person-special (pah-person (biff-pa bif))))
" "
(number->string (bag-money (biff-bag bif)))
" "
(item-slot (first (bag-itemlist (biff-bag bif))))
" "
(number->string (item-health (first (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-speed (first (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-strength (first (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-weight (first (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-energy (first (bag-itemlist (biff-bag bif)))))
" "
(item-slot (second (bag-itemlist (biff-bag bif))))
" "
(number->string (item-health (second (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-speed (second (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-strength (second (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-weight (second (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-energy (second (bag-itemlist (biff-bag bif)))))
" "
(item-slot (third (bag-itemlist (biff-bag bif))))
" "
(number->string (item-health (third (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-speed (third (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-strength (third (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-weight (third (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-energy (third (bag-itemlist (biff-bag bif)))))
" "
(item-slot (fourth (bag-itemlist (biff-bag bif))))
" "
(number->string (item-health (fourth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-speed (fourth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-strength (fourth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-weight (fourth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-energy (fourth (bag-itemlist (biff-bag bif)))))
" "
(item-slot (fifth (bag-itemlist (biff-bag bif))))
" "
(number->string (item-health (fifth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-speed (fifth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-strength (fifth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-weight (fifth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-energy (fifth (bag-itemlist (biff-bag bif)))))
" "
(item-slot (sixth (bag-itemlist (biff-bag bif))))
" "
(number->string (item-health (sixth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-speed (sixth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-strength (sixth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-weight (sixth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-energy (sixth (bag-itemlist (biff-bag bif)))))
" "
(item-slot (seventh (bag-itemlist (biff-bag bif))))
" "
(number->string (item-health (seventh (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-speed (seventh (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-strength (seventh (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-weight (seventh (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-energy (seventh (bag-itemlist (biff-bag bif)))))
" "
(item-slot (eighth (bag-itemlist (biff-bag bif))))
" "
(number->string (item-health (eighth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-speed (eighth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-strength (eighth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-weight (eighth (bag-itemlist (biff-bag bif)))))
" "
(number->string (item-energy (eighth (bag-itemlist (biff-bag bif)))))
" "
(item-slot (first (rest (rest (rest(rest(rest(rest(rest(rest (bag-itemlist (biff-bag bif))))))))))))
" "
(number->string (item-health (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
" "
(number->string (item-speed (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
" "
(number->string (item-strength (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
" "
(number->string (item-weight (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
" "
(number->string (item-energy (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
))
 
 
 
 (big-bang 
    world
    (on-tick master-tick .015)
    (on-key keyy)
    (to-draw drawer)
    (on-mouse mouz)
    (name "EPIC"))
>How-To-Repeat:
load epic_13fix!.rkt

Racket-> Create Executable
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: schmurrp@hsd.k12.or.us, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12685: Cannot create executable
Date: Thu, 5 Apr 2012 17:16:18 -0500

 Hi: is there anything besides the images at the top of the file that
 isn't ordinary text?
 
 Robby

From: Robby Findler <robby@eecs.northwestern.edu>
To: schmurrp@hsd.k12.or.us, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12685: Cannot create executable
Date: Thu, 2 Aug 2012 15:42:40 -0500

 Sorry for the delay in getting back to this.
 
 It has been fixed at some point between 5.2.1 and the upcoming release.
 
 Robby
 
 On Thu, Apr 5, 2012 at 4:28 PM,  <schmurrp@hsd.k12.or.us> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12685
 >
 > Reported by Peter Schmurr for release: 5.2.1
 >
 > *** Description:
 > When attempting to create an executable, the process aborts after a few minutes with the following error:
 >
 >
 > standard-module-name-resolver: collection not found: "drscheme/private" in any of: (#<path:C:\Users\schmpete\AppData\Roaming\Racket\5.2.1\collects> #<path:C:\Program Files\Racket\collects>)
 >
 >  === context ===
 > standard-module-name-resolver
 > C:\Program Files\Racket\collects\syntax\modresolve.rkt:29:0: resolve-module-path
 > /var/tmp/racket/collects/racket/private/map.rkt:26:19: loop
 > C:\Program Files\Racket\collects\compiler\embed-unit.rkt:336:4: get-code
 > /var/tmp/racket/collects/racket/private/map.rkt:64:19: loop
 > C:\Program Files\Racket\collects\compiler\embed-unit.rkt:800:4: do-write-module-bundle
 > C:\Program Files\Racket\collects\compiler\embed-unit.rkt:1182:19: write-module
 >
 > CODE:
 >
 > (require 2htdp/image)
 > (require 2htdp/universe)
 > (require 2htdp/batch-io)
 > (define movement1 1000)
 > (define movement2 1500)
 > (define movement3 2000)
 > (define koopa .)
 > (define balloon .)
 > (define blooper .)
 > (define ghost .)
 >
 > (define falcon .)
 > (define bat .)
 > (define bat1 .)
 > (define bat2 .)
 > (define pu.)
 > (define pd.)
 > (define pl.)
 > (define pr.)
 > (define pli .)
 > (define pri .)
 >
 >
 > (define main  .)
 >
 > (define 1b .)
 > ;tick-hit-t is for bag/inv work
 > ;tick-food-t is for something else
 >
 > ;a biff is a (make-biff p pa pd b e bag tick) where p is a person pa is a pah, pd is a string, b is a backround, e is a list of enemys, bag is a bag and tick is a tick
 > ;a person is a (make-person 1 2 3 4 5 6 7 8 9) where 1-9 are all items or strings
 > ;a pah is a (make-pah h p) where h is a number, and p is a person
 > ;a background is a (make-background x y v) where x and y are numbers, and v is a string
 > ;a enemy is a (make-enemy l h x y m) where l is an image, h x y and m are numbers
 > ;a item is a (make-item s h sp st w e) where s is a string, and the rest are numbers
 > ;a bag is a (make-bag m i) where m is a number, and i is a list of items
 > ;a tick is a (make-tick f j h) where f j and h are all numbers
 > ; (define bifffff (make-biff (make-person (make-item "head" 0 1 0 0 0)(make-item "body" 0 1 0 0 0)(make-item "shoulders" 0 1 0 0 0)(make-item "hands" 0 1 0 0 0)(make-item "legs" 0 1 0 0 0)(make-item "feet" 0 1 0 0 0)(make-item "mhand" 0 1 1 0 0)(make-item "ohand" 0 1 0 0 0)(make-item "special" 0 1 0 0 0)) (make-pah 100 (make-person "none" "none" "none" "none" "none" "none" "sword" "none" "none")) "right" (make-background 250 250 "main") (list (make-enemy pu 1 1000000000 1000000000 movement1)) (make-bag 5 (list (make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0))) (make-tick 0 0 0)))
 > ; (define personnnnn (make-person "none" "none" "none" "none" "none" "none" "sword" "none" "none"))
 > ; (define pahhhhh (make-pah 100 (make-person "none" "none" "none" "none" "none" "none" "sword" "none" 80)))
 > ; (define backgroundddd (make-background 250 250 "main"))
 > ; (define enemyyy (make-enemy pu 1 1000000000 1000000000 movement1))
 > ; (define itemmmmm (make-item "feet" 0 1 0 0 0))
 > ; (define baggggg  (make-bag 5 (list (make-item "feet" 0 0 0 2 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "head" 0 0 4 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0))))
 > ; (define tickkkk (make-tick 3 3 3))
 >
 > ; ;(define (funforabiff biff)
 > ; ;(make-biff...(biff-p biff)...
 > ; ;...(biff-pa biff)...
 > ; ;...(biff-pd biff)...
 > ; ;...(biff-b biff)...
 > ; ;...(biff-e biff)...
 > ; ;...(biff-bag biff)...
 > ; ;...(biff-tick biff)...))
 >
 >
 > ; (define (funforaperson p)
 > ;  (make-person ...(person-head p)...
 > ;   ...(person-body p)...
 > ;   ...(person-shoulders p)...
 > ;   ...(person-hands p)...
 > ;   ...(person-legs p)...
 > ;   ...(person-feet p)...
 > ;   ...(person-mhand p)...
 > ;   ...(person-ohand p)...
 > ;   ...(person-special p)...))
 >
 > ; (define (funforapah p)
 > ;   (make-pah (pah-health p)
 > ;             (make-person ...(person-head p)...
 > ;   ...(person-body p)...
 > ;   ...(person-shoulders p)...
 > ;   ...(person-hands p)...
 > ;   ...(person-legs p)...
 > ;   ...(person-feet p)...
 > ;   ...(person-mhand p)...
 > ;   ...(person-ohand p)...
 > ;   ...(person-special p)...)))
 >
 > ; (define (funforaitem i)
 > ;   (make-item ...(item-slot i)...
 > ;              ...(item-health i)...
 > ;              ...(item-speed i)...
 > ;              ...(item-strength i) ...
 > ;              ...(item-weight i) ...
 > ;              ...(item-energy i)...))
 > ;
 >
 > ; (define (funforabackground b)
 > ;   (make-background (background-x b)
 > ;                    (background-y b)
 > ;                    (background-v b)))
 >
 > ; (define (funforaenemy e)
 > ;   (make-enemy ...(enemy-look e)...
 > ;               ...(enemy-health e)...
 > ;               ...(enemy-x e)...
 > ;               ...(enemy-y e)...
 > ;               ...(enemy-m e)...))
 >
 > ; (define (funforatick t)
 > ;   (make-tick ...(tick-food-t t)...
 > ;              ...(tick-jump-t t)...
 > ;              ...(tick-hit-t t)...))
 >
 > ; (define (funforabag b)
 > ;   (make-bag ...(bag-money b)...
 > ;             ...(bag-itemlist b)...))
 >
 >
 > ;a list of enemies is either
 > ;1. empty, or
 > ;2. (cons e loe) where e is an enemy and loe is a list of enemies
 >
 > ; (define (f-for-a-loe aloe)
 > ;   (cond
 > ;     [(empty? aloe)...]
 > ;     [(cons? a-loe) ...(f-for-a-enemy(first aloe))...
 > ;                    ...(f-for-a-loe (rest aloe))]))
 >
 > ;(define loe1 empty)
 > ;(define loe2 (list e e2))
 >
 > ;a list of items is either
 > ;1. empty, or
 > ;2. (cons i loi) where i is an item and loi is a list of items
 > ; (define (f-loi i)
 > ;   (cond
 > ;     [(empty? aloe)...]
 > ;     [(cons? i) ...(f-for-i(first i))...
 > ;                ...(f-loi (rest i))]))
 >
 >
 > (define-struct biff (p pa pd b e bag tick))
 > (define-struct person (head body shoulders hands legs feet mhand ohand special))
 > (define-struct pah (health person))
 > (define-struct background (x y v))
 > (define-struct enemy (look health x y m))
 > (define-struct item (slot health speed strength weight energy))
 > (define-struct bag (money itemlist))
 > (define-struct tick (food-t jump-t hit-t))
 >
 > (define world (make-biff (make-person (make-item "head" 0 1 0 0 0)(make-item "body" 0 0 0 1 0)(make-item "shoulders" 0 1 0 0 0)(make-item "hands" 0 1 0 0 0)(make-item "legs" 0 1 0 0 0)(make-item "feet" 0 1 0 0 0)(make-item "mhand" 0 1 1 0 0)(make-item "ohand" 0 0 0 1 0)(make-item "special" 0 1 0 0 0)) (make-pah 100 (make-person "none" "none" "none" "none" "none" "save.txt" "sword" "none" 75)) "right" (make-background 250 250 "main") (list (make-enemy pu 1 1000000000 1000000000 movement1)) (make-bag 75 (list (make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0)(make-item "none" 0 0 0 0 0))) (make-tick 0 0 0)))
 >
 > (define (keyy bif k)
 >   (cond
 >     [(string=? "main" (background-v (biff-b bif))) (cond
 >                                                      [(key=? k "up") (make-biff (biff-p bif) (biff-pa bif) "up" (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) (movement-main bif)) (background-v (biff-b bif)))(biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                      [(key=? k "down") (make-biff (biff-p bif) (biff-pa bif) "down" (make-background (background-x (biff-b bif)) (- (background-y (biff-b bif)) (movement-main bif)) (background-v (biff-b bif)))(biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                      [(key=? k "right") (make-biff (biff-p bif) (biff-pa bif) "right" (make-background (- (background-x (biff-b bif)) (movement-main bif)) (background-y (biff-b bif)) (background-v (biff-b bif)))(biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                      [(key=? k "left") (make-biff (biff-p bif) (biff-pa bif) "left" (make-background (+ (background-x (biff-b bif)) (movement-main bif)) (background-y (biff-b bif)) (background-v (biff-b bif)))(biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                      [(key=? k "f12") (make-biff (biff-p bif) (make-pah  (pah-health (biff-pa bif)) (make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders(pah-person (biff-pa bif)))(person-hands (pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(write-file "output.txt" (biff-string bif))(person-mhand (pah-person (biff-pa bif)))(person-ohand (pah-person (biff-pa bif)))(person-special (pah-person (biff-pa bif)))))(biff-pd bif) (biff-b bif)(biff-e bif)(biff-bag bif) (biff-tick bif))]
 >                                                      [(key=? k "f11") (listofstrings-biff (read-words "output.txt"))]
 >                                                      [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 235 10) (=~ (background-y (biff-b bif)) 245 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif))) "righti" (make-background 1000 15 "1b") (list (make-enemy bat 1000 700 200 movement1) (make-enemy bat 1000 1400 200 movement1)(make-enemy pu 1 100000000 100000000 movement1))(biff-bag bif) (biff-tick bif))]
 >                                                      [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 285 10) (=~ (background-y (biff-b bif)) 300 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif))) "righti" (make-background 1000 15 "1b") (list (make-enemy bat1 1500 700 200 movement2) (make-enemy bat1 1500 1400 200 movement2)(make-enemy bat2 2000 2000 200 movement3)(make-enemy pu 1 100000000 100000000 movement1))(biff-bag bif) (biff-tick bif))]
 >                                                      [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 218 10) (=~ (background-y (biff-b bif)) 330 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif)))"righti"(make-background 1000 15 "1b") (list (make-enemy falcon 2100 400 220 2100) (make-enemy falcon 2100 700 350 2100)(make-enemy bat1 1500 720 200 1500) (make-enemy falcon 2200 1000 100 2200)(make-enemy pu 1 100000000 100000000 movement1)) (biff-bag bif)(biff-tick bif))]
 >                                                      [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 282 10) (=~ (background-y (biff-b bif)) 369 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif)))"righti"(make-background 1000 15 "1b") (list (make-enemy ghost 3000 400 220 3000) (make-enemy ghost 3000 900 350 3000)(make-enemy bat 1000 1205 200 1000) (make-enemy bat 1000 1220 200 1000) (make-enemy bat 1000 1235 200 1000) (make-enemy bat 1000 1250 200 1000) (make-enemy bat 1000 1232 98 1000)(make-enemy ghost 3000 1500 200 3000)(make-enemy blooper 6000 2000 250 6000)(make-enemy pu 1 100000000 100000000 movement1)) (biff-bag bif)(biff-tick bif))]
 >                                                      [(and (key=? k "\r") (=~ (background-x (biff-b bif)) 220 10) (=~ (background-y (biff-b bif)) 423 10)) (make-biff (biff-p bif) (make-pah (healthz bif) (pah-person (biff-pa bif)))"righti"(make-background 1000 15 "1b") (list (make-enemy balloon 500 250 250 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (rando!
 >  m 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy balloon 500 (random 500) (random 500) 500)(make-enemy koopa 2200 800 250 2200)(make-enemy koopa 2200 1200 250 2200)(make-enemy pu 1 100000000 100000000 movement1)) (biff-bag bif)(biff-tick bif))]
 >                                                      [(key=? k "b") (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "none" (person-body (pah-person (biff-pa bif))) (person-shoulders(pah-person (biff-pa bif)))(person-hands (pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet(pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(person-ohand (pah-person (biff-pa bif)))(person-special (pah-person (biff-pa bif))))) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (if (> (tick-food-t (biff-tick bif)) 0) 0 1) (tick-jump-t (biff-tick bif)) (tick-hit-t (biff-tick bif))))]
 >                                                      [(key=? k "s") (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (+ (price-of-item (first (bag-itemlist (biff-bag bif)))) (bag-money (biff-bag bif))) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif)))))(biff-tick bif))]
 >                                                      [(key=? k "c") (if (string=?(person-head (pah-person (biff-pa bif))) "none")(make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "choose" "none" "none" "none" "none" "none" "none" "none" "none")) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick 0 (tick-jump-t (biff-tick bif)) (tick-hit-t (biff-tick bif))))(make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "none" "none" "none" "none" "none" "none" "none" "none" "none")) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick 0 (tick-jump-t (biff-tick bif)) (tick-hit-t (biff-tick bif)))))]
 >                                                      [else bif])]
 >
 >    [else (cond
 >            [(and (key=? k "z") (false? (string=? (person-ohand (pah-person (biff-pa bif))) "none"))(=~ (enemy-x (first (biff-e bif))) 250 10)(=~ (enemy-y (first (biff-e bif))) 250 10))(make-biff (biff-p bif)(make-pah(pah-health (biff-pa bif))(make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders(pah-person (biff-pa bif)))(person-hands (pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet(pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(person-ohand (pah-person (biff-pa bif)))(- (person-special (pah-person (biff-pa bif)))50))) (biff-pd bif)(biff-b bif)(cons (make-enemy (enemy-look (first (biff-e bif))) (- (enemy-health (first (biff-e bif))) (MEGAHIT bif)) (enemy-x (first (biff-e bif)))(enemy-y (first (biff-e bif)))(enemy-m (first (biff-e bif))))(rest (biff-e bif))) (biff-bag bif) (biff-tick bif))]
 >            [(and (key=? k "up") (gravity bif))(make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) 27 (tick-hit-t (biff-tick bif))))]
 >            [(key=? k "right") (make-biff (biff-p bif) (biff-pa bif) "righti" (make-background (- (background-x (biff-b bif)) (movement bif)) (background-y (biff-b bif)) (background-v (biff-b bif)))(emr bif)(biff-bag bif) (biff-tick bif))]
 >            [(key=? k "left") (make-biff (biff-p bif) (biff-pa bif) "lefti" (make-background (+ (background-x (biff-b bif)) (movement bif)) (background-y (biff-b bif))
 >                                                                                               (background-v (biff-b bif)))(eml bif)(biff-bag bif) (biff-tick bif))]
 >            [(key=? k "b") (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (if (> (tick-food-t (biff-tick bif)) 0) 0 1) (tick-jump-t (biff-tick bif)) (tick-hit-t (biff-tick bif))))]
 >            [(and (key=? k "\r") (string=? (background-v (biff-b bif)) "1b")(=~ (background-x (biff-b bif)) -357
 >                                                                                10))(make-biff (biff-p bif) (biff-pa bif) "right" (make-background 250 250 "main") (list (make-enemy pu 1 1000000000 1000000000 movement1)) (biff-bag bif) (biff-tick bif))]
 >            [else bif])]))
 >
 >
 >
 >
 >
 >     (define(drawer bif)
 >       (cond
 >         [(> (tick-food-t (biff-tick bif)) 0) (bag-scene bif)]
 >         [(false? (string=? (person-head (pah-person(biff-pa bif))) "none")) (shopscene bif)]
 >       [else (place-image (rectangle (* 3 (healthbar bif)) 6 "solid" "green") 0 3 (place-image (rectangle 60 6 "solid" "red") 0 3(cond
 >         [(cons? (biff-e bif))
 >    (place-image (enemy-look (first(biff-e bif)))(enemy-x (first(biff-e bif))) (enemy-y (first(biff-e bif))) (place-image (if(> (ceiling (/ (enemy-health (first (biff-e bif))) (/ (enemy-m (first (biff-e bif))) 20))) 0)(rectangle (ceiling (/ (enemy-health (first (biff-e bif))) (/ (enemy-m (first (biff-e bif))) 20))) 5 "solid" "green") (rectangle 0 0 "solid" "green")) (enemy-x (first(biff-e bif))) (-(enemy-y (first(biff-e bif))) 9)  (place-image (rectangle 20 5 "solid" "red") (enemy-x (first(biff-e bif))) (-(enemy-y (first(biff-e bif))) 9)(drawer (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (rest (biff-e bif)) (biff-bag bif) (biff-tick bif))))))]
 >         [else (place-image (cond
 >                   [(string=? "up" (biff-pd bif)) pu]
 >                   [(string=? "down" (biff-pd bif)) pd]
 >                   [(string=? "left" (biff-pd bif)) pl]
 >                   [(string=? "right" (biff-pd bif)) pr]
 >                   [(string=? "lefti" (biff-pd bif)) pli]
 >                   [(string=? "righti" (biff-pd bif)) pri]) 250 250 (place-image (rectangle (energybar bif) 5 "solid" "cyan") 0 9(place-image (rectangle 60 5 "solid" "blue") 0 9 (place-image (cond
 >                                                                               [(string=? (background-v (biff-b bif)) "main")main]
 >                                                                               [(string=? (background-v (biff-b bif)) "1b")1b])
 >
 >                                                                                (background-x (biff-b bif)) (background-y (biff-b bif))(empty-scene 500 500)))))])))]))
 >
 >     (define (master-tick bif)
 >       (cond
 >         [(= (tick-food-t (biff-tick bif)) 1) bif]
 >         [(false? (string=?(person-head (pah-person (biff-pa bif))) "none")) bif]
 >         [else (tick-handler bif)]))
 >
 >     (define (tick-handler bif)
 >       (cond
 >         [(<= (pah-health (biff-pa bif))  0) (make-biff (make-person (make-item "head" 0 1 0 0 0)(make-item "body" 0 1 0 0 0)(make-item "shoulders" 0 1 0 0 0)(make-item "hands" 0 1 0 0 0)(make-item "legs" 0 1 0 0 0)(make-item "feet" 0 1 0 0 0)(make-item "mhand" 0 1 1 0 0)(make-item "ohand" 0 1 0 0 0)(make-item "special" 0 1 0 0 0))(make-pah 100 (make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders (pah-person (biff-pa bif)))(person-hands(pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet (pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(person-ohand (pah-person (biff-pa bif)))(regen? bif)))"right"(make-background 250 250 "main")(list (make-enemy pu 1 1000000000 1000000000 movement1))(biff-bag bif)(make-tick 0 0 0))]
 >       [else (enemydamage(make-biff (biff-p bif) (if (string=? (background-v (biff-b bif)) "main") (make-pah (healthz bif) (make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders (pah-person (biff-pa bif)))(person-hands(pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet (pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(if (> (person-special (pah-person (biff-pa bif))) 50) "something" "none")(regen? bif))) (make-pah (if (< (pah-health(biff-pa bif)) (healthz bif)) (+(pah-health (biff-pa bif)) .1) (pah-health(biff-pa bif))) (make-person (person-head (pah-person (biff-pa bif))) (person-body (pah-person (biff-pa bif))) (person-shoulders (pah-person (biff-pa bif)))(person-hands(pah-person (biff-pa bif)))(person-legs (pah-person (biff-pa bif)))(person-feet (pah-person (biff-pa bif)))(person-mhand (pah-person (biff-pa bif)))(if (> (person-special (pah-person (biff-pa bif))) 50) "so!
 >  mething" "none")(regen? bif))))  (biff-pd bif) (cond
 >                                                             [(= (tick-jump-t (biff-tick bif)) 26) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 12) (background-v (biff-b bif)))]
 >                                                             [(= (tick-jump-t (biff-tick bif)) 25) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 12) (background-v (biff-b bif)))]
 >                                                             [(= (tick-jump-t (biff-tick bif)) 24) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 8) (background-v (biff-b bif)))]
 >                                                             [(= (tick-jump-t (biff-tick bif)) 23) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 6) (background-v (biff-b bif)))]
 >                                                             [(= (tick-jump-t (biff-tick bif)) 22) (make-background (background-x (biff-b bif)) (+ (background-y (biff-b bif)) 3) (background-v (biff-b bif)))]
 >                                                               [else (if (false? (gravity bif)) (make-background (background-x (biff-b bif)) (- (background-y (biff-b bif)) 1) (background-v (biff-b bif))) (biff-b bif))]) (fighte (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (superdead (ze (biff-e bif))) (biff-bag bif) (biff-tick bif)))
 >                  (cond
 >                    [(and (= (tick-food-t (biff-tick bif)) 0) (eh0 (biff-e bif))) (make-bag (cond
 >                                                                                              [(image=? (enemy-look (first (biff-e bif))) balloon) (+ (bag-money (biff-bag bif)) 2)] [else (bag-money (biff-bag bif))])(putinbag (bag-itemlist (biff-bag bif)) (cond
 >                                                                                                                                                             [(image=? (enemy-look (first (biff-e bif))) bat)   (roller-bat (random 100))]
 >                                                                                                                                                             [(image=? (enemy-look (first (biff-e bif))) bat1)  (roller-bat1 (random 100))]
 >                                                                                                                                                             [(image=? (enemy-look (first (biff-e bif))) bat2)  (roller-bat2 (random 100))]
 >                              [(image=? (enemy-look (first (biff-e bif))) falcon) (if (= (random 3) 1) (make-item "none" 0 0 0 0 0) (roller-falcon (random 9) (random 9)(random 9)(random 9) (random 9) (random 9)))]
 >                              [(image=? (enemy-look (first (biff-e bif))) ghost) (if (= (random 3) 1) (make-item "none" 0 0 0 0 0) (roller-falcon (random 9) (random 11)(random 11)(random 11) (random 11) (random 11)))]
 >                              [(image=? (enemy-look (first (biff-e bif))) blooper) (if (= (random 3) 1) (make-item "none" 0 0 0 0 0) (roller-falcon (random 9) (random 15)(random 12)(random 8) (random 9) (random 9)))]
 >                                                                                                                                [(image=? (enemy-look (first (biff-e bif))) koopa) (if (= (random 3) 1) (make-item "none" 0 0 0 0 0) (roller-falcon (random 9) (random 11)(random 10)(random 9) (random 12) (random 7)))]
 >                                                                                                                                [else (make-item "none" 0 0 0 0 0)])))]
 >
 >                    [else (biff-bag bif)])
 >
 >
 >
 >                  (make-tick (tick-food-t(biff-tick bif))(if (= (tick-jump-t(biff-tick bif)) 0) 0 (- (tick-jump-t(biff-tick bif)) 1))(if (and (<  (enemy-health (first (biff-e bif))) 0) (> (enemy-health (first (biff-e bif))) -10000 ))20 (if (= (tick-hit-t(biff-tick bif)) 0) 0 (- (tick-hit-t(biff-tick bif)) 1))))))]))
 >
 >     (define (ze e)
 >       (cond
 >         [(and (cons? e) (=~ (enemy-x (first e)) 250 275) (=~ (enemy-y (first e)) 250 275)(> (enemy-health (first e))0))(cond
 >                                                                                             [(or(equal? (enemy-look (first e)) bat)(equal? (enemy-look (first e)) bat1)(equal? (enemy-look (first e)) bat2)(equal? (enemy-look (first e)) falcon)(equal? (enemy-look (first e)) ghost)(equal? (enemy-look (first e)) blooper) (equal? (enemy-look (first e)) balloon)(equal? (enemy-look (first e)) koopa)) (cond
 >                                                                                                       [(and (< (enemy-x (first e)) 250)(< (enemy-y (first e)) 250))(cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(+ (enemy-x (first e)) 2) (+ (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
 >
 >                                                                                                       [(and (< (enemy-x (first e)) 250)(> (enemy-y (first e)) 250))(cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(+ (enemy-x (first e)) 2) (- (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
 >
 >                                                                                                       [(and (> (enemy-x (first e)) 250)(< (enemy-y (first e)) 250))(cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(- (enemy-x (first e)) 2) (+ (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
 >
 >                                                                                                       [(and (> (enemy-x (first e)) 250)(> (enemy-y (first e)) 250))(cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(- (enemy-x (first e)) 2) (- (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
 >                                                                                                       [(> (enemy-y (first e)) 250) (cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(enemy-x (first e)) (- (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
 >                                                                                                       [(< (enemy-y (first e)) 250) (cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(enemy-x (first e)) (+ (enemy-y (first e)) 2) (enemy-m (first e))) (ze (rest e)))]
 >                                                                                                       [(> (enemy-x (first e)) 250) (cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(- (enemy-x (first e)) 2) (enemy-y (first e)) (enemy-m (first e))) (ze (rest e)))]
 >                                                                                                       [(< (enemy-x (first e)) 250) (cons (make-enemy (enemy-look (first e)) (enemy-health (first e))(+ (enemy-x (first e)) 2) (enemy-y (first e)) (enemy-m (first e))) (ze (rest e)))]
 >                                                                                                       [else (cons (first e) (ze (rest e)))])]
 >                                                                                             [else e])]
 >         [else e]))
 >
 >
 >
 >
 >
 >     (define (gravity bif)
 >       (cond
 >         [(string=? (background-v (biff-b bif)) "main") true]
 >         [(and (string=? (background-v (biff-b bif)) "1b") (< (background-y (biff-b bif)) 19)) true]
 >          [else false]))
 >
 >     ;consumes a biff and returns a list where all of the parts of list (biff-e) are moved (movement function) left
 >     ;(define (emr bif)..)
 >     ;biff-> list of enemies
 >
 >
 >
 >
 >
 >  (define (eml bif)
 >    (cond
 >      [(empty?  (biff-e bif)) empty]
 >      [else (cons (make-enemy (enemy-look (first (biff-e bif))) (enemy-health (first (biff-e bif))) (+ (enemy-x (first (biff-e bif)))(movement bif))(enemy-y (first (biff-e bif))) (enemy-m (first (biff-e bif)))) (eml (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (rest (biff-e bif)) (biff-bag bif) (biff-tick bif))))]))
 >
 >  (define (emr bif)
 >    (cond
 >      [(empty?  (biff-e bif)) empty]
 >      [else (cons (make-enemy (enemy-look (first (biff-e bif))) (enemy-health (first (biff-e bif))) (- (enemy-x (first (biff-e bif)))(movement bif))(enemy-y (first (biff-e bif))) (enemy-m (first (biff-e bif)))) (emr (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (rest (biff-e bif)) (biff-bag bif) (biff-tick bif))))]))
 >
 >
 >
 >
 > ;movement formula -->   (/ (+ 100 (+ (item-speed (person-head (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-speed (person-hands (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-speed (person-special (biff-p bif))))) 40)
 >  ;movement main formula --> (/ (+ 100 (+ (item-speed (person-head (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-speed (person-hands (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-speed (person-special (biff-p bif))))) 80)
 >
 >  (define (movement bif)
 >    (/ (+ 100 (+ (item-speed (person-head (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-speed (person-hands (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-speed (person-special (biff-p bif))))) 40))
 >
 >    (define (movement-main bif)
 >      (/ (+ 100 (+ (item-speed (person-head (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-speed (person-hands (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-speed (person-special (biff-p bif))))) 80))
 >
 >    (define (roller-bat n)
 >      (cond
 >        [(> 30 n) (make-item "none" 0 0 0 0 0)]
 >        [(> 33 n) (make-item "mhand" 2 0 3 1 0)]
 >        [(> 40 n) (make-item "mhand" 0 3 1 0 1)]
 >        [(> 50 n) (make-item "feet" 1 1 0 0 0)]
 >        [(> 55 n) (make-item "hands" 1 0 2 2 0)]
 >        [(> 60 n) (make-item "legs" 0 3 0 0 1)]
 >        [(> 70 n) (make-item "legs" 0 0 2 0 1)]
 >        [(> 80 n) (make-item "legs" 3 0 1 2 0)]
 >        [(> 81 n) (make-item "special" 2 2 2 2 2)]
 >        [(> 85 n) (make-item "head" 1 1 1 1 0)]
 >        [(> 90 n) (make-item "head" 3 0 0 0 1)]
 >        [(> 91 n) (make-item "ohand" 1 0 3 1 1)]
 >        [(>= 100 n) (make-item "legs" 1 1 1 1 1)]))
 >
 >
 >    (define (roller-bat1 n)
 >      (cond
 >        [(> 20 n) (make-item "none" 0 0 0 0 0)]
 >        [(> 25 n) (make-item "hands" 6 0 4 0 0)]
 >        [(> 33 n) (make-item "mhand" 4 0 6 1 0)]
 >        [(> 40 n) (make-item "mhand" 0 7 2 0 0)]
 >        [(> 50 n) (make-item "feet" 6 0 0 0 0)]
 >        [(> 55 n) (make-item "hands" 4 0 3 3 0)]
 >        [(> 60 n) (make-item "legs" 0 6 1 0 1)]
 >        [(> 70 n) (make-item "body" 8 0 1 0 1)]
 >        [(> 80 n) (make-item "legs" 6 0 1 2 0)]
 >        [(> 81 n) (make-item "special" 5 2 3 2 2)]
 >        [(> 85 n) (make-item "head" 2 2 3 2 0)]
 >        [(> 90 n) (make-item "head" 1 0 5 0 1)]
 >        [(> 93 n) (make-item "ohand" 4 0 4 0 1)]
 >        [(>= 100 n) (make-item "legs" 3 0 6 0 0)]))
 >
 >    (define (roller-bat2 n)
 >      (cond
 >        [(> 25 n) (make-item "feet" 5 2 6 0 1)]
 >        [(> 30 n) (make-item "mhand" 3 2 11 1 1)]
 >        [(> 45 n) (make-item "feet" 2 5 5 0 2)]
 >        [(> 50 n) (make-item "mhand" 8 3 6 0 0)]
 >        [(> 60 n) (make-item "head" 4 3 2 1 0)]
 >        [(> 67 n) (make-item "shoulders" 3 0 4 0 4)]
 >        [(> 73 n) (make-item "shoulders" 0 13 0 0 1)]
 >        [(> 85 n) (make-item "feet" 3 8 3 1 2)]
 >        [(> 98 n) (make-item "special" 8 0 4 0 0)]
 >        [(>= 100 n) (make-item "feet" 10 0 12 0 2)]))
 >
 >    (define (roller-falcon q w e r t y)
 >      (make-item (cond
 >                   [(= q 0) "head"]
 >                   [(= q 1) "body"]
 >                   [(= q 2) "shoulders"]
 >                   [(= q 3) "hands"]
 >                   [(= q 4) "legs"]
 >                   [(= q 5) "feet"]
 >                   [(= q 6) "mhand"]
 >                   [(= q 7) "ohand"]
 >                   [(= q 8) "special"]) w e r t y))
 >
 >      (define (eh0 e)
 >        (cond
 >          [(and (cons? e) (< (enemy-health(first e)) .01)(> (enemy-health(first e)) -10000)) true]
 >          [(cons?  e) (eh0 (rest e))]
 >          [else false]))
 >
 >    ; (define (bso b)
 > ;      (cond
 > ;        [(and (cons? b) (string=? (item-slot (first b)) "none")) true]
 > ;        [(cons? b) (bso (rest b))]
 > ;        [else false]))
 >
 >
 > (define (putinbag b i)
 >   (cond
 >     [(string=? (item-slot (first b)) "none") (cons i (rest b))]
 >     [(string=? (item-slot (second b)) "none") (cons (first b) (cons i (rest (rest b))))]
 >     [(string=? (item-slot (third b)) "none") (cons (first b) (cons (second b) (cons i (rest (rest (rest b))))))]
 >     [(string=? (item-slot (fourth b)) "none") (cons (first b) (cons (second b) (cons (third b)(cons i (rest (rest (rest (rest b))))))))]
 >     [(string=? (item-slot (fifth b)) "none") (cons (first b)(cons (second b) (cons(third b) (cons(fourth b) (cons i (rest (rest (rest (rest (rest b))))))))))]
 >     [(string=? (item-slot (sixth b)) "none") (cons (first b) (cons(second b) (cons(third b) (cons(fourth b) (cons(fifth b) (cons i (rest (rest (rest (rest (rest (rest b))))))))))))]
 >     [(string=? (item-slot (seventh b)) "none") (cons (first b)(cons (second b) (cons(third b) (cons(fourth b) (cons(fifth b) (cons(sixth b) (cons i (rest (rest (rest (rest (rest (rest (rest b))))))))))))))]
 >     [(string=? (item-slot (eighth b)) "none") (cons (first b)(cons (second b) (cons(third b) (cons(fourth b) (cons(fifth b) (cons(sixth b) (cons(seventh b)(cons i (rest(rest(rest(rest (rest(rest(rest(rest b))))))))))))))))]
 >     [else (cons (first b)(cons (second b)(cons (third b)(cons (fourth b)(cons (fifth b)(cons (sixth b)(cons (seventh b)(cons (eighth b)(cons i empty)))))))))]))
 >
 > (define (fighte bif)
 >   (cond
 >     [(and (cons? (rest (biff-e bif)))(=~ (enemy-x (first (biff-e bif))) 250 20) (=~ (enemy-y (first (biff-e bif))) 250 10)) (ft bif)]
 >     [(empty? (rest(biff-e bif))) (biff-e bif)]
 >     [else (biff-e bif)]))
 >
 > (define (healthbar bif)
 >   (cond
 >     [(>= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 10) 20]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 9) 18]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 8) 16]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 7) 14]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 6) 12]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 5) 10]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 4) 8]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 3) 6]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 2) 4]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 1) 2]
 >     [(= (ceiling (* 10 (/ (pah-health (biff-pa bif)) (healthz bif)))) 0) 0]
 >     [else 0]))
 >
 >
 > (define (damageme bif)
 >   (+ 10 (item-strength (person-head (biff-p bif))) (item-strength (person-body (biff-p bif))) (item-strength (person-shoulders (biff-p bif)))(item-strength (person-hands (biff-p bif))) (item-strength (person-legs (biff-p bif))) (item-strength (person-feet (biff-p bif))) (* (item-strength (person-mhand (biff-p bif))) 3) (* (item-strength (person-ohand (biff-p bif))) 2) (item-strength (person-special (biff-p bif)))))
 >
 >       (define (healthz bif)
 >         (+ 50 (item-health (person-head (biff-p bif))) (item-health (person-body (biff-p bif))) (item-health (person-shoulders (biff-p bif))) (item-health (person-hands (biff-p bif))) (item-health (person-legs(biff-p bif))) (item-health (person-feet (biff-p bif))) (item-health (person-mhand (biff-p bif))) (item-health (person-ohand (biff-p bif))) (item-health (person-special (biff-p bif)))))
 >
 >
 >       (define(ft bif)
 >         (cons (make-enemy (enemy-look(first (biff-e bif))) (- (enemy-health (first (biff-e bif))) (/ (* (random 6) (damageme bif)) 10)) (enemy-x (first (biff-e bif))) (enemy-y (first (biff-e bif))) (enemy-m (first (biff-e bif)))) (rest (biff-e bif))))
 >
 >  (define (bag-scene bif)
 >     (place-image (cond
 >      [(= (tick-hit-t (biff-tick bif)) 1) (text (string-append (item-slot (person-head (biff-p bif))) "   health:" (number->string (item-health(person-head (biff-p bif)))) " speed:" (number->string (item-speed(person-head (biff-p bif)))) " strength:" (number->string (item-strength(person-head (biff-p bif)))) " weight:" (number->string (item-weight(person-head (biff-p bif)))) " energy:" (number->string (item-energy(person-head (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 2) (text (string-append (item-slot (person-body (biff-p bif))) "   health:" (number->string (item-health(person-body (biff-p bif)))) " speed:" (number->string (item-speed(person-body (biff-p bif)))) " strength:" (number->string (item-strength(person-body (biff-p bif)))) " weight:" (number->string (item-weight(person-body (biff-p bif)))) " energy:" (number->string (item-energy(person-body (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 3)  (text (string-append (item-slot (person-shoulders (biff-p bif))) "   health:" (number->string (item-health(person-shoulders (biff-p bif)))) " speed:" (number->string (item-speed(person-shoulders (biff-p bif)))) " strength:" (number->string (item-strength(person-shoulders (biff-p bif)))) " weight:" (number->string (item-weight(person-shoulders (biff-p bif)))) " energy:" (number->string (item-energy(person-shoulders (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 4) (text (string-append (item-slot (person-hands (biff-p bif))) "   health:" (number->string (item-health(person-hands (biff-p bif)))) " speed:" (number->string (item-speed(person-hands (biff-p bif)))) " strength:" (number->string (item-strength(person-hands (biff-p bif)))) " weight:" (number->string (item-weight(person-hands (biff-p bif)))) " energy:" (number->string (item-energy(person-hands (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 5) (text (string-append (item-slot (person-legs (biff-p bif))) "   health:" (number->string (item-health(person-legs (biff-p bif)))) " speed:" (number->string (item-speed(person-legs (biff-p bif)))) " strength:" (number->string (item-strength(person-legs (biff-p bif)))) " weight:" (number->string (item-weight(person-legs (biff-p bif)))) " energy:" (number->string (item-energy(person-legs (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 6) (text (string-append (item-slot (person-feet (biff-p bif))) "   health:" (number->string (item-health(person-feet (biff-p bif)))) " speed:" (number->string (item-speed(person-feet (biff-p bif)))) " strength:" (number->string (item-strength(person-feet (biff-p bif)))) " weight:" (number->string (item-weight(person-feet (biff-p bif)))) " energy:" (number->string (item-energy(person-feet (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 7) (text (string-append (item-slot (person-mhand (biff-p bif))) "   health:" (number->string (item-health(person-mhand (biff-p bif)))) " speed:" (number->string (item-speed(person-mhand (biff-p bif)))) " strength:" (number->string (item-strength(person-mhand (biff-p bif)))) " weight:" (number->string (item-weight(person-mhand (biff-p bif)))) " energy:" (number->string (item-energy(person-mhand (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 8) (text (string-append (item-slot (person-ohand (biff-p bif))) "   health:" (number->string (item-health(person-ohand (biff-p bif)))) " speed:" (number->string (item-speed(person-ohand (biff-p bif)))) " strength:" (number->string (item-strength(person-ohand (biff-p bif)))) " weight:" (number->string (item-weight(person-ohand (biff-p bif)))) " energy:" (number->string (item-energy(person-ohand (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 9) (text (string-append (item-slot (person-special (biff-p bif))) "   health:" (number->string (item-health(person-special (biff-p bif)))) " speed:" (number->string (item-speed(person-special (biff-p bif)))) " strength:" (number->string (item-strength(person-special (biff-p bif)))) " weight:" (number->string (item-weight(person-special (biff-p bif)))) " energy:" (number->string (item-energy(person-special (biff-p bif))))) 9 "black")]
 >      [(= (tick-hit-t (biff-tick bif)) 10) (text (string-append (item-slot (first (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(first (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (first (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (first (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(first (bag-itemlist (biff-bag bif))))) " energy:" (number->string (item-energy (first (bag-itemlist (biff-bag bif)))))) 9 "black")
 >                  ]
 >      [(= (tick-hit-t (biff-tick bif)) 11) (text (string-append (item-slot (second (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(second (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (second (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (second (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(second (bag-itemlist (biff-bag bif))))) " energy:" (number->string (item-energy (second (bag-itemlist (biff-bag bif)))))) 9 "black")
 >                  ]
 >      [(= (tick-hit-t (biff-tick bif)) 12) (text (string-append (item-slot (third (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(third (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (third (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (third (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(third (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (third (bag-itemlist (biff-bag bif)))))) 9 "black")
 >                  ]
 >      [(= (tick-hit-t (biff-tick bif)) 13) (text (string-append (item-slot (fourth (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(fourth (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (fourth (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (fourth (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(fourth (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (fourth (bag-itemlist (biff-bag bif)))))) 9 "black")
 >                  ]
 >      [(= (tick-hit-t (biff-tick bif)) 14) (text (string-append (item-slot (fifth (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(fifth (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (fifth (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (fifth (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(fifth (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (fifth (bag-itemlist (biff-bag bif)))))) 9 "black")
 >                  ]
 >      [(= (tick-hit-t (biff-tick bif)) 15) (text (string-append (item-slot (sixth (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(sixth (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (sixth (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (sixth (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(sixth (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (sixth (bag-itemlist (biff-bag bif)))))) 9 "black")
 >                  ]
 >      [(= (tick-hit-t (biff-tick bif)) 16) (text (string-append (item-slot (seventh (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(seventh (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (seventh (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (seventh (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(seventh (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (seventh (bag-itemlist (biff-bag bif)))))) 9 "black")
 >                  ]
 >      [(= (tick-hit-t (biff-tick bif)) 17) (text (string-append (item-slot (eighth (bag-itemlist (biff-bag bif))))  "   health:" (number->string (item-health(eighth (bag-itemlist (biff-bag bif))))) " speed:" (number->string (item-speed (eighth (bag-itemlist (biff-bag bif))))) " strength:" (number->string (item-strength (eighth (bag-itemlist (biff-bag bif))))) " weight:" (number->string (item-weight(eighth (bag-itemlist (biff-bag bif))))) " energy:" (number->string(item-energy (eighth (bag-itemlist (biff-bag bif)))))) 9 "black")
 >                  ]
 >      [(= (tick-hit-t (biff-tick bif)) 18) (text (string-append (item-slot (first (rest (rest (rest (rest (rest(rest(rest(rest (bag-itemlist (biff-bag bif))))))))))))  "   health:" (number->string (item-health(first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif))))))))))))) " speed:" (number->string (item-speed (first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif))))))))))))) " strength:" (number->string (item-strength (first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif))))))))))))) " weight:" (number->string (item-weight(first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif))))))))))))) " energy:" (number->string(item-energy (first (rest (rest (rest (rest (rest(rest(rest(rest  (bag-itemlist (biff-bag bif)))))))))))))) 9 "black")]
 >
 >     [else (text "item stats" 20 "black")])
 >                  250 250
 >
 >          (place-image (text (string-append "Cash: $"(number->string (bag-money (biff-bag bif)))) 10 "gold")400 320(place-image (text "head:" 10 "darkbrown") 30 160(place-image (text "body:" 10 "darkbrown") 80 160(place-image (text "shoulders:" 10 "darkbrown") 130 160(place-image (text "hands:" 10 "darkbrown") 180 160(place-image (text "legs:" 10 "darkbrown") 230 160(place-image (text "feet:" 10 "darkbrown") 280 160(place-image (text "weapon:" 10 "darkbrown") 330 160(place-image (text "weapon2:" 10 "darkbrown") 380 160(place-image (text "special:" 10 "darkbrown") 430 160(place-image (text "Equipment:" 60 "black") 200 60 (place-image (square 40 "solid" "gray") 180 200 (place-image (square 40 "solid" "gray") 230 200 (place-image (square 40 "solid" "gray") 280 200 (place-image (square 40 "solid" "gray") 330 200 (place-image (square 40 "solid" "gray") 380 200 (place-image (square 40 "solid" "gray") 430 200 (place-image (square 40 "solid" "gray") 130 200 (place-image (square 40 "s!
 >  olid" "gray") 80 200 (place-image (square 40 "solid" "gray") 30 200(place-image (text "Bag:" 60 "black") 100 370(place-image (square 40 "solid" "gray") 30 450 (place-image (square 40 "solid" "gray") 80 450 (place-image (square 40 "solid" "gray") 130 450 (place-image (square 40 "solid" "gray") 180 450 (place-image (square 40 "solid" "gray") 230 450 (place-image (square 40 "solid" "gray") 280 450 (place-image (square 40 "solid" "gray") 330 450 (place-image (square 40 "solid" "gray") 380 450 (place-image (square 40 "solid" "gray") 430 450  (place-image (square 44 "solid" "red") 30 450 (place-image (square 500 "solid" "brown") 250 250 (empty-scene 500 500)))))))))))))))))))))))))))))))))))
 >
 >  (define (mouz bif x y click)
 >      (cond
 >        [(> (tick-food-t (biff-tick bif)) 0)(cond [(and (> (tick-hit-t (biff-tick bif)) 9) (string=? click "button-down")) (cond
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 10) (false? (string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "none"))) (equip1 bif) ]
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 11) (false? (string=? (item-slot (second (bag-itemlist (biff-bag bif)))) "none"))) (equip2 bif) ]
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 12) (false? (string=? (item-slot (third (bag-itemlist (biff-bag bif)))) "none"))) (equip3 bif) ]
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 13) (false? (string=? (item-slot (fourth (bag-itemlist (biff-bag bif)))) "none"))) (equip4 bif) ]
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 14) (false? (string=? (item-slot (fifth (bag-itemlist (biff-bag bif)))) "none"))) (equip5 bif) ]
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 15) (false? (string=? (item-slot (sixth (bag-itemlist (biff-bag bif)))) "none"))) (equip6 bif) ]
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 16) (false? (string=? (item-slot (seventh (bag-itemlist (biff-bag bif)))) "none"))) (equip7 bif) ]
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 17) (false? (string=? (item-slot (eighth (bag-itemlist (biff-bag bif)))) "none"))) (equip8 bif) ]
 >                                                                                 [(and (=(tick-hit-t(biff-tick bif)) 18) (false? (string=? (item-slot (first(rest(rest(rest(rest(rest(rest(rest(rest (bag-itemlist (biff-bag bif)))))))))))) "none"))) (equip9 bif) ]
 >                                                                                 [else bif])
 >                                                                                 ]
 >      [(and (=~ x 30 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 1))]
 >      [(and (=~ x 80 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 2))]
 >      [(and (=~ x 130 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 3))]
 >      [(and (=~ x 180 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 4))]
 >      [(and (=~ x 230 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 5))]
 >      [(and (=~ x 280 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 6))]
 >      [(and (=~ x 330 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 7))]
 >      [(and (=~ x 380 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 8))]
 >      [(and (=~ x 430 20) (=~ y 200 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 9))]
 >      [(and (=~ x 30 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 10))]
 >      [(and (=~ x 80 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 11))]
 >      [(and (=~ x 130 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 12))]
 >      [(and (=~ x 180 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 13))]
 >      [(and (=~ x 230 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 14))]
 >      [(and (=~ x 280 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 15))]
 >      [(and (=~ x 330 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 16))]
 >      [(and (=~ x 380 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 17))]
 >      [(and (=~ x 430 20) (=~ y 450 20)) (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 18))]
 >
 >      [else (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (make-tick (tick-food-t (biff-tick bif)) (tick-jump-t (biff-tick bif)) 0))])]
 >        [(false? (string=? (person-head (pah-person(biff-pa bif)))"none")) (cond
 >                                                                       [(and (=~ x 40 20) (=~ y 15 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "head" "none" "none" "none" "none" "none" "none" "none" "none")) (biff-pd bif)(biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (=~ x 40 20) (=~ y 30 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "body" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (=~ x 40 20) (=~ y 45 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "shoulders" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (=~ x 40 20) (=~ y 60 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "hands" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (=~ x 40 20) (=~ y 75 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "legs" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (=~ x 40 20) (=~ y 90 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "feet" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (=~ x 40 20) (=~ y 105 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "weapon1" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (=~ x 40 20) (=~ y 120 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "weapon2" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (=~ x 40 20) (=~ y 135 7)(string=? click "button-down")) (make-biff (biff-p bif) (make-pah (pah-health (biff-pa bif)) (make-person "special" "none" "none" "none" "none" "none" "none" "none" "none"))(biff-pd bif) (biff-b bif) (biff-e bif) (biff-bag bif) (biff-tick bif))]
 >                                                                       [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 50 15) (=~ y 400 15) (string=? click "button-down"))(cond
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (+(item-health (person-head (biff-p bif)))1) (item-speed (person-head (biff-p bif))) (item-strength (person-head (biff-p bif))) (item-weight (person-head (biff-p bif))) (item-energy(person-head (biff-p bif)))) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (+(item-health (person-body (biff-p bif)))1) (item-speed (person-body (biff-p bif))) (item-strength (person-body (biff-p bif))) (item-weight (person-body (biff-p bif))) (item-energy(person-body (biff-p bif)))) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (+(item-health (person-shoulders (biff-p bif)))1) (item-speed (person-shoulders (biff-p bif))) (item-strength (person-shoulders (biff-p bif))) (item-weight (person-shoulders (biff-p bif))) (item-energy(person-shoulders (biff-p bif)))) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (+(item-health (person-hands (biff-p bif)))1) (item-speed (person-hands (biff-p bif))) (item-strength (person-hands (biff-p bif))) (item-weight (person-hands (biff-p bif))) (item-energy(person-hands (biff-p bif)))) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (+(item-health (person-legs (biff-p bif)))1) (item-speed (person-legs (biff-p bif))) (item-strength (person-legs (biff-p bif))) (item-weight (person-legs (biff-p bif))) (item-energy(person-legs (biff-p bif))))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (+(item-health (person-feet (biff-p bif)))1) (item-speed (person-feet (biff-p bif))) (item-strength (person-feet (biff-p bif))) (item-weight (person-feet (biff-p bif))) (item-energy(person-feet (biff-p bif)))) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (+(item-health (person-mhand (biff-p bif)))1) (item-speed (person-mhand (biff-p bif))) (item-strength (person-mhand (biff-p bif))) (item-weight (person-mhand (biff-p bif))) (item-energy(person-mhand (biff-p bif)))) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (+(item-health (person-ohand (biff-p bif)))1) (item-speed (person-ohand (biff-p bif))) (item-strength (person-ohand (biff-p bif))) (item-weight (person-ohand (biff-p bif))) (item-energy(person-ohand (biff-p bif)))) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (+(item-health (person-special (biff-p bif)))1) (item-speed (person-special (biff-p bif))) (item-strength (person-special (biff-p bif))) (item-weight (person-special (biff-p bif))) (item-energy(person-special (biff-p bif))))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [else bif])]
 >
 >                                                                       [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 150 15) (=~ y 400 15) (string=? click "button-down"))(cond
 >                                                                                                                                                                             [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (item-health (person-head (biff-p bif))) (+(item-speed (person-head (biff-p bif)))1) (item-strength (person-head (biff-p bif))) (item-weight (person-head (biff-p bif))) (item-energy(person-head (biff-p bif)))) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (item-health (person-body (biff-p bif))) (+(item-speed (person-body (biff-p bif)))1) (item-strength (person-body (biff-p bif))) (item-weight (person-body (biff-p bif))) (item-energy(person-body (biff-p bif)))) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (item-health (person-shoulders (biff-p bif))) (+(item-speed (person-shoulders (biff-p bif)))1) (item-strength (person-shoulders (biff-p bif))) (item-weight (person-shoulders (biff-p bif))) (item-energy(person-shoulders (biff-p bif)))) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (item-health (person-hands (biff-p bif)))(+ (item-speed (person-hands (biff-p bif)))1) (item-strength (person-hands (biff-p bif))) (item-weight (person-hands (biff-p bif))) (item-energy(person-hands (biff-p bif)))) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (item-health (person-legs (biff-p bif))) (+(item-speed (person-legs (biff-p bif)))1) (item-strength (person-legs (biff-p bif))) (item-weight (person-legs (biff-p bif))) (item-energy(person-legs (biff-p bif))))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (item-health (person-feet (biff-p bif))) (+(item-speed (person-feet (biff-p bif)))1) (item-strength (person-feet (biff-p bif))) (item-weight (person-feet (biff-p bif))) (item-energy(person-feet (biff-p bif)))) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (item-health (person-mhand (biff-p bif))) (+(item-speed (person-mhand (biff-p bif)))1) (item-strength (person-mhand (biff-p bif))) (item-weight (person-mhand (biff-p bif))) (item-energy(person-mhand (biff-p bif)))) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (item-health (person-ohand (biff-p bif))) (+(item-speed (person-ohand (biff-p bif)))1) (item-strength (person-ohand (biff-p bif))) (item-weight (person-ohand (biff-p bif))) (item-energy(person-ohand (biff-p bif)))) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (item-health (person-special (biff-p bif))) (+(item-speed (person-special (biff-p bif)))1) (item-strength (person-special (biff-p bif))) (item-weight (person-special (biff-p bif))) (item-energy(person-special (biff-p bif))))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [else bif])]
 >                                                                       [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 250 15) (=~ y 400 15) (string=? click "button-down"))(cond
 >                                                                                                                                                                             [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (item-health (person-head (biff-p bif))) (item-speed (person-head (biff-p bif))) (+(item-strength (person-head (biff-p bif)))1) (item-weight (person-head (biff-p bif))) (item-energy(person-head (biff-p bif)))) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (item-health (person-body (biff-p bif))) (item-speed (person-body (biff-p bif))) (+(item-strength (person-body (biff-p bif)))1) (item-weight (person-body (biff-p bif))) (item-energy(person-body (biff-p bif)))) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (item-health (person-shoulders (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (+(item-strength (person-shoulders (biff-p bif)))1) (item-weight (person-shoulders (biff-p bif))) (item-energy(person-shoulders (biff-p bif)))) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (item-health (person-hands (biff-p bif)))(item-speed (person-hands (biff-p bif))) (+(item-strength (person-hands (biff-p bif)))1) (item-weight (person-hands (biff-p bif))) (item-energy(person-hands (biff-p bif)))) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (item-health (person-legs (biff-p bif))) (item-speed (person-legs (biff-p bif))) (+(item-strength (person-legs (biff-p bif)))1) (item-weight (person-legs (biff-p bif))) (item-energy(person-legs (biff-p bif))))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (item-health (person-feet (biff-p bif))) (item-speed (person-feet (biff-p bif))) (+(item-strength (person-feet (biff-p bif)))1) (item-weight (person-feet (biff-p bif))) (item-energy(person-feet (biff-p bif)))) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (item-health (person-mhand (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (+(item-strength (person-mhand (biff-p bif)))1) (item-weight (person-mhand (biff-p bif))) (item-energy(person-mhand (biff-p bif)))) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (item-health (person-ohand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (+(item-strength (person-ohand (biff-p bif)))1) (item-weight (person-ohand (biff-p bif))) (item-energy(person-ohand (biff-p bif)))) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (item-health (person-special (biff-p bif))) (item-speed (person-special (biff-p bif))) (+(item-strength (person-special (biff-p bif)))1) (item-weight (person-special (biff-p bif))) (item-energy(person-special (biff-p bif))))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [else bif])]
 >
 >                                                                       [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 350 15) (=~ y 400 15) (string=? click "button-down"))(cond
 >                                                                                                                                                                             [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (item-health (person-head (biff-p bif))) (item-speed (person-head (biff-p bif))) (item-strength (person-head (biff-p bif))) (+(item-weight (person-head (biff-p bif)))1) (item-energy(person-head (biff-p bif)))) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (item-health (person-body (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-strength (person-body (biff-p bif))) (+(item-weight (person-body (biff-p bif)))1) (item-energy(person-body (biff-p bif)))) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (item-health (person-shoulders (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-strength (person-shoulders (biff-p bif))) (+(item-weight (person-shoulders (biff-p bif)))1) (item-energy(person-shoulders (biff-p bif)))) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (item-health (person-hands (biff-p bif)))(item-speed (person-hands (biff-p bif))) (item-strength (person-hands (biff-p bif))) (+(item-weight (person-hands (biff-p bif)))1) (item-energy(person-hands (biff-p bif)))) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (item-health (person-legs (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-strength (person-legs (biff-p bif))) (+(item-weight (person-legs (biff-p bif)))1) (item-energy(person-legs (biff-p bif))))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (item-health (person-feet (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-strength (person-feet (biff-p bif))) (+(item-weight (person-feet (biff-p bif)))1) (item-energy(person-feet (biff-p bif)))) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (item-health (person-mhand (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-strength (person-mhand (biff-p bif))) (+(item-weight (person-mhand (biff-p bif)))1) (item-energy(person-mhand (biff-p bif)))) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (item-health (person-ohand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-strength (person-ohand (biff-p bif))) (+(item-weight (person-ohand (biff-p bif)))1) (item-energy(person-ohand (biff-p bif)))) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (item-health (person-special (biff-p bif))) (item-speed (person-special (biff-p bif))) (item-strength (person-special (biff-p bif))) (+(item-weight (person-special (biff-p bif)))1) (item-energy(person-special (biff-p bif))))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [else bif])]
 >
 >                                                                       [(and (>= (bag-money (biff-bag bif)) 50) (=~ x 450 15) (=~ y 400 15) (string=? click "button-down"))(cond
 >                                                                                                                                                                             [(string=? (person-head (pah-person (biff-pa bif))) "head") (make-biff (make-person (make-item "head" (item-health (person-head (biff-p bif))) (item-speed (person-head (biff-p bif))) (item-strength (person-head (biff-p bif))) (item-weight (person-head (biff-p bif))) (+(item-energy(person-head (biff-p bif)))1)) (person-body (biff-p bif))(person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "body") (make-biff (make-person (person-body (biff-p bif))(make-item "body" (item-health (person-body (biff-p bif))) (item-speed (person-body (biff-p bif))) (item-strength (person-body (biff-p bif))) (item-weight (person-body (biff-p bif))) (+(item-energy(person-body (biff-p bif)))1)) (person-shoulders (biff-p bif))(person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(make-item "shoulders" (item-health (person-shoulders (biff-p bif))) (item-speed (person-shoulders (biff-p bif))) (item-strength (person-shoulders (biff-p bif))) (item-weight (person-shoulders (biff-p bif))) (+(item-energy(person-shoulders (biff-p bif)))1)) (person-hands (biff-p bif)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "hands") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(make-item "hands" (item-health (person-hands (biff-p bif)))(item-speed (person-hands (biff-p bif))) (item-strength (person-hands (biff-p bif))) (item-weight (person-hands (biff-p bif))) (+(item-energy(person-hands (biff-p bif)))1)) (person-legs (biff-p bif)) (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "legs") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(make-item "legs" (item-health (person-legs (biff-p bif))) (item-speed (person-legs (biff-p bif))) (item-strength (person-legs (biff-p bif))) (item-weight (person-legs (biff-p bif))) (+(item-energy(person-legs (biff-p bif)))1))  (person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "feet") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(make-item "feet" (item-health (person-feet (biff-p bif))) (item-speed (person-feet (biff-p bif))) (item-strength (person-feet (biff-p bif))) (item-weight (person-feet (biff-p bif))) (+(item-energy(person-feet (biff-p bif)))1)) (person-mhand (biff-p bif))(person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon1") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(make-item "mhand" (item-health (person-mhand (biff-p bif))) (item-speed (person-mhand (biff-p bif))) (item-strength (person-mhand (biff-p bif))) (item-weight (person-mhand (biff-p bif))) (+(item-energy(person-mhand (biff-p bif)))1)) (person-ohand (biff-p bif))(person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "weapon2") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(make-item "ohand" (item-health (person-ohand (biff-p bif))) (item-speed (person-ohand (biff-p bif))) (item-strength (person-ohand (biff-p bif))) (item-weight (person-ohand (biff-p bif))) (+(item-energy(person-ohand (biff-p bif)))1)) (person-special (biff-p bif))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "special") (make-biff (make-person (person-head (biff-p bif))(person-body (biff-p bif))(person-shoulders(biff-p bif))(person-hands(biff-p bif))(person-legs (biff-p bif))(person-feet (biff-p bif))(person-mhand (biff-p bif))(person-ohand(biff-p bif))(make-item "special" (item-health (person-special (biff-p bif))) (item-speed (person-special (biff-p bif))) (item-strength (person-special (biff-p bif))) (item-weight (person-special (biff-p bif))) (+(item-energy(person-special (biff-p bif)))1))) (biff-pa bif)(biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (- (bag-money(biff-bag bif)) 50) (bag-itemlist (biff-bag bif))) (biff-tick bif))]
 >                                                                                                                                                                            [else bif])]
 >
 >                                                                       [else bif])]
 >        [else bif]))
 >
 >
 >
 >  (define (superdead e)
 >    (cond
 >      [(< (enemy-health (first e)) .1) (rest e)]
 >      [else e]))
 >
 >  (define (equip1 bif)
 >    (cond
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "head") (make-biff (make-person (first (bag-itemlist (biff-bag bif))) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "body") (make-biff (make-person (person-head (biff-p bif)) (first (bag-itemlist (biff-bag bif))) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "shoulders") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (first (bag-itemlist (biff-bag bif)))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "hands") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "legs") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "feet") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "mhand") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-ohand(biff-p bif))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "ohand") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(first (bag-itemlist (biff-bag bif)))(person-special (biff-p bif))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [(string=? (item-slot (first (bag-itemlist (biff-bag bif)))) "special") (make-biff (make-person (person-head (biff-p bif)) (person-body (biff-p bif)) (person-shoulders (biff-p bif))(person-hands (biff-p bif))(person-legs (biff-p bif))(person-feet(biff-p bif))(person-mhand(biff-p bif))(person-ohand(biff-p bif))(first (bag-itemlist (biff-bag bif)))) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif)) (cons (make-item "none" 0 0 0 0 0) (rest (bag-itemlist (biff-bag bif))))) (biff-tick bif))]
 >      [else bif]))
 >
 >
 >  (define (enemydamage bif)
 >    (cond
 >      [(=~ (enemy-x (first (biff-e bif))) 250 10)
 >    (make-biff (biff-p bif) (make-pah (- (pah-health (biff-pa bif)) (cond
 >                                                                      [(image=? (enemy-look (first (biff-e bif))) bat) (/ (random 3)4)]
 >                                                                      [(image=? (enemy-look (first (biff-e bif))) bat1) (/ (/ (random 3) 4)(armor-help bif))]
 >                                                                      [(image=? (enemy-look (first (biff-e bif))) bat2) (/(/ (random 4) 4)(armor-help bif))]
 >                                                                      [(image=? (enemy-look (first (biff-e bif))) falcon) (/(/ (random 5) 3)(armor-help bif))]
 >                                                                      [(image=? (enemy-look (first (biff-e bif))) ghost) (/(/ (random 8) 4)(armor-help bif))]
 >                                                                      [(image=? (enemy-look (first (biff-e bif))) blooper) (/(/ (random 5) 3)(armor-help bif))]
 >                                                                      [(image=? (enemy-look (first (biff-e bif))) balloon) (/(/ (random 3) 3)(armor-help bif))]
 >                                                                      [(image=? (enemy-look (first (biff-e bif))) koopa) (/(/ (random 13) 3)(armor-help bif))]
 >                                                                      [else 3])) (pah-person(biff-pa bif))) (biff-pd bif)(biff-b bif)(biff-e bif)(biff-bag bif) (biff-tick bif))]
 >      [else bif]))
 >
 >  (define (equip2 bif)
 >    (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list
 >                                                                                             (second (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (bag-itemlist (biff-bag bif)))
 >                                                                                             (third (bag-itemlist (biff-bag bif)))
 >                                                                                             (fourth (bag-itemlist (biff-bag bif)))
 >                                                                                             (fifth (bag-itemlist (biff-bag bif)))
 >                                                                                             (sixth (bag-itemlist (biff-bag bif)))
 >                                                                                             (seventh (bag-itemlist (biff-bag bif)))
 >                                                                                             (eighth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 >  (define (equip3 bif)
 >    (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list
 >                                                                                             (third (bag-itemlist (biff-bag bif)))
 >                                                                                             (second (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (bag-itemlist (biff-bag bif)))
 >                                                                                             (fourth (bag-itemlist (biff-bag bif)))
 >                                                                                             (fifth (bag-itemlist (biff-bag bif)))
 >                                                                                             (sixth (bag-itemlist (biff-bag bif)))
 >                                                                                             (seventh (bag-itemlist (biff-bag bif)))
 >                                                                                             (eighth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 >  (define (equip4 bif)
 >    (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list
 >                                                                                             (fourth (bag-itemlist (biff-bag bif)))
 >                                                                                             (second (bag-itemlist (biff-bag bif)))
 >                                                                                             (third (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (bag-itemlist (biff-bag bif)))
 >                                                                                             (fifth (bag-itemlist (biff-bag bif)))
 >                                                                                             (sixth (bag-itemlist (biff-bag bif)))
 >                                                                                             (seventh (bag-itemlist (biff-bag bif)))
 >                                                                                             (eighth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 >  (define (equip5 bif)
 >    (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list
 >                                                                                             (fifth (bag-itemlist (biff-bag bif)))
 >                                                                                             (second (bag-itemlist (biff-bag bif)))
 >                                                                                             (third (bag-itemlist (biff-bag bif)))
 >                                                                                             (fourth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (bag-itemlist (biff-bag bif)))
 >                                                                                             (sixth (bag-itemlist (biff-bag bif)))
 >                                                                                             (seventh (bag-itemlist (biff-bag bif)))
 >                                                                                             (eighth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 >  (define (equip6 bif)
 >    (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list
 >                                                                                             (sixth (bag-itemlist (biff-bag bif)))
 >                                                                                             (second (bag-itemlist (biff-bag bif)))
 >                                                                                             (third (bag-itemlist (biff-bag bif)))
 >                                                                                             (fourth (bag-itemlist (biff-bag bif)))
 >                                                                                             (fifth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (bag-itemlist (biff-bag bif)))
 >                                                                                             (seventh (bag-itemlist (biff-bag bif)))
 >                                                                                             (eighth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 >  (define (equip7 bif)
 >    (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list
 >                                                                                             (seventh (bag-itemlist (biff-bag bif)))
 >                                                                                             (second (bag-itemlist (biff-bag bif)))
 >                                                                                             (third (bag-itemlist (biff-bag bif)))
 >                                                                                             (fourth (bag-itemlist (biff-bag bif)))
 >                                                                                             (fifth (bag-itemlist (biff-bag bif)))
 >                                                                                             (sixth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (bag-itemlist (biff-bag bif)))
 >                                                                                             (eighth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 >  (define (equip8 bif)
 >    (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list
 >                                                                                             (eighth (bag-itemlist (biff-bag bif)))
 >                                                                                             (second (bag-itemlist (biff-bag bif)))
 >                                                                                             (third (bag-itemlist (biff-bag bif)))
 >                                                                                             (fourth (bag-itemlist (biff-bag bif)))
 >                                                                                             (fifth (bag-itemlist (biff-bag bif)))
 >                                                                                             (sixth (bag-itemlist (biff-bag bif)))
 >                                                                                             (seventh (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif))))))))))))) (biff-tick bif)))
 >  (define (equip9 bif)
 >    (make-biff (biff-p bif) (biff-pa bif) (biff-pd bif) (biff-b bif) (biff-e bif) (make-bag (bag-money (biff-bag bif))(list
 >                                                                                             (first (rest (rest(rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))
 >                                                                                             (second (bag-itemlist (biff-bag bif)))
 >                                                                                             (third (bag-itemlist (biff-bag bif)))
 >                                                                                             (fourth (bag-itemlist (biff-bag bif)))
 >                                                                                             (fifth (bag-itemlist (biff-bag bif)))
 >                                                                                             (sixth (bag-itemlist (biff-bag bif)))
 >                                                                                             (seventh (bag-itemlist (biff-bag bif)))
 >                                                                                             (eighth (bag-itemlist (biff-bag bif)))
 >                                                                                             (first (bag-itemlist (biff-bag bif))))) (biff-tick bif)))
 >
 >  (define (price-of-item item)
 >    (* (+ (item-health item) (item-speed item) (item-strength item) (item-weight item) (item-energy item))2))
 >
 >  (define (shopscene bif)
 >    (place-image (text "+health" 18 "crimson") 50 400 (place-image (text "+speed" 18 "lime") 150 400 (place-image (text "+strength" 18 "brown") 250 400(place-image (text "+weight" 18 "darkgray") 350 400(place-image (text "+energy" 18 "orange") 450 400(place-image (text (string-append "Cash: $"(number->string (bag-money (biff-bag bif)))) 20 "gold") 400 150(place-image (text "cost= $50" 33 "gold") 250 250(place-image (text "changing:" 15 "green") 400 40(place-image (text (person-head (pah-person (biff-pa bif))) 20 "limegreen") 400 70(place-image (text "head" 10 "red") 40 15(place-image (text "body" 10 "red") 40 30(place-image (text "shoulders" 10 "red") 40 45(place-image (text "hands" 10 "red") 40 60(place-image (text "legs" 10 "red") 40 75(place-image (text "feet" 10 "red") 40 90(place-image (text "weapon1" 10 "red") 40 105(place-image (text "weapon2" 10 "red") 40 120(place-image (text "special" 10 "red") 40 135 (place-image (rectangle 60 15 "solid" "black") 40 (cond
string=? (person-head (pah-person (biff-pa bif))) "head") 15]
string=? (person-head (pah-person (biff-pa bif))) "body") 30]
 >                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "shoulders") 45]
string=? (person-head (pah-person (biff-pa bif))) "hands") 60]
string=? (person-head (pah-person (biff-pa bif))) "legs") 75]
string=? (person-head (pah-person (biff-pa bif))) "feet") 90]
string=? (person-head (pah-person (biff-pa bif))) "weapon1") 105]
string=? (person-head (pah-person (biff-pa bif))) "weapon2") 120]
 >                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            [(string=? (person-head (pah-person (biff-pa bif))) "special") 135]
else -200])
 >
 >
place-image (square 1000 "solid" "gray") 0 0(empty-scene 500 500))))))))))))))))))))))
 >
 >  (define (armor-help bif)
 >   (/ (+ 90 (item-weight (person-head (biff-p bif))) (* (item-weight (person-body (biff-p bif)))1.3) (item-weight (person-shoulders (biff-p bif)))(item-weight (person-hands (biff-p bif))) (item-weight (person-legs (biff-p bif))) (item-weight (person-feet (biff-p bif))) (* (item-weight (person-mhand (biff-p bif))).5)  (* (item-weight (person-ohand (biff-p bif))) 1.2) (* (item-weight (person-special (biff-p bif))).7)) 100))
 >
 >  (define (energy-regen bif)
 >    (/(+ 200(*(item-energy (person-head (biff-p bif)))1.3) (item-energy (person-body (biff-p bif))) (*(item-energy (person-shoulders (biff-p bif)))1.2)(item-energy (person-hands (biff-p bif))) (item-energy (person-legs (biff-p bif))) (item-energy (person-feet (biff-p bif))) (item-energy (person-mhand (biff-p bif)))  (item-energy (person-ohand (biff-p bif)))  (item-energy (person-special (biff-p bif))))400))
 >
 >  (define (regen? bif)
 >    (cond
 >      [(< (person-special (pah-person (biff-pa bif))) 80) (+ (person-special (pah-person (biff-pa bif))) (energy-regen bif))]
 >      [else (person-special (pah-person (biff-pa bif)))]))
 >
 >  (define (MEGAHIT bif)
 >    (* (+ 10 (item-strength (person-head (biff-p bif))) (item-strength (person-body (biff-p bif))) (item-strength (person-shoulders (biff-p bif)))(item-strength (person-hands (biff-p bif))) (item-strength (person-legs (biff-p bif))) (item-strength (person-feet (biff-p bif))) (* (item-strength (person-mhand (biff-p bif))) 3) (* (item-strength (person-ohand (biff-p bif))) 2) (item-strength (person-special (biff-p bif)))) (+ (random 3) 1)))
 >
 >
 >  (define (energybar bif)
 >    (* (person-special (pah-person (biff-pa bif))) .75))
 >
 >  (define ian (make-biff
 >  (make-person
 >   (make-item "head" 6 3 7 10 6)
 >   (make-item "body" 18 0 1 0 1)
 >   (make-item "shoulders" 3 0 4 0 4)
 >   (make-item "hands" 5 0 10 4 7)
 >   (make-item "legs" 9 0 7 7 4)
 >   (make-item "feet" 5 2 6 0 1)
 >   (make-item "mhand" 9 3 25 0 0)
 >   (make-item "ohand" 6 10 10 1 6)
 >   (make-item "special" 10 6 1 0 2))
 >  (make-pah 121 (make-person "weapon1" "none" "none" "none" "none" "none" "none" "none" "none"))
 >  "right"
 >  (make-background 250 250 "main")
 >  (cons (make-enemy . 1 1000000000 1000000000 1000) empty)
 >  (make-bag
 >   9
 >   (cons
 >    (make-item "none" 0 0 0 0 0)
 >    (cons
 >     (make-item "none" 0 0 0 0 0)
 >     (cons
 >      (make-item "none" 0 0 0 0 0)
 >      (cons
 >       (make-item "none" 0 0 0 0 0)
 >       (cons
 >        (make-item "none" 0 0 0 0 0)
 >        (cons
 >         (make-item "none" 0 0 0 0 0)
 >         (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) empty))))))))))
 >  (make-tick 0 0 0)))
 >
 >  (define carson (make-biff
 >  (make-person
 >   (make-item "head" 2 2 3 2 0)
 >   (make-item "body" 0 1 0 0 0)
 >   (make-item "shoulders" 0 1 0 0 0)
 >   (make-item "hands" 0 1 0 0 0)
 >   (make-item "legs" 0 1 0 0 0)
 >   (make-item "feet" 0 1 0 0 0)
 >   (make-item "mhand" 0 3 1 0 1)
 >   (make-item "ohand" 0 1 0 0 0)
 >   (make-item "special" 0 1 0 0 0))
 >  (make-pah 52.06 (make-person "none" "none" "none" "none" "none" "none" "sword" "none" "none"))
 >  "righti"
 >  (make-background 274 15 "1b")
 >  (cons (make-enemy . 1500 674 200 1500) (cons (make-enemy . 2000 1274 200 2000) (cons (make-enemy . 1 99999274 100000000 1000) empty)))
 >  (make-bag
 >   75
 >   (cons
 >    (make-item "none" 0 0 0 0 0)
 >    (cons
 >     (make-item "none" 0 0 0 0 0)
 >     (cons
 >      (make-item "none" 0 0 0 0 0)
 >      (cons
 >       (make-item "none" 0 0 0 0 0)
 >       (cons
 >        (make-item "none" 0 0 0 0 0)
 >        (cons
 >         (make-item "none" 0 0 0 0 0)
 >         (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) empty))))))))))
 >  (make-tick 0 0 0)))
 >
 >  (define alix (make-biff
 >  (make-person
 >   (make-item "head" 0 1 0 0 0)
 >   (make-item "body" 0 1 0 0 0)
 >   (make-item "shoulders" 0 1 0 0 0)
 >   (make-item "hands" 1 0 2 2 0)
 >   (make-item "legs" 3 0 1 2 0)
 >   (make-item "feet" 0 1 0 0 0)
 >   (make-item "mhand" 2 0 4 1 0)
 >   (make-item "ohand" 0 1 0 0 0)
 >   (make-item "special" 0 1 0 0 0))
 >  (make-pah 56 (make-person "none" "none" "none" "none" "none" "none" "none" "none" "none"))
 >  "right"
 >  (make-background 250 250 "main")
 >  (cons (make-enemy . 1 1000000000 1000000000 1000) empty)
 >  (make-bag
 >   49
 >   (cons
 >    (make-item "none" 0 0 0 0 0)
 >    (cons
 >     (make-item "none" 0 0 0 0 0)
 >     (cons
 >      (make-item "none" 0 0 0 0 0)
 >      (cons
 >       (make-item "none" 0 0 0 0 0)
 >       (cons
 >        (make-item "none" 0 0 0 0 0)
 >        (cons
 >         (make-item "none" 0 0 0 0 0)
 >         (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) (cons (make-item "none" 0 0 0 0 0) empty))))))))))
 >  (make-tick 0 0 0)))
 >
 >  (define (listofstrings-biff lis)
 >    (make-biff (make-person (make-item "head" (string->number(first lis)) (string->number(first (rest lis))) (string->number(first (rest (rest lis)))) (string->number(first (rest(rest(rest lis))))) (string->number(first (rest(rest(rest(rest lis))))))) (make-item "body" (string->number(first (rest(rest(rest(rest(rest lis))))))) (string->number(first (rest(rest(rest(rest(rest(rest lis))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest lis))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))) (make-item "shoulders"(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(r!
 >  est(rest(rest(rest(rest(rest lis))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))) (make-item "hands" (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))) (make-item "legs" (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))!
 >  ))))))))))))))) (string->number(first (rest(rest(rest(rest(res!
 >  t(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))) (string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))(make-item "feet" (string->number(first (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))(string->number(first (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))!
 >  )))) (string->number(first (rest(rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))(string->number(first (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))(string->number(first (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))
 >                         (make-item "mhand" (string->number(first (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))
 >                                    (string->number(first (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))
 >                                    (string->number(first (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))
 >                         (make-item "ohand" (string->number(first (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(!
 >  rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))
 >                         (make-item "special" (string->number(first (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest!
 >   (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))
 >            (make-pah (string->number(first (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))(make-person (first (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(res!
 >  t(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(re!
 >  st(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (!
 >  rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))(first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))) (first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(re!
 >  st(rest(rest(rest (rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"right" (make-background 250 250 "main")(list (make-enemy pu 1 1000000000 1000000000 movement1))(make-bag (string->number (first (rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(list (make-item (first (rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest !
 >  (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(!
 >  rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(r!
 >  est(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest!
 >   (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest!
 >  (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->numbe!
 >  r (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(!
 >  rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(res!
 >  t (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(!
 >  rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 >  st(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))!
 >  ))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))!
 >  ))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(s!
 >  tring->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(!
 >  rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(re!
 >  st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest(rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->numb!
 >  er(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(r!
 >  est(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest(rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first !
 >  (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))!
 >  ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(st!
 >  ring->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest!
 >  (rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (res!
 >  t (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 >  st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (r!
 >  est (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(r!
 >  est(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 >  st(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))!
 >  )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest !
 >  (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(r!
 >  est(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(r!
 >  est(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest li!
 >  s))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))!
 >  )))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(!
 >  rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(r!
 >  est(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 >  st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(res!
 >  t(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 >  st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(res!
 >  t(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(make-item (first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(!
 >  rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(r!
 >  est(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(r!
 >  est(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest (rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(res!
 >  t(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest(rest(rest (rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(string->number(first (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(re!
 >  st(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(res!
 >  t(rest(rest(rest (rest(rest(rest(rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest(rest (rest (rest (rest(rest (rest(rest(rest(rest(rest (rest(rest(rest (rest(rest(rest(rest(rest (rest (rest(rest(rest (rest (rest (rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest(rest lis))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (make-tick 0 0 0))
 >


 >                                                                !
 >


 >                                                                !
 >                                                                                                                                                                                                                                                    )
 >
 >
 >  (define (biff-string bif)
 >    (string-append
 > (number->string (item-health (person-head (biff-p bif))))
 > " "
 > (number->string (item-speed (person-head (biff-p bif))))
 > " "
 > (number->string (item-strength (person-head (biff-p bif))))
 > " "
 > (number->string (item-weight (person-head (biff-p bif))))
 > " "
 > (number->string (item-energy (person-head (biff-p bif))))
 > " "
 > (number->string (item-health (person-body (biff-p bif))))
 > " "
 > (number->string (item-speed (person-body (biff-p bif))))
 > " "
 > (number->string (item-strength (person-body (biff-p bif))))
 > " "
 > (number->string (item-weight (person-body (biff-p bif))))
 > " "
 > (number->string (item-energy (person-body (biff-p bif))))
 > " "
 > (number->string (item-health (person-shoulders (biff-p bif))))
 > " "
 > (number->string (item-speed (person-shoulders (biff-p bif))))
 > " "
 > (number->string (item-strength (person-shoulders (biff-p bif))))
 > " "
 > (number->string (item-weight (person-shoulders (biff-p bif))))
 > " "
 > (number->string (item-energy (person-shoulders (biff-p bif))))
 > " "
 > (number->string (item-health (person-hands (biff-p bif))))
 > " "
 > (number->string (item-speed (person-hands (biff-p bif))))
 > " "
 > (number->string (item-strength (person-hands (biff-p bif))))
 > " "
 > (number->string (item-weight (person-hands (biff-p bif))))
 > " "
 > (number->string (item-energy (person-hands (biff-p bif))))
 > " "
 > (number->string (item-health (person-legs (biff-p bif))))
 > " "
 > (number->string (item-speed (person-legs (biff-p bif))))
 > " "
 > (number->string (item-strength (person-legs (biff-p bif))))
 > " "
 > (number->string (item-weight (person-legs (biff-p bif))))
 > " "
 > (number->string (item-energy (person-legs (biff-p bif))))
 > " "
 > (number->string (item-health (person-feet (biff-p bif))))
 > " "
 > (number->string (item-speed (person-feet (biff-p bif))))
 > " "
 > (number->string (item-strength (person-feet (biff-p bif))))
 > " "
 > (number->string (item-weight (person-feet (biff-p bif))))
 > " "
 > (number->string (item-energy (person-feet (biff-p bif))))
 > " "
 > (number->string (item-health (person-mhand (biff-p bif))))
 > " "
 > (number->string (item-speed (person-mhand (biff-p bif))))
 > " "
 > (number->string (item-strength (person-mhand (biff-p bif))))
 > " "
 > (number->string (item-weight (person-mhand (biff-p bif))))
 > " "
 > (number->string (item-energy (person-mhand (biff-p bif))))
 > " "
 > (number->string (item-health (person-ohand (biff-p bif))))
 > " "
 > (number->string (item-speed (person-ohand (biff-p bif))))
 > " "
 > (number->string (item-strength (person-ohand (biff-p bif))))
 > " "
 > (number->string (item-weight (person-ohand (biff-p bif))))
 > " "
 > (number->string (item-energy (person-ohand (biff-p bif))))
 > " "
 > (number->string (item-health (person-special (biff-p bif))))
 > " "
 > (number->string (item-speed (person-special (biff-p bif))))
 > " "
 > (number->string (item-strength (person-special (biff-p bif))))
 > " "
 > (number->string (item-weight (person-special (biff-p bif))))
 > " "
 > (number->string (item-energy (person-special (biff-p bif))))
 > " "
 > (number->string (pah-health (biff-pa bif)))
 > " ""helloworld-unused-space"" "
 > (person-head (pah-person (biff-pa bif)))
 > " "
 > (person-body (pah-person (biff-pa bif)))
 > " "
 > (person-shoulders (pah-person (biff-pa bif)))
 > " "
 > (person-hands (pah-person (biff-pa bif)))
 > " "
 > (person-legs (pah-person (biff-pa bif)))
 > " "
 > (person-feet (pah-person (biff-pa bif)))
 > " "
 > (person-mhand (pah-person (biff-pa bif)))
 > " "
 > (person-ohand (pah-person (biff-pa bif)))
 > " "
 > (number->string (person-special (pah-person (biff-pa bif))))
 > " "
 > (number->string (bag-money (biff-bag bif)))
 > " "
 > (item-slot (first (bag-itemlist (biff-bag bif))))
 > " "
 > (number->string (item-health (first (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-speed (first (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-strength (first (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-weight (first (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-energy (first (bag-itemlist (biff-bag bif)))))
 > " "
 > (item-slot (second (bag-itemlist (biff-bag bif))))
 > " "
 > (number->string (item-health (second (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-speed (second (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-strength (second (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-weight (second (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-energy (second (bag-itemlist (biff-bag bif)))))
 > " "
 > (item-slot (third (bag-itemlist (biff-bag bif))))
 > " "
 > (number->string (item-health (third (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-speed (third (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-strength (third (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-weight (third (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-energy (third (bag-itemlist (biff-bag bif)))))
 > " "
 > (item-slot (fourth (bag-itemlist (biff-bag bif))))
 > " "
 > (number->string (item-health (fourth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-speed (fourth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-strength (fourth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-weight (fourth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-energy (fourth (bag-itemlist (biff-bag bif)))))
 > " "
 > (item-slot (fifth (bag-itemlist (biff-bag bif))))
 > " "
 > (number->string (item-health (fifth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-speed (fifth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-strength (fifth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-weight (fifth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-energy (fifth (bag-itemlist (biff-bag bif)))))
 > " "
 > (item-slot (sixth (bag-itemlist (biff-bag bif))))
 > " "
 > (number->string (item-health (sixth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-speed (sixth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-strength (sixth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-weight (sixth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-energy (sixth (bag-itemlist (biff-bag bif)))))
 > " "
 > (item-slot (seventh (bag-itemlist (biff-bag bif))))
 > " "
 > (number->string (item-health (seventh (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-speed (seventh (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-strength (seventh (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-weight (seventh (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-energy (seventh (bag-itemlist (biff-bag bif)))))
 > " "
 > (item-slot (eighth (bag-itemlist (biff-bag bif))))
 > " "
 > (number->string (item-health (eighth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-speed (eighth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-strength (eighth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-weight (eighth (bag-itemlist (biff-bag bif)))))
 > " "
 > (number->string (item-energy (eighth (bag-itemlist (biff-bag bif)))))
 > " "
 > (item-slot (first (rest (rest (rest(rest(rest(rest(rest(rest (bag-itemlist (biff-bag bif))))))))))))
 > " "
 > (number->string (item-health (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
 > " "
 > (number->string (item-speed (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
 > " "
 > (number->string (item-strength (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
 > " "
 > (number->string (item-weight (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
 > " "
 > (number->string (item-energy (first (rest (rest (rest(rest(rest(rest(rest(rest(bag-itemlist (biff-bag bif)))))))))))))
 > ))
 >
 >
 >
 >  (big-bang
 >     world
 >     (on-tick master-tick .015)
 >     (on-key keyy)
 >     (to-draw drawer)
 >     (on-mouse mouz)
 >     (name "EPIC"))
 >
 > *** How to repeat:
 > load epic_13fix!.rkt
 >
 > Racket-> Create Executable
 >
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 308404680
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("C:\\Users\\schmpete\\AppData\\Roaming\\Racket\\5.2.1\\collects"
 >  (non-existent-path))
 > ("C:\\Program Files\\Racket\\collects"
 >  ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >
 

Responsible changed from "mflatt" to "robby" by robby at Thu, 02 Aug 2012 16:44:24 -0400
Reason>>> rbf

State changed from "open" to "closed" by robby at Thu, 02 Aug 2012 16:44:24 -0400
Reason>>> fixed at some point in the past (I believe this was
a bug having to do with files that contain both
images and comment boxes, but I no longer recall the details)


