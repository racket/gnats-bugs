From apache@plt-scheme.org Mon Aug  8 14:39:17 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j78IdEZS012382
	for <bugs@plt-scheme.org>; Mon, 8 Aug 2005 14:39:14 -0400
Message-Id: <200508081839.j78IdEnQ012380@champlain.ccs.neu.edu>
Date: Mon, 8 Aug 2005 14:39:14 -0400
From: dherman@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: alpha renaming broken for opt-lambda

>Number:         7530
>Category:       drscheme
>Synopsis:       alpha renaming broken for opt-lambda
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Aug 10 16:01:18 -0400 2005
>Last-Modified:  Thu Oct 06 09:12:00 -0400 2005
>Originator:     Dave Herman
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.108-svn28jul2005
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
(#<path:C:\Documents and Settings\Dave Herman\Application Data\PLT Scheme\planet\300\cache\neil\htmlprag.plt\1\1\doc> #<path:C:\Program Files\plt-299\collects\doc\web-server> #<path:C:\Program Files\plt-299\collects\doc\tour> #<path:C:\Program Files\plt-299\collects\doc\tools> #<path:C:\Program Files\plt-299\collects\doc\tex2page> #<path:C:\Program Files\plt-299\collects\doc\teachpack> #<path:C:\Program Files\plt-299\collects\doc\t-y-scheme> #<path:C:\Program Files\plt-299\collects\doc\swindle> #<path:C:\Program Files\plt-299\collects\doc\srfi> #<path:C:\Program Files\plt-299\collects\doc\r5rs> #<path:C:\Program Files\plt-299\collects\doc\profj-intermediate> #<path:C:\Program Files\plt-299\collects\doc\profj-beginner> #<path:C:\Program Files\plt-299\collects\doc\profj-advanced> #<path:C:\Program Files\plt-299\collects\doc\plot> #<path:C:\Program Files\plt-299\collects\doc\mzscheme> #<path:C:\Program Files\plt-299\collects\doc\mzlib> #<path:C:\Program Files\plt-299\collects\doc\mzc> #<path:C:\Program Files\plt-299\collects\doc\mrlib> #<path:C:\Program Files\plt-299\collects\doc\mred> #<path:C:\Program Files\plt-299\collects\doc\misclib> #<path:C:\Program Files\plt-299\collects\doc\intermediate-lambda> #<path:C:\Program Files\plt-299\collects\doc\intermediate> #<path:C:\Program Files\plt-299\collects\doc\insidemz> #<path:C:\Program Files\plt-299\collects\doc\help> #<path:C:\Program Files\plt-299\collects\doc\framework> #<path:C:\Program Files\plt-299\collects\doc\foreign> #<path:C:\Program Files\plt-299\collects\doc\drscheme> #<path:C:\Program Files\plt-299\collects\doc\beginning-abbr> #<path:C:\Program Files\plt-299\collects\doc\beginning> #<path:C:\Program Files\plt-299\collects\doc\advanced>)
Collections:
((#<path:C:\Documents and Settings\Dave Herman\Application Data\PLT Scheme\299.108\collects> "non-existent path") (#<path:C:\Program Files\plt-299\collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:profjWizard> #<path:r6rs> #<path:readline> #<path:reduction-semantics> #<path:repos-time-stamp> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
Alpha-renaming a binding occurrence of a variable in
an opt-lambda expression fails to rename the corresponding
references to the variable in the body of the expression.
>How-To-Repeat:
;; Right-click the binding occurrence of x and
;; alpha-rename it to something else:
(module moo mzscheme
  (require (lib "etc.ss"))
  (opt-lambda (x [y 'y])
    x))
>Fix:
The bug: check syntax was (implicitly) assuming that identifiers were
either not duplicated by transformers or, if they were duplicated, they
ended up in a single scope. opt-lambda duplicates the variables and
puts them into different scopes.
>Release-Note:
This was not a contract violation -- internally the two different identifiers
were clobbering each other in a hash-table.
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: mflatt@cs.utah.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7530: alpha renaming broken for opt-lambda
Date: Tue, 4 Oct 2005 21:02:24 -0500

 Why does this program:
 
 (module m mzscheme
   (expand
    #'(module moo mzscheme
        (require (lib "etc.ss"))
        (opt-lambda (x [y 'y])
          x))))
 
 (require m)
 
 produce a syntax error saying that opt-lambda is unbound, when the
 module without the call to expand and without the #' doesn't?
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/7530: alpha renaming broken for opt-lambda
Date: Tue, 4 Oct 2005 20:05:26 -0600

 At Tue, 4 Oct 2005 21:02:24 -0500, Robby Findler wrote:
 > Why does this program:
 > 
 > (module m mzscheme
 >   (expand
 >    #'(module moo mzscheme
 >        (require (lib "etc.ss"))
 >        (opt-lambda (x [y 'y])
 >          x))))
 > 
 > (require m)
 > 
 > produce a syntax error saying that opt-lambda is unbound, when the
 > module without the call to expand and without the #' doesn't?
 
 Because the context of the outer `module' takes precedence. I guess
 that this is a limitation of the implementation, but `module' isn't
 intended to be nested at all.
 
 It should work if you use quote instead of syntax-quote.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/7530: alpha renaming broken for opt-lambda
Date: Tue, 4 Oct 2005 21:14:30 -0500

 At Tue, 4 Oct 2005 20:05:26 -0600, Matthew Flatt wrote:
 > At Tue, 4 Oct 2005 21:02:24 -0500, Robby Findler wrote:
 > > Why does this program:
 > > 
 > > (module m mzscheme
 > >   (expand
 > >    #'(module moo mzscheme
 > >        (require (lib "etc.ss"))
 > >        (opt-lambda (x [y 'y])
 > >          x))))
 > > 
 > > (require m)
 > > 
 > > produce a syntax error saying that opt-lambda is unbound, when the
 > > module without the call to expand and without the #' doesn't?
 > 
 > Because the context of the outer `module' takes precedence. I guess
 > that this is a limitation of the implementation, but `module' isn't
 > intended to be nested at all.
 > 
 > It should work if you use quote instead of syntax-quote.
 
 Oh, right. I recall you explaining this to me before. Thanks.
 
 Robby


State changed from "open" to "closed" by robby at Thu, 06 Oct 2005 09:12:00 -0400
Reason>>> fixed in SVN.

