From robby@cs.rice.edu  Tue Oct  2 18:57:50 2001
Return-Path: <robby@cs.rice.edu>
Received: from localhost (unknown [155.99.212.124])
	by cs.rice.edu (Postfix) with ESMTP id CB16D17BF
	for <plt-gnats>; Tue,  2 Oct 2001 18:57:49 -0500 (CDT)
Message-Id: <20011002235749.CB16D17BF@cs.rice.edu>
Date: Tue,  2 Oct 2001 18:57:49 -0500 (CDT)
From: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: identifier binding for variables behind define-syntax missing

>Number:         2089
>Category:       drscheme
>Synopsis:       identifier binding for variables behind define-syntax missing
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    robby
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Wed Oct  3 00:00:01 GMT 2001
>Last-Modified:  Wed Oct  3 15:15:01 GMT 2001
>Originator:     Robert Bruce Findler
>Organization:
titan
>Release:        199.23d3
>Environment:
unix "Linux seesen 2.4.5-pre3g4 #1 \267\356 5\267\356 28 17:33:11 JST 2001 ppc unknown" (ppc-linux) (get-display-depth) = 24
Tools: "collection-path: collection \"drscheme\" does not have sub-collection: \"tools\" in: \"/home/robby/cvs/plt/collects/drscheme\""
Docs Installed:
("help" "icons" "r5rs" "drscheme" "misclib" "framework" "tools" "beginning" "beginning-abbr" "intermediate" "advanced")
Collections: 
(("/home/robby/cvs/plt/collects" ("CVS" "doc" "browser" "compiler" "debug" "defaults" "drjava" "drscheme" "dynext" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "readline" "setup" "slatex" "srpersist" "string-constants" "syntax" "tests" "texpict" "userspce" "xml")) ("/home/robby/cvs/robby/collects" ("CVS" "account" "backgammon" "checkers" "doonesbury" "friendly" "icfp-pc-99" "mac-cd-database" "magic" "mahjongg" "paper-utils" "pente" "pop-pop" "sample-solutions" "set-fonts" "solutions" "test-image-map" "xmahjongg")) ("/home/robby/cvs/mflatt/collects" ("CVS" "sirmail")))
Human Language: English
>Description:
in the code below, with the commented out lines, both expressions
evaluate to #f, but I would expect bindings there.

Just for more information, when the commented lines are 
added back in, the identifier binding information reappears.
These lines should not have any effect on this stuff, tho, afaict.
>How-To-Repeat:
(syntax-case (expand #'(module m mzscheme
                         (require-for-syntax (lib "list.ss"))
                         (define-syntax s foldl)
                         
                         ;;(require (lib "list.ss"))
                         ))
  ()
  [(module name lan (xxx yyy zzz (ds x v) qqq ...))
   (identifier-binding (syntax v))])

(syntax-case (expand #'(module m mzscheme
                         (require-for-syntax (lib "etc.ss"))
                         (define-syntax s (rec f 1))
                         
                         ;;(require (lib "etc.ss"))
                         ))
  ()
  [(module name lan (xxx yyy zzz (ds s www) qqq ...))
   (identifier-binding (cadr (syntax-property (syntax www) 'origin)))])

>Fix:
>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: robby@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2089: identifier binding for variables behind define-syntax missing
Date: Tue, 2 Oct 2001 21:36:20 -0600 (MDT)

 Is `identifier-transformer-binding' what you need?

Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Wed Oct  3 09:36:39 2001
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: robby
State-Changed-When: Wed Oct  3 09:36:46 2001
State-Changed-Why:

not really a bug: I missed identifier-transformer-binding in the manual.
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2089: identifier binding for variables behind define-syntax missing
Date: Wed, 3 Oct 2001 07:31:06 -0700 (PDT)

 Quoting Matthew Flatt:
 > Is `identifier-transformer-binding' what you need?
 
 apparently, yes.
 
 So, this means my post to plt-design was wrong: I don't need to keep
 track of any context sensitive information in the variables themselves,
 I just need to remember the requires from `require-for-syntax' and the
 requires from `require'. The fact that a variable may have been behind
 define-syntax or not is already there, in the result from
 identifier-binding or identifier-transformer-binding.
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2089: identifier binding for variables behind define-syntax missing
Date: Wed, 3 Oct 2001 08:33:07 -0600 (MDT)

 Quoting Robert Bruce Findler:
 > So, this means my post to plt-design was wrong: I don't need to keep
 > track of any context sensitive information in the variables themselves,
 > I just need to remember the requires from `require-for-syntax' and the
 > requires from `require'. The fact that a variable may have been behind
 > define-syntax or not is already there, in the result from
 > identifier-binding or identifier-transformer-binding.
 
 Check syntax needs to keep track of context to know whether to use
 `identifier-binding' or `identifier-transformer-binding'. (An
 identifier can have bindings in both phases.)
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2089: identifier binding for variables behind define-syntax missing
Date: Wed, 3 Oct 2001 07:35:29 -0700 (PDT)

 Quoting Matthew Flatt:
 > Check syntax needs to keep track of context to know whether to use
 > `identifier-binding' or `identifier-transformer-binding'. 
 
 why not just apply both procedures to each id and match up the results
 of identifier-binding with the `require's and match up the results of
 identifier-transformer-binding with the `require-for-syntax's?
 
 > (An
 > identifier can have bindings in both phases.)
 
 Can you send an example of that for my test suite?
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2089: identifier binding for variables behind define-syntax missing
Date: Wed, 3 Oct 2001 08:43:16 -0600 (MDT)

 Quoting Robert Bruce Findler:
 > Quoting Matthew Flatt:
 > > Check syntax needs to keep track of context to know whether to use
 > > `identifier-binding' or `identifier-transformer-binding'. 
 > 
 > why not just apply both procedures to each id and match up the results
 > of identifier-binding with the `require's and match up the results of
 > identifier-transformer-binding with the `require-for-syntax's?
 
 For the same reason that you don't draw arrows from the first `x' to
 the last one in
 
   (let ([x 10])
      (let ([x 5])
         x))
 
 It's true that the first `x' would bind the last one if the context was
 different, but the context is such that the first and last `x' have
 nothing to do with each other.
 
 > > (An
 > > identifier can have bindings in both phases.)
 > 
 > Can you send an example of that for my test suite?
 
 Your PR had an example, where you both `require'd and
 `require-for-syntax'd "list.ss".
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2089: identifier binding for variables behind define-syntax missing
Date: Wed, 3 Oct 2001 07:58:50 -0700 (PDT)

 This doesn't make a lot of sense to me. Why is the foldl below bound in
 the transformer environment?
 
  (module m mzscheme
    (require-for-syntax (list "list.ss"))
    (require (lib "list.ss"))
    foldl)
 
 Is it perhaps because some other module might do this:
 
   (module n mzscheme
     (require-for-syntax m)
     ...)
 
 and then would have access to foldl in the second level?
 
 I would have expected that to work differently: that is, when n
 requires-for-syntax m, n's transformer environment would contain the
 binding for foldl that m contained in it's regular environment. That
 is, the require-for-syntax "promotes" all imported variables.
 
 Is there something wrong with that way? It seems like it would work a
 lot better for writing helper functions (in other modules) that are
 used behind define-syntax, as Luke and Jacob tried to do, but couldn't.
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2089: identifier binding for variables behind define-syntax missing
Date: Wed, 3 Oct 2001 09:07:14 -0600 (MDT)

 Quoting Robert Bruce Findler:
 > This doesn't make a lot of sense to me.
 
 Let's try a better example: (let-values ([(x) 10]) 'x)
 
  (syntax-case (expand #'(let-values ([(x) 10]) 'x)) ()
    [(lv ([(x) ten]) 'y)
     (identifier-binding (syntax y))])
  => 'lexical
 
 This example show how the bit of syntax `x' under the quote has a
 binding, but the lexical binding is irrlevant, because the bit of
 syntax under the quote will not be used as a variable. Check syntax has
 to keep track of the fact that it's looking inside a quote (ok, so it
 just doesn't look inside) to know that the result from
 `identifier-binding' is not relevant.
 
>Unformatted:
