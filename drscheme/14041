From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Sep 23 14:12:48 2013
Received: from mail-wi0-f177.google.com (mail-wi0-f177.google.com [209.85.212.177])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id r8NICjSt005312
	for <bugs@bugs.plt-scheme.org>; Mon, 23 Sep 2013 14:12:45 -0400
Message-Id: <201309231805.r8NI5fZm004786@winooski.ccs.neu.edu>
Date: Mon, 23 Sep 2013 14:05:41 -0400
From: erik@adaptations.com
To: bugs@racket-lang.org
Subject: Selecting editor text that causes scrolling is unusable

>Number:         14041
>Category:       drscheme
>Synopsis:       Selecting editor text that causes scrolling is unusable
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Sep 23 14:16:01 -0400 2013
>Last-Modified:  Mon Oct 21 09:57:04 -0400 2013
>Originator:     Erik Pearson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.6
>Environment:
unix "Linux archie 3.11.1-1-ARCH #1 SMP PREEMPT Sat Sep 14 19:30:21 CEST 2013 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 579064916
Links: (links) = ("racket-couchdb" "racqueb"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.6):
 [none]



Collections:
("/home/epearson/.racket/5.3.6/collects"
 (non-existent-path))
("/usr/lib/racket/collects"
 ("texpict" "htdp" "test-engine" "plot" "dynext" "lang" "typed-scheme" "launcher" "games" "version" "datalog" "algol60" "readline" "browser" "preprocessor" "syntax" "mysterx" "racket" "gui-debugger" "realm" "errortrace" "setup" "planet" "mrlib" "scribble" "syntax-color" "xrepl" "parser-tools" "graphics" "db" "embedded-gui" "images" "deinprogramm" "openssl" "redex" "slideshow" "data" "r6rs" "string-constants" "json" "help" "stepper" "compiler" "reader" "at-exp" "srfi" "make" "frtime" "scheme" "raco" "wxme" "mzscheme" "mred" "info-domain" "2htdp" "lazy" "tests" "net" "framework" "rackunit" "typed-racket" "rnrs" "defaults" "profile" "s-exp" "web-server" "macro-debugger" "drracket" "teachpack" "scribblings" "pkg" "schemeunit" "picturing-programs" "ffi" "mzcom" "hierlist" "r5rs" "eopl" "config" "sgl" "compatibility" "swindle" "trace" "icons" "drscheme" "xml" "racklog" "scriblib" "slatex" "future-visualizer" "mzlib" "typed" "plai" "unstable" "html" "math" "file"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
When selecting text in the editor and extending that selecting below or above the "fold" should cause the window to scroll and follow the cursor position as it selects additional text. 

In practice the initial scrolling + selecting is adequately fast (on my new machine, but on an older machine it was too slow). But when trying to stop the scroll, either by moving the mouse pointer (with the button held down so as to be still selecting) back above the fold, or even letting the mouse button go, the editor will continue scrolling. It may even scroll in the reverse direction if that has been requested by moving the mouse pointer in the opposite direction.

This makes selection of large text areas difficult. It feels as if the editor is generating selection/scroll events faster than it is responding, and queuing them up, and "playing" the stored events after the user has indicated changes with the mouse. If you've ever used sluggish controls on a vcr, Netflix, or Amazon Prime, you'll know the frustrating sensation.

It can be worked around by clicking at the selecting begin, releasing the button, then scrolling to ge the end point in view, then shift-clicking there.

If the event queue theory is correct, I would think the solution is to either keep the queue very short so that the interface can respond to the mouse in real time, or to interrupt the queue if there are mouse changes. When selecting text, it does not really matter what the user may have indicated a few seconds ago, all that matters is honoring the beginning of the selection and the current selection point.
>How-To-Repeat:
1. Open a racket file which has text that extends below the bottom of the editing frame. Several windows full of text will give the best demonstration.
2. From anywhere in the window click and hold the left mouse button.
3. Drag the mouse cursor to the bottom of the window and past the edge of the editing viewport (past the bottom of the text).
4. The editor viewport should scroll, and the text selection continue through the newly visible text.
5. After a moment, before the full body of text is scrolled, release the left mouse button.
6. You should witness the viewport continue scrolling. It may even scroll to the bottom of the text.

An alternative use case continues at step 5:
5. After a moment, before the full body of the text is scrolled, move the mouse cursor back into the viewport. This is what you would do when you have passed the point where you want to stop the selection.
6. You should see that the viewport will continue scrolling, perhaps all the way to the bottom of the text, and then reverse the scroll back up to where you are currently holding the mouse cursor, which will not be where you originally attempted to stop the selection, but wherever the viewport stopped scrolling.
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: erik@adaptations.com, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14041: Selecting editor text that causes
 scrolling is unusable
Date: Mon, 23 Sep 2013 14:03:03 -0500

 --047d7b15acc976401804e711ab98
 Content-Type: text/plain; charset=UTF-8
 
 Your basic theory is right, but one small wrinkle is that scrolling is
 slower than it could be because it redraws the entire window instead of
 just blitting, say, 90% of it to "slide it up" and then redrawing the newly
 visible region.
 
 Sorry you're experiencing frustration.
 
 Robby
 
 
 On Mon, Sep 23, 2013 at 1:16 PM, <erik@adaptations.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14041
 >
 > Reported by Erik Pearson for release: 5.3.6
 >
 > *** Description:
 > When selecting text in the editor and extending that selecting below or
 > above the "fold" should cause the window to scroll and follow the cursor
 > position as it selects additional text.
 >
 > In practice the initial scrolling + selecting is adequately fast (on my
 > new machine, but on an older machine it was too slow). But when trying to
 > stop the scroll, either by moving the mouse pointer (with the button held
 > down so as to be still selecting) back above the fold, or even letting the
 > mouse button go, the editor will continue scrolling. It may even scroll in
 > the reverse direction if that has been requested by moving the mouse
 > pointer in the opposite direction.
 >
 > This makes selection of large text areas difficult. It feels as if the
 > editor is generating selection/scroll events faster than it is responding,
 > and queuing them up, and "playing" the stored events after the user has
 > indicated changes with the mouse. If you've ever used sluggish controls on
 > a vcr, Netflix, or Amazon Prime, you'll know the frustrating sensation.
 >
 > It can be worked around by clicking at the selecting begin, releasing the
 > button, then scrolling to ge the end point in view, then shift-clicking
 > there.
 >
 > If the event queue theory is correct, I would think the solution is to
 > either keep the queue very short so that the interface can respond to the
 > mouse in real time, or to interrupt the queue if there are mouse changes.
 > When selecting text, it does not really matter what the user may have
 > indicated a few seconds ago, all that matters is honoring the beginning of
 > the selection and the current selection point.
 >
 > *** How to repeat:
 > 1. Open a racket file which has text that extends below the bottom of the
 > editing frame. Several windows full of text will give the best
 > demonstration.
 > 2. From anywhere in the window click and hold the left mouse button.
 > 3. Drag the mouse cursor to the bottom of the window and past the edge of
 > the editing viewport (past the bottom of the text).
 > 4. The editor viewport should scroll, and the text selection continue
 > through the newly visible text.
 > 5. After a moment, before the full body of text is scrolled, release the
 > left mouse button.
 > 6. You should witness the viewport continue scrolling. It may even scroll
 > to the bottom of the text.
 >
 > An alternative use case continues at step 5:
 > 5. After a moment, before the full body of the text is scrolled, move the
 > mouse cursor back into the viewport. This is what you would do when you
 > have passed the point where you want to stop the selection.
 > 6. You should see that the viewport will continue scrolling, perhaps all
 > the way to the bottom of the text, and then reverse the scroll back up to
 > where you are currently holding the mouse cursor, which will not be where
 > you originally attempted to stop the selection, but wherever the viewport
 > stopped scrolling.
 >
 > *** Environment:
 > unix "Linux archie 3.11.1-1-ARCH #1 SMP PREEMPT Sat Sep 14 19:30:21 CEST
 > 2013 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 579064916
 > Links: (links) = ("racket-couchdb" "racqueb"); (links #:user? #f) = ();
 > (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > raco pkg (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific (5.3.6):
 >  [none]
 >
 >
 >
 > Collections:
 > ("/home/epearson/.racket/5.3.6/collects"
 >  (non-existent-path))
 > ("/usr/lib/racket/collects"
 >  ("texpict" "htdp" "test-engine" "plot" "dynext" "lang" "typed-scheme"
 > "launcher" "games" "version" "datalog" "algol60" "readline" "browser"
 > "preprocessor" "syntax" "mysterx" "racket" "gui-debugger" "realm"
 > "errortrace" "setup" "planet" "mrlib" "scribble" "syntax-color" "xrepl"
 > "parser-tools" "graphics" "db" "embedded-gui" "images" "deinprogramm"
 > "openssl" "redex" "slideshow" "data" "r6rs" "string-constants" "json"
 > "help" "stepper" "compiler" "reader" "at-exp" "srfi" "make" "frtime"
 > "scheme" "raco" "wxme" "mzscheme" "mred" "info-domain" "2htdp" "lazy"
 > "tests" "net" "framework" "rackunit" "typed-racket" "rnrs" "defaults"
 > "profile" "s-exp" "web-server" "macro-debugger" "drracket" "teachpack"
 > "scribblings" "pkg" "schemeunit" "picturing-programs" "ffi" "mzcom"
 > "hierlist" "r5rs" "eopl" "config" "sgl" "compatibility" "swindle" "trace"
 > "icons" "drscheme" "xml" "racklog" "scriblib" "slatex" "future-visualizer"
 > "mzlib" "typed" "plai" "unstable" "html" "math" "file"))
 >
 > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 > (test))))
 >
 >
 
 --047d7b15acc976401804e711ab98
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Your basic theory is right, but one small wrinkle is that =
 scrolling is slower than it could be because it redraws the entire window i=
 nstead of just blitting, say, 90% of it to &quot;slide it up&quot; and then=
  redrawing the newly visible region.<div>
 <br></div><div>Sorry you&#39;re experiencing frustration.<br><div><br></div=
 ><div>Robby</div></div></div><div class=3D"gmail_extra"><br><br><div class=
 =3D"gmail_quote">On Mon, Sep 23, 2013 at 1:16 PM,  <span dir=3D"ltr">&lt;<a=
  href=3D"mailto:erik@adaptations.com" target=3D"_blank">erik@adaptations.co=
 m</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 041" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14041</a><br>
 <br>
 Reported by Erik Pearson for release: 5.3.6<br>
 <br>
 *** Description:<br>
 When selecting text in the editor and extending that selecting below or abo=
 ve the &quot;fold&quot; should cause the window to scroll and follow the cu=
 rsor position as it selects additional text.<br>
 <br>
 In practice the initial scrolling + selecting is adequately fast (on my new=
  machine, but on an older machine it was too slow). But when trying to stop=
  the scroll, either by moving the mouse pointer (with the button held down =
 so as to be still selecting) back above the fold, or even letting the mouse=
  button go, the editor will continue scrolling. It may even scroll in the r=
 everse direction if that has been requested by moving the mouse pointer in =
 the opposite direction.<br>
 
 <br>
 This makes selection of large text areas difficult. It feels as if the edit=
 or is generating selection/scroll events faster than it is responding, and =
 queuing them up, and &quot;playing&quot; the stored events after the user h=
 as indicated changes with the mouse. If you&#39;ve ever used sluggish contr=
 ols on a vcr, Netflix, or Amazon Prime, you&#39;ll know the frustrating sen=
 sation.<br>
 
 <br>
 It can be worked around by clicking at the selecting begin, releasing the b=
 utton, then scrolling to ge the end point in view, then shift-clicking ther=
 e.<br>
 <br>
 If the event queue theory is correct, I would think the solution is to eith=
 er keep the queue very short so that the interface can respond to the mouse=
  in real time, or to interrupt the queue if there are mouse changes. When s=
 electing text, it does not really matter what the user may have indicated a=
  few seconds ago, all that matters is honoring the beginning of the selecti=
 on and the current selection point.<br>
 
 <br>
 *** How to repeat:<br>
 1. Open a racket file which has text that extends below the bottom of the e=
 diting frame. Several windows full of text will give the best demonstration=
 .<br>
 2. From anywhere in the window click and hold the left mouse button.<br>
 3. Drag the mouse cursor to the bottom of the window and past the edge of t=
 he editing viewport (past the bottom of the text).<br>
 4. The editor viewport should scroll, and the text selection continue throu=
 gh the newly visible text.<br>
 5. After a moment, before the full body of text is scrolled, release the le=
 ft mouse button.<br>
 6. You should witness the viewport continue scrolling. It may even scroll t=
 o the bottom of the text.<br>
 <br>
 An alternative use case continues at step 5:<br>
 5. After a moment, before the full body of the text is scrolled, move the m=
 ouse cursor back into the viewport. This is what you would do when you have=
  passed the point where you want to stop the selection.<br>
 6. You should see that the viewport will continue scrolling, perhaps all th=
 e way to the bottom of the text, and then reverse the scroll back up to whe=
 re you are currently holding the mouse cursor, which will not be where you =
 originally attempted to stop the selection, but wherever the viewport stopp=
 ed scrolling.<br>
 
 <br>
 *** Environment:<br>
 unix &quot;Linux archie 3.11.1-1-ARCH #1 SMP PREEMPT Sat Sep 14 19:30:21 CE=
 ST 2013 x86_64 GNU/Linux&quot; (x86_64-linux/3m) (get-display-depth) =3D 32=
 <br>
 Human Language: english<br>
 (current-memory-use) 579064916<br>
 Links: (links) =3D (&quot;racket-couchdb&quot; &quot;racqueb&quot;); (links=
  #:user? #f) =3D (); (links #:root? #t) =3D (); (links #:user? #f #:root? #=
 t) =3D ()<br>
 raco pkg (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific (5.3.6):<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/home/epearson/.racket/5.3.6/collects&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/usr/lib/racket/collects&quot;<br>
 =C2=A0(&quot;texpict&quot; &quot;htdp&quot; &quot;test-engine&quot; &quot;p=
 lot&quot; &quot;dynext&quot; &quot;lang&quot; &quot;typed-scheme&quot; &quo=
 t;launcher&quot; &quot;games&quot; &quot;version&quot; &quot;datalog&quot; =
 &quot;algol60&quot; &quot;readline&quot; &quot;browser&quot; &quot;preproce=
 ssor&quot; &quot;syntax&quot; &quot;mysterx&quot; &quot;racket&quot; &quot;=
 gui-debugger&quot; &quot;realm&quot; &quot;errortrace&quot; &quot;setup&quo=
 t; &quot;planet&quot; &quot;mrlib&quot; &quot;scribble&quot; &quot;syntax-c=
 olor&quot; &quot;xrepl&quot; &quot;parser-tools&quot; &quot;graphics&quot; =
 &quot;db&quot; &quot;embedded-gui&quot; &quot;images&quot; &quot;deinprogra=
 mm&quot; &quot;openssl&quot; &quot;redex&quot; &quot;slideshow&quot; &quot;=
 data&quot; &quot;r6rs&quot; &quot;string-constants&quot; &quot;json&quot; &=
 quot;help&quot; &quot;stepper&quot; &quot;compiler&quot; &quot;reader&quot;=
  &quot;at-exp&quot; &quot;srfi&quot; &quot;make&quot; &quot;frtime&quot; &q=
 uot;scheme&quot; &quot;raco&quot; &quot;wxme&quot; &quot;mzscheme&quot; &qu=
 ot;mred&quot; &quot;info-domain&quot; &quot;2htdp&quot; &quot;lazy&quot; &q=
 uot;tests&quot; &quot;net&quot; &quot;framework&quot; &quot;rackunit&quot; =
 &quot;typed-racket&quot; &quot;rnrs&quot; &quot;defaults&quot; &quot;profil=
 e&quot; &quot;s-exp&quot; &quot;web-server&quot; &quot;macro-debugger&quot;=
  &quot;drracket&quot; &quot;teachpack&quot; &quot;scribblings&quot; &quot;p=
 kg&quot; &quot;schemeunit&quot; &quot;picturing-programs&quot; &quot;ffi&qu=
 ot; &quot;mzcom&quot; &quot;hierlist&quot; &quot;r5rs&quot; &quot;eopl&quot=
 ; &quot;config&quot; &quot;sgl&quot; &quot;compatibility&quot; &quot;swindl=
 e&quot; &quot;trace&quot; &quot;icons&quot; &quot;drscheme&quot; &quot;xml&=
 quot; &quot;racklog&quot; &quot;scriblib&quot; &quot;slatex&quot; &quot;fut=
 ure-visualizer&quot; &quot;mzlib&quot; &quot;typed&quot; &quot;plai&quot; &=
 quot;unstable&quot; &quot;html&quot; &quot;math&quot; &quot;file&quot;))<br=
 >
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 
 --047d7b15acc976401804e711ab98--

