From sowens@cs.utah.edu  Mon Mar 31 16:50:02 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id QAA02067
	for <bugs>; Mon, 31 Mar 2003 16:50:01 -0500
Message-Id: <200303312150.QAA02067@champlain.ccs.neu.edu>
Date: Mon, 31 Mar 2003 16:50:01 -0500
From: Scott Owens <sowens@cs.utah.edu>
To: bugs@plt-scheme.org
Subject: module language level broken
X-GNATS-Notify: mflatt@cs.utah.edu

>Number:         6179
>Category:       drscheme
>Synopsis:       module language level broken
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Mar 31 16:55:01 -0500 2003
>Closed-Date:    Mon Mar 31 23:32:22 -0500 2003
>Last-Modified:  Mon May 05 16:20:36 -0400 2008
>Originator:     Scott Owens
>Organization:
titan
>Submitter-Id:   unknown
>Release:        203.6-cvs31mar2003
>Environment:
unix "FreeBSD ophir 4.6-STABLE FreeBSD 4.6-STABLE #0: Thu Aug  1 23:39:05 MDT 2002     mike@bas:/usr/obj/usr/src/sys/UTAHUP  i386" (i386-freebsd) (get-display-depth) = 16
Docs Installed:
("help" "beginning" "beginning-abbr" "advanced" "intermediate" "intermediate-lambda" "drscheme" "r5rs" "mzscheme" "mzlib" "mred" "framework" "misclib" "mzc" "insidemz" "tools" "tour" "t-y-scheme" "tex2page" "CVS")
Collections: 
(("/z/sowens/software/plt/collects" ("CVS" "doc" "version" "browser" "parser-tools" "afm" "compiler" "file-browser" "defaults" "python" "drscheme" "dynext" "errortrace" "framework" "games" "graphics" "help" "eopl" "hierlist" "htdp" "html" "net" "icons" "lang" "launcher" "make" "mred" "mysterx" "mzcom" "mzlib" "mzscheme" "cvs-time-stamp" "mrflow" "readline" "setup" "slatex" "srpersist" "sirmail" "xml" "string-constants" "syntax" "tests" "texpict" "stepper" "slibinit" "typeset" "web-server" "algol60" "tex2page" "waterworld" "sml.tar.gz" "dromedary" "finish-install" "mrdemo" "mrlib" "reduction-semantics" "openssl" "test-suite")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "module") (#6(#f write mixed-fraction-e #f #t debug) (default)))
>Description:
Try to execute this module in DrScheme under module language level

(module test mzscheme
  (require (prefix mz: mzscheme)))

Welcome to DrScheme, version 203.6-cvs31mar2003.
Language: module.
module: identifier already provided in: struct:exn
> 


No error is given when run under Textual language level.
>How-To-Repeat:
See above.
>Fix:
>Release-Note:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: mflatt@cs.utah.edu
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 16:09:37 -0600

 In order to get this right, I think that need a prefix form in the
 provide specs. I'd also need similar things for the other variations on
 require's arguments.
 
 Recap: the module language (under the covers) turns the module in the
 definitions window into a module that exprorts all names defined at the
 toplevel of the module. It does this by removing all provides that were
 in there and adding in a provide for each definition and a provide for
 each require. To transform the module given in this PR, I think I'd
 need provide prefix, ie:
 
   (module test mzscheme 
     (require (prefix mz: mzscheme)))
 
 =>
 
   (module test mzscheme 
     (require (prefix mz: mzscheme)) 
     (provide (all-from mzscheme))
     (provide (all-from (prefix mz: mzscheme))))
 
 as a shorthand for:
 
   (module test mzscheme 
     (require (prefix mz: mzscheme)) 
     (provide (all-from mzscheme))
     (provide mz:struct:exn ...))
 
 plus:
 
   (provide (all-from-except ...))
   ...
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 17:16:29 -0700

 I'm not sure I follow. Does that also solve the problem with modules like
 
  (module m mzscheme
    (require mzscheme)  
    (require mzscheme))
 
 ?
 
 Matthew
 
 At Mon, 31 Mar 2003 16:09:37 -0600, Robby Findler wrote:
 > In order to get this right, I think that need a prefix form in the
 > provide specs. I'd also need similar things for the other variations on
 > require's arguments.
 > 
 > Recap: the module language (under the covers) turns the module in the
 > definitions window into a module that exprorts all names defined at the
 > toplevel of the module. It does this by removing all provides that were
 > in there and adding in a provide for each definition and a provide for
 > each require. To transform the module given in this PR, I think I'd
 > need provide prefix, ie:
 > 
 >   (module test mzscheme 
 >     (require (prefix mz: mzscheme)))
 > 
 > =>
 > 
 >   (module test mzscheme 
 >     (require (prefix mz: mzscheme)) 
 >     (provide (all-from mzscheme))
 >     (provide (all-from (prefix mz: mzscheme))))
 > 
 > as a shorthand for:
 > 
 >   (module test mzscheme 
 >     (require (prefix mz: mzscheme)) 
 >     (provide (all-from mzscheme))
 >     (provide mz:struct:exn ...))
 > 
 > plus:
 > 
 >   (provide (all-from-except ...))
 >   ...
 > 
 > Robby
 > 
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 17:22:56 -0700

 Actually, it's not clear to me that MzScheme is doing the right thing with
 
  (module m mzscheme
    (require (prefix mz: mzscheme))
    (provide (all-from mzscheme)))
 
 Compare to
 
  (module m mzscheme
    (require (prefix mz: (lib "etc.ss")))
    (provide (all-from (lib "etc.ss"))))
 
 The former doesn't provide `mz:list', but the latter provides
 `mz:opt-lambda'.
 
 Matthew
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 18:55:11 -0600

 At Mon, 31 Mar 2003 17:16:29 -0700, Matthew Flatt wrote:
 > I'm not sure I follow. Does that also solve the problem with modules like
 > 
 >  (module m mzscheme
 >    (require mzscheme)  
 >    (require mzscheme))
 > 
 > ?
 
 No, that's just a bug. I'll wait to fix it, until I can fix it all,
 unless there's someone actually waiting on such things?
 
 Robby

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 18:56:06 -0600

 At Mon, 31 Mar 2003 17:22:56 -0700, Matthew Flatt wrote:
 > Actually, it's not clear to me that MzScheme is doing the right thing with
 > 
 >  (module m mzscheme
 >    (require (prefix mz: mzscheme))
 >    (provide (all-from mzscheme)))
 > 
 > Compare to
 > 
 >  (module m mzscheme
 >    (require (prefix mz: (lib "etc.ss")))
 >    (provide (all-from (lib "etc.ss"))))
 > 
 > The former doesn't provide `mz:list', but the latter provides
 > `mz:opt-lambda'.
 
 Isn't that because of the implicit require in the module's language
 position?
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 18:07:24 -0700

 At Mon, 31 Mar 2003 18:56:06 -0600, Robby Findler wrote:
 > At Mon, 31 Mar 2003 17:22:56 -0700, Matthew Flatt wrote:
 > > Actually, it's not clear to me that MzScheme is doing the right thing with
 > > 
 > >  (module m mzscheme
 > >    (require (prefix mz: mzscheme))
 > >    (provide (all-from mzscheme)))
 > > 
 > > Compare to
 > > 
 > >  (module m mzscheme
 > >    (require (prefix mz: (lib "etc.ss")))
 > >    (provide (all-from (lib "etc.ss"))))
 > > 
 > > The former doesn't provide `mz:list', but the latter provides
 > > `mz:opt-lambda'.
 > 
 > Isn't that because of the implicit require in the module's language
 > position?
 
 Sorry - my second example was incomplete. Here's what I meant:
 
  (module m mzscheme
    (require (lib "etc.ss"))
    (require (prefix mz: (lib "etc.ss")))
    (provide (all-from (lib "etc.ss"))))
 
 In this case, both `opt-lambda' and `mz:opt-lambda' are exported.
 
 I expect the bug has something to do with implicit imports.
 
 Matthew
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 18:10:49 -0700

 > Isn't that because of the implicit require in the module's language
 > position?
 
 Further investigation suggests that it's because `list' originates from
 `#%kernel'.
 
 The point of this thread is that
 
  (module m mzscheme
    (require (prefix mz: mzscheme)))
 
 should get converted to just
 
  (module m mzscheme
    (require (prefix mz: mzscheme))
    (provide (all-from mzscheme)))
 
 The single `provide' should take care of both requires.
 
 Matthew
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 19:59:43 -0600

 Just to be sure I've gotten the generalization right: for any
 module-spec that appears inside a require in the module, I just provide
 that module spec directly, no matter what else appears around the
 module-spec in the require? (Also, eliminate duplicate (presumably
 using equal? on syntax-object->datum as the comparsion) module-specs?)
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 19:52:54 -0700

 At Mon, 31 Mar 2003 19:59:43 -0600, Robby Findler wrote:
 > Just to be sure I've gotten the generalization right: for any
 > module-spec that appears inside a require in the module, I just provide
 > that module spec directly, no matter what else appears around the
 > module-spec in the require? (Also, eliminate duplicate (presumably
 > using equal? on syntax-object->datum as the comparsion) module-specs?)
 
 That's all correct.
 
 I found the bug, too.
 
 Matthew
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 21:03:51 -0600

 At Mon, 31 Mar 2003 19:52:54 -0700, Matthew Flatt wrote:
 > I found the bug, too.
 
 Cool -- I've fixed the module language, but I'll wait for that bug fix
 to be sure I'm testing properly.
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 20:24:02 -0700

 At Mon, 31 Mar 2003 21:03:51 -0600, Robby Findler wrote:
 > At Mon, 31 Mar 2003 19:52:54 -0700, Matthew Flatt wrote:
 > > I found the bug, too.
 > 
 > Cool -- I've fixed the module language, but I'll wait for that bug fix
 > to be sure I'm testing properly.
 > 
 
 It's exp-tagged, now (but I changed a main header, so you're in for a
 longish 3m build again).
 
 Matthew
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Scott Owens <sowens@cs.utah.edu>
Subject: Re: all/6179: module language level broken
Date: Mon, 31 Mar 2003 21:26:37 -0600

 At Mon, 31 Mar 2003 20:24:02 -0700, Matthew Flatt wrote:
 > At Mon, 31 Mar 2003 21:03:51 -0600, Robby Findler wrote:
 > > At Mon, 31 Mar 2003 19:52:54 -0700, Matthew Flatt wrote:
 > > > I found the bug, too.
 > > 
 > > Cool -- I've fixed the module language, but I'll wait for that bug fix
 > > to be sure I'm testing properly.
 > > 
 > 
 > It's exp-tagged, now (but I changed a main header, so you're in for a
 > longish 3m build again).
 
 Thanks.
 
 I recently did a 'make clean' for that other email thread anyways :)
 
 Robby
Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Mon Mar 31 23:32:22 2003
Responsible-Changed-Why:
    (this exposed a bug in mzscheme too, but I'm just going to go ahead and claim it)
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Mon Mar 31 23:32:22 2003
State-Changed-Why:
    fixed and released
>Unformatted:
