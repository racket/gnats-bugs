From apache@plt-scheme.org Tue Dec 20 10:10:06 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id jBKFA3aE011982
	for <bugs@plt-scheme.org>; Tue, 20 Dec 2005 10:10:03 -0500
Message-Id: <200512201510.jBKFA3ca011980@champlain.ccs.neu.edu>
Date: Tue, 20 Dec 2005 10:10:03 -0500
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: syntax check|rename doesn't work for imported syntax from teachpacks

>Number:         7768
>Category:       drscheme
>Synopsis:       syntax check|rename doesn't work for imported syntax from teachpacks
>Class:          change-request
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Dec 20 10:15:00 -0500 2005
>Last-Modified:  Tue Jan 03 19:20:00 -0500 2006
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        300-svn18dec2005
>Environment:
macosx "Darwin america.local 7.9.0 Darwin Kernel Version 7.9.0: Wed Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Users/matthias/plt/collects/doc/web-server> #<path:/Users/matthias/plt/collects/doc/tour> #<path:/Users/matthias/plt/collects/doc/tools> #<path:/Users/matthias/plt/collects/doc/tex2page> #<path:/Users/matthias/plt/collects/doc/teachpack> #<path:/Users/matthias/plt/collects/doc/t-y-scheme> #<path:/Users/matthias/plt/collects/doc/swindle> #<path:/Users/matthias/plt/collects/doc/srfi> #<path:/Users/matthias/plt/collects/doc/r5rs> #<path:/Users/matthias/plt/collects/doc/profj-intermediate> #<path:/Users/matthias/plt/collects/doc/profj-beginner> #<path:/Users/matthias/plt/collects/doc/profj-advanced> #<path:/Users/matthias/plt/collects/doc/plot> #<path:/Users/matthias/plt/collects/doc/mzscheme> #<path:/Users/matthias/plt/collects/doc/mzlib> #<path:/Users/matthias/plt/collects/doc/mzc> #<path:/Users/matthias/plt/collects/doc/mrlib> #<path:/Users/matthias/plt/collects/doc/mred> #<path:/Users/matthias/plt/collects/doc/misclib> #<path:/Users/matthias/plt/collects/doc/intermediate-lambda> #<path:/Users/matthias/plt/collects/doc/intermediate> #<path:/Users/matthias/plt/collects/doc/insidemz> #<path:/Users/matthias/plt/collects/doc/help> #<path:/Users/matthias/plt/collects/doc/framework> #<path:/Users/matthias/plt/collects/doc/foreign> #<path:/Users/matthias/plt/collects/doc/drscheme> #<path:/Users/matthias/plt/collects/doc/beginning-abbr> #<path:/Users/matthias/plt/collects/doc/beginning> #<path:/Users/matthias/plt/collects/doc/advanced>)
Collections:
((#<path:/Users/matthias/Library/PLT Scheme/300/collects> "non-existent path") (#<path:/Users/matthias/plt/collects> (#<path:.svn> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:plai> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs> #<path:readline> #<path:reduction-semantics> #<path:repos-time-stamp> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
Human Language: english
Teachpack filenames: (#<path:/Users/matthias/Unison/Scheme/bug-tp.ss>)
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#6(#t constructor repeating-decimal #f #t none) #f))
>Description:
- define teachpack that introduces a new binding form
- define program in beginner + tp 
- check syntax: some of the binding occurrences don't hilite, 
  on rename they don't get renamed 
>How-To-Repeat:
;; file: 
(fun [(f 0) 0]
     [(f x) (f (- x 1))])

;; tp: 
(module bug-tp mzscheme 
  (require (lib "private/teach.ss" "lang"))
  
  (provide fun)

  (define-syntax (fun stx)
    (syntax-case stx ()
      [(fun [(f1 x1) expr1]
            [(f2 x2) expr2])
       (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
       (syntax
        (beginner-define 
          (f1 x2)
          (cond
            [(eq? x2 x1) expr1]
            [else expr2])))]))
  
  )

;; set tp, do as above and try to rename f to g
;; the first occurrence of f is "mousable" the second one is not
;; and on rename stays f; the third one changes 
>Fix:
>Audit-Trail:
Responsible changed from "mflatt" to "robby" by eli at Wed, 21 Dec 2005 22:52:31 -0500
Reason>>> dr

From: Robby Findler <robby@cs.uchicago.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@barzilay.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, gnats@brinckerhoff.org,
        jay@kenyamountain.com, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu, cce@ccs.neu.edu
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Fri, 30 Dec 2005 21:56:56 -0600

 I don't think this is a bug in check syntax. It seems to either be a
 limitation in macros in general or a bug in the macro (depending on
 your definition of "bug" and "feature" I suppose :)
 
 Here's a shorter example:
 
 (module bug-tp mzscheme 
 
   (define-syntax (fun stx)
     (syntax-case stx ()
       [(fun f1 f2 e1)
        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
        (syntax
         (define f1 e1))]))
   
   (fun f f 
        f))
 
 as you can see, there is no occurrence of `f2' in the expansion of
 `fun'. So it doesn't seem possible for the lexical information
 associate with f2 to be connected to that of f1, even though (as guard
 in the syntax-case indicates) the two variables have the same name.
 
 My best guess for making this work is to introduce some other bindings
 or maybe use some syntax properties to tell check syntax that it should
 connect the bindings.
 
 Robby
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: gnats@brinckerhoff.org, eli@barzilay.org, bugs@plt-scheme.org,
        goldberg@cs.utah.edu, kathyg@cs.utah.edu, sk@cs.brown.edu,
        nobody@plt-scheme.org, meunier@ccs.neu.edu, jay@kenyamountain.com,
        mflatt@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        awick@cs.utah.edu, sowens@cs.utah.edu, cce@ccs.neu.edu
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Sat, 31 Dec 2005 12:23:14 -0500

 On Dec 30, 2005, at 10:56 PM, Robby Findler wrote:
 
 > I don't think this is a bug in check syntax. It seems to either be a
 > limitation in macros in general or a bug in the macro (depending on
 > your definition of "bug" and "feature" I suppose :)
 >
 > Here's a shorter example:
 >
 > (module bug-tp mzscheme
 >
 >   (define-syntax (fun stx)
 >     (syntax-case stx ()
 >       [(fun f1 f2 e1)
 >        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
 >        (syntax
 >         (define f1 e1))]))
 >
 >   (fun f f
 >        f))
 >
 > as you can see, there is no occurrence of `f2' in the expansion of
 > `fun'.
 
 I don't think the two macros are even related.
 
 I am willing to buy the "limitation in macros" argument.
 
 -- Matthias
 
 
 
 
 > So it doesn't seem possible for the lexical information
 > associate with f2 to be connected to that of f1, even though (as guard
 > in the syntax-case indicates) the two variables have the same name.
 >
 > My best guess for making this work is to introduce some other bindings
 > or maybe use some syntax properties to tell check syntax that it should
 > connect the bindings.
 >
 > Robby
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: gnats@brinckerhoff.org, eli@barzilay.org, bugs@plt-scheme.org,
        goldberg@cs.utah.edu, kathyg@cs.utah.edu, sk@cs.brown.edu,
        nobody@plt-scheme.org, meunier@ccs.neu.edu, jay@kenyamountain.com,
        mflatt@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        awick@cs.utah.edu, sowens@cs.utah.edu, cce@ccs.neu.edu
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Sat, 31 Dec 2005 17:43:23 -0600

 On Dec 31, 2005, at 11:23 AM, Matthias Felleisen wrote:
 
 > On Dec 30, 2005, at 10:56 PM, Robby Findler wrote:
 >
 >> I don't think this is a bug in check syntax. It seems to either be a
 >> limitation in macros in general or a bug in the macro (depending on
 >> your definition of "bug" and "feature" I suppose :)
 >>
 >> Here's a shorter example:
 >>
 >> (module bug-tp mzscheme
 >>
 >>   (define-syntax (fun stx)
 >>     (syntax-case stx ()
 >>       [(fun f1 f2 e1)
 >>        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
 >>        (syntax
 >>         (define f1 e1))]))
 >>
 >>   (fun f f
 >>        f))
 >>
 >> as you can see, there is no occurrence of `f2' in the expansion of
 >> `fun'.
 >
 > I don't think the two macros are even related.
 
 They are the same, from the point of view of "it doesn't work in  
 check syntax".
 
 The macro above demonstrates the problem more simply, tho and doesn't  
 require teachpacks (or even multiple files). Teachpacks aren't  
 relevant at all, as it turns out.
 
 Anyways, I no longer consider this my PR.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: gnats@brinckerhoff.org, eli@barzilay.org, bugs@plt-scheme.org,
        goldberg@cs.utah.edu, kathyg@cs.utah.edu, sk@cs.brown.edu,
        nobody@plt-scheme.org, meunier@ccs.neu.edu, jay@kenyamountain.com,
        mflatt@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        awick@cs.utah.edu, sowens@cs.utah.edu, cce@ccs.neu.edu
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Mon, 2 Jan 2006 12:34:00 -0500

 So is this Matthew's bug now? -- Matthias
 
 
 On Dec 31, 2005, at 6:43 PM, Robby Findler wrote:
 
 >
 > On Dec 31, 2005, at 11:23 AM, Matthias Felleisen wrote:
 >
 >> On Dec 30, 2005, at 10:56 PM, Robby Findler wrote:
 >>
 >>> I don't think this is a bug in check syntax. It seems to either be a
 >>> limitation in macros in general or a bug in the macro (depending on
 >>> your definition of "bug" and "feature" I suppose :)
 >>>
 >>> Here's a shorter example:
 >>>
 >>> (module bug-tp mzscheme
 >>>
 >>>   (define-syntax (fun stx)
 >>>     (syntax-case stx ()
 >>>       [(fun f1 f2 e1)
 >>>        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
 >>>        (syntax
 >>>         (define f1 e1))]))
 >>>
 >>>   (fun f f
 >>>        f))
 >>>
 >>> as you can see, there is no occurrence of `f2' in the expansion of
 >>> `fun'.
 >>
 >> I don't think the two macros are even related.
 >
 > They are the same, from the point of view of "it doesn't work in check 
 > syntax".
 >
 > The macro above demonstrates the problem more simply, tho and doesn't 
 > require teachpacks (or even multiple files). Teachpacks aren't 
 > relevant at all, as it turns out.
 >
 > Anyways, I no longer consider this my PR.
 >
 > Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, eli@barzilay.org,
        bugs@plt-scheme.org
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Mon, 2 Jan 2006 11:03:07 -0700

 Your macro could supply information to Check Syntax with the
 'disppeared-use property. Here's how it works in Robby's variant:
 
   (define-syntax (fun stx)
     (syntax-case stx ()
       [(fun f1 f2 e1)
        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
        (syntax-property
         (syntax
          (define f1 e1))
         'disappeared-use
         (syntax-local-introduce #'f2))]))
 
 But this only works when `fun' is used at the top level. When it's used
 in an internal-definition context, f2 disappears before the binding
 really exists, so it never gets bound.
 
 Another approach is to include f2 in the macro output somewhere:
 
   (define-syntax (fun stx)
     (syntax-case stx ()
       [(fun f1 f2 e1)
        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
        (syntax
         (begin
           (define f1 e1)
           (define dummy (lambda () f2))))]))
 
 This works in all definition contexts, at the cost of generating dead
 code that MzScheme has trouble purging.
 
 Matthew
 
 At Mon, 2 Jan 2006 12:34:00 -0500, Matthias Felleisen wrote:
 > So is this Matthew's bug now? -- Matthias
 > 
 > 
 > On Dec 31, 2005, at 6:43 PM, Robby Findler wrote:
 > 
 > >
 > > On Dec 31, 2005, at 11:23 AM, Matthias Felleisen wrote:
 > >
 > >> On Dec 30, 2005, at 10:56 PM, Robby Findler wrote:
 > >>
 > >>> I don't think this is a bug in check syntax. It seems to either be a
 > >>> limitation in macros in general or a bug in the macro (depending on
 > >>> your definition of "bug" and "feature" I suppose :)
 > >>>
 > >>> Here's a shorter example:
 > >>>
 > >>> (module bug-tp mzscheme
 > >>>
 > >>>   (define-syntax (fun stx)
 > >>>     (syntax-case stx ()
 > >>>       [(fun f1 f2 e1)
 > >>>        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
 > >>>        (syntax
 > >>>         (define f1 e1))]))
 > >>>
 > >>>   (fun f f
 > >>>        f))
 > >>>
 > >>> as you can see, there is no occurrence of `f2' in the expansion of
 > >>> `fun'.
 > >>
 > >> I don't think the two macros are even related.
 > >
 > > They are the same, from the point of view of "it doesn't work in check 
 > > syntax".
 > >
 > > The macro above demonstrates the problem more simply, tho and doesn't 
 > > require teachpacks (or even multiple files). Teachpacks aren't 
 > > relevant at all, as it turns out.
 > >
 > > Anyways, I no longer consider this my PR.
 > >
 > > Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: gnats@brinckerhoff.org, eli@barzilay.org, bugs@plt-scheme.org,
        goldberg@cs.utah.edu, kathyg@cs.utah.edu, sk@cs.brown.edu,
        nobody@plt-scheme.org, meunier@ccs.neu.edu, jay@kenyamountain.com,
        mflatt@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        awick@cs.utah.edu, sowens@cs.utah.edu, cce@ccs.neu.edu
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Mon, 2 Jan 2006 17:15:06 -0600

 On Jan 2, 2006, at 11:34 AM, Matthias Felleisen wrote:
 
 > So is this Matthew's bug now? -- Matthias
 
 Looks like this is either a change request, asking for a different  
 macro system, or a bug in the macro.
 
 Robby
 

Responsible changed from "robby" to "matthias" by robby at Mon, 02 Jan 2006 18:26:41 -0500
Reason>>> up to Matthias to decide what to do with this one.

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: gnats@brinckerhoff.org, eli@barzilay.org, bugs@plt-scheme.org,
        goldberg@cs.utah.edu, kathyg@cs.utah.edu, sk@cs.brown.edu,
        nobody@plt-scheme.org, meunier@ccs.neu.edu, jay@kenyamountain.com,
        mflatt@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        awick@cs.utah.edu, sowens@cs.utah.edu, cce@ccs.neu.edu
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Mon, 2 Jan 2006 18:24:46 -0500

 Macros suck. Let's throw them out and start from scratch.  -- Matthias
 
 
 On Jan 2, 2006, at 6:15 PM, Robby Findler wrote:
 
 >
 > On Jan 2, 2006, at 11:34 AM, Matthias Felleisen wrote:
 >
 >> So is this Matthew's bug now? -- Matthias
 >
 > Looks like this is either a change request, asking for a different 
 > macro system, or a bug in the macro.
 >
 > Robby
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, eli@barzilay.org,
        bugs@plt-scheme.org
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Tue, 3 Jan 2006 11:56:10 -0500

 Okay I have thought about this some more. I now consider this Robby's 
 bug again. Here is why:
 
 I see one and only one identifier coming out of
 
   (fun [(f 0) 0]
        [(f x) (f (- x 1))])
 
 even if I have two references to f: one via f1 and one via f2. Clearly, 
 the macro generates the binding occurrence for this identifier (in 
 beginner-define) and passes through the bound occurrences. The latter 
 are tied to the former.
 
 I don't see any information missing for a parser. In other words, the 
 parser can now easily infer that all occurrences of f are tied to the 
 same place (the beginner-define). It somehow needs to figure out that 
 the binding occurrence in the expanded form has several physical 
 "places" (if I write occurrences, we might get confused) but this is 
 possibly the bug.
 
 Can you debunk me before I switch the responsibility back to Robby? -- 
 Matthias
 
 
 
 On Jan 2, 2006, at 1:03 PM, Matthew Flatt wrote:
 
 > Your macro could supply information to Check Syntax with the
 > 'disppeared-use property. Here's how it works in Robby's variant:
 >
 >   (define-syntax (fun stx)
 >     (syntax-case stx ()
 >       [(fun f1 f2 e1)
 >        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
 >        (syntax-property
 >         (syntax
 >          (define f1 e1))
 >         'disappeared-use
 >         (syntax-local-introduce #'f2))]))
 >
 > But this only works when `fun' is used at the top level. When it's used
 > in an internal-definition context, f2 disappears before the binding
 > really exists, so it never gets bound.
 >
 > Another approach is to include f2 in the macro output somewhere:
 >
 >   (define-syntax (fun stx)
 >     (syntax-case stx ()
 >       [(fun f1 f2 e1)
 >        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
 >        (syntax
 >         (begin
 >           (define f1 e1)
 >           (define dummy (lambda () f2))))]))
 >
 > This works in all definition contexts, at the cost of generating dead
 > code that MzScheme has trouble purging.
 >
 > Matthew
 >
 > At Mon, 2 Jan 2006 12:34:00 -0500, Matthias Felleisen wrote:
 >> So is this Matthew's bug now? -- Matthias
 >>
 >>
 >> On Dec 31, 2005, at 6:43 PM, Robby Findler wrote:
 >>
 >>>
 >>> On Dec 31, 2005, at 11:23 AM, Matthias Felleisen wrote:
 >>>
 >>>> On Dec 30, 2005, at 10:56 PM, Robby Findler wrote:
 >>>>
 >>>>> I don't think this is a bug in check syntax. It seems to either be 
 >>>>> a
 >>>>> limitation in macros in general or a bug in the macro (depending on
 >>>>> your definition of "bug" and "feature" I suppose :)
 >>>>>
 >>>>> Here's a shorter example:
 >>>>>
 >>>>> (module bug-tp mzscheme
 >>>>>
 >>>>>   (define-syntax (fun stx)
 >>>>>     (syntax-case stx ()
 >>>>>       [(fun f1 f2 e1)
 >>>>>        (eq? (syntax-e (syntax f1)) (syntax-e (syntax f2)))
 >>>>>        (syntax
 >>>>>         (define f1 e1))]))
 >>>>>
 >>>>>   (fun f f
 >>>>>        f))
 >>>>>
 >>>>> as you can see, there is no occurrence of `f2' in the expansion of
 >>>>> `fun'.
 >>>>
 >>>> I don't think the two macros are even related.
 >>>
 >>> They are the same, from the point of view of "it doesn't work in 
 >>> check
 >>> syntax".
 >>>
 >>> The macro above demonstrates the problem more simply, tho and doesn't
 >>> require teachpacks (or even multiple files). Teachpacks aren't
 >>> relevant at all, as it turns out.
 >>>
 >>> Anyways, I no longer consider this my PR.
 >>>
 >>> Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, eli@barzilay.org,
        bugs@plt-scheme.org
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Tue, 3 Jan 2006 10:32:10 -0700

 At Tue, 3 Jan 2006 11:56:10 -0500, Matthias Felleisen wrote:
 > Okay I have thought about this some more. I now consider this Robby's 
 > bug again. Here is why:
 > 
 > I see one and only one identifier coming out of
 > 
 >   (fun [(f 0) 0]
 >        [(f x) (f (- x 1))])
 > 
 > even if I have two references to f: one via f1 and one via f2. Clearly, 
 > the macro generates the binding occurrence for this identifier (in 
 > beginner-define) and passes through the bound occurrences.
 
 No, the macro doesn't pass through the two "bound" occurrences. The one
 called `f2' in the macro is missing in the expansion.
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, eli@barzilay.org,
        bugs@plt-scheme.org
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Tue, 3 Jan 2006 13:19:24 -0500

 On Jan 3, 2006, at 12:32 PM, Matthew Flatt wrote:
 
 > At Tue, 3 Jan 2006 11:56:10 -0500, Matthias Felleisen wrote:
 >> Okay I have thought about this some more. I now consider this Robby's
 >> bug again. Here is why:
 >>
 >> I see one and only one identifier coming out of
 >>
 >>   (fun [(f 0) 0]
 >>        [(f x) (f (- x 1))])
              ^     ^
              |     |
              |     +---------- bound occurrence
              +---------------- binding occurrence
 
 >>
 >> even if I have two references to f: one via f1 and one via f2. 
 >> Clearly,
 >> the macro generates the binding occurrence for this identifier (in
 >> beginner-define) and passes through the bound occurrences.
 >
 > No, the macro doesn't pass through the two "bound" occurrences. The one
 > called `f2' in the macro is missing in the expansion.
 
 I assume you mean to say binding occurrence.
 
 And I actually get it now: even though the source name is `f' and only 
 'f', the source location for the second physical occurrence, called f2 
 in the macro, is lost. Since we don't reparse (as my naive reply 
 suggests), I somehow need to reestablish the connection between the 
 (define (f x) occurrence and the two source locations for this name.
 
 ;; ---
 
 While I wouldn't consider this case common, I still think it pops up on 
 a regular basis. Perhaps we should come up with a mechanism that works 
 for all physical positions for connecting this kind of surface 
 information to the expanded information. I think the pattern-matching 
 has misled me here.
 
 I am willing to close the report now or change into a feature request 
 as above.
 
 -- Matthias
 
 
 
 

Class changed from "sw-bug" to "change-request" by matthias at Tue, 03 Jan 2006 14:34:47 -0500
Reason>>> I now see that it is a feature request 

Responsible changed from "matthias" to "mflatt" by matthias at Tue, 03 Jan 2006 14:34:47 -0500
Reason>>> It's a feature request for the macro system. See my last message. 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, eli@barzilay.org, bugs@plt-scheme.org
Subject: Re: all/7768: syntax check|rename doesn't work for imported syntax from teachpacks
Date: Tue, 3 Jan 2006 18:19:40 -0600

 At Tue, 3 Jan 2006 11:56:10 -0500, Matthias Felleisen wrote:
 > Okay I have thought about this some more. I now consider this Robby's 
 > bug again. Here is why:
 > 
 > I see one and only one identifier coming out of
 > 
 >   (fun [(f 0) 0]
 >        [(f x) (f (- x 1))])
 > 
 > even if I have two references to f: one via f1 and one via f2. Clearly, 
 > the macro generates the binding occurrence for this identifier (in 
 > beginner-define) and passes through the bound occurrences. The latter 
 > are tied to the former.
 > 
 > I don't see any information missing for a parser. In other words, the 
 > parser can now easily infer that all occurrences of f are tied to the 
 > same place (the beginner-define). It somehow needs to figure out that 
 > the binding occurrence in the expanded form has several physical 
 > "places" (if I write occurrences, we might get confused) but this is 
 > possibly the bug.
 > 
 > Can you debunk me before I switch the responsibility back to Robby? -- 
 
 If you substitute "Matthew" for "Robby", then you are talking about
 getting a new macro system (one that can record information about
 identifiers that are not in the fully expanded program) and that was
 one of the options I listed.
 
 Otherwise, I don't think so.
 
 Robby
