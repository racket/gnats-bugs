From schlie@attbi.com  Fri May  2 19:07:20 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id TAA02267
	for <bugs>; Fri, 2 May 2003 19:07:20 -0400
Message-Id: <200305022307.TAA02267@champlain.ccs.neu.edu>
Date: Fri, 2 May 2003 19:07:20 -0400
From: Paul Schlie <schlie@attbi.com>
To: bugs@plt-scheme.org
Subject: DrScheme tail arrow feature request, to show arrows of full call path

>Number:         6243
>Category:       drscheme
>Synopsis:       DrScheme tail arrow feature request, to show arrows of full call path
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    robby
>State:          open
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Fri May 02 19:10:00 EDT 2003
>Closed-Date:    
>Last-Modified:  Tue May 13 16:45:01 EDT 2003
>Originator:     Paul Schlie
>Release:        204-cvs28apr2003
>Organization:
titan
>Environment:
macosx "Darwin fusion.local. 6.5 Darwin Kernel Version 6.5: Mon Apr  7 17:05:38 PDT 2003; root:xnu/xnu-344.32.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 16
Docs Installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "CVS" "drscheme" "framework" "help" "icons" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("/Applications/plt-cvs/plt/collects/mzlib/../../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "dromedary" "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "readline" "reduction-semantics" "setup" "sirmail" "slatex" "slibinit" "srfi" "srpersist" "stepper" "string-constants" "syntax" "test-suite" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Graphical (MrEd, includes MzScheme)") #6(#f write mixed-fraction-e #t #t debug))
>Description:
it would be nice if the error tail-path arrows would show the full call path
between functions visable within the same source file as the function containing
the error, as being able to see the root/inter-function call path, as it can be
very helpfull in understanding the root context of the error.

(i.e. if error exists within expression within function x,
       called by function y, called by call-back-fucntion z;
       it would be nice to see z<-y<-x<-error arrow paths.)

>How-To-Repeat:

>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Sat May  3 03:51:00 2003
Responsible-Changed-Why:
    rbf

From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Paul Schlie" <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request,
      to show arrows of full call path
Date: Sat, 3 May 2003 02:50:01 -0500 (CDT)

 Can you give an example of a small program that has errors
 you didn't expect (or perhaps has missing arrows)?
 
 Thanks,
 Robby

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 06 May 2003 18:54:30 -0400

 A simple example:
 
 (define (x a) (y a))
 
 (define (y b) (z b 'one))
 
 (define (z c d)
   (let loop ((c c))
     (when (> c 0)
       (loop (- c d)))))
 
 (x 3)
 
 DrScheme presently only propagates the error annotation to (loop (- c d)),
 but it's not very helpful in determining it's control/variable propagation
 path and context. It would be nice to have seen arrows fully denoting the
 full control/variable context path visible with at least the source file
 containing the root error; in this case pointing from:
 
 (x 3)<- (x a)<- (y a)<- (y b)<- (z b 'one)<- (z c d)<- (when (> c 0))<-
 (loop (- c d))<- d
 
 Where d was the 2nd argument in the error message:
 
 -: expects type <number> as 2nd argument, given: one; other arguments were:
 3
 
 Thanks again, -paul-
 
 on 5/3/03 3:50 AM, Robby Findler wrote:
 >
 > Can you give an example of a small program that has errors
 > you didn't expect (or perhaps has missing arrows)?
 > 
 > Thanks,
 > Robby
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 06 May 2003 19:06:15 -0400

 Maybe a even a little fancier:
 
 Red arrows showing the variable path history:
  "within (z b 'one)" 'one<- "within (z c d)" d<-
  "within (- c d)" d
 
 and green arrows showing the control flow path as outlined below.
 
 -paul-
 
 on 5/6/03 6:54 PM, Paul Schlie wrote:
 >
 > A simple example:
 > 
 > (define (x a) (y a))
 > 
 > (define (y b) (z b 'one))
 > 
 > (define (z c d)
 > (let loop ((c c))
 >   (when (> c 0)
 >     (loop (- c d)))))
 > 
 > (x 3)
 > 
 > DrScheme presently only propagates the error annotation to (loop (- c d)),
 > but it's not very helpful in determining it's control/variable propagation
 > path and context. It would be nice to have seen arrows fully denoting the full
 > control/variable context path visible with at least the source file
 > containing the root error; in this case pointing from:
 > 
 > (x 3)<- (x a)<- (y a)<- (y b)<- (z b 'one)<- (z c d)<- (when (> c 0))<- (loop
 > (- c d))<- d
 > 
 > Where d was the 2nd argument in the error message:
 > 
 > -: expects type <number> as 2nd argument, given: one; other arguments were: 3
 > 
 > Thanks again, -paul-
 > 
 > on 5/3/03 3:50 AM, Robby Findler wrote:
 >> 
 >> Can you give an example of a small program that has errors
 >> you didn't expect (or perhaps has missing arrows)?
 >> 
 >> Thanks,
 >> Robby
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 6 May 2003 18:09:23 -0500

 Turns out that that *is* the entire control context: Scheme supports
 the tail call optimization and that is all that is on the stack. For
 example, if you actually passed a number of `d', the resulting loop
 would indeed be a loop (ie, constant space).
 
 Yes, this is confusing, but it's not just a change of the arrows
 themselves to rectify.
 
 Robby
 
 At Tue, 06 May 2003 18:54:30 -0400, Paul Schlie wrote:
 > A simple example:
 > 
 > (define (x a) (y a))
 > 
 > (define (y b) (z b 'one))
 > 
 > (define (z c d)
 >   (let loop ((c c))
 >     (when (> c 0)
 >       (loop (- c d)))))
 > 
 > (x 3)
 > 
 > DrScheme presently only propagates the error annotation to (loop (- c d)),
 > but it's not very helpful in determining it's control/variable propagation
 > path and context. It would be nice to have seen arrows fully denoting the
 > full control/variable context path visible with at least the source file
 > containing the root error; in this case pointing from:
 > 
 > (x 3)<- (x a)<- (y a)<- (y b)<- (z b 'one)<- (z c d)<- (when (> c 0))<-
 > (loop (- c d))<- d
 > 
 > Where d was the 2nd argument in the error message:
 > 
 > -: expects type <number> as 2nd argument, given: one; other arguments were:
 > 3
 > 
 > Thanks again, -paul-
 > 
 > on 5/3/03 3:50 AM, Robby Findler wrote:
 > >
 > > Can you give an example of a small program that has errors
 > > you didn't expect (or perhaps has missing arrows)?
 > > 
 > > Thanks,
 > > Robby
 > 
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 06 May 2003 19:38:18 -0400

 A slightly more interesting difference appears between control vs variable
 state paths (for the purpose of debugging errors), occurs when the source of
 the actual error may be within a function generating an erroneous value
 which may have been invoked from the deeper control path, but be distinct
 from it, i.e.:
 
 (define (x a) (y a))
 
 (define (one z)
     (if (eq? Z 'number)
         1
         'one))
          
 (define (y b) (z b (one 'symbol)))
 
 (define (z c d)
  (let loop ((c c))
    (when (> c 0)
      (loop (- c d)))))
 
 (x 3)
 
 Where I would expect the root control flow thread to originate at (x 3);
 Where I would expect the root variable state error thread to originate at
 'one<- (if eq? z 'number)<- (one z)<- (one 'symbol), at which point it
 would converge with the invoking control flow annotation thread.
 
 Thoughts? -paul-
 
 on 5/6/03 7:06 PM, Paul Schlie wrote:
 >
 > Maybe a even a little fancier:
 > 
 > Red arrows showing the variable path history:
 > "within (z b 'one)" 'one<- "within (z c d)" d<-
 > "within (- c d)" d
 > 
 > and green arrows showing the control flow path as outlined below.
 > 
 > -paul-
 > 
 > on 5/6/03 6:54 PM, Paul Schlie wrote:
 >> 
 >> A simple example:
 >> 
 >> (define (x a) (y a))
 >> 
 >> (define (y b) (z b 'one))
 >> 
 >> (define (z c d)
 >> (let loop ((c c))
 >>   (when (> c 0)
 >>     (loop (- c d)))))
 >> 
 >> (x 3)
 >> 
 >> DrScheme presently only propagates the error annotation to (loop (- c d)),
 >> but it's not very helpful in determining it's control/variable propagation
 >> path and context. It would be nice to have seen arrows fully denoting the
 >> full 
 >> control/variable context path visible with at least the source file
 >> containing the root error; in this case pointing from:
 >> 
 >> (x 3)<- (x a)<- (y a)<- (y b)<- (z b 'one)<- (z c d)<- (when (> c 0))<- (loop
 >> (- c d))<- d
 >> 
 >> Where d was the 2nd argument in the error message:
 >> 
 >> -: expects type <number> as 2nd argument, given: one; other arguments were: 3
 >> 
 >> Thanks again, -paul-
 >> 
 >> on 5/3/03 3:50 AM, Robby Findler wrote:
 >>> 
 >>> Can you give an example of a small program that has errors
 >>> you didn't expect (or perhaps has missing arrows)?
 >>> 
 >>> Thanks,
 >>> Robby
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 06 May 2003 19:48:05 -0400

 I guess I could see this if the source were complied, were the thread of
 function calls were literally folded/unified together; but within the
 interpreter (as I though I understood it, which I may not), each function
 was literally invoked, in the call evaluation order, which should allow the
 opportunity to leave a crumb on the logical equivalent of a call parameter
 stack, forming frames of execution context; or at least that's what I
 thought as mzscheme seems to use C calling conventions for it's function
 parameters?
 
 So I guess I'm missing something in my assumptions? Thanks, -paul-
 
 on 5/6/03 7:09 PM, Robby Findler wrote:
 >
 > Turns out that that *is* the entire control context: Scheme supports
 > the tail call optimization and that is all that is on the stack. For
 > example, if you actually passed a number of `d', the resulting loop
 > would indeed be a loop (ie, constant space).
 > 
 > Yes, this is confusing, but it's not just a change of the arrows
 > themselves to rectify.
 > 
 > Robby
 > 
 > At Tue, 06 May 2003 18:54:30 -0400, Paul Schlie wrote:
 >> A simple example:
 >> 
 >> (define (x a) (y a))
 >> 
 >> (define (y b) (z b 'one))
 >> 
 >> (define (z c d)
 >>   (let loop ((c c))
 >>     (when (> c 0)
 >>       (loop (- c d)))))
 >> 
 >> (x 3)
 >> 
 >> DrScheme presently only propagates the error annotation to (loop (- c d)),
 >> but it's not very helpful in determining it's control/variable propagation
 >> path and context. It would be nice to have seen arrows fully denoting the
 >> full control/variable context path visible with at least the source file
 >> containing the root error; in this case pointing from:
 >> 
 >> (x 3)<- (x a)<- (y a)<- (y b)<- (z b 'one)<- (z c d)<- (when (> c 0))<-
 >> (loop (- c d))<- d
 >> 
 >> Where d was the 2nd argument in the error message:
 >> 
 >> -: expects type <number> as 2nd argument, given: one; other arguments were:
 >> 3
 >> 
 >> Thanks again, -paul-
 >> 
 >> on 5/3/03 3:50 AM, Robby Findler wrote:
 >>> 
 >>> Can you give an example of a small program that has errors
 >>> you didn't expect (or perhaps has missing arrows)?
 >>> 
 >>> Thanks,
 >>> Robby
 >> 
 >> 
 > 
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 6 May 2003 22:37:42 -0500

 No, the difference between compilation and interpretation is
 irrelevant. It has to do with the semantics of the language, regardless
 of the implementation stragtegy. There is a section on this in r5rs and
 Will Clinger's paper is another good place to read:
 
   ftp://ftp.ccs.neu.edu/pub/people/will/tail.ps.gz
 
 The title is "Proper Tail Recursion and Space Efficiency" and the
 abstract is on this page:
 
   http://www.ccs.neu.edu/home/will/papers.html
 
 This is not to say that the information you want wouldn't be useful!
 The red arrows, however, correspond exactly to what is on the stack
 (technically, in the current continuation).
 
 Robby
 
 At Tue, 06 May 2003 19:48:05 -0400, Paul Schlie wrote:
 > I guess I could see this if the source were complied, were the thread of
 > function calls were literally folded/unified together; but within the
 > interpreter (as I though I understood it, which I may not), each function
 > was literally invoked, in the call evaluation order, which should allow the
 > opportunity to leave a crumb on the logical equivalent of a call parameter
 > stack, forming frames of execution context; or at least that's what I
 > thought as mzscheme seems to use C calling conventions for it's function
 > parameters?
 > 
 > So I guess I'm missing something in my assumptions? Thanks, -paul-
 > 
 > on 5/6/03 7:09 PM, Robby Findler wrote:
 > >
 > > Turns out that that *is* the entire control context: Scheme supports
 > > the tail call optimization and that is all that is on the stack. For
 > > example, if you actually passed a number of `d', the resulting loop
 > > would indeed be a loop (ie, constant space).
 > > 
 > > Yes, this is confusing, but it's not just a change of the arrows
 > > themselves to rectify.
 > > 
 > > Robby
 > > 
 > > At Tue, 06 May 2003 18:54:30 -0400, Paul Schlie wrote:
 > >> A simple example:
 > >> 
 > >> (define (x a) (y a))
 > >> 
 > >> (define (y b) (z b 'one))
 > >> 
 > >> (define (z c d)
 > >>   (let loop ((c c))
 > >>     (when (> c 0)
 > >>       (loop (- c d)))))
 > >> 
 > >> (x 3)
 > >> 
 > >> DrScheme presently only propagates the error annotation to (loop (- c d)),
 > >> but it's not very helpful in determining it's control/variable propagation
 > >> path and context. It would be nice to have seen arrows fully denoting the
 > >> full control/variable context path visible with at least the source file
 > >> containing the root error; in this case pointing from:
 > >> 
 > >> (x 3)<- (x a)<- (y a)<- (y b)<- (z b 'one)<- (z c d)<- (when (> c 0))<-
 > >> (loop (- c d))<- d
 > >> 
 > >> Where d was the 2nd argument in the error message:
 > >> 
 > >> -: expects type <number> as 2nd argument, given: one; other arguments were:
 > >> 3
 > >> 
 > >> Thanks again, -paul-
 > >> 
 > >> on 5/3/03 3:50 AM, Robby Findler wrote:
 > >>> 
 > >>> Can you give an example of a small program that has errors
 > >>> you didn't expect (or perhaps has missing arrows)?
 > >>> 
 > >>> Thanks,
 > >>> Robby
 > >> 
 > >> 
 > > 
 > 
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Wed, 07 May 2003 01:00:37 -0400

 Thanks, I think I understand; so that would mean that for debugging, all
 procedures could be given an implied but non-invoked "fake-tail-expression"
 beyond the procedure's true tail (kind of like wrapping the procedure's true
 tail in a (begin0 <true-tail> <debug-tail>); then all previously invoked
 procedures which haven't returned their tail values should appear on the
 call stack as their <debug-tails> would represent each of their respective
 continuations, yes? If so, might it represent a viable method to invoke when
 desirable for logical debugging?
 
 When I do it manually in the definitions window, for the following program:
 
 (define (x a) (y a 'one))
 (define (y b c) (+ b c))
 (x 1)
 
 [which just shows (+ b c) "+: expects type <number> ..."]
 
 I get:
 
 (define (x a) (begin0 (y a 'one) '<procedure-x>))
 (define (y b c) (begin0 (+ b c) '<procedure-y>))
 (x 1)
 
 [(+ b c) <- (begin0 (y a 'one) ...) <- (begin0 ...)] which seems odd,
 
 
 As was expecting the tail arrows to terminate at (x 1), as it does if I
 just add fake-tails, but corrupt return values, which doesn't seem right?
 
 (define (x a) (y a 'one) '<procedure-x>)
 (define (y b c) (+ b c) '<procedure-y>)
 (x 1)
 
 [(x 1) <- (y a 'one) <= (+ b c) "+: expects type <number> ..."]
 
 
 But if I put a blank line before the first definition within the definition
 window, I get for the same program:
 
 [(+ b c) <- (x 1) <- (y a 'one) "+: expects type <number> ..."],
 
 Which seems wrong?
 
 
 Thanks, -paul-
 
 
 on 5/6/03 11:37 PM, Robby Findler wrote:
 >
 > No, the difference between compilation and interpretation is
 > irrelevant. It has to do with the semantics of the language, regardless
 > of the implementation stragtegy. There is a section on this in r5rs and
 > Will Clinger's paper is another good place to read:
 > 
 > ftp://ftp.ccs.neu.edu/pub/people/will/tail.ps.gz
 > 
 > The title is "Proper Tail Recursion and Space Efficiency" and the
 > abstract is on this page:
 > 
 > http://www.ccs.neu.edu/home/will/papers.html
 > 
 > This is not to say that the information you want wouldn't be useful!
 > The red arrows, however, correspond exactly to what is on the stack
 > (technically, in the current continuation).
 > 
 > Robby
 > 
 > At Tue, 06 May 2003 19:48:05 -0400, Paul Schlie wrote:
 >> I guess I could see this if the source were complied, were the thread of
 >> function calls were literally folded/unified together; but within the
 >> interpreter (as I though I understood it, which I may not), each function
 >> was literally invoked, in the call evaluation order, which should allow the
 >> opportunity to leave a crumb on the logical equivalent of a call parameter
 >> stack, forming frames of execution context; or at least that's what I
 >> thought as mzscheme seems to use C calling conventions for it's function
 >> parameters?
 >> 
 >> So I guess I'm missing something in my assumptions? Thanks, -paul-
 >> 
 >> on 5/6/03 7:09 PM, Robby Findler wrote:
 >>> 
 >>> Turns out that that *is* the entire control context: Scheme supports
 >>> the tail call optimization and that is all that is on the stack. For
 >>> example, if you actually passed a number of `d', the resulting loop
 >>> would indeed be a loop (ie, constant space).
 >>> 
 >>> Yes, this is confusing, but it's not just a change of the arrows
 >>> themselves to rectify.
 >>> 
 >>> Robby
 >>> 
 >>> At Tue, 06 May 2003 18:54:30 -0400, Paul Schlie wrote:
 >>>> A simple example:
 >>>> 
 >>>> (define (x a) (y a))
 >>>> 
 >>>> (define (y b) (z b 'one))
 >>>> 
 >>>> (define (z c d)
 >>>>   (let loop ((c c))
 >>>>     (when (> c 0)
 >>>>       (loop (- c d)))))
 >>>> 
 >>>> (x 3)
 >>>> 
 >>>> DrScheme presently only propagates the error annotation to (loop (- c d)),
 >>>> but it's not very helpful in determining it's control/variable propagation
 >>>> path and context. It would be nice to have seen arrows fully denoting the
 >>>> full control/variable context path visible with at least the source file
 >>>> containing the root error; in this case pointing from:
 >>>> 
 >>>> (x 3)<- (x a)<- (y a)<- (y b)<- (z b 'one)<- (z c d)<- (when (> c 0))<-
 >>>> (loop (- c d))<- d
 >>>> 
 >>>> Where d was the 2nd argument in the error message:
 >>>> 
 >>>> -: expects type <number> as 2nd argument, given: one; other arguments were:
 >>>> 3
 >>>> 
 >>>> Thanks again, -paul-
 >>>> 
 >>>> on 5/3/03 3:50 AM, Robby Findler wrote:
 >>>>> 
 >>>>> Can you give an example of a small program that has errors
 >>>>> you didn't expect (or perhaps has missing arrows)?
 >>>>> 
 >>>>> Thanks,
 >>>>> Robby
 >>>> 
 >>>> 
 >>> 
 >> 
 >> 
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Mon, 12 May 2003 17:29:16 -0400

 Here's a simple one:
 
 (define (call-trace x) (begin0 x))
 
 (define (x a) (call-trace (y a 'one)))
 (define (y b c) (call-trace (+ b c)))
 (call-trace (x 1))
 
 The stack trace is correct, but the arrows are all weird; I also get
 a different set of arrows if the first line in the interaction window
 is blank?
 
 Thanks again, -paul-
 
 
 >>>>> on 5/3/03 3:50 AM, Robby Findler wrote:
 >>>>>> 
 >>>>>> Can you give an example of a small program that has errors
 >>>>>> you didn't expect (or perhaps has missing arrows)?
 >>>>>> 
 >>>>>> Thanks,
 >>>>>> Robby
 >>>>> 
 >>>> 
 >>> 
 >>> 
 >> 
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Mon, 12 May 2003 21:08:41 -0500

 Indeed! This is a bug I introduced just before the release went out.
 Sigh. :(
 
 It's fixed in CVS now.
 
 Robby
 
 At Mon, 12 May 2003 17:29:16 -0400, Paul Schlie wrote:
 > Here's a simple one:
 > 
 > (define (call-trace x) (begin0 x))
 > 
 > (define (x a) (call-trace (y a 'one)))
 > (define (y b c) (call-trace (+ b c)))
 > (call-trace (x 1))
 > 
 > The stack trace is correct, but the arrows are all weird; I also get
 > a different set of arrows if the first line in the interaction window
 > is blank?
 > 
 > Thanks again, -paul-
 > 
 > 
 > >>>>> on 5/3/03 3:50 AM, Robby Findler wrote:
 > >>>>>> 
 > >>>>>> Can you give an example of a small program that has errors
 > >>>>>> you didn't expect (or perhaps has missing arrows)?
 > >>>>>> 
 > >>>>>> Thanks,
 > >>>>>> Robby
 > >>>>> 
 > >>>> 
 > >>> 
 > >>> 
 > >> 
 > 
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 00:58:48 -0400

 Thanks, that works, do have a possibly dumb question though, why does
 
 (define (x a) (y a 'one) 'x)
 (define (y b c) (+ b c) 'x)
 (x 1)
 
 Show (x 1) as a continuation on the stack trace, where
 
 (define (x a) (begin0 'x (y a 'one)))
 (define (y b c) (begin0 'x (+ b c)))
 (x 1)
 
 Does not?
 
 on 5/12/03 10:08 PM, Robby Findler wrote:
 >
 > Indeed! This is a bug I introduced just before the release went out.
 > Sigh. :(
 > 
 > It's fixed in CVS now.
 > 
 > Robby
 > 
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>, mflatt@cs.utah.edu, clements@ccs.neu.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 08:37:14 -0500

 Frankly, I'm not sure. John, Matthew?
 
 Robby
 
 At Tue, 13 May 2003 00:58:48 -0400, Paul Schlie wrote:
 > Thanks, that works, do have a possibly dumb question though, why does
 > 
 > (define (x a) (y a 'one) 'x)
 > (define (y b c) (+ b c) 'x)
 > (x 1)
 > 
 > Show (x 1) as a continuation on the stack trace, where
 > 
 > (define (x a) (begin0 'x (y a 'one)))
 > (define (y b c) (begin0 'x (+ b c)))
 > (x 1)
 > 
 > Does not?
 > 
 > on 5/12/03 10:08 PM, Robby Findler wrote:
 > >
 > > Indeed! This is a bug I introduced just before the release went out.
 > > Sigh. :(
 > > 
 > > It's fixed in CVS now.
 > > 
 > > Robby
 > > 
 > 
 > 
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Paul Schlie <schlie@attbi.com>, clements@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 09:16:56 -0600

 > At Tue, 13 May 2003 00:58:48 -0400, Paul Schlie wrote:
 > > Thanks, that works, do have a possibly dumb question though, why does
 > > 
 > > (define (x a) (y a 'one) 'x)
 > > (define (y b c) (+ b c) 'x)
 > > (x 1)
 > > 
 > > Show (x 1) as a continuation on the stack trace, where
 > > 
 > > (define (x a) (begin0 'x (y a 'one)))
 > > (define (y b c) (begin0 'x (+ b c)))
 > > (x 1)
 > > 
 > > Does not?
 
 In the first example, there's an implicit `begin' that is evaluated in
 the same continuation as `(x 1)'. But errortrace doesn't bother
 remembering `begin' expressions (which would replace the memory of `(x
 1)').
 
 However, as illustrated by the second example, errortrace does remember
 `begin0' expressions.
 
 Note that if you use `(let () ...)' instead of implicit `begin', it's
 like the `begin0' case. Again, `let' is remembered.
 
 More generally, when expressions are evaluated in the same
 continuation, there's a choice of which one to remember for a stack
 dump. Errortrace heuristically favors all other expression types over
 `begin' expressions, and otherwise favors the most-recently-executed
 expression.
 
 Matthew
 

From: Paul Schlie <schlie@attbi.com>
To: Matthew Flatt <mflatt@cs.utah.edu>, Robby Findler <robby@cs.uchicago.edu>
Cc: <clements@ccs.neu.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 11:30:37 -0400

 Thanks; does that mean it would be possible to provide a debugging option
 for error-trace to "not ignore the implicit `begin's", thereby providing a
 more logically useful stack-trace which shows the full root call chain
 leading up to the the detected error? (if so, could that be enabled/added).
 
 Thanks again, -paul-
 
 on 5/13/03 11:16 AM, Matthew Flatt wrote:
 >
 >> At Tue, 13 May 2003 00:58:48 -0400, Paul Schlie wrote:
 >>> Thanks, that works, do have a possibly dumb question though, why does
 >>> 
 >>> (define (x a) (y a 'one) 'x)
 >>> (define (y b c) (+ b c) 'x)
 >>> (x 1)
 >>> 
 >>> Show (x 1) as a continuation on the stack trace, where
 >>> 
 >>> (define (x a) (begin0 'x (y a 'one)))
 >>> (define (y b c) (begin0 'x (+ b c)))
 >>> (x 1)
 >>> 
 >>> Does not?
 > 
 > In the first example, there's an implicit `begin' that is evaluated in
 > the same continuation as `(x 1)'. But errortrace doesn't bother
 > remembering `begin' expressions (which would replace the memory of `(x
 > 1)').
 > 
 > However, as illustrated by the second example, errortrace does remember
 > `begin0' expressions.
 > 
 > Note that if you use `(let () ...)' instead of implicit `begin', it's
 > like the `begin0' case. Again, `let' is remembered.
 > 
 > More generally, when expressions are evaluated in the same
 > continuation, there's a choice of which one to remember for a stack
 > dump. Errortrace heuristically favors all other expression types over
 > `begin' expressions, and otherwise favors the most-recently-executed
 > expression.
 > 
 > Matthew
 > 
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: Robby Findler <robby@cs.uchicago.edu>, clements@ccs.neu.edu,
        bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 09:36:10 -0600

 This option would remove `(x 1)' in the dump for the first example,
 replacing it with a `begin' that you can easily deduce. Is that what
 you intend?
 
 Matthew
 
 At Tue, 13 May 2003 11:30:37 -0400, Paul Schlie wrote:
 > Thanks; does that mean it would be possible to provide a debugging option
 > for error-trace to "not ignore the implicit `begin's", thereby providing a
 > more logically useful stack-trace which shows the full root call chain
 > leading up to the the detected error? (if so, could that be enabled/added).
 > 
 > Thanks again, -paul-
 > 
 > on 5/13/03 11:16 AM, Matthew Flatt wrote:
 > >
 > >> At Tue, 13 May 2003 00:58:48 -0400, Paul Schlie wrote:
 > >>> Thanks, that works, do have a possibly dumb question though, why does
 > >>> 
 > >>> (define (x a) (y a 'one) 'x)
 > >>> (define (y b c) (+ b c) 'x)
 > >>> (x 1)
 > >>> 
 > >>> Show (x 1) as a continuation on the stack trace, where
 > >>> 
 > >>> (define (x a) (begin0 'x (y a 'one)))
 > >>> (define (y b c) (begin0 'x (+ b c)))
 > >>> (x 1)
 > >>> 
 > >>> Does not?
 > > 
 > > In the first example, there's an implicit `begin' that is evaluated in
 > > the same continuation as `(x 1)'. But errortrace doesn't bother
 > > remembering `begin' expressions (which would replace the memory of `(x
 > > 1)').
 > > 
 > > However, as illustrated by the second example, errortrace does remember
 > > `begin0' expressions.
 > > 
 > > Note that if you use `(let () ...)' instead of implicit `begin', it's
 > > like the `begin0' case. Again, `let' is remembered.
 > > 
 > > More generally, when expressions are evaluated in the same
 > > continuation, there's a choice of which one to remember for a stack
 > > dump. Errortrace heuristically favors all other expression types over
 > > `begin' expressions, and otherwise favors the most-recently-executed
 > > expression.
 > > 
 > > Matthew
 > > 
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, <clements@ccs.neu.edu>,
        <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 12:19:25 -0400

 Actually the opposite, where I think would be nice would be able to
 optionally force a full trace of the call-chain leading up to an error,
 as I think is often much more useful to understand the context of an error,
 than by having it hidden if only strict continuation tails are traced, i.e.
 to optionally treat:
 
 (define (x a) (y a 'one))
 (define (y b c) (+ b c))
 (x 1)
 
 As if it were:
 
 (define (implicit-begin x) x)
 
 (define (x a) (implicit-begin (y a 'one)))
 (define (y b c) (implicit-begin (+ b c)))
 (implicit-begin (x 1))
 
 Which displays the full call-chain context leading up to the error.
 
 -paul-
 
 on 5/13/03 11:36 AM, Matthew Flatt wrote:
 >
 > This option would remove `(x 1)' in the dump for the first example,
 > replacing it with a `begin' that you can easily deduce. Is that what
 > you intend?
 > 
 > Matthew
 > 
 > At Tue, 13 May 2003 11:30:37 -0400, Paul Schlie wrote:
 >> Thanks; does that mean it would be possible to provide a debugging option
 >> for error-trace to "not ignore the implicit `begin's", thereby providing a
 >> more logically useful stack-trace which shows the full root call chain
 >> leading up to the the detected error? (if so, could that be enabled/added).
 >> 
 >> Thanks again, -paul-
 >> 
 >> on 5/13/03 11:16 AM, Matthew Flatt wrote:
 >>> 
 >>>> At Tue, 13 May 2003 00:58:48 -0400, Paul Schlie wrote:
 >>>>> Thanks, that works, do have a possibly dumb question though, why does
 >>>>> 
 >>>>> (define (x a) (y a 'one) 'x)
 >>>>> (define (y b c) (+ b c) 'x)
 >>>>> (x 1)
 >>>>> 
 >>>>> Show (x 1) as a continuation on the stack trace, where
 >>>>> 
 >>>>> (define (x a) (begin0 'x (y a 'one)))
 >>>>> (define (y b c) (begin0 'x (+ b c)))
 >>>>> (x 1)
 >>>>> 
 >>>>> Does not?
 >>> 
 >>> In the first example, there's an implicit `begin' that is evaluated in
 >>> the same continuation as `(x 1)'. But errortrace doesn't bother
 >>> remembering `begin' expressions (which would replace the memory of `(x
 >>> 1)').
 >>> 
 >>> However, as illustrated by the second example, errortrace does remember
 >>> `begin0' expressions.
 >>> 
 >>> Note that if you use `(let () ...)' instead of implicit `begin', it's
 >>> like the `begin0' case. Again, `let' is remembered.
 >>> 
 >>> More generally, when expressions are evaluated in the same
 >>> continuation, there's a choice of which one to remember for a stack
 >>> dump. Errortrace heuristically favors all other expression types over
 >>> `begin' expressions, and otherwise favors the most-recently-executed
 >>> expression.
 >>> 
 >>> Matthew
 >>> 
 >> 
 > 
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: Robby Findler <robby@cs.uchicago.edu>, clements@ccs.neu.edu,
        bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 12:15:16 -0600

 At Tue, 13 May 2003 12:19:25 -0400, Paul Schlie wrote:
 > Actually the opposite, where I think would be nice would be able to
 > optionally force a full trace of the call-chain leading up to an error,
 > as I think is often much more useful to understand the context of an error,
 > than by having it hidden if only strict continuation tails are traced, 
 
 The problem is that you start to break tail calls, and then programs
 don't run anymore.
 
 There are other points in the spectrum that preserve information
 without abandoning tail calls, but they're not simple tweaks on the
 current errortrace. Implementing and exploring the other points will
 take time.
 
 Matthew
 

From: John Clements <clements@brinckerhoff.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Paul Schlie <schlie@attbi.com>, Robby Findler <robby@cs.uchicago.edu>,
        clements@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows of full call path
Date: Tue, 13 May 2003 14:40:02 -0400

 On Tuesday, May 13, 2003, at 02:15  PM, Matthew Flatt wrote:
 
 > At Tue, 13 May 2003 12:19:25 -0400, Paul Schlie wrote:
 >> Actually the opposite, where I think would be nice would be able to
 >> optionally force a full trace of the call-chain leading up to an 
 >> error,
 >> as I think is often much more useful to understand the context of an 
 >> error,
 >> than by having it hidden if only strict continuation tails are traced,
 >
 > The problem is that you start to break tail calls, and then programs
 > don't run anymore.
 >
 > There are other points in the spectrum that preserve information
 > without abandoning tail calls, but they're not simple tweaks on the
 > current errortrace. Implementing and exploring the other points will
 > take time.
 
 Let me make my dogmatic claim yet again: the information gleaned by 
 disabling tail-cursion, while potentially useful to programmers who 
 understand calling conventions, is a poor substitute for a true notion 
 of history, which is what the programmer is trying to infer.  The 
 information provided by errortrace is limited to some representation of 
 the current state of evaluation.  Contexts that made tail-calls are not 
 properly part of that current state. If we want history, we should 
 record it explicitly.
 
 john
 

From: Paul Schlie <schlie@attbi.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, <clements@ccs.neu.edu>,
        <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 14:40:20 -0400

 Whatever method you likely think is best to improve bug/error context
 identification would be fine, thanks again, -paul-
 
 on 5/13/03 2:15 PM, Matthew Flatt wrote:
 >
 > At Tue, 13 May 2003 12:19:25 -0400, Paul Schlie wrote:
 >> Actually the opposite, where I think would be nice would be able to
 >> optionally force a full trace of the call-chain leading up to an error,
 >> as I think is often much more useful to understand the context of an error,
 >> than by having it hidden if only strict continuation tails are traced,
 > 
 > The problem is that you start to break tail calls, and then programs
 > don't run anymore.
 > 
 > There are other points in the spectrum that preserve information
 > without abandoning tail calls, but they're not simple tweaks on the
 > current errortrace. Implementing and exploring the other points will
 > take time.
 > 
 > Matthew
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: John Clements <clements@brinckerhoff.org>,
        Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, <clements@ccs.neu.edu>,
        <bugs@plt-scheme.org>
Subject: Re: all/6243: DrScheme tail arrow feature request, to show arrows
	of full call path
Date: Tue, 13 May 2003 16:39:58 -0400

 Sounds reasonable, all that I know is that it would be nice to be able to
 clearly tell what the control and parameter value paths of a call hierarchy
 were which resulted in a run-time error or value/state range of interest
 (without having to manually request on a function-by-function basis that
 every single potential function along a possible control path which could
 eventually evoke a function expressing the behavior was).
 
 Although I know that many programming errors (such as incompatible type, or
 value ranges) can be nicely detected through static analysis, however since
 programs tend to do what-was-specified, not necessarily what-was-intended
 and/or -anticipated, it's often very valuable to be able to at run-time
 identify an identifiable terminal state which is interesting for some
 reason, and when the state occurs, be able to inspect the call, and it's
 corresponding lexically scoped value chain, to aid in determining the
 difference between what the program actually does, vs. what may have been
 intended and/or anticipated, when an unexpected state does occur somewhere
 during the executing program. (maybe some form of hybrid static/dynamic
 debug/analysis environment would be most ideal?)
 
 Again as always, thanks, -paul-
 
 on 5/13/03 2:40 PM, John Clements wrote:
 > 
 > On Tuesday, May 13, 2003, at 02:15  PM, Matthew Flatt wrote:
 > 
 >> At Tue, 13 May 2003 12:19:25 -0400, Paul Schlie wrote:
 >>> Actually the opposite, where I think would be nice would be able to
 >>> optionally force a full trace of the call-chain leading up to an
 >>> error,
 >>> as I think is often much more useful to understand the context of an
 >>> error,
 >>> than by having it hidden if only strict continuation tails are traced,
 >> 
 >> The problem is that you start to break tail calls, and then programs
 >> don't run anymore.
 >> 
 >> There are other points in the spectrum that preserve information
 >> without abandoning tail calls, but they're not simple tweaks on the
 >> current errortrace. Implementing and exploring the other points will
 >> take time.
 > 
 > Let me make my dogmatic claim yet again: the information gleaned by
 > disabling tail-cursion, while potentially useful to programmers who
 > understand calling conventions, is a poor substitute for a true notion
 > of history, which is what the programmer is trying to infer.  The
 > information provided by errortrace is limited to some representation of
 > the current state of evaluation.  Contexts that made tail-calls are not
 > properly part of that current state. If we want history, we should
 > record it explicitly.
 > 
 > john
 > 
 
>Unformatted:

