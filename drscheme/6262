From steck@ccs.neu.edu  Mon May 12 14:56:59 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id OAA32557
	for <bugs>; Mon, 12 May 2003 14:56:58 -0400
Message-Id: <200305121856.OAA32557@champlain.ccs.neu.edu>
Date: Mon, 12 May 2003 14:56:58 -0400
From: Paul Steckler <steck@ccs.neu.edu>
To: bugs@plt-scheme.org
Subject: Pattern match fails in lang level script

>Number:         6262
>Category:       drscheme
>Synopsis:       Pattern match fails in lang level script
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    robby
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Mon May 12 15:00:00 EDT 2003
>Closed-Date:    Thu May 15 16:46:10 EDT 2003
>Last-Modified:  Thu May 15 16:46:10 EDT 2003
>Originator:     Paul Steckler
>Release:        204
>Organization:
titan
>Environment:
windows "Windows NT 5.0 (Build 2195) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "icons" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("C:\\PROGRA~1\\plt\\./collects/setup/..\\..\\collects\\mzlib\\..\\..\\collects" ("afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "parser-tools" "setup" "slibinit" "srfi" "srpersist" "stepper" "string-constants" "syntax" "test-suite" "tex2page" "version" "web-server" "xml")))
 
Human Language: english
 
>Description:
The match on line 58 of 

  iplt/doc/language-levels/build-docs.ss

fails, for reasons I don't understand.  The current 
match docs seem to allow "quasipatterns", but 
there is a syntax error.
>How-To-Repeat:
run the script
>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Tue May 13 08:48:28 2003
Responsible-Changed-Why:
    rbf

From: Robby Findler <robby@cs.uchicago.edu>
To: Paul Steckler <steck@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6262: Pattern match fails in lang level script
Date: Tue, 13 May 2003 08:47:50 -0500

 Here is a small example that demonstrates the problem:
 
 
  > (match '(a ()) [`(a ()) 10])
  repl-1:1:0: match: syntax error in pattern in: ()
 
 Robby

From: John Clements <clements@brinckerhoff.org>
To: bugs@plt-scheme.org, robby@cs.uchicago.edu, gnats-admin@plt-scheme.org,
        steck@ccs.neu.edu, bhauman@cs.wcu.edu
Cc:  
Subject: Re: drscheme/6262
Date: Thu, 15 May 2003 14:48:43 -0400

 https://internal.plt-scheme.org/cgis-bin/gnatsweb.pl?cmd=view%20audit- 
 trail&pr=6262&database=plt
 
 I've taken the liberty of committing (but not exp-tagging) a change to  
 the file plt/collects/mzlib/private/plt-match/parse-quasi.scm that  
 appears to fix the problem with empty quasi-patterns.
 
 The change is this: in parse-quasi, there's a syntax-case dispatch on  
 quasipatterns.  I noticed that () was special-cased.  I also noticed  
 that there was a clause that handled patterns of the form (x . y) with  
 a named-let loop over the elements of the list.  I changed the patterns  
 in the syntax-case so that a () is routed to the same clause that  
 handles (x . y).  This change is observed to fix the problem.  I'm not  
 aware of a test suite for this library.
 
 Here's the diff:
 
 [osterley:mzlib/private/plt-match] clements% cvs diff parse-quasi.scm
 Index: parse-quasi.scm
 ===================================================================
 RCS file:  
 /proj/scheme/cvs/plt/collects/mzlib/private/plt-match/parse-quasi.scm,v
 retrieving revision 1.2
 diff -r1.2 parse-quasi.scm
 25,26c25
 <                  (or (null? pat)
 <                      (string? pat)
 ---
  >                  (or (string? pat)
 47c46,47
 <             ((x . y)
 ---
  >             (p
  >              (or (pair? (syntax-e (syntax p))) (null? (syntax-e  
 (syntax p))))
 51c51
 <                          ((l (syntax-e (syntax (x . y)))))
 ---
  >                          ((l (syntax-e (syntax p))))
 
 
 I will exp-tag this change if it satisfies all relevant parties (Bruce  
 Hauman, Robby?)
 
 john
 

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org, gnats-admin@plt-scheme.org, steck@ccs.neu.edu,
        bhauman@cs.wcu.edu
Subject: Re: drscheme/6262
Date: Thu, 15 May 2003 14:14:04 -0500

 test suite is where you'd expect it to be plt/tests/mzscheme/. Of
 course, Bruce's copy is really the master copy.
 
 Robby
 
 At Thu, 15 May 2003 14:48:43 -0400, John Clements wrote:
 > https://internal.plt-scheme.org/cgis-bin/gnatsweb.pl?cmd=view%20audit- 
 > trail&pr=6262&database=plt
 > 
 > I've taken the liberty of committing (but not exp-tagging) a change to  
 > the file plt/collects/mzlib/private/plt-match/parse-quasi.scm that  
 > appears to fix the problem with empty quasi-patterns.
 > 
 > The change is this: in parse-quasi, there's a syntax-case dispatch on  
 > quasipatterns.  I noticed that () was special-cased.  I also noticed  
 > that there was a clause that handled patterns of the form (x . y) with  
 > a named-let loop over the elements of the list.  I changed the patterns  
 > in the syntax-case so that a () is routed to the same clause that  
 > handles (x . y).  This change is observed to fix the problem.  I'm not  
 > aware of a test suite for this library.
 > 
 > Here's the diff:
 > 
 > [osterley:mzlib/private/plt-match] clements% cvs diff parse-quasi.scm
 > Index: parse-quasi.scm
 > ===================================================================
 > RCS file:  
 > /proj/scheme/cvs/plt/collects/mzlib/private/plt-match/parse-quasi.scm,v
 > retrieving revision 1.2
 > diff -r1.2 parse-quasi.scm
 > 25,26c25
 > <                  (or (null? pat)
 > <                      (string? pat)
 > ---
 >  >                  (or (string? pat)
 > 47c46,47
 > <             ((x . y)
 > ---
 >  >             (p
 >  >              (or (pair? (syntax-e (syntax p))) (null? (syntax-e  
 > (syntax p))))
 > 51c51
 > <                          ((l (syntax-e (syntax (x . y)))))
 > ---
 >  >                          ((l (syntax-e (syntax p))))
 > 
 > 
 > I will exp-tag this change if it satisfies all relevant parties (Bruce  
 > Hauman, Robby?)
 > 
 > john
 > 
 > 
 

From: "Paul Steckler" <steck@ccs.neu.edu>
To: "'John Clements'" <clements@brinckerhoff.org>, <bugs@plt-scheme.org>,
        <robby@cs.uchicago.edu>, <gnats-admin@plt-scheme.org>,
        <bhauman@cs.wcu.edu>
Cc:  
Subject: RE: drscheme/6262
Date: Thu, 15 May 2003 15:28:20 -0400

 > I've taken the liberty of committing (but not exp-tagging) a 
 > change to  
 > the file plt/collects/mzlib/private/plt-match/parse-quasi.scm that  
 > appears to fix the problem with empty quasi-patterns.
 
 Doesn't fix the reported bug, though.
 
 -- Paul
 

From: John Clements <clements@brinckerhoff.org>
To: "Paul Steckler" <steck@ccs.neu.edu>
Cc: <bugs@plt-scheme.org>, <robby@cs.uchicago.edu>,
        <gnats-admin@plt-scheme.org>, <bhauman@cs.wcu.edu>
Subject: Re: drscheme/6262
Date: Thu, 15 May 2003 15:54:37 -0400

 On Thursday, May 15, 2003, at 03:28  PM, Paul Steckler wrote:
 
 >> I've taken the liberty of committing (but not exp-tagging) a
 >> change to
 >> the file plt/collects/mzlib/private/plt-match/parse-quasi.scm that
 >> appears to fix the problem with empty quasi-patterns.
 >
 > Doesn't fix the reported bug, though.
 
 Turns out Paul's setup-plt didn't pick up the changed file, and it 
 _did_ fix the reported bug.
 
 john
 

From: John Clements <clements@brinckerhoff.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, gnats-admin@plt-scheme.org, steck@ccs.neu.edu,
        bhauman@cs.wcu.edu
Subject: Re: drscheme/6262
Date: Thu, 15 May 2003 16:22:29 -0400

 On Thursday, May 15, 2003, at 03:14  PM, Robby Findler wrote:
 
 > test suite is where you'd expect it to be plt/tests/mzscheme/. Of
 > course, Bruce's copy is really the master copy.
 
 Okay, thanks.  I've committed and exp-tagged a simple change to 
 plt/tests/mzscheme/match-test.ss that tests for the null quasipattern.  
 This test fails under the existing exp-tagged match sources, but 
 succeeds after the changes I made.  Furthermore, all other tests 
 succeed for the new code.
 
 I'm still going to hold off on exp-tagging the changes to 
 parse-quasi.scm until I have general agreement on the flavor of the 
 change.
 
 
 john
 
State-Changed-From-To: open->closed
State-Changed-By: steck
State-Changed-When: Thu May 15 16:46:10 2003
State-Changed-Why:
    John fixed it.
>Unformatted:

