From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Oct  8 11:08:39 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.235])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m98F8XXO015061
	for <bugs@bugs.plt-scheme.org>; Wed, 8 Oct 2008 11:08:33 -0400
Message-Id: <200810081508.m98F8TZe015055@champlain.ccs.neu.edu>
Date: Wed, 8 Oct 2008 11:08:29 -0400
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: unhighlight-range error message when reverting file

>Number:         9814
>Category:       drscheme
>Synopsis:       unhighlight-range error message when reverting file
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Oct 08 11:12:01 -0400 2008
>Last-Modified:  Mon Mar 16 05:15:08 -0400 2009
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.1.1-svn6oct2008
>Environment:
macosx "Darwin Kauai.ccs.neu.edu 9.4.0 Darwin Kernel Version 9.4.0: Mon Jun  9 19:36:17 PDT 2008; root:xnu-1228.5.20~1/RELEASE_PPC Power Macintosh" (ppc-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 90270888

Collections:
(("/Users/cce/Library/PLT Scheme/4.1.1.1/collects" non-existent-path) ("/Users/cce/plt/trunk/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n"))
>Description:
Error message below; see "Steps to Reproduce" for bug.

unhighlight-range: range not found; start: 24 end: 25 color: (red: 255 green: 192 blue: 203) caret-space?: #f style: rectangle

 === context ===
/Users/cce/plt/trunk/collects/framework/private/text.ss:425:15: new-todo
/Users/cce/plt/trunk/collects/framework/private/text.ss:404:19: todo
/Users/cce/plt/trunk/collects/framework/private/text.ss:352:4: after-edit-sequence method in ...work/private/text.ss:91:2
/Users/cce/plt/trunk/collects/framework/private/text.ss:1539:4: after-edit-sequence method in ...work/private/text.ss:1439:2
/Users/cce/plt/trunk/collects/drscheme/private/unit.ss:2290:8: execute-callback method in ...heme/private/unit.ss:1353:6
/Users/cce/plt/trunk/collects/scheme/private/more-scheme.ss:155:2: call-with-break-parameterization
/Users/cce/plt/trunk/collects/scheme/private/more-scheme.ss:260:2: call-with-exception-handler

unhighlight-range: range not found; start: 24 end: 25 color: (red: 255 green: 192 blue: 203) caret-space?: #f style: rectangle

 === context ===
/Users/cce/plt/trunk/collects/framework/private/text.ss:425:15: new-todo
/Users/cce/plt/trunk/collects/framework/private/text.ss:444:21: todo
/Users/cce/plt/trunk/collects/framework/private/text.ss:404:19: todo
/Users/cce/plt/trunk/collects/framework/private/text.ss:352:4: after-edit-sequence method in ...work/private/text.ss:91:2
/Users/cce/plt/trunk/collects/framework/private/text.ss:1539:4: after-edit-sequence method in ...work/private/text.ss:1439:2
/Users/cce/plt/trunk/collects/framework/private/color.ss:397:4: colorer-callback method in ...ork/private/color.ss:58:2
>How-To-Repeat:
Write a program with a bug in it, such as:

#lang scheme
(define x y)

Save it, and run it in DrScheme.  DrScheme should highlight the bug (the identifier y, in this case).  Now open an external editor, fix the bug, and save the file (in this case, insert a quote):

#lang scheme
(define x 'y)

Run DrScheme, and when it asks to Revert or Ignore, choose Revert.  DrScheme will report two errors and produce messages like those above.
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: cce@ccs.neu.edu, bugs@plt-scheme.org, robby@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Wed, 8 Oct 2008 11:58:44 -0400

 On Oct  8, cce@ccs.neu.edu wrote:
 > [...]
 > unhighlight-range: range not found; start: 24 end: 25 color: (red: 255 green: 192 blue: 203) caret-space?: #f style: rectangle
 
 Sounds like it's the same problem as PR9770.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@plt-scheme.org>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: cce@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Wed, 8 Oct 2008 11:03:38 -0500

 On Wed, Oct 8, 2008 at 10:58 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Oct  8, cce@ccs.neu.edu wrote:
 >> [...]
 >> unhighlight-range: range not found; start: 24 end: 25 color: (red: 255 green: 192 blue: 203) caret-space?: #f style: rectangle
 >
 > Sounds like it's the same problem as PR9770.
 
 It isn't, I'm pretty sure. I think I fixed that one.
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: cce@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Wed, 8 Oct 2008 12:07:26 -0400

 On Oct  8, Robby Findler wrote:
 > On Wed, Oct 8, 2008 at 10:58 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > > On Oct  8, cce@ccs.neu.edu wrote:
 > >> [...]
 > >> unhighlight-range: range not found; start: 24 end: 25 color: (red: 255 green: 192 blue: 203) caret-space?: #f style: rectangle
 > >
 > > Sounds like it's the same problem as PR9770.
 > 
 > It isn't, I'm pretty sure. I think I fixed that one.
 
 No, it's still there.  The problem in both cases seems to be related
 to having text change when there are highlights -- in my case it's
 changing inside the highlight range, and in Carl's case it's changing
 the whole buffer.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@plt-scheme.org>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: cce@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Wed, 8 Oct 2008 11:09:15 -0500

 On Wed, Oct 8, 2008 at 11:07 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Oct  8, Robby Findler wrote:
 >> On Wed, Oct 8, 2008 at 10:58 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > On Oct  8, cce@ccs.neu.edu wrote:
 >> >> [...]
 >> >> unhighlight-range: range not found; start: 24 end: 25 color: (red: 255 green: 192 blue: 203) caret-space?: #f style: rectangle
 >> >
 >> > Sounds like it's the same problem as PR9770.
 >>
 >> It isn't, I'm pretty sure. I think I fixed that one.
 >
 > No, it's still there.
 
 Oh.
 
 > The problem in both cases seems to be related
 > to having text change when there are highlights
 
 Yes, that is the same. The error message is saying that already (at
 least to me :).
 
 >  -- in my case it's
 > changing inside the highlight range, and in Carl's case it's changing
 > the whole buffer.
 
 
 FWIW, this is an error that was always there, but I just added an
 error message. It indicates a leak, I think (possibly).
 
 Robby
From: "Sam TH" <samth@ccs.neu.edu>
To: bugs@plt-scheme.org, cce@ccs.neu.edu, "Eli Barzilay" <eli@barzilay.org>,
        "Robby Findler" <robby@cs.uchicago.edu>
Cc: 
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Thu, 9 Oct 2008 15:38:20 -0400

 I want to chime in and say that this bug happens regularly in Typed
 Scheme.  When it happens, the tab becomes completely useless, and has
 to be closed.  So I'm looking forward to when this gets fixed.
 
 Thanks,
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, cce@ccs.neu.edu, "Eli Barzilay" <eli@barzilay.org>
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Sun, 12 Oct 2008 19:59:44 -0500

 I've fixed the Typed Scheme PR, but the instructions in this PR don't
 seem to result in the bug for me. (I tried both the version before and
 the version after I fixed the other PR).
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org, cce@ccs.neu.edu
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Sun, 12 Oct 2008 22:57:29 -0400

 On Oct 12, Robby Findler wrote:
 > I've fixed the Typed Scheme PR, but the instructions in this PR
 > don't seem to result in the bug for me. (I tried both the version
 > before and the version after I fixed the other PR).
 
 Whew!  I just gave up yesterday on trying to make sense of some
 problem because I couldn't see the error.  (It got bad enough that it
 just wouldn't show the error, just pop up that error message.)
 
 So at least in one case the fix does work.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Carl Eastlund" <cce@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org,
        "Eli Barzilay" <eli@barzilay.org>
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Mon, 13 Oct 2008 00:54:25 -0400

 I'm still seeing the same bug in a fresh build.  My instructions for
 reproducing the bug were worded poorly (in one part flat-out wrong) so
 I'll restate them, hopefully more clearly:
 
 Create a file in DrScheme, in the Module language, named bug.ss and
 containing these two lines:
 
 #lang scheme
 (define x y)
 
 Save the file, then press the Run button.  DrScheme will highlight "y"
 and report it as an unbound identifier.  Leave DrScheme running with
 "y" still highlighted and open bug.ss in an external editor.  Quote y,
 so that bug.ss now contains these two lines:
 
 #lang scheme
 (define x 'y)
 
 Save bug.ss from the external editor, and exit the external editor.
 Return to DrScheme, to the tab with the error highlighting.  Without
 editing anything in the tab (so the identifier "y" is still
 highlighted), press Run.  DrScheme will report bug.ss as modified, and
 ask you to "Ignore" or "Revert".  Choose "Revert".
 
 This will cause DrScheme to report an error in unhlighlight-range -
 the same error twice (or two very similar ones, I haven't compared
 them precisely).  It will repeat these two error messages after any
 operation in that tab until the tab is closed.
 
 Hopefully that's clearer, and either helps reproduce the bug or
 determine that we're really doing the same thing and getting different
 results.  I did all of this from revision 11999 of the trunk.
 
 --Carl
 
 On Sun, Oct 12, 2008 at 8:59 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > I've fixed the Typed Scheme PR, but the instructions in this PR don't
 > seem to result in the bug for me. (I tried both the version before and
 > the version after I fixed the other PR).
 >
 > Robby
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Carl Eastlund" <cce@ccs.neu.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org,
        "Eli Barzilay" <eli@barzilay.org>
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Mon, 13 Oct 2008 08:46:01 -0500

 Thanks for the additional, more careful explanation. That is exactly
 what I had tried and I don't know why I don't see what you see.
 
 But after thinking about this more, I realized that the error check in
 there is bogus (more later on that) so I've checked in something that
 just gets rid of it. Hopefully now you should be back in good shape.
 
 Robby
 
 On Sun, Oct 12, 2008 at 11:54 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 > I'm still seeing the same bug in a fresh build.  My instructions for
 > reproducing the bug were worded poorly (in one part flat-out wrong) so
 > I'll restate them, hopefully more clearly:
 >
 > Create a file in DrScheme, in the Module language, named bug.ss and
 > containing these two lines:
 >
 > #lang scheme
 > (define x y)
 >
 > Save the file, then press the Run button.  DrScheme will highlight "y"
 > and report it as an unbound identifier.  Leave DrScheme running with
 > "y" still highlighted and open bug.ss in an external editor.  Quote y,
 > so that bug.ss now contains these two lines:
 >
 > #lang scheme
 > (define x 'y)
 >
 > Save bug.ss from the external editor, and exit the external editor.
 > Return to DrScheme, to the tab with the error highlighting.  Without
 > editing anything in the tab (so the identifier "y" is still
 > highlighted), press Run.  DrScheme will report bug.ss as modified, and
 > ask you to "Ignore" or "Revert".  Choose "Revert".
 >
 > This will cause DrScheme to report an error in unhlighlight-range -
 > the same error twice (or two very similar ones, I haven't compared
 > them precisely).  It will repeat these two error messages after any
 > operation in that tab until the tab is closed.
 >
 > Hopefully that's clearer, and either helps reproduce the bug or
 > determine that we're really doing the same thing and getting different
 > results.  I did all of this from revision 11999 of the trunk.
 >
 > --Carl
 >
 > On Sun, Oct 12, 2008 at 8:59 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 >> I've fixed the Typed Scheme PR, but the instructions in this PR don't
 >> seem to result in the bug for me. (I tried both the version before and
 >> the version after I fixed the other PR).
 >>
 >> Robby
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Eli Barzilay" <eli@barzilay.org>,
        "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: 
Subject: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 08:55:59 -0500

 I always (and I suspect you always) knew that too much error checking
 can be a pain, even if the error checking is done properly, simply
 because it puts too much of a burden on the programmer relative to the
 extra reliability they get by knowing that the error doesn't crop up
 (when running the test suite, say) and relative to the extra help they
 get in fixing a bug by having the error messages be more closely
 correlated with the logical flaw.
 
 Still, this is one of the few times that it has actually come in my
 programming experience so I thought I'd share it with you.
 
 The framework's text:basic% has two methods (these are simplified
 versions of their signatures):
 
   highlight-range : int[start] int[end] color -> void
   unhighlight-range : int[start] int[end] color -> void
 
 These are used for, among other things, the gray parenthesis
 highlighting and the pink error highlighting.
 
 Until just a few minutes ago, the unhighlight-range had an error check
 in it that raised an exception if the region in question was not
 currently being highlighted. The idea was that if you highlighted
 something and then thought you were unhighlighting it, but in fact you
 unhighlighted some other region you could quickly find out about it.
 And, in DrScheme there was a field of some class somewhere holding
 onto the range of the current error highlight(s) so that they could be
 disabled when the program was re-run or when the program was edited.
 
 Oh ... but wait! The editor can change in other ways too which should
 cause the error highlighting to go away. For example, it can be
 reverted to the file on disk. Clearly, it makes the most sense for the
 editor implementing highlight-range to notice that the editor has been
 reverted and then clear out the range. But this leaves the drscheme
 highlighting in a funny state: it now too has to track if the editor
 was reverted before it tries to unhighlight things and just for the
 purpose of avoiding this check. Ugh.
 
 So, instead, I just disable the check. If the editor is reverted and
 drscheme resets the highlight on the editor, that call is just
 ignored, since the region is already gone, due to the lower-level
 erasure.
 
 And, one other contributing factor: it is easy to *see* that the
 highlighting is there when it shouldn't be there, so there is unlikely
 to be some kind of highlighting-leak that no one would notice ... the
 highlighting is, by its very nature, designed to be visible.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Eli Barzilay" <eli@barzilay.org>,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 10:07:32 -0400

 All this sounds to me like a use of behavioral contracts
 to implement temporal contracts. Perhaps all this means
 that we don't know how to temporal contracts well enough.
 
 -- Matthias
 
 
 
 
 
 On Oct 13, 2008, at 9:55 AM, Robby Findler wrote:
 
 > I always (and I suspect you always) knew that too much error checking
 > can be a pain, even if the error checking is done properly, simply
 > because it puts too much of a burden on the programmer relative to the
 > extra reliability they get by knowing that the error doesn't crop up
 > (when running the test suite, say) and relative to the extra help they
 > get in fixing a bug by having the error messages be more closely
 > correlated with the logical flaw.
 >
 > Still, this is one of the few times that it has actually come in my
 > programming experience so I thought I'd share it with you.
 >
 > The framework's text:basic% has two methods (these are simplified
 > versions of their signatures):
 >
 >   highlight-range : int[start] int[end] color -> void
 >   unhighlight-range : int[start] int[end] color -> void
 >
 > These are used for, among other things, the gray parenthesis
 > highlighting and the pink error highlighting.
 >
 > Until just a few minutes ago, the unhighlight-range had an error check
 > in it that raised an exception if the region in question was not
 > currently being highlighted. The idea was that if you highlighted
 > something and then thought you were unhighlighting it, but in fact you
 > unhighlighted some other region you could quickly find out about it.
 > And, in DrScheme there was a field of some class somewhere holding
 > onto the range of the current error highlight(s) so that they could be
 > disabled when the program was re-run or when the program was edited.
 >
 > Oh ... but wait! The editor can change in other ways too which should
 > cause the error highlighting to go away. For example, it can be
 > reverted to the file on disk. Clearly, it makes the most sense for the
 > editor implementing highlight-range to notice that the editor has been
 > reverted and then clear out the range. But this leaves the drscheme
 > highlighting in a funny state: it now too has to track if the editor
 > was reverted before it tries to unhighlight things and just for the
 > purpose of avoiding this check. Ugh.
 >
 > So, instead, I just disable the check. If the editor is reverted and
 > drscheme resets the highlight on the editor, that call is just
 > ignored, since the region is already gone, due to the lower-level
 > erasure.
 >
 > And, one other contributing factor: it is easy to *see* that the
 > highlighting is there when it shouldn't be there, so there is unlikely
 > to be some kind of highlighting-leak that no one would notice ... the
 > highlighting is, by its very nature, designed to be visible.
 >
 > Robby
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Eli Barzilay" <eli@barzilay.org>,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 09:13:18 -0500

 Why does this make you think the implementation of the contract is
 relevant (as opposed to the contract behavior)?
 
 Robby
 
 On Mon, Oct 13, 2008 at 9:07 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > All this sounds to me like a use of behavioral contracts
 > to implement temporal contracts. Perhaps all this means
 > that we don't know how to temporal contracts well enough.
 >
 > -- Matthias
 >
 >
 >
 >
 >
 > On Oct 13, 2008, at 9:55 AM, Robby Findler wrote:
 >
 >> I always (and I suspect you always) knew that too much error checking
 >> can be a pain, even if the error checking is done properly, simply
 >> because it puts too much of a burden on the programmer relative to the
 >> extra reliability they get by knowing that the error doesn't crop up
 >> (when running the test suite, say) and relative to the extra help they
 >> get in fixing a bug by having the error messages be more closely
 >> correlated with the logical flaw.
 >>
 >> Still, this is one of the few times that it has actually come in my
 >> programming experience so I thought I'd share it with you.
 >>
 >> The framework's text:basic% has two methods (these are simplified
 >> versions of their signatures):
 >>
 >>  highlight-range : int[start] int[end] color -> void
 >>  unhighlight-range : int[start] int[end] color -> void
 >>
 >> These are used for, among other things, the gray parenthesis
 >> highlighting and the pink error highlighting.
 >>
 >> Until just a few minutes ago, the unhighlight-range had an error check
 >> in it that raised an exception if the region in question was not
 >> currently being highlighted. The idea was that if you highlighted
 >> something and then thought you were unhighlighting it, but in fact you
 >> unhighlighted some other region you could quickly find out about it.
 >> And, in DrScheme there was a field of some class somewhere holding
 >> onto the range of the current error highlight(s) so that they could be
 >> disabled when the program was re-run or when the program was edited.
 >>
 >> Oh ... but wait! The editor can change in other ways too which should
 >> cause the error highlighting to go away. For example, it can be
 >> reverted to the file on disk. Clearly, it makes the most sense for the
 >> editor implementing highlight-range to notice that the editor has been
 >> reverted and then clear out the range. But this leaves the drscheme
 >> highlighting in a funny state: it now too has to track if the editor
 >> was reverted before it tries to unhighlight things and just for the
 >> purpose of avoiding this check. Ugh.
 >>
 >> So, instead, I just disable the check. If the editor is reverted and
 >> drscheme resets the highlight on the editor, that call is just
 >> ignored, since the region is already gone, due to the lower-level
 >> erasure.
 >>
 >> And, one other contributing factor: it is easy to *see* that the
 >> highlighting is there when it shouldn't be there, so there is unlikely
 >> to be some kind of highlighting-leak that no one would notice ... the
 >> highlighting is, by its very nature, designed to be visible.
 >>
 >> Robby
 >
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Eli Barzilay" <eli@barzilay.org>,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 09:16:19 -0500

 Ohh ... maybe the idea is that the contract should be "each caller of
 highlight-range should be responsible that unhighlight-range is called
 eventually" and be blamed if it isn't (perhaps when the editor window
 is closed or on some other end-of-time-like event)?
 
 That would be neat.
 
 Robby
 
 On Mon, Oct 13, 2008 at 9:13 AM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > Why does this make you think the implementation of the contract is
 > relevant (as opposed to the contract behavior)?
 >
 > Robby
 >
 > On Mon, Oct 13, 2008 at 9:07 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> All this sounds to me like a use of behavioral contracts
 >> to implement temporal contracts. Perhaps all this means
 >> that we don't know how to temporal contracts well enough.
 >>
 >> -- Matthias
 >>
 >>
 >>
 >>
 >>
 >> On Oct 13, 2008, at 9:55 AM, Robby Findler wrote:
 >>
 >>> I always (and I suspect you always) knew that too much error checking
 >>> can be a pain, even if the error checking is done properly, simply
 >>> because it puts too much of a burden on the programmer relative to the
 >>> extra reliability they get by knowing that the error doesn't crop up
 >>> (when running the test suite, say) and relative to the extra help they
 >>> get in fixing a bug by having the error messages be more closely
 >>> correlated with the logical flaw.
 >>>
 >>> Still, this is one of the few times that it has actually come in my
 >>> programming experience so I thought I'd share it with you.
 >>>
 >>> The framework's text:basic% has two methods (these are simplified
 >>> versions of their signatures):
 >>>
 >>>  highlight-range : int[start] int[end] color -> void
 >>>  unhighlight-range : int[start] int[end] color -> void
 >>>
 >>> These are used for, among other things, the gray parenthesis
 >>> highlighting and the pink error highlighting.
 >>>
 >>> Until just a few minutes ago, the unhighlight-range had an error check
 >>> in it that raised an exception if the region in question was not
 >>> currently being highlighted. The idea was that if you highlighted
 >>> something and then thought you were unhighlighting it, but in fact you
 >>> unhighlighted some other region you could quickly find out about it.
 >>> And, in DrScheme there was a field of some class somewhere holding
 >>> onto the range of the current error highlight(s) so that they could be
 >>> disabled when the program was re-run or when the program was edited.
 >>>
 >>> Oh ... but wait! The editor can change in other ways too which should
 >>> cause the error highlighting to go away. For example, it can be
 >>> reverted to the file on disk. Clearly, it makes the most sense for the
 >>> editor implementing highlight-range to notice that the editor has been
 >>> reverted and then clear out the range. But this leaves the drscheme
 >>> highlighting in a funny state: it now too has to track if the editor
 >>> was reverted before it tries to unhighlight things and just for the
 >>> purpose of avoiding this check. Ugh.
 >>>
 >>> So, instead, I just disable the check. If the editor is reverted and
 >>> drscheme resets the highlight on the editor, that call is just
 >>> ignored, since the region is already gone, due to the lower-level
 >>> erasure.
 >>>
 >>> And, one other contributing factor: it is easy to *see* that the
 >>> highlighting is there when it shouldn't be there, so there is unlikely
 >>> to be some kind of highlighting-leak that no one would notice ... the
 >>> highlighting is, by its very nature, designed to be visible.
 >>>
 >>> Robby
 >>
 >>
 >>
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Eli Barzilay" <eli@barzilay.org>,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 10:18:26 -0400

 The first word "implement" has nothing to do with contract  
 implementation per se. It means that we used the behavior of  
 behavioral contracts unaltered to get the behavior for temporal  
 contracts.
 
 My "don't know how to do temporal contracts" is supposed to say "we  
 don't know how temporal contracts should behave in our world." I do  
 recall, for example, that some RVT tools, which are all about  
 temporal contracts, do NOT necessarily lock down your program but  
 simply log the temporally bad behavior and context info for you to  
 reconstruct it later. Perhaps this is wrong too but in our world I  
 know only two things:
 
   -- I know we can use state and behavioral contracts to mimic what  
 we think temporal contracts do
   -- I have developed a "sense" that this is wrong but I can't put my  
 finger on it yet and I can be wrong.
 
 None of this has anything to do with 'implementation.'
 
 -- Matthias
 
 
 
 
 
 On Oct 13, 2008, at 10:13 AM, Robby Findler wrote:
 
 > Why does this make you think the implementation of the contract is
 > relevant (as opposed to the contract behavior)?
 >
 > Robby
 >
 > On Mon, Oct 13, 2008 at 9:07 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> All this sounds to me like a use of behavioral contracts
 >> to implement temporal contracts. Perhaps all this means
 >> that we don't know how to temporal contracts well enough.
 >>
 >> -- Matthias
 >>
 >>
 >>
 >>
 >>
 >> On Oct 13, 2008, at 9:55 AM, Robby Findler wrote:
 >>
 >>> I always (and I suspect you always) knew that too much error  
 >>> checking
 >>> can be a pain, even if the error checking is done properly, simply
 >>> because it puts too much of a burden on the programmer relative  
 >>> to the
 >>> extra reliability they get by knowing that the error doesn't crop up
 >>> (when running the test suite, say) and relative to the extra help  
 >>> they
 >>> get in fixing a bug by having the error messages be more closely
 >>> correlated with the logical flaw.
 >>>
 >>> Still, this is one of the few times that it has actually come in my
 >>> programming experience so I thought I'd share it with you.
 >>>
 >>> The framework's text:basic% has two methods (these are simplified
 >>> versions of their signatures):
 >>>
 >>>  highlight-range : int[start] int[end] color -> void
 >>>  unhighlight-range : int[start] int[end] color -> void
 >>>
 >>> These are used for, among other things, the gray parenthesis
 >>> highlighting and the pink error highlighting.
 >>>
 >>> Until just a few minutes ago, the unhighlight-range had an error  
 >>> check
 >>> in it that raised an exception if the region in question was not
 >>> currently being highlighted. The idea was that if you highlighted
 >>> something and then thought you were unhighlighting it, but in  
 >>> fact you
 >>> unhighlighted some other region you could quickly find out about it.
 >>> And, in DrScheme there was a field of some class somewhere holding
 >>> onto the range of the current error highlight(s) so that they  
 >>> could be
 >>> disabled when the program was re-run or when the program was edited.
 >>>
 >>> Oh ... but wait! The editor can change in other ways too which  
 >>> should
 >>> cause the error highlighting to go away. For example, it can be
 >>> reverted to the file on disk. Clearly, it makes the most sense  
 >>> for the
 >>> editor implementing highlight-range to notice that the editor has  
 >>> been
 >>> reverted and then clear out the range. But this leaves the drscheme
 >>> highlighting in a funny state: it now too has to track if the editor
 >>> was reverted before it tries to unhighlight things and just for the
 >>> purpose of avoiding this check. Ugh.
 >>>
 >>> So, instead, I just disable the check. If the editor is reverted and
 >>> drscheme resets the highlight on the editor, that call is just
 >>> ignored, since the region is already gone, due to the lower-level
 >>> erasure.
 >>>
 >>> And, one other contributing factor: it is easy to *see* that the
 >>> highlighting is there when it shouldn't be there, so there is  
 >>> unlikely
 >>> to be some kind of highlighting-leak that no one would notice ...  
 >>> the
 >>> highlighting is, by its very nature, designed to be visible.
 >>>
 >>> Robby
 >>
 >>
 >>
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Eli Barzilay" <eli@barzilay.org>,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 09:21:15 -0500

 FWIW, I too think that there is some kind of a mismatch between
 behavioral and temporal contracts. I suspect that, if done propertly,
 state+behavioral contracts can get you to temporal contracts (or at
 least part of the way there), but the way we hand-roll them is
 probably not right in general.
 
 At least this time around I feel like I'm understanding the difference
 a little bit better.
 
 Robby
 
 On Mon, Oct 13, 2008 at 9:18 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > The first word "implement" has nothing to do with contract implementation
 > per se. It means that we used the behavior of behavioral contracts unaltered
 > to get the behavior for temporal contracts.
 >
 > My "don't know how to do temporal contracts" is supposed to say "we don't
 > know how temporal contracts should behave in our world." I do recall, for
 > example, that some RVT tools, which are all about temporal contracts, do NOT
 > necessarily lock down your program but simply log the temporally bad
 > behavior and context info for you to reconstruct it later. Perhaps this is
 > wrong too but in our world I know only two things:
 >
 >  -- I know we can use state and behavioral contracts to mimic what we think
 > temporal contracts do
 >  -- I have developed a "sense" that this is wrong but I can't put my finger
 > on it yet and I can be wrong.
 >
 > None of this has anything to do with 'implementation.'
 >
 > -- Matthias
 >
 >
 >
 >
 >
 > On Oct 13, 2008, at 10:13 AM, Robby Findler wrote:
 >
 >> Why does this make you think the implementation of the contract is
 >> relevant (as opposed to the contract behavior)?
 >>
 >> Robby
 >>
 >> On Mon, Oct 13, 2008 at 9:07 AM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >>>
 >>> All this sounds to me like a use of behavioral contracts
 >>> to implement temporal contracts. Perhaps all this means
 >>> that we don't know how to temporal contracts well enough.
 >>>
 >>> -- Matthias
 >>>
 >>>
 >>>
 >>>
 >>>
 >>> On Oct 13, 2008, at 9:55 AM, Robby Findler wrote:
 >>>
 >>>> I always (and I suspect you always) knew that too much error checking
 >>>> can be a pain, even if the error checking is done properly, simply
 >>>> because it puts too much of a burden on the programmer relative to the
 >>>> extra reliability they get by knowing that the error doesn't crop up
 >>>> (when running the test suite, say) and relative to the extra help they
 >>>> get in fixing a bug by having the error messages be more closely
 >>>> correlated with the logical flaw.
 >>>>
 >>>> Still, this is one of the few times that it has actually come in my
 >>>> programming experience so I thought I'd share it with you.
 >>>>
 >>>> The framework's text:basic% has two methods (these are simplified
 >>>> versions of their signatures):
 >>>>
 >>>>  highlight-range : int[start] int[end] color -> void
 >>>>  unhighlight-range : int[start] int[end] color -> void
 >>>>
 >>>> These are used for, among other things, the gray parenthesis
 >>>> highlighting and the pink error highlighting.
 >>>>
 >>>> Until just a few minutes ago, the unhighlight-range had an error check
 >>>> in it that raised an exception if the region in question was not
 >>>> currently being highlighted. The idea was that if you highlighted
 >>>> something and then thought you were unhighlighting it, but in fact you
 >>>> unhighlighted some other region you could quickly find out about it.
 >>>> And, in DrScheme there was a field of some class somewhere holding
 >>>> onto the range of the current error highlight(s) so that they could be
 >>>> disabled when the program was re-run or when the program was edited.
 >>>>
 >>>> Oh ... but wait! The editor can change in other ways too which should
 >>>> cause the error highlighting to go away. For example, it can be
 >>>> reverted to the file on disk. Clearly, it makes the most sense for the
 >>>> editor implementing highlight-range to notice that the editor has been
 >>>> reverted and then clear out the range. But this leaves the drscheme
 >>>> highlighting in a funny state: it now too has to track if the editor
 >>>> was reverted before it tries to unhighlight things and just for the
 >>>> purpose of avoiding this check. Ugh.
 >>>>
 >>>> So, instead, I just disable the check. If the editor is reverted and
 >>>> drscheme resets the highlight on the editor, that call is just
 >>>> ignored, since the region is already gone, due to the lower-level
 >>>> erasure.
 >>>>
 >>>> And, one other contributing factor: it is easy to *see* that the
 >>>> highlighting is there when it shouldn't be there, so there is unlikely
 >>>> to be some kind of highlighting-leak that no one would notice ... the
 >>>> highlighting is, by its very nature, designed to be visible.
 >>>>
 >>>> Robby
 >>>
 >>>
 >>>
 >
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 10:26:49 -0400

 On Oct 13, Robby Findler wrote:
 > Ohh ... maybe the idea is that the contract should be "each caller
 > of highlight-range should be responsible that unhighlight-range is
 > called eventually" and be blamed if it isn't (perhaps when the
 > editor window is closed or on some other end-of-time-like event)?
 
 Unrelated to the contract stuff; it sounds like you're missing a
 "throw everything away" thing -- if the violated check is one that is
 enforced by a caller that is also thrown out when the buffer is
 reverted, or something like that, maybe.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 11:11:14 -0500

 On Mon, Oct 13, 2008 at 9:26 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Oct 13, Robby Findler wrote:
 >> Ohh ... maybe the idea is that the contract should be "each caller
 >> of highlight-range should be responsible that unhighlight-range is
 >> called eventually" and be blamed if it isn't (perhaps when the
 >> editor window is closed or on some other end-of-time-like event)?
 >
 > Unrelated to the contract stuff; it sounds like you're missing a
 > "throw everything away" thing -- if the violated check is one that is
 > enforced by a caller that is also thrown out when the buffer is
 > reverted, or something like that, maybe.
 
 Well, the problem (with the bad contract specs) is that the caller of
 unhighlight-range has to detect the case that the highlighting has
 been thrown out by reverting the editor, and then avoid disabling the
 highlighting. That's too painful and doesn't make the code more robust
 (in fact, it makes it LESS robust!)
 
 Robby
From: "Carl Eastlund" <cce@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org,
        "Eli Barzilay" <eli@barzilay.org>
Subject: Re: [plt-bug] all/9814: unhighlight-range error message when reverting file
Date: Mon, 13 Oct 2008 12:20:26 -0400

 Thanks, that's working on my system now.
 
 On Mon, Oct 13, 2008 at 9:46 AM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > But after thinking about this more, I realized that the error check in
 > there is bogus (more later on that) so I've checked in something that
 > just gets rid of it. Hopefully now you should be back in good shape.
 >
 > Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 12:31:53 -0400

 On Oct 13, Robby Findler wrote:
 > On Mon, Oct 13, 2008 at 9:26 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > > On Oct 13, Robby Findler wrote:
 > >> Ohh ... maybe the idea is that the contract should be "each caller
 > >> of highlight-range should be responsible that unhighlight-range is
 > >> called eventually" and be blamed if it isn't (perhaps when the
 > >> editor window is closed or on some other end-of-time-like event)?
 > >
 > > Unrelated to the contract stuff; it sounds like you're missing a
 > > "throw everything away" thing -- if the violated check is one that is
 > > enforced by a caller that is also thrown out when the buffer is
 > > reverted, or something like that, maybe.
 > 
 > Well, the problem (with the bad contract specs) is that the caller of
 > unhighlight-range has to detect the case that the highlighting has
 > been thrown out by reverting the editor, and then avoid disabling the
 > highlighting. That's too painful and doesn't make the code more robust
 > (in fact, it makes it LESS robust!)
 
 Right -- I'm suggesting that perhaps a better organization of the code
 is for that caller to be thrown with the highlights when the editor is
 reverted.  Something that means that when you revert you just don't
 worry about the check in a similar sense to `custodian-shutdown-all'
 making it easy to just forget about a bunch of resources by getting
 rid of them all.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 11:39:37 -0500

 On Mon, Oct 13, 2008 at 11:31 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Oct 13, Robby Findler wrote:
 >> On Mon, Oct 13, 2008 at 9:26 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > On Oct 13, Robby Findler wrote:
 >> >> Ohh ... maybe the idea is that the contract should be "each caller
 >> >> of highlight-range should be responsible that unhighlight-range is
 >> >> called eventually" and be blamed if it isn't (perhaps when the
 >> >> editor window is closed or on some other end-of-time-like event)?
 >> >
 >> > Unrelated to the contract stuff; it sounds like you're missing a
 >> > "throw everything away" thing -- if the violated check is one that is
 >> > enforced by a caller that is also thrown out when the buffer is
 >> > reverted, or something like that, maybe.
 >>
 >> Well, the problem (with the bad contract specs) is that the caller of
 >> unhighlight-range has to detect the case that the highlighting has
 >> been thrown out by reverting the editor, and then avoid disabling the
 >> highlighting. That's too painful and doesn't make the code more robust
 >> (in fact, it makes it LESS robust!)
 >
 > Right -- I'm suggesting that perhaps a better organization of the code
 > is for that caller to be thrown with the highlights when the editor is
 > reverted.  Something that means that when you revert you just don't
 > worry about the check in a similar sense to `custodian-shutdown-all'
 > making it easy to just forget about a bunch of resources by getting
 > rid of them all.
 
 I'm not getting it still. What does "the caller to be thrown with the
 highlights" mean?
 
 At the moment, a revert just throws away all highlights, so no need to
 call unhighlight-range when a revert happens. Is that what you mean?
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 12:44:25 -0400

 On Oct 13, Robby Findler wrote:
 > On Mon, Oct 13, 2008 at 11:31 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > >
 > > Right -- I'm suggesting that perhaps a better organization of the
 > > code is for that caller to be thrown with the highlights when the
 > > editor is reverted.  Something that means that when you revert you
 > > just don't worry about the check in a similar sense to
 > > `custodian-shutdown-all' making it easy to just forget about a
 > > bunch of resources by getting rid of them all.
 > 
 > I'm not getting it still. What does "the caller to be thrown with
 > the highlights" mean?
 
 There's a piece of code (for removing highlights) that is going to
 check that the highlights are there -- and I'm talking about storing
 that piece of code in the same place that the highlights are stored,
 so throwing it all means no error checking.
 
 
 > At the moment, a revert just throws away all highlights, so no need
 > to call unhighlight-range when a revert happens. Is that what you
 > mean?
 
 Yes, I think that it's similar enough.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>,
        "Carl Eastlund" <cce@ccs.neu.edu>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: Too much error checking (was Re: [plt-bug] all/9814)
Date: Mon, 13 Oct 2008 11:49:50 -0500

 On Mon, Oct 13, 2008 at 11:44 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Oct 13, Robby Findler wrote:
 >> On Mon, Oct 13, 2008 at 11:31 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> >
 >> > Right -- I'm suggesting that perhaps a better organization of the
 >> > code is for that caller to be thrown with the highlights when the
 >> > editor is reverted.  Something that means that when you revert you
 >> > just don't worry about the check in a similar sense to
 >> > `custodian-shutdown-all' making it easy to just forget about a
 >> > bunch of resources by getting rid of them all.
 >>
 >> I'm not getting it still. What does "the caller to be thrown with
 >> the highlights" mean?
 >
 > There's a piece of code (for removing highlights) that is going to
 > check that the highlights are there -- and I'm talking about storing
 > that piece of code in the same place that the highlights are stored,
 > so throwing it all means no error checking.
 
 When a character is inserted into the buffer, drscheme has to make a
 decision: "do I clear the old highlight or not?" At the moment, it
 just always clears it. I want to avoid having to record "has this
 highlight been automatically cleared by the editor being reverted". Of
 course, I can do that, but it seems like a waste of time.
 
 I don't see another way to do this.
 
 Robby

