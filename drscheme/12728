From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Apr 24 11:22:53 2012
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q3OFMn6k027853
	for <bugs@bugs.plt-scheme.org>; Tue, 24 Apr 2012 11:22:49 -0400
Message-Id: <201204241522.q3OFMj2s027847@champlain.ccs.neu.edu>
Date: Tue, 24 Apr 2012 11:22:45 -0400
From: asumu@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Submodule-based #lang makes DrRacket get stuck

>Number:         12728
>Category:       drscheme
>Synopsis:       Submodule-based #lang makes DrRacket get stuck
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Apr 24 11:24:02 -0400 2012
>Last-Modified:  Sun Jun 03 10:58:19 -0400 2012
>Originator:     Asumu Takikawa
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.2--2012-04-24(555f85a/g)
>Environment:
unix "Linux calcifer 3.2.0-2-amd64 #1 SMP Tue Mar 20 18:36:37 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 233181952
Links: (links) = ("lang-test" "assignments" "sweet" "class" "pgf-dc" "drracket-vim-tool" "taglib" "book" "rash" "racket-gst"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/asumu/.racket/5.3.0.2/collects"
 ("info-domain"))
("/home/asumu/plt/current/collects"
 ("teachpack" "handin-client" "planet" "picturing-programs" "mred" "images" "redex" "srpersist" "slideshow" "htdp" "data" "mzscheme" "scribblings" "ffi" "lang" "help" "racklog" "games" "lazy" "typed-scheme" "guibuilder" "version" "mrlib" "openssl" "scribble" "launcher" "profile" "unstable" "errortrace" "drscheme" "wxme" ".gitignore" "waterworld" "plai" "db" "datalog" "at-exp" "eopl" "typed" "test-box-recovery" "web-server" "scheme" "json" "stepper" "setup" "file" "embedded-gui" "tests" "deinprogramm" "rackunit" "typed-racket" "repo-time-stamp" "schemeunit" "xrepl" "drracket" "srfi" "compiler" "handin-server" "r6rs" "reader" "config" "meta" "html" "gui-debugger" "readline" "syntax-color" "hierlist" "info-domain" "string-constants" "plot" "sirmail" "trace" "r5rs" "macro-debugger" "honu" "preprocessor" "mysterx" "algol60" "parser-tools" "2htdp" "slatex" "icons" "defaults" "swindle" "s-exp" "xml" "make" "raco" "rnrs" "browser" "racket" "frtime" "net" "graphics" "tex2page" "combi!
 nator-parser" "mzcom" "texpict" "sgl" "test-engine" "scriblib" "framework" "mzlib" "dynext" "syntax"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
I tried to remix the #lang reader example from the docs to use the new
submodule-based #lang (code attached below). Even just opening the
"tuvalu.rkt" module makes DrRacket use up all memory.

I'm not sure this is a bug, but I didn't see anything that should cause
this to happen in the code.
>How-To-Repeat:
;; put the following files in a lang-test collect
;;
;; opening "tuvalu.rkt" in DrRacket will make online syntax
;; check eat all of your memory

;; main.rkt
#lang racket

(module reader syntax/module-reader
  racket/base
  #:read literal-read
  #:read-syntax literal-read-syntax
  (require "literal.rkt"))

;; literal.rkt
#lang racket
(require syntax/strip-context)
 
(provide literal-read literal-read-syntax)
 
(define (literal-read in)
  (syntax->datum
   (literal-read-syntax #f in)))
 
(define (literal-read-syntax src in)
  (with-syntax ([str (port->string in)])
    (strip-context
     #'(module anything racket
         (provide data)
         (define data 'str)))))

;; tuvalu.rkt
#lang lang-test
Technology!
System!
Perfect!
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: asumu@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12728: Submodule-based #lang makes DrRacket get stuck
Date: Tue, 24 Apr 2012 16:38:08 -0600

 The `syntax/module-reader' language applies the given readers
 repeatedly until they produce `eof', unless you specify
 `#:whole-body-readers? #t'. The `literal-read-syntax' below never
 produces `eof', so that's why memory use is unbounded.
 
 I'm not clear on whether there's a DrRacket issue here (i.e., whether
 it should somehow avoid using unbounded memory due to a bad reader).
 
 At Tue, 24 Apr 2012 11:24:02 -0400, asumu@ccs.neu.edu wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12728
 > 
 > Reported by Asumu Takikawa for release: 5.3.0.2--2012-04-24(555f85a/g)
 > 
 > *** Description:
 > I tried to remix the #lang reader example from the docs to use the new
 > submodule-based #lang (code attached below). Even just opening the
 > "tuvalu.rkt" module makes DrRacket use up all memory.
 > 
 > I'm not sure this is a bug, but I didn't see anything that should cause
 > this to happen in the code.
 > 
 > *** How to repeat:
 > ;; put the following files in a lang-test collect
 > ;;
 > ;; opening "tuvalu.rkt" in DrRacket will make online syntax
 > ;; check eat all of your memory
 > 
 > ;; main.rkt
 > #lang racket
 > 
 > (module reader syntax/module-reader
 >   racket/base
 >   #:read literal-read
 >   #:read-syntax literal-read-syntax
 >   (require "literal.rkt"))
 > 
 > ;; literal.rkt
 > #lang racket
 > (require syntax/strip-context)
 >  
 > (provide literal-read literal-read-syntax)
 >  
 > (define (literal-read in)
 >   (syntax->datum
 >    (literal-read-syntax #f in)))
 >  
 > (define (literal-read-syntax src in)
 >   (with-syntax ([str (port->string in)])
 >     (strip-context
 >      #'(module anything racket
 >          (provide data)
 >          (define data 'str)))))
 > 
 > ;; tuvalu.rkt
 > #lang lang-test
 > Technology!
 > System!
 > Perfect!
 > 
 > *** Environment:
 > unix "Linux calcifer 3.2.0-2-amd64 #1 SMP Tue Mar 20 18:36:37 UTC 2012 x86_64 
 > GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 233181952
 > Links: (links) = ("lang-test" "assignments" "sweet" "class" "pgf-dc" 
 > "drracket-vim-tool" "taglib" "book" "rash" "racket-gst"); (links #:user? #f) = 
 > (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > 
 > 
 > Collections:
 > ("/home/asumu/.racket/5.3.0.2/collects"
 >  ("info-domain"))
 > ("/home/asumu/plt/current/collects"
 >  ("teachpack" "handin-client" "planet" "picturing-programs" "mred" "images" 
 > "redex" "srpersist" "slideshow" "htdp" "data" "mzscheme" "scribblings" "ffi" 
 > "lang" "help" "racklog" "games" "lazy" "typed-scheme" "guibuilder" "version" 
 > "mrlib" "openssl" "scribble" "launcher" "profile" "unstable" "errortrace" 
 > "drscheme" "wxme" ".gitignore" "waterworld" "plai" "db" "datalog" "at-exp" 
 > "eopl" "typed" "test-box-recovery" "web-server" "scheme" "json" "stepper" 
 > "setup" "file" "embedded-gui" "tests" "deinprogramm" "rackunit" "typed-racket" 
 > "repo-time-stamp" "schemeunit" "xrepl" "drracket" "srfi" "compiler" 
 > "handin-server" "r6rs" "reader" "config" "meta" "html" "gui-debugger" 
 > "readline" "syntax-color" "hierlist" "info-domain" "string-constants" "plot" 
 > "sirmail" "trace" "r5rs" "macro-debugger" "honu" "preprocessor" "mysterx" 
 > "algol60" "parser-tools" "2htdp" "slatex" "icons" "defaults" "swindle" "s-exp" 
 > "xml" "make" "raco" "rnrs" "browser" "racket" "frtime" "net" "graphics" 
 > "tex2page" "combi!
 >  nator-parser" "mzcom" "texpict" "sgl" "test-engine" "scriblib" "framework" 
 > "mzlib" "dynext" "syntax"))
 > 
 > Computer Language: (("Determine language from source") (#(#t print 
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) 
 > (test))))
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: asumu@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12728: Submodule-based #lang makes DrRacket get stuck
Date: Tue, 24 Apr 2012 19:23:03 -0500

 Yes, DrRacket does not have a timeout or anything like that when
 trying to get information from the reader. It probably should.
 
 Robby
 
 On Tue, Apr 24, 2012 at 5:38 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > The `syntax/module-reader' language applies the given readers
 > repeatedly until they produce `eof', unless you specify
 > `#:whole-body-readers? #t'. The `literal-read-syntax' below never
 > produces `eof', so that's why memory use is unbounded.
 >
 > I'm not clear on whether there's a DrRacket issue here (i.e., whether
 > it should somehow avoid using unbounded memory due to a bad reader).
 >
 > At Tue, 24 Apr 2012 11:24:02 -0400, asumu@ccs.neu.edu wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12728
 >>
 >> Reported by Asumu Takikawa for release: 5.3.0.2--2012-04-24(555f85a/g)
 >>
 >> *** Description:
 >> I tried to remix the #lang reader example from the docs to use the new
 >> submodule-based #lang (code attached below). Even just opening the
 >> "tuvalu.rkt" module makes DrRacket use up all memory.
 >>
 >> I'm not sure this is a bug, but I didn't see anything that should cause
 >> this to happen in the code.
 >>
 >> *** How to repeat:
 >> ;; put the following files in a lang-test collect
 >> ;;
 >> ;; opening "tuvalu.rkt" in DrRacket will make online syntax
 >> ;; check eat all of your memory
 >>
 >> ;; main.rkt
 >> #lang racket
 >>
 >> (module reader syntax/module-reader
 >>   racket/base
 >>   #:read literal-read
 >>   #:read-syntax literal-read-syntax
 >>   (require "literal.rkt"))
 >>
 >> ;; literal.rkt
 >> #lang racket
 >> (require syntax/strip-context)
 >>
 >> (provide literal-read literal-read-syntax)
 >>
 >> (define (literal-read in)
 >>   (syntax->datum
 >>    (literal-read-syntax #f in)))
 >>
 >> (define (literal-read-syntax src in)
 >>   (with-syntax ([str (port->string in)])
 >>     (strip-context
 >>      #'(module anything racket
 >>          (provide data)
 >>          (define data 'str)))))
 >>
 >> ;; tuvalu.rkt
 >> #lang lang-test
 >> Technology!
 >> System!
 >> Perfect!
 >>
 >> *** Environment:
 >> unix "Linux calcifer 3.2.0-2-amd64 #1 SMP Tue Mar 20 18:36:37 UTC 2012 x86_64
 >> GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 233181952
 >> Links: (links) = ("lang-test" "assignments" "sweet" "class" "pgf-dc"
 >> "drracket-vim-tool" "taglib" "book" "rash" "racket-gst"); (links #:user? #f) =
 >> (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/asumu/.racket/5.3.0.2/collects"
 >>  ("info-domain"))
 >> ("/home/asumu/plt/current/collects"
 >>  ("teachpack" "handin-client" "planet" "picturing-programs" "mred" "images"
 >> "redex" "srpersist" "slideshow" "htdp" "data" "mzscheme" "scribblings" "ffi"
 >> "lang" "help" "racklog" "games" "lazy" "typed-scheme" "guibuilder" "version"
 >> "mrlib" "openssl" "scribble" "launcher" "profile" "unstable" "errortrace"
 >> "drscheme" "wxme" ".gitignore" "waterworld" "plai" "db" "datalog" "at-exp"
 >> "eopl" "typed" "test-box-recovery" "web-server" "scheme" "json" "stepper"
 >> "setup" "file" "embedded-gui" "tests" "deinprogramm" "rackunit" "typed-racket"
 >> "repo-time-stamp" "schemeunit" "xrepl" "drracket" "srfi" "compiler"
 >> "handin-server" "r6rs" "reader" "config" "meta" "html" "gui-debugger"
 >> "readline" "syntax-color" "hierlist" "info-domain" "string-constants" "plot"
 >> "sirmail" "trace" "r5rs" "macro-debugger" "honu" "preprocessor" "mysterx"
 >> "algol60" "parser-tools" "2htdp" "slatex" "icons" "defaults" "swindle" "s-exp"
 >> "xml" "make" "raco" "rnrs" "browser" "racket" "frtime" "net" "graphics"
 >> "tex2page" "combi!
 >>  nator-parser" "mzcom" "texpict" "sgl" "test-engine" "scriblib" "framework"
 >> "mzlib" "dynext" "syntax"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print
 >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >> (test))))
 

