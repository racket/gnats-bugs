From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Apr  5 12:49:14 2012
Received: from mail-yx0-f172.google.com (mail-yx0-f172.google.com [209.85.213.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q35GnB51013993
	for <bugs@bugs.plt-scheme.org>; Thu, 5 Apr 2012 12:49:11 -0400
Message-Id: <201204051648.q35Gmxs3013985@champlain.ccs.neu.edu>
Date: Thu, 5 Apr 2012 12:48:59 -0400
From: dyoo@hashcollision.org
To: bugs@racket-lang.org
Subject: Zero-width unicode space character is treated as identifier character

>Number:         12683
>Category:       drscheme
>Synopsis:       Zero-width unicode space character is treated as identifier character
>Class:          sw-bug
>Responsible:    dyoo
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Apr 05 12:52:01 -0400 2012
>Closed-Date:    Thu Feb 14 15:24:50 -0500 2013
>Last-Modified:  Thu Feb 14 15:24:50 -0500 2013
>Originator:     Danny Yoo
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
Linux i686 / Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.8 (KHTML, like Gecko) Chrome/17.0.932.0 Safari/535.8
>Description:
Reported by Emmanuel Schanzer: the \U200B character is being treated as an identifier chracter, so that when programs include it, the error message responds that it's an unbound identifier.

Here's the string content of such a buggy file:



> (file->string "bad.rkt")
";; The first three lines of this file were inserted by DrRacket. They record metadata\n;; about the language level of this file in a form that our tools can easily process.\n#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname bad) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))\n(define (times m n)\n  (* m n))\u200B\n"




When executed, the error produced is:

################################################
kui ~/Downloads $ racket bad.rkt 
bad.rkt:5:10: â: this variable is not defined in: â
################################################


>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Danny Yoo <dyoo@cs.wpi.edu>
To: dyoo@hashcollision.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org,
        ryanofsky@google.com, gremio@acm.org
Subject: Re: [racket-bug] all/12683: Zero-width unicode space character is
 treated as identifier character
Date: Thu, 5 Apr 2012 13:00:43 -0400

 >  A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12683
 
 > Reported by Emmanuel Schanzer: the \U200B character is being
 > treated as an identifier character, so that when programs include it,
 > the error message responds that it's an unbound identifier.
 
 
 Comment: follow ups to this should also include Russell Yanofsky and
 Gregory Martin, who identified this problem.  I'll add them to CC.
From: Danny Yoo <dyoo@cs.wpi.edu>
To: bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org,
        ryanofsky@google.com, gremio@acm.org
Subject: Re: [racket-bug] all/12683: Zero-width unicode space character is
 treated as identifier character
Date: Wed, 11 Apr 2012 17:18:48 -0400

 On Thu, Apr 5, 2012 at 1:00 PM, Danny Yoo <dyoo@cs.wpi.edu> wrote:
 >>  A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12683
 >
 >> Reported by Emmanuel Schanzer: the \U200B character is being
 >> treated as an identifier character, so that when programs include it,
 >> the error message responds that it's an unbound identifier.
 >
 > Comment: follow ups to this should also include Russell Yanofsky and
 > Gregory Martin, who identified this problem.  I'll add them to CC.
 
 
 One of the issues is that the Unicode standard itself does not
 consider the zero-width space character to have the "Zs", "Zl", or
 "Zp" attributes, which Racket uses to determine whether or not a
 character should be treated as whitespace or not.
 
     (from src/racket/src/mk-uchar.rkt)
 
 The current entry in the Unicode 4.0 standard for 200b says:
 
     200B;ZERO WIDTH SPACE;Cf;0;BN;;;;;N;;;;;
 
     (http://www.unicode.org/Public/UNIDATA/UnicodeData.txt)
 
 although, historically, it used to be catagorized as a "Zs":
 
       #<<EOF
 Occasionally, a character property value is changed to prevent
 incorrect generalizations about a character's use based on its nominal
 property values. For example, U+200B ZERO WIDTH SPACE was originally
 classified as a space character (General_Category=Zs), but it was
 reclassified as a Format character (General_Category=Cf) to clearly
 distinguish it from space characters in its function as a format
 control for line breaking.
 EOF
 
     (section 2.3.1 of http://www.unicode.org/reports/tr44/)
 
 
 This is noted in the test cases in collects/tests/racket/unicode.rktl,
 so Racket's treatment of #\u200b is deliberate, and I think from a
 technical point of view, Racket's doing the right thing.
 
 
 That said, this is nasty for beginners who copy and paste code from
 the Web into DrRacket.  Perhaps DrRacket could filter out these
 characters when doing the copy-and-paste operation?
 
From: Gregory Marton <gremio@acm.org>
To: Danny Yoo <dyoo@cs.wpi.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org, ryanofsky@google.com
Subject: Re: [racket-bug] all/12683: Zero-width unicode space character is
 treated as identifier character
Date: Wed, 11 Apr 2012 19:08:51 -0400

 --e89a8ff25350d1997904bd6f535c
 Content-Type: text/plain; charset=ISO-8859-1
 
 So apparently:
 
 Format characters are characters that do not have a visible appearance, but
 may have an effect on the appearance or behavior of neighboring characters.
 For example, U+200C ZERO WIDTH
 NON-JOINER<http://en.wikipedia.org/wiki/Zero-width_non-joiner>and
 U+200D ZERO
 WIDTH JOINER <http://en.wikipedia.org/wiki/Zero-width_joiner> may be used
 to change the default shaping behavior of adjacent characters (e.g. to
 inhibit ligatures or request ligature formation). There are 141 format
 characters in Unicode 6.1.
 The trouble was that it was hard to find and remove.  Thoughts:
 * Make it easier to find it with a line and character number in the error
 message.
 * Make it easier to find by marking any identifier made entirely of format
 characters with a visible box.
 * Special-case some of these format characters as whitespace anyway,
 because most users will be less surprised by that than by this.
 * Offer to find/replace format characters as a class, rather than hoping
 that we realize we can copy/paste from the error message into the find box
 -- can we?
 * Offer to show code point values in the entire window, both definitions
 and interactions, either in addition to or instead of their usual
 appearance, at least for characters that do not have a visible glyph.
 
 I feel like changing what you copy/paste is a surprising and perhaps
 frustrating thing to do.
 
 Thanks for looking into it!
 Grem
 
 On Wed, Apr 11, 2012 at 17:18, Danny Yoo <dyoo@cs.wpi.edu> wrote:
 
 > On Thu, Apr 5, 2012 at 1:00 PM, Danny Yoo <dyoo@cs.wpi.edu> wrote:
 > >>  A new problem report is waiting at
 > >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12683
 > >
 > >> Reported by Emmanuel Schanzer: the \U200B character is being
 > >> treated as an identifier character, so that when programs include it,
 > >> the error message responds that it's an unbound identifier.
 > >
 > > Comment: follow ups to this should also include Russell Yanofsky and
 > > Gregory Martin, who identified this problem.  I'll add them to CC.
 >
 >
 > One of the issues is that the Unicode standard itself does not
 > consider the zero-width space character to have the "Zs", "Zl", or
 > "Zp" attributes, which Racket uses to determine whether or not a
 > character should be treated as whitespace or not.
 >
 >    (from src/racket/src/mk-uchar.rkt)
 >
 > The current entry in the Unicode 4.0 standard for 200b says:
 >
 >    200B;ZERO WIDTH SPACE;Cf;0;BN;;;;;N;;;;;
 >
 >    (http://www.unicode.org/Public/UNIDATA/UnicodeData.txt)
 >
 > although, historically, it used to be catagorized as a "Zs":
 >
 >      #<<EOF
 > Occasionally, a character property value is changed to prevent
 > incorrect generalizations about a character's use based on its nominal
 > property values. For example, U+200B ZERO WIDTH SPACE was originally
 > classified as a space character (General_Category=Zs), but it was
 > reclassified as a Format character (General_Category=Cf) to clearly
 > distinguish it from space characters in its function as a format
 > control for line breaking.
 > EOF
 >
 >    (section 2.3.1 of http://www.unicode.org/reports/tr44/)
 >
 >
 > This is noted in the test cases in collects/tests/racket/unicode.rktl,
 > so Racket's treatment of #\u200b is deliberate, and I think from a
 > technical point of view, Racket's doing the right thing.
 >
 >
 > That said, this is nasty for beginners who copy and paste code from
 > the Web into DrRacket.  Perhaps DrRacket could filter out these
 > characters when doing the copy-and-paste operation?
 >
 
 
 
 -- 
 Gregory A. Marton  617-858-0775
 http://goo.gl/Ne09o
 http://csail.mit.edu/~gremio
 
 --e89a8ff25350d1997904bd6f535c
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 <p>So apparently:<br></p><p style=3D"margin-left:40px">Format characters ar=
 e characters that do not have a visible=20
 appearance, but may have an effect on the appearance or behavior of=20
 neighboring characters. For example, U+200C <a href=3D"http://en.wikipedia.=
 org/wiki/Zero-width_non-joiner" title=3D"Zero-width non-joiner">ZERO WIDTH =
 NON-JOINER</a> and U+200D <a href=3D"http://en.wikipedia.org/wiki/Zero-widt=
 h_joiner" title=3D"Zero-width joiner">ZERO WIDTH JOINER</a>
  may be used to change the default shaping behavior of adjacent=20
 characters (e.g. to inhibit ligatures or request ligature formation).=20
 There are 141 format characters in Unicode 6.1.</p><div style=3D"margin-lef=
 t:40px">
 </div>The trouble was that it was hard to find and remove.=A0 Thoughts:<br>=
 * Make it easier to find it with a line and character number in the error m=
 essage.<br>* Make it easier to find by marking any identifier made entirely=
  of format characters with a visible box.<br>
 
 * Special-case some of these format characters as whitespace anyway, becaus=
 e most users will be less surprised by that than by this.<br>* Offer to fin=
 d/replace format characters as a class, rather than hoping that we realize =
 we can copy/paste from the error message into the find box -- can we?<br>
 
 * Offer to show code point values in the entire window, both definitions an=
 d interactions, either in addition to or instead of their usual appearance,=
  at least for characters that do not have a visible glyph. <br><br>I feel l=
 ike changing what you copy/paste is a surprising and perhaps frustrating th=
 ing to do.<br>
 
 <br>Thanks for looking into it!<br>Grem<br>
 <div class=3D"gmail_quote"><br>On Wed, Apr 11, 2012 at 17:18, Danny Yoo <sp=
 an dir=3D"ltr">&lt;<a href=3D"mailto:dyoo@cs.wpi.edu">dyoo@cs.wpi.edu</a>&g=
 t;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0=
  .8ex;border-left:1px #ccc solid;padding-left:1ex">
 
 <div class=3D"HOEnZb"><div class=3D"h5">On Thu, Apr 5, 2012 at 1:00 PM, Dan=
 ny Yoo &lt;<a href=3D"mailto:dyoo@cs.wpi.edu">dyoo@cs.wpi.edu</a>&gt; wrote=
 :<br>
 &gt;&gt; =A0A new problem report is waiting at<br>
 &gt;&gt; =A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D12683" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D12683</a><br>
 &gt;<br>
 &gt;&gt; Reported by Emmanuel Schanzer: the \U200B character is being<br>
 &gt;&gt; treated as an identifier character, so that when programs include =
 it,<br>
 &gt;&gt; the error message responds that it&#39;s an unbound identifier.<br=
 >
 &gt;<br>
 &gt; Comment: follow ups to this should also include Russell Yanofsky and<b=
 r>
 &gt; Gregory Martin, who identified this problem. =A0I&#39;ll add them to C=
 C.<br>
 <br>
 <br>
 </div></div>One of the issues is that the Unicode standard itself does not<=
 br>
 consider the zero-width space character to have the &quot;Zs&quot;, &quot;Z=
 l&quot;, or<br>
 &quot;Zp&quot; attributes, which Racket uses to determine whether or not a<=
 br>
 character should be treated as whitespace or not.<br>
 <br>
  =A0 =A0(from src/racket/src/mk-uchar.rkt)<br>
 <br>
 The current entry in the Unicode 4.0 standard for 200b says:<br>
 <br>
  =A0 =A0200B;ZERO WIDTH SPACE;Cf;0;BN;;;;;N;;;;;<br>
 <br>
  =A0 =A0(<a href=3D"http://www.unicode.org/Public/UNIDATA/UnicodeData.txt" =
 target=3D"_blank">http://www.unicode.org/Public/UNIDATA/UnicodeData.txt</a>=
 )<br>
 <br>
 although, historically, it used to be catagorized as a &quot;Zs&quot;:<br>
 <br>
  =A0 =A0 =A0#&lt;&lt;EOF<br>
 Occasionally, a character property value is changed to prevent<br>
 incorrect generalizations about a character&#39;s use based on its nominal<=
 br>
 property values. For example, U+200B ZERO WIDTH SPACE was originally<br>
 classified as a space character (General_Category=3DZs), but it was<br>
 reclassified as a Format character (General_Category=3DCf) to clearly<br>
 distinguish it from space characters in its function as a format<br>
 control for line breaking.<br>
 EOF<br>
 <br>
  =A0 =A0(section 2.3.1 of <a href=3D"http://www.unicode.org/reports/tr44/" =
 target=3D"_blank">http://www.unicode.org/reports/tr44/</a>)<br>
 <br>
 <br>
 This is noted in the test cases in collects/tests/racket/unicode.rktl,<br>
 so Racket&#39;s treatment of #\u200b is deliberate, and I think from a<br>
 technical point of view, Racket&#39;s doing the right thing.<br>
 <br>
 <br>
 That said, this is nasty for beginners who copy and paste code from<br>
 the Web into DrRacket. =A0Perhaps DrRacket could filter out these<br>
 characters when doing the copy-and-paste operation?<br>
 </blockquote></div><br><br clear=3D"all"><br>-- <br>Gregory A. Marton=A0 61=
 7-858-0775<br><a href=3D"http://goo.gl/Ne09o" target=3D"_blank">http://goo.=
 gl/Ne09o</a><br><a href=3D"http://csail.mit.edu/%7Egremio" target=3D"_blank=
 ">http://csail.mit.edu/~gremio</a><br>
 
 <br><br>
 
 --e89a8ff25350d1997904bd6f535c--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Gregory Marton <gremio@acm.org>
Cc: Danny Yoo <dyoo@cs.wpi.edu>, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org, ryanofsky@google.com
Subject: Re: [racket-bug] all/12683: Zero-width unicode space character is
 treated as identifier character
Date: Wed, 11 Apr 2012 19:06:36 -0500

 FWIW, we used to get many complaints about people copying and pasting
 from web pages that contain non-breaking space (which isn't treated as
 whitespace either) and then changed DrRacket so that it turns
 non-breaking spaces into regular spaces and we have not had any
 complaints about this behavior .. maybe 5 years ago we switched? I'm
 not too clear.
 
 So I think that probably changing copy/paste a little bit more here is
 probably the right approach.
 
 I'll also note that when you paste, DrRacket asks you if you're not
 pasting normalized (in the unicode sense) characters and offers to
 normalize them for you. Maybe that is a better approach? Is there a
 sense of normalization that would handle this kind of issue? (I don't
 see it in our libraries, but I'm not sure if that's enough of an
 answer.)
 
 Robby
 
 On Wed, Apr 11, 2012 at 6:08 PM, Gregory Marton <gremio@acm.org> wrote:
 > So apparently:
 >
 > Format characters are characters that do not have a visible appearance, but
 > may have an effect on the appearance or behavior of neighboring characters.
 > For example, U+200C ZERO WIDTH NON-JOINER and U+200D ZERO WIDTH JOINER may
 > be used to change the default shaping behavior of adjacent characters (e.g.
 > to inhibit ligatures or request ligature formation). There are 141 format
 > characters in Unicode 6.1.
 >
 > The trouble was that it was hard to find and remove.  Thoughts:
 > * Make it easier to find it with a line and character number in the error
 > message.
 > * Make it easier to find by marking any identifier made entirely of format
 > characters with a visible box.
 > * Special-case some of these format characters as whitespace anyway, because
 > most users will be less surprised by that than by this.
 > * Offer to find/replace format characters as a class, rather than hoping
 > that we realize we can copy/paste from the error message into the find box
 > -- can we?
 > * Offer to show code point values in the entire window, both definitions and
 > interactions, either in addition to or instead of their usual appearance, at
 > least for characters that do not have a visible glyph.
 >
 > I feel like changing what you copy/paste is a surprising and perhaps
 > frustrating thing to do.
 >
 > Thanks for looking into it!
 > Grem
 >
 >
 > On Wed, Apr 11, 2012 at 17:18, Danny Yoo <dyoo@cs.wpi.edu> wrote:
 >>
 >> On Thu, Apr 5, 2012 at 1:00 PM, Danny Yoo <dyoo@cs.wpi.edu> wrote:
 >> >>  A new problem report is waiting at
 >> >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12683
 >> >
 >> >> Reported by Emmanuel Schanzer: the \U200B character is being
 >> >> treated as an identifier character, so that when programs include it,
 >> >> the error message responds that it's an unbound identifier.
 >> >
 >> > Comment: follow ups to this should also include Russell Yanofsky and
 >> > Gregory Martin, who identified this problem.  I'll add them to CC.
 >>
 >>
 >> One of the issues is that the Unicode standard itself does not
 >> consider the zero-width space character to have the "Zs", "Zl", or
 >> "Zp" attributes, which Racket uses to determine whether or not a
 >> character should be treated as whitespace or not.
 >>
 >>    (from src/racket/src/mk-uchar.rkt)
 >>
 >> The current entry in the Unicode 4.0 standard for 200b says:
 >>
 >>    200B;ZERO WIDTH SPACE;Cf;0;BN;;;;;N;;;;;
 >>
 >>    (http://www.unicode.org/Public/UNIDATA/UnicodeData.txt)
 >>
 >> although, historically, it used to be catagorized as a "Zs":
 >>
 >>      #<<EOF
 >> Occasionally, a character property value is changed to prevent
 >> incorrect generalizations about a character's use based on its nominal
 >> property values. For example, U+200B ZERO WIDTH SPACE was originally
 >> classified as a space character (General_Category=Zs), but it was
 >> reclassified as a Format character (General_Category=Cf) to clearly
 >> distinguish it from space characters in its function as a format
 >> control for line breaking.
 >> EOF
 >>
 >>    (section 2.3.1 of http://www.unicode.org/reports/tr44/)
 >>
 >>
 >> This is noted in the test cases in collects/tests/racket/unicode.rktl,
 >> so Racket's treatment of #\u200b is deliberate, and I think from a
 >> technical point of view, Racket's doing the right thing.
 >>
 >>
 >> That said, this is nasty for beginners who copy and paste code from
 >> the Web into DrRacket.  Perhaps DrRacket could filter out these
 >> characters when doing the copy-and-paste operation?
 >
 >
 >
 >
 > --
 > Gregory A. Marton  617-858-0775
 > http://goo.gl/Ne09o
 > http://csail.mit.edu/~gremio
 >
 >
 
From: Gregory Marton <gremio@acm.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Danny Yoo <dyoo@cs.wpi.edu>, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org, ryanofsky@google.com
Subject: Re: [racket-bug] all/12683: Zero-width unicode space character is
 treated as identifier character
Date: Wed, 11 Apr 2012 20:16:48 -0400

 --f46d04463126c64ebf04bd704622
 Content-Type: text/plain; charset=ISO-8859-1
 
 I should emphasize that we didn't reach the problematic behavior by copying
 and pasting anything.  We somehow *typed* these by hand.  I still don't
 know how.
 
 Thanks,
 Grem
 
 On Wed, Apr 11, 2012 at 20:06, Robby Findler <robby@eecs.northwestern.edu>wrote:
 
 > FWIW, we used to get many complaints about people copying and pasting
 > from web pages that contain non-breaking space (which isn't treated as
 > whitespace either) and then changed DrRacket so that it turns
 > non-breaking spaces into regular spaces and we have not had any
 > complaints about this behavior .. maybe 5 years ago we switched? I'm
 > not too clear.
 >
 > So I think that probably changing copy/paste a little bit more here is
 > probably the right approach.
 >
 > I'll also note that when you paste, DrRacket asks you if you're not
 > pasting normalized (in the unicode sense) characters and offers to
 > normalize them for you. Maybe that is a better approach? Is there a
 > sense of normalization that would handle this kind of issue? (I don't
 > see it in our libraries, but I'm not sure if that's enough of an
 > answer.)
 >
 > Robby
 >
 > On Wed, Apr 11, 2012 at 6:08 PM, Gregory Marton <gremio@acm.org> wrote:
 > > So apparently:
 > >
 > > Format characters are characters that do not have a visible appearance,
 > but
 > > may have an effect on the appearance or behavior of neighboring
 > characters.
 > > For example, U+200C ZERO WIDTH NON-JOINER and U+200D ZERO WIDTH JOINER
 > may
 > > be used to change the default shaping behavior of adjacent characters
 > (e.g.
 > > to inhibit ligatures or request ligature formation). There are 141 format
 > > characters in Unicode 6.1.
 > >
 > > The trouble was that it was hard to find and remove.  Thoughts:
 > > * Make it easier to find it with a line and character number in the error
 > > message.
 > > * Make it easier to find by marking any identifier made entirely of
 > format
 > > characters with a visible box.
 > > * Special-case some of these format characters as whitespace anyway,
 > because
 > > most users will be less surprised by that than by this.
 > > * Offer to find/replace format characters as a class, rather than hoping
 > > that we realize we can copy/paste from the error message into the find
 > box
 > > -- can we?
 > > * Offer to show code point values in the entire window, both definitions
 > and
 > > interactions, either in addition to or instead of their usual
 > appearance, at
 > > least for characters that do not have a visible glyph.
 > >
 > > I feel like changing what you copy/paste is a surprising and perhaps
 > > frustrating thing to do.
 > >
 > > Thanks for looking into it!
 > > Grem
 > >
 > >
 > > On Wed, Apr 11, 2012 at 17:18, Danny Yoo <dyoo@cs.wpi.edu> wrote:
 > >>
 > >> On Thu, Apr 5, 2012 at 1:00 PM, Danny Yoo <dyoo@cs.wpi.edu> wrote:
 > >> >>  A new problem report is waiting at
 > >> >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12683
 > >> >
 > >> >> Reported by Emmanuel Schanzer: the \U200B character is being
 > >> >> treated as an identifier character, so that when programs include it,
 > >> >> the error message responds that it's an unbound identifier.
 > >> >
 > >> > Comment: follow ups to this should also include Russell Yanofsky and
 > >> > Gregory Martin, who identified this problem.  I'll add them to CC.
 > >>
 > >>
 > >> One of the issues is that the Unicode standard itself does not
 > >> consider the zero-width space character to have the "Zs", "Zl", or
 > >> "Zp" attributes, which Racket uses to determine whether or not a
 > >> character should be treated as whitespace or not.
 > >>
 > >>    (from src/racket/src/mk-uchar.rkt)
 > >>
 > >> The current entry in the Unicode 4.0 standard for 200b says:
 > >>
 > >>    200B;ZERO WIDTH SPACE;Cf;0;BN;;;;;N;;;;;
 > >>
 > >>    (http://www.unicode.org/Public/UNIDATA/UnicodeData.txt)
 > >>
 > >> although, historically, it used to be catagorized as a "Zs":
 > >>
 > >>      #<<EOF
 > >> Occasionally, a character property value is changed to prevent
 > >> incorrect generalizations about a character's use based on its nominal
 > >> property values. For example, U+200B ZERO WIDTH SPACE was originally
 > >> classified as a space character (General_Category=Zs), but it was
 > >> reclassified as a Format character (General_Category=Cf) to clearly
 > >> distinguish it from space characters in its function as a format
 > >> control for line breaking.
 > >> EOF
 > >>
 > >>    (section 2.3.1 of http://www.unicode.org/reports/tr44/)
 > >>
 > >>
 > >> This is noted in the test cases in collects/tests/racket/unicode.rktl,
 > >> so Racket's treatment of #\u200b is deliberate, and I think from a
 > >> technical point of view, Racket's doing the right thing.
 > >>
 > >>
 > >> That said, this is nasty for beginners who copy and paste code from
 > >> the Web into DrRacket.  Perhaps DrRacket could filter out these
 > >> characters when doing the copy-and-paste operation?
 > >
 > >
 > >
 > >
 > > --
 > > Gregory A. Marton  617-858-0775
 > > http://goo.gl/Ne09o
 > > http://csail.mit.edu/~gremio
 > >
 > >
 >
 
 
 
 -- 
 Gregory A. Marton  617-858-0775
 http://goo.gl/Ne09o
 http://csail.mit.edu/~gremio
 
 --f46d04463126c64ebf04bd704622
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 I should emphasize that we didn&#39;t reach the problematic behavior by cop=
 ying and pasting anything.=A0 We somehow *typed* these by hand.=A0 I still =
 don&#39;t know how. <br><br>Thanks,<br>Grem<br><br><div class=3D"gmail_quot=
 e">
 
 On Wed, Apr 11, 2012 at 20:06, Robby Findler <span dir=3D"ltr">&lt;<a href=
 =3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt;=
 </span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .=
 8ex;border-left:1px #ccc solid;padding-left:1ex">
 
 FWIW, we used to get many complaints about people copying and pasting<br>
 from web pages that contain non-breaking space (which isn&#39;t treated as<=
 br>
 whitespace either) and then changed DrRacket so that it turns<br>
 non-breaking spaces into regular spaces and we have not had any<br>
 complaints about this behavior .. maybe 5 years ago we switched? I&#39;m<br=
 >
 not too clear.<br>
 <br>
 So I think that probably changing copy/paste a little bit more here is<br>
 probably the right approach.<br>
 <br>
 I&#39;ll also note that when you paste, DrRacket asks you if you&#39;re not=
 <br>
 pasting normalized (in the unicode sense) characters and offers to<br>
 normalize them for you. Maybe that is a better approach? Is there a<br>
 sense of normalization that would handle this kind of issue? (I don&#39;t<b=
 r>
 see it in our libraries, but I&#39;m not sure if that&#39;s enough of an<br=
 >
 answer.)<br>
 <span class=3D"HOEnZb"><font color=3D"#888888"><br>
 Robby<br>
 </font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Wed, Apr 11, 2012 at 6:08 PM, Gregory Marton &lt;<a href=3D"mailto:gremi=
 o@acm.org">gremio@acm.org</a>&gt; wrote:<br>
 &gt; So apparently:<br>
 &gt;<br>
 &gt; Format characters are characters that do not have a visible appearance=
 , but<br>
 &gt; may have an effect on the appearance or behavior of neighboring charac=
 ters.<br>
 &gt; For example, U+200C ZERO WIDTH NON-JOINER and U+200D ZERO WIDTH JOINER=
  may<br>
 &gt; be used to change the default shaping behavior of adjacent characters =
 (e.g.<br>
 &gt; to inhibit ligatures or request ligature formation). There are 141 for=
 mat<br>
 &gt; characters in Unicode 6.1.<br>
 &gt;<br>
 &gt; The trouble was that it was hard to find and remove.=A0 Thoughts:<br>
 &gt; * Make it easier to find it with a line and character number in the er=
 ror<br>
 &gt; message.<br>
 &gt; * Make it easier to find by marking any identifier made entirely of fo=
 rmat<br>
 &gt; characters with a visible box.<br>
 &gt; * Special-case some of these format characters as whitespace anyway, b=
 ecause<br>
 &gt; most users will be less surprised by that than by this.<br>
 &gt; * Offer to find/replace format characters as a class, rather than hopi=
 ng<br>
 &gt; that we realize we can copy/paste from the error message into the find=
  box<br>
 &gt; -- can we?<br>
 &gt; * Offer to show code point values in the entire window, both definitio=
 ns and<br>
 &gt; interactions, either in addition to or instead of their usual appearan=
 ce, at<br>
 &gt; least for characters that do not have a visible glyph.<br>
 &gt;<br>
 &gt; I feel like changing what you copy/paste is a surprising and perhaps<b=
 r>
 &gt; frustrating thing to do.<br>
 &gt;<br>
 &gt; Thanks for looking into it!<br>
 &gt; Grem<br>
 &gt;<br>
 &gt;<br>
 &gt; On Wed, Apr 11, 2012 at 17:18, Danny Yoo &lt;<a href=3D"mailto:dyoo@cs=
 .wpi.edu">dyoo@cs.wpi.edu</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; On Thu, Apr 5, 2012 at 1:00 PM, Danny Yoo &lt;<a href=3D"mailto:dy=
 oo@cs.wpi.edu">dyoo@cs.wpi.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt;&gt; =A0A new problem report is waiting at<br>
 &gt;&gt; &gt;&gt; =A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D12683" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D12683</a><br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt; Reported by Emmanuel Schanzer: the \U200B character is be=
 ing<br>
 &gt;&gt; &gt;&gt; treated as an identifier character, so that when programs=
  include it,<br>
 &gt;&gt; &gt;&gt; the error message responds that it&#39;s an unbound ident=
 ifier.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Comment: follow ups to this should also include Russell Yanof=
 sky and<br>
 &gt;&gt; &gt; Gregory Martin, who identified this problem. =A0I&#39;ll add =
 them to CC.<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; One of the issues is that the Unicode standard itself does not<br>
 &gt;&gt; consider the zero-width space character to have the &quot;Zs&quot;=
 , &quot;Zl&quot;, or<br>
 &gt;&gt; &quot;Zp&quot; attributes, which Racket uses to determine whether =
 or not a<br>
 &gt;&gt; character should be treated as whitespace or not.<br>
 &gt;&gt;<br>
 &gt;&gt; =A0 =A0(from src/racket/src/mk-uchar.rkt)<br>
 &gt;&gt;<br>
 &gt;&gt; The current entry in the Unicode 4.0 standard for 200b says:<br>
 &gt;&gt;<br>
 &gt;&gt; =A0 =A0200B;ZERO WIDTH SPACE;Cf;0;BN;;;;;N;;;;;<br>
 &gt;&gt;<br>
 &gt;&gt; =A0 =A0(<a href=3D"http://www.unicode.org/Public/UNIDATA/UnicodeDa=
 ta.txt" target=3D"_blank">http://www.unicode.org/Public/UNIDATA/UnicodeData=
 .txt</a>)<br>
 &gt;&gt;<br>
 &gt;&gt; although, historically, it used to be catagorized as a &quot;Zs&qu=
 ot;:<br>
 &gt;&gt;<br>
 &gt;&gt; =A0 =A0 =A0#&lt;&lt;EOF<br>
 &gt;&gt; Occasionally, a character property value is changed to prevent<br>
 &gt;&gt; incorrect generalizations about a character&#39;s use based on its=
  nominal<br>
 &gt;&gt; property values. For example, U+200B ZERO WIDTH SPACE was original=
 ly<br>
 &gt;&gt; classified as a space character (General_Category=3DZs), but it wa=
 s<br>
 &gt;&gt; reclassified as a Format character (General_Category=3DCf) to clea=
 rly<br>
 &gt;&gt; distinguish it from space characters in its function as a format<b=
 r>
 &gt;&gt; control for line breaking.<br>
 &gt;&gt; EOF<br>
 &gt;&gt;<br>
 &gt;&gt; =A0 =A0(section 2.3.1 of <a href=3D"http://www.unicode.org/reports=
 /tr44/" target=3D"_blank">http://www.unicode.org/reports/tr44/</a>)<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; This is noted in the test cases in collects/tests/racket/unicode.r=
 ktl,<br>
 &gt;&gt; so Racket&#39;s treatment of #\u200b is deliberate, and I think fr=
 om a<br>
 &gt;&gt; technical point of view, Racket&#39;s doing the right thing.<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; That said, this is nasty for beginners who copy and paste code fro=
 m<br>
 &gt;&gt; the Web into DrRacket. =A0Perhaps DrRacket could filter out these<=
 br>
 &gt;&gt; characters when doing the copy-and-paste operation?<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; --<br>
 &gt; Gregory A. Marton=A0 <a href=3D"tel:617-858-0775" value=3D"+1617858077=
 5">617-858-0775</a><br>
 &gt; <a href=3D"http://goo.gl/Ne09o" target=3D"_blank">http://goo.gl/Ne09o<=
 /a><br>
 &gt; <a href=3D"http://csail.mit.edu/%7Egremio" target=3D"_blank">http://cs=
 ail.mit.edu/~gremio</a><br>
 &gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br><br clear=3D"all"><br>-- <br>Gregory A. =
 Marton=A0 617-858-0775<br><a href=3D"http://goo.gl/Ne09o" target=3D"_blank"=
 >http://goo.gl/Ne09o</a><br><a href=3D"http://csail.mit.edu/%7Egremio" targ=
 et=3D"_blank">http://csail.mit.edu/~gremio</a><br>
 
 <br><br>
 
 --f46d04463126c64ebf04bd704622--
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>,
        Gregory Marton <gremio@acm.org>
Cc: Danny Yoo <dyoo@cs.wpi.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org, ryanofsky@google.com
Subject: Re: [racket-bug] all/12683: Zero-width unicode space character is
 treated as identifier character
Date: Thu, 12 Apr 2012 11:35:18 -0400

 Yesterday, Gregory Marton wrote:
 > * Special-case some of these format characters as whitespace anyway,
 >   because most users will be less surprised by that than by this.
 
 IMO special cases that don't follow unicode is asking for trouble.  If
 only because they make such decisions based on issues like this.
 
 
 > * Offer to show code point values in the entire window, both
 >   definitions and interactions, either in addition to or instead of
 >   their usual appearance, at least for characters that do not have a
 >   visible glyph.
 
 I think that something like this is eventually the right way to help
 resolving such issues.  Perhaps something similar to the Emacs
 `find-file-literally' functionality that opens a file in a mode that
 uses only ascii for display, using "^" and "\" to format control and
 non-ascii characters.  This does leave the problem of figuring out the
 problem in the first place though, but I don't know of any good
 solution to that...  (It's the same with Emacs too.)  Maybe just some
 plugin that would find common potential problems via a bunch of
 heuristics, possibly making it kick in when there's either a read
 error or an unbound identifier error.
 
 
 > I feel like changing what you copy/paste is a surprising and perhaps
 > frustrating thing to do.
 
 +1 -- nbsp characters seem fine since they're getting popular (and
 used in the docs too), and since in code there's not much point in
 differentiating them from normal spaces in a code editor.  But adding
 more of these will eventually lead to bad surprises when using them is
 intentional.
 
 
 Yesterday, Robby Findler wrote:
 > FWIW, we used to get many complaints about people copying and
 > pasting from web pages that contain non-breaking space (which isn't
 > treated as whitespace either)
 
 It is now, no?
 
 
 > I'll also note that when you paste, DrRacket asks you if you're not
 > pasting normalized (in the unicode sense) characters and offers to
 > normalize them for you. Maybe that is a better approach? Is there a
 > sense of normalization that would handle this kind of issue? (I
 > don't see it in our libraries, but I'm not sure if that's enough of
 > an answer.)
 
 Because of the above, I think that asking about it is the right
 thing.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

From: Danny Yoo <dyoo@hashcollision.org>
To: bugs@racket-lang.org, dyoo@hashcollision.org, robby@racket-lang.org
Cc: 
Subject: Re: drscheme/12683: Zero-width unicode space character is treated as
 identifier character
Date: Thu, 14 Feb 2013 13:08:40 -0700

 Sorry about letting this drop.  It looks like Robby did the work on
 the string normalization dialog for DrRacket:
 
     http://docs.racket-lang.org/framework/Text.html#%28meth._%28%28%28lib._framework%2Fmain..rkt%29._text~3anormalize-paste~3c~25~3e%29._ask-normalize~3f%29%29
 
 
 However, string-normalize-nfkc doesn't touch zero-width spaces:
 
     > (string-normalize-nfkc "\u200b")
     "\u200B"
 
 Rather than change the definition of string-normalize-nfkc, can we
 update string-normalize so it also reduces "\u200B" to the empty
 string?  Something like this:
 
     https://github.com/dyoo/racket/tree/pr12683-2
From: Robby Findler <robby@eecs.northwestern.edu>
To: Danny Yoo <dyoo@hashcollision.org>
Cc: bugs <bugs@racket-lang.org>
Subject: Re: drscheme/12683: Zero-width unicode space character is treated as
 identifier character
Date: Thu, 14 Feb 2013 14:16:59 -0600

 --14dae93b59b6f27ec604d5b4f0d3
 Content-Type: text/plain; charset=UTF-8
 
 Sure! That commits looks good to me.
 
 Thanks.
 
 Robby
 
 
 On Thu, Feb 14, 2013 at 2:08 PM, Danny Yoo <dyoo@hashcollision.org> wrote:
 
 > Sorry about letting this drop.  It looks like Robby did the work on
 > the string normalization dialog for DrRacket:
 >
 >
 > http://docs.racket-lang.org/framework/Text.html#%28meth._%28%28%28lib._framework%2Fmain..rkt%29._text~3anormalize-paste~3c~25~3e%29._ask-normalize~3f%29%29
 >
 >
 > However, string-normalize-nfkc doesn't touch zero-width spaces:
 >
 >     > (string-normalize-nfkc "\u200b")
 >     "\u200B"
 >
 > Rather than change the definition of string-normalize-nfkc, can we
 > update string-normalize so it also reduces "\u200B" to the empty
 > string?  Something like this:
 >
 >     https://github.com/dyoo/racket/tree/pr12683-2
 >
 
 --14dae93b59b6f27ec604d5b4f0d3
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Sure! That commits looks good to me.<div><br></div><div>Th=
 anks.</div><div><br></div><div>Robby</div></div><div class=3D"gmail_extra">=
 <br><br><div class=3D"gmail_quote">On Thu, Feb 14, 2013 at 2:08 PM, Danny Y=
 oo <span dir=3D"ltr">&lt;<a href=3D"mailto:dyoo@hashcollision.org" target=
 =3D"_blank">dyoo@hashcollision.org</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">Sorry about letting this drop. =C2=A0It look=
 s like Robby did the work on<br>
 the string normalization dialog for DrRacket:<br>
 <br>
 =C2=A0 =C2=A0 <a href=3D"http://docs.racket-lang.org/framework/Text.html#%2=
 8meth._%28%28%28lib._framework%2Fmain..rkt%29._text~3anormalize-paste~3c~25=
 ~3e%29._ask-normalize~3f%29%29" target=3D"_blank">http://docs.racket-lang.o=
 rg/framework/Text.html#%28meth._%28%28%28lib._framework%2Fmain..rkt%29._tex=
 t~3anormalize-paste~3c~25~3e%29._ask-normalize~3f%29%29</a><br>
 
 <br>
 <br>
 However, string-normalize-nfkc doesn&#39;t touch zero-width spaces:<br>
 <br>
 =C2=A0 =C2=A0 &gt; (string-normalize-nfkc &quot;\u200b&quot;)<br>
 =C2=A0 =C2=A0 &quot;\u200B&quot;<br>
 <br>
 Rather than change the definition of string-normalize-nfkc, can we<br>
 update string-normalize so it also reduces &quot;\u200B&quot; to the empty<=
 br>
 string? =C2=A0Something like this:<br>
 <br>
 =C2=A0 =C2=A0 <a href=3D"https://github.com/dyoo/racket/tree/pr12683-2" tar=
 get=3D"_blank">https://github.com/dyoo/racket/tree/pr12683-2</a><br>
 </blockquote></div><br></div>
 
 --14dae93b59b6f27ec604d5b4f0d3--
Responsible changed from "robby" to "dyoo" by dyoo@racket-lang.org at Thu, 14 Feb 2013 15:24:50 -0500
Reason>>> A commit by dyoo@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/9ed78f2752
State changed from "open" to "closed" by dyoo@racket-lang.org at Thu, 14 Feb 2013 15:24:50 -0500
Reason>>> A commit by dyoo@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/9ed78f2752
  | Include zero-width-space in string-normalize.
  | 
  | Closes PR 12683.

