From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Sep 18 15:15:50 2011
Received: from mail-pz0-f48.google.com (mail-pz0-f48.google.com [209.85.210.48])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p8IJFjKk017398
	for <bugs@bugs.plt-scheme.org>; Sun, 18 Sep 2011 15:15:45 -0400
Message-Id: <201109181915.p8IJFe0d017392@champlain.ccs.neu.edu>
Date: Sun, 18 Sep 2011 15:15:40 -0400
From: Jonathan.Turner@colorado.edu
To: bugs@racket-lang.org
Subject: Ad hoc expression evaluation in DrRacket

>Number:         12211
>Category:       drscheme
>Synopsis:       Ad hoc expression evaluation in DrRacket
>Class:          change-request
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Sep 18 15:16:01 -0400 2011
>Closed-Date:    Thu Sep 22 11:52:03 -0400 2011
>Last-Modified:  Thu Sep 22 11:52:03 -0400 2011
>Originator:     Jonathan Turner
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.3
>Environment:
macosx "Darwin Jonathans-MacBook-Air.local 11.0.1 Darwin Kernel Version 11.0.1: Thu Jul 28 02:01:39 PDT 2011; root:xnu-1699.23.4~1/RELEASE_X86_64 x86_64 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 129989892

Collections:
("/Users/jonathan/Library/Racket/5.1.3/collects"
 (non-existent-path))
("/Applications/Racket v5.1.3/collects"
 ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
While you can Run and evaluate the entire definitions window, you can't seem to easily evaluate an arbitrary expression in the definitions window.  Emacs allows this (I believe it's with the C-x C-e shortcut), and it's pretty handy.  

Having a shortcut that evaluates the currently gray expression, which the user probably just completed typing, would be especially handy.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Jonathan.Turner@colorado.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Mon, 19 Sep 2011 09:35:00 -0400

 For the record, we consider this feature of Emacs Lisp/Scheme modes extremely undesirable based on years of experience. 
 
 http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html
 
 
 
 
 On Sep 18, 2011, at 3:16 PM, Jonathan.Turner@colorado.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12211
 > 
 > Reported by Jonathan Turner for release: 5.1.3
 > 
 > *** Description:
 > While you can Run and evaluate the entire definitions window, you can't seem to easily evaluate an arbitrary expression in the definitions window.  Emacs allows this (I believe it's with the C-x C-e shortcut), and it's pretty handy.  
 > 
 > Having a shortcut that evaluates the currently gray expression, which the user probably just completed typing, would be especially handy.
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > macosx "Darwin Jonathans-MacBook-Air.local 11.0.1 Darwin Kernel Version 11.0.1: Thu Jul 28 02:01:39 PDT 2011; root:xnu-1699.23.4~1/RELEASE_X86_64 x86_64 i386" (i386-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 129989892
 > 
 > Collections:
 > ("/Users/jonathan/Library/Racket/5.1.3/collects"
 > (non-existent-path))
 > ("/Applications/Racket v5.1.3/collects"
 > ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
 > 
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
 > 
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Mon, 19 Sep 2011 09:54:41 -0400

 On Sep 19, 2011, at 9:52 AM, Jonathan D. Turner wrote:
 
 > On Mon, Sep 19, 2011 at 7:35 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >> 
 >> For the record, we consider this feature of Emacs Lisp/Scheme modes extremely undesirable based on years of experience.
 >> 
 >> http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html
 > 
 > Perhaps a compromise: a command to evaluate the buffer up to the
 > cursor (definitions after the cursor need not run in this mode).
 > 
 > I'll grant that some percentage of users will be confused by even
 > this, but perhaps this confusion can be mitigated.  Some possibilities
 > in that regard
 > 
 >  * Isabelle uses a highlighting showing what part of the current
 > buffer has been evaluated in a proof.  Maybe DrRacket could highlight
 > what had been sent to the repl, giving the user a visual cue when they
 > haven't hit 'Run' recently
 >  * Similarly, perhaps a red/green or symbolic indicator along the
 > side to show what had been sent to the repl
 > 
 > The issue of notifying the user what hasn't yet been sent to the repl
 > is orthogonal and perhaps worth a separate thread (if one hasn't been
 > started already).
 
 
 These are indeed great proposals. 
 
 As you may know, DrACUla (our ACL2 theorem prover in DrRacket) uses
 just this strategy. The part of the definitions window that is verified
 is highlighted in green. If you edit it, the color is rolled back. With
 places we could implement this concurrently and have the repl ready by 
 the time you click Run. 
 
 Thanks for the inspirational note. 
From: "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Mon, 19 Sep 2011 07:52:26 -0600

 On Mon, Sep 19, 2011 at 7:35 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > For the record, we consider this feature of Emacs Lisp/Scheme modes extremely undesirable based on years of experience.
 >
 > http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html
 
 Perhaps a compromise: a command to evaluate the buffer up to the
 cursor (definitions after the cursor need not run in this mode).
 
 I'll grant that some percentage of users will be confused by even
 this, but perhaps this confusion can be mitigated.  Some possibilities
 in that regard
 
   * Isabelle uses a highlighting showing what part of the current
 buffer has been evaluated in a proof.  Maybe DrRacket could highlight
 what had been sent to the repl, giving the user a visual cue when they
 haven't hit 'Run' recently
   * Similarly, perhaps a red/green or symbolic indicator along the
 side to show what had been sent to the repl
 
 The issue of notifying the user what hasn't yet been sent to the repl
 is orthogonal and perhaps worth a separate thread (if one hasn't been
 started already).
 
 Jonathan

From: Robby Findler <robby@eecs.northwestern.edu>
To: "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Mon, 19 Sep 2011 08:56:35 -0500

 --00151747b5a216ab4104ad4bb6d9
 Content-Type: text/plain; charset=UTF-8
 
 How about, instead, a keyboard shortcut that comments out the remainder of
 the editor (from the current point to the end) and then you just "Run" after
 that?
 
 Robby
 
 On Monday, September 19, 2011, Jonathan D. Turner <
 Jonathan.Turner@colorado.edu> wrote:
 > On Mon, Sep 19, 2011 at 7:35 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> For the record, we consider this feature of Emacs Lisp/Scheme modes
 extremely undesirable based on years of experience.
 >>
 >> http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html
 >
 > Perhaps a compromise: a command to evaluate the buffer up to the
 > cursor (definitions after the cursor need not run in this mode).
 >
 > I'll grant that some percentage of users will be confused by even
 > this, but perhaps this confusion can be mitigated.  Some possibilities
 > in that regard
 >
 >  * Isabelle uses a highlighting showing what part of the current
 > buffer has been evaluated in a proof.  Maybe DrRacket could highlight
 > what had been sent to the repl, giving the user a visual cue when they
 > haven't hit 'Run' recently
 >  * Similarly, perhaps a red/green or symbolic indicator along the
 > side to show what had been sent to the repl
 >
 > The issue of notifying the user what hasn't yet been sent to the repl
 > is orthogonal and perhaps worth a separate thread (if one hasn't been
 > started already).
 >
 > Jonathan
 >
 
 --00151747b5a216ab4104ad4bb6d9
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 How about, instead, a keyboard shortcut that comments out the remainder of =
 the editor (from the current point to the end) and then you just &quot;Run&=
 quot; after that?<br><br>Robby<br><br>On Monday, September 19, 2011, Jonath=
 an D. Turner &lt;<a href=3D"mailto:Jonathan.Turner@colorado.edu">Jonathan.T=
 urner@colorado.edu</a>&gt; wrote:<br>
 &gt; On Mon, Sep 19, 2011 at 7:35 AM, Matthias Felleisen<br>&gt; &lt;<a hre=
 f=3D"mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt; wrote:<br>&g=
 t;&gt;<br>&gt;&gt; For the record, we consider this feature of Emacs Lisp/S=
 cheme modes extremely undesirable based on years of experience.<br>
 &gt;&gt;<br>&gt;&gt; <a href=3D"http://blog.racket-lang.org/2009/03/drschem=
 e-repl-isnt-lisp.html">http://blog.racket-lang.org/2009/03/drscheme-repl-is=
 nt-lisp.html</a><br>&gt;<br>&gt; Perhaps a compromise: a command to evaluat=
 e the buffer up to the<br>
 &gt; cursor (definitions after the cursor need not run in this mode).<br>&g=
 t;<br>&gt; I&#39;ll grant that some percentage of users will be confused by=
  even<br>&gt; this, but perhaps this confusion can be mitigated. =C2=A0Some=
  possibilities<br>
 &gt; in that regard<br>&gt;<br>&gt; =C2=A0* Isabelle uses a highlighting sh=
 owing what part of the current<br>&gt; buffer has been evaluated in a proof=
 . =C2=A0Maybe DrRacket could highlight<br>&gt; what had been sent to the re=
 pl, giving the user a visual cue when they<br>
 &gt; haven&#39;t hit &#39;Run&#39; recently<br>&gt; =C2=A0* Similarly, perh=
 aps a red/green or symbolic indicator along the<br>&gt; side to show what h=
 ad been sent to the repl<br>&gt;<br>&gt; The issue of notifying the user wh=
 at hasn&#39;t yet been sent to the repl<br>
 &gt; is orthogonal and perhaps worth a separate thread (if one hasn&#39;t b=
 een<br>&gt; started already).<br>&gt;<br>&gt; Jonathan<br>&gt;
 
 --00151747b5a216ab4104ad4bb6d9--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Jonathan.Turner@colorado.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Mon, 19 Sep 2011 10:22:49 -0400

 While agreeing with Matthias about development style, I'll also note
 that DrRacket is impressively extensible, and so it would be possible
 to implement this as a plugin.
 
 On Mon, Sep 19, 2011 at 9:35 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > For the record, we consider this feature of Emacs Lisp/Scheme modes extremely undesirable based on years of experience.
 >
 > http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html
 >
 >
 >
 >
 > On Sep 18, 2011, at 3:16 PM, Jonathan.Turner@colorado.edu wrote:
 >
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12211
 >>
 >> Reported by Jonathan Turner for release: 5.1.3
 >>
 >> *** Description:
 >> While you can Run and evaluate the entire definitions window, you can't seem to easily evaluate an arbitrary expression in the definitions window.  Emacs allows this (I believe it's with the C-x C-e shortcut), and it's pretty handy.
 >>
 >> Having a shortcut that evaluates the currently gray expression, which the user probably just completed typing, would be especially handy.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> macosx "Darwin Jonathans-MacBook-Air.local 11.0.1 Darwin Kernel Version 11.0.1: Thu Jul 28 02:01:39 PDT 2011; root:xnu-1699.23.4~1/RELEASE_X86_64 x86_64 i386" (i386-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 129989892
 >>
 >> Collections:
 >> ("/Users/jonathan/Library/Racket/5.1.3/collects"
 >> (non-existent-path))
 >> ("/Applications/Racket v5.1.3/collects"
 >> ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
 >>
 >
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: John Clements <clements@brinckerhoff.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Tue, 20 Sep 2011 11:59:11 -0700

 On Sep 19, 2011, at 6:56 AM, Robby Findler wrote:
 
 > How about, instead, a keyboard shortcut that comments out the =
 remainder of the editor (from the current point to the end) and then you =
 just "Run" after that?
 
 Yes, I do this all the time.
 
 John
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: John Clements <clements@brinckerhoff.org>,
        "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Wed, 21 Sep 2011 13:27:37 -0500

 On Wed, Sep 21, 2011 at 1:24 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > Yesterday, John Clements wrote:
 >>
 >> On Sep 19, 2011, at 6:56 AM, Robby Findler wrote:
 >>
 >> > How about, instead, a keyboard shortcut that comments out the
 >> > remainder of the editor (from the current point to the end) and
 >> > then you just "Run" after that?
 >>
 >> Yes, I do this all the time.
 >
 > FWIW, I never do this (it's true that I use Emacs more, but my usage
 > pattern is very similar to DrR -- and I also never use the function
 > that sends a single expression to the repl either).
 >
 > Also, I don't think that such a shortcut would help WRT the more
 > popular manifestation of this complaint.
 
 Right, probably for that we want a 'copy the selection down to the
 repl and move me there' (also probably a 'copy the sexp before this to
 the repl and move me there' and/or '....after...').
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: John Clements <clements@brinckerhoff.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Wed, 21 Sep 2011 14:24:49 -0400

 Yesterday, John Clements wrote:
 > 
 > On Sep 19, 2011, at 6:56 AM, Robby Findler wrote:
 > 
 > > How about, instead, a keyboard shortcut that comments out the
 > > remainder of the editor (from the current point to the end) and
 > > then you just "Run" after that?
 > 
 > Yes, I do this all the time.
 
 FWIW, I never do this (it's true that I use Emacs more, but my usage
 pattern is very similar to DrR -- and I also never use the function
 that sends a single expression to the repl either).
 
 Also, I don't think that such a shortcut would help WRT the more
 popular manifestation of this complaint.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: John Clements <clements@brinckerhoff.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Wed, 21 Sep 2011 15:08:04 -0400

 On Sep 21, 2011, at 2:24 PM, Eli Barzilay wrote:
 
 > FWIW, I never do this (it's true that I use Emacs more, but my usage
 > pattern is very similar to DrR -- and I also never use the function
 > that sends a single expression to the repl either).
 
 
 Thank you. Once I had figured out transparency I did most of my work in Emacs with this 'restart' trick. 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: John Clements <clements@brinckerhoff.org>,
        "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Wed, 21 Sep 2011 15:23:19 -0400

 50 minutes ago, Robby Findler wrote:
 > 
 > Right, probably for that we want a 'copy the selection down to the
 > repl and move me there' (also probably a 'copy the sexp before this
 > to the repl and move me there' and/or '....after...').
 
 Yeah, that sounds closer.  (Still not something that I'd use
 though...)
 
 
 10 minutes ago, Matthias Felleisen wrote:
 > 
 > On Sep 21, 2011, at 2:24 PM, Eli Barzilay wrote:
 > 
 > > FWIW, I never do this (it's true that I use Emacs more, but my
 > > usage pattern is very similar to DrR -- and I also never use the
 > > function that sends a single expression to the repl either).
 > 
 > Thank you. Once I had figured out transparency I did most of my work
 > in Emacs with this 'restart' trick.
 
 My Emacs "solution" is that I've intentionally avoided all of these
 smart subprocess modes which allow sending things over to the repl.
 So in that regard I'm a very primitive user...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        John Clements <clements@brinckerhoff.org>,
        "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Wed, 21 Sep 2011 12:57:25 -0700

 I don't understand why we can't just implement this common request. Is  
 it technically difficult to evaluate the selected expression (And  
 maybe also paint a bit somewhere to indicate that an invisible  
 expession was evaluated)?
 
 
 
 On Sep 21, 2011, at 12:23 PM, Eli Barzilay <eli@barzilay.org> wrote:
 
 > 50 minutes ago, Robby Findler wrote:
 >>
 >> Right, probably for that we want a 'copy the selection down to the
 >> repl and move me there' (also probably a 'copy the sexp before this
 >> to the repl and move me there' and/or '....after...').
 >
 > Yeah, that sounds closer.  (Still not something that I'd use
 > though...)
 >
 >
 > 10 minutes ago, Matthias Felleisen wrote:
 >>
 >> On Sep 21, 2011, at 2:24 PM, Eli Barzilay wrote:
 >>
 >>> FWIW, I never do this (it's true that I use Emacs more, but my
 >>> usage pattern is very similar to DrR -- and I also never use the
 >>> function that sends a single expression to the repl either).
 >>
 >> Thank you. Once I had figured out transparency I did most of my work
 >> in Emacs with this 'restart' trick.
 >
 > My Emacs "solution" is that I've intentionally avoided all of these
 > smart subprocess modes which allow sending things over to the repl.
 > So in that regard I'm a very primitive user...
 >
 > -- 
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli  
 > Barzilay:
 >                    http://barzilay.org/                   Maze is  
 > Life!
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        John Clements <clements@brinckerhoff.org>,
        "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Wed, 21 Sep 2011 16:13:10 -0400

 Why should we implement something just because we can? Aren't there a lot of things we could add to Racket and don't? 
 
 
 On Sep 21, 2011, at 3:57 PM, Matthew Flatt wrote:
 
 > I don't understand why we can't just implement this common request. Is it technically difficult to evaluate the selected expression (And maybe also paint a bit somewhere to indicate that an invisible expession was evaluated)?
 > 
 > 
 > 
 > On Sep 21, 2011, at 12:23 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 
 >> 50 minutes ago, Robby Findler wrote:
 >>> 
 >>> Right, probably for that we want a 'copy the selection down to the
 >>> repl and move me there' (also probably a 'copy the sexp before this
 >>> to the repl and move me there' and/or '....after...').
 >> 
 >> Yeah, that sounds closer.  (Still not something that I'd use
 >> though...)
 >> 
 >> 
 >> 10 minutes ago, Matthias Felleisen wrote:
 >>> 
 >>> On Sep 21, 2011, at 2:24 PM, Eli Barzilay wrote:
 >>> 
 >>>> FWIW, I never do this (it's true that I use Emacs more, but my
 >>>> usage pattern is very similar to DrR -- and I also never use the
 >>>> function that sends a single expression to the repl either).
 >>> 
 >>> Thank you. Once I had figured out transparency I did most of my work
 >>> in Emacs with this 'restart' trick.
 >> 
 >> My Emacs "solution" is that I've intentionally avoided all of these
 >> smart subprocess modes which allow sending things over to the repl.
 >> So in that regard I'm a very primitive user...
 >> 
 >> -- 
 >>         ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>                   http://barzilay.org/                   Maze is Life!
 >> 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Eli Barzilay <eli@barzilay.org>, Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        John Clements <clements@brinckerhoff.org>,
        "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Wed, 21 Sep 2011 15:14:27 -0500

 --00151747609e15f5c704ad793933
 Content-Type: text/plain; charset=UTF-8
 
 I don't get how "paint a bit" would look. I get how putting something at the
 repl would look. And I don't see that "return; control-x; o" is painful (but
 maybe I'm wrong there).
 
 Comments?
 
 On Wednesday, September 21, 2011, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > I don't understand why we can't just implement this common request. Is it
 technically difficult to evaluate the selected expression (And maybe also
 paint a bit somewhere to indicate that an invisible expession was
 evaluated)?
 >
 >
 >
 > On Sep 21, 2011, at 12:23 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >
 >> 50 minutes ago, Robby Findler wrote:
 >>>
 >>> Right, probably for that we want a 'copy the selection down to the
 >>> repl and move me there' (also probably a 'copy the sexp before this
 >>> to the repl and move me there' and/or '....after...').
 >>
 >> Yeah, that sounds closer.  (Still not something that I'd use
 >> though...)
 >>
 >>
 >> 10 minutes ago, Matthias Felleisen wrote:
 >>>
 >>> On Sep 21, 2011, at 2:24 PM, Eli Barzilay wrote:
 >>>
 >>>> FWIW, I never do this (it's true that I use Emacs more, but my
 >>>> usage pattern is very similar to DrR -- and I also never use the
 >>>> function that sends a single expression to the repl either).
 >>>
 >>> Thank you. Once I had figured out transparency I did most of my work
 >>> in Emacs with this 'restart' trick.
 >>
 >> My Emacs "solution" is that I've intentionally avoided all of these
 >> smart subprocess modes which allow sending things over to the repl.
 >> So in that regard I'm a very primitive user...
 >>
 >> --
 >>         ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>                   http://barzilay.org/                   Maze is Life!
 >>
 >
 
 --00151747609e15f5c704ad793933
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I don&#39;t get how &quot;paint a bit&quot; would look. I get how putting s=
 omething at the repl would look. And I don&#39;t see that &quot;return; con=
 trol-x; o&quot; is painful (but maybe I&#39;m wrong there).<br><br>Comments=
 ?<br>
 <br>On Wednesday, September 21, 2011, Matthew Flatt &lt;<a href=3D"mailto:m=
 flatt@cs.utah.edu">mflatt@cs.utah.edu</a>&gt; wrote:<br>&gt; I don&#39;t un=
 derstand why we can&#39;t just implement this common request. Is it technic=
 ally difficult to evaluate the selected expression (And maybe also paint a =
 bit somewhere to indicate that an invisible expession was evaluated)?<br>
 &gt;<br>&gt;<br>&gt;<br>&gt; On Sep 21, 2011, at 12:23 PM, Eli Barzilay &lt=
 ;<a href=3D"mailto:eli@barzilay.org">eli@barzilay.org</a>&gt; wrote:<br>&gt=
 ;<br>&gt;&gt; 50 minutes ago, Robby Findler wrote:<br>&gt;&gt;&gt;<br>&gt;&=
 gt;&gt; Right, probably for that we want a &#39;copy the selection down to =
 the<br>
 &gt;&gt;&gt; repl and move me there&#39; (also probably a &#39;copy the sex=
 p before this<br>&gt;&gt;&gt; to the repl and move me there&#39; and/or &#3=
 9;....after...&#39;).<br>&gt;&gt;<br>&gt;&gt; Yeah, that sounds closer. =C2=
 =A0(Still not something that I&#39;d use<br>
 &gt;&gt; though...)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 10 minutes ago, Mat=
 thias Felleisen wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Sep 21, 2011, at =
 2:24 PM, Eli Barzilay wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; FWIW, I ne=
 ver do this (it&#39;s true that I use Emacs more, but my<br>
 &gt;&gt;&gt;&gt; usage pattern is very similar to DrR -- and I also never u=
 se the<br>&gt;&gt;&gt;&gt; function that sends a single expression to the r=
 epl either).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you. Once I had figured =
 out transparency I did most of my work<br>
 &gt;&gt;&gt; in Emacs with this &#39;restart&#39; trick.<br>&gt;&gt;<br>&gt=
 ;&gt; My Emacs &quot;solution&quot; is that I&#39;ve intentionally avoided =
 all of these<br>&gt;&gt; smart subprocess modes which allow sending things =
 over to the repl.<br>
 &gt;&gt; So in that regard I&#39;m a very primitive user...<br>&gt;&gt;<br>=
 &gt;&gt; --<br>&gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((lambda (x) (x x)) (la=
 mbda (x) (x x))) =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:<br>&gt;&gt=
 ; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a href=3D=
 "http://barzilay.org/">http://barzilay.org/</a> =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze is Life!<br>
 &gt;&gt;<br>&gt;
 
 --00151747609e15f5c704ad793933--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        John Clements <clements@brinckerhoff.org>,
        "Jonathan D. Turner" <Jonathan.Turner@colorado.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12211: Ad hoc expression evaluation in DrRacket
Date: Wed, 21 Sep 2011 15:21:05 -0500

 --00151747b642d723b304ad79503e
 Content-Type: text/plain; charset=UTF-8
 
 On Wednesday, September 21, 2011, Matthias Felleisen <matthias@ccs.neu.edu>
 wrote:
 >
 > Why should we implement something just because we can? Aren't there a lot
 of things we could add to Racket and don't?
 
 Yes but hopefully not things that are a) commonly requested and b) easy.
 
 Robby
 
 >
 > On Sep 21, 2011, at 3:57 PM, Matthew Flatt wrote:
 >
 >> I don't understand why we can't just implement this common request. Is it
 technically difficult to evaluate the selected expression (And maybe also
 paint a bit somewhere to indicate that an invisible expession was
 evaluated)?
 >>
 >>
 >>
 >> On Sep 21, 2011, at 12:23 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >>
 >>> 50 minutes ago, Robby Findler wrote:
 >>>>
 >>>> Right, probably for that we want a 'copy the selection down to the
 >>>> repl and move me there' (also probably a 'copy the sexp before this
 >>>> to the repl and move me there' and/or '....after...').
 >>>
 >>> Yeah, that sounds closer.  (Still not something that I'd use
 >>> though...)
 >>>
 >>>
 >>> 10 minutes ago, Matthias Felleisen wrote:
 >>>>
 >>>> On Sep 21, 2011, at 2:24 PM, Eli Barzilay wrote:
 >>>>
 >>>>> FWIW, I never do this (it's true that I use Emacs more, but my
 >>>>> usage pattern is very similar to DrR -- and I also never use the
 >>>>> function that sends a single expression to the repl either).
 >>>>
 >>>> Thank you. Once I had figured out transparency I did most of my work
 >>>> in Emacs with this 'restart' trick.
 >>>
 >>> My Emacs "solution" is that I've intentionally avoided all of these
 >>> smart subprocess modes which allow sending things over to the repl.
 >>> So in that regard I'm a very primitive user...
 >>>
 >>> --
 >>>         ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>>                   http://barzilay.org/                   Maze is Life!
 >>>
 >
 >
 
 --00151747b642d723b304ad79503e
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <br><br>On Wednesday, September 21, 2011, Matthias Felleisen &lt;<a href=3D=
 "mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt; wrote:<br>&gt;<b=
 r>&gt; Why should we implement something just because we can? Aren&#39;t th=
 ere a lot of things we could add to Racket and don&#39;t?<br>
 <br>Yes but hopefully not things that are a) commonly requested and b) easy=
 . <br><br>Robby<br><br>&gt;<br>&gt; On Sep 21, 2011, at 3:57 PM, Matthew Fl=
 att wrote:<br>&gt;<br>&gt;&gt; I don&#39;t understand why we can&#39;t just=
  implement this common request. Is it technically difficult to evaluate the=
  selected expression (And maybe also paint a bit somewhere to indicate that=
  an invisible expession was evaluated)?<br>
 &gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Sep 21, 2011, at 12:23 PM, =
 Eli Barzilay &lt;<a href=3D"mailto:eli@barzilay.org">eli@barzilay.org</a>&g=
 t; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; 50 minutes ago, Robby Findler wrote:<=
 br>
 &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Right, probably for that we want a &#3=
 9;copy the selection down to the<br>&gt;&gt;&gt;&gt; repl and move me there=
 &#39; (also probably a &#39;copy the sexp before this<br>&gt;&gt;&gt;&gt; t=
 o the repl and move me there&#39; and/or &#39;....after...&#39;).<br>
 &gt;&gt;&gt;<br>&gt;&gt;&gt; Yeah, that sounds closer. =C2=A0(Still not som=
 ething that I&#39;d use<br>&gt;&gt;&gt; though...)<br>&gt;&gt;&gt;<br>&gt;&=
 gt;&gt;<br>&gt;&gt;&gt; 10 minutes ago, Matthias Felleisen wrote:<br>&gt;&g=
 t;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; On Sep 21, 2011, at 2:24 PM, Eli Barzilay wrote:<br>&gt;&g=
 t;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; FWIW, I never do this (it&#39;s true tha=
 t I use Emacs more, but my<br>&gt;&gt;&gt;&gt;&gt; usage pattern is very si=
 milar to DrR -- and I also never use the<br>
 &gt;&gt;&gt;&gt;&gt; function that sends a single expression to the repl ei=
 ther).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thank you. Once I had figure=
 d out transparency I did most of my work<br>&gt;&gt;&gt;&gt; in Emacs with =
 this &#39;restart&#39; trick.<br>
 &gt;&gt;&gt;<br>&gt;&gt;&gt; My Emacs &quot;solution&quot; is that I&#39;ve=
  intentionally avoided all of these<br>&gt;&gt;&gt; smart subprocess modes =
 which allow sending things over to the repl.<br>&gt;&gt;&gt; So in that reg=
 ard I&#39;m a very primitive user...<br>
 &gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  ((lambda (x) (x x)) (lambda (x) (x x))) =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
 Eli Barzilay:<br>&gt;&gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 <a href=3D"http://barzilay.org/">http://barzilay.org/</a>=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze is Lif=
 e!<br>
 &gt;&gt;&gt;<br>&gt;<br>&gt;
 
 --00151747b642d723b304ad79503e--
State changed from "open" to "closed" by robby@racket-lang.org at Thu, 22 Sep 2011 11:52:03 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/b1a360be9d
