From ethan.aubin@pobox.com  Wed Oct  8 13:03:06 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id NAA02665
	for <bugs>; Wed, 8 Oct 2003 13:03:06 -0400
Message-Id: <200310081703.NAA02665@champlain.ccs.neu.edu>
Date: Wed, 8 Oct 2003 13:03:06 -0400
From: Ethan Aubin <ethan.aubin@pobox.com>
To: bugs@plt-scheme.org
Subject: contracts for pre/post conditions

>Number:         6487
>Category:       drscheme
>Synopsis:       better error messages for contract violations
>Class:          support
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Oct 08 13:05:01 -0400 2003
>Closed-Date:    Sat Mar 12 08:55:35 -0500 2005
>Last-Modified:  Sat Mar 12 08:55:35 -0500 2005
>Originator:     Ethan Aubin
>Organization:
titan
>Submitter-Id:   unknown
>Release:        205.4-cvs7oct2003
>Environment:
unix "SunOS theemim.ccs.neu.edu 5.9 Generic_112233-07 sun4u sparc SUNW,Sun-Blade-100" (sparc-solaris) (get-display-depth) = 24
Docs Installed:
("/home/aubineth/plt/collects/doc/schemeunit" "/proj/scheme/plt/collects/doc/help")
Collections: 
(("/proj/scheme/plt/collects" ("CVS" "afm" "algol60" "browser" "compiler" "cvs-time-stamp" "defaults" "dromedary" "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "games" "graphics" "guibuilder" "handin-server" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "profj" "readline" "reduction-semantics" "setup" "sgl" "sirmail" "slatex" "slibinit" "srfi" "srpersist" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xelda" "xml" "slideshow" "doc")) ("/home/aubineth/plt/collects" ("schemeunit" "doc")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") #6(#t constructor repeating-decimal #f #t none))
>Description:
Id like to use the contract library to check pre/postconditions on some functions. ->d could be used e.g.

(define precondition <)
(define postcondition >)
(define/contract foo (integer? integer? . ->d . 
                       (lambda (x y)
  					     	     (lambda (z)
						          (if (precondition x y) 
  							           (postcondition z y) 

 						              ;; what should go here, when the precondition fails?
						              #f))))
  (lambda (x y)
    (- y x)))                  

but the #f doesn't give a good error message. If I have several preconditions is there a preferred way 
to indicate which precondition fails?

The other downside to using ->d is that it executes the body of the function regardless of whether or 
not the precondition holds. Is there a way to fail earlier?
>How-To-Repeat:
>Fix:
>Release-Note:
>Audit-Trail:
Responsible-Changed-From-To: eli->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Mon Nov  3 19:25:00 2003
Responsible-Changed-Why:
    rbf

From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6487: contracts for pre/post conditions
Date: Mon, 3 Nov 2003 17:31:52 -0600

 On Oct 8, 2003, at 12:03 PM, Ethan Aubin wrote:
 > Id like to use the contract library to check pre/postconditions on 
 > some functions. ->d could be used e.g.
 >
 > (define precondition <)
 > (define postcondition >)
 > (define/contract foo (integer? integer? . ->d .
 >                        (lambda (x y)
 >   					     	     (lambda (z)
 > 						          (if (precondition x y)
 >   							           (postcondition z y)
 >
 >  						              ;; what should go here, when the precondition 
 > fails?
 > 						              #f))))
 >   (lambda (x y)
 >     (- y x)))
 >
 > but the #f doesn't give a good error message. If I have several 
 > preconditions is there a preferred way
 > to indicate which precondition fails?
 
 I've been working on the error messages, but returning #f is the best 
 you can do, for now. Sorry.
 
 > The other downside to using ->d is that it executes the body of the 
 > function regardless of whether or
 > not the precondition holds. Is there a way to fail earlier?
 
 I don't think it does that.
 
 Robby
 

From: Ethan Aubin <ethan.aubin@pobox.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6487: contracts for pre/post conditions
Date: Mon, 3 Nov 2003 22:10:40 -0500

 > I've been working on the error messages, but returning #f is the best 
 > you can do, for now. Sorry.
 
 I've been using something like e.g.
 
 (define/contract subtract
   (integer? integer? . ->d .
    (lambda (a b)
      (unless (> a b)
        (error 'subtract-client "Precondition: ~a <= ~b" a b))
      (lambda (result)
        (unless (> a result)
 	       (error 'subtract "Postcondition: ~a <= ~b" a b))
        integer?)))
   (lambda (a b)
     ...))
 
 which isn't too bad except the precondition blame isn't specified.
 
 > >The other downside to using ->d is that it executes the body of the 
 > >function regardless of whether or
 > >not the precondition holds. Is there a way to fail earlier?
 
 Your right, this was a side effect of me returning the postcondition
 lambda (which also checked the precondition) instead of
 failing.  Thanks for the help -- ethan.aubin@pobox.com

From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/6487: contracts for pre/post conditions
Date: Sun, 4 Jan 2004 23:39:44 -0600

 Judging from what you wrote, I think you realize that the code you
 wrote below doesn't actually use the contract library properly.
 
 I'm not sure what you were trying to do exactly, but if you were trying
 to compare the values of two arguments, you must use ->* and put all of
 the arguments into the list at the end. Then, you can extract the
 arguments of the list.
 
 Hope that helps.
 
 Robby
 
 
 ;;; --- You wrote the below: ----
 
 Id like to use the contract library to check pre/postconditions on some functions. ->d could be used e.g.
 
 (define precondition <)
 (define postcondition >)
 (define/contract foo (integer? integer? . ->d . 
                        (lambda (x y)
   					     	     (lambda (z)
 						          (if (precondition x y) 
   							           (postcondition z y) 
 
  						              ;; what should go here, when the precondition fails?
 						              #f))))
   (lambda (x y)
     (- y x)))                  
 
 but the #f doesn't give a good error message. If I have several preconditions is there a preferred way 
 to indicate which precondition fails?
 
 The other downside to using ->d is that it executes the body of the function regardless of whether or 
 not the precondition holds. Is there a way to fail earlier?
 
State changed from "open" to "closed" by robby at Sat, 12 Mar 2005 08:55:35 -0500
Reason>>> the contract library now supports raw pre/post-conditions on methods and 
functions and the error messages have been improved.

>Unformatted:
