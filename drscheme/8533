From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Feb 17 12:52:26 2007
Received: from nf-out-0910.google.com (nf-out-0910.google.com [64.233.182.188])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l1HHqPAL026984
	for <bugs@bugs.plt-scheme.org>; Sat, 17 Feb 2007 12:52:26 -0500
Message-Id: <200702171752.l1HHqM4O026979@champlain.ccs.neu.edu>
Date: Sat, 17 Feb 2007 12:52:22 -0500
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: script inputs in the langauge dialog should be tab-specific 

>Number:         8533
>Category:       drscheme
>Synopsis:       script inputs in the langauge dialog should be tab-specific
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Feb 17 12:55:02 -0500 2007
>Last-Modified:  Fri May 04 05:47:40 -0400 2007
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.7-svn7feb2007
>Environment:
macosx "Darwin europe.local 8.8.3 Darwin Kernel Version 8.8.3: Wed Oct 18 21:57:10 PDT 2006; root:xnu-792.15.4.obj~4/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
Human Language: english
(current-memory-use) 92722228

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/369.7/collects" non-existent-path) ("/Users/matthias/plt/collects" ".svn" "afm" "algol60" "browser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld!
 " "web-server" "wxme" "xelda" "xml"))
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #1("testing")))
>Description:
You can specify the command line inputs for scripts via
the language dialog. This implies that the command line
inputs are the __same__ for all modules that can be run
as scripts. I consider this a bug. [I originally wanted 
to request a 'change request' but I changed my mind instead.]
>How-To-Repeat:
Create a TAB with a module as a script. 
It succeeds if the command-line contains "A". 
Put "A" into the command line via the Dialog Details 

Create another TAB with a module as a script. 
It succeeds if the command-line contains "B." 
... 
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@cs.uchicago.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        goldberg@plt-scheme.org, dskippy@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 12:19:52 -0600

 The language settings are tab specific.
 
 But, there is only one thing saved across restarts of drscheme and so
 that default is what you get when you open a saved file or start a new
 tab.
 
 I don't see how to do better anyways -- where do you want to store the
 extra information?
 
 Robby
 
 PS: I have to consider this a change request. What you see is the
 intended behavior.
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, goldberg@plt-scheme.org, dskippy@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 13:24:00 -0500

 On Feb 17, 2007, at 1:19 PM, Robby Findler wrote:
 
 > The language settings are tab specific.
 >
 > But, there is only one thing saved across restarts of drscheme and so
 > that default is what you get when you open a saved file or start a new
 > tab.
 >
 > I don't see how to do better anyways -- where do you want to store the
 > extra information?
 
 
 As I said on the phone, I think you should have Casey implement this
 thing as a "mini buffer" that comes with a script tab.
 
 Indeed, I really think you want to have a "thing" that declares a
 module tab a "script" and drscheme saves it with the appropriate
 incantations and opens a small text buffer for adding the command
 line arguments. Indeed, I want to argue that you save those too
 and when you open the file, you put them back in place.
 
 Best of all I really think that all this fits with the current
 work on save formats PLUS creating executables from/for teaching
 languages.
 
 -- Matthias
 
 
 
 >
 > Robby
 >
 > PS: I have to consider this a change request. What you see is the
 > intended behavior.
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, goldberg@plt-scheme.org, dskippy@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 12:26:20 -0600

 On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > On Feb 17, 2007, at 1:19 PM, Robby Findler wrote:
 >
 > > The language settings are tab specific.
 > >
 > > But, there is only one thing saved across restarts of drscheme and so
 > > that default is what you get when you open a saved file or start a new
 > > tab.
 > >
 > > I don't see how to do better anyways -- where do you want to store the
 > > extra information?
 >
 >
 > As I said on the phone, I think you should have Casey implement this
 > thing as a "mini buffer" that comes with a script tab.
 
 That's not what I meant. Your PR is complaining about something else
 -- not a GUI change (and certainly not a research topic, I hope).
 
 > Indeed, I really think you want to have a "thing" that declares a
 > module tab a "script" and drscheme saves it with the appropriate
 > incantations and opens a small text buffer for adding the command
 > line arguments. Indeed, I want to argue that you save those too
 > and when you open the file, you put them back in place.
 
 You mean making up some kind of magic comment syntax for store the
 latest used commandlines for testing? That seems like you're
 encouraging avoiding test suites.
 
 > Best of all I really think that all this fits with the current
 > work on save formats PLUS creating executables from/for teaching
 > languages.
 
 It is a little bit different because this is not program text.
 
 >
 >
 > >
 > > Robby
 > >
 > > PS: I have to consider this a change request. What you see is the
 > > intended behavior.
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, goldberg@plt-scheme.org, dskippy@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 12:30:37 -0600

 Also, you don't want these commandline arguments to have any meaning
 outside of drscheme. That is, if I run the program as a script, you
 want the commandline arguments to come from the commandline, not the
 saved ones, no?
 
 So, in that sense, it seems very different than the teaching languages changes.
 
 (Also: there is no connection as far as overlap in work, either.)
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 15:15:48 -0500

 On Feb 17, 2007, at 1:26 PM, Robby Findler wrote:
 
 > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >>
 >> On Feb 17, 2007, at 1:19 PM, Robby Findler wrote:
 >>
 >> > The language settings are tab specific.
 >> >
 >> > But, there is only one thing saved across restarts of drscheme  
 >> and so
 >> > that default is what you get when you open a saved file or start  
 >> a new
 >> > tab.
 >> >
 >> > I don't see how to do better anyways -- where do you want to  
 >> store the
 >> > extra information?
 >>
 >>
 >> As I said on the phone, I think you should have Casey implement this
 >> thing as a "mini buffer" that comes with a script tab.
 >
 > That's not what I meant. Your PR is complaining about something else
 > -- not a GUI change (and certainly not a research topic, I hope).
 
 Correct, I am proposing a particular fix.
 
 
 >> Indeed, I really think you want to have a "thing" that declares a
 >> module tab a "script" and drscheme saves it with the appropriate
 >> incantations and opens a small text buffer for adding the command
 >> line arguments. Indeed, I want to argue that you save those too
 >> and when you open the file, you put them back in place.
 >
 > You mean making up some kind of magic comment syntax for store the
 > latest used commandlines for testing? That seems like you're
 > encouraging avoiding test suites.
 
 
 I don't think that this is the case at all. I want to ensure
 that the script runs properly on the files that I have developed.
 The tests have been developed independently.
 
 
 >> Best of all I really think that all this fits with the current
 >> work on save formats PLUS creating executables from/for teaching
 >> languages.
 >
 > It is a little bit different because this is not program text.
 
 Yes but it fits in.
 
 
 
 
 
 
 >
 >>
 >>
 >> >
 >> > Robby
 >> >
 >> > PS: I have to consider this a change request. What you see is the
 >> > intended behavior.
 >>
 >>
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 15:19:19 -0500

 On Feb 17, 2007, at 1:30 PM, Robby Findler wrote:
 
 > Also, you don't want these commandline arguments to have any meaning
 > outside of drscheme. That is, if I run the program as a script, you
 > want the commandline arguments to come from the commandline, not the
 > saved ones, no?
 
 Correct. But see previous email.
 
 Here is my specific example. I have a script that runs a
 test case. This is similar to the one that the students deliver.
 
 I have another script that runs lots of those, i.e.,
 it invokes the harness and feeds it tests and checks the
 output for correctness, etc.
 
 Just to make sure that things are working out, I want to
 supply the name of the former to the latter.
 
 > So, in that sense, it seems very different than the teaching  
 > languages changes.
 
 Yes.
 
 
 >
 > (Also: there is no connection as far as overlap in work, either.)
 >
 > Robby
 
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 14:21:03 -0600

 I'll make you a deal: you provide the parser for a module file (and
 some small para of docs about it for the manual) and I'll put it into
 DrScheme.
 
 Sound okay?
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 16:50:20 -0500

 What do you mean? A prototype? I don't know my way around wxme
 
 On Feb 17, 2007, at 3:21 PM, Robby Findler wrote:
 
 > I'll make you a deal: you provide the parser for a module file (and
 > some small para of docs about it for the manual) and I'll put it into
 > DrScheme.
 >
 > Sound okay?
 >
 > Robby
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 15:59:24 -0600

 No no -- you don't need to know your way around wxme. Just around
 either text%. Much simpler. Really.
 
 I consider the tricky part to be figuring out the format of the
 comment and parsing it out etc.
 
 So, I'm proposing that you do those parts, as just a little function
 you write yourself and I'll wire it into drscheme.
 
 PS: you'd also have to provide a function that takes an editor and
 inserts the comment into the editor (note that the comment might
 already be there).
 
 You might start with something ike this:
 
 (define (mk-editor filename)
   (define f (new frame% [label "Matthias's playground"]))
   (define t (new text%))
   (define ec (new editor-canvas% [parent f] [editor t]))
   (send t load-file filename)
   t)
 
 The function you provide me should operate on the same things that are
 returned by that function above.
 
 Proabably the methods that are interesting to you are:
 
   last-position
   paragraph-start-position ;; paragraphs are "line"s
   paragraph-end-position   ;; lines in the toolkit are word-wrapped things
   get-text
 
 It won't be hard to write, if you know what you want it to look like.
 
 Plus, you can even make a test suite! Use something lke this:
 
 (define (setup-test-case str)
   (let ([t (new text%)])
     (send t insert str)
     t))
 
 to make sample inputs to your function.
 
 Let me know if you have any questions, of course!
 
 PS: if you want to do regexp matching, you would create a port with
 open-input-text-editor (passing along a range, if appropriate) and
 then use regexp matching on the port. You can use
 regexp-match-positions to get back numbers that you can use with other
 methods on the text% object.
 
 Robby
 
 On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > What do you mean? A prototype? I don't know my way around wxme
 >
 > On Feb 17, 2007, at 3:21 PM, Robby Findler wrote:
 >
 > > I'll make you a deal: you provide the parser for a module file (and
 > > some small para of docs about it for the manual) and I'll put it into
 > > DrScheme.
 > >
 > > Sound okay?
 > >
 > > Robby
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 16:01:52 -0600

 PPS: WHen I say "consider difficult" I don't mean that in a technical
 sense. Its just that there tend to be lots of corner cases and I don't
 have a good sense of how to do that. If you know what you want, it
 should not be hard at all.
 
 Robby
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 16:13:07 -0600

 I don't understand.
 
 What is on the disk and what is in the drscheme window (or windows,
 including the new ones you're thinking of)?
 
 Robby
 
 On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > I was thinking of something rather different. I want to save
 > something like
 >
 > #! /bin/sh
 > #|
 > exec mzscheme -qu "$0" ${1+"$@"}
 > |#
 > (module test mzscheme
 >
 >    (current-command-line-arguments (vector "harness-for-player"
 > "TestPlayer"))
 >
 >    ...)
 >
 > to open a MODULE/SCRIPT tab that has two extra properties displayed:
 >
 >   1. its status as a script and that it is to be saved as such
 >   2. its current-command-line-arguments displayed as non-strings in a
 > "status" editor.
 >
 > -- Matthias
 >
 >
 >
 >
 >
 > On Feb 17, 2007, at 4:59 PM, Robby Findler wrote:
 >
 > > No no -- you don't need to know your way around wxme. Just around
 > > either text%. Much simpler. Really.
 > >
 > > I consider the tricky part to be figuring out the format of the
 > > comment and parsing it out etc.
 > >
 > > So, I'm proposing that you do those parts, as just a little function
 > > you write yourself and I'll wire it into drscheme.
 > >
 > > PS: you'd also have to provide a function that takes an editor and
 > > inserts the comment into the editor (note that the comment might
 > > already be there).
 > >
 > > You might start with something ike this:
 > >
 > > (define (mk-editor filename)
 > >  (define f (new frame% [label "Matthias's playground"]))
 > >  (define t (new text%))
 > >  (define ec (new editor-canvas% [parent f] [editor t]))
 > >  (send t load-file filename)
 > >  t)
 > >
 > > The function you provide me should operate on the same things that are
 > > returned by that function above.
 > >
 > > Proabably the methods that are interesting to you are:
 > >
 > >  last-position
 > >  paragraph-start-position ;; paragraphs are "line"s
 > >  paragraph-end-position   ;; lines in the toolkit are word-wrapped
 > > things
 > >  get-text
 > >
 > > It won't be hard to write, if you know what you want it to look like.
 > >
 > > Plus, you can even make a test suite! Use something lke this:
 > >
 > > (define (setup-test-case str)
 > >  (let ([t (new text%)])
 > >    (send t insert str)
 > >    t))
 > >
 > > to make sample inputs to your function.
 > >
 > > Let me know if you have any questions, of course!
 > >
 > > PS: if you want to do regexp matching, you would create a port with
 > > open-input-text-editor (passing along a range, if appropriate) and
 > > then use regexp matching on the port. You can use
 > > regexp-match-positions to get back numbers that you can use with other
 > > methods on the text% object.
 > >
 > > Robby
 > >
 > > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > >> What do you mean? A prototype? I don't know my way around wxme
 > >>
 > >> On Feb 17, 2007, at 3:21 PM, Robby Findler wrote:
 > >>
 > >> > I'll make you a deal: you provide the parser for a module file (and
 > >> > some small para of docs about it for the manual) and I'll put it
 > >> into
 > >> > DrScheme.
 > >> >
 > >> > Sound okay?
 > >> >
 > >> > Robby
 > >>
 > >>
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 17:10:37 -0500

 I was thinking of something rather different. I want to save  
 something like
 
 #! /bin/sh
 #|
 exec mzscheme -qu "$0" ${1+"$@"}
 |#
 (module test mzscheme
 
    (current-command-line-arguments (vector "harness-for-player"  
 "TestPlayer"))
 
    ...)
 
 to open a MODULE/SCRIPT tab that has two extra properties displayed:
 
   1. its status as a script and that it is to be saved as such
   2. its current-command-line-arguments displayed as non-strings in a  
 "status" editor.
 
 -- Matthias
 
 
 
 
 
 On Feb 17, 2007, at 4:59 PM, Robby Findler wrote:
 
 > No no -- you don't need to know your way around wxme. Just around
 > either text%. Much simpler. Really.
 >
 > I consider the tricky part to be figuring out the format of the
 > comment and parsing it out etc.
 >
 > So, I'm proposing that you do those parts, as just a little function
 > you write yourself and I'll wire it into drscheme.
 >
 > PS: you'd also have to provide a function that takes an editor and
 > inserts the comment into the editor (note that the comment might
 > already be there).
 >
 > You might start with something ike this:
 >
 > (define (mk-editor filename)
 >  (define f (new frame% [label "Matthias's playground"]))
 >  (define t (new text%))
 >  (define ec (new editor-canvas% [parent f] [editor t]))
 >  (send t load-file filename)
 >  t)
 >
 > The function you provide me should operate on the same things that are
 > returned by that function above.
 >
 > Proabably the methods that are interesting to you are:
 >
 >  last-position
 >  paragraph-start-position ;; paragraphs are "line"s
 >  paragraph-end-position   ;; lines in the toolkit are word-wrapped  
 > things
 >  get-text
 >
 > It won't be hard to write, if you know what you want it to look like.
 >
 > Plus, you can even make a test suite! Use something lke this:
 >
 > (define (setup-test-case str)
 >  (let ([t (new text%)])
 >    (send t insert str)
 >    t))
 >
 > to make sample inputs to your function.
 >
 > Let me know if you have any questions, of course!
 >
 > PS: if you want to do regexp matching, you would create a port with
 > open-input-text-editor (passing along a range, if appropriate) and
 > then use regexp matching on the port. You can use
 > regexp-match-positions to get back numbers that you can use with other
 > methods on the text% object.
 >
 > Robby
 >
 > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> What do you mean? A prototype? I don't know my way around wxme
 >>
 >> On Feb 17, 2007, at 3:21 PM, Robby Findler wrote:
 >>
 >> > I'll make you a deal: you provide the parser for a module file (and
 >> > some small para of docs about it for the manual) and I'll put it  
 >> into
 >> > DrScheme.
 >> >
 >> > Sound okay?
 >> >
 >> > Robby
 >>
 >>
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 16:19:39 -0600

 Oh! That's much more complicated that I had imagined.
 
 But that seems wrong, since it gives the impression that running the
 script will actually use the commandline, but it won't use the
 commandline. It will always use the same arguments.
 
 Robby
 
 On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > The thing below is in the file (modulo wxme).
 >
 > In drscheme, you see
 >
 >   (1) some annotation that suggests it's a script
 >   (2) a one-line editor between the def window and the button bar
 >       that displays the c-c-l-a content without quotes.
 >
 > In the definition buffer, you see
 >
 >   (module test mzscheme
 >
 >     ...)
 >
 > -- Matthias
 >
 >
 > On Feb 17, 2007, at 5:13 PM, Robby Findler wrote:
 >
 > > I don't understand.
 > >
 > > What is on the disk and what is in the drscheme window (or windows,
 > > including the new ones you're thinking of)?
 > >
 > > Robby
 > >
 > > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > >> I was thinking of something rather different. I want to save
 > >> something like
 > >>
 > >> #! /bin/sh
 > >> #|
 > >> exec mzscheme -qu "$0" ${1+"$@"}
 > >> |#
 > >> (module test mzscheme
 > >>
 > >>    (current-command-line-arguments (vector "harness-for-player"
 > >> "TestPlayer"))
 > >>
 > >>    ...)
 > >>
 > >> to open a MODULE/SCRIPT tab that has two extra properties displayed:
 > >>
 > >>   1. its status as a script and that it is to be saved as such
 > >>   2. its current-command-line-arguments displayed as non-strings in a
 > >> "status" editor.
 > >>
 > >> -- Matthias
 > >>
 > >>
 > >>
 > >>
 > >>
 > >> On Feb 17, 2007, at 4:59 PM, Robby Findler wrote:
 > >>
 > >> > No no -- you don't need to know your way around wxme. Just around
 > >> > either text%. Much simpler. Really.
 > >> >
 > >> > I consider the tricky part to be figuring out the format of the
 > >> > comment and parsing it out etc.
 > >> >
 > >> > So, I'm proposing that you do those parts, as just a little
 > >> function
 > >> > you write yourself and I'll wire it into drscheme.
 > >> >
 > >> > PS: you'd also have to provide a function that takes an editor and
 > >> > inserts the comment into the editor (note that the comment might
 > >> > already be there).
 > >> >
 > >> > You might start with something ike this:
 > >> >
 > >> > (define (mk-editor filename)
 > >> >  (define f (new frame% [label "Matthias's playground"]))
 > >> >  (define t (new text%))
 > >> >  (define ec (new editor-canvas% [parent f] [editor t]))
 > >> >  (send t load-file filename)
 > >> >  t)
 > >> >
 > >> > The function you provide me should operate on the same things
 > >> that are
 > >> > returned by that function above.
 > >> >
 > >> > Proabably the methods that are interesting to you are:
 > >> >
 > >> >  last-position
 > >> >  paragraph-start-position ;; paragraphs are "line"s
 > >> >  paragraph-end-position   ;; lines in the toolkit are word-wrapped
 > >> > things
 > >> >  get-text
 > >> >
 > >> > It won't be hard to write, if you know what you want it to look
 > >> like.
 > >> >
 > >> > Plus, you can even make a test suite! Use something lke this:
 > >> >
 > >> > (define (setup-test-case str)
 > >> >  (let ([t (new text%)])
 > >> >    (send t insert str)
 > >> >    t))
 > >> >
 > >> > to make sample inputs to your function.
 > >> >
 > >> > Let me know if you have any questions, of course!
 > >> >
 > >> > PS: if you want to do regexp matching, you would create a port with
 > >> > open-input-text-editor (passing along a range, if appropriate) and
 > >> > then use regexp matching on the port. You can use
 > >> > regexp-match-positions to get back numbers that you can use with
 > >> other
 > >> > methods on the text% object.
 > >> >
 > >> > Robby
 > >> >
 > >> > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > >> >> What do you mean? A prototype? I don't know my way around wxme
 > >> >>
 > >> >> On Feb 17, 2007, at 3:21 PM, Robby Findler wrote:
 > >> >>
 > >> >> > I'll make you a deal: you provide the parser for a module
 > >> file (and
 > >> >> > some small para of docs about it for the manual) and I'll put it
 > >> >> into
 > >> >> > DrScheme.
 > >> >> >
 > >> >> > Sound okay?
 > >> >> >
 > >> >> > Robby
 > >> >>
 > >> >>
 > >>
 > >>
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 17:17:23 -0500

 The thing below is in the file (modulo wxme).
 
 In drscheme, you see
 
   (1) some annotation that suggests it's a script
   (2) a one-line editor between the def window and the button bar
       that displays the c-c-l-a content without quotes.
 
 In the definition buffer, you see
 
   (module test mzscheme
 
     ...)
 
 -- Matthias
 
 
 On Feb 17, 2007, at 5:13 PM, Robby Findler wrote:
 
 > I don't understand.
 >
 > What is on the disk and what is in the drscheme window (or windows,
 > including the new ones you're thinking of)?
 >
 > Robby
 >
 > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> I was thinking of something rather different. I want to save
 >> something like
 >>
 >> #! /bin/sh
 >> #|
 >> exec mzscheme -qu "$0" ${1+"$@"}
 >> |#
 >> (module test mzscheme
 >>
 >>    (current-command-line-arguments (vector "harness-for-player"
 >> "TestPlayer"))
 >>
 >>    ...)
 >>
 >> to open a MODULE/SCRIPT tab that has two extra properties displayed:
 >>
 >>   1. its status as a script and that it is to be saved as such
 >>   2. its current-command-line-arguments displayed as non-strings in a
 >> "status" editor.
 >>
 >> -- Matthias
 >>
 >>
 >>
 >>
 >>
 >> On Feb 17, 2007, at 4:59 PM, Robby Findler wrote:
 >>
 >> > No no -- you don't need to know your way around wxme. Just around
 >> > either text%. Much simpler. Really.
 >> >
 >> > I consider the tricky part to be figuring out the format of the
 >> > comment and parsing it out etc.
 >> >
 >> > So, I'm proposing that you do those parts, as just a little  
 >> function
 >> > you write yourself and I'll wire it into drscheme.
 >> >
 >> > PS: you'd also have to provide a function that takes an editor and
 >> > inserts the comment into the editor (note that the comment might
 >> > already be there).
 >> >
 >> > You might start with something ike this:
 >> >
 >> > (define (mk-editor filename)
 >> >  (define f (new frame% [label "Matthias's playground"]))
 >> >  (define t (new text%))
 >> >  (define ec (new editor-canvas% [parent f] [editor t]))
 >> >  (send t load-file filename)
 >> >  t)
 >> >
 >> > The function you provide me should operate on the same things  
 >> that are
 >> > returned by that function above.
 >> >
 >> > Proabably the methods that are interesting to you are:
 >> >
 >> >  last-position
 >> >  paragraph-start-position ;; paragraphs are "line"s
 >> >  paragraph-end-position   ;; lines in the toolkit are word-wrapped
 >> > things
 >> >  get-text
 >> >
 >> > It won't be hard to write, if you know what you want it to look  
 >> like.
 >> >
 >> > Plus, you can even make a test suite! Use something lke this:
 >> >
 >> > (define (setup-test-case str)
 >> >  (let ([t (new text%)])
 >> >    (send t insert str)
 >> >    t))
 >> >
 >> > to make sample inputs to your function.
 >> >
 >> > Let me know if you have any questions, of course!
 >> >
 >> > PS: if you want to do regexp matching, you would create a port with
 >> > open-input-text-editor (passing along a range, if appropriate) and
 >> > then use regexp matching on the port. You can use
 >> > regexp-match-positions to get back numbers that you can use with  
 >> other
 >> > methods on the text% object.
 >> >
 >> > Robby
 >> >
 >> > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> >> What do you mean? A prototype? I don't know my way around wxme
 >> >>
 >> >> On Feb 17, 2007, at 3:21 PM, Robby Findler wrote:
 >> >>
 >> >> > I'll make you a deal: you provide the parser for a module  
 >> file (and
 >> >> > some small para of docs about it for the manual) and I'll put it
 >> >> into
 >> >> > DrScheme.
 >> >> >
 >> >> > Sound okay?
 >> >> >
 >> >> > Robby
 >> >>
 >> >>
 >>
 >>
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 17:27:46 -0500

 P.S. I will think harder ...
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8533: script inputs in the langauge dialog should be tab-specific
Date: Sat, 17 Feb 2007 17:27:18 -0500

 You're right. That was stupid.
 
 On Feb 17, 2007, at 5:19 PM, Robby Findler wrote:
 
 > Oh! That's much more complicated that I had imagined.
 >
 > But that seems wrong, since it gives the impression that running the
 > script will actually use the commandline, but it won't use the
 > commandline. It will always use the same arguments.
 >
 > Robby
 >
 > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> The thing below is in the file (modulo wxme).
 >>
 >> In drscheme, you see
 >>
 >>   (1) some annotation that suggests it's a script
 >>   (2) a one-line editor between the def window and the button bar
 >>       that displays the c-c-l-a content without quotes.
 >>
 >> In the definition buffer, you see
 >>
 >>   (module test mzscheme
 >>
 >>     ...)
 >>
 >> -- Matthias
 >>
 >>
 >> On Feb 17, 2007, at 5:13 PM, Robby Findler wrote:
 >>
 >> > I don't understand.
 >> >
 >> > What is on the disk and what is in the drscheme window (or windows,
 >> > including the new ones you're thinking of)?
 >> >
 >> > Robby
 >> >
 >> > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> >> I was thinking of something rather different. I want to save
 >> >> something like
 >> >>
 >> >> #! /bin/sh
 >> >> #|
 >> >> exec mzscheme -qu "$0" ${1+"$@"}
 >> >> |#
 >> >> (module test mzscheme
 >> >>
 >> >>    (current-command-line-arguments (vector "harness-for-player"
 >> >> "TestPlayer"))
 >> >>
 >> >>    ...)
 >> >>
 >> >> to open a MODULE/SCRIPT tab that has two extra properties  
 >> displayed:
 >> >>
 >> >>   1. its status as a script and that it is to be saved as such
 >> >>   2. its current-command-line-arguments displayed as non- 
 >> strings in a
 >> >> "status" editor.
 >> >>
 >> >> -- Matthias
 >> >>
 >> >>
 >> >>
 >> >>
 >> >>
 >> >> On Feb 17, 2007, at 4:59 PM, Robby Findler wrote:
 >> >>
 >> >> > No no -- you don't need to know your way around wxme. Just  
 >> around
 >> >> > either text%. Much simpler. Really.
 >> >> >
 >> >> > I consider the tricky part to be figuring out the format of the
 >> >> > comment and parsing it out etc.
 >> >> >
 >> >> > So, I'm proposing that you do those parts, as just a little
 >> >> function
 >> >> > you write yourself and I'll wire it into drscheme.
 >> >> >
 >> >> > PS: you'd also have to provide a function that takes an  
 >> editor and
 >> >> > inserts the comment into the editor (note that the comment might
 >> >> > already be there).
 >> >> >
 >> >> > You might start with something ike this:
 >> >> >
 >> >> > (define (mk-editor filename)
 >> >> >  (define f (new frame% [label "Matthias's playground"]))
 >> >> >  (define t (new text%))
 >> >> >  (define ec (new editor-canvas% [parent f] [editor t]))
 >> >> >  (send t load-file filename)
 >> >> >  t)
 >> >> >
 >> >> > The function you provide me should operate on the same things
 >> >> that are
 >> >> > returned by that function above.
 >> >> >
 >> >> > Proabably the methods that are interesting to you are:
 >> >> >
 >> >> >  last-position
 >> >> >  paragraph-start-position ;; paragraphs are "line"s
 >> >> >  paragraph-end-position   ;; lines in the toolkit are word- 
 >> wrapped
 >> >> > things
 >> >> >  get-text
 >> >> >
 >> >> > It won't be hard to write, if you know what you want it to look
 >> >> like.
 >> >> >
 >> >> > Plus, you can even make a test suite! Use something lke this:
 >> >> >
 >> >> > (define (setup-test-case str)
 >> >> >  (let ([t (new text%)])
 >> >> >    (send t insert str)
 >> >> >    t))
 >> >> >
 >> >> > to make sample inputs to your function.
 >> >> >
 >> >> > Let me know if you have any questions, of course!
 >> >> >
 >> >> > PS: if you want to do regexp matching, you would create a  
 >> port with
 >> >> > open-input-text-editor (passing along a range, if  
 >> appropriate) and
 >> >> > then use regexp matching on the port. You can use
 >> >> > regexp-match-positions to get back numbers that you can use with
 >> >> other
 >> >> > methods on the text% object.
 >> >> >
 >> >> > Robby
 >> >> >
 >> >> > On 2/17/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> >> >> What do you mean? A prototype? I don't know my way around wxme
 >> >> >>
 >> >> >> On Feb 17, 2007, at 3:21 PM, Robby Findler wrote:
 >> >> >>
 >> >> >> > I'll make you a deal: you provide the parser for a module
 >> >> file (and
 >> >> >> > some small para of docs about it for the manual) and I'll  
 >> put it
 >> >> >> into
 >> >> >> > DrScheme.
 >> >> >> >
 >> >> >> > Sound okay?
 >> >> >> >
 >> >> >> > Robby
 >> >> >>
 >> >> >>
 >> >>
 >> >>
 >>
 >>
 

