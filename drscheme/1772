From nobody@cs.rice.edu  Tue Nov 14 20:36:26 2000
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id UAA20411
	for <plt-gnats@cs.rice.edu>; Tue, 14 Nov 2000 20:36:26 -0600 (CST)
Message-Id: <200011150236.UAA08550@web.cs.rice.edu>
Date: Tue, 14 Nov 2000 20:36:24 -0600 (CST)
From: wschudy@wpi.edu
Reply-To: wschudy@wpi.edu
To: plt-gnats@cs.rice.edu
Subject: Unexpected (read-char) behavior-one problem on MacOS, a different one on Unix 

>Number:         1772
>Category:       drscheme
>Synopsis:       Unexpected (read-char) behavior-one problem on MacOS, a different one on Unix
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    robby
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Wed Nov 15 02:45:02 GMT 2000
>Last-Modified:  Thu Nov 16 11:05:48 CST 2000
>Originator:     Warren SChudy
>Organization:
titan
>Release:        103
>Environment:
unknown
>Description:
I have had difficult geting read-char to behave as expected under the spec. It appears that read-char waits for a return to start parsing. This is acceptable and is probably not a bug. What is a bug (how do I know? its different on different platforms) is that on MacOS hitting return clears characters in the input steam, so the first read-char after a computation break during which input comes in containing returns the first character read will be the first character after the last return. (See reproduction steps for clarification)

Another bug: When in unix MzScheme, the newline used to tell the RPL to execute an expression is read as the first character of the input stream.
>How-To-Repeat:
MacOS bug:
1) open MzScheme 103
2) Type: (begin (read-char) (sleep 15) (read-char))
3) Hit return, ab, return cd, return.
The second read-char (and hence the begin) returns #\c, not #\b as it should.

Note: this bug is not sleep-specific; any slow computation will do.

Unix bug:
1) Open MzScheme 103
2) Type: (read-char)
MzScheme immediately responds with a newline (the one that should be used by the RPL)
>Fix:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: wschudy@wpi.edu
Cc: plt-gnats@cs.rice.edu, clements@cs.rice.edu
Subject: Re: all/1772: Unexpected (read-char) behavior-one problem on MacOS, a different one on Unix 
Date: Wed, 15 Nov 2000 05:07:23 -0800

 Quoting wschudy@wpi.edu:
 > What is a bug (how do I know? its different on different platforms)
 > is that on MacOS hitting return clears characters in the input steam,
 > so the first read-char after a computation break during which input
 > comes in containing returns the first character read will be the
 > first character after the last return.
 
 Yes, that's broken.
 
 There are many problems with the MacOS console window, which is
 provided by the compiler that we use. Instead of trying to fix it,
 we've concentrated our Mac effort on the GUI version of the
 interpreter (DrScheme).
 
 > Another bug: When in unix MzScheme, the newline used to tell the RPL
 > to execute an expression is read as the first character of the input
 > stream.
 
 That's actually not a bug, though it's certainly confusing:
 
  * The input stream for the interpreter's prompt is the same as the
    program's input stream.
 
  * MzScheme's reader doesn't eat the next character after a complete
    expression. (It might be whitespace, but it might be something
    important.)
 
 Here's a more confusing example. :)
 
  > (read-char)(read-char)
  #\(
  > #<primitive:read-char>
  > read: unexpected ')' at position 22 in STDIN
 
 Matthew
 

From: "Warren J. Schudy" <wschudy@WPI.EDU>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: plt-gnats@cs.rice.edu, clements@cs.rice.edu
Subject: Re: all/1772: Unexpected (read-char) behavior-one problem on MacOS,
 a different one on Unix 
Date: Wed, 15 Nov 2000 08:58:59 -0500 (EST)

 The MacOS bug occurs also in DrScheme.
 
 -wjs
 
 On Wed, 15 Nov 2000, Matthew Flatt wrote:
 
 > Quoting wschudy@wpi.edu:
 > > What is a bug (how do I know? its different on different platforms)
 > > is that on MacOS hitting return clears characters in the input steam,
 > > so the first read-char after a computation break during which input
 > > comes in containing returns the first character read will be the
 > > first character after the last return.
 > 
 > Yes, that's broken.
 > 
 > There are many problems with the MacOS console window, which is
 > provided by the compiler that we use. Instead of trying to fix it,
 > we've concentrated our Mac effort on the GUI version of the
 > interpreter (DrScheme).
 > 
 > > Another bug: When in unix MzScheme, the newline used to tell the RPL
 > > to execute an expression is read as the first character of the input
 > > stream.
 > 
 > That's actually not a bug, though it's certainly confusing:
 > 
 >  * The input stream for the interpreter's prompt is the same as the
 >    program's input stream.
 > 
 >  * MzScheme's reader doesn't eat the next character after a complete
 >    expression. (It might be whitespace, but it might be something
 >    important.)
 > 
 > Here's a more confusing example. :)
 > 
 >  > (read-char)(read-char)
 >  #\(
 >  > #<primitive:read-char>
 >  > read: unexpected ')' at position 22 in STDIN
 > 
 > Matthew
 > 
 > 
 
 Thanks, WJS
 
 -----------------------------
 wschudy@wpi.edu
 wschudy@yahoo.com
 ICQ:    31819303
 AOL IM: WJSchudy
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Warren J. Schudy" <wschudy@WPI.EDU>
Cc: plt-gnats@cs.rice.edu, clements@cs.rice.edu
Subject: Re: all/1772: Unexpected (read-char) behavior-one problem on MacOS,
 a different one on Unix 
Date: Wed, 15 Nov 2000 06:03:48 -0800

 Quoting "Warren J. Schudy":
 > The MacOS bug occurs also in DrScheme.
 
 :( We'll have to fix that.
 
 Thanks for the report.
 
 Matthew

Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Wed Nov 15 10:37:22 2000
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: robby
State-Changed-When: Thu Nov 16 11:04:20 2000
State-Changed-Why:

DrScheme's repl reading bug has been fixed. Thanks for the report!
 
 
>Unformatted:
