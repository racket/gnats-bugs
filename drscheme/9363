From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu May  8 05:48:13 2008
Received: from wf-out-1314.google.com (wf-out-1314.google.com [209.85.200.170])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m489mDLD019379
	for <bugs@bugs.plt-scheme.org>; Thu, 8 May 2008 05:48:13 -0400
Message-Id: <200805080948.m489mAZc019373@champlain.ccs.neu.edu>
Date: Thu, 8 May 2008 05:48:10 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: Module repl after error

>Number:         9363
>Category:       drscheme
>Synopsis:       Module repl after error
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu May 08 05:50:01 -0400 2008
>Closed-Date:    Tue May 10 20:05:08 -0400 2011
>Last-Modified:  Tue May 10 20:05:08 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.24-svn7may2008
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 91552192

Collections:
(("/home/eli/.plt-scheme/3.99.0.24/collects" non-existent-path) ("/home/scheme/plt/collects" "little-helper" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "texpict" "honu-module" "games" "tex2page" "gui-debugger" "web-server" "r5rs"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #()))
>Description:
(I'm submitting it as a bug report so it won't fall
between the cracks.)

Things are a little better with `scheme/base' being
the default language, but it is still a very bad idea
to have any bogus repl after a syntax error.
(When there is some #lang parser, and if the language
does have a repl, then it might be used, but even
that's questionable IMO.)
>How-To-Repeat:
* Pretend that you're a newbie
* Type this program:
    #lang scheme
    (shared (x 1) x)
* Get a syntax error
* Try to understand it by typing the same expression
* You now get a different error telling you that
  `shared' is undefined.
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@cs.uchicago.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9363: Module repl after error
Date: Thu, 8 May 2008 08:27:03 -0500

 By extension, if you open the file and don't run it, you should not
 get a working REPL, right? (That's where the REPL's bindings really
 come about -- from the desire to have something working before you Run
 the program. But maybe that's wrong in our current world?)
 
 Robby
 
 On Thu, May 8, 2008 at 4:50 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9363
 >
 >  Reported by Eli Barzilay for release: 3.99.0.24-svn7may2008
 >
 >  *** Description:
 >  (I'm submitting it as a bug report so it won't fall
 >  between the cracks.)
 >
 >  Things are a little better with `scheme/base' being
 >  the default language, but it is still a very bad idea
 >  to have any bogus repl after a syntax error.
 >  (When there is some #lang parser, and if the language
 >  does have a repl, then it might be used, but even
 >  that's questionable IMO.)
 >
 >  *** How to repeat:
 >  * Pretend that you're a newbie
 >  * Type this program:
 >     #lang scheme
 >     (shared (x 1) x)
 >  * Get a syntax error
 >  * Try to understand it by typing the same expression
 >  * You now get a different error telling you that
 >   `shared' is undefined.
 >
 >  *** Environment:
 >  unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
 >  Human Language: english
 >  (current-memory-use) 91552192
 >
 >  Collections:
 >  (("/home/eli/.plt-scheme/3.99.0.24/collects" non-existent-path) ("/home/scheme/plt/collects" "little-helper" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "texpict" "honu-module" "games" "tex2page" "gui-debugger" "web-server" "r5rs"))
 >  Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #()))
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9363: Module repl after error
Date: Thu, 8 May 2008 09:42:46 -0400

 One could also take the view -- especially supported by #lang's non- 
 parenthetical syntax -- that we want the "sound prefix" of the given  
 def win working in the repl, immediately. So in Eli's example, the  
 repl should be in
 
   #lang scheme
 
 and in your example, the repl should be in
 
   #lang scheme/gui
 
 assuming the file that you opened is written in that language. We  
 could also argue that all syntactically correct definitions and  
 expressions (prefix) should be evaluated immediately but this throws  
 us into potentially hot water with infinite loops.
 
 -- Matthias
 
 
 
 On May 8, 2008, at 9:27 AM, Robby Findler wrote:
 
 > By extension, if you open the file and don't run it, you should not
 > get a working REPL, right? (That's where the REPL's bindings really
 > come about -- from the desire to have something working before you Run
 > the program. But maybe that's wrong in our current world?)
 >
 > Robby
 >
 > On Thu, May 8, 2008 at 4:50 AM,  <eli@barzilay.org> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=9363
 >>
 >>  Reported by Eli Barzilay for release: 3.99.0.24-svn7may2008
 >>
 >>  *** Description:
 >>  (I'm submitting it as a bug report so it won't fall
 >>  between the cracks.)
 >>
 >>  Things are a little better with `scheme/base' being
 >>  the default language, but it is still a very bad idea
 >>  to have any bogus repl after a syntax error.
 >>  (When there is some #lang parser, and if the language
 >>  does have a repl, then it might be used, but even
 >>  that's questionable IMO.)
 >>
 >>  *** How to repeat:
 >>  * Pretend that you're a newbie
 >>  * Type this program:
 >>     #lang scheme
 >>     (shared (x 1) x)
 >>  * Get a syntax error
 >>  * Try to understand it by typing the same expression
 >>  * You now get a different error telling you that
 >>   `shared' is undefined.
 >>
 >>  *** Environment:
 >>  unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb  
 >> 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/ 
 >> 3m) (get-display-depth) = 16
 >>  Human Language: english
 >>  (current-memory-use) 91552192
 >>
 >>  Collections:
 >>  (("/home/eli/.plt-scheme/3.99.0.24/collects" non-existent-path)  
 >> ("/home/scheme/plt/collects" "little-helper" "icons" "ffi" "mred"  
 >> "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl"  
 >> "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test- 
 >> engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy"  
 >> "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help"  
 >> "swindle" "config" "net" "hierlist" "test-box-recovery" "trace"  
 >> "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed- 
 >> scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail"  
 >> "syntax" "combinator-parser" "string-constants" "html" "slatex"  
 >> "stepper" "repos-time-stamp" "launcher" "htdp" "profjWizard"  
 >> "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml"  
 >> "scribblings" "planet" "readline" "parser-tools" "embedded-gui"  
 >> "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client"  
 >> "r6rs" "version" "texpict" "honu-module" "games" "tex2page" "gui- 
 >> debugger" "web-server" "r5rs
 >  "))
 >>  Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t  
 >> debug) (default) #()))
 >>
 >>
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9363: Module repl after error
Date: Thu, 8 May 2008 11:32:41 -0500

 I think this is the right direction to move eventually. Indeed I've
 pushed for it in other contexts -- I guess my lack of sleep is
 catching up with me a little bit here....
 
 So yes, lets consider this an open bug that will be fixed once we have
 nailed down the precise allowed syntax in the beginning of a module
 file.
 
 Robby
 
 On Thu, May 8, 2008 at 8:42 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > One could also take the view -- especially supported by #lang's
 > non-parenthetical syntax -- that we want the "sound prefix" of the given def
 > win working in the repl, immediately. So in Eli's example, the repl should
 > be in
 >
 >  #lang scheme
 >
 > and in your example, the repl should be in
 >
 >  #lang scheme/gui
 >
 > assuming the file that you opened is written in that language. We could also
 > argue that all syntactically correct definitions and expressions (prefix)
 > should be evaluated immediately but this throws us into potentially hot
 > water with infinite loops.
 >
 > -- Matthias
 >
 >
 >
 > On May 8, 2008, at 9:27 AM, Robby Findler wrote:
 >
 >> By extension, if you open the file and don't run it, you should not
 >> get a working REPL, right? (That's where the REPL's bindings really
 >> come about -- from the desire to have something working before you Run
 >> the program. But maybe that's wrong in our current world?)
 >>
 >> Robby
 >>
 >> On Thu, May 8, 2008 at 4:50 AM,  <eli@barzilay.org> wrote:
 >>>
 >>> A new problem report is waiting at
 >>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9363
 >>>
 >>>  Reported by Eli Barzilay for release: 3.99.0.24-svn7may2008
 >>>
 >>>  *** Description:
 >>>  (I'm submitting it as a bug report so it won't fall
 >>>  between the cracks.)
 >>>
 >>>  Things are a little better with `scheme/base' being
 >>>  the default language, but it is still a very bad idea
 >>>  to have any bogus repl after a syntax error.
 >>>  (When there is some #lang parser, and if the language
 >>>  does have a repl, then it might be used, but even
 >>>  that's questionable IMO.)
 >>>
 >>>  *** How to repeat:
 >>>  * Pretend that you're a newbie
 >>>  * Type this program:
 >>>    #lang scheme
 >>>    (shared (x 1) x)
 >>>  * Get a syntax error
 >>>  * Try to understand it by typing the same expression
 >>>  * You now get a different error telling you that
 >>>  `shared' is undefined.
 >>>
 >>>  *** Environment:
 >>>  unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10
 >>> 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>> (get-display-depth) = 16
 >>>  Human Language: english
 >>>  (current-memory-use) 91552192
 >>>
 >>>  Collections:
 >>>  (("/home/eli/.plt-scheme/3.99.0.24/collects" non-existent-path)
 >>> ("/home/scheme/plt/collects" "little-helper" "icons" "ffi" "mred" "dynext"
 >>> "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch"
 >>> "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme"
 >>> "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble"
 >>> "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist"
 >>> "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework"
 >>> "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl"
 >>> "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex"
 >>> "stepper" "repos-time-stamp" "launcher" "htdp" "profjWizard" "lang" "rnrs"
 >>> "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline"
 >>> "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi"
 >>> "afm" "handin-client" "r6rs" "version" "texpict" "honu-module" "games"
 >>> "tex2page" "gui-debugger" "web-server" "r5rs
 >>
 >>  "))
 >>>
 >>>  Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug)
 >>> (default) #()))
 >>>
 >>>
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9363: Module repl after error
Date: Fri, 9 May 2008 13:42:14 -0400

 On May  8, Robby Findler wrote:
 > By extension, if you open the file and don't run it, you should not
 > get a working REPL, right? (That's where the REPL's bindings really
 > come about -- from the desire to have something working before you Run
 > the program. But maybe that's wrong in our current world?)
 
 Yes.  I think that you should not have a bogus repl at any time.  If
 there is a #lang-parser then it can be used to give you the right
 (empty) repl for the language, but without that, a scheme/base repl is
 as useful as a generic mzscheme prompt in a different window.  (And
 it's dangerious since people will expect the two to be using the same
 language.)
 
 
 On May  8, Matthias Felleisen wrote:
 > 
 > One could also take the view -- especially supported by #lang's non- 
 > parenthetical syntax -- that we want the "sound prefix" of the given  
 > def win working in the repl, immediately. So in Eli's example, the  
 > repl should be in
 > 
 >   #lang scheme
 > 
 > and in your example, the repl should be in
 > 
 >   #lang scheme/gui
 
 Yes, that's what I mean.  But this will require extending the #lang
 protocol to handle single-expression reader, at least.
 
 
 > assuming the file that you opened is written in that language. We
 > could also argue that all syntactically correct definitions and
 > expressions (prefix) should be evaluated immediately but this throws
 > us into potentially hot water with infinite loops.
 
 Is there a sane way to do this?  If there is, it will be weird to have
 
   (define foo1 (bar hey))
   (define foo2 (bar))
   (define-syntax-rule (bar x) 'x)
 
 throw a syntax error for the `foo2' expression, and at that point you
 get a repl with `foo1' bound, and `bar' bound as a syntax...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

State changed from "open" to "closed" by ryanc at Tue, 10 May 2011 20:05:08 -0400
Reason>>> appears to be fixed

