From apache@plt-scheme.org Mon Jan 23 18:15:57 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k0NNFrPH016176
	for <bugs@plt-scheme.org>; Mon, 23 Jan 2006 18:15:53 -0500
Message-Id: <200601232315.k0NNFrkS016174@champlain.ccs.neu.edu>
Date: Mon, 23 Jan 2006 18:15:53 -0500
From: dalev@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: get-forward-sexp and get-backward-sexp in scheme:text% treat ' ` , and ,@

>Number:         7838
>Category:       drscheme
>Synopsis:       get-forward-sexp and get-backward-sexp in scheme:text% treat ' ` , and ,@
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Jan 23 18:20:00 -0500 2006
>Last-Modified:  Wed Jun 13 22:10:01 -0400 2007
>Originator:     Dale Vaillancourt
>Organization:
plt
>Submitter-Id:   unknown
>Release:        300.3-svn13jan2006
>Environment:
macosx "Darwin mobiledv.local 8.4.0 Darwin Kernel Version 8.4.0: Tue Jan  3 18:22:10 PST 2006; root:xnu-792.6.56.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Users/dalev/Software/plt/collects/doc/web-server> #<path:/Users/dalev/Software/plt/collects/doc/tour> #<path:/Users/dalev/Software/plt/collects/doc/tools> #<path:/Users/dalev/Software/plt/collects/doc/tex2page> #<path:/Users/dalev/Software/plt/collects/doc/teachpack> #<path:/Users/dalev/Software/plt/collects/doc/t-y-scheme> #<path:/Users/dalev/Software/plt/collects/doc/swindle> #<path:/Users/dalev/Software/plt/collects/doc/srfi> #<path:/Users/dalev/Software/plt/collects/doc/r5rs> #<path:/Users/dalev/Software/plt/collects/doc/profj-intermediate> #<path:/Users/dalev/Software/plt/collects/doc/profj-beginner> #<path:/Users/dalev/Software/plt/collects/doc/profj-advanced> #<path:/Users/dalev/Software/plt/collects/doc/plot> #<path:/Users/dalev/Software/plt/collects/doc/mzscheme> #<path:/Users/dalev/Software/plt/collects/doc/mzlib> #<path:/Users/dalev/Software/plt/collects/doc/mzc> #<path:/Users/dalev/Software/plt/collects/doc/mrlib> #<path:/Users/dalev/Software/plt/collects/doc/mred> #<path:/Users/dalev/Software/plt/collects/doc/misclib> #<path:/Users/dalev/Software/plt/collects/doc/intermediate-lambda> #<path:/Users/dalev/Software/plt/collects/doc/intermediate> #<path:/Users/dalev/Software/plt/collects/doc/insidemz> #<path:/Users/dalev/Software/plt/collects/doc/help> #<path:/Users/dalev/Software/plt/collects/doc/framework> #<path:/Users/dalev/Software/plt/collects/doc/foreign> #<path:/Users/dalev/Software/plt/collects/doc/drscheme> #<path:/Users/dalev/Software/plt/collects/doc/beginning-abbr> #<path:/Users/dalev/Software/plt/collects/doc/beginning> #<path:/Users/dalev/Software/plt/collects/doc/advanced> #<path:/Users/dalev/Software/plt/collects/doc/acl2>)
Collections:
((#<path:/Users/dalev/Library/PLT Scheme/300.3/collects> (#<path:.DS_Store> #<path:acl2> #<path:alpha> #<path:control> #<path:dpl> #<path:fresh> #<path:infer> #<path:info-domain> #<path:kanren> #<path:poplmark> #<path:proof> #<path:struct> #<path:unification>)) (#<path:/Users/dalev/Software/plt/collects> (#<path:.DS_Store> #<path:.svn> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:plai> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs> #<path:readline> #<path:repos-time-stamp> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
get-forward-sexp and get-backward-sexp in scheme:text% treat ' ` , and ,@ as individual s-expressions.

See the code below for examples.  This bug can also be illustrated by typing
   
    '''x

into the definitions window.  Place the cursor at the left of the expression, and use meta+right-arrow and meta+left-arrow to move back and forth over the s-expression.  
>How-To-Repeat:
;; Paste into definitions window and run it in 
;; (module ...) language
(module scheme-text-bug mzscheme
  (require (lib "framework.ss" "framework")
           (lib "class.ss"))
  
  ;; illustrate-bug : String -> Void
  ;; Consumes a string containing s-expressions and 
  ;; prints the start and end of each one
  (define (illustrate-bug str)
    (printf "Testing with string: ~a~n" str)
    (let ([s-text (new scheme:text%)])
      (send s-text insert str)
      (let loop ([start 0])
        (let ([end (send s-text get-forward-sexp start)])
          (when end
            (printf "start = ~a, end = ~a~n" start end)
            (loop end))))))
                 
  ;; Each string contains only one s-expression, but get-forward-sexp
  ;; thinks that ' ` , and ,@ are each s-expressions
  (illustrate-bug "'''x")
  (illustrate-bug "``x")
  (illustrate-bug ",x")
  (illustrate-bug ",@x")
  
  ;; These behave as expected (one s-exp each)
  (illustrate-bug "(quote (quote (quote x)))")
  (illustrate-bug "(quasiquote (quasiquote x))")
  (illustrate-bug "(unquote x)")
  (illustrate-bug "(unquote-splicing x)")
  )
>Fix:
>Audit-Trail:
From: "Carl Eastlund" <cce@ccs.neu.edu>
To: bugs@plt-scheme.org, robby@plt-scheme.org, dalev@ccs.neu.edu
Cc: 
Subject: Re: drscheme/7838: get-forward-sexp and get-backward-sexp in scheme:text% treat ' ` , and ,@ as individual s-expressions.
Date: Wed, 13 Jun 2007 21:25:29 -0400

 Robby, has the behavior of get-forward-sexp and get-backward-sexp
 changed since this bug was filed?  This bug is still listed as open,
 but the behavior seems to have been fixed.  There's some Dracula code
 currently working around it, which I can take out once it's confirmed
 fixed.  Thanks!
 
 -- 
 Carl Eastlund
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Carl Eastlund" <cce@ccs.neu.edu>
Cc: bugs@plt-scheme.org, dalev@ccs.neu.edu,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: drscheme/7838: get-forward-sexp and get-backward-sexp in scheme:text% treat ' ` , and ,@ as individual s-expressions.
Date: Wed, 13 Jun 2007 21:07:53 -0500

 Matthew did most of the hard work for me, but the sexp movement keys
 aren't in sync with the grey region yet, so I'm not quite done.
 
 Robby
 
 On 6/13/07, Carl Eastlund <cce@ccs.neu.edu> wrote:
 > Robby, has the behavior of get-forward-sexp and get-backward-sexp
 > changed since this bug was filed?  This bug is still listed as open,
 > but the behavior seems to have been fixed.  There's some Dracula code
 > currently working around it, which I can take out once it's confirmed
 > fixed.  Thanks!
 >
 > --
 > Carl Eastlund
 >
>Unformatted:
 as individual s-expressions.
 X-Mailer: MzScheme: see www.plt-scheme.org
 
 as individual s-expressions.
