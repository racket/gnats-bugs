From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Sep 24 21:04:03 2010
Received: from mail-gy0-f172.google.com (mail-gy0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o8P141K8020627
	for <bugs@bugs.plt-scheme.org>; Fri, 24 Sep 2010 21:04:01 -0400
Message-Id: <201009250103.o8P13x2b020617@champlain.ccs.neu.edu>
Date: Fri, 24 Sep 2010 21:03:59 -0400
From: sk@cs.brown.edu
To: bugs@racket-lang.org
Subject: for/fold default indentation is ugly/misleading

>Number:         11251
>Category:       drscheme
>Synopsis:       for/fold default indentation is ugly/misleading
>Class:          sw-bug
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Sep 24 21:08:01 -0400 2010
>Last-Modified:  Tue Oct 05 11:12:01 -0400 2010
>Originator:     Shriram Krishnamurthi
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1
>Environment:
windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 212348784

Collections:
(("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0.1\\collects" "info-domain" "installed-teachpacks" "margrave" "plai") ("C:\\Program Files (x86)\\Racket\\5.0.1\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "!
 typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
The default indentation is

     (for/fold ([sum 0])
       ([i (build-list 10 add1)])
       (+ sum i))

which gives the impression that the (for-clause ...) is at the same level as the body.  It would make much more sense for it to be indented under the accumulator clause, with the true body indented "body-like" (ie, as above).
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: sk@cs.brown.edu, bugs@racket-lang.org
Cc: bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11251: for/fold default indentation is ugly/misleading
Date: Sat, 25 Sep 2010 15:33:31 -0400

 Yesterday, sk@cs.brown.edu wrote:
 > The default indentation is
 > 
 >      (for/fold ([sum 0])
 >        ([i (build-list 10 add1)])
 >        (+ sum i))
 > 
 > which gives the impression that the (for-clause ...) is at the same
 > level as the body.  It would make much more sense for it to be
 > indented under the accumulator clause, with the true body indented
 > "body-like" (ie, as above).
 
 +1 [But much more -- there's a whole bunch of things that drr can't
 indent properly.  I once looked into, and gave up on making it do `if'
 properly.]
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: sk@cs.brown.edu, bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11251: for/fold default indentation is ugly/misleading
Date: Sun, 26 Sep 2010 10:00:40 -0400

 if is done perfectly. 
 
 
 On Sep 25, 2010, at 3:33 PM, Eli Barzilay wrote:
 
 > Yesterday, sk@cs.brown.edu wrote:
 >> The default indentation is
 >> 
 >>     (for/fold ([sum 0])
 >>       ([i (build-list 10 add1)])
 >>       (+ sum i))
 >> 
 >> which gives the impression that the (for-clause ...) is at the same
 >> level as the body.  It would make much more sense for it to be
 >> indented under the accumulator clause, with the true body indented
 >> "body-like" (ie, as above).
 > 
 > +1 [But much more -- there's a whole bunch of things that drr can't
 > indent properly.  I once looked into, and gave up on making it do `if'
 > properly.]
 > 
 > -- 
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                    http://barzilay.org/                   Maze is Life!
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: sk@cs.brown.edu, bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11251: for/fold default indentation is ugly/misleading
Date: Sun, 26 Sep 2010 09:17:19 -0500

 On Sat, Sep 25, 2010 at 2:33 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > +1 [But much more -- there's a whole bunch of things that drr can't
 > indent properly. =C2=A0I once looked into, and gave up on making it do `i=
 f'
 > properly.]
 
 What else?
 
 Robby

From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Cc: sk@cs.brown.edu, bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11251: for/fold default indentation is ugly/misleading
Date: Tue, 5 Oct 2010 04:42:32 -0400

 More than a week ago, Matthias Felleisen wrote:
 >=20
 > if is done perfectly.=20
 
 It's treating it as a function:
 
   (if    X
          Y
          Z)
 
   (if
    X
    Y
    Z)
 
 But I'd like it to indent it as a special form.  For the above two
 cases I want this:
 
   (if    X
     Y
     Z)
 
   (if
       X
     Y
     Z)
 
 (And a quick reminder on why I want the branches to be indented with
 two spaces: I want a clear, visual, hard-to-miss, indication that it's
 *not* a function call.)
 
 
 More than a week ago, Robby Findler wrote:
 > On Sat, Sep 25, 2010 at 2:33 PM, Eli Barzilay <eli@barzilay.org> wrot=
 e:
 > > +1 [But much more -- there's a whole bunch of things that drr can't=
 
 > > indent properly. =C2=A0I once looked into, and gave up on making it=
  do `if'
 > > properly.]
 >=20
 > What else=3F
 
 The `for/fold' with a few of its relatives is an obvious one, but here
 are more things that I'd want:
 
   (call-with-input-file "foo" ; debatable, but `call-with-input-file'
     (lambda (i)               ; is just too long (I sometimes
       ...))                   ; do that with `hash-ref' too)
 
   (syntax-case stx
                (k1 k2)
     [...])
 
   (syntax-case* stx (k1 k2)
                 (lambda (x y) ...)
     [...])
 
   (syntax-case* stx
                 (k1 k2)
                 (lambda (x y) ...)
     [...])
 
   (class* %
           (foo<%>)
     ...)
 
   [-many more of these-]
 
   (foo #|xx|# X
               Y
               Z)
 
   (let loop
        ([x 1])
     X
     Y)
 
   (define: (foo [x : Number])
            : Number
     x)
 
   ((compose F G) X    ; (mentioning for completeness, it beats
                  Y    ; emacs here)
                  Z)
 
   (cond [X Y]           ; just like using `else'
         [(< X Y) A      ; instead of an expression
                  B])    ; (also beats emacs)
 
   (let: ([X : T
           Number])
     X)
 
   (X . < .
    Y)    ; *-- or here
 
   (begin0 X
     Y
     Z)
 
   (begin0
       X
     Y
     Z)
 
   (lambda (x) Y     ; odd, but useful with a unicode lambda
               Z)    ; and one or two short arguments
 
   (lambda (a b c d
            e f g h)
     ...)
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, sk@cs.brown.edu,
        bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11251: for/fold default indentation is ugly/misleading
Date: Tue, 5 Oct 2010 10:08:03 -0500

 Comments inline below, but as far as DrRacket's indenter is concerned,
 it sounds like it would have to add support for things that indent
 like for/fold and a variants where the first three pieces of an
 expression behave like for/fold instead of just the first two, as well
 as possibly do something better with the argument list for a lambda
 expression. Otherwise, the rest is just setting up the mappings
 between the keywords and the indentation strategies.
 
 Once we get a style guide, I'll be happy to make those changes to make
 it easy to follow the style guide.
 
 Robby
 
 On Tue, Oct 5, 2010 at 3:42 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > More than a week ago, Matthias Felleisen wrote:
 >>
 >> if is done perfectly.
 >
 > It's treating it as a function:
 >
 > =C2=A0(if =C2=A0 =C2=A0X
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 Y
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 Z)
 >
 > =C2=A0(if
 > =C2=A0 X
 > =C2=A0 Y
 > =C2=A0 Z)
 >
 > But I'd like it to indent it as a special form. =C2=A0For the above two
 > cases I want this:
 >
 > =C2=A0(if =C2=A0 =C2=A0X
 > =C2=A0 =C2=A0Y
 > =C2=A0 =C2=A0Z)
 >
 > =C2=A0(if
 > =C2=A0 =C2=A0 =C2=A0X
 > =C2=A0 =C2=A0Y
 > =C2=A0 =C2=A0Z)
 >
 > (And a quick reminder on why I want the branches to be indented with
 > two spaces: I want a clear, visual, hard-to-miss, indication that it's
 > *not* a function call.)
 
 Isn't that the same as lambda?
 
 FWIW, I'm used to the function-based indentation, but I also don't
 mind changing how drracket behaves if people think that's better (ie
 if that gets into the style guidelines).
 
 >
 > More than a week ago, Robby Findler wrote:
 >> On Sat, Sep 25, 2010 at 2:33 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > +1 [But much more -- there's a whole bunch of things that drr can't
 >> > indent properly. =C2=A0I once looked into, and gave up on making it do=
  `if'
 >> > properly.]
 >>
 >> What else?
 >
 > The `for/fold' with a few of its relatives is an obvious one, but here
 > are more things that I'd want:
 >
 > =C2=A0(call-with-input-file "foo" ; debatable, but `call-with-input-file'
 > =C2=A0 =C2=A0(lambda (i) =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  ; is just too long (I sometimes
 > =C2=A0 =C2=A0 =C2=A0...)) =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 ; do that with `hash-ref' too)
 
 DrRacket does that already.
 
 > =C2=A0(syntax-case stx
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (k1 k2)
 > =C2=A0 =C2=A0[...])
 
 This seems like it is the same category as for/fold (right?).
 
 > =C2=A0(syntax-case* stx (k1 k2)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(lambda (x y) ...)
 > =C2=A0 =C2=A0[...])
 >
 > =C2=A0(syntax-case* stx
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(k1 k2)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(lambda (x y) ...)
 > =C2=A0 =C2=A0[...])
 
 This seems like it is a variant of for/fold, where you expect the
 first 3 things to be special, not just the first two things.
 
 > =C2=A0(class* %
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(foo<%>)
 > =C2=A0 =C2=A0...)
 >
 > =C2=A0[-many more of these-]
 
 Also like for/fold.
 
 > =C2=A0(foo #|xx|# X
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Y
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Z)
 
 This one looks just looks like a bug (I assume "foo" is meant to be a
 function). But either way, this seems like something one could change
 about the indenter if one wanted to.
 
 > =C2=A0(let loop
 > =C2=A0 =C2=A0 =C2=A0 ([x 1])
 > =C2=A0 =C2=A0X
 > =C2=A0 =C2=A0Y)
 
 I think that this one falls into a special category: "when let's first
 thing has no parens, then treat it like for/fold; otherwise treat it
 like it is currently being treated". (Somehow the merit of this seems
 small to me, but perhaps that's because I'm the indenter's maintainer
 :).
 
 > =C2=A0(define: (foo [x : Number])
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 : Number
 > =C2=A0 =C2=A0x)
 
 I think that this is the for/fold variant with 3 special args (like
 syntax-case* above).
 
 > =C2=A0((compose F G) X =C2=A0 =C2=A0; (mentioning for completeness, it be=
 ats
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Y =C2=A0 =C2=A0; =
 emacs here)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Z)
 
 "completeness" means that this one already works how you'd like it to
 work in DrRacket, I assume.
 
 > =C2=A0(cond [X Y] =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ; just like using `e=
 lse'
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0[(< X Y) A =C2=A0 =C2=A0 =C2=A0; instead of an=
  expression
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 B]) =C2=A0 =C2=A0=
 ; (also beats emacs)
 
 ditto.
 
 > =C2=A0(let: ([X : T
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Number])
 > =C2=A0 =C2=A0X)
 
 This one seems complex. This seems to be the first one that requires
 looking out two levels.
 
 > =C2=A0(X . < .
 > =C2=A0 Y) =C2=A0 =C2=A0; *-- or here
 >
 > =C2=A0(begin0 X
 > =C2=A0 =C2=A0Y
 > =C2=A0 =C2=A0Z)
 >
 > =C2=A0(begin0
 > =C2=A0 =C2=A0 =C2=A0X
 > =C2=A0 =C2=A0Y
 > =C2=A0 =C2=A0Z)
 
 This one is like lambda currently is.
 
 > =C2=A0(lambda (x) Y =C2=A0 =C2=A0 ; odd, but useful with a unicode lambda
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Z) =C2=A0 =C2=A0; and one=
  or two short arguments
 
 That doesn't seem worth the effort.
 
 > =C2=A0(lambda (a b c d
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 e f g h)
 > =C2=A0 =C2=A0...)
 
 This also requires looking out one level. But I do find myself annoyed
 by that one too.
 
 I assume you wouldn't mind if this happened:
 
 (lambda (if a
           b
           c)
   (if a b c))
 
 
 Robby
