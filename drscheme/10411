From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Aug 23 00:25:13 2009
Received: from mail-yx0-f173.google.com (mail-yx0-f173.google.com [209.85.210.173])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n7N4P7Rv015547
	for <bugs@bugs.plt-scheme.org>; Sun, 23 Aug 2009 00:25:07 -0400
Message-Id: <200908230425.n7N4P4w0015540@champlain.ccs.neu.edu>
Date: Sun, 23 Aug 2009 00:25:04 -0400
From: jsailor+plt@cs.brown.edu
To: bugs@plt-scheme.org
Subject: Default indenting for define-struct can be incorrect

>Number:         10411
>Category:       drscheme
>Synopsis:       Default indenting for define-struct can be incorrect
>Class:          sw-bug
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Aug 23 00:28:01 -0400 2009
>Last-Modified:  Thu May 12 17:59:10 -0400 2011
>Originator:     Jonathan Sailor
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1
>Environment:
macosx "Darwin selima.local 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 97981064

Collections:
(("/Users/jon/Library/PLT Scheme/4.2.1/collects" non-existent-path) ("/Applications/PLT Scheme v4.2.1/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t quasiquote mixed-fraction-e #t #t none) (default) #() "#lang scheme\n" #t))
>Description:
In the following code, the d is indented under the b, not under the a.

#lang scheme
(define-struct s (a b c
                    d e f))
>How-To-Repeat:
Type the above code sample in the obvious way.
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: jsailor+plt@cs.brown.edu, bugs@plt-scheme.org
Cc: bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10411: Default indenting for define-struct can be incorrect
Date: Sun, 23 Aug 2009 12:01:30 -0400

 On Aug 23, jsailor+plt@cs.brown.edu wrote:
 > In the following code, the d is indented under the b, not under the a.
 > 
 > #lang scheme
 > (define-struct s (a b c
 >                     d e f))
 
 1. Emacs is doing the same.  That's not an excuse, but it's a strong
    hint about it being a problem that is difficult to not have a
    solution in an editor that has been focused on editing Lisp code
    for a really long time.
 
 2. It can be argued that this is bad style, and that if you're using a
    newline in one place, you should use it throughout, and this will
    indent correctly as
 
      (define-struct s (a
                        b
                        c
                        d
                        e
                        f))
 
    And this is still not an excuse.
 
 3. The real reason that this doesn't work right is that DrScheme (like
    Emacs) looks only at the current S-expression to do the
    indentation.  Another way to see it is:
 
      (define foo '(1 2 3
                      4 5))
 
    To make these work, it would need to jump up and inspect the
    preceding level too -- and that probably means a nearly complete
    rewrite of the indentation code.  It's not even obvious how to do
    these things properly, since
 
      (define foo '(foo 1
                        2))
 
      (define foo '(if 1
                       2
                       3))
 
    might be good indentations if the intention is to encode Scheme
    S-expressions -- so even knowing that `quote' is bound to the right
    thing is not helping.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

