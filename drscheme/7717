From apache@plt-scheme.org Tue Nov 29 19:05:32 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id jAU05Taj013791
	for <bugs@plt-scheme.org>; Tue, 29 Nov 2005 19:05:29 -0500
Message-Id: <200511300005.jAU05TmT013789@champlain.ccs.neu.edu>
Date: Tue, 29 Nov 2005 19:05:29 -0500
From: dbtucker@cs.uri.edu
To: bugs@plt-scheme.org
Subject: drscheme forgets "default text" color preference

>Number:         7717
>Category:       drscheme
>Synopsis:       drscheme forgets "default text" color preference
>Class:          sw-bug
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Nov 29 19:10:00 -0500 2005
>Last-Modified:  Sun Jan 15 15:55:00 -0500 2006
>Originator:     David B. Tucker
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.400p1
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
(#<path:C:\Program Files\PLT\collects\doc\web-server> #<path:C:\Program Files\PLT\collects\doc\tour> #<path:C:\Program Files\PLT\collects\doc\tools> #<path:C:\Program Files\PLT\collects\doc\tex2page> #<path:C:\Program Files\PLT\collects\doc\teachpack> #<path:C:\Program Files\PLT\collects\doc\t-y-scheme> #<path:C:\Program Files\PLT\collects\doc\swindle> #<path:C:\Program Files\PLT\collects\doc\srfi> #<path:C:\Program Files\PLT\collects\doc\r5rs> #<path:C:\Program Files\PLT\collects\doc\profj-intermediate> #<path:C:\Program Files\PLT\collects\doc\profj-beginner> #<path:C:\Program Files\PLT\collects\doc\profj-advanced> #<path:C:\Program Files\PLT\collects\doc\plot> #<path:C:\Program Files\PLT\collects\doc\mzscheme> #<path:C:\Program Files\PLT\collects\doc\mzlib> #<path:C:\Program Files\PLT\collects\doc\mzc> #<path:C:\Program Files\PLT\collects\doc\mrlib> #<path:C:\Program Files\PLT\collects\doc\mred> #<path:C:\Program Files\PLT\collects\doc\misclib> #<path:C:\Program Files\PLT\collects\doc\intermediate-lambda> #<path:C:\Program Files\PLT\collects\doc\intermediate> #<path:C:\Program Files\PLT\collects\doc\insidemz> #<path:C:\Program Files\PLT\collects\doc\help> #<path:C:\Program Files\PLT\collects\doc\framework> #<path:C:\Program Files\PLT\collects\doc\foreign> #<path:C:\Program Files\PLT\collects\doc\drscheme> #<path:C:\Program Files\PLT\collects\doc\beginning-abbr> #<path:C:\Program Files\PLT\collects\doc\beginning> #<path:C:\Program Files\PLT\collects\doc\advanced>)
Collections:
((#<path:C:\Documents and Settings\David Tucker\Application Data\PLT Scheme\299.400\collects> (#<path:info-domain> #<path:plai>)) (#<path:C:\Program Files\PLT\collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjWizard> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Teaching Languages" "Programming Languages: Application and Interpretation" "PLAI - Pretty Big") #6(#t write mixed-fraction-e #f #t debug))
>Description:
Change the "Default Text" color preference, exit DrScheme,
reopen.  It's back to black.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org,
        dbtucker@cs.uri.edu
Cc: 
Subject: Re: drscheme/7717: drscheme forgets "default text" color preference
Date: Sat, 7 Jan 2006 06:28:10 -0600

 I'm not seeing this behavior. I followed the directions in the PR:
 
  > Change the "Default Text" color preference, exit DrScheme,  
 reopen.  It's back to black.
 
 but the color did not revert.
 
 Is it possible there was some other state somehow that caused this  
 bug to showup? (I started from a fresh drscheme).
 
 Thanks,
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: "Dave Tucker" <dbtucker@cs.uri.edu>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/7717: drscheme forgets "default text" color preference
Date: Fri, 13 Jan 2006 22:21:53 -0600

 Sure. (pls keep the cc line intact).
 
 Robby
 
 At Fri, 13 Jan 2006 17:34:05 -0500, "Dave Tucker" wrote:
 > Hi Robby,
 > 
 > I was able to replicate the behavior again here.  (I'm still running
 > v299.400p1).
 > 
 > Should I send my plt-prefs or something?
 > 
 > Dave
 > 
 > 
 > On Sat, Jan 07, 2006 at 06:28:10AM -0600, Robby Findler wrote:
 > > I'm not seeing this behavior. I followed the directions in the PR:
 > > 
 > > > Change the "Default Text" color preference, exit DrScheme,  
 > > reopen.  It's back to black.
 > > 
 > > but the color did not revert.
 > > 
 > > Is it possible there was some other state somehow that caused this  
 > > bug to showup? (I started from a fresh drscheme).
 > > 
 > > Thanks,
 > > Robby
From: "Dave Tucker" <dbtucker@cs.uri.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/7717: drscheme forgets "default text" color preference
Date: Sat, 14 Jan 2006 15:58:42 -0500

 --7JfCtLOvnd9MIVvH
 Content-Type: text/plain; charset=us-ascii
 Content-Disposition: inline
 
 Here ya go.  Let me know if I can provide anything else.
 
 Dave
 
 On Fri, Jan 13, 2006 at 10:21:53PM -0600, Robby Findler wrote:
 > Sure. (pls keep the cc line intact).
 > 
 > Robby
 > 
 > At Fri, 13 Jan 2006 17:34:05 -0500, "Dave Tucker" wrote:
 > > Hi Robby,
 > > 
 > > I was able to replicate the behavior again here.  (I'm still running
 > > v299.400p1).
 > > 
 > > Should I send my plt-prefs or something?
 > > 
 > > Dave
 > > 
 > > 
 > > On Sat, Jan 07, 2006 at 06:28:10AM -0600, Robby Findler wrote:
 > > > I'm not seeing this behavior. I followed the directions in the PR:
 > > > 
 > > > > Change the "Default Text" color preference, exit DrScheme,  
 > > > reopen.  It's back to black.
 > > > 
 > > > but the color did not revert.
 > > > 
 > > > Is it possible there was some other state somehow that caused this  
 > > > bug to showup? (I started from a fresh drscheme).
 > > > 
 > > > Thanks,
 > > > Robby
 
 --7JfCtLOvnd9MIVvH
 Content-Type: text/plain; charset=unknown-8bit
 Content-Disposition: attachment; filename="plt-prefs.ss"
 Content-Transfer-Encoding: quoted-printable
 
 (
  (slideshow:commentary-y 0)
  (slideshow:commentary-x 0)
  (slideshow:commentary-height 100)
  (slideshow:commentary-width 400)
  (plt:framework-prefs
   (
   (drscheme:last-version "299.400")
   (drscheme:user-defined-keybindings ())
   (framework:syntax-coloring:scheme:keyword (base base (0 0 0) (1.0 1.0 1.0=
 ) #f base (0 0 255) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:auto-set-wrap? #t)
   (drscheme:last-language english)
   (framework:basic-canvas-background (224 224 224))
   (profj:syntax-coloring:scheme:string (base base (0 0 0) (1.0 1.0 1.0) #f =
 base (34 139 34) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (drscheme:toolbar-shown #t)
   (framework:syntax-coloring:scheme:parenthesis (base base (0 0 0) (1.0 1.0=
  1.0) #f base (132 60 36) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:autosave-delay 300)
   (drscheme:module-browser-size-percentage 1/5)
   (framework:show-delegate? #t)
   (profj:syntax-coloring:scheme:identifier (base base (0 0 0) (1.0 1.0 1.0)=
  #f base (38 38 128) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:syntax-coloring:scheme:symbol (base base (0 0 0) (1.0 1.0 1.0)=
  #f base (0 64 128) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:highlight-parens #t)
   (framework:coloring-active #t)
   (framework:syntax-coloring:scheme:other (base base (0 0 0) (1.0 1.0 1.0) =
 #f base (128 64 0) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (drscheme:console-previous-exprs (("\n" "}}}))" "x" " " "x" " " "+" "{" "=
                       " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "=
 with" "{" "                    " "\n" "}}" "2" " " "16" " " "/" "{" " " "x"=
  "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}}})" "x" " " "x=
 " " " "+" "{" "                          " "\n" "}}" "2" " " "x" " " "/" "{=
 " " " "y" "{" " " "with" "{" "                        " "\n" "}}" "2" " " "=
 16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-te=
 st" "t" "b" "d" "(" "\n" "}}))" "x" " " "0" "1" " " "-" "{" "              =
       " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{"=
  " " "with" "{" "'" " " "parse" "(" "          " "\n" "}})" "x" " " "0" "1"=
  " " "-" "{" "                        " "\n" "}}}" "2" " " "8" " " "/" "{" =
 " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " "=
  "-test" "t" "b" "d" "(" "\n" "}}))" "1" " " "x" " " "-" "{" "             =
        " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" =
 " " "parse" "(" "          " "\n" "}})" "1" " " "x" " " "-" "{" "          =
               " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "=
 {" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "5" " " =
 "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "parse"=
  "(" "          " "\n" "}})" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " =
 " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "=
 \n" "}))" "2" " " "6" " " "/" "{" "'" " " "e" "s" "r" "a" "p" "(" "        =
   " "\n" "})" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "=
 t" "b" "d" "(" "\n" "5" "-" "2" "x" "e" "'" "\n" "\n" "\"" "!" "!" "!" "e" =
 "d" "o" "c" " " "k" "c" "e" "h" "c" "\"" "\n" "4" "-" "2" "x" "e" "'" "\n" =
 "\n" "}}}}})))" "d" " " "c" " " "b" " " "a" " " "+" "{" "                  =
                        " "\n" "}}" "3" " " "c" " " "+" "{" " " "d" "{" " " =
 "with" "{" "                                       " "\n" "}}" "2" " " "b" =
 " " "+" "{" " " "c" "{" " " "with" "{" "                                   =
   " "\n" "}}" "1" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" "         =
                           " "\n" "}" "0" " " "a" "{" " " "with" "{" "'" " "=
  "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test"=
  "t" "b" "d" "(" "\n" "}}})))" "c" " " "a" " " "+" "{" "                   =
                   " "\n" "}" "9" " " "c" "{" " " "with" "{" "              =
                      " "\n" "}}}" "b" " " "b" " " "+" "{" " " "}}" "7" " " =
 "a" " " "+" "{" " " "b" "{" " " "with" "{" " " "a" "{" " " "with" "{" "'" "=
  " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "a" "(" "'" " =
 " "-test" "t" "b" "d" "(" "\n" "}})))" "8" " " "b" " " "+" "{" "           =
                         " "\n" "}" "a" " " "a" "{" " " "with" "{" "'" " " "=
 dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'=
 " " " "-test" "t" "b" "d" "(" "\n" "}}}})))" "b" " " "a" " " "+" "{" "     =
                                   " "\n" "}" "4" " " "b" "{" " " "with" "{"=
  "                                     " "\n" "}" "a" " " "a" "{" " " "with=
 " "{" "                                   " "\n" "}" "5" " " "a" "{" " " "w=
 ith" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()"=
  "'" " " "-test" "t" "b" "d" "(" "\n" "}}}}})))" "d" " " "c" " " "+" "{" " =
                                          " "\n" "}" "b" " " "a" " " "+" "{"=
  " " "-" "{" "                                       " "\n" "}" "9" " " "c"=
  "{" " " "with" "{" "                                     " "\n" "}" "8" " =
 " "b" "{" " " "with" "{" "                                   " "\n" "}" "8"=
  " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "  =
         " "\n" ")" "d" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b"=
  " " "a" " " "+" "{" "                                   " "\n" "}" "4" " "=
  "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "      =
     " "\n" ")" "b" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " "=
  "2" " " "+" "{" " " "a" " " "-" "{" "'" " " "dbt-parse" "(" " " "free-vars=
 " "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "("=
  "\n" "})))" "b" " " "a" " " "+" "{" "'" " " "dbt-parse" "(" " " "free-vars=
 " "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "("=
  "\n" ")))" "a" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\=
 n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "'5" " " "dbt-par=
 se" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" =
 "d" "(" "\n" "3" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+"=
  "{" "                                     " "\n" "}}" "0" " " "x" " " "/" =
 "{" " " "y" "{" " " "with" "{" "                                   " "\n" "=
 }}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse"=
  "(" " " "calc-lazy" "(" "          " "\n" "6" "1" " " "-test" "t" "b" "d" =
 "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "                             =
       " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{"=
  " " "with" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" "          " "\=
 n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "  =
                                  " "\n" "}}" "5" " " "10" " " "/" "{" " " "=
 x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "     =
      " "\n" "1" " " "dbt-test" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " "=
  "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy=
 " "calc" "(" "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" =
 "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "   =
        " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "2" "-" "2" "x" "e" "'" =
 "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "                               =
  " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "          =
                     " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "w=
 ith" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "16" " " =
 "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "         =
                      " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" =
 "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "    =
       " "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "=
 -" "{" "                              " "\n" "}}" "5" " " "10" " " "/" "{" =
 " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "        =
   " "\n" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "5" " " "2" " " "+" "=
 {" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " =
 "calc" "(" "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2=
 " " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "=
 \n" "3" " " "-test" "t" "b" "d" "(" "\n" "1" "-" "2" "x" "e" "'" "\n" "\n" =
 ")))])]))" "p" "x" "se" " " "d" "r" "i" "h" "t" "(" " " "dbt-parse" "(" "  =
                " "\n" ")))" "p" "ex" "s" " " "nd" "o" "c" "e" "s" "(" " " "=
 d" "n" "o" "c" "e" "s" "(" " " "dbt-parse" "(" "                 " "\n" "))=
 " "p" "x" "e" "s" " " "d" "n" "co" "e" "s" "(" " " "t" "s" "r" "i" "f" "(" =
 " " "h" "t" "i" "w" "(" " " ")" "h" "t" "i" "w" "[(" "       " "\n" ")))]" =
 "sexp" " " "third" "(" " " "dbt-parse" "(" "                 " "\n" "))" "s=
 exp" " " "second" "(" " " "dbt-parse" "(" " " "v" "i" "d" "(" " " ")" "/" "=
 [(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "     =
             " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "su=
 b" "(" " " ")" "-" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "d=
 bt-parse" "(" "                 " "\n" "))" "sexp" " " "second" "(" " " "db=
 t-parse" "(" " " "add" "(" " " ")" "+" "[(" "       " "\n" ")" "sexp" " " "=
 first" "(" " " "case" "(" "     " "\n" ")" "sexp" " " "list?" "[(" "    " "=
 \n" ")]" "p" "x" "e" "s" " " "d" "i" "(" " " ")" "p" "x" "e" "s" " " "?" "l=
 " "o" "b" "m" "y" "s" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "s=
 exp" " " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "db=
 t-parse" "(" " " "define" "(" "\n" "E" "A" "W" " " ">" "-" " " "n" "o" "i" =
 "s" "s" "e" "r" "p" "x" "e" "-" "S" " " ":" " " "dbt-parse" " " ";" ";" "\n=
 " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "     =
                       " "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "=
  " "node" "(" "                                       " "\n" "))" "leaf" "(=
 " " " ")" "leaf" "(" " " "6" " " "node" "(" "                              =
          " "\n" "7" " " "node" "(" "                                 " "\n"=
  "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "               =
                   " "\n" "5" " " "node" "(" "                           " "=
 \n" "20" " " "node" "(" " " "10" " " "insert" "(" "          " "\n" ")))" "=
 leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "                " "\n=
 " ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "le=
 af" "(" " " "9" " " "node" "(" "                            " "\n" "))" "le=
 af" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                        =
     " "\n" "7" " " "node" "(" "                      " "\n" "))" "leaf" "("=
  " " ")" "leaf" "(" " " "2" " " "node" "(" "                      " "\n" "5=
 " " " "node" "(" "                " "\n" "20" " " "node" "(" " " "dbt-test"=
  "(" "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "=
 8" " " "insert" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" "=
  " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "dbt-te=
 st" "(" "\n" ")))" "leaf" "(" " " "4" " " "insert" "(" " " "))" "leaf" "(" =
 " " ")" "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" "-7" "1" =
 "ex" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "n=
 ode" "(" "                             " "\n" ")))))" "leaf" "(" " " ")" "l=
 eaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" =
 "                                         " "\n" "))" "leaf" "(" " " ")" "l=
 eaf" "(" " " "6" " " "node" "(" "                                         "=
  "\n" "7" " " "node" "(" "                                   " "\n" "))" "l=
 eaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                       =
             " "\n" "5" " " "node" "(" "                             " "\n" =
 "20" " " "node" "(" " " "s" "all-number" "(" "          " "\n" ")" "29" " "=
  "10" " " "9" " " "6" " " "7" " " "2" " " "5" " " "20" " " "list" "(" " " "=
 dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node"=
  "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "s" "r" "be" "m" "u" "n"=
  "-" "l" "al" "(" "          " "\n" ")" "8" " " "4" " " "list" "(" " " "-te=
 st" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l"=
  "(" " " "7" " " "e" "d" "o" "n" "(" " " "s" "r" "e" "b" "m" "u" "n" "-" "l=
 " "al" "(" "          " "\n" ")" "7" " " "t" "s" "li" "(" " " "t" "s" "-te"=
  "t" "b" "d" "(" "\n" "-6" "1" "x" "e" "'" "\n" "\n" ")))))" "leaf" "(" " "=
  ")" "leaf" "(" " " "9" "2" " " "node" "(" "                         " "\n"=
  ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "lea=
 f" "(" " " "9" " " "node" "(" "                                     " "\n" =
 "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                =
                      " "\n" "7" " " "node" "(" "                           =
     " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "     =
                           " "\n" "5" " " "node" "(" "                      =
    " "\n" "20" " " "node" "(" " " "e" "g" "a" "r" "e" "v" "a" "(" "        =
   " "\n" "1" "1" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" =
 "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "e=
 " "g" "a" "aver" "(" "          " "\n" "6" " " "t" "s" "e" "-t" "t" "b" "d"=
  "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " =
 " "e" "d" "o" "n" "(" " " "e" "g" "a" "r" "e" "av" "(" "          " "\n" "7=
 " " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "-5" "1" "x" "e" "'" "\n" "\n" "))=
 )" "0" "1" " " "e" "r" "e" "h" "p" "s" "(" " " "e" "m" "u" "l" "o" "v" "(" =
 "          " "\n" ")" "pi" " " "0/3" "0" "0" "4" " " "*" "(" " " "t" "s" "e=
 " "-t" "t" "b" "d" "(" "\n" ")))" "5" " " "3" " " "2" " " "m" "s" "i" "r" "=
 p" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "0" "3" " " "t" "s=
 " "e" "-t" "t" "b" "d" "(" "\n" ")))" "4" " " "e" "b" "u" "c" "(" " " "e" "=
 m" "u" "l" "o" "v" "(" "          " "\n" "4" "6" " " "t" "s" "e" "-t" "t" "=
 b" "d" "(" "\n" "-4" "1" "x" "e" "'" "\n" "\n" "))))" "e" "u" "r" "t" " " "=
 a" "e" "t" "(" " " ")" "\"" "e" "l" "p" "p" "a" "e" "n" "i" "p" "\"" " " "t=
 " "i" "u" "r" "f" "(" " " ")" "\"" "na" "a" "n" "a" "b" "\"" " " "t" "i" "u=
 " "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "=
 a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "=
 g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "a" "e" "t" " " "r" "a" "ul"=
  "g" "e" "r" " " " a" "d" "n" "a" " " "e" "l" "p" "p" "a" "e" "n" "i" "p" "=
  " "a" " " "d" "n" "a" " " "a" "n" "a" "an" "b" " " "a" "\"" " " "t" "s" "e=
 " "-t" "bt" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o"=
  "c" "(" " " ")" "5" " " "3" " " "ts" "u" "n" "o" "d" "-" "f" "o" "-" "x" "=
 o" "b" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" =
 "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" =
 "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "e" "f" "f" "o" "c" " " "f"=
  "a" "c" "e" "d" " " "a" " " "d" "n" " a" "s" "t" "u" "n" "o" "d" " " "d" "=
 e" "z" "a" "l" "g" " " "5" " " "d" "n" "a" " " "s" "t" "u" "n" "o" "d" " " =
 "n" "i" "a" "l" "p" " " "3" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "))=
 ))" "\"" "e" "n" "i" "ar" "t" "c" "e" "n" "\"" " " "t" "i" "u" "r" "f" "(" =
 " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a"=
  "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h"=
  "t" "o" "n" " " "d" "n" "a" " " "e" "n" "i" "r" "a" "t" "c" "e" "n" " " "a=
 " "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "-3" "1" "x" "e" "'" "\n" "\n=
 " "))))" "\"" "e" "g" "n" "a" "r" "o" "\"" " " "t" "i" "u" "r" "f" "(" "   =
                           " "\n" ")" "false" " " "coffee" "(" "            =
                  " "\n" ")" "\"apple\"" " " "fruit" "(" "                  =
            " "\n" ")" "true" " " "coffee" "(" "                            =
  " "\n" ")" "true" " " "tea" "(" "                             " "\n" ")" "=
 1" " " "1" " " "s" "t" "nu" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t"=
  "s" "i" "l" "(" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "     =
      " "\n" "))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")=
 " "e" "u" "r" "t" " " "ee" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " =
 "a" "e" "t" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(=
 " "\n" "))))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " ")" "e" "u" "r" "=
 t" " " "e" "e" "ff" "co" "(" " " ")" "\"banana\"" " " "fruit" "(" " " "t" "=
 s" "i" "l" "(" " " "drinks-only" "(" "          " "\n" "))" "false" " " "te=
 a" "(" " " ")" "true" " " "coffee" "(" " " "t" "s" "i" "l" "(" " " "t" "s" =
 "e" "-t" "t" "b" "d" "(" "\n" "))" "y" "t" "p" "m" "e" " " "y" "l" "n" "o" =
 "-" "s" "k" "n" "i" "r" "d" "(" "          " "\n" "y" "t" "p" "m" "e" " " "=
 t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-2" "1" "x" "e" "'" "\n" "\n" ")))" "=
 0" "2" " " "0" "1" " " "-donuts" "f" "o" "-" "x" "bo" "(" " " "lth-nut" "a"=
  "e" "h" "(" "          " "\n" ")" "0" " " "0" "3" " " "s" "t" "u" "n" "o" =
 "d" "-" "f" "-o" "x" "o" "b" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" =
 ")))" "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "t" "i" "u" "r" "f"=
  "(" " " "t" "u" "n" "-" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" "\"=
 " "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "it" "u" "r" "f" "(" " " "t"=
  "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "s" "l" "a" "f" " " "a" "e" "t=
 " "(" " " "t" "u" "-n" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" "e" "=
 ls" "a" "f" " " "tea" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "=
 e" "u" "r" "t" " " "e" "e" "f" "f" "o" "c" "(" " " "health-nut" "(" "      =
     " "\n" ")" "e" "s" "l" "a" "f" " " "e" "fe" "f" "o" "c" "(" " " "t" "s"=
  "e" "-t" "t" "b" "d" "(" "\n" "-1" "1" "x" "e" "'" "\n" "\n" ")]))))]))" "=
 v" " " "expected" " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected =
 ~a, got ~a\"" " " "format" "(" " " "else" "[" "                            =
            " "\n" "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "  =
                                      " "\n" ";[(and (string? expected) (str=
 ing? v)) (list expected v)]" "                                       " "\n"=
  "cond" "(" "                                     " "\n" "])" "actual" " " =
 "v" "([" " " "let" "(" "                                   " "\n" "])" "exn=
 -message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" =
 " " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "actual=
 " " " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" =
 "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("\n" "=
 }}}))" "x" " " "x" " " "+" "{" "                      " "\n" "}}" "2" " " "=
 x" " " "/" "{" " " "y" "{" " " "with" "{" "                    " "\n" "}}" =
 "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "  =
         " "\n" "}}})" "x" " " "x" " " "+" "{" "                          " =
 "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "             =
            " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" =
 "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "x" " " "0"=
  "1" " " "-" "{" "                    " "\n" "}}}" "2" " " "8" " " "/" "{" =
 " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "      =
     " "\n" "}})" "x" " " "0" "1" " " "-" "{" "                        " "\n=
 " "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with"=
  "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "1" " =
 " "x" " " "-" "{" "                    " "\n" "}}" "5" " " "10" " " "/" "{"=
  " " "x" "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}})" "1"=
  " " "x" " " "-" "{" "                        " "\n" "}}" "5" " " "10" " " =
 "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" =
 "b" "d" "(" "\n" "}}))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+"=
  "{" " " "/" "{" "'" " " "parse" "(" "          " "\n" "}})" "5" " " "2" " =
 " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "=
 (" " " "-test" "t" "b" "d" "(" "\n" "}))" "2" " " "6" " " "/" "{" "'" " " "=
 e" "s" "r" "a" "p" "(" "          " "\n" "})" "2" " " "6" " " "/" "{" "'" "=
  " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "5" "-" "2" "x" "e" "'"=
  "\n" "\n" "\"" "!" "!" "!" "e" "d" "o" "c" " " "k" "c" "e" "h" "c" "\"" "\=
 n" "4" "-" "2" "x" "e" "'" "\n" "\n" "}}}}})))" "d" " " "c" " " "b" " " "a"=
  " " "+" "{" "                                         " "\n" "}}" "3" " " =
 "c" " " "+" "{" " " "d" "{" " " "with" "{" "                               =
         " "\n" "}}" "2" " " "b" " " "+" "{" " " "c" "{" " " "with" "{" "   =
                                   " "\n" "}}" "1" " " "a" " " "+" "{" " " "=
 b" "{" " " "with" "{" "                                   " "\n" "}" "0" " =
 " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "     =
      " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}})))" "c" " " "a" =
 " " "+" "{" "                                     " "\n" "}" "9" " " "c" "{=
 " " " "with" "{" "                                   " "\n" "}}}" "b" " " "=
 b" " " "+" "{" " " "}}" "7" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" =
 " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "   =
        " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "8" =
 " " "b" " " "+" "{" "                                   " "\n" "}" "a" " " =
 "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "       =
    " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}})))=
 " "b" " " "a" " " "+" "{" "                                       " "\n" "}=
 " "4" " " "b" "{" " " "with" "{" "                                     " "\=
 n" "}" "a" " " "a" "{" " " "with" "{" "                                   "=
  "\n" "}" "5" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-=
 vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}}=
 })))" "d" " " "c" " " "+" "{" "                                          " =
 "\n" "}" "b" " " "a" " " "+" "{" " " "-" "{" "                             =
           " "\n" "}" "9" " " "c" "{" " " "with" "{" "                      =
                " "\n" "}" "8" " " "b" "{" " " "with" "{" "                 =
                   " "\n" "}" "8" " " "a" "{" " " "with" "{" "'" " " "dbt-pa=
 rse" "(" " " "free-vars" "(" "          " "\n" ")" "d" "(" "'" " " "-test" =
 "t" "b" "d" "(" "\n" "}})))" "b" " " "a" " " "+" "{" "                     =
               " "\n" "}" "4" " " "a" "{" " " "with" "{" "'" " " "dbt-parse"=
  "(" " " "free-vars" "(" "          " "\n" ")" "b" "(" "'" " " "-test" "t" =
 "b" "d" "(" "\n" "}})))" "b" " " "2" " " "+" "{" " " "a" " " "-" "{" "'" " =
 " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "("=
  "'" " " "-test" "t" "b" "d" "(" "\n" "})))" "b" " " "a" " " "+" "{" "'" " =
 " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "("=
  "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "a" "'" " " "dbt-parse" "(" " "=
  "free-vars" "(" "          " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" =
 "(" "\n" ")))" "'5" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\=
 n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "3" "-" "2" "x" "e" "'" "\n" "=
 \n" "}}})))" "x" " " "x" " " "+" "{" "                                     =
 " "\n" "}}" "0" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "           =
                         " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " =
 " "with" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" "          " "\n" =
 "6" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{=
 " "                                   " "\n" "}}}" "2" " " "8" " " "/" "{" =
 " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " "=
  "calc-lazy" "(" "          " "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}}=
 )))" "1" " " "x" " " "-" "{" "                                   " "\n" "}}=
 " "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "=
 (" " " "-lazy" "calc" "(" "          " "\n" "1" " " "dbt-test" "(" "\n" "}}=
 )))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'=
 " " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\n" "2" " " "-te=
 st" "t" "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse"=
  "(" " " "-lazy" "calc" "(" "          " "\n" "3" " " "-test" "t" "b" "d" "=
 (" "\n" "2" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" =
 "                                " "\n" "}}" "2" " " "x" " " "/" "{" " " "y=
 " "{" " " "with" "{" "                              " "\n" "}}" "2" " " "16=
 " " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc"=
  "(" "          " "\n" "16" " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " =
 " "0" "1" " " "-" "{" "                              " "\n" "}}}" "2" " " "=
 8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt=
 -parse" "(" " " "calc" "(" "          " "\n" "5" " " "-test" "t" "b" "d" "(=
 " "\n" "}})))" "1" " " "x" " " "-" "{" "                              " "\n=
 " "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-par=
 se" "(" " " "calc" "(" "          " "\n" "1" " " "-test" "t" "b" "d" "(" "\=
 n" "}})))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" =
 "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "2" " " "-test=
 " "t" "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "=
 (" " " "calc" "(" "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "1=
 " "-" "2" "x" "e" "'" "\n" "\n" ")))])]))" "p" "x" "se" " " "d" "r" "i" "h"=
  "t" "(" " " "dbt-parse" "(" "                 " "\n" ")))" "p" "ex" "s" " =
 " "nd" "o" "c" "e" "s" "(" " " "d" "n" "o" "c" "e" "s" "(" " " "dbt-parse" =
 "(" "                 " "\n" "))" "p" "x" "e" "s" " " "d" "n" "co" "e" "s" =
 "(" " " "t" "s" "r" "i" "f" "(" " " "h" "t" "i" "w" "(" " " ")" "h" "t" "i"=
  "w" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" =
 "                 " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" "=
  " "v" "i" "d" "(" " " ")" "/" "[(" "       " "\n" ")))]" "sexp" " " "third=
 " "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp" " " "second"=
  "(" " " "dbt-parse" "(" " " "sub" "(" " " ")" "-" "[(" "       " "\n" ")))=
 ]" "sexp" " " "third" "(" " " "dbt-parse" "(" "                 " "\n" "))"=
  "sexp" " " "second" "(" " " "dbt-parse" "(" " " "add" "(" " " ")" "+" "[("=
  "       " "\n" ")" "sexp" " " "first" "(" " " "case" "(" "     " "\n" ")" =
 "sexp" " " "list?" "[(" "    " "\n" ")]" "p" "x" "e" "s" " " "d" "i" "(" " =
 " ")" "p" "x" "e" "s" " " "?" "l" "o" "b" "m" "y" "s" "[(" "    " "\n" ")]"=
  "sexp" " " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" =
 "(" "  " "\n" ")" "sexp" " " "dbt-parse" "(" " " "define" "(" "\n" "E" "A" =
 "W" " " ">" "-" " " "n" "o" "i" "s" "s" "e" "r" "p" "x" "e" "-" "S" " " ":"=
  " " "dbt-parse" " " ";" ";" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(=
 " " " "30" " " "node" "(" "                           " "\n" "))))" "leaf" =
 "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "                            =
            " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "("=
  "                                       " "\n" "7" " " "node" "(" "       =
                           " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2"=
  " " "node" "(" "                                 " "\n" "5" " " "node" "("=
  "                           " "\n" "20" " " "node" "(" " " "10" " " "inser=
 t" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "=
 node" "(" "                " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " "=
  "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "           =
                  " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "nod=
 e" "(" "                            " "\n" "7" " " "node" "(" "            =
           " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" =
 "                      " "\n" "5" " " "node" "(" "                " "\n" "2=
 0" " " "node" "(" " " "dbt-test" "(" "\n" "))))" "leaf" "(" " " ")" "leaf" =
 "(" " " "4" " " "node" "(" " " "8" " " "insert" "(" "          " "\n" ")))"=
  "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " =
 " "4" " " "node" "(" " " "dbt-test" "(" "\n" ")))" "leaf" "(" " " "4" " " "=
 insert" "(" " " "))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" "=
  " "dbt-test" "(" "\n" "-7" "1" "ex" "'" "\n" "\n" ")))))" "leaf" "(" " " "=
 )" "leaf" "(" " " "9" "2" " " "node" "(" "                             " "\=
 n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "l=
 eaf" "(" " " "9" " " "node" "(" "                                         "=
  "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "          =
                                " "\n" "7" " " "node" "(" "                 =
                   " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "no=
 de" "(" "                                   " "\n" "5" " " "node" "(" "    =
                          " "\n" "20" " " "node" "(" " " "s" "all-number" "(=
 " "          " "\n" ")" "29" " " "10" " " "9" " " "6" " " "7" " " "2" " " "=
 5" " " "20" " " "list" "(" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " "=
 )" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" =
 "(" " " "s" "r" "be" "m" "u" "n" "-" "l" "al" "(" "          " "\n" ")" "8"=
  " " "4" " " "list" "(" " " "-test" "t" "b" "d" "(" "\n" "))))" "f" "a" "e"=
  "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "s=
 " "r" "e" "b" "m" "u" "n" "-" "l" "al" "(" "          " "\n" ")" "7" " " "t=
 " "s" "li" "(" " " "t" "s" "-te" "t" "b" "d" "(" "\n" "-6" "1" "x" "e" "'" =
 "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "(" =
 "                         " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " =
 "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "            =
                          " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" =
 " " "node" "(" "                                     " "\n" "7" " " "node" =
 "(" "                               " "\n" "))" "leaf" "(" " " ")" "leaf" "=
 (" " " "2" " " "node" "(" "                               " "\n" "5" " " "n=
 ode" "(" "                         " "\n" "20" " " "node" "(" " " "e" "g" "=
 a" "r" "e" "v" "a" "(" "          " "\n" "1" "1" " " "dbt-test" "(" "\n" ")=
 ))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "=
 (" " " "4" " " "node" "(" " " "e" "g" "a" "aver" "(" "          " "\n" "6" =
 " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")=
 " "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "e" "g" "a" "r" "=
 e" "av" "(" "          " "\n" "7" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "-=
 5" "1" "x" "e" "'" "\n" "\n" ")))" "0" "1" " " "e" "r" "e" "h" "p" "s" "(" =
 " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" ")" "pi" " " "0/3" "0" "0=
 " "4" " " "*" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "5" " " "=
 3" " " "2" " " "m" "s" "i" "r" "p" "(" " " "e" "m" "u" "l" "o" "v" "(" "   =
        " "\n" "0" "3" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "4" "=
  " "e" "b" "u" "c" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "4=
 " "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-4" "1" "x" "e" "'" "\n" "=
 \n" "))))" "e" "u" "r" "t" " " "a" "e" "t" "(" " " ")" "\"" "e" "l" "p" "p"=
  "a" "e" "n" "i" "p" "\"" " " "t" "i" "u" "r" "f" "(" " " ")" "\"" "na" "a"=
  "n" "a" "b" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "=
 r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          "=
  "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" =
 " " "a" "e" "t" " " "r" "a" "ul" "g" "e" "r" " " " a" "d" "n" "a" " " "e" "=
 l" "p" "p" "a" "e" "n" "i" "p" " " "a" " " "d" "n" "a" " " "a" "n" "a" "an"=
  "b" " " "a" "\"" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "))))" "e" "s" "l"=
  "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "5" " " "3" " " "ts" "u" "=
 n" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "r" =
 "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\=
 n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " "=
  "e" "e" "f" "f" "o" "c" " " "f" "a" "c" "e" "d" " " "a" " " "d" "n" " a" "=
 s" "t" "u" "n" "o" "d" " " "d" "e" "z" "a" "l" "g" " " "5" " " "d" "n" "a" =
 " " "s" "t" "u" "n" "o" "d" " " "n" "i" "a" "l" "p" " " "3" "\"" " " "t" "s=
 " "e" "t-t" "b" "d" "(" "\n" "))))" "\"" "e" "n" "i" "ar" "t" "c" "e" "n" "=
 \"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r"=
  "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e"=
  "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "n" "i=
 " "r" "a" "t" "c" "e" "n" " " "a" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\=
 n" "-3" "1" "x" "e" "'" "\n" "\n" "))))" "\"" "e" "g" "n" "a" "r" "o" "\"" =
 " " "t" "i" "u" "r" "f" "(" "                             " "\n" ")" "false=
 " " " "coffee" "(" "                             " "\n" ")" "\"apple\"" " "=
  "fruit" "(" "                             " "\n" ")" "true" " " "coffee" "=
 (" "                             " "\n" ")" "true" " " "tea" "(" "         =
                     " "\n" ")" "1" " " "1" " " "s" "t" "nu" "o" "d" "-" "f"=
  "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "y" "l" "n" "o" "-" "s=
 " "k" "n" "i" "r" "d" "(" "          " "\n" "))" "e" "s" "l" "a" "f" " " "e=
 " "e" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "ee" "f" "f" "o" "c" =
 "(" " " ")" "e" "u" "r" "t" " " "a" "e" "t" "(" " " "t" "s" "i" "l" "(" " "=
  "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "a" "=
 e" "t" "(" " " ")" "e" "u" "r" "t" " " "e" "e" "ff" "co" "(" " " ")" "\"ban=
 ana\"" " " "fruit" "(" " " "t" "s" "i" "l" "(" " " "drinks-only" "(" "     =
      " "\n" "))" "false" " " "tea" "(" " " ")" "true" " " "coffee" "(" " " =
 "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))" "y" "t" =
 "p" "m" "e" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "          =
 " "\n" "y" "t" "p" "m" "e" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-2" "=
 1" "x" "e" "'" "\n" "\n" ")))" "0" "2" " " "0" "1" " " "-donuts" "f" "o" "-=
 " "x" "bo" "(" " " "lth-nut" "a" "e" "h" "(" "          " "\n" ")" "0" " " =
 "0" "3" " " "s" "t" "u" "n" "o" "d" "-" "f" "-o" "x" "o" "b" "(" " " "t" "s=
 " "e" "-t" "t" "b" "d" "(" "\n" ")))" "\"" "e" "n" "i" "r" "e" "g" "n" "a" =
 "t" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "u" "n" "-" "h" "lt" "a" "e" "=
 h" "(" "          " "\n" ")" "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" =
 " " "it" "u" "r" "f" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e=
 " "s" "l" "a" "f" " " "a" "e" "t" "(" " " "t" "u" "-n" "h" "lt" "a" "e" "h"=
  "(" "          " "\n" ")" "e" "ls" "a" "f" " " "tea" "(" " " "t" "s" "e" "=
 -t" "t" "b" "d" "(" "\n" ")))" "e" "u" "r" "t" " " "e" "e" "f" "f" "o" "c" =
 "(" " " "health-nut" "(" "          " "\n" ")" "e" "s" "l" "a" "f" " " "e" =
 "fe" "f" "o" "c" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-1" "1" "x"=
  "e" "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quo=
 te" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "=
 [" "                                       " "\n" "]" "#t" " " ")" "expecte=
 d" " " "v" " " "equal?" "[(" "                                       " "\n"=
  ";[(and (string? expected) (string? v)) (list expected v)]" "             =
                           " "\n" "cond" "(" "                              =
        " "\n" "])" "actual" " " "v" "([" " " "let" "(" "                   =
                 " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(=
 " " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" =
 " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" "    " "\n" "=
 ()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" =
 " " "define-syntax" "(") ("\n" "}}}))" "x" " " "x" " " "+" "{" "           =
            " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "=
                     " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "w=
 ith" "{" "'" " " "parse" "(" "          " "\n" "}}})" "x" " " "x" " " "+" "=
 {" "                          " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "=
 {" " " "with" "{" "                        " "\n" "}}" "2" " " "16" " " "/"=
  "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b"=
  "d" "(" "\n" "}}))" "x" " " "0" "1" " " "-" "{" "                    " "\n=
 " "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with"=
  "{" "'" " " "parse" "(" "          " "\n" "}})" "x" " " "0" "1" " " "-" "{=
 " "                        " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " =
 " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t=
 " "b" "d" "(" "\n" "}}))" "1" " " "x" " " "-" "{" "                    " "\=
 n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse"=
  "(" "          " "\n" "}})" "1" " " "x" " " "-" "{" "                     =
    " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " =
 "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "5" " " "2" " " "+"=
  "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "parse" "(" "     =
      " "\n" "}})" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" "=
  " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}))" "=
 2" " " "6" " " "/" "{" "'" " " "e" "s" "r" "a" "p" "(" "          " "\n" "}=
 )" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" =
 "(" "\n" "5" "-" "2" "x" "e" "'" "\n" "\n" "\"" "!" "!" "!" "e" "d" "o" "c"=
  " " "k" "c" "e" "h" "c" "\"" "\n" "4" "-" "2" "x" "e" "'" "\n" "\n" "}}}}}=
 )))" "d" " " "c" " " "b" " " "a" " " "+" "{" "                             =
             " "\n" "}}" "3" " " "c" " " "+" "{" " " "d" "{" " " "with" "{" =
 "                                       " "\n" "}}" "2" " " "b" " " "+" "{"=
  " " "c" "{" " " "with" "{" "                                     " "\n" "}=
 }" "1" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" "                    =
                " "\n" "}" "0" " " "a" "{" " " "with" "{" "'" " " "dbt-parse=
 " "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d=
 " "(" "\n" "}}})))" "c" " " "a" " " "+" "{" "                              =
        " "\n" "}" "9" " " "c" "{" " " "with" "{" "                         =
           " "\n" "}}}" "b" " " "b" " " "+" "{" " " "}}" "7" " " "a" " " "+"=
  "{" " " "b" "{" " " "with" "{" " " "a" "{" " " "with" "{" "'" " " "dbt-par=
 se" "(" " " "free-vars" "(" "          " "\n" ")" "a" "(" "'" " " "-test" "=
 t" "b" "d" "(" "\n" "}})))" "8" " " "b" " " "+" "{" "                      =
              " "\n" "}" "a" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" =
 "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-tes=
 t" "t" "b" "d" "(" "\n" "}}}})))" "b" " " "a" " " "+" "{" "                =
                        " "\n" "}" "4" " " "b" "{" " " "with" "{" "         =
                             " "\n" "}" "a" " " "a" "{" " " "with" "{" "    =
                                " "\n" "}" "5" " " "a" "{" " " "with" "{" "'=
 " " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-=
 test" "t" "b" "d" "(" "\n" "}}}}})))" "d" " " "c" " " "+" "{" "            =
                               " "\n" "}" "b" " " "a" " " "+" "{" " " "-" "{=
 " "                                       " "\n" "}" "9" " " "c" "{" " " "w=
 ith" "{" "                                     " "\n" "}" "8" " " "b" "{" "=
  " "with" "{" "                                   " "\n" "}" "8" " " "a" "{=
 " " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "=
 \n" ")" "d" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "a" " =
 " "+" "{" "                                   " "\n" "}" "4" " " "a" "{" " =
 " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" =
 ")" "b" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "2" " " "+=
 " "{" " " "a" " " "-" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "    =
       " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "})))=
 " "b" " " "a" " " "+" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "    =
       " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))"=
  "a" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "a" =
 "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "'5" " " "dbt-parse" "(" " "=
  "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n=
 " "3" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "     =
                                 " "\n" "}}" "0" " " "x" " " "/" "{" " " "y"=
  "{" " " "with" "{" "                                   " "\n" "}}" "2" " "=
  "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "c=
 alc-lazy" "(" "          " "\n" "6" "1" " " "-test" "t" "b" "d" "(" "\n" "}=
 })))" "x" " " "0" "1" " " "-" "{" "                                   " "\n=
 " "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with"=
  "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" "          " "\n" "5" " " =
 "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "             =
                       " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " =
 "with" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\n"=
  "1" " " "dbt-test" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" "8" " =
 " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(=
 " "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " " "6"=
  " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\=
 n" "3" " " "-test" "t" "b" "d" "(" "\n" "2" "-" "2" "x" "e" "'" "\n" "\n" "=
 }}})))" "x" " " "x" " " "+" "{" "                                " "\n" "}}=
 " "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                     =
          " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'=
 " " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "16" " " "-test" "t"=
  "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "                    =
           " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x"=
  "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n=
 " "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "   =
                            " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{"=
  " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "1=
 " " " "-test" "t" "b" "d" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" =
 "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" =
 "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " " "6" "=
  " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "3" " "=
  "-test" "t" "b" "d" "(" "\n" "1" "-" "2" "x" "e" "'" "\n" "\n" ")))])]))" =
 "p" "x" "se" " " "d" "r" "i" "h" "t" "(" " " "dbt-parse" "(" "             =
     " "\n" ")))" "p" "ex" "s" " " "nd" "o" "c" "e" "s" "(" " " "d" "n" "o" =
 "c" "e" "s" "(" " " "dbt-parse" "(" "                 " "\n" "))" "p" "x" "=
 e" "s" " " "d" "n" "co" "e" "s" "(" " " "t" "s" "r" "i" "f" "(" " " "h" "t"=
  "i" "w" "(" " " ")" "h" "t" "i" "w" "[(" "       " "\n" ")))]" "sexp" " " =
 "third" "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp" " " "s=
 econd" "(" " " "dbt-parse" "(" " " "v" "i" "d" "(" " " ")" "/" "[(" "      =
  " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "                =
  " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "sub" "(" " " =
 ")" "-" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "=
 (" "                 " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(=
 " " " "add" "(" " " ")" "+" "[(" "       " "\n" ")" "sexp" " " "first" "(" =
 " " "case" "(" "     " "\n" ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "p=
 " "x" "e" "s" " " "d" "i" "(" " " ")" "p" "x" "e" "s" " " "?" "l" "o" "b" "=
 m" "y" "s" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "n=
 umber?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "dbt-parse" "(=
 " " " "define" "(" "\n" "E" "A" "W" " " ">" "-" " " "n" "o" "i" "s" "s" "e"=
  "r" "p" "x" "e" "-" "S" " " ":" " " "dbt-parse" " " ";" ";" "\n" "\n" ")))=
 ))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "                =
            " "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "9" " " "node" "=
 (" "                                       " "\n" "))" "leaf" "(" " " ")" "=
 leaf" "(" " " "6" " " "node" "(" "                                       " =
 "\n" "7" " " "node" "(" "                                 " "\n" "))" "leaf=
 " "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                          =
        " "\n" "5" " " "node" "(" "                           " "\n" "20" " =
 " "node" "(" " " "10" " " "insert" "(" "          " "\n" ")))" "leaf" "(" "=
  " ")" "leaf" "(" " " "30" " " "node" "(" "                " "\n" ")))))" "=
 leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " "=
  "9" " " "node" "(" "                            " "\n" "))" "leaf" "(" " "=
  ")" "leaf" "(" " " "6" " " "node" "(" "                            " "\n" =
 "7" " " "node" "(" "                      " "\n" "))" "leaf" "(" " " ")" "l=
 eaf" "(" " " "2" " " "node" "(" "                      " "\n" "5" " " "node=
 " "(" "                " "\n" "20" " " "node" "(" " " "dbt-test" "(" "\n" "=
 ))))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "8" " " "ins=
 ert" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " =
 "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n=
 " ")))" "leaf" "(" " " "4" " " "insert" "(" " " "))" "leaf" "(" " " ")" "le=
 af" "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" "-7" "1" "ex" "'" "\=
 n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "(" " =
                             " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " =
 " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "          =
                                " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " =
 " "6" " " "node" "(" "                                         " "\n" "7" "=
  " "node" "(" "                                   " "\n" "))" "leaf" "(" " =
 " ")" "leaf" "(" " " "2" " " "node" "(" "                                  =
  " "\n" "5" " " "node" "(" "                             " "\n" "20" " " "n=
 ode" "(" " " "s" "all-number" "(" "          " "\n" ")" "29" " " "10" " " "=
 9" " " "6" " " "7" " " "2" " " "5" " " "20" " " "list" "(" " " "dbt-test" "=
 (" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")=
 " "leaf" "(" " " "4" " " "node" "(" " " "s" "r" "be" "m" "u" "n" "-" "l" "a=
 l" "(" "          " "\n" ")" "8" " " "4" " " "list" "(" " " "-test" "t" "b"=
  "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7=
 " " " "e" "d" "o" "n" "(" " " "s" "r" "e" "b" "m" "u" "n" "-" "l" "al" "(" =
 "          " "\n" ")" "7" " " "t" "s" "li" "(" " " "t" "s" "-te" "t" "b" "d=
 " "(" "\n" "-6" "1" "x" "e" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf"=
  "(" " " "9" "2" " " "node" "(" "                         " "\n" ")))))" "l=
 eaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " =
 "9" " " "node" "(" "                                     " "\n" "))" "leaf"=
  "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                           =
           " "\n" "7" " " "node" "(" "                               " "\n" =
 "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                =
                " "\n" "5" " " "node" "(" "                         " "\n" "=
 20" " " "node" "(" " " "e" "g" "a" "r" "e" "v" "a" "(" "          " "\n" "1=
 " "1" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8"=
  " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "e" "g" "a" "=
 aver" "(" "          " "\n" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "=
 ))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "=
 o" "n" "(" " " "e" "g" "a" "r" "e" "av" "(" "          " "\n" "7" " " "t" "=
 s" "e" "-t" "bt" "d" "(" "\n" "-5" "1" "x" "e" "'" "\n" "\n" ")))" "0" "1" =
 " " "e" "r" "e" "h" "p" "s" "(" " " "e" "m" "u" "l" "o" "v" "(" "          =
 " "\n" ")" "pi" " " "0/3" "0" "0" "4" " " "*" "(" " " "t" "s" "e" "-t" "t" =
 "b" "d" "(" "\n" ")))" "5" " " "3" " " "2" " " "m" "s" "i" "r" "p" "(" " " =
 "e" "m" "u" "l" "o" "v" "(" "          " "\n" "0" "3" " " "t" "s" "e" "-t" =
 "t" "b" "d" "(" "\n" ")))" "4" " " "e" "b" "u" "c" "(" " " "e" "m" "u" "l" =
 "o" "v" "(" "          " "\n" "4" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" =
 "\n" "-4" "1" "x" "e" "'" "\n" "\n" "))))" "e" "u" "r" "t" " " "a" "e" "t" =
 "(" " " ")" "\"" "e" "l" "p" "p" "a" "e" "n" "i" "p" "\"" " " "t" "i" "u" "=
 r" "f" "(" " " ")" "\"" "na" "a" "n" "a" "b" "\"" " " "t" "i" "u" "r" "f" "=
 (" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" =
 "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" =
 "h" "t" "o" "n" " " "d" "n" "a" " " "a" "e" "t" " " "r" "a" "ul" "g" "e" "r=
 " " " " a" "d" "n" "a" " " "e" "l" "p" "p" "a" "e" "n" "i" "p" " " "a" " " =
 "d" "n" "a" " " "a" "n" "a" "an" "b" " " "a" "\"" " " "t" "s" "e" "-t" "bt"=
  "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " =
 " ")" "5" " " "3" " " "ts" "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" =
 " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a"=
  "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h"=
  "t" "o" "n" " " "d" "n" "a" " " "e" "e" "f" "f" "o" "c" " " "f" "a" "c" "e=
 " "d" " " "a" " " "d" "n" " a" "s" "t" "u" "n" "o" "d" " " "d" "e" "z" "a" =
 "l" "g" " " "5" " " "d" "n" "a" " " "s" "t" "u" "n" "o" "d" " " "n" "i" "a"=
  "l" "p" " " "3" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "))))" "\"" "e=
 " "n" "i" "ar" "t" "c" "e" "n" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s"=
  "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b=
 " "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n=
 " " " "d" "n" "a" " " "e" "n" "i" "r" "a" "t" "c" "e" "n" " " "a" "\"" " " =
 "t" "s" "e" "t-t" "b" "d" "(" "\n" "-3" "1" "x" "e" "'" "\n" "\n" "))" "))"=
  "\"" "e" "g" "n" "a" "r" "o" "\"" " " "t" "i" "u" "r" "f" "(" "           =
                   " "\n" ")" "false" " " "coffee" "(" "                    =
          " "\n" ")" "\"apple\"" " " "fruit" "(" "                          =
    " "\n" ")" "true" " " "coffee" "(" "                             " "\n" =
 ")" "true" " " "tea" "(" "                             " "\n" ")" "1" " " "=
 1" " " "s" "t" "nu" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i"=
  "l" "(" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "          " "=
 \n" "))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "e" "u=
 " "r" "t" " " "ee" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "a" "e" =
 "t" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "=
 ))))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " ")" "e" "u" "r" "t" " " "=
 e" "e" "ff" "co" "(" " " ")" "\"banana\"" " " "fruit" "(" " " "t" "s" "i" "=
 l" "(" " " "drinks-only" "(" "          " "\n" "))" "false" " " "tea" "(" "=
  " ")" "true" " " "coffee" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t"=
  "t" "b" "d" "(" "\n" "))" "y" "t" "p" "m" "e" " " "y" "l" "n" "o" "-" "s" =
 "k" "n" "i" "r" "d" "(" "          " "\n" "y" "t" "p" "m" "e" " " "t" "s" "=
 e" "-t" "t" "b" "d" "(" "\n" "-2" "1" "x" "e" "'" "\n" "\n" ")" ")" ")" "0"=
  "2" " " "0" "1" " " "-donuts" "f" "o" "-" "x" "bo" "(" " " "lth-nut" "a" "=
 e" "h" "(" "          " "\n" ")" "0" " " "0" "3" " " "s" "t" "u" "n" "o" "d=
 " "-" "f" "-o" "x" "o" "b" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")=
 " ")" ")" "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "t" "i" "u" "r"=
  "f" "(" " " "t" "u" "n" "-" "h" "lt" "a" "e" "h" "(" "          " "\n" ")"=
  "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "it" "u" "r" "f" "(" " "=
  "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")" ")" ")" "e" "s" "l" "a" "f" " " =
 "a" "e" "t" "(" " " "t" "u" "-n" "h" "lt" "a" "e" "h" "(" "          " "\n"=
  ")" "e" "ls" "a" "f" " " "tea" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\=
 n" ")" ")" ")" "e" "u" "r" "t" " " "e" "e" "f" "f" "o" "c" "(" " " "health-=
 nut" "(" "          " "\n" ")" "e" "s" "l" "a" "f" " " "e" "fe" "f" "o" "c"=
  "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-1" "1" "x" "e" "'" "\n" "\=
 n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quote" "(" " " "\"*=
 ** ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "            =
                            " "\n" "]" "#t" " " ")" "expected" " " "v" " " "=
 equal?" "[(" "                                       " "\n" ";[(and (string=
 ? expected) (string? v)) (list expected v)]" "                             =
           " "\n" "cond" "(" "                                     " "\n" "]=
 )" "actual" " " "v" "([" " " "let" "(" "                                   =
 " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" =
 " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "("=
  " " ")" "actual" " " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " =
 " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-synt=
 ax" "(") ("\n" "}}}))" "x" " " "x" " " "+" "{" "                      " "\n=
 " "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                =
     " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " "=
  "parse" "(" "          " "\n" "}}})" "x" " " "x" " " "+" "{" "            =
               " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{=
 " "                        " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{"=
  " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}=
 }))" "x" " " "0" "1" " " "-" "{" "                    " "\n" "}}}" "2" " " =
 "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "pa=
 rse" "(" "          " "\n" "}})" "x" " " "0" "1" " " "-" "{" "             =
            " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x=
 " "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\=
 n" "}}))" "1" " " "x" " " "-" "{" "                    " "\n" "}}" "5" " " =
 "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "          =
 " "\n" "}})" "1" " " "x" " " "-" "{" "                        " "\n" "}}" "=
 5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" =
 " " "-test" "t" "b" "d" "(" "\n" "}}))" "5" " " "2" " " "+" "{" " " "}" "8"=
  " " "6" " " "+" "{" " " "/" "{" "'" " " "parse" "(" "          " "\n" "}})=
 " "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" "=
  " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}))" "2" " " "6" " " "=
 /" "{" "'" " " "e" "s" "r" "a" "p" "(" "          " "\n" "})" "2" " " "6" "=
  " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "5" "-"=
  "2" "x" "e" "'" "\n" "\n" "\"" "!" "!" "!" "e" "d" "o" "c" " " "k" "c" "e"=
  "h" "c" "\"" "\n" "4" "-" "2" "x" "e" "'" "\n" "\n" "}}}}})))" "d" " " "c"=
  " " "b" " " "a" " " "+" "{" "                                         " "\=
 n" "}}" "3" " " "c" " " "+" "{" " " "d" "{" " " "with" "{" "               =
                         " "\n" "}}" "2" " " "b" " " "+" "{" " " "c" "{" " "=
  "with" "{" "                                     " "\n" "}}" "1" " " "a" "=
  " "+" "{" " " "b" "{" " " "with" "{" "                                   "=
  "\n" "}" "0" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-=
 vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}})=
 ))" "c" " " "a" " " "+" "{" "                                     " "\n" "}=
 " "9" " " "c" "{" " " "with" "{" "                                   " "\n"=
  "}}}" "b" " " "b" " " "+" "{" " " "}}" "7" " " "a" " " "+" "{" " " "b" "{"=
  " " "with" "{" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "fre=
 e-vars" "(" "          " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "=
 \n" "}})))" "8" " " "b" " " "+" "{" "                                   " "=
 \n" "}" "a" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-va=
 rs" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "=
 (" "\n" "}}}})))" "b" " " "a" " " "+" "{" "                                =
        " "\n" "}" "4" " " "b" "{" " " "with" "{" "                         =
             " "\n" "}" "a" " " "a" "{" " " "with" "{" "                    =
                " "\n" "}" "5" " " "a" "{" " " "with" "{" "'" " " "dbt-parse=
 " "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d=
 " "(" "\n" "}}}}})))" "d" " " "c" " " "+" "{" "                            =
               " "\n" "}" "b" " " "a" " " "+" "{" " " "-" "{" "             =
                           " "\n" "}" "9" " " "c" "{" " " "with" "{" "      =
                                " "\n" "}" "8" " " "b" "{" " " "with" "{" " =
                                   " "\n" "}" "8" " " "a" "{" " " "with" "{"=
  "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "d" "(" =
 "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "a" " " "+" "{" "     =
                               " "\n" "}" "4" " " "a" "{" " " "with" "{" "'"=
  " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" "(" "'" =
 " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "2" " " "+" "{" " " "a" " =
 " "-" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")"=
  "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "})))" "b" " " "a" " =
 " "+" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")"=
  "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "a" "'" " " "db=
 t-parse" "(" " " "free-vars" "(" "          " "\n" ")" "a" "(" "'" " " "-te=
 st" "t" "b" "d" "(" "\n" ")))" "'5" " " "dbt-parse" "(" " " "free-vars" "("=
  "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "3" "-" "2" "x=
 " "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "                     =
                 " "\n" "}}" "0" " " "x" " " "/" "{" " " "y" "{" " " "with" =
 "{" "                                   " "\n" "}}" "2" " " "16" " " "/" "{=
 " " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" " =
          " "\n" "6" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "0=
 " "1" " " "-" "{" "                                   " "\n" "}}}" "2" " " =
 "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "db=
 t-parse" "(" " " "calc-lazy" "(" "          " "\n" "5" " " "-test" "t" "b" =
 "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "                             =
       " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" "=
  " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\n" "1" " " "dbt-te=
 st" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{=
 " " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "=
 \n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'"=
  " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\n" "3" " " "-tes=
 t" "t" "b" "d" "(" "\n" "2" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " =
 "x" " " "+" "{" "                                " "\n" "}}" "2" " " "x" " =
 " "/" "{" " " "y" "{" " " "with" "{" "                              " "\n" =
 "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse=
 " "(" " " "calc" "(" "          " "\n" "16" " " "-test" "t" "b" "d" "(" "\n=
 " "}})))" "x" " " "0" "1" " " "-" "{" "                              " "\n"=
  "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" =
 "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "5" " " "-test=
 " "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "                   =
            " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" =
 "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "1" " " "-test" "t=
 " "b" "d" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " =
 "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n=
 " "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" "=
  " "dbt-parse" "(" " " "calc" "(" "          " "\n" "3" " " "-test" "t" "b"=
  "d" "(" "\n" "1" "-" "2" "x" "e" "'" "\n" "\n" ")))])]))" "p" "x" "se" " "=
  "d" "r" "i" "h" "t" "(" " " "dbt-parse" "(" "                 " "\n" ")))"=
  "p" "ex" "s" " " "nd" "o" "c" "e" "s" "(" " " "d" "n" "o" "c" "e" "s" "(" =
 " " "dbt-parse" "(" "                 " "\n" "))" "p" "x" "e" "s" " " "d" "=
 n" "co" "e" "s" "(" " " "t" "s" "r" "i" "f" "(" " " "h" "t" "i" "w" "(" " "=
  ")" "h" "t" "i" "w" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " =
 "dbt-parse" "(" "                 " "\n" "))" "sexp" " " "second" "(" " " "=
 dbt-parse" "(" " " "v" "i" "d" "(" " " ")" "/" "[(" "       " "\n" ")))]" "=
 sexp" " " "third" "(" " " "dbt-parse" "(" "                 " "\n" "))" "se=
 xp" " " "second" "(" " " "dbt-parse" "(" " " "sub" "(" " " ")" "-" "[(" "  =
      " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "            =
      " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "add" "(" =
 " " ")" "+" "[(" "       " "\n" ")" "sexp" " " "first" "(" " " "case" "(" "=
      " "\n" ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "p" "x" "e" "s" " =
 " "d" "i" "(" " " ")" "p" "x" "e" "s" " " "?" "l" "o" "b" "m" "y" "s" "[(" =
 "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "number?" "[(" "  =
   " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "dbt-parse" "(" " " "define" "=
 (" "\n" "E" "A" "W" " " ">" "-" " " "n" "o" "i" "s" "s" "e" "r" "p" "x" "e"=
  "-" "S" " " ":" " " "dbt-parse" " " ";" ";" "\n" "\n" ")))))" "leaf" "(" "=
  " ")" "leaf" "(" " " "30" " " "node" "(" "                           " "\n=
 " "))))" "leaf" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "            =
                            " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6=
 " " " "node" "(" "                                       " "\n" "7" " " "no=
 de" "(" "                                 " "\n" "))" "leaf" "(" " " ")" "l=
 eaf" "(" " " "2" " " "node" "(" "                                 " "\n" "5=
 " " " "node" "(" "                           " "\n" "20" " " "node" "(" " "=
  "10" " " "insert" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(=
 " " " "30" " " "node" "(" "                " "\n" ")))))" "leaf" "(" " " ")=
 " "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" =
 "(" "                            " "\n" "))" "leaf" "(" " " ")" "leaf" "(" =
 " " "6" " " "node" "(" "                            " "\n" "7" " " "node" "=
 (" "                      " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2"=
  " " "node" "(" "                      " "\n" "5" " " "node" "(" "         =
        " "\n" "20" " " "node" "(" " " "dbt-test" "(" "\n" "))))" "leaf" "("=
  " " ")" "leaf" "(" " " "4" " " "node" "(" " " "8" " " "insert" "(" "      =
     " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " "=
 )" "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" ")))" "leaf" "=
 (" " " "4" " " "insert" "(" " " "))" "leaf" "(" " " ")" "leaf" "(" " " "4" =
 " " "node" "(" " " "dbt-test" "(" "\n" "-7" "1" "ex" "'" "\n" "\n" ")))))" =
 "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "(" "                 =
             " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node=
 " "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "                          =
                " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node"=
  "(" "                                         " "\n" "7" " " "node" "(" " =
                                   " "\n" "))" "leaf" "(" " " ")" "leaf" "("=
  " " "2" " " "node" "(" "                                   " "\n" "5" " " =
 "node" "(" "                             " "\n" "20" " " "node" "(" " " "s"=
  "all-number" "(" "          " "\n" ")" "29" " " "10" " " "9" " " "6" " " "=
 7" " " "2" " " "5" " " "20" " " "list" "(" " " "dbt-test" "(" "\n" ")))))" =
 "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " "=
  "4" " " "node" "(" " " "s" "r" "be" "m" "u" "n" "-" "l" "al" "(" "        =
   " "\n" ")" "8" " " "4" " " "list" "(" " " "-test" "t" "b" "d" "(" "\n" ")=
 )))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o=
 " "n" "(" " " "s" "r" "e" "b" "m" "u" "n" "-" "l" "al" "(" "          " "\n=
 " ")" "7" " " "t" "s" "li" "(" " " "t" "s" "-te" "t" "b" "d" "(" "\n" "-6" =
 "1" "x" "e" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2"=
  " " "node" "(" "                         " "\n" ")))))" "leaf" "(" " " ")"=
  "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "=
 (" "                                     " "\n" "))" "leaf" "(" " " ")" "le=
 af" "(" " " "6" " " "node" "(" "                                     " "\n"=
  "7" " " "node" "(" "                               " "\n" "))" "leaf" "(" =
 " " ")" "leaf" "(" " " "2" " " "node" "(" "                               "=
  "\n" "5" " " "node" "(" "                         " "\n" "20" " " "node" "=
 (" " " "e" "g" "a" "r" "e" "v" "a" "(" "          " "\n" "1" "1" " " "dbt-t=
 est" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" =
 " " ")" "leaf" "(" " " "4" " " "node" "(" " " "e" "g" "a" "aver" "(" "     =
      " "\n" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "f" "a" "e=
 " "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "=
 e" "g" "a" "r" "e" "av" "(" "          " "\n" "7" " " "t" "s" "e" "-t" "bt"=
  "d" "(" "\n" "-5" "1" "x" "e" "'" "\n" "\n" ")))" "0" "1" " " "e" "r" "e" =
 "h" "p" "s" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" ")" "pi" =
 " " "0/3" "0" "0" "4" " " "*" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n"=
  ")))" "5" " " "3" " " "2" " " "m" "s" "i" "r" "p" "(" " " "e" "m" "u" "l" =
 "o" "v" "(" "          " "\n" "0" "3" " " "t" "s" "e" "-t" "t" "b" "d" "(" =
 "\n" ")))" "4" " " "e" "b" "u" "c" "(" " " "e" "m" "u" "l" "o" "v" "(" "   =
        " "\n" "4" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-4" "1" "x=
 " "e" "'" "\n" "\n" "))))" "e" "u" "r" "t" " " "a" "e" "t" "(" " " ")" "\""=
  "e" "l" "p" "p" "a" "e" "n" "i" "p" "\"" " " "t" "i" "u" "r" "f" "(" " " "=
 )" "\"" "na" "a" "n" "a" "b" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "=
 i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" =
 "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" =
 " " "d" "n" "a" " " "a" "e" "t" " " "r" "a" "ul" "g" "e" "r" " " " a" "d" "=
 n" "a" " " "e" "l" "p" "p" "a" "e" "n" "i" "p" " " "a" " " "d" "n" "a" " " =
 "a" "n" "a" "an" "b" " " "a" "\"" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" ")=
 )))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "5" " " "3=
 " " " "ts" "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" =
 "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "("=
  "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " "=
  "d" "n" "a" " " "e" "e" "f" "f" "o" "c" " " "f" "a" "c" "e" "d" " " "a" " =
 " "d" "n" " a" "s" "t" "u" "n" "o" "d" " " "d" "e" "z" "a" "l" "g" " " "5" =
 " " "d" "n" "a" " " "s" "t" "u" "n" "o" "d" " " "n" "i" "a" "l" "p" " " "3"=
  "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "))))" "\"" "e" "n" "i" "ar" "=
 t" "c" "e" "n" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " "=
  "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "         =
  " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a=
 " " " "e" "n" "i" "r" "a" "t" "c" "e" "n" " " "a" "\"" " " "t" "s" "e" "t-t=
 " "b" "d" "(" "\n" "-3" "1" "x" "e" "'" "\n" "\n" "))))" "\"" "e" "g" "n" "=
 a" "r" "o" "\"" " " "t" "i" "u" "r" "f" "(" "                             "=
  "\n" ")" "false" " " "coffee" "(" "                             " "\n" ")"=
  "\"apple\"" " " "fruit" "(" "                             " "\n" ")" "true=
 " " " "coffee" "(" "                             " "\n" ")" "true" " " "tea=
 " "(" "                             " "\n" ")" "1" " " "1" " " "s" "t" "nu"=
  "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "y" "l=
 " "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "          " "\n" "))" "e" "s" "l=
 " "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "ee" =
 "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "a" "e" "t" "(" " " "t" "s"=
  "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "e" "s" "l" "=
 a" "f" " " "a" "e" "t" "(" " " ")" "e" "u" "r" "t" " " "e" "e" "ff" "co" "(=
 " " " ")" "\"banana\"" " " "fruit" "(" " " "t" "s" "i" "l" "(" " " "drinks-=
 only" "(" "          " "\n" "))" "false" " " "tea" "(" " " ")" "true" " " "=
 coffee" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\=
 n" "))" "y" "t" "p" "m" "e" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d"=
  "(" "          " "\n" "y" "t" "p" "m" "e" " " "t" "s" "e" "-t" "t" "b" "d"=
  "(" "\n" "-2" "1" "x" "e" "'" "\n" "\n" ")))" "0" "2" " " "0" "1" " " "-do=
 nuts" "f" "o" "-" "x" "bo" "(" " " "lth-nut" "a" "e" "h" "(" "          " "=
 \n" ")" "0" " " "0" "3" " " "s" "t" "u" "n" "o" "d" "-" "f" "-o" "x" "o" "b=
 " "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "\"" "e" "n" "i" "r" =
 "e" "g" "n" "a" "t" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "u" "n" "-" "h=
 " "lt" "a" "e" "h" "(" "          " "\n" ")" "\"" "e" "n" "i" "r" "e" "g" "=
 n" "a" "t" "\"" " " "it" "u" "r" "f" "(" " " "t" "s" "e" "-t" "t" "b" "d" "=
 (" "\n" ")))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " "t" "u" "-n" "h" =
 "lt" "a" "e" "h" "(" "          " "\n" ")" "e" "ls" "a" "f" " " "tea" "(" "=
  " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "u" "r" "t" " " "e" "e" =
 "f" "f" "o" "c" "(" " " "health-nut" "(" "          " "\n" ")" "e" "s" "l" =
 "a" "f" " " "e" "fe" "f" "o" "c" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "=
 \n" "-1" "1" "x" "e" "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "=
 actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" =
 "(" " " "else" "[" "                                       " "\n" "]" "#t" =
 " " ")" "expected" " " "v" " " "equal?" "[(" "                             =
           " "\n" ";[(and (string? expected) (string? v)) (list expected v)]=
 " "                                       " "\n" "cond" "(" "              =
                        " "\n" "])" "actual" " " "v" "([" " " "let" "(" "   =
                                 " "\n" "])" "exn-message" " " ")))" "x" " "=
  "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "wit=
 h-handlers" "(" " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[=
 (" "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " "=
  "dbt-test" "(" " " "define-syntax" "(") ("\n" "}}}))" "x" " " "x" " " "+" =
 "{" "                      " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" =
 " " "with" "{" "                    " "\n" "}}" "2" " " "16" " " "/" "{" " =
 " "x" "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}}})" "x" "=
  " "x" " " "+" "{" "                          " "\n" "}}" "2" " " "x" " " "=
 /" "{" " " "y" "{" " " "with" "{" "                        " "\n" "}}" "2" =
 " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " "=
  "-test" "t" "b" "d" "(" "\n" "}}))" "x" " " "0" "1" " " "-" "{" "         =
            " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x=
 " "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}})" "x" " " "0=
 " "1" " " "-" "{" "                        " "\n" "}}}" "2" " " "8" " " "/"=
  "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(=
 " " " "-test" "t" "b" "d" "(" "\n" "}}))" "1" " " "x" " " "-" "{" "        =
             " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{"=
  "'" " " "parse" "(" "          " "\n" "}})" "1" " " "x" " " "-" "{" "     =
                    " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "wi=
 th" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "5"=
  " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "p=
 arse" "(" "          " "\n" "}})" "5" " " "2" " " "+" "{" " " "}" "8" " " "=
 6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" =
 "(" "\n" "}))" "2" " " "6" " " "/" "{" "'" " " "e" "s" "r" "a" "p" "(" "   =
        " "\n" "})" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-te=
 st" "t" "b" "d" "(" "\n" "5" "-" "2" "x" "e" "'" "\n" "\n" "\"" "!" "!" "!"=
  "e" "d" "o" "c" " " "k" "c" "e" "h" "c" "\"" "\n" "4" "-" "2" "x" "e" "'" =
 "\n" "\n" "}}}}})))" "d" " " "c" " " "b" " " "a" " " "+" "{" "             =
                             " "\n" "}}" "3" " " "c" " " "+" "{" " " "d" "{"=
  " " "with" "{" "                                       " "\n" "}}" "2" " "=
  "b" " " "+" "{" " " "c" "{" " " "with" "{" "                              =
        " "\n" "}}" "1" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" "    =
                                " "\n" "}" "0" " " "a" "{" " " "with" "{" "'=
 " " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-=
 test" "t" "b" "d" "(" "\n" "}}})))" "c" " " "a" " " "+" "{" "              =
                        " "\n" "}" "9" " " "c" "{" " " "with" "{" "         =
                           " "\n" "}}}" "b" " " "b" " " "+" "{" " " "}}" "7"=
  " " "a" " " "+" "{" " " "b" "{" " " "with" "{" " " "a" "{" " " "with" "{" =
 "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "a" "(" "=
 '" " " "-test" "t" "b" "d" "(" "\n" "}})))" "8" " " "b" " " "+" "{" "      =
                              " "\n" "}" "a" " " "a" "{" " " "with" "{" "'" =
 " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "=
 (" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}})))" "b" " " "a" " " "+" "{" "=
                                        " "\n" "}" "4" " " "b" "{" " " "with=
 " "{" "                                     " "\n" "}" "a" " " "a" "{" " " =
 "with" "{" "                                   " "\n" "}" "5" " " "a" "{" "=
  " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n"=
  "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}}})))" "d" " " "c" " " "+" "=
 {" "                                          " "\n" "}" "b" " " "a" " " "+=
 " "{" " " "-" "{" "                                       " "\n" "}" "9" " =
 " "c" "{" " " "with" "{" "                                     " "\n" "}" "=
 8" " " "b" "{" " " "with" "{" "                                   " "\n" "}=
 " "8" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(=
 " "          " "\n" ")" "d" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))=
 " "b" " " "a" " " "+" "{" "                                   " "\n" "}" "4=
 " " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" " =
          " "\n" ")" "b" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b=
 " " " "2" " " "+" "{" " " "a" " " "-" "{" "'" " " "dbt-parse" "(" " " "free=
 -vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d=
 " "(" "\n" "})))" "b" " " "a" " " "+" "{" "'" " " "dbt-parse" "(" " " "free=
 -vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d=
 " "(" "\n" ")))" "a" "'" " " "dbt-parse" "(" " " "free-vars" "(" "         =
  " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "'5" " " "db=
 t-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t"=
  "b" "d" "(" "\n" "3" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " =
 " "+" "{" "                                     " "\n" "}}" "0" " " "x" " "=
  "/" "{" " " "y" "{" " " "with" "{" "                                   " "=
 \n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-p=
 arse" "(" " " "calc-lazy" "(" "          " "\n" "6" "1" " " "-test" "t" "b"=
  "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "                        =
            " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x=
 " "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" "         =
  " "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{=
 " "                                   " "\n" "}}" "5" " " "10" " " "/" "{" =
 " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "=
           " "\n" "1" " " "dbt-test" "(" "\n" "}})))" "5" " " "2" " " "+" "{=
 " " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "=
 -lazy" "calc" "(" "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "}=
 )))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "("=
  "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "2" "-" "2" "x" "e"=
  "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "                          =
       " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "     =
                          " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" "=
  " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "16"=
  " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "    =
                           " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " "=
  "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" =
 "          " "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" =
 " " "-" "{" "                              " "\n" "}}" "5" " " "10" " " "/"=
  "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "   =
        " "\n" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "5" " " "2" " " =
 "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "("=
  " " "calc" "(" "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "}))=
 )" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "        =
   " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "1" "-" "2" "x" "e" "'" "\n" =
 "\n" ")))])]))" "p" "x" "se" " " "d" "r" "i" "h" "t" "(" " " "dbt-parse" "(=
 " "                 " "\n" ")))" "p" "ex" "s" " " "nd" "o" "c" "e" "s" "(" =
 " " "d" "n" "o" "c" "e" "s" "(" " " "dbt-parse" "(" "                 " "\n=
 " "))" "p" "x" "e" "s" " " "d" "n" "co" "e" "s" "(" " " "t" "s" "r" "i" "f"=
  "(" " " "h" "t" "i" "w" "(" " " ")" "h" "t" "i" "w" "[(" "       " "\n" ")=
 ))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "                 " "\n" ")=
 )" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "v" "i" "d" "(" " " ")" =
 "/" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "=
                  " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " =
 " "sub" "(" " " ")" "-" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" "=
  " "dbt-parse" "(" "                 " "\n" "))" "sexp" " " "second" "(" " =
 " "dbt-parse" "(" " " "add" "(" " " ")" "+" "[(" "       " "\n" ")" "sexp" =
 " " "first" "(" " " "case" "(" "     " "\n" ")" "sexp" " " "list?" "[(" "  =
   " "\n" ")]" "p" "x" "e" "s" " " "d" "i" "(" " " ")" "p" "x" "e" "s" " " "=
 ?" "l" "o" "b" "m" "y" "s" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " "=
 )" "sexp" " " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " =
 " "dbt-parse" "(" " " "define" "(" "\n" "E" "A" "W" " " ">" "-" " " "n" "o"=
  "i" "s" "s" "e" "r" "p" "x" "e" "-" "S" " " ":" " " "dbt-parse" " " ";" ";=
 " "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "=
                            " "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " =
 "9" " " "node" "(" "                                       " "\n" "))" "lea=
 f" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                         =
               " "\n" "7" " " "node" "(" "                                 "=
  "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "          =
                        " "\n" "5" " " "node" "(" "                         =
   " "\n" "20" " " "node" "(" " " "10" " " "insert" "(" "          " "\n" ")=
 ))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "                =
 " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")=
 " "leaf" "(" " " "9" " " "node" "(" "                            " "\n" "))=
 " "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                   =
          " "\n" "7" " " "node" "(" "                      " "\n" "))" "leaf=
 " "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                      " "\=
 n" "5" " " "node" "(" "                " "\n" "20" " " "node" "(" " " "dbt-=
 test" "(" "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" =
 " " "8" " " "insert" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" =
 "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "d=
 bt-test" "(" "\n" ")))" "leaf" "(" " " "4" " " "insert" "(" " " "))" "leaf"=
  "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" "-7"=
  "1" "ex" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" "=
  " "node" "(" "                             " "\n" ")))))" "leaf" "(" " " "=
 )" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node"=
  "(" "                                         " "\n" "))" "leaf" "(" " " "=
 )" "leaf" "(" " " "6" " " "node" "(" "                                     =
     " "\n" "7" " " "node" "(" "                                   " "\n" ")=
 )" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                  =
                  " "\n" "5" " " "node" "(" "                             " =
 "\n" "20" " " "node" "(" " " "s" "all-number" "(" "          " "\n" ")" "29=
 " " " "10" " " "9" " " "6" " " "7" " " "2" " " "5" " " "20" " " "list" "(" =
 " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "=
 node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "s" "r" "be" "m" "u=
 " "n" "-" "l" "al" "(" "          " "\n" ")" "8" " " "4" " " "list" "(" " "=
  "-test" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e=
 " "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "s" "r" "e" "b" "m" "u" "n" "=
 -" "l" "al" "(" "          " "\n" ")" "7" " " "t" "s" "li" "(" " " "t" "s" =
 "-te" "t" "b" "d" "(" "\n" "-6" "1" "x" "e" "'" "\n" "\n" ")))))" "leaf" "(=
 " " " ")" "leaf" "(" " " "9" "2" " " "node" "(" "                         "=
  "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")"=
  "leaf" "(" " " "9" " " "node" "(" "                                     " =
 "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "           =
                           " "\n" "7" " " "node" "(" "                      =
          " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "=
                                " "\n" "5" " " "node" "(" "                 =
         " "\n" "20" " " "node" "(" " " "e" "g" "a" "r" "e" "v" "a" "(" "   =
        " "\n" "1" "1" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "l=
 eaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" "=
  " "e" "g" "a" "aver" "(" "          " "\n" "6" " " "t" "s" "e" "-t" "t" "b=
 " "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "=
 7" " " "e" "d" "o" "n" "(" " " "e" "g" "a" "r" "e" "av" "(" "          " "\=
 n" "7" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "-5" "1" "x" "e" "'" "\n" "\n=
 " ")))" "0" "1" " " "e" "r" "e" "h" "p" "s" "(" " " "e" "m" "u" "l" "o" "v"=
  "(" "          " "\n" ")" "pi" " " "0/3" "0" "0" "4" " " "*" "(" " " "t" "=
 s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "5" " " "3" " " "2" " " "m" "s" "i" =
 "r" "p" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "0" "3" " " "=
 t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "4" " " "e" "b" "u" "c" "(" " " =
 "e" "m" "u" "l" "o" "v" "(" "          " "\n" "4" "6" " " "t" "s" "e" "-t" =
 "t" "b" "d" "(" "\n" "-4" "1" "x" "e" "'" "\n" "\n" "))))" "e" "u" "r" "t" =
 " " "a" "e" "t" "(" " " ")" "\"" "e" "l" "p" "p" "a" "e" "n" "i" "p" "\"" "=
  " "t" "i" "u" "r" "f" "(" " " ")" "\"" "na" "a" "n" "a" "b" "\"" " " "t" "=
 i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" =
 "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" =
 " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "a" "e" "t" " " "r" "a"=
  "ul" "g" "e" "r" " " " a" "d" "n" "a" " " "e" "l" "p" "p" "a" "e" "n" "i" =
 "p" " " "a" " " "d" "n" "a" " " "a" "n" "a" "an" "b" " " "a" "\"" " " "t" "=
 s" "e" "-t" "bt" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f=
 " "o" "c" "(" " " ")" "5" " " "3" " " "ts" "u" "n" "o" "d" "-" "f" "o" "-" =
 "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s"=
  "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " "=
  "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "e" "f" "f" "o" "c" " =
 " "f" "a" "c" "e" "d" " " "a" " " "d" "n" " a" "s" "t" "u" "n" "o" "d" " " =
 "d" "e" "z" "a" "l" "g" " " "5" " " "d" "n" "a" " " "s" "t" "u" "n" "o" "d"=
  " " "n" "i" "a" "l" "p" " " "3" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n=
 " "))))" "\"" "e" "n" "i" "ar" "t" "c" "e" "n" "\"" " " "t" "i" "u" "r" "f"=
  "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k=
 " "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i=
 " "h" "t" "o" "n" " " "d" "n" "a" " " "e" "n" "i" "r" "a" "t" "c" "e" "n" "=
  " "a" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "-3" "1" "x" "e" "'" "\n=
 " "\n" "))))" "\"" "e" "g" "n" "a" "r" "o" "\"" " " "t" "i" "u" "r" "f" "("=
  "                             " "\n" ")" "false" " " "coffee" "(" "       =
                       " "\n" ")" "\"apple\"" " " "fruit" "(" "             =
                 " "\n" ")" "true" " " "coffee" "(" "                       =
       " "\n" ")" "true" " " "tea" "(" "                             " "\n" =
 ")" "1" " " "1" " " "s" "t" "nu" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " =
 " "t" "s" "i" "l" "(" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "=
           " "\n" "))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" "=
  " ")" "e" "u" "r" "t" " " "ee" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t"=
  " " "a" "e" "t" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "=
 d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " ")" "e" "u" =
 "r" "t" " " "e" "e" "ff" "co" "(" " " ")" "\"banana\"" " " "fruit" "(" " " =
 "t" "s" "i" "l" "(" " " "drinks-only" "(" "          " "\n" "))" "false" " =
 " "tea" "(" " " ")" "true" " " "coffee" "(" " " "t" "s" "i" "l" "(" " " "t"=
  "s" "e" "-t" "t" "b" "d" "(" "\n" "))" "y" "t" "p" "m" "e" " " "y" "l" "n"=
  "o" "-" "s" "k" "n" "i" "r" "d" "(" "          " "\n" "y" "t" "p" "m" "e" =
 " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-2" "1" "x" "e" "'" "\n" "\n" ")=
 ))" "0" "2" " " "0" "1" " " "-donuts" "f" "o" "-" "x" "bo" "(" " " "lth-nut=
 " "a" "e" "h" "(" "          " "\n" ")" "0" " " "0" "3" " " "s" "t" "u" "n"=
  "o" "d" "-" "f" "-o" "x" "o" "b" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" =
 "\n" ")))" "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "t" "i" "u" "r=
 " "f" "(" " " "t" "u" "n" "-" "h" "lt" "a" "e" "h" "(" "          " "\n" ")=
 " "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "it" "u" "r" "f" "(" " =
 " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "s" "l" "a" "f" " " "a" "=
 e" "t" "(" " " "t" "u" "-n" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" =
 "e" "ls" "a" "f" " " "tea" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")=
 ))" "e" "u" "r" "t" " " "e" "e" "f" "f" "o" "c" "(" " " "health-nut" "(" " =
          " "\n" ")" "e" "s" "l" "a" "f" " " "e" "fe" "f" "o" "c" "(" " " "t=
 " "s" "e" "-t" "t" "b" "d" "(" "\n" "-1" "1" "x" "e" "'" "\n" "\n" ")]))))]=
 ))" "v" " " "expected" " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expe=
 cted ~a, got ~a\"" " " "format" "(" " " "else" "[" "                       =
                 " "\n" "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(=
 " "                                       " "\n" ";[(and (string? expected)=
  (string? v)) (list expected v)]" "                                       "=
  "\n" "cond" "(" "                                     " "\n" "])" "actual"=
  " " "v" "([" " " "let" "(" "                                   " "\n" "])"=
  "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x"=
  "(" " " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "a=
 ctual" " " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-c=
 ase" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("=
 \n" "}}}))" "x" " " "x" " " "+" "{" "                      " "\n" "}}" "2" =
 " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                    " "\n" =
 "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(=
 " "          " "\n" "}}})" "x" " " "x" " " "+" "{" "                       =
    " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "        =
                 " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with"=
  "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "x" " =
 " "0" "1" " " "-" "{" "                    " "\n" "}}}" "2" " " "8" " " "/"=
  "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" " =
          " "\n" "}})" "x" " " "0" "1" " " "-" "{" "                        =
 " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "=
 with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "=
 1" " " "x" " " "-" "{" "                    " "\n" "}}" "5" " " "10" " " "/=
 " "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}})=
 " "1" " " "x" " " "-" "{" "                        " "\n" "}}" "5" " " "10"=
  " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test"=
  "t" "b" "d" "(" "\n" "}}))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " =
 " "+" "{" " " "/" "{" "'" " " "parse" "(" "          " "\n" "}})" "5" " " "=
 2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-par=
 se" "(" " " "-test" "t" "b" "d" "(" "\n" "}))" "2" " " "6" " " "/" "{" "'" =
 " " "e" "s" "r" "a" "p" "(" "          " "\n" "})" "2" " " "6" " " "/" "{" =
 "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "5" "-" "2" "x" "e=
 " "'" "\n" "\n" "\"" "!" "!" "!" "e" "d" "o" "c" " " "k" "c" "e" "h" "c" "\=
 "" "\n" "4" "-" "2" "x" "e" "'" "\n" "\n" "}}}}})))" "d" " " "c" " " "b" " =
 " "a" " " "+" "{" "                                         " "\n" "}}" "3"=
  " " "c" " " "+" "{" " " "d" "{" " " "with" "{" "                          =
              " "\n" "}}" "2" " " "b" " " "+" "{" " " "c" "{" " " "with" "{"=
  "                                     " "\n" "}}" "1" " " "a" " " "+" "{" =
 " " "b" "{" " " "with" "{" "                                   " "\n" "}" "=
 0" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "=
           " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}})))" "c" " "=
  "a" " " "+" "{" "                                     " "\n" "}" "9" " " "=
 c" "{" " " "with" "{" "                                   " "\n" "}}}" "b" =
 " " "b" " " "+" "{" " " "}}" "7" " " "a" " " "+" "{" " " "b" "{" " " "with"=
  "{" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "("=
  "          " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))"=
  "8" " " "b" " " "+" "{" "                                   " "\n" "}" "a"=
  " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "  =
         " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}}=
 }})))" "b" " " "a" " " "+" "{" "                                       " "\=
 n" "}" "4" " " "b" "{" " " "with" "{" "                                    =
  " "\n" "}" "a" " " "a" "{" " " "with" "{" "                               =
     " "\n" "}" "5" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "=
 free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" =
 "}}}}})))" "d" " " "c" " " "+" "{" "                                       =
    " "\n" "}" "b" " " "a" " " "+" "{" " " "-" "{" "                        =
                " "\n" "}" "9" " " "c" "{" " " "with" "{" "                 =
                     " "\n" "}" "8" " " "b" "{" " " "with" "{" "            =
                        " "\n" "}" "8" " " "a" "{" " " "with" "{" "'" " " "d=
 bt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "d" "(" "'" " " "-t=
 est" "t" "b" "d" "(" "\n" "}})))" "b" " " "a" " " "+" "{" "                =
                    " "\n" "}" "4" " " "a" "{" " " "with" "{" "'" " " "dbt-p=
 arse" "(" " " "free-vars" "(" "          " "\n" ")" "b" "(" "'" " " "-test"=
  "t" "b" "d" "(" "\n" "}})))" "b" " " "2" " " "+" "{" " " "a" " " "-" "{" "=
 '" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a=
 " "(" "'" " " "-test" "t" "b" "d" "(" "\n" "})))" "b" " " "a" " " "+" "{" "=
 '" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a=
 " "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "a" "'" " " "dbt-parse" "(=
 " " " "free-vars" "(" "          " "\n" ")" "a" "(" "'" " " "-test" "t" "b"=
  "d" "(" "\n" ")))" "'5" " " "dbt-parse" "(" " " "free-vars" "(" "         =
  " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "3" "-" "2" "x" "e" "'" "=
 \n" "\n" "}}})))" "x" " " "x" " " "+" "{" "                                =
      " "\n" "}}" "0" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "      =
                              " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "=
 {" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" "          " =
 "\n" "6" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "=
 -" "{" "                                   " "\n" "}}}" "2" " " "8" " " "/"=
  "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(=
 " " " "calc-lazy" "(" "          " "\n" "5" " " "-test" "t" "b" "d" "(" "\n=
 " "}})))" "1" " " "x" " " "-" "{" "                                   " "\n=
 " "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-par=
 se" "(" " " "-lazy" "calc" "(" "          " "\n" "1" " " "dbt-test" "(" "\n=
 " "}})))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "=
 {" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\n" "2" " "=
  "-test" "t" "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-p=
 arse" "(" " " "-lazy" "calc" "(" "          " "\n" "3" " " "-test" "t" "b" =
 "d" "(" "\n" "2" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+"=
  "{" "                                " "\n" "}}" "2" " " "x" " " "/" "{" "=
  " "y" "{" " " "with" "{" "                              " "\n" "}}" "2" " =
 " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "=
 calc" "(" "          " "\n" "16" " " "-test" "t" "b" "d" "(" "\n" "}})))" "=
 x" " " "0" "1" " " "-" "{" "                              " "\n" "}}}" "2" =
 " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " "=
  "dbt-parse" "(" " " "calc" "(" "          " "\n" "5" " " "-test" "t" "b" "=
 d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "                              =
 " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "db=
 t-parse" "(" " " "calc" "(" "          " "\n" "1" " " "-test" "t" "b" "d" "=
 (" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " "=
  "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "2" " " "=
 -test" "t" "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-par=
 se" "(" " " "calc" "(" "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\=
 n" "1" "-" "2" "x" "e" "'" "\n" "\n" ")))])]))" "p" "x" "se" " " "d" "r" "i=
 " "h" "t" "(" " " "dbt-parse" "(" "                 " "\n" ")))" "p" "ex" "=
 s" " " "nd" "o" "c" "e" "s" "(" " " "d" "n" "o" "c" "e" "s" "(" " " "dbt-pa=
 rse" "(" "                 " "\n" "))" "p" "x" "e" "s" " " "d" "n" "co" "e"=
  "s" "(" " " "t" "s" "r" "i" "f" "(" " " "h" "t" "i" "w" "(" " " ")" "h" "t=
 " "i" "w" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse"=
  "(" "                 " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" =
 "(" " " "v" "i" "d" "(" " " ")" "/" "[(" "       " "\n" ")))]" "sexp" " " "=
 third" "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp" " " "se=
 cond" "(" " " "dbt-parse" "(" " " "sub" "(" " " ")" "-" "[(" "       " "\n"=
  ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "                 " "\n"=
  "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "add" "(" " " ")" "+"=
  "[(" "       " "\n" ")" "sexp" " " "first" "(" " " "case" "(" "     " "\n"=
  ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "p" "x" "e" "s" " " "d" "i" "=
 (" " " ")" "p" "x" "e" "s" " " "?" "l" "o" "b" "m" "y" "s" "[(" "    " "\n"=
  ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "c=
 ond" "(" "  " "\n" ")" "sexp" " " "dbt-parse" "(" " " "define" "(" "\n" "E"=
  "A" "W" " " ">" "-" " " "n" "o" "i" "s" "s" "e" "r" "p" "x" "e" "-" "S" " =
 " ":" " " "dbt-parse" " " ";" ";" "\n" "\n" ")))))" "leaf" "(" " " ")" "lea=
 f" "(" " " "30" " " "node" "(" "                           " "\n" "))))" "l=
 eaf" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "                       =
                 " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node=
 " "(" "                                       " "\n" "7" " " "node" "(" "  =
                                " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " =
 " "2" " " "node" "(" "                                 " "\n" "5" " " "node=
 " "(" "                           " "\n" "20" " " "node" "(" " " "10" " " "=
 insert" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "30" =
 " " "node" "(" "                " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(=
 " " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "      =
                       " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " "=
  "node" "(" "                            " "\n" "7" " " "node" "(" "       =
                " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node"=
  "(" "                      " "\n" "5" " " "node" "(" "                " "\=
 n" "20" " " "node" "(" " " "dbt-test" "(" "\n" "))))" "leaf" "(" " " ")" "l=
 eaf" "(" " " "4" " " "node" "(" " " "8" " " "insert" "(" "          " "\n" =
 ")))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "=
 (" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" ")))" "leaf" "(" " " "4" =
 " " "insert" "(" " " "))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" =
 "(" " " "dbt-test" "(" "\n" "-7" "1" "ex" "'" "\n" "\n" ")))))" "leaf" "(" =
 " " ")" "leaf" "(" " " "9" "2" " " "node" "(" "                            =
  " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " "=
 )" "leaf" "(" " " "9" " " "node" "(" "                                     =
     " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "     =
                                     " "\n" "7" " " "node" "(" "            =
                        " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " =
 " "node" "(" "                                   " "\n" "5" " " "node" "(" =
 "                             " "\n" "20" " " "node" "(" " " "s" "all-numbe=
 r" "(" "          " "\n" ")" "29" " " "10" " " "9" " " "6" " " "7" " " "2" =
 " " "5" " " "20" " " "list" "(" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" =
 " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "n=
 ode" "(" " " "s" "r" "be" "m" "u" "n" "-" "l" "al" "(" "          " "\n" ")=
 " "8" " " "4" " " "list" "(" " " "-test" "t" "b" "d" "(" "\n" "))))" "f" "a=
 " "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" "=
  " "s" "r" "e" "b" "m" "u" "n" "-" "l" "al" "(" "          " "\n" ")" "7" "=
  " "t" "s" "li" "(" " " "t" "s" "-te" "t" "b" "d" "(" "\n" "-6" "1" "x" "e"=
  "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node"=
  "(" "                         " "\n" ")))))" "leaf" "(" " " ")" "leaf" "("=
  " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "       =
                               " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " "=
  "6" " " "node" "(" "                                     " "\n" "7" " " "n=
 ode" "(" "                               " "\n" "))" "leaf" "(" " " ")" "le=
 af" "(" " " "2" " " "node" "(" "                               " "\n" "5" "=
  " "node" "(" "                         " "\n" "20" " " "node" "(" " " "e" =
 "g" "a" "r" "e" "v" "a" "(" "          " "\n" "1" "1" " " "dbt-test" "(" "\=
 n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "le=
 af" "(" " " "4" " " "node" "(" " " "e" "g" "a" "aver" "(" "          " "\n"=
  "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" "=
  " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "e" "g" "a" =
 "r" "e" "av" "(" "          " "\n" "7" " " "t" "s" "e" "-t" "bt" "d" "(" "\=
 n" "-5" "1" "x" "e" "'" "\n" "\n" ")))" "0" "1" " " "e" "r" "e" "h" "p" "s"=
  "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" ")" "pi" " " "0/3" "=
 0" "0" "4" " " "*" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "5" =
 " " "3" " " "2" " " "m" "s" "i" "r" "p" "(" " " "e" "m" "u" "l" "o" "v" "("=
  "          " "\n" "0" "3" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" =
 "4" " " "e" "b" "u" "c" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\=
 n" "4" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-4" "1" "x" "e" "'" "=
 \n" "\n" "))))" "e" "u" "r" "t" " " "a" "e" "t" "(" " " ")" "\"" "e" "l" "p=
 " "p" "a" "e" "n" "i" "p" "\"" " " "t" "i" "u" "r" "f" "(" " " ")" "\"" "na=
 " "a" "n" "a" "b" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" =
 " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "      =
     " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n"=
  "a" " " "a" "e" "t" " " "r" "a" "ul" "g" "e" "r" " " " a" "d" "n" "a" " " =
 "e" "l" "p" "p" "a" "e" "n" "i" "p" " " "a" " " "d" "n" "a" " " "a" "n" "a"=
  "an" "b" " " "a" "\"" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "))))" "e" "s=
 " "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "5" " " "3" " " "ts" =
 "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " "=
  "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "         =
  " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a=
 " " " "e" "e" "f" "f" "o" "c" " " "f" "a" "c" "e" "d" " " "a" " " "d" "n" "=
  a" "s" "t" "u" "n" "o" "d" " " "d" "e" "z" "a" "l" "g" " " "5" " " "d" "n"=
  "a" " " "s" "t" "u" "n" "o" "d" " " "n" "i" "a" "l" "p" " " "3" "\"" " " "=
 t" "s" "e" "t-t" "b" "d" "(" "\n" "))))" "\"" "e" "n" "i" "ar" "t" "c" "e" =
 "n" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d=
 " "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"=
 " "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "=
 n" "i" "r" "a" "t" "c" "e" "n" " " "a" "\"" " " "t" "s" "e" "t-t" "b" "d" "=
 (" "\n" "-3" "1" "x" "e" "'" "\n" "\n" "))))" "\"" "e" "g" "n" "a" "r" "o" =
 "\"" " " "t" "i" "u" "r" "f" "(" "                             " "\n" ")" "=
 false" " " "coffee" "(" "                             " "\n" ")" "\"apple\"=
 " " " "fruit" "(" "                             " "\n" ")" "true" " " "coff=
 ee" "(" "                             " "\n" ")" "true" " " "tea" "(" "    =
                          " "\n" ")" "1" " " "1" " " "s" "t" "nu" "o" "d" "-=
 " "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "y" "l" "n" "o" "=
 -" "s" "k" "n" "i" "r" "d" "(" "          " "\n" "))" "e" "s" "l" "a" "f" "=
  " "e" "e" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "ee" "f" "f" "o"=
  "c" "(" " " ")" "e" "u" "r" "t" " " "a" "e" "t" "(" " " "t" "s" "i" "l" "(=
 " " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " =
 "a" "e" "t" "(" " " ")" "e" "u" "r" "t" " " "e" "e" "ff" "co" "(" " " ")" "=
 \"banana\"" " " "fruit" "(" " " "t" "s" "i" "l" "(" " " "drinks-only" "(" "=
           " "\n" "))" "false" " " "tea" "(" " " ")" "true" " " "coffee" "("=
  " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))" "y"=
  "t" "p" "m" "e" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "     =
      " "\n" "y" "t" "p" "m" "e" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "=
 -2" "1" "x" "e" "'" "\n" "\n" ")))" "0" "2" " " "0" "1" " " "-donuts" "f" "=
 o" "-" "x" "bo" "(" " " "lth-nut" "a" "e" "h" "(" "          " "\n" ")" "0"=
  " " "0" "3" " " "s" "t" "u" "n" "o" "d" "-" "f" "-o" "x" "o" "b" "(" " " "=
 t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "\"" "e" "n" "i" "r" "e" "g" "n"=
  "a" "t" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "u" "n" "-" "h" "lt" "a" =
 "e" "h" "(" "          " "\n" ")" "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" =
 "\"" " " "it" "u" "r" "f" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))=
 )" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " "t" "u" "-n" "h" "lt" "a" "e=
 " "h" "(" "          " "\n" ")" "e" "ls" "a" "f" " " "tea" "(" " " "t" "s" =
 "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "u" "r" "t" " " "e" "e" "f" "f" "o"=
  "c" "(" " " "health-nut" "(" "          " "\n" ")" "e" "s" "l" "a" "f" " "=
  "e" "fe" "f" "o" "c" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-1" "1=
 " "x" "e" "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" " "=
  "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " "el=
 se" "[" "                                       " "\n" "]" "#t" " " ")" "ex=
 pected" " " "v" " " "equal?" "[(" "                                       "=
  "\n" ";[(and (string? expected) (string? v)) (list expected v)]" "        =
                                " "\n" "cond" "(" "                         =
             " "\n" "])" "actual" " " "v" "([" " " "let" "(" "              =
                      " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break=
 ?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers"=
  "(" " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" "    " "=
 \n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test"=
  "(" " " "define-syntax" "(") ("\n" "}}}))" "x" " " "x" " " "+" "{" "      =
                 " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" =
 "{" "                    " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" "=
  " "with" "{" "'" " " "parse" "(" "          " "\n" "}}})" "x" " " "x" " " =
 "+" "{" "                          " "\n" "}}" "2" " " "x" " " "/" "{" " " =
 "y" "{" " " "with" "{" "                        " "\n" "}}" "2" " " "16" " =
 " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t=
 " "b" "d" "(" "\n" "}}))" "x" " " "0" "1" " " "-" "{" "                    =
 " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "=
 with" "{" "'" " " "parse" "(" "          " "\n" "}})" "x" " " "0" "1" " " "=
 -" "{" "                        " "\n" "}}}" "2" " " "8" " " "/" "{" " " "2=
 0" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-tes=
 t" "t" "b" "d" "(" "\n" "}}))" "1" " " "x" " " "-" "{" "                   =
  " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "p=
 arse" "(" "          " "\n" "}})" "1" " " "x" " " "-" "{" "                =
         " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'"=
  " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "5" " " "2" " =
 " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "parse" "(" "=
           " "\n" "}})" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" =
 "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}=
 ))" "2" " " "6" " " "/" "{" "'" " " "e" "s" "r" "a" "p" "(" "          " "\=
 n" "})" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b"=
  "d" "(" "\n" "5" "-" "2" "x" "e" "'" "\n" "\n" "\"" "!" "!" "!" "e" "d" "o=
 " "c" " " "k" "c" "e" "h" "c" "\"" "\n" "4" "-" "2" "x" "e" "'" "\n" "\n" "=
 }}}}})))" "d" " " "c" " " "b" " " "a" " " "+" "{" "                        =
                  " "\n" "}}" "3" " " "c" " " "+" "{" " " "d" "{" " " "with"=
  "{" "                                       " "\n" "}}" "2" " " "b" " " "+=
 " "{" " " "c" "{" " " "with" "{" "                                     " "\=
 n" "}}" "1" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" "               =
                     " "\n" "}" "0" " " "a" "{" " " "with" "{" "'" " " "dbt-=
 parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "=
 b" "d" "(" "\n" "}}})))" "c" " " "a" " " "+" "{" "                         =
             " "\n" "}" "9" " " "c" "{" " " "with" "{" "                    =
                " "\n" "}}}" "b" " " "b" " " "+" "{" " " "}}" "7" " " "a" " =
 " "+" "{" " " "b" "{" " " "with" "{" " " "a" "{" " " "with" "{" "'" " " "db=
 t-parse" "(" " " "free-vars" "(" "          " "\n" ")" "a" "(" "'" " " "-te=
 st" "t" "b" "d" "(" "\n" "}})))" "8" " " "b" " " "+" "{" "                 =
                   " "\n" "}" "a" " " "a" "{" " " "with" "{" "'" " " "dbt-pa=
 rse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " =
 "-test" "t" "b" "d" "(" "\n" "}}}})))" "b" " " "a" " " "+" "{" "           =
                             " "\n" "}" "4" " " "b" "{" " " "with" "{" "    =
                                  " "\n" "}" "a" " " "a" "{" " " "with" "{" =
 "                                   " "\n" "}" "5" " " "a" "{" " " "with" "=
 {" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" "=
  " "-test" "t" "b" "d" "(" "\n" "}}}}})))" "d" " " "c" " " "+" "{" "       =
                                    " "\n" "}" "b" " " "a" " " "+" "{" " " "=
 -" "{" "                                       " "\n" "}" "9" " " "c" "{" "=
  " "with" "{" "                                     " "\n" "}" "8" " " "b" =
 "{" " " "with" "{" "                                   " "\n" "}" "8" " " "=
 a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "        =
   " "\n" ")" "d" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "=
 a" " " "+" "{" "                                   " "\n" "}" "4" " " "a" "=
 {" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " =
 "\n" ")" "b" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "2" "=
  " "+" "{" " " "a" " " "-" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" =
 "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" =
 "})))" "b" " " "a" " " "+" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" =
 "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" =
 ")))" "a" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")"=
  "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "'5" " " "dbt-parse" "(=
 " " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(=
 " "\n" "3" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "=
                                      " "\n" "}}" "0" " " "x" " " "/" "{" " =
 " "y" "{" " " "with" "{" "                                   " "\n" "}}" "2=
 " " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" "=
  " "calc-lazy" "(" "          " "\n" "6" "1" " " "-test" "t" "b" "d" "(" "\=
 n" "}})))" "x" " " "0" "1" " " "-" "{" "                                   =
 " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "=
 with" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" "          " "\n" "5"=
  " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "        =
                            " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{"=
  " " "with" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          "=
  "\n" "1" " " "dbt-test" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" "=
 8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "cal=
 c" "(" "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " =
 " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "         =
  " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "2" "-" "2" "x" "e" "'" "\n" "=
 \n" "}}})))" "x" " " "x" " " "+" "{" "                                " "\n=
 " "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                =
               " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "=
 {" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "16" " " "-test=
 " "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "               =
                " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " =
 " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          =
 " "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{"=
  "                              " "\n" "}}" "5" " " "10" " " "/" "{" " " "x=
 " "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\=
 n" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " "=
  "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc"=
  "(" "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " " =
 "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "3=
 " " " "-test" "t" "b" "d" "(" "\n" "1" "-" "2" "x" "e" "'" "\n" "\n" ")))])=
 ]))" "p" "x" "se" " " "d" "r" "i" "h" "t" "(" " " "dbt-parse" "(" "        =
          " "\n" ")))" "p" "ex" "s" " " "nd" "o" "c" "e" "s" "(" " " "d" "n"=
  "o" "c" "e" "s" "(" " " "dbt-parse" "(" "                 " "\n" "))" "p" =
 "x" "e" "s" " " "d" "n" "co" "e" "s" "(" " " "t" "s" "r" "i" "f" "(" " " "h=
 " "t" "i" "w" "(" " " ")" "h" "t" "i" "w" "[(" "       " "\n" ")))]" "sexp"=
  " " "third" "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp" "=
  " "second" "(" " " "dbt-parse" "(" " " "v" "i" "d" "(" " " ")" "/" "[(" " =
       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "           =
       " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "sub" "("=
  " " ")" "-" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-par=
 se" "(" "                 " "\n" "))" "sexp" " " "second" "(" " " "dbt-pars=
 e" "(" " " "add" "(" " " ")" "+" "[(" "       " "\n" ")" "sexp" " " "first"=
  "(" " " "case" "(" "     " "\n" ")" "sexp" " " "list?" "[(" "    " "\n" ")=
 ]" "p" "x" "e" "s" " " "d" "i" "(" " " ")" "p" "x" "e" "s" " " "?" "l" "o" =
 "b" "m" "y" "s" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" "=
  " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "dbt-pars=
 e" "(" " " "define" "(" "\n" "E" "A" "W" " " ">" "-" " " "n" "o" "i" "s" "s=
 " "e" "r" "p" "x" "e" "-" "S" " " ":" " " "dbt-parse" " " ";" ";" "\n" "\n"=
  ")))))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "           =
                 " "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "9" " " "no=
 de" "(" "                                       " "\n" "))" "leaf" "(" " " =
 ")" "leaf" "(" " " "6" " " "node" "(" "                                    =
    " "\n" "7" " " "node" "(" "                                 " "\n" "))" =
 "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                     =
             " "\n" "5" " " "node" "(" "                           " "\n" "2=
 0" " " "node" "(" " " "10" " " "insert" "(" "          " "\n" ")))" "leaf" =
 "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "                " "\n" ")))=
 ))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(=
 " " " "9" " " "node" "(" "                            " "\n" "))" "leaf" "(=
 " " " ")" "leaf" "(" " " "6" " " "node" "(" "                            " =
 "\n" "7" " " "node" "(" "                      " "\n" "))" "leaf" "(" " " "=
 )" "leaf" "(" " " "2" " " "node" "(" "                      " "\n" "5" " " =
 "node" "(" "                " "\n" "20" " " "node" "(" " " "dbt-test" "(" "=
 \n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "8" " "=
  "insert" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "8"=
  " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "(=
 " "\n" ")))" "leaf" "(" " " "4" " " "insert" "(" " " "))" "leaf" "(" " " ")=
 " "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" "-7" "1" "ex" "=
 '" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "=
 (" "                             " "\n" ")))))" "leaf" "(" " " ")" "leaf" "=
 (" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "     =
                                     " "\n" "))" "leaf" "(" " " ")" "leaf" "=
 (" " " "6" " " "node" "(" "                                         " "\n" =
 "7" " " "node" "(" "                                   " "\n" "))" "leaf" "=
 (" " " ")" "leaf" "(" " " "2" " " "node" "(" "                             =
       " "\n" "5" " " "node" "(" "                             " "\n" "20" "=
  " "node" "(" " " "s" "all-number" "(" "          " "\n" ")" "29" " " "10" =
 " " "9" " " "6" " " "7" " " "2" " " "5" " " "20" " " "list" "(" " " "dbt-te=
 st" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" "=
  " ")" "leaf" "(" " " "4" " " "node" "(" " " "s" "r" "be" "m" "u" "n" "-" "=
 l" "al" "(" "          " "\n" ")" "8" " " "4" " " "list" "(" " " "-test" "t=
 " "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" "=
  " "7" " " "e" "d" "o" "n" "(" " " "s" "r" "e" "b" "m" "u" "n" "-" "l" "al"=
  "(" "          " "\n" ")" "7" " " "t" "s" "li" "(" " " "t" "s" "-te" "t" "=
 b" "d" "(" "\n" "-6" "1" "x" "e" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "=
 leaf" "(" " " "9" "2" " " "node" "(" "                         " "\n" "))))=
 )" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "("=
  " " "9" " " "node" "(" "                                     " "\n" "))" "=
 leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                      =
                " "\n" "7" " " "node" "(" "                               " =
 "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "           =
                     " "\n" "5" " " "node" "(" "                         " "=
 \n" "20" " " "node" "(" " " "e" "g" "a" "r" "e" "v" "a" "(" "          " "\=
 n" "1" "1" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " =
 " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "e" "g" =
 "a" "aver" "(" "          " "\n" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "=
 \n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" =
 "d" "o" "n" "(" " " "e" "g" "a" "r" "e" "av" "(" "          " "\n" "7" " " =
 "t" "s" "e" "-t" "bt" "d" "(" "\n" "-5" "1" "x" "e" "'" "\n" "\n" ")))" "0"=
  "1" " " "e" "r" "e" "h" "p" "s" "(" " " "e" "m" "u" "l" "o" "v" "(" "     =
      " "\n" ")" "pi" " " "0/3" "0" "0" "4" " " "*" "(" " " "t" "s" "e" "-t"=
  "t" "b" "d" "(" "\n" ")))" "5" " " "3" " " "2" " " "m" "s" "i" "r" "p" "("=
  " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "0" "3" " " "t" "s" "e" =
 "-t" "t" "b" "d" "(" "\n" ")))" "4" " " "e" "b" "u" "c" "(" " " "e" "m" "u"=
  "l" "o" "v" "(" "          " "\n" "4" "6" " " "t" "s" "e" "-t" "t" "b" "d"=
  "(" "\n" "-4" "1" "x" "e" "'" "\n" "\n" "))))" "e" "u" "r" "t" " " "a" "e"=
  "t" "(" " " ")" "\"" "e" "l" "p" "p" "a" "e" "n" "i" "p" "\"" " " "t" "i" =
 "u" "r" "f" "(" " " ")" "\"" "na" "a" "n" "a" "b" "\"" " " "t" "i" "u" "r" =
 "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f"=
  "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n"=
  "i" "h" "t" "o" "n" " " "d" "n" "a" " " "a" "e" "t" " " "r" "a" "ul" "g" "=
 e" "r" " " " a" "d" "n" "a" " " "e" "l" "p" "p" "a" "e" "n" "i" "p" " " "a"=
  " " "d" "n" "a" " " "a" "n" "a" "an" "b" " " "a" "\"" " " "t" "s" "e" "-t"=
  "bt" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "=
 (" " " ")" "5" " " "3" " " "ts" "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b"=
  "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k=
 " "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i=
 " "h" "t" "o" "n" " " "d" "n" "a" " " "e" "e" "f" "f" "o" "c" " " "f" "a" "=
 c" "e" "d" " " "a" " " "d" "n" " a" "s" "t" "u" "n" "o" "d" " " "d" "e" "z"=
  "a" "l" "g" " " "5" " " "d" "n" "a" " " "s" "t" "u" "n" "o" "d" " " "n" "i=
 " "a" "l" "p" " " "3" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "))))" "\=
 "" "e" "n" "i" "ar" "t" "c" "e" "n" "\"" " " "t" "i" "u" "r" "f" "(" " " "t=
 " "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "=
 r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "=
 o" "n" " " "d" "n" "a" " " "e" "n" "i" "r" "a" "t" "c" "e" "n" " " "a" "\""=
  " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "-3" "1" "x" "e" "'" "\n" "\n" ")))=
 )" "\"" "e" "g" "n" "a" "r" "o" "\"" " " "t" "i" "u" "r" "f" "(" "         =
                     " "\n" ")" "false" " " "coffee" "(" "                  =
            " "\n" ")" "\"apple\"" " " "fruit" "(" "                        =
      " "\n" ")" "true" " " "coffee" "(" "                             " "\n=
 " ")" "true" " " "tea" "(" "                             " "\n" ")" "1" " "=
  "1" " " "s" "t" "nu" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "=
 i" "l" "(" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "          "=
  "\n" "))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "e" =
 "u" "r" "t" " " "ee" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "a" "e=
 " "t" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n"=
  "))))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " ")" "e" "u" "r" "t" " "=
  "e" "e" "ff" "co" "(" " " ")" "\"banana\"" " " "fruit" "(" " " "t" "s" "i"=
  "l" "(" " " "drinks-only" "(" "          " "\n" "))" "false" " " "tea" "("=
  " " ")" "true" " " "coffee" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-=
 t" "t" "b" "d" "(" "\n" "))" "y" "t" "p" "m" "e" " " "y" "l" "n" "o" "-" "s=
 " "k" "n" "i" "r" "d" "(" "          " "\n" "y" "t" "p" "m" "e" " " "t" "s"=
  "e" "-t" "t" "b" "d" "(" "\n" "-2" "1" "x" "e" "'" "\n" "\n" ")))" "0" "2"=
  " " "0" "1" " " "-donuts" "f" "o" "-" "x" "bo" "(" " " "lth-nut" "a" "e" "=
 h" "(" "          " "\n" ")" "0" " " "0" "3" " " "s" "t" "u" "n" "o" "d" "-=
 " "f" "-o" "x" "o" "b" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" =
 "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "t" "i" "u" "r" "f" "(" "=
  " "t" "u" "n" "-" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" "\"" "e" =
 "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "it" "u" "r" "f" "(" " " "t" "s" "=
 e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" =
 " " "t" "u" "-n" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" "e" "ls" "a=
 " "f" " " "tea" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "u"=
  "r" "t" " " "e" "e" "f" "f" "o" "c" "(" " " "health-nut" "(" "          " =
 "\n" ")" "e" "s" "l" "a" "f" " " "e" "fe" "f" "o" "c" "(" " " "t" "s" "e" "=
 -t" "t" "b" "d" "(" "\n" "-1" "1" "x" "e" "'" "\n" "\n" ")]))))]))" "v" " "=
  "expected" " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, go=
 t ~a\"" " " "format" "(" " " "else" "[" "                                  =
      " "\n" "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "        =
                                " "\n" ";[(and (string? expected) (string? v=
 )) (list expected v)]" "                                       " "\n" "cond=
 " "(" "                                     " "\n" "])" "actual" " " "v" "(=
 [" " " "let" "(" "                                   " "\n" "])" "exn-messa=
 ge" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "l=
 ambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "actual" " " =
 "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" "(" " =
  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("\n" "}}}))"=
  "x" " " "x" " " "+" "{" "                      " "\n" "}}" "2" " " "x" " "=
  "/" "{" " " "y" "{" " " "with" "{" "                    " "\n" "}}" "2" " =
 " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "        =
   " "\n" "}}})" "x" " " "x" " " "+" "{" "                          " "\n" "=
 }}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                   =
      " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " =
 " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "x" " " "0" "1" "=
  " "-" "{" "                    " "\n" "}}}" "2" " " "8" " " "/" "{" " " "2=
 0" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "          " =
 "\n" "}})" "x" " " "0" "1" " " "-" "{" "                        " "\n" "}}}=
 " "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "=
 '" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "1" " " "x" =
 " " "-" "{" "                    " "\n" "}}" "5" " " "10" " " "/" "{" " " "=
 x" "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}})" "1" " " "=
 x" " " "-" "{" "                        " "\n" "}}" "5" " " "10" " " "/" "{=
 " " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d=
 " "(" "\n" "}}))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" "=
  " "/" "{" "'" " " "parse" "(" "          " "\n" "}})" "5" " " "2" " " "+" =
 "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " "=
  "-test" "t" "b" "d" "(" "\n" "}))" "2" " " "6" " " "/" "{" "'" " " "e" "s"=
  "r" "a" "p" "(" "          " "\n" "})" "2" " " "6" " " "/" "{" "'" " " "db=
 t-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "5" "-" "2" "x" "e" "'" "\n" =
 "\n" "\"" "!" "!" "!" "e" "d" "o" "c" " " "k" "c" "e" "h" "c" "\"" "\n" "4"=
  "-" "2" "x" "e" "'" "\n" "\n" "}}}}})))" "d" " " "c" " " "b" " " "a" " " "=
 +" "{" "                                         " "\n" "}}" "3" " " "c" " =
 " "+" "{" " " "d" "{" " " "with" "{" "                                     =
   " "\n" "}}" "2" " " "b" " " "+" "{" " " "c" "{" " " "with" "{" "         =
                             " "\n" "}}" "1" " " "a" " " "+" "{" " " "b" "{"=
  " " "with" "{" "                                   " "\n" "}" "0" " " "a" =
 "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          "=
  "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}})))" "c" " " "a" " " "+=
 " "{" "                                     " "\n" "}" "9" " " "c" "{" " " =
 "with" "{" "                                   " "\n" "}}}" "b" " " "b" " "=
  "+" "{" " " "}}" "7" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" " " "a=
 " "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "         =
  " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "8" " " "b=
 " " " "+" "{" "                                   " "\n" "}" "a" " " "a" "{=
 " " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "=
 \n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}})))" "b" =
 " " "a" " " "+" "{" "                                       " "\n" "}" "4" =
 " " "b" "{" " " "with" "{" "                                     " "\n" "}"=
  "a" " " "a" "{" " " "with" "{" "                                   " "\n" =
 "}" "5" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" =
 "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}}})))" =
 "d" " " "c" " " "+" "{" "                                          " "\n" "=
 }" "b" " " "a" " " "+" "{" " " "-" "{" "                                   =
     " "\n" "}" "9" " " "c" "{" " " "with" "{" "                            =
          " "\n" "}" "8" " " "b" "{" " " "with" "{" "                       =
             " "\n" "}" "8" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "=
 (" " " "free-vars" "(" "          " "\n" ")" "d" "(" "'" " " "-test" "t" "b=
 " "d" "(" "\n" "}})))" "b" " " "a" " " "+" "{" "                           =
         " "\n" "}" "4" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" "=
  " "free-vars" "(" "          " "\n" ")" "b" "(" "'" " " "-test" "t" "b" "d=
 " "(" "\n" "}})))" "b" " " "2" " " "+" "{" " " "a" " " "-" "{" "'" " " "dbt=
 -parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" "=
  " "-test" "t" "b" "d" "(" "\n" "})))" "b" " " "a" " " "+" "{" "'" " " "dbt=
 -parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" "=
  " "-test" "t" "b" "d" "(" "\n" ")))" "a" "'" " " "dbt-parse" "(" " " "free=
 -vars" "(" "          " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "\=
 n" ")))" "'5" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()=
 " "'" " " "-test" "t" "b" "d" "(" "\n" "3" "-" "2" "x" "e" "'" "\n" "\n" "}=
 }})))" "x" " " "x" " " "+" "{" "                                     " "\n"=
  "}}" "0" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                 =
                   " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "wit=
 h" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" "          " "\n" "6" "1=
 " " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "   =
                                 " "\n" "}}}" "2" " " "8" " " "/" "{" " " "2=
 0" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc=
 -lazy" "(" "          " "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "=
 1" " " "x" " " "-" "{" "                                   " "\n" "}}" "5" =
 " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " "=
  "-lazy" "calc" "(" "          " "\n" "1" " " "dbt-test" "(" "\n" "}})))" "=
 5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " =
 "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\n" "2" " " "-test" "t=
 " "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" "=
  " "-lazy" "calc" "(" "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\n=
 " "2" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "     =
                            " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" =
 " " "with" "{" "                              " "\n" "}}" "2" " " "16" " " =
 "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "=
           " "\n" "16" " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "0" =
 "1" " " "-" "{" "                              " "\n" "}}}" "2" " " "8" " "=
  "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse=
 " "(" " " "calc" "(" "          " "\n" "5" " " "-test" "t" "b" "d" "(" "\n"=
  "}})))" "1" " " "x" " " "-" "{" "                              " "\n" "}}"=
  "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(=
 " " " "calc" "(" "          " "\n" "1" " " "-test" "t" "b" "d" "(" "\n" "}}=
 )))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'=
 " " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "2" " " "-test" "t" =
 "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " "=
  "calc" "(" "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "1" "-" =
 "2" "x" "e" "'" "\n" "\n" ")))])]))" "p" "x" "se" " " "d" "r" "i" "h" "t" "=
 (" " " "dbt-parse" "(" "                 " "\n" ")))" "p" "ex" "s" " " "nd"=
  "o" "c" "e" "s" "(" " " "d" "n" "o" "c" "e" "s" "(" " " "dbt-parse" "(" " =
                 " "\n" "))" "p" "x" "e" "s" " " "d" "n" "co" "e" "s" "(" " =
 " "t" "s" "r" "i" "f" "(" " " "h" "t" "i" "w" "(" " " ")" "h" "t" "i" "w" "=
 [(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "     =
             " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "v"=
  "i" "d" "(" " " ")" "/" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" =
 " " "dbt-parse" "(" "                 " "\n" "))" "sexp" " " "second" "(" "=
  " "dbt-parse" "(" " " "sub" "(" " " ")" "-" "[(" "       " "\n" ")))]" "se=
 xp" " " "third" "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp=
 " " " "second" "(" " " "dbt-parse" "(" " " "add" "(" " " ")" "+" "[(" "    =
    " "\n" ")" "sexp" " " "first" "(" " " "case" "(" "     " "\n" ")" "sexp"=
  " " "list?" "[(" "    " "\n" ")]" "p" "x" "e" "s" " " "d" "i" "(" " " ")" =
 "p" "x" "e" "s" " " "?" "l" "o" "b" "m" "y" "s" "[(" "    " "\n" ")]" "sexp=
 " " " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" "(" " =
  " "\n" ")" "sexp" " " "dbt-parse" "(" " " "define" "(" "\n" "E" "A" "W" " =
 " ">" "-" " " "n" "o" "i" "s" "s" "e" "r" "p" "x" "e" "-" "S" " " ":" " " "=
 dbt-parse" " " ";" ";" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " =
 "30" " " "node" "(" "                           " "\n" "))))" "leaf" "(" " =
 " ")" "leaf" "(" " " "9" " " "node" "(" "                                  =
      " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "    =
                                    " "\n" "7" " " "node" "(" "             =
                     " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "=
 node" "(" "                                 " "\n" "5" " " "node" "(" "    =
                        " "\n" "20" " " "node" "(" " " "10" " " "insert" "("=
  "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" =
 "(" "                " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" =
 " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "                 =
            " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "("=
  "                            " "\n" "7" " " "node" "(" "                  =
     " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "     =
                  " "\n" "5" " " "node" "(" "                " "\n" "20" " "=
  "node" "(" " " "dbt-test" "(" "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " =
 " "4" " " "node" "(" " " "8" " " "insert" "(" "          " "\n" ")))" "leaf=
 " "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" =
 " " "node" "(" " " "dbt-test" "(" "\n" ")))" "leaf" "(" " " "4" " " "insert=
 " "(" " " "))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "db=
 t-test" "(" "\n" "-7" "1" "ex" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "le=
 af" "(" " " "9" "2" " " "node" "(" "                             " "\n" "))=
 )))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "=
 (" " " "9" " " "node" "(" "                                         " "\n" =
 "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                =
                          " "\n" "7" " " "node" "(" "                       =
             " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(=
 " "                                   " "\n" "5" " " "node" "(" "          =
                    " "\n" "20" " " "node" "(" " " "s" "all-number" "(" "   =
        " "\n" ")" "29" " " "10" " " "9" " " "6" " " "7" " " "2" " " "5" " "=
  "20" " " "list" "(" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "le=
 af" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " =
 " "s" "r" "be" "m" "u" "n" "-" "l" "al" "(" "          " "\n" ")" "8" " " "=
 4" " " "list" "(" " " "-test" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "=
 (" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "s" "r" =
 "e" "b" "m" "u" "n" "-" "l" "al" "(" "          " "\n" ")" "7" " " "t" "s" =
 "li" "(" " " "t" "s" "-te" "t" "b" "d" "(" "\n" "-6" "1" "x" "e" "'" "\n" "=
 \n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "(" "     =
                     " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" "=
  " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "                  =
                    " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "n=
 ode" "(" "                                     " "\n" "7" " " "node" "(" " =
                               " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " "=
  "2" " " "node" "(" "                               " "\n" "5" " " "node" "=
 (" "                         " "\n" "20" " " "node" "(" " " "e" "g" "a" "r"=
  "e" "v" "a" "(" "          " "\n" "1" "1" " " "dbt-test" "(" "\n" ")))))" =
 "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " "=
  "4" " " "node" "(" " " "e" "g" "a" "aver" "(" "          " "\n" "6" " " "t=
 " "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" =
 "a" "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "e" "g" "a" "r" "e" "av=
 " "(" "          " "\n" "7" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "-5" "1"=
  "x" "e" "'" "\n" "\n" ")))" "0" "1" " " "e" "r" "e" "h" "p" "s" "(" " " "e=
 " "m" "u" "l" "o" "v" "(" "          " "\n" ")" "pi" " " "0/3" "0" "0" "4" =
 " " "*" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "5" " " "3" " "=
  "2" " " "m" "s" "i" "r" "p" "(" " " "e" "m" "u" "l" "o" "v" "(" "         =
  " "\n" "0" "3" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "4" " " "e"=
  "b" "u" "c" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "4" "6" =
 " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-4" "1" "x" "e" "'" "\n" "\n" ")=
 )))" "e" "u" "r" "t" " " "a" "e" "t" "(" " " ")" "\"" "e" "l" "p" "p" "a" "=
 e" "n" "i" "p" "\"" " " "t" "i" "u" "r" "f" "(" " " ")" "\"" "na" "a" "n" "=
 a" "b" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e"=
  "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" =
 "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "a=
 " "e" "t" " " "r" "a" "ul" "g" "e" "r" " " " a" "d" "n" "a" " " "e" "l" "p"=
  "p" "a" "e" "n" "i" "p" " " "a" " " "d" "n" "a" " " "a" "n" "a" "an" "b" "=
  " "a" "\"" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "))))" "e" "s" "l" "a" "=
 f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "5" " " "3" " " "ts" "u" "n" "o"=
  "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d=
 " "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"=
 " "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "=
 e" "f" "f" "o" "c" " " "f" "a" "c" "e" "d" " " "a" " " "d" "n" " a" "s" "t"=
  "u" "n" "o" "d" " " "d" "e" "z" "a" "l" "g" " " "5" " " "d" "n" "a" " " "s=
 " "t" "u" "n" "o" "d" " " "n" "i" "a" "l" "p" " " "3" "\"" " " "t" "s" "e" =
 "t-t" "b" "d" "(" "\n" "))))" "\"" "e" "n" "i" "ar" "t" "c" "e" "n" "\"" " =
 " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "=
 -" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "=
 l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "n" "i" "r" =
 "a" "t" "c" "e" "n" " " "a" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "-3=
 " "1" "x" "e" "'" "\n" "\n" "))))" "\"" "e" "g" "n" "a" "r" "o" "\"" " " "t=
 " "i" "u" "r" "f" "(" "                             " "\n" ")" "false" " " =
 "coffee" "(" "                             " "\n" ")" "\"apple\"" " " "frui=
 t" "(" "                             " "\n" ")" "true" " " "coffee" "(" "  =
                            " "\n" ")" "true" " " "tea" "(" "               =
               " "\n" ")" "1" " " "1" " " "s" "t" "nu" "o" "d" "-" "f" "o" "=
 -" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "y" "l" "n" "o" "-" "s" "k" =
 "n" "i" "r" "d" "(" "          " "\n" "))" "e" "s" "l" "a" "f" " " "e" "e" =
 "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "ee" "f" "f" "o" "c" "(" " =
 " ")" "e" "u" "r" "t" " " "a" "e" "t" "(" " " "t" "s" "i" "l" "(" " " "t" "=
 s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "a" "e" "t"=
  "(" " " ")" "e" "u" "r" "t" " " "e" "e" "ff" "co" "(" " " ")" "\"banana\""=
  " " "fruit" "(" " " "t" "s" "i" "l" "(" " " "drinks-only" "(" "          "=
  "\n" "))" "false" " " "tea" "(" " " ")" "true" " " "coffee" "(" " " "t" "s=
 " "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))" "y" "t" "p" "m=
 " "e" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "          " "\n"=
  "y" "t" "p" "m" "e" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-2" "1" "x"=
  "e" "'" "\n" "\n" ")))" "0" "2" " " "0" "1" " " "-donuts" "f" "o" "-" "x" =
 "bo" "(" " " "lth-nut" "a" "e" "h" "(" "          " "\n" ")" "0" " " "0" "3=
 " " " "s" "t" "u" "n" "o" "d" "-" "f" "-o" "x" "o" "b" "(" " " "t" "s" "e" =
 "-t" "t" "b" "d" "(" "\n" ")))" "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\=
 "" " " "t" "i" "u" "r" "f" "(" " " "t" "u" "n" "-" "h" "lt" "a" "e" "h" "("=
  "          " "\n" ")" "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "i=
 t" "u" "r" "f" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "s" =
 "l" "a" "f" " " "a" "e" "t" "(" " " "t" "u" "-n" "h" "lt" "a" "e" "h" "(" "=
           " "\n" ")" "e" "ls" "a" "f" " " "tea" "(" " " "t" "s" "e" "-t" "t=
 " "b" "d" "(" "\n" ")))" "e" "u" "r" "t" " " "e" "e" "f" "f" "o" "c" "(" " =
 " "health-nut" "(" "          " "\n" ")" "e" "s" "l" "a" "f" " " "e" "fe" "=
 f" "o" "c" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-1" "1" "x" "e" "=
 '" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quote" "(=
 " " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "  =
                                      " "\n" "]" "#t" " " ")" "expected" " "=
  "v" " " "equal?" "[(" "                                       " "\n" ";[(a=
 nd (string? expected) (string? v)) (list expected v)]" "                   =
                     " "\n" "cond" "(" "                                    =
  " "\n" "])" "actual" " " "v" "([" " " "let" "(" "                         =
           " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " =
 "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" " " "s=
 yntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" "    " "\n" "()" " =
 " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "d=
 efine-syntax" "(") ("\n" "}}}))" "x" " " "x" " " "+" "{" "                 =
      " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "      =
               " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "=
 {" "'" " " "parse" "(" "          " "\n" "}}})" "x" " " "x" " " "+" "{" "  =
                         " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " "=
  "with" "{" "                        " "\n" "}}" "2" " " "16" " " "/" "{" "=
  " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "=
 (" "\n" "}}))" "x" " " "0" "1" " " "-" "{" "                    " "\n" "}}}=
 " "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "=
 '" " " "parse" "(" "          " "\n" "}})" "x" " " "0" "1" " " "-" "{" "   =
                      " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" =
 "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" =
 "d" "(" "\n" "}}))" "1" " " "x" " " "-" "{" "                    " "\n" "}}=
 " "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "=
           " "\n" "}})" "1" " " "x" " " "-" "{" "                        " "=
 \n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-p=
 arse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "5" " " "2" " " "+" "{" "=
  " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "parse" "(" "          "=
  "\n" "}})" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/"=
  "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}))" "2" " "=
  "6" " " "/" "{" "'" " " "e" "s" "r" "a" "p" "(" "          " "\n" "})" "2"=
  " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\=
 n" "5" "-" "2" "x" "e" "'" "\n" "\n" "\"" "!" "!" "!" "e" "d" "o" "c" " " "=
 k" "c" "e" "h" "c" "\"" "\n" "4" "-" "2" "x" "e" "'" "\n" "\n" "}}}}})))" "=
 d" " " "c" " " "b" " " "a" " " "+" "{" "                                   =
       " "\n" "}}" "3" " " "c" " " "+" "{" " " "d" "{" " " "with" "{" "     =
                                   " "\n" "}}" "2" " " "b" " " "+" "{" " " "=
 c" "{" " " "with" "{" "                                     " "\n" "}}" "1"=
  " " "a" " " "+" "{" " " "b" "{" " " "with" "{" "                          =
          " "\n" "}" "0" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" =
 " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(" =
 "\n" "}}})))" "c" " " "a" " " "+" "{" "                                    =
  " "\n" "}" "9" " " "c" "{" " " "with" "{" "                               =
     " "\n" "}}}" "b" " " "b" " " "+" "{" " " "}}" "7" " " "a" " " "+" "{" "=
  " "b" "{" " " "with" "{" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(=
 " " " "free-vars" "(" "          " "\n" ")" "a" "(" "'" " " "-test" "t" "b"=
  "d" "(" "\n" "}})))" "8" " " "b" " " "+" "{" "                            =
        " "\n" "}" "a" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " =
 " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t"=
  "b" "d" "(" "\n" "}}}})))" "b" " " "a" " " "+" "{" "                      =
                  " "\n" "}" "4" " " "b" "{" " " "with" "{" "               =
                       " "\n" "}" "a" " " "a" "{" " " "with" "{" "          =
                          " "\n" "}" "5" " " "a" "{" " " "with" "{" "'" " " =
 "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" =
 "t" "b" "d" "(" "\n" "}}}}})))" "d" " " "c" " " "+" "{" "                  =
                         " "\n" "}" "b" " " "a" " " "+" "{" " " "-" "{" "   =
                                     " "\n" "}" "9" " " "c" "{" " " "with" "=
 {" "                                     " "\n" "}" "8" " " "b" "{" " " "wi=
 th" "{" "                                   " "\n" "}" "8" " " "a" "{" " " =
 "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")=
 " "d" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "a" " " "+" =
 "{" "                                   " "\n" "}" "4" " " "a" "{" " " "wit=
 h" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b=
 " "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "2" " " "+" "{" =
 " " "a" " " "-" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          =
 " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "})))" "b" =
 " " "a" " " "+" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          =
 " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "a" "=
 '" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "a" "(" "'=
 " " " "-test" "t" "b" "d" "(" "\n" ")))" "'5" " " "dbt-parse" "(" " " "free=
 -vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "3" =
 "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "           =
                           " "\n" "}}" "0" " " "x" " " "/" "{" " " "y" "{" "=
  " "with" "{" "                                   " "\n" "}}" "2" " " "16" =
 " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc-la=
 zy" "(" "          " "\n" "6" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" =
 "x" " " "0" "1" " " "-" "{" "                                   " "\n" "}}}=
 " "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "=
 '" " " "dbt-parse" "(" " " "calc-lazy" "(" "          " "\n" "5" " " "-test=
 " "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "                   =
                 " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with"=
  "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\n" "1" "=
  " "dbt-test" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" =
 " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "   =
        " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" ")" "}))" "2" " " "6" " =
 " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " "\n" =
 "3" " " "-test" "t" "b" "d" "(" "\n" "2" "-" "2" "x" "e" "'" "\n" "\n" "}}}=
 )))" "x" " " "x" " " "+" "{" "                                " "\n" "}}" "=
 2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                        =
       " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" "=
  " "dbt-parse" "(" " " "calc" "(" "          " "\n" "16" " " "-test" "t" "b=
 " "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "                       =
        " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{=
 " " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "=
 5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "      =
                         " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " =
 " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "1" "=
  " "-test" "t" "b" "d" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" "8"=
  " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "  =
         " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " " "6" " " =
 "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "3" " " "-=
 test" "t" "b" "d" "(" "\n" "1" "-" "2" "x" "e" "'" "\n" "\n" ")))])]))" "p"=
  "x" "se" " " "d" "r" "i" "h" "t" "(" " " "dbt-parse" "(" "                =
  " "\n" ")))" "p" "ex" "s" " " "nd" "o" "c" "e" "s" "(" " " "d" "n" "o" "c"=
  "e" "s" "(" " " "dbt-parse" "(" "                 " "\n" "))" "p" "x" "e" =
 "s" " " "d" "n" "co" "e" "s" "(" " " "t" "s" "r" "i" "f" "(" " " "h" "t" "i=
 " "w" "(" " " ")" "h" "t" "i" "w" "[(" "       " "\n" ")))]" "sexp" " " "th=
 ird" "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp" " " "seco=
 nd" "(" " " "dbt-parse" "(" " " "v" "i" "d" "(" " " ")" "/" "[(" "       " =
 "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "                 " =
 "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "sub" "(" " " ")"=
  "-" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" =
 "                 " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" "=
  " "add" "(" " " ")" "+" "[(" "       " "\n" ")" "sexp" " " "first" "(" " "=
  "case" "(" "     " "\n" ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "p" "=
 x" "e" "s" " " "d" "i" "(" " " ")" "p" "x" "e" "s" " " "?" "l" "o" "b" "m" =
 "y" "s" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "numb=
 er?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "dbt-parse" "(" "=
  " "define" "(" "\n" "E" "A" "W" " " ">" "-" " " "n" "o" "i" "s" "s" "e" "r=
 " "p" "x" "e" "-" "S" " " ":" " " "dbt-parse" " " ";" ";" "\n" "\n" ")))))"=
  "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "                   =
         " "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" =
 "                                       " "\n" "))" "leaf" "(" " " ")" "lea=
 f" "(" " " "6" " " "node" "(" "                                       " "\n=
 " "7" " " "node" "(" "                                 " "\n" "))" "leaf" "=
 (" " " ")" "leaf" "(" " " "2" " " "node" "(" "                             =
     " "\n" "5" " " "node" "(" "                           " "\n" "20" " " "=
 node" "(" " " "10" " " "insert" "(" "          " "\n" ")))" "leaf" "(" " " =
 ")" "leaf" "(" " " "30" " " "node" "(" "                " "\n" ")))))" "lea=
 f" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9=
 " " " "node" "(" "                            " "\n" "))" "leaf" "(" " " ")=
 " "leaf" "(" " " "6" " " "node" "(" "                            " "\n" "7"=
  " " "node" "(" "                      " "\n" "))" "leaf" "(" " " ")" "leaf=
 " "(" " " "2" " " "node" "(" "                      " "\n" "5" " " "node" "=
 (" "                " "\n" "20" " " "node" "(" " " "dbt-test" "(" "\n" ")))=
 )" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "8" " " "insert=
 " "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "no=
 de" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" "=
 )))" "leaf" "(" " " "4" " " "insert" "(" " " "))" "leaf" "(" " " ")" "leaf"=
  "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" "-7" "1" "ex" "'" "\n" =
 "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "(" "    =
                          " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "=
 10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "             =
                             " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "=
 6" " " "node" "(" "                                         " "\n" "7" " " =
 "node" "(" "                                   " "\n" "))" "leaf" "(" " " "=
 )" "leaf" "(" " " "2" " " "node" "(" "                                   " =
 "\n" "5" " " "node" "(" "                             " "\n" "20" " " "node=
 " "(" " " "s" "all-number" "(" "          " "\n" ")" "29" " " "10" " " "9" =
 " " "6" " " "7" " " "2" " " "5" " " "20" " " "list" "(" " " "dbt-test" "(" =
 "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "=
 leaf" "(" " " "4" " " "node" "(" " " "s" "r" "be" "m" "u" "n" "-" "l" "al" =
 "(" "          " "\n" ")" "8" " " "4" " " "list" "(" " " "-test" "t" "b" "d=
 " "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" "=
  " "e" "d" "o" "n" "(" " " "s" "r" "e" "b" "m" "u" "n" "-" "l" "al" "(" "  =
         " "\n" ")" "7" " " "t" "s" "li" "(" " " "t" "s" "-te" "t" "b" "d" "=
 (" "\n" "-6" "1" "x" "e" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(=
 " " " "9" "2" " " "node" "(" "                         " "\n" ")))))" "leaf=
 " "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9"=
  " " "node" "(" "                                     " "\n" "))" "leaf" "(=
 " " " ")" "leaf" "(" " " "6" " " "node" "(" "                              =
        " "\n" "7" " " "node" "(" "                               " "\n" "))=
 " "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                   =
             " "\n" "5" " " "node" "(" "                         " "\n" "20"=
  " " "node" "(" " " "e" "g" "a" "r" "e" "v" "a" "(" "          " "\n" "1" "=
 1" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " =
 " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "e" "g" "a" "ave=
 r" "(" "          " "\n" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))=
 )" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o" =
 "n" "(" " " "e" "g" "a" "r" "e" "av" "(" "          " "\n" "7" " " "t" "s" =
 "e" "-t" "bt" "d" "(" "\n" "-5" "1" "x" "e" "'" "\n" "\n" ")))" "0" "1" " "=
  "e" "r" "e" "h" "p" "s" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "=
 \n" ")" "pi" " " "0/3" "0" "0" "4" " " "*" "(" " " "t" "s" "e" "-t" "t" "b"=
  "d" "(" "\n" ")))" "5" " " "3" " " "2" " " "m" "s" "i" "r" "p" "(" " " "e"=
  "m" "u" "l" "o" "v" "(" "          " "\n" "0" "3" " " "t" "s" "e" "-t" "t"=
  "b" "d" "(" "\n" ")))" "4" " " "e" "b" "u" "c" "(" " " "e" "m" "u" "l" "o"=
  "v" "(" "          " "\n" "4" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n=
 " "-4" "1" "x" "e" "'" "\n" "\n" "))))" "e" "u" "r" "t" " " "a" "e" "t" "("=
  " " ")" "\"" "e" "l" "p" "p" "a" "e" "n" "i" "p" "\"" " " "t" "i" "u" "r" =
 "f" "(" " " ")" "\"" "na" "a" "n" "a" "b" "\"" " " "t" "i" "u" "r" "f" "(" =
 " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a"=
  "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h"=
  "t" "o" "n" " " "d" "n" "a" " " "a" "e" "t" " " "r" "a" "ul" "g" "e" "r" "=
  " " a" "d" "n" "a" " " "e" "l" "p" "p" "a" "e" "n" "i" "p" " " "a" " " "d"=
  "n" "a" " " "a" "n" "a" "an" "b" " " "a" "\"" " " "t" "s" "e" "-t" "bt" "d=
 " "(" "\n" "))))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " "=
 )" "5" " " "3" " " "ts" "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " "=
  "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e=
 " "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t=
 " "o" "n" " " "d" "n" "a" " " "e" "e" "f" "f" "o" "c" " " "f" "a" "c" "e" "=
 d" " " "a" " " "d" "n" " a" "s" "t" "u" "n" "o" "d" " " "d" "e" "z" "a" "l"=
  "g" " " "5" " " "d" "n" "a" " " "s" "t" "u" "n" "o" "d" " " "n" "i" "a" "l=
 " "p" " " "3" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "))))" "\"" "e" "=
 n" "i" "ar" "t" "c" "e" "n" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i=
 " "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "=
 (" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" "=
  " "d" "n" "a" " " "e" "n" "i" "r" "a" "t" "c" "e" "n" " " "a" "\"" " " "t"=
  "s" "e" "t-t" "b" "d" "(" "\n" "-3" "1" "x" "e" "'" "\n" "\n" "))))" "\"" =
 "e" "g" "n" "a" "r" "o" "\"" " " "t" "i" "u" "r" "f" "(" "                 =
             " "\n" ")" "false" " " "coffee" "(" "                          =
    " "\n" ")" "\"apple\"" " " "fruit" "(" "                             " "=
 \n" ")" "true" " " "coffee" "(" "                             " "\n" ")" "t=
 rue" " " "tea" "(" "                             " "\n" ")" "1" " " "1" " "=
  "s" "t" "nu" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "=
 (" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "          " "\n" ")=
 )" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" =
 "t" " " "ee" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "a" "e" "t" "(=
 " " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" =
 "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " ")" "e" "u" "r" "t" " " "e" "e"=
  "ff" "co" "(" " " ")" "\"banana\"" " " "fruit" "(" " " "t" "s" "i" "l" "("=
  " " "drinks-only" "(" "          " "\n" "))" "false" " " "tea" "(" " " ")"=
  "true" " " "coffee" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "=
 b" "d" "(" "\n" "))" "y" "t" "p" "m" "e" " " "y" "l" "n" "o" "-" "s" "k" "n=
 " "i" "r" "d" "(" "          " "\n" "y" "t" "p" "m" "e" " " "t" "s" "e" "-t=
 " "t" "b" "d" "(" "\n" "-2" "1" "x" "e" "'" "\n" "\n" ")))" "0" "2" " " "0"=
  "1" " " "-donuts" "f" "o" "-" "x" "bo" "(" " " "lth-nut" "a" "e" "h" "(" "=
           " "\n" ")" "0" " " "0" "3" " " "s" "t" "u" "n" "o" "d" "-" "f" "-=
 o" "x" "o" "b" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "\"" "e"=
  "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "=
 u" "n" "-" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" "\"" "e" "n" "i" =
 "r" "e" "g" "n" "a" "t" "\"" " " "it" "u" "r" "f" "(" " " "t" "s" "e" "-t" =
 "t" "b" "d" "(" "\n" ")))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " "t" =
 "u" "-n" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" "e" "ls" "a" "f" " =
 " "tea" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "u" "r" "t"=
  " " "e" "e" "f" "f" "o" "c" "(" " " "health-nut" "(" "          " "\n" ")"=
  "e" "s" "l" "a" "f" " " "e" "fe" "f" "o" "c" "(" " " "t" "s" "e" "-t" "t" =
 "b" "d" "(" "\n" "-1" "1" "x" "e" "'" "\n" "\n" ")]))))]))" "v" " " "expect=
 ed" " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" =
 " " "format" "(" " " "else" "[" "                                       " "=
 \n" "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "                =
                        " "\n" ";[(and (string? expected) (string? v)) (list=
  expected v)]" "                                       " "\n" "cond" "(" " =
                                     " "\n" "])" "actual" " " "v" "([" " " "=
 let" "(" "                                   " "\n" "])" "exn-message" " " =
 ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "=
 ([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "actual" " " "expecte=
 d" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" =
 ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("\n" "}}}))" "x" " "=
  "x" " " "+" "{" "                      " "\n" "}}" "2" " " "x" " " "/" "{"=
  " " "y" "{" " " "with" "{" "                    " "\n" "}}" "2" " " "16" "=
  " "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "          " "\n"=
  "}}})" "x" " " "x" " " "+" "{" "                          " "\n" "}}" "2" =
 " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                        " "=
 \n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-p=
 arse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "x" " " "x" " " "*" "{" "=
                     " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "=
 {" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}})" "=
 x" " " "x" " " "*" "{" "                        " "\n" "}}}" "2" " " "8" " =
 " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-pars=
 e" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "x" " " "x" " " "+" "{" "   =
                  " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with=
 " "{" "'" " " "parse" "(" "          " "\n" "}})" "x" " " "x" " " "+" "{" "=
                         " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " =
 " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))=
 " "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" "=
  " "parse" "(" "          " "\n" "}})" "5" " " "2" " " "+" "{" " " "}" "8" =
 " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b"=
  "d" "(" "\n" "}))" "2" " " "6" " " "/" "{" "'" " " "e" "s" "r" "a" "p" "("=
  "          " "\n" "})" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " "=
  "-test" "t" "b" "d" "(" "\n" "5" "-" "2" "x" "e" "'" "\n" "\n" "\"" "!" "!=
 " "!" "e" "d" "o" "c" " " "k" "c" "e" "h" "c" "\"" "\n" "4" "-" "2" "x" "e"=
  "'" "\n" "\n" "}}}}})))" "d" " " "c" " " "b" " " "a" " " "+" "{" "        =
                                  " "\n" "}}" "3" " " "c" " " "+" "{" " " "d=
 " "{" " " "with" "{" "                                       " "\n" "}}" "2=
 " " " "b" " " "+" "{" " " "c" "{" " " "with" "{" "                         =
             " "\n" "}}" "1" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" =
 "                                   " "\n" "}" "0" " " "a" "{" " " "with" "=
 {" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" "=
  " "-test" "t" "b" "d" "(" "\n" "}}})))" "c" " " "a" " " "+" "{" "         =
                             " "\n" "}" "9" " " "c" "{" " " "with" "{" "    =
                                " "\n" "}}}" "b" " " "b" " " "+" "{" " " "}}=
 " "7" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" " " "a" "{" " " "with"=
  "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "a" =
 "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "8" " " "b" " " "+" "{" " =
                                   " "\n" "}" "a" " " "a" "{" " " "with" "{"=
  "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " =
 "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}})))" "b" " " "a" " " "+" =
 "{" "                                       " "\n" "}" "4" " " "b" "{" " " =
 "with" "{" "                                     " "\n" "}" "a" " " "a" "{"=
  " " "with" "{" "                                   " "\n" "}" "5" " " "a" =
 "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          "=
  "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}}})))" "d" " " "c" " " =
 "+" "{" "                                          " "\n" "}" "b" " " "a" "=
  " "+" "{" " " "*" "{" "                                       " "\n" "}" "=
 9" " " "c" "{" " " "with" "{" "                                     " "\n" =
 "}" "8" " " "b" "{" " " "with" "{" "                                   " "\=
 n" "}" "8" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-var=
 s" "(" "          " "\n" ")" "d" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "=
 }})))" "b" " " "a" " " "+" "{" "                                   " "\n" "=
 }" "4" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "=
 (" "          " "\n" ")" "b" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}}))=
 )" "b" " " "2" " " "+" "{" " " "a" " " "*" "{" "'" " " "dbt-parse" "(" " " =
 "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "=
 b" "d" "(" "\n" "})))" "b" " " "a" " " "+" "{" "'" " " "dbt-parse" "(" " " =
 "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "=
 b" "d" "(" "\n" ")))" "a" "'" " " "dbt-parse" "(" " " "free-vars" "(" "    =
       " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "'5" " =
 " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test=
 " "t" "b" "d" "(" "\n" "3" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "=
 x" " " "+" "{" "                                       " "\n" "}}" "0" " " =
 "x" " " "/" "{" " " "y" "{" " " "with" "{" "                               =
       " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" "=
  " "dbt-parse" "(" " " "interp-lazy" "(" "          " "\n" "6" "1" " " "-te=
 st" "t" "b" "d" "(" "\n" "}})))" "x" " " "x" " " "*" "{" "                 =
                     " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "=
 {" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "interp-lazy" "("=
  "          " "\n" "5" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " "=
  "x" " " "+" "{" "                                     " "\n" "}}" "5" " " =
 "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "in=
 terp-lazy" "(" "          " "\n" "4" " " "dbt-test" "(" "\n" "}})))" "5" " =
 " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-=
 parse" "(" " " "interp-lazy" "(" "          " "\n" "2" " " "-test" "t" "b" =
 "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "in=
 terp-lazy" "(" "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "2" "=
 -" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "            =
                       " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "=
 with" "{" "                                " "\n" "}}" "2" " " "16" " " "/"=
  "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "interp" "(" " =
          " "\n" "16" " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "x" "=
  " "*" "{" "                                " "\n" "}}}" "2" " " "8" " " "/=
 " "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "=
 (" " " "interp" "(" "          " "\n" "25" " " "-test" "t" "b" "d" "(" "\n"=
  "}})))" "x" " " "x" " " "+" "{" "                                " "\n" "}=
 }" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" =
 "(" " " "interp" "(" "          " "\n" "4" " " "-test" "t" "b" "d" "(" "\n"=
  "}})))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{=
 " "'" " " "dbt-parse" "(" " " "interp" "(" "          " "\n" "2" " " "-test=
 " "t" "b" "d" "(" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "=
 (" " " "interp" "(" "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" =
 "1" "-" "2" "x" "e" "'" "\n" "\n" ")))])]))" "p" "x" "se" " " "d" "r" "i" "=
 h" "t" "(" " " "dbt-parse" "(" "                 " "\n" ")))" "p" "x" "e" "=
 s" " " "d" "n" "o" "c" "e" "s" "(" " " "d" "n" "o" "c" "e" "s" "(" " " "dbt=
 -parse" "(" "                 " "\n" "))" "p" "x" "e" "s" " " "d" "n" "co" =
 "e" "s" "(" " " "t" "s" "r" "i" "f" "(" " " "h" "t" "i" "w" "(" " " ")" "h"=
  "t" "i" "w" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-par=
 se" "(" "                 " "\n" "))" "sexp" " " "second" "(" " " "dbt-pars=
 e" "(" " " "v" "i" "d" "(" " " ")" "/" "[(" "       " "\n" ")))]" "sexp" " =
 " "third" "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp" " " =
 "second" "(" " " "dbt-parse" "(" " " "sub" "(" " " ")" "-" "[(" "       " "=
 \n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "                 " "=
 \n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "add" "(" " " ")" =
 "+" "[(" "       " "\n" ")" "sexp" " " "first" "(" " " "case" "(" "     " "=
 \n" ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "p" "x" "e" "s" " " "d" "i=
 " "(" " " ")" "p" "x" "e" "s" " " "?" "l" "o" "b" "m" "y" "s" "[(" "    " "=
 \n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n"=
  "cond" "(" "  " "\n" ")" "sexp" " " "dbt-parse" "(" " " "define" "(" "\n" =
 "E" "A" "W" " " ">" "-" " " "n" "o" "i" "s" "s" "e" "r" "p" "x" "e" "-" "S"=
  " " ":" " " "dbt-parse" " " ";" ";" "\n" "\n" ")))))" "leaf" "(" " " ")" "=
 leaf" "(" " " "30" " " "node" "(" "                           " "\n" "))))"=
  "leaf" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "                    =
                    " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "n=
 ode" "(" "                                       " "\n" "7" " " "node" "(" =
 "                                 " "\n" "))" "leaf" "(" " " ")" "leaf" "("=
  " " "2" " " "node" "(" "                                 " "\n" "5" " " "n=
 ode" "(" "                           " "\n" "20" " " "node" "(" " " "10" " =
 " "insert" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "3=
 0" " " "node" "(" "                " "\n" ")))))" "leaf" "(" " " ")" "leaf"=
  "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "   =
                          " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" =
 " " "node" "(" "                            " "\n" "7" " " "node" "(" "    =
                   " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "no=
 de" "(" "                      " "\n" "5" " " "node" "(" "                "=
  "\n" "20" " " "node" "(" " " "dbt-test" "(" "\n" "))))" "leaf" "(" " " ")"=
  "leaf" "(" " " "4" " " "node" "(" " " "8" " " "insert" "(" "          " "\=
 n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf=
 " "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" ")))" "leaf" "(" " " "=
 4" " " "insert" "(" " " "))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "nod=
 e" "(" " " "dbt-test" "(" "\n" "-7" "1" "ex" "'" "\n" "\n" ")))))" "leaf" "=
 (" " " ")" "leaf" "(" " " "9" "2" " " "node" "(" "                         =
     " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " =
 " ")" "leaf" "(" " " "9" " " "node" "(" "                                  =
        " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "  =
                                        " "\n" "7" " " "node" "(" "         =
                           " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2"=
  " " "node" "(" "                                   " "\n" "5" " " "node" "=
 (" "                             " "\n" "20" " " "node" "(" " " "s" "all-nu=
 mber" "(" "          " "\n" ")" "9" "2" " " "0" "2" " " "0" "1" " " "9" " "=
  "7" " " "6" " " "5" " " "2" " " "t" "s" "i" "l" "(" " " "dbt-test" "(" "\n=
 " ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "lea=
 f" "(" " " "4" " " "node" "(" " " "s" "r" "e" "b" "m" "u" "n" "-" "l" "l" "=
 a" "(" "          " "\n" ")" "4" " " "8" " " "t" "s" "li" "(" " " "t" "s" "=
 e" "-t" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e"=
  "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "s" "r" "e" "b" "m" "u" "n" "-=
 " "l" "l" "a" "(" "          " "\n" ")" "7" " " "t" "s" "i" "l" "(" " " "t"=
  "s" "e" "-t" "t" "b" "d" "(" "\n" "-6" "1" "x" "e" "'" "\n" "\n" ")))))" "=
 leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "(" "                  =
        " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "("=
  " " ")" "leaf" "(" " " "9" " " "node" "(" "                               =
       " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "   =
                                   " "\n" "7" " " "node" "(" "              =
                  " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "nod=
 e" "(" "                               " "\n" "5" " " "node" "(" "         =
                 " "\n" "20" " " "node" "(" " " "e" "g" "a" "r" "e" "v" "a" =
 "(" "          " "\n" "0" "1" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " =
 " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "nod=
 e" "(" " " "e" "g" "a" "aver" "(" "          " "\n" "6" " " "t" "s" "e" "-t=
 " "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "=
 (" " " "7" " " "e" "d" "o" "n" "(" " " "e" "g" "a" "r" "e" "v" "a" "(" "   =
        " "\n" "7" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "-5" "1" "x" "e" "=
 '" "\n" "\n" ")))" "0" "1" " " "e" "b" "u" "c" "(" " " "e" "m" "u" "l" "o" =
 "v" "(" "          " "\n" ")" "pi" " " "0/3" "0" "0" "4" " " "*" "(" " " "t=
 " "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "5" " " "3" " " "2" " " "m" "s" "=
 i" "r" "p" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "0" "3" " =
 " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "4" " " "e" "b" "u" "c" "(" "=
  " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "4" "6" " " "t" "s" "e" "-=
 t" "t" "b" "d" "(" "\n" "-4" "1" "x" "e" "'" "\n" "\n" "))))" "e" "u" "r" "=
 t" " " "a" "e" "t" "(" " " ")" "\"" "e" "l" "p" "p" "a" "e" "n" "i" "p" "\"=
 " " " "t" "i" "u" "r" "f" "(" " " ")" "\"" "a" "n" "a" "n" "a" "b" "\"" " "=
  "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-=
 " "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l=
 " "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "a" "e" "t" " " "=
 r" "a" "l" "u" "g" "e" "r" " " "a" " " "d" "n" "a" " " "e" "l" "p" "p" "a" =
 "e" "n" "i" "p" " " "a" " " "d" "n" "a" " " "a" "n" "a" "n" "a" "b" " " "a"=
  "\"" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " "=
  "e" "e" "f" "f" "o" "c" "(" " " ")" "5" " " "3" " " "s" "t" "u" "n" "o" "d=
 " "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "=
 r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "=
 e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "e" =
 "f" "f" "o" "c" " " "f" "a" "c" "e" "d" " " "a" " " "d" "n" "a" " " "s" "t"=
  "u" "n" "o" "d" " " "d" "e" "z" "a" "l" "g" " " "5" " " "d" "n" "a" " " "s=
 " "t" "u" "n" "o" "d" " " "n" "i" "a" "l" "p" " " "3" "\"" " " "t" "s" "e" =
 "t-t" "b" "d" "(" "\n" "))))" "\"" "e" "n" "i" "r" "a" "t" "c" "e" "n" "\""=
  " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o=
 " "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s=
 " "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "n" "i" "=
 r" "a" "t" "c" "e" "n" " " "a" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" =
 "-3" "1" "x" "e" "'" "\n" "\n" ")))" "\"" "e" "g" "n" "a" "r" "o" "\"" " " =
 "t" "i" "u" "r" "f" "(" " " ")" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o"=
  "c" "(" " " ")" "\"" "e" "l" "p" "p" "a" "\"" " " "t" "i" "u" "r" "f" "(" =
 " " ")" "e" "u" "r" "t" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "e" "u" "r"=
  "t" " " "a" "e" "t" "(" " " ")" "1" " " "1" " " "s" "t" "u" "n" "o" "d" "-=
 " "f" "o" "-" "x" "o" "b" "(" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "=
 d" "(" "          " "\n" "))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "=
 c" "(" " " ")" "e" "u" "r" "t" " " "ee" "f" "f" "o" "c" "(" " " ")" "e" "u"=
  "r" "t" " " "a" "e" "t" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "=
 t" "b" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " ")" =
 "e" "u" "r" "t" " " "e" "e" "ff" "o" "c" "(" " " "t" "s" "i" "l" "(" " " "y=
 " "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "          " "\n" "))" "false=
 " " " "tea" "(" " " ")" "true" " " "coffee" "(" " " ")" "\"" "a" "n" "a" "n=
 " "a" "b" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "t" =
 "s" "e" "-t" "t" "b" "d" "(" "\n" "))" "y" "t" "p" "m" "e" " " "y" "l" "n" =
 "o" "-" "s" "k" "n" "i" "r" "d" "(" "          " "\n" "y" "t" "p" "m" "e" "=
  " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-2" "1" "x" "e" "'" "\n" "\n" "))=
 )" "0" " " "0" "3" " " "s" "t" "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b" =
 "(" " " "t" "u" "n" "-" "h" "t" "l" "a" "e" "h" "(" "          " "\n" ")" "=
 0" "2" " " "0" "1" " " "s" "t" "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b" =
 "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "\"" "e" "n" "i" "r" "e=
 " "g" "n" "a" "t" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "u" "n" "-" "h" =
 "t" "l" "a" "e" "h" "(" "          " "\n" ")" "\"" "e" "n" "i" "r" "e" "g" =
 "n" "a" "t" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "e" "-t" "t" "b" "=
 d" "(" "\n" ")))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " "t" "u" "-n" =
 "h" "t" "l" "a" "e" "h" "(" "          " "\n" ")" "e" "ls" "a" "f" " " "tea=
 " "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "u" "r" "t" " " "=
 e" "e" "f" "f" "o" "c" "(" " " "health-nut" "(" "          " "\n" ")" "e" "=
 s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " "t" "s" "e" "-t" "t" "b"=
  "d" "(" "\n" "-1" "1" "x" "e" "'" "\n" "\n" ")]))))]))" "v" " " "expected"=
  " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " "=
  "format" "(" " " "else" "[" "                                       " "\n"=
  "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "                   =
                     " "\n" ";[(and (string? expected) (string? v)) (list ex=
 pected v)]" "                                       " "\n" "cond" "(" "    =
                                  " "\n" "])" "actual" " " "v" "([" " " "let=
 " "(" "                                   " "\n" "])" "exn-message" " " "))=
 )" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(=
 " " " "with-handlers" "(" " " "syntax" "(" " " ")" "actual" " " "expected" =
 " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")"=
  "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("\n" "}}}))" "x" " " "x=
 " " " "+" "{" "                      " "\n" "}}" "2" " " "x" " " "/" "{" " =
 " "y" "{" " " "with" "{" "                    " "\n" "}}" "2" " " "16" " " =
 "/" "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}=
 }})" "x" " " "x" " " "+" "{" "                          " "\n" "}}" "2" " "=
  "x" " " "/" "{" " " "y" "{" " " "with" "{" "                        " "\n"=
  "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-pars=
 e" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "x" " " "0" "1" " " "-" "{" =
 "                    " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" =
 "{" " " "x" "{" " " "with" "{" "'" " " "parse" "(" "          " "\n" "}})" =
 "x" " " "0" "1" " " "-" "{" "                        " "\n" "}}}" "2" " " "=
 8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt=
 -parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "1" " " "x" " " "-" "{"=
  "                    " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " =
 "with" "{" "'" " " "parse" "(" "          " "\n" "}})" "1" " " "x" " " "-" =
 "{" "                        " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "=
 {" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" =
 "}}))" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" =
 "'" " " "parse" "(" "          " "\n" "}})" "5" " " "2" " " "+" "{" " " "}"=
  "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t=
 " "b" "d" "(" "\n" "}))" "2" " " "6" " " "/" "{" "'" " " "e" "s" "r" "a" "p=
 " "(" "          " "\n" "})" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(=
 " " " "-test" "t" "b" "d" "(" "\n" "5" "-" "2" "x" "e" "'" "\n" "\n" "\"" "=
 !" "!" "!" "e" "d" "o" "c" " " "k" "c" "e" "h" "c" "\"" "\n" "4" "-" "2" "x=
 " "e" "'" "\n" "\n" "}}}}})))" "d" " " "c" " " "b" " " "a" " " "+" "{" "   =
                                       " "\n" "}}" "3" " " "c" " " "+" "{" "=
  " "d" "{" " " "with" "{" "                                       " "\n" "}=
 }" "2" " " "b" " " "+" "{" " " "c" "{" " " "with" "{" "                    =
                  " "\n" "}}" "1" " " "a" " " "+" "{" " " "b" "{" " " "with"=
  "{" "                                   " "\n" "}" "0" " " "a" "{" " " "wi=
 th" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" =
 "'" " " "-test" "t" "b" "d" "(" "\n" "}}})))" "c" " " "a" " " "+" "{" "    =
                                  " "\n" "}" "9" " " "c" "{" " " "with" "{" =
 "                                   " "\n" "}}}" "b" " " "b" " " "+" "{" " =
 " "}}" "7" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" " " "a" "{" " " "=
 with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")"=
  "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "8" " " "b" " " "+" "=
 {" "                                   " "\n" "}" "a" " " "a" "{" " " "with=
 " "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" "b"=
  " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}})))" "b" " " "a" " "=
  "+" "{" "                                       " "\n" "}" "4" " " "b" "{"=
  " " "with" "{" "                                     " "\n" "}" "a" " " "a=
 " "{" " " "with" "{" "                                   " "\n" "}" "5" " "=
  "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "      =
     " "\n" "()" "'" " " "-test" "t" "b" "d" "(" "\n" "}}}}})))" "d" " " "c"=
  " " "+" "{" "                                          " "\n" "}" "b" " " =
 "a" " " "+" "{" " " "-" "{" "                                       " "\n" =
 "}" "9" " " "c" "{" " " "with" "{" "                                     " =
 "\n" "}" "8" " " "b" "{" " " "with" "{" "                                  =
  " "\n" "}" "8" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "fre=
 e-vars" "(" "          " "\n" ")" "d" "(" "'" " " "-test" "t" "b" "d" "(" "=
 \n" "}})))" "b" " " "a" " " "+" "{" "                                   " "=
 \n" "}" "4" " " "a" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-va=
 rs" "(" "          " "\n" ")" "b" "(" "'" " " "-test" "t" "b" "d" "(" "\n" =
 "}})))" "b" " " "2" " " "+" "{" " " "a" " " "-" "{" "'" " " "dbt-parse" "("=
  " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" =
 "t" "b" "d" "(" "\n" "})))" "b" " " "a" " " "+" "{" "'" " " "dbt-parse" "("=
  " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "-test" =
 "t" "b" "d" "(" "\n" ")))" "a" "'" " " "dbt-parse" "(" " " "free-vars" "(" =
 "          " "\n" ")" "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "'=
 5" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "=
 -test" "t" "b" "d" "(" "\n" "3" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" =
 " " "x" " " "+" "{" "                                     " "\n" "}}" "0" "=
  " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                            =
        " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" =
 " " "dbt-parse" "(" " " "calc-lazy" "(" "          " "\n" "6" "1" " " "-tes=
 t" "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "              =
                      " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" =
 "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" =
 "          " "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" =
 " " "-" "{" "                                   " "\n" "}}" "5" " " "10" " =
 " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-lazy" "c=
 alc" "(" "          " "\n" "1" " " "dbt-test" "(" "\n" "}})))" "5" " " "2" =
 " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse"=
  "(" " " "-lazy" "calc" "(" "          " "\n" "2" " " "-test" "t" "b" "d" "=
 (" "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" =
 "calc" "(" "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "2" "-" "=
 2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" "                =
                 " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" =
 "{" "                              " "\n" "}}" "2" " " "16" " " "/" "{" " "=
  "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          "=
  "\n" "16" " " "-test" "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-"=
  "{" "                              " "\n" "}}}" "2" " " "8" " " "/" "{" " =
 " "20" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "=
 calc" "(" "          " "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1=
 " " " "x" " " "-" "{" "                              " "\n" "}}" "5" " " "1=
 0" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc=
 " "(" "          " "\n" "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "5" " =
 " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-=
 parse" "(" " " "calc" "(" "          " "\n" "2" " " "-test" "t" "b" "d" "("=
  "\n" "})))" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "("=
  "          " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "1" "-" "2" "x" "e"=
  "'" "\n" "\n" ")))])]))" "p" "x" "se" " " "d" "r" "i" "h" "t" "(" " " "dbt=
 -parse" "(" "                 " "\n" ")))" "p" "ex" "s" " " "nd" "o" "c" "e=
 " "s" "(" " " "d" "n" "o" "c" "e" "s" "(" " " "dbt-parse" "(" "            =
      " "\n" "))" "p" "x" "e" "s" " " "d" "n" "co" "e" "s" "(" " " "t" "s" "=
 r" "i" "f" "(" " " "h" "t" "i" "w" "(" " " ")" "h" "t" "i" "w" "[(" "      =
  " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "                =
  " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "v" "i" "d" "(=
 " " " ")" "/" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-pa=
 rse" "(" "                 " "\n" "))" "sexp" " " "second" "(" " " "dbt-par=
 se" "(" " " "sub" "(" " " ")" "-" "[(" "       " "\n" ")))]" "sexp" " " "th=
 ird" "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp" " " "seco=
 nd" "(" " " "dbt-parse" "(" " " "add" "(" " " ")" "+" "[(" "       " "\n" "=
 )" "sexp" " " "first" "(" " " "case" "(" "     " "\n" ")" "sexp" " " "list?=
 " "[(" "    " "\n" ")]" "p" "x" "e" "s" " " "d" "i" "(" " " ")" "p" "x" "e"=
  "s" " " "?" "l" "o" "b" "m" "y" "s" "[(" "    " "\n" ")]" "sexp" " " "num"=
  "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")"=
  "sexp" " " "dbt-parse" "(" " " "define" "(" "\n" "E" "A" "W" " " ">" "-" "=
  " "n" "o" "i" "s" "s" "e" "r" "p" "x" "e" "-" "S" " " ":" " " "dbt-parse" =
 " " ";" ";" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "n=
 ode" "(" "                           " "\n" "))))" "leaf" "(" " " ")" "leaf=
 " "(" " " "9" " " "node" "(" "                                       " "\n"=
  "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "               =
                         " "\n" "7" " " "node" "(" "                        =
          " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "=
                                  " "\n" "5" " " "node" "(" "               =
             " "\n" "20" " " "node" "(" " " "10" " " "insert" "(" "         =
  " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "      =
           " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" =
 "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "                            =
 " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "         =
                    " "\n" "7" " " "node" "(" "                      " "\n" =
 "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                =
       " "\n" "5" " " "node" "(" "                " "\n" "20" " " "node" "("=
  " " "dbt-test" "(" "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "=
 node" "(" " " "8" " " "insert" "(" "          " "\n" ")))" "leaf" "(" " " "=
 )" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" =
 "(" " " "dbt-test" "(" "\n" ")))" "leaf" "(" " " "4" " " "insert" "(" " " "=
 ))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "("=
  "\n" "-7" "1" "ex" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " "=
  "9" "2" " " "node" "(" "                             " "\n" ")))))" "leaf"=
  "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" =
 " " "node" "(" "                                         " "\n" "))" "leaf"=
  "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                           =
               " "\n" "7" " " "node" "(" "                                  =
  " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "        =
                            " "\n" "5" " " "node" "(" "                     =
         " "\n" "20" " " "node" "(" " " "s" "all-number" "(" "          " "\=
 n" ")" "29" " " "10" " " "9" " " "6" " " "7" " " "2" " " "5" " " "20" " " "=
 list" "(" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " "=
  "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "s" "r" "=
 be" "m" "u" "n" "-" "l" "l" "a" "(" "          " "\n" ")" "8" " " "4" " " "=
 list" "(" " " "-test" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " "=
 )" "f" "a" "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "s" "r" "e" "b" =
 "m" "u" "n" "-" "l" "l" "a" "(" "          " "\n" ")" "7" " " "t" "s" "i" "=
 l" "(" " " "t" "s" "-te" "t" "b" "d" "(" "\n" "-6" "1" "x" "e" "'" "\n" "\n=
 " ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "(" "       =
                   " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "10" " "=
  "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "                    =
                  " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "6" " " "nod=
 e" "(" "                                     " "\n" "7" " " "node" "(" "   =
                             " "\n" "))" "leaf" "(" " " ")" "leaf" "(" " " "=
 2" " " "node" "(" "                               " "\n" "5" " " "node" "("=
  "                         " "\n" "20" " " "node" "(" " " "e" "g" "a" "r" "=
 e" "v" "a" "(" "          " "\n" "0" "1" " " "dbt-test" "(" "\n" ")))))" "l=
 eaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " " ")" "leaf" "(" " " "=
 4" " " "node" "(" " " "e" "g" "a" "aver" "(" "          " "\n" "6" " " "t" =
 "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a=
 " "e" "l" "(" " " "7" " " "e" "d" "o" "n" "(" " " "e" "g" "a" "r" "e" "av" =
 "(" "          " "\n" "7" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "-5" "1" "=
 x" "e" "'" "\n" "\n" ")))" "0" "1" " " "e" "r" "e" "h" "p" "s" "(" " " "e" =
 "m" "u" "l" "o" "v" "(" "          " "\n" ")" "pi" " " "0/3" "0" "0" "4" " =
 " "*" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "5" " " "3" " " "=
 2" " " "m" "s" "i" "r" "p" "(" " " "e" "m" "u" "l" "o" "v" "(" "          "=
  "\n" "0" "3" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "4" " " "e" "=
 b" "u" "c" "(" " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "4" "6" " =
 " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-4" "1" "x" "e" "'" "\n" "\n" ")))=
 )" "e" "u" "r" "t" " " "a" "e" "t" "(" " " ")" "\"" "e" "l" "p" "p" "a" "e"=
  "n" "i" "p" "\"" " " "t" "i" "u" "r" "f" "(" " " ")" "\"" "na" "a" "n" "a"=
  "b" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "=
 d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\=
 "" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "a" =
 "e" "t" " " "r" "a" "ul" "g" "e" "r" " " " a" "d" "n" "a" " " "e" "l" "p" "=
 p" "a" "e" "n" "i" "p" " " "a" " " "d" "n" "a" " " "a" "n" "a" "an" "b" " "=
  "a" "\"" " " "t" "s" "e" "-t" "bt" "d" "(" "\n" "))))" "e" "s" "l" "a" "f"=
  " " "e" "e" "f" "f" "o" "c" "(" " " ")" "5" " " "3" " " "ts" "u" "n" "o" "=
 d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" =
 "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" =
 "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "e"=
  "f" "f" "o" "c" " " "f" "a" "c" "e" "d" " " "a" " " "d" "n" " a" "s" "t" "=
 u" "n" "o" "d" " " "d" "e" "z" "a" "l" "g" " " "5" " " "d" "n" "a" " " "s" =
 "t" "u" "n" "o" "d" " " "n" "i" "a" "l" "p" " " "3" "\"" " " "t" "s" "e" "t=
 -t" "b" "d" "(" "\n" "))))" "\"" "e" "n" "i" "ar" "t" "c" "e" "n" "\"" " " =
 "t" "i" "u" "r" "f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-"=
  "t" "s" "a" "f" "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l"=
  "e" " " "g" "n" "i" "h" "t" "o" "n" " " "d" "n" "a" " " "e" "n" "i" "r" "a=
 " "t" "c" "e" "n" " " "a" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "-3" =
 "1" "x" "e" "'" "\n" "\n" "))))" "\"" "e" "g" "n" "a" "r" "o" "\"" " " "t" =
 "i" "u" "r" "f" "(" "                             " "\n" ")" "false" " " "c=
 offee" "(" "                             " "\n" ")" "\"apple\"" " " "fruit"=
  "(" "                             " "\n" ")" "true" " " "coffee" "(" "    =
                          " "\n" ")" "true" " " "tea" "(" "                 =
             " "\n" ")" "1" " " "1" " " "s" "t" "u" "n" "o" "d" "-" "f" "o" =
 "-" "x" "o" "b" "(" " " "t" "s" "i" "l" "(" " " "y" "l" "n" "o" "-" "s" "k"=
  "n" "i" "r" "d" "(" "          " "\n" "))" "e" "s" "l" "a" "f" " " "e" "e"=
  "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "ee" "f" "f" "o" "c" "(" "=
  " ")" "e" "u" "r" "t" " " "a" "e" "t" "(" " " "t" "s" "i" "l" "(" " " "t" =
 "s" "e" "-t" "t" "b" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "a" "e" "t=
 " "(" " " ")" "e" "u" "r" "t" " " "e" "e" "ff" "co" "(" " " "t" "s" "i" "l"=
  "(" " " ")" "\"banana\"" " " "fruit" "(" " " "nks-only" "i" "r" "d" "(" " =
          " "\n" "))" "false" " " "tea" "(" " " ")" "true" " " "coffee" "(" =
 " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "))" "y" =
 "t" "p" "m" "e" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "      =
     " "\n" "y" "t" "p" "m" "e" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-=
 2" "1" "x" "e" "'" "\n" "\n" ")))" "0" "2" " " "0" "1" " " "-donuts" "f" "o=
 " "-" "x" "bo" "(" " " "lth-nut" "a" "e" "h" "(" "          " "\n" ")" "0" =
 " " "0" "3" " " "s" "t" "u" "n" "o" "d" "-" "f" "-o" "x" "o" "b" "(" " " "t=
 " "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "\"" "e" "n" "i" "r" "e" "g" "n" =
 "a" "t" "\"" " " "t" "i" "u" "r" "f" "(" " " "t" "u" "n" "-" "h" "lt" "a" "=
 e" "h" "(" "          " "\n" ")" "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "=
 \"" " " "it" "u" "r" "f" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))=
 " "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " "t" "u" "-n" "h" "lt" "a" "e"=
  "h" "(" "          " "\n" ")" "e" "ls" "a" "f" " " "tea" "(" " " "t" "s" "=
 e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "u" "r" "t" " " "e" "e" "f" "f" "o" =
 "c" "(" " " "health-nut" "(" "          " "\n" ")" "e" "s" "l" "a" "f" " " =
 "e" "fe" "f" "o" "c" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" "-1" "1"=
  "x" "e" "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " =
 "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " "els=
 e" "[" "                                       " "\n" "]" "#t" " " ")" "exp=
 ected" " " "v" " " "equal?" "[(" "                                       " =
 "\n" ";[(and (string? expected) (string? v)) (list expected v)]" "         =
                               " "\n" "cond" "(" "                          =
            " "\n" "])" "actual" " " "v" "([" " " "let" "(" "               =
                     " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?=
 " "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" =
 "(" " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" "    " "\=
 n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" =
 "(" " " "define-syntax" "(") ("\n" "}}}))" "x" " " "x" " " "+" "{" "       =
                " "\n" "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "=
 {" "                    " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " =
 " "with" "{" "'" " " "parse" "(" "          " "\n" "}}})" "x" " " "x" " " "=
 +" "{" "                          " "\n" "}}" "2" " " "x" " " "/" "{" " " "=
 y" "{" " " "with" "{" "                        " "\n" "}}" "2" " " "16" " "=
  "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test" "t"=
  "b" "d" "(" "\n" "}}))" "x" " " "0" "1" " " "-" "{" "                    "=
  "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "w=
 ith" "{" "'" " " "parse" "(" "          " "\n" "}})" "x" " " "0" "1" " " "-=
 " "{" "                        " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20=
 " " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "-test=
 " "t" "b" "d" "(" "\n" "}}))" "1" " " "x" " " "-" "{" "                    =
 " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "pa=
 rse" "(" "          " "\n" "}})" "1" " " "x" " " "-" "{" "                 =
        " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" " " "with" "{" "'" =
 " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "}}))" "5" " " "2" " "=
  "+" "{" " " "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "parse" "(" " =
          " "\n" "}})" "5" " " "2" " " "+" "{" " " "}" "8" " " "6" " " "+" "=
 {" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" "d" "(" "\n" "})=
 )" "2" " " "6" " " "/" "{" "'" " " "e" "s" "r" "a" "p" "(" "          " "\n=
 " "})" "2" " " "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-test" "t" "b" =
 "d" "(" "\n" "5" "-" "2" "x" "e" "'" "\n" "\n" "\"" "!" "!" "!" "e" "d" "o"=
  "c" " " "k" "c" "e" "h" "c" "\"" "\n" "4" "-" "2" "x" "e" "'" "\n" "\n" "}=
 }}}})))" "d" " " "c" " " "b" " " "a" " " "+" "{" "                         =
                 " "\n" "}}" "3" " " "c" " " "+" "{" " " "d" "{" " " "with" =
 "{" "                                       " "\n" "}}" "2" " " "b" " " "+"=
  "{" " " "c" "{" " " "with" "{" "                                     " "\n=
 " "}}" "1" " " "a" " " "+" "{" " " "b" "{" " " "with" "{" "                =
                    " "\n" "}" "0" " " "a" "{" " " "with" "{" "'" " " "dbt-p=
 arse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b=
 " "d" "(" "\n" "}}})))" "c" " " "a" " " "+" "{" "                          =
            " "\n" "}" "9" " " "c" "{" " " "with" "{" "                     =
               " "\n" "}}}" "b" " " "b" " " "+" "{" " " "}}" "7" " " "a" " "=
  "+" "{" " " "b" "{" " " "with" "{" " " "a" "{" " " "with" "{" "'" " " "dbt=
 -parse" "(" " " "free-vars" "(" "          " "\n" ")" "a" "(" "'" " " "-tes=
 t" "t" "b" "d" "(" "\n" "}})))" "8" " " "b" " " "+" "{" "                  =
                  " "\n" "}" "a" " " "a" "{" " " "with" "{" "'" " " "dbt-par=
 se" "(" " " "free-vars" "(" "          " "\n" ")" "b" " " "a" "(" "'" " " "=
 -test" "t" "b" "d" "(" "\n" "}}}})))" "b" " " "a" " " "+" "{" "            =
                            " "\n" "}" "4" " " "b" "{" " " "with" "{" "     =
                                 " "\n" "}" "a" " " "a" "{" " " "with" "{" "=
                                    " "\n" "}" "5" " " "a" "{" " " "with" "{=
 " "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" "()" "'" " =
 " "-test" "t" "b" "d" "(" "\n" "}}}}})))" "d" " " "c" " " "+" "{" "        =
                                   " "\n" "}" "b" " " "a" " " "+" "{" " " "-=
 " "{" "                                       " "\n" "}" "9" " " "c" "{" " =
 " "with" "{" "                                     " "\n" "}" "8" " " "b" "=
 {" " " "with" "{" "                                   " "\n" "}" "8" " " "a=
 " "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "         =
  " "\n" ")" "d" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "a=
 " " " "+" "{" "                                   " "\n" "}" "4" " " "a" "{=
 " " " "with" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "=
 \n" ")" "b" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "}})))" "b" " " "2" " =
 " "+" "{" " " "a" " " "-" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "=
           " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "=
 })))" "b" " " "a" " " "+" "{" "'" " " "dbt-parse" "(" " " "free-vars" "(" "=
           " "\n" ")" "b" " " "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" "=
 )))" "a" "'" " " "dbt-parse" "(" " " "free-vars" "(" "          " "\n" ")" =
 "a" "(" "'" " " "-test" "t" "b" "d" "(" "\n" ")))" "'5" " " "dbt-parse" "("=
  " " "free-vars" "(" "          " "\n" "()" "'" " " "-test" "t" "b" "d" "("=
  "\n" "3" "-" "2" "x" "e" "'" "\n" "\n" "}}})))" "x" " " "x" " " "+" "{" " =
                                     " "\n" "}}" "0" " " "x" " " "/" "{" " "=
  "y" "{" " " "with" "{" "                                   " "\n" "}}" "2"=
  " " "16" " " "/" "{" " " "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " =
 " "calc-lazy" "(" "          " "\n" "6" "1" " " "-test" "t" "b" "d" "(" "\n=
 " "}})))" "x" " " "0" "1" " " "-" "{" "                                   "=
  "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " " "x" "{" " " "w=
 ith" "{" "'" " " "dbt-parse" "(" " " "calc-lazy" "(" "          " "\n" "5" =
 " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" "         =
                           " "\n" "}}" "5" " " "10" " " "/" "{" " " "x" "{" =
 " " "with" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          " =
 "\n" "1" " " "dbt-test" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " "}" "8=
 " " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc=
 " "(" "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " "=
  "6" " " "/" "{" "'" " " "dbt-parse" "(" " " "-lazy" "calc" "(" "          =
 " "\n" "3" " " "-test" "t" "b" "d" "(" "\n" "2" "-" "2" "x" "e" "'" "\n" "\=
 n" "}}})))" "x" " " "x" " " "+" "{" "                                " "\n"=
  "}}" "2" " " "x" " " "/" "{" " " "y" "{" " " "with" "{" "                 =
              " "\n" "}}" "2" " " "16" " " "/" "{" " " "x" "{" " " "with" "{=
 " "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "16" " " "-test"=
  "t" "b" "d" "(" "\n" "}})))" "x" " " "0" "1" " " "-" "{" "                =
               " "\n" "}}}" "2" " " "8" " " "/" "{" " " "20" " " "/" "{" " "=
  "x" "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          "=
  "\n" "5" " " "-test" "t" "b" "d" "(" "\n" "}})))" "1" " " "x" " " "-" "{" =
 "                              " "\n" "}}" "5" " " "10" " " "/" "{" " " "x"=
  "{" " " "with" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n=
 " "1" " " "-test" "t" "b" "d" "(" "\n" "}})))" "5" " " "2" " " "+" "{" " " =
 "}" "8" " " "6" " " "+" "{" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" =
 "(" "          " "\n" "2" " " "-test" "t" "b" "d" "(" "\n" "})))" "2" " " "=
 6" " " "/" "{" "'" " " "dbt-parse" "(" " " "calc" "(" "          " "\n" "3"=
  " " "-test" "t" "b" "d" "(" "\n" "1" "-" "2" "x" "e" "'" "\n" "\n" ")))])]=
 ))" "p" "x" "se" " " "d" "r" "i" "h" "t" "(" " " "dbt-parse" "(" "         =
         " "\n" ")))" "p" "ex" "s" " " "nd" "o" "c" "e" "s" "(" " " "d" "n" =
 "o" "c" "e" "s" "(" " " "dbt-parse" "(" "                 " "\n" "))" "p" "=
 x" "e" "s" " " "d" "n" "co" "e" "s" "(" " " "t" "s" "r" "i" "f" "(" " " "h"=
  "t" "i" "w" "(" " " ")" "h" "t" "i" "w" "[(" "       " "\n" ")))]" "sexp" =
 " " "third" "(" " " "dbt-parse" "(" "                 " "\n" "))" "sexp" " =
 " "second" "(" " " "dbt-parse" "(" " " "v" "i" "d" "(" " " ")" "/" "[(" "  =
      " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-parse" "(" "            =
      " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse" "(" " " "sub" "(" =
 " " ")" "-" "[(" "       " "\n" ")))]" "sexp" " " "third" "(" " " "dbt-pars=
 e" "(" "                 " "\n" "))" "sexp" " " "second" "(" " " "dbt-parse=
 " "(" " " "add" "(" " " ")" "+" "[(" "       " "\n" ")" "sexp" " " "first" =
 "(" " " "case" "(" "     " "\n" ")" "sexp" " " "list?" "[(" "    " "\n" ")]=
 " "p" "x" "e" "s" " " "d" "i" "(" " " ")" "p" "x" "e" "s" " " "?" "l" "o" "=
 b" "m" "y" "s" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " =
 " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "dbt-parse=
 " "(" " " "define" "(" "\n" "E" "A" "W" " " ">" "-" " " "n" "o" "i" "s" "s"=
  "e" "r" "p" "x" "e" "-" "S" " " ":" " " "dbt-parse" " " ";" ";" "\n" "\n" =
 ")))))" "leaf" "(" " " ")" "leaf" "(" " " "30" " " "node" "(" "            =
                " "\n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "9" " " "nod=
 e" "(" "                                       " "\n" "))" "leaf" "(" " " "=
 )" "leaf" "(" " " "6" " " "node" "(" "                                     =
   " "\n" "7" " " "node" "(" "                                 " "\n" "))" "=
 leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "                      =
            " "\n" "5" " " "node" "(" "                           " "\n" "20=
 " " " "node" "(" " " "10" " " "insert" "(" "          " "\n" ")))" "leaf" "=
 (" " " ")" "leaf" "(" " " "30" " " "node" "(" "                " "\n" "))))=
 )" "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "("=
  " " "9" " " "node" "(" "                            " "\n" "))" "leaf" "("=
  " " ")" "leaf" "(" " " "6" " " "node" "(" "                            " "=
 \n" "7" " " "node" "(" "                      " "\n" "))" "leaf" "(" " " ")=
 " "leaf" "(" " " "2" " " "node" "(" "                      " "\n" "5" " " "=
 node" "(" "                " "\n" "20" " " "node" "(" " " "dbt-test" "(" "\=
 n" "))))" "leaf" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "8" " " =
 "insert" "(" "          " "\n" ")))" "leaf" "(" " " ")" "leaf" "(" " " "8" =
 " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "("=
  "\n" ")))" "leaf" "(" " " "4" " " "insert" "(" " " "))" "leaf" "(" " " ")"=
  "leaf" "(" " " "4" " " "node" "(" " " "dbt-test" "(" "\n" "-7" "1" "ex" "'=
 " "\n" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "9" "2" " " "node" "(=
 " "                             " "\n" ")))))" "leaf" "(" " " ")" "leaf" "(=
 " " " "10" " " "node" "(" " " ")" "leaf" "(" " " "9" " " "node" "(" "      =
                                    " "\n" "))" "leaf" "(" " " ")" "leaf" "(=
 " " " "6" " " "node" "(" "                                         " "\n" "=
 7" " " "node" "(" "                                   " "\n" "))" "leaf" "(=
 " " " ")" "leaf" "(" " " "2" " " "node" "(" "                              =
      " "\n" "5" " " "node" "(" "                             " "\n" "20" " =
 " "node" "(" " " "s" "all-number" "(" "          " "\n" ")" "29" " " "10" "=
  " "9" " " "6" " " "7" " " "2" " " "5" " " "20" " " "list" "(" " " "dbt-tes=
 t" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " " "8" " " "node" "(" " =
 " ")" "leaf" "(" " " "4" " " "node" "(" " " "s" "r" "be" "m" "u" "n" "-" "l=
 " "al" "(" "          " "\n" ")" "8" " " "4" " " "list" "(" " " "-test" "t"=
  "b" "d" "(" "\n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " =
 " "7" " " "e" "d" "o" "n" "(" " " "s" "r" "e" "b" "m" "u" "n" "-" "l" "al" =
 "(" "          " "\n" ")" "7" " " "t" "s" "li" "(" " " "t" "s" "-te" "t" "b=
 " "d" "(" "\n" "-6" "1" "x" "e" "'" "\n" "\n" ")))))" "leaf" "(" " " ")" "l=
 eaf" "(" " " "9" "2" " " "node" "(" "                         " "\n" ")))))=
 " "leaf" "(" " " ")" "leaf" "(" " " "10" " " "node" "(" " " ")" "leaf" "(" =
 " " "9" " " "node" "(" "                                     " "\n" "))" "l=
 eaf" "(" " " ")" "leaf" "(" " " "6" " " "node" "(" "                       =
               " "\n" "7" " " "node" "(" "                               " "=
 \n" "))" "leaf" "(" " " ")" "leaf" "(" " " "2" " " "node" "(" "            =
                    " "\n" "5" " " "node" "(" "                         " "\=
 n" "20" " " "node" "(" " " "e" "g" "a" "r" "e" "v" "a" "(" "          " "\n=
 " "1" "1" " " "dbt-test" "(" "\n" ")))))" "leaf" "(" " " ")" "leaf" "(" " "=
  "8" " " "node" "(" " " ")" "leaf" "(" " " "4" " " "node" "(" " " "e" "g" "=
 a" "aver" "(" "          " "\n" "6" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\=
 n" "))))" "f" "a" "e" "l" "(" " " ")" "f" "a" "e" "l" "(" " " "7" " " "e" "=
 d" "o" "n" "(" " " "e" "g" "a" "r" "e" "av" "(" "          " "\n" "7" " " "=
 t" "s" "e" "-t" "bt" "d" "(" "\n" "-5" "1" "x" "e" "'" "\n" "\n" ")))" "0" =
 "1" " " "e" "r" "e" "h" "p" "s" "(" " " "e" "m" "u" "l" "o" "v" "(" "      =
     " "\n" ")" "pi" " " "0/3" "0" "0" "4" " " "*" "(" " " "t" "s" "e" "-t" =
 "t" "b" "d" "(" "\n" ")))" "5" " " "3" " " "2" " " "m" "s" "i" "r" "p" "(" =
 " " "e" "m" "u" "l" "o" "v" "(" "          " "\n" "0" "3" " " "t" "s" "e" "=
 -t" "t" "b" "d" "(" "\n" ")))" "4" " " "e" "b" "u" "c" "(" " " "e" "m" "u" =
 "l" "o" "v" "(" "          " "\n" "4" "6" " " "t" "s" "e" "-t" "t" "b" "d" =
 "(" "\n" "-4" "1" "x" "e" "'" "\n" "\n" "))))" "e" "u" "r" "t" " " "a" "e" =
 "t" "(" " " ")" "\"" "e" "l" "p" "p" "a" "e" "n" "i" "p" "\"" " " "t" "i" "=
 u" "r" "f" "(" " " ")" "\"" "na" "a" "n" "a" "b" "\"" " " "t" "i" "u" "r" "=
 f" "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" =
 "k" "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" =
 "i" "h" "t" "o" "n" " " "d" "n" "a" " " "a" "e" "t" " " "r" "a" "ul" "g" "e=
 " "r" " " " a" "d" "n" "a" " " "e" "l" "p" "p" "a" "e" "n" "i" "p" " " "a" =
 " " "d" "n" "a" " " "a" "n" "a" "an" "b" " " "a" "\"" " " "t" "s" "e" "-t" =
 "bt" "d" "(" "\n" "))))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(=
 " " " ")" "5" " " "3" " " "ts" "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b" =
 "(" " " "t" "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k"=
  "a" "e" "r" "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i"=
  "h" "t" "o" "n" " " "d" "n" "a" " " "e" "e" "f" "f" "o" "c" " " "f" "a" "c=
 " "e" "d" " " "a" " " "d" "n" " a" "s" "t" "u" "n" "o" "d" " " "d" "e" "z" =
 "a" "l" "g" " " "5" " " "d" "n" "a" " " "s" "t" "u" "n" "o" "d" " " "n" "i"=
  "a" "l" "p" " " "3" "\"" " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "))))" "\"=
 " "e" "n" "i" "ar" "t" "c" "e" "n" "\"" " " "t" "i" "u" "r" "f" "(" " " "t"=
  "s" "i" "l" "(" " " "r" "e" "d" "r" "o" "-" "t" "s" "a" "f" "k" "a" "e" "r=
 " "b" "(" "          " "\n" "\"" "e" "s" "l" "e" " " "g" "n" "i" "h" "t" "o=
 " "n" " " "d" "n" "a" " " "e" "n" "i" "r" "a" "t" "c" "e" "n" " " "a" "\"" =
 " " "t" "s" "e" "t-t" "b" "d" "(" "\n" "-3" "1" "x" "e" "'" "\n" "\n" "))))=
 " "\"" "e" "g" "n" "a" "r" "o" "\"" " " "t" "i" "u" "r" "f" "(" "          =
                    " "\n" ")" "false" " " "coffee" "(" "                   =
           " "\n" ")" "\"apple\"" " " "fruit" "(" "                         =
     " "\n" ")" "true" " " "coffee" "(" "                             " "\n"=
  ")" "true" " " "tea" "(" "                             " "\n" ")" "1" " " =
 "1" " " "s" "t" "u" "n" "o" "d" "-" "f" "o" "-" "x" "o" "b" "(" " " "t" "s"=
  "i" "l" "(" " " "y" "l" "n" "o" "-" "s" "k" "n" "i" "r" "d" "(" "         =
  " "\n" "))" "e" "s" "l" "a" "f" " " "e" "e" "f" "f" "o" "c" "(" " " ")" "e=
 " "u" "r" "t" " " "ee" "f" "f" "o" "c" "(" " " ")" "e" "u" "r" "t" " " "a" =
 "e" "t" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\=
 n" "))))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(" " " ")" "e" "u" "r" "t" "=
  " "e" "e" "ff" "co" "(" " " ")" "\"banana\"" " " "fruit" "(" " " "t" "s" "=
 i" "l" "(" " " "drinks-only" "(" "          " "\n" "))" "false" " " "tea" "=
 (" " " ")" "true" " " "coffee" "(" " " "t" "s" "i" "l" "(" " " "t" "s" "e" =
 "-t" "t" "b" "d" "(" "\n" "))" "y" "t" "p" "m" "e" " " "y" "l" "n" "o" "-" =
 "s" "k" "n" "i" "r" "d" "(" "          " "\n" "y" "t" "p" "m" "e" " " "t" "=
 s" "e" "-t" "t" "b" "d" "(" "\n" "-2" "1" "x" "e" "'" "\n" "\n" ")))" "0" "=
 2" " " "0" "1" " " "-donuts" "f" "o" "-" "x" "bo" "(" " " "lth-nut" "a" "e"=
  "h" "(" "          " "\n" ")" "0" " " "0" "3" " " "s" "t" "u" "n" "o" "d" =
 "-" "f" "-o" "x" "o" "b" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))=
 " "\"" "e" "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "t" "i" "u" "r" "f" "("=
  " " "t" "u" "n" "-" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" "\"" "e=
 " "n" "i" "r" "e" "g" "n" "a" "t" "\"" " " "it" "u" "r" "f" "(" " " "t" "s"=
  "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "s" "l" "a" "f" " " "a" "e" "t" "(=
 " " " "t" "u" "-n" "h" "lt" "a" "e" "h" "(" "          " "\n" ")" "e" "ls" =
 "a" "f" " " "tea" "(" " " "t" "s" "e" "-t" "t" "b" "d" "(" "\n" ")))" "e" "=
 u" "r" "t" " " "e" "e" "f" "f" "o" "c" "(" " " "health-nut" "(" "          =
 " "\n" ")" "e" "s" "l" "a" "f" " " "e" "fe" "f" "o" "c" "(" " " "t" "s" "e"=
  "-t" "t" "b" "d" "(" "\n" "-1" "1" "x" "e" "'" "\n" "\n" ")]))))]))" "v" "=
  " "expected" " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, =
 got ~a\"" " " "format" "(" " " "else" "[" "                                =
        " "\n" "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "      =
                                  " "\n" ";[(and (string? expected) (string?=
  v)) (list expected v)]" "                                       " "\n" "co=
 nd" "(" "                                     " "\n" "])" "actual" " " "v" =
 "([" " " "let" "(" "                                   " "\n" "])" "exn-mes=
 sage" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " =
 "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "actual" " =
 " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" "(" =
 "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("\n" "))))=
 " "j" " " "i" " " "h" " " "g" "(" " " "()" " " ")" "f" " " "e" "(" " " ")" =
 "d" " " "c" " " "b" "((" "'" " " "a" "'" " " "dbt-search-lolos" "(" " " "#f=
 " " " "dbt-test2" "(" "\n" "))))" "c" " " "b" " " "a" " " "b" " " "c" "((" =
 "'" " " "a" "'" " " "dbt-search-lolos" "(" " " "#t" " " "dbt-test2" "(" "\n=
 " "))" "empty" " " "a" "'" " " "dbt-search-lolos" "(" " " "#f" " " "dbt-tes=
 t2" "(" "\n" "ex-ii-10" "'" "\n" "\n" ")))" "-1" " " "-2" " " "3" " " "-4" =
 " " "-5" " " "6" " " "-7" " " "-8" " " "9" "(" "'" " " "diff" "(" " " "-3" =
 " " "dbt-test2" "(" "\n" ")))" "0" " " "-4" " " "3" " " "0" " " "-2" " " "1=
 " " " "0" "(" "'" " " "diff" "(" " " "0" " " "dbt-test2" "(" "\n" "))" "emp=
 ty" " " "diff" "(" " " "0" " " "dbt-test2" "(" "\n" "ex-ii-9" "'" "\n" "\n"=
  ")))" "#f" " " "#f" " " "#f" " " "#f" "(" "'" " " "dbt-any-true?" "(" " " =
 "#f" " " "dbt-test2" "(" "\n" ")))" "#f" " " "#t" " " "#f" " " "#f" "(" "'"=
  " " "dbt-any-true?" "(" " " "#t" " " "dbt-test2" "(" "\n" "))" "empty" " "=
  "dbt-any-true?" "(" " " "#f" " " "dbt-test2" "(" "\n" "ex-ii-8" "'" "\n" "=
 \n" "()))" "        " "\n" ")" "1" "(" "        " "\n" ")" "1" " " "2" "(" =
 "        " "\n" ")" "1" " " "2" " " "3" "(" "        " "\n" ")" "1" " " "2"=
  " " "3" " " "4" "(" "        " "\n" ")" "1" " " "2" " " "3" " " "4" " " "5=
 " "((" "'" "      " "\n" "))" "1" " " "2" " " "3" " " "4" " " "5" "(" "'" "=
  " "suffixes" "(" " " "dbt-test" "(" "\n" "()))" " " ")" "20" "(" " " ")" "=
 20" " " "10" "((" "'" "      " "\n" "))" "20" " " "10" "(" "'" " " "suffixe=
 s" "(" " " "dbt-test" "(" "\n" "(()))" "'" "      " "\n" ")" "empty" " " "s=
 uffixes" "(" " " "dbt-test" "(" "\n" "ex-ii-7" "'" "\n" "\n" "))" "25" " " =
 "-9" " " "-8" " " "-7" " " "-6" " " "-5" " " "4" " " "3" " " "2" " " "1" " =
 " "0" "(" "'" " " "))" "-9" " " "-8" " " "-7" " " "-6" " " "-5" " " "4" " "=
  "3" " " "2" " " "1" " " "0" "(" "'" " " "cancel-sum" "(" " " "dbt-test" "(=
 " "\n" "))" "-7" " " "5" " " "-8" " " "6" " " "4" "(" "'" " " "))" "5" " " =
 "-8" " " "6" " " "4" "(" "'" " " "cancel-sum" "(" " " "dbt-test" "(" "\n" "=
 ))" "0" "(" "'" " " ")" "empty" " " "cancel-sum" "(" " " "dbt-test" "(" "\n=
 " "; \"cancel-sum -3\"" "\n" "ex-ii-6" "'" "\n" "\n" "))" "34" " " "11" " "=
  "23" " " "15" " " "12" "(" "'" " " "))" "34" " " "11" " " "23" " " "15" " =
 " "12" "(" "'" " " "40" " " "dbt-eliminate-exp" "(" " " "dbt-test" "(" "\n"=
  ")" ")" "11" " " "15" " " "12" "(" "'" " " "))" "34" " " "11" " " "23" " "=
  "15" " " "12" "(" "'" " " "20" " " "dbt-eliminate-exp" "(" " " "dbt-test" =
 "(" "\n" ")" "empty" " " "))" "34" " " "11" " " "23" " " "15" " " "12" "(" =
 "'" " " "10" " " "dbt-eliminate-exp" "(" " " "dbt-test" "(" "\n" "ex-ii-5" =
 "'" "\n" "\n" "))" "100" " " "30" " " "20" " " "0" " " "-40" "(" "'" " " ")=
 )" "212" " " "86" " " "68" " " "32" " " "-40" "(" "'" " " "dbt-convertFC" "=
 (" " " "dbt-test" "(" "\n" "))" "0" "(" "'" " " "))" "32" "(" "'" " " "dbt-=
 convertFC" "(" " " "dbt-test" "(" "\n" ")" "empty" " " ")" "empty" " " "dbt=
 -convertFC" "(" " " "dbt-test" "(" "\n" "ex-ii-4" "'" "\n" "\n" ")" "39258"=
  " " "))" "3" " " "9" " " "2" " " "5" " " "8" "(" "'" " " "convert" "(" " "=
  "dbt-test" "(" "\n" ")" "10000" " " "))" "1" " " "0" " " "0" " " "0" " " "=
 0" "(" "'" " " "convert" "(" " " "dbt-test" "(" "\n" ")" "0" " " ")" "empty=
 " " " "convert" "(" " " "dbt-test" "(" "\n" "; \"convert -3\"" "\n" "ex-ii-=
 3" "'" "\n" "\n" ")" "#f" " " ")" "100" " " "30" " " ")" "98" " " "32" " " =
 "56" " " "29" " " "39" " " "55" "(" "'" " " "dbt-check-range" "(" " " "dbt-=
 test" "(" "\n" ")" "#f" " " ")" "90" " " "20" " " ")" "98" " " "32" " " "56=
 " " " "29" " " "39" " " "55" "(" "'" " " "dbt-check-range" "(" " " "dbt-tes=
 t" "(" "\n" ")" "#t" " " ")" "100" " " "20" " " ")" "98" " " "32" " " "56" =
 " " "29" " " "39" " " "55" "(" "'" " " "dbt-check-range" "(" " " "dbt-test"=
  "(" "\n" "; \"check-range -3\"" "\n" ")" "#f" " " "))" "105" " " "91" " " =
 "22" " " "44" " " "83" "(" "'" " " "dbt-check-range1" "(" " " "dbt-test" "(=
 " "\n" ")" "#f" " " "))" "91" " " "22" " " "4" " " "83" "(" "'" " " "dbt-ch=
 eck-range1" "(" " " "dbt-test" "(" "\n" ")" "#t" " " "))" "43" " " "7" " " =
 "78" " " "66" "(" "'" " " "dbt-check-range1" "(" " " "dbt-test" "(" "\n" "e=
 x-ii-2" "'" "\n" "\n" ")" "#t" " " ")" "100" " " ")" "19" " " "59" " " "5" =
 " " "34" " " "82" "(" "'" " " "dbt-prices-below-threshold?" "(" " " "dbt-te=
 st" "(" "\n" ")" "#f" " " ")" "100" " " ")" "19" " " "59" " " "205" " " "34=
 " " " "82" "(" "'" " " "dbt-prices-below-threshold?" "(" " " "dbt-test" "("=
  "\n" ")" "#t" " " ")" "100" " " "empty" " " "dbt-prices-below-threshold?" =
 "(" " " "dbt-test" "(" "\n" ")" "#f" " " "))" ".88" " " "1.87" " " ".56" " =
 " ".94" "(" "'" " " "dbt-dollar-store?" "(" " " "dbt-test" "(" "\n" ")" "#t=
 " " " "))" ".88" " " ".63" " " ".56" " " ".94" "(" "'" " " "dbt-dollar-stor=
 e?" "(" " " "dbt-test" "(" "\n" ")" "#t" " " ")" "empty" " " "dbt-dollar-st=
 ore?" "(" " " "dbt-test" "(" "\n" "ex-ii-1" "'" "\n" "\n" ")" "0" " " ")" "=
 5" " " "10" " " "backward" "'" " " "move" "(" " " "dbt-test" "(" "\n" ")" "=
 99" " " ")" "95" " " "10" " " "forward" "'" " " "move" "(" " " "dbt-test" "=
 (" "\n" ")" "41" " " ")" "50" " " "9" " " "backward" "'" " " "move" "(" " "=
  "dbt-test" "(" "\n" ")" "59" " " ")" "50" " " "9" " " "forward" "'" " " "m=
 ove" "(" " " "dbt-test" "(" "\n" "ex-i-12" "'" "\n" "\n" ")" "none" "'" " "=
  ")" "3" " " "2" " " "1" " " "what-kind" "(" " " "dbt-test" "(" "\n" ")" "t=
 wo" "'" " " ")" "2" " " "5" " " "1" " " "what-kind" "(" " " "dbt-test" "(" =
 "\n" ")" "one" "'" " " ")" "2" " " "4" " " "2" " " "what-kind" "(" " " "dbt=
 -test" "(" "\n" ")" "degenerate" "'" " " ")" "2" " " "1" " " "0" " " "what-=
 kind" "(" " " "dbt-test" "(" "\n" "; \"what-kind -4\"" "\n" "ex-i-11" "'" "=
 \n" "\n" ")" "2" " " ")" "12" " " "8" " " "new-price" "(" " " "dbt-test" "(=
 " "\n" ")" "100" " " ")" "4" " " "200" " " "new-price" "(" " " "dbt-test" "=
 (" "\n" ")" "75" " " ")" "3" " " "100" " " "new-price" "(" " " "dbt-test" "=
 (" "\n" ")" "80" " " ")" "1" " " "80" " " "new-price" "(" " " "dbt-test" "(=
 " "\n" "ex-i-10" "'" "\n" "\n" ")" "500" " " ")" "10000" " " "dbt-interest"=
  "(" " " "dbt-test" "(" "\n" ")" "90" " " ")" "2000" " " "dbt-interest" "("=
  " " "dbt-test" "(" "\n" ")" "4" " " ")" "100" " " "dbt-interest" "(" " " "=
 dbt-test" "(" "\n" "ex-i-9" "'" "\n" "\n" ")" "-1" " " ")" "-4" " " "20" " =
 " "5" " " "10" " " "dbt-collision-speed" "(" " " "dbt-test" "(" "\n" ")" "5=
 " " " ")" "0" " " "10" " " "10" " " "10" " " "dbt-collision-speed" "(" " " =
 "dbt-test" "(" "\n" ")" "0" " " ")" "-1" " " "4" " " "1" " " "4" " " "dbt-c=
 ollision-speed" "(" " " "dbt-test" "(" "\n" "; \"collision-speed -3\"" "\n"=
  "ex-i-8" "'" "\n" "\n" "))" "pi" " " "7" " " "36" " " "*" "(" " " ")" "3" =
 " " "6" " " "dbt-volume-between-spheres" "(" " " "dbt-test" "(" "\n" "))" "=
 pi" " " "104/3" " " "*" "(" " " ")" "1" " " "3" " " "dbt-volume-between-sph=
 eres" "(" " " "dbt-test" "(" "\n" "))" "pi" " " "28/3" " " "*" "(" " " ")" =
 "1" " " "2" " " "dbt-volume-between-spheres" "(" " " "dbt-test" "(" "\n" "e=
 x-i-7" "'" "\n" "\n" "))" "pi" " " "50" " " "*" "(" " " ")" "3" " " "2" " "=
  "1" " " "dbt-area-pipe-v2" "(" " " "dbt-test" "(" "\n" "))" "pi" " " "48" =
 " " "*" "(" " " ")" "2" " " "2" " " "2" " " "dbt-area-pipe-v2" "(" " " "dbt=
 -test" "(" "\n" "))" "pi" " " "12" " " "*" "(" " " ")" "1" " " "1" " " "1" =
 " " "dbt-area-pipe-v2" "(" " " "dbt-test" "(" "\n" "; \"area-pipe-v2 -3\"" =
 "\n" "))" "pi" " " "50" " " "*" "(" " " ")" "3" " " "2" " " "1" " " "dbt-ar=
 ea-pipe-v1" "(" " " "dbt-test" "(" "\n" "))" "pi" " " "48" " " "*" "(" " " =
 ")" "2" " " "2" " " "2" " " "dbt-area-pipe-v1" "(" " " "dbt-test" "(" "\n" =
 "))" "pi" " " "12" " " "*" "(" " " ")" "1" " " "1" " " "1" " " "dbt-area-pi=
 pe-v1" "(" " " "dbt-test" "(" "\n" "ex-i-6" "'" "\n" "\n" "))" "pi" " " "22=
 0" " " "*" "(" " " ")" "1" " " "10" " " "dbt-area-cylinder" "(" " " "dbt-te=
 st" "(" "\n" "))" "pi" " " "400" " " "*" "(" " " ")" "10" " " "10" " " "dbt=
 -area-cylinder" "(" " " "dbt-test" "(" "\n" "))" "pi" " " "4" " " "*" "(" "=
  " ")" "1" " " "1" " " "dbt-area-cylinder" "(" " " "dbt-test" "(" "\n" "ex-=
 i-5" "'" "\n" "\n" ")" "40" " " ")" "100" " " "dbt-perim-of-square" "(" " "=
  "dbt-test" "(" "\n" ")" "16" " " ")" "16" " " "dbt-perim-of-square" "(" " =
 " "dbt-test" "(" "\n" ")" "4" " " ")" "1" " " "dbt-perim-of-square" "(" " "=
  "dbt-test" "(" "\n" "; \"perim-of-square -3\"" "\n" "ex-i-4" "'" "\n" "\n"=
  ")" "10" " " ")" "100" " " "7" " " "3" " " "dbt-time-to-meet" "(" " " "dbt=
 -test" "(" "\n" ")" "2" " " ")" "10" " " "3" " " "2" " " "dbt-time-to-meet"=
  "(" " " "dbt-test" "(" "\n" ")" "5" " " ")" "10" " " "1" " " "1" " " "dbt-=
 time-to-meet" "(" " " "dbt-test" "(" "\n" "; \"time-to-meet -1\"" "\n" "ex-=
 i-3" "'" "\n" "\n" ")" "130" " " ")" "12" " " "5" " " "50" " " "dbt-boat-di=
 stance" "(" " " "dbt-test" "(" "\n" ")" "20" " " ")" "4" " " "3" " " "12" "=
  " "dbt-boat-distance" "(" " " "dbt-test" "(" "\n" ")" "5" " " ")" "4" " " =
 "3" " " "3" " " "dbt-boat-distance" "(" " " "dbt-test" "(" "\n" "; \"boat-d=
 istance -3\"" "\n" "ex-i-2" "'" "\n" "\n" ")" "400" " " ")" "4" " " "10" " =
 " "20" " " "100" " " "dbt-sum-coins" "(" " " "dbt-test" "(" "\n" ")" "64" "=
  " ")" "1" " " "2" " " "3" " " "4" " " "dbt-sum-coins" "(" " " "dbt-test" "=
 (" "\n" ")" "141" " " ")" "4" " " "3" " " "2" " " "1" " " "dbt-sum-coins" "=
 (" " " "dbt-test" "(" "\n" ";\"sum-coins -3\"" "\n" "ex-i-1" "'" "\n" "\n" =
 "\n" ";(define (dbt-search-lolos s l) (search-lolos l s))" "\n" "))" "l" " =
 " "s" " " "search-lolos" "(" " " ")" "l" " " "s" " " "dbt-search-lolos" "("=
  " " "define" "(" "\n" ";  (any-true l))" "\n" "))" "l" " " "any-true?" "("=
  "  " "\n" ")" "l" " " "dbt-any-true?" "(" " " "define" "(" "\n" ";  (elimi=
 nate ua lotp))" "\n" ";  (eliminate-exp lotp ua))" "\n" "))" "lotp" " " "ua=
 " " " "eliminate-exp" "(" "  " "\n" ")" "lotp" " " "ua" " " "dbt-eliminate-=
 exp" "(" " " "define" "(" "\n" ";  (convertfc l))" "\n" "))" "l" " " "conve=
 rtFC" "(" "  " "\n" ")" "l" " " "dbt-convertFC" "(" " " "define" "(" "\n" "=
 ;  (check-range lo hi lon))" "\n" ";  (check-range lon (range lo hi)))" "\n=
 " ";  (check-range lon (interval lo hi)))" "\n" ";  (check-range? lon lo hi=
 ))" "\n" ";  (check-range-gen lon lo hi))" "\n" "))" "hi" " " "lo" " " "lon=
 " " " "check-range" "(" "  " "\n" ")" "hi" " " "lo" " " "lon" " " "dbt-chec=
 k-range" "(" " " "define" "(" "\n" ";  (check-range1? lon))  " "\n" "))" "l=
 on" " " "check-range1" "(" "  " "\n" ")" "lon" " " "dbt-check-range1" "(" "=
  " "define" "(" "\n" ";  (prices-below-threshold? x lon))" "\n" ";  (price-=
 below-threshold? lon x))" "\n" ";  (dollar-s? lon x))" "\n" "))" "x" " " "l=
 on" " " "prices-below-threshold?" "(" "  " "\n" ")" "x" " " "lon" " " "dbt-=
 prices-below-threshold?" "(" " " "define" "(" "\n" ";  (dollar-store l))" "=
 \n" "))" "l" " " "dollar-store?" "(" "  " "\n" ")" "l" " " "dbt-dollar-stor=
 e?" "(" " " "define" "(" "\n" ";  (interest-rate x))" "\n" "))" "x" " " "in=
 terest" "(" "  " "\n" ")" "x" " " "dbt-interest" "(" " " "define" "(" "\n" =
 ";  (collision-speed (object m1 v1) (object m2 v2)))" "\n" ";  (collision-s=
 peed v1 v2 m1 m2))" "\n" ";  (collision-speed v1 m1 v2 m2))" "\n" ";  (coll=
 ision-speed m1 v1 m2 v2))" "\n" "))" "v2" " " "v1" " " "m2" " " "m1" " " "c=
 ollision-speed" "(" "  " "\n" ")" "v2" " " "m2" " " "v1" " " "m1" " " "dbt-=
 collision-speed" "(" " " "define" "(" "\n" ";  (volume-between-spheres inne=
 r outer))" "\n" "))" "inner" " " "outer" " " "volume-between-spheres" "(" "=
   " "\n" ")" "inner" " " "outer" " " "dbt-volume-between-spheres" "(" " " "=
 define" "(" "\n" ";  (area-pipev2 a b c))" "\n" "))" "c" " " "b" " " "a" " =
 " "area-pipe-v2" "(" "  " "\n" ")" "c" " " "b" " " "a" " " "dbt-area-pipe-v=
 2" "(" " " "define" "(" "\n" ";  (area-pipe a b c))" "\n" ";  (area-pipev1 =
 a b c))" "\n" "))" "c" " " "b" " " "a" " " "area-pipe-v1" "(" "  " "\n" ")"=
  "c" " " "b" " " "a" " " "dbt-area-pipe-v1" "(" " " "define" "(" "\n" ";  (=
 area-cyclinder a b))" "\n" "))" "b" " " "a" " " "area-cylinder" "(" "  " "\=
 n" ")" "b" " " "a" " " "dbt-area-cylinder" "(" " " "define" "(" "\n" ";  (p=
 erimeter-of-square x))" "\n" "))" "x" " " "perim-of-square" "(" "  " "\n" "=
 )" "x" " " "dbt-perim-of-square" "(" " " "define" "(" "\n" ";  (time-to-mee=
 t dist speed1 speed2))" "\n" "))" "dist" " " "speed2" " " "speed1" " " "tim=
 e-to-meet" "(" "  " "\n" ")" "dist" " " "speed2" " " "speed1" " " "dbt-time=
 -to-meet" "(" " " "define" "(" "\n" ";  (boat-distance river-width river-sp=
 eed boat-speed))" "\n" ";  (boat-distance boat-speed river-speed river-widt=
 h))" "\n" "))" "river-speed" " " "boat-speed" " " "river-width" " " "boat-d=
 istance" "(" "  " "\n" ")" "river-speed" " " "boat-speed" " " "river-width"=
  " " "dbt-boat-distance" "(" " " "define" "(" "\n" ";  (sub-coins a b c d))=
 " "\n" "))" "d" " " "c" " " "b" " " "a" " " "sum-coins" "(" "  " "\n" ")" "=
 d" " " "c" " " "b" " " "a" " " "dbt-sum-coins" "(" " " "define" "(" "\n" "\=
 n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quote" "(" " " "\"*=
 ** ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "            =
                            " "\n" "]" "#t" " " ")" "expected" " " "v" " " "=
 equal?" "[(" "                                       " "\n" ")]" "v" " " "e=
 xpected" " " "list" "(" " " "))" "v" " " "string?" "(" " " ")" "expected" "=
  " "string?" "(" " " "and" "[(" "                                       " "=
 \n" "cond" "(" "                                     " "\n" "])" "actual" "=
  " "v" "([" " " "let" "(" "                                   " "\n" "])" "=
 exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "=
 (" " " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "act=
 ual" " " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-cas=
 e" "(" "  " "\n" ")" "stx" " " "dbt-test2" "(" " " "define-syntax" "(" "\n"=
  "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quote" "(" " " "=
 \"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "         =
                               " "\n" "]" "#t" " " ")" "expected" " " "v" " =
 " "equal?" "[(" "                                       " "\n" ")]" "v" " "=
  "expected" " " "list" "(" " " "))" "v" " " "string?" "(" " " ")" "expected=
 " " " "string?" "(" " " "and" "[(" "                                       =
 " "\n" "cond" "(" "                                     " "\n" "])" "actual=
 " " " "v" "([" " " "let" "(" "                                   " "\n" "])=
 " "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x=
 " "(" " " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "=
 expected" " " "actual" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-=
 case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(") (=
 "\n" "))))" "j" " " "i" " " "h" " " "g" "(" " " "()" " " ")" "f" " " "e" "(=
 " " " ")" "d" " " "c" " " "b" "((" "'" " " "a" "'" " " "dbt-search-lolos" "=
 (" " " "#f" " " "dbt-test2" "(" "\n" "))))" "c" " " "b" " " "a" " " "b" " "=
  "c" "((" "'" " " "a" "'" " " "dbt-search-lolos" "(" " " "#t" " " "dbt-test=
 2" "(" "\n" "))" "empty" " " "a" "'" " " "dbt-search-lolos" "(" " " "#f" " =
 " "dbt-test2" "(" "\n" "ex-ii-10" "'" "\n" "\n" ")))" "-1" " " "-2" " " "3"=
  " " "-4" " " "-5" " " "6" " " "-7" " " "-8" " " "9" "(" "'" " " "diff" "("=
  " " "-3" " " "dbt-test2" "(" "\n" ")))" "0" " " "-4" " " "3" " " "0" " " "=
 -2" " " "1" " " "0" "(" "'" " " "diff" "(" " " "0" " " "dbt-test2" "(" "\n"=
  "))" "empty" " " "diff" "(" " " "0" " " "dbt-test2" "(" "\n" "ex-ii-9" "'"=
  "\n" "\n" ")))" "#f" " " "#f" " " "#f" " " "#f" "(" "'" " " "dbt-any-true?=
 " "(" " " "#f" " " "dbt-test2" "(" "\n" ")))" "#f" " " "#t" " " "#f" " " "#=
 f" "(" "'" " " "dbt-any-true?" "(" " " "#t" " " "dbt-test2" "(" "\n" "))" "=
 empty" " " "dbt-any-true?" "(" " " "#f" " " "dbt-test2" "(" "\n" "ex-ii-8" =
 "'" "\n" "\n" "()))" "        " "\n" ")" "1" "(" "        " "\n" ")" "1" " =
 " "2" "(" "        " "\n" ")" "1" " " "2" " " "3" "(" "        " "\n" ")" "=
 1" " " "2" " " "3" " " "4" "(" "        " "\n" ")" "1" " " "2" " " "3" " " =
 "4" " " "5" "((" "'" "      " "\n" "))" "1" " " "2" " " "3" " " "4" " " "5"=
  "(" "'" " " "suffixes" "(" " " "dbt-test" "(" "\n" "()))" " " ")" "20" "("=
  " " ")" "20" " " "10" "((" "'" "      " "\n" "))" "20" " " "10" "(" "'" " =
 " "suffixes" "(" " " "dbt-test" "(" "\n" "(()))" "'" "      " "\n" ")" "emp=
 ty" " " "suffixes" "(" " " "dbt-test" "(" "\n" "ex-ii-7" "'" "\n" "\n" "))"=
  "25" " " "-9" " " "-8" " " "-7" " " "-6" " " "-5" " " "4" " " "3" " " "2" =
 " " "1" " " "0" "(" "'" " " "))" "-9" " " "-8" " " "-7" " " "-6" " " "-5" "=
  " "4" " " "3" " " "2" " " "1" " " "0" "(" "'" " " "cancel-sum" "(" " " "db=
 t-test" "(" "\n" "))" "-7" " " "5" " " "-8" " " "6" " " "4" "(" "'" " " "))=
 " "5" " " "-8" " " "6" " " "4" "(" "'" " " "cancel-sum" "(" " " "dbt-test" =
 "(" "\n" "))" "0" "(" "'" " " ")" "empty" " " "cancel-sum" "(" " " "dbt-tes=
 t" "(" "\n" "; \"cancel-sum -3\"" "\n" "ex-ii-6" "'" "\n" "\n" "))" "34" " =
 " "11" " " "23" " " "15" " " "12" "(" "'" " " "))" "34" " " "11" " " "23" "=
  " "15" " " "12" "(" "'" " " "40" " " "dbt-eliminate-exp" "(" " " "dbt-test=
 " "(" "\n" "))" "11" " " "15" " " "12" "(" "'" " " "))" "34" " " "11" " " "=
 23" " " "15" " " "12" "(" "'" " " "20" " " "dbt-eliminate-exp" "(" " " "dbt=
 -test" "(" "\n" ")" "empty" " " "))" "34" " " "11" " " "23" " " "15" " " "1=
 2" "(" "'" " " "10" " " "dbt-eliminate-exp" "(" " " "dbt-test" "(" "\n" "ex=
 -ii-5" "'" "\n" "\n" "))" "100" " " "30" " " "20" " " "0" " " "-40" "(" "'"=
  " " "))" "212" " " "86" " " "68" " " "32" " " "-40" "(" "'" " " "dbt-conve=
 rtFC" "(" " " "dbt-test" "(" "\n" "))" "0" "(" "'" " " "))" "32" "(" "'" " =
 " "dbt-convertFC" "(" " " "dbt-test" "(" "\n" ")" "empty" " " ")" "empty" "=
  " "dbt-convertFC" "(" " " "dbt-test" "(" "\n" "ex-ii-4" "'" "\n" "\n" ")" =
 "39258" " " "))" "3" " " "9" " " "2" " " "5" " " "8" "(" "'" " " "convert" =
 "(" " " "dbt-test" "(" "\n" ")" "10000" " " "))" "1" " " "0" " " "0" " " "0=
 " " " "0" "(" "'" " " "convert" "(" " " "dbt-test" "(" "\n" ")" "0" " " ")"=
  "empty" " " "convert" "(" " " "dbt-test" "(" "\n" "; \"convert -3\"" "\n" =
 "ex-ii-3" "'" "\n" "\n" ")" "#f" " " ")" "100" " " "30" " " ")" "98" " " "3=
 2" " " "56" " " "29" " " "39" " " "55" "(" "'" " " "dbt-check-range" "(" " =
 " "dbt-test" "(" "\n" ")" "#f" " " ")" "90" " " "20" " " ")" "98" " " "32" =
 " " "56" " " "29" " " "39" " " "55" "(" "'" " " "dbt-check-range" "(" " " "=
 dbt-test" "(" "\n" ")" "#t" " " ")" "100" " " "20" " " ")" "98" " " "32" " =
 " "56" " " "29" " " "39" " " "55" "(" "'" " " "dbt-check-range" "(" " " "db=
 t-test" "(" "\n" "; \"check-range -3\"" "\n" ")" "#f" " " "))" "105" " " "9=
 1" " " "22" " " "44" " " "83" "(" "'" " " "dbt-check-range1" "(" " " "dbt-t=
 est" "(" "\n" ")" "#f" " " "))" "91" " " "22" " " "4" " " "83" "(" "'" " " =
 "dbt-check-range1" "(" " " "dbt-test" "(" "\n" ")" "#t" " " "))" "43" " " "=
 7" " " "78" " " "66" "(" "'" " " "dbt-check-range1" "(" " " "dbt-test" "(" =
 "\n" "ex-ii-2" "'" "\n" "\n" ")" "#t" " " ")" "100" " " ")" "19" " " "59" "=
  " "5" " " "34" " " "82" "(" "'" " " "dbt-prices-below-threshold?" "(" " " =
 "dbt-test" "(" "\n" ")" "#f" " " ")" "100" " " ")" "19" " " "59" " " "205" =
 " " "34" " " "82" "(" "'" " " "dbt-prices-below-threshold?" "(" " " "dbt-te=
 st" "(" "\n" ")" "#t" " " ")" "100" " " "empty" " " "dbt-prices-below-thres=
 hold?" "(" " " "dbt-test" "(" "\n" ")" "#f" " " "))" ".88" " " "1.87" " " "=
 =2E56" " " ".94" "(" "'" " " "dbt-dollar-store?" "(" " " "dbt-test" "(" "\n=
 " ")" "#t" " " "))" ".88" " " ".63" " " ".56" " " ".94" "(" "'" " " "dbt-do=
 llar-store?" "(" " " "dbt-test" "(" "\n" ")" "#t" " " ")" "empty" " " "dbt-=
 dollar-store?" "(" " " "dbt-test" "(" "\n" "ex-ii-1" "'" "\n" "\n" ")" "0" =
 " " ")" "5" " " "10" " " "backward" "'" " " "move" "(" " " "dbt-test" "(" "=
 \n" ")" "99" " " ")" "95" " " "10" " " "forward" "'" " " "move" "(" " " "db=
 t-test" "(" "\n" ")" "41" " " ")" "50" " " "9" " " "backward" "'" " " "move=
 " "(" " " "dbt-test" "(" "\n" ")" "59" " " ")" "50" " " "9" " " "forward" "=
 '" " " "move" "(" " " "dbt-test" "(" "\n" "ex-i-12" "'" "\n" "\n" ")" "none=
 " "'" " " ")" "3" " " "2" " " "1" " " "what-kind" "(" " " "dbt-test" "(" "\=
 n" ")" "two" "'" " " ")" "2" " " "5" " " "1" " " "what-kind" "(" " " "dbt-t=
 est" "(" "\n" ")" "one" "'" " " ")" "2" " " "4" " " "2" " " "what-kind" "("=
  " " "dbt-test" "(" "\n" ")" "degenerate" "'" " " ")" "2" " " "1" " " "0" "=
  " "what-kind" "(" " " "dbt-test" "(" "\n" "; \"what-kind -4\"" "\n" "ex-i-=
 11" "'" "\n" "\n" ")" "2" " " ")" "12" " " "8" " " "new-price" "(" " " "dbt=
 -test" "(" "\n" ")" "100" " " ")" "4" " " "200" " " "new-price" "(" " " "db=
 t-test" "(" "\n" ")" "75" " " ")" "3" " " "100" " " "new-price" "(" " " "db=
 t-test" "(" "\n" ")" "80" " " ")" "1" " " "80" " " "new-price" "(" " " "dbt=
 -test" "(" "\n" "ex-i-10" "'" "\n" "\n" ")" "500" " " ")" "10000" " " "dbt-=
 interest" "(" " " "dbt-test" "(" "\n" ")" "90" " " ")" "2000" " " "dbt-inte=
 rest" "(" " " "dbt-test" "(" "\n" ")" "4" " " ")" "100" " " "dbt-interest" =
 "(" " " "dbt-test" "(" "\n" "ex-i-9" "'" "\n" "\n" ")" "-1" " " ")" "-4" " =
 " "20" " " "5" " " "10" " " "dbt-collision-speed" "(" " " "dbt-test" "(" "\=
 n" ")" "5" " " ")" "0" " " "10" " " "10" " " "10" " " "dbt-collision-speed"=
  "(" " " "dbt-test" "(" "\n" ")" "0" " " ")" "-1" " " "4" " " "1" " " "4" "=
  " "dbt-collision-speed" "(" " " "dbt-test" "(" "\n" "; \"collision-speed -=
 3\"" "\n" "ex-i-8" "'" "\n" "\n" "))" "pi" " " "7" " " "36" " " "*" "(" " "=
  ")" "3" " " "6" " " "dbt-volume-between-spheres" "(" " " "dbt-test" "(" "\=
 n" "))" "pi" " " "104/3" " " "*" "(" " " ")" "1" " " "3" " " "dbt-volume-be=
 tween-spheres" "(" " " "dbt-test" "(" "\n" "))" "pi" " " "28/3" " " "*" "("=
  " " ")" "1" " " "2" " " "dbt-volume-between-spheres" "(" " " "dbt-test" "(=
 " "\n" "ex-i-7" "'" "\n" "\n" "))" "pi" " " "50" " " "*" "(" " " ")" "3" " =
 " "2" " " "1" " " "dbt-area-pipe-v2" "(" " " "dbt-test" "(" "\n" "))" "pi" =
 " " "48" " " "*" "(" " " ")" "2" " " "2" " " "2" " " "dbt-area-pipe-v2" "("=
  " " "dbt-test" "(" "\n" "))" "pi" " " "12" " " "*" "(" " " ")" "1" " " "1"=
  " " "1" " " "dbt-area-pipe-v2" "(" " " "dbt-test" "(" "\n" "; \"area-pipe-=
 v2 -3\"" "\n" "))" "pi" " " "50" " " "*" "(" " " ")" "3" " " "2" " " "1" " =
 " "dbt-area-pipe-v1" "(" " " "dbt-test" "(" "\n" "))" "pi" " " "48" " " "*"=
  "(" " " ")" "2" " " "2" " " "2" " " "dbt-area-pipe-v1" "(" " " "dbt-test" =
 "(" "\n" "))" "pi" " " "12" " " "*" "(" " " ")" "1" " " "1" " " "1" " " "db=
 t-area-pipe-v1" "(" " " "dbt-test" "(" "\n" "ex-i-6" "'" "\n" "\n" "))" "pi=
 " " " "220" " " "*" "(" " " ")" "1" " " "10" " " "dbt-area-cylinder" "(" " =
 " "dbt-test" "(" "\n" "))" "pi" " " "400" " " "*" "(" " " ")" "10" " " "10"=
  " " "dbt-area-cylinder" "(" " " "dbt-test" "(" "\n" "))" "pi" " " "4" " " =
 "*" "(" " " ")" "1" " " "1" " " "dbt-area-cylinder" "(" " " "dbt-test" "(" =
 "\n" "ex-i-5" "'" "\n" "\n" ")" "40" " " ")" "100" " " "dbt-perim-of-square=
 " "(" " " "dbt-test" "(" "\n" ")" "16" " " ")" "16" " " "dbt-perim-of-squar=
 e" "(" " " "dbt-test" "(" "\n" ")" "4" " " ")" "1" " " "dbt-perim-of-square=
 " "(" " " "dbt-test" "(" "\n" "; \"perim-of-square -3\"" "\n" "ex-i-4" "'" =
 "\n" "\n" ")" "10" " " ")" "100" " " "7" " " "3" " " "dbt-time-to-meet" "("=
  " " "dbt-test" "(" "\n" ")" "2" " " ")" "10" " " "3" " " "2" " " "dbt-time=
 -to-meet" "(" " " "dbt-test" "(" "\n" ")" "5" " " ")" "10" " " "1" " " "1" =
 " " "dbt-time-to-meet" "(" " " "dbt-test" "(" "\n" "; \"time-to-meet -1\"" =
 "\n" "ex-i-3" "'" "\n" "\n" ")" "130" " " ")" "12" " " "5" " " "50" " " "db=
 t-boat-distance" "(" " " "dbt-test" "(" "\n" ")" "20" " " ")" "4" " " "3" "=
  " "12" " " "dbt-boat-distance" "(" " " "dbt-test" "(" "\n" ")" "5" " " ")"=
  "4" " " "3" " " "3" " " "dbt-boat-distance" "(" " " "dbt-test" "(" "\n" ";=
  \"boat-distance -3\"" "\n" "ex-i-2" "'" "\n" "\n" ")" "400" " " ")" "4" " =
 " "10" " " "20" " " "100" " " "dbt-sum-coins" "(" " " "dbt-test" "(" "\n" "=
 )" "64" " " ")" "1" " " "2" " " "3" " " "4" " " "dbt-sum-coins" "(" " " "db=
 t-test" "(" "\n" ")" "141" " " ")" "4" " " "3" " " "2" " " "1" " " "dbt-sum=
 -coins" "(" " " "dbt-test" "(" "\n" ";\"sum-coins -3\"" "\n" "ex-i-1" "'" "=
 \n" "\n" "\n" ";(define (dbt-search-lolos s l) (search-lolos l s))" "\n" ")=
 )" "l" " " "s" " " "search-lolos" "(" " " ")" "l" " " "s" " " "dbt-search-l=
 olos" "(" " " "define" "(" "\n" ";  (any-true l))" "\n" "))" "l" " " "any-t=
 rue?" "(" "  " "\n" ")" "l" " " "dbt-any-true?" "(" " " "define" "(" "\n" "=
 ;  (eliminate ua lotp))" "\n" ";  (eliminate-exp lotp ua))" "\n" "))" "lotp=
 " " " "ua" " " "eliminate-exp" "(" "  " "\n" ")" "lotp" " " "ua" " " "dbt-e=
 liminate-exp" "(" " " "define" "(" "\n" ";  (convertfc l))" "\n" "))" "l" "=
  " "convertFC" "(" "  " "\n" ")" "l" " " "dbt-convertFC" "(" " " "define" "=
 (" "\n" ";  (check-range lo hi lon))" "\n" ";  (check-range lon (range lo h=
 i)))" "\n" ";  (check-range lon (interval lo hi)))" "\n" ";  (check-range? =
 lon lo hi))" "\n" ";  (check-range-gen lon lo hi))" "\n" "))" "hi" " " "lo"=
  " " "lon" " " "check-range" "(" "  " "\n" ")" "hi" " " "lo" " " "lon" " " =
 "dbt-check-range" "(" " " "define" "(" "\n" ";  (check-range1? lon))  " "\n=
 " "))" "lon" " " "check-range1" "(" "  " "\n" ")" "lon" " " "dbt-check-rang=
 e1" "(" " " "define" "(" "\n" ";  (prices-below-threshold? x lon))" "\n" ";=
   (price-below-threshold? lon x))" "\n" ";  (dollar-s? lon x))" "\n" "))" "=
 x" " " "lon" " " "prices-below-threshold?" "(" "  " "\n" ")" "x" " " "lon" =
 " " "dbt-prices-below-threshold?" "(" " " "define" "(" "\n" ";  (dollar-sto=
 re l))" "\n" "))" "l" " " "dollar-store?" "(" "  " "\n" ")" "l" " " "dbt-do=
 llar-store?" "(" " " "define" "(" "\n" ";  (interest-rate x))" "\n" "))" "x=
 " " " "interest" "(" "  " "\n" ")" "x" " " "dbt-interest" "(" " " "define" =
 "(" "\n" ";  (collision-speed (object m1 v1) (object m2 v2)))" "\n" ";  (co=
 llision-speed v1 v2 m1 m2))" "\n" ";  (collision-speed v1 m1 v2 m2))" "\n" =
 "))" "v2" " " "m2" " " "v1" " " "m1" " " "collision-speed" "(" "  " "\n" ")=
 )" "v2" " " "v1" " " "m2" " " "m1" " " "collision-speed" "(" ";  " "\n" ")"=
  "v2" " " "m2" " " "v1" " " "m1" " " "dbt-collision-speed" "(" " " "define"=
  "(" "\n" ";  (volume-between-spheres inner outer))" "\n" "))" "inner" " " =
 "outer" " " "volume-between-spheres" "(" "  " "\n" ")" "inner" " " "outer" =
 " " "dbt-volume-between-spheres" "(" " " "define" "(" "\n" ";  (area-pipev2=
  a b c))" "\n" "))" "c" " " "b" " " "a" " " "area-pipe-v2" "(" "  " "\n" ")=
 " "c" " " "b" " " "a" " " "dbt-area-pipe-v2" "(" " " "define" "(" "\n" ";  =
 (area-pipe a b c))" "\n" ";  (area-pipev1 a b c))" "\n" "))" "c" " " "b" " =
 " "a" " " "area-pipe-v1" "(" "  " "\n" ")" "c" " " "b" " " "a" " " "dbt-are=
 a-pipe-v1" "(" " " "define" "(" "\n" ";  (area-cyclinder a b))" "\n" "))" "=
 b" " " "a" " " "area-cylinder" "(" "  " "\n" ")" "b" " " "a" " " "dbt-area-=
 cylinder" "(" " " "define" "(" "\n" ";  (perimeter-of-square x))" "\n" "))"=
  "x" " " "perim-of-square" "(" "  " "\n" ")" "x" " " "dbt-perim-of-square" =
 "(" " " "define" "(" "\n" ";  (time-to-meet dist speed1 speed2))" "\n" "))"=
  "dist" " " "speed2" " " "speed1" " " "time-to-meet" "(" "  " "\n" ")" "dis=
 t" " " "speed2" " " "speed1" " " "dbt-time-to-meet" "(" " " "define" "(" "\=
 n" ";  (boat-distance river-width river-speed boat-speed))" "\n" ";  (boat-=
 distance boat-speed river-speed river-width))" "\n" "))" "river-speed" " " =
 "boat-speed" " " "river-width" " " "boat-distance" "(" "  " "\n" ")" "river=
 -speed" " " "boat-speed" " " "river-width" " " "dbt-boat-distance" "(" " " =
 "define" "(" "\n" ";  (sub-coins a b c d))" "\n" "))" "d" " " "c" " " "b" "=
  " "a" " " "sum-coins" "(" "  " "\n" ")" "d" " " "c" " " "b" " " "a" " " "d=
 bt-sum-coins" "(" " " "define" "(" "\n" "\n" ")]))))]))" "v" " " "expected"=
  " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " "=
  "format" "(" " " "else" "[" "                                       " "\n"=
  "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "                   =
                     " "\n" ")]" "v" " " "expected" " " "list" "(" " " "))" =
 "v" " " "string?" "(" " " ")" "expected" " " "string?" "(" " " "and" "[(" "=
                                        " "\n" "cond" "(" "                 =
                     " "\n" "])" "actual" " " "v" "([" " " "let" "(" "      =
                              " "\n" "])" "exn-message" " " ")))" "x" " " "e=
 xn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-h=
 andlers" "(" " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" =
 "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "d=
 bt-test2" "(" " " "define-syntax" "(" "\n" "\n" ")]))))]))" "v" " " "expect=
 ed" " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" =
 " " "format" "(" " " "else" "[" "                                       " "=
 \n" "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "                =
                        " "\n" ")]" "v" " " "expected" " " "list" "(" " " ")=
 )" "v" " " "string?" "(" " " ")" "expected" " " "string?" "(" " " "and" "[(=
 " "                                       " "\n" "cond" "(" "              =
                        " "\n" "])" "actual" " " "v" "([" " " "let" "(" "   =
                                 " "\n" "])" "exn-message" " " ")))" "x" " "=
  "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "wit=
 h-handlers" "(" " " "syntax" "(" " " ")" "expected" " " "actual" " " "_" "[=
 (" "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " "=
  "dbt-test" "(" " " "define-syntax" "(") ("\n" "\"" "code" " " "k" "c" "e" =
 "h" "c" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n=
 " "\"" "r" "e" "s" "r" "a" "p" " " "k" "c" "e" "h" "c" "\"" "\n" "}})" "e" =
 "s" "l" "a" "f" " " "}" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "e" "z"=
  "s" "i" "{" " " "r" "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "{" "=
 '" "          " "\n" "e" "u" "r" "t" " " "t" "s" "e" "t" "-" "t" "b" "d" "(=
 " "\n" "}}))" "x" " " "}" "e" "u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "=
 {" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" =
 " " "n" "u" "r" "(" "'" "          " "\n" "e" "u" "r" "t" " " "t" "es" "t" =
 "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r"=
  "a" "p" "'" "\n" "\n" "}}))" "b" " " "t" "s" "e" "r" "{" "                =
   " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "=
 i" "w" "{" "'" " " "n" "u" "r" "(" "          " "\n" "9" " " "st" "e" "t" "=
 -" "t" "b" "d" "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "=
 l" "{" "'" " " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "b"=
  "d" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{=
 " "'" " " "n" "u" "r" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "i"=
  "l" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t=
 " "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" =
 "8" " " "o" "r" "e" "z" "s" "i" "{" " " "f" "i" "b" "{" "'" " " "n" "u" "r"=
  "(" "          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " "=
  "}" "9" " " "8" " " "+" "{" " " "e" "u" "r" "t" " " "f" "i" "b" "{" "'" " =
 " "n" "ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" =
 "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" =
 "'" " " "run" "(" "          " "\n" "e" "u" "r" "t" " " "t" "tes" "-" "t" "=
 b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" "s" "i" =
 "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "s" "l" "a" "f" " " "t" "=
 tes" "-" "t" "b" "d" "(" "\n" "))" "e" "s" "l" "a" "f" "'" " " "n" "u" "r" =
 "(" "          " "\n" "e" "s" "l" "a" "f" " " "t" "tes" "-" "t" "b" "d" "("=
  "\n" "))" "true" "'" " " "n" "u" "r" "(" "          " "\n" "true" " " "t" =
 "tes" "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "-" "t" "p" "1" "-" "-" "-" =
 "1" "t" "r" "a" "p" "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "a=
 ctual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "=
 (" " " "else" "[" "                                       " "\n" "]" "#t" "=
  " ")" "expected" " " "v" " " "equal?" "[(" "                              =
          " "\n" ";[(and (string? expected) (string? v)) (list expected v)]"=
  "                                       " "\n" "cond" "(" "               =
                       " "\n" "])" "actual" " " "v" "([" " " "let" "(" "    =
                                " "\n" "])" "exn-message" " " ")))" "x" " " =
 "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with=
 -handlers" "(" " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[(=
 " "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " =
 "dbt-test" "(" " " "define-syntax" "(") ("\n" "\"" "code" " " "k" "c" "e" "=
 h" "c" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n"=
  "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "h" "c" "\"" "\n" "}))" "e" "s" =
 "l" "a" "f" " " "}" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "e" "z" "s"=
  "i" "{" " " "r" "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "    =
       " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "b" "d" "(" "\n" "}})=
 )" "x" " " "}" "e" "u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" =
 "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u"=
  "r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "b" "d" "(" "=
 \n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "a" "p" "'" "\n" "\n=
 " "}}))" "b" " " "t" "s" "e" "r" "{" "                  " "\n" "}}" "9" " "=
  "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n=
 " "ru" "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" =
 "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "("=
  "          " "\n" "6" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "3"=
  " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "=
           " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" =
 "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}=
 }))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" "z" "s" "i=
 " "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8" "1" " =
 " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " =
 "e" "u" "r" "t" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" =
 "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" =
 "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "          " "\=
 n" "e" "u" "r" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8=
 " " " "+" "{" " " "o" "r" "e" "z" "s" "i" "{" "'" " " "n" "u" "r" "(" "    =
       " "\n" "e" "s" "l" "a" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))=
 " "e" "s" "l" "a" "f" "'" " " "n" "u" "r" "(" "          " "\n" "e" "s" "l"=
  "a" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "true" "'" " " "n" "u"=
  "r" "(" "          " "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h=
 " "c" "a" "e" "-" "t" "p" "1" "-" "-" "-" "1" "t" "r" "a" "p" "'" "\n" "\n"=
  ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quote" "(" " " "\"***=
  ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "              =
                          " "\n" "]" "#t" " " ")" "expected" " " "v" " " "eq=
 ual?" "[(" "                                       " "\n" ";[(and (string? =
 expected) (string? v)) (list expected v)]" "                               =
         " "\n" "cond" "(" "                                     " "\n" "])"=
  "actual" " " "v" "([" " " "let" "(" "                                   " =
 "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " =
 " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" "=
  " ")" "actual" " " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " =
 "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax=
 " "(") ("\n" "\"" "code" " " "k" "c" "e" "h" "c" "\"" "\n" "t" "i" "d" "e" =
 "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k=
 " "c" "e" "h" "c" "\"" "\n" "}))" "e" "s" "l" "a" "f" " " "}" "e" "u" "r" "=
 t" " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" "o" "b" "{" " " =
 "r" "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t"=
  "s" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "x" " " "}" "e" "u" "r" "t" " =
 " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "=
 {" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "t=
 ru" " " "t" "es" "t" "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-=
 " "-" "-" "3" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r"=
  "{" "                  " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " "=
  "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" "          " "\n" "9"=
  " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "7" " " "6" " " "pair" "{=
 " " " "t" "f" "e" "l" "{" "'" " " "run" "(" "          " "\n" "6" " " "st" =
 "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" " "=
  "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " " "4"=
  " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-eac=
 h" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " "=
  "9" " " "}" "8" " " "o" "r" "e" "z" "s" "i" "{" " " "f" "i" "b" "{" "'" " =
 " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "=
 0" "1" " " "}" "9" " " "8" " " "+" "{" " " "e" "u" "r" "t" " " "f" "i" "b" =
 "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "b=
 " "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "is=
 zero" "{" "'" " " "run" "(" "          " "\n" "e" "u" "r" "t" " " "t" "tes"=
  "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z=
 " "s" "i" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "s" "l" "a" "f"=
  " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "e" "s" "l" "a" "f" "'" " " "n=
 " "u" "r" "(" "          " "\n" "e" "s" "l" "a" "f" " " "t" "tes" "-" "t" "=
 b" "d" "(" "\n" "))" "true" "'" " " "n" "u" "r" "(" "          " "\n" "true=
 " " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "-" "t" "p" "1" "-=
 " "-" "-" "1" "t" "r" "a" "p" "'" "\n" "\n" ")]))))]))" "v" " " "expected" =
 " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " =
 "format" "(" " " "else" "[" "                                       " "\n" =
 "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "                    =
                    " "\n" ";[(and (string? expected) (string? v)) (list exp=
 ected v)]" "                                       " "\n" "cond" "(" "     =
                                 " "\n" "])" "actual" " " "v" "([" " " "let"=
  "(" "                                   " "\n" "])" "exn-message" " " ")))=
 " "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([("=
  " " "with-handlers" "(" " " "syntax" "(" " " ")" "actual" " " "expected" "=
  " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" =
 "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("\n" "\"" "code" " " "k"=
  "c" "e" "h" "c" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "x" "e" "'"=
  "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "h" "c" "\"" "\n" "}))=
 " "e" "s" "l" "a" "f" " " "}" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "=
 e" "z" "s" "i" "{" " " "r" "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r"=
  "(" "          " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "b" "d" "("=
  "\n" "}}))" "x" " " "}" "e" "u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "{=
 " " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" "=
  " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "b"=
  "d" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "a" "p" "'=
 " "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "                  " "\n" "=
 }}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{"=
  "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "b" "d=
 " "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " =
 " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n"=
  "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n"=
  "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "=
 e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "=
 \n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e"=
  "z" "s" "i" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n"=
  "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "=
 +" "{" " " "e" "u" "r" "t" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "      =
     " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "=
 1" " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "   =
        " "\n" "e" "u" "r" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))"=
  "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" "s" "i" "{" "'" " " "n" "u" "r=
 " "(" "          " "\n" "e" "s" "l" "a" "f" " " "t" "tes" "-" "t" "b" "d" "=
 (" "\n" "))" "e" "s" "l" "a" "f" "'" " " "n" "u" "r" "(" "          " "\n" =
 "e" "s" "l" "a" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "true" "'" =
 " " "n" "u" "r" "(" "          " "\n" "true" " " "t" "tes" "-" "t" "b" "d" =
 "(" "\n" "h" "c" "a" "e" "-" "t" "p" "1" "-" "-" "-" "1" "t" "r" "a" "p" "'=
 " "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quote" "("=
  " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "   =
                                     " "\n" "]" "#t" " " ")" "expected" " " =
 "v" " " "equal?" "[(" "                                       " "\n" ";[(an=
 d (string? expected) (string? v)) (list expected v)]" "                    =
                    " "\n" "cond" "(" "                                     =
 " "\n" "])" "actual" " " "v" "([" " " "let" "(" "                          =
          " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "=
 not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" " " "sy=
 ntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" "    " "\n" "()" " "=
  "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "de=
 fine-syntax" "(") ("\n" "\"" "code" " " "k" "c" "e" "h" "c" "\"" "\n" "t" "=
 i" "d" "e" "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n" "\"" "r" "e" "rs" "a"=
  "p" " " "k" "c" "e" "h" "c" "\"" "\n" "}))" "#f" " " "}" "#t" " " "}" "7" =
 "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" "bo" "{" " " "r" "o" "b" "{" "'=
 " " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "=
 t" "b" "d" "(" "\n" "}}))" "x" " " "}" "#t" " " "x" "{" " " "h" "t" "i" "w"=
  "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'=
 " " " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-" "t" =
 "b" "d" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "a" "p"=
  "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "                  " "\n=
 " "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" =
 "{" "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "b"=
  "d" "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'"=
  " " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "b" "d" "(" "=
 \n" "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " =
 "n" "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st=
 " "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'=
 " "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" =
 "e" "z" "is" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n"=
  "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "=
 +" "{" " " "#t" " " "bif" "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1=
 " " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " =
 " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "          " "\n" "e"=
  "ru" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+"=
  "{" " " "o" "r" "e" "z" "is" "{" "'" " " "n" "ru" "(" "          " "\n" "e=
 " "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "'#f" " " "n" "r=
 u" "(" "          " "\n" "false" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))=
 " "t" "'#" " " "run" "(" "          " "\n" "true" " " "t" "tes" "-" "t" "b"=
  "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "pa" "'" "\n" =
 "\n" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" " " "m=
 " "a" "d" "a" " " "r" "o" "f" " " " " ";" ";" ";" ";" ";" ";" ";" ";" ";" "=
 ;" ";" ";" ";" ";" "\n" "\n" "#" "|" "\n" "\"" "code" " " "k" "c" "e" "ch" =
 "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "ex" "'" "\n" "\n" "\"" "r" =
 "e" "rs" "a" "p" " " "k" "c" "e" "ch" "\"" "\n" "}))" "e" "s" "l" "a" "f" "=
  " "}" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " =
 "r" "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" =
 "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "db" "(" "\n" "}}))" "x" " " "}" "=
 e" "u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" =
 "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "      =
     " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "db" "(" "\n" "h" "c" "a" "e"=
  "pts-" "3" "-" "-" "-" "3" "t" "r" "pa" "'" "\n" "\n" "}}))" "b" " " "ht" =
 "g" "i" "r" "{" "                  " "\n" "}}" "9" " " "8" " " "r" "i" "a" =
 "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" "         =
  " "\n" "9" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "7" " " "6" " " "=
 pair" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "          " "\n" "6" "=
  " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4=
 " " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " =
 " "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pt=
 s-each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{=
 " " " "9" " " "}" "8" " " "o" "r" "e" "z" "s" "i" "{" " " "f" "i" "b" "{" "=
 '" " " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}=
 ))" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "e" "u" "r" "t" " " "f" "i"=
  "b" "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "=
 t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " =
 " "iszero" "{" "'" " " "run" "(" "          " "\n" "e" "ru" "t" " " "t" "te=
 s" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" =
 "z" "s" "i" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " "=
  "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "e" "s" "l" "a" "f" "'" " " "n" "r=
 u" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "("=
  "\n" "))" "true" "'" " " "run" "(" "          " "\n" "true" " " "t" "tes" =
 "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "a"=
  "p" "'" "\n" "|" "#" "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" =
 " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " =
 "else" "[" "                                       " "\n" "]" "#t" " " ")" =
 "expected" " " "v" " " "equal?" "[(" "                                     =
   " "\n" ";[(and (string? expected) (string? v)) (list expected v)]" "     =
                                   " "\n" "cond" "(" "                      =
                " "\n" "])" "actual" " " "v" "([" " " "let" "(" "           =
                         " "\n" "])" "exn-message" " " ")))" "x" " " "exn:br=
 eak?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handle=
 rs" "(" " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" "    =
 " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-te=
 st" "(" " " "define-syntax" "(") ("\n" "\"" "code" " " "k" "c" "e" "h" "c" =
 "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n" "\"" "=
 r" "e" "rs" "a" "p" " " "k" "c" "e" "h" "c" "\"" "\n" "}))" "#f" " " "}" "#=
 t" " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" "bo" "{" " " "r"=
  "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s=
 " "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "x" " " "}" "#t" " " "x" "{" " " =
 "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n"=
  "a" "b" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "e=
 s" "t" "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" =
 "t" "r" "a" "p" "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "        =
           " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "=
 h" "t" "i" "w" "{" "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" =
 "t" "-" "t" "b" "d" "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" =
 "e" "l" "{" "'" " " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t=
 " "b" "d" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "=
 p" "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "=
 li" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t"=
  "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "=
 8" " " "o" "r" "e" "z" "is" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" " =
          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9=
 " " " "8" " " "+" "{" " " "#t" " " "bif" "{" "'" " " "n" "ru" "(" "        =
   " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1"=
  " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "     =
      " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" =
 " " "8" " " "+" "{" " " "o" "r" "e" "z" "is" "{" "'" " " "n" "ru" "(" "    =
       " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "=
 '#f" " " "n" "ru" "(" "          " "\n" "false" " " "t" "tes" "-" "t" "b" "=
 d" "(" "\n" "))" "t" "'#" " " "run" "(" "          " "\n" "true" " " "t" "t=
 es" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r"=
  "pa" "'" "\n" "\n" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";"=
  ";" ";" " " "m" "a" "d" "a" " " "r" "o" "f" " " " " ";" ";" ";" ";" ";" ";=
 " ";" ";" ";" ";" ";" ";" ";" ";" "\n" "\n" "#" "|" "\n" "\"" "code" " " "k=
 " "c" "e" "ch" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "ex" "'" "\n"=
  "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "ch" "\"" "\n" "}))" "e" "s=
 " "l" "a" "f" " " "}" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "e" "z" "=
 s" "i" "{" " " "r" "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "  =
         " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "db" "(" "\n" "}}))=
 " "x" " " "}" "e" "u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "=
 0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" =
 "r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "db" "(" "\n" =
 "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "pa" "'" "\n" "\n" "}}))=
 " "b" " " "ht" "g" "i" "r" "{" "                  " "\n" "}}" "9" " " "8" "=
  " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru"=
  "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "7=
 " " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "       =
    " "\n" "6" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "3" " " "2" " "=
  "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " =
 "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" =
 "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " "=
  "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" "z" "s" "i" "{" " " "f=
 " "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-t=
 es" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "e" "u" "r" =
 "t" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " =
 "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4"=
  " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "          " "\n" "e" "ru" =
 "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" "=
  " "o" "r" "e" "z" "s" "i" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "=
 s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "e" "s" "l" "a" "f"=
  "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" =
 "t" "b" "d" "(" "\n" "))" "true" "'" " " "run" "(" "          " "\n" "true"=
  " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" =
 "1" "t" "r" "a" "p" "'" "\n" "|" "#" "\n" ")]))))]))" "v" " " "expected" " =
 " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "f=
 ormat" "(" " " "else" "[" "                                       " "\n" "]=
 " "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "                      =
                  " "\n" ";[(and (string? expected) (string? v)) (list expec=
 ted v)]" "                                       " "\n" "cond" "(" "       =
                               " "\n" "])" "actual" " " "v" "([" " " "let" "=
 (" "                                   " "\n" "])" "exn-message" " " ")))" =
 "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" "=
  " "with-handlers" "(" " " "syntax" "(" " " ")" "actual" " " "expected" " "=
  "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "s=
 tx" " " "dbt-test" "(" " " "define-syntax" "(") ("#" "|" "\n" "\"" "code" "=
  " "k" "c" "e" "h" "c" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "x" "=
 e" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "h" "c" "\"" "\n=
 " "}))" "#f" " " "}" "#t" " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" "=
  " "r" "bo" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" =
 "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "x" " " "}=
 " "#t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" =
 "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "          " "\=
 n" "e" "tru" " " "t" "es" "t" "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "pts=
 -" "3" "-" "-" "-" "3" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "b" " " "ht" "g=
 " "i" "r" "{" "                  " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p=
 " "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" "          "=
  "\n" "9" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "7" " " "6" " " =
 "pair" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "          " "\n" "6" =
 " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " =
 " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5=
 " " " "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "-=
 -2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+=
 " "{" " " "9" " " "}" "8" " " "o" "r" "e" "z" "is" "{" " " "f" "i" "b" "{" =
 "'" " " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "=
 }))" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "#t" " " "bif" "{" "'" " "=
  "n" "ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "=
 \n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "=
 '" " " "run" "(" "          " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "=
 d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" "is" "{" "'"=
  " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" =
 "b" "d" "(" "\n" "))" "#f" "'" " " "n" "ru" "(" "          " "\n" "false" "=
  " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "t" "#" "'" " " "run" "(" "     =
      " "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p=
 " "1" "-" "-" "-" "1" "t" "r" "pa" "'" "\n" "\n" ";" ";" ";" ";" ";" ";" ";=
 " ";" ";" ";" ";" ";" ";" ";" ";" ";" " " "m" "a" "d" "a" " " "r" "o" "f" "=
  " " " ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";;" ";" "\n" "|" "#" "\=
 n" "\n" "\"" "code" " " "k" "c" "e" "ch" "\"" "\n" "t" "i" "d" "e" "r" "-c"=
  "a" "r" "t" "ex" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "=
 ch" "\"" "\n" "}))" "e" "s" "l" "a" "f" " " "}" "e" "u" "r" "t" " " "}" "7"=
  "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" "o" "b" "{" " " "r" "o" "b" "{=
 " "'" " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "=
 -" "t" "db" "(" "\n" "}}))" "x" " " "}" "e" "u" "r" "t" " " "x" "{" " " "h"=
  "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a=
 " "b" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "es" =
 "t" "-" "t" "db" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r=
 " "pa" "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "                 =
  " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i=
 " "w" "{" "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "t" "-" "=
 t" "db" "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" =
 "'" " " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "db" "(" "=
 \n" "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " =
 "n" "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st=
 " "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'=
 " "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" =
 "e" "z" "s" "i" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "=
 \n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " =
 " "+" "{" " " "e" "u" "r" "t" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "   =
        " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " =
 " "1" " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "=
           " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))"=
  "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" "s" "i" "{" "'" " " "n" "ru" "=
 (" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n=
 " "))" "e" "s" "l" "a" "f" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "=
 al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "true" "'" " " "run" "(=
 " "          " "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac"=
  "t-" "p" "1" "-" "-" "-" "1" "t" "r" "a" "p" "'" "\n" "\n" ")]))))]))" "v"=
  " " "expected" " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a=
 , got ~a\"" " " "format" "(" " " "else" "[" "                              =
          " "\n" "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "    =
                                    " "\n" ";[(and (string? expected) (strin=
 g? v)) (list expected v)]" "                                       " "\n" "=
 cond" "(" "                                     " "\n" "])" "actual" " " "v=
 " "([" " " "let" "(" "                                   " "\n" "])" "exn-m=
 essage" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " =
 " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "actual" =
 " " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" "(=
 " "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("\n" "\"=
 " "code" " " "k" "c" "e" "h" "c" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r"=
  "t" "x" "e" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "h" "c=
 " "\"" "\n" "}))" "#f" " " "}" "#t" " " "}" "7" "1" " " "o" "r" "e" "z" "s"=
  "i" "{" " " "r" "bo" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "       =
    " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" =
 "x" " " "}" "#t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r=
 " "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "    =
       " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "b" "d" "(" "\n" "h" "c" "a=
 " "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "b" "=
  " "ht" "g" "i" "r" "{" "                  " "\n" "}}" "9" " " "8" " " "r" =
 "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" " =
          " "\n" "9" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "7" " =
 " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "          "=
  "\n" "6" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "3" " " "2" " " =
 "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " "=
 \n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" "=
 (" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " =
 "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" "z" "is" "{" " " "f" "i=
 " "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-tes" =
 "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "#t" " " "bif" "=
 {" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "b"=
  "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "isz=
 ero" "{" "'" " " "run" "(" "          " "\n" "e" "ru" "t" " " "t" "tes" "-"=
  "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" "i=
 s" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes=
 " "-" "t" "b" "d" "(" "\n" "))" "'#f" " " "n" "ru" "(" "          " "\n" "f=
 alse" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "t" "'#" " " "run" "(" " =
          " "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-=
 " "p" "1" "-" "-" "-" "1" "t" "r" "pa" "'" "\n" "\n" ";" ";" ";" ";" ";" ";=
 " ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" " " "m" "a" "d" "a" " " "r" "o" "=
 f" " " " " ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" "\n" "\n=
 " "#" "|" "\n" "\"" "code" " " "k" "c" "e" "ch" "\"" "\n" "t" "i" "d" "e" "=
 r" "-c" "a" "r" "t" "ex" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c=
 " "e" "ch" "\"" "\n" "}))" "e" "s" "l" "a" "f" " " "}" "e" "u" "r" "t" " " =
 "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" "o" "b" "{" " " "r" "o"=
  "b" "{" "'" " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s" "e=
 " "t" "-" "t" "db" "(" "\n" "}}))" "x" " " "}" "e" "u" "r" "t" " " "x" "{" =
 " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d"=
  "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t=
 " "es" "t" "-" "t" "db" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3"=
  "t" "r" "pa" "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "          =
         " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h"=
  "t" "i" "w" "{" "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "t=
 " "-" "t" "db" "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "=
 l" "{" "'" " " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "db=
 " "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "=
 '" " " "n" "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" =
 " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r" "a"=
  "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" " " "=
 o" "r" "e" "z" "s" "i" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "      =
     " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " "=
  "8" " " "+" "{" " " "e" "u" "r" "t" " " "f" "i" "b" "{" "'" " " "n" "ru" "=
 (" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))"=
  "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run=
 " "(" "          " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n"=
  "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" "s" "i" "{" "'" " " "n"=
  "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" =
 "(" "\n" "))" "e" "s" "l" "a" "f" "'" " " "n" "ru" "(" "          " "\n" "e=
 " "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "true" "'" " " "=
 run" "(" "          " "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h=
 " "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "a" "p" "'" "\n" "|" "#" "\n" =
 ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quote" "(" " " "\"*** =
 ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "               =
                         " "\n" "]" "#t" " " ")" "expected" " " "v" " " "equ=
 al?" "[(" "                                       " "\n" ";[(and (string? e=
 xpected) (string? v)) (list expected v)]" "                                =
        " "\n" "cond" "(" "                                     " "\n" "])" =
 "actual" " " "v" "([" " " "let" "(" "                                   " "=
 \n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " "=
  ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " =
 " ")" "actual" " " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "=
 syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax"=
  "(") ("#" "|" "\n" "\"" "code" " " "k" "c" "e" "h" "c" "\"" "\n" "t" "i" "=
 d" "e" "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p"=
  " " "k" "c" "e" "h" "c" "\"" "\n" "}))" "#f" " " "}" "#t" " " "}" "7" "1" =
 " " "o" "r" "e" "z" "s" "i" "{" " " "r" "bo" "{" " " "r" "o" "b" "{" "'" " =
 " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "=
 b" "d" "(" "\n" "}}))" "x" " " "}" "#t" " " "x" "{" " " "h" "t" "i" "w" "{"=
  " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " =
 " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "b" =
 "d" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "a" "p" "'"=
  "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "                  " "\n" "}=
 }" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" =
 "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "b" "d"=
  "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " "=
  "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" =
 "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" =
 "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e=
 " "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\=
 n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" =
 "z" "is" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8"=
  "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" "=
 {" " " "#t" " " "bif" "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " =
 " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-=
 4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "          " "\n" "e" "ru=
 " "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{"=
  " " "o" "r" "e" "z" "is" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "s=
 " "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "#f" "'" " " "n" "ru=
 " "(" "          " "\n" "false" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))"=
  "t" "#" "'" " " "run" "(" "          " "\n" "true" " " "t" "tes" "-" "t" "=
 b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "pa" "'" "\n=
 " "\n" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" " " =
 "m" "a" "d" "a" " " "r" "o" "f" " " " " ";" ";" ";" ";" ";" ";" ";" ";" ";"=
  ";" ";" ";;" ";" "\n" "|" "#" "\n" "\n" "\"" "code" " " "k" "c" "e" "ch" "=
 \"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "ex" "'" "\n" "\n" "\"" "r" "=
 e" "rs" "a" "p" " " "k" "c" "e" "ch" "\"" "\n" "}))" "e" "s" "l" "a" "f" " =
 " "}" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "=
 r" "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" "=
 e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "db" "(" "\n" "}}))" "x" " " "}" "e=
 " "u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "=
 e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "       =
    " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "db" "(" "\n" "h" "c" "a" "e" =
 "pts-" "3" "-" "-" "-" "3" "t" "r" "pa" "'" "\n" "\n" "}}))" "b" " " "ht" "=
 g" "i" "r" "{" "                  " "\n" "}}" "9" " " "8" " " "r" "i" "a" "=
 p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" "          =
 " "\n" "9" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "7" " " "6" " " "p=
 air" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "          " "\n" "6" " =
 " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4"=
  " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " "=
  "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts=
 -each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{"=
  " " "9" " " "}" "8" " " "o" "r" "e" "z" "s" "i" "{" " " "f" "i" "b" "{" "'=
 " " " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "})=
 )" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "e" "u" "r" "t" " " "f" "i" =
 "b" "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t=
 " "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " "=
  "iszero" "{" "'" " " "run" "(" "          " "\n" "e" "ru" "t" " " "t" "tes=
 " "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "=
 z" "s" "i" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " =
 "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "e" "s" "l" "a" "f" "'" " " "n" "ru=
 " "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" =
 "\n" "))" "true" "'" " " "run" "(" "          " "\n" "true" " " "t" "tes" "=
 -" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "a" =
 "p" "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quot=
 e" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[=
 " "                                       " "\n" "]" "#t" " " ")" "expected=
 " " " "v" " " "equal?" "[(" "                                       " "\n" =
 ";[(and (string? expected) (string? v)) (list expected v)]" "              =
                          " "\n" "cond" "(" "                               =
       " "\n" "])" "actual" " " "v" "([" " " "let" "(" "                    =
                " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "("=
  " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" "=
  " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" "    " "\n" "(=
 )" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" "=
  " "define-syntax" "(") ("#" "|" "\n" "\"" "code" " " "k" "c" "e" "h" "c" "=
 \"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n" "\"" "r=
 " "e" "rs" "a" "p" " " "k" "c" "e" "h" "c" "\"" "\n" "}))" "#f" " " "}" "#t=
 " " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" "bo" "{" " " "r" =
 "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s"=
  "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "x" " " "}" "#t" " " "x" "{" " " "=
 h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" =
 "a" "b" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "es=
 " "t" "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "=
 t" "r" "a" "p" "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "         =
          " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h=
 " "t" "i" "w" "{" "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "=
 t" "-" "t" "b" "d" "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "=
 e" "l" "{" "'" " " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t"=
  "b" "d" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p=
 " "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "l=
 i" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" =
 "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8=
 " " " "o" "r" "e" "z" "is" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "  =
         " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9"=
  " " "8" " " "+" "{" " " "#t" " " "bif" "{" "'" " " "n" "ru" "(" "         =
  " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" =
 " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "      =
     " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" "=
  " "8" " " "+" "{" " " "o" "r" "e" "z" "is" "{" "'" " " "n" "ru" "(" "     =
      " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "#=
 f" "'" " " "n" "ru" "(" "          " "\n" "false" " " "t" "tes" "-" "t" "b"=
  "d" "(" "\n" "))" "t" "#" "'" " " "run" "(" "          " "\n" "true" " " "=
 t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t=
 " "r" "pa" "'" "\n" "\n" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";=
 " ";" ";" ";" " " "m" "a" "d" "a" " " "r" "o" "f" " " " " ";" ";" ";" ";" "=
 ;" ";" ";" ";" ";" ";" ";" ";;" ";" "\n" "|" "#" "\n" "\n" "\"" "code" " " =
 "k" "c" "e" "ch" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "ex" "'" "\=
 n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "ch" "\"" "\n" "}))" "e" =
 "s" "l" "a" "f" " " "}" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "e" "z"=
  "s" "i" "{" " " "r" "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "=
           " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "db" "(" "\n" "}}=
 ))" "x" " " "}" "e" "u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}"=
  "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u=
 " "r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "db" "(" "\n=
 " "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "pa" "'" "\n" "\n" "}}=
 ))" "b" " " "ht" "g" "i" "r" "{" "                  " "\n" "}}" "9" " " "8"=
  " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "r=
 u" "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" =
 "7" " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "     =
      " "\n" "6" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "3" " " "2" "=
  " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          =
 " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d=
 " "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" "=
  " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" "z" "s" "i" "{" " " =
 "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt=
 -tes" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "e" "u" "r=
 " "t" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " =
 " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-=
 4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "          " "\n" "e" "ru=
 " "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{"=
  " " "o" "r" "e" "z" "s" "i" "{" "'" " " "n" "ru" "(" "          " "\n" "e"=
  "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "e" "s" "l" "a" "=
 f" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-=
 " "t" "b" "d" "(" "\n" "))" "true" "'" " " "run" "(" "          " "\n" "tru=
 e" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-=
 " "1" "t" "r" "a" "p" "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" =
 "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format"=
  "(" " " "else" "[" "                                       " "\n" "]" "#t"=
  " " ")" "expected" " " "v" " " "equal?" "[(" "                            =
            " "\n" ";[(and (string? expected) (string? v)) (list expected v)=
 ]" "                                       " "\n" "cond" "(" "             =
                         " "\n" "])" "actual" " " "v" "([" " " "let" "(" "  =
                                  " "\n" "])" "exn-message" " " ")))" "x" " =
 " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "wi=
 th-handlers" "(" " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "=
 [(" "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " =
 " "dbt-test" "(" " " "define-syntax" "(") ("#" "|" "\n" "\"" "code" " " "k"=
  "c" "e" "h" "c" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "x" "e" "'"=
  "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "h" "c" "\"" "\n" "}))=
 " "#f" " " "}" "#t" " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r"=
  "bo" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" "e" "u=
 " "tr" " " "t" "s" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "x" " " "}" "#t"=
  " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i=
 " "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e"=
  "tru" " " "t" "es" "t" "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "pts-" "3"=
  "-" "-" "-" "3" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" =
 "r" "{" "                  " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" =
 " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" "          " "\n" =
 "9" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "7" " " "6" " " "pair"=
  "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "          " "\n" "6" " " "s=
 t" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" =
 " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " " =
 "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-=
 each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" =
 " " "9" " " "}" "8" " " "o" "r" "e" "z" "is" "{" " " "f" "i" "b" "{" "'" " =
 " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "=
 0" "1" " " "}" "9" " " "8" " " "+" "{" " " "#t" " " "bif" "{" "'" " " "n" "=
 ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}=
 }}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " "=
  "run" "(" "          " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "d" "("=
  "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" "is" "{" "'" " " "=
 n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d=
 " "(" "\n" "))" "#f" "'" " " "n" "ru" "(" "          " "\n" "false" " " "t"=
  "tes" "-" "t" "b" "d" "(" "\n" "))" "t" "#" "'" " " "run" "(" "          "=
  "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" =
 "-" "-" "-" "1" "t" "r" "pa" "'" "\n" "\n" ";" ";" ";" ";" ";" ";" ";" ";" =
 ";" ";" ";" ";" ";" ";" ";" ";" " " "m" "a" "d" "a" " " "r" "o" "f" " " " "=
  ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";;" ";" "\n" "|" "#" "\n" "\n=
 " "\"" "code" " " "k" "c" "e" "ch" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "=
 r" "t" "ex" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "ch" "\=
 "" "\n" "}))" "e" "s" "l" "a" "f" " " "}" "e" "u" "r" "t" " " "}" "7" "1" "=
  " "o" "r" "e" "z" "s" "i" "{" " " "r" "o" "b" "{" " " "r" "o" "b" "{" "'" =
 " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t"=
  "db" "(" "\n" "}}))" "x" " " "}" "e" "u" "r" "t" " " "x" "{" " " "h" "t" "=
 i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" =
 "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-=
 " "t" "db" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "pa"=
  "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "                  " "\n=
 " "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" =
 "{" "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "db=
 " "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " =
 " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}=
 }))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "r=
 u" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e" =
 "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n"=
  "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" "z=
 " "s" "i" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8=
 " "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" =
 "{" " " "e" "u" "r" "t" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "         =
  " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" =
 " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "      =
     " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" "=
  " "8" " " "+" "{" " " "o" "r" "e" "z" "s" "i" "{" "'" " " "n" "ru" "(" "  =
         " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))"=
  "e" "s" "l" "a" "f" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f=
 " " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "true" "'" " " "run" "(" "   =
        " "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" =
 "p" "1" "-" "-" "-" "1" "t" "r" "a" "p" "'" "\n" "\n" ")]))))]))" "v" " " "=
 expected" " " ")" "actual" " " "quote" "(" " " "\"*** ~s: expected ~a, got =
 ~a\"" " " "format" "(" " " "else" "[" "                                    =
    " "\n" "]" "#t" " " ")" "expected" " " "v" " " "equal?" "[(" "          =
                              " "\n" ";[(and (string? expected) (string? v))=
  (list expected v)]" "                                       " "\n" "cond" =
 "(" "                                     " "\n" "])" "actual" " " "v" "(["=
  " " "let" "(" "                                   " "\n" "])" "exn-message=
 " " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lam=
 bda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " ")" "actual" " " "e=
 xpected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  "=
  "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(") ("#" "|" "\n" "=
 \"" "code" " " "k" "c" "e" "h" "c" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "=
 r" "t" "x" "e" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "h" =
 "c" "\"" "\n" "}))" "#f" " " "}" "#t" " " "}" "7" "1" " " "o" "r" "e" "z" "=
 s" "i" "{" " " "r" "bo" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "     =
      " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))=
 " "x" " " "}" "#t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" =
 "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "  =
         " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "b" "d" "(" "\n" "h" "c" =
 "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "b"=
  " " "ht" "g" "i" "r" "{" "                  " "\n" "}}" "9" " " "8" " " "r=
 " "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" =
 "          " "\n" "9" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "7" =
 " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "         =
  " "\n" "6" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}))" "3" " " "2" " =
 " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          "=
  "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d"=
  "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " =
 " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" "z" "is" "{" " " "f" =
 "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-tes=
 " "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "#t" " " "bif"=
  "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "=
 b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "i=
 szero" "{" "'" " " "run" "(" "          " "\n" "e" "ru" "t" " " "t" "tes" "=
 -" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" =
 "is" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "t=
 es" "-" "t" "b" "d" "(" "\n" "))" "#f" "'" " " "n" "ru" "(" "          " "\=
 n" "false" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "t" "#" "'" " " "run=
 " "(" "          " "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "=
 eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "pa" "'" "\n" "\n" ";" ";" ";" ";=
 " ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" " " "m" "a" "d" "a" " " "=
 r" "o" "f" " " " " ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";;" ";" "\n=
 " "|" "#" "\n" "\n" "\"" "code" " " "k" "c" "e" "ch" "\"" "\n" "t" "i" "d" =
 "e" "r" "-c" "a" "r" "t" "ex" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " " "=
 k" "c" "e" "ch" "\"" "\n" "}))" "e" "s" "l" "a" "f" " " "}" "e" "u" "r" "t"=
  " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" "o" "b" "{" " " "r=
 " "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "=
 s" "e" "t" "-" "t" "db" "(" "\n" "}}))" "x" " " "}" "e" "u" "r" "t" " " "x"=
  "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " =
 " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "tru" "=
  " "t" "es" "t" "-" "t" "db" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-=
 " "3" "t" "r" "pa" "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "     =
              " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " =
 " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "=
 e" "t" "-" "t" "db" "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" =
 "e" "l" "{" "'" " " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t=
 " "db" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" =
 "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li"=
  "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r=
 " "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" =
 " " "o" "r" "e" "z" "s" "i" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" " =
          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9=
 " " " "8" " " "+" "{" " " "e" "u" "r" "t" " " "f" "i" "b" "{" "'" " " "n" "=
 ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}=
 }}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " "=
  "run" "(" "          " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "d" "("=
  "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" "s" "i" "{" "'" " =
 " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b"=
  "d" "(" "\n" "))" "e" "s" "l" "a" "f" "'" " " "n" "ru" "(" "          " "\=
 n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "true" "'" =
 " " "run" "(" "          " "\n" "true" " " "t" "tes" "-" "t" "b" "d" "(" "\=
 n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "a" "p" "'" "\n" "\n" ")]=
 ))))]))" "v" " " "expected" " " ")" "actual" " " "quote" "(" " " "\"*** ~s:=
  expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "                  =
                      " "\n" "]" "#t" " " ")" "expected" " " "v" " " "equal?=
 " "[(" "                                       " "\n" ";[(and (string? expe=
 cted) (string? v)) (list expected v)]" "                                   =
     " "\n" "cond" "(" "                                     " "\n" "])" "ac=
 tual" " " "v" "([" " " "let" "(" "                                   " "\n"=
  "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")=
 " "x" "(" " " "lambda" "([(" " " "with-handlers" "(" " " "syntax" "(" " " "=
 )" "actual" " " "expected" " " "_" "[(" "    " "\n" "()" " " "stx" " " "syn=
 tax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " "define-syntax" "(=
 ") ("#" "|" "\n" "\"" "code" " " "k" "c" "e" "h" "c" "\"" "\n" "t" "i" "d" =
 "e" "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n" "\"" "r" "e" "rs" "a" "p" " =
 " "k" "c" "e" "h" "c" "\"" "\n" "}))" "#f" " " "}" "#t" " " "}" "7" "1" " "=
  "o" "r" "e" "z" "s" "i" "{" " " "r" "bo" "{" " " "r" "o" "b" "{" "'" " " "=
 un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "b" =
 "d" "(" "\n" "}}))" "x" " " "}" "#t" " " "x" "{" " " "h" "t" "i" "w" "{" " =
 " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "=
 n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "b" "d"=
  "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "a" "p" "'" "\=
 n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "                  " "\n" "}}" =
 "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'"=
  " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "b" "d" "(=
 " "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " " "r=
 un" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "}}=
 ))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "ru=
 " "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e" "=
 t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n" =
 "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" "z"=
  "is" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8" "1=
 " " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" "{" =
 " " "#t" " " "bif" "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " "=
 t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" =
 " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "          " "\n" "e" "ru" "=
 t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " =
 " "o" "r" "e" "z" "is" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "=
 al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "#f" "'" " " "n" "ru" "=
 (" "          " "\n" "false" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "t=
 " "#" "'" " " "run" "(" "          " "\n" "true" " " "t" "tes" "-" "t" "b" =
 "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "pa" "'" "\n" "=
 \n" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" " " "m"=
  "a" "d" "a" " " "r" "o" "f" " " " " ";" ";" ";" ";" ";" ";" ";" ";" ";" ";=
 " ";" ";;" ";" "\n" "|" "#" "\n" "\n" "\"" "code" " " "k" "c" "e" "ch" "\""=
  "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "ex" "'" "\n" "\n" "\"" "r" "e" =
 "rs" "a" "p" " " "k" "c" "e" "ch" "\"" "\n" "}))" "e" "s" "l" "a" "f" " " "=
 }" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" =
 "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "          " "\n" "e" =
 "u" "tr" " " "t" "s" "e" "t" "-" "t" "db" "(" "\n" "}}))" "x" " " "}" "e" "=
 u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" =
 "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "r" "(" "          =
 " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "db" "(" "\n" "h" "c" "a" "e" "pt=
 s-" "3" "-" "-" "-" "3" "t" "r" "pa" "'" "\n" "\n" "}}))" "b" " " "ht" "g" =
 "i" "r" "{" "                  " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" =
 "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" "(" "          " "=
 \n" "9" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "7" " " "6" " " "pair=
 " "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "          " "\n" "6" " " "=
 st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" " =
 " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " " "4=
 " " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-ea=
 ch" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " =
 " "9" " " "}" "8" " " "o" "r" "e" "z" "s" "i" "{" " " "f" "i" "b" "{" "'" "=
  " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" =
 "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "e" "u" "r" "t" " " "f" "i" "b"=
  "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " "t" "tes" "-" "t" "=
 b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" " " "+" "{" " " "i=
 szero" "{" "'" " " "run" "(" "          " "\n" "e" "ru" "t" " " "t" "tes" "=
 -" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " " "o" "r" "e" "z" =
 "s" "i" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t"=
  "tes" "-" "t" "b" "d" "(" "\n" "))" "e" "s" "l" "a" "f" "'" " " "n" "ru" "=
 (" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n=
 " "))" "true" "'" " " "run" "(" "          " "\n" "true" " " "t" "tes" "-" =
 "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "r" "a" "p"=
  "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "actual" " " "quote" =
 "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(" " " "else" "[" "=
                                        " "\n" "]" "#t" " " ")" "expected" "=
  " "v" " " "equal?" "[(" "                                       " "\n" ";[=
 (and (string? expected) (string? v)) (list expected v)]" "                 =
                       " "\n" "cond" "(" "                                  =
    " "\n" "])" "actual" " " "v" "([" " " "let" "(" "                       =
             " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " =
 " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" " " =
 "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[(" "    " "\n" "()" =
 " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "dbt-test" "(" " " =
 "define-syntax" "(") ("#" "|" "\n" "\"" "code" " " "k" "c" "e" "h" "c" "\""=
  "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "x" "e" "'" "\n" "\n" "\"" "r" "=
 e" "rs" "a" "p" " " "k" "c" "e" "h" "c" "\"" "\n" "}))" "#f" " " "}" "#t" "=
  " "}" "7" "1" " " "o" "r" "e" "z" "s" "i" "{" " " "r" "bo" "{" " " "r" "o"=
  "b" "{" "'" " " "un" "r" "(" "          " "\n" "e" "u" "tr" " " "t" "s" "e=
 " "t" "-" "t" "b" "d" "(" "\n" "}}))" "x" " " "}" "#t" " " "x" "{" " " "h" =
 "t" "i" "w" "{" " " "}" "0" " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a"=
  "b" "{" "'" " " "n" "u" "r" "(" "          " "\n" "e" "tru" " " "t" "es" "=
 t" "-" "t" "b" "d" "(" "\n" "h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" =
 "r" "a" "p" "'" "\n" "\n" "}}))" "b" " " "ht" "g" "i" "r" "{" "            =
       " "\n" "}}" "9" " " "8" " " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "=
 t" "i" "w" "{" "'" " " "n" "ru" "(" "          " "\n" "9" " " "st" "e" "t" =
 "-" "t" "b" "d" "(" "\n" "}}))" "7" " " "6" " " "pair" "{" " " "t" "f" "e" =
 "l" "{" "'" " " "run" "(" "          " "\n" "6" " " "st" "e" "t" "-" "t" "b=
 " "d" "(" "\n" "}}))" "3" " " "2" " " "+" "{" " " "4" " " "r" "i" "a" "p" "=
 {" "'" " " "n" "ru" "(" "          " "\n" ")" "5" " " "4" " " "t" "s" "li" =
 "(" " " "st" "e" "t" "-" "t" "b" "d" "(" "\n" "--2pts-each" "-" "2" "t" "r"=
  "a" "p" "'" "\n" "\n" "}}))" "9" " " "9" " " "+" "{" " " "9" " " "}" "8" "=
  " "o" "r" "e" "z" "is" "{" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "     =
      " "\n" "8" "1" " " "t" "dbt-tes" "(" "\n" "}))" "0" "1" " " "}" "9" " =
 " "8" " " "+" "{" " " "#t" " " "bif" "{" "'" " " "n" "ru" "(" "          " =
 "\n" "7" "1" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " "=
  "+" "{" " " "-4" " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "         =
  " "\n" "e" "ru" "t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " =
 "8" " " "+" "{" " " "o" "r" "e" "z" "is" "{" "'" " " "n" "ru" "(" "        =
   " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "#f" =
 "'" " " "n" "ru" "(" "          " "\n" "false" " " "t" "tes" "-" "t" "b" "d=
 " "(" "\n" "))" "t" "#" "'" " " "run" "(" "          " "\n" "true" " " "t" =
 "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "1" "t" "=
 r" "pa" "'" "\n" "\n" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" ";" "=
 ;" ";" ";" " " "m" "a" "d" "a" " " "r" "o" "f" " " " " ";" ";" ";" ";" ";" =
 ";" ";" ";" ";" ";" ";" ";;" ";" "\n" "|" "#" "\n" "\n" "\"" "code" " " "k"=
  "c" "e" "ch" "\"" "\n" "t" "i" "d" "e" "r" "-c" "a" "r" "t" "ex" "'" "\n" =
 "\n" "\"" "r" "e" "rs" "a" "p" " " "k" "c" "e" "ch" "\"" "\n" "}))" "e" "s"=
  "l" "a" "f" " " "}" "e" "u" "r" "t" " " "}" "7" "1" " " "o" "r" "e" "z" "s=
 " "i" "{" " " "r" "o" "b" "{" " " "r" "o" "b" "{" "'" " " "un" "r" "(" "   =
        " "\n" "e" "u" "tr" " " "t" "s" "e" "t" "-" "t" "db" "(" "\n" "}}))"=
  "x" " " "}" "e" "u" "r" "t" " " "x" "{" " " "h" "t" "i" "w" "{" " " "}" "0=
 " " " "o" "r" "e" "z" "s" "i" "{" " " "d" "n" "a" "b" "{" "'" " " "n" "u" "=
 r" "(" "          " "\n" "e" "tru" " " "t" "es" "t" "-" "t" "db" "(" "\n" "=
 h" "c" "a" "e" "pts-" "3" "-" "-" "-" "3" "t" "r" "pa" "'" "\n" "\n" "}}))"=
  "b" " " "ht" "g" "i" "r" "{" "                  " "\n" "}}" "9" " " "8" " =
 " "r" "i" "a" "p" "{" " " "b" "{" " " "h" "t" "i" "w" "{" "'" " " "n" "ru" =
 "(" "          " "\n" "9" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "7"=
  " " "6" " " "pair" "{" " " "t" "f" "e" "l" "{" "'" " " "run" "(" "        =
   " "\n" "6" " " "st" "e" "t" "-" "t" "db" "(" "\n" "}}))" "3" " " "2" " " =
 "+" "{" " " "4" " " "r" "i" "a" "p" "{" "'" " " "n" "ru" "(" "          " "=
 \n" ")" "5" " " "4" " " "t" "s" "li" "(" " " "st" "e" "t" "-" "t" "b" "d" "=
 (" "\n" "--2pts-each" "-" "2" "t" "r" "a" "p" "'" "\n" "\n" "}}))" "9" " " =
 "9" " " "+" "{" " " "9" " " "}" "8" " " "o" "r" "e" "z" "s" "i" "{" " " "f"=
  "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "8" "1" " " "t" "dbt-te=
 s" "(" "\n" "}))" "0" "1" " " "}" "9" " " "8" " " "+" "{" " " "e" "u" "r" "=
 t" " " "f" "i" "b" "{" "'" " " "n" "ru" "(" "          " "\n" "7" "1" " " "=
 t" "tes" "-" "t" "b" "d" "(" "\n" "}}}))" "3" " " "1" " " "+" "{" " " "-4" =
 " " "+" "{" " " "iszero" "{" "'" " " "run" "(" "          " "\n" "e" "ru" "=
 t" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "}}))" "4" " " "8" " " "+" "{" " =
 " "o" "r" "e" "z" "s" "i" "{" "'" " " "n" "ru" "(" "          " "\n" "e" "s=
 " "al" "f" " " "t" "tes" "-" "t" "b" "d" "(" "\n" "))" "e" "s" "l" "a" "f" =
 "'" " " "n" "ru" "(" "          " "\n" "e" "s" "al" "f" " " "t" "tes" "-" "=
 t" "b" "d" "(" "\n" "))" "true" "'" " " "run" "(" "          " "\n" "true" =
 " " "t" "tes" "-" "t" "b" "d" "(" "\n" "h" "eac" "t-" "p" "1" "-" "-" "-" "=
 1" "t" "r" "a" "p" "'" "\n" "\n" ")]))))]))" "v" " " "expected" " " ")" "ac=
 tual" " " "quote" "(" " " "\"*** ~s: expected ~a, got ~a\"" " " "format" "(=
 " " " "else" "[" "                                       " "\n" "]" "#t" " =
 " ")" "expected" " " "v" " " "equal?" "[(" "                               =
         " "\n" ";[(and (string? expected) (string? v)) (list expected v)]" =
 "                                       " "\n" "cond" "(" "                =
                      " "\n" "])" "actual" " " "v" "([" " " "let" "(" "     =
                               " "\n" "])" "exn-message" " " ")))" "x" " " "=
 exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-=
 handlers" "(" " " "syntax" "(" " " ")" "actual" " " "expected" " " "_" "[("=
  "    " "\n" "()" " " "stx" " " "syntax-case" "(" "  " "\n" ")" "stx" " " "=
 dbt-test" "(" " " "define-syntax" "(") ("\n" ")" "f" "ex1" " " "f" " " "t" =
 "(" "\n" ")" "e" "1" "x" "e" " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " "d"=
  " " "t" "(" "\n" ")" "c" "1" "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "1" =
 "x" "e" " " "b" " " "t" "(" "\n" ")" "1a" "x" "e" " " "a" " " "t" "(" "\n" =
 "\n" ")))" "p" "x" "e" "s" " " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" " " =
 "n" "u" "r" "(" " " ")" "sexp" " " "interp" " " "run" "(" " " "t" "s" "i" "=
 l" "(" "  " "\n" ")" "p" "x" "e" "s" " " "d" "o" "m" "/" "rp" "e" "t" "in" =
 " " "t" "(" " " "define" "(" "\n" "\n" "\n" ")]))" "store" " " "env" " " "e=
 xpr" " " "f" " " "make-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" ")])=
 ])]" "arg-store" "                               " "\n" "))" "fun-value" " =
 " "closureV-env" "(" "                                     " "\n" "arg-valu=
 e" "                                     " "\n" ")" "fun-value" " " "closur=
 eV-param" "(" " " "aSub" "(" "                               " "\n" ")" "fu=
 n-value" " " "closureV-body" "(" " " "interp" "(" "                       "=
  "\n" ")" "arg-store" " " "fun-value" "(" " " "v*s" "[" "                  =
 " "\n" ")" "fun-store" " " "env" " " "fun-expr" " " "interp" "(" " " "Value=
 *Store" " " "type-case" "(" "                " "\n" ")" "fun-store" " " "ar=
 g-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "ar=
 g-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " =
 "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" "r" "p" "x=
 " "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "to" "s" " " "v" "=
 n" "e" " " "expr" " " "f" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]=
 ))" "store" " " "env" " " "expr" " " "e" " " "make-interp" "(" " " "else" "=
 [" "    " "\n" ")])])]" "r-store" " " ")" "r-value" " " "l-value" " " "num+=
 " "(" " " "v*s" "(" "                       " "\n" ")" "r-store" " " "r-val=
 ue" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" " " "env" " "=
  "l" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "              =
   " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           " "\n" "=
 )" "store" " " "env" " " "r" " " "interp" "(" " " "Value*Store" " " "type-c=
 ase" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" "r"=
  "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "t" "s"=
  " " "v" "n" "e" " " "expr" " " "e" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n=
 " "\n" ")]))" "store" " " "env" " " "expr" " " "d" " " "make-interp" "(" " =
 " "e" "s" "l" "e" "[" "    " "\n" "))])]" "store" " " "env" " " "falsity" "=
  " "interp" "(" "                    " "\n" ")" "test-store" " " "env" " " =
 "truth" " " "interp" "(" "                    " "\n" ")" "test-value" " " "=
 num-zero?" "(" " " "if" "(" "                " "\n" ")" "test-store" " " "t=
 est-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "=
 test" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\=
 n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" "expr=
 " " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "to" "s" " " "v" "n" "=
 e" " " "expr" " " "d" "(" " " "e" "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "st=
 ore" " " "env" " " "expr" " " "c" " " "make-interp" "(" " " "se" "l" "e" "[=
 " "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "bound-body" " " "bound-i=
 d" " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bou=
 nd-id" "(" " " "fun" "[" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-=
 case" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "en" " " "expr" " " "c" "(=
 " " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "e=
 xpr" " " "b" " " "-interp" "e" "mak" "(" " " "se" "l" "e" "[" "    " "\n" "=
 ))]" "mtSto" "(" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" "=
  " ")" "v" "(" " " "id" "[" "    " "\n" "r" "p" "x" "e" " " "CFAE" "B" " " =
 "e" "s" "-ca" "e" "p" "y" "t" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n=
 " "e" " " "r" "p" "x" "e" " " "b" "(" " " "define" "(" "\n" "\n" ")]))" "st=
 ore" " " "env" " " "expr" " " "a" " " "e-interp" "k" "a" "m" "(" " " "se" "=
 l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "n" " " "numV" "(" " " "v*=
 s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "r" "p" "x" "e" " " "CFAE"=
  "B" " " "type-case" "(" "  " "\n" ")" "e" "r" "o" "t" "s" " " "v" "n" "e" =
 " " "expr" " " "a" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" "))" "e" "=
 r" "to" "s" " " "v" "n" "e" " " "r" "p" "x" "e" " " "interp" " " "p" "r" "e=
 " "t" "n" "i" "-" "e" "k" "a" "m" "(" "  " "\n" ")" "e" "r" "o" "t" "s" " "=
  "v" "n" "e" " " "r" "p" "ex" " " "p" "r" "e" "t" "n" "i" "(" " " "e" "n" "=
 i" "f" "e" "d" "(" "\n" "\n" ")])))" "value" " " "show" "(" " " ")" "store"=
  " " "value" "(" " " "v*s" "[" "      " "\n" "))" "mtSto" "(" " " ")" "mtSu=
 b" "(" " " ")" "sexp" " " "parse" "(" " " "interp" "(" " " "Value*Store" " =
 " "type-case" "(" "    " "\n" "])" "exn-message" " " ")))" "x" " " "exn:bre=
 ak?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handler=
 s" "(" "  " "\n" ")" "sexp" " " "rp" "te" "n" "i" " " "run" "(" " " "define=
 " "(" "\n" ";; run : S-expression -> S-expression" "\n" "\n" "]))" "<box>" =
 "'" " " ")" "location" "(" " " "boxV" "[" "    " "\n" "]" "<closure>" "'" "=
  " ")" "env" " " "body" " " "param" "(" " " "closureV" "[" "    " "\n" "]" =
 "n" " " ")" "n" "(" " " "numV" "[" "    " "\n" "value" " " "BCFAE-Value" " =
 " "type-case" "(" "  " "\n" ")" "value" " " "show" "(" " " "define" "(" "\n=
 " ";; show : BCFAE-Value -> S-expression" "\n" "\n" ")])]))" "e1-store" " "=
  "env" " " "e2" " " "interp" "(" "                 " "\n" ")" "e1-store" " =
 " "e1-value" "(" " " "v*s" "[" "            " "\n" ")" "store" " " "env" " =
 " "e1" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "          " =
 "\n" ")" "e2" " " "e1" "(" " " "seqn" "[" "    " "\n" ")])]" "box-store" " =
                         " "\n" ")" "box-store" "                           =
             " "\n" ")" "box-value" " " "boxV-location" "(" " " "store-looku=
 p" "(" " " "v*s" "(" "                    " "\n" ")" "box-store" " " "box-v=
 alue" "(" " " "v*s" "[" "               " "\n" ")" "store" " " "env" " " "b=
 ox-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "          =
    " "\n" ")" "box-expr" "(" " " "openbox" "[" "    " "\n" "))])])]" "value=
 -store" "                                             " "\n" "value-value" =
 "                                             " "\n" ")" "box-value" " " "b=
 oxV-location" "(" " " "update-store" "(" "                               " =
 "\n" "value-value" " " "v*s" "(" "                          " "\n" ")" "val=
 ue-store" " " "value-value" "(" " " "v*s" "[" "                     " "\n" =
 ")" "box-store" " " "env" " " "value-expr" " " "interp" "(" " " "Value*Stor=
 e" " " "type-case" "(" "                   " "\n" ")" "box-store" " " "box-=
 value" "(" " " "v*s" "[" "              " "\n" ")" "store" " " "env" " " "b=
 ox-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "          =
   " "\n" ")" "value-expr" " " "box-expr" "(" " " "setbox" "[" "    " "\n" "=
 )))])]" "expr-store" " " "expr-value" " " "new-loc" " " "aSto" "(" "       =
                    " "\n" ")" "new-loc" " " "boxV" "(" " " "v*s" "(" "     =
                 " "\n" ")])" "expr-store" " " "next-location" "(" " " "new-=
 loc" " " "define" "([" " " "local" "(" "                   " "\n" ")" "expr=
 -store" " " "expr-value" "(" " " "v*s" "[" "              " "\n" ")" "store=
 " " " "env" " " "value-expr" " " "interp" "(" " " "Value*Store" " " "type-c=
 ase" "(" "            " "\n" ")" "value-expr" "(" " " "newbox" "[" "    " "=
 \n" "))])]" "test-store" " " "env" " " "falsity" " " "interp" "(" "        =
             " "\n" ")" "test-store" " " "env" " " "truth" " " "interp" "(" =
 "                    " "\n" ")" "test-value" " " "num-zero?" "(" " " "if" "=
 (" "                " "\n" ")" "test-store" " " "test-value" "(" " " "v*s" =
 "[" "           " "\n" ")" "store" " " "env" " " "test" " " "interp" "(" " =
 " "Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity" " " "tru=
 th" " " "test" "(" " " "if0" "[" "    " "\n" ")])])]" "arg-store" "        =
                        " "\n" "))" "fun-value" " " "closureV-env" "(" "    =
                                  " "\n" "arg-value" "                      =
                " "\n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "=
 (" "                               " "\n" ")" "fun-value" " " "closureV-bod=
 y" "(" " " "interp" "(" "                       " "\n" ")" "arg-store" " " =
 "arg-value" "(" " " "v*s" "[" "                  " "\n" ")" "fun-store" " "=
  "env" " " "arg-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(=
 " "                " "\n" ")" "fun-store" " " "fun-value" "(" " " "v*s" "["=
  "           " "\n" ")" "store" " " "env" " " "fun-expr" " " "interp" "(" "=
  " "Value*Store" " " "type-case" "(" "         " "\n" ")" "arg-expr" " " "f=
 un-expr" "(" " " "app" "[" "    " "\n" ")]" "store" " " ")" "env" " " "boun=
 d-body" " " "bound-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "=
 bound-body" " " "bound-id" "(" " " "fun" "[" "    " "\n" ")]" "store" " " "=
 )" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id=
 " "[" "    " "\n" ")])])]" "r-store" "                            " "\n" ")=
 " "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "                   =
     " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "                 =
  " "\n" ")" "l-store" " " "env" " " "r" " " "interp" "(" " " "Value*Store" =
 " " "type-case" "(" "                " "\n" ")" "l-store" " " "l-value" "("=
  " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "l" " " "interp=
 " "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "r" " " "l=
 " "(" " " "add" "[" "    " "\n" ")]" "store" " " ")" "n" " " "numV" "(" " "=
  "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "expr" " " "BCFAE" " "=
  "type-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "p" "r" "e"=
  "t" "n" "i" " " "-interp" "e" "k" "a" "m" "(" " " "define" "(" "\n" "inter=
 p : BCFAE Env Store -> Value*Store" "-" "e" "k" "a" "m" ";; " "\n" "\n" "))=
 )" "n" " " "numV-n" "(" " " "zero?" "(" "  " "\n" ")" "n" " " "num-zero?" "=
 (" " " "define" "(" "\n" ";; num-zero? : numV -> boolean" "\n" "\n" "))))" =
 "n2" " " "numV-n" "(" " " ")" "n1" " " "numV-n" "(" " " "+" "(" " " "numV" =
 "(" "  " "\n" ")" "n2" " " "n1" " " "num+" "(" " " "define" "(" "\n" ";; nu=
 m+ : numV numV -> numV" "\n" "\n" ")))]))" "rest-store" " " "new-value" " "=
  "loc-index" " " "update-store" "(" " " "value" " " "location" " " "aSto" "=
 (" "              " "\n" ")" "rest-store" " " "new-value" " " "location" " =
 " "aSto" "(" "              " "\n" ")" "loc-index" " " "location" " " "=3D"=
  "(" " " "if" "(" "          " "\n" ")" "rest-store" " " "value" " " "locat=
 ion" "(" " " "aSto" "[" "    " "\n" ")]" "\"no such location\"" " " "update=
 -store" "'" " " "error" "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " =
 "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "new-value" " " "loc-in=
 dex" " " "update-store" "(" " " "define" "(" "\n" ";; update-store : number=
  BCFAE-Value Store -> STore" "\n" "\n" ")]))" "location" " " "1" " " "+" "(=
 " " " ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "[" "    "=
  "\n" "]" "0" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "t=
 ype-case" "(" "  " "\n" ")" "sto" " " "next-location" "(" " " "define" "(" =
 "\n" ";; next-location : Store -> number" "\n" "\n" "))]))" "rest-store" " =
 " "loc-index" " " "store-lookup" "(" "              " "\n" "value" "       =
        " "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if" "(" "  =
         " "\n" ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "=
 [" "    " "\n" ")]" "\"no value at location\"" " " "store-lookup" "'" " " "=
 error" "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type=
 -case" "(" "  " "\n" ")" "sto" " " "loc-index" " " "store-lookup" "(" " " "=
 define" "(" "\n" ";; store-lookup : number Store -> BCFAE-Value" "\n" "\n" =
 "))]))" "rest-env" " " "name" " " "env-lookup" "(" "              " "\n" "b=
 ound-value" "              " "\n" ")" "name" " " "bound-name" " " "symbol=
 =3D?" "(" " " "if" "(" "          " "\n" ")" "rest-env" " " "bound-value" "=
  " "bound-name" "(" " " "aSub" "[" "    " "\n" ")]" "\"no binding for ident=
 ifier\"" " " "env-lookup" "'" " " "error" "(" " " "()" " " "mtSub" "[" "   =
  " "\n" "env" " " "Env" " " "type-case" "(" "  " "\n" ")" "env" " " "name" =
 " " "env-lookup" "(" " " "define" "(" "\n" ";; env-lookup : symbol Env -> B=
 CFAE-Value" "\n" "\n" ")))])]))" "sexp" " " "second" "(" " " "parse" "(" " =
 " "))" "sexp" " " "first" "(" " " "parse" "(" " " "app" "(" " " "else" "[" =
 "                    " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" "=
  " "))" "sexp" " " "second" "(" " " "parse" "(" " " "seqn" "(" " " ")" "seq=
 n" "[(" "                    " "\n" ")))]" "sexp" " " "second" "(" " " "par=
 se" "(" " " "openbox" "(" " " ")" "openbox" "[(" "                    " "\n=
 " ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second=
 " "(" " " "parse" "(" " " "setbox" "(" " " ")" "setbox" "[(" "             =
        " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "newbox" "=
 (" " " ")" "newbox" "[(" "                    " "\n" ")))]" "sexp" " " "fou=
 rth" "(" " " "parse" "(" "                                " "\n" "))" "sexp=
 " " " "third" "(" " " "parse" "(" "                                " "\n" "=
 ))" "sexp" " " "second" "(" " " "parse" "(" " " "if0" "(" " " ")" "if0" "[(=
 " "                    " "\n" "))))]" "sexp" " " "second" "(" " " "second" =
 "(" " " "parse" "(" "                                 " "\n" ")))" "sexp" "=
  " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "first"=
  "(" " " "fun" "(" " " "app" "(" " " ")" "with" "[(" "                    "=
  "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "se=
 cond" "(" " " "first" "(" " " "fun" "(" " " ")" "fun" "[(" "               =
      " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" "=
  " "second" "(" " " "parse" "(" " " "add" "(" " " ")" "+" "[(" "           =
          " "\n" ")" "sexp" " " "first" "(" " " "case" "(" " " ")" "sexp" " =
 " "list?" "[(" "    " "\n" ")]" "sexp" " " "id" "(" " " ")" "sexp" " " "sym=
 bol?" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "number=
 ?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "parse" "(" " " "de=
 fine" "(" "\n" ";; parse : S-expression -> BCFAE" "\n" "\n" ")])" "Store?" =
 " " "store" "(" " " ")" "BCFAE-Value?" " " "value" "(" " " "v*s" "[" "  " "=
 \n" "Value*Store" " " "define-type" "(" "\n" "\n" ")])" "Store?" " " "store=
 " "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" ")=
 " "number?" " " "location" "(" " " "aSto" "[" "  " "\n" "]" "mtSto" "[" "  =
 " "\n" "Store" " " "define-type" "(" "\n" "\n" ")])" "Env?" " " "env" "(" "=
         " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" ")" "symb=
 ol?" " " "name" "(" " " "aSub" "[" "  " "\n" "]" "mtSub" "[" "  " "\n" "Env=
 " " " "define-type" "(" "\n" "\n" ")])" "number?" " " "location" "(" " " "b=
 oxV" "[" "  " "\n" ")]" "Env?" " " "env" "(" " " ")" "BCFAE?" " " "body" "(=
 " " " ")" "symbol?" " " "param" "(" " " "closureV" "[" "  " "\n" ")]" "numb=
 er?" " " "n" "(" " " "numV" "[" "  " "\n" "BCFAE-Value" " " "define-type" "=
 (" "\n" "\n" ")])" "BCFAE?" " " "e2" "(" " " ")" "BCFAE?" " " "e1" "(" " " =
 "seqn" "[" "  " "\n" ")]" "BCFAE?" " " "box-expr" "(" " " "openbox" "[" "  =
 " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " ")" "BCFAE?" " " "box-expr" "=
 (" " " "setbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " "newbo=
 x" "[" "  " "\n" ")]" "BCFAE?" " " "falsity" "(" " " ")" "BCFAE?" " " "trut=
 h" "(" " " ")" "BCFAE?" " " "test" "(" " " "if0" "[" "  " "\n" ")]" "BCFAE?=
 " " " "arg-expr" "(" " " ")" "BCFAE?" " " "fun-expr" "(" " " "app" "[" "  "=
  "\n" ")]" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" "(" " " "f=
 un" "[" "  " "\n" ")]" "symbol?" " " "name" "(" " " "id" "[" "  " "\n" ")]"=
  "BCFAE?" " " "rhs" "(" " " ")" "BCFAE?" " " "lhs" "(" " " "add" "[" "  " "=
 \n" ")]" "number?" " " "n" "(" " " "num" "[" "  " "\n" "BCFAE" " " "define-=
 type" "(") ("\n" ")" "f" "ex1" " " "f" " " "t" "(" "\n" ")" "e" "1" "x" "e"=
  " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " "d" " " "t" "(" "\n" ")" "c" "1=
 " "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "1" "x" "e" " " "b" " " "t" "(" =
 "\n" ")" "1a" "x" "e" " " "a" " " "t" "(" "\n" "\n" ")))" "p" "x" "e" "s" "=
  " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" " " "un" "r" "(" " " ")" "sexp" =
 " " "interp" " " "run" "(" " " "t" "s" "i" "l" "(" "  " "\n" ")" "xp" "e" "=
 s" " " "d" "o" "m" "/" "rp" "e" "t" "in" " " "t" "(" " " "define" "(" "\n" =
 "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "f" " " "make-interp" "("=
  " " "e" "s" "l" "e" "[" "    " "\n" ")])])]" "arg-store" "                =
           " "\n" "))" "fun-value" " " "closureV-env" "(" "                 =
                " "\n" "arg-value" "                                " "\n" "=
 )" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "                   =
        " "\n" ")" "fun-value" " " "closureV-body" "(" " " "f" "(" "        =
                " "\n" ")" "arg-store" " " "fun-value" "(" " " "v*s" "[" "  =
                 " "\n" ")" "fun-store" " " "env" " " "fun-expr" " " "f" "("=
  " " "Value*Store" " " "type-case" "(" "                " "\n" ")" "fun-sto=
 re" " " "arg-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "e=
 nv" " " "arg-expr" " " "f" "(" " " "Value*Store" " " "type-case" "(" "     =
     " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" "r" =
 "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "env"=
  " " "expr" " " "f" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "s=
 tore" " " "env" " " "expr" " " "e" " " "make-interp" "(" " " "else" "[" "  =
   " "\n" ")])])]" "r-store" " " ")" "r-value" " " "l-value" " " "num+" "(" =
 " " "v*s" "(" "                       " "\n" ")" "r-store" " " "r-value" "(=
 " " " "v*s" "[" "                  " "\n" ")" "l-store" " " "env" " " "l" "=
  " "e" "(" " " "Value*Store" " " "type-case" "(" "                " "\n" ")=
 " "l-store" " " "l-value" "(" " " "v*s" "[" "           " "\n" ")" "store" =
 " " "env" " " "r" " " "e" "(" " " "Value*Store" " " "type-case" "(" "      =
    " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" "r" "p" "x" "e" " "=
  "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e"=
  " " "expr" " " "e" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "s=
 tore" " " "env" " " "expr" " " "d" " " "make-interp" "(" " " "e" "s" "l" "e=
 " "[" "    " "\n" "))])]" "store" " " "env" " " "falsity" " " "d" "(" "    =
                 " "\n" ")" "test-store" " " "env" " " "truth" " " "d" "(" "=
                     " "\n" ")" "test-value" " " "num-zero?" "(" " " "if" "(=
 " "                " "\n" ")" "test-store" " " "test-value" "(" " " "v*s" "=
 [" "           " "\n" ")" "store" " " "env" " " "test" " " "d" "(" " " "Val=
 ue*Store" " " "type-case" "(" "         " "\n" ")" "falsity" " " "truth" " =
 " "test" "(" " " "if0" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "=
 (" "  " "\n" ")" "re" "sto" " " "v" "n" "e" " " "expr" " " "d" "(" " " "e" =
 "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "c" =
 " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " =
 " ")" "env" " " "bound-body" " " "bound-id" " " "closureV" "(" " " "v*s" "(=
 " "      " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" "[" "    " "\=
 n" "r" "xp" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "st"=
  " " "v" "en" " " "expr" " " "c" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "=
 \n" ")]))" "store" " " "env" " " "expr" " " "b" " " "-interp" "e" "mak" "("=
  " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "v" "=
  " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n" =
 "r" "xp" "e" " " "CFAE" "B" " " "e" "s" "-ca" "e" "p" "y" "t" "(" "  " "\n"=
  ")" "re" "o" "st" " " "v" "n" "e" " " "r" "p" "ex" " " "b" "(" " " "define=
 " "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "a" " " "make-inter=
 p" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "n" " " "=
 numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "r" "p" "=
 x" "e" " " "CFAE" "B" " " "type-case" "(" "  " "\n" ")" "e" "r" "o" "t" "s"=
  " " "v" "n" "e" " " "expr" " " "a" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n=
 " "\n" "))" "e" "r" "to" "s" " " "v" "n" "e" " " "r" "p" "x" "e" " " "inter=
 p" " " "p" "r" "e" "t" "n" "i" "-" "e" "k" "a" "m" "(" "  " "\n" ")" "re" "=
 o" "t" "s" " " "v" "n" "e" " " "r" "p" "ex" " " "p" "r" "e" "t" "n" "i" "("=
  " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")])))" "value" " " "show" "(" "=
  " ")" "store" " " "value" "(" " " "v*s" "[" "      " "\n" "))" "mtSto" "("=
  " " ")" "mtSub" "(" " " ")" "sexp" " " "parse" "(" " " "interp" "(" " " "V=
 alue*Store" " " "type-case" "(" "    " "\n" "])" "exn-message" " " ")))" "x=
 " " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " "=
  "with-handlers" "(" "  " "\n" ")" "sexp" " " "rp" "te" "n" "i" " " "run" "=
 (" " " "define" "(" "\n" ";; run : S-expression -> S-expression" "\n" "\n" =
 "]))" "<box>" "'" " " ")" "location" "(" " " "boxV" "[" "    " "\n" "]" "<c=
 losure>" "'" " " ")" "env" " " "body" " " "param" "(" " " "closureV" "[" " =
    " "\n" "]" "n" " " ")" "n" "(" " " "numV" "[" "    " "\n" "value" " " "B=
 CFAE-Value" " " "type-case" "(" "  " "\n" ")" "value" " " "show" "(" " " "d=
 efine" "(" "\n" ";; show : BCFAE-Value -> S-expression" "\n" "\n" ")])]))" =
 "e1-store" " " "env" " " "e2" " " "interp" "(" "                 " "\n" ")"=
  "e1-store" " " "e1-value" "(" " " "v*s" "[" "            " "\n" ")" "store=
 " " " "env" " " "e1" " " "interp" "(" " " "Value*Store" " " "type-case" "("=
  "          " "\n" ")" "e2" " " "e1" "(" " " "seqn" "[" "    " "\n" ")])]" =
 "box-store" "                         " "\n" ")" "box-store" "             =
                           " "\n" ")" "box-value" " " "boxV-location" "(" " =
 " "store-lookup" "(" " " "v*s" "(" "                    " "\n" ")" "box-sto=
 re" " " "box-value" "(" " " "v*s" "[" "               " "\n" ")" "store" " =
 " "env" " " "box-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "=
 (" "             " "\n" ")" "box-expr" "(" " " "openbox" "[" "    " "\n" ")=
 )])])]" "value-store" "                                             " "\n" =
 "value-value" "                                             " "\n" ")" "box=
 -value" " " "boxV-location" "(" " " "update-store" "(" "                   =
             " "\n" "value-value" " " "v*s" "(" "                          "=
  "\n" ")" "value-store" " " "value-value" "(" " " "v*s" "[" "              =
        " "\n" ")" "box-store" " " "env" " " "value-expr" " " "interp" "(" "=
  " "Value*Store" " " "type-case" "(" "                   " "\n" ")" "box-st=
 ore" " " "box-value" "(" " " "v*s" "[" "              " "\n" ")" "store" " =
 " "env" " " "box-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "=
 (" "            " "\n" ")" "value-expr" " " "box-expr" "(" " " "setbox" "["=
  "    " "\n" ")))])]" "expr-store" " " "expr-value" " " "new-loc" " " "aSto=
 " "(" "                          " "\n" ")" "new-loc" " " "boxV" "(" " " "v=
 *s" "(" "                     " "\n" ")])" "expr-store" " " "next-location"=
  "(" " " "new-loc" " " "define" "([" " " "local" "(" "                   " =
 "\n" ")" "expr-store" " " "expr-value" "(" " " "v*s" "[" "              " "=
 \n" ")" "store" " " "env" " " "value-expr" " " "interp" "(" " " "Value*Stor=
 e" " " "type-case" "(" "            " "\n" ")" "value-expr" "(" " " "newbox=
 " "[" "    " "\n" "))])]" "test-store" " " "env" " " "falsity" " " "interp"=
  "(" "                    " "\n" ")" "test-store" " " "env" " " "truth" " "=
  "interp" "(" "                    " "\n" ")" "test-value" " " "num-zero?" =
 "(" " " "if" "(" "                " "\n" ")" "test-store" " " "test-value" =
 "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" " " "=
 interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "fal=
 sity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" ")])])]" "arg-st=
 ore" "                               " "\n" "))" "fun-value" " " "closureV-=
 env" "(" "                                     " "\n" "arg-value" "        =
                              " "\n" ")" "fun-value" " " "closureV-param" "(=
 " " " "aSub" "(" "                               " "\n" ")" "fun-value" " "=
  "closureV-body" "(" " " "interp" "(" "                       " "\n" ")" "a=
 rg-store" " " "arg-value" "(" " " "v*s" "[" "                  " "\n" ")" "=
 fun-store" " " "env" " " "arg-expr" " " "interp" "(" " " "Value*Store" " " =
 "type-case" "(" "                " "\n" ")" "fun-store" " " "fun-value" "("=
  " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "fun-expr" " " =
 "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "ar=
 g-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" ")]" "store" " " ")" "=
 env" " " "bound-body" " " "bound-id" " " "closureV" "(" " " "v*s" "(" "    =
   " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" "[" "    " "\n" ")]"=
  "store" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "=
 v" "(" " " "id" "[" "    " "\n" ")])])]" "r-store" "                       =
      " "\n" ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "     =
                   " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "   =
                " "\n" ")" "l-store" " " "env" " " "r" " " "interp" "(" " " =
 "Value*Store" " " "type-case" "(" "                " "\n" ")" "l-store" " "=
  "l-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "=
 l" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" =
 ")" "r" " " "l" "(" " " "add" "[" "    " "\n" ")]" "store" " " ")" "n" " " =
 "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "expr" "=
  " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" "=
  " "p" "r" "e" "t" "n" "i" " " "-interp" "e" "k" "a" "m" "(" " " "define" "=
 (" "\n" "interp : BCFAE Env Store -> Value*Store" "-" "e" "k" "a" "m" ";; "=
  "\n" "\n" ")))" "n" " " "numV-n" "(" " " "zero?" "(" "  " "\n" ")" "n" " "=
  "num-zero?" "(" " " "define" "(" "\n" ";; num-zero? : numV -> boolean" "\n=
 " "\n" "))))" "n2" " " "numV-n" "(" " " ")" "n1" " " "numV-n" "(" " " "+" "=
 (" " " "numV" "(" "  " "\n" ")" "n2" " " "n1" " " "num+" "(" " " "define" "=
 (" "\n" ";; num+ : numV numV -> numV" "\n" "\n" ")))]))" "rest-store" " " "=
 new-value" " " "loc-index" " " "update-store" "(" " " "value" " " "location=
 " " " "aSto" "(" "              " "\n" ")" "rest-store" " " "new-value" " "=
  "location" " " "aSto" "(" "              " "\n" ")" "loc-index" " " "locat=
 ion" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-store" " " "val=
 ue" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no such location\=
 "" " " "update-store" "'" " " "error" "(" " " "()" " " "mtSto" "[" "    " "=
 \n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "new-valu=
 e" " " "loc-index" " " "update-store" "(" " " "define" "(" "\n" ";; update-=
 store : number BCFAE-Value Store -> STore" "\n" "\n" ")]))" "location" " " =
 "1" " " "+" "(" " " ")" "rest-store" " " "value" " " "location" "(" " " "aS=
 to" "[" "    " "\n" "]" "0" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " =
 "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "next-location" "(" " "=
  "define" "(" "\n" ";; next-location : Store -> number" "\n" "\n" "))]))" "=
 rest-store" " " "loc-index" " " "store-lookup" "(" "              " "\n" "v=
 alue" "              " "\n" ")" "loc-index" " " "location" " " "=3D" "(" " =
 " "if" "(" "          " "\n" ")" "rest-store" " " "value" " " "location" "(=
 " " " "aSto" "[" "    " "\n" ")]" "\"no value at location\"" " " "store-loo=
 kup" "'" " " "error" "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "St=
 ore" " " "type-case" "(" "  " "\n" ")" "sto" " " "loc-index" " " "store-loo=
 kup" "(" " " "define" "(" "\n" ";; store-lookup : number Store -> BCFAE-Val=
 ue" "\n" "\n" "))]))" "rest-env" " " "name" " " "env-lookup" "(" "         =
      " "\n" "bound-value" "              " "\n" ")" "name" " " "bound-name"=
  " " "symbol=3D?" "(" " " "if" "(" "          " "\n" ")" "rest-env" " " "bo=
 und-value" " " "bound-name" "(" " " "aSub" "[" "    " "\n" ")]" "\"no bindi=
 ng for identifier\"" " " "env-lookup" "'" " " "error" "(" " " "()" " " "mtS=
 ub" "[" "    " "\n" "env" " " "Env" " " "type-case" "(" "  " "\n" ")" "env"=
  " " "name" " " "env-lookup" "(" " " "define" "(" "\n" ";; env-lookup : sym=
 bol Env -> BCFAE-Value" "\n" "\n" ")))])]))" "sexp" " " "second" "(" " " "p=
 arse" "(" " " "))" "sexp" " " "first" "(" " " "parse" "(" " " "app" "(" " "=
  "else" "[" "                    " "\n" ")))]" "sexp" " " "third" "(" " " "=
 parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "seqn" "(" =
 " " ")" "seqn" "[(" "                    " "\n" ")))]" "sexp" " " "second" =
 "(" " " "parse" "(" " " "openbox" "(" " " ")" "openbox" "[(" "             =
        " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp"=
  " " "second" "(" " " "parse" "(" " " "setbox" "(" " " ")" "setbox" "[(" " =
                    " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " =
 " "newbox" "(" " " ")" "newbox" "[(" "                    " "\n" ")))]" "se=
 xp" " " "fourth" "(" " " "parse" "(" "                                " "\n=
 " "))" "sexp" " " "third" "(" " " "parse" "(" "                            =
     " "\n" "))" "sexp" " " "second" "(" " " "parse" "(" " " "if0" "(" " " "=
 )" "if0" "[(" "                    " "\n" "))))]" "sexp" " " "second" "(" "=
  " "second" "(" " " "parse" "(" "                                 " "\n" ")=
 ))" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "("=
  " " "first" "(" " " "fun" "(" " " "app" "(" " " ")" "with" "[(" "         =
            " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "s=
 exp" " " "second" "(" " " "first" "(" " " "fun" "(" " " ")" "fun" "[(" "   =
                  " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "=
 ))" "sexp" " " "second" "(" " " "parse" "(" " " "add" "(" " " ")" "+" "[(" =
 "                    " "\n" ")" "sexp" " " "first" "(" " " "case" "(" " " "=
 )" "sexp" " " "list?" "[(" "    " "\n" ")]" "sexp" " " "id" "(" " " ")" "se=
 xp" " " "symbol?" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp"=
  " " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "parse"=
  "(" " " "define" "(" "\n" ";; parse : S-expression -> BCFAE" "\n" "\n" ")]=
 )" "Store?" " " "store" "(" " " ")" "BCFAE-Value?" " " "value" "(" " " "v*s=
 " "[" "  " "\n" "Value*Store" " " "define-type" "(" "\n" "\n" ")])" "Store?=
 " " " "store" "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "     =
    " "\n" ")" "number?" " " "location" "(" " " "aSto" "[" "  " "\n" "]" "mt=
 Sto" "[" "  " "\n" "Store" " " "define-type" "(" "\n" "\n" ")])" "Env?" " "=
  "env" "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\=
 n" ")" "symbol?" " " "name" "(" " " "aSub" "[" "  " "\n" "]" "mtSub" "[" " =
  " "\n" "Env" " " "define-type" "(" "\n" "\n" ")])" "number?" " " "location=
 " "(" " " "boxV" "[" "  " "\n" ")]" "Env?" " " "env" "(" " " ")" "BCFAE?" "=
  " "body" "(" " " ")" "symbol?" " " "param" "(" " " "closureV" "[" "  " "\n=
 " ")]" "number?" " " "n" "(" " " "numV" "[" "  " "\n" "BCFAE-Value" " " "de=
 fine-type" "(" "\n" "\n" ")])" "BCFAE?" " " "e2" "(" " " ")" "BCFAE?" " " "=
 e1" "(" " " "seqn" "[" "  " "\n" ")]" "BCFAE?" " " "box-expr" "(" " " "open=
 box" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " ")" "BCFAE?" " " =
 "box-expr" "(" " " "setbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(=
 " " " "newbox" "[" "  " "\n" ")]" "BCFAE?" " " "falsity" "(" " " ")" "BCFAE=
 ?" " " "truth" "(" " " ")" "BCFAE?" " " "test" "(" " " "if0" "[" "  " "\n" =
 ")]" "BCFAE?" " " "arg-expr" "(" " " ")" "BCFAE?" " " "fun-expr" "(" " " "a=
 pp" "[" "  " "\n" ")]" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param=
 " "(" " " "fun" "[" "  " "\n" ")]" "symbol?" " " "name" "(" " " "id" "[" " =
  " "\n" ")]" "BCFAE?" " " "rhs" "(" " " ")" "BCFAE?" " " "lhs" "(" " " "add=
 " "[" "  " "\n" ")]" "number?" " " "n" "(" " " "num" "[" "  " "\n" "BCFAE" =
 " " "define-type" "(") ("a" "2" "x" "e") ("a" "2" "x" "e") (")" "a" "2" "x"=
  "e" " " "n" "u" "r" "(") ("\n" ")" "f" "ex1" " " "f" " " "t" "(" "\n" ")" =
 "e" "1" "x" "e" " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " "d" " " "t" "(" =
 "\n" ")" "c" "1" "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "1" "x" "e" " " "=
 b" " " "t" "(" "\n" ")" "1a" "x" "e" " " "a" " " "t" "(" "\n" "\n" ")))" "p=
 " "x" "e" "s" " " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" " " "un" "r" "(" =
 " " ")" "sexp" " " "interp" " " "run" "(" " " "t" "s" "i" "l" "(" "  " "\n"=
  ")" "xp" "e" "s" " " "d" "o" "m" "/" "rp" "e" "t" "in" " " "t" "(" " " "de=
 fine" "(" "\n" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "f" " " "m=
 ake-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" ")])])]" "arg-store" " =
                          " "\n" "))" "fun-value" " " "closureV-env" "(" "  =
                               " "\n" "arg-value" "                         =
        " "\n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "    =
                       " "\n" ")" "fun-value" " " "closureV-body" "(" " " "f=
 " "(" "                       " "\n" ")" "arg-store" " " "fun-value" "(" " =
 " "v*s" "[" "                  " "\n" ")" "fun-store" " " "env" " " "fun-ex=
 pr" " " "f" "(" " " "Value*Store" " " "type-case" "(" "                " "\=
 n" ")" "fun-store" " " "arg-value" "(" " " "v*s" "[" "           " "\n" ")"=
  "store" " " "env" " " "arg-expr" " " "f" "(" " " "Value*Store" " " "type-c=
 ase" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "=
     " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "s=
 tore" " " "env" " " "expr" " " "f" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n"=
  "\n" ")]))" "store" " " "env" " " "expr" " " "e" " " "make-interp" "(" " "=
  "else" "[" "    " "\n" ")])])]" "r-store" " " ")" "r-value" " " "l-value" =
 " " "num+" "(" " " "v*s" "(" "                       " "\n" ")" "r-store" "=
  " "r-value" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" " " =
 "env" " " "l" " " "e" "(" " " "Value*Store" " " "type-case" "(" "          =
       " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           " "\=
 n" ")" "store" " " "env" " " "r" " " "e" "(" " " "Value*Store" " " "type-ca=
 se" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" "r" =
 "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "t" "s" =
 " " "v" "n" "e" " " "expr" " " "e" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n"=
  "\n" ")]))" "store" " " "env" " " "expr" " " "d" " " "make-interp" "(" " "=
  "e" "s" "l" "e" "[" "    " "\n" "))])]" "store" " " "env" " " "falsity" " =
 " "d" "(" "                    " "\n" ")" "test-store" " " "env" " " "truth=
 " " " "d" "(" "                    " "\n" ")" "test-value" " " "num-zero?" =
 "(" " " "if" "(" "                " "\n" ")" "test-store" " " "test-value" =
 "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" " " "=
 d" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity"=
  " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" "expr" " " "BCFAE" " =
 " "type-case" "(" "  " "\n" ")" "re" "sto" " " "v" "n" "e" " " "expr" " " "=
 d" "(" " " "e" "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " =
 "expr" " " "c" " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]"=
  "mtSto" "(" " " ")" "env" " " "bound-body" " " "bound-id" " " "closureV" "=
 (" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun=
 " "[" "    " "\n" "r" "xp" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")=
 " "re" "o" "st" " " "v" "en" " " "expr" " " "c" "(" " " "e" "n" "i" "f" "e"=
  "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "b" " " "-interp=
 " "e" "mak" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" =
 "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "=
 [" "    " "\n" "r" "xp" "e" " " "CFAE" "B" " " "e" "s" "-ca" "e" "p" "y" "t=
 " "(" "  " "\n" ")" "re" "o" "st" " " "v" "n" "e" " " "r" "p" "ex" " " "b" =
 "(" " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "a" =
 " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " =
 " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    "=
  "\n" "r" "p" "x" "e" " " "CFAE" "B" " " "type-case" "(" "  " "\n" ")" "e" =
 "r" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "a" "(" " " "e" "n" "i" "f" =
 "e" "d" "(" "\n" "\n" "))" "e" "r" "to" "s" " " "v" "n" "e" " " "r" "p" "x"=
  "e" " " "interp" " " "p" "r" "e" "t" "n" "i" "-" "e" "k" "a" "m" "(" "  " =
 "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "r" "p" "ex" " " "p" "r" "e" =
 "t" "n" "i" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")])))" "value" "=
  " "show" "(" " " ")" "store" " " "value" "(" " " "v*s" "[" "      " "\n" "=
 ))" "mtSto" "(" " " ")" "mtSub" "(" " " ")" "sexp" " " "parse" "(" " " "int=
 erp" "(" " " "Value*Store" " " "type-case" "(" "    " "\n" "])" "exn-messag=
 e" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "la=
 mbda" "([(" " " "with-handlers" "(" "  " "\n" ")" "sexp" " " "rp" "te" "n" =
 "i" " " "run" "(" " " "define" "(" "\n" ";; run : S-expression -> S-express=
 ion" "\n" "\n" "]))" "<box>" "'" " " ")" "location" "(" " " "boxV" "[" "   =
  " "\n" "]" "<closure>" "'" " " ")" "env" " " "body" " " "param" "(" " " "c=
 losureV" "[" "    " "\n" "]" "n" " " ")" "n" "(" " " "numV" "[" "    " "\n"=
  "value" " " "BCFAE-Value" " " "type-case" "(" "  " "\n" ")" "value" " " "s=
 how" "(" " " "define" "(" "\n" ";; show : BCFAE-Value -> S-expression" "\n"=
  "\n" ")])]))" "e1-store" " " "env" " " "e2" " " "interp" "(" "            =
      " "\n" ")" "e1-store" " " "e1-value" "(" " " "v*s" "[" "            " =
 "\n" ")" "store" " " "env" " " "e1" " " "interp" "(" " " "Value*Store" " " =
 "type-case" "(" "          " "\n" ")" "e2" " " "e1" "(" " " "seqn" "[" "   =
  " "\n" ")])]" "box-store" "                         " "\n" ")" "box-store"=
  "                                       " "\n" ")" "box-value" " " "boxV-l=
 ocation" "(" " " "store-lookup" "(" " " "v*s" "(" "                    " "\=
 n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "               " "\n"=
  ")" "store" " " "env" " " "box-expr" " " "interp" "(" " " "Value*Store" " =
 " "type-case" "(" "             " "\n" ")" "box-expr" "(" " " "openbox" "["=
  "    " "\n" "))])])]" "value-store" "                                     =
         " "\n" "value-value" "                                             =
 " "\n" ")" "box-value" " " "boxV-location" "(" " " "update-store" "(" "    =
                            " "\n" "value-value" " " "v*s" "(" "            =
               " "\n" ")" "value-store" " " "value-value" "(" " " "v*s" "[" =
 "                     " "\n" ")" "box-store" " " "env" " " "value-expr" " "=
  "interp" "(" " " "Value*Store" " " "type-case" "(" "                   " "=
 \n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "              " "\n"=
  ")" "store" " " "env" " " "box-expr" " " "interp" "(" " " "Value*Store" " =
 " "type-case" "(" "            " "\n" ")" "value-expr" " " "box-expr" "(" "=
  " "setbox" "[" "    " "\n" ")))])]" "expr-store" " " "expr-value" " " "new=
 -loc" " " "aSto" "(" "                          " "\n" ")" "new-loc" " " "b=
 oxV" "(" " " "v*s" "(" "                     " "\n" ")])" "expr-store" " " =
 "next-location" "(" " " "new-loc" " " "define" "([" " " "local" "(" "      =
              " "\n" ")" "expr-store" " " "expr-value" "(" " " "v*s" "[" "  =
             " "\n" ")" "store" " " "env" " " "value-expr" " " "interp" "(" =
 " " "Value*Store" " " "type-case" "(" "            " "\n" ")" "value-expr" =
 "(" " " "newbox" "[" "    " "\n" "))])]" "test-store" " " "env" " " "falsit=
 y" " " "interp" "(" "                    " "\n" ")" "test-store" " " "env" =
 " " "truth" " " "interp" "(" "                    " "\n" ")" "test-value" "=
  " "num-zero?" "(" " " "if" "(" "                " "\n" ")" "test-store" " =
 " "test-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" "=
  " "test" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         =
 " "\n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" "=
 )])])]" "arg-store" "                               " "\n" "))" "fun-value"=
  " " "closureV-env" "(" "                                     " "\n" "arg-v=
 alue" "                                     " "\n" ")" "fun-value" " " "clo=
 sureV-param" "(" " " "aSub" "(" "                               " "\n" ")" =
 "fun-value" " " "closureV-body" "(" " " "interp" "(" "                     =
   " "\n" ")" "arg-store" " " "arg-value" "(" " " "v*s" "[" "               =
    " "\n" ")" "fun-store" " " "env" " " "arg-expr" " " "interp" "(" " " "Va=
 lue*Store" " " "type-case" "(" "                " "\n" ")" "fun-store" " " =
 "fun-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " =
 "fun-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "        =
  " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" ")]" "s=
 tore" " " ")" "env" " " "bound-body" " " "bound-id" " " "closureV" "(" " " =
 "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" "[" "=
     " "\n" ")]" "store" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s=
 " "(" " " ")" "v" "(" " " "id" "[" "    " "\n" ")])])]" "r-store" "        =
                     " "\n" ")" "r-value" " " "l-value" " " "num+" "(" " " "=
 v*s" "(" "                       " "\n" ")" "r-store" " " "r-value" "(" " "=
  "v*s" "[" "                  " "\n" ")" "l-store" " " "env" " " "r" " " "i=
 nterp" "(" " " "Value*Store" " " "type-case" "(" "                " "\n" ")=
 " "l-store" " " "l-value" "(" " " "v*s" "[" "           " "\n" ")" "store" =
 " " "env" " " "l" " " "interp" "(" " " "Value*Store" " " "type-case" "(" " =
         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" ")]" "store" "=
  " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    =
 " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "en=
 v" " " "expr" " " "p" "r" "e" "t" "n" "i" " " "-interp" "e" "k" "a" "m" "("=
  " " "define" "(" "\n" "interp : BCFAE Env Store -> Value*Store" "-" "e" "k=
 " "a" "m" ";; " "\n" "\n" ")))" "n" " " "numV-n" "(" " " "zero?" "(" "  " "=
 \n" ")" "n" " " "num-zero?" "(" " " "define" "(" "\n" ";; num-zero? : numV =
 -> boolean" "\n" "\n" "))))" "n2" " " "numV-n" "(" " " ")" "n1" " " "numV-n=
 " "(" " " "+" "(" " " "numV" "(" "  " "\n" ")" "n2" " " "n1" " " "num+" "("=
  " " "define" "(" "\n" ";; num+ : numV numV -> numV" "\n" "\n" ")))]))" "re=
 st-store" " " "new-value" " " "loc-index" " " "update-store" "(" " " "value=
 " " " "location" " " "aSto" "(" "              " "\n" ")" "rest-store" " " =
 "new-value" " " "location" " " "aSto" "(" "              " "\n" ")" "loc-in=
 dex" " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-=
 store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no=
  such location\"" " " "update-store" "'" " " "error" "(" " " "()" " " "mtSt=
 o" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto=
 " " " "new-value" " " "loc-index" " " "update-store" "(" " " "define" "(" "=
 \n" ";; update-store : number BCFAE-Value Store -> STore" "\n" "\n" ")]))" =
 "location" " " "1" " " "+" "(" " " ")" "rest-store" " " "value" " " "locati=
 on" "(" " " "aSto" "[" "    " "\n" "]" "0" " " "()" " " "mtSto" "[" "    " =
 "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "next-lo=
 cation" "(" " " "define" "(" "\n" ";; next-location : Store -> number" "\n"=
  "\n" "))]))" "rest-store" " " "loc-index" " " "store-lookup" "(" "        =
       " "\n" "value" "              " "\n" ")" "loc-index" " " "location" "=
  " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-store" " " "value" " =
 " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no value at location\""=
  " " "store-lookup" "'" " " "error" "(" " " "()" " " "mtSto" "[" "    " "\n=
 " "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "loc-index"=
  " " "store-lookup" "(" " " "define" "(" "\n" ";; store-lookup : number Sto=
 re -> BCFAE-Value" "\n" "\n" "))]))" "rest-env" " " "name" " " "env-lookup"=
  "(" "              " "\n" "bound-value" "              " "\n" ")" "name" "=
  " "bound-name" " " "symbol=3D?" "(" " " "if" "(" "          " "\n" ")" "re=
 st-env" " " "bound-value" " " "bound-name" "(" " " "aSub" "[" "    " "\n" "=
 )]" "\"no binding for identifier\"" " " "env-lookup" "'" " " "error" "(" " =
 " "()" " " "mtSub" "[" "    " "\n" "env" " " "Env" " " "type-case" "(" "  "=
  "\n" ")" "env" " " "name" " " "env-lookup" "(" " " "define" "(" "\n" ";; e=
 nv-lookup : symbol Env -> BCFAE-Value" "\n" "\n" ")))])]))" "sexp" " " "sec=
 ond" "(" " " "parse" "(" " " "))" "sexp" " " "first" "(" " " "parse" "(" " =
 " "app" "(" " " "else" "[" "                    " "\n" ")))]" "sexp" " " "t=
 hird" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" =
 " " "seqn" "(" " " ")" "seqn" "[(" "                    " "\n" ")))]" "sexp=
 " " " "second" "(" " " "parse" "(" " " "openbox" "(" " " ")" "openbox" "[("=
  "                    " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" =
 " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "setbox" "(" " " ")" "=
 setbox" "[(" "                    " "\n" ")))]" "sexp" " " "second" "(" " "=
  "parse" "(" " " "newbox" "(" " " ")" "newbox" "[(" "                    " =
 "\n" ")))]" "sexp" " " "fourth" "(" " " "parse" "(" "                      =
           " "\n" "))" "sexp" " " "third" "(" " " "parse" "(" "             =
                    " "\n" "))" "sexp" " " "second" "(" " " "parse" "(" " " =
 "if0" "(" " " ")" "if0" "[(" "                    " "\n" "))))]" "sexp" " "=
  "second" "(" " " "second" "(" " " "parse" "(" "                           =
       " "\n" ")))" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" "=
  " "second" "(" " " "first" "(" " " "fun" "(" " " "app" "(" " " ")" "with" =
 "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" " " "parse" =
 "(" " " "))" "sexp" " " "second" "(" " " "first" "(" " " "fun" "(" " " ")" =
 "fun" "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" " " "p=
 arse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "add" "(" " =
 " ")" "+" "[(" "                    " "\n" ")" "sexp" " " "first" "(" " " "=
 case" "(" " " ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "sexp" " " "id" =
 "(" " " ")" "sexp" " " "symbol?" "[(" "    " "\n" ")]" "sexp" " " "num" "("=
  " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "se=
 xp" " " "parse" "(" " " "define" "(" "\n" ";; parse : S-expression -> BCFAE=
 " "\n" "\n" ")])" "Store?" " " "store" "(" " " ")" "BCFAE-Value?" " " "valu=
 e" "(" " " "v*s" "[" "  " "\n" "Value*Store" " " "define-type" "(" "\n" "\n=
 " ")])" "Store?" " " "store" "(" "        " "\n" ")" "BCFAE-Value?" " " "va=
 lue" "(" "        " "\n" ")" "number?" " " "location" "(" " " "aSto" "[" " =
  " "\n" "]" "mtSto" "[" "  " "\n" "Store" " " "define-type" "(" "\n" "\n" "=
 )])" "Env?" " " "env" "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(=
 " "        " "\n" ")" "symbol?" " " "name" "(" " " "aSub" "[" "  " "\n" "]"=
  "mtSub" "[" "  " "\n" "Env" " " "define-type" "(" "\n" "\n" ")])" "number?=
 " " " "location" "(" " " "boxV" "[" "  " "\n" ")]" "Env?" " " "env" "(" " "=
  ")" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" "(" " " "closure=
 V" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "numV" "[" "  " "\n" "BCFAE=
 -Value" " " "define-type" "(" "\n" "\n" ")])" "BCFAE?" " " "e2" "(" " " ")"=
  "BCFAE?" " " "e1" "(" " " "seqn" "[" "  " "\n" ")]" "BCFAE?" " " "box-expr=
 " "(" " " "openbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " ")=
 " "BCFAE?" " " "box-expr" "(" " " "setbox" "[" "  " "\n" ")]" "BCFAE?" " " =
 "value-expr" "(" " " "newbox" "[" "  " "\n" ")]" "BCFAE?" " " "falsity" "("=
  " " ")" "BCFAE?" " " "truth" "(" " " ")" "BCFAE?" " " "test" "(" " " "if0"=
  "[" "  " "\n" ")]" "BCFAE?" " " "arg-expr" "(" " " ")" "BCFAE?" " " "fun-e=
 xpr" "(" " " "app" "[" "  " "\n" ")]" "BCFAE?" " " "body" "(" " " ")" "symb=
 ol?" " " "param" "(" " " "fun" "[" "  " "\n" ")]" "symbol?" " " "name" "(" =
 " " "id" "[" "  " "\n" ")]" "BCFAE?" " " "rhs" "(" " " ")" "BCFAE?" " " "lh=
 s" "(" " " "add" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "num" "[" "  =
 " "\n" "BCFAE" " " "define-type" "(") ("a" "2" "x" "e") ("\n" ")" "f" "ex1"=
  " " "f" " " "t" "(" "\n" ")" "e" "1" "x" "e" " " "e" " " "t" "(" "\n" ")" =
 "d" "ex1" " " "d" " " "t" "(" "\n" ")" "c" "1" "x" "e" " " "c" " " "t" "(" =
 "\n" ")" "b" "1" "x" "e" " " "b" " " "t" "(" "\n" ")" "1a" "x" "e" " " "a" =
 " " "t" "(" "\n" "\n" ")))" "p" "x" "e" "s" " " "d" "o" "m" "/" "p" "r" "e"=
  "t" "n" "i" " " "un" "r" "(" " " ")" "sexp" " " "interp" " " "run" "(" " "=
  "t" "s" "i" "l" "(" "  " "\n" ")" "xp" "e" "s" " " "d" "o" "m" "/" "rp" "e=
 " "t" "in" " " "t" "(" " " "define" "(" "\n" "\n" "\n" ")]))" "store" " " "=
 env" " " "expr" " " "f" " " "make-interp" "(" " " "e" "s" "l" "e" "[" "    =
 " "\n" ")])])]" "arg-store" "                          " "\n" "))" "fun-val=
 ue" " " "closureV-env" "(" "                                " "\n" "arg-val=
 ue" "                                " "\n" ")" "fun-value" " " "closureV-p=
 aram" "(" " " "aSub" "(" "                          " "\n" ")" "fun-value" =
 " " "closureV-body" "(" " " "f" "(" "                       " "\n" ")" "arg=
 -store" " " "fun-value" "(" " " "v*s" "[" "                  " "\n" ")" "fu=
 n-store" " " "env" " " "fun-expr" " " "f" "(" " " "Value*Store" " " "type-c=
 ase" "(" "                " "\n" ")" "fun-store" " " "arg-value" "(" " " "v=
 *s" "[" "           " "\n" ")" "store" " " "env" " " "arg-expr" " " "f" "("=
  " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "arg-expr" " " =
 "fun-expr" "(" " " "app" "[" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "t=
 ype-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "f" "(" " " "e=
 " "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " "=
  "e" " " "make-interp" "(" " " "else" "[" "    " "\n" ")])])]" "r-store" " =
 " ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "               =
         " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "             =
      " "\n" ")" "l-store" " " "env" " " "l" " " "e" "(" " " "Value*Store" "=
  " "type-case" "(" "                " "\n" ")" "l-store" " " "l-value" "(" =
 " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "r" " " "e" "(" =
 " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "r" " " "l" "(" =
 " " "add" "[" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "=
   " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "e" "(" " " "e=
 " "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " "=
  "d" " " "make-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" "))])]" "sto=
 re" " " "env" " " "falsity" " " "d" "(" "                    " "\n" ")" "te=
 st-store" " " "env" " " "truth" " " "d" "(" "                    " "\n" ")"=
  "test-value" " " "num-zero?" "(" " " "if" "(" "                " "\n" ")" =
 "test-store" " " "test-value" "(" " " "v*s" "[" "           " "\n" ")" "sto=
 re" " " "env" " " "test" " " "d" "(" " " "Value*Store" " " "type-case" "(" =
 "         " "\n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "[" "  =
   " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "sto" " =
 " "v" "n" "e" " " "expr" " " "d" "(" " " "e" "n" "fi" "e" "d" "(" "\n" "\n"=
  ")]))" "store" " " "env" " " "expr" " " "c" " " "make-interp" "(" " " "se"=
  "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "bound-body" "=
  " "bound-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-bod=
 y" " " "bound-id" "(" " " "fun" "[" "    " "\n" "r" "xp" "e" " " "BCFAE" " =
 " "type-case" "(" "  " "\n" ")" "re" "o" "st" " " "v" "en" " " "expr" " " "=
 c" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" "=
  " "expr" " " "b" " " "-interp" "e" "mak" "(" " " "se" "l" "e" "[" "    " "=
 \n" "))]" "mtSto" "(" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" =
 "(" " " ")" "v" "(" " " "id" "[" "    " "\n" "r" "xp" "e" " " "CFAE" "B" " =
 " "e" "s" "-ca" "e" "p" "y" "t" "(" "  " "\n" ")" "re" "o" "st" " " "v" "n"=
  "e" " " "r" "p" "ex" " " "b" "(" " " "define" "(" "\n" "\n" ")]))" "store"=
  " " "env" " " "expr" " " "a" " " "make-interp" "(" " " "se" "l" "e" "[" " =
    " "\n" "))]" "mtSto" "(" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")=
 " "n" "(" " " "num" "[" "    " "\n" "r" "p" "x" "e" " " "CFAE" "B" " " "typ=
 e-case" "(" "  " "\n" ")" "e" "r" "o" "t" "s" " " "v" "n" "e" " " "expr" " =
 " "a" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" "))" "e" "r" "to" "s" "=
  " "v" "n" "e" " " "r" "p" "x" "e" " " "interp" " " "p" "r" "e" "t" "n" "i"=
  "-" "e" "k" "a" "m" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " "=
  "r" "p" "ex" " " "p" "r" "e" "t" "n" "i" "(" " " "e" "n" "i" "f" "e" "d" "=
 (" "\n" "\n" ")])))" "value" " " "show" "(" " " ")" "store" " " "value" "("=
  " " "v*s" "[" "      " "\n" "))" "mtSto" "(" " " ")" "mtSub" "(" " " ")" "=
 sexp" " " "parse" "(" " " "interp" "(" " " "Value*Store" " " "type-case" "(=
 " "    " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "no=
 t" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" "  " "\n"=
  ")" "sexp" " " "rp" "te" "n" "i" " " "run" "(" " " "define" "(" "\n" ";; r=
 un : S-expression -> S-expression" "\n" "\n" "]))" "<box>" "'" " " ")" "loc=
 ation" "(" " " "boxV" "[" "    " "\n" "]" "<closure>" "'" " " ")" "env" " "=
  "body" " " "param" "(" " " "closureV" "[" "    " "\n" "]" "n" " " ")" "n" =
 "(" " " "numV" "[" "    " "\n" "value" " " "BCFAE-Value" " " "type-case" "(=
 " "  " "\n" ")" "value" " " "show" "(" " " "define" "(" "\n" ";; show : BCF=
 AE-Value -> S-expression" "\n" "\n" ")])]))" "e1-store" " " "env" " " "e2" =
 " " "interp" "(" "                 " "\n" ")" "e1-store" " " "e1-value" "("=
  " " "v*s" "[" "            " "\n" ")" "store" " " "env" " " "e1" " " "inte=
 rp" "(" " " "Value*Store" " " "type-case" "(" "          " "\n" ")" "e2" " =
 " "e1" "(" " " "seqn" "[" "    " "\n" ")])]" "box-store" "                 =
         " "\n" ")" "box-store" "                                       " "\=
 n" ")" "box-value" " " "boxV-location" "(" " " "store-lookup" "(" " " "v*s"=
  "(" "                    " "\n" ")" "box-store" " " "box-value" "(" " " "v=
 *s" "[" "               " "\n" ")" "store" " " "env" " " "box-expr" " " "in=
 terp" "(" " " "Value*Store" " " "type-case" "(" "             " "\n" ")" "b=
 ox-expr" "(" " " "openbox" "[" "    " "\n" "))])])]" "value-store" "       =
                                       " "\n" "value-value" "               =
                               " "\n" ")" "box-value" " " "boxV-location" "(=
 " " " "update-store" "(" "                               " "\n" "value-valu=
 e" " " "v*s" "(" "                          " "\n" ")" "value-store" " " "v=
 alue-value" "(" " " "v*s" "[" "                     " "\n" ")" "box-store" =
 " " "env" " " "value-expr" " " "interp" "(" " " "Value*Store" " " "type-cas=
 e" "(" "                   " "\n" ")" "box-store" " " "box-value" "(" " " "=
 v*s" "[" "              " "\n" ")" "store" " " "env" " " "box-expr" " " "in=
 terp" "(" " " "Value*Store" " " "type-case" "(" "            " "\n" ")" "va=
 lue-expr" " " "box-expr" "(" " " "setbox" "[" "    " "\n" ")))])]" "expr-st=
 ore" " " "expr-value" " " "new-loc" " " "aSto" "(" "                       =
    " "\n" ")" "new-loc" " " "boxV" "(" " " "v*s" "(" "                     =
 " "\n" ")])" "expr-store" " " "next-location" "(" " " "new-loc" " " "define=
 " "([" " " "local" "(" "                   " "\n" ")" "expr-store" " " "exp=
 r-value" "(" " " "v*s" "[" "              " "\n" ")" "store" " " "env" " " =
 "value-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "      =
       " "\n" ")" "value-expr" "(" " " "newbox" "[" "    " "\n" "))])]" "tes=
 t-store" " " "env" " " "falsity" " " "interp" "(" "                    " "\=
 n" ")" "test-store" " " "env" " " "truth" " " "interp" "(" "               =
      " "\n" ")" "test-value" " " "num-zero?" "(" " " "if" "(" "            =
     " "\n" ")" "test-store" " " "test-value" "(" " " "v*s" "[" "           =
 " "\n" ")" "store" " " "env" " " "test" " " "interp" "(" " " "Value*Store" =
 " " "type-case" "(" "         " "\n" ")" "falsity" " " "truth" " " "test" "=
 (" " " "if0" "[" "    " "\n" ")])])]" "arg-store" "                        =
        " "\n" "))" "fun-value" " " "closureV-env" "(" "                    =
                  " "\n" "arg-value" "                                     "=
  "\n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "            =
                    " "\n" ")" "fun-value" " " "closureV-body" "(" " " "inte=
 rp" "(" "                       " "\n" ")" "arg-store" " " "arg-value" "(" =
 " " "v*s" "[" "                  " "\n" ")" "fun-store" " " "env" " " "arg-=
 expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "             =
    " "\n" ")" "fun-store" " " "fun-value" "(" " " "v*s" "[" "           " "=
 \n" ")" "store" " " "env" " " "fun-expr" " " "interp" "(" " " "Value*Store"=
  " " "type-case" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " "=
  "app" "[" "    " "\n" ")]" "store" " " ")" "env" " " "bound-body" " " "bou=
 nd-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " =
 "bound-id" "(" " " "fun" "[" "    " "\n" ")]" "store" " " ")" "env" " " "v"=
  " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n=
 " ")])])]" "r-store" "                            " "\n" ")" "r-value" " " =
 "l-value" " " "num+" "(" " " "v*s" "(" "                       " "\n" ")" "=
 r-store" " " "r-value" "(" " " "v*s" "[" "                  " "\n" ")" "l-s=
 tore" " " "env" " " "r" " " "interp" "(" " " "Value*Store" " " "type-case" =
 "(" "                " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "=
            " "\n" ")" "store" " " "env" " " "l" " " "interp" "(" " " "Value=
 *Store" " " "type-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" =
 "[" "    " "\n" ")]" "store" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " "=
 )" "n" "(" " " "num" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "("=
  "  " "\n" ")" "store" " " "env" " " "expr" " " "p" "r" "e" "t" "n" "i" " "=
  "-interp" "e" "k" "a" "m" "(" " " "define" "(" "\n" "interp : BCFAE Env St=
 ore -> Value*Store" "-" "e" "k" "a" "m" ";; " "\n" "\n" ")))" "n" " " "numV=
 -n" "(" " " "zero?" "(" "  " "\n" ")" "n" " " "num-zero?" "(" " " "define" =
 "(" "\n" ";; num-zero? : numV -> boolean" "\n" "\n" "))))" "n2" " " "numV-n=
 " "(" " " ")" "n1" " " "numV-n" "(" " " "+" "(" " " "numV" "(" "  " "\n" ")=
 " "n2" " " "n1" " " "num+" "(" " " "define" "(" "\n" ";; num+ : numV numV -=
 > numV" "\n" "\n" ")))]))" "rest-store" " " "new-value" " " "loc-index" " "=
  "update-store" "(" " " "value" " " "location" " " "aSto" "(" "            =
   " "\n" ")" "rest-store" " " "new-value" " " "location" " " "aSto" "(" "  =
             " "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if" "(=
 " "          " "\n" ")" "rest-store" " " "value" " " "location" "(" " " "aS=
 to" "[" "    " "\n" ")]" "\"no such location\"" " " "update-store" "'" " " =
 "error" "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "typ=
 e-case" "(" "  " "\n" ")" "sto" " " "new-value" " " "loc-index" " " "update=
 -store" "(" " " "define" "(" "\n" ";; update-store : number BCFAE-Value Sto=
 re -> STore" "\n" "\n" ")]))" "location" " " "1" " " "+" "(" " " ")" "rest-=
 store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" "]" "0" " =
 " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" " =
  " "\n" ")" "sto" " " "next-location" "(" " " "define" "(" "\n" ";; next-lo=
 cation : Store -> number" "\n" "\n" "))]))" "rest-store" " " "loc-index" " =
 " "store-lookup" "(" "              " "\n" "value" "              " "\n" ")=
 " "loc-index" " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" "=
 )" "rest-store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" "=
 )]" "\"no value at location\"" " " "store-lookup" "'" " " "error" "(" " " "=
 ()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " =
 "\n" ")" "sto" " " "loc-index" " " "store-lookup" "(" " " "define" "(" "\n"=
  ";; store-lookup : number Store -> BCFAE-Value" "\n" "\n" "))]))" "rest-en=
 v" " " "name" " " "env-lookup" "(" "              " "\n" "bound-value" "   =
            " "\n" ")" "name" " " "bound-name" " " "symbol=3D?" "(" " " "if"=
  "(" "          " "\n" ")" "rest-env" " " "bound-value" " " "bound-name" "(=
 " " " "aSub" "[" "    " "\n" ")]" "\"no binding for identifier\"" " " "env-=
 lookup" "'" " " "error" "(" " " "()" " " "mtSub" "[" "    " "\n" "env" " " =
 "Env" " " "type-case" "(" "  " "\n" ")" "env" " " "name" " " "env-lookup" "=
 (" " " "define" "(" "\n" ";; env-lookup : symbol Env -> BCFAE-Value" "\n" "=
 \n" ")))])]))" "sexp" " " "second" "(" " " "parse" "(" " " "))" "sexp" " " =
 "first" "(" " " "parse" "(" " " "app" "(" " " "else" "[" "                 =
    " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " "=
  "second" "(" " " "parse" "(" " " "seqn" "(" " " ")" "seqn" "[(" "         =
            " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "openb=
 ox" "(" " " ")" "openbox" "[(" "                    " "\n" ")))]" "sexp" " =
 " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" =
 "(" " " "setbox" "(" " " ")" "setbox" "[(" "                    " "\n" ")))=
 ]" "sexp" " " "second" "(" " " "parse" "(" " " "newbox" "(" " " ")" "newbox=
 " "[(" "                    " "\n" ")))]" "sexp" " " "fourth" "(" " " "pars=
 e" "(" "                                " "\n" "))" "sexp" " " "third" "(" =
 " " "parse" "(" "                                " "\n" "))" "sexp" " " "se=
 cond" "(" " " "parse" "(" " " "if0" "(" " " ")" "if0" "[(" "               =
      " "\n" "))))]" "sexp" " " "second" "(" " " "second" "(" " " "parse" "(=
 " "                                 " "\n" ")))" "sexp" " " "third" "(" " "=
  "parse" "(" " " "))" "sexp" " " "second" "(" " " "first" "(" " " "fun" "("=
  " " "app" "(" " " ")" "with" "[(" "                    " "\n" ")))]" "sexp=
 " " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "fir=
 st" "(" " " "fun" "(" " " ")" "fun" "[(" "                    " "\n" ")))]"=
  "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " =
 " "parse" "(" " " "add" "(" " " ")" "+" "[(" "                    " "\n" ")=
 " "sexp" " " "first" "(" " " "case" "(" " " ")" "sexp" " " "list?" "[(" "  =
   " "\n" ")]" "sexp" " " "id" "(" " " ")" "sexp" " " "symbol?" "[(" "    " =
 "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n=
 " "cond" "(" "  " "\n" ")" "sexp" " " "parse" "(" " " "define" "(" "\n" ";;=
  parse : S-expression -> BCFAE" "\n" "\n" ")])" "Store?" " " "store" "(" " =
 " ")" "BCFAE-Value?" " " "value" "(" " " "v*s" "[" "  " "\n" "Value*Store" =
 " " "define-type" "(" "\n" "\n" ")])" "Store?" " " "store" "(" "        " "=
 \n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" ")" "number?" " " "l=
 ocation" "(" " " "aSto" "[" "  " "\n" "]" "mtSto" "[" "  " "\n" "Store" " "=
  "define-type" "(" "\n" "\n" ")])" "Env?" " " "env" "(" "        " "\n" ")"=
  "BCFAE-Value?" " " "value" "(" "        " "\n" ")" "symbol?" " " "name" "(=
 " " " "aSub" "[" "  " "\n" "]" "mtSub" "[" "  " "\n" "Env" " " "define-type=
 " "(" "\n" "\n" ")])" "number?" " " "location" "(" " " "boxV" "[" "  " "\n"=
  ")]" "Env?" " " "env" "(" " " ")" "BCFAE?" " " "body" "(" " " ")" "symbol?=
 " " " "param" "(" " " "closureV" "[" "  " "\n" ")]" "number?" " " "n" "(" "=
  " "numV" "[" "  " "\n" "BCFAE-Value" " " "define-type" "(" "\n" "\n" ")])"=
  "BCFAE?" " " "e2" "(" " " ")" "BCFAE?" " " "e1" "(" " " "seqn" "[" "  " "\=
 n" ")]" "BCFAE?" " " "box-expr" "(" " " "openbox" "[" "  " "\n" ")]" "BCFAE=
 ?" " " "value-expr" "(" " " ")" "BCFAE?" " " "box-expr" "(" " " "setbox" "[=
 " "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " "newbox" "[" "  " "\n" "=
 )]" "BCFAE?" " " "falsity" "(" " " ")" "BCFAE?" " " "truth" "(" " " ")" "BC=
 FAE?" " " "test" "(" " " "if0" "[" "  " "\n" ")]" "BCFAE?" " " "arg-expr" "=
 (" " " ")" "BCFAE?" " " "fun-expr" "(" " " "app" "[" "  " "\n" ")]" "BCFAE?=
 " " " "body" "(" " " ")" "symbol?" " " "param" "(" " " "fun" "[" "  " "\n" =
 ")]" "symbol?" " " "name" "(" " " "id" "[" "  " "\n" ")]" "BCFAE?" " " "rhs=
 " "(" " " ")" "BCFAE?" " " "lhs" "(" " " "add" "[" "  " "\n" ")]" "number?"=
  " " "n" "(" " " "num" "[" "  " "\n" "BCFAE" " " "define-type" "(") (")" "a=
 " "2" "x" "e" " " "n" "u" "r" "(") (")" "a" "2" "x" "e" " " "p" "r" "e" "t"=
  "n" "i" " " "n" "u" "r" "(") ("\n" ")" "f" "ex1" " " "f" " " "t" "(" "\n" =
 ")" "e" "1" "x" "e" " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " "d" " " "t" =
 "(" "\n" ")" "c" "1" "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "1" "x" "e" "=
  " "b" " " "t" "(" "\n" ")" "1a" "x" "e" " " "a" " " "t" "(" "\n" "\n" ")))=
 " "p" "x" "e" "s" " " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" " " "un" "r" =
 "(" " " ")" "sexp" " " "interp" " " "run" "(" " " "t" "s" "i" "l" "(" "  " =
 "\n" ")" "xp" "e" "s" " " "d" "o" "m" "/" "rp" "e" "t" "in" " " "t" "(" " "=
  "define" "(" "\n" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "f" " =
 " "make-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" ")])])]" "arg-store=
 " "                          " "\n" "))" "fun-value" " " "closureV-env" "("=
  "                                " "\n" "arg-value" "                     =
            " "\n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "=
                           " "\n" ")" "fun-value" " " "closureV-body" "(" " =
 " "f" "(" "                       " "\n" ")" "arg-store" " " "fun-value" "(=
 " " " "v*s" "[" "                  " "\n" ")" "fun-store" " " "env" " " "fu=
 n-expr" " " "f" "(" " " "Value*Store" " " "type-case" "(" "                =
 " "\n" ")" "fun-store" " " "arg-value" "(" " " "v*s" "[" "           " "\n"=
  ")" "store" " " "env" " " "arg-expr" " " "f" "(" " " "Value*Store" " " "ty=
 pe-case" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "=
 [" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")=
 " "store" " " "env" " " "expr" " " "f" "(" " " "e" "n" "i" "f" "e" "d" "(" =
 "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "e" " " "make-interp" "("=
  " " "else" "[" "    " "\n" ")])])]" "r-store" " " ")" "r-value" " " "l-val=
 ue" " " "num+" "(" " " "v*s" "(" "                       " "\n" ")" "r-stor=
 e" " " "r-value" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" =
 " " "env" " " "l" " " "e" "(" " " "Value*Store" " " "type-case" "(" "      =
           " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           =
 " "\n" ")" "store" " " "env" " " "r" " " "e" "(" " " "Value*Store" " " "typ=
 e-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" =
 "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "t" =
 "s" " " "v" "n" "e" " " "expr" " " "e" "(" " " "e" "n" "i" "f" "e" "d" "(" =
 "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "d" " " "make-interp" "("=
  " " "e" "s" "l" "e" "[" "    " "\n" "))])]" "store" " " "env" " " "falsity=
 " " " "d" "(" "                    " "\n" ")" "test-store" " " "env" " " "t=
 ruth" " " "d" "(" "                    " "\n" ")" "test-value" " " "num-zer=
 o?" "(" " " "if" "(" "                " "\n" ")" "test-store" " " "test-val=
 ue" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" "=
  " "d" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "fals=
 ity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" "expr" " " "BCFAE=
 " " " "type-case" "(" "  " "\n" ")" "re" "sto" " " "v" "n" "e" " " "expr" "=
  " "d" "(" " " "e" "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" =
 " " "expr" " " "c" " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "=
 ))]" "mtSto" "(" " " ")" "env" " " "bound-body" " " "bound-id" " " "closure=
 V" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id" "(" " " =
 "fun" "[" "    " "\n" "r" "xp" "e" " " "BCFAE" " " "type-case" "(" "  " "\n=
 " ")" "re" "o" "st" " " "v" "en" " " "expr" " " "c" "(" " " "e" "n" "i" "f"=
  "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "b" " " "-in=
 terp" "e" "mak" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " =
 ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "i=
 d" "[" "    " "\n" "r" "xp" "e" " " "CFAE" "B" " " "e" "s" "-ca" "e" "p" "y=
 " "t" "(" "  " "\n" ")" "re" "o" "st" " " "v" "n" "e" " " "r" "p" "ex" " " =
 "b" "(" " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " =
 "a" " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(=
 " " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" " =
    " "\n" "r" "p" "x" "e" " " "CFAE" "B" " " "type-case" "(" "  " "\n" ")" =
 "e" "r" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "a" "(" " " "e" "n" "i" =
 "f" "e" "d" "(" "\n" "\n" "))" "e" "r" "to" "s" " " "v" "n" "e" " " "r" "p"=
  "x" "e" " " "interp" " " "p" "r" "e" "t" "n" "i" "-" "e" "k" "a" "m" "(" "=
   " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "r" "p" "ex" " " "p" "r" =
 "e" "t" "n" "i" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")])))" "valu=
 e" " " "show" "(" " " ")" "store" " " "value" "(" " " "v*s" "[" "      " "\=
 n" "))" "mtSto" "(" " " ")" "mtSub" "(" " " ")" "sexp" " " "parse" "(" " " =
 "interp" "(" " " "Value*Store" " " "type-case" "(" "    " "\n" "])" "exn-me=
 ssage" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " "=
  "lambda" "([(" " " "with-handlers" "(" "  " "\n" ")" "sexp" " " "rp" "te" =
 "n" "i" " " "run" "(" " " "define" "(" "\n" ";; run : S-expression -> S-exp=
 ression" "\n" "\n" "]))" "<box>" "'" " " ")" "location" "(" " " "boxV" "[" =
 "    " "\n" "]" "<closure>" "'" " " ")" "env" " " "body" " " "param" "(" " =
 " "closureV" "[" "    " "\n" "]" "n" " " ")" "n" "(" " " "numV" "[" "    " =
 "\n" "value" " " "BCFAE-Value" " " "type-case" "(" "  " "\n" ")" "value" " =
 " "show" "(" " " "define" "(" "\n" ";; show : BCFAE-Value -> S-expression" =
 "\n" "\n" ")])]))" "e1-store" " " "env" " " "e2" " " "interp" "(" "        =
          " "\n" ")" "e1-store" " " "e1-value" "(" " " "v*s" "[" "          =
   " "\n" ")" "store" " " "env" " " "e1" " " "interp" "(" " " "Value*Store" =
 " " "type-case" "(" "          " "\n" ")" "e2" " " "e1" "(" " " "seqn" "[" =
 "    " "\n" ")])]" "box-store" "                         " "\n" ")" "box-st=
 ore" "                                       " "\n" ")" "box-value" " " "bo=
 xV-location" "(" " " "store-lookup" "(" " " "v*s" "(" "                    =
 " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "               " =
 "\n" ")" "store" " " "env" " " "box-expr" " " "interp" "(" " " "Value*Store=
 " " " "type-case" "(" "             " "\n" ")" "box-expr" "(" " " "openbox"=
  "[" "    " "\n" "))])])]" "value-store" "                                 =
             " "\n" "value-value" "                                         =
     " "\n" ")" "box-value" " " "boxV-location" "(" " " "update-store" "(" "=
                                " "\n" "value-value" " " "v*s" "(" "        =
                   " "\n" ")" "value-store" " " "value-value" "(" " " "v*s" =
 "[" "                     " "\n" ")" "box-store" " " "env" " " "value-expr"=
  " " "interp" "(" " " "Value*Store" " " "type-case" "(" "                  =
  " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "              " =
 "\n" ")" "store" " " "env" " " "box-expr" " " "interp" "(" " " "Value*Store=
 " " " "type-case" "(" "            " "\n" ")" "value-expr" " " "box-expr" "=
 (" " " "setbox" "[" "    " "\n" ")))])]" "expr-store" " " "expr-value" " " =
 "new-loc" " " "aSto" "(" "                          " "\n" ")" "new-loc" " =
 " "boxV" "(" " " "v*s" "(" "                     " "\n" ")])" "expr-store" =
 " " "next-location" "(" " " "new-loc" " " "define" "([" " " "local" "(" "  =
                  " "\n" ")" "expr-store" " " "expr-value" "(" " " "v*s" "["=
  "              " "\n" ")" "store" " " "env" " " "value-expr" " " "interp" =
 "(" " " "Value*Store" " " "type-case" "(" "            " "\n" ")" "value-ex=
 pr" "(" " " "newbox" "[" "    " "\n" "))])]" "test-store" " " "env" " " "fa=
 lsity" " " "interp" "(" "                    " "\n" ")" "test-store" " " "e=
 nv" " " "truth" " " "interp" "(" "                    " "\n" ")" "test-valu=
 e" " " "num-zero?" "(" " " "if" "(" "                " "\n" ")" "test-store=
 " " " "test-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "en=
 v" " " "test" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "     =
     " "\n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\=
 n" ")])])]" "arg-store" "                               " "\n" "))" "fun-va=
 lue" " " "closureV-env" "(" "                                     " "\n" "a=
 rg-value" "                                     " "\n" ")" "fun-value" " " =
 "closureV-param" "(" " " "aSub" "(" "                               " "\n" =
 ")" "fun-value" " " "closureV-body" "(" " " "interp" "(" "                 =
       " "\n" ")" "arg-store" " " "arg-value" "(" " " "v*s" "[" "           =
        " "\n" ")" "fun-store" " " "env" " " "arg-expr" " " "interp" "(" " "=
  "Value*Store" " " "type-case" "(" "                " "\n" ")" "fun-store" =
 " " "fun-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" =
 " " "fun-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "    =
      " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" ")]=
 " "store" " " ")" "env" " " "bound-body" " " "bound-id" " " "closureV" "(" =
 " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" "=
 [" "    " "\n" ")]" "store" " " ")" "env" " " "v" " " "env-lookup" "(" " " =
 "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n" ")])])]" "r-store" "    =
                         " "\n" ")" "r-value" " " "l-value" " " "num+" "(" "=
  " "v*s" "(" "                       " "\n" ")" "r-store" " " "r-value" "("=
  " " "v*s" "[" "                  " "\n" ")" "l-store" " " "env" " " "r" " =
 " "interp" "(" " " "Value*Store" " " "type-case" "(" "                " "\n=
 " ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           " "\n" ")" "sto=
 re" " " "env" " " "l" " " "interp" "(" " " "Value*Store" " " "type-case" "(=
 " "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" ")]" "stor=
 e" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "=
     " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " "=
  "env" " " "expr" " " "p" "r" "e" "t" "n" "i" " " "-interp" "e" "k" "a" "m"=
  "(" " " "define" "(" "\n" "interp : BCFAE Env Store -> Value*Store" "-" "e=
 " "k" "a" "m" ";; " "\n" "\n" ")))" "n" " " "numV-n" "(" " " "zero?" "(" " =
  " "\n" ")" "n" " " "num-zero?" "(" " " "define" "(" "\n" ";; num-zero? : n=
 umV -> boolean" "\n" "\n" "))))" "n2" " " "numV-n" "(" " " ")" "n1" " " "nu=
 mV-n" "(" " " "+" "(" " " "numV" "(" "  " "\n" ")" "n2" " " "n1" " " "num+"=
  "(" " " "define" "(" "\n" ";; num+ : numV numV -> numV" "\n" "\n" ")))]))"=
  "rest-store" " " "new-value" " " "loc-index" " " "update-store" "(" " " "v=
 alue" " " "location" " " "aSto" "(" "              " "\n" ")" "rest-store" =
 " " "new-value" " " "location" " " "aSto" "(" "              " "\n" ")" "lo=
 c-index" " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "r=
 est-store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "=
 \"no such location\"" " " "update-store" "'" " " "error" "(" " " "()" " " "=
 mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" =
 "sto" " " "new-value" " " "loc-index" " " "update-store" "(" " " "define" "=
 (" "\n" ";; update-store : number BCFAE-Value Store -> STore" "\n" "\n" ")]=
 ))" "location" " " "1" " " "+" "(" " " ")" "rest-store" " " "value" " " "lo=
 cation" "(" " " "aSto" "[" "    " "\n" "]" "0" " " "()" " " "mtSto" "[" "  =
   " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "nex=
 t-location" "(" " " "define" "(" "\n" ";; next-location : Store -> number" =
 "\n" "\n" "))]))" "rest-store" " " "loc-index" " " "store-lookup" "(" "    =
           " "\n" "value" "              " "\n" ")" "loc-index" " " "locatio=
 n" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-store" " " "value=
 " " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no value at locatio=
 n\"" " " "store-lookup" "'" " " "error" "(" " " "()" " " "mtSto" "[" "    "=
  "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "loc-in=
 dex" " " "store-lookup" "(" " " "define" "(" "\n" ";; store-lookup : number=
  Store -> BCFAE-Value" "\n" "\n" "))]))" "rest-env" " " "name" " " "env-loo=
 kup" "(" "              " "\n" "bound-value" "              " "\n" ")" "nam=
 e" " " "bound-name" " " "symbol=3D?" "(" " " "if" "(" "          " "\n" ")"=
  "rest-env" " " "bound-value" " " "bound-name" "(" " " "aSub" "[" "    " "\=
 n" ")]" "\"no binding for identifier\"" " " "env-lookup" "'" " " "error" "(=
 " " " "()" " " "mtSub" "[" "    " "\n" "env" " " "Env" " " "type-case" "(" =
 "  " "\n" ")" "env" " " "name" " " "env-lookup" "(" " " "define" "(" "\n" "=
 ;; env-lookup : symbol Env -> BCFAE-Value" "\n" "\n" ")))])]))" "sexp" " " =
 "second" "(" " " "parse" "(" " " "))" "sexp" " " "first" "(" " " "parse" "(=
 " " " "app" "(" " " "else" "[" "                    " "\n" ")))]" "sexp" " =
 " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" =
 "(" " " "seqn" "(" " " ")" "seqn" "[(" "                    " "\n" ")))]" "=
 sexp" " " "second" "(" " " "parse" "(" " " "openbox" "(" " " ")" "openbox" =
 "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" " " "parse" =
 "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "setbox" "(" " " "=
 )" "setbox" "[(" "                    " "\n" ")))]" "sexp" " " "second" "("=
  " " "parse" "(" " " "newbox" "(" " " ")" "newbox" "[(" "                  =
   " "\n" ")))]" "sexp" " " "fourth" "(" " " "parse" "(" "                  =
               " "\n" "))" "sexp" " " "third" "(" " " "parse" "(" "         =
                        " "\n" "))" "sexp" " " "second" "(" " " "parse" "(" =
 " " "if0" "(" " " ")" "if0" "[(" "                    " "\n" "))))]" "sexp"=
  " " "second" "(" " " "second" "(" " " "parse" "(" "                       =
           " "\n" ")))" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sex=
 p" " " "second" "(" " " "first" "(" " " "fun" "(" " " "app" "(" " " ")" "wi=
 th" "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" " " "par=
 se" "(" " " "))" "sexp" " " "second" "(" " " "first" "(" " " "fun" "(" " " =
 ")" "fun" "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" " =
 " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "add" "(=
 " " " ")" "+" "[(" "                    " "\n" ")" "sexp" " " "first" "(" "=
  " "case" "(" " " ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "sexp" " " "=
 id" "(" " " ")" "sexp" " " "symbol?" "[(" "    " "\n" ")]" "sexp" " " "num"=
  "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")"=
  "sexp" " " "parse" "(" " " "define" "(" "\n" ";; parse : S-expression -> B=
 CFAE" "\n" "\n" ")])" "Store?" " " "store" "(" " " ")" "BCFAE-Value?" " " "=
 value" "(" " " "v*s" "[" "  " "\n" "Value*Store" " " "define-type" "(" "\n"=
  "\n" ")])" "Store?" " " "store" "(" "        " "\n" ")" "BCFAE-Value?" " "=
  "value" "(" "        " "\n" ")" "number?" " " "location" "(" " " "aSto" "[=
 " "  " "\n" "]" "mtSto" "[" "  " "\n" "Store" " " "define-type" "(" "\n" "\=
 n" ")])" "Env?" " " "env" "(" "        " "\n" ")" "BCFAE-Value?" " " "value=
 " "(" "        " "\n" ")" "symbol?" " " "name" "(" " " "aSub" "[" "  " "\n"=
  "]" "mtSub" "[" "  " "\n" "Env" " " "define-type" "(" "\n" "\n" ")])" "num=
 ber?" " " "location" "(" " " "boxV" "[" "  " "\n" ")]" "Env?" " " "env" "("=
  " " ")" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" "(" " " "clo=
 sureV" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "numV" "[" "  " "\n" "B=
 CFAE-Value" " " "define-type" "(" "\n" "\n" ")])" "BCFAE?" " " "e2" "(" " "=
  ")" "BCFAE?" " " "e1" "(" " " "seqn" "[" "  " "\n" ")]" "BCFAE?" " " "box-=
 expr" "(" " " "openbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " =
 " ")" "BCFAE?" " " "box-expr" "(" " " "setbox" "[" "  " "\n" ")]" "BCFAE?" =
 " " "value-expr" "(" " " "newbox" "[" "  " "\n" ")]" "BCFAE?" " " "falsity"=
  "(" " " ")" "BCFAE?" " " "truth" "(" " " ")" "BCFAE?" " " "test" "(" " " "=
 if0" "[" "  " "\n" ")]" "BCFAE?" " " "arg-expr" "(" " " ")" "BCFAE?" " " "f=
 un-expr" "(" " " "app" "[" "  " "\n" ")]" "BCFAE?" " " "body" "(" " " ")" "=
 symbol?" " " "param" "(" " " "fun" "[" "  " "\n" ")]" "symbol?" " " "name" =
 "(" " " "id" "[" "  " "\n" ")]" "BCFAE?" " " "rhs" "(" " " ")" "BCFAE?" " "=
  "lhs" "(" " " "add" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "num" "["=
  "  " "\n" "BCFAE" " " "define-type" "(") ("\n" ")" "f" "ex1" " " "f" " " "=
 t" "(" "\n" ")" "e" "1" "x" "e" " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " =
 "d" " " "t" "(" "\n" ")" "c" "1" "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "=
 1" "x" "e" " " "b" " " "t" "(" "\n" ")" "1a" "x" "e" " " "a" " " "t" "(" "\=
 n" "\n" ")))" "p" "x" "e" "s" " " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" "=
  " "un" "r" "(" " " ")" "sexp" " " "interp" " " "run" "(" " " "t" "s" "i" "=
 l" "(" "  " "\n" ")" "xp" "e" "s" " " "d" "o" "m" "/" "rp" "e" "t" "in" " "=
  "t" "(" " " "define" "(" "\n" "\n" "\n" ")]))" "store" " " "env" " " "expr=
 " " " "f" " " "make-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" ")])])]=
 " "arg-store" "                          " "\n" "))" "fun-value" " " "closu=
 reV-env" "(" "                                " "\n" "arg-value" "         =
                        " "\n" ")" "fun-value" " " "closureV-param" "(" " " =
 "aSub" "(" "                          " "\n" ")" "fun-value" " " "closureV-=
 body" "(" " " "f" "(" "                       " "\n" ")" "arg-store" " " "f=
 un-value" "(" " " "v*s" "[" "                  " "\n" ")" "fun-store" " " "=
 env" " " "fun-expr" " " "f" "(" " " "Value*Store" " " "type-case" "(" "    =
             " "\n" ")" "fun-store" " " "arg-value" "(" " " "v*s" "[" "     =
       " "\n" ")" "store" " " "env" " " "arg-expr" " " "f" "(" " " "Value*St=
 ore" " " "type-case" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "("=
  " " "app" "[" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" =
 "  " "\n" ")" "store" " " "env" " " "expr" " " "f" "(" " " "e" "n" "i" "f" =
 "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "e" " " "make=
 -interp" "(" " " "else" "[" "    " "\n" ")])])]" "r-store" " " ")" "r-value=
 " " " "l-value" " " "num+" "(" " " "v*s" "(" "                       " "\n"=
  ")" "r-store" " " "r-value" "(" " " "v*s" "[" "                  " "\n" ")=
 " "l-store" " " "env" " " "l" " " "e" "(" " " "Value*Store" " " "type-case"=
  "(" "                " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" =
 "           " "\n" ")" "store" " " "env" " " "r" " " "e" "(" " " "Value*Sto=
 re" " " "type-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" =
 "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "=
 re" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "e" "(" " " "e" "n" "i" "f" =
 "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "d" " " "make=
 -interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" "))])]" "store" " " "env" =
 " " "falsity" " " "d" "(" "                    " "\n" ")" "test-store" " " =
 "env" " " "truth" " " "d" "(" "                    " "\n" ")" "test-value" =
 " " "num-zero?" "(" " " "if" "(" "                " "\n" ")" "test-store" "=
  " "test-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" =
 " " "test" " " "d" "(" " " "Value*Store" " " "type-case" "(" "         " "\=
 n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" "expr=
 " " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "sto" " " "v" "n" "e" =
 " " "expr" " " "d" "(" " " "e" "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "store=
 " " " "env" " " "expr" " " "c" " " "make-interp" "(" " " "se" "l" "e" "[" "=
     " "\n" "))]" "mtSto" "(" " " ")" "env" " " "bound-body" " " "bound-id" =
 " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-=
 id" "(" " " "fun" "[" "    " "\n" "r" "xp" "e" " " "BCFAE" " " "type-case" =
 "(" "  " "\n" ")" "re" "o" "st" " " "v" "en" " " "expr" " " "c" "(" " " "e"=
  "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " =
 "b" " " "-interp" "e" "mak" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtS=
 to" "(" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v=
 " "(" " " "id" "[" "    " "\n" "r" "xp" "e" " " "CFAE" "B" " " "e" "s" "-ca=
 " "e" "p" "y" "t" "(" "  " "\n" ")" "re" "o" "st" " " "v" "n" "e" " " "r" "=
 p" "ex" " " "b" "(" " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " "=
  "expr" " " "a" " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]=
 " "mtSto" "(" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " =
 "num" "[" "    " "\n" "r" "p" "x" "e" " " "CFAE" "B" " " "type-case" "(" " =
  " "\n" ")" "e" "r" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "a" "(" " " =
 "e" "n" "i" "f" "e" "d" "(" "\n" "\n" "))" "e" "r" "to" "s" " " "v" "n" "e"=
  " " "r" "p" "x" "e" " " "interp" " " "p" "r" "e" "t" "n" "i" "-" "e" "k" "=
 a" "m" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "r" "p" "ex" =
 " " "p" "r" "e" "t" "n" "i" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" "=
 )])))" "value" " " "show" "(" " " ")" "store" " " "value" "(" " " "v*s" "["=
  "      " "\n" "))" "mtSto" "(" " " ")" "mtSub" "(" " " ")" "sexp" " " "par=
 se" "(" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "    " "\n" =
 "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")"=
  "x" "(" " " "lambda" "([(" " " "with-handlers" "(" "  " "\n" ")" "sexp" " =
 " "rp" "te" "n" "i" " " "run" "(" " " "define" "(" "\n" ";; run : S-express=
 ion -> S-expression" "\n" "\n" "]))" "<box>" "'" " " ")" "location" "(" " "=
  "boxV" "[" "    " "\n" "]" "<closure>" "'" " " ")" "env" " " "body" " " "p=
 aram" "(" " " "closureV" "[" "    " "\n" "]" "n" " " ")" "n" "(" " " "numV"=
  "[" "    " "\n" "value" " " "BCFAE-Value" " " "type-case" "(" "  " "\n" ")=
 " "value" " " "show" "(" " " "define" "(" "\n" ";; show : BCFAE-Value -> S-=
 expression" "\n" "\n" ")])]))" "e1-store" " " "env" " " "e2" " " "interp" "=
 (" "                 " "\n" ")" "e1-store" " " "e1-value" "(" " " "v*s" "["=
  "            " "\n" ")" "store" " " "env" " " "e1" " " "interp" "(" " " "V=
 alue*Store" " " "type-case" "(" "          " "\n" ")" "e2" " " "e1" "(" " "=
  "seqn" "[" "    " "\n" ")])]" "box-store" "                         " "\n"=
  ")" "box-store" "                                       " "\n" ")" "box-va=
 lue" " " "boxV-location" "(" " " "store-lookup" "(" " " "v*s" "(" "        =
             " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "     =
           " "\n" ")" "store" " " "env" " " "box-expr" " " "interp" "(" " " =
 "Value*Store" " " "type-case" "(" "             " "\n" ")" "box-expr" "(" "=
  " "openbox" "[" "    " "\n" "))])])]" "value-store" "                     =
                         " "\n" "value-value" "                             =
                 " "\n" ")" "box-value" " " "boxV-location" "(" " " "update-=
 store" "(" "                               " "\n" "value-value" " " "v*s" "=
 (" "                          " "\n" ")" "value-store" " " "value-value" "(=
 " " " "v*s" "[" "                     " "\n" ")" "box-store" " " "env" " " =
 "value-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "      =
              " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "    =
           " "\n" ")" "store" " " "env" " " "box-expr" " " "interp" "(" " " =
 "Value*Store" " " "type-case" "(" "            " "\n" ")" "value-expr" " " =
 "box-expr" "(" " " "setbox" "[" "    " "\n" ")))])]" "expr-store" " " "expr=
 -value" " " "new-loc" " " "aSto" "(" "                          " "\n" ")" =
 "new-loc" " " "boxV" "(" " " "v*s" "(" "                     " "\n" ")])" "=
 expr-store" " " "next-location" "(" " " "new-loc" " " "define" "([" " " "lo=
 cal" "(" "                   " "\n" ")" "expr-store" " " "expr-value" "(" "=
  " "v*s" "[" "              " "\n" ")" "store" " " "env" " " "value-expr" "=
  " "interp" "(" " " "Value*Store" " " "type-case" "(" "            " "\n" "=
 )" "value-expr" "(" " " "newbox" "[" "    " "\n" "))])]" "test-store" " " "=
 env" " " "falsity" " " "interp" "(" "                    " "\n" ")" "test-s=
 tore" " " "env" " " "truth" " " "interp" "(" "                    " "\n" ")=
 " "test-value" " " "num-zero?" "(" " " "if" "(" "                " "\n" ")"=
  "test-store" " " "test-value" "(" " " "v*s" "[" "           " "\n" ")" "st=
 ore" " " "env" " " "test" " " "interp" "(" " " "Value*Store" " " "type-case=
 " "(" "         " "\n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "=
 [" "    " "\n" ")])])]" "arg-store" "                               " "\n" =
 "))" "fun-value" " " "closureV-env" "(" "                                  =
    " "\n" "arg-value" "                                     " "\n" ")" "fun=
 -value" " " "closureV-param" "(" " " "aSub" "(" "                          =
      " "\n" ")" "fun-value" " " "closureV-body" "(" " " "interp" "(" "     =
                   " "\n" ")" "arg-store" " " "arg-value" "(" " " "v*s" "[" =
 "                  " "\n" ")" "fun-store" " " "env" " " "arg-expr" " " "int=
 erp" "(" " " "Value*Store" " " "type-case" "(" "                " "\n" ")" =
 "fun-store" " " "fun-value" "(" " " "v*s" "[" "           " "\n" ")" "store=
 " " " "env" " " "fun-expr" " " "interp" "(" " " "Value*Store" " " "type-cas=
 e" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "  =
   " "\n" ")]" "store" " " ")" "env" " " "bound-body" " " "bound-id" " " "cl=
 osureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id" "("=
  " " "fun" "[" "    " "\n" ")]" "store" " " ")" "env" " " "v" " " "env-look=
 up" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n" ")])])]" "r-=
 store" "                            " "\n" ")" "r-value" " " "l-value" " " =
 "num+" "(" " " "v*s" "(" "                       " "\n" ")" "r-store" " " "=
 r-value" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" " " "env=
 " " " "r" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         =
        " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           " "=
 \n" ")" "store" " " "env" " " "l" " " "interp" "(" " " "Value*Store" " " "t=
 ype-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n=
 " ")]" "store" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " "=
  "num" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")"=
  "store" " " "env" " " "expr" " " "p" "r" "e" "t" "n" "i" " " "-interp" "e"=
  "k" "a" "m" "(" " " "define" "(" "\n" "interp : BCFAE Env Store -> Value*S=
 tore" "-" "e" "k" "a" "m" ";; " "\n" "\n" ")))" "n" " " "numV-n" "(" " " "z=
 ero?" "(" "  " "\n" ")" "n" " " "num-zero?" "(" " " "define" "(" "\n" ";; n=
 um-zero? : numV -> boolean" "\n" "\n" "))))" "n2" " " "numV-n" "(" " " ")" =
 "n1" " " "numV-n" "(" " " "+" "(" " " "numV" "(" "  " "\n" ")" "n2" " " "n1=
 " " " "num+" "(" " " "define" "(" "\n" ";; num+ : numV numV -> numV" "\n" "=
 \n" ")))]))" "rest-store" " " "new-value" " " "loc-index" " " "update-store=
 " "(" " " "value" " " "location" " " "aSto" "(" "              " "\n" ")" "=
 rest-store" " " "new-value" " " "location" " " "aSto" "(" "              " =
 "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if" "(" "          "=
  "\n" ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "[" "    "=
  "\n" ")]" "\"no such location\"" " " "update-store" "'" " " "error" "(" " =
 " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" " =
  " "\n" ")" "sto" " " "new-value" " " "loc-index" " " "update-store" "(" " =
 " "define" "(" "\n" ";; update-store : number BCFAE-Value Store -> STore" "=
 \n" "\n" ")]))" "location" " " "1" " " "+" "(" " " ")" "rest-store" " " "va=
 lue" " " "location" "(" " " "aSto" "[" "    " "\n" "]" "0" " " "()" " " "mt=
 Sto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "s=
 to" " " "next-location" "(" " " "define" "(" "\n" ";; next-location : Store=
  -> number" "\n" "\n" "))]))" "rest-store" " " "loc-index" " " "store-looku=
 p" "(" "              " "\n" "value" "              " "\n" ")" "loc-index" =
 " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-store=
 " " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no valu=
 e at location\"" " " "store-lookup" "'" " " "error" "(" " " "()" " " "mtSto=
 " "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto"=
  " " "loc-index" " " "store-lookup" "(" " " "define" "(" "\n" ";; store-loo=
 kup : number Store -> BCFAE-Value" "\n" "\n" "))]))" "rest-env" " " "name" =
 " " "env-lookup" "(" "              " "\n" "bound-value" "              " "=
 \n" ")" "name" " " "bound-name" " " "symbol=3D?" "(" " " "if" "(" "        =
   " "\n" ")" "rest-env" " " "bound-value" " " "bound-name" "(" " " "aSub" "=
 [" "    " "\n" ")]" "\"no binding for identifier\"" " " "env-lookup" "'" " =
 " "error" "(" " " "()" " " "mtSub" "[" "    " "\n" "env" " " "Env" " " "typ=
 e-case" "(" "  " "\n" ")" "env" " " "name" " " "env-lookup" "(" " " "define=
 " "(" "\n" ";; env-lookup : symbol Env -> BCFAE-Value" "\n" "\n" ")))])]))"=
  "sexp" " " "second" "(" " " "parse" "(" " " "))" "sexp" " " "first" "(" " =
 " "parse" "(" " " "app" "(" " " "else" "[" "                    " "\n" ")))=
 ]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" =
 " " "parse" "(" " " "seqn" "(" " " ")" "seqn" "[(" "                    " "=
 \n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "openbox" "(" " " ")=
 " "openbox" "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" =
 " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "setbo=
 x" "(" " " ")" "setbox" "[(" "                    " "\n" ")))]" "sexp" " " =
 "second" "(" " " "parse" "(" " " "newbox" "(" " " ")" "newbox" "[(" "      =
               " "\n" ")))]" "sexp" " " "fourth" "(" " " "parse" "(" "      =
                           " "\n" "))" "sexp" " " "third" "(" " " "parse" "(=
 " "                                " "\n" "))" "sexp" " " "second" "(" " " =
 "parse" "(" " " "if0" "(" " " ")" "if0" "[(" "                    " "\n" ")=
 )))]" "sexp" " " "second" "(" " " "second" "(" " " "parse" "(" "           =
                       " "\n" ")))" "sexp" " " "third" "(" " " "parse" "(" "=
  " "))" "sexp" " " "second" "(" " " "first" "(" " " "fun" "(" " " "app" "("=
  " " ")" "with" "[(" "                    " "\n" ")))]" "sexp" " " "third" =
 "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "first" "(" " " "f=
 un" "(" " " ")" "fun" "[(" "                    " "\n" ")))]" "sexp" " " "t=
 hird" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" =
 " " "add" "(" " " ")" "+" "[(" "                    " "\n" ")" "sexp" " " "=
 first" "(" " " "case" "(" " " ")" "sexp" " " "list?" "[(" "    " "\n" ")]" =
 "sexp" " " "id" "(" " " ")" "sexp" " " "symbol?" "[(" "    " "\n" ")]" "sex=
 p" " " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" "(" "=
   " "\n" ")" "sexp" " " "parse" "(" " " "define" "(" "\n" ";; parse : S-exp=
 ression -> BCFAE" "\n" "\n" ")])" "Store?" " " "store" "(" " " ")" "BCFAE-V=
 alue?" " " "value" "(" " " "v*s" "[" "  " "\n" "Value*Store" " " "define-ty=
 pe" "(" "\n" "\n" ")])" "Store?" " " "store" "(" "        " "\n" ")" "BCFAE=
 -Value?" " " "value" "(" "        " "\n" ")" "number?" " " "location" "(" "=
  " "aSto" "[" "  " "\n" "]" "mtSto" "[" "  " "\n" "Store" " " "define-type"=
  "(" "\n" "\n" ")])" "Env?" " " "env" "(" "        " "\n" ")" "BCFAE-Value?=
 " " " "value" "(" "        " "\n" ")" "symbol?" " " "name" "(" " " "aSub" "=
 [" "  " "\n" "]" "mtSub" "[" "  " "\n" "Env" " " "define-type" "(" "\n" "\n=
 " ")])" "number?" " " "location" "(" " " "boxV" "[" "  " "\n" ")]" "Env?" "=
  " "env" "(" " " ")" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" =
 "(" " " "closureV" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "numV" "[" =
 "  " "\n" "BCFAE-Value" " " "define-type" "(" "\n" "\n" ")])" "BCFAE?" " " =
 "e2" "(" " " ")" "BCFAE?" " " "e1" "(" " " "seqn" "[" "  " "\n" ")]" "BCFAE=
 ?" " " "box-expr" "(" " " "openbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-=
 expr" "(" " " ")" "BCFAE?" " " "box-expr" "(" " " "setbox" "[" "  " "\n" ")=
 ]" "BCFAE?" " " "value-expr" "(" " " "newbox" "[" "  " "\n" ")]" "BCFAE?" "=
  " "falsity" "(" " " ")" "BCFAE?" " " "truth" "(" " " ")" "BCFAE?" " " "tes=
 t" "(" " " "if0" "[" "  " "\n" ")]" "BCFAE?" " " "arg-expr" "(" " " ")" "BC=
 FAE?" " " "fun-expr" "(" " " "app" "[" "  " "\n" ")]" "BCFAE?" " " "body" "=
 (" " " ")" "symbol?" " " "param" "(" " " "fun" "[" "  " "\n" ")]" "symbol?"=
  " " "name" "(" " " "id" "[" "  " "\n" ")]" "BCFAE?" " " "rhs" "(" " " ")" =
 "BCFAE?" " " "lhs" "(" " " "add" "[" "  " "\n" ")]" "number?" " " "n" "(" "=
  " "num" "[" "  " "\n" "BCFAE" " " "define-type" "(") ("a" "1" "ex") ("\n" =
 ")" "f" "ex1" " " "f" " " "t" "(" "\n" ")" "e" "1" "x" "e" " " "e" " " "t" =
 "(" "\n" ")" "d" "ex1" " " "d" " " "t" "(" "\n" ")" "c" "1" "x" "e" " " "c"=
  " " "t" "(" "\n" ")" "b" "1" "x" "e" " " "b" " " "t" "(" "\n" ")" "1a" "x"=
  "e" " " "a" " " "t" "(" "\n" "\n" ")))" "p" "x" "e" "s" " " "d" "o" "m" "/=
 " "p" "r" "e" "t" "n" "i" " " "un" "r" "(" " " ")" "sexp" " " "interp" " " =
 "run" "(" " " "t" "s" "i" "l" "(" "  " "\n" ")" "xp" "e" "s" " " "d" "o" "m=
 " "/" "rp" "e" "t" "in" " " "t" "(" " " "define" "(" "\n" "\n" "\n" ")]))" =
 "store" " " "env" " " "expr" " " "f" " " "make-interp" "(" " " "e" "s" "l" =
 "e" "[" "    " "\n" ")])])]" "arg-store" "                          " "\n" =
 "))" "fun-value" " " "closureV-env" "(" "                                " =
 "\n" "arg-value" "                                " "\n" ")" "fun-value" " =
 " "closureV-param" "(" " " "aSub" "(" "                          " "\n" ")"=
  "fun-value" " " "closureV-body" "(" " " "f" "(" "                       " =
 "\n" ")" "arg-store" " " "fun-value" "(" " " "v*s" "[" "                  "=
  "\n" ")" "fun-store" " " "env" " " "fun-expr" " " "f" "(" " " "Value*Store=
 " " " "type-case" "(" "                " "\n" ")" "fun-store" " " "arg-valu=
 e" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "arg-expr=
 " " " "f" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "a=
 rg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" "r" "p" "x" "e" " " "=
 BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "=
 f" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" "=
  " "expr" " " "e" " " "make-interp" "(" " " "else" "[" "    " "\n" ")])])]"=
  "r-store" " " ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "  =
                      " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "=
                   " "\n" ")" "l-store" " " "env" " " "l" " " "e" "(" " " "V=
 alue*Store" " " "type-case" "(" "                " "\n" ")" "l-store" " " "=
 l-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "r"=
  " " "e" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "r"=
  " " "l" "(" " " "add" "[" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "typ=
 e-case" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "=
 e" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" "=
  " "expr" " " "d" " " "make-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n"=
  "))])]" "store" " " "env" " " "falsity" " " "d" "(" "                    "=
  "\n" ")" "test-store" " " "env" " " "truth" " " "d" "(" "                 =
    " "\n" ")" "test-value" " " "num-zero?" "(" " " "if" "(" "              =
   " "\n" ")" "test-store" " " "test-value" "(" " " "v*s" "[" "           " =
 "\n" ")" "store" " " "env" " " "test" " " "d" "(" " " "Value*Store" " " "ty=
 pe-case" "(" "         " "\n" ")" "falsity" " " "truth" " " "test" "(" " " =
 "if0" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" =
 "re" "sto" " " "v" "n" "e" " " "expr" " " "d" "(" " " "e" "n" "fi" "e" "d" =
 "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "c" " " "make-interp"=
  "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "=
 bound-body" " " "bound-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" "=
 )" "bound-body" " " "bound-id" "(" " " "fun" "[" "    " "\n" "r" "xp" "e" "=
  " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "st" " " "v" "en" " "=
  "expr" " " "c" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store=
 " " " "env" " " "expr" " " "b" " " "-interp" "e" "mak" "(" " " "se" "l" "e"=
  "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "v" " " "env-lookup" "=
 (" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n" "r" "xp" "e" " " =
 "CFAE" "B" " " "e" "s" "-ca" "e" "p" "y" "t" "(" "  " "\n" ")" "re" "o" "st=
 " " " "v" "n" "e" " " "r" "p" "ex" " " "b" "(" " " "define" "(" "\n" "\n" "=
 )]))" "store" " " "env" " " "expr" " " "a" " " "make-interp" "(" " " "se" "=
 l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "n" " " "numV" "(" " " "v*=
 s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "r" "p" "x" "e" " " "CFAE"=
  "B" " " "type-case" "(" "  " "\n" ")" "e" "r" "o" "t" "s" " " "v" "n" "e" =
 " " "expr" " " "a" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" "))" "e" "=
 r" "to" "s" " " "v" "n" "e" " " "r" "p" "x" "e" " " "interp" " " "p" "r" "e=
 " "t" "n" "i" "-" "e" "k" "a" "m" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v=
 " "n" "e" " " "r" "p" "ex" " " "p" "r" "e" "t" "n" "i" "(" " " "e" "n" "i" =
 "f" "e" "d" "(" "\n" "\n" ")])))" "value" " " "show" "(" " " ")" "store" " =
 " "value" "(" " " "v*s" "[" "      " "\n" "))" "mtSto" "(" " " ")" "mtSub" =
 "(" " " ")" "sexp" " " "parse" "(" " " "interp" "(" " " "Value*Store" " " "=
 type-case" "(" "    " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?=
 " "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" =
 "(" "  " "\n" ")" "sexp" " " "rp" "te" "n" "i" " " "run" "(" " " "define" "=
 (" "\n" ";; run : S-expression -> S-expression" "\n" "\n" "]))" "<box>" "'"=
  " " ")" "location" "(" " " "boxV" "[" "    " "\n" "]" "<closure>" "'" " " =
 ")" "env" " " "body" " " "param" "(" " " "closureV" "[" "    " "\n" "]" "n"=
  " " ")" "n" "(" " " "numV" "[" "    " "\n" "value" " " "BCFAE-Value" " " "=
 type-case" "(" "  " "\n" ")" "value" " " "show" "(" " " "define" "(" "\n" "=
 ;; show : BCFAE-Value -> S-expression" "\n" "\n" ")])]))" "e1-store" " " "e=
 nv" " " "e2" " " "interp" "(" "                 " "\n" ")" "e1-store" " " "=
 e1-value" "(" " " "v*s" "[" "            " "\n" ")" "store" " " "env" " " "=
 e1" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "          " "\n=
 " ")" "e2" " " "e1" "(" " " "seqn" "[" "    " "\n" ")])]" "box-store" "    =
                      " "\n" ")" "box-store" "                              =
          " "\n" ")" "box-value" " " "boxV-location" "(" " " "store-lookup" =
 "(" " " "v*s" "(" "                    " "\n" ")" "box-store" " " "box-valu=
 e" "(" " " "v*s" "[" "               " "\n" ")" "store" " " "env" " " "box-=
 expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "             =
 " "\n" ")" "box-expr" "(" " " "openbox" "[" "    " "\n" "))])])]" "value-st=
 ore" "                                             " "\n" "value-value" "  =
                                            " "\n" ")" "box-value" " " "boxV=
 -location" "(" " " "update-store" "(" "                               " "\n=
 " "value-value" " " "v*s" "(" "                          " "\n" ")" "value-=
 store" " " "value-value" "(" " " "v*s" "[" "                     " "\n" ")"=
  "box-store" " " "env" " " "value-expr" " " "interp" "(" " " "Value*Store" =
 " " "type-case" "(" "                   " "\n" ")" "box-store" " " "box-val=
 ue" "(" " " "v*s" "[" "              " "\n" ")" "store" " " "env" " " "box-=
 expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "            "=
  "\n" ")" "value-expr" " " "box-expr" "(" " " "setbox" "[" "    " "\n" ")))=
 ])]" "expr-store" " " "expr-value" " " "new-loc" " " "aSto" "(" "          =
                 " "\n" ")" "new-loc" " " "boxV" "(" " " "v*s" "(" "        =
              " "\n" ")])" "expr-store" " " "next-location" "(" " " "new-loc=
 " " " "define" "([" " " "local" "(" "                   " "\n" ")" "expr-st=
 ore" " " "expr-value" "(" " " "v*s" "[" "              " "\n" ")" "store" "=
  " "env" " " "value-expr" " " "interp" "(" " " "Value*Store" " " "type-case=
 " "(" "            " "\n" ")" "value-expr" "(" " " "newbox" "[" "    " "\n"=
  "))])]" "test-store" " " "env" " " "falsity" " " "interp" "(" "           =
          " "\n" ")" "test-store" " " "env" " " "truth" " " "interp" "(" "  =
                   " "\n" ")" "test-value" " " "num-zero?" "(" " " "if" "(" =
 "                " "\n" ")" "test-store" " " "test-value" "(" " " "v*s" "["=
  "           " "\n" ")" "store" " " "env" " " "test" " " "interp" "(" " " "=
 Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity" " " "truth"=
  " " "test" "(" " " "if0" "[" "    " "\n" ")])])]" "arg-store" "           =
                     " "\n" "))" "fun-value" " " "closureV-env" "(" "       =
                               " "\n" "arg-value" "                         =
             " "\n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" =
 "                               " "\n" ")" "fun-value" " " "closureV-body" =
 "(" " " "interp" "(" "                       " "\n" ")" "arg-store" " " "ar=
 g-value" "(" " " "v*s" "[" "                  " "\n" ")" "fun-store" " " "e=
 nv" " " "arg-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "=
                 " "\n" ")" "fun-store" " " "fun-value" "(" " " "v*s" "[" " =
           " "\n" ")" "store" " " "env" " " "fun-expr" " " "interp" "(" " " =
 "Value*Store" " " "type-case" "(" "         " "\n" ")" "arg-expr" " " "fun-=
 expr" "(" " " "app" "[" "    " "\n" ")]" "store" " " ")" "env" " " "bound-b=
 ody" " " "bound-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bou=
 nd-body" " " "bound-id" "(" " " "fun" "[" "    " "\n" ")]" "store" " " ")" =
 "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "=
 [" "    " "\n" ")])])]" "r-store" "                            " "\n" ")" "=
 r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "                      =
  " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "                  " =
 "\n" ")" "l-store" " " "env" " " "r" " " "interp" "(" " " "Value*Store" " "=
  "type-case" "(" "                " "\n" ")" "l-store" " " "l-value" "(" " =
 " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "l" " " "interp" "=
 (" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "r" " " "l" "=
 (" " " "add" "[" "    " "\n" ")]" "store" " " ")" "n" " " "numV" "(" " " "v=
 *s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "expr" " " "BCFAE" " " "t=
 ype-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "p" "r" "e" "t=
 " "n" "i" " " "-interp" "e" "k" "a" "m" "(" " " "define" "(" "\n" "interp :=
  BCFAE Env Store -> Value*Store" "-" "e" "k" "a" "m" ";; " "\n" "\n" ")))" =
 "n" " " "numV-n" "(" " " "zero?" "(" "  " "\n" ")" "n" " " "num-zero?" "(" =
 " " "define" "(" "\n" ";; num-zero? : numV -> boolean" "\n" "\n" "))))" "n2=
 " " " "numV-n" "(" " " ")" "n1" " " "numV-n" "(" " " "+" "(" " " "numV" "("=
  "  " "\n" ")" "n2" " " "n1" " " "num+" "(" " " "define" "(" "\n" ";; num+ =
 : numV numV -> numV" "\n" "\n" ")))]))" "rest-store" " " "new-value" " " "l=
 oc-index" " " "update-store" "(" " " "value" " " "location" " " "aSto" "(" =
 "              " "\n" ")" "rest-store" " " "new-value" " " "location" " " "=
 aSto" "(" "              " "\n" ")" "loc-index" " " "location" " " "=3D" "(=
 " " " "if" "(" "          " "\n" ")" "rest-store" " " "value" " " "location=
 " "(" " " "aSto" "[" "    " "\n" ")]" "\"no such location\"" " " "update-st=
 ore" "'" " " "error" "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "St=
 ore" " " "type-case" "(" "  " "\n" ")" "sto" " " "new-value" " " "loc-index=
 " " " "update-store" "(" " " "define" "(" "\n" ";; update-store : number BC=
 FAE-Value Store -> STore" "\n" "\n" ")]))" "location" " " "1" " " "+" "(" "=
  " ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\=
 n" "]" "0" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type=
 -case" "(" "  " "\n" ")" "sto" " " "next-location" "(" " " "define" "(" "\n=
 " ";; next-location : Store -> number" "\n" "\n" "))]))" "rest-store" " " "=
 loc-index" " " "store-lookup" "(" "              " "\n" "value" "          =
     " "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if" "(" "     =
      " "\n" ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "[" =
 "    " "\n" ")]" "\"no value at location\"" " " "store-lookup" "'" " " "err=
 or" "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-ca=
 se" "(" "  " "\n" ")" "sto" " " "loc-index" " " "store-lookup" "(" " " "def=
 ine" "(" "\n" ";; store-lookup : number Store -> BCFAE-Value" "\n" "\n" "))=
 ]))" "rest-env" " " "name" " " "env-lookup" "(" "              " "\n" "boun=
 d-value" "              " "\n" ")" "name" " " "bound-name" " " "symbol=3D?"=
  "(" " " "if" "(" "          " "\n" ")" "rest-env" " " "bound-value" " " "b=
 ound-name" "(" " " "aSub" "[" "    " "\n" ")]" "\"no binding for identifier=
 \"" " " "env-lookup" "'" " " "error" "(" " " "()" " " "mtSub" "[" "    " "\=
 n" "env" " " "Env" " " "type-case" "(" "  " "\n" ")" "env" " " "name" " " "=
 env-lookup" "(" " " "define" "(" "\n" ";; env-lookup : symbol Env -> BCFAE-=
 Value" "\n" "\n" ")))])]))" "sexp" " " "second" "(" " " "parse" "(" " " "))=
 " "sexp" " " "first" "(" " " "parse" "(" " " "app" "(" " " "else" "[" "    =
                 " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " ")=
 )" "sexp" " " "second" "(" " " "parse" "(" " " "seqn" "(" " " ")" "seqn" "[=
 (" "                    " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "=
 (" " " "openbox" "(" " " ")" "openbox" "[(" "                    " "\n" "))=
 )]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "("=
  " " "parse" "(" " " "setbox" "(" " " ")" "setbox" "[(" "                  =
   " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "newbox" "(" " =
 " ")" "newbox" "[(" "                    " "\n" ")))]" "sexp" " " "fourth" =
 "(" " " "parse" "(" "                                " "\n" "))" "sexp" " "=
  "third" "(" " " "parse" "(" "                                " "\n" "))" "=
 sexp" " " "second" "(" " " "parse" "(" " " "if0" "(" " " ")" "if0" "[(" "  =
                   " "\n" "))))]" "sexp" " " "second" "(" " " "second" "(" "=
  " "parse" "(" "                                 " "\n" ")))" "sexp" " " "t=
 hird" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "first" "(" =
 " " "fun" "(" " " "app" "(" " " ")" "with" "[(" "                    " "\n"=
  ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second"=
  "(" " " "first" "(" " " "fun" "(" " " ")" "fun" "[(" "                    =
 " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "s=
 econd" "(" " " "parse" "(" " " "add" "(" " " ")" "+" "[(" "                =
     " "\n" ")" "sexp" " " "first" "(" " " "case" "(" " " ")" "sexp" " " "li=
 st?" "[(" "    " "\n" ")]" "sexp" " " "id" "(" " " ")" "sexp" " " "symbol?"=
  "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "number?" "[=
 (" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "parse" "(" " " "define"=
  "(" "\n" ";; parse : S-expression -> BCFAE" "\n" "\n" ")])" "Store?" " " "=
 store" "(" " " ")" "BCFAE-Value?" " " "value" "(" " " "v*s" "[" "  " "\n" "=
 Value*Store" " " "define-type" "(" "\n" "\n" ")])" "Store?" " " "store" "("=
  "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" ")" "nu=
 mber?" " " "location" "(" " " "aSto" "[" "  " "\n" "]" "mtSto" "[" "  " "\n=
 " "Store" " " "define-type" "(" "\n" "\n" ")])" "Env?" " " "env" "(" "     =
    " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" ")" "symbol?" =
 " " "name" "(" " " "aSub" "[" "  " "\n" "]" "mtSub" "[" "  " "\n" "Env" " "=
  "define-type" "(" "\n" "\n" ")])" "number?" " " "location" "(" " " "boxV" =
 "[" "  " "\n" ")]" "Env?" " " "env" "(" " " ")" "BCFAE?" " " "body" "(" " "=
  ")" "symbol?" " " "param" "(" " " "closureV" "[" "  " "\n" ")]" "number?" =
 " " "n" "(" " " "numV" "[" "  " "\n" "BCFAE-Value" " " "define-type" "(" "\=
 n" "\n" ")])" "BCFAE?" " " "e2" "(" " " ")" "BCFAE?" " " "e1" "(" " " "seqn=
 " "[" "  " "\n" ")]" "BCFAE?" " " "box-expr" "(" " " "openbox" "[" "  " "\n=
 " ")]" "BCFAE?" " " "value-expr" "(" " " ")" "BCFAE?" " " "box-expr" "(" " =
 " "setbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " "newbox" "[=
 " "  " "\n" ")]" "BCFAE?" " " "falsity" "(" " " ")" "BCFAE?" " " "truth" "(=
 " " " ")" "BCFAE?" " " "test" "(" " " "if0" "[" "  " "\n" ")]" "BCFAE?" " "=
  "arg-expr" "(" " " ")" "BCFAE?" " " "fun-expr" "(" " " "app" "[" "  " "\n"=
  ")]" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" "(" " " "fun" "=
 [" "  " "\n" ")]" "symbol?" " " "name" "(" " " "id" "[" "  " "\n" ")]" "BCF=
 AE?" " " "rhs" "(" " " ")" "BCFAE?" " " "lhs" "(" " " "add" "[" "  " "\n" "=
 )]" "number?" " " "n" "(" " " "num" "[" "  " "\n" "BCFAE" " " "define-type"=
  "(") ("a" "2" "x" "e") ("a" "1" "x" "e") ("\n" ")" "f" "ex1" " " "f" " " "=
 t" "(" "\n" ")" "e" "1" "x" "e" " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " =
 "d" " " "t" "(" "\n" ")" "c" "1" "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "=
 1" "x" "e" " " "b" " " "t" "(" "\n" ")" "1a" "x" "e" " " "a" " " "t" "(" "\=
 n" "\n" ")))" "p" "x" "e" "s" " " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" "=
  " "un" "r" "(" " " ")" "sexp" " " "interp" " " "run" "(" " " "t" "s" "i" "=
 l" "(" "  " "\n" ")" "xp" "e" "s" " " "d" "o" "m" "/" "rp" "e" "t" "in" " "=
  "t" "(" " " "define" "(" "\n" "\n" "\n" ")]))" "store" " " "env" " " "expr=
 " " " "f" " " "make-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" ")])])]=
 " "arg-store" "                          " "\n" "))" "fun-value" " " "closu=
 reV-env" "(" "                                " "\n" "arg-value" "         =
                        " "\n" ")" "fun-value" " " "closureV-param" "(" " " =
 "aSub" "(" "                          " "\n" ")" "fun-value" " " "closureV-=
 body" "(" " " "f" "(" "                       " "\n" ")" "arg-store" " " "f=
 un-value" "(" " " "v*s" "[" "                  " "\n" ")" "fun-store" " " "=
 env" " " "fun-expr" " " "f" "(" " " "Value*Store" " " "type-case" "(" "    =
             " "\n" ")" "fun-store" " " "arg-value" "(" " " "v*s" "[" "     =
       " "\n" ")" "store" " " "env" " " "arg-expr" " " "f" "(" " " "Value*St=
 ore" " " "type-case" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "("=
  " " "app" "[" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" =
 "  " "\n" ")" "store" " " "env" " " "expr" " " "f" "(" " " "e" "n" "i" "f" =
 "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "e" " " "make=
 -interp" "(" " " "else" "[" "    " "\n" ")])])]" "r-store" " " ")" "r-value=
 " " " "l-value" " " "num+" "(" " " "v*s" "(" "                       " "\n"=
  ")" "r-store" " " "r-value" "(" " " "v*s" "[" "                  " "\n" ")=
 " "l-store" " " "env" " " "l" " " "e" "(" " " "Value*Store" " " "type-case"=
  "(" "                " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" =
 "           " "\n" ")" "store" " " "env" " " "r" " " "e" "(" " " "Value*Sto=
 re" " " "type-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" =
 "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "=
 re" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "e" "(" " " "e" "n" "i" "f" =
 "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "d" " " "make=
 -interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" "))])]" "store" " " "env" =
 " " "falsity" " " "d" "(" "                    " "\n" ")" "test-store" " " =
 "env" " " "truth" " " "d" "(" "                    " "\n" ")" "test-value" =
 " " "num-zero?" "(" " " "if" "(" "                " "\n" ")" "test-store" "=
  " "test-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" =
 " " "test" " " "d" "(" " " "Value*Store" " " "type-case" "(" "         " "\=
 n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" "expr=
 " " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "sto" " " "v" "n" "e" =
 " " "expr" " " "d" "(" " " "e" "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "store=
 " " " "env" " " "expr" " " "c" " " "make-interp" "(" " " "se" "l" "e" "[" "=
     " "\n" "))]" "mtSto" "(" " " ")" "env" " " "bound-body" " " "bound-id" =
 " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-=
 id" "(" " " "fun" "[" "    " "\n" "r" "xp" "e" " " "BCFAE" " " "type-case" =
 "(" "  " "\n" ")" "re" "o" "st" " " "v" "en" " " "expr" " " "c" "(" " " "e"=
  "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " =
 "b" " " "-interp" "e" "mak" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtS=
 to" "(" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v=
 " "(" " " "id" "[" "    " "\n" "r" "xp" "e" " " "CFAE" "B" " " "e" "s" "-ca=
 " "e" "p" "y" "t" "(" "  " "\n" ")" "re" "o" "st" " " "v" "n" "e" " " "r" "=
 p" "ex" " " "b" "(" " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " "=
  "expr" " " "a" " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]=
 " "mtSto" "(" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " =
 "num" "[" "    " "\n" "r" "p" "x" "e" " " "CFAE" "B" " " "type-case" "(" " =
  " "\n" ")" "e" "r" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "a" "(" " " =
 "e" "n" "i" "f" "e" "d" "(" "\n" "\n" "))" "e" "r" "to" "s" " " "v" "n" "e"=
  " " "r" "p" "x" "e" " " "interp" " " "p" "r" "e" "t" "n" "i" "-" "e" "k" "=
 a" "m" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "r" "p" "ex" =
 " " "p" "r" "e" "t" "n" "i" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" "=
 )])))" "value" " " "show" "(" " " ")" "store" " " "value" "(" " " "v*s" "["=
  "      " "\n" "))" "mtSto" "(" " " ")" "mtSub" "(" " " ")" "sexp" " " "par=
 se" "(" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "    " "\n" =
 "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")"=
  "x" "(" " " "lambda" "([(" " " "with-handlers" "(" "  " "\n" ")" "sexp" " =
 " "rp" "te" "n" "i" " " "run" "(" " " "define" "(" "\n" ";; run : S-express=
 ion -> S-expression" "\n" "\n" "]))" "<box>" "'" " " ")" "location" "(" " "=
  "boxV" "[" "    " "\n" "]" "<closure>" "'" " " ")" "env" " " "body" " " "p=
 aram" "(" " " "closureV" "[" "    " "\n" "]" "n" " " ")" "n" "(" " " "numV"=
  "[" "    " "\n" "value" " " "BCFAE-Value" " " "type-case" "(" "  " "\n" ")=
 " "value" " " "show" "(" " " "define" "(" "\n" ";; show : BCFAE-Value -> S-=
 expression" "\n" "\n" ")])]))" "e1-store" " " "env" " " "e2" " " "interp" "=
 (" "                 " "\n" ")" "e1-store" " " "e1-value" "(" " " "v*s" "["=
  "            " "\n" ")" "store" " " "env" " " "e1" " " "interp" "(" " " "V=
 alue*Store" " " "type-case" "(" "          " "\n" ")" "e2" " " "e1" "(" " "=
  "seqn" "[" "    " "\n" ")])]" "box-store" "                         " "\n"=
  ")" "box-store" "                                       " "\n" ")" "box-va=
 lue" " " "boxV-location" "(" " " "store-lookup" "(" " " "v*s" "(" "        =
             " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "     =
           " "\n" ")" "store" " " "env" " " "box-expr" " " "interp" "(" " " =
 "Value*Store" " " "type-case" "(" "             " "\n" ")" "box-expr" "(" "=
  " "openbox" "[" "    " "\n" "))])])]" "value-store" "                     =
                         " "\n" "value-value" "                             =
                 " "\n" ")" "box-value" " " "boxV-location" "(" " " "update-=
 store" "(" "                               " "\n" "value-value" " " "v*s" "=
 (" "                          " "\n" ")" "value-store" " " "value-value" "(=
 " " " "v*s" "[" "                     " "\n" ")" "box-store" " " "env" " " =
 "value-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "      =
              " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "    =
           " "\n" ")" "store" " " "env" " " "box-expr" " " "interp" "(" " " =
 "Value*Store" " " "type-case" "(" "            " "\n" ")" "value-expr" " " =
 "box-expr" "(" " " "setbox" "[" "    " "\n" ")))])]" "expr-store" " " "expr=
 -value" " " "new-loc" " " "aSto" "(" "                          " "\n" ")" =
 "new-loc" " " "boxV" "(" " " "v*s" "(" "                     " "\n" ")])" "=
 expr-store" " " "next-location" "(" " " "new-loc" " " "define" "([" " " "lo=
 cal" "(" "                   " "\n" ")" "expr-store" " " "expr-value" "(" "=
  " "v*s" "[" "              " "\n" ")" "store" " " "env" " " "value-expr" "=
  " "interp" "(" " " "Value*Store" " " "type-case" "(" "            " "\n" "=
 )" "value-expr" "(" " " "newbox" "[" "    " "\n" "))])]" "test-store" " " "=
 env" " " "falsity" " " "interp" "(" "                    " "\n" ")" "test-s=
 tore" " " "env" " " "truth" " " "interp" "(" "                    " "\n" ")=
 " "test-value" " " "num-zero?" "(" " " "if" "(" "                " "\n" ")"=
  "test-store" " " "test-value" "(" " " "v*s" "[" "           " "\n" ")" "st=
 ore" " " "env" " " "test" " " "interp" "(" " " "Value*Store" " " "type-case=
 " "(" "         " "\n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "=
 [" "    " "\n" ")])])]" "arg-store" "                               " "\n" =
 "))" "fun-value" " " "closureV-env" "(" "                                  =
    " "\n" "arg-value" "                                     " "\n" ")" "fun=
 -value" " " "closureV-param" "(" " " "aSub" "(" "                          =
      " "\n" ")" "fun-value" " " "closureV-body" "(" " " "interp" "(" "     =
                   " "\n" ")" "arg-store" " " "arg-value" "(" " " "v*s" "[" =
 "                  " "\n" ")" "fun-store" " " "env" " " "arg-expr" " " "int=
 erp" "(" " " "Value*Store" " " "type-case" "(" "                " "\n" ")" =
 "fun-store" " " "fun-value" "(" " " "v*s" "[" "           " "\n" ")" "store=
 " " " "env" " " "fun-expr" " " "interp" "(" " " "Value*Store" " " "type-cas=
 e" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "  =
   " "\n" ")]" "store" " " ")" "env" " " "bound-body" " " "bound-id" " " "cl=
 osureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id" "("=
  " " "fun" "[" "    " "\n" ")]" "store" " " ")" "env" " " "v" " " "env-look=
 up" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n" ")])])]" "r-=
 store" "                            " "\n" ")" "r-value" " " "l-value" " " =
 "num+" "(" " " "v*s" "(" "                       " "\n" ")" "r-store" " " "=
 r-value" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" " " "env=
 " " " "r" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         =
        " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           " "=
 \n" ")" "store" " " "env" " " "l" " " "interp" "(" " " "Value*Store" " " "t=
 ype-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n=
 " ")]" "store" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " "=
  "num" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")"=
  "store" " " "env" " " "expr" " " "p" "r" "e" "t" "n" "i" " " "-interp" "e"=
  "k" "a" "m" "(" " " "define" "(" "\n" "interp : BCFAE Env Store -> Value*S=
 tore" "-" "e" "k" "a" "m" ";; " "\n" "\n" ")))" "n" " " "numV-n" "(" " " "z=
 ero?" "(" "  " "\n" ")" "n" " " "num-zero?" "(" " " "define" "(" "\n" ";; n=
 um-zero? : numV -> boolean" "\n" "\n" "))))" "n2" " " "numV-n" "(" " " ")" =
 "n1" " " "numV-n" "(" " " "+" "(" " " "numV" "(" "  " "\n" ")" "n2" " " "n1=
 " " " "num+" "(" " " "define" "(" "\n" ";; num+ : numV numV -> numV" "\n" "=
 \n" ")))]))" "rest-store" " " "new-value" " " "loc-index" " " "update-store=
 " "(" " " "value" " " "location" " " "aSto" "(" "              " "\n" ")" "=
 rest-store" " " "new-value" " " "location" " " "aSto" "(" "              " =
 "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if" "(" "          "=
  "\n" ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "[" "    "=
  "\n" ")]" "\"no such location\"" " " "update-store" "'" " " "error" "(" " =
 " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" " =
  " "\n" ")" "sto" " " "new-value" " " "loc-index" " " "update-store" "(" " =
 " "define" "(" "\n" ";; update-store : number BCFAE-Value Store -> STore" "=
 \n" "\n" ")]))" "location" " " "1" " " "+" "(" " " ")" "rest-store" " " "va=
 lue" " " "location" "(" " " "aSto" "[" "    " "\n" "]" "0" " " "()" " " "mt=
 Sto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "s=
 to" " " "next-location" "(" " " "define" "(" "\n" ";; next-location : Store=
  -> number" "\n" "\n" "))]))" "rest-store" " " "loc-index" " " "store-looku=
 p" "(" "              " "\n" "value" "              " "\n" ")" "loc-index" =
 " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-store=
 " " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no valu=
 e at location\"" " " "store-lookup" "'" " " "error" "(" " " "()" " " "mtSto=
 " "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto"=
  " " "loc-index" " " "store-lookup" "(" " " "define" "(" "\n" ";; store-loo=
 kup : number Store -> BCFAE-Value" "\n" "\n" "))]))" "rest-env" " " "name" =
 " " "env-lookup" "(" "              " "\n" "bound-value" "              " "=
 \n" ")" "name" " " "bound-name" " " "symbol=3D?" "(" " " "if" "(" "        =
   " "\n" ")" "rest-env" " " "bound-value" " " "bound-name" "(" " " "aSub" "=
 [" "    " "\n" ")]" "\"no binding for identifier\"" " " "env-lookup" "'" " =
 " "error" "(" " " "()" " " "mtSub" "[" "    " "\n" "env" " " "Env" " " "typ=
 e-case" "(" "  " "\n" ")" "env" " " "name" " " "env-lookup" "(" " " "define=
 " "(" "\n" ";; env-lookup : symbol Env -> BCFAE-Value" "\n" "\n" ")))])]))"=
  "sexp" " " "second" "(" " " "parse" "(" " " "))" "sexp" " " "first" "(" " =
 " "parse" "(" " " "app" "(" " " "else" "[" "                    " "\n" ")))=
 ]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" =
 " " "parse" "(" " " "seqn" "(" " " ")" "seqn" "[(" "                    " "=
 \n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "openbox" "(" " " ")=
 " "openbox" "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" =
 " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "setbo=
 x" "(" " " ")" "setbox" "[(" "                    " "\n" ")))]" "sexp" " " =
 "second" "(" " " "parse" "(" " " "newbox" "(" " " ")" "newbox" "[(" "      =
               " "\n" ")))]" "sexp" " " "fourth" "(" " " "parse" "(" "      =
                           " "\n" "))" "sexp" " " "third" "(" " " "parse" "(=
 " "                                " "\n" "))" "sexp" " " "second" "(" " " =
 "parse" "(" " " "if0" "(" " " ")" "if0" "[(" "                    " "\n" ")=
 )))]" "sexp" " " "second" "(" " " "second" "(" " " "parse" "(" "           =
                       " "\n" ")))" "sexp" " " "third" "(" " " "parse" "(" "=
  " "))" "sexp" " " "second" "(" " " "first" "(" " " "fun" "(" " " "app" "("=
  " " ")" "with" "[(" "                    " "\n" ")))]" "sexp" " " "third" =
 "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "first" "(" " " "f=
 un" "(" " " ")" "fun" "[(" "                    " "\n" ")))]" "sexp" " " "t=
 hird" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" =
 " " "add" "(" " " ")" "+" "[(" "                    " "\n" ")" "sexp" " " "=
 first" "(" " " "case" "(" " " ")" "sexp" " " "list?" "[(" "    " "\n" ")]" =
 "sexp" " " "id" "(" " " ")" "sexp" " " "symbol?" "[(" "    " "\n" ")]" "sex=
 p" " " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" "(" "=
   " "\n" ")" "sexp" " " "parse" "(" " " "define" "(" "\n" ";; parse : S-exp=
 ression -> BCFAE" "\n" "\n" ")])" "Store?" " " "store" "(" " " ")" "BCFAE-V=
 alue?" " " "value" "(" " " "v*s" "[" "  " "\n" "Value*Store" " " "define-ty=
 pe" "(" "\n" "\n" ")])" "Store?" " " "store" "(" "        " "\n" ")" "BCFAE=
 -Value?" " " "value" "(" "        " "\n" ")" "number?" " " "location" "(" "=
  " "aSto" "[" "  " "\n" "]" "mtSto" "[" "  " "\n" "Store" " " "define-type"=
  "(" "\n" "\n" ")])" "Env?" " " "env" "(" "        " "\n" ")" "BCFAE-Value?=
 " " " "value" "(" "        " "\n" ")" "symbol?" " " "name" "(" " " "aSub" "=
 [" "  " "\n" "]" "mtSub" "[" "  " "\n" "Env" " " "define-type" "(" "\n" "\n=
 " ")])" "number?" " " "location" "(" " " "boxV" "[" "  " "\n" ")]" "Env?" "=
  " "env" "(" " " ")" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" =
 "(" " " "closureV" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "numV" "[" =
 "  " "\n" "BCFAE-Value" " " "define-type" "(" "\n" "\n" ")])" "BCFAE?" " " =
 "e2" "(" " " ")" "BCFAE?" " " "e1" "(" " " "seqn" "[" "  " "\n" ")]" "BCFAE=
 ?" " " "box-expr" "(" " " "openbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-=
 expr" "(" " " ")" "BCFAE?" " " "box-expr" "(" " " "setbox" "[" "  " "\n" ")=
 ]" "BCFAE?" " " "value-expr" "(" " " "newbox" "[" "  " "\n" ")]" "BCFAE?" "=
  " "falsity" "(" " " ")" "BCFAE?" " " "truth" "(" " " ")" "BCFAE?" " " "tes=
 t" "(" " " "if0" "[" "  " "\n" ")]" "BCFAE?" " " "arg-expr" "(" " " ")" "BC=
 FAE?" " " "fun-expr" "(" " " "app" "[" "  " "\n" ")]" "BCFAE?" " " "body" "=
 (" " " ")" "symbol?" " " "param" "(" " " "fun" "[" "  " "\n" ")]" "symbol?"=
  " " "name" "(" " " "id" "[" "  " "\n" ")]" "BCFAE?" " " "rhs" "(" " " ")" =
 "BCFAE?" " " "lhs" "(" " " "add" "[" "  " "\n" ")]" "number?" " " "n" "(" "=
  " "num" "[" "  " "\n" "BCFAE" " " "define-type" "(") ("a" "2" "x" "e") ("b=
 " "2" "x" "e") ("\n" ")" "f" "ex1" " " "f" " " "t" "(" "\n" ")" "e" "1" "x"=
  "e" " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " "d" " " "t" "(" "\n" ")" "c=
 " "1" "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "1" "x" "e" " " "b" " " "t" =
 "(" "\n" ")" "1a" "x" "e" " " "a" " " "t" "(" "\n" "\n" ")))" "p" "x" "e" "=
 s" " " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" " " "un" "r" "(" " " ")" "se=
 xp" " " "interp" " " "run" "(" " " "t" "s" "i" "l" "(" "  " "\n" ")" "xp" "=
 e" "s" " " "d" "o" "m" "/" "rp" "e" "t" "in" " " "t" "(" " " "define" "(" "=
 \n" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "f" " " "make-interp"=
  "(" " " "e" "s" "l" "e" "[" "    " "\n" ")])])]" "arg-store" "            =
               " "\n" "))" "fun-value" " " "closureV-env" "(" "             =
                    " "\n" "arg-value" "                                " "\=
 n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "               =
            " "\n" ")" "fun-value" " " "closureV-body" "(" " " "f" "(" "    =
                    " "\n" ")" "arg-store" " " "fun-value" "(" " " "v*s" "["=
  "                  " "\n" ")" "fun-store" " " "env" " " "fun-expr" " " "f"=
  "(" " " "Value*Store" " " "type-case" "(" "                " "\n" ")" "fun=
 -store" " " "arg-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " =
 " "env" " " "arg-expr" " " "f" "(" " " "Value*Store" " " "type-case" "(" " =
         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" =
 "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "=
 env" " " "expr" " " "f" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))=
 " "store" " " "env" " " "expr" " " "e" " " "make-interp" "(" " " "else" "["=
  "    " "\n" ")])])]" "r-store" " " ")" "r-value" " " "l-value" " " "num+" =
 "(" " " "v*s" "(" "                       " "\n" ")" "r-store" " " "r-value=
 " "(" " " "v*s" "[" "                  " "\n" ")" "l-store" " " "env" " " "=
 l" " " "e" "(" " " "Value*Store" " " "type-case" "(" "                " "\n=
 " ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           " "\n" ")" "sto=
 re" " " "env" " " "r" " " "e" "(" " " "Value*Store" " " "type-case" "(" "  =
        " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" "r" "p" "x" "e"=
  " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n"=
  "e" " " "expr" " " "e" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))=
 " "store" " " "env" " " "expr" " " "d" " " "make-interp" "(" " " "e" "s" "l=
 " "e" "[" "    " "\n" "))])]" "store" " " "env" " " "falsity" " " "d" "(" "=
                     " "\n" ")" "test-store" " " "env" " " "truth" " " "d" "=
 (" "                    " "\n" ")" "test-value" " " "num-zero?" "(" " " "if=
 " "(" "                " "\n" ")" "test-store" " " "test-value" "(" " " "v*=
 s" "[" "           " "\n" ")" "store" " " "env" " " "test" " " "d" "(" " " =
 "Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity" " " "truth=
 " " " "test" "(" " " "if0" "[" "    " "\n" "expr" " " "BCFAE" " " "type-cas=
 e" "(" "  " "\n" ")" "re" "sto" " " "v" "n" "e" " " "expr" " " "d" "(" " " =
 "e" "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " =
 "c" " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(=
 " " " ")" "env" " " "bound-body" " " "bound-id" " " "closureV" "(" " " "v*s=
 " "(" "      " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" "[" "    =
 " "\n" "r" "xp" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" =
 "st" " " "v" "en" " " "expr" " " "c" "(" " " "e" "n" "i" "f" "e" "d" "(" "\=
 n" "\n" ")]))" "store" " " "env" " " "expr" " " "b" " " "-interp" "e" "mak"=
  "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "=
 v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "=
 \n" "r" "xp" "e" " " "CFAE" "B" " " "e" "s" "-ca" "e" "p" "y" "t" "(" "  " =
 "\n" ")" "re" "o" "st" " " "v" "n" "e" " " "r" "p" "ex" " " "b" "(" " " "de=
 fine" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "a" " " "make-i=
 nterp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "n" "=
  " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "r" "=
 p" "x" "e" " " "CFAE" "B" " " "type-case" "(" "  " "\n" ")" "e" "r" "o" "t"=
  "s" " " "v" "n" "e" " " "expr" " " "a" "(" " " "e" "n" "i" "f" "e" "d" "("=
  "\n" "\n" "))" "e" "r" "to" "s" " " "v" "n" "e" " " "r" "p" "x" "e" " " "i=
 nterp" " " "p" "r" "e" "t" "n" "i" "-" "e" "k" "a" "m" "(" "  " "\n" ")" "r=
 e" "o" "t" "s" " " "v" "n" "e" " " "r" "p" "ex" " " "p" "r" "e" "t" "n" "i"=
  "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")])))" "value" " " "show" "=
 (" " " ")" "store" " " "value" "(" " " "v*s" "[" "      " "\n" "))" "mtSto"=
  "(" " " ")" "mtSub" "(" " " ")" "sexp" " " "parse" "(" " " "interp" "(" " =
 " "Value*Store" " " "type-case" "(" "    " "\n" "])" "exn-message" " " ")))=
 " "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([("=
  " " "with-handlers" "(" "  " "\n" ")" "sexp" " " "rp" "te" "n" "i" " " "ru=
 n" "(" " " "define" "(" "\n" ";; run : S-expression -> S-expression" "\n" "=
 \n" "]))" "<box>" "'" " " ")" "location" "(" " " "boxV" "[" "    " "\n" "]"=
  "<closure>" "'" " " ")" "env" " " "body" " " "param" "(" " " "closureV" "[=
 " "    " "\n" "]" "n" " " ")" "n" "(" " " "numV" "[" "    " "\n" "value" " =
 " "BCFAE-Value" " " "type-case" "(" "  " "\n" ")" "value" " " "show" "(" " =
 " "define" "(" "\n" ";; show : BCFAE-Value -> S-expression" "\n" "\n" ")])]=
 ))" "e1-store" " " "env" " " "e2" " " "interp" "(" "                 " "\n"=
  ")" "e1-store" " " "e1-value" "(" " " "v*s" "[" "            " "\n" ")" "s=
 tore" " " "env" " " "e1" " " "interp" "(" " " "Value*Store" " " "type-case"=
  "(" "          " "\n" ")" "e2" " " "e1" "(" " " "seqn" "[" "    " "\n" ")]=
 )]" "box-store" "                         " "\n" ")" "box-store" "         =
                               " "\n" ")" "box-value" " " "boxV-location" "(=
 " " " "store-lookup" "(" " " "v*s" "(" "                    " "\n" ")" "box=
 -store" " " "box-value" "(" " " "v*s" "[" "               " "\n" ")" "store=
 " " " "env" " " "box-expr" " " "interp" "(" " " "Value*Store" " " "type-cas=
 e" "(" "             " "\n" ")" "box-expr" "(" " " "openbox" "[" "    " "\n=
 " "))])])]" "value-store" "                                             " "=
 \n" "value-value" "                                             " "\n" ")" =
 "box-value" " " "boxV-location" "(" " " "update-store" "(" "               =
                 " "\n" "value-value" " " "v*s" "(" "                       =
    " "\n" ")" "value-store" " " "value-value" "(" " " "v*s" "[" "          =
            " "\n" ")" "box-store" " " "env" " " "value-expr" " " "interp" "=
 (" " " "Value*Store" " " "type-case" "(" "                   " "\n" ")" "bo=
 x-store" " " "box-value" "(" " " "v*s" "[" "              " "\n" ")" "store=
 " " " "env" " " "box-expr" " " "interp" "(" " " "Value*Store" " " "type-cas=
 e" "(" "            " "\n" ")" "value-expr" " " "box-expr" "(" " " "setbox"=
  "[" "    " "\n" ")))])]" "expr-store" " " "expr-value" " " "new-loc" " " "=
 aSto" "(" "                          " "\n" ")" "new-loc" " " "boxV" "(" " =
 " "v*s" "(" "                     " "\n" ")])" "expr-store" " " "next-locat=
 ion" "(" " " "new-loc" " " "define" "([" " " "local" "(" "                 =
   " "\n" ")" "expr-store" " " "expr-value" "(" " " "v*s" "[" "             =
  " "\n" ")" "store" " " "env" " " "value-expr" " " "interp" "(" " " "Value*=
 Store" " " "type-case" "(" "            " "\n" ")" "value-expr" "(" " " "ne=
 wbox" "[" "    " "\n" "))])]" "test-store" " " "env" " " "falsity" " " "int=
 erp" "(" "                    " "\n" ")" "test-store" " " "env" " " "truth"=
  " " "interp" "(" "                    " "\n" ")" "test-value" " " "num-zer=
 o?" "(" " " "if" "(" "                " "\n" ")" "test-store" " " "test-val=
 ue" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" "=
  " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" =
 "falsity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" ")])])]" "ar=
 g-store" "                               " "\n" "))" "fun-value" " " "closu=
 reV-env" "(" "                                     " "\n" "arg-value" "    =
                                  " "\n" ")" "fun-value" " " "closureV-param=
 " "(" " " "aSub" "(" "                               " "\n" ")" "fun-value"=
  " " "closureV-body" "(" " " "interp" "(" "                       " "\n" ")=
 " "arg-store" " " "arg-value" "(" " " "v*s" "[" "                  " "\n" "=
 )" "fun-store" " " "env" " " "arg-expr" " " "interp" "(" " " "Value*Store" =
 " " "type-case" "(" "                " "\n" ")" "fun-store" " " "fun-value"=
  "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "fun-expr" =
 " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")"=
  "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" ")]" "store" " " "=
 )" "env" " " "bound-body" " " "bound-id" " " "closureV" "(" " " "v*s" "(" "=
       " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" "[" "    " "\n" =
 ")]" "store" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " "=
 )" "v" "(" " " "id" "[" "    " "\n" ")])])]" "r-store" "                   =
          " "\n" ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" " =
                       " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" =
 "                  " "\n" ")" "l-store" " " "env" " " "r" " " "interp" "(" =
 " " "Value*Store" " " "type-case" "(" "                " "\n" ")" "l-store"=
  " " "l-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" "=
  " "l" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "=
 \n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" ")]" "store" " " ")" "n" =
 " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "exp=
 r" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " "exp=
 r" " " "p" "r" "e" "t" "n" "i" " " "-interp" "e" "k" "a" "m" "(" " " "defin=
 e" "(" "\n" "interp : BCFAE Env Store -> Value*Store" "-" "e" "k" "a" "m" "=
 ;; " "\n" "\n" ")))" "n" " " "numV-n" "(" " " "zero?" "(" "  " "\n" ")" "n"=
  " " "num-zero?" "(" " " "define" "(" "\n" ";; num-zero? : numV -> boolean"=
  "\n" "\n" "))))" "n2" " " "numV-n" "(" " " ")" "n1" " " "numV-n" "(" " " "=
 +" "(" " " "numV" "(" "  " "\n" ")" "n2" " " "n1" " " "num+" "(" " " "defin=
 e" "(" "\n" ";; num+ : numV numV -> numV" "\n" "\n" ")))]))" "rest-store" "=
  " "new-value" " " "loc-index" " " "update-store" "(" " " "value" " " "loca=
 tion" " " "aSto" "(" "              " "\n" ")" "rest-store" " " "new-value"=
  " " "location" " " "aSto" "(" "              " "\n" ")" "loc-index" " " "l=
 ocation" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-store" " " =
 "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no such locat=
 ion\"" " " "update-store" "'" " " "error" "(" " " "()" " " "mtSto" "[" "   =
  " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "new-=
 value" " " "loc-index" " " "update-store" "(" " " "define" "(" "\n" ";; upd=
 ate-store : number BCFAE-Value Store -> STore" "\n" "\n" ")]))" "location" =
 " " "1" " " "+" "(" " " ")" "rest-store" " " "value" " " "location" "(" " "=
  "aSto" "[" "    " "\n" "]" "0" " " "()" " " "mtSto" "[" "    " "\n" "sto" =
 " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "next-location" "("=
  " " "define" "(" "\n" ";; next-location : Store -> number" "\n" "\n" "))])=
 )" "rest-store" " " "loc-index" " " "store-lookup" "(" "              " "\n=
 " "value" "              " "\n" ")" "loc-index" " " "location" " " "=3D" "(=
 " " " "if" "(" "          " "\n" ")" "rest-store" " " "value" " " "location=
 " "(" " " "aSto" "[" "    " "\n" ")]" "\"no value at location\"" " " "store=
 -lookup" "'" " " "error" "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " "=
  "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "loc-index" " " "store=
 -lookup" "(" " " "define" "(" "\n" ";; store-lookup : number Store -> BCFAE=
 -Value" "\n" "\n" "))]))" "rest-env" " " "name" " " "env-lookup" "(" "     =
          " "\n" "bound-value" "              " "\n" ")" "name" " " "bound-n=
 ame" " " "symbol=3D?" "(" " " "if" "(" "          " "\n" ")" "rest-env" " "=
  "bound-value" " " "bound-name" "(" " " "aSub" "[" "    " "\n" ")]" "\"no b=
 inding for identifier\"" " " "env-lookup" "'" " " "error" "(" " " "()" " " =
 "mtSub" "[" "    " "\n" "env" " " "Env" " " "type-case" "(" "  " "\n" ")" "=
 env" " " "name" " " "env-lookup" "(" " " "define" "(" "\n" ";; env-lookup :=
  symbol Env -> BCFAE-Value" "\n" "\n" ")))])]))" "sexp" " " "second" "(" " =
 " "parse" "(" " " "))" "sexp" " " "first" "(" " " "parse" "(" " " "app" "("=
  " " "else" "[" "                    " "\n" ")))]" "sexp" " " "third" "(" "=
  " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "seqn" =
 "(" " " ")" "seqn" "[(" "                    " "\n" ")))]" "sexp" " " "seco=
 nd" "(" " " "parse" "(" " " "openbox" "(" " " ")" "openbox" "[(" "         =
            " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "s=
 exp" " " "second" "(" " " "parse" "(" " " "setbox" "(" " " ")" "setbox" "[(=
 " "                    " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(=
 " " " "newbox" "(" " " ")" "newbox" "[(" "                    " "\n" ")))]"=
  "sexp" " " "fourth" "(" " " "parse" "(" "                                "=
  "\n" "))" "sexp" " " "third" "(" " " "parse" "(" "                        =
         " "\n" "))" "sexp" " " "second" "(" " " "parse" "(" " " "if0" "(" "=
  " ")" "if0" "[(" "                    " "\n" "))))]" "sexp" " " "second" "=
 (" " " "second" "(" " " "parse" "(" "                                 " "\n=
 " ")))" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second"=
  "(" " " "first" "(" " " "fun" "(" " " "app" "(" " " ")" "with" "[(" "     =
                " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))=
 " "sexp" " " "second" "(" " " "first" "(" " " "fun" "(" " " ")" "fun" "[(" =
 "                    " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" "=
  " "))" "sexp" " " "second" "(" " " "parse" "(" " " "add" "(" " " ")" "+" "=
 [(" "                    " "\n" ")" "sexp" " " "first" "(" " " "case" "(" "=
  " ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "sexp" " " "id" "(" " " ")"=
  "sexp" " " "symbol?" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "s=
 exp" " " "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "pa=
 rse" "(" " " "define" "(" "\n" ";; parse : S-expression -> BCFAE" "\n" "\n"=
  ")])" "Store?" " " "store" "(" " " ")" "BCFAE-Value?" " " "value" "(" " " =
 "v*s" "[" "  " "\n" "Value*Store" " " "define-type" "(" "\n" "\n" ")])" "St=
 ore?" " " "store" "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" " =
        " "\n" ")" "number?" " " "location" "(" " " "aSto" "[" "  " "\n" "]"=
  "mtSto" "[" "  " "\n" "Store" " " "define-type" "(" "\n" "\n" ")])" "Env?"=
  " " "env" "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "        =
 " "\n" ")" "symbol?" " " "name" "(" " " "aSub" "[" "  " "\n" "]" "mtSub" "[=
 " "  " "\n" "Env" " " "define-type" "(" "\n" "\n" ")])" "number?" " " "loca=
 tion" "(" " " "boxV" "[" "  " "\n" ")]" "Env?" " " "env" "(" " " ")" "BCFAE=
 ?" " " "body" "(" " " ")" "symbol?" " " "param" "(" " " "closureV" "[" "  "=
  "\n" ")]" "number?" " " "n" "(" " " "numV" "[" "  " "\n" "BCFAE-Value" " "=
  "define-type" "(" "\n" "\n" ")])" "BCFAE?" " " "e2" "(" " " ")" "BCFAE?" "=
  " "e1" "(" " " "seqn" "[" "  " "\n" ")]" "BCFAE?" " " "box-expr" "(" " " "=
 openbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " ")" "BCFAE?" =
 " " "box-expr" "(" " " "setbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr=
 " "(" " " "newbox" "[" "  " "\n" ")]" "BCFAE?" " " "falsity" "(" " " ")" "B=
 CFAE?" " " "truth" "(" " " ")" "BCFAE?" " " "test" "(" " " "if0" "[" "  " "=
 \n" ")]" "BCFAE?" " " "arg-expr" "(" " " ")" "BCFAE?" " " "fun-expr" "(" " =
 " "app" "[" "  " "\n" ")]" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "p=
 aram" "(" " " "fun" "[" "  " "\n" ")]" "symbol?" " " "name" "(" " " "id" "[=
 " "  " "\n" ")]" "BCFAE?" " " "rhs" "(" " " ")" "BCFAE?" " " "lhs" "(" " " =
 "add" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "num" "[" "  " "\n" "BCF=
 AE" " " "define-type" "(") (")" "a" "2" "x" "e" " " "p" "r" "e" "t" "n" "i"=
  " " "n" "u" "r" "(") ("\n" ")" "f" "ex1" " " "f" " " "t" "(" "\n" ")" "e" =
 "1" "x" "e" " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " "d" " " "t" "(" "\n"=
  ")" "c" "1" "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "1" "x" "e" " " "b" "=
  " "t" "(" "\n" ")" "1a" "ex" " " "a" " " "t" "(" "\n" "\n" "\n" ")))" "p" =
 "x" "e" "s" " " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" " " "un" "r" "(" " =
 " ")" "sexp" " " "interp" " " "run" "(" " " "t" "s" "i" "l" "(" "  " "\n" "=
 )" "xp" "e" "s" " " "d" "o" "m" "/" "rp" "e" "t" "in" " " "t" "(" " " "defi=
 ne" "(" "\n" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "f" " " "mak=
 e-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" ")])])]" "arg-store" "   =
                        " "\n" "))" "fun-value" " " "closureV-env" "(" "    =
                             " "\n" "arg-value" "                           =
      " "\n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "      =
                     " "\n" ")" "fun-value" " " "closureV-body" "(" " " "f" =
 "(" "                       " "\n" ")" "arg-store" " " "fun-value" "(" " " =
 "v*s" "[" "                  " "\n" ")" "fun-store" " " "env" " " "fun-expr=
 " " " "f" "(" " " "Value*Store" " " "type-case" "(" "                " "\n"=
  ")" "fun-store" " " "arg-value" "(" " " "v*s" "[" "           " "\n" ")" "=
 store" " " "env" " " "arg-expr" " " "f" "(" " " "Value*Store" " " "type-cas=
 e" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "  =
   " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "sto=
 re" " " "env" " " "expr" " " "f" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "=
 \n" ")]))" "store" " " "env" " " "expr" " " "e" " " "make-interp" "(" " " "=
 else" "[" "    " "\n" ")])])]" "r-store" " " ")" "r-value" " " "l-value" " =
 " "num+" "(" " " "v*s" "(" "                       " "\n" ")" "r-store" " "=
  "r-value" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" " " "e=
 nv" " " "l" " " "e" "(" " " "Value*Store" " " "type-case" "(" "            =
     " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           " "\n"=
  ")" "store" " " "env" " " "r" " " "e" "(" " " "Value*Store" " " "type-case=
 " "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" "r" "p=
 " "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "t" "s" " =
 " "v" "n" "e" " " "expr" " " "e" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "=
 \n" ")]))" "store" " " "env" " " "expr" " " "d" " " "make-interp" "(" " " "=
 e" "s" "l" "e" "[" "    " "\n" "))])]" "store" " " "env" " " "falsity" " " =
 "d" "(" "                    " "\n" ")" "test-store" " " "env" " " "truth" =
 " " "d" "(" "                    " "\n" ")" "test-value" " " "num-zero?" "(=
 " " " "if" "(" "                " "\n" ")" "test-store" " " "test-value" "(=
 " " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" " " "d"=
  "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity" "=
  " "truth" " " "test" "(" " " "if0" "[" "    " "\n" "expr" " " "BCFAE" " " =
 "type-case" "(" "  " "\n" ")" "re" "sto" " " "v" "n" "e" " " "expr" " " "d"=
  "(" " " "e" "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "e=
 xpr" " " "c" " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "=
 mtSto" "(" " " ")" "env" " " "bound-body" " " "bound-id" " " "closureV" "("=
  " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" =
 "[" "    " "\n" "r" "xp" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" =
 "re" "o" "st" " " "v" "en" " " "expr" " " "c" "(" " " "e" "n" "i" "f" "e" "=
 d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "b" " " "-interp" =
 "e" "mak" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "e=
 nv" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "["=
  "    " "\n" "r" "xp" "e" " " "CFAE" "B" " " "e" "s" "-ca" "e" "p" "y" "t" =
 "(" "  " "\n" ")" "re" "o" "st" " " "v" "n" "e" " " "r" "p" "ex" " " "b" "(=
 " " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "a" " =
 " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " =
 ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "=
 \n" "r" "p" "x" "e" " " "CFAE" "B" " " "type-case" "(" "  " "\n" ")" "e" "r=
 " "o" "t" "s" " " "v" "n" "e" " " "expr" " " "a" "(" " " "e" "n" "i" "f" "e=
 " "d" "(" "\n" "\n" "\n" "}}})" "0" "1" " " "}" "f" " " "x" "o" "b" "n" "e"=
  "p" "o" "{{" "                 " "\n" "}}}}}}" "1" "-" " " "n" " " "+" "{"=
  " " "}" "f" " " "x" "o" "b" "n" "pe" "o" "{{" " " "n" " " "+" "{" "       =
                            " "\n" "0" "                                  " =
 "\n" "n" " " "0" "f" "i" "{" "                             " "\n" "}" "n" "=
 {" " " "n" "u" "f" "{" " " "f" " " "x" "o" "b" "t" "e" "s" "{" "           =
       " "\n" "n" "q" "e" "s" "{" "               " "\n" "}}" "42" " " "x" "=
 o" "b" "w" "e" "n" "{" " " "f" "{" " " "h" "t" "i" "w" "{" "'" " " "p" "r" =
 "e" "t" "n" "i" " " "n" "u" "r" "(" "\n" "\n" "))" "e" "r" "to" "s" " " "v"=
  "n" "e" " " "r" "p" "x" "e" " " "interp" " " "p" "r" "e" "t" "n" "i" "-" "=
 e" "k" "a" "m" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "r" "=
 p" "ex" " " "p" "r" "e" "t" "n" "i" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n=
 " "\n" ")])))" "value" " " "show" "(" " " ")" "store" " " "value" "(" " " "=
 v*s" "[" "      " "\n" "))" "mtSto" "(" " " ")" "mtSub" "(" " " ")" "sexp" =
 " " "parse" "(" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "   =
  " "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "("=
  " " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" "  " "\n" ")" "=
 sexp" " " "rp" "te" "n" "i" " " "run" "(" " " "define" "(" "\n" ";; run : S=
 -expression -> S-expression" "\n" "\n" "]))" "<box>" "'" " " ")" "location"=
  "(" " " "boxV" "[" "    " "\n" "]" "<closure>" "'" " " ")" "env" " " "body=
 " " " "param" "(" " " "closureV" "[" "    " "\n" "]" "n" " " ")" "n" "(" " =
 " "numV" "[" "    " "\n" "value" " " "BCFAE-Value" " " "type-case" "(" "  "=
  "\n" ")" "value" " " "show" "(" " " "define" "(" "\n" ";; show : BCFAE-Val=
 ue -> S-expression" "\n" "\n" ")])]))" "e1-store" " " "env" " " "e2" " " "i=
 nterp" "(" "                 " "\n" ")" "e1-store" " " "e1-value" "(" " " "=
 v*s" "[" "            " "\n" ")" "store" " " "env" " " "e1" " " "interp" "(=
 " " " "Value*Store" " " "type-case" "(" "          " "\n" ")" "e2" " " "e1"=
  "(" " " "seqn" "[" "    " "\n" ")])]" "box-store" "                       =
   " "\n" ")" "box-store" "                                       " "\n" ")"=
  "box-value" " " "boxV-location" "(" " " "store-lookup" "(" " " "v*s" "(" "=
                     " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[=
 " "               " "\n" ")" "store" " " "env" " " "box-expr" " " "interp" =
 "(" " " "Value*Store" " " "type-case" "(" "             " "\n" ")" "box-exp=
 r" "(" " " "openbox" "[" "    " "\n" "))])])]" "value-store" "             =
                                 " "\n" "value-value" "                     =
                         " "\n" ")" "box-value" " " "boxV-location" "(" " " =
 "update-store" "(" "                               " "\n" "value-value" " "=
  "v*s" "(" "                          " "\n" ")" "value-store" " " "value-v=
 alue" "(" " " "v*s" "[" "                     " "\n" ")" "box-store" " " "e=
 nv" " " "value-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "("=
  "                   " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "=
 [" "              " "\n" ")" "store" " " "env" " " "box-expr" " " "interp" =
 "(" " " "Value*Store" " " "type-case" "(" "            " "\n" ")" "value-ex=
 pr" " " "box-expr" "(" " " "setbox" "[" "    " "\n" ")))])]" "expr-store" "=
  " "expr-value" " " "new-loc" " " "aSto" "(" "                          " "=
 \n" ")" "new-loc" " " "boxV" "(" " " "v*s" "(" "                     " "\n"=
  ")])" "expr-store" " " "next-location" "(" " " "new-loc" " " "define" "(["=
  " " "local" "(" "                   " "\n" ")" "expr-store" " " "expr-valu=
 e" "(" " " "v*s" "[" "              " "\n" ")" "store" " " "env" " " "value=
 -expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "            =
 " "\n" ")" "value-expr" "(" " " "newbox" "[" "    " "\n" "))])]" "test-stor=
 e" " " "env" " " "falsity" " " "interp" "(" "                    " "\n" ")"=
  "test-store" " " "env" " " "truth" " " "interp" "(" "                    "=
  "\n" ")" "test-value" " " "num-zero?" "(" " " "if" "(" "                " =
 "\n" ")" "test-store" " " "test-value" "(" " " "v*s" "[" "           " "\n"=
  ")" "store" " " "env" " " "test" " " "interp" "(" " " "Value*Store" " " "t=
 ype-case" "(" "         " "\n" ")" "falsity" " " "truth" " " "test" "(" " "=
  "if0" "[" "    " "\n" ")])])]" "arg-store" "                              =
  " "\n" "))" "fun-value" " " "closureV-env" "(" "                          =
            " "\n" "arg-value" "                                     " "\n" =
 ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "                  =
              " "\n" ")" "fun-value" " " "closureV-body" "(" " " "interp" "(=
 " "                       " "\n" ")" "arg-store" " " "arg-value" "(" " " "v=
 *s" "[" "                  " "\n" ")" "fun-store" " " "env" " " "arg-expr" =
 " " "interp" "(" " " "Value*Store" " " "type-case" "(" "                " "=
 \n" ")" "fun-store" " " "fun-value" "(" " " "v*s" "[" "           " "\n" ")=
 " "store" " " "env" " " "fun-expr" " " "interp" "(" " " "Value*Store" " " "=
 type-case" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app"=
  "[" "    " "\n" ")]" "store" " " ")" "env" " " "bound-body" " " "bound-id"=
  " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound=
 -id" "(" " " "fun" "[" "    " "\n" ")]" "store" " " ")" "env" " " "v" " " "=
 env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n" ")])=
 ])]" "r-store" "                            " "\n" ")" "r-value" " " "l-val=
 ue" " " "num+" "(" " " "v*s" "(" "                       " "\n" ")" "r-stor=
 e" " " "r-value" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" =
 " " "env" " " "r" " " "interp" "(" " " "Value*Store" " " "type-case" "(" " =
                " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "      =
      " "\n" ")" "store" " " "env" " " "l" " " "interp" "(" " " "Value*Store=
 " " " "type-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" " =
    " "\n" ")]" "store" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n"=
  "(" " " "num" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " =
 "\n" ")" "store" " " "env" " " "expr" " " "p" "r" "e" "t" "n" "i" " " "-int=
 erp" "e" "k" "a" "m" "(" " " "define" "(" "\n" "interp : BCFAE Env Store ->=
  Value*Store" "-" "e" "k" "a" "m" ";; " "\n" "\n" ")))" "n" " " "numV-n" "(=
 " " " "zero?" "(" "  " "\n" ")" "n" " " "num-zero?" "(" " " "define" "(" "\=
 n" ";; num-zero? : numV -> boolean" "\n" "\n" "))))" "n2" " " "numV-n" "(" =
 " " ")" "n1" " " "numV-n" "(" " " "+" "(" " " "numV" "(" "  " "\n" ")" "n2"=
  " " "n1" " " "num+" "(" " " "define" "(" "\n" ";; num+ : numV numV -> numV=
 " "\n" "\n" ")))]))" "rest-store" " " "new-value" " " "loc-index" " " "upda=
 te-store" "(" " " "value" " " "location" " " "aSto" "(" "              " "\=
 n" ")" "rest-store" " " "new-value" " " "location" " " "aSto" "(" "        =
       " "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if" "(" "   =
        " "\n" ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "[=
 " "    " "\n" ")]" "\"no such location\"" " " "update-store" "'" " " "error=
 " "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case=
 " "(" "  " "\n" ")" "sto" " " "new-value" " " "loc-index" " " "update-store=
 " "(" " " "define" "(" "\n" ";; update-store : number BCFAE-Value Store -> =
 STore" "\n" "\n" ")]))" "location" " " "1" " " "+" "(" " " ")" "rest-store"=
  " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" "]" "0" " " "()"=
  " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n=
 " ")" "sto" " " "next-location" "(" " " "define" "(" "\n" ";; next-location=
  : Store -> number" "\n" "\n" "))]))" "rest-store" " " "loc-index" " " "sto=
 re-lookup" "(" "              " "\n" "value" "              " "\n" ")" "loc=
 -index" " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "re=
 st-store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\=
 "no value at location\"" " " "store-lookup" "'" " " "error" "(" " " "()" " =
 " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" "=
 )" "sto" " " "loc-index" " " "store-lookup" "(" " " "define" "(" "\n" ";; s=
 tore-lookup : number Store -> BCFAE-Value" "\n" "\n" "))]))" "rest-env" " "=
  "name" " " "env-lookup" "(" "              " "\n" "bound-value" "         =
      " "\n" ")" "name" " " "bound-name" " " "symbol=3D?" "(" " " "if" "(" "=
           " "\n" ")" "rest-env" " " "bound-value" " " "bound-name" "(" " " =
 "aSub" "[" "    " "\n" ")]" "e" "m" "a" "n" " " "s\"" "~" " " "\"no binding=
  for identifier" " " "env-lookup" "'" " " "error" "(" " " "()" " " "mtSub" =
 "[" "    " "\n" "env" " " "Env" " " "type-case" "(" "  " "\n" ")" "env" " "=
  "name" " " "env-lookup" "(" " " "define" "(" "\n" ";; env-lookup : symbol =
 Env -> BCFAE-Value" "\n" "\n" ")))])]))" "sexp" " " "second" "(" " " "parse=
 " "(" " " "))" "sexp" " " "first" "(" " " "parse" "(" " " "app" "(" " " "el=
 se" "[" "                    " "\n" ")))]" "sexp" " " "third" "(" " " "pars=
 e" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "seqn" "(" " " =
 ")" "seqn" "[(" "                    " "\n" ")))]" "sexp" " " "second" "(" =
 " " "parse" "(" " " "openbox" "(" " " ")" "openbox" "[(" "                 =
    " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " "=
  "second" "(" " " "parse" "(" " " "setbox" "(" " " ")" "setbox" "[(" "     =
                " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "n=
 ewbox" "(" " " ")" "newbox" "[(" "                    " "\n" ")))]" "sexp" =
 " " "fourth" "(" " " "parse" "(" "                                " "\n" ")=
 )" "sexp" " " "third" "(" " " "parse" "(" "                                =
 " "\n" "))" "sexp" " " "second" "(" " " "parse" "(" " " "if0" "(" " " ")" "=
 if0" "[(" "                    " "\n" "))))]" "sexp" " " "second" "(" " " "=
 second" "(" " " "parse" "(" "                                 " "\n" ")))" =
 "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " "=
  "first" "(" " " "fun" "(" " " "app" "(" " " ")" "with" "[(" "             =
        " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp"=
  " " "second" "(" " " "first" "(" " " "fun" "(" " " ")" "fun" "[(" "       =
              " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" =
 "sexp" " " "second" "(" " " "parse" "(" " " "add" "(" " " ")" "+" "[(" "   =
                  " "\n" ")" "sexp" " " "first" "(" " " "case" "(" " " ")" "=
 sexp" " " "list?" "[(" "    " "\n" ")]" "sexp" " " "id" "(" " " ")" "sexp" =
 " " "symbol?" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " "=
  "number?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "parse" "("=
  " " "define" "(" "\n" ";; parse : S-expression -> BCFAE" "\n" "\n" ")])" "=
 Store?" " " "store" "(" " " ")" "BCFAE-Value?" " " "value" "(" " " "v*s" "[=
 " "  " "\n" "Value*Store" " " "define-type" "(" "\n" "\n" ")])" "Store?" " =
 " "store" "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "        "=
  "\n" ")" "number?" " " "location" "(" " " "aSto" "[" "  " "\n" "]" "mtSto"=
  "[" "  " "\n" "Store" " " "define-type" "(" "\n" "\n" ")])" "Env?" " " "en=
 v" "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" "=
 )" "symbol?" " " "name" "(" " " "aSub" "[" "  " "\n" "]" "mtSub" "[" "  " "=
 \n" "Env" " " "define-type" "(" "\n" "\n" ")])" "number?" " " "location" "(=
 " " " "boxV" "[" "  " "\n" ")]" "Env?" " " "env" "(" " " ")" "BCFAE?" " " "=
 body" "(" " " ")" "symbol?" " " "param" "(" " " "closureV" "[" "  " "\n" ")=
 ]" "number?" " " "n" "(" " " "numV" "[" "  " "\n" "BCFAE-Value" " " "define=
 -type" "(" "\n" "\n" ")])" "BCFAE?" " " "e2" "(" " " ")" "BCFAE?" " " "e1" =
 "(" " " "seqn" "[" "  " "\n" ")]" "BCFAE?" " " "box-expr" "(" " " "openbox"=
  "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " ")" "BCFAE?" " " "box=
 -expr" "(" " " "setbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " =
 " "newbox" "[" "  " "\n" ")]" "BCFAE?" " " "falsity" "(" " " ")" "BCFAE?" "=
  " "truth" "(" " " ")" "BCFAE?" " " "test" "(" " " "if0" "[" "  " "\n" ")]"=
  "BCFAE?" " " "arg-expr" "(" " " ")" "BCFAE?" " " "fun-expr" "(" " " "app" =
 "[" "  " "\n" ")]" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" "(=
 " " " "fun" "[" "  " "\n" ")]" "symbol?" " " "name" "(" " " "id" "[" "  " "=
 \n" ")]" "BCFAE?" " " "rhs" "(" " " ")" "BCFAE?" " " "lhs" "(" " " "add" "[=
 " "  " "\n" ")]" "number?" " " "n" "(" " " "num" "[" "  " "\n" "BCFAE" " " =
 "define-type" "(") ("\n" ")" "f" "ex1" " " "f" " " "t" "(" "\n" ")" "e" "1"=
  "x" "e" " " "e" " " "t" "(" "\n" ")" "d" "ex1" " " "d" " " "t" "(" "\n" ")=
 " "c" "1" "x" "e" " " "c" " " "t" "(" "\n" ")" "b" "1" "x" "e" " " "b" " " =
 "t" "(" "\n" ")" "1a" "ex" " " "a" " " "t" "(" "\n" "\n" "\n" ")))" "p" "x"=
  "e" "s" " " "d" "o" "m" "/" "p" "r" "e" "t" "n" "i" " " "un" "r" "(" " " "=
 )" "sexp" " " "interp" " " "run" "(" " " "t" "s" "i" "l" "(" "  " "\n" ")" =
 "xp" "e" "s" " " "d" "o" "m" "/" "rp" "e" "t" "in" " " "t" "(" " " "define"=
  "(" "\n" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "f" " " "make-i=
 nterp" "(" " " "e" "s" "l" "e" "[" "    " "\n" ")])])]" "arg-store" "      =
                     " "\n" "))" "fun-value" " " "closureV-env" "(" "       =
                          " "\n" "arg-value" "                              =
   " "\n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "         =
                  " "\n" ")" "fun-value" " " "closureV-body" "(" " " "f" "("=
  "                       " "\n" ")" "arg-store" " " "fun-value" "(" " " "v*=
 s" "[" "                  " "\n" ")" "fun-store" " " "env" " " "fun-expr" "=
  " "f" "(" " " "Value*Store" " " "type-case" "(" "                " "\n" ")=
 " "fun-store" " " "arg-value" "(" " " "v*s" "[" "           " "\n" ")" "sto=
 re" " " "env" " " "arg-expr" " " "f" "(" " " "Value*Store" " " "type-case" =
 "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "    "=
  "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store"=
  " " "env" " " "expr" " " "f" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n"=
  ")]))" "store" " " "env" " " "expr" " " "e" " " "make-interp" "(" " " "els=
 e" "[" "    " "\n" ")])])]" "r-store" " " ")" "r-value" " " "l-value" " " "=
 num+" "(" " " "v*s" "(" "                       " "\n" ")" "r-store" " " "r=
 -value" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" " " "env"=
  " " "l" " " "e" "(" " " "Value*Store" " " "type-case" "(" "               =
  " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "           " "\n" ")=
 " "store" " " "env" " " "r" " " "e" "(" " " "Value*Store" " " "type-case" "=
 (" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" "r" "p" "=
 x" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "o" "t" "s" " " "=
 v" "n" "e" " " "expr" " " "e" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n"=
  ")]))" "store" " " "env" " " "expr" " " "d" " " "make-interp" "(" " " "e" =
 "s" "l" "e" "[" "    " "\n" "))])]" "store" " " "env" " " "falsity" " " "d"=
  "(" "                    " "\n" ")" "test-store" " " "env" " " "truth" " "=
  "d" "(" "                    " "\n" ")" "test-value" " " "num-zero?" "(" "=
  " "if" "(" "                " "\n" ")" "test-store" " " "test-value" "(" "=
  " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" " " "d" "(=
 " " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity" " " =
 "truth" " " "test" "(" " " "if0" "[" "    " "\n" "expr" " " "BCFAE" " " "ty=
 pe-case" "(" "  " "\n" ")" "re" "sto" " " "v" "n" "e" " " "expr" " " "d" "(=
 " " " "e" "n" "fi" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr=
 " " " "c" " " "make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtS=
 to" "(" " " ")" "env" " " "bound-body" " " "bound-id" " " "closureV" "(" " =
 " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" "["=
  "    " "\n" "r" "xp" "e" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re=
 " "o" "st" " " "v" "en" " " "expr" " " "c" "(" " " "e" "n" "i" "f" "e" "d" =
 "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "b" " " "-interp" "e"=
  "mak" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env"=
  " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" " =
    " "\n" "r" "xp" "e" " " "CFAE" "B" " " "e" "s" "-ca" "e" "p" "y" "t" "("=
  "  " "\n" ")" "re" "o" "st" " " "v" "n" "e" " " "r" "p" "ex" " " "b" "(" "=
  " "define" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "a" " " "=
 make-interp" "(" " " "se" "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")"=
  "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n"=
  "r" "p" "x" "e" " " "CFAE" "B" " " "type-case" "(" "  " "\n" ")" "e" "r" "=
 o" "t" "s" " " "v" "n" "e" " " "expr" " " "a" "(" " " "e" "n" "i" "f" "e" "=
 d" "(" "\n" "\n" "\n" "}}})" "0" "1" " " "}" "f" " " "x" "o" "b" "n" "e" "p=
 " "o" "{{" "                 " "\n" "}}}}}}" "1" "-" " " "n" " " "+" "{" " =
 " "}" "f" " " "x" "o" "b" "n" "pe" "o" "{{" " " "n" " " "+" "{" "          =
                         " "\n" "0" "                                  " "\n=
 " "n" " " "0" "f" "i" "{" "                             " "\n" "}" "n" "{" =
 " " "n" "u" "f" "{" " " "f" " " "x" "o" "b" "t" "e" "s" "{" "              =
    " "\n" "n" "q" "e" "s" "{" "               " "\n" "}}" "42" " " "x" "o" =
 "b" "w" "e" "n" "{" " " "f" "{" " " "h" "t" "i" "w" "{" "'" " " "p" "r" "e"=
  "t" "n" "i" " " "n" "u" "r" "(" "\n" "\n" "))" "e" "r" "to" "s" " " "v" "n=
 " "e" " " "r" "p" "x" "e" " " "interp" " " "p" "r" "e" "t" "n" "i" "-" "e" =
 "k" "a" "m" "(" "  " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "r" "p" =
 "ex" " " "p" "r" "e" "t" "n" "i" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "=
 \n" ")])))" "value" " " "show" "(" " " ")" "store" " " "value" "(" " " "v*s=
 " "[" "      " "\n" "))" "mtSto" "(" " " ")" "mtSub" "(" " " ")" "sexp" " "=
  "parse" "(" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "    " =
 "\n" "])" "exn-message" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " =
 " ")" "x" "(" " " "lambda" "([(" " " "with-handlers" "(" "  " "\n" ")" "sex=
 p" " " "rp" "te" "n" "i" " " "run" "(" " " "define" "(" "\n" ";; run : S-ex=
 pression -> S-expression" "\n" "\n" "]))" "<box>" "'" " " ")" "location" "(=
 " " " "boxV" "[" "    " "\n" "]" "<closure>" "'" " " ")" "env" " " "body" "=
  " "param" "(" " " "closureV" "[" "    " "\n" "]" "n" " " ")" "n" "(" " " "=
 numV" "[" "    " "\n" "value" " " "BCFAE-Value" " " "type-case" "(" "  " "\=
 n" ")" "value" " " "show" "(" " " "define" "(" "\n" ";; show : BCFAE-Value =
 -> S-expression" "\n" "\n" ")])]))" "e1-store" " " "env" " " "e2" " " "inte=
 rp" "(" "                 " "\n" ")" "e1-store" " " "e1-value" "(" " " "v*s=
 " "[" "            " "\n" ")" "store" " " "env" " " "e1" " " "interp" "(" "=
  " "Value*Store" " " "type-case" "(" "          " "\n" ")" "e2" " " "e1" "(=
 " " " "seqn" "[" "    " "\n" ")])]" "box-store" "                         "=
  "\n" ")" "box-store" "                                       " "\n" ")" "b=
 ox-value" " " "boxV-location" "(" " " "store-lookup" "(" " " "v*s" "(" "   =
                  " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" "=
                " "\n" ")" "store" " " "env" " " "box-expr" " " "interp" "("=
  " " "Value*Store" " " "type-case" "(" "             " "\n" ")" "box-expr" =
 "(" " " "openbox" "[" "    " "\n" "))])])]" "value-store" "                =
                              " "\n" "value-value" "                        =
                      " "\n" ")" "box-value" " " "boxV-location" "(" " " "up=
 date-store" "(" "                               " "\n" "value-value" " " "v=
 *s" "(" "                          " "\n" ")" "value-store" " " "value-valu=
 e" "(" " " "v*s" "[" "                     " "\n" ")" "box-store" " " "env"=
  " " "value-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" " =
                   " "\n" ")" "box-store" " " "box-value" "(" " " "v*s" "[" =
 "              " "\n" ")" "store" " " "env" " " "box-expr" " " "interp" "("=
  " " "Value*Store" " " "type-case" "(" "            " "\n" ")" "value-expr"=
  " " "box-expr" "(" " " "setbox" "[" "    " "\n" ")))])]" "expr-store" " " =
 "expr-value" " " "new-loc" " " "aSto" "(" "                          " "\n"=
  ")" "new-loc" " " "boxV" "(" " " "v*s" "(" "                     " "\n" ")=
 ])" "expr-store" " " "next-location" "(" " " "new-loc" " " "define" "([" " =
 " "local" "(" "                   " "\n" ")" "expr-store" " " "expr-value" =
 "(" " " "v*s" "[" "              " "\n" ")" "store" " " "env" " " "value-ex=
 pr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "            " "=
 \n" ")" "value-expr" "(" " " "newbox" "[" "    " "\n" "))])]" "test-store" =
 " " "env" " " "falsity" " " "interp" "(" "                    " "\n" ")" "t=
 est-store" " " "env" " " "truth" " " "interp" "(" "                    " "\=
 n" ")" "test-value" " " "num-zero?" "(" " " "if" "(" "                " "\n=
 " ")" "test-store" " " "test-value" "(" " " "v*s" "[" "           " "\n" ")=
 " "store" " " "env" " " "test" " " "interp" "(" " " "Value*Store" " " "type=
 -case" "(" "         " "\n" ")" "falsity" " " "truth" " " "test" "(" " " "i=
 f0" "[" "    " "\n" ")])])]" "arg-store" "                               " =
 "\n" "))" "fun-value" " " "closureV-env" "(" "                             =
         " "\n" "arg-value" "                                     " "\n" ")"=
  "fun-value" " " "closureV-param" "(" " " "aSub" "(" "                     =
           " "\n" ")" "fun-value" " " "closureV-body" "(" " " "interp" "(" "=
                        " "\n" ")" "arg-store" " " "arg-value" "(" " " "v*s"=
  "[" "                  " "\n" ")" "fun-store" " " "env" " " "arg-expr" " "=
  "interp" "(" " " "Value*Store" " " "type-case" "(" "                " "\n"=
  ")" "fun-store" " " "fun-value" "(" " " "v*s" "[" "           " "\n" ")" "=
 store" " " "env" " " "fun-expr" " " "interp" "(" " " "Value*Store" " " "typ=
 e-case" "(" "         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[=
 " "    " "\n" ")]" "store" " " ")" "env" " " "bound-body" " " "bound-id" " =
 " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "bound-id=
 " "(" " " "fun" "[" "    " "\n" ")]" "store" " " ")" "env" " " "v" " " "env=
 -lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n" ")])])]=
 " "r-store" "                            " "\n" ")" "r-value" " " "l-value"=
  " " "num+" "(" " " "v*s" "(" "                       " "\n" ")" "r-store" =
 " " "r-value" "(" " " "v*s" "[" "                  " "\n" ")" "l-store" " "=
  "env" " " "r" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "    =
             " "\n" ")" "l-store" " " "l-value" "(" " " "v*s" "[" "         =
   " "\n" ")" "store" " " "env" " " "l" " " "interp" "(" " " "Value*Store" "=
  " "type-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add" "[" "    =
 " "\n" ")]" "store" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(=
 " " " "num" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n=
 " ")" "store" " " "env" " " "expr" " " "p" "r" "e" "t" "n" "i" " " "-interp=
 " "e" "k" "a" "m" "(" " " "define" "(" "\n" "interp : BCFAE Env Store -> Va=
 lue*Store" "-" "e" "k" "a" "m" ";; " "\n" "\n" ")))" "n" " " "numV-n" "(" "=
  " "zero?" "(" "  " "\n" ")" "n" " " "num-zero?" "(" " " "define" "(" "\n" =
 ";; num-zero? : numV -> boolean" "\n" "\n" "))))" "n2" " " "numV-n" "(" " "=
  ")" "n1" " " "numV-n" "(" " " "+" "(" " " "numV" "(" "  " "\n" ")" "n2" " =
 " "n1" " " "num+" "(" " " "define" "(" "\n" ";; num+ : numV numV -> numV" "=
 \n" "\n" ")))]))" "rest-store" " " "new-value" " " "loc-index" " " "update-=
 store" "(" " " "value" " " "location" " " "aSto" "(" "              " "\n" =
 ")" "rest-store" " " "new-value" " " "location" " " "aSto" "(" "           =
    " "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if" "(" "      =
     " "\n" ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "[" "=
     " "\n" ")]" "\"no such location\"" " " "update-store" "'" " " "error" "=
 (" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "=
 (" "  " "\n" ")" "sto" " " "new-value" " " "loc-index" " " "update-store" "=
 (" " " "define" "(" "\n" ";; update-store : number BCFAE-Value Store -> STo=
 re" "\n" "\n" ")]))" "location" " " "1" " " "+" "(" " " ")" "rest-store" " =
 " "value" " " "location" "(" " " "aSto" "[" "    " "\n" "]" "0" " " "()" " =
 " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" "=
 )" "sto" " " "next-location" "(" " " "define" "(" "\n" ";; next-location : =
 Store -> number" "\n" "\n" "))]))" "rest-store" " " "loc-index" " " "store-=
 lookup" "(" "              " "\n" "value" "              " "\n" ")" "loc-in=
 dex" " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-=
 store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no=
  value at location\"" " " "store-lookup" "'" " " "error" "(" " " "()" " " "=
 mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" =
 "sto" " " "loc-index" " " "store-lookup" "(" " " "define" "(" "\n" ";; stor=
 e-lookup : number Store -> BCFAE-Value" "\n" "\n" "))]))" "rest-env" " " "n=
 ame" " " "env-lookup" "(" "              " "\n" "bound-value" "            =
   " "\n" ")" "name" " " "bound-name" " " "symbol=3D?" "(" " " "if" "(" "   =
        " "\n" ")" "rest-env" " " "bound-value" " " "bound-name" "(" " " "aS=
 ub" "[" "    " "\n" ")]" "e" "m" "a" "n" " " "s\"" "~" " " "\"no binding fo=
 r identifier" " " "env-lookup" "'" " " "error" "(" " " "()" " " "mtSub" "["=
  "    " "\n" "env" " " "Env" " " "type-case" "(" "  " "\n" ")" "env" " " "n=
 ame" " " "env-lookup" "(" " " "define" "(" "\n" ";; env-lookup : symbol Env=
  -> BCFAE-Value" "\n" "\n" ")))])]))" "sexp" " " "second" "(" " " "parse" "=
 (" " " "))" "sexp" " " "first" "(" " " "parse" "(" " " "app" "(" " " "else"=
  "[" "                    " "\n" ")))]" "sexp" " " "third" "(" " " "parse" =
 "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "seqn" "(" " " ")"=
  "seqn" "[(" "                    " "\n" ")))]" "sexp" " " "second" "(" " "=
  "parse" "(" " " "openbox" "(" " " ")" "openbox" "[(" "                    =
 " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "s=
 econd" "(" " " "parse" "(" " " "setbox" "(" " " ")" "setbox" "[(" "        =
             " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "newb=
 ox" "(" " " ")" "newbox" "[(" "                    " "\n" ")))]" "sexp" " "=
  "fourth" "(" " " "parse" "(" "                                " "\n" "))" =
 "sexp" " " "third" "(" " " "parse" "(" "                                " "=
 \n" "))" "sexp" " " "second" "(" " " "parse" "(" " " "if0" "(" " " ")" "if0=
 " "[(" "                    " "\n" "))))]" "sexp" " " "second" "(" " " "sec=
 ond" "(" " " "parse" "(" "                                 " "\n" ")))" "se=
 xp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "f=
 irst" "(" " " "fun" "(" " " "app" "(" " " ")" "with" "[(" "                =
     " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " =
 " "second" "(" " " "first" "(" " " "fun" "(" " " ")" "fun" "[(" "          =
           " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "se=
 xp" " " "second" "(" " " "parse" "(" " " "add" "(" " " ")" "+" "[(" "      =
               " "\n" ")" "sexp" " " "first" "(" " " "case" "(" " " ")" "sex=
 p" " " "list?" "[(" "    " "\n" ")]" "sexp" " " "id" "(" " " ")" "sexp" " "=
  "symbol?" "[(" "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "n=
 umber?" "[(" "    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "parse" "(" " =
 " "define" "(" "\n" ";; parse : S-expression -> BCFAE" "\n" "\n" ")])" "Sto=
 re?" " " "store" "(" " " ")" "BCFAE-Value?" " " "value" "(" " " "v*s" "[" "=
   " "\n" "Value*Store" " " "define-type" "(" "\n" "\n" ")])" "Store?" " " "=
 store" "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\=
 n" ")" "number?" " " "location" "(" " " "aSto" "[" "  " "\n" "]" "mtSto" "[=
 " "  " "\n" "Store" " " "define-type" "(" "\n" "\n" ")])" "Env?" " " "env" =
 "(" "        " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" ")" =
 "symbol?" " " "name" "(" " " "aSub" "[" "  " "\n" "]" "mtSub" "[" "  " "\n"=
  "Env" " " "define-type" "(" "\n" "\n" ")])" "number?" " " "location" "(" "=
  " "boxV" "[" "  " "\n" ")]" "Env?" " " "env" "(" " " ")" "BCFAE?" " " "bod=
 y" "(" " " ")" "symbol?" " " "param" "(" " " "closureV" "[" "  " "\n" ")]" =
 "number?" " " "n" "(" " " "numV" "[" "  " "\n" "BCFAE-Value" " " "define-ty=
 pe" "(" "\n" "\n" ")])" "BCFAE?" " " "e2" "(" " " ")" "BCFAE?" " " "e1" "("=
  " " "seqn" "[" "  " "\n" ")]" "BCFAE?" " " "box-expr" "(" " " "openbox" "[=
 " "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " ")" "BCFAE?" " " "box-ex=
 pr" "(" " " "setbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " "=
 newbox" "[" "  " "\n" ")]" "BCFAE?" " " "falsity" "(" " " ")" "BCFAE?" " " =
 "truth" "(" " " ")" "BCFAE?" " " "test" "(" " " "if0" "[" "  " "\n" ")]" "B=
 CFAE?" " " "arg-expr" "(" " " ")" "BCFAE?" " " "fun-expr" "(" " " "app" "["=
  "  " "\n" ")]" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" "(" "=
  " "fun" "[" "  " "\n" ")]" "symbol?" " " "name" "(" " " "id" "[" "  " "\n"=
  ")]" "BCFAE?" " " "rhs" "(" " " ")" "BCFAE?" " " "lhs" "(" " " "add" "[" "=
   " "\n" ")]" "number?" " " "n" "(" " " "num" "[" "  " "\n" "BCFAE" " " "de=
 fine-type" "(") ("a" "1" "x" "e") (" " "b" "1" "x" "e") ("c" "1" "x" "e") (=
 "d" "1" "x" "e") ("e" "1" "x" "e") ("f" "1" "x" "e") ("\n" ")" "f" "ex1" " =
 " "f" " " "t" "(" "\n" ")" "e" "1" "x" "e" " " "e" " " "t" "(" "\n" ")" "d"=
  "ex1" " " "d" " " "t" "(" "\n" ")" "c" "1" "x" "e" " " "c" " " "t" "(" "\n=
 " ")" "b" "1" "x" "e" " " "b" " " "t" "(" "\n" ")" "1a" "ex" " " "a" " " "t=
 " "(" "\n" "\n" "\n" ")))" "p" "x" "e" "s" " " "d" "o" "m" "/" "p" "r" "e" =
 "t" "n" "i" " " "un" "r" "(" " " ")" "sexp" " " "interp" " " "run" "(" " " =
 "t" "s" "i" "l" "(" "  " "\n" ")" "xp" "e" "s" " " "d" "o" "m" "/" "rp" "e"=
  "t" "in" " " "t" "(" " " "define" "(" "\n" "\n" "\n" ")]))" "store" " " "e=
 nv" " " "expr" " " "f" " " "make-interp" "(" " " "e" "s" "l" "e" "[" "    "=
  "\n" ")])])]" "arg-store" "                          " "\n" "))" "fun-valu=
 e" " " "closureV-env" "(" "                                " "\n" "arg-valu=
 e" "                                " "\n" ")" "fun-value" " " "closureV-pa=
 ram" "(" " " "aSub" "(" "                          " "\n" ")" "fun-value" "=
  " "closureV-body" "(" " " "f" "(" "                       " "\n" ")" "arg-=
 store" " " "fun-value" "(" " " "v*s" "[" "                  " "\n" ")" "fun=
 -store" " " "env" " " "fun-expr" " " "f" "(" " " "Value*Store" " " "type-ca=
 se" "(" "                " "\n" ")" "fun-store" " " "arg-value" "(" " " "v*=
 s" "[" "           " "\n" ")" "store" " " "env" " " "arg-expr" " " "f" "(" =
 " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "arg-expr" " " "=
 fun-expr" "(" " " "app" "[" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "ty=
 pe-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "f" "(" " " "e"=
  "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " =
 "e" " " "make-interp" "(" " " "else" "[" "    " "\n" ")])])]" "r-store" " "=
  ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "                =
        " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "              =
     " "\n" ")" "l-store" " " "env" " " "l" " " "e" "(" " " "Value*Store" " =
 " "type-case" "(" "                " "\n" ")" "l-store" " " "l-value" "(" "=
  " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "r" " " "e" "(" "=
  " "Value*Store" " " "type-case" "(" "         " "\n" ")" "r" " " "l" "(" "=
  " "add" "[" "    " "\n" "r" "p" "x" "e" " " "BCFAE" " " "type-case" "(" " =
  " "\n" ")" "re" "o" "t" "s" " " "v" "n" "e" " " "expr" " " "e" "(" " " "e"=
  "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " =
 "d" " " "make-interp" "(" " " "e" "s" "l" "e" "[" "    " "\n" "))])]" "stor=
 e" " " "env" " " "falsity" " " "d" "(" "                    " "\n" ")" "tes=
 t-store" " " "env" " " "truth" " " "d" "(" "                    " "\n" ")" =
 "test-value" " " "num-zero?" "(" " " "if" "(" "                " "\n" ")" "=
 test-store" " " "test-value" "(" " " "v*s" "[" "           " "\n" ")" "stor=
 e" " " "env" " " "test" " " "d" "(" " " "Value*Store" " " "type-case" "(" "=
          " "\n" ")" "falsity" " " "truth" " " "test" "(" " " "if0" "[" "   =
  " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "re" "sto" " "=
  "v" "n" "e" " " "expr" " " "d" "(" " " "e" "n" "fi" "e" "d" "(" "\n" "\n" =
 ")]))" "store" " " "env" " " "expr" " " "c" " " "make-interp" "(" " " "se" =
 "l" "e" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "bound-body" " =
 " "bound-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body=
 " " " "bound-id" "(" " " "fun" "[" "    " "\n" "r" "xp" "e" " " "BCFAE" " "=
  "type-case" "(" "  " "\n" ")" "re" "o" "st" " " "v" "en" " " "expr" " " "c=
 " "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")]))" "store" " " "env" " =
 " "expr" " " "b" " " "-interp" "e" "mak" "(" " " "se" "l" "e" "[" "    " "\=
 n" "))]" "mtSto" "(" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "=
 (" " " ")" "v" "(" " " "id" "[" "    " "\n" "r" "xp" "e" " " "CFAE" "B" " "=
  "e" "s" "-ca" "e" "p" "y" "t" "(" "  " "\n" ")" "re" "o" "st" " " "v" "n" =
 "e" " " "r" "p" "ex" " " "b" "(" " " "define" "(" "\n" "\n" ")]))" "store" =
 " " "env" " " "expr" " " "a" " " "make-interp" "(" " " "se" "l" "e" "[" "  =
   " "\n" "))]" "mtSto" "(" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")"=
  "n" "(" " " "num" "[" "    " "\n" "r" "p" "x" "e" " " "CFAE" "B" " " "type=
 -case" "(" "  " "\n" ")" "e" "r" "o" "t" "s" " " "v" "n" "e" " " "expr" " "=
  "a" "(" " " "e" "n" "i" "f" "e" "d" "(" "\n" "\n" "\n" "}}})" "0" "1" " " =
 "}" "f" " " "x" "o" "b" "n" "e" "p" "o" "{{" "                 " "\n" "}}}}=
 }}" "1" "-" " " "n" " " "+" "{" " " "}" "f" " " "x" "o" "b" "n" "pe" "o" "{=
 {" " " "n" " " "+" "{" "                                  " "\n" "0" "     =
                              " "\n" "n" " " "0" "f" "i" "{" "              =
                " "\n" "}" "n" "{" " " "n" "u" "f" "{" " " "f" " " "x" "o" "=
 b" "t" "e" "s" "{" "                 " "\n" "n" "q" "e" "s" "{" "          =
      " "\n" "}}" "42" " " "x" "o" "b" "w" "e" "n" "{" " " "f" "{" " " "h" "=
 t" "i" "w" "{" "'" " " "p" "r" "e" "t" "n" "i" " " "n" "u" "r" "(" "\n" "\n=
 " "))" "e" "r" "to" "s" " " "v" "n" "e" " " "r" "p" "x" "e" " " "interp" " =
 " "p" "r" "e" "t" "n" "i" "-" "e" "k" "a" "m" "(" "  " "\n" ")" "re" "o" "t=
 " "s" " " "v" "n" "e" " " "r" "p" "ex" " " "p" "r" "e" "t" "n" "i" "(" " " =
 "e" "n" "i" "f" "e" "d" "(" "\n" "\n" ")])))" "value" " " "show" "(" " " ")=
 " "store" " " "value" "(" " " "v*s" "[" "      " "\n" "))" "mtSto" "(" " " =
 ")" "mtSub" "(" " " ")" "sexp" " " "parse" "(" " " "interp" "(" " " "Value*=
 Store" " " "type-case" "(" "    " "\n" "])" "exn-message" " " ")))" "x" " "=
  "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " " "wit=
 h-handlers" "(" "  " "\n" ")" "sexp" " " "rp" "te" "n" "i" " " "run" "(" " =
 " "define" "(" "\n" ";; run : S-expression -> S-expression" "\n" "\n" "]))"=
  "<box>" "'" " " ")" "location" "(" " " "boxV" "[" "    " "\n" "]" "<closur=
 e>" "'" " " ")" "env" " " "body" " " "param" "(" " " "closureV" "[" "    " =
 "\n" "]" "n" " " ")" "n" "(" " " "numV" "[" "    " "\n" "value" " " "BCFAE-=
 Value" " " "type-case" "(" "  " "\n" ")" "value" " " "show" "(" " " "define=
 " "(" "\n" ";; show : BCFAE-Value -> S-expression" "\n" "\n" ")])]))" "e1-s=
 tore" " " "env" " " "e2" " " "interp" "(" "                 " "\n" ")" "e1-=
 store" " " "e1-value" "(" " " "v*s" "[" "            " "\n" ")" "store" " "=
  "env" " " "e1" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "   =
        " "\n" ")" "e2" " " "e1" "(" " " "seqn" "[" "    " "\n" ")])]" "box-=
 store" "                         " "\n" ")" "box-store" "                  =
                      " "\n" ")" "box-value" " " "boxV-location" "(" " " "st=
 ore-lookup" "(" " " "v*s" "(" "                    " "\n" ")" "box-store" "=
  " "box-value" "(" " " "v*s" "[" "               " "\n" ")" "store" " " "en=
 v" " " "box-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" " =
             " "\n" ")" "box-expr" "(" " " "openbox" "[" "    " "\n" "))])])=
 ]" "value-store" "                                             " "\n" "valu=
 e-value" "                                             " "\n" ")" "box-valu=
 e" " " "boxV-location" "(" " " "update-store" "(" "                        =
        " "\n" "value-value" " " "v*s" "(" "                          " "\n"=
  ")" "value-store" " " "value-value" "(" " " "v*s" "[" "                   =
   " "\n" ")" "box-store" " " "env" " " "value-expr" " " "interp" "(" " " "V=
 alue*Store" " " "type-case" "(" "                   " "\n" ")" "box-store" =
 " " "box-value" "(" " " "v*s" "[" "              " "\n" ")" "store" " " "en=
 v" " " "box-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" " =
            " "\n" ")" "value-expr" " " "box-expr" "(" " " "setbox" "[" "   =
  " "\n" ")))])]" "expr-store" " " "expr-value" " " "new-loc" " " "aSto" "("=
  "                          " "\n" ")" "new-loc" " " "boxV" "(" " " "v*s" "=
 (" "                     " "\n" ")])" "expr-store" " " "next-location" "(" =
 " " "new-loc" " " "define" "([" " " "local" "(" "                   " "\n" =
 ")" "expr-store" " " "expr-value" "(" " " "v*s" "[" "              " "\n" "=
 )" "store" " " "env" " " "value-expr" " " "interp" "(" " " "Value*Store" " =
 " "type-case" "(" "            " "\n" ")" "value-expr" "(" " " "newbox" "["=
  "    " "\n" "))])]" "test-store" " " "env" " " "falsity" " " "interp" "(" =
 "                    " "\n" ")" "test-store" " " "env" " " "truth" " " "int=
 erp" "(" "                    " "\n" ")" "test-value" " " "num-zero?" "(" "=
  " "if" "(" "                " "\n" ")" "test-store" " " "test-value" "(" "=
  " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" " " "inter=
 p" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity"=
  " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" ")])])]" "arg-store" =
 "                               " "\n" "))" "fun-value" " " "closureV-env" =
 "(" "                                     " "\n" "arg-value" "             =
                         " "\n" ")" "fun-value" " " "closureV-param" "(" " "=
  "aSub" "(" "                               " "\n" ")" "fun-value" " " "clo=
 sureV-body" "(" " " "interp" "(" "                       " "\n" ")" "arg-st=
 ore" " " "arg-value" "(" " " "v*s" "[" "                  " "\n" ")" "fun-s=
 tore" " " "env" " " "arg-expr" " " "interp" "(" " " "Value*Store" " " "type=
 -case" "(" "                " "\n" ")" "fun-store" " " "fun-value" "(" " " =
 "v*s" "[" "           " "\n" ")" "store" " " "env" " " "fun-expr" " " "inte=
 rp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "arg-exp=
 r" " " "fun-expr" "(" " " "app" "[" "    " "\n" ")]" "store" " " ")" "env" =
 " " "bound-body" " " "bound-id" " " "closureV" "(" " " "v*s" "(" "      " "=
 \n" ")" "bound-body" " " "bound-id" "(" " " "fun" "[" "    " "\n" ")]" "sto=
 re" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(=
 " " " "id" "[" "    " "\n" ")])])]" "r-store" "                            =
 " "\n" ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "          =
              " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "        =
           " "\n" ")" "l-store" " " "env" " " "r" " " "interp" "(" " " "Valu=
 e*Store" " " "type-case" "(" "                " "\n" ")" "l-store" " " "l-v=
 alue" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "l" " =
 " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "=
 r" " " "l" "(" " " "add" "[" "    " "\n" ")]" "store" " " ")" "n" " " "numV=
 " "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "expr" " " "B=
 CFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "p=
 " "r" "e" "t" "n" "i" " " "-interp" "e" "k" "a" "m" "(" " " "define" "(" "\=
 n" "interp : BCFAE Env Store -> Value*Store" "-" "e" "k" "a" "m" ";; " "\n"=
  "\n" ")))" "n" " " "numV-n" "(" " " "zero?" "(" "  " "\n" ")" "n" " " "num=
 -zero?" "(" " " "define" "(" "\n" ";; num-zero? : numV -> boolean" "\n" "\n=
 " "))))" "n2" " " "numV-n" "(" " " ")" "n1" " " "numV-n" "(" " " "+" "(" " =
 " "numV" "(" "  " "\n" ")" "n2" " " "n1" " " "num+" "(" " " "define" "(" "\=
 n" ";; num+ : numV numV -> numV" "\n" "\n" ")))]))" "rest-store" " " "new-v=
 alue" " " "loc-index" " " "update-store" "(" " " "value" " " "location" " "=
  "aSto" "(" "              " "\n" ")" "rest-store" " " "new-value" " " "loc=
 ation" " " "aSto" "(" "              " "\n" ")" "loc-index" " " "location" =
 " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-store" " " "value" "=
  " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no such location\"" " =
 " "update-store" "'" " " "error" "(" " " "()" " " "mtSto" "[" "    " "\n" "=
 sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "new-value" " =
 " "loc-index" " " "update-store" "(" " " "define" "(" "\n" ";; update-store=
  : number BCFAE-Value Store -> STore" "\n" "\n" ")]))" "location" " " "1" "=
  " "+" "(" " " ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "=
 [" "    " "\n" "]" "0" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Stor=
 e" " " "type-case" "(" "  " "\n" ")" "sto" " " "next-location" "(" " " "def=
 ine" "(" "\n" ";; next-location : Store -> number" "\n" "\n" "))]))" "rest-=
 store" " " "loc-index" " " "store-lookup" "(" "              " "\n" "value"=
  "              " "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if=
 " "(" "          " "\n" ")" "rest-store" " " "value" " " "location" "(" " "=
  "aSto" "[" "    " "\n" ")]" "\"no value at location\"" " " "store-lookup" =
 "'" " " "error" "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" =
 " " "type-case" "(" "  " "\n" ")" "sto" " " "loc-index" " " "store-lookup" =
 "(" " " "define" "(" "\n" ";; store-lookup : number Store -> BCFAE-Value" "=
 \n" "\n" "))]))" "rest-env" " " "name" " " "env-lookup" "(" "              =
 " "\n" "bound-value" "              " "\n" ")" "name" " " "bound-name" " " =
 "symbol=3D?" "(" " " "if" "(" "          " "\n" ")" "rest-env" " " "bound-v=
 alue" " " "bound-name" "(" " " "aSub" "[" "    " "\n" ")]" "e" "m" "a" "n" =
 " " "s\"" "~" " " "\"no binding for identifier" " " "env-lookup" "'" " " "e=
 rror" "(" " " "()" " " "mtSub" "[" "    " "\n" "env" " " "Env" " " "type-ca=
 se" "(" "  " "\n" ")" "env" " " "name" " " "env-lookup" "(" " " "define" "(=
 " "\n" ";; env-lookup : symbol Env -> BCFAE-Value" "\n" "\n" ")))])]))" "se=
 xp" " " "second" "(" " " "parse" "(" " " "))" "sexp" " " "first" "(" " " "p=
 arse" "(" " " "app" "(" " " "else" "[" "                    " "\n" ")))]" "=
 sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " =
 "parse" "(" " " "seqn" "(" " " ")" "seqn" "[(" "                    " "\n" =
 ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "openbox" "(" " " ")" "o=
 penbox" "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" " " =
 "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "setbox" "=
 (" " " ")" "setbox" "[(" "                    " "\n" ")))]" "sexp" " " "sec=
 ond" "(" " " "parse" "(" " " "newbox" "(" " " ")" "newbox" "[(" "          =
           " "\n" ")))]" "sexp" " " "fourth" "(" " " "parse" "(" "          =
                       " "\n" "))" "sexp" " " "third" "(" " " "parse" "(" " =
                                " "\n" "))" "sexp" " " "second" "(" " " "par=
 se" "(" " " "if0" "(" " " ")" "if0" "[(" "                    " "\n" "))))]=
 " "sexp" " " "second" "(" " " "second" "(" " " "parse" "(" "               =
                   " "\n" ")))" "sexp" " " "third" "(" " " "parse" "(" " " "=
 ))" "sexp" " " "second" "(" " " "first" "(" " " "fun" "(" " " "app" "(" " "=
  ")" "with" "[(" "                    " "\n" ")))]" "sexp" " " "third" "(" =
 " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "first" "(" " " "fun" =
 "(" " " ")" "fun" "[(" "                    " "\n" ")))]" "sexp" " " "third=
 " "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " =
 "add" "(" " " ")" "+" "[(" "                    " "\n" ")" "sexp" " " "firs=
 t" "(" " " "case" "(" " " ")" "sexp" " " "list?" "[(" "    " "\n" ")]" "sex=
 p" " " "id" "(" " " ")" "sexp" " " "symbol?" "[(" "    " "\n" ")]" "sexp" "=
  " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" "(" "  " =
 "\n" ")" "sexp" " " "parse" "(" " " "define" "(" "\n" ";; parse : S-express=
 ion -> BCFAE" "\n" "\n" ")])" "Store?" " " "store" "(" " " ")" "BCFAE-Value=
 ?" " " "value" "(" " " "v*s" "[" "  " "\n" "Value*Store" " " "define-type" =
 "(" "\n" "\n" ")])" "Store?" " " "store" "(" "        " "\n" ")" "BCFAE-Val=
 ue?" " " "value" "(" "        " "\n" ")" "number?" " " "location" "(" " " "=
 aSto" "[" "  " "\n" "]" "mtSto" "[" "  " "\n" "Store" " " "define-type" "("=
  "\n" "\n" ")])" "Env?" " " "env" "(" "        " "\n" ")" "BCFAE-Value?" " =
 " "value" "(" "        " "\n" ")" "symbol?" " " "name" "(" " " "aSub" "[" "=
   " "\n" "]" "mtSub" "[" "  " "\n" "Env" " " "define-type" "(" "\n" "\n" ")=
 ])" "number?" " " "location" "(" " " "boxV" "[" "  " "\n" ")]" "Env?" " " "=
 env" "(" " " ")" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" "(" =
 " " "closureV" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "numV" "[" "  "=
  "\n" "BCFAE-Value" " " "define-type" "(" "\n" "\n" ")])" "BCFAE?" " " "e2"=
  "(" " " ")" "BCFAE?" " " "e1" "(" " " "seqn" "[" "  " "\n" ")]" "BCFAE?" "=
  " "box-expr" "(" " " "openbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr=
 " "(" " " ")" "BCFAE?" " " "box-expr" "(" " " "setbox" "[" "  " "\n" ")]" "=
 BCFAE?" " " "value-expr" "(" " " "newbox" "[" "  " "\n" ")]" "BCFAE?" " " "=
 falsity" "(" " " ")" "BCFAE?" " " "truth" "(" " " ")" "BCFAE?" " " "test" "=
 (" " " "if0" "[" "  " "\n" ")]" "BCFAE?" " " "arg-expr" "(" " " ")" "BCFAE?=
 " " " "fun-expr" "(" " " "app" "[" "  " "\n" ")]" "BCFAE?" " " "body" "(" "=
  " ")" "symbol?" " " "param" "(" " " "fun" "[" "  " "\n" ")]" "symbol?" " "=
  "name" "(" " " "id" "[" "  " "\n" ")]" "BCFAE?" " " "rhs" "(" " " ")" "BCF=
 AE?" " " "lhs" "(" " " "add" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "=
 num" "[" "  " "\n" "BCFAE" " " "define-type" "(") ("g" "v" "a" "-" "z" "i" =
 "u" "q") ("g" "v" "a" "-" "z" "i" "u" "q") (")" "2" "2" "." "5" " " "0" "1"=
  "d" "n" "u" "o" "r" "(") (")" "+" "(") ("\n" ")" "ex1f" " " "f" " " "t" "(=
 " "\n" ")" "ex1e" " " "e" " " "t" "(" "\n" ")" "ex1d" " " "d" " " "t" "(" "=
 \n" ")" "ex1c" " " "c" " " "t" "(" "\n" ")" "ex1b" " " "b" " " "t" "(" "\n"=
  ")" "ex1a" " " "a" " " "t" "(" "\n" "\n" "\n" ")))" "sexp" " " "interp/mod=
 " " " "run" "(" " " ")" "sexp" " " "interp" " " "run" "(" " " "list" "(" " =
  " "\n" ")" "sexp" " " "interp/mod" " " "t" "(" " " "define" "(" "\n" "\n" =
 "\n" ")]))" "store" " " "env" " " "expr" " " "f" " " "make-interp" "(" " " =
 "else" "[" "    " "\n" ")])])]" "arg-store" "                          " "\=
 n" "))" "fun-value" " " "closureV-env" "(" "                               =
  " "\n" "arg-value" "                                " "\n" ")" "fun-value"=
  " " "closureV-param" "(" " " "aSub" "(" "                          " "\n" =
 ")" "fun-value" " " "closureV-body" "(" " " "f" "(" "                      =
  " "\n" ")" "arg-store" " " "fun-value" "(" " " "v*s" "[" "                =
   " "\n" ")" "fun-store" " " "env" " " "fun-expr" " " "f" "(" " " "Value*St=
 ore" " " "type-case" "(" "                " "\n" ")" "fun-store" " " "arg-v=
 alue" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "arg-e=
 xpr" " " "f" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")"=
  "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" "expr" " " "BCFAE"=
  " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "f" "("=
  " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "e" " "=
  "make-interp" "(" " " "else" "[" "    " "\n" ")])])]" "r-store" " " ")" "r=
 -value" " " "l-value" " " "num+" "(" " " "v*s" "(" "                       =
 " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "                  " "=
 \n" ")" "l-store" " " "env" " " "l" " " "e" "(" " " "Value*Store" " " "type=
 -case" "(" "                " "\n" ")" "l-store" " " "l-value" "(" " " "v*s=
 " "[" "           " "\n" ")" "store" " " "env" " " "r" " " "e" "(" " " "Val=
 ue*Store" " " "type-case" "(" "         " "\n" ")" "r" " " "l" "(" " " "add=
 " "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "sto=
 re" " " "env" " " "expr" " " "e" "(" " " "define" "(" "\n" "\n" ")]))" "sto=
 re" " " "env" " " "expr" " " "d" " " "make-interp" "(" " " "else" "[" "    =
 " "\n" "))])]" "store" " " "env" " " "falsity" " " "d" "(" "               =
      " "\n" ")" "test-store" " " "env" " " "truth" " " "d" "(" "           =
          " "\n" ")" "test-value" " " "num-zero?" "(" " " "if" "(" "        =
         " "\n" ")" "test-store" " " "test-value" "(" " " "v*s" "[" "       =
     " "\n" ")" "store" " " "env" " " "test" " " "d" "(" " " "Value*Store" "=
  " "type-case" "(" "         " "\n" ")" "falsity" " " "truth" " " "test" "(=
 " " " "if0" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n=
 " ")" "store" " " "env" " " "expr" " " "d" "(" " " "define" "(" "\n" "\n" "=
 )]))" "store" " " "env" " " "expr" " " "c" " " "make-interp" "(" " " "else"=
  "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "bound-body" " " "boun=
 d-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" "bound-body" " " "=
 bound-id" "(" " " "fun" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" =
 "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "c" "(" " " "define" "("=
  "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "b" " " "make-interp" "(=
 " " " "else" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "v" " " "e=
 nv-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "[" "    " "\n" "expr=
 " " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " "expr=
 " " " "b" "(" " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr=
 " " " "a" " " "make-interp" "(" " " "else" "[" "    " "\n" "))]" "mtSto" "(=
 " " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" " =
    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " =
 "env" " " "expr" " " "a" "(" " " "define" "(" "\n" "\n" "\n" "}}})" "10" " =
 " "}" "f" " " "openbox" "{{" "                 " "\n" "}}}}}}" "-1" " " "n"=
  " " "+" "{" " " "}" "f" " " "openbox" "{{" " " "n" " " "+" "{" "          =
                         " "\n" "0" "                                  " "\n=
 " "n" " " "if0" "{" "                             " "\n" "}" "n" "{" " " "f=
 un" "{" " " "f" " " "setbox" "{" "                 " "\n" "seqn" "{" "     =
           " "\n" "}}" "42" " " "newbox" "{" " " "f" "{" " " "with" "{" "'" =
 " " "interp" " " "run" "(" "\n" "\n" "))" "store" " " "env" " " "expr" " " =
 "interp" " " "make-interp" "(" "  " "\n" ")" "store" " " "env" " " "expr" "=
  " "interp" "(" " " "define" "(" "\n" "\n" ")])))" "value" " " "show" "(" "=
  " ")" "store" " " "value" "(" " " "v*s" "[" "      " "\n" "))" "mtSto" "("=
  " " ")" "mtSub" "(" " " ")" "sexp" " " "parse" "(" " " "interp" "(" " " "V=
 alue*Store" " " "type-case" "(" "    " "\n" "])" "exn-message" " " ")))" "x=
 " " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " "lambda" "([(" " "=
  "with-handlers" "(" "  " "\n" ")" "sexp" " " "interp" " " "run" "(" " " "d=
 efine" "(" "\n" ";; run : S-expression -> S-expression" "\n" "\n" "]))" "<b=
 ox>" "'" " " ")" "location" "(" " " "boxV" "[" "    " "\n" "]" "<closure>" =
 "'" " " ")" "env" " " "body" " " "param" "(" " " "closureV" "[" "    " "\n"=
  "]" "n" " " ")" "n" "(" " " "numV" "[" "    " "\n" "value" " " "BCFAE-Valu=
 e" " " "type-case" "(" "  " "\n" ")" "value" " " "show" "(" " " "define" "(=
 " "\n" ";; show : BCFAE-Value -> S-expression" "\n" "\n" ")])]))" "e1-store=
 " " " "env" " " "e2" " " "interp" "(" "                 " "\n" ")" "e1-stor=
 e" " " "e1-value" "(" " " "v*s" "[" "            " "\n" ")" "store" " " "en=
 v" " " "e1" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "       =
    " "\n" ")" "e2" " " "e1" "(" " " "seqn" "[" "    " "\n" ")])]" "box-stor=
 e" "                         " "\n" ")" "box-store" "                      =
                  " "\n" ")" "box-value" " " "boxV-location" "(" " " "store-=
 lookup" "(" " " "v*s" "(" "                    " "\n" ")" "box-store" " " "=
 box-value" "(" " " "v*s" "[" "               " "\n" ")" "store" " " "env" "=
  " "box-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "     =
         " "\n" ")" "box-expr" "(" " " "openbox" "[" "    " "\n" "))])])]" "=
 value-store" "                                             " "\n" "value-va=
 lue" "                                             " "\n" ")" "box-value" "=
  " "boxV-location" "(" " " "update-store" "(" "                            =
    " "\n" "value-value" " " "v*s" "(" "                          " "\n" ")"=
  "value-store" " " "value-value" "(" " " "v*s" "[" "                     " =
 "\n" ")" "box-store" " " "env" " " "value-expr" " " "interp" "(" " " "Value=
 *Store" " " "type-case" "(" "                   " "\n" ")" "box-store" " " =
 "box-value" "(" " " "v*s" "[" "              " "\n" ")" "store" " " "env" "=
  " "box-expr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "     =
        " "\n" ")" "value-expr" " " "box-expr" "(" " " "setbox" "[" "    " "=
 \n" ")))])]" "expr-store" " " "expr-value" " " "new-loc" " " "aSto" "(" "  =
                         " "\n" ")" "new-loc" " " "boxV" "(" " " "v*s" "(" "=
                      " "\n" ")])" "expr-store" " " "next-location" "(" " " =
 "new-loc" " " "define" "([" " " "local" "(" "                   " "\n" ")" =
 "expr-store" " " "expr-value" "(" " " "v*s" "[" "              " "\n" ")" "=
 store" " " "env" " " "value-expr" " " "interp" "(" " " "Value*Store" " " "t=
 ype-case" "(" "            " "\n" ")" "value-expr" "(" " " "newbox" "[" "  =
   " "\n" "))])]" "test-store" " " "env" " " "falsity" " " "interp" "(" "   =
                  " "\n" ")" "test-store" " " "env" " " "truth" " " "interp"=
  "(" "                    " "\n" ")" "test-value" " " "num-zero?" "(" " " "=
 if" "(" "                " "\n" ")" "test-store" " " "test-value" "(" " " "=
 v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" " " "interp" "=
 (" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity" " "=
  "truth" " " "test" "(" " " "if0" "[" "    " "\n" ")])])]" "arg-store" "   =
                             " "\n" "))" "fun-value" " " "closureV-env" "(" =
 "                                     " "\n" "arg-value" "                 =
                     " "\n" ")" "fun-value" " " "closureV-param" "(" " " "aS=
 ub" "(" "                               " "\n" ")" "fun-value" " " "closure=
 V-body" "(" " " "interp" "(" "                       " "\n" ")" "arg-store"=
  " " "arg-value" "(" " " "v*s" "[" "                  " "\n" ")" "fun-store=
 " " " "env" " " "arg-expr" " " "interp" "(" " " "Value*Store" " " "type-cas=
 e" "(" "                " "\n" ")" "fun-store" " " "fun-value" "(" " " "v*s=
 " "[" "           " "\n" ")" "store" " " "env" " " "fun-expr" " " "interp" =
 "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "arg-expr" "=
  " "fun-expr" "(" " " "app" "[" "    " "\n" ")]" "store" " " ")" "env" " " =
 "bound-body" " " "bound-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" =
 ")" "bound-body" " " "bound-id" "(" " " "fun" "[" "    " "\n" ")]" "store" =
 " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " =
 " "id" "[" "    " "\n" ")])])]" "r-store" "                            " "\=
 n" ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "              =
          " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "            =
       " "\n" ")" "l-store" " " "env" " " "r" " " "interp" "(" " " "Value*St=
 ore" " " "type-case" "(" "                " "\n" ")" "l-store" " " "l-value=
 " "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "l" " " "i=
 nterp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "r" "=
  " "l" "(" " " "add" "[" "    " "\n" ")]" "store" " " ")" "n" " " "numV" "(=
 " " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n" "expr" " " "BCFAE=
 " " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "inter=
 p" " " "make-interp" "(" " " "define" "(" "\n" ";; make-interp : BCFAE Env =
 Store -> Value*Store" "\n" "\n" ")))" "n" " " "numV-n" "(" " " "zero?" "(" =
 "  " "\n" ")" "n" " " "num-zero?" "(" " " "define" "(" "\n" ";; num-zero? :=
  numV -> boolean" "\n" "\n" "))))" "n2" " " "numV-n" "(" " " ")" "n1" " " "=
 numV-n" "(" " " "+" "(" " " "numV" "(" "  " "\n" ")" "n2" " " "n1" " " "num=
 +" "(" " " "define" "(" "\n" ";; num+ : numV numV -> numV" "\n" "\n" ")))])=
 )" "rest-store" " " "new-value" " " "loc-index" " " "update-store" "(" " " =
 "value" " " "location" " " "aSto" "(" "              " "\n" ")" "rest-store=
 " " " "new-value" " " "location" " " "aSto" "(" "              " "\n" ")" "=
 loc-index" " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" ")" =
 "rest-store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]"=
  "\"no such location\"" " " "update-store" "'" " " "error" "(" " " "()" " "=
  "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")=
 " "sto" " " "new-value" " " "loc-index" " " "update-store" "(" " " "define"=
  "(" "\n" ";; update-store : number BCFAE-Value Store -> STore" "\n" "\n" "=
 )]))" "location" " " "1" " " "+" "(" " " ")" "rest-store" " " "value" " " "=
 location" "(" " " "aSto" "[" "    " "\n" "]" "0" " " "()" " " "mtSto" "[" "=
     " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "n=
 ext-location" "(" " " "define" "(" "\n" ";; next-location : Store -> number=
 " "\n" "\n" "))]))" "rest-store" " " "loc-index" " " "store-lookup" "(" "  =
             " "\n" "value" "              " "\n" ")" "loc-index" " " "locat=
 ion" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "rest-store" " " "val=
 ue" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\"no value at locat=
 ion\"" " " "store-lookup" "'" " " "error" "(" " " "()" " " "mtSto" "[" "   =
  " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" ")" "sto" " " "loc-=
 index" " " "store-lookup" "(" " " "define" "(" "\n" ";; store-lookup : numb=
 er Store -> BCFAE-Value" "\n" "\n" "))]))" "rest-env" " " "name" " " "env-l=
 ookup" "(" "              " "\n" "bound-value" "              " "\n" ")" "n=
 ame" " " "bound-name" " " "symbol=3D?" "(" " " "if" "(" "          " "\n" "=
 )" "rest-env" " " "bound-value" " " "bound-name" "(" " " "aSub" "[" "    " =
 "\n" ")]" "name" " " "\"no binding for identifier ~s\"" " " "env-lookup" "'=
 " " " "error" "(" " " "()" " " "mtSub" "[" "    " "\n" "env" " " "Env" " " =
 "type-case" "(" "  " "\n" ")" "env" " " "name" " " "env-lookup" "(" " " "de=
 fine" "(" "\n" ";; env-lookup : symbol Env -> BCFAE-Value" "\n" "\n" ")))])=
 ]))" "sexp" " " "second" "(" " " "parse" "(" " " "))" "sexp" " " "first" "(=
 " " " "parse" "(" " " "app" "(" " " "else" "[" "                    " "\n" =
 ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" =
 "(" " " "parse" "(" " " "seqn" "(" " " ")" "seqn" "[(" "                   =
  " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "openbox" "(" " =
 " ")" "openbox" "[(" "                    " "\n" ")))]" "sexp" " " "third" =
 "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" "(" " " "s=
 etbox" "(" " " ")" "setbox" "[(" "                    " "\n" ")))]" "sexp" =
 " " "second" "(" " " "parse" "(" " " "newbox" "(" " " ")" "newbox" "[(" "  =
                   " "\n" ")))]" "sexp" " " "fourth" "(" " " "parse" "(" "  =
                               " "\n" "))" "sexp" " " "third" "(" " " "parse=
 " "(" "                                " "\n" "))" "sexp" " " "second" "(" =
 " " "parse" "(" " " "if0" "(" " " ")" "if0" "[(" "                    " "\n=
 " "))))]" "sexp" " " "second" "(" " " "second" "(" " " "parse" "(" "       =
                           " "\n" ")))" "sexp" " " "third" "(" " " "parse" "=
 (" " " "))" "sexp" " " "second" "(" " " "first" "(" " " "fun" "(" " " "app"=
  "(" " " ")" "with" "[(" "                    " "\n" ")))]" "sexp" " " "thi=
 rd" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "first" "(" " =
 " "fun" "(" " " ")" "fun" "[(" "                    " "\n" ")))]" "sexp" " =
 " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "parse" =
 "(" " " "add" "(" " " ")" "+" "[(" "                    " "\n" ")" "sexp" "=
  " "first" "(" " " "case" "(" " " ")" "sexp" " " "list?" "[(" "    " "\n" "=
 )]" "sexp" " " "id" "(" " " ")" "sexp" " " "symbol?" "[(" "    " "\n" ")]" =
 "sexp" " " "num" "(" " " ")" "sexp" " " "number?" "[(" "    " "\n" "cond" "=
 (" "  " "\n" ")" "sexp" " " "parse" "(" " " "define" "(" "\n" ";; parse : S=
 -expression -> BCFAE" "\n" "\n" ")])" "Store?" " " "store" "(" " " ")" "BCF=
 AE-Value?" " " "value" "(" " " "v*s" "[" "  " "\n" "Value*Store" " " "defin=
 e-type" "(" "\n" "\n" ")])" "Store?" " " "store" "(" "        " "\n" ")" "B=
 CFAE-Value?" " " "value" "(" "        " "\n" ")" "number?" " " "location" "=
 (" " " "aSto" "[" "  " "\n" "]" "mtSto" "[" "  " "\n" "Store" " " "define-t=
 ype" "(" "\n" "\n" ")])" "Env?" " " "env" "(" "        " "\n" ")" "BCFAE-Va=
 lue?" " " "value" "(" "        " "\n" ")" "symbol?" " " "name" "(" " " "aSu=
 b" "[" "  " "\n" "]" "mtSub" "[" "  " "\n" "Env" " " "define-type" "(" "\n"=
  "\n" ")])" "number?" " " "location" "(" " " "boxV" "[" "  " "\n" ")]" "Env=
 ?" " " "env" "(" " " ")" "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "par=
 am" "(" " " "closureV" "[" "  " "\n" ")]" "number?" " " "n" "(" " " "numV" =
 "[" "  " "\n" "BCFAE-Value" " " "define-type" "(" "\n" "\n" ")])" "BCFAE?" =
 " " "e2" "(" " " ")" "BCFAE?" " " "e1" "(" " " "seqn" "[" "  " "\n" ")]" "B=
 CFAE?" " " "box-expr" "(" " " "openbox" "[" "  " "\n" ")]" "BCFAE?" " " "va=
 lue-expr" "(" " " ")" "BCFAE?" " " "box-expr" "(" " " "setbox" "[" "  " "\n=
 " ")]" "BCFAE?" " " "value-expr" "(" " " "newbox" "[" "  " "\n" ")]" "BCFAE=
 ?" " " "falsity" "(" " " ")" "BCFAE?" " " "truth" "(" " " ")" "BCFAE?" " " =
 "test" "(" " " "if0" "[" "  " "\n" ")]" "BCFAE?" " " "arg-expr" "(" " " ")"=
  "BCFAE?" " " "fun-expr" "(" " " "app" "[" "  " "\n" ")]" "BCFAE?" " " "bod=
 y" "(" " " ")" "symbol?" " " "param" "(" " " "fun" "[" "  " "\n" ")]" "symb=
 ol?" " " "name" "(" " " "id" "[" "  " "\n" ")]" "BCFAE?" " " "rhs" "(" " " =
 ")" "BCFAE?" " " "lhs" "(" " " "add" "[" "  " "\n" ")]" "number?" " " "n" "=
 (" " " "num" "[" "  " "\n" "BCFAE" " " "define-type" "(") ("\n" ")" "ex1f" =
 " " "f" " " "t" "(" "\n" ")" "ex1e" " " "e" " " "t" "(" "\n" ")" "ex1d" " "=
  "d" " " "t" "(" "\n" ")" "ex1c" " " "c" " " "t" "(" "\n" ")" "ex1b" " " "b=
 " " " "t" "(" "\n" ")" "ex1a" " " "a" " " "t" "(" "\n" "\n" "\n" ")))" "sex=
 p" " " "interp/mod" " " "run" "(" " " ")" "sexp" " " "interp" " " "run" "("=
  " " "list" "(" "  " "\n" ")" "sexp" " " "interp/mod" " " "t" "(" " " "defi=
 ne" "(" "\n" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "f" " " "mak=
 e-interp" "(" " " "else" "[" "    " "\n" ")])])]" "arg-store" "            =
               " "\n" "))" "fun-value" " " "closureV-env" "(" "             =
                    " "\n" "arg-value" "                                " "\=
 n" ")" "fun-value" " " "closureV-param" "(" " " "aSub" "(" "               =
            " "\n" ")" "fun-value" " " "closureV-body" "(" " " "f" "(" "    =
                    " "\n" ")" "arg-store" " " "fun-value" "(" " " "v*s" "["=
  "                  " "\n" ")" "fun-store" " " "env" " " "fun-expr" " " "f"=
  "(" " " "Value*Store" " " "type-case" "(" "                " "\n" ")" "fun=
 -store" " " "arg-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " =
 " "env" " " "arg-expr" " " "f" "(" " " "Value*Store" " " "type-case" "(" " =
         " "\n" ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" =
 "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " =
 "expr" " " "f" "(" " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " " =
 "expr" " " "e" " " "make-interp" "(" " " "else" "[" "    " "\n" ")])])]" "r=
 -store" " " ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "(" "     =
                   " "\n" ")" "r-store" " " "r-value" "(" " " "v*s" "[" "   =
                " "\n" ")" "l-store" " " "env" " " "l" " " "e" "(" " " "Valu=
 e*Store" " " "type-case" "(" "                " "\n" ")" "l-store" " " "l-v=
 alue" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "r" " =
 " "e" "(" " " "Value*Store" " " "type-case" "(" "         " "\n" ")" "r" " =
 " "l" "(" " " "add" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" =
 "  " "\n" ")" "store" " " "env" " " "expr" " " "e" "(" " " "define" "(" "\n=
 " "\n" ")]))" "store" " " "env" " " "expr" " " "d" " " "make-interp" "(" " =
 " "else" "[" "    " "\n" "))])]" "store" " " "env" " " "falsity" " " "d" "(=
 " "                    " "\n" ")" "test-store" " " "env" " " "truth" " " "d=
 " "(" "                    " "\n" ")" "test-value" " " "num-zero?" "(" " " =
 "if" "(" "                " "\n" ")" "test-store" " " "test-value" "(" " " =
 "v*s" "[" "           " "\n" ")" "store" " " "env" " " "test" " " "d" "(" "=
  " "Value*Store" " " "type-case" "(" "         " "\n" ")" "falsity" " " "tr=
 uth" " " "test" "(" " " "if0" "[" "    " "\n" "expr" " " "BCFAE" " " "type-=
 case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "d" "(" " " "defin=
 e" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "c" " " "make-inte=
 rp" "(" " " "else" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "env" " " "bou=
 nd-body" " " "bound-id" " " "closureV" "(" " " "v*s" "(" "      " "\n" ")" =
 "bound-body" " " "bound-id" "(" " " "fun" "[" "    " "\n" "expr" " " "BCFAE=
 " " " "type-case" "(" "  " "\n" ")" "store" " " "env" " " "expr" " " "c" "(=
 " " " "define" "(" "\n" "\n" ")]))" "store" " " "env" " " "expr" " " "b" " =
 " "make-interp" "(" " " "else" "[" "    " "\n" "))]" "mtSto" "(" " " ")" "e=
 nv" " " "v" " " "env-lookup" "(" " " "v*s" "(" " " ")" "v" "(" " " "id" "["=
  "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" "=
  " "env" " " "expr" " " "b" "(" " " "define" "(" "\n" "\n" ")]))" "store" "=
  " "env" " " "expr" " " "a" " " "make-interp" "(" " " "else" "[" "    " "\n=
 " "))]" "mtSto" "(" " " ")" "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(=
 " " " "num" "[" "    " "\n" "expr" " " "BCFAE" " " "type-case" "(" "  " "\n=
 " ")" "store" " " "env" " " "expr" " " "a" "(" " " "define" "(" "\n" "\n" "=
 \n" "}}})" "10" " " "}" "f" " " "openbox" "{{" "                 " "\n" "}}=
 }}}}" "-1" " " "n" " " "+" "{" " " "}" "f" " " "openbox" "{{" " " "n" " " "=
 +" "{" "                                  " "\n" "0" "                     =
              " "\n" "n" " " "if0" "{" "                             " "\n" =
 "}" "n" "{" " " "fun" "{" " " "f" " " "setbox" "{" "                 " "\n"=
  "seqn" "{" "               " "\n" "}}" "42" " " "newbox" "{" " " "f" "{" "=
  " "with" "{" "'" " " "interp" " " "run" "(" "\n" "\n" "))" "store" " " "en=
 v" " " "expr" " " "interp" " " "make-interp" "(" "  " "\n" ")" "store" " " =
 "env" " " "expr" " " "interp" "(" " " "define" "(" "\n" "\n" ")])))" "value=
 " " " "show" "(" " " ")" "store" " " "value" "(" " " "v*s" "[" "      " "\n=
 " "))" "mtSto" "(" " " ")" "mtSub" "(" " " ")" "sexp" " " "parse" "(" " " "=
 interp" "(" " " "Value*Store" " " "type-case" "(" "    " "\n" "])" "exn-mes=
 sage" " " ")))" "x" " " "exn:break?" "(" " " "not" "(" " " ")" "x" "(" " " =
 "lambda" "([(" " " "with-handlers" "(" "  " "\n" ")" "sexp" " " "interp" " =
 " "run" "(" " " "define" "(" "\n" ";; run : S-expression -> S-expression" "=
 \n" "\n" "]))" "<box>" "'" " " ")" "location" "(" " " "boxV" "[" "    " "\n=
 " "]" "<closure>" "'" " " ")" "env" " " "body" " " "param" "(" " " "closure=
 V" "[" "    " "\n" "]" "n" " " ")" "n" "(" " " "numV" "[" "    " "\n" "valu=
 e" " " "BCFAE-Value" " " "type-case" "(" "  " "\n" ")" "value" " " "show" "=
 (" " " "define" "(" "\n" ";; show : BCFAE-Value -> S-expression" "\n" "\n" =
 ")])]))" "e1-store" " " "env" " " "e2" " " "interp" "(" "                 "=
  "\n" ")" "e1-store" " " "e1-value" "(" " " "v*s" "[" "            " "\n" "=
 )" "store" " " "env" " " "e1" " " "interp" "(" " " "Value*Store" " " "type-=
 case" "(" "          " "\n" ")" "e2" " " "e1" "(" " " "seqn" "[" "    " "\n=
 " ")])]" "box-store" "                         " "\n" ")" "box-store" "    =
                                    " "\n" ")" "box-value" " " "boxV-locatio=
 n" "(" " " "store-lookup" "(" " " "v*s" "(" "                    " "\n" ")"=
  "box-store" " " "box-value" "(" " " "v*s" "[" "               " "\n" ")" "=
 store" " " "env" " " "box-expr" " " "interp" "(" " " "Value*Store" " " "typ=
 e-case" "(" "             " "\n" ")" "box-expr" "(" " " "openbox" "[" "    =
 " "\n" "))])])]" "value-store" "                                           =
   " "\n" "value-value" "                                             " "\n"=
  ")" "box-value" " " "boxV-location" "(" " " "update-store" "(" "          =
                      " "\n" "value-value" " " "v*s" "(" "                  =
         " "\n" ")" "value-store" " " "value-value" "(" " " "v*s" "[" "     =
                 " "\n" ")" "box-store" " " "env" " " "value-expr" " " "inte=
 rp" "(" " " "Value*Store" " " "type-case" "(" "                   " "\n" ")=
 " "box-store" " " "box-value" "(" " " "v*s" "[" "              " "\n" ")" "=
 store" " " "env" " " "box-expr" " " "interp" "(" " " "Value*Store" " " "typ=
 e-case" "(" "            " "\n" ")" "value-expr" " " "box-expr" "(" " " "se=
 tbox" "[" "    " "\n" ")))])]" "expr-store" " " "expr-value" " " "new-loc" =
 " " "aSto" "(" "                          " "\n" ")" "new-loc" " " "boxV" "=
 (" " " "v*s" "(" "                     " "\n" ")])" "expr-store" " " "next-=
 location" "(" " " "new-loc" " " "define" "([" " " "local" "(" "            =
        " "\n" ")" "expr-store" " " "expr-value" "(" " " "v*s" "[" "        =
       " "\n" ")" "store" " " "env" " " "value-expr" " " "interp" "(" " " "V=
 alue*Store" " " "type-case" "(" "            " "\n" ")" "value-expr" "(" " =
 " "newbox" "[" "    " "\n" "))])]" "test-store" " " "env" " " "falsity" " "=
  "interp" "(" "                    " "\n" ")" "test-store" " " "env" " " "t=
 ruth" " " "interp" "(" "                    " "\n" ")" "test-value" " " "nu=
 m-zero?" "(" " " "if" "(" "                " "\n" ")" "test-store" " " "tes=
 t-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "te=
 st" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n"=
  ")" "falsity" " " "truth" " " "test" "(" " " "if0" "[" "    " "\n" ")])])]=
 " "arg-store" "                               " "\n" "))" "fun-value" " " "=
 closureV-env" "(" "                                     " "\n" "arg-value" =
 "                                     " "\n" ")" "fun-value" " " "closureV-=
 param" "(" " " "aSub" "(" "                               " "\n" ")" "fun-v=
 alue" " " "closureV-body" "(" " " "interp" "(" "                       " "\=
 n" ")" "arg-store" " " "arg-value" "(" " " "v*s" "[" "                  " "=
 \n" ")" "fun-store" " " "env" " " "arg-expr" " " "interp" "(" " " "Value*St=
 ore" " " "type-case" "(" "                " "\n" ")" "fun-store" " " "fun-v=
 alue" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "env" " " "fun-e=
 xpr" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "         " "\n=
 " ")" "arg-expr" " " "fun-expr" "(" " " "app" "[" "    " "\n" ")]" "store" =
 " " ")" "env" " " "bound-body" " " "bound-id" " " "closureV" "(" " " "v*s" =
 "(" "      " "\n" ")" "bound-body" " " "bound-id" "(" " " "fun" "[" "    " =
 "\n" ")]" "store" " " ")" "env" " " "v" " " "env-lookup" "(" " " "v*s" "(" =
 " " ")" "v" "(" " " "id" "[" "    " "\n" ")])])]" "r-store" "              =
               " "\n" ")" "r-value" " " "l-value" " " "num+" "(" " " "v*s" "=
 (" "                       " "\n" ")" "r-store" " " "r-value" "(" " " "v*s"=
  "[" "                  " "\n" ")" "l-store" " " "env" " " "r" " " "interp"=
  "(" " " "Value*Store" " " "type-case" "(" "                " "\n" ")" "l-s=
 tore" " " "l-value" "(" " " "v*s" "[" "           " "\n" ")" "store" " " "e=
 nv" " " "l" " " "interp" "(" " " "Value*Store" " " "type-case" "(" "       =
   " "\n" ")" "r" " " "l" "(" " " "add" "[" "    " "\n" ")]" "store" " " ")"=
  "n" " " "numV" "(" " " "v*s" "(" " " ")" "n" "(" " " "num" "[" "    " "\n"=
  "expr" " " "BCFAE" " " "type-case" "(" "  " "\n" ")" "store" " " "env" " "=
  "expr" " " "interp" " " "make-interp" "(" " " "define" "(" "\n" ";; make-i=
 nterp : BCFAE Env Store -> Value*Store" "\n" "\n" ")))" "n" " " "numV-n" "(=
 " " " "zero?" "(" "  " "\n" ")" "n" " " "num-zero?" "(" " " "define" "(" "\=
 n" ";; num-zero? : numV -> boolean" "\n" "\n" "))))" "n2" " " "numV-n" "(" =
 " " ")" "n1" " " "numV-n" "(" " " "+" "(" " " "numV" "(" "  " "\n" ")" "n2"=
  " " "n1" " " "num+" "(" " " "define" "(" "\n" ";; num+ : numV numV -> numV=
 " "\n" "\n" ")))]))" "rest-store" " " "new-value" " " "loc-index" " " "upda=
 te-store" "(" " " "value" " " "location" " " "aSto" "(" "              " "\=
 n" ")" "rest-store" " " "new-value" " " "location" " " "aSto" "(" "        =
       " "\n" ")" "loc-index" " " "location" " " "=3D" "(" " " "if" "(" "   =
        " "\n" ")" "rest-store" " " "value" " " "location" "(" " " "aSto" "[=
 " "    " "\n" ")]" "\"no such location\"" " " "update-store" "'" " " "error=
 " "(" " " "()" " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case=
 " "(" "  " "\n" ")" "sto" " " "new-value" " " "loc-index" " " "update-store=
 " "(" " " "define" "(" "\n" ";; update-store : number BCFAE-Value Store -> =
 STore" "\n" "\n" ")]))" "location" " " "1" " " "+" "(" " " ")" "rest-store"=
  " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" "]" "0" " " "()"=
  " " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n=
 " ")" "sto" " " "next-location" "(" " " "define" "(" "\n" ";; next-location=
  : Store -> number" "\n" "\n" "))]))" "rest-store" " " "loc-index" " " "sto=
 re-lookup" "(" "              " "\n" "value" "              " "\n" ")" "loc=
 -index" " " "location" " " "=3D" "(" " " "if" "(" "          " "\n" ")" "re=
 st-store" " " "value" " " "location" "(" " " "aSto" "[" "    " "\n" ")]" "\=
 "no value at location\"" " " "store-lookup" "'" " " "error" "(" " " "()" " =
 " "mtSto" "[" "    " "\n" "sto" " " "Store" " " "type-case" "(" "  " "\n" "=
 )" "sto" " " "loc-index" " " "store-lookup" "(" " " "define" "(" "\n" ";; s=
 tore-lookup : number Store -> BCFAE-Value" "\n" "\n" "))]))" "rest-env" " "=
  "name" " " "env-lookup" "(" "              " "\n" "bound-value" "         =
      " "\n" ")" "name" " " "bound-name" " " "symbol=3D?" "(" " " "if" "(" "=
           " "\n" ")" "rest-env" " " "bound-value" " " "bound-name" "(" " " =
 "aSub" "[" "    " "\n" ")]" "name" " " "\"no binding for identifier ~s\"" "=
  " "env-lookup" "'" " " "error" "(" " " "()" " " "mtSub" "[" "    " "\n" "e=
 nv" " " "Env" " " "type-case" "(" "  " "\n" ")" "env" " " "name" " " "env-l=
 ookup" "(" " " "define" "(" "\n" ";; env-lookup : symbol Env -> BCFAE-Value=
 " "\n" "\n" ")))])]))" "sexp" " " "second" "(" " " "parse" "(" " " "))" "se=
 xp" " " "first" "(" " " "parse" "(" " " "app" "(" " " "else" "[" "         =
            " "\n" ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "s=
 exp" " " "second" "(" " " "parse" "(" " " "seqn" "(" " " ")" "seqn" "[(" " =
                    " "\n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " =
 " "openbox" "(" " " ")" "openbox" "[(" "                    " "\n" ")))]" "=
 sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " =
 "parse" "(" " " "setbox" "(" " " ")" "setbox" "[(" "                    " "=
 \n" ")))]" "sexp" " " "second" "(" " " "parse" "(" " " "newbox" "(" " " ")"=
  "newbox" "[(" "                    " "\n" ")))]" "sexp" " " "fourth" "(" "=
  " "parse" "(" "                                " "\n" "))" "sexp" " " "thi=
 rd" "(" " " "parse" "(" "                                " "\n" "))" "sexp"=
  " " "second" "(" " " "parse" "(" " " "if0" "(" " " ")" "if0" "[(" "       =
              " "\n" "))))]" "sexp" " " "second" "(" " " "second" "(" " " "p=
 arse" "(" "                                 " "\n" ")))" "sexp" " " "third"=
  "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" " " "first" "(" " " "=
 fun" "(" " " "app" "(" " " ")" "with" "[(" "                    " "\n" ")))=
 ]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second" "(" =
 " " "first" "(" " " "fun" "(" " " ")" "fun" "[(" "                    " "\n=
 " ")))]" "sexp" " " "third" "(" " " "parse" "(" " " "))" "sexp" " " "second=
 " "(" " " "parse" "(" " " "add" "(" " " ")" "+" "[(" "                    "=
  "\n" ")" "sexp" " " "first" "(" " " "case" "(" " " ")" "sexp" " " "list?" =
 "[(" "    " "\n" ")]" "sexp" " " "id" "(" " " ")" "sexp" " " "symbol?" "[("=
  "    " "\n" ")]" "sexp" " " "num" "(" " " ")" "sexp" " " "number?" "[(" " =
    " "\n" "cond" "(" "  " "\n" ")" "sexp" " " "parse" "(" " " "define" "(" =
 "\n" ";; parse : S-expression -> BCFAE" "\n" "\n" ")])" "Store?" " " "store=
 " "(" " " ")" "BCFAE-Value?" " " "value" "(" " " "v*s" "[" "  " "\n" "Value=
 *Store" " " "define-type" "(" "\n" "\n" ")])" "Store?" " " "store" "(" "   =
      " "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" ")" "number?=
 " " " "location" "(" " " "aSto" "[" "  " "\n" "]" "mtSto" "[" "  " "\n" "St=
 ore" " " "define-type" "(" "\n" "\n" ")])" "Env?" " " "env" "(" "        " =
 "\n" ")" "BCFAE-Value?" " " "value" "(" "        " "\n" ")" "symbol?" " " "=
 name" "(" " " "aSub" "[" "  " "\n" "]" "mtSub" "[" "  " "\n" "Env" " " "def=
 ine-type" "(" "\n" "\n" ")])" "number?" " " "location" "(" " " "boxV" "[" "=
   " "\n" ")]" "Env?" " " "env" "(" " " ")" "BCFAE?" " " "body" "(" " " ")" =
 "symbol?" " " "param" "(" " " "closureV" "[" "  " "\n" ")]" "number?" " " "=
 n" "(" " " "numV" "[" "  " "\n" "BCFAE-Value" " " "define-type" "(" "\n" "\=
 n" ")])" "BCFAE?" " " "e2" "(" " " ")" "BCFAE?" " " "e1" "(" " " "seqn" "["=
  "  " "\n" ")]" "BCFAE?" " " "box-expr" "(" " " "openbox" "[" "  " "\n" ")]=
 " "BCFAE?" " " "value-expr" "(" " " ")" "BCFAE?" " " "box-expr" "(" " " "se=
 tbox" "[" "  " "\n" ")]" "BCFAE?" " " "value-expr" "(" " " "newbox" "[" "  =
 " "\n" ")]" "BCFAE?" " " "falsity" "(" " " ")" "BCFAE?" " " "truth" "(" " "=
  ")" "BCFAE?" " " "test" "(" " " "if0" "[" "  " "\n" ")]" "BCFAE?" " " "arg=
 -expr" "(" " " ")" "BCFAE?" " " "fun-expr" "(" " " "app" "[" "  " "\n" ")]"=
  "BCFAE?" " " "body" "(" " " ")" "symbol?" " " "param" "(" " " "fun" "[" " =
  " "\n" ")]" "symbol?" " " "name" "(" " " "id" "[" "  " "\n" ")]" "BCFAE?" =
 " " "rhs" "(" " " ")" "BCFAE?" " " "lhs" "(" " " "add" "[" "  " "\n" ")]" "=
 number?" " " "n" "(" " " "num" "[" "  " "\n" "BCFAE" " " "define-type" "(")=
  (")" "}" "4" " " "3" " " "+" "{" "'" " " "e" "p" "y" "t" "-" "r" "e" "f" "=
 n" "i" "(") (")" "'3" " " "e" "p" "y" "t" "-" "r" "e" "f" "n" "i" "(") (")"=
  "}}" "4" " " "x" " " "+" "{" " " "}" "x" "{" " " "n" "u" "f" "{" "'" " " "=
 e" "p" "y" "t" "-" "r" "e" "f" "n" "i" "(") (")" "}" "2" " " "1" " " "+" "{=
 " "'" " " "e" "p" "y" "t" "-" "r" "e" "f" "n" "i" "(") (")" "}" "5" " " "}}=
 " "4" " " "x" " " "+" "{" " " "}" "x" "{" " " "n" "u" "f" "{{" "'" " " "e" =
 "p" "y" "t" "-" "r" "e" "f" "n" "i" "(") ("q" "q")))
   (drscheme:check-syntax:imported-identifier (base base (0 0 0) (1.0 1.0 1.=
 0) #f base (68 0 203) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:exit-when-no-frames #t)
   (drscheme:teachpacks ())
   (drscheme:check-syntax:lexically-bound-identifier (base base (0 0 0) (1.0=
  1.0 1.0) #f base (81 112 203) (0.0 0.0 0.0) 0 1.0 base base #f #f base bas=
 e))
   (profj:syntax-coloring:scheme:keyword (base base (0 0 0) (1.0 1.0 1.0) #f=
  base (0 0 0) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (drscheme:unit-window-height 760)
   (profj:syntax-coloring:scheme:literal (base base (0 0 0) (1.0 1.0 1.0) #f=
  base (34 139 34) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:syntax-coloring:scheme:constant (base base (0 0 0) (1.0 1.0 1.=
 0) #f base (0 128 0) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:standard-style-list:font-size 10)
   (framework:special-option-key #f)
   (drscheme:unit-window-width 1145)
   (framework:syntax-coloring:scheme:string (base base (0 0 0) (1.0 1.0 1.0)=
  #f base (0 128 0) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:verify-exit #t)
   (framework:standard-style-list:font-name "Courier New")
   (framework:syntax-coloring:scheme:comment (base base (0 0 0) (1.0 1.0 1.0=
 ) #f base (194 116 31) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (drscheme:unit-window-size-percentage 28051799029463/50056712055805)
   (profj:syntax-coloring:scheme:comment (base base (0 0 0) (1.0 1.0 1.0) #f=
  base (194 116 31) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:standard-style-list:smoothing default)
   (framework:tabify (((with-continuation-mark lambda) (let-enumerate lambda=
 ) (let/cc lambda) (compound-unit/sig begin) (let/ec lambda) (unit/sig lambd=
 a) (delay begin) (letrec-syntaxes+values lambda) (letcc lambda) (case lambd=
 a) (when lambda) (with-handlers lambda) (syntax-case* lambda) (lambda lambd=
 a) (unless lambda) (let-values lambda) (class100* lambda) (match-let* lambd=
 a) (match-lambda* begin) (with lambda) (cond begin) (send* lambda) (do lamb=
 da) (module lambda) (shared lambda) (with-syntax lambda) (public begin) (fu=
 n lambda) (inherit begin) (class* lambda) (type-case lambda) (case-lambda b=
 egin) (with-input-from-file lambda) (mixin lambda) (compound-unit begin) (f=
 luid-let-syntax lambda) (match lambda) (catch lambda) (letrec-values lambda=
 ) (fluid-let lambda) (let-syntax lambda) (opt-lambda lambda) (match-letrec =
 lambda) (with-input-from-port lambda) (sequence begin) (cases lambda) (let =
 lambda) (let-macro lambda) (with-method lambda) (syntax-case lambda) (with-=
 output-to-port lambda) (class100-asi lambda) (class100-asi* lambda) (=CE=BB=
  lambda) (define-record lambda) (letrec-syntax lambda) (local lambda) (synt=
 ax/loc lambda) (kernel-syntax-case lambda) (unit/lang lambda) (class100*/na=
 mes lambda) (unit begin) (override begin) (let*-values lambda) (interface l=
 ambda) (match-lambda begin) (private begin) (recur lambda) (class-asi lambd=
 a) (class lambda) (class-asi* lambda) (quasisyntax/loc lambda) (call-with-i=
 nput-file lambda) (syntax-rules lambda) (call-with-output-file lambda) (par=
 ameterize lambda) (class100 lambda) (seqn begin) (with-output-to-file lambd=
 a) (instantiate lambda) (define-some lambda) (rec lambda) (letrec lambda) (=
 let-struct lambda) (match-let lambda) (call-with-input-file* lambda) (make-=
 object lambda) (let* lambda) (let-signature lambda) (super-instantiate lamb=
 da) (class*/names lambda)) #rx"^begin" #rx"^def" #f))
   (plt:http-proxy #f)
   (profj:syntax-coloring:scheme:error (base base (0 0 0) (1.0 1.0 1.0) #f b=
 ase (255 0 0) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:menu-bindings #t)
   (framework:show-status-line #t)
   (framework:col-offsets #f)
   (drscheme:299.400-settings (("Teaching Languages" "Programming Languages:=
  Application and Interpretation" "PLAI - Pretty Big") #6(#t write mixed-fra=
 ction-e #f #t debug)))
   (framework:syntax-coloring:scheme:error (base base (0 0 0) (1.0 1.0 1.0) =
 #f base (255 0 0) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (drscheme:profile-how-to-count time)
   (profj:syntax-coloring:scheme:default (base base (0 0 0) (1.0 1.0 1.0) #f=
  base (0 0 0) (0.0 0.0 0.0) 0 1.0 base base #f #f base base))
   (framework:display-line-numbers #t)
   (drscheme:help-desk:search-how 1)
   (drscheme:open-in-tabs #t)
   (drscheme:multi-file-search:search-string "")
   (framework:verify-change-format #f)
   (drscheme:multi-file-search:recur? #t)
   (drscheme:299.200-settings (("Teaching Languages" "Programming Languages:=
  Application and Interpretation" "PLAI - Advanced Student") #6(#t construct=
 or mixed-fraction-e #f #t debug)))
   (drscheme:help-desk:search-where 1)
   (drscheme:multi-file-search:search-check-boxes ((#f) ()))
   (framework:default-text-color (255 0 128))
   (framework:fixup-parens #t)
   (drscheme:help-desk:frame-height 688)
   (framework:search-using-dialog? #t)
   (drscheme:help-desk:separate-browser #t)
   (drscheme:execute-warning-once #f)
   (drscheme:test-coverage-ask-about-clearing? #t)
   (framework:fraction-snip-style mixed)
   (framework:recently-opened-files/pos ((#"C:\\Documents and Settings\\Davi=
 d Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\grades.scm" 0 0) (=
 #"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\courses\\cs=
 c501\\fall2005\\hws\\hw09\\submit\\sherida\\hw09.scm" 0 0) (#"C:\\Documents=
  and Settings\\David Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\=
 \hws\\hw09\\submit\\san\\assign-no-9.scm" 0 0) (#"C:\\Documents and Setting=
 s\\David Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw09\\=
 submit\\kristopher\\assignment9.scm" 0 0) (#"C:\\Documents and Settings\\Da=
 vid Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw09\\submi=
 t\\david\\assign9.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My=
  Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw09\\submit\\andrew\\hw9=
 =2Escm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Liv=
 e\\courses\\csc501\\fall2005\\hws\\hw07\\submit\\mayur\\asgn - 7 -- mayur k=
 irtani - csc 501.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My =
 Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw07\\2005-hw07-tests.scm"=
  0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\cour=
 ses\\csc501\\fall2005\\hws\\hw10\\submit\\mayur\\asgn - 10 -- mayur kirtani=
  - csc 501.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Docume=
 nts\\Live\\courses\\csc501\\fall2005\\hws\\hw10\\submit\\sherida\\sjacobhw1=
 0.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live=
 \\courses\\csc501\\fall2005\\hws\\hw10\\submit\\david\\assignment10.scm" 0 =
 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\courses=
 \\csc501\\fall2005\\hws\\hw10\\submit\\san\\assign-no-10.scm" 0 0) (#"C:\\D=
 ocuments and Settings\\David Tucker\\My Documents\\Live\\courses\\csc501\\f=
 all2005\\hws\\hw10\\submit\\andrew\\hw10.scm" 0 0) (#"C:\\Documents and Set=
 tings\\David Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw=
 07\\submit\\sherida\\s_jacobhw7.scm" 0 0) (#"C:\\Documents and Settings\\Da=
 vid Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw07\\submi=
 t\\angel\\6,7,8\\hwasst_7.scm" 0 0) (#"C:\\Documents and Settings\\David Tu=
 cker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw07\\submit\\san=
 \\assign-7.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Docume=
 nts\\Live\\courses\\csc501\\fall2005\\hws\\hw07\\submit\\peter\\hw_7.scm" 0=
  0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\course=
 s\\csc501\\fall2005\\hws\\hw07\\submit\\kristopher\\assignment7.scm" 0 0) (=
 #"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\courses\\cs=
 c501\\fall2005\\hws\\hw07\\submit\\david\\assignment7.scm" 0 0) (#"C:\\Docu=
 ments and Settings\\David Tucker\\My Documents\\Live\\courses\\csc501\\fall=
 2005\\hws\\hw07\\submit\\adam\\adam moss - csc501 - assignment 7.scm" 0 0) =
 (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\courses\\c=
 sc501\\fall2005\\hws\\hw07\\submit\\andrew\\HW7.SCM" 0 0) (#"C:\\Documents =
 and Settings\\David Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\=
 hws\\hw05\\2005-hw05-tests.scm" 0 0) (#"C:\\Documents and Settings\\David T=
 ucker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw05\\submit\\sh=
 erida\\s_jacobhw5.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My=
  Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw05\\submit\\san\\assign=
 -5.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Liv=
 e\\courses\\csc501\\fall2005\\hws\\hw05\\submit\\mayur\\asgn - 5 -- mayur k=
 irtani - csc 501.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My =
 Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw05\\submit\\lewis\\20051=
 115_csc501_collier_assn_5.scm" 0 0) (#"C:\\Documents and Settings\\David Tu=
 cker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw05\\submit\\kri=
 stopher\\assignment5.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\=
 \My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw05\\submit\\angel\\h=
 wasst_5.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents=
 \\Live\\courses\\csc501\\fall2005\\hws\\hw05\\submit\\david\\assignment5.sc=
 m" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\co=
 urses\\csc501\\fall2005\\hws\\hw05\\submit\\adam\\adam moss - csc501 - assi=
 gnment 5.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Document=
 s\\Live\\courses\\csc501\\fall2005\\hws\\hw05\\submit\\andrew\\andrew-flana=
 gan-hw5.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents=
 \\Live\\courses\\csc501\\fall2005\\hws\\hw01\\2005-hw01-tests.scm" 0 0) (#"=
 C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\courses\\csc5=
 01\\fall2005\\hws\\hw01\\2005-hw01-solutions.scm" 0 0) (#"C:\\Documents and=
  Settings\\David Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws=
 \\hw01\\resubmit\\san2\\san.scm" 0 0) (#"C:\\Documents and Settings\\David =
 Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw03\\submit\\s=
 herida\\s_jacobhw3.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\M=
 y Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw03\\submit\\san\\assig=
 n-3.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Li=
 ve\\courses\\csc501\\fall2005\\hws\\hw03\\submit\\peter\\hw_3.scm" 0 0) (#"=
 C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\courses\\csc5=
 01\\fall2005\\hws\\hw03\\submit\\mayur\\asgn - 3 -- mayur kirtani - csc 501=
 =2Escm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Liv=
 e\\courses\\csc501\\fall2005\\hws\\hw03\\submit\\lewis\\20050929_csc501_col=
 lier_assn_3.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Docum=
 ents\\Live\\courses\\csc501\\fall2005\\hws\\hw03\\submit\\kristopher\\assig=
 nment3.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\=
 \Live\\courses\\csc501\\fall2005\\hws\\hw03\\submit\\david\\assignment3.scm=
 " 0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\cou=
 rses\\csc501\\fall2005\\hws\\hw03\\submit\\angel\\temp\\temp\\hwasst_3.scm"=
  0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\cour=
 ses\\csc501\\fall2005\\hws\\hw03\\submit\\andrew\\hw3.scm" 0 0) (#"C:\\Docu=
 ments and Settings\\David Tucker\\My Documents\\Live\\courses\\csc501\\fall=
 2005\\hws\\hw03\\submit\\adam\\adam moss - csc501 - assignment 3.scm" 0 0) =
 (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\courses\\c=
 sc501\\fall2005\\hws\\hw03\\2005-hw03-solutions.scm" 0 0) (#"C:\\Documents =
 and Settings\\David Tucker\\My Documents\\Live\\courses\\csc501\\fall2005\\=
 hws\\hw03\\2005-hw03-tests.scm" 0 0) (#"C:\\Documents and Settings\\David T=
 ucker\\My Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw02\\resubmit\\=
 angel2\\hwasst_2.scm" 0 0) (#"C:\\Documents and Settings\\David Tucker\\My =
 Documents\\Live\\courses\\csc501\\fall2005\\hws\\hw02\\2005-hw02-tests.scm"=
  0 0) (#"C:\\Documents and Settings\\David Tucker\\My Documents\\Live\\cour=
 ses\\csc501\\fall2005\\hws\\hw02\\resubmit\\san2\\assign-2.scm" 0 0) (#"C:\=
 \Documents and Settings\\David Tucker\\My Documents\\Live\\courses\\csc501\=
 \fall2005\\hws\\hw01\\resubmit\\sherida2\\s_jacobhw1rev.scm" 0 0)))
   (framework:file-dialogs std)
   (drscheme:multi-file-search:filter-string "\\.(ss|scm)$")
   (drscheme:profile:high-color (255 150 150))
   (framework:paren-match #t)
   (drscheme:profile:scale sqrt)
   (framework:delete-forward? #t)
   (drscheme:multi-file-search:filter? #t)
   (drscheme:multi-file-search:directory "C:\\")
   (framework:print-output-mode standard)
   (drscheme:help-desk:frame-width 841)
   (framework:recent-max-count 50)
   (framework:backup-files? #t)
   (drscheme:email "dbtucker@cs.uri.edu")
   (drscheme:profile:low-color (150 255 150))
   (framework:paren-match-color (128 128 128))
   (framework:autosaving-on? #t)
   (drscheme:show-interactions-on-execute #t)
   (drscheme:full-name "David B. Tucker")
   (framework:open-here? #f)
   ))
  (|plt:DrScheme-splash-max-width| 227)
 )
 
 --7JfCtLOvnd9MIVvH--
From: Robby Findler <robby@cs.uchicago.edu>
To: "Dave Tucker" <dbtucker@cs.uri.edu>, bugs@plt-scheme.org
Cc: 
Subject: Re: drscheme/7717: drscheme forgets "default text" color preference
Date: Sat, 14 Jan 2006 23:12:06 -0600

 BTW, do you have large expressions or many expressions in your REPL
 history? 
 
 (Can you try with esc-p and see if you think it is a lot, if you don't
 remember?)
 
 Thanks,
 Robby
From: "Dave Tucker" <dbtucker@cs.uri.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/7717: drscheme forgets "default text" color preference
Date: Sun, 15 Jan 2006 15:50:27 -0500

 Yes, I have some very large (> 200 line) expressions in my REPL
 history.
 
 Dave
 
 On Sat, Jan 14, 2006 at 11:12:06PM -0600, Robby Findler wrote:
 > BTW, do you have large expressions or many expressions in your REPL
 > history? 
 > 
 > (Can you try with esc-p and see if you think it is a lot, if you don't
 > remember?)
 > 
 > Thanks,
 > Robby
