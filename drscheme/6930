From matthias@ccs Mon Jul  5 16:17:43 2004
Received: from localhost (gewurtztraminer.ccs.neu.edu [129.10.110.41])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id i65KHb0u020668
	for <bugs>; Mon, 5 Jul 2004 16:17:37 -0400
Message-Id: <200407052017.i65KHb0u020668@champlain.ccs.neu.edu>
Date: Mon, 5 Jul 2004 16:17:37 -0400
From: matthias <matthias@ccs>
To: bugs@plt-scheme.org
Subject: image drawing crashes on windows 

>Number:         6930
>Category:       drscheme
>Synopsis:       image drawing crashes on windows
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Jul 05 16:20:00 -0400 2004
>Last-Modified:  Mon Mar 14 21:40:57 -0500 2005
>Originator:     matthias
>Organization:
titan
>Submitter-Id:   unknown
>Release:        207
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 1" (win32\i386) (get-display-depth) = 32
Docs Installed:
("C:\\Program Files\\PLT\\collects\\doc\\web-server" "C:\\Program Files\\PLT\\collects\\doc\\tour" "C:\\Program Files\\PLT\\collects\\doc\\tools" "C:\\Program Files\\PLT\\collects\\doc\\tex2page" "C:\\Program Files\\PLT\\collects\\doc\\teachpack" "C:\\Program Files\\PLT\\collects\\doc\\t-y-scheme" "C:\\Program Files\\PLT\\collects\\doc\\srfi" "C:\\Program Files\\PLT\\collects\\doc\\r5rs" "C:\\Program Files\\PLT\\collects\\doc\\profj-intermediate" "C:\\Program Files\\PLT\\collects\\doc\\profj-beginner" "C:\\Program Files\\PLT\\collects\\doc\\profj-advanced" "C:\\Program Files\\PLT\\collects\\doc\\plot" "C:\\Program Files\\PLT\\collects\\doc\\mzscheme" "C:\\Program Files\\PLT\\collects\\doc\\mzlib" "C:\\Program Files\\PLT\\collects\\doc\\mzc" "C:\\Program Files\\PLT\\collects\\doc\\mred" "C:\\Program Files\\PLT\\collects\\doc\\misclib" "C:\\Program Files\\PLT\\collects\\doc\\intermediate-lambda" "C:\\Program Files\\PLT\\collects\\doc\\intermediate" "C:\\Program Files\\PLT\\collects\\doc\\insidemz" "C:\\Program Files\\PLT\\collects\\doc\\help" "C:\\Program Files\\PLT\\collects\\doc\\framework" "C:\\Program Files\\PLT\\collects\\doc\\drscheme" "C:\\Program Files\\PLT\\collects\\doc\\beginning-abbr" "C:\\Program Files\\PLT\\collects\\doc\\beginning" "C:\\Program Files\\PLT\\collects\\doc\\advanced")
Collections: 
(("C:\\Documents and Settings\\pclab\\Application Data\\PLT Scheme\\207\\collects" "non-existent path") ("C:\\Program Files\\PLT\\collects" ("afm" "algol60" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "frtime" "games" "graphics" "help" "hierlist" "htdch" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plot" "preprocessor" "profj" "setup" "sgl" "slatex" "slibinit" "slideshow" "srfi" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tex2page" "texpict" "version" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ("C:\\Documents and Settings\\pclab\\Desktop\\DGKay\\image.ss")
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") #6(#t constructor repeating-decimal #f #t none))
>Description:
run this program (on windows xp). it will draw 
for a while and then crash, halfway thru the animation
process. 

(define UFO (offset-image+ (offset-image+ (rectangle 25 25 'white) 
                              0 8
                              (rectangle 25 5 'green)) 5 4 (rectangle 14 12 'green))) 
;; some shape that resembles a green saucer  

;; Number  -->  Number
;; determine the UFO's x coordinate at time t
(define (ufo-x t) 10)

;; Number  -->  Number
;; determine the UFO's y coordinate at time t
(define (ufo-y t) (+ 20 t))

;; Number Scene  -->  Scene
;; place the UFO into s at time t
(define (place-ufo t s) (place-image UFO (ufo-x t) (ufo-y t) s))



;; Tests:
(= (ufo-x (random 100)) 10)
(= (ufo-y 10) 30)
"Show UFO towards center left of scene"
(place-ufo 15 (empty-scene 100 100))

;; To run the program (from notes, section 2.6)
;; consume a world (i.e., a counter), show UFO, increment counter

(define (show t)
  (update (place-ufo t (empty-scene 100 300)) produce (+ t 1)))

(start 100 300)
(big-bang .1 0)
(on-tick-event show)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: matthias <matthias@ccs>, bugs@plt-scheme.org
Cc: Matthew Flatt <mflatt@cs.utah.edu>, Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 5 Jul 2004 16:35:00 -0400

 I can't reproduce this bug on my Mac. Argh.
 
 I am attaching the image.ss teachpack so perhaps one of you guys can 
 tell me what "can't draw into dc" means in this context. My hunch is 
 that this program exhausts some resources and the C-level drawing fails 
 and you are delivering a nice exception. What do we do with this 
 exception in a teaching situation?
 
 -- Matthias
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: matthias <matthias@ccs>, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, Matthew Flatt <mflatt@cs.utah.edu>,
        Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 5 Jul 2004 18:16:29 -0400

 >
 Matthew, never mind the .1 part in this message. Ryan ran it on his 
 Windows box, and it doesn't fail there. Is this a hardware resource 
 problem? -- Matthias
 
 
 > On Mon, 5 Jul 2004, Matthias Felleisen wrote:
 >
 >>
 >> [code deleted]
 >>
 >
 > Works fine on my computer, running DrScheme 207 (not 207.1). Do you 
 > want
 > me to try other versions?
 >
 > Ryan
 >
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: matthias <matthias@cs.utah.edu>, bugs@plt-scheme.org,
        Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 5 Jul 2004 16:47:25 -0700

 At Mon, 5 Jul 2004 16:35:00 -0400, Matthias Felleisen wrote:
 > I am attaching the image.ss teachpack
 
 It didn't make it. (I don't see it attached to the PR, either.)
 
 Can you re-send?
 
 Thanks,
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, matthias <matthias@cs.utah.edu>,
        Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 5 Jul 2004 20:15:18 -0400

 --Apple-Mail-1--903431553
 Content-Transfer-Encoding: 7bit
 Content-Type: application/text;
 	x-mac-type=54455854;
 	x-unix-mode=0644;
 	x-mac-creator=44725363;
 	name="image.ss"
 Content-Disposition: attachment;
 	filename=image.ss
 
 (module image mzscheme
   (require ; (lib "unitsig.ss")
    (lib "etc.ss")
    (lib "class.ss")
    (lib "mred.ss" "mred")
    (lib "error.ss" "htdp")
    (prefix beg: (lib "htdp-beginner.ss" "lang"))
    (lib "prim.ss" "lang"))
   
   (provide update produce)
   
   (provide start big-bang end-of-time)
   (provide-higher-order-primitive on-tick-event (tock))
   (provide-higher-order-primitive on-key-event (tock))
   
   (provide 
    rectangle   ;; Number Number Color -> Image
    circle      ;; Number Color -> Image 
    disk        ;; Number Color -> Image 
    place-image ;; Image Number Number Scence -> Scene
    empty-scene ;; Number Number -> Scene 
    )
   
   (define (rectangle width height color)
     (beg:filled-rect width height color))
   
   (define (circle radius color)
     (beg:outline-circle radius radius color))
   
   (define (disk radius color)
     (beg:filled-circle radius radius color)) 
   
   (define (place-image image x y scene)
     (beg:offset-image+ scene x y image))
   
   (define (empty-scene width height)
     (beg:outline-rect width height 'black))
   
   ;; ---------------------------------------------------------------------------
   
   (define frame #f)
   (define txt (new text%))
   
   ;; Number Number -> true
   ;; create the visible world (canvas)
   (define (start w h)
     (check-arg 'start (and (integer? w) (> w 0)) "positive integer" "first" w)
     (check-arg 'start (and (integer? h) (> h 0)) "positive integer" "second" h)
     (when frame (error 'start "start already called once"))
     (set! frame (new (class frame%
                        (super-new)
                        (rename [super-on-close on-close])
                        (define/override (on-close)        
                          ;; shut down the timer when the window is destroyed
                          (send the-time stop)
                          (super-on-close)))
                      (label "DrScheme")))
     (send 
      (new (class editor-canvas%
             (super-new)
             (define/override (on-char e)
               (on-char-proc (send e get-key-code))))
           (parent frame) 
           (editor txt)
           (style '(no-hscroll no-vscroll))
           ;; this 10 stuff is a hack, for now
           (min-width (+ w 10))
           (min-height (+ h 10)))
      focus)
     (send txt hide-caret #t)
     (send frame show #t)
     #t)
   
   ;; World (type parameter)
   (define the-world0 (cons 1 1))
   [define the-world the-world0]
   
   (define (check-world tag)
     (when (eq? the-world0 the-world) (error tag "evaluate (big-bang Number World) first")))
   
   ;; Number > 0
   [define the-delta 1000]
   
   ;; Number World -> true
   ;; create the world 
   [define (big-bang delta world)
     (check-arg 'big-bang
                (and (number? delta) (>= delta 0))
                "number [of seconds] between 0 and 1000000"
                "first"
                delta)
     (set! the-delta delta) 
     (set! the-world world)
     #t]
   
   ;; --- time events 
   [define the-time (new timer% [notify-callback (lambda () (timer-callback))])]
   
   ;; (World -> World)
   [define timer-callback void]
   
   ;; (World -> World) -> true
   ;; set the click handler 
   [define (on-tick-event f)
     (check-proc 'on-tick-event f 1 "on-tick-event" "one argument")
     (check-world 'on-tick-event)
     (if (eq? timer-callback void)
         (set! timer-callback 
               (lambda ()
                 (set! the-world 
                       (with-handlers ([exn:break? break-handler]
                                       [exn? exn-handler])
                         (f the-world)))))
         (error 'on-tick "the timing action has been set already"))
     (send the-time start
           (let* ([w (ceiling (* 1000 the-delta))])
             (if (exact? w) w (inexact->exact w))))
     #t]
   
   ;; --- key events 
   ;; KeyEvent = (union Symbol Char)
   
   ;; KeyEvent -> Void
   [define on-char-proc void]
   
   ;; (KeyEvent World -> World) -> true
   ;; effect: set on-char-proc so that it deals with keyboard events
   [define (on-key-event f)
     (check-proc 'on-key-event f 2 "on-key-event" "two arguments")
     (check-world 'on-key-event)
     (let ([esp (current-eventspace)])
       (if (eq? on-char-proc void)
           (set! on-char-proc 
                 (lambda (e)
                   (parameterize ([current-eventspace esp])
                     (queue-callback 
                      (lambda ()
                        (set! the-world 
                              (with-handlers ([exn:break? break-handler]
                                              [exn? exn-handler])
                                (f e the-world))))
                      #t))))
           (error 'on-event "the event action has been set already")))]
   
   ;; -> World 
   [define (end-of-time)
     (printf "end of time~n")
     (send the-time stop)
     (set! on-char-proc void)
     (set! timer-callback void)
     the-world]
   
   ;; --- library 
   [define (exn-handler e)
     (send the-time stop)
     (raise e)]
   
   [define (break-handler . _) 
     (printf "animation stopped")
     (send the-time stop)
     the-world]
   
   ;; --- putting images into the canvas
   (define-syntax (produce stx) 
     (raise-syntax-error 'produce "produce must be inside a use of update" stx))
   
   (define-syntax (update s)
     (syntax-case s (produce)
       [(_ pict produce exp) (syntax (begin (update-window pict) exp))]
       [(_ pict pict2 ... produce exp)
        (raise-syntax-error 'update "you can place only one picture in the canvas" s)]
       [(_ stmt produce) 
        (raise-syntax-error 'update "produce must be followed by an expression" s)]
       [(_ stmt produce exp exp2 ...)
        (raise-syntax-error 'update "produce must be followed by exactly one expression" s)]
       [_
        (raise-syntax-error 'update "use as (draw <image> produce <expression>)")]))
   
   (define (update-window pict)
     (unless frame (error 'update "evaluate (start <num> <num>) first"))
     (send txt begin-edit-sequence)
     (send txt lock #f)
     (send txt delete 0 (send txt last-position) #f)
     (send txt insert (send pict copy) 0 0 #f)
     (send txt lock #t)
     (send txt end-edit-sequence)))
 
 
 --Apple-Mail-1--903431553
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=US-ASCII;
 	format=flowed
 
 
 
 On Jul 5, 2004, at 7:47 PM, Matthew Flatt wrote:
 
 > At Mon, 5 Jul 2004 16:35:00 -0400, Matthias Felleisen wrote:
 >> I am attaching the image.ss teachpack
 >
 > It didn't make it. (I don't see it attached to the PR, either.)
 >
 > Can you re-send?
 >
 > Thanks,
 > Matthew
 >
 
 --Apple-Mail-1--903431553--
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 10:17:10 -0700

 At Mon, 5 Jul 2004 16:35:00 -0400, Matthias Felleisen wrote:
 > I can't reproduce this bug on my Mac. Argh.
 > 
 > I am attaching the image.ss teachpack so perhaps one of you guys can 
 > tell me what "can't draw into dc" means in this context. My hunch is 
 > that this program exhausts some resources and the C-level drawing fails 
 > and you are delivering a nice exception. What do we do with this 
 > exception in a teaching situation?
 
 I didn't get the crash, but I'm sure you're right. Running the program
 on my Windows machine created 2000+ "GDI" objects --- and more the
 longer you let it run. Even for big programs, a more reasonable GDI
 count is in the 300s.
 
 The problem is as we discussed before: the GC doesn't know about
 bitmaps, which take 120k each, and so it doesn't collect often enough.
 
 It looks like allocating a "shadow" buffer for each bitmap (roughly the
 size of the bitmap) works pretty well. Since the shadow buffer is
 atomic (it doesn't need to be zeroed) and since it's never touched, the
 pages for the buffer can stay virtual --- so it doesn't consume much
 space on a well-behaved OS. Meanwhile, the buffer's existence triggers
 GCs more often.
 
 (Actually, because the bitmap is released through a finalizer, MrEd
 still has to force a collection. But shadow buffers help MrEd know how
 often to force the collection.)
 
 
 After this change, the program shouldn't crash under Windows, and it
 shouldn't make your Mac behave strangely (e.g., by paging a lot).
 
 I'm still covering all of the platforms and exp versus v299, but I
 should be done soon. Initial tests under Windows show that the GDI
 count stays at around 300, and under Linux my X server doesn't go
 crazy.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 10:26:02 -0700

 The bad news, though, is that running the program spends nearly half
 its time GCing.
 
 To improve performance, an image probably shouldn't be just a bitmap.
 It should be something more like a Slideshow pict (collapsed to a
 single bitmap only when necessary, such as when `image->color-list' is
 called).
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 12:50:15 -0400

 I recalled the GC issue late last night, as I was thinking
 about the thing again. I even recalled that you told me about
 the shadow buffer and sure enough it's on my todo list of
 things to ask. What is this? and who adds it? Me in image.ss
 or you in some lower level?
 
 Also, I implemented the shoot-ufo game or collect falling
 stars in a bucket game with both draw.ss and image.ss.
 With the former the performance is fine. Real time gaming :-)
 With the latter, the reaction to keystrokes is so slow
 that I had to re-direct my entire workshop away from images.
 
 Is this the same performance bottleneck? If not, do you need
 to see the code to figure out what's slow?
 
 -- Matthias
 
 
 On Jul 6, 2004, at 1:17 PM, Matthew Flatt wrote:
 
 > At Mon, 5 Jul 2004 16:35:00 -0400, Matthias Felleisen wrote:
 >> I can't reproduce this bug on my Mac. Argh.
 >>
 >> I am attaching the image.ss teachpack so perhaps one of you guys can
 >> tell me what "can't draw into dc" means in this context. My hunch is
 >> that this program exhausts some resources and the C-level drawing 
 >> fails
 >> and you are delivering a nice exception. What do we do with this
 >> exception in a teaching situation?
 >
 > I didn't get the crash, but I'm sure you're right. Running the program
 > on my Windows machine created 2000+ "GDI" objects --- and more the
 > longer you let it run. Even for big programs, a more reasonable GDI
 > count is in the 300s.
 >
 > The problem is as we discussed before: the GC doesn't know about
 > bitmaps, which take 120k each, and so it doesn't collect often enough.
 >
 > It looks like allocating a "shadow" buffer for each bitmap (roughly the
 > size of the bitmap) works pretty well. Since the shadow buffer is
 > atomic (it doesn't need to be zeroed) and since it's never touched, the
 > pages for the buffer can stay virtual --- so it doesn't consume much
 > space on a well-behaved OS. Meanwhile, the buffer's existence triggers
 > GCs more often.
 >
 > (Actually, because the bitmap is released through a finalizer, MrEd
 > still has to force a collection. But shadow buffers help MrEd know how
 > often to force the collection.)
 >
 >
 > After this change, the program shouldn't crash under Windows, and it
 > shouldn't make your Mac behave strangely (e.g., by paging a lot).
 >
 > I'm still covering all of the platforms and exp versus v299, but I
 > should be done soon. Initial tests under Windows show that the GDI
 > count stays at around 300, and under Linux my X server doesn't go
 > crazy.
 >
 > Matthew
 >
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 12:59:41 -0600

 At Tue, 6 Jul 2004 12:50:15 -0400, Matthias Felleisen wrote:
 > I recalled the GC issue late last night, as I was thinking
 > about the thing again. I even recalled that you told me about
 > the shadow buffer and sure enough it's on my todo list of
 > things to ask. What is this? and who adds it? Me in image.ss
 > or you in some lower level?
 
 I added it at a lower level, so that all MrEd applications benefit.
 
 Here's the issue in pictures. When you create an object that embeds an
 OS-managed object, the heap usually looks like this:
 
  ***** --------------> +++
 
 where "*" is GCable memeory, --> is a pointer, and "+" is memory that
 is explicitly managed. The GC doesn't see the "+" at all. (Well, it
 knows that the pointer points to the "+"s, but nothing about the number
 of "+"s.)
 
 If you allocate a lot of such objects, then the heap looks like
 
  ***** --------------> +++
  ***** --------------> +++
  ***** --------------> +++
  ***** --------------> +++
  ***** --------------> +++
 
 So the application uses more memory than the GC thinks, but it's the
 same order of magnitude.
 
 When you allocate a bitmap, the heap looks like this:
   
  *** --------------> +++++++++++++++++++++++++++++++++++++++
                      +++++++++++++++++++++++++++++++++++++++
                      +++++++++++++++++++++++++++++++++++++++
                      +++++++++++++++++++++++++++++++++++++++
                      +++++++++++++++++++++++++++++++++++++++
                      +++++++++++++++++++++++++++++++++++++++
                      +++++++++++++++++++++++++++++++++++++++
                      +++++++++++++++++++++++++++++++++++++++
                      +++++++++++++++++++++++++++++++++++++++
 
 so the GC's estimate of memory use is off by an order of magnitude. My
 solution is to make bitmap allocation look like
 
  *** --------------> +++++++++++++++++++++++++++++++++++++++
   |                  +++++++++++++++++++++++++++++++++++++++
   |                  +++++++++++++++++++++++++++++++++++++++
   |                  +++++++++++++++++++++++++++++++++++++++
   |                  +++++++++++++++++++++++++++++++++++++++
   |                  +++++++++++++++++++++++++++++++++++++++
   |                  +++++++++++++++++++++++++++++++++++++++
   |                  +++++++++++++++++++++++++++++++++++++++
   |                  +++++++++++++++++++++++++++++++++++++++
    `---------------> ***************************************
                      ***************************************
                      ***************************************
                      ***************************************
                      ***************************************
                      ***************************************
                      ***************************************
                      ***************************************
                      ***************************************
 
 The stars on the right the "shadow" bytes. They are never read or
 written. But they keep the GC's estimate of allocation at the right
 order of magnitude.
 
 > Also, I implemented the shoot-ufo game or collect falling
 > stars in a bucket game with both draw.ss and image.ss.
 > With the former the performance is fine. Real time gaming :-)
 > With the latter, the reaction to keystrokes is so slow
 > that I had to re-direct my entire workshop away from images.
 > 
 > Is this the same performance bottleneck? If not, do you need
 > to see the code to figure out what's slow?
 
 I'm not sure why the falling-stars game would be different than the UFO
 game. Do the stars move more quickly? If not, you may need to send
 code.
 
 Matthew
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Cc: 
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 15:24:56 -0400

 On Jul  6, Matthew Flatt wrote:
 >  I added it at a lower level, so that all MrEd applications benefit.
 >  [...]
 
 Is this the behavior of scheme_malloc_atomic (to not touch the memory
 so it does not actually consumes physical memory)?  If not, then maybe
 it would make sense to add a scheme_malloc_shadow thing?  But it looks
 like a better solution would be to add just a little more stuff to the
 GC so it doesn't collect these things, but it knows about the resource
 consumption?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 13:30:53 -0600

 At Tue, 6 Jul 2004 15:24:56 -0400, Eli Barzilay wrote:
 > Is this the behavior of scheme_malloc_atomic (to not touch the memory
 > so it does not actually consumes physical memory)? 
 
 Yes - scheme_malloc_atomic() already doesn't zero out memory. (I think
 3m can do a little better than it does, and I plan to make some
 change.)
 
 > But it looks like a better solution would be to add just a little
 > more stuff to the GC so it doesn't collect these things, but it knows
 > about the resource consumption?
 
 I started on that, but it doesn't seem worthwhile. It's too much work
 for a corner case.
 
 Matthew
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 17:23:35 -0400

 On Jul  6, Matthew Flatt wrote:
 > Yes - scheme_malloc_atomic() already doesn't zero out memory. (I
 > think 3m can do a little better than it does, and I plan to make
 > some change.)
 
 Is this documented?  Seems like there are lots of issues that should
 be collected into some organized place, maybe extending the "Memory
 Allocation" chapter?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 15:58:48 -0600

 At Tue, 6 Jul 2004 17:23:35 -0400, Eli Barzilay wrote:
 > Is this documented? 
 
 Apparently not -- now fixed.
 
 > Seems like there are lots of issues that should
 > be collected into some organized place, maybe extending the "Memory
 > Allocation" chapter?
 
 What other issues do you have in mind?
 
 Thanks,
 Matthew
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 18:31:28 -0400

 On Jul  6, Matthew Flatt wrote:
 > > Seems like there are lots of issues that should be collected into
 > > some organized place, maybe extending the "Memory Allocation"
 > > chapter?
 > 
 > What other issues do you have in mind?
 
 Well, most things I encountered with interfaces, mainly all the
 delicate things that people should be aware of when making things work
 with the precise collector -- from little things like the fact that
 scheme_malloc is treated as all pointers, to big things like the fact
 that trying to go with the "conservative spirit" and ignore such
 issues will almost always get you catastrophic results.  Then there
 are all the little techniques like using malloc for stuff that foreign
 code (in any for, not just my stuff) expects in a single place, and
 hooking a finalizer to get rid of it.  Probably a more things...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Tue, 6 Jul 2004 22:34:25 -0400

 Great. I will let the teachers know that the next version will be 
 better about resources.
 
 Tomorrow or Th I should have time to dig out and send you the image 
 program that was so slow. The slowness is not in the stars dropping or 
 the shots flying. It's the reactions to the key strokes. The thing at 
 the bottom just won't move fast enough.
 
 -- Matthias
 
 
 On Jul 6, 2004, at 2:59 PM, Matthew Flatt wrote:
 
 > At Tue, 6 Jul 2004 12:50:15 -0400, Matthias Felleisen wrote:
 >> I recalled the GC issue late last night, as I was thinking
 >> about the thing again. I even recalled that you told me about
 >> the shadow buffer and sure enough it's on my todo list of
 >> things to ask. What is this? and who adds it? Me in image.ss
 >> or you in some lower level?
 >
 > I added it at a lower level, so that all MrEd applications benefit.
 >
 > Here's the issue in pictures. When you create an object that embeds an
 > OS-managed object, the heap usually looks like this:
 >
 >  ***** --------------> +++
 >
 > where "*" is GCable memeory, --> is a pointer, and "+" is memory that
 > is explicitly managed. The GC doesn't see the "+" at all. (Well, it
 > knows that the pointer points to the "+"s, but nothing about the number
 > of "+"s.)
 >
 > If you allocate a lot of such objects, then the heap looks like
 >
 >  ***** --------------> +++
 >  ***** --------------> +++
 >  ***** --------------> +++
 >  ***** --------------> +++
 >  ***** --------------> +++
 >
 > So the application uses more memory than the GC thinks, but it's the
 > same order of magnitude.
 >
 > When you allocate a bitmap, the heap looks like this:
 >
 >  *** --------------> +++++++++++++++++++++++++++++++++++++++
 >                      +++++++++++++++++++++++++++++++++++++++
 >                      +++++++++++++++++++++++++++++++++++++++
 >                      +++++++++++++++++++++++++++++++++++++++
 >                      +++++++++++++++++++++++++++++++++++++++
 >                      +++++++++++++++++++++++++++++++++++++++
 >                      +++++++++++++++++++++++++++++++++++++++
 >                      +++++++++++++++++++++++++++++++++++++++
 >                      +++++++++++++++++++++++++++++++++++++++
 >
 > so the GC's estimate of memory use is off by an order of magnitude. My
 > solution is to make bitmap allocation look like
 >
 >  *** --------------> +++++++++++++++++++++++++++++++++++++++
 >   |                  +++++++++++++++++++++++++++++++++++++++
 >   |                  +++++++++++++++++++++++++++++++++++++++
 >   |                  +++++++++++++++++++++++++++++++++++++++
 >   |                  +++++++++++++++++++++++++++++++++++++++
 >   |                  +++++++++++++++++++++++++++++++++++++++
 >   |                  +++++++++++++++++++++++++++++++++++++++
 >   |                  +++++++++++++++++++++++++++++++++++++++
 >   |                  +++++++++++++++++++++++++++++++++++++++
 >    `---------------> ***************************************
 >                      ***************************************
 >                      ***************************************
 >                      ***************************************
 >                      ***************************************
 >                      ***************************************
 >                      ***************************************
 >                      ***************************************
 >                      ***************************************
 >
 > The stars on the right the "shadow" bytes. They are never read or
 > written. But they keep the GC's estimate of allocation at the right
 > order of magnitude.
 >
 >> Also, I implemented the shoot-ufo game or collect falling
 >> stars in a bucket game with both draw.ss and image.ss.
 >> With the former the performance is fine. Real time gaming :-)
 >> With the latter, the reaction to keystrokes is so slow
 >> that I had to re-direct my entire workshop away from images.
 >>
 >> Is this the same performance bottleneck? If not, do you need
 >> to see the code to figure out what's slow?
 >
 > I'm not sure why the falling-stars game would be different than the UFO
 > game. Do the stars move more quickly? If not, you may need to send
 > code.
 >
 > Matthew
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 13:59:34 -0400

 So this sounds like the performance problem for playing games
 with images won't go away for a while. Correct? -- Matthias
 
 
 On Jul 6, 2004, at 1:26 PM, Matthew Flatt wrote:
 
 > The bad news, though, is that running the program spends nearly half
 > its time GCing.
 >
 > To improve performance, an image probably shouldn't be just a bitmap.
 > It should be something more like a Slideshow pict (collapsed to a
 > single bitmap only when necessary, such as when `image->color-list' is
 > called).
 >
 > Matthew
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 13:05:36 -0500

 That doesn't sound beyond the reach of 208. Shall I look into it?
 
 But, if you're animating the picts then most of the intermediate 
 products will be displayed, so the bitmaps will all be created.
 
 Robby
 
 On Jul 14, 2004, at 12:59 PM, Matthias Felleisen wrote:
 
 > So this sounds like the performance problem for playing games
 > with images won't go away for a while. Correct? -- Matthias
 >
 >
 > On Jul 6, 2004, at 1:26 PM, Matthew Flatt wrote:
 >
 >> The bad news, though, is that running the program spends nearly half
 >> its time GCing.
 >>
 >> To improve performance, an image probably shouldn't be just a bitmap.
 >> It should be something more like a Slideshow pict (collapsed to a
 >> single bitmap only when necessary, such as when `image->color-list' is
 >> called).
 >>
 >> Matthew
 >>
 >
 >
 >
 -------
 SII(SII)
 &
 ((lambda (x) (x x)) (lambda (x) (x x)))
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 13:46:36 -0500

 Where is the teachpack?
 
 Robby
 
 At Wed, 14 Jul 2004 13:59:34 -0400, Matthias Felleisen wrote:
 > So this sounds like the performance problem for playing games
 > with images won't go away for a while. Correct? -- Matthias
 > 
 > 
 > On Jul 6, 2004, at 1:26 PM, Matthew Flatt wrote:
 > 
 > > The bad news, though, is that running the program spends nearly half
 > > its time GCing.
 > >
 > > To improve performance, an image probably shouldn't be just a bitmap.
 > > It should be something more like a Slideshow pict (collapsed to a
 > > single bitmap only when necessary, such as when `image->color-list' is
 > > called).
 > >
 > > Matthew
 > >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 15:13:29 -0400

 See email that I sent last night:
 
    http://www.ccs.neu.edu/home/matthias/Tmp/Speed/
 
 On Jul 14, 2004, at 2:46 PM, Robby Findler wrote:
 
 > Where is the teachpack?
 >
 > Robby
 >
 > At Wed, 14 Jul 2004 13:59:34 -0400, Matthias Felleisen wrote:
 >> So this sounds like the performance problem for playing games
 >> with images won't go away for a while. Correct? -- Matthias
 >>
 >>
 >> On Jul 6, 2004, at 1:26 PM, Matthew Flatt wrote:
 >>
 >>> The bad news, though, is that running the program spends nearly half
 >>> its time GCing.
 >>>
 >>> To improve performance, an image probably shouldn't be just a bitmap.
 >>> It should be something more like a Slideshow pict (collapsed to a
 >>> single bitmap only when necessary, such as when `image->color-list' 
 >>> is
 >>> called).
 >>>
 >>> Matthew
 >>>
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 15:13:43 -0400

 If you can, do!
 
 On Jul 14, 2004, at 2:05 PM, Robby Findler wrote:
 
 > That doesn't sound beyond the reach of 208. Shall I look into it?
 >
 > But, if you're animating the picts then most of the intermediate 
 > products will be displayed, so the bitmaps will all be created.
 >
 > Robby
 >
 > On Jul 14, 2004, at 12:59 PM, Matthias Felleisen wrote:
 >
 >> So this sounds like the performance problem for playing games
 >> with images won't go away for a while. Correct? -- Matthias
 >>
 >>
 >> On Jul 6, 2004, at 1:26 PM, Matthew Flatt wrote:
 >>
 >>> The bad news, though, is that running the program spends nearly half
 >>> its time GCing.
 >>>
 >>> To improve performance, an image probably shouldn't be just a bitmap.
 >>> It should be something more like a Slideshow pict (collapsed to a
 >>> single bitmap only when necessary, such as when `image->color-list' 
 >>> is
 >>> called).
 >>>
 >>> Matthew
 >>>
 >>
 >>
 >>
 > -------
 > SII(SII)
 > &
 > ((lambda (x) (x x)) (lambda (x) (x x)))
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 14:17:25 -0500

 Wait -- this is a teachpack that you developed? Not part of the
 distribution?
 
 Robby
 
 At Wed, 14 Jul 2004 15:13:29 -0400, Matthias Felleisen wrote:
 > See email that I sent last night:
 > 
 >    http://www.ccs.neu.edu/home/matthias/Tmp/Speed/
 > 
 > On Jul 14, 2004, at 2:46 PM, Robby Findler wrote:
 > 
 > > Where is the teachpack?
 > >
 > > Robby
 > >
 > > At Wed, 14 Jul 2004 13:59:34 -0400, Matthias Felleisen wrote:
 > >> So this sounds like the performance problem for playing games
 > >> with images won't go away for a while. Correct? -- Matthias
 > >>
 > >>
 > >> On Jul 6, 2004, at 1:26 PM, Matthew Flatt wrote:
 > >>
 > >>> The bad news, though, is that running the program spends nearly half
 > >>> its time GCing.
 > >>>
 > >>> To improve performance, an image probably shouldn't be just a bitmap.
 > >>> It should be something more like a Slideshow pict (collapsed to a
 > >>> single bitmap only when necessary, such as when `image->color-list' 
 > >>> is
 > >>> called).
 > >>>
 > >>> Matthew
 > >>>
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 14:22:59 -0500

 I was wondering where the image primitives are but I just realized that
 they are in the teaching languages implementation.... Got it now.
 
 (Why does http://www.ccs.neu.edu/home/matthias/Tmp/Speed/image.ss
 rename the beginner's functions?)
 
 No test suite, I assume?
 
 Robby
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 16:11:41 -0400

 It will go into the distribution for 208. The goal is to
 provide better names and error messages for Matthew's
 plain primitives. The other goal is to provide callbacks
 for an image-based world. You started the teachpack for
 me. -- Matthias
 
 
 On Jul 14, 2004, at 3:17 PM, Robby Findler wrote:
 
 > Wait -- this is a teachpack that you developed? Not part of the
 > distribution?
 >
 > Robby
 >
 > At Wed, 14 Jul 2004 15:13:29 -0400, Matthias Felleisen wrote:
 >> See email that I sent last night:
 >>
 >>    http://www.ccs.neu.edu/home/matthias/Tmp/Speed/
 >>
 >> On Jul 14, 2004, at 2:46 PM, Robby Findler wrote:
 >>
 >>> Where is the teachpack?
 >>>
 >>> Robby
 >>>
 >>> At Wed, 14 Jul 2004 13:59:34 -0400, Matthias Felleisen wrote:
 >>>> So this sounds like the performance problem for playing games
 >>>> with images won't go away for a while. Correct? -- Matthias
 >>>>
 >>>>
 >>>> On Jul 6, 2004, at 1:26 PM, Matthew Flatt wrote:
 >>>>
 >>>>> The bad news, though, is that running the program spends nearly 
 >>>>> half
 >>>>> its time GCing.
 >>>>>
 >>>>> To improve performance, an image probably shouldn't be just a 
 >>>>> bitmap.
 >>>>> It should be something more like a Slideshow pict (collapsed to a
 >>>>> single bitmap only when necessary, such as when `image->color-list'
 >>>>> is
 >>>>> called).
 >>>>>
 >>>>> Matthew
 >>>>>
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 16:13:38 -0400

 On Jul 14, 2004, at 3:22 PM, Robby Findler wrote:
 
 > I was wondering where the image primitives are but I just realized that
 > they are in the teaching languages implementation.... Got it now.
 >
 > (Why does http://www.ccs.neu.edu/home/matthias/Tmp/Speed/image.ss
 > rename the beginner's functions?)
 
 I think rectangle, frame, disk, circle, place-image
 etc are better names for what we have, and my intention is to add
 error checks (this afternoon still). I have cvs'ed it in htdp, but
 then again perhaps I only moved it there and didn't check it in.
 
 > No test suite, I assume?
 
 Nope, no tests for the image.ss teachpack. I think we did a bad job
 of pair programming there :-)
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 16:40:14 -0500

 On Jul 14, 2004, at 3:13 PM, Matthias Felleisen wrote:
 
 >
 > On Jul 14, 2004, at 3:22 PM, Robby Findler wrote:
 >
 >> I was wondering where the image primitives are but I just realized 
 >> that
 >> they are in the teaching languages implementation.... Got it now.
 >>
 >> (Why does http://www.ccs.neu.edu/home/matthias/Tmp/Speed/image.ss
 >> rename the beginner's functions?)
 >
 > I think rectangle, frame, disk, circle, place-image
 > etc are better names for what we have, and my intention is to add
 > error checks (this afternoon still). I have cvs'ed it in htdp, but
 > then again perhaps I only moved it there and didn't check it in.
 
 Shouldn't those better error messages go into the actual implementation 
 itself!? Renaming the primitives also seems reasonable. I think that 
 maybe they weren't given those names at the beginning to avoid 
 conflicting with draw.ss.
 
 >> No test suite, I assume?
 >
 > Nope, no tests for the image.ss teachpack. I think we did a bad job
 > of pair programming there :-)
 
 Yeah, given we didn't really sit down together, I think we probably 
 shouldn't even be allowed to call it pair programming :)
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 16:41:48 -0500

 On Jul 14, 2004, at 3:13 PM, Matthias Felleisen wrote:
 >> No test suite, I assume?
 >
 > Nope, no tests for the image.ss teachpack. I think we did a bad job
 > of pair programming there :-)
 
 FWIW, I was actually asking about the teaching primitives. They do seem 
 testable -- just have to use the "calculator" to build the expected 
 answers :)
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 15:45:38 -0600

 I very much agree that the image primitives can be re-implemented in a
 short time to perform well with animation. They simply weren't designed
 for that the first time around.
 
 (I still think OpenGL is the right way to think about animation these
 days, but I'm not opposed to starting with a clean version of 1980's
 technology.)
 
 At Wed, 14 Jul 2004 16:13:38 -0400, Matthias Felleisen wrote:
 > I think rectangle, frame, disk, circle, 
 
 I strongly dislike "rectangle" versus "frame" and "circle" versus
 "disk". They're good names for math nerds, but the whole point of these
 primitives is to accommodate everyone else. 
 
 We had the name discussion once before, which is where the current
 names came from. I'm not saying we can't change the names again, only
 that we need to discuss it more before changing.
 
 > But, if you're animating the picts then most of the intermediate 
 > products will be displayed, so the bitmaps will all be created.
 
 Why do you need to build a bitmap just because a composition will be
 displayed? Draw the composition directly to the screen --- that's where
 we gain performance.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 15:47:41 -0600

 At Wed, 14 Jul 2004 16:40:14 -0500, Robby Findler wrote:
 > Shouldn't those better error messages go into the actual implementation 
 > itself!?
 
 I may misunderstand the issue, but I think the problem is that expressions like
 
  (+ 1 <image>)
 
 produce a scary error message.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 16:49:29 -0500

 At Wed, 14 Jul 2004 15:47:41 -0600, Matthew Flatt wrote:
 > At Wed, 14 Jul 2004 16:40:14 -0500, Robby Findler wrote:
 > > Shouldn't those better error messages go into the actual implementation 
 > > itself!?
 > 
 > I may misunderstand the issue, but I think the problem is that expressions like
 > 
 >  (+ 1 <image>)
 > 
 > produce a scary error message.
 
 Matthias seemed to be suggesting adding add'l checking to his teachpack
 prims which, at the moment, are just renamed versions of the teaching
 language prims.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 17:53:06 -0400

 On Jul 14, 2004, at 5:45 PM, Matthew Flatt wrote:
 
 > I very much agree that the image primitives can be re-implemented in a
 > short time to perform well with animation. They simply weren't designed
 > for that the first time around.
 
 Good. 208? You got my stress test ...
 
 > (I still think OpenGL is the right way to think about animation these
 > days, but I'm not opposed to starting with a clean version of 1980's
 > technology.)
 
 Yes, that's the goal. Start with things we totally understand and
 that work in a well-tested manner on all platforms. Honestly, I
 have run one sample program with OpenGL ...
 
 > At Wed, 14 Jul 2004 16:13:38 -0400, Matthias Felleisen wrote:
 >> I think rectangle, frame, disk, circle,
 >
 > I strongly dislike "rectangle" versus "frame" and "circle" versus
 > "disk". They're good names for math nerds, but the whole point of these
 > primitives is to accommodate everyone else.
 >
 > We had the name discussion once before, which is where the current
 > names came from. I'm not saying we can't change the names again, only
 > that we need to discuss it more before changing.
 
 Sorry, I don't recall having this discussion. I do recall that you
 sent out a list of names, they sat on my desk, I failed to respond,
 and we got them. Mea culpa but time's in short supply.
 
 So you have
 
   filled-rect
   outline-rect
   ...
 
 1. Do you really think long names, with dashes, are good?
 I don't believe that part.
 
 2. Do you also think that rectangle, region, frame are not
 as good? I am willing to accept that mostly, but my
 math mind just doesn't see it easily.
 
 Can we come up with alternatives that you think are
 "non nerd" and that I think omit unusual chars?
 
 -- Matthias
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 17:53:26 -0400

 Yes.
 
 On Jul 14, 2004, at 5:47 PM, Matthew Flatt wrote:
 
 > At Wed, 14 Jul 2004 16:40:14 -0500, Robby Findler wrote:
 >> Shouldn't those better error messages go into the actual 
 >> implementation
 >> itself!?
 >
 > I may misunderstand the issue, but I think the problem is that 
 > expressions like
 >
 >  (+ 1 <image>)
 >
 > produce a scary error message.
 >
 > Matthew
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 16:58:01 -0500

 Since we're all here -- I'm working on image.ss; if someone else would 
 rather do it, let me know. Otherwise, I'll just keep doing it 
 (actually, I'm fixing Hsing-Huei's computer at the exact moment. Stupid 
 computers never work right)
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 17:03:11 -0500

 Can this be fixed with the error-value->string-handler?
 
 Robby
 
 At Wed, 14 Jul 2004 17:53:26 -0400, Matthias Felleisen wrote:
 > Yes.
 > 
 > On Jul 14, 2004, at 5:47 PM, Matthew Flatt wrote:
 > 
 > > At Wed, 14 Jul 2004 16:40:14 -0500, Robby Findler wrote:
 > >> Shouldn't those better error messages go into the actual 
 > >> implementation
 > >> itself!?
 > >
 > > I may misunderstand the issue, but I think the problem is that 
 > > expressions like
 > >
 > >  (+ 1 <image>)
 > >
 > > produce a scary error message.
 > >
 > > Matthew
 > >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 18:12:25 -0400

 On Jul 14, 2004, at 5:49 PM, Robby Findler wrote:
 
 > At Wed, 14 Jul 2004 15:47:41 -0600, Matthew Flatt wrote:
 >> At Wed, 14 Jul 2004 16:40:14 -0500, Robby Findler wrote:
 >>> Shouldn't those better error messages go into the actual 
 >>> implementation
 >>> itself!?
 >>
 >> I may misunderstand the issue, but I think the problem is that 
 >> expressions like
 >>
 >>  (+ 1 <image>)
 >>
 >> produce a scary error message.
 >
 > Matthias seemed to be suggesting adding add'l checking to his teachpack
 > prims which, at the moment, are just renamed versions of the teaching
 > language prims.
 
 The above does bad things, and I don't know how to do better w/o 
 touching
 the implementation (which I have).
 
 In addition, we have the problem that the primitives themselves send 
 strange
 error messages:
 
  > (offset-image+ 1 (rectangle 10 20 'red))
 procedure offset-image+: expects 4 arguments, given 2: 1 
 #<struct:image-snip%>
 
 We shouldn't say ... snip ... here. It's "image".
 
 And I have noticed some more. Also the error message have a different 
 format
 from the ones I designed. I forced myself to write an "error module" so 
 that
 I'd have a contract for tps system; otherwise errors were signaled in an
 ad hoc manner.
 
 -- Matthias
 
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 18:13:07 -0400

 Okay, I'll keep my fingers off. Can you check it into collects/htdp? 
 that's where i have my real copy.
 
 -- Matthias
 
 
 On Jul 14, 2004, at 5:58 PM, Robby Findler wrote:
 
 > Since we're all here -- I'm working on image.ss; if someone else would 
 > rather do it, let me know. Otherwise, I'll just keep doing it 
 > (actually, I'm fixing Hsing-Huei's computer at the exact moment. 
 > Stupid computers never work right)
 >
 > Robby
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 17:15:09 -0500

 I'm not touching your teachpack. I'm fixing the implementation in the
 teaching languages, for the performance reasons.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 18:16:53 -0400

 That's what I do and taught last week.
 
 On Jul 14, 2004, at 5:41 PM, Robby Findler wrote:
 
 >
 > On Jul 14, 2004, at 3:13 PM, Matthias Felleisen wrote:
 >>> No test suite, I assume?
 >>
 >> Nope, no tests for the image.ss teachpack. I think we did a bad job
 >> of pair programming there :-)
 >
 > FWIW, I was actually asking about the teaching primitives. They do 
 > seem testable -- just have to use the "calculator" to build the 
 > expected answers :)
 >
 > Robby
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 17:17:59 -0500

 There seem to be two issues:
 
   1) snips should print as "image" (or, better yet, show the image)
 
   2) there should be some consistency in the error messages between
      operators like + and operators like image+.
 
 Right?
 
 If so, the first one should be fixable (for now) with the
 error-value->string-handler. It'll just make: "#<image-snip%>" turn
 into "image" or something similar.
 
 As far as the second one goes, I suspect that all of the teaching
 language primitives have consistent error messages, but perhaps the
 particular choice of how to be consistent isn't one you like (as I
 think you've said before, in a message about how you were waiting for
 Ollie to get older :)?
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 18:20:37 -0400

 Ah, the other image.ss file. Actually there are now at least three of 
 them.
 
 Are you going to touch the names and the error messages?
 
 -- Matthias
 
 
 On Jul 14, 2004, at 6:15 PM, Robby Findler wrote:
 
 > I'm not touching your teachpack. I'm fixing the implementation in the
 > teaching languages, for the performance reasons.
 >
 > Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 17:23:30 -0500

 At Wed, 14 Jul 2004 18:20:37 -0400, Matthias Felleisen wrote:
 > Ah, the other image.ss file. Actually there are now at least three of 
 > them.
 
 Oh, sorry.
 
 > Are you going to touch the names and the error messages?
 
 Probably just the error-value->string-handler (and I may have to do
 that in the tool anyways, since it will depend on (lib "mred.ss"
 "mred")).
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 17:23:58 -0500

 PS: can you remind me where your stress test is?
 
 Thanks,
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 16:27:22 -0600

 At Wed, 14 Jul 2004 16:58:01 -0500, Robby Findler wrote:
 > Since we're all here -- I'm working on image.ss; if someone else would 
 > rather do it, let me know. Otherwise, I'll just keep doing it 
 
 By all means, keep going.
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 18:28:10 -0400

 http://www.ccs.neu.edu/home/matthias/Tmp/Speed/
 
 On Jul 14, 2004, at 6:23 PM, Robby Findler wrote:
 
 > PS: can you remind me where your stress test is?
 >
 > Thanks,
 > Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, shriram@cs.utah.edu,
        bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 16:37:55 -0600

 At Wed, 14 Jul 2004 17:53:06 -0400, Matthias Felleisen wrote:
 > So you have
 > 
 >   filled-rect
 >   outline-rect
 >   ...
 > 
 > 1. Do you really think long names, with dashes, are good?
 > I don't believe that part.
 
 I don't like long names. I do like exposing the symmetry: filled versus
 outline, rect versus circle (er, ellipse).
 
 > 2. Do you also think that rectangle, region, frame are not
 > as good? I am willing to accept that mostly, but my
 > math mind just doesn't see it easily.
 
 Sorry - I don't understand the question.
 
 > Can we come up with alternatives that you think are
 > "non nerd" and that I think omit unusual chars?
 
 I don't know, but let's keep trying...
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 18:07:47 -0500

 At Wed, 14 Jul 2004 15:45:38 -0600, Matthew Flatt wrote:
 > > But, if you're animating the picts then most of the intermediate 
 > > products will be displayed, so the bitmaps will all be created.
 > 
 > Why do you need to build a bitmap just because a composition will be
 > displayed? Draw the composition directly to the screen --- that's where
 > we gain performance.
 
 What contexts are these drawn in? Just the REPL? For the REPL, I don't
 quite follow, but if there is some separate window thing where someone
 can hand a DC to one of the snips, that would work out great.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 19:23:30 -0400

 On Jul 14, 2004, at 7:07 PM, Robby Findler wrote:
 
 > At Wed, 14 Jul 2004 15:45:38 -0600, Matthew Flatt wrote:
 >>> But, if you're animating the picts then most of the intermediate
 >>> products will be displayed, so the bitmaps will all be created.
 >>
 >> Why do you need to build a bitmap just because a composition will be
 >> displayed? Draw the composition directly to the screen --- that's 
 >> where
 >> we gain performance.
 >
 > What contexts are these drawn in? Just the REPL? For the REPL, I don't
 > quite follow, but if there is some separate window thing where someone
 > can hand a DC to one of the snips, that would work out great.
 
 See the image.ss tp for a non-repl app. -- Matthias
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 18:33:29 -0500

 At Wed, 14 Jul 2004 19:23:30 -0400, Matthias Felleisen wrote:
 > See the image.ss tp for a non-repl app. -- Matthias
 
 Oh, right! I remember that :)
 
 The interface will have to change -- to make this efficient the context
 will have to hand-over the dc to the (image) value and tell it "draw
 yourself here". The backup plan (used by the REPL) will be to just
 stick the image (which is still a snip) into an editor. This will force
 the calculation of the bitmap.
 
 Make sense?
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 17:59:30 -0700

 At Wed, 14 Jul 2004 18:33:29 -0500, Robby Findler wrote:
 > The backup plan (used by the REPL) will be to just
 > stick the image (which is still a snip) into an editor. This will force
 > the calculation of the bitmap.
 
 When you say "force the calculation of the bitmap", you don't mean
 allocate a bitmap%, right? (The snip can draw into whatever dc<%> it's
 given.)
 
 I may misunderstand something, but I imagined allocating a bitmap% only
 to save the snip% to a stream, to service `image->color-list', or to
 collapse a relatively large combination (in case someone is using
 image+ in a loop).
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 19:38:16 -0400

 On Jul 14, 2004, at 7:33 PM, Robby Findler wrote:
 
 > At Wed, 14 Jul 2004 19:23:30 -0400, Matthias Felleisen wrote:
 >> See the image.ss tp for a non-repl app. -- Matthias
 >
 > Oh, right! I remember that :)
 >
 > The interface will have to change -- to make this efficient the context
 > will have to hand-over the dc to the (image) value and tell it "draw
 > yourself here". The backup plan (used by the REPL) will be to just
 > stick the image (which is still a snip) into an editor. This will force
 > the calculation of the bitmap.
 >
 > Make sense?
 
 No.
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 18:55:36 -0700

 At Wed, 14 Jul 2004 14:22:59 -0500, Robby Findler wrote:
 > No test suite, I assume?
 
 plt/collects/tests/mzscheme/htdp-image.ss
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 20:00:29 -0500

 Oh right! I don't need to allocate the bitmap in draw. Silly me!
 
 On Jul 14, 2004, at 7:59 PM, Matthew Flatt wrote:
 > I may misunderstand something, but I imagined allocating a bitmap% only
 > to save the snip% to a stream,
 
 I don't think I need to do that -- I can make the "commands" be 
 interpreted, no? (In some cases, I'll have to resort to a bitmap, ie 
 when someone outside does something not in the known set of commands, 
 but that seems rare)
 
 > to service `image->color-list',
 
 yep
 
 > or to
 > collapse a relatively large combination (in case someone is using
 > image+ in a loop).
 
 This one I'm not sure about how to detect, tho. Maybe 100 "layers" of 
 commands or something like that?
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 20:04:41 -0500

 On Jul 14, 2004, at 6:38 PM, Matthias Felleisen wrote:
 
 >
 > On Jul 14, 2004, at 7:33 PM, Robby Findler wrote:
 >
 >> At Wed, 14 Jul 2004 19:23:30 -0400, Matthias Felleisen wrote:
 >>> See the image.ss tp for a non-repl app. -- Matthias
 >>
 >> Oh, right! I remember that :)
 >>
 >> The interface will have to change -- to make this efficient the 
 >> context
 >> will have to hand-over the dc to the (image) value and tell it "draw
 >> yourself here". The backup plan (used by the REPL) will be to just
 >> stick the image (which is still a snip) into an editor. This will 
 >> force
 >> the calculation of the bitmap.
 >>
 >> Make sense?
 >
 > No.
 
 Right now, images are identified with bitmaps. This is wasteful for 
 things like (image+ (outline-rect 10 10 'red) (outline-rect 10 10 
 'red)). There only needs to be (at most) one bitmap for that -- but now 
 there are three. The new implementation will not keep bitmaps for 
 intermediate snips instead it will keep a tree of the operations used 
 to build the image (roughly, think of image+ as the interior nodes and 
 rectangle & friends as the leaf nodes). Occasionally, an operation will 
 require building a bitmap so the bitmap can be built, but we can 
 minimize those operations.
 
 Does that make more sense?
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 20:06:43 -0500

 PS: you can think of the tree as an ast for a language, with an
 interpreter. The real representation will be the closure conversion
 (aka inlining?) of the interpreter to the particular tree. Ie, image+
 will (roughtly) be compose.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 19:07:24 -0700

 At Wed, 14 Jul 2004 20:00:29 -0500, Robby Findler wrote:
 > > or to
 > > collapse a relatively large combination (in case someone is using
 > > image+ in a loop).
 > 
 > This one I'm not sure about how to detect, tho. Maybe 100 "layers" of 
 > commands or something like that?
 
 That's what I was thinking, though I agree that it's not obviously
 good.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 20:08:24 -0500

 At Wed, 14 Jul 2004 19:07:24 -0700, Matthew Flatt wrote:
 > > This one I'm not sure about how to detect, tho. Maybe 100 "layers" of 
 > > commands or something like that?
 > 
 > That's what I was thinking, though I agree that it's not obviously
 > good.
 
 Seems like a reasonable start.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 19:09:53 -0700

 At Wed, 14 Jul 2004 20:00:29 -0500, Robby Findler wrote:
 > On Jul 14, 2004, at 7:59 PM, Matthew Flatt wrote:
 > > I may misunderstand something, but I imagined allocating a bitmap% only
 > > to save the snip% to a stream,
 > 
 > I don't think I need to do that -- I can make the "commands" be 
 > interpreted, no?
 
 I think the semantics of an image should be pixels. Since circles and
 lines vary slightly across platforms (or even video drivers in
 Windows), it seems safer to save bitmaps.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 20:12:21 -0500

 At Wed, 14 Jul 2004 19:09:53 -0700, Matthew Flatt wrote:
 > At Wed, 14 Jul 2004 20:00:29 -0500, Robby Findler wrote:
 > > On Jul 14, 2004, at 7:59 PM, Matthew Flatt wrote:
 > > > I may misunderstand something, but I imagined allocating a bitmap% only
 > > > to save the snip% to a stream,
 > > 
 > > I don't think I need to do that -- I can make the "commands" be 
 > > interpreted, no?
 > 
 > I think the semantics of an image should be pixels. Since circles and
 > lines vary slightly across platforms (or even video drivers in
 > Windows), it seems safer to save bitmaps.
 
 Ah. Okay.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 20:27:51 -0500

 Interesting fact (that slowed me down somewhat :) -- if .zos are not
 compiled and up to date for the lang collection when running drscheme,
 the image library breaks. Here's what happens: the eval-handler for the
 teaching languages annotates the code by inserting code that does the
 profiling. That is, the inserted code looks up the value of a
 particular parameter, gets a hash-table from it and bangs on the
 hash-table. This all works great, as long as the code is running the
 user's parameterization. As soon as the code runs in the drscheme
 parameterization (ie, when a draw callback happens for a snip in the
 REPL) the parameter isn't set properly and the code just breaks.
 
 jfyi.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 21:26:30 -0400

 Is this a problem for which we should ask an algorithmisit? -- Matthias
 
 
 On Jul 14, 2004, at 9:08 PM, Robby Findler wrote:
 
 > At Wed, 14 Jul 2004 19:07:24 -0700, Matthew Flatt wrote:
 >>> This one I'm not sure about how to detect, tho. Maybe 100 "layers" of
 >>> commands or something like that?
 >>
 >> That's what I was thinking, though I agree that it's not obviously
 >> good.
 >
 > Seems like a reasonable start.
 >
 > Robby
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 21:24:27 -0400

 On Jul 14, 2004, at 9:04 PM, Robby Findler wrote:
 
 >
 > On Jul 14, 2004, at 6:38 PM, Matthias Felleisen wrote:
 >
 >>
 >> On Jul 14, 2004, at 7:33 PM, Robby Findler wrote:
 >>
 >>> At Wed, 14 Jul 2004 19:23:30 -0400, Matthias Felleisen wrote:
 >>>> See the image.ss tp for a non-repl app. -- Matthias
 >>>
 >>> Oh, right! I remember that :)
 >>>
 >>> The interface will have to change -- to make this efficient the 
 >>> context
 >>> will have to hand-over the dc to the (image) value and tell it "draw
 >>> yourself here". The backup plan (used by the REPL) will be to just
 >>> stick the image (which is still a snip) into an editor. This will 
 >>> force
 >>> the calculation of the bitmap.
 >>>
 >>> Make sense?
 >>
 >> No.
 >
 > Right now, images are identified with bitmaps. This is wasteful for 
 > things like (image+ (outline-rect 10 10 'red) (outline-rect 10 10 
 > 'red)). There only needs to be (at most) one bitmap for that -- but 
 > now there are three. The new implementation will not keep bitmaps for 
 > intermediate snips instead it will keep a tree of the operations used 
 > to build the image (roughly, think of image+ as the interior nodes and 
 > rectangle & friends as the leaf nodes). Occasionally, an operation 
 > will require building a bitmap so the bitmap can be built, but we can 
 > minimize those operations.
 >
 > Does that make more sense?
 
 This makes complete sense and always did.
 
 I don't understand why I need to see a change in interface at my level.
 
 -- Matthias
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 20:49:47 -0500

 At Wed, 14 Jul 2004 21:24:27 -0400, Matthias Felleisen wrote:
 > 
 > On Jul 14, 2004, at 9:04 PM, Robby Findler wrote:
 > 
 > >
 > > On Jul 14, 2004, at 6:38 PM, Matthias Felleisen wrote:
 > >
 > >>
 > >> On Jul 14, 2004, at 7:33 PM, Robby Findler wrote:
 > >>
 > >>> At Wed, 14 Jul 2004 19:23:30 -0400, Matthias Felleisen wrote:
 > >>>> See the image.ss tp for a non-repl app. -- Matthias
 > >>>
 > >>> Oh, right! I remember that :)
 > >>>
 > >>> The interface will have to change -- to make this efficient the 
 > >>> context
 > >>> will have to hand-over the dc to the (image) value and tell it "draw
 > >>> yourself here". The backup plan (used by the REPL) will be to just
 > >>> stick the image (which is still a snip) into an editor. This will 
 > >>> force
 > >>> the calculation of the bitmap.
 > >>>
 > >>> Make sense?
 > >>
 > >> No.
 > >
 > > Right now, images are identified with bitmaps. This is wasteful for 
 > > things like (image+ (outline-rect 10 10 'red) (outline-rect 10 10 
 > > 'red)). There only needs to be (at most) one bitmap for that -- but 
 > > now there are three. The new implementation will not keep bitmaps for 
 > > intermediate snips instead it will keep a tree of the operations used 
 > > to build the image (roughly, think of image+ as the interior nodes and 
 > > rectangle & friends as the leaf nodes). Occasionally, an operation 
 > > will require building a bitmap so the bitmap can be built, but we can 
 > > minimize those operations.
 > >
 > > Does that make more sense?
 > 
 > This makes complete sense and always did.
 > 
 > I don't understand why I need to see a change in interface at my level.
 
 I was wrong about that. You can still deal with snips. (In the terms
 above, you already are handing over the dc, rather than getting a
 bitmap).
 
 Sorry for the confusion.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 21:49:52 -0400

 Why is this something that depends on whether the code is compiled
 or not? This sounds dangerous. -- Matthias
 
 
 On Jul 14, 2004, at 9:27 PM, Robby Findler wrote:
 
 > Interesting fact (that slowed me down somewhat :) -- if .zos are not
 > compiled and up to date for the lang collection when running drscheme,
 > the image library breaks. Here's what happens: the eval-handler for the
 > teaching languages annotates the code by inserting code that does the
 > profiling. That is, the inserted code looks up the value of a
 > particular parameter, gets a hash-table from it and bangs on the
 > hash-table. This all works great, as long as the code is running the
 > user's parameterization. As soon as the code runs in the drscheme
 > parameterization (ie, when a draw callback happens for a snip in the
 > REPL) the parameter isn't set properly and the code just breaks.
 >
 > jfyi.
 >
 > Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 20:50:49 -0500

 I've never met one, it turns out. All we have here are complexity
 theory guys and they would have no clue.
 
 I think we'd need to talk to a profiler at a minimum. Maybe sufficient.
 
 Robby
 
 At Wed, 14 Jul 2004 21:26:30 -0400, Matthias Felleisen wrote:
 > Is this a problem for which we should ask an algorithmisit? -- Matthias
 > 
 > 
 > On Jul 14, 2004, at 9:08 PM, Robby Findler wrote:
 > 
 > > At Wed, 14 Jul 2004 19:07:24 -0700, Matthew Flatt wrote:
 > >>> This one I'm not sure about how to detect, tho. Maybe 100 "layers" of
 > >>> commands or something like that?
 > >>
 > >> That's what I was thinking, though I agree that it's not obviously
 > >> good.
 > >
 > > Seems like a reasonable start.
 > >
 > > Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 21:00:49 -0500

 At Wed, 14 Jul 2004 21:49:52 -0400, Matthias Felleisen wrote:
 > Why is this something that depends on whether the code is compiled
 > or not? This sounds dangerous. -- Matthias
 
 Compiled code isn't annotated by the handler. It's a common convention
 for such tools (errortrace, profiling, calltrace, etc).
 
 As far as the danger, I agree in principle, but given how well
 ingrained this convention is, it's not that dangerous in practice (in
 fact, without this convention, I'd be in for some suffering, since I
 need that code to run on drscheme's thread -- setting up the right
 environment on drscheme's thread seems painful. The other choice would
 be to have the inserted code (the bits that expect the environment to
 be set up) to be more forgiving, which would be slower).
 
 One positive thought on the current setup: Matthew recently changed a
 little bit how CM and other mz-level things worked to allow the
 compiled subdirectory to contain .zo files that already have various
 annotations in them. This fits our convention well -- you don't want to
 add the annotations twice. Of course, this means that there are two
 bits of state that have to be in sync (the state that tells CM where to
 look for compiled files and the state that installs the transformation
 itself in the eval-handler). There's no checking here, and its hard to
 imagine a contract at the mz-level that could make sure things were
 sync'd up. At a min, I think it would require making some of the
 handlers we currently use more specialized somehow (the contract really
 isn't expressible right now, at least not that I see).
 
 Currently, we only do this for errortrace (and only in 299), but this
 has made debugging drscheme far less painful (it used to be a 10
 minute/500 meg memory affair to restart drscheme with debugging
 information. No longer. Now it is only slightly longer than starting up
 regular drscheme. It's great!).
 
 One big caveat here -- in order to write out the compiled .zos there
 can be no 3d code (of course) but most of the transformations insert 3d
 code (for performance reasons). Errortrace had to be changed to not do
 this.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 21:53:57 -0400

 I didn't know about this test suite, so when I added "text" and "line" 
 to image.ss in lang and private, I didn't use it and I didn't modify 
 it. Sorry -- Matthias
 
 
 On Jul 14, 2004, at 9:55 PM, Matthew Flatt wrote:
 
 > At Wed, 14 Jul 2004 14:22:59 -0500, Robby Findler wrote:
 >> No test suite, I assume?
 >
 > plt/collects/tests/mzscheme/htdp-image.ss
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 22:13:40 -0400

 Ah, it's not that compiled code behaves differently, we "load" it 
 differently. Is this convention documented somewhere? -- Matthias
 
 On Jul 14, 2004, at 10:00 PM, Robby Findler wrote:
 
 > At Wed, 14 Jul 2004 21:49:52 -0400, Matthias Felleisen wrote:
 >> Why is this something that depends on whether the code is compiled
 >> or not? This sounds dangerous. -- Matthias
 >
 > Compiled code isn't annotated by the handler. It's a common convention
 > for such tools (errortrace, profiling, calltrace, etc).
 >
 > As far as the danger, I agree in principle, but given how well
 > ingrained this convention is, it's not that dangerous in practice (in
 > fact, without this convention, I'd be in for some suffering, since I
 > need that code to run on drscheme's thread -- setting up the right
 > environment on drscheme's thread seems painful. The other choice would
 > be to have the inserted code (the bits that expect the environment to
 > be set up) to be more forgiving, which would be slower).
 >
 > One positive thought on the current setup: Matthew recently changed a
 > little bit how CM and other mz-level things worked to allow the
 > compiled subdirectory to contain .zo files that already have various
 > annotations in them. This fits our convention well -- you don't want to
 > add the annotations twice. Of course, this means that there are two
 > bits of state that have to be in sync (the state that tells CM where to
 > look for compiled files and the state that installs the transformation
 > itself in the eval-handler). There's no checking here, and its hard to
 > imagine a contract at the mz-level that could make sure things were
 > sync'd up. At a min, I think it would require making some of the
 > handlers we currently use more specialized somehow (the contract really
 > isn't expressible right now, at least not that I see).
 >
 > Currently, we only do this for errortrace (and only in 299), but this
 > has made debugging drscheme far less painful (it used to be a 10
 > minute/500 meg memory affair to restart drscheme with debugging
 > information. No longer. Now it is only slightly longer than starting up
 > regular drscheme. It's great!).
 >
 > One big caveat here -- in order to write out the compiled .zos there
 > can be no 3d code (of course) but most of the transformations insert 3d
 > code (for performance reasons). Errortrace had to be changed to not do
 > this.
 >
 > Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Wed, 14 Jul 2004 21:59:09 -0500

 On Jul 14, 2004, at 9:13 PM, Matthias Felleisen wrote:
 
 > Ah, it's not that compiled code behaves differently, we "load" it 
 > differently. Is this convention documented somewhere? -- Matthias
 
 Possibly in the various places that set the eval handler. DrScheme 
 doesn't document this aspect of itself, but errortrace might.
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 08:13:15 -0500

 Here's a problem with image+ and friends.
 
 At the moment, image+ uses the white pixels in the image as a mask. For
 example, in the current system, this:
 
 (image+ (filled-rect 100 100 'black)
         (line 100 100 'red))
 
 is what you'd expect: a black box with a red line running thru it.
 This, on the other hand:
 
 (image+ (filled-rect 100 100 'black)
         (line 100 100 'white))
 
 is just a solid black box.
 
 This probably will be mostly "fixed". That is, when the second
 expression above is evaluated, you'll get a black box with a line in
 it.
 
 Here's the real problem, tho. The calculator breaks down. Imagine this
 sequence of actions:
 
  1) the user evaluates (filled-rect 100 100 'black) in the repl
  2) the user evaluates (line 100 100 'white) in the repl
  3) the user copies the two resulting bitmaps up into the definitions
     window and surrounds them with a call to image+.
 
 Now we have something like this:
 
   (image+ <black rect> <white blob>)
 
 of course, this is to produce a black rect, essentially ignoring the
 white line. They might do this as part of building a test suite, say.
 
 Should we ignore this, for now?
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 08:17:38 -0500

 Oh, crap. It's worse than I thought. Since a bitmap can get stuck into
 the middle of an image+ composition, I don't know how to automatically
 find the mask without actually building a bitmap.
 
 In other words, I don't see to avoid building a bitmap for each image+.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:32:39 -0400

 Can we have a distinct subtype that you recognize but students don't?
 
 -- Matthias
 
 On Jul 15, 2004, at 9:17 AM, Robby Findler wrote:
 
 > Oh, crap. It's worse than I thought. Since a bitmap can get stuck into
 > the middle of an image+ composition, I don't know how to automatically
 > find the mask without actually building a bitmap.
 >
 > In other words, I don't see to avoid building a bitmap for each image+.
 >
 > Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 07:33:02 -0700

 At Thu, 15 Jul 2004 08:13:15 -0500, Robby Findler wrote:
 >         (line 100 100 'white))
 
 Any image drawn with 'white is a no-op when showing the image. (The
 snip should always draw onto a white background.)
 
 > Here's the real problem, tho. The calculator breaks down. Imagine this
 > sequence of actions:
 > 
 >  1) the user evaluates (filled-rect 100 100 'black) in the repl
 >  2) the user evaluates (line 100 100 'white) in the repl
 >  3) the user copies the two resulting bitmaps up into the definitions
 >     window and surrounds them with a call to image+.
 > 
 > Now we have something like this:
 > 
 >   (image+ <black rect> <white blob>)
 > 
 > of course, this is to produce a black rect, essentially ignoring the
 > white line. They might do this as part of building a test suite, say.
 
 I don't understand the problem. What's wrong with getting a black
 rectangle?
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Robby Findler <robby@cs.uchicago.edu>,
        shriram@cs.utah.edu
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:35:31 -0400

 On Jul 14, 2004, at 6:37 PM, Matthew Flatt wrote:
 
 > At Wed, 14 Jul 2004 17:53:06 -0400, Matthias Felleisen wrote:
 >> Can we come up with alternatives that you think are
 >> "non nerd" and that I think omit unusual chars?
 >
 > I don't know, but let's keep trying...
 
 rectangle : Number Number Color Mode -> Image
 circle : Number Number Color Mode -> Image
 
   where Mode = { 'solid, 'outline }
 
 so
   (rectangle 10 10 'blue 'solid) = (filled-rect 10 10 'blue)
   (rectangle 10 10 'blue 'outline) = (outline-rect 10 10 'blue)
 
 Want to ask your teachers? -- Matthias
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 08:40:30 -0500

 On Jul 15, 2004, at 8:32 AM, Matthias Felleisen wrote:
 
 > Can we have a distinct subtype that you recognize but students don't?
 
 Actually, shortly after sending the email I realized what I can do to 
 stop the "pollution" -- I just build a mask bitmap for each bitmap that 
 shows up as an argument to image+ and that's sufficient.
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 08:39:38 -0500

 On Jul 15, 2004, at 9:33 AM, Matthew Flatt wrote:
 > I don't understand the problem. What's wrong with getting a black
 > rectangle?
 
 It is counter-intuitive, but as you point out, it can be made 
 consistent.
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 07:52:30 -0600

 At Thu, 15 Jul 2004 08:40:30 -0500, Robby Findler wrote:
 > Actually, shortly after sending the email I realized what I can do to 
 > stop the "pollution" -- I just build a mask bitmap for each bitmap that 
 > shows up as an argument to image+ and that's sufficient.
 
 I don't get it. Can you explain again why you need a mask bitmap,
 instead of just not drawing anything for 'white shapes?
 
 (I understand why you'd have to construct bitmaps for
 `masked-image+', but not `image+'.)
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, Robby Findler <robby@cs.uchicago.edu>,
        shriram@cs.utah.edu
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 07:53:55 -0600

 At Thu, 15 Jul 2004 09:35:31 -0400, Matthias Felleisen wrote:
 > 
 > On Jul 14, 2004, at 6:37 PM, Matthew Flatt wrote:
 > 
 > > At Wed, 14 Jul 2004 17:53:06 -0400, Matthias Felleisen wrote:
 > >> Can we come up with alternatives that you think are
 > >> "non nerd" and that I think omit unusual chars?
 > >
 > > I don't know, but let's keep trying...
 > 
 > rectangle : Number Number Color Mode -> Image
 > circle : Number Number Color Mode -> Image
 > 
 >   where Mode = { 'solid, 'outline }
 > 
 > so
 >   (rectangle 10 10 'blue 'solid) = (filled-rect 10 10 'blue)
 >   (rectangle 10 10 'blue 'outline) = (outline-rect 10 10 'blue)
 
 Ok. Maybe `circle' should be `ellipse', though.
 
 How do we deal with the collision between these names and and exercises
 6.6.x?
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:23:29 -0500

 At Thu, 15 Jul 2004 07:52:30 -0600, Matthew Flatt wrote:
 > At Thu, 15 Jul 2004 08:40:30 -0500, Robby Findler wrote:
 > > Actually, shortly after sending the email I realized what I can do to 
 > > stop the "pollution" -- I just build a mask bitmap for each bitmap that 
 > > shows up as an argument to image+ and that's sufficient.
 > 
 > I don't get it. Can you explain again why you need a mask bitmap,
 > instead of just not drawing anything for 'white shapes?
 > 
 > (I understand why you'd have to construct bitmaps for
 > `masked-image+', but not `image+'.)
 
 image+ always uses masks now (the second image is the mask).
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 08:41:15 -0700

 At Thu, 15 Jul 2004 09:23:29 -0500, Robby Findler wrote:
 > At Thu, 15 Jul 2004 07:52:30 -0600, Matthew Flatt wrote:
 > > At Thu, 15 Jul 2004 08:40:30 -0500, Robby Findler wrote:
 > > > Actually, shortly after sending the email I realized what I can do to 
 > > > stop the "pollution" -- I just build a mask bitmap for each bitmap that 
 > > > shows up as an argument to image+ and that's sufficient.
 > > 
 > > I don't get it. Can you explain again why you need a mask bitmap,
 > > instead of just not drawing anything for 'white shapes?
 > > 
 > > (I understand why you'd have to construct bitmaps for
 > > `masked-image+', but not `image+'.)
 > 
 > image+ always uses masks now (the second image is the mask).
 
 Ok, but if the image is implemented by draw-line, draw-rectangle, etc.,
 then the pixels that are drawn = the pixels of the mask (except when
 drawing with white).
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:45:55 -0500

 At Thu, 15 Jul 2004 08:41:15 -0700, Matthew Flatt wrote:
 > > image+ always uses masks now (the second image is the mask).
 > 
 > Ok, but if the image is implemented by draw-line, draw-rectangle, etc.,
 > then the pixels that are drawn = the pixels of the mask (except when
 > drawing with white).
 
 Right. The problem I had before (but I don't have anymore....) is that
 I didn't see how to avoid building an bitmap for every intermediate
 image once there was a single bitmap in there. The fix is to just built
 the mask directly with the one bitmap and then things work out fine.
 The code is even very clean and simple. image+ becomes (roughly) coerce
 any bitmap arguments to my new image-snip class (constructing a mask at
 that time) and then compose the functions associated with them,
 building a new instance of image-snip class.
 
 Sorry for the confusion.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:50:37 -0500

 I remain unconvinced that these:
 
   (line 100 100 'white)
   (solid-rect 100 100 'white)
   (outline-rect 100 100 'white)
   (filled-circle 100 100 'white)
   (outline-circle 100 100 'white)
 
 three should all produce the same thing (ie, a blank image of size
 100x100).
 
 I think that I should be able to use masks internally to get the
 unsurprising semantics (ie, the one where a white circle on a black
 solid rectangle actually makes the white circle show up).
 
 For foreign images (ie, those that are copied and pasted from outside
 of drscheme) I'm willing to equate white with transparent, but
 everywhere else I should be able to do better.
 
 What do you think?
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 11:04:00 -0400

 On Jul 15, 2004, at 10:50 AM, Robby Findler wrote:
 
 > I remain unconvinced that these:
 >
 >   (line 100 100 'white)
 >   (solid-rect 100 100 'white)
 >   (outline-rect 100 100 'white)
 >   (filled-circle 100 100 'white)
 >   (outline-circle 100 100 'white)
 >
 > three should all produce the same thing (ie, a blank image of size
 > 100x100).
 >
 > I think that I should be able to use masks internally to get the
 > unsurprising semantics (ie, the one where a white circle on a black
 > solid rectangle actually makes the white circle show up).
 >
 > For foreign images (ie, those that are copied and pasted from outside
 > of drscheme) I'm willing to equate white with transparent, but
 > everywhere else I should be able to do better.
 >
 > What do you think?
 
 I agree. I really dislike the treatment of white as transparent.
 Are these two different concepts?
 
 -- Matthias
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:06:01 -0700

 At Thu, 15 Jul 2004 09:50:37 -0500, Robby Findler wrote:
 > I remain unconvinced that these:
 > 
 >   (line 100 100 'white)
 >   (solid-rect 100 100 'white)
 >   (outline-rect 100 100 'white)
 >   (filled-circle 100 100 'white)
 >   (outline-circle 100 100 'white)
 > 
 > three should all produce the same thing (ie, a blank image of size
 > 100x100).
 > 
 > I think that I should be able to use masks internally to get the
 > unsurprising semantics (ie, the one where a white circle on a black
 > solid rectangle actually makes the white circle show up).
 > 
 > For foreign images (ie, those that are copied and pasted from outside
 > of drscheme) I'm willing to equate white with transparent, but
 > everywhere else I should be able to do better.
 > 
 > What do you think?
 
 Then semantics of an image is pixels + mask. That's fine with me.
 
 For cut-and-paste or loading a file, the image operations can use a
 mask bitmap associated with the image, if any (e.g., because it was
 loaded from a GIF or PNG file), and add a mask otherwise.
 
 If someone wants to manipulate the mask in addition to the pixels,
 should we have some like `image->color-list' for the mask half of an
 image?
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:13:25 -0700

 At Thu, 15 Jul 2004 11:04:00 -0400, Matthias Felleisen wrote:
 > I really dislike the treatment of white as transparent.
 
 I went this direction based on experience with cut-and-pasted bitmaps.
 People naturally interpret white as background in that context; they
 get confused when white pixels get copied (overwriting something else),
 and explicit masks confuse them more.
 
 Robby's compromise probably solves the problem. But I worry that you
 can't ignore masks when explaining the semantics of images.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:13:57 -0500

 At Thu, 15 Jul 2004 09:06:01 -0700, Matthew Flatt wrote:
 > Then semantics of an image is pixels + mask. That's fine with me.
 
 Yes.
 
 > If someone wants to manipulate the mask in addition to the pixels,
 > should we have some like `image->color-list' for the mask half of an
 > image?
 
 For a real toolkit, definitely. It's easy to add here, too. I'm not
 sure it'll see much use, but who knows? People used the viewport
 library way more than I expected.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:16:47 -0500

 At Thu, 15 Jul 2004 09:13:25 -0700, Matthew Flatt wrote:
 > Robby's compromise probably solves the problem. But I worry that you
 > can't ignore masks when explaining the semantics of images.
 
 While that's probably true in general, I'd claim it was worse before,
 due to things like this:
 
   (image+ (filled-rect 100 100 'black)
           (filled-rect 20 20 'white))
 
 producing a solid black square.
 
 In practice (just like now) I suspect that most students and teachers
 will be able to play around with it to get what they want.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:17:59 -0500

 The basic masks are obvious, with the exception of text. What should
 it's mask be? The whole rectangle, or just the text? Should the special
 case of a white background be different?
 
 I'm leaning towards making it always the whole square (that best
 matches what happens now).
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:20:53 -0500

 Man, if getting 1980s tech is this bad, just wait until we try late
 90s! (maybe we shouldn't even try for another 20 years :)
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:21:38 -0700

 At Thu, 15 Jul 2004 10:17:59 -0500, Robby Findler wrote:
 > The basic masks are obvious, with the exception of text. What should
 > it's mask be? The whole rectangle, or just the text? Should the special
 > case of a white background be different?
 > 
 > I'm leaning towards making it always the whole square (that best
 > matches what happens now).
 
 I think you want both.
 
 If we use something like 'solid and 'outline for `rectangle' and
 `circle', maybe was can find words seem right for the text command,
 too. (I thinking that 'solid symbol seems fine for text, but 'outline
 isn't right for backgroundless text.)
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 11:22:45 -0400

 Is it possible that we're making a mistake and getting
 the 90's technology going would help us leap-frog over
 these problems? (I doubt it.) -- Matthias
 
 
 On Jul 15, 2004, at 11:20 AM, Robby Findler wrote:
 
 > Man, if getting 1980s tech is this bad, just wait until we try late
 > 90s! (maybe we shouldn't even try for another 20 years :)
 >
 > Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:27:30 -0500

 I'm skeptical. The reason that we can even solve (as close as we've
 come, anyways) these problems is that the right tools for the 80s tech
 are pervasive. I don't think that the 3d stuff has quite the same
 penetration yet. Matthew would know better, tho.
 
 Robby
 
 At Thu, 15 Jul 2004 11:22:45 -0400, Matthias Felleisen wrote:
 > Is it possible that we're making a mistake and getting
 > the 90's technology going would help us leap-frog over
 > these problems? (I doubt it.) -- Matthias
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:29:35 -0500

 At Thu, 15 Jul 2004 09:21:38 -0700, Matthew Flatt wrote:
 > If we use something like 'solid and 'outline for `rectangle' and
 > `circle', maybe was can find words seem right for the text command,
 > too. (I thinking that 'solid symbol seems fine for text, but 'outline
 > isn't right for backgroundless text.)
 
 Okay. I'll start by just making the solid background one for now.
 
 I'm not sure it works as well, tho, since you really want anti-aliasing
 and that doesn't survive the transition to a bitmap.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:31:35 -0500

 Today's minor victory :)
 
   http://people.cs.uchicago.edu/~robby/tmp/circle.jpg
 
 (new on left, old on right)
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 11:38:35 -0400

 Now go on winning more :-)
 
 On Jul 15, 2004, at 11:31 AM, Robby Findler wrote:
 
 > Today's minor victory :)
 >
 >   http://people.cs.uchicago.edu/~robby/tmp/circle.jpg
 >
 > (new on left, old on right)
 >
 > Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:39:53 -0700

 At Thu, 15 Jul 2004 10:29:35 -0500, Robby Findler wrote:
 > I'm not sure it works as well, tho, since you really want anti-aliasing
 > and that doesn't survive the transition to a bitmap.
 
 For backgroundless text, you mean?
 
 It works fine if you draw text as anti-aliased black into the mask, and
 then draw a solid rectangle for the image.
 
 Of course, when someone uses `image->color-list' on a backgroundless
 text image, they won't understand the result until they understand
 masks....
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:47:38 -0500

 At Thu, 15 Jul 2004 09:39:53 -0700, Matthew Flatt wrote:
 > It works fine if you draw text as anti-aliased black into the mask, and
 > then draw a solid rectangle for the image.
 > 
 > Of course, when someone uses `image->color-list' on a backgroundless
 > text image, they won't understand the result until they understand
 > masks....
 
 Oh... that is weird. I didn't know that!
 
 Perhaps we can mitigate this somewhat by calling solid backgrounded
 text "text" and calling the other "anti-alias-text" or something
 equally discouraging, and then explaining some of this in the docs?
 
 This also messed up my plan for the implementation of the software. I'm
 no longer sure if it is possible to use the regular drawing proc to
 construct the bitmap, since it seems like the drawing proc wouldn't do
 that (or, would I use regions somehow?)
 
 Can I call? I just tried your office, but no one was in.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:50:30 -0700

 At Thu, 15 Jul 2004 10:47:38 -0500, Robby Findler wrote:
 > Perhaps we can mitigate this somewhat by calling solid backgrounded
 > text "text" and calling the other "anti-alias-text" or something
 > equally discouraging, and then explaining some of this in the docs?
 
 I think people usually want backgroundless (anti-aliased) text when
 they're drawing on top of something else, so I'd prefer not to
 discourage people from using it.
 
 > Can I call? I just tried your office, but no one was in.
 
 I'm not close to a phone (in lab for the workshop).
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:56:56 -0500

 On Jul 15, 2004, at 11:50 AM, Matthew Flatt wrote:
 >> Can I call? I just tried your office, but no one was in.
 >
 > I'm not close to a phone (in lab for the workshop).
 
 Is it possible to use the same proc (parameterized over a dc) for both 
 constructing a bitmap and drawing into the editor's DC? From your 
 description, it sounds like that's not going to work, since I'd use 
 draw-text to draw into the editor's dc, but draw-rectangle to draw into 
 the bitmap. Or, am I misunderstanding something?
 
 Thanks,
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 09:58:33 -0700

 At Thu, 15 Jul 2004 10:47:38 -0500, Robby Findler wrote:
 > Perhaps we can mitigate this somewhat by calling solid backgrounded
 > text "text" and calling the other "anti-alias-text" or something
 > equally discouraging, and then explaining some of this in the docs?
 
 Actually, maybe people usually want backgroundless text, but
 anti-aliasing doesn't matter. So maybe the plain `text' function would
 disable anti-aliasing to produce a simple image and mask.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 10:01:53 -0700

 At Thu, 15 Jul 2004 10:56:56 -0500, Robby Findler wrote:
 > Is it possible to use the same proc (parameterized over a dc) for both 
 > constructing a bitmap and drawing into the editor's DC? From your 
 > description, it sounds like that's not going to work, since I'd use 
 > draw-text to draw into the editor's dc, but draw-rectangle to draw into 
 > the bitmap. Or, am I misunderstanding something?
 
 I think you want different a method to create a bitmap+mask combination
 than to draw into a DC (where the mask doesn't need to be accumulated).
 
 In particular, don't tie yourself to a 1-bit mask, if that's what you
 had in mind.
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 12:45:09 -0400

 Please go with backgroundless text. Explaining masks is beyond 101.
 
 On Jul 15, 2004, at 12:58 PM, Matthew Flatt wrote:
 
 > At Thu, 15 Jul 2004 10:47:38 -0500, Robby Findler wrote:
 >> Perhaps we can mitigate this somewhat by calling solid backgrounded
 >> text "text" and calling the other "anti-alias-text" or something
 >> equally discouraging, and then explaining some of this in the docs?
 >
 > Actually, maybe people usually want backgroundless text, but
 > anti-aliasing doesn't matter. So maybe the plain `text' function would
 > disable anti-aliasing to produce a simple image and mask.
 >
 > Matthew
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 12:04:23 -0500

 "background-less text" means that `text' wipes out the background?
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 12:05:32 -0500

 On Jul 15, 2004, at 12:01 PM, Matthew Flatt wrote:
 
 > At Thu, 15 Jul 2004 10:56:56 -0500, Robby Findler wrote:
 >> Is it possible to use the same proc (parameterized over a dc) for both
 >> constructing a bitmap and drawing into the editor's DC? From your
 >> description, it sounds like that's not going to work, since I'd use
 >> draw-text to draw into the editor's dc, but draw-rectangle to draw 
 >> into
 >> the bitmap. Or, am I misunderstanding something?
 >
 > I think you want different a method to create a bitmap+mask combination
 > than to draw into a DC (where the mask doesn't need to be accumulated).
 >
 > In particular, don't tie yourself to a 1-bit mask, if that's what you
 > had in mind.
 
 I'm starting to think that I don't understand something. Just to test 
 me, can you tell me how to create the bitmap+mask combination for the 
 `line' primitive?
 
 Thanks,
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 11:06:44 -0700

 At Thu, 15 Jul 2004 12:04:23 -0500, Robby Findler wrote:
 > "background-less text" means that `text' wipes out the background?
 
 I meant the opposite. In MrEd terms (awkward as they are), I think
 "transparent" text is the common case, and "solid" text is unusual.
 
 Non-anti-aliased transparent text is simple --- the mask is a black
 version of the image --- so I think that's what we want.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 11:10:43 -0700

 At Thu, 15 Jul 2004 12:05:32 -0500, Robby Findler wrote:
 > I'm starting to think that I don't understand something. Just to test 
 > me, can you tell me how to create the bitmap+mask combination for the 
 > `line' primitive?
 
 Something like this:
 
   (define (draw-to-bitmap+mask bitmap-dc mask-dc)
     ... set color in bitmap to line's color ...
     (send bitmap-dc draw-line x1 y1 x2 y2)
     ... set color in mask to black ...
     (send mask-dc draw-line x1 y1 x2 y2))
 
 Meanwhile, it's just
 
   (define (draw-direct dc)
     ... set color in dc to line's color ...
     (send bitmap-dc draw-line x1 y1 x2 y2))
 
 to draw directly to the screen.
 
 
 The anti-aliased text case would be something like this:
 
   (define (draw-direct dc)
     ... set color in dc to text's color ...
     (send bitmap-dc draw-text str x y))
 
   (define (draw-to-bitmap+mask bitmap-dc mask-dc)
     ... set color in bitmap to text's color ...
     (send bitmap-dc draw-rectangle x y w h)
     ... set color in mask to black ...
     (send mask-dc draw-text str x y))
 
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 12:14:18 -0500

 At Thu, 15 Jul 2004 11:06:44 -0700, Matthew Flatt wrote:
 > At Thu, 15 Jul 2004 12:04:23 -0500, Robby Findler wrote:
 > > "background-less text" means that `text' wipes out the background?
 > 
 > I meant the opposite. In MrEd terms (awkward as they are), I think
 > "transparent" text is the common case, and "solid" text is unusual.
 > 
 > Non-anti-aliased transparent text is simple --- the mask is a black
 > version of the image --- so I think that's what we want.
 
 That isn't what's currently done, however.
 
 So we're up to 3 different ways to draw text:
 
   1) with a solid background (ie, wipes out what is there). Currently
      the only option.
 
   2) What Matthew suggests above -- one might call this a poor man's
      anti-aliasing.
 
   3) true anti-aliasing.
 
 How do we want to present these three to the users of the teaching
 languages? Both of you seem to suggest that 2) should be the usual way
 (even tho Matthias implemented 1) when he added text in, I think).
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 11:15:48 -0700

 At Thu, 15 Jul 2004 12:14:18 -0500, Robby Findler wrote:
 > How do we want to present these three to the users of the teaching
 > languages?
 
 I think that 1 and 2 should be analogous to outline versus solid for
 rectangles (i.e., probably a mode symbol), and 3 should be a different
 function.
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 13:20:52 -0400

 On Jul 15, 2004, at 1:14 PM, Robby Findler wrote:
 
 > At Thu, 15 Jul 2004 11:06:44 -0700, Matthew Flatt wrote:
 >> At Thu, 15 Jul 2004 12:04:23 -0500, Robby Findler wrote:
 >>> "background-less text" means that `text' wipes out the background?
 >>
 >> I meant the opposite. In MrEd terms (awkward as they are), I think
 >> "transparent" text is the common case, and "solid" text is unusual.
 >>
 >> Non-anti-aliased transparent text is simple --- the mask is a black
 >> version of the image --- so I think that's what we want.
 >
 > That isn't what's currently done, however.
 >
 > So we're up to 3 different ways to draw text:
 >
 >   1) with a solid background (ie, wipes out what is there). Currently
 >      the only option.
 >
 >   2) What Matthew suggests above -- one might call this a poor man's
 >      anti-aliasing.
 >
 >   3) true anti-aliasing.
 >
 > How do we want to present these three to the users of the teaching
 > languages? Both of you seem to suggest that 2) should be the usual way
 > (even tho Matthias implemented 1) when he added text in, I think).
 
 Ignore what I did for now. I did what I did because something looked
 wrong when I went the other way, but I forgot what it was. I suspect
 I was too lazy (too rushed) to choose a smaller font. -- Matthias
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 13:21:06 -0400

 That sounds good to me. -- Matthias
 
 On Jul 15, 2004, at 2:15 PM, Matthew Flatt wrote:
 
 > At Thu, 15 Jul 2004 12:14:18 -0500, Robby Findler wrote:
 >> How do we want to present these three to the users of the teaching
 >> languages?
 >
 > I think that 1 and 2 should be analogous to outline versus solid for
 > rectangles (i.e., probably a mode symbol), and 3 should be a different
 > function.
 >
 > Matthew
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 13:46:34 -0500

 I was reading around on the web about alpha channels and, from what I
 can tell, the alpha channel is supposed to have one 8-bit value per
 pixel. But, our mask bitmaps are either 1 bit per pixel or something
 more (32 bits per pixel maybe)?
 
 Also, with the exception of someone inserting a png image into
 DrScheme, would there be any way to get a mask bitmap that had actual
 color pixels (ie, from what I can tell, the masks will effectively be
 black and white)
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 14:43:24 -0500

 Anyone want to go for polygons?
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 16:20:54 -0400

 I'd skip them. Triangles are the only thing you might want to add, if 
 easy. -- Matthias
 
 
 On Jul 15, 2004, at 3:43 PM, Robby Findler wrote:
 
 > Anyone want to go for polygons?
 >
 > Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 14:22:40 -0700

 At Thu, 15 Jul 2004 13:46:34 -0500, Robby Findler wrote:
 > I was reading around on the web about alpha channels and, from what I
 > can tell, the alpha channel is supposed to have one 8-bit value per
 > pixel. But, our mask bitmaps are either 1 bit per pixel or something
 > more (32 bits per pixel maybe)?
 
 Our masks are even more general than inverse alpha channels, although
 support for the generalization varies.
 
 At best, each channel (red, green, or blue) of a mask pixel provides
 and inverse alpha for the corresponding channel in the main image.
 
 Depending on the OS or device driver, the three alphas are averaged to
 get a single alpha value that is used for all channels. Some devices
 don't even support a single alpha, though, in which case anything other
 than white counts as black.
 
 > Also, with the exception of someone inserting a png image into
 > DrScheme, would there be any way to get a mask bitmap that had actual
 > color pixels (ie, from what I can tell, the masks will effectively be
 > black and white)
 
 Even PNG supports only monochrome alphas. MrEd doesn't support any file
 or clipboard format with color masks (or multiple alpha channels), if
 any such format exists.
 
 Except the image-snip% format --- someone could create a image-snip%
 with color mask and paste that into DrScheme, but that's it.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 16:58:50 -0500

 At Thu, 15 Jul 2004 11:10:43 -0700, Matthew Flatt wrote:
 > The anti-aliased text case would be something like this:
 > 
 >   (define (draw-direct dc)
 >     ... set color in dc to text's color ...
 >     (send bitmap-dc draw-text str x y))
 > 
 >   (define (draw-to-bitmap+mask bitmap-dc mask-dc)
 >     ... set color in bitmap to text's color ...
 >     (send bitmap-dc draw-rectangle x y w h)
 >     ... set color in mask to black ...
 >     (send mask-dc draw-text str x y))
 
 This doesn't seem to be exactly the same, at least under macos x. Is
 this fixable?
 
 Below is code that could be turned into a test case, I think.
 
 Robby
 
 (define black (send the-color-database find-color "black"))
 (define red (send the-color-database find-color "red"))
 
 (define mask-bm (make-object bitmap% 100 100))
 (define bm (make-object bitmap% 100 100))
 (define bdc (make-object bitmap-dc% mask-bm))
 (define str "XXXXXXXXX")
 (define-values (tw th ta td) (send bdc get-text-extent str))
 
 (send bdc set-bitmap bm)
 (send bdc clear)
 (send bdc set-pen (send the-pen-list find-or-create-pen red 1 'transparent))
 (send bdc set-brush (send the-brush-list find-or-create-brush red 'solid))
 (send bdc draw-rectangle 0 0 tw th)
 
 (send bdc set-bitmap mask-bm)
 (send bdc clear)
 (send bdc set-text-mode 'solid)
 (send bdc set-text-foreground black)
 (send bdc draw-text str 0 0)
 
 (send bdc set-bitmap #f)
 
 (define (paint dc)
   (send dc set-pen (send the-pen-list find-or-create-pen "black" 1 'transparent))
   (send dc set-brush (send the-brush-list find-or-create-brush "black" 'solid))
   (send dc draw-ellipse 0 0 100 100)
   (send dc set-brush (send the-brush-list find-or-create-brush "white" 'solid))
   (send dc draw-ellipse 10 10 80 80)
   (send dc set-brush (send the-brush-list find-or-create-brush "black" 'solid))
   (send dc draw-ellipse 20 20 60 60)
   (send dc set-brush (send the-brush-list find-or-create-brush "white" 'solid))
   (send dc draw-ellipse 30 30 40 40)
   (send dc set-brush (send the-brush-list find-or-create-brush "black" 'solid))
   (send dc draw-ellipse 40 40 20 20)
   (send dc draw-bitmap bm 30 30 'solid black mask-bm)
   (send dc set-text-mode 'transparent)
   (send dc set-text-foreground red)
   (send dc draw-text str 30 50))
 
 (define f (new frame% (label "") (width 200) (height 200)))
 (define c (new canvas%
                (parent f)
                (paint-callback (lambda (c dc) (paint dc)))))
 (send f show #t)
 
Responsible changed from "nobody" to "robby" by robby at Thu, 15 Jul 2004 18:07:28 -0400
Reason>>> I'm working on part of it, for now.

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 17:06:29 -0500

 I made the difference clearer with the program below and stuck a
 screenshot to show what I see at:
 
   http://people.cs.uchicago.edu/~robby/tmp/black-xs.jpg
 
 Basically, the Xs on top are thinner than the ones on the bottom.
 
 Robby
 
 (define black (send the-color-database find-color "black"))
 (define red (send the-color-database find-color "red"))
 
 (define mask-bm (make-object bitmap% 100 100))
 (define bm (make-object bitmap% 100 100))
 (define bdc (make-object bitmap-dc% mask-bm))
 (define str "XXXXXXXXX")
 (define-values (tw th ta td) (send bdc get-text-extent str))
 
 (send bdc set-bitmap bm)
 (send bdc clear)
 (send bdc set-pen (send the-pen-list find-or-create-pen red 1 'transparent))
 (send bdc set-brush (send the-brush-list find-or-create-brush red 'solid))
 (send bdc draw-rectangle 0 0 tw th)
 
 (send bdc set-bitmap mask-bm)
 (send bdc clear)
 (send bdc set-text-mode 'solid)
 (send bdc set-text-foreground black)
 (send bdc draw-text str 0 0)
 
 (send bdc set-bitmap #f)
 
 (define (paint dc)
   (send dc set-pen (send the-pen-list find-or-create-pen "black" 1 'transparent))
   (send dc set-brush (send the-brush-list find-or-create-brush "black" 'solid))
   (send dc draw-rectangle 0 0 200 100)
   (send dc draw-bitmap bm 30 30 'solid black mask-bm)
   (send dc set-text-mode 'transparent)
   (send dc set-text-foreground red)
   (send dc draw-text str 30 50))
 
 (define f (new frame% (label "") (width 200) (height 200)))
 (define c (new canvas%
                (parent f)
                (paint-callback (lambda (c dc) (paint dc)))))
 (send f show #t)
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 17:09:54 -0500

 How would you do triangles, if not via polygons? Perhaps equilateral
 trangles only?
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 16:10:41 -0700

 At Thu, 15 Jul 2004 16:58:50 -0500, Robby Findler wrote:
 > At Thu, 15 Jul 2004 11:10:43 -0700, Matthew Flatt wrote:
 > > The anti-aliased text case would be something like this:
 > > 
 > >   (define (draw-direct dc)
 > >     ... set color in dc to text's color ...
 > >     (send bitmap-dc draw-text str x y))
 > > 
 > >   (define (draw-to-bitmap+mask bitmap-dc mask-dc)
 > >     ... set color in bitmap to text's color ...
 > >     (send bitmap-dc draw-rectangle x y w h)
 > >     ... set color in mask to black ...
 > >     (send mask-dc draw-text str x y))
 
 Notice that my code contains `draw-rectangle', not `draw-text' for
 `bitmap-dc' in `draw-to-bitmap+mask'. That part wasn't a typo.
 
 >   (send dc set-text-foreground red)
 >   (send dc draw-text str 30 50))
 
 At this point, you want to paint a rectangle instead of drawing text.
 
 The reason you see fainter text is that you're weakening the text edges
 twice: once when painting red to the main bitmap, and once when
 painting black in the mask.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 16:13:10 -0700

 Nevermind my previous message -- I just realized that I misread the
 code, and I'll take another look.
 
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 17:15:18 -0500

 At Thu, 15 Jul 2004 16:10:41 -0700, Matthew Flatt wrote:
 > At Thu, 15 Jul 2004 16:58:50 -0500, Robby Findler wrote:
 > > At Thu, 15 Jul 2004 11:10:43 -0700, Matthew Flatt wrote:
 > > > The anti-aliased text case would be something like this:
 > > > 
 > > >   (define (draw-direct dc)
 > > >     ... set color in dc to text's color ...
 > > >     (send bitmap-dc draw-text str x y))
 > > > 
 > > >   (define (draw-to-bitmap+mask bitmap-dc mask-dc)
 > > >     ... set color in bitmap to text's color ...
 > > >     (send bitmap-dc draw-rectangle x y w h)
 > > >     ... set color in mask to black ...
 > > >     (send mask-dc draw-text str x y))
 > 
 > Notice that my code contains `draw-rectangle', not `draw-text' for
 > `bitmap-dc' in `draw-to-bitmap+mask'. That part wasn't a typo.
 
 Ouch!
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 17:25:05 -0500

 At Thu, 15 Jul 2004 14:22:40 -0700, Matthew Flatt wrote:
 > Our masks are even more general than inverse alpha channels, although
 > support for the generalization varies.
 > 
 > At best, each channel (red, green, or blue) of a mask pixel provides
 > and inverse alpha for the corresponding channel in the main image.
 
 As I'm looking over offset-masked-image+, I'm wondering two things:
 
   1) do we _really_ need it anymore?
 
   2) how does it work? :)
 
 My best guess for that second question is that I need to merge the
 original mask and the mask image and mask's mask into a single mask for
 the new image. So, if it were called like this:
 
   (offset-masked-image+ a 0 0 b)
 
 then I could iterate over the points (and rgb channels) and build a new
 mask like this:
 
   a_mask <- (a_mask / 255) * (b_mask / 255) * b_main
 
 and just leave the old image as it was.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 16:35:07 -0700

 At Thu, 15 Jul 2004 17:25:05 -0500, Robby Findler wrote:
 > As I'm looking over offset-masked-image+, I'm wondering two things:
 > 
 >   1) do we _really_ need it anymore?
 
 No - I think it should go.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 17:51:43 -0500

 Well, on the image->color-list front, how's this for a proposal: return
 the pixels as they would be drawn on the screen (ie, "flatten" the mask
 out). This means that image->color-list and color-list->image won't
 truly be inverses because the mask will come out blank, but I think
 that it will work better for some of the things people will want to do
 with the color list (such as implementing `find'). Image
 transformations are the place where it wouldn't be optimal, but in
 order for those to be optimal, the students would have to transform the
 masks anyways which, I think, probably is asking too much.
 
 Thoughts?
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 17:51:47 -0500

 At Thu, 15 Jul 2004 16:35:07 -0700, Matthew Flatt wrote:
 > At Thu, 15 Jul 2004 17:25:05 -0500, Robby Findler wrote:
 > > As I'm looking over offset-masked-image+, I'm wondering two things:
 > > 
 > >   1) do we _really_ need it anymore?
 > 
 > No - I think it should go.
 
 Whew!
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 18:23:11 -0500

 The test suite seems to assume that (send the-color-list find-color
 "blue") corresponds to the color (make-color 0 0 255) but it doesn't,
 even before I got my hands on it. 
 
 Is it safe to assume that the implemented behavior is right? (ie, blue
 is (make-color 80 80 248)?)
 
 Thanks,
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 18:25:41 -0500

 Do either of you know of any uses (outside of the teaching languages
 implementations) for image-snip->dc+bitmap or image-snip->bitmap? There
 is a comment suggesting that teachpacks might use it, but there don't
 seem to be any such teachpacks in the plt tree. 
 
 Uses of those functions will probably have to change, depending on what
 they do.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 18:29:43 -0500

 Actually, I'm finding more problems with the test suite, I think. Just
 to check I'm not missing something silly, this:
 
 (image=? (color-list->image (list red red red blue) 2 2)
          (offset-image+ (filled-rect 2 2 'red)
                         1 1
                         (filled-rect 1 2 'blue)))
 
 doesn't seem like it could ever be #t, since the images won't be the
 same size. I'm guessing the intention was to make the last 2 into a 1?
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 20:30:13 -0500

 I've just checked in and exp-tagged a version of this stuff. I still
 have more to do (run the stress test of Matthias's and beef of the test
 suite some more) but things are mostly in place now.
 
 Matthew, can you run the test suite under windows or linux? I'm curious
 to know if the triangle implementation (using dc's draw-polygon) is
 platform-specific. I just spent far too long staring at pixels for
 small sized triangles and after I'd done that, I realized it may have
 been an entirely wasted effort... Anyways, the tests all pass under
 macosx...
 
 Thanks,
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 23:00:31 -0400

 Plot?
 
 On Jul 15, 2004, at 7:25 PM, Robby Findler wrote:
 
 > Do either of you know of any uses (outside of the teaching languages
 > implementations) for image-snip->dc+bitmap or image-snip->bitmap? There
 > is a comment suggesting that teachpacks might use it, but there don't
 > seem to be any such teachpacks in the plt tree.
 >
 > Uses of those functions will probably have to change, depending on what
 > they do.
 >
 > Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Thu, 15 Jul 2004 22:02:47 -0500

 That's in the CVS tree, no? If so, it doesn't use that function.
 
 Robby
 
 On Jul 15, 2004, at 10:00 PM, Matthias Felleisen wrote:
 
 > Plot?
 >
 > On Jul 15, 2004, at 7:25 PM, Robby Findler wrote:
 >
 >> Do either of you know of any uses (outside of the teaching languages
 >> implementations) for image-snip->dc+bitmap or image-snip->bitmap? 
 >> There
 >> is a comment suggesting that teachpacks might use it, but there don't
 >> seem to be any such teachpacks in the plt tree.
 >>
 >> Uses of those functions will probably have to change, depending on 
 >> what
 >> they do.
 >>
 >> Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 06:09:56 -0700

 At Thu, 15 Jul 2004 18:23:11 -0500, Robby Findler wrote:
 > The test suite seems to assume that (send the-color-list find-color
 > "blue") corresponds to the color (make-color 0 0 255) but it doesn't,
 > even before I got my hands on it. 
 > 
 > Is it safe to assume that the implemented behavior is right? (ie, blue
 > is (make-color 80 80 248)?)
 
 Yes, I see that 'blue maps to this color in Windows and Mac OS, but 0 0
 255 on my Linux machine.
 
 I will change MrEd to ignore the X color mapping from now on, so we
 avoid this variation, and the tests can use 80 80 248.
 
 Matthew
 
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 06:11:04 -0700

 At Thu, 15 Jul 2004 18:29:43 -0500, Robby Findler wrote:
 > Actually, I'm finding more problems with the test suite, I think. Just
 > to check I'm not missing something silly, this:
 > 
 > (image=? (color-list->image (list red red red blue) 2 2)
 >          (offset-image+ (filled-rect 2 2 'red)
 >                         1 1
 >                         (filled-rect 1 2 'blue)))
 > 
 > doesn't seem like it could ever be #t, since the images won't be the
 > same size.
 
 This test passed before you changed offset-image+ to grow the image
 (because the result image was always the same size as the first
 argument).
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 06:14:18 -0700

 At Thu, 15 Jul 2004 17:51:43 -0500, Robby Findler wrote:
 > Well, on the image->color-list front, how's this for a proposal: return
 > the pixels as they would be drawn on the screen (ie, "flatten" the mask
 > out). 
 
 Ok.
 
 > This means that image->color-list and color-list->image won't
 > truly be inverses because the mask will come out blank, 
 
 I think that `color-list->image' is another place where we'll want
 white pixels to be treated as background.
 
 For more control (for interested advanced students), there could be
 `image->two-color-lists' and `two-color-lists->image', where there two
 lists are the image and mask, respectively.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 07:14:20 -0500

 At Fri, 16 Jul 2004 06:09:56 -0700, Matthew Flatt wrote:
 > At Thu, 15 Jul 2004 18:23:11 -0500, Robby Findler wrote:
 > > The test suite seems to assume that (send the-color-list find-color
 > > "blue") corresponds to the color (make-color 0 0 255) but it doesn't,
 > > even before I got my hands on it. 
 > > 
 > > Is it safe to assume that the implemented behavior is right? (ie, blue
 > > is (make-color 80 80 248)?)
 > 
 > Yes, I see that 'blue maps to this color in Windows and Mac OS, but 0 0
 > 255 on my Linux machine.
 > 
 > I will change MrEd to ignore the X color mapping from now on, so we
 > avoid this variation, and the tests can use 80 80 248.
 
 Red was in there too and was different.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 06:15:29 -0700

 At Thu, 15 Jul 2004 18:25:41 -0500, Robby Findler wrote:
 > Do either of you know of any uses (outside of the teaching languages
 > implementations) for image-snip->dc+bitmap or image-snip->bitmap?
 
 No, and now that image-snip% has a get-bitmap method, it seems unlikely
 that any other code will use `image-snip->bitmap' in the future.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 07:24:13 -0500

 At Fri, 16 Jul 2004 06:14:18 -0700, Matthew Flatt wrote:
 > > This means that image->color-list and color-list->image won't
 > > truly be inverses because the mask will come out blank, 
 > 
 > I think that `color-list->image' is another place where we'll want
 > white pixels to be treated as background.
 
 Okay, sounds right.
 
 > For more control (for interested advanced students), there could be
 > `image->two-color-lists' and `two-color-lists->image', where there two
 > lists are the image and mask, respectively.
 
 What would it return? Not multiple values, I guess :). How about
 image->masked-color-list that accepts a boolean and
 masked-color-lists->image that accepts two lists?
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 07:54:46 -0500

 At Fri, 16 Jul 2004 06:14:18 -0700, Matthew Flatt wrote:
 > At Thu, 15 Jul 2004 17:51:43 -0500, Robby Findler wrote:
 > > Well, on the image->color-list front, how's this for a proposal: return
 > > the pixels as they would be drawn on the screen (ie, "flatten" the mask
 > > out). 
 > 
 > Ok.
 
 BTW, this change will make anti-aliased text behave reasonably. So, how
 about going back to just two kinds of text: that with a solid
 background and anti-aliased text.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 09:32:25 -0400

 One of my teachers seemed to know about this and was adamant
 that removing green from rgb by setting the green field 0
 wasn't "remove-green". I appealed to domain knowledge (and
 privately made a point of saying I don't know what "green"
 really denotes) and went on. -- Matthias
 
 
 On Jul 16, 2004, at 8:14 AM, Robby Findler wrote:
 
 > At Fri, 16 Jul 2004 06:09:56 -0700, Matthew Flatt wrote:
 >> At Thu, 15 Jul 2004 18:23:11 -0500, Robby Findler wrote:
 >>> The test suite seems to assume that (send the-color-list find-color
 >>> "blue") corresponds to the color (make-color 0 0 255) but it doesn't,
 >>> even before I got my hands on it.
 >>>
 >>> Is it safe to assume that the implemented behavior is right? (ie, 
 >>> blue
 >>> is (make-color 80 80 248)?)
 >>
 >> Yes, I see that 'blue maps to this color in Windows and Mac OS, but 0 
 >> 0
 >> 255 on my Linux machine.
 >>
 >> I will change MrEd to ignore the X color mapping from now on, so we
 >> avoid this variation, and the tests can use 80 80 248.
 >
 > Red was in there too and was different.
 >
 > Robby
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 09:33:02 -0400

 For heavens' sake, how are you going to explain this to a
 beginner?
 
 On Jul 16, 2004, at 8:24 AM, Robby Findler wrote:
 
 > At Fri, 16 Jul 2004 06:14:18 -0700, Matthew Flatt wrote:
 >>> This means that image->color-list and color-list->image won't
 >>> truly be inverses because the mask will come out blank,
 >>
 >> I think that `color-list->image' is another place where we'll want
 >> white pixels to be treated as background.
 >
 > Okay, sounds right.
 >
 >> For more control (for interested advanced students), there could be
 >> `image->two-color-lists' and `two-color-lists->image', where there two
 >> lists are the image and mask, respectively.
 >
 > What would it return? Not multiple values, I guess :). How about
 > image->masked-color-list that accepts a boolean and
 > masked-color-lists->image that accepts two lists?
 >
 > Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 08:50:47 -0500

 [ this refers to the quoted part below, I take it? Not the deleted part? ]
 
 I don't think Matthew is proposing to explain it to most beginners.
 This function is for students at Chicago and Rice and Brown and such
 places that want to push far beyond what we would set in an assignment.
 Most beginners can safely ignore that function. Maybe we should give it
 a weirder name?
 
 Robby
 
 At Fri, 16 Jul 2004 09:33:02 -0400, Matthias Felleisen wrote:
 > For heavens' sake, how are you going to explain this to a
 > beginner?
 > 
 > On Jul 16, 2004, at 8:24 AM, Robby Findler wrote:
 > 
 > >> For more control (for interested advanced students), there could be
 > >> `image->two-color-lists' and `two-color-lists->image', where there two
 > >> lists are the image and mask, respectively.
 > >
 > > What would it return? Not multiple values, I guess :). How about
 > > image->masked-color-list that accepts a boolean and
 > > masked-color-lists->image that accepts two lists?
 > >
 > > Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 10:24:25 -0400

 Okay. Then I propose that you return a structure:
 
   (define-struct image-pixels (colors mask))
   ;; IPs = (make-image-pixels (Listof Color) (Listof Color))
 
 and have functions mapping back and forth. We know that values would
 be the right thing but let's leave it at structures for students who
 want to go beyond HtDP I and II without knowing much more.
 
 -- Matthias
 
 
 On Jul 16, 2004, at 9:50 AM, Robby Findler wrote:
 
 > [ this refers to the quoted part below, I take it? Not the deleted 
 > part? ]
 >
 > I don't think Matthew is proposing to explain it to most beginners.
 > This function is for students at Chicago and Rice and Brown and such
 > places that want to push far beyond what we would set in an assignment.
 > Most beginners can safely ignore that function. Maybe we should give it
 > a weirder name?
 >
 > Robby
 >
 > At Fri, 16 Jul 2004 09:33:02 -0400, Matthias Felleisen wrote:
 >> For heavens' sake, how are you going to explain this to a
 >> beginner?
 >>
 >> On Jul 16, 2004, at 8:24 AM, Robby Findler wrote:
 >>
 >>>> For more control (for interested advanced students), there could be
 >>>> `image->two-color-lists' and `two-color-lists->image', where there 
 >>>> two
 >>>> lists are the image and mask, respectively.
 >>>
 >>> What would it return? Not multiple values, I guess :). How about
 >>> image->masked-color-list that accepts a boolean and
 >>> masked-color-lists->image that accepts two lists?
 >>>
 >>> Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 10:45:20 -0500

 At Fri, 16 Jul 2004 10:24:25 -0400, Matthias Felleisen wrote:
 > Okay. Then I propose that you return a structure:
 > 
 >   (define-struct image-pixels (colors mask))
 >   ;; IPs = (make-image-pixels (Listof Color) (Listof Color))
 > 
 > and have functions mapping back and forth. We know that values would
 > be the right thing but let's leave it at structures for students who
 > want to go beyond HtDP I and II without knowing much more.
 
 That requires an extra functions and longer programs to use than just
 accepting a boolean (that would indicate if the function should return
 the mask pixels or the other pixels). It seems like more effort than
 this is worth, esp. given that this is not something we generally want
 to call attention to (since it's really for the die-hards).
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 15:08:02 -0500

 Okay, I've found something that works for drawing bitmaps-spec'd
 images, but I don't really feel qualified to guarantee that it will
 always work. Remember how you suggested the way to do the regular
 drawing & do the bitmap+mask drawing (and it was weird for anti-aliased
 text)? So, how does it work for bitmaps? 
 
 Imagine that the image comes in as two bitmaps, one for the main image
 and one for the mask. Here's what I've got for the 3 kinds of drawing
 (I separated it out into 3 to make the function signatures the same;
 this makes abstraction easier):
 
   - regular drawing: just draw-bitmap with the bitmap & mask as expected
 
   - draw into main bitmap: just like regular drawing
 
   - draw into mask bitmap: draw-bitmap with the mask as both the main
     and mask arguments (this is the one that took me a while.. and
     feels strange)
 
 I can't make it fail with my test suites, but as we all know, that
 don't mean much :).
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Fri, 16 Jul 2004 15:22:01 -0600

 At Thu, 15 Jul 2004 17:06:29 -0500, Robby Findler wrote:
 > Basically, the Xs on top are thinner than the ones on the bottom.
 
 I returned to my Mac, and I see that OS X's anti-aliasing really does
 takes into account the specific foreground and background colors
 (relative brightness?). In particular, drawing white on black
 consistently makes letters that are thicker than drawing black on
 white.
 
 I don't know what to do about that. Maybe anti-aliasing always has to
 use a bitmap, for consistency.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 06:03:38 -0700

 At Thu, 15 Jul 2004 20:30:13 -0500, Robby Findler wrote:
 > Matthew, can you run the test suite under windows or linux?
 
 For some reason, I can't get it to work.
 
 The first failure is mask-color-list3; I changed the format in the
 transcript below so you can see what was actually generated. Then some
 other things fail, and one failure makes the test stop.
 
 I'll look more later, but let me know if you can tell what's going
 wrong.
 
 Matthew
 
 ----------------------------------------
 
 > (load "htdp-image.ss")
 (image? #t)  ==> #t
 (image? #f)  ==> #f
 (color-list (#4(struct:color 248 20 64)))  ==> (#4(struct:color 248 20 64))
 (color-list (#4(struct:color 80 80 248) #4(struct:color 80 80 248) #4(struct:color 80 80 248) #4(struct:color 80 80 248)))  ==> (#4(struct:color 80 80 248) #4(struct:color 80 80 248) #4(struct:color 80 80 248) #4(struct:color 80 80 248))
 (color-list #t)  ==> #t
 (color-list #f)  ==> #f
 (color-list #t)  ==> #t
 (mask-color-list1 #t)  ==> #t
 (mask-color-list2 #t)  ==> #t
 (mask-color-list3 (#4(struct:color 248 20 64) #4(struct:color 161 65 176) #4(struct:color 248 20 64) #4(struct:color 149 77 28) #4(struct:color 102 80 136) #4(struct:color 149 77 56)))  ==> (#4(struct:color 248 20 64) #4(struct:color 161 65 176) #4(struct:color 248 20 64) #4(struct:color 149 77 28) #4(struct:color 102
 80 136) #4(struct:color 149 77 56))
  BUT EXPECTED (#4(struct:color 248 20 64) #4(struct:color 255) #4(struct:color 248 20 64) #4(struct:color 255) #4(struct:color 255) #4(struct:color 255))
 (mask-color-list4 #t)  ==> #t
 (image+ #t)  ==> #t
 (image+/empty-spaces-are-unmasked #t)  ==> #t
 (offset-image+1 #t)  ==> #t
 (offset-image+2 #t)  ==> #t
 (offset-image+3 #t)  ==> #t
 (offset-image+4 #t)  ==> #t
 (offset-image+/white #f)  ==> #f
  BUT EXPECTED #t
 (color-list->image/white-in-mask #t)  ==> #t
 (image+ #t)  ==> #t
 (image-inside? #t)  ==> #t
 (image-inside? #f)  ==> #f
 (image-inside? #t)  ==> #t
 (image-inside? #f)  ==> #f
 (image-inside? #f)  ==> #f
  BUT EXPECTED #t
 (image-inside? #f)  ==> #f
 (image-inside? #f)  ==> #f
  BUT EXPECTED #t
 find-image: the second image does not appear within the first image
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 06:27:19 -0700

 At Fri, 16 Jul 2004 15:08:02 -0500, Robby Findler wrote:
 > Imagine that the image comes in as two bitmaps, one for the main image
 > and one for the mask. Here's what I've got for the 3 kinds of drawing
 > (I separated it out into 3 to make the function signatures the same;
 > this makes abstraction easier):
 > 
 >   - regular drawing: just draw-bitmap with the bitmap & mask as expected
 > 
 >   - draw into main bitmap: just like regular drawing
 > 
 >   - draw into mask bitmap: draw-bitmap with the mask as both the main
 >     and mask arguments (this is the one that took me a while.. and
 >     feels strange)
 
 For the last one, I think you want to draw a black rectangle using the
 mask.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 09:28:17 -0500

 At Sat, 17 Jul 2004 06:03:38 -0700, Matthew Flatt wrote:
 > I'll look more later, but let me know if you can tell what's going
 > wrong.
 
 I had forgotten that we have a linux box I can use here... Anyways, it
 causes the same last error, so I can look into it (the colors are
 different, tho -- that change hasn't been checked in has it?)
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 10:45:12 -0500

 At Sat, 17 Jul 2004 06:03:38 -0700, Matthew Flatt wrote:
 > At Thu, 15 Jul 2004 20:30:13 -0500, Robby Findler wrote:
 > > Matthew, can you run the test suite under windows or linux?
 > 
 > For some reason, I can't get it to work.
 > 
 > The first failure is mask-color-list3; I changed the format in the
 > transcript below so you can see what was actually generated. Then some
 > other things fail, and one failure makes the test stop.
 
 I've narrowed things down to this mred program (probably it could be
 even shorter):
 
 (define bm (make-object bitmap% 1 1))
 (define final-bm (make-object bitmap% 1 1))
 (define bdc (make-object bitmap-dc%))
 
 (send bdc set-bitmap bm)
 (send bdc clear)
 (define white (send the-color-database find-color "white"))
 (send bdc set-brush (send the-brush-list find-or-create-brush white 'solid))
 (send bdc set-pen (send the-pen-list find-or-create-pen white 1 'transparent))
 (send bdc draw-rectangle 0 0 1 1)
 
 (send bdc set-bitmap final-bm)
 (send bdc clear)
 (send bdc draw-bitmap bm 0 0)
 (define s (make-string 4 #\000))
 (send bdc get-argb-pixels 0 0 1 1 s)
 (map char->integer (string->list s))
 
 It produces '(255 255 255 255) on my mac, but '(255 248 252 248) under linux. 
 
 From the point of view of the beginner image library, this corresponds
 to white turning into an off-white, which could easily account for the
 problems in running the test suite.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: mflatt@cs.uchicago.edu
Cc: matthias@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 10:57:07 -0500

 Oh -- this could be a problem of depths. I was using Chicken of the VNC
 to connect to a linux machine over dsl, and it dumped the depth down to
 8-bits for the slow connection.
 
 I don't suppose that's what you were seeing, were you?
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 13:03:14 -0500

 Well, I set my VNC to a highcolor mode and re-ran the test and got the
 same results: '(255 248 252 248). I'm not sure if that tells us
 anything or not. I don't have a console linux machine to try until
 Monday.
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 13:22:19 -0700

 At Sat, 17 Jul 2004 10:45:12 -0500, Robby Findler wrote:
 > It produces '(255 255 255 255) on my mac, but '(255 248 252 248) under linux. 
 
 I get '(255 255 255 255). Even with a lower color resolution, though,
 '(255 248 252 248) is surprising. White and black are normally
 supported exactly.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 13:27:06 -0700

 There was a missing dc clear. I added it, and now the test suite passes
 for me under Linux.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 14:29:11 -0500

 On Jul 17, 2004, at 3:22 PM, Matthew Flatt wrote:
 
 > At Sat, 17 Jul 2004 10:45:12 -0500, Robby Findler wrote:
 >> It produces '(255 255 255 255) on my mac, but '(255 248 252 248) 
 >> under linux.
 >
 > I get '(255 255 255 255).
 
 This is on the same machine that you got the failing transcript you 
 sent out?
 
 > Even with a lower color resolution, though,
 > '(255 248 252 248) is surprising. White and black are normally
 > supported exactly.
 
 Should I figure out some kind of "whiteness" predicate based on what 
 that little program produces, then (rather than use 255 255 255)?
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 13:33:41 -0700

 At Sat, 17 Jul 2004 14:29:11 -0500, Robby Findler wrote:
 > > I get '(255 255 255 255).
 > 
 > This is on the same machine that you got the failing transcript you 
 > sent out?
 
 Yes.
 
 > > Even with a lower color resolution, though,
 > > '(255 248 252 248) is surprising. White and black are normally
 > > supported exactly.
 > 
 > Should I figure out some kind of "whiteness" predicate based on what 
 > that little program produces, then (rather than use 255 255 255)?
 
 No. (Been there, tried that.)
 
 Something else is wrong, but I'm not sure what. Can you check the
 mapping for "white" in
 
   /usr/X11R6/lib/X11/rgb.txt
 
 ? This mapping will shortly become irrelevant, but I wonder whether
 it's a problem now.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 13:34:49 -0700

 I'm planning to leave the color mappings "red", "green", and "blue"
 as they are in Mac OS and Windows.
 
 What should I call `(make-color 255 0 0)'? "Pure red"?
 
 Or should I change the mappings for "red", "blue", and "green" instead?
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 14:42:01 -0500

 I've always programmed as if the color strings "red" and such given to
 mred had consistent meanings across platforms. I realize that this is
 either naive or stupid, given different monitors and different
 adjustments etc, but given that we cannot actually have a consistent
 "red" hue across all platforms, it seems better to have "red" always
 map to the r, g, and b coordinates.
 
 So, would it be a bad idea to make the color name -> rgb mapping the
 same on all platforms?
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 14:43:43 -0500

 At Sat, 17 Jul 2004 13:33:41 -0700, Matthew Flatt wrote:
 > Something else is wrong, but I'm not sure what. Can you check the
 > mapping for "white" in
 > 
 >   /usr/X11R6/lib/X11/rgb.txt
 > 
 > ? This mapping will shortly become irrelevant, but I wonder whether
 > it's a problem now.
 
 It maps white to 255 255 255.
 
 If you want to poke around on the computer in question, you can vnc to
 it -- I'll call you with the password.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 13:59:41 -0700

 At Sat, 17 Jul 2004 14:42:01 -0500, Robby Findler wrote:
 > So, would it be a bad idea to make the color name -> rgb mapping the
 > same on all platforms?
 
 I'm already doing that. The question is what "red" should mean, and
 what should be the name of (make-color 255 0 0).
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 15:21:17 -0500

 At Sat, 17 Jul 2004 13:59:41 -0700, Matthew Flatt wrote:
 > At Sat, 17 Jul 2004 14:42:01 -0500, Robby Findler wrote:
 > > So, would it be a bad idea to make the color name -> rgb mapping the
 > > same on all platforms?
 > 
 > I'm already doing that. The question is what "red" should mean, and
 > what should be the name of (make-color 255 0 0).
 
 Ah. I vote for MacOS's and Window's version of red being the One True
 definition of red.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 15:58:54 -0500

 At Sat, 17 Jul 2004 06:27:19 -0700, Matthew Flatt wrote:
 > At Fri, 16 Jul 2004 15:08:02 -0500, Robby Findler wrote:
 > > Imagine that the image comes in as two bitmaps, one for the main image
 > > and one for the mask. Here's what I've got for the 3 kinds of drawing
 > > (I separated it out into 3 to make the function signatures the same;
 > > this makes abstraction easier):
 > > 
 > >   - regular drawing: just draw-bitmap with the bitmap & mask as expected
 > > 
 > >   - draw into main bitmap: just like regular drawing
 > > 
 > >   - draw into mask bitmap: draw-bitmap with the mask as both the main
 > >     and mask arguments (this is the one that took me a while.. and
 > >     feels strange)
 > 
 > For the last one, I think you want to draw a black rectangle using the
 > mask.
 
 I found a test case that brings out the bug in my original way and it
 also seems to suggest that your suggestion isn't quite right either.
 The test case is one of many that merely draw the image one way, then
 force the bitmap to be created and draw the image with the bitmap (this
 is the same kind of test case that demonstrated the problem with the
 anti-aliased text).
 
 Anyways, any mask that has actual colors in it, rather than just black
 & white triggers the bug (in the above test).
 
 The code is below, in mred terms. I'd have expected the two squares to
 the be the same color.
 
 Any ideas?
 
 Robby
 
 (define (do-rect bmp color)
   (let ([bdc (make-object bitmap-dc% bmp)])
     (send bdc clear)
     (send bdc set-pen (send the-pen-list find-or-create-pen "black" 1 'transparent))
     (send bdc set-brush (send the-brush-list find-or-create-brush color 'solid))
     (send bdc draw-rectangle 0 0 10 10)
     (send bdc set-bitmap #f)))
 
 ;; imagine these bitmap are what gets passed mask-color-lists->image
 (define bmp (make-object bitmap% 10 10))
 (define mask-bmp (make-object bitmap% 10 10))
 (do-rect bmp (make-object color% 200 100 0))
 (do-rect mask-bmp (make-object color% 0 100 200))
 
 (define black (send the-color-database find-color "black"))
 
 ;; make a solid black bitmap for use in building the composite bitmap
 (define solid-bmp (make-object bitmap% 10 10))
 (do-rect solid-bmp "black")
 
 (define composite-bmp (make-object bitmap% 10 10))
 (define composite-mask-bmp (make-object bitmap% 10 10))
 
 ;; set up the composite bitmap
 (let ([dc (make-object bitmap-dc% composite-bmp)])
   (send dc clear)
   (send dc draw-bitmap bmp 0 0 'solid black mask-bmp)
   (send dc set-bitmap composite-mask-bmp)
   (send dc clear)
   (send dc draw-bitmap solid-bmp 0 0 'solid black mask-bmp)
   (send dc set-bitmap #f))
 
 (define f (new frame% (label "") (width 60) (height 40)))
 (define c (new canvas%
                (parent f)
                (paint-callback
                 (lambda (c dc)
                   ;; do the normal drawing way
                   (send dc draw-bitmap bmp 0 0 'solid black mask-bmp)
                   
                   ;; do it the "bitmap" way
                   (send dc draw-bitmap composite-bmp 15 0 'solid black composite-mask-bmp)))))
 (send f show #t)
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 15:58:57 -0500

 Excellent, thanks!
 
 At Sat, 17 Jul 2004 13:27:06 -0700, Matthew Flatt wrote:
 > There was a missing dc clear. I added it, and now the test suite passes
 > for me under Linux.
 > 
 > Matthew
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 16:33:45 -0500

 At Fri, 16 Jul 2004 15:22:01 -0600, Matthew Flatt wrote:
 > At Thu, 15 Jul 2004 17:06:29 -0500, Robby Findler wrote:
 > > Basically, the Xs on top are thinner than the ones on the bottom.
 > 
 > I returned to my Mac, and I see that OS X's anti-aliasing really does
 > takes into account the specific foreground and background colors
 > (relative brightness?). In particular, drawing white on black
 > consistently makes letters that are thicker than drawing black on
 > white.
 > 
 > I don't know what to do about that. Maybe anti-aliasing always has to
 > use a bitmap, for consistency.
 
 After we talked on the phone, I tried both 'partly-smoothed and
 'smoothed but neither one seems to pass the test suite (I didn't
 reconstruct the images to see how they look different, tho) --
 'partly-smoothed definitely looks different from 'smoothed, tho.
 
 So, I guess it's only bitmaps. Too bad.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 16:38:24 -0500

 There seems to be another font problem. get-text-extent doesn't seem to
 be returning the right values for the text. Try the program below --
 the box should cover the text, but I see 5 or so pixels of the "f"
 hanging over the edge of the box. 
 
 Note that if the string ends with an "x", the box does indeed cover the
 text. I'm not sure if this is something we want to fix, actually (we've
 had _that_ discussion before, tho :)
 
 Robby
 
 (define font 
   (send the-font-list find-or-create-font 127
         'default 'normal 'normal #f
         (case (system-type)
           [(macosx) 'partly-smoothed]
           [else 'smoothed])))
 
 (define str "acbdef")
 
 (define (draw dc)
   (send dc set-font font)
   (let-values ([(w h a d) (send dc get-text-extent str)])
     (send dc draw-rectangle 0 0 w h)
     (send dc draw-text str 0 0)))
 
 (define f (new frame% 
                (label "")
                (width 500)
                (height 300)))
 (define c (new canvas%
                (parent f)
                (paint-callback
                 (lambda (c dc)
                   (draw dc)))))
 
 (send f show #t)
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 20:00:55 -0700

 At Sat, 17 Jul 2004 15:21:17 -0500, Robby Findler wrote:
 > At Sat, 17 Jul 2004 13:59:41 -0700, Matthew Flatt wrote:
 > > At Sat, 17 Jul 2004 14:42:01 -0500, Robby Findler wrote:
 > > > So, would it be a bad idea to make the color name -> rgb mapping the
 > > > same on all platforms?
 > > 
 > > I'm already doing that. The question is what "red" should mean, and
 > > what should be the name of (make-color 255 0 0).
 > 
 > Ah. I vote for MacOS's and Window's version of red being the One True
 > definition of red.
 
 Unfortunately, I can't tell what this vote means. (Are you sure you
 punched the chad all the way out?)
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 21:04:47 -0500

 On Jul 17, 2004, at 10:00 PM, Matthew Flatt wrote:
 
 > At Sat, 17 Jul 2004 15:21:17 -0500, Robby Findler wrote:
 >> At Sat, 17 Jul 2004 13:59:41 -0700, Matthew Flatt wrote:
 >>> At Sat, 17 Jul 2004 14:42:01 -0500, Robby Findler wrote:
 >>>> So, would it be a bad idea to make the color name -> rgb mapping the
 >>>> same on all platforms?
 >>>
 >>> I'm already doing that. The question is what "red" should mean, and
 >>> what should be the name of (make-color 255 0 0).
 >>
 >> Ah. I vote for MacOS's and Window's version of red being the One True
 >> definition of red.
 >
 > Unfortunately, I can't tell what this vote means. (Are you sure you
 > punched the chad all the way out?)
 
 (Ha!)
 
 Perhaps we're talking past each other, but I thought I'd understood 
 that you were going to standardize the rgb values of all of the entries 
 in the the-color-database in mred and you were wondering what the value 
 for red should be. I also thought you'd said that Windows and MacOS 
 already agreed on what red was? I also understood that you were getting 
 the color name -> rgb mapping from the underlying os.
 
 Anyways, I think the color red should be the one with the wierd 
 components in it, but I don't care too too much.
 
 (after you pick one, let me know, so I can make sure the test suite is 
 working properly)
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 20:13:58 -0700

 At Sat, 17 Jul 2004 21:04:47 -0500, Robby Findler wrote:
 > I also understood that you were getting 
 > the color name -> rgb mapping from the underlying os.
 
 No - only in the X case.
 
 > I also thought you'd said that Windows and MacOS 
 > already agreed on what red was? 
 
 Yes, because the table hard-wired into MrEd is the same in each case.
 
 The current values came with either wxWindows or rgb.txt on some
 machine that I used to use.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 20:18:41 -0700

 At Sat, 17 Jul 2004 15:58:54 -0500, Robby Findler wrote:
 > At Sat, 17 Jul 2004 06:27:19 -0700, Matthew Flatt wrote:
 > > At Fri, 16 Jul 2004 15:08:02 -0500, Robby Findler wrote:
 > > > Imagine that the image comes in as two bitmaps, one for the main image
 > > > and one for the mask. Here's what I've got for the 3 kinds of drawing
 > > > (I separated it out into 3 to make the function signatures the same;
 > > > this makes abstraction easier):
 > > > 
 > > >   - regular drawing: just draw-bitmap with the bitmap & mask as expected
 > > > 
 > > >   - draw into main bitmap: just like regular drawing
 > > > 
 > > >   - draw into mask bitmap: draw-bitmap with the mask as both the main
 > > >     and mask arguments (this is the one that took me a while.. and
 > > >     feels strange)
 > > 
 > > For the last one, I think you want to draw a black rectangle using the
 > > mask.
 > 
 > I found a test case that brings out the bug in my original way and it
 > also seems to suggest that your suggestion isn't quite right either.
 
 Ok, right.
 
 How about
 
  - Use the above strategy when a 1-bit mask is provided, so that
    colors->image-list gives the expected result (e.g., for GIFs).
 
  - Otherwise, just use the provided bitmap and mask.
 
 In other words, if someone is playing with a fancy PNG, then we won't
 be able to gloss over the mask (and probably we shouldn't try).
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 20:19:05 -0700

 At Sat, 17 Jul 2004 16:33:45 -0500, Robby Findler wrote:
 > After we talked on the phone, I tried both 'partly-smoothed and
 > 'smoothed but neither one seems to pass the test suite (I didn't
 > reconstruct the images to see how they look different, tho) --
 > 'partly-smoothed definitely looks different from 'smoothed, tho.
 
 Ok.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 20:19:41 -0700

 At Sat, 17 Jul 2004 16:38:24 -0500, Robby Findler wrote:
 > There seems to be another font problem. get-text-extent doesn't seem to
 > be returning the right values for the text.
 
 Thanks. I saw a bit on this on Friday afternoon. I think I know what's
 wrong, and I'll investigate next week.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 21:20:43 -0500

 Here's a bunch of rgb color "dictionary"s that might be useful....
 
    http://www.swiss.ai.mit.edu/~jaffer/Color/Dictionaries.html
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 21:30:46 -0500

 On Jul 17, 2004, at 10:18 PM, Matthew Flatt wrote:
 > How about
 >
 >  - Use the above strategy when a 1-bit mask is provided, so that
 >    colors->image-list gives the expected result (e.g., for GIFs).
 >
 >  - Otherwise, just use the provided bitmap and mask.
 >
 > In other words, if someone is playing with a fancy PNG, then we won't
 > be able to gloss over the mask (and probably we shouldn't try).
 
 I don't see how that works. If someone calls color-lists->image and 
 supplies a non-black-and-white mask, and then combines that with other 
 things via image+, and then saves the bitmap (or copies it or whatever 
 would trigger the "flattening" process to build a bitmap), what do I 
 do?
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 20:31:07 -0700

 At Sat, 17 Jul 2004 21:20:43 -0500, Robby Findler wrote:
 > Here's a bunch of rgb color "dictionary"s that might be useful....
 > 
 >    http://www.swiss.ai.mit.edu/~jaffer/Color/Dictionaries.html
 
 Looks like everything thinks that "red" should be `(make-rgb 255 0 0)',
 so I'll change the built-in mapping.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 21:33:00 -0500

 On Jul 17, 2004, at 10:31 PM, Matthew Flatt wrote:
 
 > At Sat, 17 Jul 2004 21:20:43 -0500, Robby Findler wrote:
 >> Here's a bunch of rgb color "dictionary"s that might be useful....
 >>
 >>    http://www.swiss.ai.mit.edu/~jaffer/Color/Dictionaries.html
 >
 > Looks like everything thinks that "red" should be `(make-rgb 255 0 0)',
 > so I'll change the built-in mapping.
 
 Blue, too? (I didn't check green)
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 20:34:12 -0700

 At Sat, 17 Jul 2004 21:30:46 -0500, Robby Findler wrote:
 > On Jul 17, 2004, at 10:18 PM, Matthew Flatt wrote:
 > > How about
 > >
 > >  - Use the above strategy when a 1-bit mask is provided, so that
 > >    colors->image-list gives the expected result (e.g., for GIFs).
 > >
 > >  - Otherwise, just use the provided bitmap and mask.
 > >
 > > In other words, if someone is playing with a fancy PNG, then we won't
 > > be able to gloss over the mask (and probably we shouldn't try).
 > 
 > I don't see how that works. If someone calls color-lists->image and 
 > supplies a non-black-and-white mask, and then combines that with other 
 > things via image+, and then saves the bitmap (or copies it or whatever 
 > would trigger the "flattening" process to build a bitmap), what do I 
 > do?
 
 I see what you mean, and I lost track of the goal.
 
 I'll think about this more. It would surprise me if the set of
 alpha-masked bitmaps is not closed under combination, but maybe it
 isn't.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 20:34:44 -0700

 At Sat, 17 Jul 2004 21:33:00 -0500, Robby Findler wrote:
 > 
 > On Jul 17, 2004, at 10:31 PM, Matthew Flatt wrote:
 > 
 > > At Sat, 17 Jul 2004 21:20:43 -0500, Robby Findler wrote:
 > >> Here's a bunch of rgb color "dictionary"s that might be useful....
 > >>
 > >>    http://www.swiss.ai.mit.edu/~jaffer/Color/Dictionaries.html
 > >
 > > Looks like everything thinks that "red" should be `(make-rgb 255 0 0)',
 > > so I'll change the built-in mapping.
 > 
 > Blue, too? (I didn't check green)
 
 Yes, and green.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 22:18:25 -0500

 At Sat, 17 Jul 2004 20:34:12 -0700, Matthew Flatt wrote:
 > I'll think about this more. It would surprise me if the set of
 > alpha-masked bitmaps is not closed under combination, but maybe it
 > isn't.
 
 I think that this paper must have the answer. I'm still reading...
 
   http://www.cs.uchicago.edu/~robby/tmp/p253-porter.pdf
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sat, 17 Jul 2004 22:31:41 -0500

 At Sat, 17 Jul 2004 20:34:12 -0700, Matthew Flatt wrote:
 > I'll think about this more. It would surprise me if the set of
 > alpha-masked bitmaps is not closed under combination, but maybe it
 > isn't.
 
 I didn't get the answer from that paper, but maybe I just don't get it.
 Just from my own doodles, here's something .... imagine the mask values
 and pixel values were reals between 0 and 1 (rather than 0 to 255). Say
 we have one component of one pixel from each of two bitmaps. That
 corresponds to four values:
 
   b1: pixel color for bitmap 1
   m1: mask value for bitmap 1
   b2: pixel color for bitmap 2
   m2: mask value for bitmap 2
 
 If we draw those, one after the other into a black bitmap, we'd get
 this:
 
   b1*m1*(1-m2) + b2*m2
 
 So, we want to turn that into a new pair, b3, m3. Ideally, b3 should be
 computed from b1 and b2 and m3 should be computed from m1 and m2 such
 that the product of b3 and m3 is the same as that product above. That
 doesn't seem possible, however.
 
 Still, why not just put the result of that equation into the mask and
 put black into the image? Seems like it should work.... I'll think
 about it some more and maybe try it tomorrow.
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 05:51:26 -0700

 At Sat, 17 Jul 2004 22:31:41 -0500, Robby Findler wrote:
 >   b1: pixel color for bitmap 1
 >   m1: mask value for bitmap 1
 >   b2: pixel color for bitmap 2
 >   m2: mask value for bitmap 2
 > 
 > If we draw those, one after the other into a black bitmap, we'd get
 > this:
 > 
 >   b1*m1*(1-m2) + b2*m2
 >
 > So, we want to turn that into a new pair, b3, m3.
 
 I started thinking this way, too...
 
 Don't assume a black target -- that hides too much. Assume a target of
 b0. The final result is
 
     ((b0*(1-m1) + m1*b1) * (1-m2)) + m2*b2
     = b0*((1-m1)*(1-m2)) + (m1*b1*(1-m2) + m2*b2)
     = b0*(1-m1-m2-m1*m2) + N  where N = (m1*b1*(1-m2) + m2*b2)
     = b0*(1-(m1+m2-m1*m2)) + N
 
 So m3 is (m1+m2-m1*m2) and b3 is N/m3, where N does not depend on b0.
 So, in principle, you can compute these values.
 
 ... which would be nice, but expensive to compute. Worse, the formula
 above isn't quite right, because pixel values are discrete. The actual
 formula for alpha combination is not
 
    b0*(1-m1) + b1*m1
 
 but either
 
   floor(b0*(1-m1) + b1*m1)
 
 or
 
   floor(b0*(1-m1)) + floor(b1*m1)
 
 depending on where the combiner rounds. So maybe the formula to solve
 is
 
     floor((floor(b0*(1-m1) + m1*b1) * (1-m2)) + m2*b2)
     = b0*(1-m3) + b3
 
 Of course, floor doesn't commute nicely with other operators, and I
 don't think there's going to be a simple solution in general.
 
 
 So, it looks to me like the semantics of images can't be simply pixels
 plus mask, much like the semantics of numbers can't be real arithmetic.
 
 We're trying to make images handle both MacDraw-style and
 MacPaint-style picture combination at once, much like the number system
 tries to handle both exact rational computation and approximate real
 computation at once, so this split shouldn't be surprising.
 
 And just like we have exact versus inexact rational numbers, we can
 have a kind of image that does flatten into a bitmap+mask and a kind of
 image that doesn't, and some operations push you from the former to the
 latter.
 
 In short, I think we've discovered a whole new complicated world of
 precision and performance!
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 08:34:11 -0500

 At Sun, 18 Jul 2004 05:51:26 -0700, Matthew Flatt wrote:
 > Don't assume a black target -- that hides too much. Assume a target of
 > b0. The final result is
 > 
 >     ((b0*(1-m1) + m1*b1) * (1-m2)) + m2*b2
 >     = b0*((1-m1)*(1-m2)) + (m1*b1*(1-m2) + m2*b2)
 >     = b0*(1-m1-m2-m1*m2) + N  where N = (m1*b1*(1-m2) + m2*b2)
 >     = b0*(1-(m1+m2-m1*m2)) + N
 > 
 > So m3 is (m1+m2-m1*m2) and b3 is N/m3, where N does not depend on b0.
 > So, in principle, you can compute these values.
 
 Yeah, I also tried this too, but I don't think that's right --
 m1+m2-m1*m2 is not necessarily a value between 0 and 1.
 
 > In short, I think we've discovered a whole new complicated world of
 > precision and performance!
 
 I'm not entirely sure about this -- it seems like the existing
 complicated world of numbers is leaking over into our bitmap world.
 
 What I find especially strange is that we cannot combine two bitmaps
 into a single bitmap! That seems exclusively in the world of MacDraw.
 
 Do you think any of the Utah graphics people would be able to help with
 these questions? I've been trying to read graphics papers about the
 alpha channel (there's no shortage of them...) but haven't come across
 something useful yet.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 07:41:10 -0700

 At Sun, 18 Jul 2004 08:34:11 -0500, Robby Findler wrote:
 > Yeah, I also tried this too, but I don't think that's right --
 > m1+m2-m1*m2 is not necessarily a value between 0 and 1.
 
 I thought that it is. Can you provide an m1 and m2 (where each is
 between 0 and 1) so that the result is not between 0 and 1?
 
 > I'm not entirely sure about this -- it seems like the existing
 > complicated world of numbers is leaking over into our bitmap world.
 
 I think it's more than that.
 
 > Do you think any of the Utah graphics people would be able to help with
 > these questions? 
 
 I'll ask Pete tomorrow.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 07:44:03 -0700

 At Sun, 18 Jul 2004 08:34:11 -0500, Robby Findler wrote:
 > At Sun, 18 Jul 2004 05:51:26 -0700, Matthew Flatt wrote:
 > > Don't assume a black target -- that hides too much. Assume a target of
 > > b0. The final result is
 > > 
 > >     ((b0*(1-m1) + m1*b1) * (1-m2)) + m2*b2
 > >     = b0*((1-m1)*(1-m2)) + (m1*b1*(1-m2) + m2*b2)
 > >     = b0*(1-m1-m2-m1*m2) + N  where N = (m1*b1*(1-m2) + m2*b2)
 > >     = b0*(1-(m1+m2-m1*m2)) + N
 > > 
 > > So m3 is (m1+m2-m1*m2) and b3 is N/m3, where N does not depend on b0.
 > > So, in principle, you can compute these values.
 > 
 > Yeah, I also tried this too, but I don't think that's right --
 > m1+m2-m1*m2 is not necessarily a value between 0 and 1.
 
 (Alternately, maybe you can point out where the reduction steps above
 go wrong.)
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 08:47:35 -0500

 At Sun, 18 Jul 2004 07:44:03 -0700, Matthew Flatt wrote:
 > At Sun, 18 Jul 2004 08:34:11 -0500, Robby Findler wrote:
 > > At Sun, 18 Jul 2004 05:51:26 -0700, Matthew Flatt wrote:
 > > > Don't assume a black target -- that hides too much. Assume a target of
 > > > b0. The final result is
 > > > 
 > > >     ((b0*(1-m1) + m1*b1) * (1-m2)) + m2*b2
 > > >     = b0*((1-m1)*(1-m2)) + (m1*b1*(1-m2) + m2*b2)
 > > >     = b0*(1-m1-m2-m1*m2) + N  where N = (m1*b1*(1-m2) + m2*b2)
 > > >     = b0*(1-(m1+m2-m1*m2)) + N
 > > > 
 > > > So m3 is (m1+m2-m1*m2) and b3 is N/m3, where N does not depend on b0.
 > > > So, in principle, you can compute these values.
 > > 
 > > Yeah, I also tried this too, but I don't think that's right --
 > > m1+m2-m1*m2 is not necessarily a value between 0 and 1.
 > 
 > (Alternately, maybe you can point out where the reduction steps above
 > go wrong.)
 
 They don't go wrong -- it's the text that goes wrong. You can't
 separate out the alpha value like that, since the alpha value has to be
 between zero and one.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 08:50:09 -0500

 I found another paper:
 
 _Image Compositing Fundamentals_ by Alvy Ray Smith that seems to be
 about this very issue. The "over" operator is the one we're trying to
 use. I' haven't fully digested the paper yet, tho. Here it is:
 
   http://www.cs.uchicago.edu/~robby/tmp/smith95a.pdf
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 07:53:31 -0700

 At Sun, 18 Jul 2004 08:47:35 -0500, Robby Findler wrote:
 > At Sun, 18 Jul 2004 07:44:03 -0700, Matthew Flatt wrote:
 > > At Sun, 18 Jul 2004 08:34:11 -0500, Robby Findler wrote:
 > > > At Sun, 18 Jul 2004 05:51:26 -0700, Matthew Flatt wrote:
 > > > > Don't assume a black target -- that hides too much. Assume a target of
 > > > > b0. The final result is
 > > > > 
 > > > >     ((b0*(1-m1) + m1*b1) * (1-m2)) + m2*b2
 > > > >     = b0*((1-m1)*(1-m2)) + (m1*b1*(1-m2) + m2*b2)
 > > > >     = b0*(1-m1-m2-m1*m2) + N  where N = (m1*b1*(1-m2) + m2*b2)
 > > > >     = b0*(1-(m1+m2-m1*m2)) + N
 > > > > 
 > > > > So m3 is (m1+m2-m1*m2) and b3 is N/m3, where N does not depend on b0.
 > > > > So, in principle, you can compute these values.
 > > > 
 > > > Yeah, I also tried this too, but I don't think that's right --
 > > > m1+m2-m1*m2 is not necessarily a value between 0 and 1.
 > > 
 > > (Alternately, maybe you can point out where the reduction steps above
 > > go wrong.)
 > 
 > They don't go wrong -- it's the text that goes wrong. You can't
 > separate out the alpha value like that, since the alpha value has to be
 > between zero and one.
 
 Ok, so back to m1+m2-m1*m2 is always between 0 and 1:
 
  - Fix m1 as 0, and the result is always m2. Good.
 
  - Fix m1 as 1, and the result is always 1. Good.
 
  - Fix m2, and the derivative with respect to m1 is 1 - m2, which is
    positive. By the midpoint value theorem, we can't reach anything
    outside 0 and 1 by varying m1 from 0 to 1.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 08:29:03 -0700

 At Sun, 18 Jul 2004 08:50:09 -0500, Robby Findler wrote:
 > I found another paper:
 > 
 > _Image Compositing Fundamentals_ by Alvy Ray Smith that seems to be
 > about this very issue. The "over" operator is the one we're trying to
 > use. I' haven't fully digested the paper yet, tho. Here it is:
 > 
 >   http://www.cs.uchicago.edu/~robby/tmp/smith95a.pdf
 
 This paper points out a minor problem with my definition b3 as N/m3,
 which is that m3 can be 0. But (as noted in the paper), it doesn't
 matter, because we won't use the pixel anyway when m3 is 0.
 
 The paper also provides a helpful approximation in the integer world
 using only integer operations, but it's still an approximation (and
 sticking to integer arithmetic is the least of our problems).
 
 So, we've caught up with Mr. Smith as of 1995, but he leaves us with
 the problem of consistently rendering images. In other words, we still
 have design choices to make, just like the designers of the numerical
 tower had to sort out well-understood numerical problems. Maybe someone
 has done that for images, too...
 
 
 Possibly, the answer is to define a color to have rational components
 instead of integer components, and only round at the point where the
 image must be rendered. In the common case of integer-valued colors, we
 can represent an image with bitmaps, and fall back to rational-valued
 colors (using pre-multiplied alphas!) as necessary. And, much like a
 programmer can use `exact->inexact' to explicitly sacrifice precision
 for efficiency, we could provide an operator to collapse an image to
 its bitmaps.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 09:56:31 -0500

 On Jul 18, 2004, at 9:53 AM, Matthew Flatt wrote:
 >
 > Ok, so back to m1+m2-m1*m2 is always between 0 and 1:
 >
 >  - Fix m1 as 0, and the result is always m2. Good.
 >
 >  - Fix m1 as 1, and the result is always 1. Good.
 >
 >  - Fix m2, and the derivative with respect to m1 is 1 - m2, which is
 >    positive. By the midpoint value theorem, we can't reach anything
 >    outside 0 and 1 by varying m1 from 0 to 1.
 
 Right!
 
 When I did that calculation I made a mistake and my version of that sum 
 wasn't always between 0 and 1 (I had negated it -- looking back, it was 
 always between 0 and -1...). Sorry for not paying enough attention to 
 detail.
 
 So, we can do that computation.
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 10:05:23 -0500

 On Jul 18, 2004, at 10:29 AM, Matthew Flatt wrote:
 > So, we've caught up with Mr. Smith as of 1995, but he leaves us with
 > the problem of consistently rendering images.
 
 Yes, I see that now.
 
 > In other words, we still
 > have design choices to make, just like the designers of the numerical
 > tower had to sort out well-understood numerical problems. Maybe someone
 > has done that for images, too...
 
 Mike Sperber would argue that it hasn't been done satisfactorily for 
 numbers yet, actually. (Scheme workshop submission).
 
 His idea: treat all numbers as exact, but treat certain operations as 
 inexact. I'm not sure it works out for and efficient implementation, 
 but here's the idea. Lets imagine that, somehow, rational numbers whose 
 denominator is a power of two are efficiently representable in the 
 machine. Then, we treat those numbers as exactly those numbers. The 
 inexactness comes in for operations like sqrt. sqrt takes an exact 
 number, say 2, and produces the exact number, say 1.41. It's not 
 exactly the sqrt of 2,   but the inexactness isn't a property of the 
 result, it's a property of the operation.
 
 > Possibly, the answer is to define a color to have rational components
 > instead of integer components, and only round at the point where the
 > image must be rendered. In the common case of integer-valued colors, we
 > can represent an image with bitmaps, and fall back to rational-valued
 > colors (using pre-multiplied alphas!) as necessary. And, much like a
 > programmer can use `exact->inexact' to explicitly sacrifice precision
 > for efficiency, we could provide an operator to collapse an image to
 > its bitmaps.
 
  From what I could tell of Mr. Smith's paper, using pre-multiplied 
 alphas would make the computations for combing bitmaps simpler, but 
 would make it harder to pull out the alpha values separately.
 
  From what I can tell of our current set of operations, the only one 
 that lets us pull out the alphas separately is one that we're really 
 only using for advanced students anyways -- maybe we should redo that 
 one so that pre-multipled alphas becomes the internal representation. 
 What do you think? Does windows and/or macos support operations on such 
 bitmaps, or do they always get the alpha channels separately?
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 10:07:01 -0500

 On Jul 18, 2004, at 9:41 AM, Matthew Flatt wrote:
 >> I'm not entirely sure about this -- it seems like the existing
 >> complicated world of numbers is leaking over into our bitmap world.
 >
 > I think it's more than that.
 
 Lets say that we could actually represent all reals (between zero and 
 one) in the machine and could pass those values directly to the monitor 
 and pixels would light up based on some analog control. Would we still 
 have these problems?
 
 Robby
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Sun, 18 Jul 2004 11:40:58 -0400

 My hunch is that this is way too inefficient. -- Matthias
 
 
 On Jul 18, 2004, at 11:29 AM, Matthew Flatt wrote:
 
 > Possibly, the answer is to define a color to have rational components
 > instead of integer components, and only round at the point where the
 > image must be rendered. In the common case of integer-valued colors, we
 > can represent an image with bitmaps, and fall back to rational-valued
 > colors (using pre-multiplied alphas!) as necessary. And, much like a
 > programmer can use `exact->inexact' to explicitly sacrifice precision
 > for efficiency, we could provide an operator to collapse an image to
 > its bitmaps.
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 19 Jul 2004 10:49:03 -0400

 Do you guys think that there is a paper for you in this for including 
 images as values in languages? I am thinking of papers like those of 
 Clinger and Steele on reading and printing floats. -- Matthias
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: shriram@cs.utah.edu, bugs@plt-scheme.org,
        Robby Findler <robby@cs.uchicago.edu>
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 19 Jul 2004 10:55:26 -0400

 Sorry I meant to respond to this. I think we need to
 use non-clashing names in the core and the clashing
 names should come in through the image.ss teachpack
 only.
 
 Rationale: we will publish v208 and v300 before we
 publish HtDP/2e. That's the problem of print media
 or media printed from the Web. It gets stale too
 quickly.
 
 -- Matthias
 
 
 On Jul 15, 2004, at 9:53 AM, Matthew Flatt wrote:
 
 > At Thu, 15 Jul 2004 09:35:31 -0400, Matthias Felleisen wrote:
 >>
 >> On Jul 14, 2004, at 6:37 PM, Matthew Flatt wrote:
 >>
 >>> At Wed, 14 Jul 2004 17:53:06 -0400, Matthias Felleisen wrote:
 >>>> Can we come up with alternatives that you think are
 >>>> "non nerd" and that I think omit unusual chars?
 >>>
 >>> I don't know, but let's keep trying...
 >>
 >> rectangle : Number Number Color Mode -> Image
 >> circle : Number Number Color Mode -> Image
 >>
 >>   where Mode = { 'solid, 'outline }
 >>
 >> so
 >>   (rectangle 10 10 'blue 'solid) = (filled-rect 10 10 'blue)
 >>   (rectangle 10 10 'blue 'outline) = (outline-rect 10 10 'blue)
 >
 > Ok. Maybe `circle' should be `ellipse', though.
 >
 > How do we deal with the collision between these names and and exercises
 > 6.6.x?
 >
 > Matthew
 >
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 26 Jul 2004 12:01:32 -0500

 Well, there seem to be elements of Design and Implementation, but
 somehow I think that ICFP would be more receptive. Still, it would be
 interesting to try PLDI.
 
 Robby
 
 At Mon, 19 Jul 2004 10:49:03 -0400, Matthias Felleisen wrote:
 > Do you guys think that there is a paper for you in this for including 
 > images as values in languages? I am thinking of papers like those of 
 > Clinger and Steele on reading and printing floats. -- Matthias
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 26 Jul 2004 14:55:49 -0400

 I don't necessarily mean PLDI, just a paper along those lines. -- 
 Matthias
 
 On Jul 26, 2004, at 1:01 PM, Robby Findler wrote:
 
 > Well, there seem to be elements of Design and Implementation, but
 > somehow I think that ICFP would be more receptive. Still, it would be
 > interesting to try PLDI.
 >
 > Robby
 >
 > At Mon, 19 Jul 2004 10:49:03 -0400, Matthias Felleisen wrote:
 >> Do you guys think that there is a paper for you in this for including
 >> images as values in languages? I am thinking of papers like those of
 >> Clinger and Steele on reading and printing floats. -- Matthias
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6930: image drawing crashes on windows 
Date: Mon, 26 Jul 2004 14:00:29 -0500

 Yeah, at first ICFP seemed like the natural place, but the more we get
 into it, it seems like it could be PLDIish.
 
 At Mon, 26 Jul 2004 14:55:49 -0400, Matthias Felleisen wrote:
 > I don't necessarily mean PLDI, just a paper along those lines. -- 
 > Matthias
 > 
 > On Jul 26, 2004, at 1:01 PM, Robby Findler wrote:
 > 
 > > Well, there seem to be elements of Design and Implementation, but
 > > somehow I think that ICFP would be more receptive. Still, it would be
 > > interesting to try PLDI.
 > >
 > > Robby
 > >
 > > At Mon, 19 Jul 2004 10:49:03 -0400, Matthias Felleisen wrote:
 > >> Do you guys think that there is a paper for you in this for including
 > >> images as values in languages? I am thinking of papers like those of
 > >> Clinger and Steele on reading and printing floats. -- Matthias
State changed from "open" to "closed" by robby at Mon, 14 Mar 2005 21:40:57 -0500
Reason>>> I think that this is taken care of (questions about a publication aside :)

