From ian@cs.rice.edu  Tue Nov 27 13:46:00 2001
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id NAA17446
	for <plt-gnats>; Tue, 27 Nov 2001 13:45:54 -0500
Message-Id: <200111271845.NAA17446@champlain.ccs.neu.edu>
Date: Tue, 27 Nov 2001 13:45:54 -0500
From: ian@cs.rice.edu
To: bugs@plt-scheme.org
Subject: possible language-level adjustments

>Number:         5058
>Category:       drscheme
>Synopsis:       possible language-level adjustments
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Tue Nov 27 13:50:00 EST 2001
>Closed-Date:    Tue Dec 11 08:27:33 EST 2001
>Last-Modified:  Tue Dec 11 08:27:33 EST 2001
>Originator:     ian
>Release:        200alpha1d7
>Organization:
titan
>Environment:
unix "SunOS frosty.cs.rice.edu 5.8 Generic_108528-08 sun4u sparc SUNW,Ultra-60" (sparc-solaris) (get-display-depth) = 8
Tools: "collection-path: collection \"drscheme\" does not have sub-collection: \"tools\" in: \"/home/robby/cvs/exp/plt/collects/drscheme\""
Docs Installed:
("help" "teachpack" "icons" "r5rs" "mzscheme" "mred" "drscheme" "misclib" "framework" "tools" "mzc" "advanced" "beginning-abbr" "beginning" "intermediate" "insidemz" "mrspidey" "mzlib" "t-y-scheme")
Collections: 
(("/home/robby/cvs/exp/plt/collects" ("CVS" "doc" "browser" "compiler" "debug" "defaults" "drjava" "drscheme" "dynext" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "readline" "setup" "slatex" "srpersist" "stepper" "string-constants" "syntax" "tests" "texpict" "userspce" "xml")) ("/home/robby/cvs/robby/collects" ("CVS" "account" "mahjongg" "pente" "pop-pop" "test-image-map" "xmahjongg" "checkers" "paper-utils" "doonesbury" "friendly" "set-fonts" "backgammon" "icfp-pc-99" "mac-cd-database" "solutions" "magic" "sample-solutions")))
Human Language: English
>Description:
hi all --

A few things i'd (myself) prefer in the
language-levels, in order of preference.
(The first one is the only one where
i have students change prematurely change
language level, though.)

remove this restriction from intermediate:
    "Identifier required at function-call position"
    My reasoning: once they learn about lambda, then
    you should be able to show them with the stepper,
    how every placeholder just evaluates to (possibly a lambda) value.
    This highlight's scheme's simplicity, which appeals to students.

    I'm guessing you prohibit this, because students might inadvertently write
       (define (add2 n) (lambda (n) (+ n 2)))
    by mistake, upon learning the new lambda syntax?
    I'm inclined to let them type that (and hopefully their test cases
    catch it?)

    The way i see it, lambda is *the* reason to bump up to intermediate,
    so they'll be getting several lectures on higher-order functions
    at the same time they move to intermediate.

    (And, if they accidentally type "((+ ...", the existing error message 
    "application: expected function, given .." is fine at intermediate.)



move "local" to beginner?
   It's not abused, nor is it typed in by mistake.
   It lets teachers defer bumping up to intermediate
   (which'd be helpful with the above comment).

   I can see the students come from java background
   might discover and use "local" before their teacher,
   but those students probably have an intuitive
   understanding of the scope already, and are
   unlikely to go too far astray.



remove this restriction from advanced:
   "+, * etc take >= 2 arguments."
   Not a big deal, but again it helps highlight the uniformity of scheme.
   (If they have access to "apply" at intermediate,
    then "(apply + empty)" should be allowed by advanced!)


Things i hardly care about:
- delay "eval" and "apply" until advanced?
- allow var-arg's dot syntax, at advanced? (this is kinda cool.)
- allow case-lambda, at advanced?
     (these two are cool side-topics to mention in challenge labs.)
- prohibit the placeholder ".", to avoid confusion when hitting dotted pairs,
  var-args?


Anway, v.200 looks great!
--ian

>How-To-Repeat:
-
>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: ian@cs.rice.edu
Cc: matthias@ccs.neu.edu, robby@cs.rice.edu, sk@cs.brown.edu,
        bugs@plt-scheme.org
Subject: Re: all/5058: possible language-level adjustments
Date: Tue, 27 Nov 2001 13:28:27 -0700 (MST)

 Hi Ian,
 
 Quoting ian@cs.rice.edu:
 > remove this restriction from intermediate:
 >     "Identifier required at function-call position"
 >     My reasoning: once they learn about lambda, then
 >     you should be able to show them with the stepper,
 >     how every placeholder just evaluates to (possibly a lambda) value.
 >     This highlight's scheme's simplicity, which appeals to students.
 > [...]
 >     The way i see it, lambda is *the* reason to bump up to intermediate,
 > [...]
 >
 > move "local" to beginner?
 
 In v200, we moved `lambda' to the new "Intermediate with Lambda"
 language, where an identifier is not required in a function position.
 MEanwhile, `local' (and higher-order functions, but without `lambda')
 is the reason to bump up to Intermediate, and it's almost the only
 difference between "Beginner with List Abbreviations" and Intermediate.
 
 If you re-calibrate your language names, v200 is very nearly what you
 wanted, right?
 
 > remove this restriction from advanced:
 >    "+, * etc take >= 2 arguments."
 >    Not a big deal, but again it helps highlight the uniformity of scheme.
 >    (If they have access to "apply" at intermediate,
 >     then "(apply + empty)" should be allowed by advanced!)
 
 Joe Zachary suugested the same change. I'm open to it.
 
 > - delay "eval" and "apply" until advanced?
 
 `eval' is no longer in the teaching languages.
 
 > - allow var-arg's dot syntax, at advanced? (this is kinda cool.)
 > - allow case-lambda, at advanced?
 >      (these two are cool side-topics to mention in challenge labs.)
 
 I could see that change, too.
 
 > - prohibit the placeholder "."
 
 Yes: although 200alpha1 doesn't prohibit `.', v200 will.
 
 Matthew
 
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Dec 11 08:27:33 2001
Responsible-Changed-Why:
    langs
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Tue Dec 11 08:27:33 2001
State-Changed-Why:
    addresses in v200
>Unformatted:

