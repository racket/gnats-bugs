From clements@brinckerhoff.org  Tue Apr 29 15:47:45 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id PAA16849
	for <bugs>; Tue, 29 Apr 2003 15:47:45 -0400
Message-Id: <200304291947.PAA16849@champlain.ccs.neu.edu>
Date: Tue, 29 Apr 2003 15:47:45 -0400
From: John Clements <clements@brinckerhoff.org>
To: bugs@plt-scheme.org
Subject: (module ...) language level misses ids introduced by define-syntax?

>Number:         6237
>Category:       drscheme
>Synopsis:       (module ...) language level misses ids introduced by define-syntax?
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Apr 29 15:50:00 -0400 2003
>Closed-Date:    Sat Mar 12 07:53:59 -0500 2005
>Last-Modified:  Sat Mar 12 07:53:59 -0500 2005
>Originator:     John Clements
>Organization:
titan
>Submitter-Id:   unknown
>Release:        204-cvs28apr2003
>Environment:
macosx "Darwin osterley.ccs.neu.edu 6.5 Darwin Kernel Version 6.5: Mon Apr  7 17:05:38 PDT 2003; root:xnu/xnu-344.32.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
("advanced" "beginning" "beginning-abbr" "compiled" "drscheme" "framework" "help" "icons" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "schemeunit" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("/Users/clements/clements/collects" ("badger" "biff" "clements-lib" "contour-letters" "CVS" "matrix-arithmetic" "mnemisis" "moshimoshi" "no-brainer" "test-tool" "web-utilities")) ("/Users/clements/plt/collects" (".DS_Store" ".gdb_history" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "drjava" "dromedary" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "libsndfile" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "readline" "setup" "sirmail" "slatex" "slibinit" "srfi" "srpersist" "stepper" "string-constants" "syntax" "test-suite" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#f write mixed-fraction-e #f #t debug) (default)))
>Description:
In the program below, the identifier 'foo' is not available in the REPL. Is
this a known limitation of the (module ...) language level in DrScheme?
>How-To-Repeat:
1) start DrScheme
2) enter the following program:
(module module-language-problem mzscheme
  (require (lib "contract.ss"))
    
  (define-syntax (syntactic-abstraction stx)
    (syntax-case stx ()
      [(_)
       #`(begin 
             (provide foo)
             (define (foo v)
               3))]))
  
  (syntactic-abstraction))

3) set the language level to (module ...)
4) click execute
5) enter 'foo' in the REPL window
-> undefined identifier.
>Fix:
>Release-Note:
>Audit-Trail:
Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Tue Apr 29 15:59:47 2003
Responsible-Changed-Why:
    rbf

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org, mflatt@cs.utah.edu
Subject: Re: all/6237: (module ...) language level misses ids introduced by define-syntax?
Date: Tue, 29 Apr 2003 14:57:49 -0500

 This is actually the correct behavior. `foo' is not bound in the
 top-level of the module either:
 
 (module module-language-problem mzscheme
   (require (lib "contract.ss"))
     
   (define-syntax (syntactic-abstraction stx)
     (syntax-case stx ()
       [(_)
        #`(begin 
              (provide foo)
              (define (foo v)
                3))]))
   
   (syntactic-abstraction)
   
   foo)
 
 expand: unbound variable in module in: foo
 
 The REPL gets only those things available in the toplevel of the module.
 
 Robby

From: John Clements <clements@brinckerhoff.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, mflatt@cs.utah.edu
Subject: Re: all/6237: (module ...) language level misses ids introduced by define-syntax?
Date: Tue, 29 Apr 2003 17:28:05 -0400

 On Tuesday, April 29, 2003, at 03:57  PM, Robby Findler wrote:
 
 > This is actually the correct behavior. `foo' is not bound in the
 > top-level of the module either:
 >
 > (module module-language-problem mzscheme
 >   (require (lib "contract.ss"))
 >
 >   (define-syntax (syntactic-abstraction stx)
 >     (syntax-case stx ()
 >       [(_)
 >        #`(begin
 >              (provide foo)
 >              (define (foo v)
 >                3))]))
 >
 >   (syntactic-abstraction)
 >
 >   foo)
 >
 > expand: unbound variable in module in: foo
 >
 > The REPL gets only those things available in the toplevel of the 
 > module.
 
 Interesting.  OTOH, the 'foo' identifier is actually provided by the 
 module:
 
 (module module-language-problem mzscheme
    (require (lib "contract.ss"))
 
    (define-syntax (syntactic-abstraction stx)
      (syntax-case stx ()
        [(_)
         #`(begin
               (provide foo)
               (define (foo v)
                 3))]))
 
    (syntactic-abstraction))
 
 (require module-language-problem)
 
 (foo 14)
 
 =>
 
 3
 
 (in the pretty big language).
 
 I suppose this all makes sense; it's just a little counter-intuitive; I 
 somehow imagine that the 'provide'd identifiers will also be available 
 in the REPL, but I can see how they wouldn't be.
 
 You can go ahead and close this PR, if you like.
 
 john
 

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org, mflatt@cs.utah.edu
Subject: Re: all/6237: (module ...) language level misses ids introduced by define-syntax?
Date: Tue, 29 Apr 2003 17:32:07 -0500

 It's a symptom of the underlying wierdness: you can provide identifiers
 that aren't defined at the toplevel. I'm not really saying its not a
 bug; I'm handing off responsibilyt for justifying the non-buggyenss to
 Matthew :)
 
 But, I suspect that this is indeed tyed up in the way that module works
 and cannot be considered a bug in an implementation. Whether we have
 the right model is another question.
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: all/6237: (module ...) language level misses ids introduced by define-syntax?
Date: Tue, 29 Apr 2003 18:52:10 -0600

 At Tue, 29 Apr 2003 17:28:05 -0400, John Clements wrote:
 > Interesting.  OTOH, the 'foo' identifier is actually provided by the 
 > module:
 >
 > (module module-language-problem mzscheme
 >    (require (lib "contract.ss"))
 > 
 >    (define-syntax (syntactic-abstraction stx)
 >      (syntax-case stx ()
 >        [(_)
 >         #`(begin
 >               (provide foo)
 >               (define (foo v)
 >                 3))]))
 > 
 >    (syntactic-abstraction))
 
 Internal names are lexically scoped identifiers. External names are
 just symbols.
 
 It might help to think of `(provide foo)' as shorthand for
 `(provide (rename foo foo))'.
        identifier, -^   ^-- symbol,
         hygienic            not hygienic
 
 Matthew
 
State changed from "open" to "closed" by robby at Sat, 12 Mar 2005 07:53:59 -0500
Reason>>> .

>Unformatted:
