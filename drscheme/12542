From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Feb  6 16:36:39 2012
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q16Laa3V024944
	for <bugs@bugs.plt-scheme.org>; Mon, 6 Feb 2012 16:36:36 -0500
Message-Id: <201202062136.q16LaYTA024938@champlain.ccs.neu.edu>
Date: Mon, 6 Feb 2012 16:36:34 -0500
From: samth@ccs.neu.edu
To: bugs@racket-lang.org
Subject: error messages from online check syntax

>Number:         12542
>Category:       drscheme
>Synopsis:       error messages from online check syntax
>Class:          sw-bug
>Responsible:    tewk
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Feb 06 16:40:01 -0500 2012
>Closed-Date:    Wed Feb 08 12:26:53 -0500 2012
>Last-Modified:  Wed Feb 08 12:26:53 -0500 2012
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1.5--2012-02-03(25ef4ab/g)
>Environment:
unix "Linux loki 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 332069160
Links: (links) = ("gcstat" "raco-git" "assignments" "var" "disassemble" "book" "class"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/samth/sw/plt/add-on/5.2.1.5/collects"
 ("info-domain"))
("/home/samth/sw/plt/collects"
 ("datalog" "scriblib" "html" "racklog" "drracket" "dynext" "honu" "2htdp" "graphics" "make" "eopl" "test-box-recovery" "hierlist" "racket" "rackunit" "openssl" "r5rs" "algol60" "mzcom" "redex" "texpict" "swindle" "defaults" "trace" "combinator-parser" "mysterx" "info-domain" "meta" "teachpack" "setup" "repo-time-stamp" "games" "r6rs" "icons" "typed-scheme" "test-engine" "lazy" "stepper" "at-exp" "planet" "tests" "rnrs" "db" "web-server" "framework" "net" "scribblings" "string-constants" "help" "browser" "tex2page" "mzlib" "parser-tools" "errortrace" "data" "sirmail" "plot" "launcher" "handin-client" "syntax" "profile" "s-exp" ".gitignore" "slideshow" "plai" "htdp" "typed-racket" "scheme" "syntax-color" "guibuilder" "drscheme" "raco" "srfi" "reader" "preprocessor" "compiler" "config" "mred" "handin-server" "schemeunit" "typed" "macro-debugger" "deinprogramm" "afm" "ffi" "gui-debugger" "readline" "scribble" "unstable" "picturing-programs" "file" "sgl" "images" "wxme" "xrepl" !
 "lang" "xml" "mrlib" "version" "frtime" "mzscheme" "embedded-gui" "slatex"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #t))
>Description:
I'm getting the following output on stdout from online check syntax, and online check syntax is failing to complete.

place-channel-put: value not allowed in a message: '#(handler-results (((#<path:/home/samth/sw/plt/collects/drracket/private/syncheck/online-comp.rkt> go) ((syncheck:add-require-open-menu "unsaved editor" 6 17 #<path:/home/samth/sw/plt/collects/scheme/base.rkt>) (syncheck:add-require-open-menu "unsaved ...

This is with the program from bug 9924 in the definitions window. 
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: samth@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12542: error messages from online check syntax
Date: Mon, 6 Feb 2012 16:06:04 -0600

 Using this diff:
 
 [robby@yanpu] ~/git/plt/collects/drracket$ git diff .
 diff --git a/collects/drracket/private/expanding-place.rkt
 b/collects/drracket/private/expanding-pla
 index f9d0032..76158f4 100644
 --- a/collects/drracket/private/expanding-place.rkt
 +++ b/collects/drracket/private/expanding-place.rkt
 @@ -163,6 +163,7 @@
        (handle-evt
         result-chan
         (λ (val)
 +         ((dynamic-require 'racket/pretty 'pretty-write) val)
           (place-channel-put response-pc (vector 'handler-results val))))
        (handle-evt
         exn-chan
 [robby@yanpu] ~/git/plt/collects/drracket$
 
 
 I can see the value being sent. It seems to be pairs of symbols,
 paths, place-channels, booleans, numbers, and nulls.
 
 So I don't think that this value is actually illegal.
 
 Perhaps the error message could be adjusted to hone in on the actual
 sub-part that isn't liked, and include both in the error message?
 
 Robby
 
 On Mon, Feb 6, 2012 at 3:40 PM,  <samth@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12542
 >
 > Reported by Sam TH for release: 5.2.1.5--2012-02-03(25ef4ab/g)
 >
 > *** Description:
 > I'm getting the following output on stdout from online check syntax, and online check syntax is failing to complete.
 >
 > place-channel-put: value not allowed in a message: '#(handler-results (((#<path:/home/samth/sw/plt/collects/drracket/private/syncheck/online-comp.rkt> go) ((syncheck:add-require-open-menu "unsaved editor" 6 17 #<path:/home/samth/sw/plt/collects/scheme/base.rkt>) (syncheck:add-require-open-menu "unsaved ...
 >
 > This is with the program from bug 9924 in the definitions window.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux loki 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 332069160
 > Links: (links) = ("gcstat" "raco-git" "assignments" "var" "disassemble" "book" "class"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/samth/sw/plt/add-on/5.2.1.5/collects"
 >  ("info-domain"))
 > ("/home/samth/sw/plt/collects"
 >  ("datalog" "scriblib" "html" "racklog" "drracket" "dynext" "honu" "2htdp" "graphics" "make" "eopl" "test-box-recovery" "hierlist" "racket" "rackunit" "openssl" "r5rs" "algol60" "mzcom" "redex" "texpict" "swindle" "defaults" "trace" "combinator-parser" "mysterx" "info-domain" "meta" "teachpack" "setup" "repo-time-stamp" "games" "r6rs" "icons" "typed-scheme" "test-engine" "lazy" "stepper" "at-exp" "planet" "tests" "rnrs" "db" "web-server" "framework" "net" "scribblings" "string-constants" "help" "browser" "tex2page" "mzlib" "parser-tools" "errortrace" "data" "sirmail" "plot" "launcher" "handin-client" "syntax" "profile" "s-exp" ".gitignore" "slideshow" "plai" "htdp" "typed-racket" "scheme" "syntax-color" "guibuilder" "drscheme" "raco" "srfi" "reader" "preprocessor" "compiler" "config" "mred" "handin-server" "schemeunit" "typed" "macro-debugger" "deinprogramm" "afm" "ffi" "gui-debugger" "readline" "scribble" "unstable" "picturing-programs" "file" "sgl" "images" "wxme" "xrepl" !
 >  "lang" "xml" "mrlib" "version" "frtime" "mzscheme" "embedded-gui" "slatex"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #t))
 >
 

Responsible changed from "robby" to "tewk" by robby at Mon, 06 Feb 2012 17:09:19 -0500
Reason>>> I'm moving this over to Kevin in the hope that this is
enough information or, if it isn't, that he'll improve the
error message and move it back over to me.

From: Kevin Tew <tewk@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: samth@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12542: error messages from online check syntax
Date: Mon, 06 Feb 2012 20:50:42 -0700

 Its an uninterned symbol that is causing the problem.
 'g87
 
 Only interned symbols are allowed in place messages.
 
 We can't throw an exception when this error is detected, so we delay the 
 error reporting. At which point in time all we know is it that the error 
 appears somewhere in the message.
 I'm working on a patch that will hopefully make the error reporting better.
 
 Here is a patch you can use in the meantime.
 diff --git a/src/racket/src/place.c b/src/racket/src/place.c
 index e13ab0b..0a29f28 100644
 --- a/src/racket/src/place.c
 +++ b/src/racket/src/place.c
 @@ -1111,6 +1111,12 @@ static void bad_place_message2(Scheme_Object *so, 
 Scheme_Object *o, int can_rais
     }
     if (can_raise_exn)
       bad_place_message(so);
 +  else {
 +    Scheme_Object *a[2];
 +    a[0] = scheme_make_integer(so->type);
 +    a[1] = so;
 +    scheme_printf_utf8("place-channel-put value type ~v not allowed in 
 a message: ~v\n", -1, 2, a);
 +  }
   }
 
 
 
 On 02/06/2012 03:06 PM, Robby Findler wrote:
 > Using this diff:
 >
 > [robby@yanpu] ~/git/plt/collects/drracket$ git diff .
 > diff --git a/collects/drracket/private/expanding-place.rkt
 > b/collects/drracket/private/expanding-pla
 > index f9d0032..76158f4 100644
 > --- a/collects/drracket/private/expanding-place.rkt
 > +++ b/collects/drracket/private/expanding-place.rkt
 > @@ -163,6 +163,7 @@
 >         (handle-evt
 >          result-chan
 >          (λ (val)
 > +         ((dynamic-require 'racket/pretty 'pretty-write) val)
 >            (place-channel-put response-pc (vector 'handler-results val))))
 >         (handle-evt
 >          exn-chan
 > [robby@yanpu] ~/git/plt/collects/drracket$
 >
 >
 > I can see the value being sent. It seems to be pairs of symbols,
 > paths, place-channels, booleans, numbers, and nulls.
 >
 > So I don't think that this value is actually illegal.
 >
 > Perhaps the error message could be adjusted to hone in on the actual
 > sub-part that isn't liked, and include both in the error message?
 >
 > Robby
 >
 > On Mon, Feb 6, 2012 at 3:40 PM,<samth@ccs.neu.edu>  wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12542
 >>
 >> Reported by Sam TH for release: 5.2.1.5--2012-02-03(25ef4ab/g)
 >>
 >> *** Description:
 >> I'm getting the following output on stdout from online check syntax, and online check syntax is failing to complete.
 >>
 >> place-channel-put: value not allowed in a message: '#(handler-results (((#<path:/home/samth/sw/plt/collects/drracket/private/syncheck/online-comp.rkt>  go) ((syncheck:add-require-open-menu "unsaved editor" 6 17 #<path:/home/samth/sw/plt/collects/scheme/base.rkt>) (syncheck:add-require-open-menu "unsaved ...
 >>
 >> This is with the program from bug 9924 in the definitions window.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux loki 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 332069160
 >> Links: (links) = ("gcstat" "raco-git" "assignments" "var" "disassemble" "book" "class"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/samth/sw/plt/add-on/5.2.1.5/collects"
 >>   ("info-domain"))
 >> ("/home/samth/sw/plt/collects"
 >>   ("datalog" "scriblib" "html" "racklog" "drracket" "dynext" "honu" "2htdp" "graphics" "make" "eopl" "test-box-recovery" "hierlist" "racket" "rackunit" "openssl" "r5rs" "algol60" "mzcom" "redex" "texpict" "swindle" "defaults" "trace" "combinator-parser" "mysterx" "info-domain" "meta" "teachpack" "setup" "repo-time-stamp" "games" "r6rs" "icons" "typed-scheme" "test-engine" "lazy" "stepper" "at-exp" "planet" "tests" "rnrs" "db" "web-server" "framework" "net" "scribblings" "string-constants" "help" "browser" "tex2page" "mzlib" "parser-tools" "errortrace" "data" "sirmail" "plot" "launcher" "handin-client" "syntax" "profile" "s-exp" ".gitignore" "slideshow" "plai" "htdp" "typed-racket" "scheme" "syntax-color" "guibuilder" "drscheme" "raco" "srfi" "reader" "preprocessor" "compiler" "config" "mred" "handin-server" "schemeunit" "typed" "macro-debugger" "deinprogramm" "afm" "ffi" "gui-debugger" "readline" "scribble" "unstable" "picturing-programs" "file" "sgl" "images" "wxme" "xrepl" !
 >>   "lang" "xml" "mrlib" "version" "frtime" "mzscheme" "embedded-gui" "slatex"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #t))
 >>
 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Kevin Tew <tewk@cs.utah.edu>
Cc: samth@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12542: error messages from online check syntax
Date: Tue, 7 Feb 2012 12:33:52 -0600

 Is this an intentional design choice?
 
 It seems that sending something back and forth across a place channel
 already doesn't preserve eq?-ness, so uninterned symbols wouldn't be
 different in that regard (my experiment below).
 
 Robby
 
 
 #lang racket
 (define pc (dynamic-place "tmpp1.rkt" 'go))
 (define c (cons 1 2))
 (define (wash x)
   (place-channel-put pc x)
   (place-channel-get pc))
 
 (eq? (wash c) c)
 (equal? (wash c) c)
 
 (define i (expt 2 72))
 (eq? (wash i) i)
 (equal? (wash i) i)
 
 --------
 
 ;; tmpp1.rkt
 #lang racket
 (provide go)
 (define (go pc)
   (let loop ()
     (place-channel-put pc (place-channel-get pc))
     (loop)))
 
 On Mon, Feb 6, 2012 at 9:50 PM, Kevin Tew <tewk@cs.utah.edu> wrote:
 > Its an uninterned symbol that is causing the problem.
 > 'g87
 >
 > Only interned symbols are allowed in place messages.
 >
 > We can't throw an exception when this error is detected, so we delay the
 > error reporting. At which point in time all we know is it that the error
 > appears somewhere in the message.
 > I'm working on a patch that will hopefully make the error reporting better.
 >
 > Here is a patch you can use in the meantime.
 > diff --git a/src/racket/src/place.c b/src/racket/src/place.c
 > index e13ab0b..0a29f28 100644
 > --- a/src/racket/src/place.c
 > +++ b/src/racket/src/place.c
 > @@ -1111,6 +1111,12 @@ static void bad_place_message2(Scheme_Object *so,
 > Scheme_Object *o, int can_rais
 >   }
 >   if (can_raise_exn)
 >     bad_place_message(so);
 > +  else {
 > +    Scheme_Object *a[2];
 > +    a[0] = scheme_make_integer(so->type);
 > +    a[1] = so;
 > +    scheme_printf_utf8("place-channel-put value type ~v not allowed in a
 > message: ~v\n", -1, 2, a);
 > +  }
 >
 >  }
 >
 >
 >
 > On 02/06/2012 03:06 PM, Robby Findler wrote:
 >>
 >> Using this diff:
 >>
 >> [robby@yanpu] ~/git/plt/collects/drracket$ git diff .
 >> diff --git a/collects/drracket/private/expanding-place.rkt
 >> b/collects/drracket/private/expanding-pla
 >> index f9d0032..76158f4 100644
 >> --- a/collects/drracket/private/expanding-place.rkt
 >> +++ b/collects/drracket/private/expanding-place.rkt
 >> @@ -163,6 +163,7 @@
 >>        (handle-evt
 >>         result-chan
 >>         (λ (val)
 >> +         ((dynamic-require 'racket/pretty 'pretty-write) val)
 >>           (place-channel-put response-pc (vector 'handler-results val))))
 >>        (handle-evt
 >>         exn-chan
 >> [robby@yanpu] ~/git/plt/collects/drracket$
 >>
 >>
 >> I can see the value being sent. It seems to be pairs of symbols,
 >> paths, place-channels, booleans, numbers, and nulls.
 >>
 >> So I don't think that this value is actually illegal.
 >>
 >> Perhaps the error message could be adjusted to hone in on the actual
 >> sub-part that isn't liked, and include both in the error message?
 >>
 >> Robby
 >>
 >> On Mon, Feb 6, 2012 at 3:40 PM,<samth@ccs.neu.edu>  wrote:
 >>>
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12542
 >>>
 >>> Reported by Sam TH for release: 5.2.1.5--2012-02-03(25ef4ab/g)
 >>>
 >>> *** Description:
 >>> I'm getting the following output on stdout from online check syntax, and
 >>> online check syntax is failing to complete.
 >>>
 >>> place-channel-put: value not allowed in a message: '#(handler-results
 >>> (((#<path:/home/samth/sw/plt/collects/drracket/private/syncheck/online-comp.rkt>
 >>>  go) ((syncheck:add-require-open-menu "unsaved editor" 6 17
 >>> #<path:/home/samth/sw/plt/collects/scheme/base.rkt>)
 >>> (syncheck:add-require-open-menu "unsaved ...
 >>>
 >>> This is with the program from bug 9924 in the definitions window.
 >>>
 >>> *** How to repeat:
 >>>
 >>>
 >>> *** Environment:
 >>> unix "Linux loki 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC
 >>> 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) =
 >>> 32
 >>> Human Language: english
 >>> (current-memory-use) 332069160
 >>> Links: (links) = ("gcstat" "raco-git" "assignments" "var" "disassemble"
 >>> "book" "class"); (links #:user? #f) = (); (links #:root? #t) = (); (links
 >>> #:user? #f #:root? #t) = ()
 >>>
 >>>
 >>> Collections:
 >>> ("/home/samth/sw/plt/add-on/5.2.1.5/collects"
 >>>  ("info-domain"))
 >>> ("/home/samth/sw/plt/collects"
 >>>  ("datalog" "scriblib" "html" "racklog" "drracket" "dynext" "honu"
 >>> "2htdp" "graphics" "make" "eopl" "test-box-recovery" "hierlist" "racket"
 >>> "rackunit" "openssl" "r5rs" "algol60" "mzcom" "redex" "texpict" "swindle"
 >>> "defaults" "trace" "combinator-parser" "mysterx" "info-domain" "meta"
 >>> "teachpack" "setup" "repo-time-stamp" "games" "r6rs" "icons" "typed-scheme"
 >>> "test-engine" "lazy" "stepper" "at-exp" "planet" "tests" "rnrs" "db"
 >>> "web-server" "framework" "net" "scribblings" "string-constants" "help"
 >>> "browser" "tex2page" "mzlib" "parser-tools" "errortrace" "data" "sirmail"
 >>> "plot" "launcher" "handin-client" "syntax" "profile" "s-exp" ".gitignore"
 >>> "slideshow" "plai" "htdp" "typed-racket" "scheme" "syntax-color"
 >>> "guibuilder" "drscheme" "raco" "srfi" "reader" "preprocessor" "compiler"
 >>> "config" "mred" "handin-server" "schemeunit" "typed" "macro-debugger"
 >>> "deinprogramm" "afm" "ffi" "gui-debugger" "readline" "scribble" "unstable"
 >>> "picturing-programs" "file" "sgl" "images" "wxme" "xrepl" !
 >>>  "lang" "xml" "mrlib" "version" "frtime" "mzscheme" "embedded-gui"
 >>> "slatex"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print
 >>> mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #t))
 >>>
 >
 >
 
From: Kevin Tew <tewk@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org
Cc: tewk@racket-lang.org, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [racket-bug] all/12542: error messages from online check syntax
Date: Tue, 07 Feb 2012 14:29:45 -0700

 On 02/07/2012 11:36 AM, Robby Findler wrote:
 > The following reply was made to PR drscheme/12542 (noted by Gnats).
 >
 > View this PR at:
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=12542
 >
 > ====================
 > From: Robby Findler<robby@eecs.northwestern.edu>
 > To: Kevin Tew<tewk@cs.utah.edu>
 > Cc: samth@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
 >          bug-notification@racket-lang.org
 > Subject: Re: [racket-bug] all/12542: error messages from online check syntax
 > Date: Tue, 7 Feb 2012 12:33:52 -0600
 >
 >   Is this an intentional design choice?
 Yes.
 
 The eq?-ness of an uninterned symbol is a stronger condition than
 the eq?-ness of other types such as cons cells.
 
 We try to preserve this stronger condition by not allowing
 uninterned symbols across place channels.
 
 Mathew suggested that you might be able to use serialize.
 However, two not equal? uninterned symbols, made from the same string, 
 become equal after passing through serialization.
 See example below.
 
 I guess the question is what properties do these symbols ('g87) need 
 after they have been communicated across a place channel?
 Can they be converted to normal symbols before sending them across the 
 place channel?
 
 Kevin
 
 
 #lang racket
 (require racket/serialize)
 
 (define y (string->uninterned-symbol "invalid"))
 (define y1 (string->uninterned-symbol "invalid"))
 (equal? y y1)
 ; #f
 (define z (deserialize (serialize (cons y y))))
 (equal? (car z) (cdr z))
 ; #t
 (define x (deserialize (serialize (cons y y1))))
 (equal? (car x) (cdr x))
 ; #t
 (symbol-interned? y)
 ; #f
 (symbol-interned? (car x))
 ; #f
 (symbol-interned? (cdr x))
 ; #f
 
 
 >
 >   It seems that sending something back and forth across a place channel
 >   already doesn't preserve eq?-ness, so uninterned symbols wouldn't be
 >   different in that regard (my experiment below).
 >
 >   Robby
 >
 >
 >   #lang racket
 >   (define pc (dynamic-place "tmpp1.rkt" 'go))
 >   (define c (cons 1 2))
 >   (define (wash x)
 >     (place-channel-put pc x)
 >     (place-channel-get pc))
 >
 >   (eq? (wash c) c)
 >   (equal? (wash c) c)
 >
 >   (define i (expt 2 72))
 >   (eq? (wash i) i)
 >   (equal? (wash i) i)
 >
 >   --------
 >
 >   ;; tmpp1.rkt
 >   #lang racket
 >   (provide go)
 >   (define (go pc)
 >     (let loop ()
 >       (place-channel-put pc (place-channel-get pc))
 >       (loop)))
 >
 >   On Mon, Feb 6, 2012 at 9:50 PM, Kevin Tew<tewk@cs.utah.edu>  wrote:
 >   >  Its an uninterned symbol that is causing the problem.
 >   >  'g87
 >   >
 >   >  Only interned symbols are allowed in place messages.
 >   >
 >   >  We can't throw an exception when this error is detected, so we delay the
 >   >  error reporting. At which point in time all we know is it that the error
 >   >  appears somewhere in the message.
 >   >  I'm working on a patch that will hopefully make the error reporting better.
 >   >
 >   >  Here is a patch you can use in the meantime.
 >   >  diff --git a/src/racket/src/place.c b/src/racket/src/place.c
 >   >  index e13ab0b..0a29f28 100644
 >   >  --- a/src/racket/src/place.c
 >   >  +++ b/src/racket/src/place.c
 >   >  @@ -1111,6 +1111,12 @@ static void bad_place_message2(Scheme_Object *so,
 >   >  Scheme_Object *o, int can_rais
 >   >    }
 >   >    if (can_raise_exn)
 >   >      bad_place_message(so);
 >   >  +  else {
 >   >  +    Scheme_Object *a[2];
 >   >  +    a[0] = scheme_make_integer(so->type);
 >   >  +    a[1] = so;
 >   >  +    scheme_printf_utf8("place-channel-put value type ~v not allowed in a
 >   >  message: ~v\n", -1, 2, a);
 >   >  +  }
 >   >
 >   >   }
 >   >
 >   >
 >   >
 >   >  On 02/06/2012 03:06 PM, Robby Findler wrote:
 >   >>
 >   >>  Using this diff:
 >   >>
 >   >>  [robby@yanpu] ~/git/plt/collects/drracket$ git diff .
 >   >>  diff --git a/collects/drracket/private/expanding-place.rkt
 >   >>  b/collects/drracket/private/expanding-pla
 >   >>  index f9d0032..76158f4 100644
 >   >>  --- a/collects/drracket/private/expanding-place.rkt
 >   >>  +++ b/collects/drracket/private/expanding-place.rkt
 >   >>  @@ -163,6 +163,7 @@
 >   >>         (handle-evt
 >   >>          result-chan
 >   >>          (λ (val)
 >   >>  +         ((dynamic-require 'racket/pretty 'pretty-write) val)
 >   >>            (place-channel-put response-pc (vector 'handler-results val))))
 >   >>         (handle-evt
 >   >>          exn-chan
 >   >>  [robby@yanpu] ~/git/plt/collects/drracket$
 >   >>
 >   >>
 >   >>  I can see the value being sent. It seems to be pairs of symbols,
 >   >>  paths, place-channels, booleans, numbers, and nulls.
 >   >>
 >   >>  So I don't think that this value is actually illegal.
 >   >>
 >   >>  Perhaps the error message could be adjusted to hone in on the actual
 >   >>  sub-part that isn't liked, and include both in the error message?
 >   >>
 >   >>  Robby
 >   >>
 >   >>  On Mon, Feb 6, 2012 at 3:40 PM,<samth@ccs.neu.edu>   wrote:
 >   >>>
 >   >>>  A new problem report is waiting at
 >   >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=12542
 >   >>>
 >   >>>  Reported by Sam TH for release: 5.2.1.5--2012-02-03(25ef4ab/g)
 >   >>>
 >   >>>  *** Description:
 >   >>>  I'm getting the following output on stdout from online check syntax, and
 >   >>>  online check syntax is failing to complete.
 >   >>>
 >   >>>  place-channel-put: value not allowed in a message: '#(handler-results
 >   >>>  (((#<path:/home/samth/sw/plt/collects/drracket/private/syncheck/online-comp.rkt>
 >   >>>   go) ((syncheck:add-require-open-menu "unsaved editor" 6 17
 >   >>>  #<path:/home/samth/sw/plt/collects/scheme/base.rkt>)
 >   >>>  (syncheck:add-require-open-menu "unsaved ...
 >   >>>
 >   >>>  This is with the program from bug 9924 in the definitions window.
 >   >>>
 >   >>>  *** How to repeat:
 >   >>>
 >   >>>
 >   >>>  *** Environment:
 >   >>>  unix "Linux loki 3.0.0-14-generic #23-Ubuntu SMP Mon Nov 21 20:28:43 UTC
 >   >>>  2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) =
 >   >>>  32
 >   >>>  Human Language: english
 >   >>>  (current-memory-use) 332069160
 >   >>>  Links: (links) = ("gcstat" "raco-git" "assignments" "var" "disassemble"
 >   >>>  "book" "class"); (links #:user? #f) = (); (links #:root? #t) = (); (links
 >   >>>  #:user? #f #:root? #t) = ()
 >   >>>
 >   >>>
 >   >>>  Collections:
 >   >>>  ("/home/samth/sw/plt/add-on/5.2.1.5/collects"
 >   >>>   ("info-domain"))
 >   >>>  ("/home/samth/sw/plt/collects"
 >   >>>   ("datalog" "scriblib" "html" "racklog" "drracket" "dynext" "honu"
 >   >>>  "2htdp" "graphics" "make" "eopl" "test-box-recovery" "hierlist" "racket"
 >   >>>  "rackunit" "openssl" "r5rs" "algol60" "mzcom" "redex" "texpict" "swindle"
 >   >>>  "defaults" "trace" "combinator-parser" "mysterx" "info-domain" "meta"
 >   >>>  "teachpack" "setup" "repo-time-stamp" "games" "r6rs" "icons" "typed-scheme"
 >   >>>  "test-engine" "lazy" "stepper" "at-exp" "planet" "tests" "rnrs" "db"
 >   >>>  "web-server" "framework" "net" "scribblings" "string-constants" "help"
 >   >>>  "browser" "tex2page" "mzlib" "parser-tools" "errortrace" "data" "sirmail"
 >   >>>  "plot" "launcher" "handin-client" "syntax" "profile" "s-exp" ".gitignore"
 >   >>>  "slideshow" "plai" "htdp" "typed-racket" "scheme" "syntax-color"
 >   >>>  "guibuilder" "drscheme" "raco" "srfi" "reader" "preprocessor" "compiler"
 >   >>>  "config" "mred" "handin-server" "schemeunit" "typed" "macro-debugger"
 >   >>>  "deinprogramm" "afm" "ffi" "gui-debugger" "readline" "scribble" "unstable"
 >   >>>  "picturing-programs" "file" "sgl" "images" "wxme" "xrepl" !
 >   >>>   "lang" "xml" "mrlib" "version" "frtime" "mzscheme" "embedded-gui"
 >   >>>  "slatex"))
 >   >>>
 >   >>>  Computer Language: (("Determine language from source") (#(#t print
 >   >>>  mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #t))
 >   >>>
 >   >
 >   >
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Kevin Tew <tewk@cs.utah.edu>
Cc: bugs@racket-lang.org, tewk@racket-lang.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [racket-bug] all/12542: error messages from online check syntax
Date: Tue, 7 Feb 2012 15:46:49 -0600

 On Tue, Feb 7, 2012 at 3:29 PM, Kevin Tew <tewk@cs.utah.edu> wrote:
 > On 02/07/2012 11:36 AM, Robby Findler wrote:
 >>
 >> The following reply was made to PR drscheme/12542 (noted by Gnats).
 >>
 >> View this PR at:
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12542
 >>
 >> ====================
 >> From: Robby Findler<robby@eecs.northwestern.edu>
 >> To: Kevin Tew<tewk@cs.utah.edu>
 >> Cc: samth@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
 >>         bug-notification@racket-lang.org
 >> Subject: Re: [racket-bug] all/12542: error messages from online check
 >> syntax
 >> Date: Tue, 7 Feb 2012 12:33:52 -0600
 >>
 >>
 >>  Is this an intentional design choice?
 >
 > Yes.
 >
 > The eq?-ness of an uninterned symbol is a stronger condition than
 > the eq?-ness of other types such as cons cells.
 
 FWIW, (and this is something that I've tried to argue with Matthew
 about unsuccessfully in the past :) is that the eq?-ness guarantees of
 cons cells are already too strong. In particular, 'cons' in Racket is
 currently guaranteed to require a fresh thing that isn't eq? to
 anything. This is relied on somewhere in our codebase too (but I don't
 know where exactly). So this means that the compiler cannot push cons
 cell creation around in the same way it can push other things around.
 
 Not strictly on the point, tho. :)
 
 Robby
 

State changed from "open" to "closed" by samth at Wed, 08 Feb 2012 12:26:53 -0500
Reason>>> Fixed by 4f3bec1792 by tewk

