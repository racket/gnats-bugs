From nobody@champlain.ccs.neu.edu  Thu Oct 31 01:43:15 2002
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id BAA01381
	for bugs@plt-scheme.org; Thu, 31 Oct 2002 01:43:15 -0500
Message-Id: <200210310643.BAA01381@champlain.ccs.neu.edu>
Date: Thu, 31 Oct 2002 01:43:15 -0500
From: kathyg@cs.utah.edu
To: bugs@plt-scheme.org
Subject: Giving make-exn null for the first argument raises internal error

>Number:         5930
>Category:       drscheme
>Synopsis:       Giving make-exn null for the first argument raises internal error
>Confidential:   no
>Severity:       non-critical
>Priority:       low
>Responsible:    robby
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Thu Oct 31 01:50:06 EST 2002
>Closed-Date:    Tue Jan 07 12:39:24 EST 2003
>Last-Modified:  Tue Jan 07 12:39:24 EST 2003
>Originator:     Kathy Gray
>Release:        202.5
>Organization:
plt
>Environment:
unix-other
>Description:
Giving (make-exn ...) null for the first argument instead of
a string causes the following internal error message to be 
reported: insert in text% (character without position case): 
expects 1 arguement, given 4: () 69 69 #f

And then DrScheme stops responding.

>How-To-Repeat:
(raise (make-exn null (current-continuation-marks)))
>Fix:

>Release-Note:

>Audit-Trail:

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: mflatt@cs.utah.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/5930: Giving make-exn null for the first argument raises internal error
Date: Thu, 31 Oct 2002 07:54:33 -0600

 From what I can tell by reading the docs, this should have raised an
 exception about a bad input to make-exn? 
 
 Also, if you do add that check in, there may be lots of errors, since
 the docs promise immutable strings and there probably are lots of
 mutable ones being passed in.
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/5930: Giving make-exn null for the first argument raises internal error
Date: Thu, 31 Oct 2002 06:57:47 -0700 (MST)

 I'll correct the docs to clarify that the types on exn fields tell you
 what the system provides for the exns that it creates, and that there
 are no checks in make-...
 
 Matthew
 
 At Thu, 31 Oct 2002 07:54:33 -0600, Robert Bruce Findler wrote:
 > From what I can tell by reading the docs, this should have raised an
 > exception about a bad input to make-exn? 
 > 
 > Also, if you do add that check in, there may be lots of errors, since
 > the docs promise immutable strings and there probably are lots of
 > mutable ones being passed in.
 > 
 > Robby
 > 
 

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/5930: Giving make-exn null for the first argument raises internal error
Date: Thu, 31 Oct 2002 08:07:11 -0600

 Matthew writes:
 > I'll correct the docs to clarify that the types on exn fields tell you
 > what the system provides for the exns that it creates, and that there
 > are no checks in make-...
 
 I think that this is wrong. In light of the work we are now doing to
 collaborate on contracts shouldn't you agree?! If not, can you explain
 yourself?
 
 I don't mind shelving the PR for a while if that's what it takes -- or
 would you consider using (lib "contract.ss") to implement these checks?
 Could you could generate them from the makeexn.ss stuff? They only
 tricky part seems to be to handle the fact that exceptions are in the
 system in an earlier state than the contract checking.
 
 Robby
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/5930: Giving make-exn null for the first argument raises internal error
Date: Thu, 31 Oct 2002 07:25:36 -0700 (MST)

 Checking the `make-' argumens would be meaningless to exn consumers,
 because someone can always derive a new struct type to get a new
 make-...
 
 At Thu, 31 Oct 2002 08:07:11 -0600, Robert Bruce Findler wrote:
 > Matthew writes:
 > > I'll correct the docs to clarify that the types on exn fields tell you
 > > what the system provides for the exns that it creates, and that there
 > > are no checks in make-...
 > 
 > I think that this is wrong. In light of the work we are now doing to
 > collaborate on contracts shouldn't you agree?! If not, can you explain
 > yourself?
 > 
 > I don't mind shelving the PR for a while if that's what it takes -- or
 > would you consider using (lib "contract.ss") to implement these checks?
 > Could you could generate them from the makeexn.ss stuff? They only
 > tricky part seems to be to handle the fact that exceptions are in the
 > system in an earlier state than the contract checking.
 > 
 > Robby
 > 
 

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/5930: Giving make-exn null for the first argument raises internal error
Date: Thu, 31 Oct 2002 08:36:35 -0600

 At Thu, 31 Oct 2002 07:25:36 -0700 (MST), Matthew Flatt wrote:
 > Checking the `make-' argumens would be meaningless to exn consumers,
 > because someone can always derive a new struct type to get a new
 > make-...
 
 That's not a problem if I added contracts to define-struct and
 propogated the contract information from super to sub structure. I
 could even implement this so that the macro information propogated from
 (the new) define-struct/contract to define-struct/contract doesn't work
 with define-struct. If it really mattered for backwards compatibility,
 define-struct could be changed to short hand for define-struct/contract
 with `any' as the contracts in the fields (that is, it would follow the
 checking protocol for the super makers).
 
 If I were to do that, would you use it for the exception hierarchy?
 
 Robby
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/5930: Giving make-exn null for the first argument raises internal error
Date: Thu, 31 Oct 2002 08:14:46 -0700 (MST)

 There are many problems, still, including dealing with
 `make-struct-type' and `shared'.
 
 My point is not that it's impossible, but that it's much much more
 difficult a change that you suggest --- and that's why it isn't done,
 and why it's not planned for the near future.
 
 Matthew
 
 At Thu, 31 Oct 2002 08:36:35 -0600, Robert Bruce Findler wrote:
 > At Thu, 31 Oct 2002 07:25:36 -0700 (MST), Matthew Flatt wrote:
 > > Checking the `make-' argumens would be meaningless to exn consumers,
 > > because someone can always derive a new struct type to get a new
 > > make-...
 > 
 > That's not a problem if I added contracts to define-struct and
 > propogated the contract information from super to sub structure. I
 > could even implement this so that the macro information propogated from
 > (the new) define-struct/contract to define-struct/contract doesn't work
 > with define-struct. If it really mattered for backwards compatibility,
 > define-struct could be changed to short hand for define-struct/contract
 > with `any' as the contracts in the fields (that is, it would follow the
 > checking protocol for the super makers).
 > 
 > If I were to do that, would you use it for the exception hierarchy?
 > 
 > Robby
 > 
 
Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Tue Jan  7 12:39:24 2003
Responsible-Changed-Why:
    rbf
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Tue Jan  7 12:39:24 2003
State-Changed-Why:
    I changed all of the calls to exn-message in drscheme and the
    framework so that they don't assume that a string comes back.
    (just inserted (format "~a" ...) around each one, actually).
>Unformatted:

