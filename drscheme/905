From nobody@cs.rice.edu  Wed Mar  3 15:23:06 1999
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id PAA08555
	for <plt-gnats@cs.rice.edu>; Wed, 3 Mar 1999 15:23:05 -0600 (CST)
Message-Id: <199903032123.PAA16843@web.cs.rice.edu>
Date: Wed, 3 Mar 1999 15:23:05 -0600 (CST)
From: clements@cs.rice.edu
Reply-To: clements@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: synrule.ss library buggy 

>Number:         905
>Category:       drscheme
>Synopsis:       synrule.ss library buggy
>Class:          sw-bug
>Responsible:    steck
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Mar 03 16:30:01 -0500 1999
>Last-Modified:  Mon May 05 14:45:51 -0400 2008
>Originator:     John Brinckerhoff Clements
>Organization:
titan
>Submitter-Id:   unknown
>Release:        100/30
>Environment:
Mac PowerPC
>Description:
>How-To-Repeat:
;; run this program:

(require-library "pretty.ss")
(require-library "synrule.ss")

(define-syntax form
  (syntax-rules (export)
		((form name (export export-var ...) entry ...)
		 (let* (entry ...)
		   (list export-var ...)))))

(pretty-print
 (expand-defmacro
  '(form this-form
	 (export product)
	 (field input-1 #f (prompt "gimme a dollar value" dollars))
	 (field input-2 #f (prompt "gimme a number between 0.0 and 1.0" scalar))
	 (assertion (and (> input-2 (make-scalar 0.0)) (> (make-scalar 1.0) input-2)))
	 (field product #f (calculated (* input-1 input-2))))))

;;;The rhs's of the lets in the output appear to be truncated. 

;;;signed, robby (this line added by john)


>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.rice.edu>
To: clements@cs.rice.edu
Cc: robby@cs.rice.edu, shriram@cs.rice.edu, plt-gnats@cs.rice.edu
Subject: Re: all/905: synrule.ss library buggy 
Date: Wed, 3 Mar 1999 15:49:49 -0700

 The syntax-rules implementation does not check the well-formedness of
 let expressions at all; it just assumes that the input is well-formed.
 For example, when it gets (let ([x 10 z]) x), it essentially assumes
 (let ([x 10] x).
 
 Smaller example:
 
  > (define-syntax m (syntax-rules () ((_ l b) (let l b))))
  > (m ([x 10 z]) x)
  10
 
 Note that (let ([x]) x) results in a cadr error:
 
  > (m ([x]) x)
  cadr: expects argument of type <cadrable value>; given (x)
 

From: Robby Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.rice.edu>
Cc: clements@cs.rice.edu, shriram@cs.rice.edu, plt-gnats@cs.rice.edu
Subject: Re: all/905: synrule.ss library buggy
Date: Wed, 03 Mar 1999 17:07:48 -0600

 Matthew Flatt wrote:
 > 
 > The syntax-rules implementation does not check the well-formedness of
 > let expressions at all; it just assumes that the input is well-formed.
 
 
 Ah, right. syntax-rules knows about let in order to decide how to
 continue the expansion. I should have guessed.
 
 Robby

State-Changed-From-To: open-closed
State-Changed-By: steck
State-Changed-When: Fri Apr  2 11:01:45 1999
State-Changed-Why:
It looks like no further action is needed.
>Unformatted:
