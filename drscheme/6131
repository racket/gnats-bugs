From nobody@champlain.ccs.neu.edu  Sat Feb 22 13:56:22 2003
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id NAA12336
	for bugs@plt-scheme.org; Sat, 22 Feb 2003 13:56:22 -0500
Message-Id: <200302221856.NAA12336@champlain.ccs.neu.edu>
Date: Sat, 22 Feb 2003 13:56:22 -0500
From: steck@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Auto-complete, again

>Number:         6131
>Category:       drscheme
>Synopsis:       Auto-complete, again
>Class:          change-request
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Feb 22 14:00:00 -0500 2003
>Closed-Date:    Fri Dec 02 18:19:27 -0500 2011
>Last-Modified:  Fri Dec 02 18:19:27 -0500 2011
>Originator:     Paul Steckler
>Organization:
plt
>Submitter-Id:   unknown
>Release:        205
>Environment:
unknown-platform
>Description:
In the past, a number of people have requested 
auto-complete a la Visual<mumble> for DrScheme.
I think the reason this was rejected was that it 
was too hard to know what's in scope.

With modules, it seems like it's a tractable problem.
The module language (typically `mzscheme') gives you one 
set of names, and the require'd files and libraries give 
you others.

Besides autocompleting names in scope, the known names 
could have hyperlinks that would search Help Desk for  
those names.


>How-To-Repeat:
>Fix:
>Release-Note:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: steck@ccs.neu.edu
Cc: bugs@plt-scheme.org, plt-design@ccs.neu.edu
Subject: Re: all/6131: Auto-complete, again
Date: Sat, 22 Feb 2003 20:46:17 -0500

 On Saturday, February 22, 2003, at 01:56 PM, steck@ccs.neu.edu wrote:
 > In the past, a number of people have requested
 > auto-complete a la Visual<mumble> for DrScheme.
 > I think the reason this was rejected was that it
 > was too hard to know what's in scope.
 >
 > With modules, it seems like it's a tractable problem.
 > The module language (typically `mzscheme') gives you one
 > set of names, and the require'd files and libraries give
 > you others.
 >
 > Besides autocompleting names in scope, the known names
 > could have hyperlinks that would search Help Desk for
 > those names.
 
 This problem seems quite similar to syntax-coloring.  If 
 syntax-coloring is not practical, then (I claim) neither is 
 auto-completion.
 
 john
 

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: steck@ccs.neu.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/6131: Auto-complete, again
Date: Wed, 31 Dec 1969 18:18:01 -0600

 We still have problems: 1) we cannot do it for partially typed in 
 programs and 2) it takes a long time to expand a program, even if it is 
 complete.
 
 It would be nice to make progress on these, but I'm not sure how to do 
 it, yet.
 
 Robby
 

From: Paul Schlie <schlie@attbi.com>
To: <bugs@plt-scheme.org>
Cc: <plt-design@ccs.neu.edu>, <robby@cs.uchicago.edu>,
        <clements@brinckerhoff.org>
Subject: Re: all/6131: Auto-complete, again
Date: Sun, 23 Feb 2003 11:30:12 -0500

 Although not as elegant as being context/syntax/scope sensitive, but
 I believe a dumb auto-complete can be more helpful than not, i.e.:
 
 (define (find re-string)
     (let match ( (re (regexp (string-append "^.*" re-string ".*$")))
                  (rv #f) (gv (namespace-mapped-symbols)) )
         (if (pair? gv)
             (let ( (mv (regexp-match re (symbol->string (car gv)))))
                 (when (list? mv)
                     (if (list? rv)
                         (append! rv mv)
                         (set! rv mv)))
                 (match re rv (cdr gv)))
             rv)))
 
 Will return a list of symbol/strings which match or contains an arbitrary
 regular expression input symbol/string; which I use occasionally to help
 find previously defined symbol names, or to simply check if a library
 function or variable of some  approximate spelling is available/defined.
 
 So possibly, as a temporary alternative to something fancier:
 
 - user types/enters their input as a sequence of symbols/strings ...
 - upon entering an <esc><tab> (or whatever), the last entered symbol/string
   fragment is used as a regular expression for (find ...); which replaces
   it with the first matching symbol/sting returned.
 - subsequent <esc><tab> (or whatever), will replace the substituted
   symbol/string with the next matching symbol/string previously found,
   until the substituted symbol/string is either:
   - canceled by the user by entering an <esc><shift><tab> (or whatever),
     which replaces the substituted symbol/string with the originally entered
     symbol/string used as the regular find expression.
   - or otherwise accepted, upon the entry of any other character input.
 
 Just thoughts, -paul-
 
Responsible-Changed-From-To: steck->nobody
Responsible-Changed-By: eli
Responsible-Changed-When: Sun, 28 Mar 2004 23:21:16 -0500
Responsible-Changed-Why:
Unclaimed



View:
  http://bugs.plt-scheme.org/query/gnatsweb.pl?cmd=view+audit-trail&pr=6131
Edit:
  https://internal.plt-scheme.org/bugs/gnatsweb.pl?cmd=edit&pr=6131&database=default
State changed from "open" to "closed" by samth at Fri, 02 Dec 2011 18:19:27 -0500
Reason>>> Autocomplete now exists

>Unformatted:
