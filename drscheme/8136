From apache@plt-scheme.org Wed Jun 21 16:37:00 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k5LKasL4007421
	for <bugs@plt-scheme.org>; Wed, 21 Jun 2006 16:36:54 -0400
Message-Id: <200606212036.k5LKas4F007419@champlain.ccs.neu.edu>
Date: Wed, 21 Jun 2006 16:36:54 -0400
From: cobbe@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: module identity not preserved by module language

>Number:         8136
>Category:       drscheme
>Synopsis:       module identity not preserved by module language
>Class:          sw-bug
>Responsible:    mflatt
>Notify-List:    robby@cs.uchicago.edu
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jun 21 16:40:00 -0400 2006
>Closed-Date:    Wed Aug 02 12:32:39 -0400 2006
>Last-Modified:  Wed Aug 02 15:15:01 -0400 2006
>Originator:     Richard Cobbe
>Organization:
plt
>Submitter-Id:   unknown
>Release:        349.100-svn14jun2006
>Environment:
macosx "Darwin vetinari.ccs.neu.edu 8.6.0 Darwin Kernel Version 8.6.0: Tue Mar  7 16:58:48 PST 2006; root:xnu-792.6.70.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(("/Users/cobbe/plt/trunk/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "profj-beginner" "profj-intermediate" "profj-advanced"))
Collections:
(("/Users/cobbe/Library/PLT Scheme/349.100/collects" non-existent-path) ("/Users/cobbe/plt/trunk/collects" ".svn" "afm" "algol60" "browser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "xelda" "xml"))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
The module language doesn't always preserve module identity -- that is, a module can be loaded more than once (in the same phase) and the two instantiations can be different.  See below for details:
>How-To-Repeat:
Save the following two files as a.ss and b.ss:

(module a mzscheme

  (define-struct a (b))
  (provide (struct a (b))))

(module b mzscheme

  (require "a.ss")

  (define build-a
    (lambda (b)
      (make-a b)))

  (provide build-a))

In DrScheme, in the module language, load a.ss into the definitions window and hit Run.

Then, in the interactions window, do the following:

> (require "b.ss")
> (a? (build-a 3))
#f

There are two distinct structure types, even though they both came from the same module.
>Fix:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: mflatt@cs.utah.edu
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Wed, 21 Jun 2006 22:19:00 -0500

 At Wed, 21 Jun 2006 16:40:08 -0400, cobbe@ccs.neu.edu wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8136
 
 Does this mean that I need to build the name '|,/path/to/place/a| to
 put into the module before putting it into the module? 
 
 Is there a way to call a mzscheme function to do that, or should I just
 build it myself? (should I use path->string? I guess I have to call
 normalize-path? normal-case-path?)
 
 Thanks,
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: mflatt@cs.utah.edu
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Wed, 21 Jun 2006 22:31:30 -0500

 At Wed, 21 Jun 2006 16:40:08 -0400, cobbe@ccs.neu.edu wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8136
 
 Is the correct response this one?
 
   > (require "b.ss") (a? (build-a 3))
   define-values: cannot change identifier that is instantiated as a
   module constant: struct:a
 
 ?
 
 Robby
 
From: Richard Cobbe <cobbe@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Thu, 22 Jun 2006 07:06:16 -0400

 On Wed, Jun 21, 2006 at 10:31:30PM -0500, Robby Findler wrote:
 > At Wed, 21 Jun 2006 16:40:08 -0400, cobbe@ccs.neu.edu wrote:
 > > A new problem report is waiting at
 > >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8136
 > 
 > Is the correct response this one?
 > 
 >   > (require "b.ss") (a? (build-a 3))
 >   define-values: cannot change identifier that is instantiated as a
 >   module constant: struct:a
 > 
 > ?
 
 Well, that would be better than the current behavior; at least I'd know
 that there was a structure mismatch due to an unexpected behavior of the
 module language (or possibly the module system, not sure which).
 
 I'd really prefer that (a? (build-a 3)) evaluate to #t, though.
 
 This came up as I was debugging a large program.  In this case, a.ss is
 the module that defines structures used for AST nodes, and b.ss is the
 parser that generates values of those structures.  I needed to play
 around with one of a.ss's un-provided functions at the REPL, so I loaded
 a.ss into the module language and hit execute.  But I needed to give it
 a complex AST, so I required the parser at the REPL and used it to build
 the AST, which I then fed to the private function in a.ss.
 
 Because of the problem I described in the original bug report, the only
 way I could test the relevant function was by providing it from a.ss,
 and doing my exploring in the context of some module that requires both
 a.ss and b.ss, which is an imperfect solution at best.
 
 Richard

Responsible changed from "nobody" to "mflatt" by robby at Thu, 22 Jun 2006 09:35:16 -0400
Reason>>> waiting for docs clarification (see email transcript)


From: Robby Findler <robby@cs.uchicago.edu>
To: Richard Cobbe <cobbe@ccs.neu.edu>
Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Thu, 22 Jun 2006 08:35:25 -0500

 [ FYI: I've checked in a version of the module language that does the
   below now. It uses `normalize-path' but not `normal-case-path' when
   building a module's name. I'll move the PR over to Matthew, for now. ]
 
 At Thu, 22 Jun 2006 07:06:16 -0400, Richard Cobbe wrote:
 > On Wed, Jun 21, 2006 at 10:31:30PM -0500, Robby Findler wrote:
 > > At Wed, 21 Jun 2006 16:40:08 -0400, cobbe@ccs.neu.edu wrote:
 > > > A new problem report is waiting at
 > > >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8136
 > > 
 > > Is the correct response this one?
 > > 
 > >   > (require "b.ss") (a? (build-a 3))
 > >   define-values: cannot change identifier that is instantiated as a
 > >   module constant: struct:a
 > > 
 > > ?
 > 
 > Well, that would be better than the current behavior; at least I'd know
 > that there was a structure mismatch due to an unexpected behavior of the
 > module language (or possibly the module system, not sure which).
 > 
 > I'd really prefer that (a? (build-a 3)) evaluate to #t, though.
 
 It looks like that's the best I can do, without a change to
 module->namspace (which is the real implementation of the module
 language). Just to be clear, this is what is really happening (at a
 REPL, whose current directory is /Users/robby and that contains a.ss
 and b.ss):
 
 (module |,/Users/robby/a| mzscheme
   (define-struct a (b))
   (provide (struct a (b))))
 (require |,/Users/robby/a|)
 (current-namespace (module->namespace '|,/Users/robby/a|))
 (require "b.ss")
 define-values: cannot change identifier that is instantiated as a module constant: struct:a
 
 > This came up as I was debugging a large program.  In this case, a.ss is
 > the module that defines structures used for AST nodes, and b.ss is the
 > parser that generates values of those structures.  I needed to play
 > around with one of a.ss's un-provided functions at the REPL, so I loaded
 > a.ss into the module language and hit execute.  But I needed to give it
 > a complex AST, so I required the parser at the REPL and used it to build
 > the AST, which I then fed to the private function in a.ss.
 >
 > Because of the problem I described in the original bug report, the only
 > way I could test the relevant function was by providing it from a.ss,
 > and doing my exploring in the context of some module that requires both
 > a.ss and b.ss, which is an imperfect solution at best.
 
 Matthew and I have talked about wiring together all of the open windows
 (tabs) that are in the module language so that all the REPLs share the
 same namespace.
 
 But it sounds like that wouldn't quite be enough for you -- you'd need
 to communicate values between the two REPLs and I'm not sure how that
 would work.
 
 (I'm sure you've already thought of this, but if you're going to write
 tests for those modules, it sounds like you'll need to provide that
 function from a.ss, anyways.)
 
 Robby
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Richard Cobbe <cobbe@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 13:51:25 -0500

 Only one file changed: drscheme/private/module-language.ss, so you can
 probably safely just upgrade that one.
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 13:04:26 -0500

 Does it matter if I set the current-module-name-prefix during expansion
 or not?
 
 Robby
 
 At Fri, 23 Jun 2006 12:39:16 -0500, Matthew Flatt wrote:
 > Use 
 >    (normal-case-path (simplify-path (expand-path path) #f))
 > to fix up the path name, not `normalize-path' (which does too much).
 > 
 > You can use `current-module-name-prefix' to install the prefix when
 > evaluating the module form. Since DrScheme is already changing the
 > `module' expression, that may not matter, but it's probably better
 > preparation for a world where DrScheme compiles files to bytecode.
 > 
 > Finally, register the module with the module name resolver by calling
 > the resolver with #f as the first and third argument. That way,
 > requiring the file doesn't attempt to re-load the module.
 > 
 > Matthew
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 13:46:48 -0500

 Okay, I've checked in another attempt at a fix. The test suite passes
 and so does check syntax'ing and evaluating some random big files.
 
 Let me know if you spot anything.
 
 Thanks,
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 13:25:07 -0500

 At Fri, 23 Jun 2006 13:18:46 -0500, Robby Findler wrote:
 > When I require a module that has been complied/evaluated with the
 > current-module-name-prefix set to something, how do I build the
 > argument to require. Do I use `build-path' or do I always put a "/"
 > inbetween (or something else)?
 
 The prefix should be everything except the file name, so it should
 start with ",", and it will end with "/" under Unix and Mac OS X.
 
 The name to require is as before: the suffixless path name with ","
 at the start.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 12:39:16 -0500

 Use 
    (normal-case-path (simplify-path (expand-path path) #f))
 to fix up the path name, not `normalize-path' (which does too much).
 
 You can use `current-module-name-prefix' to install the prefix when
 evaluating the module form. Since DrScheme is already changing the
 `module' expression, that may not matter, but it's probably better
 preparation for a world where DrScheme compiles files to bytecode.
 
 Finally, register the module with the module name resolver by calling
 the resolver with #f as the first and third argument. That way,
 requiring the file doesn't attempt to re-load the module.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 13:16:59 -0500

 It's needed for evaluation only.
 
 Matthew
 
 At Fri, 23 Jun 2006 13:04:26 -0500, Robby Findler wrote:
 > Does it matter if I set the current-module-name-prefix during expansion
 > or not?
 > 
 > Robby
 > 
 > At Fri, 23 Jun 2006 12:39:16 -0500, Matthew Flatt wrote:
 > > Use 
 > >    (normal-case-path (simplify-path (expand-path path) #f))
 > > to fix up the path name, not `normalize-path' (which does too much).
 > > 
 > > You can use `current-module-name-prefix' to install the prefix when
 > > evaluating the module form. Since DrScheme is already changing the
 > > `module' expression, that may not matter, but it's probably better
 > > preparation for a world where DrScheme compiles files to bytecode.
 > > 
 > > Finally, register the module with the module name resolver by calling
 > > the resolver with #f as the first and third argument. That way,
 > > requiring the file doesn't attempt to re-load the module.
 > > 
 > > Matthew
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 13:39:04 -0500

 Aha! I got it to work (I think :).
 
 Here's what happens now. If you start with the program:
 
   (module tmp mzscheme)
 
 in the file "/Users/robby/", these are the expressions that the
 evaluator (and check syntax) sees (the results of the front-end/...
 method for the definitions window):
 
 (current-module-name-resolver '|,/Users/robby/|)
 
 ;; expand is called before this result is built
 (module tmp mzscheme (#%plain-module-begin ...))  
 
 (begin
  (current-module-name-resolver #f)
  (eval '(require |,/Users/robby/tmp|))
  (eval '(current-namespace (module->namespace '|,/Usrs/robby/tmp|))))
 
 So far this works, because the calls to `eval' are effectively ignored
 by check syntax.
 
 In the past, the first one wasn't there, and the last one didn't have
 `eval's in there.
 
 I'm a little nervous about the extra calls to eval (they might trip up
 other tools trying to process the program ...). But, we'll see.
 
 Robby
 
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 13:18:46 -0500

 When I require a module that has been complied/evaluated with the
 current-module-name-prefix set to something, how do I build the
 argument to require. Do I use `build-path' or do I always put a "/"
 inbetween (or something else)?
 
 Thanks,
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 13:32:31 -0500

 BTW, the docs say that current-module-name-prefix has to be a symbol,
 but it can also be #f:
 
 > (current-module-name-prefix)
 #f
 > (current-module-name-prefix #f)
 > 
 
 
 Robby
From: Richard Cobbe <cobbe@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/8136: module identity not preserved by module language
Date: Fri, 23 Jun 2006 14:49:28 -0400

 On Jun 23, 2006, at 2:46 PM, Robby Findler wrote:
 
 > Okay, I've checked in another attempt at a fix. The test suite passes
 > and so does check syntax'ing and evaluating some random big files.
 >
 > Let me know if you spot anything.
 
 Great; thanks!  I'll try this as soon as I get a chance.  (I'm in the  
 middle of upgrading my Fink installation, so I'm not going to have  
 any CPU to spare for building DrScheme for a bit.)
 
 Thanks to both of you for your time on this!
 
 Richard
 
 

State changed from "open" to "closed" by mflatt at Wed, 02 Aug 2006 12:32:39 -0400
Reason>>> fixed

From: Robby Findler <robby@cs.uchicago.edu>
To: bugs@plt-scheme.org
Cc: mflatt@cs.utah.edu, cobbe@ccs.neu.edu
Subject: Re: drscheme/8136 module identity not preserved by module language
Date: Wed, 2 Aug 2006 13:48:37 -0500

 What do you expect this program to produce in DrScheme?
 
 (require (lib "utils.ss" "texpict"))
 (let ()
   (current-namespace (make-namespace))
   (namespace-set-variable-value! 'd (disk 3)))
 d
 
 I was surprised to find it actual drew the pict -- is that intentional?
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/8136 module identity not preserved by module language
Date: Wed, 2 Aug 2006 12:53:03 -0600

 At Wed, 2 Aug 2006 13:48:37 -0500, Robby Findler wrote:
 > What do you expect this program to produce in DrScheme?
 > 
 > (require (lib "utils.ss" "texpict"))
 > (let ()
 >   (current-namespace (make-namespace))
 >   (namespace-set-variable-value! 'd (disk 3)))
 > d
 > 
 > I was surprised to find it actual drew the pict -- is that intentional?
 
 Yes. The Slideshow tool doesn't care about the user's current namespace
 when printing. It attaches DrScheme's instance of `(lib "mrpict.ss"
 "texpict")' to the user's initial namespace, and then it can use
 `pict?', etc. directly.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/8136 module identity not preserved by module language
Date: Wed, 2 Aug 2006 14:00:23 -0500

 At Wed, 2 Aug 2006 12:53:03 -0600, Matthew Flatt wrote:
 > At Wed, 2 Aug 2006 13:48:37 -0500, Robby Findler wrote:
 > > What do you expect this program to produce in DrScheme?
 > > 
 > > (require (lib "utils.ss" "texpict"))
 > > (let ()
 > >   (current-namespace (make-namespace))
 > >   (namespace-set-variable-value! 'd (disk 3)))
 > > d
 > > 
 > > I was surprised to find it actual drew the pict -- is that intentional?
 > 
 > Yes. The Slideshow tool doesn't care about the user's current namespace
 > when printing. It attaches DrScheme's instance of `(lib "mrpict.ss"
 > "texpict")' to the user's initial namespace, and then it can use
 > `pict?', etc. directly.
 
 When we were discussing this earlier, I suggested attaching (lib
 "mrpict.ss" "texpict") to every namespace (that is active at the time
 something is printed).
 
 Why was that wrong?
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/8136 module identity not preserved by module language
Date: Wed, 2 Aug 2006 13:06:26 -0600

 At Wed, 2 Aug 2006 14:00:23 -0500, Robby Findler wrote:
 > When we were discussing this earlier, I suggested attaching (lib
 > "mrpict.ss" "texpict") to every namespace (that is active at the time
 > something is printed).
 > 
 > Why was that wrong?
 
 The same reason that you extended `add-snip-value': the mrpict module
 needs to be attached before the user program loads the module itself.
 Attaching at print time is unlikely to be useful.
 
 So, the tool can recognize mrpict uses from the original namespace,
 only --- but I think that's likely to be useful enough in practice.
 
 Matthew
 
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/8136 module identity not preserved by module language
Date: Wed, 2 Aug 2006 14:08:27 -0500

 At Wed, 2 Aug 2006 13:06:26 -0600, Matthew Flatt wrote:
 > At Wed, 2 Aug 2006 14:00:23 -0500, Robby Findler wrote:
 > > When we were discussing this earlier, I suggested attaching (lib
 > > "mrpict.ss" "texpict") to every namespace (that is active at the time
 > > something is printed).
 > > 
 > > Why was that wrong?
 > 
 > The same reason that you extended `add-snip-value': the mrpict module
 > needs to be attached before the user program loads the module itself.
 > Attaching at print time is unlikely to be useful.
 > 
 > So, the tool can recognize mrpict uses from the original namespace,
 > only --- but I think that's likely to be useful enough in practice.
 
 Oh, I see! They will have instantiated the module into the user's
 namespace already by that point, so the attach would (should?) fail.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: drscheme/8136 module identity not preserved by module language
Date: Wed, 2 Aug 2006 13:14:29 -0600

 At Wed, 2 Aug 2006 14:08:27 -0500, Robby Findler wrote:
 > Oh, I see! They will have instantiated the module into the user's
 > namespace already by that point, so the attach would (should?) fail.
 
 Yes.
 
 Matthew
 
