From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Oct  6 14:59:44 2009
Received: from mail-yx0-f176.google.com (mail-yx0-f176.google.com [209.85.210.176])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n96Ixehm024679
	for <bugs@bugs.plt-scheme.org>; Tue, 6 Oct 2009 14:59:40 -0400
Message-Id: <200910061859.n96IxcPO024671@champlain.ccs.neu.edu>
Date: Tue, 6 Oct 2009 14:59:38 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: syntactic test suite coverage -> no backtrace

>Number:         10513
>Category:       drscheme
>Synopsis:       syntactic test suite coverage -> no backtrace
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Oct 06 15:00:01 -0400 2009
>Last-Modified:  Fri May 06 02:12:04 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.2
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 139202488

Collections:
(("/home/eli/.plt-scheme/4.2.2/collects" "info-domain" "pl") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "framework" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-coverage) (default) #() "#lang scheme\n" #f))
>Description:
When the option for syntactic test suite coverage is selected in the module
language, there is no backtrace *at all* -- not even the limited backtrace
that is there when "no debugging or profiling" is chosen.

This is pretty bad in my course, since I use both features a lot, and I tell
students to use the syntactic coverage option to make sure that they have
complete coverage.  (I need to tell them not to do that in 4.2.2, since
backtraces are generally more useful when they develop the code...)
>How-To-Repeat:
#lang scheme
(define (foo x y) (/ x y))
(foo 1 0)
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10513: syntactic test suite coverage -> no 
	backtrace
Date: Tue, 6 Oct 2009 14:13:56 -0500

 As far as I can tell, this has to do with the way the test suite
 coverage annotations change the tail calling behavior of the program
 (and how that interacts with the continuation marks).
 
 If you add a printf in drscheme-error-display-handler in
 drscheme/private/rep.ss, you'll see that the stack does not contain
 anything from the user's program. Mine looks as below.
 
 Also, if you change the call to be (+ 1 (foo 1 0)) then you get some
 highlighting.
 
 ((call-with-exception-handler . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/scheme/private/more-scheme.ss>
 274 2 9281 256)) (*init . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/module-language.ss>
 273 8 13255 355)) (call-with-break-parameterization . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/scheme/private/more-scheme.ss>
 158 2 5093 519)) (#f . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/rep.ss> 1091 9
 45070 2670)) (loop . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/rep.ss> 1351 17
 57496 808)))
 
 Robby
 
 On Tue, Oct 6, 2009 at 2:00 PM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10513
 >
 > Reported by Eli Barzilay for release: 4.2.2
 >
 > *** Description:
 > When the option for syntactic test suite coverage is selected in the modu=
 le
 > language, there is no backtrace *at all* -- not even the limited backtrac=
 e
 > that is there when "no debugging or profiling" is chosen.
 >
 > This is pretty bad in my course, since I use both features a lot, and I t=
 ell
 > students to use the syntactic coverage option to make sure that they have
 > complete coverage. =C2=A0(I need to tell them not to do that in 4.2.2, si=
 nce
 > backtraces are generally more useful when they develop the code...)
 >
 > *** How to repeat:
 > #lang scheme
 > (define (foo x y) (/ x y))
 > (foo 1 0)
 >
 > *** Environment:
 > unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02=
 :29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display=
 -depth) =3D 24
 > Human Language: english
 > (current-memory-use) 139202488
 >
 > Collections:
 > (("/home/eli/.plt-scheme/4.2.2/collects" "info-domain" "pl") ("/home/eli/=
 plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor=
 " "file" "openssl" "sgl" "scriblib" "s-exp" "slideshow" "mysterx" "graphics=
 " "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "s=
 cribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" =
 "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "=
 framework" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "e=
 opl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepp=
 er" "launcher" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpac=
 k" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "d=
 rscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games"=
  "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-co=
 verage) (default) #() "#lang scheme\n" #f))
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10513: syntactic test suite coverage -> no 
	backtrace
Date: Tue, 6 Oct 2009 15:23:11 -0400

 On Oct  6, Robby Findler wrote:
 > As far as I can tell, this has to do with the way the test suite
 > coverage annotations change the tail calling behavior of the program
 > (and how that interacts with the continuation marks).
 
 But any such change would, if anything, make code have more backtrace
 arrows, not less...  In any case, this is a major problem for my
 class.
 
 
 > If you add a printf in drscheme-error-display-handler in
 > drscheme/private/rep.ss, you'll see that the stack does not contain
 > anything from the user's program. Mine looks as below.
 > 
 > Also, if you change the call to be (+ 1 (foo 1 0)) then you get some
 > highlighting.
 
 I did that, and got no highlights still.  Then I tried saving it in a
 file, and that show the "some highlighting".  (Which is still way less
 than running with debugging on.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10513: syntactic test suite coverage -> no 
	backtrace
Date: Tue, 6 Oct 2009 14:40:19 -0500

 On Tue, Oct 6, 2009 at 2:23 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> Also, if you change the call to be (+ 1 (foo 1 0)) then you get some
 >> highlighting.
 >
 > I did that, and got no highlights still.
 
 In the unsaved file case, there is actually a different stack in the
 exception record! I'm not sure why that is, but here is what I get.
 
 Unsaved file case:
 
 ((call-with-exception-handler . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/scheme/private/more-scheme.ss>
 274 2 9281 256)) (*init . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/module-language.ss>
 273 8 13255 355)) (call-with-break-parameterization . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/scheme/private/more-scheme.ss>
 158 2 5093 519)) (#f . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/rep.ss> 1091 9
 45055 2670)) (loop . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/rep.ss> 1351 17
 57481 808)))
 
 saved file case:
 
 ((#f . #(struct:srcloc #<path:/Users/robby/tmp.ss> 3 0 41 13)) (*init
 . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/module-language.ss>
 273 8 13255 355)) (call-with-break-parameterization . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/scheme/private/more-scheme.ss>
 158 2 5093 519)) (#f . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/rep.ss> 1091 9
 45055 2670)) (loop . #(struct:srcloc
 #<path:/Users/robby/svn/plt/collects/drscheme/private/rep.ss> 1351 17
 57481 808)))
 
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10513: syntactic test suite coverage -> no 
	backtrace
Date: Tue, 6 Oct 2009 14:45:27 -0500

 PS: the stacks in my last message came from
 (continuation-mark-set->context (exn-continuation-marks exn))
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10513: syntactic test suite coverage -> no 
	backtrace
Date: Thu, 15 Oct 2009 01:57:19 -0400

 Probably related to this -- write this in the definitions:
 
   #lang scheme
   (require "mu.ss")
 
 and run -- if the selection is for "no debugging or profiling" or
 "syntactic test suite coverage", then the error is showing stuff that
 it shouldn't show:
 
   ../home/eli/plt/collects/mred/private/snipfile.ss:209:2:
   open-input-file: cannot open input file: "/tmp/mu.ss" (No such file
   or directory; errno=2)
 
 If "debugging" is chosen, then it shows just the error message without
 the source file.  This is the same whether the file is saved or not,
 so I don't think that that is the problem.
 
 [
 
 In any case, this whole thing is very bad in my course: my course
 language defines `error' which is what the students get to use -- now,
 whenever I show in class some code with an error, the message has the
 path into the course collection which makes the error *completely*
 bogus.  For example:
 
   ../../../../.plt-scheme/4.2.2/collects/pl/utils.ss:188:4:
   lookup-fun: missing function definition for: bar
 
 The `lookup-fun' is in the file that I'm running, and it has a call to
 `error' -- showing the utils file as the location of the error is
 (technically correct but) completely useless.
 
 As a stopgap, I told the students to use "debugging", and for coverage
 testing rely on the handin server.  This is pretty bad.
 
 ]
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, bug-notification@plt-scheme.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10513: syntactic test suite coverage -> no 
	backtrace
Date: Thu, 15 Oct 2009 06:23:05 -0500

 It seems easier to switch in and out of the drscheme coverage tool in
 the language dialog than to keep uploading files and running them on
 the server (esp. if they aren't online).
 
 IIUC (and I guess there is a 50/50 chance I do), the problem is that
 the test coverage annotations inserted by errortrace don't record the
 stack in addition and further, changing it so they do would be a
 significant performance hit. Perhaps the best thing is yet another
 mode where I put in both annotations?
 
 Opinions?
 
 Robby
 
 On Thu, Oct 15, 2009 at 12:57 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > Probably related to this -- write this in the definitions:
 >
 > =C2=A0#lang scheme
 > =C2=A0(require "mu.ss")
 >
 > and run -- if the selection is for "no debugging or profiling" or
 > "syntactic test suite coverage", then the error is showing stuff that
 > it shouldn't show:
 >
 > =C2=A0../home/eli/plt/collects/mred/private/snipfile.ss:209:2:
 > =C2=A0open-input-file: cannot open input file: "/tmp/mu.ss" (No such file
 > =C2=A0or directory; errno=3D2)
 >
 > If "debugging" is chosen, then it shows just the error message without
 > the source file. =C2=A0This is the same whether the file is saved or not,
 > so I don't think that that is the problem.
 >
 > [
 >
 > In any case, this whole thing is very bad in my course: my course
 > language defines `error' which is what the students get to use -- now,
 > whenever I show in class some code with an error, the message has the
 > path into the course collection which makes the error *completely*
 > bogus. =C2=A0For example:
 >
 > =C2=A0../../../../.plt-scheme/4.2.2/collects/pl/utils.ss:188:4:
 > =C2=A0lookup-fun: missing function definition for: bar
 >
 > The `lookup-fun' is in the file that I'm running, and it has a call to
 > `error' -- showing the utils file as the location of the error is
 > (technically correct but) completely useless.
 >
 > As a stopgap, I told the students to use "debugging", and for coverage
 > testing rely on the handin server. =C2=A0This is pretty bad.
 >
 > ]
 >
 > --
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0((lambda (x) (x x)) (lambda (x) (x x)))=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0http=
 ://barzilay.org/ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 Maze is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, bug-notification@plt-scheme.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10513: syntactic test suite coverage -> no 
	backtrace
Date: Thu, 15 Oct 2009 09:53:12 -0400

 On Oct 15, Robby Findler wrote:
 > It seems easier to switch in and out of the drscheme coverage tool
 > in the language dialog than to keep uploading files and running them
 > on the server (esp. if they aren't online).
 
 Well, it's easy to forget to switch modes, and the no-traces hit on
 debugging is heavier on their time than test coverage.
 
 
 > IIUC (and I guess there is a 50/50 chance I do), the problem is that
 > the test coverage annotations inserted by errortrace don't record
 > the stack in addition and further, changing it so they do would be a
 > significant performance hit. Perhaps the best thing is yet another
 > mode where I put in both annotations?
 
 I don't remember what you did on the errortrace side, but it used to
 do both fine in 4.2.1...  If you parameterized things so that the two
 options are independent, then it seems more sensible to me to have an
 independent checkbox.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, bug-notification@plt-scheme.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10513: syntactic test suite coverage -> no 
	backtrace
Date: Thu, 15 Oct 2009 09:16:48 -0500

 On Thu, Oct 15, 2009 at 8:53 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> IIUC (and I guess there is a 50/50 chance I do), the problem is that
 >> the test coverage annotations inserted by errortrace don't record
 >> the stack in addition and further, changing it so they do would be a
 >> significant performance hit. Perhaps the best thing is yet another
 >> mode where I put in both annotations?
 >
 > I don't remember what you did on the errortrace side, but it used to
 > do both fine in 4.2.1... =C2=A0If you parameterized things so that the tw=
 o
 > options are independent, then it seems more sensible to me to have an
 > independent checkbox.
 
 Oh, then there's something I still don't understand. DrScheme should
 not have changed what it does wrt to test coverage between those
 versions. I'm not sure if there was a change at the mzscheme level
 during that time that could account for this.
 
 Hm, on second thought, there was a change to the way that test
 coverage worked in the not too distant path. I got a 10x speed up out
 of it, but I thought it should not affect things like this.
 
 Anyways, I'll have to go investigate at some point.
 
 Robby

