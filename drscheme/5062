From ptg@acm.org  Thu Nov 29 10:29:30 2001
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id KAA24342
	for <plt-gnats>; Thu, 29 Nov 2001 10:29:30 -0500
Message-Id: <200111291529.KAA24342@champlain.ccs.neu.edu>
Date: Thu, 29 Nov 2001 10:29:30 -0500
From: ptg@acm.org
To: bugs@plt-scheme.org
Subject: module language ignores module's language

>Number:         5062
>Category:       drscheme
>Synopsis:       module language ignores module's language
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    robby
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Thu Nov 29 10:30:00 EST 2001
>Closed-Date:    Mon Dec 10 10:57:44 EST 2001
>Last-Modified:  Mon Dec 10 10:57:44 EST 2001
>Originator:     Paul Graunke
>Release:        200alpha1
>Organization:
titan
>Environment:
unix "SunOS subra.ccs.neu.edu 5.8 Generic_108528-11 sun4u sparc SUNW,Sun-Blade-100" (sparc-solaris) (get-display-depth) = 24
Docs Installed:
("advanced" "beginning-abbr" "beginning" "drscheme" "icons" "framework" "help" "teachpack" "r5rs" "insidemz" "misclib" "mred" "intermediate" "mzlib" "mrspidey" "mzc" "mzscheme" "t-y-scheme" "tools" "intermediate-lambda")
Collections: 
(("/home/ptg/world/ptg/collects" ("CVS" "cgi-compiler" "format" "schema" "net-apps" "cps-jvm" "vnc" "xwin" "pj" "tests" "util" "old-junk")) ("/home/ptg/plt/collects" ("CVS" "afm" "web-server" "browser" "doc" "compiler" "defaults" "drjava" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrflow" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "parser-tools" "readline" "setup" "sirmail" "slatex" "slibinit" "srpersist" "stepper" "string-constants" "syntax" "tests" "texpict" "typeset" "version" "xml")))
Human Language: English
>Description:
The module DrScheme language level doesn't make the bindings
provided by the definitions window's module's module language
available in the repl.  I think it used to (yesterday?)
>How-To-Repeat:
;; File a.ss
(module a mzscheme
  (provide f
           (all-from mzscheme))
  
  
  (define (f x y)
    (+ (* 5 x) y)))

;; File b.ss
(module b "a.ss"
  
  (display (f 3 4)))


; stuff to do:
open b.ss in the definitions window
Choose the "module" language level
click execute
type (f 3 4) in the repl.
See
reference to undefined identifier: f

>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Thu Nov 29 10:43:28 2001
Responsible-Changed-Why:
    dr

From: Robert Bruce Findler <robby@cs.rice.edu>
To: ptg@acm.org, mflatt@cs.utah.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/5062: module language ignores module's language
Date: Thu, 29 Nov 2001 09:23:07 -0800

 In general, the module language doesn't work properly if the language
 is not mzscheme. I can fix this particular case, however.
 
 One thought: I wonder if the REPL for the module language should be
 wrapping each expression in the #%module-begin defined by the language
 of that module? That seems like it could be just the right thing for
 languages like the lambda calculus language.
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: ptg@acm.org, bugs@plt-scheme.org
Subject: Re: all/5062: module language ignores module's language
Date: Thu, 29 Nov 2001 10:28:48 -0700 (MST)

 How is the `module' language implemented?
 
 I thought you stripped out old `provide's after expanding, then
 inserted new `provides', but I don't know how I came to that guess.
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: ptg@acm.org, bugs@plt-scheme.org
Subject: Re: all/5062: module language ignores module's language
Date: Thu, 29 Nov 2001 09:32:41 -0800

 Quoting Matthew Flatt:
 > How is the `module' language implemented?
 > 
 > I thought you stripped out old `provide's after expanding, then
 > inserted new `provides', but I don't know how I came to that guess.
 
 yep, that's right. I just didn't provide the thing in the language
 position. That's how I plan to fix this. 
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: ptg@acm.org, bugs@plt-scheme.org
Subject: Re: all/5062: module language ignores module's language
Date: Thu, 29 Nov 2001 10:36:56 -0700 (MST)

 Quoting Robert Bruce Findler:
 > Quoting Matthew Flatt:
 > > I thought you stripped out old `provide's after expanding, then
 > > inserted new `provides', but I don't know how I came to that guess.
 > 
 > yep, that's right. I just didn't provide the thing in the language
 > position. That's how I plan to fix this. 
 
 Ok. Somehow knowing that I really do understand lets me understand this
 part:
 
 > One thought: I wonder if the REPL for the module language should be
 > wrapping each expression in the #%module-begin defined by the language
 > of that module? That seems like it could be just the right thing for
 > languages like the lambda calculus language.
 
 `#%module-begin' only works inside `module'. Would wrapping in `module'
 work? Seems like there's a problem with definitions...
 
 I see what you're getting at, but I'm not sure of the solution.
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: ptg@acm.org, bugs@plt-scheme.org
Subject: Re: all/5062: module language ignores module's language
Date: Thu, 29 Nov 2001 09:55:04 -0800

 How about this for a procedure to follow for each expression submitted
 to the REPL in the module language:
 
 1-> user submits `expr' to the REPL:
 
   > expr
 
 2-> wrap module around it, as follows:
 
   (module repl-<n> <language-in-module-in-definitions-window>
     expr)
 
 3-> insert funny definitions for each of the already-defined things
     from the original module, or previous repl interactions:
 
   (module repl-<n> <language-in-module-in-definitions-window>
     (define x 3d-value) ...
     expr)
 
 4-> expand the above
 
   (module repl-<n> <language-in-module-in-definitions-window>
     (#%module-begin
        (define x 3d-value) ...
        expanded-version-of-expr))
 
 5-> apply the same search for value and syntax definitions that I did
     to the definitions window and provide those.
 
   (module repl-<n> <language-in-module-in-definitions-window>
     (#%module-begin
        (provide ...)
        (define x 3d-value) ...
        expanded-version-of-expr))
 
 6-> evaluate the module definition
 
 7-> evaluate `(require repl-<n>)'
 
 Besides not being sure about the overall thing, I'm esp not sure about
 step 3. In particular that `define' there has to be the mzscheme define
 and I'm not sure that can be made to work properly with all languages.
 
 If we leave out step 3, the repl can't refer to things in the
 definitions window or things defined in previous interactions, but if
 we put it in, the #%module-begin may reject an otherwise okay program.
 
 Robby

From: "Paul T. Graunke" <ptg@ccs.neu.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, ptg@acm.org, bugs@plt-scheme.org
Subject: Re: all/5062: module language ignores module's language
Date: Thu, 29 Nov 2001 13:10:35 -0500

 On Thu, Nov 29, 2001 at 09:55:04AM -0800, Robert Bruce Findler wrote:
 > How about this for a procedure to follow for each expression submitted
 > to the REPL in the module language:
 > 
 > 1-> user submits `expr' to the REPL:
 > 
 >   > expr
 > 
 > 2-> wrap module around it, as follows:
 > 
 >   (module repl-<n> <language-in-module-in-definitions-window>
 >     expr)
 > 
 > 3-> insert funny definitions for each of the already-defined things
 >     from the original module, or previous repl interactions:
 > 
 >   (module repl-<n> <language-in-module-in-definitions-window>
 >     (define x 3d-value) ...
 >     expr)
 
 This breaks mutation of x by later repl expressions, right?
 
 Robby, your proposal about providing the language too should be enough for
 developing scheme servlets, which is really what I wanted.
 
 Thanks,
 
 
 Paul

From: Robert Bruce Findler <robby@cs.rice.edu>
To: "Paul T. Graunke" <ptg@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, ptg@acm.org, bugs@plt-scheme.org
Subject: Re: all/5062: module language ignores module's language
Date: Thu, 29 Nov 2001 10:28:05 -0800

 Quoting "Paul T. Graunke":
 > > 3-> insert funny definitions for each of the already-defined things
 > >     from the original module, or previous repl interactions:
 > > 
 > >   (module repl-<n> <language-in-module-in-definitions-window>
 > >     (define x 3d-value) ...
 > >     expr)
 > 
 > This breaks mutation of x by later repl expressions, right?
 
 yes. not the least of this step's problems :)
 
 > Robby, your proposal about providing the language too should be enough for
 > developing scheme servlets, which is really what I wanted.
 
 i hadn't done it because I am trying to get other things done today,
 but nevermind. committed and tagged.
 
 Robby
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Mon Dec 10 10:57:44 2001
State-Changed-Why:
    fixed original problem a while back,
    secondary problem on back burner
>Unformatted:

