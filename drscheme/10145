From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Mar 22 01:54:34 2009
Received: from mail-qy0-f130.google.com (mail-qy0-f130.google.com [209.85.221.130])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n2M5sP1P005176
	for <bugs@bugs.plt-scheme.org>; Sun, 22 Mar 2009 01:54:25 -0400
Message-Id: <200903220554.n2M5sMwj005168@champlain.ccs.neu.edu>
Date: Sun, 22 Mar 2009 01:54:22 -0400
From: mark.engelberg@gmail.com
To: bugs@plt-scheme.org
Subject: Program crashes DrScheme's GUI

>Number:         10145
>Category:       drscheme
>Synopsis:       Program crashes DrScheme's GUI
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Mar 22 01:56:01 -0400 2009
>Last-Modified:  Sun Mar 22 20:40:01 -0400 2009
>Originator:     Mark Engelberg
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.4
>Environment:
windows "Windows NT 6.0 (Build 6001) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 80171036

Collections:
(("C:\\Users\\Mark\\AppData\\Roaming\\PLT Scheme\\4.1.4\\collects" "installed-teachpacks") ("C:\\Program Files (x86)\\PLT\\collects" "2htdp" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student with lambda") (#(#t constructor repeating-decimal #f #t none) #f ((lib "tiles.ss" "installed-teachpacks"))))
>Description:
This student program was submitted to me by a student who uses a Mac at home.  However, on my 64-bit Vista laptop, it works for small inputs, but for moderate inputs, it reports an error "set-bitmap in bitmap-dc%: bad bitmap: (instantiate (class ...)...)"  and crashes the DrScheme GUI (things stop redrawing). I don't see any obvious problem with the code, but more importantly, even if there is an error, I don't know why it would ruin DrScheme's ability to redraw.
>How-To-Repeat:
Code uses Bloch's tiles teachpack:

(define (random-image width height)
  (cond
    [(or (zero? width) (zero? height)) 'do-not-put-width-of-zero-or-heighth-of-zero]
    [(and (= 1 width) (= 1 height)) (color-list->image (list (make-color (random 256) (random 256) (random 256))) 1 1 0 0)]
    [(and (= 1 width) (> height 1)) (image-above (random-image 1 (floor (/ height 2))) (random-image 1 (ceiling (/ height 2))))]
    [else (image-beside (random-image (floor (/ width 2)) height) (random-image (ceiling (/ width 2)) height))])) 
(random-image 256 256)
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: mark.engelberg@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10145: Program crashes DrScheme's GUI
Date: Sun, 22 Mar 2009 08:06:19 -0500

 This is a remarkably inefficient way to create that image! I think
 you're creating (2^17)-1 images, when one would do. (Also, the use of
 'random' in the last two cases isn't really doing anything.)
 
 That said, DrScheme should at least react better than that to when all
 of the bitmap resources are used up.
 
 Here's another version of that program that doesn't use generative
 recursion and also runs a lot faster.
 
 ;; random-image : N N -> image
 (define (random-image w h)
   (color-list->image
    (random-colors (* w h))
    w
    h
    0
    0))
 
 ;; random-colors : N -> (listof color)
 (define (random-colors num)
   (cond
     [(zero? num) empty]
     [else (cons (make-color (random 256) (random 256) (random 256))
                 (random-colors (sub1 num)))]))
 
 (random-image 256 256)
 
 
 On Sun, Mar 22, 2009 at 12:56 AM,  <mark.engelberg@gmail.com> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10145
 >
 > Reported by Mark Engelberg for release: 4.1.4
 >
 > *** Description:
 > This student program was submitted to me by a student who uses a Mac at h=
 ome. =C2=A0However, on my 64-bit Vista laptop, it works for small inputs, b=
 ut for moderate inputs, it reports an error "set-bitmap in bitmap-dc%: bad =
 bitmap: (instantiate (class ...)...)" =C2=A0and crashes the DrScheme GUI (t=
 hings stop redrawing). I don't see any obvious problem with the code, but m=
 ore importantly, even if there is an error, I don't know why it would ruin =
 DrScheme's ability to redraw.
 >
 > *** How to repeat:
 > Code uses Bloch's tiles teachpack:
 >
 > (define (random-image width height)
 > =C2=A0(cond
 > =C2=A0 =C2=A0[(or (zero? width) (zero? height)) 'do-not-put-width-of-zero=
 -or-heighth-of-zero]
 > =C2=A0 =C2=A0[(and (=3D 1 width) (=3D 1 height)) (color-list->image (list=
  (make-color (random 256) (random 256) (random 256))) 1 1 0 0)]
 > =C2=A0 =C2=A0[(and (=3D 1 width) (> height 1)) (image-above (random-image=
  1 (floor (/ height 2))) (random-image 1 (ceiling (/ height 2))))]
 > =C2=A0 =C2=A0[else (image-beside (random-image (floor (/ width 2)) height=
 ) (random-image (ceiling (/ width 2)) height))]))
 > (random-image 256 256)
 >
 > *** Environment:
 > windows "Windows NT 6.0 (Build 6001) Service Pack 1" (win32\i386\3m) (get=
 -display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 80171036
 >
 > Collections:
 > (("C:\\Users\\Mark\\AppData\\Roaming\\PLT Scheme\\4.1.4\\collects" "insta=
 lled-teachpacks") ("C:\\Program Files (x86)\\PLT\\collects" "2htdp" "afm" "=
 algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drsc=
 heme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" =
 "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp"=
  "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "ma=
 ke" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "pa=
 rser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline"=
  "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sl=
 atex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "s=
 yntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texp=
 ict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Inter=
 mediate Student with lambda") (#(#t constructor repeating-decimal #f #t non=
 e) #f ((lib "tiles.ss" "installed-teachpacks"))))
 >
 >
From: Mark Engelberg <mark.engelberg@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10145: Program crashes DrScheme's GUI
Date: Sun, 22 Mar 2009 11:55:30 -0700

 Yes, this student hasn't yet learned how to build a list of a given
 length using recursion on the number of elements.  This was not an
 assignment, just something the student did on his own for fun and
 wanted to show me.  Incidentally, the student is a bright 8-year old
 who has had 14 hour-long scheme lessons.  This is outside the scope of
 what I've taught him, but he saw an older student working on the
 "random art" project posted to plt-scheme a couple weeks back, and was
 inspired to try to find some way to produce a random image :).  In
 that spirit, I applaud the student's efforts and innovation in
 tackling something new on his own.
 
 I was aware of the inefficiency and I would expect this to run much
 slower than your version, but I appreciate your pointing it out in
 case I didn't.  However, I must admit that since most of the images
 are tiny and it follows a divide-and-conquer strategy, I wouldn't
 expect the overall memory consumption at any given point to be that
 much greater once you take into account the potential for garbage
 collection of the intermediate steps, and therefore, I would still
 predict that this program would finish and produce the correct result,
 albeit slowly.  But perhaps graphics resources are a bit more
 complicated than my mental model of how this would execute.
 
 In any case, I will certainly use this as a springboard to show him
 the better way next time I meet with him.  But still, I was confused
 as to why it was crashing DrScheme, especially when my Windows
 computer certainly has more horsepower and memory than his Mac,
 suggesting there may be a platform issue here.
 
 Perhaps related, a couple months back, I posted a similar bug where a
 deeply nested (but correct, I believe) graphics-based student program
 like this completely crashed DrScheme and caused it to exit (whereas
 this one just crashes the GUI subsystem).  The program I posted then
 was known to run properly on a previous version of DrScheme (v371, I
 think).  I  haven't seen any activity on that bug report, so I mention
 it here just in case it's connected.  Again, I know that program isn't
 very well constructed, but I wanted to submit as a bug since DrScheme
 was crashing rather than failing gracefully.
 
 --Mark
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Mark Engelberg <mark.engelberg@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10145: Program crashes DrScheme's GUI
Date: Sun, 22 Mar 2009 15:05:10 -0400

 Mark,
 
 On Mar 22, 2009, at 2:55 PM, Mark Engelberg wrote:
 
 > I must admit that since most of the images
 > are tiny and it follows a divide-and-conquer strategy, I wouldn't
 > expect the overall memory consumption at any given point to be that
 > much greater once you take into account the potential for garbage
 > collection of the intermediate steps,
 
 and
 
 > I was confused
 > as to why it was crashing DrScheme, especially when my Windows
 > computer certainly has more horsepower and memory than his Mac,
 > suggesting there may be a platform issue here.
 
  From what I understand, this bug isn't about memory but about  
 Window's (broken) way to administrate resources such as colors,  
 brushes, etc. The Mac guys got this right somehow and the Windows  
 guys did it wrong. We have had this problem for a long time on  
 various versions of Windows.
 
 -- Matthias
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Mark Engelberg <mark.engelberg@gmail.com>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10145: Program crashes DrScheme's GUI
Date: Sun, 22 Mar 2009 15:04:19 -0500

 Yes, I certainly agree with the spirit of your message.
 
 But none of the images are garbage. And drawing 2^17 or so images
 (even if 2^16 of them are 1x1 pixel in size) is always going to be
 slower than drawing a single image of 2^16 pixels, not just because of
 the extra factor of two, but because small constant factors can make a
 huge difference with big numbers like that.
 
 Also complicating matters is that windows treats bitmaps not just like
 any other memory. I don't know the exact details but you should not
 allocate many of them. Just another minor place where windows is less
 than optimal.
 
 Robby
 
 On Sun, Mar 22, 2009 at 1:55 PM, Mark Engelberg
 <mark.engelberg@gmail.com> wrote:
 > Yes, this student hasn't yet learned how to build a list of a given
 > length using recursion on the number of elements. =C2=A0This was not an
 > assignment, just something the student did on his own for fun and
 > wanted to show me. =C2=A0Incidentally, the student is a bright 8-year old
 > who has had 14 hour-long scheme lessons. =C2=A0This is outside the scope =
 of
 > what I've taught him, but he saw an older student working on the
 > "random art" project posted to plt-scheme a couple weeks back, and was
 > inspired to try to find some way to produce a random image :). =C2=A0In
 > that spirit, I applaud the student's efforts and innovation in
 > tackling something new on his own.
 >
 > I was aware of the inefficiency and I would expect this to run much
 > slower than your version, but I appreciate your pointing it out in
 > case I didn't. =C2=A0However, I must admit that since most of the images
 > are tiny and it follows a divide-and-conquer strategy, I wouldn't
 > expect the overall memory consumption at any given point to be that
 > much greater once you take into account the potential for garbage
 > collection of the intermediate steps, and therefore, I would still
 > predict that this program would finish and produce the correct result,
 > albeit slowly. =C2=A0But perhaps graphics resources are a bit more
 > complicated than my mental model of how this would execute.
 >
 > In any case, I will certainly use this as a springboard to show him
 > the better way next time I meet with him. =C2=A0But still, I was confused
 > as to why it was crashing DrScheme, especially when my Windows
 > computer certainly has more horsepower and memory than his Mac,
 > suggesting there may be a platform issue here.
 >
 > Perhaps related, a couple months back, I posted a similar bug where a
 > deeply nested (but correct, I believe) graphics-based student program
 > like this completely crashed DrScheme and caused it to exit (whereas
 > this one just crashes the GUI subsystem). =C2=A0The program I posted then
 > was known to run properly on a previous version of DrScheme (v371, I
 > think). =C2=A0I =C2=A0haven't seen any activity on that bug report, so I =
 mention
 > it here just in case it's connected. =C2=A0Again, I know that program isn=
 't
 > very well constructed, but I wanted to submit as a bug since DrScheme
 > was crashing rather than failing gracefully.
 >
 > --Mark
 >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Mark Engelberg <mark.engelberg@gmail.com>, bugs@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10145: Program crashes DrScheme's GUI
Date: Sun, 22 Mar 2009 16:55:18 -0400

 On Mar 22, Robby Findler wrote:
 > 
 > Also complicating matters is that windows treats bitmaps not just
 > like any other memory. I don't know the exact details but you should
 > not allocate many of them. Just another minor place where windows is
 > less than optimal.
 
 They are "GDI object", and a frequent source of headaches on Windows.
 You can see them in the task manager.
 
 (I actually never had any problem with DrScheme, but I had other
 applications bring the system down due to GDI objects leaking.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Mark Engelberg <mark.engelberg@gmail.com>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10145: Program crashes DrScheme's GUI
Date: Sun, 22 Mar 2009 18:35:38 -0600

 At Sun, 22 Mar 2009 15:05:10 -0400, Matthias Felleisen wrote:
 > 
 > > I was confused
 > > as to why it was crashing DrScheme, especially when my Windows
 > > computer certainly has more horsepower and memory than his Mac,
 > > suggesting there may be a platform issue here.
 > 
 >  From what I understand, this bug isn't about memory but about  
 > Window's (broken) way to administrate resources such as colors,  
 > brushes, etc. The Mac guys got this right somehow and the Windows  
 > guys did it wrong. We have had this problem for a long time on  
 > various versions of Windows.
 
 FWIW, we are exploring a re-write of the GUI toolbox for PLT Scheme,
 where this might be fixed by not requiring a Win32 bitmap for every
 Scheme-level bitmap. I'm not sure of all the performance implications,
 but I think we can make it work.
 
 We could also try to solve this at the image layer (i.e., moving images
 into and out of bitmap objects). But the lower-level change looks more
 promising to me, at least for now, though it will take longer.
 
 I think your previous report (10080) is the same thing, unfortunately.
