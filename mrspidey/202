From krentel@cs.rice.edu  Mon Jun 23 10:52:28 1997
Received: from new-world.cs.rice.edu (new-world.cs.rice.edu [128.42.6.103]) by cs.rice.edu (8.8.5/8.7.1) with ESMTP id KAA25706 for <plt-gnats@cs.rice.edu>; Mon, 23 Jun 1997 10:52:28 -0500 (CDT)
Message-Id: <199706231552.KAA02526@new-world.cs.rice.edu>
Date: Mon, 23 Jun 1997 10:52:27 -0500 (CDT)
From: "Mark W. Krentel" <krentel@cs.rice.edu>
Reply-To: krentel@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: redefining top-level primitives
X-Send-Pr-Version: 3.101

>Number:         202
>Category:       mrspidey
>Synopsis:       redefining top-level primitives
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    cormac
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Mon Jun 23 15:55:01 GMT 1997
>Last-Modified:  Mon Jul  7 22:10:34 CDT 1997
>Originator:     Mark W. Krentel
>Organization:
titan
>Release:        unknown
>Environment:
	
freebsd, nw, 50/1s1.

>Description:
	
Check Syntax and Spidey don't understand redefining primitive
names at top-level.  For example:

(let ((foo +))
  (foo 4 5 6))
(define + car)

Spidey puts (foo 4 5 6) in red, thinking that it's really taking
(car 4 5 6).

Check syntax draws an arrow from the + in let to the + in define
suggesting that's what it refers to.  This one has nothing to do 
with redefining a primitive name.  If I add

(let ((goo baz))
  (goo 2 3))
(define baz *)

then check syntax still puts an arrow from the first baz to the second.

I'm guessing this is really a zodiac problem because check syntax
and spidey get their input from zodiac.

Or, am I misunderstanding the semantics of this program?
I think it's a legal program evaluating to 15.

I note that the Restrictions on Source Programs from the Spidey manual
(May 97) doesn't restrict redefining primitives at top-level.

>How-To-Repeat:
	
See above.

>Fix:
	
>Audit-Trail:

From: Robert Bruce Findler <robby@cs.rice.edu>
To: plt-design@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/202: redefining top-level primitives
Date: Mon, 23 Jun 1997 10:59:20 -0500 (CDT)

 Mark W. Krentel writes:
 > (let ((goo baz))
 >   (goo 2 3))
 > (define baz *)
 > 
 > then check syntax still puts an arrow from the first baz to the second.
 
 In this case, the arrow is correct and this program should result in an
 unbound identifier error when evaluated.
 
 Robby

From: Shriram Krishnamurthi <shriram@cs.rice.edu>
To: krentel@cs.rice.edu
Cc: plt-gnats@cs.rice.edu, matthias@cs.rice.edu, cormac@cs.rice.edu
Subject: all/202: redefining top-level primitives
Date: Mon, 23 Jun 1997 11:00:34 -0500 (CDT)

 Spidey's interpretation is correct.  If you think in terms of sets of
 values, Spidey's behavior makes sense.  It's just being more
 conservative than you are.
 
 It is correct that they inherit the same information from M3, but M3
 doesn't actually have anything to do with this: it's purpose is not to
 keep track of dynamic flow of information.
 
 > I note that the Restrictions on Source Programs from the Spidey manual
 > (May 97) doesn't restrict redefining primitives at top-level.
 
 It probably should ...
 
 'shriram

From: "Mark W. Krentel" <krentel>
To: cormac, matthias, robby, shriram
Cc: plt-gnats
Subject: Re: all/202: redefining top-level primitives
Date: Mon, 23 Jun 1997 12:58:25 -0500 (CDT)

 OK, I understand the check syntax arrows.
 
 But I still don't understand Spidey for this program.
 On this program:
 
   (let ((foo +))
     (foo 4 5 6))
   (define + car)
 
 spidey puts (foo 4 5 6) in red.  I guess because + is sometimes
 + and sometimes car, and they get lumped into one set.  Ok.
 
 But Spidey sees this program as all green:
 
   (define goo +)
   (goo 1 2 3)
   (set! goo car)
   (goo (list 4 5 6))
 
 So, Spidey fully understands the program for set! on a new
 identifier, but not for define on a primitive.
 What's really the difference?
 
 I tried set! on a primitive, but that crashed spidey (PR 203).
 
 Also, on the original program:
 
   (let ((foo +))
     (foo 4 5 6))
   (define + car)
 
 spidey gives the value set for foo (and + in let) as undefined.
 I could understand (union + car), but I don't see where undefined
 can be right.
 
 --Mark

Responsible-Changed-From-To: krentel->cormac
Responsible-Changed-By: cormac
Responsible-Changed-When: Sun Jun 29 23:33:50 1997
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: cormac
State-Changed-When: Mon Jul  7 22:10:15 1997
State-Changed-Why:

MrSpidey does not handle redefinitions of or assignments to primitives.

>Unformatted:
