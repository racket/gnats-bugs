From matthias@cs.rice.edu  Wed Jun  7 20:20:35 2000
Received: from localhost (europa.rice.edu [192.225.19.49])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id UAA01546
	for <plt-gnats>; Wed, 7 Jun 2000 20:20:34 -0500 (CDT)
Message-Id: <200006080120.UAA01546@cs.rice.edu>
Date: Wed, 7 Jun 2000 20:20:34 -0500 (CDT)
From: matthias@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: MrSpidey can't analyze simple functions anymore 

>Number:         1497
>Category:       mrspidey
>Synopsis:       MrSpidey can't analyze simple functions anymore
>Confidential:   no
>Severity:       critical
>Priority:       high
>Responsible:    steck
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Thu Jun  8 01:30:04 GMT 2000
>Last-Modified:  Mon Jun 19 17:35:44 CDT 2000
>Originator:     matthias
>Organization:
titan
>Release:        102/14
>Environment:
unix (i386-linux) (get-display-depth) = 8
Tools: ("CVS" "analysis" "debug" "syncheck" "project-manager" "unit-bundle")
Docs Installed:
("help" "r5rs" "mzscheme" "mred" "drscheme" "misclib" "framework" "mzc" "index.html" "icons" "teach" "teachpack" "tools" "mrspidey" "beginning" "advanced" "intermediate")
Collections:
(("/home/scheme/plt/collects" ("CVS" "afm" "backward" "browser" "xml" "compiler" "countdwn" "drscheme" "drscheme-jr" "dynext" "errortrace" "framework" "games" "graphics" "guibuilder" "gusrspce" "help" "helpdoc" "hierarchy" "hierlist" "icons" "launcher" "make" "mrdemo" "mred" "mrspidey" "mysterx" "mzdynext" "mzlib" "mzos" "mzscheme" "net" "quasiquote" "readline" "slatex" "stepper" "system" "test" "tests" "texpict" "userspce" "zodiac" "doc" "drjava" "release-notes" "htdp" "setup" "defaults")))
>Description:
Enter this:

(define (f x) 
  (local ((define (g x) x))
    (g x)))

(f 0)

Click "Analyze" and watch the following error come up: 

<sorry, cut and paste doesn't work>



>How-To-Repeat:
I conjecture that Spidey is choking on the new 
MrSpidey. 

I don't have 101 available anymore to test the 
conjecture. 

>Fix:
>Audit-Trail:

From: Shriram Krishnamurthi <shriram@cs.rice.edu>
To: matthias@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: all/1497: MrSpidey can't analyze simple functions anymore 
Date: Wed,  7 Jun 2000 20:48:52 -0500 (CDT)

 matthias@cs.rice.edu wrote:
 
 > Enter this:
 > 
 > (define (f x) 
 >   (local ((define (g x) x))
 >     (g x)))
 > 
 > (f 0)
 > 
 > Click "Analyze" and watch the following error come up: 
 > 
 > <sorry, cut and paste doesn't work>
 
 This is the actual text?  MrSpidey prints
 
   <sorry, cut and paste doesn't work>
 
 ???
 
 (If not, please at least type the relevant part of the error message.
 Our error logs are archival.  We can't recreate this situation some
 time down the future, but we many want or have to know what the actual
 error was.  Furthermore, it would help us identify whose Spidey this
 actually is.)
 
 Shriram

From: Shriram Krishnamurthi <shriram@cs.rice.edu>
To: matthias@cs.rice.edu
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu
Subject: all/1497: MrSpidey can't analyze simple functions anymore 
Date: Wed,  7 Jun 2000 21:00:46 -0500 (CDT)

 What happens if you replace the entire program with just the program
 
   local
 
 ?
 
 'shriram

From: Matthias Felleisen <matthias@cs.rice.edu>
To: shriram@cs.rice.edu
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu
Subject: Re: all/1497: MrSpidey can't analyze simple functions anymore
Date: Wed, 7 Jun 2000 21:35:02 -0500 (CDT)

 Apologies, I though of a better way to get to the information. 
 Below is the entire output. Spidey really complains about 
 local, though it alaways knew how to do it. 
 
  -- Matthias
 
 [If you don't recognize it, btw, the phrase was a quote from 
  one of your error messages earlier this month.]
 
  MrSpidey error: Syntax error: internal definition: invalid position at "lam.ss" line 46, column 11
 
  MrSpidey error: Syntax error: internal definition: invalid position at "lam.ss" line 76, column 11
 
  Bad object in mrspidey:error-handler #(struct:internal-definition (#(struct:symbol #(struct:origin source source) #(struct:location 46 20 1300 "/home/matthias/lam.ss") #(struct:location 46 22 1302 "/home/matthias/lam.ss") fob fob ())) #(struct:list #(st ruct:origin non-source never-mind) #(struct:location 46 11 1291 "/home/matthias/lam.ss") #(struct:location 57 54 1822 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin non-source never-mind) #(struct:location 46 11 1291 "/home/matthias/lam.ss") # (struct:location 57 54 1822 "/home/matthias/lam.ss") lambda lambda (3)) #(struct:list #(struct:origin source source) #(struct:location 46 24 1304 "/home/matthias/lam.ss") #(struct:location 46 41 1321 "/home/matthias/lam.ss") (#(struct:symbol #(struct:ori gin source source) #(struct:location 46 24 1304 "/home/matthias/lam.ss") #(struct:location 46 28 1308 "/home/matthias/lam.ss") a-lam a-lam ()) #(struct:symbol #(struct:origin source source) #(struct:location 46 30 1310 "/home/matthias/lam.ss") #(struct:l ocation 46 40 1320 "/home/matthias/lam.ss") in-scope-of in-scope-of ())) 2 ()) #(struct:list #(struct:origin source source) #(struct:location 47 13 1335 "/home/matthias/lam.ss") #(struct:location 57 53 1821 "/home/matthias/lam.ss") (#(struct:symbol #(str uct:origin source source) #(struct:location 47 14 1336 "/home/matthias/lam.ss") #(struct:location 47 17 1339 "/home/matthias/lam.ss") cond cond ()) #(struct:list #(struct:origin source source) #(struct:location 48 15 1355 "/home/matthias/lam.ss") #(struc t:location 51 47 1535 "/home/matthias/lam.ss") (#(struct:list #(struct:origin source source) #(struct:location 48 16 1356 "/home/matthias/lam.ss") #(struct:location 48 30 1370 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(str uct:location 48 17 1357 "/home/matthias/lam.ss") #(struct:location 48 23 1363 "/home/matthias/lam.ss") symbol? symbol? ()) #(struct:symbol #(struct:origin source source) #(struct:location 48 25 1365 "/home/matthias/lam.ss") #(struct:location 48 29 1369 " /home/matthias/lam.ss") a-lam a-lam ())) 2 ()) #(struct:list #(struct:origin source source) #(struct:location 48 32 1372 "/home/matthias/lam.ss") #(struct:location 51 46 1534 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(stru ct:location 48 33 1373 "/home/matthias/lam.ss") #(struct:location 48 36 1376 "/home/matthias/lam.ss") cond cond ()) #(struct:list #(struct:origin source source) #(struct:location 49 34 1411 "/home/matthias/lam.ss") #(struct:location 50 41 1487 "/home/mat thias/lam.ss") (#(struct:list #(struct:origin source source) #(struct:location 49 35 1412 "/home/matthias/lam.ss") #(struct:location 49 68 1445 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 49 36 1413 "/home/m atthias/lam.ss") #(struct:location 49 40 1417 "/home/matthias/lam.ss") cons? cons? ()) #(struct:list #(struct:origin source source) #(struct:location 49 42 1419 "/home/matthias/lam.ss") #(struct:location 49 67 1444 "/home/matthias/lam.ss") (#(struct:symb ol #(struct:origin source source) #(struct:location 49 43 1420 "/home/matthias/lam.ss") #(struct:location 49 48 1425 "/home/matthias/lam.ss") member member ()) #(struct:symbol #(struct:origin source source) #(struct:location 49 50 1427 "/home/matthias/la m.ss") #(struct:location 49 54 1431 "/home/matthias/lam.ss") a-lam a-lam ()) #(struct:symbol #(struct:origin source source) #(struct:location 49 56 1433 "/home/matthias/lam.ss") #(struct:location 49 66 1443 "/home/matthias/lam.ss") in-scope-of in-scope-o f ())) 3 ())) 2 ()) #(struct:list #(struct:origin reader quote) #(struct:location 50 35 1481 "/home/matthias/lam.ss") #(struct:location 50 40 1486 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin reader quote) #(struct:location 50 35 1481 "/home /matthias/lam.ss") #(struct:location 50 35 1481 "/home/matthias/lam.ss") quote quote (-1)) #(struct:symbol #(struct:origin source source) #(struct:location 50 36 1482 "/home/matthias/lam.ss") #(struct:location 50 40 1486 "/home/matthias/lam.ss") bound bo und ())) 2 ())) 2 ()) #(struct:list #(struct:origin source source) #(struct:location 51 34 1522 "/home/matthias/lam.ss") #(struct:location 51 45 1533 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 51 35 1523 "/ home/matthias/lam.ss") #(struct:location 51 38 1526 "/home/matthias/lam.ss") else else ()) #(struct:list #(struct:origin reader quote) #(struct:location 51 40 1528 "/home/matthias/lam.ss") #(struct:location 51 44 1532 "/home/matthias/lam.ss") (#(struct:s ymbol #(struct:origin reader quote) #(struct:location 51 40 1528 "/home/matthias/lam.ss") #(struct:location 51 40 1528 "/home/matthias/lam.ss") quote quote (-1)) #(struct:symbol #(struct:origin source source) #(struct:location 51 41 1529 "/home/matthias/ lam.ss") #(struct:location 51 44 1532 "/home/matthias/lam.ss") free free ())) 2 ())) 2 ())) 3 ())) 2 ()) #(struct:list #(struct:origin source source) #(struct:location 52 15 1551 "/home/matthias/lam.ss") #(struct:location 54 76 1696 "/home/matthias/lam.s s") (#(struct:list #(struct:origin source source) #(struct:location 52 16 1552 "/home/matthias/lam.ss") #(struct:location 52 42 1578 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 52 17 1553 "/home/matthias/lam .ss") #(struct:location 52 19 1555 "/home/matthias/lam.ss") eq? eq? ()) #(struct:list #(struct:origin source source) #(struct:location 52 21 1557 "/home/matthias/lam.ss") #(struct:location 52 33 1569 "/home/matthias/lam.ss") (#(struct:symbol #(struct:ori gin source source) #(struct:location 52 22 1558 "/home/matthias/lam.ss") #(struct:location 52 26 1562 "/home/matthias/lam.ss") first first ()) #(struct:symbol #(struct:origin source source) #(struct:location 52 28 1564 "/home/matthias/lam.ss") #(struct:l ocation 52 32 1568 "/home/matthias/lam.ss") a-lam a-lam ())) 2 ()) #(struct:list #(struct:origin reader quote) #(struct:location 52 35 1571 "/home/matthias/lam.ss") #(struct:location 52 41 1577 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin re ader quote) #(struct:location 52 35 1571 "/home/matthias/lam.ss") #(struct:location 52 35 1571 "/home/matthias/lam.ss") quote quote (-1)) #(struct:symbol #(struct:origin source source) #(struct:location 52 36 1572 "/home/matthias/lam.ss") #(struct:locati on 52 41 1577 "/home/matthias/lam.ss") lambda lambda ())) 2 ())) 3 ()) #(struct:list #(struct:origin reader quasiquote) #(struct:location 53 16 1595 "/home/matthias/lam.ss") #(struct:location 54 75 1695 "/home/matthias/lam.ss") (#(struct:symbol #(struct: origin reader quasiquote) #(struct:location 53 16 1595 "/home/matthias/lam.ss") #(struct:location 53 16 1595 "/home/matthias/lam.ss") quasiquote quasiquote (-1)) #(struct:list #(struct:origin source source) #(struct:location 53 17 1596 "/home/matthias/la m.ss") #(struct:location 54 75 1695 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 53 18 1597 "/home/matthias/lam.ss") #(struct:location 53 23 1602 "/home/matthias/lam.ss") lambda lambda ()) #(struct:list #(str uct:origin reader unquote) #(struct:location 53 25 1604 "/home/matthias/lam.ss") #(struct:location 53 39 1618 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin reader unquote) #(struct:location 53 25 1604 "/home/matthias/lam.ss") #(struct:locatio n 53 25 1604 "/home/matthias/lam.ss") unquote unquote (-1)) #(struct:list #(struct:origin source source) #(struct:location 53 26 1605 "/home/matthias/lam.ss") #(struct:location 53 39 1618 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source s ource) #(struct:location 53 27 1606 "/home/matthias/lam.ss") #(struct:location 53 32 1611 "/home/matthias/lam.ss") second second ()) #(struct:symbol #(struct:origin source source) #(struct:location 53 34 1613 "/home/matthias/lam.ss") #(struct:location 53  38 1617 "/home/matthias/lam.ss") a-lam a-lam ())) 2 ())) 2 ()) #(struct:list #(struct:origin reader unquote) #(struct:location 54 19 1639 "/home/matthias/lam.ss") #(struct:location 54 74 1694 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin rea der unquote) #(struct:location 54 19 1639 "/home/matthias/lam.ss") #(struct:location 54 19 1639 "/home/matthias/lam.ss") unquote unquote (-1)) #(struct:list #(struct:origin source source) #(struct:location 54 20 1640 "/home/matthias/lam.ss") #(struct:loc ation 54 74 1694 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 54 21 1641 "/home/matthias/lam.ss") #(struct:location 54 23 1643 "/home/matthias/lam.ss") fob fob ()) #(struct:list #(struct:origin source source)  #(struct:location 54 25 1645 "/home/matthias/lam.ss") #(struct:location 54 37 1657 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 54 26 1646 "/home/matthias/lam.ss") #(struct:location 54 30 1650 "/home/matthia s/lam.ss") third third ()) #(struct:symbol #(struct:origin source source) #(struct:location 54 32 1652 "/home/matthias/lam.ss") #(struct:location 54 36 1656 "/home/matthias/lam.ss") a-lam a-lam ())) 2 ()) #(struct:list #(struct:origin source source) #(st ruct:location 54 39 1659 "/home/matthias/lam.ss") #(struct:location 54 73 1693 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 54 40 1660 "/home/matthias/lam.ss") #(struct:location 54 45 1665 "/home/matthias/lam .ss") append append ()) #(struct:list #(struct:origin source source) #(struct:location 54 47 1667 "/home/matthias/lam.ss") #(struct:location 54 60 1680 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 54 48 1668  "/home/matthias/lam.ss") #(struct:location 54 53 1673 "/home/matthias/lam.ss") second second ()) #(struct:symbol #(struct:origin source source) #(struct:location 54 55 1675 "/home/matthias/lam.ss") #(struct:location 54 59 1679 "/home/matthias/lam.ss") a- lam a-lam ())) 2 ()) #(struct:symbol #(struct:origin source source) #(struct:location 54 62 1682 "/home/matthias/lam.ss") #(struct:location 54 72 1692 "/home/matthias/lam.ss") in-scope-of in-scope-of ())) 3 ())) 3 ())) 2 ())) 3 ())) 2 ())) 2 ()) #(struct :list #(struct:origin source source) #(struct:location 55 15 1712 "/home/matthias/lam.ss") #(struct:location 57 52 1820 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 55 16 1713 "/home/matthias/lam.ss") #(struc t:location 55 19 1716 "/home/matthias/lam.ss") else else ()) #(struct:list #(struct:origin reader quasiquote) #(struct:location 56 16 1734 "/home/matthias/lam.ss") #(struct:location 57 51 1819 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin rea der quasiquote) #(struct:location 56 16 1734 "/home/matthias/lam.ss") #(struct:location 56 16 1734 "/home/matthias/lam.ss") quasiquote quasiquote (-1)) #(struct:list #(struct:origin source source) #(struct:location 56 17 1735 "/home/matthias/lam.ss") #(s truct:location 57 51 1819 "/home/matthias/lam.ss") (#(struct:list #(struct:origin reader unquote) #(struct:location 56 18 1736 "/home/matthias/lam.ss") #(struct:location 56 49 1767 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin reader unquote)  #(struct:location 56 18 1736 "/home/matthias/lam.ss") #(struct:location 56 18 1736 "/home/matthias/lam.ss") unquote unquote (-1)) #(struct:list #(struct:origin source source) #(struct:location 56 19 1737 "/home/matthias/lam.ss") #(struct:location 56 49  1767 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 56 20 1738 "/home/matthias/lam.ss") #(struct:location 56 22 1740 "/home/matthias/lam.ss") fob fob ()) #(struct:list #(struct:origin source source) #(struct:lo cation 56 24 1742 "/home/matthias/lam.ss") #(struct:location 56 36 1754 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 56 25 1743 "/home/matthias/lam.ss") #(struct:location 56 29 1747 "/home/matthias/lam.ss") f irst first ()) #(struct:symbol #(struct:origin source source) #(struct:location 56 31 1749 "/home/matthias/lam.ss") #(struct:location 56 35 1753 "/home/matthias/lam.ss") a-lam a-lam ())) 2 ()) #(struct:symbol #(struct:origin source source) #(struct:locat ion 56 38 1756 "/home/matthias/lam.ss") #(struct:location 56 48 1766 "/home/matthias/lam.ss") in-scope-of in-scope-of ())) 3 ())) 2 ()) #(struct:list #(struct:origin reader unquote) #(struct:location 57 18 1786 "/home/matthias/lam.ss") #(struct:location  57 50 1818 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin reader unquote) #(struct:location 57 18 1786 "/home/matthias/lam.ss") #(struct:location 57 18 1786 "/home/matthias/lam.ss") unquote unquote (-1)) #(struct:list #(struct:origin source so urce) #(struct:location 57 19 1787 "/home/matthias/lam.ss") #(struct:location 57 50 1818 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 57 20 1788 "/home/matthias/lam.ss") #(struct:location 57 22 1790 "/home/ma tthias/lam.ss") fob fob ()) #(struct:list #(struct:origin source source) #(struct:location 57 24 1792 "/home/matthias/lam.ss") #(struct:location 57 37 1805 "/home/matthias/lam.ss") (#(struct:symbol #(struct:origin source source) #(struct:location 57 25 1 793 "/home/matthias/lam.ss") #(struct:location 57 30 1798 "/home/matthias/lam.ss") second second ()) #(struct:symbol #(struct:origin source source) #(struct:location 57 32 1800 "/home/matthias/lam.ss") #(struct:location 57 36 1804 "/home/matthias/lam.ss" ) a-lam a-lam ())) 2 ()) #(struct:symbol #(struct:origin source source) #(struct:location 57 39 1807 "/home/matthias/lam.ss") #(struct:location 57 49 1817 "/home/matthias/lam.ss") in-scope-of in-scope-of ())) 3 ())) 2 ())) 2 ())) 2 ())) 2 ())) 4 ())) 3 ( )))
  MrSpidey error: Bad expr in traverse
  zodiac-start: expects argument of type <struct:zodiac>; given #(struct:internal-definition (#(struc...

From: Matthias Felleisen <matthias@cs.rice.edu>
To: shriram@cs.rice.edu
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu
Subject: Re: all/1497: MrSpidey can't analyze simple functions anymore
Date: Wed, 7 Jun 2000 21:35:33 -0500 (CDT)

    From: Shriram Krishnamurthi <shriram@cs.rice.edu>
    Date: Wed,  7 Jun 2000 21:00:46 -0500 (CDT)
    Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu
    Reply-To: shriram@cs.rice.edu
    Content-Type: text/plain; charset=US-ASCII
 
    What happens if you replace the entire program with just the program
 
      local
 
    ?
 
    'shriram
 
 Don't know what this means. 
 
 Don't you have a local cvs'ed copy of 102/14 on your laptop? 

From: "Paul A. Steckler" <steck@cs.rice.edu>
To: <matthias@rice.edu>, <shriram@cs.rice.edu>,
        "Clements@Cs. Rice. Edu" <clements@cs.rice.edu>
Cc: <plt-gnats@cs.rice.edu>
Subject: Re: all/1497: MrSpidey can't analyze simple functions anymore
Date: Thu, 8 Jun 2000 10:46:00 -0500

 Is the Zodiac form "internal-definition" new?  Are there other
 new forms?
 
 That seems to be the trouble.
 
 Which Zodiac form would 101 have produced in place of 
 internal-definition?
 
 -- Paul
 

From: Shriram Krishnamurthi <shriram@cs.rice.edu>
To: "Paul A. Steckler" <steck@cs.rice.edu>
Cc: <matthias@rice.edu>, "Clements@Cs. Rice. Edu" <clements@cs.rice.edu>,
        <plt-gnats@cs.rice.edu>
Subject: Re: all/1497: MrSpidey can't analyze simple functions anymore
Date: Thu,  8 Jun 2000 10:56:06 -0500 (CDT)

 The form has always been there.  But it's not for external
 consumption.  I am surprised to see it could have leaked out of the
 innards of the expander.  I suspect it has to do with the fact that
 `local' isn't bound.
 
 internal-definition is the structure Zodiac creates when seeing a
 define not in a top-level context.  It's a structure listing the body
 and the names.  When internal definitions are legal, these structures
 are accumulated to construct the names and bodies of the letrec-values
 that internal defines merge into.  It's all quite simple, really.
 
 Simple, and apparently buggy.
 
 'shriram
 
 Paul A. Steckler wrote:
 
 > Is the Zodiac form "internal-definition" new?  Are there other
 > new forms?
 > 
 > That seems to be the trouble.
 > 
 > Which Zodiac form would 101 have produced in place of 
 > internal-definition?
 > 
 > -- Paul

From: "Paul A. Steckler" <steck@cs.rice.edu>
To: <shriram@cs.rice.edu>
Cc: <matthias@rice.edu>, "Clements@Cs. Rice. Edu" <clements@cs.rice.edu>,
        <plt-gnats@cs.rice.edu>
Subject: RE: all/1497: MrSpidey can't analyze simple functions anymore
Date: Thu, 8 Jun 2000 11:04:42 -0500

 >The form has always been there.  But it's not for external
 >consumption.  I am surprised to see it could have leaked out of the
 >innards of the expander.  I suspect it has to do with the fact that
 >`local' isn't bound.
 
 So, to recap, you think this problem is a Zodiac bug whose 
 symptom happens to show up in Spidey?  And Spidey doesn't 
 need to handle this form?
 
 -- Paul
 

From: Shriram Krishnamurthi <shriram@cs.rice.edu>
To: "Paul A. Steckler" <steck@cs.rice.edu>
Cc: <matthias@rice.edu>, "Clements@Cs. Rice. Edu" <clements@cs.rice.edu>,
        <plt-gnats@cs.rice.edu>
Subject: RE: all/1497: MrSpidey can't analyze simple functions anymore
Date: Thu,  8 Jun 2000 11:24:18 -0500 (CDT)

 Apparently, on the former, definitely, on the latter.
 
 Paul A. Steckler wrote:
 
 > >The form has always been there.  But it's not for external
 > >consumption.  I am surprised to see it could have leaked out of the
 > >innards of the expander.  I suspect it has to do with the fact that
 > >`local' isn't bound.
 > 
 > So, to recap, you think this problem is a Zodiac bug whose 
 > symptom happens to show up in Spidey?  And Spidey doesn't 
 > need to handle this form?
 > 
 > -- Paul

Responsible-Changed-From-To: steck->shriram
Responsible-Changed-By: shriram
Responsible-Changed-When: Mon Jun 12 14:20:09 2000
Responsible-Changed-Why:

Responsible-Changed-From-To: shriram->steck
Responsible-Changed-By: shriram
Responsible-Changed-When: Mon Jun 19 16:36:33 2000
Responsible-Changed-Why:
The problem is not with Zodiac, it's really with MrSpidey's handling
of Zodiac errors.  This is documented in PR 1528.  The above program,
preceded with (require-library "macro.ss") (which is necessary to make 
it run in DrScheme's full languages), works fine.  When analyzing the
sample program, Zodiac does actually generate the same internal error
message that it produces when you run the program in Full Scheme, as
evidenced by the message printed by MrSpidey while parsing.

For consistency, I think it's best for Zodiac to mirror Full Scheme as
provided by the evaluator.  So users will have to use require-library
for Zodiac to recognize local.

State-Changed-From-To: open-closed
State-Changed-By: steck
State-Changed-When: Mon Jun 19 17:35:37 2000
State-Changed-Why:
Feature, not bug.

>Unformatted:

