From matthias@cs.rice.edu  Tue Jul 22 17:51:41 1997
Received: from africa.cs.rice.edu (africa.cs.rice.edu [128.42.1.175]) by cs.rice.edu (8.8.5/8.7.1) with ESMTP id RAA24586 for <plt-gnats@cs.rice.edu>; Tue, 22 Jul 1997 17:51:40 -0500 (CDT)
Message-Id: <199707222251.RAA02240@africa.cs.rice.edu>
Date: Tue, 22 Jul 1997 17:51:40 -0500 (CDT)
From: Matthias Felleisen <matthias@cs.rice.edu>
Reply-To: matthias@rice.edu
To: plt-gnats@cs.rice.edu
Subject: spidey doesn't perform correctly on polymorphic
X-Send-Pr-Version: 3.101

>Number:         235
>Category:       mrspidey
>Synopsis:       spidey doesn't perform correctly on polymorphic
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    cormac
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Jul 22 22:55:02 GMT 1997
>Last-Modified:  Tue Jul 22 20:48:46 CDT 1997
>Originator:     Matthias Felleisen
>Organization:
titan
>Release:        unknown
>Environment:
	europa, bundled sunday
>Description:
	analyze this:

	(define vector-map
	  (polymorphic 
	   (lambda (f v)
	     (local ([define len (vector-length v)]
		     [define new-vec (make-vector len)]
		     (define (vm! pos)
		       (if (< pos len)
			   (begin
			     (vector-set! new-vec pos (f (vector-ref v pos)))
			     (vm! (add1 pos)))
			   new-vec)))
	       (vm! 0)))))

	; (define (vector-map f v)
	;   (build-vector (vector-length v) (lambda (i) (f (vector-ref v i)))))

	(: (vector-map (type: (str -> str)) (type: (vec str))) (vec str))
	(: (vector-map (type: (num -> num)) (type: (vec num))) (vec num))
	
	The first assertion fails, the second one succeeds. Why?

>How-To-Repeat:
	see above
>Fix:
>Audit-Trail:

Responsible-Changed-From-To: krentel->cormac
Responsible-Changed-By: cormac
Responsible-Changed-When: Tue Jul 22 20:41:29 1997
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: cormac
State-Changed-When: Tue Jul 22 20:41:31 1997
State-Changed-Why:

Beautiful!!!

I chalk this one up as another epiphany, this one highlighting
MrSpidey's usability!

So I got the error report, fired up spidey, and sure enough, the first
assertion fails :-( 

So I do a couple of mouse clicks to see what MrSpidey is
thinking. Thirty seconds and nine mouse clicks later, its obvious. The
definition:

        [define new-vec (make-vector len)]

initializes the vector to 0 (MzScheme semantics). So of course num is
an element in the returned vector. Not a problem for the second call,
but kills the assertion on the first. A subtle point, but MrSpidey's
UI reveals all in under a minute. :-)

Now, imagine trying to understand something like this in (say) Soft
Scheme, or an appropriately flexible derivative of ML.


>Unformatted:
