From tmiller@cs.rice.edu  Tue Aug  5 16:14:36 1997
Received: from noel.cs.rice.edu (noel.cs.rice.edu [128.42.1.136]) by cs.rice.edu (8.8.5/8.7.1) with ESMTP id QAA27844 for <plt-gnats@cs.rice.edu>; Tue, 5 Aug 1997 16:14:35 -0500 (CDT)
Message-Id: <199708052114.QAA23644@noel.cs.rice.edu>
Date: Tue, 5 Aug 1997 16:14:34 -0500 (CDT)
From: Tim Miller <tmiller@cs.rice.edu>
Reply-To: tmiller@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: spidey doesn't like "(: expr empty)"
X-Send-Pr-Version: 3.101

>Number:         244
>Category:       mrspidey
>Synopsis:       spidey doesn't like "(: expr empty)"
>Class:          sw-bug
>Responsible:    ptg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Aug 05 17:15:01 -0400 1997
>Last-Modified:  Mon May 05 14:17:41 -0400 2008
>Originator:     Tim Miller
>Organization:
titan
>Submitter-Id:   unknown
>Release:        unknown
>Environment:
	drscheme -x, australia
>Description:
	Whenever the set of types for expr is non-empty, Spidey reports not
		only a failed assertion, but also that "empty" is an unbound
		type variable.
>How-To-Repeat:
	Run spidey on the following program:
		(define (foo x)
		  (if (number? x)
		      x
		      (: x empty)))
		(foo 5)
		(foo 'five)
>Fix:
The following patch works:

[noel]~/plt/mrspidey/Sba% diff -C 5 /home/mflatt/plt/mrspidey/Sba/typelang.ss \
                                    /home/tmiller/plt/mrspidey/Sba/typelang.ss
*** /home/mflatt/plt/mrspidey/Sba/typelang.ss   Fri Jul 25 16:19:45 1997
--- /home/tmiller/plt/mrspidey/Sba/typelang.ss  Tue Aug  5 15:00:10 1997
***************
*** 687,696 ****
--- 687,702 ----
                                          (let ([Tvar-t (mk-Tvar 'in-type?)])
                                            (new-AV! Tvar-t AV)
                                            (Tvar-containment? Tvar-t Tvar)))
                                        #f)])
                                  global-tdef-env))
+                            (and (eq? a 'empty)
+                                 (lambda (AV)
+                                     (let ([Tvar-t (mk-Tvar 'in-type?)])
+                                       (new-AV! Tvar-t AV)
+                                       (Tvar-containment? Tvar-t
+                                                        (mk-tvar-empty)))))
                               (unbound a))])
                   (fn AV))]
                [('lambda arg res)
                  (and (eq? (AV-template AV) template-lam)
                    (Tvar-in-type?
>Audit-Trail:
State-Changed-From-To: open-closed
State-Changed-By: steck
State-Changed-When: Wed Jun 24 11:03:19 1998
State-Changed-Why:
Tim's fix added to code.

>Unformatted:
