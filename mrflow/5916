From schlie@attbi.com  Sat Oct 26 16:42:34 2002
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id QAA10583
	for <bugs>; Sat, 26 Oct 2002 16:42:34 -0400
Message-Id: <200210262042.QAA10583@champlain.ccs.neu.edu>
Date: Sat, 26 Oct 2002 16:42:34 -0400
From: Paul Schlie <schlie@attbi.com>
To: bugs@plt-scheme.org
Subject: DrScheme OSX, button highlighting getting confused with Analyze

>Number:         5916
>Category:       mrflow
>Synopsis:       DrScheme OSX, button highlighting getting confused with Analyze
>Class:          sw-bug
>Responsible:    meunier
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Oct 26 16:50:00 -0400 2002
>Closed-Date:    Tue Jul 19 15:59:22 -0400 2011
>Last-Modified:  Tue Jul 19 15:59:22 -0400 2011
>Originator:     Paul Schlie
>Organization:
plt
>Submitter-Id:   unknown
>Release:        202.5
>Environment:
macosx "Darwin fusion.local. 6.1 Darwin Kernel Version 6.1: Fri Sep  6 23:24:34 PDT 2002; root:xnu/xnu-344.2.obj~2/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx)

Docs Installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "CVS" "drscheme" "framework" "help" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "tex2page" "tools" "tour")

Collections:
(("/Users/paul/Desktop/plt-cvs/plt/bin/../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "parser-tools" "readline" "setup" "sirmail" "slatex" "slibinit" "srpersist" "stepper" "string-constants" "syntax" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))

Human Language: english
>Description:
sometimes the window buttons appear as dimmed when likely they
shouldn't, possibly some problem with button state updating?
>How-To-Repeat:
- open DrScheme (I happen to be useing Graphical MzScheme)
- enter into the interaction window:
(define (fib x) (if (< x 2) (- (fib (- x 1)) (fib (- x 2)))))
(fib 4)
- select the "Analyze" button
- a "dialog" will will warn about using R5RS, select OK.
- repeat the "Analyze" "dialog-ok" process a few times, and notice
that the "Analyze" buton (and often others) become dim, but still
active?

(as an aside, the "<" within the program appears to only confuse
"Analyze" in the presence of the (fib 4) statement, but if the (fib 4)
statement is removed, it doesn't flag "<" as an error?)


>Fix:
>Release-Note:
>Audit-Trail:
Responsible-Changed-From-To: steck->meunier
Responsible-Changed-By: meunier
Responsible-Changed-When: Wed Nov  6 15:08:00 2002
Responsible-Changed-Why:
    .

From: Philippe Meunier <meunier@ccs.neu.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/5916: DrScheme OSX, button highlighting getting confused with Analyze
Date: Fri, 15 Nov 2002 16:06:28 -0500

 Paul Schlie wrote:
 >sometimes the window buttons appear as dimmed when likely they
 >shouldn't, possibly some problem with button state updating?
 >>How-To-Repeat:
 >- open DrScheme (I happen to be useing Graphical MzScheme)
 >- enter into the interaction window:
 >(define (fib x) (if (< x 2) (- (fib (- x 1)) (fib (- x 2)))))
 >(fib 4)
 >- select the "Analyze" button
 >- a "dialog" will will warn about using R5RS, select OK.
 >- repeat the "Analyze" "dialog-ok" process a few times, and notice
 >that the "Analyze" buton (and often others) become dim, but still
 >active?
 
 This seems to be a MacOSX-specific bug.  I can reproduce it on John's
 machine but it seems to work fine on my solaris machine.  It looks
 like sending "enable-evaluation" to the unit frame doesn't always
 un-gray the buttons (even though the callbacks associated with the
 different buttons are actually called if you click on them - i.e. the
 buttons work but are just not un-grayed)
 
 >(as an aside, the "<" within the program appears to only confuse
 >"Analyze" in the presence of the (fib 4) statement, but if the (fib 4)
 >statement is removed, it doesn't flag "<" as an error?)
 
 MrFlow analyzes the flow of values.  If you don't give any value to
 the function by calling it, no value flows around and no value reaches
 the "<", so no error is detected (or to put it another way, if you
 have a program that doesn't compute anything, it doesn't contain
 runtime errors...)  Robby Findler and I are working on an analysis
 whereby you won't have to actually apply the function to anything for
 the error to show up, you'll just have to specify a contract for the
 function using his contract system, but that's not been put in MrFlow
 yet.
 
 Philippe
 

From: Paul Schlie <schlie@attbi.com>
To: Philippe Meunier <meunier@ccs.neu.edu>
Cc: <bugs@plt-scheme.org>, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: all/5916: DrScheme OSX, button highlighting getting confused
	with Analyze
Date: Fri, 15 Nov 2002 16:39:00 -0500

 (thanks, annotated response below)
 
 on 11/15/02 4:06 PM, Philippe Meunier wrote:
 >
 > Paul Schlie wrote:
 >> sometimes the window buttons appear as dimmed when likely they
 >> shouldn't, possibly some problem with button state updating?
 >>> How-To-Repeat:
 >> - open DrScheme (I happen to be useing Graphical MzScheme)
 >> - enter into the interaction window:
 >> (define (fib x) (if (< x 2) (- (fib (- x 1)) (fib (- x 2)))))
 >> (fib 4)
 >> - select the "Analyze" button
 >> - a "dialog" will will warn about using R5RS, select OK.
 >> - repeat the "Analyze" "dialog-ok" process a few times, and notice
 >> that the "Analyze" buton (and often others) become dim, but still
 >> active?
 > 
 > This seems to be a MacOSX-specific bug.  I can reproduce it on John's
 > machine but it seems to work fine on my solaris machine.  It looks
 > like sending "enable-evaluation" to the unit frame doesn't always
 > un-gray the buttons (even though the callbacks associated with the
 > different buttons are actually called if you click on them - i.e. the
 > buttons work but are just not un-grayed)
 
 - Matthew may have some insight with respect to the MAC implementation ?
 
 > 
 >> (as an aside, the "<" within the program appears to only confuse
 >> "Analyze" in the presence of the (fib 4) statement, but if the (fib 4)
 >> statement is removed, it doesn't flag "<" as an error?)
 > 
 > MrFlow analyzes the flow of values.  If you don't give any value to
 > the function by calling it, no value flows around and no value reaches
 > the "<", so no error is detected (or to put it another way, if you
 > have a program that doesn't compute anything, it doesn't contain
 > runtime errors...)  Robby Findler and I are working on an analysis
 > whereby you won't have to actually apply the function to anything for
 > the error to show up, you'll just have to specify a contract for the
 > function using his contract system, but that's not been put in MrFlow
 > yet.
 
 - ok, but why is "<" confusing analyze when fed a valid value?
 
 > 
 > Philippe
 > 
 

From: Philippe Meunier <meunier@ccs.neu.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: Philippe Meunier <meunier@ccs.neu.edu>, bugs@plt-scheme.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: all/5916: DrScheme OSX, button highlighting getting confused with Analyze
Date: Fri, 15 Nov 2002 17:00:27 -0500

 Paul Schlie wrote:
 >- ok, but why is "<" confusing analyze when fed a valid value?
 
 If you use the "show errors" menu for "<", you'll see that it
 complains about "complex not a subtype of real" (actually, a whole
 union is not a subtype of real, but only the "complex" part is
 relevant here).  If you look at the arguments of "<", you know the
 complex can only come from "x", which is confirmed by looking at the
 type.  Now if you follow the arrows backward, you'll see that "x" gets
 its values from three places: from the "4" from the original call to
 "f", and from the two recursive calls to "f".  These recursive calls
 have (- x ...) as arguments, and you'll see that the value for each of
 these two (- x ...) expressions is "complex".  The reason for that is
 because we only conservatively simulate the subtractions, i.e. the
 type for "-" is (complex ... -> complex) so the type returned by an
 application of "-" is always "complex", MrFlow doesn't actually
 evaluate the subtraction (that's the whole point of a static analysis)
 to see whether the actual result would be a more restricted subtype of
 complex.  Mrflow could be hacked to understand arithmetic operations
 as a special case and try to simulate their operation more closely
 (MrSpidey had a special option for that) but that's not currently done
 (see
 http://bugs.plt-scheme.org/cgi-bin/gnats-query?who=&pr-number=5678&who-responsible=&pr-state=&query-type=pr-number&args=&submit=Query+bug+reports
 for the corresponding bug report, but don't expect that one to be
 closed anytime soon...)
 
 Philippe
 

From: Paul Schlie <schlie@attbi.com>
To: Philippe Meunier <meunier@ccs.neu.edu>
Cc: <bugs@plt-scheme.org>, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: all/5916: DrScheme OSX, button highlighting getting confused
	with Analyze
Date: Fri, 15 Nov 2002 23:01:47 -0500

 Unless I misunderstand (which I might), since the most-specific type of x
 will always be either the most-specific type of the original argument, or
 the most-specific subtype resulting from the addition of the subtractions
 between x and a constant <integer>; if the initial most-specific type of x
 is <integer>, then the most-specific subtype of x will always be <integer>;
 which should unambiguously satisfy being a subtype of <real>, in turn being
 a subtype of <complex>.
 
 For: (define (fib x) (if (< x 2) (+ (fib (- x 1)) (fib (- x 2)))))
 
 - the result a traditional arithmetic operation between two most-specific
 types will always be the least-specific subtype of it's arguments; so when
 both types are initially known, as would be the case in the above function
 definition, the most-specific subtype of x will be the least-specific
 subtype between an <integer> and <integer> -> <integer>.
 
 - If the most-specific type initial argument were of (<real> or <complex>),
 then the least-specific subtype between a (<real> or <complex>) and
 <integer> -> (<real> or <complex>); which still satisfies being a subtype of
 <complex>.
 
 - If the initial augment x was unspecified, or not of known subtype of
 <complex>, then and only then may the "<", "+" and "-" operations yield
 ambiguous/erroneous results.
 
 Yes? -paul-
 
 on 11/15/02 5:00 PM, Philippe Meunier wrote:
 >
 > Paul Schlie wrote:
 >> - ok, but why is "<" confusing analyze when fed a valid value?
 > 
 > If you use the "show errors" menu for "<", you'll see that it
 > complains about "complex not a subtype of real" (actually, a whole
 > union is not a subtype of real, but only the "complex" part is
 > relevant here).  If you look at the arguments of "<", you know the
 > complex can only come from "x", which is confirmed by looking at the
 > type.  Now if you follow the arrows backward, you'll see that "x" gets
 > its values from three places: from the "4" from the original call to
 > "f", and from the two recursive calls to "f".  These recursive calls
 > have (- x ...) as arguments, and you'll see that the value for each of
 > these two (- x ...) expressions is "complex".  The reason for that is
 > because we only conservatively simulate the subtractions, i.e. the
 > type for "-" is (complex ... -> complex) so the type returned by an
 > application of "-" is always "complex", MrFlow doesn't actually
 > evaluate the subtraction (that's the whole point of a static analysis)
 > to see whether the actual result would be a more restricted subtype of
 > complex.  Mrflow could be hacked to understand arithmetic operations
 > as a special case and try to simulate their operation more closely
 > (MrSpidey had a special option for that) but that's not currently done
 > (see
 > http://bugs.plt-scheme.org/cgi-bin/gnats-query?who=&pr-number=5678&who-respons
 > ible=&pr-state=&query-type=pr-number&args=&submit=Query+bug+reports
 > for the corresponding bug report, but don't expect that one to be
 > closed anytime soon...)
 > 
 > Philippe
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: Philippe Meunier <meunier@ccs.neu.edu>
Cc: <bugs@plt-scheme.org>, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: all/5916: DrScheme OSX, button highlighting getting confused
	with Analyze
Date: Fri, 15 Nov 2002 23:50:37 -0500

 Corrected on second line: (it's getting late)
 
 "either the most-specific" -> "the LEAST-specific"
 
 on 11/15/02 11:01 PM, Paul Schlie wrote:
 >
 > Unless I misunderstand (which I might), since the most-specific type of x will
 > always be "the LEAST-specific" type of the original argument, or the
 > most-specific subtype resulting from the addition of the subtractions between
 > x and a constant <integer>; if the initial most-specific type of x is
 > <integer>, then the most-specific subtype of x will always be <integer>; which
 > should unambiguously satisfy being a subtype of <real>, in turn being a
 > subtype of <complex>.
 > 
 > For: (define (fib x) (if (< x 2) (+ (fib (- x 1)) (fib (- x 2)))))
 > 
 > - the result a traditional arithmetic operation between two most-specific
 > types will always be the least-specific subtype of it's arguments; so when
 > both types are initially known, as would be the case in the above function
 > definition, the most-specific subtype of x will be the least-specific subtype
 > between an <integer> and <integer> -> <integer>.
 > 
 > - If the most-specific type initial argument were of (<real> or <complex>),
 > then the least-specific subtype between a (<real> or <complex>) and <integer>
 > -> (<real> or <complex>); which still satisfies being a subtype of <complex>.
 > 
 > - If the initial augment x was unspecified, or not of known subtype of
 > <complex>, then and only then may the "<", "+" and "-" operations yield
 > ambiguous/erroneous results.
 > 
 > Yes? -paul-
 > 
 > on 11/15/02 5:00 PM, Philippe Meunier wrote:
 >> 
 >> Paul Schlie wrote:
 >>> - ok, but why is "<" confusing analyze when fed a valid value?
 >> 
 >> If you use the "show errors" menu for "<", you'll see that it
 >> complains about "complex not a subtype of real" (actually, a whole
 >> union is not a subtype of real, but only the "complex" part is
 >> relevant here).  If you look at the arguments of "<", you know the
 >> complex can only come from "x", which is confirmed by looking at the
 >> type.  Now if you follow the arrows backward, you'll see that "x" gets
 >> its values from three places: from the "4" from the original call to
 >> "f", and from the two recursive calls to "f".  These recursive calls
 >> have (- x ...) as arguments, and you'll see that the value for each of
 >> these two (- x ...) expressions is "complex".  The reason for that is
 >> because we only conservatively simulate the subtractions, i.e. the
 >> type for "-" is (complex ... -> complex) so the type returned by an
 >> application of "-" is always "complex", MrFlow doesn't actually
 >> evaluate the subtraction (that's the whole point of a static analysis)
 >> to see whether the actual result would be a more restricted subtype of
 >> complex.  Mrflow could be hacked to understand arithmetic operations
 >> as a special case and try to simulate their operation more closely
 >> (MrSpidey had a special option for that) but that's not currently done
 >> (see
 >> 
 http://bugs.plt-scheme.org/cgi-bin/gnats-query?who=&pr-number=5678&who-respon>>
 s
 >> ible=&pr-state=&query-type=pr-number&args=&submit=Query+bug+reports
 >> for the corresponding bug report, but don't expect that one to be
 >> closed anytime soon...)
 >> 
 >> Philippe
 >> 
 

From: Paul Schlie <schlie@attbi.com>
To: Philippe Meunier <meunier@ccs.neu.edu>
Cc: <bugs@plt-scheme.org>, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: all/5916: DrScheme OSX, button highlighting getting confused
	with Analyze
Date: Fri, 15 Nov 2002 23:58:22 -0500

 One last time, then going to sleep: (first paragraph over)
 
 Unless I misunderstand (which I might), since the most-specific type of x
 will always be "the LEAST-specific" type of "either" the original argument,
 or the most-specific subtype resulting from the addition of the subtractions
 between x and a constant <integer>; if the initial most-specific type of x
 is <integer>, then the most-specific subtype of x will always be <integer>;
 which should unambiguously satisfy being a subtype of <real>, in turn being
 a subtype of <complex>.
 
 on 11/15/02 11:50 PM, Paul Schlie wrote:
 >
 > Corrected on second line: (it's getting late)
 > 
 > "either the most-specific" -> "the LEAST-specific"
 > 
 > on 11/15/02 11:01 PM, Paul Schlie wrote:
 >> 
 >> Unless I misunderstand (which I might), since the most-specific type of x
 >> will 
 >> always be "the LEAST-specific" type of the original argument, or the
 >> most-specific subtype resulting from the addition of the subtractions between
 >> x and a constant <integer>; if the initial most-specific type of x is
 >> <integer>, then the most-specific subtype of x will always be <integer>;
 >> which 
 >> should unambiguously satisfy being a subtype of <real>, in turn being a
 >> subtype of <complex>.
 >> 
 >> For: (define (fib x) (if (< x 2) (+ (fib (- x 1)) (fib (- x 2)))))
 >> 
 >> - the result a traditional arithmetic operation between two most-specific
 >> types will always be the least-specific subtype of it's arguments; so when
 >> both types are initially known, as would be the case in the above function
 >> definition, the most-specific subtype of x will be the least-specific subtype
 >> between an <integer> and <integer> -> <integer>.
 >> 
 >> - If the most-specific type initial argument were of (<real> or <complex>),
 >> then the least-specific subtype between a (<real> or <complex>) and <integer>
 >> -> (<real> or <complex>); which still satisfies being a subtype of <complex>.
 >> 
 >> - If the initial augment x was unspecified, or not of known subtype of
 >> <complex>, then and only then may the "<", "+" and "-" operations yield
 >> ambiguous/erroneous results.
 >> 
 >> Yes? -paul-
 >> 
 >> on 11/15/02 5:00 PM, Philippe Meunier wrote:
 >>> 
 >>> Paul Schlie wrote:
 >>>> - ok, but why is "<" confusing analyze when fed a valid value?
 >>> 
 >>> If you use the "show errors" menu for "<", you'll see that it
 >>> complains about "complex not a subtype of real" (actually, a whole
 >>> union is not a subtype of real, but only the "complex" part is
 >>> relevant here).  If you look at the arguments of "<", you know the
 >>> complex can only come from "x", which is confirmed by looking at the
 >>> type.  Now if you follow the arrows backward, you'll see that "x" gets
 >>> its values from three places: from the "4" from the original call to
 >>> "f", and from the two recursive calls to "f".  These recursive calls
 >>> have (- x ...) as arguments, and you'll see that the value for each of
 >>> these two (- x ...) expressions is "complex".  The reason for that is
 >>> because we only conservatively simulate the subtractions, i.e. the
 >>> type for "-" is (complex ... -> complex) so the type returned by an
 >>> application of "-" is always "complex", MrFlow doesn't actually
 >>> evaluate the subtraction (that's the whole point of a static analysis)
 >>> to see whether the actual result would be a more restricted subtype of
 >>> complex.  Mrflow could be hacked to understand arithmetic operations
 >>> as a special case and try to simulate their operation more closely
 >>> (MrSpidey had a special option for that) but that's not currently done
 >>> (see
 >>> http://bugs.plt-scheme.org/cgi-bin/gnats-query?who=&pr-number=5678&who-respo
 >>> n>> s
 >>> ible=&pr-state=&query-type=pr-number&args=&submit=Query+bug+reports
 >>> for the corresponding bug report, but don't expect that one to be
 >>> closed anytime soon...)
 >>> 
 >>> Philippe
 >>> 
 

From: Philippe Meunier <meunier@ccs.neu.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/5916: DrScheme OSX, button highlighting getting confused with Analyze
Date: Mon, 18 Nov 2002 19:56:53 -0500

 Paul Schlie wrote:
 >Unless I misunderstand (which I might), since the most-specific type of x
 >will always be either the most-specific type of the original argument, or
 >the most-specific subtype resulting from the addition of the subtractions
 >between x and a constant <integer>; if the initial most-specific type of x
 >is <integer>, then the most-specific subtype of x will always be <integer>;
 >which should unambiguously satisfy being a subtype of <real>, in turn being
 >a subtype of <complex>.
 >
 >For: (define (fib x) (if (< x 2) (+ (fib (- x 1)) (fib (- x 2)))))
 >
 >- the result a traditional arithmetic operation between two most-specific
 >types will always be the least-specific subtype of it's arguments; so when
 >both types are initially known, as would be the case in the above function
 >definition, the most-specific subtype of x will be the least-specific
 >subtype between an <integer> and <integer> -> <integer>.
 >
 >- If the most-specific type initial argument were of (<real> or <complex>),
 >then the least-specific subtype between a (<real> or <complex>) and
 ><integer> -> (<real> or <complex>); which still satisfies being a subtype of
 ><complex>.
 >
 >- If the initial augment x was unspecified, or not of known subtype of
 ><complex>, then and only then may the "<", "+" and "-" operations yield
 >ambiguous/erroneous results.
 >
 >Yes? -paul-
 
 Yes, it's doable.  But to do that you would need again to have ad-hoc
 rules added to the analysis that simulate the way these arithmetic
 operations work.  In effect you would have special rules that do
 abstract interpretation of these primitives.  And for now I'm trying
 to avoid adding special cases; I'd rather concentrate on getting
 MrFlow out and then extending the analysis to modules :-)
 
 Note that there is already one place in the analysis where something
 like that is done: "if" expressions.  Analyse the following:
 
 (if #t 1 2)
 
 and you'll see that the value for the expression is 1, not (union 1
 2).  So the analysis for "if" actually looks at the value returned by
 the test part.  Doing what you propose is pretty much the same thing
 and the analysis has already part of (but not all) the machinery
 required to simulate stuff like that, it's just that right now I'm
 concentrating on other stuff.
 
 Philippe
 

From: Paul Schlie <schlie@attbi.com>
To: Philippe Meunier <meunier@ccs.neu.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/5916: DrScheme OSX, button highlighting getting confused
	with Analyze
Date: Mon, 18 Nov 2002 20:30:11 -0500

 Thanks, however, although I don't fully appreciate the constraints you're
 operating under, please accept the the following as constructive feedback:
 
 - I suspect that you'll have to more rigorously deduce the numeric type
 resulting from numeric operations, it likely needs to be minimally capable
 of discriminating between integer and other numeric types, as since some
 functions require integer operands, which may be a result of basic
 arithmetic calculations, assuming that numeric operations produce complex
 results is not likely useful in most circumstances.
 
 Best of luck, -paul-
 
 P.S. As an aside, I still don't think the "<" operation should predict a
 type mismatch, as in even the simplest case, it's operands are known to be
 numeric.
 
 
 on 11/18/02 7:56 PM, Philippe Meunier wrote:
 >
 > Paul Schlie wrote:
 >> Unless I misunderstand (which I might), since the most-specific type of x
 >> will always be either the most-specific type of the original argument, or
 >> the most-specific subtype resulting from the addition of the subtractions
 >> between x and a constant <integer>; if the initial most-specific type of x
 >> is <integer>, then the most-specific subtype of x will always be <integer>;
 >> which should unambiguously satisfy being a subtype of <real>, in turn being
 >> a subtype of <complex>.
 >> 
 >> For: (define (fib x) (if (< x 2) (+ (fib (- x 1)) (fib (- x 2)))))
 >> 
 >> - the result a traditional arithmetic operation between two most-specific
 >> types will always be the least-specific subtype of it's arguments; so when
 >> both types are initially known, as would be the case in the above function
 >> definition, the most-specific subtype of x will be the least-specific
 >> subtype between an <integer> and <integer> -> <integer>.
 >> 
 >> - If the most-specific type initial argument were of (<real> or <complex>),
 >> then the least-specific subtype between a (<real> or <complex>) and
 >> <integer> -> (<real> or <complex>); which still satisfies being a subtype of
 >> <complex>.
 >> 
 >> - If the initial augment x was unspecified, or not of known subtype of
 >> <complex>, then and only then may the "<", "+" and "-" operations yield
 >> ambiguous/erroneous results.
 >> 
 >> Yes? -paul-
 > 
 > Yes, it's doable.  But to do that you would need again to have ad-hoc
 > rules added to the analysis that simulate the way these arithmetic
 > operations work.  In effect you would have special rules that do
 > abstract interpretation of these primitives.  And for now I'm trying
 > to avoid adding special cases; I'd rather concentrate on getting
 > MrFlow out and then extending the analysis to modules :-)
 > 
 > Note that there is already one place in the analysis where something
 > like that is done: "if" expressions.  Analyse the following:
 > 
 > (if #t 1 2)
 > 
 > and you'll see that the value for the expression is 1, not (union 1
 > 2).  So the analysis for "if" actually looks at the value returned by
 > the test part.  Doing what you propose is pretty much the same thing
 > and the analysis has already part of (but not all) the machinery
 > required to simulate stuff like that, it's just that right now I'm
 > concentrating on other stuff.
 > 
 > Philippe
 > 
 
State changed from "open" to "analyzed" by meunier at Wed, 31 Mar 2004 11:13:05 -0500
.

View:
  http://bugs.plt-scheme.org/query/?cmd=view+audit-trail&pr=5916

State changed from "analyzed" to "closed" by samth at Tue, 19 Jul 2011 15:59:22 -0400
Reason>>> mrflow -- analyzed

>Unformatted:
