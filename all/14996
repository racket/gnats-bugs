From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar  2 05:46:44 2015
Received: from mail-ob0-f178.google.com (mail-ob0-f178.google.com [209.85.214.178])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t22AkcnI008675
	for <bugs@bugs.plt-scheme.org>; Mon, 2 Mar 2015 05:46:38 -0500
Message-Id: <201503021046.t22AkZsC008644@winooski.ccs.neu.edu>
Date: Mon, 2 Mar 2015 05:46:35 -0500
From: lqhofwkh@sharklasers.com
To: bugs@racket-lang.org
Subject: scribble/lp: Cannot use the word "count" as a syntax literal across module boundaries.

>Number:         14996
>Category:       all
>Synopsis:       scribble/lp: Cannot use the word "count" as a syntax literal across module boundaries.
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Mar 02 05:48:01 -0500 2015
>Last-Modified:  Thu May 28 11:28:01 -0400 2015
>Originator:     Muck Raker
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1
>Environment:
Win32 / Mozilla/5.0 (Windows NT 6.1; rv:24.0) Gecko/20100101 Firefox/24.0
>Description:
Save the program below as "test.rkt", then attempt the following from
Racket:

   > (require "test.rkt")
   > (mymacro count)
   stdin::23: mymacro: bad syntax
     in: (mymacro count)
     context...:
      /usr/share/racket/collects/racket/private/misc.rkt:87:7

The syntax-rule doesn't match because it requires the word "count", and I'm providing the word "count" instead, which differs in some invisible way. The problem goes away if I define the macro to
require a word other than "count" and avoid any other words for which
this problem might exist.

However, the macro works properly within the scope of the
module:

   > (enter! "test.rkt")
   > (mymacro count)
   #t
   >

Also defining the same macro in a #lang racket program and requiring that gives:

   > (require "test.rkt")
   > (mymacro count)
   #t
   >
>How-To-Repeat:
#lang scribble/lp

@CHUNK[<*>
       (define-syntax mymacro
	 (syntax-rules (count)
	   ((_ count . _) #t)))
	(provide mymacro)
       
       ]
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: lqhofwkh@sharklasers.com, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14996: scribble/lp: Cannot use the word "count"
 as a syntax literal across module boundaries.
Date: Mon, 2 Mar 2015 07:33:54 -0600

 The best way to fix this is to refer to a specific binding of 'count'
 at both places. You can export a binding for 'count' from your
 scribble/lp program or you can require one in and then expect the
 users of your macro to have that same one in scope.
 
 Robby
 
 On Mon, Mar 2, 2015 at 4:48 AM,  <lqhofwkh@sharklasers.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14996
 >
 > Reported by Muck Raker for release: 6.1
 >
 > *** Description:
 > Save the program below as "test.rkt", then attempt the following from
 > Racket:
 >
 >    > (require "test.rkt")
 >    > (mymacro count)
 >    stdin::23: mymacro: bad syntax
 >      in: (mymacro count)
 >      context...:
 >       /usr/share/racket/collects/racket/private/misc.rkt:87:7
 >
 > The syntax-rule doesn't match because it requires the word "count", and I'm providing the word "count" instead, which differs in some invisible way. The problem goes away if I define the macro to
 > require a word other than "count" and avoid any other words for which
 > this problem might exist.
 >
 > However, the macro works properly within the scope of the
 > module:
 >
 >    > (enter! "test.rkt")
 >    > (mymacro count)
 >    #t
 >    >
 >
 > Also defining the same macro in a #lang racket program and requiring that gives:
 >
 >    > (require "test.rkt")
 >    > (mymacro count)
 >    #t
 >    >
 >
 > *** How to repeat:
 > #lang scribble/lp
 >
 > @CHUNK[<*>
 >        (define-syntax mymacro
 >          (syntax-rules (count)
 >            ((_ count . _) #t)))
 >         (provide mymacro)
 >
 >        ]
 >
 > *** Environment:
 > Win32 / Mozilla/5.0 (Windows NT 6.1; rv:24.0) Gecko/20100101 Firefox/24.0
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: lqhofwkh@sharklasers.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14996: scribble/lp: Cannot use the word "count" as a syntax literal across module boundaries.
Date: Mon, 2 Mar 2015 07:46:00 -0600

 This is the correct behavior of syntax-rules in all Schemes and in Racket, regardless of whether you're also using literate programming. 
 
 
 On Mar 2, 2015, at 4:48 AM, lqhofwkh@sharklasers.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=14996
 > 
 > Reported by Muck Raker for release: 6.1
 > 
 > *** Description:
 > Save the program below as "test.rkt", then attempt the following from
 > Racket:
 > 
 >> (require "test.rkt")
 >> (mymacro count)
 >   stdin::23: mymacro: bad syntax
 >     in: (mymacro count)
 >     context...:
 >      /usr/share/racket/collects/racket/private/misc.rkt:87:7
 > 
 > The syntax-rule doesn't match because it requires the word "count", and I'm providing the word "count" instead, which differs in some invisible way. The problem goes away if I define the macro to
 > require a word other than "count" and avoid any other words for which
 > this problem might exist.
 > 
 > However, the macro works properly within the scope of the
 > module:
 > 
 >> (enter! "test.rkt")
 >> (mymacro count)
 >   #t
 >> 
 > 
 > Also defining the same macro in a #lang racket program and requiring that gives:
 > 
 >> (require "test.rkt")
 >> (mymacro count)
 >   #t
 >> 
 > 
 > *** How to repeat:
 > #lang scribble/lp
 > 
 > @CHUNK[<*>
 >       (define-syntax mymacro
 > 	 (syntax-rules (count)
 > 	   ((_ count . _) #t)))
 > 	(provide mymacro)
 > 
 >       ]
 > 
 > *** Environment:
 > Win32 / Mozilla/5.0 (Windows NT 6.1; rv:24.0) Gecko/20100101 Firefox/24.0
 > 
 
 
From: <dln8dnz+4x4g68@guerrillamail.com>
To: "bugs@racket-lang.org" <bugs@racket-lang.org>
Cc: 
Subject: Re: [racket-bug] all/14996: scribble/lp: Cannot use the word "count" as a syntax literal across module boundaries.
Date: Wed, 04 Mar 2015 01:52:23 +0000

 >This is the correct behavior of syntax-rules in all Schemes and in Racket,
 
 You're seriously claiming that it's correct behavior for the "cond" below to return
 void?
 
   (define else #f)
   
   (cond (#f 'not-executed)
         (else 'should-return-this))
 
 I just tested this, and cond returns nothing because the "else" here is treated as just another value instead of a keyword for cond.
 
 
 
 
 
 ----
 Sent using GuerrillaMail.com
 Block or report abuse: https://www.guerrillamail.com/abuse/?a=Q1RzFi0SQrcejRr5%2FH8RdVrIX80%3D
 
 
 
 
From: <1cfx7y+56xjd137qif8o@guerrillamail.com>
To: "bugs@racket-lang.org" <bugs@racket-lang.org>
Cc: 
Subject: Re: [racket-bug] all/14996: scribble/lp: Cannot use the word "count"  as a syntax literal across module boundaries.
Date: Thu, 28 May 2015 15:25:02 +0000

 If this is the correct behavior, then the bug should be closed.
 
 The following workaround exists for those who really need to treat identifiers as keywords in a macro:
 
     (define-syntax mymacro
         (lambda (stx)
             (syntax-case* stx (count) (lambda (a b)
                                         (eq? (syntax->datum a)
                                              (syntax->datum b)))
                ((_ count . _) #'#t))))
 
 See also:
 
 http://docs.racket-lang.org/reference/stx-patterns.html?q=syntax-case*#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-case*%29%29
 
 
 
 
 
 ----
 Sent using GuerrillaMail.com
 Block or report abuse: https://www.guerrillamail.com/abuse/?a=Q1RzFi0SQrcejRr5%2FH8RdVrIX80%3D
 
 
 
 
