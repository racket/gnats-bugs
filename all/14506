From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon May 12 18:10:05 2014
Received: from mail-oa0-f50.google.com (mail-oa0-f50.google.com [209.85.219.50])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s4CMA184032639
	for <bugs@bugs.plt-scheme.org>; Mon, 12 May 2014 18:10:01 -0400
Message-Id: <201405122209.s4CM9xiH032632@winooski.ccs.neu.edu>
Date: Mon, 12 May 2014 18:09:59 -0400
From: alexander@knauth.org
To: bugs@racket-lang.org
Subject: (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)

>Number:         14506
>Category:       all
>Synopsis:       (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon May 12 18:12:01 -0400 2014
>Closed-Date:    Mon May 12 18:18:12 -0400 2014
>Last-Modified:  Wed May 14 00:52:01 -0400 2014
>Originator:     Alex Knauth
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0.1.8--2014-05-10(722c4fd/a)
>Environment:
macosx "Darwin Alexander-D-Knauths-Computer-2.local 13.1.0 Darwin Kernel Version 13.1.0: Thu Jan 16 19:40:37 PST 2014; root:xnu-2422.90.20~2/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 433743608
raco pkg (show):
Installation-wide:
 Package              Checksum                                    Source
 main-distribution    820e85aeae454e9aaa7090e53100c639fc7aac6f    (catalog main-distribution)
 racket-lib           a5ad75266826476cc1034e69afe7ca6740b572d7    (catalog racket-lib)
 [177 auto-installed packages not shown]
User-specific for installation "snapshot":
 Package                Checksum                                    Source
 contract-repl          9e96a1ee4f819abab253a1276aaacd8bc21e29b7    (catalog contract-repl)
 drracket-solarized     3c7ac56e3bde4f52653c08ad1058188f9bc10184    (catalog drracket-solarized)
 experimental-lang      #f                                          (link ../../../../Documents/DrRacket/stuff/experimental-lang pkg/experimental-lang)
 first-class-methods    #f                                          (link ../../../../Documents/DrRacket/stuff/first-class-methods pkg/first-class-methods)
 raw-string             c922d2ea88ab98b9bffd5d2c74f48c64cbd75577    (catalog raw-string)



Collections:
("/Users/Alex/Library/Racket/snapshot/collects"
 (non-existent-path))
("/Applications/Racket v6.0.1.8/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang at-exp racket\n" #f #t ((main) (test)) #t))
>Description:
(Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
>How-To-Repeat:
#lang typed/racket
(: v (Vectorof Nonnegative-Real))
(define v (vector 1 2))
(ann v (Vectorof Real))
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by samth at Mon, 12 May 2014 18:18:12 -0400
Reason>>> .

From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Alex Knauth <alexander@knauth.org>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a
 subtype of (Vectorof Real)
Date: Mon, 12 May 2014 18:17:51 -0400

 On Mon, May 12, 2014 at 6:12 PM,  <alexander@knauth.org> wrote:
 >
 > (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
 
 This isn't a bug. To see why, let's take your program and add to it a bit:
 
 #lang typed/racket
 (: v (Vectorof Nonnegative-Real))
 (define v (vector 1 2))
 (define v2 : (Vectorof Real) (ann v (Vectorof Real)))
 (vector-set! v2 0 -1) ;; -1 is a Real
 (ann (vector-ref v 0) Nonnegative-Real) ;; v contains Nonnegative-Reals
 
 Uh oh, we've now persuaded Typed Racket that -1 is Nonnegative.
 
 The general issue is that mutable data structures, like vectors, are
 _invariant_ in their container type, meaning that there's no relation
 between `(Vectorof U)` and `(Vectorof T)`, even when T and U are
 related.
 
 Sam
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: alexander@knauth.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a
 subtype of (Vectorof Real)
Date: Mon, 12 May 2014 18:25:09 -0400

 On 2014-05-12 18:12:01 -0400, alexander@knauth.org wrote:
 > Reported by Alex Knauth for release: 6.0.1.8--2014-05-10(722c4fd/a)
 > 
 > *** Description:
 > (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
 > 
 > *** How to repeat:
 > #lang typed/racket
 > (: v (Vectorof Nonnegative-Real))
 > (define v (vector 1 2))
 > (ann v (Vectorof Real))
 
 This is intentional and actually necessary to make the type system work.
 
 If we allowed your hypothetical program to type-check, here is an
 example program that doesn't work as expected:
 
   (vector-set! (ann v (Vectorof Any)) 0 "hello")
   (+ (vector-ref vec 0) 1) ; => "hello" + 1, which is an error
 
 Similarly, we can't allow this kind of subtyping with any type
 constructor that produces types for mutable things.
 
 Cheers,
 Asumu
From: "Alexander D. Knauth" <alexander@knauth.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
Date: Mon, 12 May 2014 19:12:02 -0400

 On May 12, 2014, at 6:17 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 
 > This isn't a bug. To see why, let's take your program and add to it a bit:
 > 
 > #lang typed/racket
 > (: v (Vectorof Nonnegative-Real))
 > (define v (vector 1 2))
 > (define v2 : (Vectorof Real) (ann v (Vectorof Real)))
 > (vector-set! v2 0 -1) ;; -1 is a Real
 > (ann (vector-ref v 0) Nonnegative-Real) ;; v contains Nonnegative-Reals
 > 
 > Uh oh, we've now persuaded Typed Racket that -1 is Nonnegative.
 > 
 > The general issue is that mutable data structures, like vectors, are
 > _invariant_ in their container type, meaning that there's no relation
 > between `(Vectorof U)` and `(Vectorof T)`, even when T and U are
 > related.
 > 
 > Sam
 
 Shouldn’t the vector-set! not type check, because even though v2 is a (Vectorof Real), it’s actually modifying something that’s a (Vectorof Nonnegative-Real)?  
 
 Like this, without the vectors:
 #lang typed/racket
 (: x (Boxof Nonnegative-Real))
 (define x (box 1))
 (define y (cast x (Boxof Real)))
 (set-box! y -1)
 (ann (unbox x) Nonnegative-Real)  ; => -1
 
 Oh wait this is (I think) another bug, because this type checks when it shouldn’t.  
 
 So for both this and the vector example, shouldn’t the set-box! and set-vector! look at the type of the data structure that it’s actually mutating instead of just looking at the type of it’s argument, which could be the result of an ann or a cast?  
 
 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: "Alexander D. Knauth" <alexander@knauth.org>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a
 subtype of (Vectorof Real)
Date: Mon, 12 May 2014 19:18:11 -0400

 On Mon, May 12, 2014 at 7:12 PM, Alexander D. Knauth
 <alexander@knauth.org> wrote:
 >
 > On May 12, 2014, at 6:17 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 >
 >> This isn't a bug. To see why, let's take your program and add to it a bit:
 >>
 >> #lang typed/racket
 >> (: v (Vectorof Nonnegative-Real))
 >> (define v (vector 1 2))
 >> (define v2 : (Vectorof Real) (ann v (Vectorof Real)))
 >> (vector-set! v2 0 -1) ;; -1 is a Real
 >> (ann (vector-ref v 0) Nonnegative-Real) ;; v contains Nonnegative-Reals
 >>
 >> Uh oh, we've now persuaded Typed Racket that -1 is Nonnegative.
 >>
 >> The general issue is that mutable data structures, like vectors, are
 >> _invariant_ in their container type, meaning that there's no relation
 >> between `(Vectorof U)` and `(Vectorof T)`, even when T and U are
 >> related.
 >>
 >> Sam
 >
 > Shouldnâ€™t the vector-set! not type check, because even though v2 is a (Vectorof Real), itâ€™s actually modifying something thatâ€™s a (Vectorof Nonnegative-Real)?
 
 No, the type checker doesn't know where the underlying value comes
 from, it only knows what the type is. This is one of the most
 important things about type checkers -- they just look at the type of
 the expression.
 
 > Like this, without the vectors:
 > #lang typed/racket
 > (: x (Boxof Nonnegative-Real))
 > (define x (box 1))
 > (define y (cast x (Boxof Real)))
 > (set-box! y -1)
 > (ann (unbox x) Nonnegative-Real)  ; => -1
 >
 > Oh wait this is (I think) another bug, because this type checks when it shouldnâ€™t.
 
 This is a bug, and a serious one. We'll fix it.  But `cast` is very
 different from `ann` -- it actually does dynamic checking.
 
 > So for both this and the vector example, shouldnâ€™t the set-box! and set-vector! look at the type of the data structure that itâ€™s actually mutating instead of just looking at the type of itâ€™s argument, which could be the result of an ann or a cast?
 
 No, `vector-ref!` and `set-box!` don't have any information about what
 kind of data you think is in the box or the vector [1] -- the type
 system's job is to make sure that you don't cheat.
 
 [1] This is different if you use `cast`, but that's a very different
 situation -- it lets you get around the type system and defer things
 to dynamic checks.
 
 Sam
 
From: "Alexander D. Knauth" <alexander@knauth.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
Date: Mon, 12 May 2014 20:26:05 -0400

 --Apple-Mail=_683C5F2A-1C1D-40B4-B45A-CB73D52D745B
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=windows-1252
 
 
 On May 12, 2014, at 7:18 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> =
 wrote:
 
 > On Mon, May 12, 2014 at 7:12 PM, Alexander D. Knauth
 > <alexander@knauth.org> wrote:
 >>=20
 >> On May 12, 2014, at 6:17 PM, Sam Tobin-Hochstadt =
 <samth@cs.indiana.edu> wrote:
 >>=20
 >>> This isn't a bug. To see why, let's take your program and add to it =
 a bit:
 >>>=20
 >>> #lang typed/racket
 >>> (: v (Vectorof Nonnegative-Real))
 >>> (define v (vector 1 2))
 >>> (define v2 : (Vectorof Real) (ann v (Vectorof Real)))
 >>> (vector-set! v2 0 -1) ;; -1 is a Real
 >>> (ann (vector-ref v 0) Nonnegative-Real) ;; v contains =
 Nonnegative-Reals
 >>>=20
 >>> Uh oh, we've now persuaded Typed Racket that -1 is Nonnegative.
 >>>=20
 >>> The general issue is that mutable data structures, like vectors, are
 >>> _invariant_ in their container type, meaning that there's no =
 relation
 >>> between `(Vectorof U)` and `(Vectorof T)`, even when T and U are
 >>> related.
 >>>=20
 >>> Sam
 >>=20
 >> Shouldn=92t the vector-set! not type check, because even though v2 is =
 a (Vectorof Real), it=92s actually modifying something that=92s a =
 (Vectorof Nonnegative-Real)?
 >=20
 > No, the type checker doesn't know where the underlying value comes
 > from, it only knows what the type is. This is one of the most
 > important things about type checkers -- they just look at the type of
 > the expression.
 
 Could this be solved if doing ann or cast on a mutable data structure =
 kept some information on the old type so that for things like =
 vector-set! and set-box! it would check that as well as the actual type? =
 =20
 
 For example:
 (: x (Boxof Nonnegative-Real))
 (define x (box 1)) ; it knows that x should contain a Nonnegative-Real
 
 (define y (cast x (Boxof Real)) ; it knows that y should contain a Real, =
 but also keeps the info that it should also be a Nonnegative-Real
 
 (set-box! y -1) ; should check that -1 is a Real first (passes), and =
 then check if it=92s a Nonnegative-Real, which fails
 
 Would that work?
 
 
 --Apple-Mail=_683C5F2A-1C1D-40B4-B45A-CB73D52D745B
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=windows-1252
 
 <html><head><meta http-equiv=3D"Content-Type" content=3D"text/html =
 charset=3Dwindows-1252"></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: =
 after-white-space;"><br><div><div>On May 12, 2014, at 7:18 PM, Sam =
 Tobin-Hochstadt &lt;<a =
 href=3D"mailto:samth@cs.indiana.edu">samth@cs.indiana.edu</a>&gt; =
 wrote:</div><br class=3D"Apple-interchange-newline"><blockquote =
 type=3D"cite">On Mon, May 12, 2014 at 7:12 PM, Alexander D. =
 Knauth<br>&lt;<a =
 href=3D"mailto:alexander@knauth.org">alexander@knauth.org</a>&gt; =
 wrote:<br><blockquote type=3D"cite"><br>On May 12, 2014, at 6:17 PM, Sam =
 Tobin-Hochstadt &lt;<a =
 href=3D"mailto:samth@cs.indiana.edu">samth@cs.indiana.edu</a>&gt; =
 wrote:<br><br><blockquote type=3D"cite">This isn't a bug. To see why, =
 let's take your program and add to it a bit:<br><br>#lang =
 typed/racket<br>(: v (Vectorof Nonnegative-Real))<br>(define v (vector 1 =
 2))<br>(define v2 : (Vectorof Real) (ann v (Vectorof =
 Real)))<br>(vector-set! v2 0 -1) ;; -1 is a Real<br>(ann (vector-ref v =
 0) Nonnegative-Real) ;; v contains Nonnegative-Reals<br><br>Uh oh, we've =
 now persuaded Typed Racket that -1 is Nonnegative.<br><br>The general =
 issue is that mutable data structures, like vectors, are<br>_invariant_ =
 in their container type, meaning that there's no relation<br>between =
 `(Vectorof U)` and `(Vectorof T)`, even when T and U =
 are<br>related.<br><br>Sam<br></blockquote><br>Shouldn=92t the =
 vector-set! not type check, because even though v2 is a (Vectorof Real), =
 it=92s actually modifying something that=92s a (Vectorof =
 Nonnegative-Real)?<br></blockquote><br>No, the type checker doesn't know =
 where the underlying value comes<br>from, it only knows what the type =
 is. This is one of the most<br>important things about type checkers -- =
 they just look at the type of<br>the =
 expression.<br></blockquote><div><br></div><div>Could this be solved if =
 doing ann or cast on a mutable data structure kept some information on =
 the old type so that for things like vector-set! and set-box! it would =
 check that as well as the actual type? =
 &nbsp;</div><div><br></div><div>For example:</div><div><font =
 face=3D"Courier New">(: x (Boxof =
 Nonnegative-Real))</font></div><div><font face=3D"Courier New">(define x =
 (box 1)) ; it knows that x should contain a =
 Nonnegative-Real</font></div><div><font face=3D"Courier =
 New"><br></font></div><div><font face=3D"Courier New">(define y (cast x =
 (Boxof Real)) ; it knows that y should contain a Real, but also keeps =
 the info that it should also be a =
 Nonnegative-Real</font></div><div><font face=3D"Courier =
 New"><br></font></div><div><font face=3D"Courier New">(set-box! y -1) ; =
 should check that -1 is a Real first (passes), and then check if it=92s =
 a Nonnegative-Real, which fails</font></div><div><br></div></div>Would =
 that work?<div><br></div></body></html>=
 
 --Apple-Mail=_683C5F2A-1C1D-40B4-B45A-CB73D52D745B--
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: "Alexander D. Knauth" <alexander@knauth.org>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a
 subtype of (Vectorof Real)
Date: Mon, 12 May 2014 20:29:03 -0400

 On Mon, May 12, 2014 at 8:26 PM, Alexander D. Knauth
 <alexander@knauth.org> wrote:
 >
 > On May 12, 2014, at 7:18 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>
 > wrote:
 >
 > On Mon, May 12, 2014 at 7:12 PM, Alexander D. Knauth
 > <alexander@knauth.org> wrote:
 >
 >
 > On May 12, 2014, at 6:17 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>
 > wrote:
 >
 > This isn't a bug. To see why, let's take your program and add to it a bit:
 >
 > #lang typed/racket
 > (: v (Vectorof Nonnegative-Real))
 > (define v (vector 1 2))
 > (define v2 : (Vectorof Real) (ann v (Vectorof Real)))
 > (vector-set! v2 0 -1) ;; -1 is a Real
 > (ann (vector-ref v 0) Nonnegative-Real) ;; v contains Nonnegative-Reals
 >
 > Uh oh, we've now persuaded Typed Racket that -1 is Nonnegative.
 >
 > The general issue is that mutable data structures, like vectors, are
 > _invariant_ in their container type, meaning that there's no relation
 > between `(Vectorof U)` and `(Vectorof T)`, even when T and U are
 > related.
 >
 > Sam
 >
 >
 > Shouldnâ€™t the vector-set! not type check, because even though v2 is a
 > (Vectorof Real), itâ€™s actually modifying something thatâ€™s a (Vectorof
 > Nonnegative-Real)?
 >
 >
 > No, the type checker doesn't know where the underlying value comes
 > from, it only knows what the type is. This is one of the most
 > important things about type checkers -- they just look at the type of
 > the expression.
 >
 >
 > Could this be solved if doing ann or cast on a mutable data structure kept
 > some information on the old type so that for things like vector-set! and
 > set-box! it would check that as well as the actual type?
 
 A `cast` on a data structure already wraps it with information to
 check that it's used properly. Some information is missing, that's the
 bug that I referred to.  But `ann` is not like `cast` -- it's just
 writing down what type you expect something to have, and doesn't do
 anything at runtime.
 
 > For example:
 > (: x (Boxof Nonnegative-Real))
 > (define x (box 1)) ; it knows that x should contain a Nonnegative-Real
 >
 > (define y (cast x (Boxof Real)) ; it knows that y should contain a Real, but
 > also keeps the info that it should also be a Nonnegative-Real
 >
 > (set-box! y -1) ; should check that -1 is a Real first (passes), and then
 > check if itâ€™s a Nonnegative-Real, which fails
 >
 > Would that work?
 
 Yes, this will work as soon as the bug I mentioned (which is also PR
 13626) is fixed.
 
 Sam
 
From: "Alexander D. Knauth" <alexander@knauth.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
Date: Mon, 12 May 2014 20:47:12 -0400

 On May 12, 2014, at 8:29 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 
 > On Mon, May 12, 2014 at 8:26 PM, Alexander D. Knauth
 > <alexander@knauth.org> wrote:
 >> 
 >> On May 12, 2014, at 7:18 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>
 >> wrote:
 >> 
 >>>> Shouldn’t the vector-set! not type check, because even though v2 is a
 >>>> (Vectorof Real), it’s actually modifying something that’s a (Vectorof
 >>>> Nonnegative-Real)?
 >>> 
 >>> No, the type checker doesn't know where the underlying value comes
 >>> from, it only knows what the type is. This is one of the most
 >>> important things about type checkers -- they just look at the type of
 >>> the expression.
 >> 
 >> Could this be solved if doing ann or cast on a mutable data structure kept
 >> some information on the old type so that for things like vector-set! and
 >> set-box! it would check that as well as the actual type?
 > 
 > A `cast` on a data structure already wraps it with information to
 > check that it's used properly. Some information is missing, that's the
 > bug that I referred to.  But `ann` is not like `cast` -- it's just
 > writing down what type you expect something to have, and doesn't do
 > anything at runtime.
 
 I know the difference between ann and cast, but I still put them together here because that’s where information about it being a Nonnegative-Real could be lost.  I’m saying that maybe it should keep that information if it’s mutable.  
 
 >> For example:
 >> (: x (Boxof Nonnegative-Real))
 >> (define x (box 1)) ; it knows that x should contain a Nonnegative-Real
 >> 
 >> (define y (cast x (Boxof Real)) ; it knows that y should contain a Real, but
 >> also keeps the info that it should also be a Nonnegative-Real
 >> 
 >> (set-box! y -1) ; should check that -1 is a Real first (passes), and then
 >> check if it’s a Nonnegative-Real, which fails
 >> 
 >> Would that work?
 > 
 > Yes, this will work as soon as the bug I mentioned (which is also PR
 > 13626) is fixed.
 > 
 > Sam
 
 Would it work for vectors too?
 And if it did, then would it be possible to have (Vectorof Nonnegative-Real) be a subtype of (Vectorof Real)?  Or is there another reason for that?  
 
 By the way is there a type for immutable vectors?  Then I wouldn’t have to worry about any of this.  
 
 
 
From: Neil Toronto <neil.toronto@gmail.com>
To: "Alexander D. Knauth" <alexander@knauth.org>,
        Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a subtype
 of (Vectorof Real)
Date: Mon, 12 May 2014 18:56:29 -0600

 On 05/12/2014 06:47 PM, Alexander D. Knauth wrote:
 > By the way is there a type for immutable vectors?  Then I wouldnâ€™t have to worry about any of this.
 
 Welcome to the club!
 
 Neil âŠ¥
 
From: "Alexander D. Knauth" <alexander@knauth.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
Date: Tue, 13 May 2014 22:51:07 -0400

 On May 12, 2014, at 6:17 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 
 > On Mon, May 12, 2014 at 6:12 PM,  <alexander@knauth.org> wrote:
 >> 
 >> (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
 > 
 > The general issue is that mutable data structures, like vectors, are
 > _invariant_ in their container type, meaning that there's no relation
 > between `(Vectorof U)` and `(Vectorof T)`, even when T and U are
 > related.
 > 
 > Sam
 
 I just finally understood this.  From the perspective of an accessor, (Vectorof Nonnegative-Real) should be a subtype of (Vectorof Real), but from the perspective of a mutator, (Vectorof Real) should be a subtype of (Vectorof Nonnegative-Real), so for it to work for both perspectives, neither one can be a subtype of the other.  It just took me a while to see it from the mutator’s perspective.  
 
 It’s just like for a procedure (A1 -> B1) to be a subtype of another procedure (A2 -> B2), the result (like the accessor) B1 has to be a subtype of B2, but the argument (like the mutator) A1 has to be a super-type of A2, so (Nonnegative-Real -> Nonnegative-Real) can’t be a subtype of (Real -> Real), but (Any -> One) can.  (I think)
 
 
From: Neil Toronto <neil.toronto@gmail.com>
To: "Alexander D. Knauth" <alexander@knauth.org>,
        Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14506: (Vectorof Nonnegative-Real) isn't a subtype
 of (Vectorof Real)
Date: Tue, 13 May 2014 22:48:17 -0600

 On 05/13/2014 08:51 PM, Alexander D. Knauth wrote:
 >
 > On May 12, 2014, at 6:17 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 >
 >> On Mon, May 12, 2014 at 6:12 PM,  <alexander@knauth.org> wrote:
 >>>
 >>> (Vectorof Nonnegative-Real) isn't a subtype of (Vectorof Real)
 >>
 >> The general issue is that mutable data structures, like vectors, are
 >> _invariant_ in their container type, meaning that there's no relation
 >> between `(Vectorof U)` and `(Vectorof T)`, even when T and U are
 >> related.
 >>
 >> Sam
 >
 > I just finally understood this.  From the perspective of an accessor, (Vectorof Nonnegative-Real) should be a subtype of (Vectorof Real), but from the perspective of a mutator, (Vectorof Real) should be a subtype of (Vectorof Nonnegative-Real), so for it to work for both perspectives, neither one can be a subtype of the other.  It just took me a while to see it from the mutatorâ€™s perspective.
 >
 > Itâ€™s just like for a procedure (A1 -> B1) to be a subtype of another procedure (A2 -> B2), the result (like the accessor) B1 has to be a subtype of B2, but the argument (like the mutator) A1 has to be a super-type of A2, so (Nonnegative-Real -> Nonnegative-Real) canâ€™t be a subtype of (Real -> Real), but (Any -> One) can.  (I think)
 
 You have it.
 
 Mathematically, if we model vectors with functions, we can change "just 
 like" to "exactly the same as". Here's a small program to demonstrate 
 what I mean. (Pretend the setters actually store something - though with 
 the write-only vector, it wouldn't matter.) For fun and profit, see if 
 you can determine which annotations succeed and which fail before you 
 run it. :D
 
 #lang typed/racket
 
 (struct (A) read-only-vector  ([get : (-> Integer A)]))
 
 (struct (A) write-only-vector ([set : (-> Integer A Void)]))
 
 (struct (A) read-write-vector ([get : (-> Integer A)]
                                 [set : (-> Integer A Void)]))
 
 (: covariant (read-only-vector Nonnegative-Real))
 (define covariant (read-only-vector (Î» ([i : Integer]) (abs i))))
 
 (: contravariant (write-only-vector Nonnegative-Real))
 (define contravariant (write-only-vector (Î» (i x) (void))))
 
 (: invariant (read-write-vector Nonnegative-Real))
 (define invariant (read-write-vector (Î» ([i : Integer]) (abs i))
                                       (Î» (i x) (void))))
 
 (ann covariant (read-only-vector Real))
 (ann covariant (read-only-vector Nonnegative-Flonum))
 
 (ann contravariant (write-only-vector Real))
 (ann contravariant (write-only-vector Nonnegative-Flonum))
 
 (ann invariant (read-write-vector Real))
 (ann invariant (read-write-vector Nonnegative-Flonum))
 
 
 Neil âŠ¥
 
