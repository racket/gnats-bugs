From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Feb  7 02:02:49 2013
Received: from mail-oa0-f53.google.com (mail-oa0-f53.google.com [209.85.219.53])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r1771s1V024732
	for <bugs@bugs.plt-scheme.org>; Thu, 7 Feb 2013 02:01:54 -0500
Message-Id: <201302070701.r1771n58024726@champlain.ccs.neu.edu>
Date: Thu, 7 Feb 2013 02:01:49 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR fixnum type soundness is brittle

>Number:         13501
>Category:       all
>Synopsis:       TR fixnum type soundness is brittle
>Class:          sw-bug
>Responsible:    stamourv
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Feb 07 02:04:01 -0500 2013
>Closed-Date:    Mon Feb 11 14:31:06 -0500 2013
>Last-Modified:  Mon Feb 11 14:31:06 -0500 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
There are numbers that are fixnums on some platforms but not others. Statically TR says these are not a fixnum, yet dynamically it says they are.

If -PosIntNotFixnum ever got exposed then the following would be a a valid program.

#lang typed/racket
(: f 1152921504606846975)
(: g PosIntNotFixnum)
(define f 1152921504606846975)
(define g f)
(fixnum? g) ;;=> #t
 
Thus the safety of TR is predicated on the fact that this type is not exposed to the users. 
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 7 Feb 2013 06:55:45 -0600

 --e89a8ff1c6d607aa6104d521f69d
 Content-Type: text/plain; charset=UTF-8
 
 I don't know if there is a better solution, but you could just include this
 as a test case that is expected to signal a "free variable in type
 position"-type error, maybe?
 
 Robby
 
 
 On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 >
 > Reported by Eric Dobson for release: 5.3.2.3
 >
 > *** Description:
 > There are numbers that are fixnums on some platforms but not others.
 > Statically TR says these are not a fixnum, yet dynamically it says they are.
 >
 > If -PosIntNotFixnum ever got exposed then the following would be a a valid
 > program.
 >
 > #lang typed/racket
 > (: f 1152921504606846975)
 > (: g PosIntNotFixnum)
 > (define f 1152921504606846975)
 > (define g f)
 > (fixnum? g) ;;=> #t
 >
 > Thus the safety of TR is predicated on the fact that this type is not
 > exposed to the users.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >
 >
 
 --e89a8ff1c6d607aa6104d521f69d
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I don&#39;t know if there is a better solution, but you co=
 uld just include this as a test case that is expected to signal a &quot;fre=
 e variable in type position&quot;-type error, maybe?<div><br>Robby</div></d=
 iv>
 <div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Thu, Feb 7=
 , 2013 at 1:04 AM,  <span dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@g=
 mail.com" target=3D"_blank">eric.n.dobson@gmail.com</a>&gt;</span> wrote:<b=
 r><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
 1px #ccc solid;padding-left:1ex">
 A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 501" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13501</a><br>
 <br>
 Reported by Eric Dobson for release: 5.3.2.3<br>
 <br>
 *** Description:<br>
 There are numbers that are fixnums on some platforms but not others. Static=
 ally TR says these are not a fixnum, yet dynamically it says they are.<br>
 <br>
 If -PosIntNotFixnum ever got exposed then the following would be a a valid =
 program.<br>
 <br>
 #lang typed/racket<br>
 (: f 1152921504606846975)<br>
 (: g PosIntNotFixnum)<br>
 (define f 1152921504606846975)<br>
 (define g f)<br>
 (fixnum? g) ;;=3D&gt; #t<br>
 <br>
 Thus the safety of TR is predicated on the fact that this type is not expos=
 ed to the users.<br>
 <br>
 *** How to repeat:<br>
 <br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.2=
 8 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28<br>
 <br>
 </blockquote></div><br></div>
 
 --e89a8ff1c6d607aa6104d521f69d--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 7 Feb 2013 08:00:07 -0500

 That unfortunately doesn't prevent us from providing it under a different name.
 
 I think the real requirement for type soundness is that literals are
 given more conservative types.  Fortunately, there are easy-to-write
 tests for that, and we should add 1152921504606846975 to the
 `tc-literal` tests.
 
 Sam
 
 On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I don't know if there is a better solution, but you could just include this
 > as a test case that is expected to signal a "free variable in type
 > position"-type error, maybe?
 >
 > Robby
 >
 >
 > On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 >>
 >> Reported by Eric Dobson for release: 5.3.2.3
 >>
 >> *** Description:
 >> There are numbers that are fixnums on some platforms but not others.
 >> Statically TR says these are not a fixnum, yet dynamically it says they are.
 >>
 >> If -PosIntNotFixnum ever got exposed then the following would be a a valid
 >> program.
 >>
 >> #lang typed/racket
 >> (: f 1152921504606846975)
 >> (: g PosIntNotFixnum)
 >> (define f 1152921504606846975)
 >> (define g f)
 >> (fixnum? g) ;;=> #t
 >>
 >> Thus the safety of TR is predicated on the fact that this type is not
 >> exposed to the users.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >>
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 7 Feb 2013 08:28:29 -0500

 That's correct. We need to enlarge truth to make sure proof doesn't contradict it. 
 
 
 
 
 
 On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:
 
 > That unfortunately doesn't prevent us from providing it under a different name.
 > 
 > I think the real requirement for type soundness is that literals are
 > given more conservative types.  Fortunately, there are easy-to-write
 > tests for that, and we should add 1152921504606846975 to the
 > `tc-literal` tests.
 > 
 > Sam
 > 
 > On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> I don't know if there is a better solution, but you could just include this
 >> as a test case that is expected to signal a "free variable in type
 >> position"-type error, maybe?
 >> 
 >> Robby
 >> 
 >> 
 >> On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 >>> 
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 >>> 
 >>> Reported by Eric Dobson for release: 5.3.2.3
 >>> 
 >>> *** Description:
 >>> There are numbers that are fixnums on some platforms but not others.
 >>> Statically TR says these are not a fixnum, yet dynamically it says they are.
 >>> 
 >>> If -PosIntNotFixnum ever got exposed then the following would be a a valid
 >>> program.
 >>> 
 >>> #lang typed/racket
 >>> (: f 1152921504606846975)
 >>> (: g PosIntNotFixnum)
 >>> (define f 1152921504606846975)
 >>> (define g f)
 >>> (fixnum? g) ;;=> #t
 >>> 
 >>> Thus the safety of TR is predicated on the fact that this type is not
 >>> exposed to the users.
 >>> 
 >>> *** How to repeat:
 >>> 
 >>> 
 >>> *** Environment:
 >>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >>> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >>> 
 >> 
 
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 7 Feb 2013 08:39:51 -0500

 I think we're shrinking proof here, but either way ...
 
 On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > That's correct. We need to enlarge truth to make sure proof doesn't contradict it.
 >
 >
 >
 >
 >
 > On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:
 >
 >> That unfortunately doesn't prevent us from providing it under a different name.
 >>
 >> I think the real requirement for type soundness is that literals are
 >> given more conservative types.  Fortunately, there are easy-to-write
 >> tests for that, and we should add 1152921504606846975 to the
 >> `tc-literal` tests.
 >>
 >> Sam
 >>
 >> On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> I don't know if there is a better solution, but you could just include this
 >>> as a test case that is expected to signal a "free variable in type
 >>> position"-type error, maybe?
 >>>
 >>> Robby
 >>>
 >>>
 >>> On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 >>>>
 >>>> A new problem report is waiting at
 >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 >>>>
 >>>> Reported by Eric Dobson for release: 5.3.2.3
 >>>>
 >>>> *** Description:
 >>>> There are numbers that are fixnums on some platforms but not others.
 >>>> Statically TR says these are not a fixnum, yet dynamically it says they are.
 >>>>
 >>>> If -PosIntNotFixnum ever got exposed then the following would be a a valid
 >>>> program.
 >>>>
 >>>> #lang typed/racket
 >>>> (: f 1152921504606846975)
 >>>> (: g PosIntNotFixnum)
 >>>> (define f 1152921504606846975)
 >>>> (define g f)
 >>>> (fixnum? g) ;;=> #t
 >>>>
 >>>> Thus the safety of TR is predicated on the fact that this type is not
 >>>> exposed to the users.
 >>>>
 >>>> *** How to repeat:
 >>>>
 >>>>
 >>>> *** Environment:
 >>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >>>> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >>>>
 >>>
 >
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 7 Feb 2013 09:45:37 -0800

 --047d7b414244b9618204d526023a
 Content-Type: text/plain; charset=UTF-8
 
 So the issue is that the current meaning of the static predicate is that it
 is complete. Returning #t means that it is a value of that type and
 returning #f means its not. I think we should extend this with the ability
 to say "I don't know". Then Fixnum would statically only allow <2^30 and
 PosIntNotFixnum would only allow >2^60 (replaced with the true bounds) and
 for numbers inbetween we wouldn't be able to statically determine which of
 those it was.
 
 Then we run into issues of trying to prove that ((-val (expt 2 40)) <:
 Number).
 
 
 
 On Thu, Feb 7, 2013 at 5:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 
 > I think we're shrinking proof here, but either way ...
 >
 > On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen <matthias@ccs.neu.edu>
 > wrote:
 > >
 > > That's correct. We need to enlarge truth to make sure proof doesn't
 > contradict it.
 > >
 > >
 > >
 > >
 > >
 > > On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:
 > >
 > >> That unfortunately doesn't prevent us from providing it under a
 > different name.
 > >>
 > >> I think the real requirement for type soundness is that literals are
 > >> given more conservative types.  Fortunately, there are easy-to-write
 > >> tests for that, and we should add 1152921504606846975 to the
 > >> `tc-literal` tests.
 > >>
 > >> Sam
 > >>
 > >> On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 > >> <robby@eecs.northwestern.edu> wrote:
 > >>> I don't know if there is a better solution, but you could just include
 > this
 > >>> as a test case that is expected to signal a "free variable in type
 > >>> position"-type error, maybe?
 > >>>
 > >>> Robby
 > >>>
 > >>>
 > >>> On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 > >>>>
 > >>>> A new problem report is waiting at
 > >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 > >>>>
 > >>>> Reported by Eric Dobson for release: 5.3.2.3
 > >>>>
 > >>>> *** Description:
 > >>>> There are numbers that are fixnums on some platforms but not others.
 > >>>> Statically TR says these are not a fixnum, yet dynamically it says
 > they are.
 > >>>>
 > >>>> If -PosIntNotFixnum ever got exposed then the following would be a a
 > valid
 > >>>> program.
 > >>>>
 > >>>> #lang typed/racket
 > >>>> (: f 1152921504606846975)
 > >>>> (: g PosIntNotFixnum)
 > >>>> (define f 1152921504606846975)
 > >>>> (define g f)
 > >>>> (fixnum? g) ;;=> #t
 > >>>>
 > >>>> Thus the safety of TR is predicated on the fact that this type is not
 > >>>> exposed to the users.
 > >>>>
 > >>>> *** How to repeat:
 > >>>>
 > >>>>
 > >>>> *** Environment:
 > >>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >>>> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 > Safari/537.28
 > >>>>
 > >>>
 > >
 >
 
 --047d7b414244b9618204d526023a
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">So the issue is that the current meaning of the static pre=
 dicate is that it is complete. Returning #t means that it is a value of tha=
 t type and returning #f means its not. I think we should extend this with t=
 he ability to say &quot;I don&#39;t know&quot;. Then Fixnum would staticall=
 y only allow &lt;2^30 and PosIntNotFixnum would only allow &gt;2^60 (replac=
 ed with the true bounds) and for numbers inbetween we wouldn&#39;t be able =
 to statically determine which of those it was.<div>
 <br></div><div>Then we run into issues of trying to prove that ((-val (expt=
  2 40)) &lt;: Number).<br><div><br></div></div></div><div class=3D"gmail_ex=
 tra"><br><br><div class=3D"gmail_quote">On Thu, Feb 7, 2013 at 5:39 AM, Sam=
  Tobin-Hochstadt <span dir=3D"ltr">&lt;<a href=3D"mailto:samth@ccs.neu.edu"=
  target=3D"_blank">samth@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I think we&#39;re shrinking proof here, but =
 either way ...<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen &lt;<a href=3D"mailto:ma=
 tthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt; That&#39;s correct. We need to enlarge truth to make sure proof doesn&=
 #39;t contradict it.<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:<br>
 &gt;<br>
 &gt;&gt; That unfortunately doesn&#39;t prevent us from providing it under =
 a different name.<br>
 &gt;&gt;<br>
 &gt;&gt; I think the real requirement for type soundness is that literals a=
 re<br>
 &gt;&gt; given more conservative types. =C2=A0Fortunately, there are easy-t=
 o-write<br>
 &gt;&gt; tests for that, and we should add 1152921504606846975 to the<br>
 &gt;&gt; `tc-literal` tests.<br>
 &gt;&gt;<br>
 &gt;&gt; Sam<br>
 &gt;&gt;<br>
 &gt;&gt; On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.nort=
 hwestern.edu</a>&gt; wrote:<br>
 &gt;&gt;&gt; I don&#39;t know if there is a better solution, but you could =
 just include this<br>
 &gt;&gt;&gt; as a test case that is expected to signal a &quot;free variabl=
 e in type<br>
 &gt;&gt;&gt; position&quot;-type error, maybe?<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Robby<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; On Thu, Feb 7, 2013 at 1:04 AM, &lt;<a href=3D"mailto:eric.n.d=
 obson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; A new problem report is waiting at<br>
 &gt;&gt;&gt;&gt; =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3D=
 view&amp;pr=3D13501" target=3D"_blank">http://bugs.racket-lang.org/query/?c=
 md=3Dview&amp;pr=3D13501</a><br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; *** Description:<br>
 &gt;&gt;&gt;&gt; There are numbers that are fixnums on some platforms but n=
 ot others.<br>
 &gt;&gt;&gt;&gt; Statically TR says these are not a fixnum, yet dynamically=
  it says they are.<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; If -PosIntNotFixnum ever got exposed then the following wo=
 uld be a a valid<br>
 &gt;&gt;&gt;&gt; program.<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; #lang typed/racket<br>
 &gt;&gt;&gt;&gt; (: f 1152921504606846975)<br>
 &gt;&gt;&gt;&gt; (: g PosIntNotFixnum)<br>
 &gt;&gt;&gt;&gt; (define f 1152921504606846975)<br>
 &gt;&gt;&gt;&gt; (define g f)<br>
 &gt;&gt;&gt;&gt; (fixnum? g) ;;=3D&gt; #t<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; Thus the safety of TR is predicated on the fact that this =
 type is not<br>
 &gt;&gt;&gt;&gt; exposed to the users.<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; *** How to repeat:<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; *** Environment:<br>
 &gt;&gt;&gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)<=
 br>
 &gt;&gt;&gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 =
 Safari/537.28<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --047d7b414244b9618204d526023a--
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 07 Feb 2013 15:17:06 -0500

 At Thu, 7 Feb 2013 08:00:07 -0500,
 Sam Tobin-Hochstadt wrote:
 > I think the real requirement for type soundness is that literals are
 > given more conservative types.
 
 Agreed, and that's what we're currently doing.
 
 > Fortunately, there are easy-to-write tests for that, and we should add
 > 1152921504606846975 to the `tc-literal` tests.
 
 Done.
 
 Vincent
 
 
 > On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > I don't know if there is a better solution, but you could just include this
 > > as a test case that is expected to signal a "free variable in type
 > > position"-type error, maybe?
 > >
 > > Robby
 > >
 > >
 > > On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 > >>
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 > >>
 > >> Reported by Eric Dobson for release: 5.3.2.3
 > >>
 > >> *** Description:
 > >> There are numbers that are fixnums on some platforms but not others.
 > >> Statically TR says these are not a fixnum, yet dynamically it says they are.
 > >>
 > >> If -PosIntNotFixnum ever got exposed then the following would be a a valid
 > >> program.
 > >>
 > >> #lang typed/racket
 > >> (: f 1152921504606846975)
 > >> (: g PosIntNotFixnum)
 > >> (define f 1152921504606846975)
 > >> (define g f)
 > >> (fixnum? g) ;;=> #t
 > >>
 > >> Thus the safety of TR is predicated on the fact that this type is not
 > >> exposed to the users.
 > >>
 > >> *** How to repeat:
 > >>
 > >>
 > >> *** Environment:
 > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > >>
 > >
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 07 Feb 2013 15:17:17 -0500

 I don't think I understand the problem.
 
 Typechecking of literals has to be conservative, so sometimes it will
 assign `Positive-Integer' to numbers that will be fixnums at runtime.
 That's not a problem because the assigned types are always valid, even
 though they may not be as precise as they could be.
 
 Once the program is running, it's possible to know with certainty
 whether a number is a fixnum, so `fixnum?' will always do the right
 thing.
 
 Can the problem you describe happen without exporting `-PosIntNotFixnum'?
 
 Vincent
 
 
 
 At Thu, 7 Feb 2013 09:45:37 -0800,
 Eric Dobson wrote:
 > 
 > So the issue is that the current meaning of the static predicate is that it
 > is complete. Returning #t means that it is a value of that type and
 > returning #f means its not. I think we should extend this with the ability
 > to say "I don't know". Then Fixnum would statically only allow <2^30 and
 > PosIntNotFixnum would only allow >2^60 (replaced with the true bounds) and
 > for numbers inbetween we wouldn't be able to statically determine which of
 > those it was.
 > 
 > Then we run into issues of trying to prove that ((-val (expt 2 40)) <:
 > Number).
 > 
 > 
 > 
 > On Thu, Feb 7, 2013 at 5:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 > 
 > > I think we're shrinking proof here, but either way ...
 > >
 > > On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen <matthias@ccs.neu.edu>
 > > wrote:
 > > >
 > > > That's correct. We need to enlarge truth to make sure proof doesn't
 > > contradict it.
 > > >
 > > >
 > > >
 > > >
 > > >
 > > > On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:
 > > >
 > > >> That unfortunately doesn't prevent us from providing it under a
 > > different name.
 > > >>
 > > >> I think the real requirement for type soundness is that literals are
 > > >> given more conservative types.  Fortunately, there are easy-to-write
 > > >> tests for that, and we should add 1152921504606846975 to the
 > > >> `tc-literal` tests.
 > > >>
 > > >> Sam
 > > >>
 > > >> On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 > > >> <robby@eecs.northwestern.edu> wrote:
 > > >>> I don't know if there is a better solution, but you could just include
 > > this
 > > >>> as a test case that is expected to signal a "free variable in type
 > > >>> position"-type error, maybe?
 > > >>>
 > > >>> Robby
 > > >>>
 > > >>>
 > > >>> On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 > > >>>>
 > > >>>> A new problem report is waiting at
 > > >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 > > >>>>
 > > >>>> Reported by Eric Dobson for release: 5.3.2.3
 > > >>>>
 > > >>>> *** Description:
 > > >>>> There are numbers that are fixnums on some platforms but not others.
 > > >>>> Statically TR says these are not a fixnum, yet dynamically it says
 > > they are.
 > > >>>>
 > > >>>> If -PosIntNotFixnum ever got exposed then the following would be a a
 > > valid
 > > >>>> program.
 > > >>>>
 > > >>>> #lang typed/racket
 > > >>>> (: f 1152921504606846975)
 > > >>>> (: g PosIntNotFixnum)
 > > >>>> (define f 1152921504606846975)
 > > >>>> (define g f)
 > > >>>> (fixnum? g) ;;=> #t
 > > >>>>
 > > >>>> Thus the safety of TR is predicated on the fact that this type is not
 > > >>>> exposed to the users.
 > > >>>>
 > > >>>> *** How to repeat:
 > > >>>>
 > > >>>>
 > > >>>> *** Environment:
 > > >>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > > >>>> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 > > Safari/537.28
 > > >>>>
 > > >>>
 > > >
 > >
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 7 Feb 2013 12:25:44 -0800

 --047d7bd91f105b166404d5283f15
 Content-Type: text/plain; charset=UTF-8
 
 Its not that it is conservative, it is that the static check is not
 conservative. The static check will show that (-val (expt 2 40)) <:
 -PosIntNotFixnum) even though (fixnum? (expt 2 40)) at runtime proves that
 it doesn't have that type.
 
 Say < is extended with a case that says (Natural -PosIntNotFixnum B : (-FS
 <ignore> -PosIntNotFixnum)). Which says that if a number is larger than
 something which is not a fixnum then it is not a fixnum. This would check
 the second argument with the -PosIntNotFixnum expected type, which would
 expose it. It is something like this which worries me, in that it could be
 exposed through a back door.
 
 
 On Thu, Feb 7, 2013 at 12:17 PM, Vincent St-Amour <stamourv@ccs.neu.edu>wrote:
 
 > I don't think I understand the problem.
 >
 > Typechecking of literals has to be conservative, so sometimes it will
 > assign `Positive-Integer' to numbers that will be fixnums at runtime.
 > That's not a problem because the assigned types are always valid, even
 > though they may not be as precise as they could be.
 >
 > Once the program is running, it's possible to know with certainty
 > whether a number is a fixnum, so `fixnum?' will always do the right
 > thing.
 >
 > Can the problem you describe happen without exporting `-PosIntNotFixnum'?
 >
 > Vincent
 >
 >
 >
 > At Thu, 7 Feb 2013 09:45:37 -0800,
 > Eric Dobson wrote:
 > >
 > > So the issue is that the current meaning of the static predicate is that
 > it
 > > is complete. Returning #t means that it is a value of that type and
 > > returning #f means its not. I think we should extend this with the
 > ability
 > > to say "I don't know". Then Fixnum would statically only allow <2^30 and
 > > PosIntNotFixnum would only allow >2^60 (replaced with the true bounds)
 > and
 > > for numbers inbetween we wouldn't be able to statically determine which
 > of
 > > those it was.
 > >
 > > Then we run into issues of trying to prove that ((-val (expt 2 40)) <:
 > > Number).
 > >
 > >
 > >
 > > On Thu, Feb 7, 2013 at 5:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu
 > >wrote:
 > >
 > > > I think we're shrinking proof here, but either way ...
 > > >
 > > > On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen <
 > matthias@ccs.neu.edu>
 > > > wrote:
 > > > >
 > > > > That's correct. We need to enlarge truth to make sure proof doesn't
 > > > contradict it.
 > > > >
 > > > >
 > > > >
 > > > >
 > > > >
 > > > > On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:
 > > > >
 > > > >> That unfortunately doesn't prevent us from providing it under a
 > > > different name.
 > > > >>
 > > > >> I think the real requirement for type soundness is that literals are
 > > > >> given more conservative types.  Fortunately, there are easy-to-write
 > > > >> tests for that, and we should add 1152921504606846975 to the
 > > > >> `tc-literal` tests.
 > > > >>
 > > > >> Sam
 > > > >>
 > > > >> On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 > > > >> <robby@eecs.northwestern.edu> wrote:
 > > > >>> I don't know if there is a better solution, but you could just
 > include
 > > > this
 > > > >>> as a test case that is expected to signal a "free variable in type
 > > > >>> position"-type error, maybe?
 > > > >>>
 > > > >>> Robby
 > > > >>>
 > > > >>>
 > > > >>> On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 > > > >>>>
 > > > >>>> A new problem report is waiting at
 > > > >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 > > > >>>>
 > > > >>>> Reported by Eric Dobson for release: 5.3.2.3
 > > > >>>>
 > > > >>>> *** Description:
 > > > >>>> There are numbers that are fixnums on some platforms but not
 > others.
 > > > >>>> Statically TR says these are not a fixnum, yet dynamically it says
 > > > they are.
 > > > >>>>
 > > > >>>> If -PosIntNotFixnum ever got exposed then the following would be
 > a a
 > > > valid
 > > > >>>> program.
 > > > >>>>
 > > > >>>> #lang typed/racket
 > > > >>>> (: f 1152921504606846975)
 > > > >>>> (: g PosIntNotFixnum)
 > > > >>>> (define f 1152921504606846975)
 > > > >>>> (define g f)
 > > > >>>> (fixnum? g) ;;=> #t
 > > > >>>>
 > > > >>>> Thus the safety of TR is predicated on the fact that this type is
 > not
 > > > >>>> exposed to the users.
 > > > >>>>
 > > > >>>> *** How to repeat:
 > > > >>>>
 > > > >>>>
 > > > >>>> *** Environment:
 > > > >>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > > > >>>> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 > > > Safari/537.28
 > > > >>>>
 > > > >>>
 > > > >
 > > >
 >
 
 --047d7bd91f105b166404d5283f15
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div style>Its not that it is conservative, it is that the=
  static check is not conservative. The static check will show that=C2=A0<sp=
 an style=3D"font-family:arial,sans-serif;font-size:13px">(-val (expt 2 40))=
  &lt;: -PosIntNotFixnum) even though (fixnum? (expt 2 40)) at runtime prove=
 s that it doesn&#39;t have that type.</span></div>
 <div><br></div>Say &lt; is extended with a case that says (Natural -PosIntN=
 otFixnum B : (-FS &lt;ignore&gt; -PosIntNotFixnum)). Which says that if a n=
 umber is larger than something which is not a fixnum then it is not a fixnu=
 m. This would check the second argument with the -PosIntNotFixnum expected =
 type, which would expose it. It is something like this which worries me, in=
  that it could be exposed through a back door.</div>
 <div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Thu, Feb 7=
 , 2013 at 12:17 PM, Vincent St-Amour <span dir=3D"ltr">&lt;<a href=3D"mailt=
 o:stamourv@ccs.neu.edu" target=3D"_blank">stamourv@ccs.neu.edu</a>&gt;</spa=
 n> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I don&#39;t think I understand the problem.<=
 br>
 <br>
 Typechecking of literals has to be conservative, so sometimes it will<br>
 assign `Positive-Integer&#39; to numbers that will be fixnums at runtime.<b=
 r>
 That&#39;s not a problem because the assigned types are always valid, even<=
 br>
 though they may not be as precise as they could be.<br>
 <br>
 Once the program is running, it&#39;s possible to know with certainty<br>
 whether a number is a fixnum, so `fixnum?&#39; will always do the right<br>
 thing.<br>
 <br>
 Can the problem you describe happen without exporting `-PosIntNotFixnum&#39=
 ;?<br>
 <br>
 Vincent<br>
 <br>
 <br>
 <br>
 At Thu, 7 Feb 2013 09:45:37 -0800,<br>
 <div class=3D"HOEnZb"><div class=3D"h5">Eric Dobson wrote:<br>
 &gt;<br>
 &gt; So the issue is that the current meaning of the static predicate is th=
 at it<br>
 &gt; is complete. Returning #t means that it is a value of that type and<br=
 >
 &gt; returning #f means its not. I think we should extend this with the abi=
 lity<br>
 &gt; to say &quot;I don&#39;t know&quot;. Then Fixnum would statically only=
  allow &lt;2^30 and<br>
 &gt; PosIntNotFixnum would only allow &gt;2^60 (replaced with the true boun=
 ds) and<br>
 &gt; for numbers inbetween we wouldn&#39;t be able to statically determine =
 which of<br>
 &gt; those it was.<br>
 &gt;<br>
 &gt; Then we run into issues of trying to prove that ((-val (expt 2 40)) &l=
 t;:<br>
 &gt; Number).<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Thu, Feb 7, 2013 at 5:39 AM, Sam Tobin-Hochstadt &lt;<a href=3D"mai=
 lto:samth@ccs.neu.edu">samth@ccs.neu.edu</a>&gt;wrote:<br>
 &gt;<br>
 &gt; &gt; I think we&#39;re shrinking proof here, but either way ...<br>
 &gt; &gt;<br>
 &gt; &gt; On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen &lt;<a href=3D=
 "mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt;<br>
 &gt; &gt; wrote:<br>
 &gt; &gt; &gt;<br>
 &gt; &gt; &gt; That&#39;s correct. We need to enlarge truth to make sure pr=
 oof doesn&#39;t<br>
 &gt; &gt; contradict it.<br>
 &gt; &gt; &gt;<br>
 &gt; &gt; &gt;<br>
 &gt; &gt; &gt;<br>
 &gt; &gt; &gt;<br>
 &gt; &gt; &gt;<br>
 &gt; &gt; &gt; On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:<br>
 &gt; &gt; &gt;<br>
 &gt; &gt; &gt;&gt; That unfortunately doesn&#39;t prevent us from providing=
  it under a<br>
 &gt; &gt; different name.<br>
 &gt; &gt; &gt;&gt;<br>
 &gt; &gt; &gt;&gt; I think the real requirement for type soundness is that =
 literals are<br>
 &gt; &gt; &gt;&gt; given more conservative types. =C2=A0Fortunately, there =
 are easy-to-write<br>
 &gt; &gt; &gt;&gt; tests for that, and we should add 1152921504606846975 to=
  the<br>
 &gt; &gt; &gt;&gt; `tc-literal` tests.<br>
 &gt; &gt; &gt;&gt;<br>
 &gt; &gt; &gt;&gt; Sam<br>
 &gt; &gt; &gt;&gt;<br>
 &gt; &gt; &gt;&gt; On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler<br>
 &gt; &gt; &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby=
 @eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt; &gt; &gt;&gt;&gt; I don&#39;t know if there is a better solution, but =
 you could just include<br>
 &gt; &gt; this<br>
 &gt; &gt; &gt;&gt;&gt; as a test case that is expected to signal a &quot;fr=
 ee variable in type<br>
 &gt; &gt; &gt;&gt;&gt; position&quot;-type error, maybe?<br>
 &gt; &gt; &gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt; Robby<br>
 &gt; &gt; &gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt; On Thu, Feb 7, 2013 at 1:04 AM, &lt;<a href=3D"mailt=
 o:eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt; A new problem report is waiting at<br>
 &gt; &gt; &gt;&gt;&gt;&gt; =C2=A0<a href=3D"http://bugs.racket-lang.org/que=
 ry/?cmd=3Dview&amp;pr=3D13501" target=3D"_blank">http://bugs.racket-lang.or=
 g/query/?cmd=3Dview&amp;pr=3D13501</a><br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt; *** Description:<br>
 &gt; &gt; &gt;&gt;&gt;&gt; There are numbers that are fixnums on some platf=
 orms but not others.<br>
 &gt; &gt; &gt;&gt;&gt;&gt; Statically TR says these are not a fixnum, yet d=
 ynamically it says<br>
 &gt; &gt; they are.<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt; If -PosIntNotFixnum ever got exposed then the fo=
 llowing would be a a<br>
 &gt; &gt; valid<br>
 &gt; &gt; &gt;&gt;&gt;&gt; program.<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt; #lang typed/racket<br>
 &gt; &gt; &gt;&gt;&gt;&gt; (: f 1152921504606846975)<br>
 &gt; &gt; &gt;&gt;&gt;&gt; (: g PosIntNotFixnum)<br>
 &gt; &gt; &gt;&gt;&gt;&gt; (define f 1152921504606846975)<br>
 &gt; &gt; &gt;&gt;&gt;&gt; (define g f)<br>
 &gt; &gt; &gt;&gt;&gt;&gt; (fixnum? g) ;;=3D&gt; #t<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt; Thus the safety of TR is predicated on the fact =
 that this type is not<br>
 &gt; &gt; &gt;&gt;&gt;&gt; exposed to the users.<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt; *** How to repeat:<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;&gt; *** Environment:<br>
 &gt; &gt; &gt;&gt;&gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS =
 X 10_8_2)<br>
 &gt; &gt; &gt;&gt;&gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26=
 .0.1397.2<br>
 &gt; &gt; Safari/537.28<br>
 &gt; &gt; &gt;&gt;&gt;&gt;<br>
 &gt; &gt; &gt;&gt;&gt;<br>
 &gt; &gt; &gt;<br>
 &gt; &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --047d7bd91f105b166404d5283f15--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Thu, 7 Feb 2013 21:43:52 -0800

 --f46d0421a64f6046bc04d5300b6f
 Content-Type: text/plain; charset=UTF-8
 
 Actually I used this to break type soundness, so it is not just that we
 need to protect the export. We need the static meaning of fixnum to
 coincide with the dynamic one.
 
 #lang typed/racket
 (define: z : 10000000000000 10000000000000)
 
 (ann (if (and #t (fixnum? z)) z 0) (U 0 1))
 
 
 Since z has a singleton type and that singleton type is not a subtype of
 fixnum, then the true branch cannot happen. Except that it does.
 
 
 On Thu, Feb 7, 2013 at 9:45 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 
 > So the issue is that the current meaning of the static predicate is that
 > it is complete. Returning #t means that it is a value of that type and
 > returning #f means its not. I think we should extend this with the ability
 > to say "I don't know". Then Fixnum would statically only allow <2^30 and
 > PosIntNotFixnum would only allow >2^60 (replaced with the true bounds) and
 > for numbers inbetween we wouldn't be able to statically determine which of
 > those it was.
 >
 > Then we run into issues of trying to prove that ((-val (expt 2 40)) <:
 > Number).
 >
 >
 >
 > On Thu, Feb 7, 2013 at 5:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 >
 >> I think we're shrinking proof here, but either way ...
 >>
 >> On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen <matthias@ccs.neu.edu>
 >> wrote:
 >> >
 >> > That's correct. We need to enlarge truth to make sure proof doesn't
 >> contradict it.
 >> >
 >> >
 >> >
 >> >
 >> >
 >> > On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:
 >> >
 >> >> That unfortunately doesn't prevent us from providing it under a
 >> different name.
 >> >>
 >> >> I think the real requirement for type soundness is that literals are
 >> >> given more conservative types.  Fortunately, there are easy-to-write
 >> >> tests for that, and we should add 1152921504606846975 to the
 >> >> `tc-literal` tests.
 >> >>
 >> >> Sam
 >> >>
 >> >> On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 >> >> <robby@eecs.northwestern.edu> wrote:
 >> >>> I don't know if there is a better solution, but you could just
 >> include this
 >> >>> as a test case that is expected to signal a "free variable in type
 >> >>> position"-type error, maybe?
 >> >>>
 >> >>> Robby
 >> >>>
 >> >>>
 >> >>> On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 >> >>>>
 >> >>>> A new problem report is waiting at
 >> >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 >> >>>>
 >> >>>> Reported by Eric Dobson for release: 5.3.2.3
 >> >>>>
 >> >>>> *** Description:
 >> >>>> There are numbers that are fixnums on some platforms but not others.
 >> >>>> Statically TR says these are not a fixnum, yet dynamically it says
 >> they are.
 >> >>>>
 >> >>>> If -PosIntNotFixnum ever got exposed then the following would be a a
 >> valid
 >> >>>> program.
 >> >>>>
 >> >>>> #lang typed/racket
 >> >>>> (: f 1152921504606846975)
 >> >>>> (: g PosIntNotFixnum)
 >> >>>> (define f 1152921504606846975)
 >> >>>> (define g f)
 >> >>>> (fixnum? g) ;;=> #t
 >> >>>>
 >> >>>> Thus the safety of TR is predicated on the fact that this type is not
 >> >>>> exposed to the users.
 >> >>>>
 >> >>>> *** How to repeat:
 >> >>>>
 >> >>>>
 >> >>>> *** Environment:
 >> >>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> >>>> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 >> Safari/537.28
 >> >>>>
 >> >>>
 >> >
 >>
 >
 >
 
 --f46d0421a64f6046bc04d5300b6f
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Actually I used this to break type soundness, so it is not=
  just that we need to protect the export. We need the static meaning of fix=
 num to coincide with the dynamic one.<div><br></div><div><div>#lang typed/r=
 acket</div>
 <div>(define: z : 10000000000000 10000000000000)</div><div><br></div><div>(=
 ann (if (and #t (fixnum? z)) z 0) (U 0 1))</div></div><div><br></div><div><=
 br></div><div style>Since z has a singleton type and that singleton type is=
  not a subtype of fixnum, then the true branch cannot happen. Except that i=
 t does.</div>
 </div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Thu,=
  Feb 7, 2013 at 9:45 AM, Eric Dobson <span dir=3D"ltr">&lt;<a href=3D"mailt=
 o:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@gmail.com</a>&gt=
 ;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">So the issue is that the cu=
 rrent meaning of the static predicate is that it is complete. Returning #t =
 means that it is a value of that type and returning #f means its not. I thi=
 nk we should extend this with the ability to say &quot;I don&#39;t know&quo=
 t;. Then Fixnum would statically only allow &lt;2^30 and PosIntNotFixnum wo=
 uld only allow &gt;2^60 (replaced with the true bounds) and for numbers inb=
 etween we wouldn&#39;t be able to statically determine which of those it wa=
 s.<div>
 
 <br></div><div>Then we run into issues of trying to prove that ((-val (expt=
  2 40)) &lt;: Number).<br><div><br></div></div></div><div class=3D"HOEnZb">=
 <div class=3D"h5"><div class=3D"gmail_extra"><br><br><div class=3D"gmail_qu=
 ote">
 On Thu, Feb 7, 2013 at 5:39 AM, Sam Tobin-Hochstadt <span dir=3D"ltr">&lt;<=
 a href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</a>=
 &gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I think we&#39;re shrinking proof here, but =
 either way ...<br>
 <div><div><br>
 On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen &lt;<a href=3D"mailto:ma=
 tthias@ccs.neu.edu" target=3D"_blank">matthias@ccs.neu.edu</a>&gt; wrote:<b=
 r>
 &gt;<br>
 &gt; That&#39;s correct. We need to enlarge truth to make sure proof doesn&=
 #39;t contradict it.<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:<br>
 &gt;<br>
 &gt;&gt; That unfortunately doesn&#39;t prevent us from providing it under =
 a different name.<br>
 &gt;&gt;<br>
 &gt;&gt; I think the real requirement for type soundness is that literals a=
 re<br>
 &gt;&gt; given more conservative types. =C2=A0Fortunately, there are easy-t=
 o-write<br>
 &gt;&gt; tests for that, and we should add 1152921504606846975 to the<br>
 &gt;&gt; `tc-literal` tests.<br>
 &gt;&gt;<br>
 &gt;&gt; Sam<br>
 &gt;&gt;<br>
 &gt;&gt; On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blan=
 k">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;&gt;&gt; I don&#39;t know if there is a better solution, but you could =
 just include this<br>
 &gt;&gt;&gt; as a test case that is expected to signal a &quot;free variabl=
 e in type<br>
 &gt;&gt;&gt; position&quot;-type error, maybe?<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Robby<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; On Thu, Feb 7, 2013 at 1:04 AM, &lt;<a href=3D"mailto:eric.n.d=
 obson@gmail.com" target=3D"_blank">eric.n.dobson@gmail.com</a>&gt; wrote:<b=
 r>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; A new problem report is waiting at<br>
 &gt;&gt;&gt;&gt; =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3D=
 view&amp;pr=3D13501" target=3D"_blank">http://bugs.racket-lang.org/query/?c=
 md=3Dview&amp;pr=3D13501</a><br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; *** Description:<br>
 &gt;&gt;&gt;&gt; There are numbers that are fixnums on some platforms but n=
 ot others.<br>
 &gt;&gt;&gt;&gt; Statically TR says these are not a fixnum, yet dynamically=
  it says they are.<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; If -PosIntNotFixnum ever got exposed then the following wo=
 uld be a a valid<br>
 &gt;&gt;&gt;&gt; program.<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; #lang typed/racket<br>
 &gt;&gt;&gt;&gt; (: f 1152921504606846975)<br>
 &gt;&gt;&gt;&gt; (: g PosIntNotFixnum)<br>
 &gt;&gt;&gt;&gt; (define f 1152921504606846975)<br>
 &gt;&gt;&gt;&gt; (define g f)<br>
 &gt;&gt;&gt;&gt; (fixnum? g) ;;=3D&gt; #t<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; Thus the safety of TR is predicated on the fact that this =
 type is not<br>
 &gt;&gt;&gt;&gt; exposed to the users.<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; *** How to repeat:<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; *** Environment:<br>
 &gt;&gt;&gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)<=
 br>
 &gt;&gt;&gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 =
 Safari/537.28<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 
 --f46d0421a64f6046bc04d5300b6f--
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13501: TR fixnum type soundness is brittle
Date: Fri, 08 Feb 2013 10:54:17 -0500

 Here's a possible solution.
 
 We replace the static predicates for `-PosIntNotFixnum' and
 `-NegIntNotFixnum' with `(lambda (x) #f)'. Then, we add an extra case to
 `subtype*', after the one that uses the static predicates, that makes
 all integer value types subtypes of `Integer'.
 
 That would make value type subtyping consistent with literal
 typechecking on that point, which should solve the problem.
 
 Does that sound right to you?
 
 Vincent
 
 
 
 At Thu, 7 Feb 2013 21:43:52 -0800,
 Eric Dobson wrote:
 > 
 > [1  <text/plain; UTF-8 (7bit)>]
 > Actually I used this to break type soundness, so it is not just that we
 > need to protect the export. We need the static meaning of fixnum to
 > coincide with the dynamic one.
 > 
 > #lang typed/racket
 > (define: z : 10000000000000 10000000000000)
 > 
 > (ann (if (and #t (fixnum? z)) z 0) (U 0 1))
 > 
 > 
 > Since z has a singleton type and that singleton type is not a subtype of
 > fixnum, then the true branch cannot happen. Except that it does.
 > 
 > 
 > On Thu, Feb 7, 2013 at 9:45 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > 
 > > So the issue is that the current meaning of the static predicate is that
 > > it is complete. Returning #t means that it is a value of that type and
 > > returning #f means its not. I think we should extend this with the ability
 > > to say "I don't know". Then Fixnum would statically only allow <2^30 and
 > > PosIntNotFixnum would only allow >2^60 (replaced with the true bounds) and
 > > for numbers inbetween we wouldn't be able to statically determine which of
 > > those it was.
 > >
 > > Then we run into issues of trying to prove that ((-val (expt 2 40)) <:
 > > Number).
 > >
 > >
 > >
 > > On Thu, Feb 7, 2013 at 5:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 > >
 > >> I think we're shrinking proof here, but either way ...
 > >>
 > >> On Thu, Feb 7, 2013 at 8:28 AM, Matthias Felleisen <matthias@ccs.neu.edu>
 > >> wrote:
 > >> >
 > >> > That's correct. We need to enlarge truth to make sure proof doesn't
 > >> contradict it.
 > >> >
 > >> >
 > >> >
 > >> >
 > >> >
 > >> > On Feb 7, 2013, at 8:00 AM, Sam Tobin-Hochstadt wrote:
 > >> >
 > >> >> That unfortunately doesn't prevent us from providing it under a
 > >> different name.
 > >> >>
 > >> >> I think the real requirement for type soundness is that literals are
 > >> >> given more conservative types.  Fortunately, there are easy-to-write
 > >> >> tests for that, and we should add 1152921504606846975 to the
 > >> >> `tc-literal` tests.
 > >> >>
 > >> >> Sam
 > >> >>
 > >> >> On Thu, Feb 7, 2013 at 7:55 AM, Robby Findler
 > >> >> <robby@eecs.northwestern.edu> wrote:
 > >> >>> I don't know if there is a better solution, but you could just
 > >> include this
 > >> >>> as a test case that is expected to signal a "free variable in type
 > >> >>> position"-type error, maybe?
 > >> >>>
 > >> >>> Robby
 > >> >>>
 > >> >>>
 > >> >>> On Thu, Feb 7, 2013 at 1:04 AM, <eric.n.dobson@gmail.com> wrote:
 > >> >>>>
 > >> >>>> A new problem report is waiting at
 > >> >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13501
 > >> >>>>
 > >> >>>> Reported by Eric Dobson for release: 5.3.2.3
 > >> >>>>
 > >> >>>> *** Description:
 > >> >>>> There are numbers that are fixnums on some platforms but not others.
 > >> >>>> Statically TR says these are not a fixnum, yet dynamically it says
 > >> they are.
 > >> >>>>
 > >> >>>> If -PosIntNotFixnum ever got exposed then the following would be a a
 > >> valid
 > >> >>>> program.
 > >> >>>>
 > >> >>>> #lang typed/racket
 > >> >>>> (: f 1152921504606846975)
 > >> >>>> (: g PosIntNotFixnum)
 > >> >>>> (define f 1152921504606846975)
 > >> >>>> (define g f)
 > >> >>>> (fixnum? g) ;;=> #t
 > >> >>>>
 > >> >>>> Thus the safety of TR is predicated on the fact that this type is not
 > >> >>>> exposed to the users.
 > >> >>>>
 > >> >>>> *** How to repeat:
 > >> >>>>
 > >> >>>>
 > >> >>>> *** Environment:
 > >> >>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> >>>> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 > >> Safari/537.28
 > >> >>>>
 > >> >>>
 > >> >
 > >>
 > >
 > >
 > [2  <text/html; UTF-8 (quoted-printable)>]
 > 
Responsible changed from "nobody" to "stamourv" by stamourv@racket-lang.org at Mon, 11 Feb 2013 14:31:06 -0500
Reason>>> A commit by stamourv@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/0bccf6b0b0
State changed from "open" to "closed" by stamourv@racket-lang.org at Mon, 11 Feb 2013 14:31:06 -0500
Reason>>> A commit by stamourv@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/0bccf6b0b0
  | Forbid singleton types for integers whose type is platform-dependent.
  | 
  | Closes PR13501.

