From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Sep 28 03:20:26 2010
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o8S7KNpi006356
	for <bugs@bugs.plt-scheme.org>; Tue, 28 Sep 2010 03:20:23 -0400
Message-Id: <201009280720.o8S7KLpP006347@champlain.ccs.neu.edu>
Date: Tue, 28 Sep 2010 03:20:21 -0400
From: clements@brinckerhoff.org
To: bugs@racket-lang.org
Subject: Juicy JIT bug in FFT code

>Number:         11263
>Category:       all
>Synopsis:       Juicy JIT bug in FFT code
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Sep 28 03:24:01 -0400 2010
>Closed-Date:    Tue Sep 28 12:09:37 -0400 2010
>Last-Modified:  Tue Sep 28 12:09:37 -0400 2010
>Originator:     John Clements
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1.7--2010-09-27(ff9c8d3/g)
>Environment:
macosx "Darwin uccello.local 10.4.0 Darwin Kernel Version 10.4.0: Fri Apr 23 18:28:53 PDT 2010; root:xnu-1504.7.4~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 187891488

Collections:
(("/Users/clements/clements/collects" ".gitignore" "badger" "clements-lib" "contour-letters" "file-size-checker" "info-domain" "iTunes-helper" "java-helpers" "jbc-gnucash" "matrix-arithmetic" "mboxrd-read" "midi" "mnemisis" "portaudio" "profj-auto-runner" "projector" "rsound" "shelly" "single-stepper" "smootxes" "template-tester" "txomp" "web-utilities") ("/Users/clements/matthias/collects" non-existent-path) ("/Users/clements/Library/Racket/5.0.1.7/collects" non-existent-path) ("/Users/clements/plt/collects" ".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "!
 mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
Doug Williams' FFT code causes racket to crash when the
JIT is enabled.  I managed to get rid of all of the 
unsafe code, and (thank Heaven) it still crashes. There
are two interesting things about it:

1) commenting out either of two unused calls (one to
real-part, one to imag-part) eliminates the seg fault.

2) Bizarrely, so does calling a wrapper function without
its contract wrapping it. (this means that seeing the bug
requires running a module that refers to another one.)

I spent quite a long time stripping this one down, and I'm
ready to declare victory--or something like it--at 239
lines of FFT code remaining. I'll attach that file 
separately.
>How-To-Repeat:
In the presence of fft.rkt (I'll attach it separately),
run this program:

#lang racket

(require "fft.rkt")

(fft-complex-forward (make-vector 4096 0.0))
>Fix:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: John Clements <clements@brinckerhoff.org>, bugs@racket-lang.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Cc: 
Subject: Re: [racket-bug] all/11263: Juicy JIT bug in FFT code
Date: Tue, 28 Sep 2010 00:27:42 -0700

 On Sep 28, 2010, at 12:24 AM, clements@brinckerhoff.org wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11263
 
 In the interest of making it *as easy as possible* to reproduce this =
 bug, I've decided to go ahead and stick the fft.rkt file in as a =
 response to this bug report, to remove the need to go and visit the bug =
 page to see the file.  Here it is:
 
 John
 
 #lang racket
 
 (require racket/fixnum
          racket/flonum)
 
 
 (define 2*pi (* 2.0 pi))
 
 ;;; fft-forward : real? =3D -1.0
 ;;; fft-backward : real? =3D +1.0
 (define fft-forward -1.0)
 (define fft-backward +1.0)
 
 ;;; Radix 2 Complex FFT
 
 ;;; Decimation in Time
 
 
 ;;; Decimation in Frequency
 
 
 
 ;;; Multi-Radix Complex FFT
 
 ;;; (fft-complex-factorize n)
 ;;; -> (listof fixnum?)
 ;;;   n : fixnum?
 (define (fft-complex-factorize n)
   (fft-factorize n '(5 4 3 2)))
 
 ;;; (fft-factorize n implemented-subtransforms) -> (listof fixnum?)
 ;;;   n : fixnum?
 ;;;   implemented-subtransforms : (listof fixnum?)
 (define (fft-factorize n implemented-subtransforms)
   (with-fixed (n)
     (if (fx=3D n 1)
         '(1)
         (let ((ntest n)
               (factors '()))
           ;; Deal with implemented factors first.
           (let outer-loop ()
             (unless (or (null? implemented-subtransforms)
                         (fx=3D ntest 0))
               (let ((factor (car implemented-subtransforms)))
                 (let inner-loop ()
                   (when (fx=3D (fxmodulo ntest factor) 0)
                     (set! factors (append factors (list factor)))
                     (set! ntest (fxquotient ntest factor))
                     (inner-loop)))
                 (set! implemented-subtransforms
                       (cdr implemented-subtransforms)))
               (outer-loop)))
           ;; Deal with any other even prime factors (there is only one).
           (let ((factor 2))
             (let loop ()
               (when (and (not (fx=3D ntest 1))
                          (fx=3D (fxmodulo ntest factor) 0))
                 (set! factors (append factors (list factor)))
                 (set! ntest (fxquotient ntest factor))
                 (loop))))
           ;; Deal with any other odd prime factors.
           (let ((factor 3))
             (let outer-loop ()
               (unless (fx=3D ntest 1)
                 (let inner-loop ()
                   (unless (fx=3D (fxmodulo ntest factor) 0)
                     (set! factor (fx+ factor 2))
                     (inner-loop)))
                 (set! factors (append factors (list factor)))
                 (set! ntest (fxquotient ntest factor))
                 (outer-loop))))
           factors))))
 
 ;;; (struct fft-complex-wavetable (n
 ;;;                                nf
 ;;;                                factors
 ;;;                                twiddle
 ;;;                                trig))
 ;;;   n : (and/c exact-positive-integer? fixnum?)
 ;;;   nf : (and/c exact-positive-integer? fixnum?)
 ;;;   factors : (listof (and/c exact-positive-integer? fixnum?))
 ;;;   twiddle : (vectorof fixnum?)
 ;;;   trig : (vectorof complex?)
 (struct fft-complex-wavetable
   (n
    nf
    factors
    twiddle
    trig))
 
 ;;; fft-complex-wavetable-hash : hash-eq?
 (define fft-complex-wavetable-hash (make-hasheq))
 
 ;;; (get-fft-complex-wavetable n) -> fft-complex-wavetable?
 ;;;   n : (and/c exact-positive-integer? fixnum?)
 (define (get-fft-complex-wavetable n)
   (with-fixed (n)
     (hash-ref! fft-complex-wavetable-hash n
                (make-fft-complex-wavetable n))))
 
 ;;; (make-fft-complex-wavetable n) -> fft-complex-wavetable?
 ;;;   n : (and/c exact-positive-integer? fixnum?)
 ;;; Creates a new wavetable for vectors of length n.
 (define (make-fft-complex-wavetable n)
   (let* ((factors (fft-complex-factorize n))
          (nf (length factors))
          (twiddle (make-vector nf))
          (trig (make-vector n)))
     (let ((d-theta (fl/ (fl- 0.0 2*pi)
                                (fx->fl n)))
           (t 0)
           (product 1)
           (product-1 0)
           (q 0))
       (for ((factor (in-list factors))
             (i (in-naturals)))
         (vector-set! twiddle i t)
         (set! product-1 product) ; product-1 =3D p_(i-1)
         (set! product (fx* product factor))
         (set! q (fxquotient n product))
         (for ((j (in-range 1 factor)))
           (let ((m 0))
             (for ((k (in-range 1 (fx+ q 1))))
               (set! m (fx+ m (fx* j product-1)))
               (set! m (fxmodulo m n))
               (let ((theta
                      (fl* d-theta
                                  (fx->fl m)))) ; d-theta*j*k*p_(i-1)
                 (vector-set!
                  trig t (make-rectangular
                          (flcos theta) (flsin theta))))
               (set! t (fx+ t 1)))))))
     (fft-complex-wavetable
      n nf factors twiddle trig)))
 
 ;;; (struct fft-complex-workspace (n
 ;;;                                scratch))
 ;;;   n : (and/c exact-positive-integer? fixnum?)
 ;;;   scratch : (vectorof complex?)
 (struct fft-complex-workspace
   (n
    scratch))
 
 ;;; (make-fft-complex-workspace n)
 ;;;   n : (and/c exact-positive-integer? fixnum?)
 (define (make-fft-complex-workspace n)
   (fft-complex-workspace n (make-vector n)))
 
 ;;; (fft-complex-forward data #:workspace workspace) -> void?
 ;;;   data : (vectorof complex?)
 ;;;   workspace : fft-complex-workspace
 ;;;     =3D (make-fft-complex-workspace (vector-length data))
 (define (fft-complex-forward
          data
          #:workspace
          (workspace (make-fft-complex-workspace (vector-length data))))
   (fft-complex-transform data fft-forward #:workspace workspace))
 
 
 ;;; (fft-complex-transform data sign #:workspace workspace) -> void?
 ;;;   data : (vectorof complex?)
 ;;;   sign : (or/c -1.0 1.0)
 ;;;   workspace : fft-complex-workspace
 ;;;     =3D (make-fft-complex-workspace (vector-length data))
 (define (fft-complex-transform
          data sign
          #:workspace
          (workspace (make-fft-complex-workspace (vector-length data))))
   (let ((n (vector-length data)))
     (unless (fx=3D n (fft-complex-workspace-n workspace))
       (error 'fft-complex-transform
              "workspace does not match length of data, ~a"
              n))
     (let* ((wavetable (get-fft-complex-wavetable n))
            (nf (fft-complex-wavetable-nf wavetable))
            (factors (fft-complex-wavetable-factors wavetable))
            (twiddle (fft-complex-wavetable-twiddle wavetable))
            (trig (fft-complex-wavetable-trig wavetable))
            (scratch (fft-complex-workspace-scratch workspace))
            (state 0)
            (in data)
            (out scratch)
            (product 1)
            (q 0))
       (unless (fx=3D n 1)
         (for ((factor (in-list factors))
               (i (in-naturals)))
           (set! product (fx* product factor))
           (set! q (fxquotient n product))
           (if (fx=3D state 0)
               (begin
                 (set! in data)
                 (set! out scratch)
                 (set! state 1))
               (begin
                 (set! in scratch)
                 (set! out data)
                 (set! state 0)))
           (cond ((fx=3D factor 4)
                  (let* ((twiddle1 (vector-ref twiddle i))
                         (twiddle2 (fx+ twiddle1 q))
                         (twiddle3 (fx+ twiddle2 q)))
                    (fft-complex-pass-4
                     in out sign product n
                     trig twiddle1 twiddle2 twiddle3)))
                 (else
                  (error 'bogus))))
         (when (fx=3D state 1)
           (for ((i (in-range n)))
             (vector-set! data i (vector-ref scratch i))))))))
 
 
 
 ;;; (fft-complex-pass-4 in out sign product n trig
 ;;;                     twiddle1 twiddle2 twiddle3) -> void
 ;;;   in : (vectorof complex?)
 ;;;   out : (vectorof complex?)
 ;;;   sign : (one-of/c -1.0 1.0)
 ;;;   product : (and/c exact-positive-integer? fixnum?)
 ;;;   n : (and/c exact-positive-integer? fixnum?)
 ;;;   trig : (vectorof complex?)
 ;;;   twiddle1 : (and/c exact-nonnegative-integer? fixnum?)
 ;;;   twiddle2 : (and/c exact-nonnegative-integer? fixnum?)
 ;;;   twiddle3 : (and/c exact-nonnegative-integer? fixnum?)
 (define (fft-complex-pass-4 in out sign product n
                             trig twiddle1 twiddle2 twiddle3)
   (let* ((i 0)
          (j 0)
          (factor 4)
          (m (fxquotient n factor))
          (q (fxquotient n product))
          (p-1 (fxquotient product factor))
          (jump (fx* (fx- factor 1) p-1)))
     (for ((k (in-range q)))
       (let* ((z3 (vector-ref in (fx+ i (fx* 3 m)))))
         (real-part z3) ;; COMMENTING OUT EITHER OF THESE TWO CALLS
         (imag-part z3) ;; CAUSES THE SEG FAULT TO DISAPPEAR.
         (vector-set!
          out j 0.0)))))
 
 
 ;;; Generic DFT
 
 
 ;;; Module Contracts
 
 (provide
  (rename-out
   (fft-complex-forward unchecked-fft-complex-forward)))
 
 (provide/contract
  (fft-complex-forward
   (->* ((vectorof complex?))
        (#:workspace fft-complex-workspace?)
        any)))
 
 
 
 
 
 
 ;;; (with-fixed (x ...)
 ;;;  expr ...)
 ;;; Executes the expr's with the x's guaranteed to be fixnums. All of =
 the x's
 ;;; must be identifiers. Note that this does not attempt to coerce =
 anything to a
 ;;; fixnum, just assure that they are.
 (define-syntax (with-fixed stx)
   (syntax-case stx ()
     ((with-fized (x ...) expr ...)
      (for ((id (in-list (syntax->list #'(x ...)))))
        (unless (identifier? id)
          (raise-syntax-error #f
                              "not an identifier"
                              stx
                              id)))
      #`(let ((x (if (fixnum? x)
                     x
                     (error "expected fixed integer, given" x)))
              ...)
          expr ...))))
 
 
Responsible changed from "nobody" to "mflatt" by mflatt@racket-lang.org at Tue, 28 Sep 2010 12:09:37 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/202af50a5a
State changed from "open" to "closed" by mflatt@racket-lang.org at Tue, 28 Sep 2010 12:09:37 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/202af50a5a
>Unformatted:
 ----gnatsweb-attachment----
 Content-Type: application/octet-stream; name="fft.rkt"
 Content-Transfer-Encoding: base64
 Content-Disposition: attachment; filename="fft.rkt"
 
 I2xhbmcgcmFja2V0CgoocmVxdWlyZSByYWNrZXQvZml4bnVtCiAgICAgICAgIHJhY2tldC9mbG9u
 dW0pCgoKKGRlZmluZSAyKnBpICgqIDIuMCBwaSkpCgo7OzsgZmZ0LWZvcndhcmQgOiByZWFsPyA9
 IC0xLjAKOzs7IGZmdC1iYWNrd2FyZCA6IHJlYWw/ID0gKzEuMAooZGVmaW5lIGZmdC1mb3J3YXJk
 IC0xLjApCihkZWZpbmUgZmZ0LWJhY2t3YXJkICsxLjApCgo7OzsgUmFkaXggMiBDb21wbGV4IEZG
 VAoKOzs7IERlY2ltYXRpb24gaW4gVGltZQoKCjs7OyBEZWNpbWF0aW9uIGluIEZyZXF1ZW5jeQoK
 Cgo7OzsgTXVsdGktUmFkaXggQ29tcGxleCBGRlQKCjs7OyAoZmZ0LWNvbXBsZXgtZmFjdG9yaXpl
 IG4pCjs7OyAtPiAobGlzdG9mIGZpeG51bT8pCjs7OyAgIG4gOiBmaXhudW0/CihkZWZpbmUgKGZm
 dC1jb21wbGV4LWZhY3Rvcml6ZSBuKQogIChmZnQtZmFjdG9yaXplIG4gJyg1IDQgMyAyKSkpCgo7
 OzsgKGZmdC1mYWN0b3JpemUgbiBpbXBsZW1lbnRlZC1zdWJ0cmFuc2Zvcm1zKSAtPiAobGlzdG9m
 IGZpeG51bT8pCjs7OyAgIG4gOiBmaXhudW0/Cjs7OyAgIGltcGxlbWVudGVkLXN1YnRyYW5zZm9y
 bXMgOiAobGlzdG9mIGZpeG51bT8pCihkZWZpbmUgKGZmdC1mYWN0b3JpemUgbiBpbXBsZW1lbnRl
 ZC1zdWJ0cmFuc2Zvcm1zKQogICh3aXRoLWZpeGVkIChuKQogICAgKGlmIChmeD0gbiAxKQogICAg
 ICAgICcoMSkKICAgICAgICAobGV0ICgobnRlc3QgbikKICAgICAgICAgICAgICAoZmFjdG9ycyAn
 KCkpKQogICAgICAgICAgOzsgRGVhbCB3aXRoIGltcGxlbWVudGVkIGZhY3RvcnMgZmlyc3QuCiAg
 ICAgICAgICAobGV0IG91dGVyLWxvb3AgKCkKICAgICAgICAgICAgKHVubGVzcyAob3IgKG51bGw/
 IGltcGxlbWVudGVkLXN1YnRyYW5zZm9ybXMpCiAgICAgICAgICAgICAgICAgICAgICAgIChmeD0g
 bnRlc3QgMCkpCiAgICAgICAgICAgICAgKGxldCAoKGZhY3RvciAoY2FyIGltcGxlbWVudGVkLXN1
 YnRyYW5zZm9ybXMpKSkKICAgICAgICAgICAgICAgIChsZXQgaW5uZXItbG9vcCAoKQogICAgICAg
 ICAgICAgICAgICAod2hlbiAoZng9IChmeG1vZHVsbyBudGVzdCBmYWN0b3IpIDApCiAgICAgICAg
 ICAgICAgICAgICAgKHNldCEgZmFjdG9ycyAoYXBwZW5kIGZhY3RvcnMgKGxpc3QgZmFjdG9yKSkp
 CiAgICAgICAgICAgICAgICAgICAgKHNldCEgbnRlc3QgKGZ4cXVvdGllbnQgbnRlc3QgZmFjdG9y
 KSkKICAgICAgICAgICAgICAgICAgICAoaW5uZXItbG9vcCkpKQogICAgICAgICAgICAgICAgKHNl
 dCEgaW1wbGVtZW50ZWQtc3VidHJhbnNmb3JtcwogICAgICAgICAgICAgICAgICAgICAgKGNkciBp
 bXBsZW1lbnRlZC1zdWJ0cmFuc2Zvcm1zKSkpCiAgICAgICAgICAgICAgKG91dGVyLWxvb3ApKSkK
 ICAgICAgICAgIDs7IERlYWwgd2l0aCBhbnkgb3RoZXIgZXZlbiBwcmltZSBmYWN0b3JzICh0aGVy
 ZSBpcyBvbmx5IG9uZSkuCiAgICAgICAgICAobGV0ICgoZmFjdG9yIDIpKQogICAgICAgICAgICAo
 bGV0IGxvb3AgKCkKICAgICAgICAgICAgICAod2hlbiAoYW5kIChub3QgKGZ4PSBudGVzdCAxKSkK
 ICAgICAgICAgICAgICAgICAgICAgICAgIChmeD0gKGZ4bW9kdWxvIG50ZXN0IGZhY3RvcikgMCkp
 CiAgICAgICAgICAgICAgICAoc2V0ISBmYWN0b3JzIChhcHBlbmQgZmFjdG9ycyAobGlzdCBmYWN0
 b3IpKSkKICAgICAgICAgICAgICAgIChzZXQhIG50ZXN0IChmeHF1b3RpZW50IG50ZXN0IGZhY3Rv
 cikpCiAgICAgICAgICAgICAgICAobG9vcCkpKSkKICAgICAgICAgIDs7IERlYWwgd2l0aCBhbnkg
 b3RoZXIgb2RkIHByaW1lIGZhY3RvcnMuCiAgICAgICAgICAobGV0ICgoZmFjdG9yIDMpKQogICAg
 ICAgICAgICAobGV0IG91dGVyLWxvb3AgKCkKICAgICAgICAgICAgICAodW5sZXNzIChmeD0gbnRl
 c3QgMSkKICAgICAgICAgICAgICAgIChsZXQgaW5uZXItbG9vcCAoKQogICAgICAgICAgICAgICAg
 ICAodW5sZXNzIChmeD0gKGZ4bW9kdWxvIG50ZXN0IGZhY3RvcikgMCkKICAgICAgICAgICAgICAg
 ICAgICAoc2V0ISBmYWN0b3IgKGZ4KyBmYWN0b3IgMikpCiAgICAgICAgICAgICAgICAgICAgKGlu
 bmVyLWxvb3ApKSkKICAgICAgICAgICAgICAgIChzZXQhIGZhY3RvcnMgKGFwcGVuZCBmYWN0b3Jz
 IChsaXN0IGZhY3RvcikpKQogICAgICAgICAgICAgICAgKHNldCEgbnRlc3QgKGZ4cXVvdGllbnQg
 bnRlc3QgZmFjdG9yKSkKICAgICAgICAgICAgICAgIChvdXRlci1sb29wKSkpKQogICAgICAgICAg
 ZmFjdG9ycykpKSkKCjs7OyAoc3RydWN0IGZmdC1jb21wbGV4LXdhdmV0YWJsZSAobgo7OzsgICAg
 ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5mCjs7OyAgICAgICAgICAgICAgICAgICAgICAg
 ICAgICAgICAgZmFjdG9ycwo7OzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR3aWRk
 bGUKOzs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnKSkKOzs7ICAgbiA6IChh
 bmQvYyBleGFjdC1wb3NpdGl2ZS1pbnRlZ2VyPyBmaXhudW0/KQo7OzsgICBuZiA6IChhbmQvYyBl
 eGFjdC1wb3NpdGl2ZS1pbnRlZ2VyPyBmaXhudW0/KQo7OzsgICBmYWN0b3JzIDogKGxpc3RvZiAo
 YW5kL2MgZXhhY3QtcG9zaXRpdmUtaW50ZWdlcj8gZml4bnVtPykpCjs7OyAgIHR3aWRkbGUgOiAo
 dmVjdG9yb2YgZml4bnVtPykKOzs7ICAgdHJpZyA6ICh2ZWN0b3JvZiBjb21wbGV4PykKKHN0cnVj
 dCBmZnQtY29tcGxleC13YXZldGFibGUKICAobgogICBuZgogICBmYWN0b3JzCiAgIHR3aWRkbGUK
 ICAgdHJpZykpCgo7OzsgZmZ0LWNvbXBsZXgtd2F2ZXRhYmxlLWhhc2ggOiBoYXNoLWVxPwooZGVm
 aW5lIGZmdC1jb21wbGV4LXdhdmV0YWJsZS1oYXNoIChtYWtlLWhhc2hlcSkpCgo7OzsgKGdldC1m
 ZnQtY29tcGxleC13YXZldGFibGUgbikgLT4gZmZ0LWNvbXBsZXgtd2F2ZXRhYmxlPwo7OzsgICBu
 IDogKGFuZC9jIGV4YWN0LXBvc2l0aXZlLWludGVnZXI/IGZpeG51bT8pCihkZWZpbmUgKGdldC1m
 ZnQtY29tcGxleC13YXZldGFibGUgbikKICAod2l0aC1maXhlZCAobikKICAgIChoYXNoLXJlZiEg
 ZmZ0LWNvbXBsZXgtd2F2ZXRhYmxlLWhhc2ggbgogICAgICAgICAgICAgICAobWFrZS1mZnQtY29t
 cGxleC13YXZldGFibGUgbikpKSkKCjs7OyAobWFrZS1mZnQtY29tcGxleC13YXZldGFibGUgbikg
 LT4gZmZ0LWNvbXBsZXgtd2F2ZXRhYmxlPwo7OzsgICBuIDogKGFuZC9jIGV4YWN0LXBvc2l0aXZl
 LWludGVnZXI/IGZpeG51bT8pCjs7OyBDcmVhdGVzIGEgbmV3IHdhdmV0YWJsZSBmb3IgdmVjdG9y
 cyBvZiBsZW5ndGggbi4KKGRlZmluZSAobWFrZS1mZnQtY29tcGxleC13YXZldGFibGUgbikKICAo
 bGV0KiAoKGZhY3RvcnMgKGZmdC1jb21wbGV4LWZhY3Rvcml6ZSBuKSkKICAgICAgICAgKG5mIChs
 ZW5ndGggZmFjdG9ycykpCiAgICAgICAgICh0d2lkZGxlIChtYWtlLXZlY3RvciBuZikpCiAgICAg
 ICAgICh0cmlnIChtYWtlLXZlY3RvciBuKSkpCiAgICAobGV0ICgoZC10aGV0YSAoZmwvIChmbC0g
 MC4wIDIqcGkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZngtPmZsIG4pKSkKICAg
 ICAgICAgICh0IDApCiAgICAgICAgICAocHJvZHVjdCAxKQogICAgICAgICAgKHByb2R1Y3QtMSAw
 KQogICAgICAgICAgKHEgMCkpCiAgICAgIChmb3IgKChmYWN0b3IgKGluLWxpc3QgZmFjdG9ycykp
 CiAgICAgICAgICAgIChpIChpbi1uYXR1cmFscykpKQogICAgICAgICh2ZWN0b3Itc2V0ISB0d2lk
 ZGxlIGkgdCkKICAgICAgICAoc2V0ISBwcm9kdWN0LTEgcHJvZHVjdCkgOyBwcm9kdWN0LTEgPSBw
 XyhpLTEpCiAgICAgICAgKHNldCEgcHJvZHVjdCAoZngqIHByb2R1Y3QgZmFjdG9yKSkKICAgICAg
 ICAoc2V0ISBxIChmeHF1b3RpZW50IG4gcHJvZHVjdCkpCiAgICAgICAgKGZvciAoKGogKGluLXJh
 bmdlIDEgZmFjdG9yKSkpCiAgICAgICAgICAobGV0ICgobSAwKSkKICAgICAgICAgICAgKGZvciAo
 KGsgKGluLXJhbmdlIDEgKGZ4KyBxIDEpKSkpCiAgICAgICAgICAgICAgKHNldCEgbSAoZngrIG0g
 KGZ4KiBqIHByb2R1Y3QtMSkpKQogICAgICAgICAgICAgIChzZXQhIG0gKGZ4bW9kdWxvIG0gbikp
 CiAgICAgICAgICAgICAgKGxldCAoKHRoZXRhCiAgICAgICAgICAgICAgICAgICAgIChmbCogZC10
 aGV0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZngtPmZsIG0pKSkpIDsgZC10
 aGV0YSpqKmsqcF8oaS0xKQogICAgICAgICAgICAgICAgKHZlY3Rvci1zZXQhCiAgICAgICAgICAg
 ICAgICAgdHJpZyB0IChtYWtlLXJlY3Rhbmd1bGFyCiAgICAgICAgICAgICAgICAgICAgICAgICAo
 Zmxjb3MgdGhldGEpIChmbHNpbiB0aGV0YSkpKSkKICAgICAgICAgICAgICAoc2V0ISB0IChmeCsg
 dCAxKSkpKSkpKQogICAgKGZmdC1jb21wbGV4LXdhdmV0YWJsZQogICAgIG4gbmYgZmFjdG9ycyB0
 d2lkZGxlIHRyaWcpKSkKCjs7OyAoc3RydWN0IGZmdC1jb21wbGV4LXdvcmtzcGFjZSAobgo7Ozsg
 ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmF0Y2gpKQo7OzsgICBuIDogKGFuZC9j
 IGV4YWN0LXBvc2l0aXZlLWludGVnZXI/IGZpeG51bT8pCjs7OyAgIHNjcmF0Y2ggOiAodmVjdG9y
 b2YgY29tcGxleD8pCihzdHJ1Y3QgZmZ0LWNvbXBsZXgtd29ya3NwYWNlCiAgKG4KICAgc2NyYXRj
 aCkpCgo7OzsgKG1ha2UtZmZ0LWNvbXBsZXgtd29ya3NwYWNlIG4pCjs7OyAgIG4gOiAoYW5kL2Mg
 ZXhhY3QtcG9zaXRpdmUtaW50ZWdlcj8gZml4bnVtPykKKGRlZmluZSAobWFrZS1mZnQtY29tcGxl
 eC13b3Jrc3BhY2UgbikKICAoZmZ0LWNvbXBsZXgtd29ya3NwYWNlIG4gKG1ha2UtdmVjdG9yIG4p
 KSkKCjs7OyAoZmZ0LWNvbXBsZXgtZm9yd2FyZCBkYXRhICM6d29ya3NwYWNlIHdvcmtzcGFjZSkg
 LT4gdm9pZD8KOzs7ICAgZGF0YSA6ICh2ZWN0b3JvZiBjb21wbGV4PykKOzs7ICAgd29ya3NwYWNl
 IDogZmZ0LWNvbXBsZXgtd29ya3NwYWNlCjs7OyAgICAgPSAobWFrZS1mZnQtY29tcGxleC13b3Jr
 c3BhY2UgKHZlY3Rvci1sZW5ndGggZGF0YSkpCihkZWZpbmUgKGZmdC1jb21wbGV4LWZvcndhcmQK
 ICAgICAgICAgZGF0YQogICAgICAgICAjOndvcmtzcGFjZQogICAgICAgICAod29ya3NwYWNlICht
 YWtlLWZmdC1jb21wbGV4LXdvcmtzcGFjZSAodmVjdG9yLWxlbmd0aCBkYXRhKSkpKQogIChmZnQt
 Y29tcGxleC10cmFuc2Zvcm0gZGF0YSBmZnQtZm9yd2FyZCAjOndvcmtzcGFjZSB3b3Jrc3BhY2Up
 KQoKCjs7OyAoZmZ0LWNvbXBsZXgtdHJhbnNmb3JtIGRhdGEgc2lnbiAjOndvcmtzcGFjZSB3b3Jr
 c3BhY2UpIC0+IHZvaWQ/Cjs7OyAgIGRhdGEgOiAodmVjdG9yb2YgY29tcGxleD8pCjs7OyAgIHNp
 Z24gOiAob3IvYyAtMS4wIDEuMCkKOzs7ICAgd29ya3NwYWNlIDogZmZ0LWNvbXBsZXgtd29ya3Nw
 YWNlCjs7OyAgICAgPSAobWFrZS1mZnQtY29tcGxleC13b3Jrc3BhY2UgKHZlY3Rvci1sZW5ndGgg
 ZGF0YSkpCihkZWZpbmUgKGZmdC1jb21wbGV4LXRyYW5zZm9ybQogICAgICAgICBkYXRhIHNpZ24K
 ICAgICAgICAgIzp3b3Jrc3BhY2UKICAgICAgICAgKHdvcmtzcGFjZSAobWFrZS1mZnQtY29tcGxl
 eC13b3Jrc3BhY2UgKHZlY3Rvci1sZW5ndGggZGF0YSkpKSkKICAobGV0ICgobiAodmVjdG9yLWxl
 bmd0aCBkYXRhKSkpCiAgICAodW5sZXNzIChmeD0gbiAoZmZ0LWNvbXBsZXgtd29ya3NwYWNlLW4g
 d29ya3NwYWNlKSkKICAgICAgKGVycm9yICdmZnQtY29tcGxleC10cmFuc2Zvcm0KICAgICAgICAg
 ICAgICJ3b3Jrc3BhY2UgZG9lcyBub3QgbWF0Y2ggbGVuZ3RoIG9mIGRhdGEsIH5hIgogICAgICAg
 ICAgICAgbikpCiAgICAobGV0KiAoKHdhdmV0YWJsZSAoZ2V0LWZmdC1jb21wbGV4LXdhdmV0YWJs
 ZSBuKSkKICAgICAgICAgICAobmYgKGZmdC1jb21wbGV4LXdhdmV0YWJsZS1uZiB3YXZldGFibGUp
 KQogICAgICAgICAgIChmYWN0b3JzIChmZnQtY29tcGxleC13YXZldGFibGUtZmFjdG9ycyB3YXZl
 dGFibGUpKQogICAgICAgICAgICh0d2lkZGxlIChmZnQtY29tcGxleC13YXZldGFibGUtdHdpZGRs
 ZSB3YXZldGFibGUpKQogICAgICAgICAgICh0cmlnIChmZnQtY29tcGxleC13YXZldGFibGUtdHJp
 ZyB3YXZldGFibGUpKQogICAgICAgICAgIChzY3JhdGNoIChmZnQtY29tcGxleC13b3Jrc3BhY2Ut
 c2NyYXRjaCB3b3Jrc3BhY2UpKQogICAgICAgICAgIChzdGF0ZSAwKQogICAgICAgICAgIChpbiBk
 YXRhKQogICAgICAgICAgIChvdXQgc2NyYXRjaCkKICAgICAgICAgICAocHJvZHVjdCAxKQogICAg
 ICAgICAgIChxIDApKQogICAgICAodW5sZXNzIChmeD0gbiAxKQogICAgICAgIChmb3IgKChmYWN0
 b3IgKGluLWxpc3QgZmFjdG9ycykpCiAgICAgICAgICAgICAgKGkgKGluLW5hdHVyYWxzKSkpCiAg
 ICAgICAgICAoc2V0ISBwcm9kdWN0IChmeCogcHJvZHVjdCBmYWN0b3IpKQogICAgICAgICAgKHNl
 dCEgcSAoZnhxdW90aWVudCBuIHByb2R1Y3QpKQogICAgICAgICAgKGlmIChmeD0gc3RhdGUgMCkK
 ICAgICAgICAgICAgICAoYmVnaW4KICAgICAgICAgICAgICAgIChzZXQhIGluIGRhdGEpCiAgICAg
 ICAgICAgICAgICAoc2V0ISBvdXQgc2NyYXRjaCkKICAgICAgICAgICAgICAgIChzZXQhIHN0YXRl
 IDEpKQogICAgICAgICAgICAgIChiZWdpbgogICAgICAgICAgICAgICAgKHNldCEgaW4gc2NyYXRj
 aCkKICAgICAgICAgICAgICAgIChzZXQhIG91dCBkYXRhKQogICAgICAgICAgICAgICAgKHNldCEg
 c3RhdGUgMCkpKQogICAgICAgICAgKGNvbmQgKChmeD0gZmFjdG9yIDQpCiAgICAgICAgICAgICAg
 ICAgKGxldCogKCh0d2lkZGxlMSAodmVjdG9yLXJlZiB0d2lkZGxlIGkpKQogICAgICAgICAgICAg
 ICAgICAgICAgICAodHdpZGRsZTIgKGZ4KyB0d2lkZGxlMSBxKSkKICAgICAgICAgICAgICAgICAg
 ICAgICAgKHR3aWRkbGUzIChmeCsgdHdpZGRsZTIgcSkpKQogICAgICAgICAgICAgICAgICAgKGZm
 dC1jb21wbGV4LXBhc3MtNAogICAgICAgICAgICAgICAgICAgIGluIG91dCBzaWduIHByb2R1Y3Qg
 bgogICAgICAgICAgICAgICAgICAgIHRyaWcgdHdpZGRsZTEgdHdpZGRsZTIgdHdpZGRsZTMpKSkK
 ICAgICAgICAgICAgICAgIChlbHNlCiAgICAgICAgICAgICAgICAgKGVycm9yICdib2d1cykpKSkK
 ICAgICAgICAod2hlbiAoZng9IHN0YXRlIDEpCiAgICAgICAgICAoZm9yICgoaSAoaW4tcmFuZ2Ug
 bikpKQogICAgICAgICAgICAodmVjdG9yLXNldCEgZGF0YSBpICh2ZWN0b3ItcmVmIHNjcmF0Y2gg
 aSkpKSkpKSkpCgoKCjs7OyAoZmZ0LWNvbXBsZXgtcGFzcy00IGluIG91dCBzaWduIHByb2R1Y3Qg
 biB0cmlnCjs7OyAgICAgICAgICAgICAgICAgICAgIHR3aWRkbGUxIHR3aWRkbGUyIHR3aWRkbGUz
 KSAtPiB2b2lkCjs7OyAgIGluIDogKHZlY3Rvcm9mIGNvbXBsZXg/KQo7OzsgICBvdXQgOiAodmVj
 dG9yb2YgY29tcGxleD8pCjs7OyAgIHNpZ24gOiAob25lLW9mL2MgLTEuMCAxLjApCjs7OyAgIHBy
 b2R1Y3QgOiAoYW5kL2MgZXhhY3QtcG9zaXRpdmUtaW50ZWdlcj8gZml4bnVtPykKOzs7ICAgbiA6
 IChhbmQvYyBleGFjdC1wb3NpdGl2ZS1pbnRlZ2VyPyBmaXhudW0/KQo7OzsgICB0cmlnIDogKHZl
 Y3Rvcm9mIGNvbXBsZXg/KQo7OzsgICB0d2lkZGxlMSA6IChhbmQvYyBleGFjdC1ub25uZWdhdGl2
 ZS1pbnRlZ2VyPyBmaXhudW0/KQo7OzsgICB0d2lkZGxlMiA6IChhbmQvYyBleGFjdC1ub25uZWdh
 dGl2ZS1pbnRlZ2VyPyBmaXhudW0/KQo7OzsgICB0d2lkZGxlMyA6IChhbmQvYyBleGFjdC1ub25u
 ZWdhdGl2ZS1pbnRlZ2VyPyBmaXhudW0/KQooZGVmaW5lIChmZnQtY29tcGxleC1wYXNzLTQgaW4g
 b3V0IHNpZ24gcHJvZHVjdCBuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnIHR3aWRk
 bGUxIHR3aWRkbGUyIHR3aWRkbGUzKQogIChsZXQqICgoaSAwKQogICAgICAgICAoaiAwKQogICAg
 ICAgICAoZmFjdG9yIDQpCiAgICAgICAgIChtIChmeHF1b3RpZW50IG4gZmFjdG9yKSkKICAgICAg
 ICAgKHEgKGZ4cXVvdGllbnQgbiBwcm9kdWN0KSkKICAgICAgICAgKHAtMSAoZnhxdW90aWVudCBw
 cm9kdWN0IGZhY3RvcikpCiAgICAgICAgIChqdW1wIChmeCogKGZ4LSBmYWN0b3IgMSkgcC0xKSkp
 CiAgICAoZm9yICgoayAoaW4tcmFuZ2UgcSkpKQogICAgICAobGV0KiAoKHozICh2ZWN0b3ItcmVm
 IGluIChmeCsgaSAoZngqIDMgbSkpKSkpCiAgICAgICAgKHJlYWwtcGFydCB6MykgOzsgQ09NTUVO
 VElORyBPVVQgRUlUSEVSIE9GIFRIRVNFIFRXTyBDQUxMUwogICAgICAgIChpbWFnLXBhcnQgejMp
 IDs7IENBVVNFUyBUSEUgU0VHIEZBVUxUIFRPIERJU0FQUEVBUi4KICAgICAgICAodmVjdG9yLXNl
 dCEKICAgICAgICAgb3V0IGogMC4wKSkpKSkKCgo7OzsgR2VuZXJpYyBERlQKCgo7OzsgTW9kdWxl
 IENvbnRyYWN0cwoKKHByb3ZpZGUKIChyZW5hbWUtb3V0CiAgKGZmdC1jb21wbGV4LWZvcndhcmQg
 dW5jaGVja2VkLWZmdC1jb21wbGV4LWZvcndhcmQpKSkKCihwcm92aWRlL2NvbnRyYWN0CiAoZmZ0
 LWNvbXBsZXgtZm9yd2FyZAogICgtPiogKCh2ZWN0b3JvZiBjb21wbGV4PykpCiAgICAgICAoIzp3
 b3Jrc3BhY2UgZmZ0LWNvbXBsZXgtd29ya3NwYWNlPykKICAgICAgIGFueSkpKQoKCgoKCgo7Ozsg
 KHdpdGgtZml4ZWQgKHggLi4uKQo7OzsgIGV4cHIgLi4uKQo7OzsgRXhlY3V0ZXMgdGhlIGV4cHIn
 cyB3aXRoIHRoZSB4J3MgZ3VhcmFudGVlZCB0byBiZSBmaXhudW1zLiBBbGwgb2YgdGhlIHgncwo7
 OzsgbXVzdCBiZSBpZGVudGlmaWVycy4gTm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgYXR0ZW1wdCB0
 byBjb2VyY2UgYW55dGhpbmcgdG8gYQo7OzsgZml4bnVtLCBqdXN0IGFzc3VyZSB0aGF0IHRoZXkg
 YXJlLgooZGVmaW5lLXN5bnRheCAod2l0aC1maXhlZCBzdHgpCiAgKHN5bnRheC1jYXNlIHN0eCAo
 KQogICAgKCh3aXRoLWZpemVkICh4IC4uLikgZXhwciAuLi4pCiAgICAgKGZvciAoKGlkIChpbi1s
 aXN0IChzeW50YXgtPmxpc3QgIycoeCAuLi4pKSkpKQogICAgICAgKHVubGVzcyAoaWRlbnRpZmll
 cj8gaWQpCiAgICAgICAgIChyYWlzZS1zeW50YXgtZXJyb3IgI2YKICAgICAgICAgICAgICAgICAg
 ICAgICAgICAgICAibm90IGFuIGlkZW50aWZpZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAg
 ICAgc3R4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQpKSkKICAgICAjYChsZXQgKCh4
 IChpZiAoZml4bnVtPyB4KQogICAgICAgICAgICAgICAgICAgIHgKICAgICAgICAgICAgICAgICAg
 ICAoZXJyb3IgImV4cGVjdGVkIGZpeGVkIGludGVnZXIsIGdpdmVuIiB4KSkpCiAgICAgICAgICAg
 ICAuLi4pCiAgICAgICAgIGV4cHIgLi4uKSkpKQo=
 
