From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jul 27 19:03:25 2010
Received: from mail-gy0-f172.google.com (mail-gy0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o6RN3MmQ019721
	for <bugs@bugs.plt-scheme.org>; Tue, 27 Jul 2010 19:03:22 -0400
Message-Id: <201007272303.o6RN31UD019709@champlain.ccs.neu.edu>
Date: Tue, 27 Jul 2010 19:03:01 -0400
From: pcarter@cs.ubc.ca
To: bugs@racket-lang.org
Subject: Inconsistency in function contracts

>Number:         11053
>Category:       all
>Synopsis:       Inconsistency in function contracts
>Class:          doc-bug
>Responsible:    matthias
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jul 27 19:04:01 -0400 2010
>Closed-Date:    Wed Sep 01 13:50:11 -0400 2010
>Last-Modified:  Wed Sep 01 13:50:11 -0400 2010
>Originator:     Paul Carter
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0
>Environment:
macosx "Darwin vpn76.cs.ubc.ca 10.4.0 Darwin Kernel Version 10.4.0: Fri Apr 23 18:28:53 PDT 2010; root:xnu-1504.7.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 126553172

Collections:
(("/Users/pcarter/Library/Racket/5.0/collects" "cpsc110-handin" "cpsc110-shared-buffer" "info-domain") ("/Applications/Racket v5.0/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "vers!
 ion" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
There appears to be some inconsistency in the way that function contracts are specified in the book (HtDP2e) as compared to the Dr. Racket Helpdesk.

For example, when describing how to design world programs, the book provides the following contract for the mouse handler:

;; CarState Number Number String -> CarState

but the corresponding HelpDesk entry in 2htdp/universe is:

(-> WorldState
    integer? integer? MouseEvent
    WorldState)

We want to encourage students to use the HelpDesk to find information that they need to write programs.  My concern is that some students will be confused by the difference in the form of contract used in class (which follows that used in the book) versus that found in the Dr. Racket HelpDesk. 

I realize it's a big task to update all this documentation but I think it would improve the usability of the HelpDesk if it could be carried out at some point. 
>How-To-Repeat:
Compare style of function contracts presented in HtDP2e with contracts presented in 2htdp/universe.
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "matthias" by matthias at Tue, 27 Jul 2010 21:42:09 -0400
Reason>>> .

State changed from "open" to "suspended" by matthias at Tue, 27 Jul 2010 21:42:09 -0400
Reason>>> Paul, 

there are two distinct reasons for this difference: 

1. The concepts used in HtDP/2e are _function signatures_ similar to Java's method signatures. The revised draft is 
already using this word instead of the old and horribly wrong "contract". -- In contrast, the documentation of the 
libraries actually use Racket contracts, which in some ways generalize function signatures and yet also have a different 
behavior. (** I'll get to 'behavior' for comments below.) I am extremely reluctant to call these things the same and 
went thru significant editing effort to changed HtDP/2e so it wouldn't use the word contract anywhere anymore. 

Of course signatures and contracts are related and look related, which brings me to my second point. 

2. As much as I agree in principle,  I think that it isn't asking _university_ students too much to see a novel subject 
'real, good programming' through (at least) two different lenses. My impression is that students will be surprised and a 
bit confused at the beginning but they will be stronger in the end. 

----------------------------------------------------------------------------

** You might wonder why I am writing of behavior when signatures in HtDP2e are merely Racket comments. WIthin the 
next semester, we're hoping to release an English-language version of checked and formal signatures. We will still 
start students on unchecked, informal signatures but about two chapters in we will encourage students to define 
signatures like this: 

 (define-signature f (natural-number? -> integer?)) 

or something like that. (The exact syntax escapes me right now.) If you do so, and the definition of f is say 

 (define (f x) (if (= 0 x) 1 (f -1)))

then the signature imposes a check for EVERY call site of f to ensure that the argument is an natural number. The 
internal 'recursive' call would fail here. 

In contrast, a contract like 

  (provide/contract [f (-> integer? integer?)] ...)

checks only on calls from outside the module to f whether the argument is okay. If so, the internal call would work 
w/o problem. 

(Our research and work experience teaches us that this is the proper split of responsibilities. Of course, we turn 
signatures into types via Typed Racket.)

From: Paul Carter <pcarter@cs.ubc.ca>
To: bugs@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/11053 Inconsistency in function contracts
Date: Wed, 28 Jul 2010 12:40:53 -0700

 Hi Matthias:
 
 Thanks for your detailed response.  It's good to know about the upcoming =
 change to the terminology in the text. =20
 
 Paul
 
 
 
 On 2010-07-27, at 6:42 PM, matthias@racket-lang.org wrote:
 
 >=20
 > Responsible changed from "nobody" to "matthias" by matthias at Tue, 27 =
 Jul 2010 21:42:09 -0400
 > Reason>>> .
 >=20
 > State changed from "open" to "suspended" by matthias at Tue, 27 Jul =
 2010 21:42:09 -0400
 > Reason>>> Paul,=20
 >=20
 > there are two distinct reasons for this difference:=20
 >=20
 > 1. The concepts used in HtDP/2e are _function signatures_ similar to =
 Java's method signatures. The revised draft is=20
 > already using this word instead of the old and horribly wrong =
 "contract". -- In contrast, the documentation of the=20
 > libraries actually use Racket contracts, which in some ways generalize =
 function signatures and yet also have a different=20
 > behavior. (** I'll get to 'behavior' for comments below.) I am =
 extremely reluctant to call these things the same and=20
 > went thru significant editing effort to changed HtDP/2e so it wouldn't =
 use the word contract anywhere anymore.=20
 >=20
 > Of course signatures and contracts are related and look related, which =
 brings me to my second point.=20
 >=20
 > 2. As much as I agree in principle,  I think that it isn't asking =
 _university_ students too much to see a novel subject=20
 > 'real, good programming' through (at least) two different lenses. My =
 impression is that students will be surprised and a=20
 > bit confused at the beginning but they will be stronger in the end.=20
 >=20
 > =
 --------------------------------------------------------------------------=
 --
 >=20
 > ** You might wonder why I am writing of behavior when signatures in =
 HtDP2e are merely Racket comments. WIthin the=20
 > next semester, we're hoping to release an English-language version of =
 checked and formal signatures. We will still=20
 > start students on unchecked, informal signatures but about two =
 chapters in we will encourage students to define=20
 > signatures like this:=20
 >=20
 > (define-signature f (natural-number? -> integer?))=20
 >=20
 > or something like that. (The exact syntax escapes me right now.) If =
 you do so, and the definition of f is say=20
 >=20
 > (define (f x) (if (=3D 0 x) 1 (f -1)))
 >=20
 > then the signature imposes a check for EVERY call site of f to ensure =
 that the argument is an natural number. The=20
 > internal 'recursive' call would fail here.=20
 >=20
 > In contrast, a contract like=20
 >=20
 >  (provide/contract [f (-> integer? integer?)] ...)
 >=20
 > checks only on calls from outside the module to f whether the argument =
 is okay. If so, the internal call would work=20
 > w/o problem.=20
 >=20
 > (Our research and work experience teaches us that this is the proper =
 split of responsibilities. Of course, we turn=20
 > signatures into types via Typed Racket.)
 >=20
 >=20
 > View:
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11053
 

State changed from "suspended" to "closed" by matthias at Wed, 01 Sep 2010 13:50:11 -0400
Reason>>> not a bug 

