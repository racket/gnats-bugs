From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Oct 10 15:51:30 2011
Received: from mail-pz0-f48.google.com (mail-pz0-f48.google.com [209.85.210.48])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p9AJpNrZ020952
	for <bugs@bugs.plt-scheme.org>; Mon, 10 Oct 2011 15:51:23 -0400
Message-Id: <201110101951.p9AJpJUM020933@champlain.ccs.neu.edu>
Date: Mon, 10 Oct 2011 15:51:19 -0400
From: rapacity@codealife.com
To: bugs@racket-lang.org
Subject: places not adhering to memory limits + memory leak

>Number:         12273
>Category:       all
>Synopsis:       places not adhering to memory limits + memory leak
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Oct 10 15:52:01 -0400 2011
>Closed-Date:    Tue Oct 11 13:27:15 -0400 2011
>Last-Modified:  Thu Oct 13 17:28:01 -0400 2011
>Originator:     Khalil Harake
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.0.1--2011-10-10(ca64179/g)
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1
>Description:
the below code bypasses any memory limits set in place, example if memory limit is set to 512mb in drracket it'll consume more memory than that.

also if a tab with the below code is run and killed midway, and then the tab closed, the memory is not freed.
>How-To-Repeat:
#lang racket
(require racket/place)
(define-values (a b) (place-channel))
(for ([i (in-range 999999999)]) (place-channel-put b (list 1 2 3 4)))
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "mflatt" by mflatt@racket-lang.org at Tue, 11 Oct 2011 13:27:15 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5c0956d7b1
State changed from "open" to "closed" by mflatt@racket-lang.org at Tue, 11 Oct 2011 13:27:15 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5c0956d7b1
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: rapacity@codealife.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12273: places not adhering to memory limits +
 memory leak
Date: Wed, 12 Oct 2011 14:17:37 -0400

 This program now segfaults my drracket consistently.  This is with git
 HEAD as of now.  Here's the backtrace:
 
 (gdb) where
 #0  0x00a55416 in __kernel_vsyscall ()
 #1  0x00ec2e71 in raise (sig=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64
 #2  0x00ec634e in abort () at abort.c:92
 #3  0x0822d9bd in fault_handler (sn=11, si=0x907b22c, ctx=0x907b2ac)
     at ../../../racket/gc2/sighand.c:118
 #4  <signal handler called>
 #5  0x0817128e in async_channel_finalize (p=0xb73e83b0, data=0x0)
     at ../../../racket/gc2/../src/place.c:2469
 #6  0x08231d28 in garbage_collect (gc=0x904b008,
     force_full=<value optimized out>, switching_master=0, lmi=0xbff190a8)
     at ../../../racket/gc2/newgc.c:4616
 #7  0x08232106 in collect_master (gc=0x906c6e0,
     force_full=<value optimized out>, switching_master=0, lmi=0x0)
     at ../../../racket/gc2/newgc.c:2452
 #8  wait_if_master_in_progress (gc=0x906c6e0,
     force_full=<value optimized out>, switching_master=0, lmi=0x0)
     at ../../../racket/gc2/newgc.c:2509
 #9  garbage_collect (gc=0x906c6e0, force_full=<value optimized out>,
     switching_master=0, lmi=0x0) at ../../../racket/gc2/newgc.c:4641
 #10 0x0823438a in GC_gcollect () at ../../../racket/gc2/newgc.c:2815
 #11 0x0820b5a4 in scheme_thread_block (sleep_time=0)
     at ../../../racket/gc2/../src/thread.c:4243
 #12 0x0820b99e in scheme_block_until (_f=0x820bb40 <syncing_ready>,
     fdf=0x81fd440 <syncing_needs_wakeup>, data=0xa181f758,
     delay=<value optimized out>) at ../../../racket/gc2/../src/thread.c:4335
 #13 0x0820ca84 in do_sync (name=0x8282bdd "sync/timeout",
     argc=<value optimized out>, argv=0xb3b7cfa0, with_break=0, with_timeout=1,
     _tailok=1) at ../../../racket/gc2/../src/thread.c:5961
 #14 0x0820d15d in sch_sync_timeout (argc=3, argv=0xb3b7cfa0)
     at ../../../racket/gc2/../src/thread.c:6059
 #15 0x0808883e in _scheme_apply_from_native_fast (rator=0x9069a08, argc=3,
     argv=0xb3b7cfa0)
 #16 _scheme_apply_from_native (rator=0x9069a08, argc=3, argv=0xb3b7cfa0)
     at ../../../racket/gc2/../src/schnapp.inc:64
 #17 0x00aa17b5 in ?? ()
 #18 0x08086b30 in scheme_do_eval (obj=0x0, num_rands=151427592, rands=0x0,
     get_value=-1) at ../../../racket/gc2/../src/eval.c:2763
 #19 0x08088658 in _scheme_apply_multi_from_native (rator=0xb3e140c8, argc=0,
     argv=0x0)
 #20 0x002fc8fc in ?? ()
 #21 0x08086b30 in scheme_do_eval (obj=0x0, num_rands=0, rands=0x0,
     get_value=-1) at ../../../racket/gc2/../src/eval.c:2763
 #22 0x08096ebf in apply_k () at ../../../racket/gc2/../src/fun.c:1307
 #23 0x0809e3e8 in scheme_top_level_do_worker (k=0x8096e30 <apply_k>, eb=1,
     new_thread=1, dyn_state=0x0) at ../../../racket/gc2/../src/fun.c:1146
 #24 0x0809f11d in scheme_apply_thread_thunk (rator=0xb3e140c8)
     at ../../../racket/gc2/../src/fun.c:1345
 
 
 On Mon, Oct 10, 2011 at 3:52 PM,  <rapacity@codealife.com> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12273
 >
 > Reported by Khalil Harake for release: 5.2.0.1--2011-10-10(ca64179/g)
 >
 > *** Description:
 > the below code bypasses any memory limits set in place, example if memory limit is set to 512mb in drracket it'll consume more memory than that.
 >
 > also if a tab with the below code is run and killed midway, and then the tab closed, the memory is not freed.
 >
 > *** How to repeat:
 > #lang racket
 > (require racket/place)
 > (define-values (a b) (place-channel))
 > (for ([i (in-range 999999999)]) (place-channel-put b (list 1 2 3 4)))
 >
 > *** Environment:
 > Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1
 >
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: rapacity@codealife.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12273: places not adhering to memory limits +
 memory leak
Date: Wed, 12 Oct 2011 14:41:25 -0400

 This is on Linux x86 (32 bit).
 
 On Wed, Oct 12, 2011 at 2:40 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Wed, 12 Oct 2011 14:17:37 -0400, Sam Tobin-Hochstadt wrote:
 >> This program now segfaults my drracket consistently.  This is with git
 >> HEAD as of now.
 >
 > What platform are you using? (I haven't been able to provoke a crash so
 > far with x86 Linux or x86_64 Mac OS X.)
 >
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: rapacity@codealife.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12273: places not adhering to memory limits +
 memory leak
Date: Wed, 12 Oct 2011 12:40:13 -0600

 At Wed, 12 Oct 2011 14:17:37 -0400, Sam Tobin-Hochstadt wrote:
 > This program now segfaults my drracket consistently.  This is with git
 > HEAD as of now.
 
 What platform are you using? (I haven't been able to provoke a crash so
 far with x86 Linux or x86_64 Mac OS X.)
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: rapacity@codealife.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12273: places not adhering to memory limits +
 memory leak
Date: Wed, 12 Oct 2011 14:44:21 -0400

 Note that I get a well-behaved error message from racket at the REPL:
 
 [samth@punge:~/sw/plt/collects/scribblings/framework ((8cdbd32...)) plt] r
 Welcome to Racket v5.2.0.1.
 -> (module m racket
    (require racket/place)
    (define-values (a b) (place-channel))
    (for ([i (in-range 999999999)]) (place-channel-put b (list 1 2 3 4))))
 -> (require 'm)
 Racket virtual machine has run out of memory; aborting
 Aborted
 
 The segfault is only under DrRacket, with a memory limit of 512 MB.
 
 
 On Wed, Oct 12, 2011 at 2:41 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > This is on Linux x86 (32 bit).
 >
 > On Wed, Oct 12, 2011 at 2:40 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 >> At Wed, 12 Oct 2011 14:17:37 -0400, Sam Tobin-Hochstadt wrote:
 >>> This program now segfaults my drracket consistently.  This is with git
 >>> HEAD as of now.
 >>
 >> What platform are you using? (I haven't been able to provoke a crash so
 >> far with x86 Linux or x86_64 Mac OS X.)
 >>
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: rapacity@codealife.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12273: places not adhering to memory limits +
 memory leak
Date: Thu, 13 Oct 2011 17:23:53 -0400

 Upon extreme purging of compiled files (but not until after staring at
 disassembled C code), this has gone away.   Sorry for the confusion.
 
 On Wed, Oct 12, 2011 at 2:44 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > Note that I get a well-behaved error message from racket at the REPL:
 >
 > [samth@punge:~/sw/plt/collects/scribblings/framework ((8cdbd32...)) plt] r
 > Welcome to Racket v5.2.0.1.
 > -> (module m racket
 >   (require racket/place)
 >   (define-values (a b) (place-channel))
 >   (for ([i (in-range 999999999)]) (place-channel-put b (list 1 2 3 4))))
 > -> (require 'm)
 > Racket virtual machine has run out of memory; aborting
 > Aborted
 >
 > The segfault is only under DrRacket, with a memory limit of 512 MB.
 >
 >
 > On Wed, Oct 12, 2011 at 2:41 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> This is on Linux x86 (32 bit).
 >>
 >> On Wed, Oct 12, 2011 at 2:40 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 >>> At Wed, 12 Oct 2011 14:17:37 -0400, Sam Tobin-Hochstadt wrote:
 >>>> This program now segfaults my drracket consistently.  This is with git
 >>>> HEAD as of now.
 >>>
 >>> What platform are you using? (I haven't been able to provoke a crash so
 >>> far with x86 Linux or x86_64 Mac OS X.)
 >>>
 >>>
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
