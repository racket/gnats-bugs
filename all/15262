From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Mar  1 10:38:04 2016
Received: from mail-ig0-f180.google.com (mail-ig0-f180.google.com [209.85.213.180])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u21Fc0fD004761
	for <bugs@bugs.plt-scheme.org>; Tue, 1 Mar 2016 10:38:01 -0500
Message-Id: <201603011537.u21FbwJe004754@winooski.ccs.neu.edu>
Date: Tue, 1 Mar 2016 10:37:58 -0500
From: paul.stansifer@gmail.com
To: bugs@racket-lang.org
Subject: `equal-hash-code` returns different values for equal inputs.

>Number:         15262
>Category:       all
>Synopsis:       `equal-hash-code` returns different values for equal inputs.
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Mar 01 10:40:02 -0500 2016
>Last-Modified:  Wed Mar 02 13:52:01 -0500 2016
>Originator:     Paul Stansifer
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.4.0.1--2016-01-13(-/f)
>Environment:
unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 22:52:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 761594160
raco pkg (show):
Installation-wide:
 Package                 Checksum     Source
 2d                      4d8a7c27...  catalog 2d git://github.com/racket/2d?path=2d
 main-distribution       1a0cd523...  catalog main-distribution git://github.com/racket/main-distribution
 main-distribution-test  046a9380...  catalog main-distribution-test git://github.com/racket/main-distribution-test
 racket-lib                           static-link /home/paul/src/racket/pkgs/racket-lib
 redex                   b3732832...  catalog redex git://github.com/racket/redex/?path=redex
 [242 auto-installed packages not shown]
User-specific for installation "development":
 [none]



Collections:
("/home/paul/.racket/development/collects"
 (non-existent-path))
("/home/paul/src/racket/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
It seems to happen when the inputs are S-expressions that contain symbols whose names are made entirely of digits.
>How-To-Repeat:
This seems to only work in DrRacket's REPL (and only erratically), but here's a transcript:

Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
Language: racket; memory limit: 1024 MB.
> (equal-hash-code (string->symbol "1"))
1318898
> (equal-hash-code (string->symbol "1"))
1318898
> (equal-hash-code (string->symbol "1"))
1319152
> (equal-hash-code (string->symbol "1"))
1319152
> (equal-hash-code (string->symbol "1"))
1319403
> (equal-hash-code (string->symbol "1"))
1319403
> (equal-hash-code (string->symbol "1"))
1319680
> (equal-hash-code (string->symbol "1"))
1319813
> (equal-hash-code (string->symbol "1"))
1319944
> (equal-hash-code (string->symbol "1"))
1319944
> (equal-hash-code (string->symbol "1"))
1320190
> 


Directly writing the symbol down makes the problem disappear, it seems:

> (equal-hash-code '|1|)
1327984
> (equal-hash-code '|1|)
1327984
> (equal-hash-code '|1|)
1327984
> (equal-hash-code '|1|)
1327984
> (equal-hash-code '|1|)
1327984
> (equal-hash-code '|1|)
1327984
> (equal-hash-code '|1|)
1327984
> (equal-hash-code '|1|)
1327984
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: paul.stansifer@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different values for equal inputs.
Date: Tue, 1 Mar 2016 08:56:40 -0700

 The issue is that the symbol produced by the first `(string->symbol
 "1")` doesn't exist by time a value is produced by third
 `(string->symbol "1")`. Since the two values are never reachable at the
 same time, they'll never be both passed to `equal?`. (Apparently, a GC
 happened between the second and third interaction.)
 
 I concede that other interpretations of "`equal?` values" are possible,
 but that's the currently implemented interpretation. Do you need a
 different interpretation to be implemented?
 
 At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15262
 > 
 > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 > 
 > *** Description:
 > It seems to happen when the inputs are S-expressions that contain symbols 
 > whose names are made entirely of digits.
 > 
 > *** How to repeat:
 > This seems to only work in DrRacket's REPL (and only erratically), but here's 
 > a transcript:
 > 
 > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 > Language: racket; memory limit: 1024 MB.
 > > (equal-hash-code (string->symbol "1"))
 > 1318898
 > > (equal-hash-code (string->symbol "1"))
 > 1318898
 > > (equal-hash-code (string->symbol "1"))
 > 1319152
 > > (equal-hash-code (string->symbol "1"))
 > 1319152
 > > (equal-hash-code (string->symbol "1"))
 > 1319403
 > > (equal-hash-code (string->symbol "1"))
 > 1319403
 > > (equal-hash-code (string->symbol "1"))
 > 1319680
 > > (equal-hash-code (string->symbol "1"))
 > 1319813
 > > (equal-hash-code (string->symbol "1"))
 > 1319944
 > > (equal-hash-code (string->symbol "1"))
 > 1319944
 > > (equal-hash-code (string->symbol "1"))
 > 1320190
 > > 
 > 
 > 
 > Directly writing the symbol down makes the problem disappear, it seems:
 > 
 > > (equal-hash-code '|1|)
 > 1327984
 > > (equal-hash-code '|1|)
 > 1327984
 > > (equal-hash-code '|1|)
 > 1327984
 > > (equal-hash-code '|1|)
 > 1327984
 > > (equal-hash-code '|1|)
 > 1327984
 > > (equal-hash-code '|1|)
 > 1327984
 > > (equal-hash-code '|1|)
 > 1327984
 > > (equal-hash-code '|1|)
 > 1327984
 > 
 > *** Environment:
 > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 22:52:10 UTC 
 > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 761594160
 > raco pkg (show):
 > Installation-wide:
 >  Package                 Checksum     Source
 >  2d                      4d8a7c27...  catalog 2d 
 > git://github.com/racket/2d?path=2d
 >  main-distribution       1a0cd523...  catalog main-distribution 
 > git://github.com/racket/main-distribution
 >  main-distribution-test  046a9380...  catalog main-distribution-test 
 > git://github.com/racket/main-distribution-test
 >  racket-lib                           static-link 
 > /home/paul/src/racket/pkgs/racket-lib
 >  redex                   b3732832...  catalog redex 
 > git://github.com/racket/redex/?path=redex
 >  [242 auto-installed packages not shown]
 > User-specific for installation "development":
 >  [none]
 > 
 > 
 > 
 > Collections:
 > ("/home/paul/.racket/development/collects"
 >  (non-existent-path))
 > ("/home/paul/src/racket/racket/collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" 
 > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" 
 > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 > 
 > Recent Internal Errors: 
 > Computer Language: (("Determine language from source") (#(#t print 
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) 
 > (main)) #t))
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: paul.stansifer@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different values for equal inputs.
Date: Tue, 1 Mar 2016 11:00:24 -0500

 You're interning the symbol every time you create it. 
 
 
 On Mar 1, 2016, at 10:40 AM, paul.stansifer@gmail.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=15262
 > 
 > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 > 
 > *** Description:
 > It seems to happen when the inputs are S-expressions that contain symbols whose names are made entirely of digits.
 > 
 > *** How to repeat:
 > This seems to only work in DrRacket's REPL (and only erratically), but here's a transcript:
 > 
 > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 > Language: racket; memory limit: 1024 MB.
 >> (equal-hash-code (string->symbol "1"))
 > 1318898
 >> (equal-hash-code (string->symbol "1"))
 > 1318898
 >> (equal-hash-code (string->symbol "1"))
 > 1319152
 >> (equal-hash-code (string->symbol "1"))
 > 1319152
 >> (equal-hash-code (string->symbol "1"))
 > 1319403
 >> (equal-hash-code (string->symbol "1"))
 > 1319403
 >> (equal-hash-code (string->symbol "1"))
 > 1319680
 >> (equal-hash-code (string->symbol "1"))
 > 1319813
 >> (equal-hash-code (string->symbol "1"))
 > 1319944
 >> (equal-hash-code (string->symbol "1"))
 > 1319944
 >> (equal-hash-code (string->symbol "1"))
 > 1320190
 >> 
 > 
 > 
 > Directly writing the symbol down makes the problem disappear, it seems:
 > 
 >> (equal-hash-code '|1|)
 > 1327984
 >> (equal-hash-code '|1|)
 > 1327984
 >> (equal-hash-code '|1|)
 > 1327984
 >> (equal-hash-code '|1|)
 > 1327984
 >> (equal-hash-code '|1|)
 > 1327984
 >> (equal-hash-code '|1|)
 > 1327984
 >> (equal-hash-code '|1|)
 > 1327984
 >> (equal-hash-code '|1|)
 > 1327984
 > 
 > *** Environment:
 > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 22:52:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 761594160
 > raco pkg (show):
 > Installation-wide:
 > Package                 Checksum     Source
 > 2d                      4d8a7c27...  catalog 2d git://github.com/racket/2d?path=2d
 > main-distribution       1a0cd523...  catalog main-distribution git://github.com/racket/main-distribution
 > main-distribution-test  046a9380...  catalog main-distribution-test git://github.com/racket/main-distribution-test
 > racket-lib                           static-link /home/paul/src/racket/pkgs/racket-lib
 > redex                   b3732832...  catalog redex git://github.com/racket/redex/?path=redex
 > [242 auto-installed packages not shown]
 > User-specific for installation "development":
 > [none]
 > 
 > 
 > 
 > Collections:
 > ("/home/paul/.racket/development/collects"
 > (non-existent-path))
 > ("/home/paul/src/racket/racket/collects"
 > (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 > 
 > Recent Internal Errors: 
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
 > 
 
 
From: Paul Stansifer <paul.stansifer@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Tue, 1 Mar 2016 11:44:53 -0500

 --001a1143f81c43fe27052cff7db4
 Content-Type: text/plain; charset=UTF-8
 
 Ah, that makes sense.
 
 The behavior seems to go away for prefab structs, and there's no reason I
 can't use them for my code instead of symbols. But is that a guarantee or a
 lucky guess? Nothing in the documentation convinces me I can rely on it.
 
 This might (or might not) trip up future users, but I'm fine. I kind of
 want to suggest adding "that exist in memory at the same time" to the
 documentation for `equal-hash-code`, but even though I looked at the
 documentation before filing this bug, I'm not 100% sure that I would have
 even noticed, so the documentation bloat is probably not worth it.
 
 Thanks,
 Paul
 
 On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 
 > The issue is that the symbol produced by the first `(string->symbol
 > "1")` doesn't exist by time a value is produced by third
 > `(string->symbol "1")`. Since the two values are never reachable at the
 > same time, they'll never be both passed to `equal?`. (Apparently, a GC
 > happened between the second and third interaction.)
 >
 > I concede that other interpretations of "`equal?` values" are possible,
 > but that's the currently implemented interpretation. Do you need a
 > different interpretation to be implemented?
 >
 > At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=15262
 > >
 > > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 > >
 > > *** Description:
 > > It seems to happen when the inputs are S-expressions that contain symbols
 > > whose names are made entirely of digits.
 > >
 > > *** How to repeat:
 > > This seems to only work in DrRacket's REPL (and only erratically), but
 > here's
 > > a transcript:
 > >
 > > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 > > Language: racket; memory limit: 1024 MB.
 > > > (equal-hash-code (string->symbol "1"))
 > > 1318898
 > > > (equal-hash-code (string->symbol "1"))
 > > 1318898
 > > > (equal-hash-code (string->symbol "1"))
 > > 1319152
 > > > (equal-hash-code (string->symbol "1"))
 > > 1319152
 > > > (equal-hash-code (string->symbol "1"))
 > > 1319403
 > > > (equal-hash-code (string->symbol "1"))
 > > 1319403
 > > > (equal-hash-code (string->symbol "1"))
 > > 1319680
 > > > (equal-hash-code (string->symbol "1"))
 > > 1319813
 > > > (equal-hash-code (string->symbol "1"))
 > > 1319944
 > > > (equal-hash-code (string->symbol "1"))
 > > 1319944
 > > > (equal-hash-code (string->symbol "1"))
 > > 1320190
 > > >
 > >
 > >
 > > Directly writing the symbol down makes the problem disappear, it seems:
 > >
 > > > (equal-hash-code '|1|)
 > > 1327984
 > > > (equal-hash-code '|1|)
 > > 1327984
 > > > (equal-hash-code '|1|)
 > > 1327984
 > > > (equal-hash-code '|1|)
 > > 1327984
 > > > (equal-hash-code '|1|)
 > > 1327984
 > > > (equal-hash-code '|1|)
 > > 1327984
 > > > (equal-hash-code '|1|)
 > > 1327984
 > > > (equal-hash-code '|1|)
 > > 1327984
 > >
 > > *** Environment:
 > > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17
 > 22:52:10 UTC
 > > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > (get-display-depth) = 32
 > > Human Language: english
 > > (current-memory-use) 761594160
 > > raco pkg (show):
 > > Installation-wide:
 > >  Package                 Checksum     Source
 > >  2d                      4d8a7c27...  catalog 2d
 > > git://github.com/racket/2d?path=2d
 > >  main-distribution       1a0cd523...  catalog main-distribution
 > > git://github.com/racket/main-distribution
 > >  main-distribution-test  046a9380...  catalog main-distribution-test
 > > git://github.com/racket/main-distribution-test
 > >  racket-lib                           static-link
 > > /home/paul/src/racket/pkgs/racket-lib
 > >  redex                   b3732832...  catalog redex
 > > git://github.com/racket/redex/?path=redex
 > >  [242 auto-installed packages not shown]
 > > User-specific for installation "development":
 > >  [none]
 > >
 > >
 > >
 > > Collections:
 > > ("/home/paul/.racket/development/collects"
 > >  (non-existent-path))
 > > ("/home/paul/src/racket/racket/collects"
 > >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info"
 > > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket"
 > "raco"
 > > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 > >
 > > Recent Internal Errors:
 > > Computer Language: (("Determine language from source") (#(#t print
 > > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 > ((test)
 > > (main)) #t))
 >
 
 --001a1143f81c43fe27052cff7db4
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>Ah, that makes sense. <br><br></div><div>The behavior=
  seems to go=20
 away for prefab structs, and there&#39;s no reason I can&#39;t use them for=
  my=20
 code instead of symbols. But is that a guarantee or a lucky guess?=20
 Nothing in the documentation convinces me I can rely on it.<br><br></div><d=
 iv>This
  might (or might not) trip up future users, but I&#39;m fine. I kind of wan=
 t
  to suggest adding &quot;that exist in memory at the same time&quot; to the=
 =20
 documentation for `equal-hash-code`, but even though I looked at the=20
 documentation before filing this bug, I&#39;m not 100% sure that I would=20
 have even noticed, so the documentation bloat is probably not worth it.<br>=
 <br></div><div>Thanks,<br></div>Paul</div><div class=3D"gmail_extra"><br><d=
 iv class=3D"gmail_quote">On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <sp=
 an dir=3D"ltr">&lt;<a href=3D"mailto:mflatt@cs.utah.edu" target=3D"_blank">=
 mflatt@cs.utah.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quot=
 e" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">=
 The issue is that the symbol produced by the first `(string-&gt;symbol<br>
 &quot;1&quot;)` doesn&#39;t exist by time a value is produced by third<br>
 `(string-&gt;symbol &quot;1&quot;)`. Since the two values are never reachab=
 le at the<br>
 same time, they&#39;ll never be both passed to `equal?`. (Apparently, a GC<=
 br>
 happened between the second and third interaction.)<br>
 <br>
 I concede that other interpretations of &quot;`equal?` values&quot; are pos=
 sible,<br>
 but that&#39;s the currently implemented interpretation. Do you need a<br>
 different interpretation to be implemented?<br>
 <br>
 At Tue, 1 Mar 2016 10:40:02 -0500, <a href=3D"mailto:paul.stansifer@gmail.c=
 om">paul.stansifer@gmail.com</a> wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt;=C2=A0 =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D15262" rel=3D"noreferrer" target=3D"_blank">http://bugs.racket-lang=
 .org/query/?cmd=3Dview&amp;pr=3D15262</a><br>
 &gt;<br>
 &gt; Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; It seems to happen when the inputs are S-expressions that contain symb=
 ols<br>
 &gt; whose names are made entirely of digits.<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt; This seems to only work in DrRacket&#39;s REPL (and only erratically),=
  but here&#39;s<br>
 &gt; a transcript:<br>
 &gt;<br>
 &gt; Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].<br>
 &gt; Language: racket; memory limit: 1024 MB.<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1318898<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1318898<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319152<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319152<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319403<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319403<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319680<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319813<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319944<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319944<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1320190<br>
 &gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; Directly writing the symbol down makes the problem disappear, it seems=
 :<br>
 &gt;<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; unix &quot;Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 =
 22:52:10 UTC<br>
 &gt; 2015 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-linux/3m) (get-displ=
 ay-depth) =3D 32<br>
 &gt; Human Language: english<br>
 &gt; (current-memory-use) 761594160<br>
 &gt; raco pkg (show):<br>
 &gt; Installation-wide:<br>
 &gt;=C2=A0 Package=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0Checksum=C2=A0 =C2=A0 =C2=A0Source<br>
 &gt;=C2=A0 2d=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 4d8a7c27...=C2=A0 catalog 2d<br>
 &gt; git://<a href=3D"http://github.com/racket/2d?path=3D2d" rel=3D"norefer=
 rer" target=3D"_blank">github.com/racket/2d?path=3D2d</a><br>
 &gt;=C2=A0 main-distribution=C2=A0 =C2=A0 =C2=A0 =C2=A01a0cd523...=C2=A0 ca=
 talog main-distribution<br>
 &gt; git://<a href=3D"http://github.com/racket/main-distribution" rel=3D"no=
 referrer" target=3D"_blank">github.com/racket/main-distribution</a><br>
 &gt;=C2=A0 main-distribution-test=C2=A0 046a9380...=C2=A0 catalog main-dist=
 ribution-test<br>
 &gt; git://<a href=3D"http://github.com/racket/main-distribution-test" rel=
 =3D"noreferrer" target=3D"_blank">github.com/racket/main-distribution-test<=
 /a><br>
 &gt;=C2=A0 racket-lib=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0static-link<br>
 &gt; /home/paul/src/racket/pkgs/racket-lib<br>
 &gt;=C2=A0 redex=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0b3732832...=C2=A0 catalog redex<br>
 &gt; git://<a href=3D"http://github.com/racket/redex/?path=3Dredex" rel=3D"=
 noreferrer" target=3D"_blank">github.com/racket/redex/?path=3Dredex</a><br>
 &gt;=C2=A0 [242 auto-installed packages not shown]<br>
 &gt; User-specific for installation &quot;development&quot;:<br>
 &gt;=C2=A0 [none]<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; Collections:<br>
 &gt; (&quot;/home/paul/.racket/development/collects&quot;<br>
 &gt;=C2=A0 (non-existent-path))<br>
 &gt; (&quot;/home/paul/src/racket/racket/collects&quot;<br>
 &gt;=C2=A0 (&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler&quot; &q=
 uot;data&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &quot;file=
 &quot; &quot;info&quot;<br>
 &gt; &quot;info-domain&quot; &quot;json&quot; &quot;launcher&quot; &quot;ne=
 t&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet&quot; &quot;racket=
 &quot; &quot;raco&quot;<br>
 &gt; &quot;reader&quot; &quot;realm&quot; &quot;s-exp&quot; &quot;setup&quo=
 t; &quot;syntax&quot; &quot;unstable&quot; &quot;version&quot; &quot;xml&qu=
 ot;))<br>
 &gt;<br>
 &gt; Recent Internal Errors:<br>
 &gt; Computer Language: ((&quot;Determine language from source&quot;) (#(#t=
  print<br>
 &gt; mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot;=
  #t #t ((test)<br>
 &gt; (main)) #t))<br>
 </blockquote></div><br></div>
 
 --001a1143f81c43fe27052cff7db4--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Paul Stansifer <paul.stansifer@gmail.com>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Tue, 1 Mar 2016 10:56:39 -0600

 --001a113e5ed82e115a052cffa6cb
 Content-Type: text/plain; charset=UTF-8
 
 Paul, can you say why you are relying on the equal? Relationship for gc'd
 values?
 
 Robby
 
 On Tuesday, March 1, 2016, Paul Stansifer <paul.stansifer@gmail.com> wrote:
 
 > Ah, that makes sense.
 >
 > The behavior seems to go away for prefab structs, and there's no reason I
 > can't use them for my code instead of symbols. But is that a guarantee or a
 > lucky guess? Nothing in the documentation convinces me I can rely on it.
 >
 > This might (or might not) trip up future users, but I'm fine. I kind of
 > want to suggest adding "that exist in memory at the same time" to the
 > documentation for `equal-hash-code`, but even though I looked at the
 > documentation before filing this bug, I'm not 100% sure that I would have
 > even noticed, so the documentation bloat is probably not worth it.
 >
 > Thanks,
 > Paul
 >
 > On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <mflatt@cs.utah.edu
 > <javascript:_e(%7B%7D,'cvml','mflatt@cs.utah.edu');>> wrote:
 >
 >> The issue is that the symbol produced by the first `(string->symbol
 >> "1")` doesn't exist by time a value is produced by third
 >> `(string->symbol "1")`. Since the two values are never reachable at the
 >> same time, they'll never be both passed to `equal?`. (Apparently, a GC
 >> happened between the second and third interaction.)
 >>
 >> I concede that other interpretations of "`equal?` values" are possible,
 >> but that's the currently implemented interpretation. Do you need a
 >> different interpretation to be implemented?
 >>
 >> At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com
 >> <javascript:_e(%7B%7D,'cvml','paul.stansifer@gmail.com');> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=15262
 >> >
 >> > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 >> >
 >> > *** Description:
 >> > It seems to happen when the inputs are S-expressions that contain
 >> symbols
 >> > whose names are made entirely of digits.
 >> >
 >> > *** How to repeat:
 >> > This seems to only work in DrRacket's REPL (and only erratically), but
 >> here's
 >> > a transcript:
 >> >
 >> > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 >> > Language: racket; memory limit: 1024 MB.
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1318898
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1318898
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1319152
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1319152
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1319403
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1319403
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1319680
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1319813
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1319944
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1319944
 >> > > (equal-hash-code (string->symbol "1"))
 >> > 1320190
 >> > >
 >> >
 >> >
 >> > Directly writing the symbol down makes the problem disappear, it seems:
 >> >
 >> > > (equal-hash-code '|1|)
 >> > 1327984
 >> > > (equal-hash-code '|1|)
 >> > 1327984
 >> > > (equal-hash-code '|1|)
 >> > 1327984
 >> > > (equal-hash-code '|1|)
 >> > 1327984
 >> > > (equal-hash-code '|1|)
 >> > 1327984
 >> > > (equal-hash-code '|1|)
 >> > 1327984
 >> > > (equal-hash-code '|1|)
 >> > 1327984
 >> > > (equal-hash-code '|1|)
 >> > 1327984
 >> >
 >> > *** Environment:
 >> > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17
 >> 22:52:10 UTC
 >> > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >> (get-display-depth) = 32
 >> > Human Language: english
 >> > (current-memory-use) 761594160
 >> > raco pkg (show):
 >> > Installation-wide:
 >> >  Package                 Checksum     Source
 >> >  2d                      4d8a7c27...  catalog 2d
 >> > git://github.com/racket/2d?path=2d
 >> >  main-distribution       1a0cd523...  catalog main-distribution
 >> > git://github.com/racket/main-distribution
 >> >  main-distribution-test  046a9380...  catalog main-distribution-test
 >> > git://github.com/racket/main-distribution-test
 >> >  racket-lib                           static-link
 >> > /home/paul/src/racket/pkgs/racket-lib
 >> >  redex                   b3732832...  catalog redex
 >> > git://github.com/racket/redex/?path=redex
 >> >  [242 auto-installed packages not shown]
 >> > User-specific for installation "development":
 >> >  [none]
 >> >
 >> >
 >> >
 >> > Collections:
 >> > ("/home/paul/.racket/development/collects"
 >> >  (non-existent-path))
 >> > ("/home/paul/src/racket/racket/collects"
 >> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >> "info"
 >> > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket"
 >> "raco"
 >> > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 >> >
 >> > Recent Internal Errors:
 >> > Computer Language: (("Determine language from source") (#(#t print
 >> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 >> ((test)
 >> > (main)) #t))
 >>
 >
 >
 
 --001a113e5ed82e115a052cffa6cb
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Paul, can you say why you are relying on the equal? Relationship for gc&#39=
 ;d values?<div><br></div><div>Robby<span></span><br><br>On Tuesday, March 1=
 , 2016, Paul Stansifer &lt;<a href=3D"mailto:paul.stansifer@gmail.com">paul=
 .stansifer@gmail.com</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" st=
 yle=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div =
 dir=3D"ltr"><div>Ah, that makes sense. <br><br></div><div>The behavior seem=
 s to go=20
 away for prefab structs, and there&#39;s no reason I can&#39;t use them for=
  my=20
 code instead of symbols. But is that a guarantee or a lucky guess?=20
 Nothing in the documentation convinces me I can rely on it.<br><br></div><d=
 iv>This
  might (or might not) trip up future users, but I&#39;m fine. I kind of wan=
 t
  to suggest adding &quot;that exist in memory at the same time&quot; to the=
 =20
 documentation for `equal-hash-code`, but even though I looked at the=20
 documentation before filing this bug, I&#39;m not 100% sure that I would=20
 have even noticed, so the documentation bloat is probably not worth it.<br>=
 <br></div><div>Thanks,<br></div>Paul</div><div class=3D"gmail_extra"><br><d=
 iv class=3D"gmail_quote">On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <sp=
 an dir=3D"ltr">&lt;<a href=3D"javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;mfla=
 tt@cs.utah.edu&#39;);" target=3D"_blank">mflatt@cs.utah.edu</a>&gt;</span> =
 wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bord=
 er-left:1px #ccc solid;padding-left:1ex">The issue is that the symbol produ=
 ced by the first `(string-&gt;symbol<br>
 &quot;1&quot;)` doesn&#39;t exist by time a value is produced by third<br>
 `(string-&gt;symbol &quot;1&quot;)`. Since the two values are never reachab=
 le at the<br>
 same time, they&#39;ll never be both passed to `equal?`. (Apparently, a GC<=
 br>
 happened between the second and third interaction.)<br>
 <br>
 I concede that other interpretations of &quot;`equal?` values&quot; are pos=
 sible,<br>
 but that&#39;s the currently implemented interpretation. Do you need a<br>
 different interpretation to be implemented?<br>
 <br>
 At Tue, 1 Mar 2016 10:40:02 -0500, <a href=3D"javascript:_e(%7B%7D,&#39;cvm=
 l&#39;,&#39;paul.stansifer@gmail.com&#39;);" target=3D"_blank">paul.stansif=
 er@gmail.com</a> wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt;=C2=A0 =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D15262" rel=3D"noreferrer" target=3D"_blank">http://bugs.racket-lang=
 .org/query/?cmd=3Dview&amp;pr=3D15262</a><br>
 &gt;<br>
 &gt; Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; It seems to happen when the inputs are S-expressions that contain symb=
 ols<br>
 &gt; whose names are made entirely of digits.<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt; This seems to only work in DrRacket&#39;s REPL (and only erratically),=
  but here&#39;s<br>
 &gt; a transcript:<br>
 &gt;<br>
 &gt; Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].<br>
 &gt; Language: racket; memory limit: 1024 MB.<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1318898<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1318898<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319152<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319152<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319403<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319403<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319680<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319813<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319944<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319944<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1320190<br>
 &gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; Directly writing the symbol down makes the problem disappear, it seems=
 :<br>
 &gt;<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; unix &quot;Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 =
 22:52:10 UTC<br>
 &gt; 2015 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-linux/3m) (get-displ=
 ay-depth) =3D 32<br>
 &gt; Human Language: english<br>
 &gt; (current-memory-use) 761594160<br>
 &gt; raco pkg (show):<br>
 &gt; Installation-wide:<br>
 &gt;=C2=A0 Package=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0Checksum=C2=A0 =C2=A0 =C2=A0Source<br>
 &gt;=C2=A0 2d=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 4d8a7c27...=C2=A0 catalog 2d<br>
 &gt; git://<a href=3D"http://github.com/racket/2d?path=3D2d" rel=3D"norefer=
 rer" target=3D"_blank">github.com/racket/2d?path=3D2d</a><br>
 &gt;=C2=A0 main-distribution=C2=A0 =C2=A0 =C2=A0 =C2=A01a0cd523...=C2=A0 ca=
 talog main-distribution<br>
 &gt; git://<a href=3D"http://github.com/racket/main-distribution" rel=3D"no=
 referrer" target=3D"_blank">github.com/racket/main-distribution</a><br>
 &gt;=C2=A0 main-distribution-test=C2=A0 046a9380...=C2=A0 catalog main-dist=
 ribution-test<br>
 &gt; git://<a href=3D"http://github.com/racket/main-distribution-test" rel=
 =3D"noreferrer" target=3D"_blank">github.com/racket/main-distribution-test<=
 /a><br>
 &gt;=C2=A0 racket-lib=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0static-link<br>
 &gt; /home/paul/src/racket/pkgs/racket-lib<br>
 &gt;=C2=A0 redex=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0b3732832...=C2=A0 catalog redex<br>
 &gt; git://<a href=3D"http://github.com/racket/redex/?path=3Dredex" rel=3D"=
 noreferrer" target=3D"_blank">github.com/racket/redex/?path=3Dredex</a><br>
 &gt;=C2=A0 [242 auto-installed packages not shown]<br>
 &gt; User-specific for installation &quot;development&quot;:<br>
 &gt;=C2=A0 [none]<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; Collections:<br>
 &gt; (&quot;/home/paul/.racket/development/collects&quot;<br>
 &gt;=C2=A0 (non-existent-path))<br>
 &gt; (&quot;/home/paul/src/racket/racket/collects&quot;<br>
 &gt;=C2=A0 (&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler&quot; &q=
 uot;data&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &quot;file=
 &quot; &quot;info&quot;<br>
 &gt; &quot;info-domain&quot; &quot;json&quot; &quot;launcher&quot; &quot;ne=
 t&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet&quot; &quot;racket=
 &quot; &quot;raco&quot;<br>
 &gt; &quot;reader&quot; &quot;realm&quot; &quot;s-exp&quot; &quot;setup&quo=
 t; &quot;syntax&quot; &quot;unstable&quot; &quot;version&quot; &quot;xml&qu=
 ot;))<br>
 &gt;<br>
 &gt; Recent Internal Errors:<br>
 &gt; Computer Language: ((&quot;Determine language from source&quot;) (#(#t=
  print<br>
 &gt; mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot;=
  #t #t ((test)<br>
 &gt; (main)) #t))<br>
 </blockquote></div><br></div>
 </blockquote></div>
 
 --001a113e5ed82e115a052cffa6cb--
From: Paul Stansifer <paul.stansifer@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Tue, 1 Mar 2016 12:07:36 -0500

 --001a1142768e730dab052cffce86
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Both `=CE=B1-equal-hash-code` and `=CE=B1-equal?` internally use a `canonic=
 alize`
 function to generate a canonical version of their arguments, which then
 gets passed to `equal-hash-code` or `equal?` respectively, and then gets
 thrown away. It could be cached, and maybe even should be (after the Redex
 representation change), but I think it's a big trap for the lifetime of the
 canonicalized value to matter, so I want to pick something stable to
 canonicalize to.
 
 Paul
 
 On Tue, Mar 1, 2016 at 11:56 AM, Robby Findler <robby@eecs.northwestern.edu=
 >
 wrote:
 
 > Paul, can you say why you are relying on the equal? Relationship for gc'd
 > values?
 >
 > Robby
 >
 >
 > On Tuesday, March 1, 2016, Paul Stansifer <paul.stansifer@gmail.com>
 > wrote:
 >
 >> Ah, that makes sense.
 >>
 >> The behavior seems to go away for prefab structs, and there's no reason =
 I
 >> can't use them for my code instead of symbols. But is that a guarantee o=
 r a
 >> lucky guess? Nothing in the documentation convinces me I can rely on it.
 >>
 >> This might (or might not) trip up future users, but I'm fine. I kind of
 >> want to suggest adding "that exist in memory at the same time" to the
 >> documentation for `equal-hash-code`, but even though I looked at the
 >> documentation before filing this bug, I'm not 100% sure that I would hav=
 e
 >> even noticed, so the documentation bloat is probably not worth it.
 >>
 >> Thanks,
 >> Paul
 >>
 >> On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <mflatt@cs.utah.edu>
 >> wrote:
 >>
 >>> The issue is that the symbol produced by the first `(string->symbol
 >>> "1")` doesn't exist by time a value is produced by third
 >>> `(string->symbol "1")`. Since the two values are never reachable at the
 >>> same time, they'll never be both passed to `equal?`. (Apparently, a GC
 >>> happened between the second and third interaction.)
 >>>
 >>> I concede that other interpretations of "`equal?` values" are possible,
 >>> but that's the currently implemented interpretation. Do you need a
 >>> different interpretation to be implemented?
 >>>
 >>> At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com wrote:
 >>> > A new problem report is waiting at
 >>> >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D15262
 >>> >
 >>> > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 >>> >
 >>> > *** Description:
 >>> > It seems to happen when the inputs are S-expressions that contain
 >>> symbols
 >>> > whose names are made entirely of digits.
 >>> >
 >>> > *** How to repeat:
 >>> > This seems to only work in DrRacket's REPL (and only erratically), bu=
 t
 >>> here's
 >>> > a transcript:
 >>> >
 >>> > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 >>> > Language: racket; memory limit: 1024 MB.
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1318898
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1318898
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1319152
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1319152
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1319403
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1319403
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1319680
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1319813
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1319944
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1319944
 >>> > > (equal-hash-code (string->symbol "1"))
 >>> > 1320190
 >>> > >
 >>> >
 >>> >
 >>> > Directly writing the symbol down makes the problem disappear, it seem=
 s:
 >>> >
 >>> > > (equal-hash-code '|1|)
 >>> > 1327984
 >>> > > (equal-hash-code '|1|)
 >>> > 1327984
 >>> > > (equal-hash-code '|1|)
 >>> > 1327984
 >>> > > (equal-hash-code '|1|)
 >>> > 1327984
 >>> > > (equal-hash-code '|1|)
 >>> > 1327984
 >>> > > (equal-hash-code '|1|)
 >>> > 1327984
 >>> > > (equal-hash-code '|1|)
 >>> > 1327984
 >>> > > (equal-hash-code '|1|)
 >>> > 1327984
 >>> >
 >>> > *** Environment:
 >>> > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17
 >>> 22:52:10 UTC
 >>> > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>> (get-display-depth) =3D 32
 >>> > Human Language: english
 >>> > (current-memory-use) 761594160
 >>> > raco pkg (show):
 >>> > Installation-wide:
 >>> >  Package                 Checksum     Source
 >>> >  2d                      4d8a7c27...  catalog 2d
 >>> > git://github.com/racket/2d?path=3D2d
 >>> >  main-distribution       1a0cd523...  catalog main-distribution
 >>> > git://github.com/racket/main-distribution
 >>> >  main-distribution-test  046a9380...  catalog main-distribution-test
 >>> > git://github.com/racket/main-distribution-test
 >>> >  racket-lib                           static-link
 >>> > /home/paul/src/racket/pkgs/racket-lib
 >>> >  redex                   b3732832...  catalog redex
 >>> > git://github.com/racket/redex/?path=3Dredex
 >>> >  [242 auto-installed packages not shown]
 >>> > User-specific for installation "development":
 >>> >  [none]
 >>> >
 >>> >
 >>> >
 >>> > Collections:
 >>> > ("/home/paul/.racket/development/collects"
 >>> >  (non-existent-path))
 >>> > ("/home/paul/src/racket/racket/collects"
 >>> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >>> "info"
 >>> > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >>> "racket" "raco"
 >>> > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml")=
 )
 >>> >
 >>> > Recent Internal Errors:
 >>> > Computer Language: (("Determine language from source") (#(#t print
 >>> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 >>> ((test)
 >>> > (main)) #t))
 >>>
 >>
 >>
 
 --001a1142768e730dab052cffce86
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>Both `=CE=B1-equal-hash-code` and `=CE=B1-equal?` int=
 ernally use a `canonicalize` function to generate a canonical version of th=
 eir arguments, which then gets passed to `equal-hash-code` or `equal?` resp=
 ectively, and then gets thrown away. It could be cached, and maybe even sho=
 uld be (after the Redex representation change), but I think it&#39;s a big =
 trap for the lifetime of the canonicalized value to matter, so I want to pi=
 ck something stable to canonicalize to.<br><br></div>Paul<br></div><div cla=
 ss=3D"gmail_extra"><br><div class=3D"gmail_quote">On Tue, Mar 1, 2016 at 11=
 :56 AM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.no=
 rthwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span=
 > wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bo=
 rder-left:1px #ccc solid;padding-left:1ex">Paul, can you say why you are re=
 lying on the equal? Relationship for gc&#39;d values?<span class=3D"HOEnZb"=
 ><font color=3D"#888888"><div><br></div></font></span><div><span class=3D"H=
 OEnZb"><font color=3D"#888888">Robby</font></span><div><div class=3D"h5"><s=
 pan></span><br><br>On Tuesday, March 1, 2016, Paul Stansifer &lt;<a href=3D=
 "mailto:paul.stansifer@gmail.com" target=3D"_blank">paul.stansifer@gmail.co=
 m</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0=
  .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div>Ah=
 , that makes sense. <br><br></div><div>The behavior seems to go=20
 away for prefab structs, and there&#39;s no reason I can&#39;t use them for=
  my=20
 code instead of symbols. But is that a guarantee or a lucky guess?=20
 Nothing in the documentation convinces me I can rely on it.<br><br></div><d=
 iv>This
  might (or might not) trip up future users, but I&#39;m fine. I kind of wan=
 t
  to suggest adding &quot;that exist in memory at the same time&quot; to the=
 =20
 documentation for `equal-hash-code`, but even though I looked at the=20
 documentation before filing this bug, I&#39;m not 100% sure that I would=20
 have even noticed, so the documentation bloat is probably not worth it.<br>=
 <br></div><div>Thanks,<br></div>Paul</div><div class=3D"gmail_extra"><br><d=
 iv class=3D"gmail_quote">On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <sp=
 an dir=3D"ltr">&lt;<a>mflatt@cs.utah.edu</a>&gt;</span> wrote:<br><blockquo=
 te class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc so=
 lid;padding-left:1ex">The issue is that the symbol produced by the first `(=
 string-&gt;symbol<br>
 &quot;1&quot;)` doesn&#39;t exist by time a value is produced by third<br>
 `(string-&gt;symbol &quot;1&quot;)`. Since the two values are never reachab=
 le at the<br>
 same time, they&#39;ll never be both passed to `equal?`. (Apparently, a GC<=
 br>
 happened between the second and third interaction.)<br>
 <br>
 I concede that other interpretations of &quot;`equal?` values&quot; are pos=
 sible,<br>
 but that&#39;s the currently implemented interpretation. Do you need a<br>
 different interpretation to be implemented?<br>
 <br>
 At Tue, 1 Mar 2016 10:40:02 -0500, <a>paul.stansifer@gmail.com</a> wrote:<b=
 r>
 &gt; A new problem report is waiting at<br>
 &gt;=C2=A0 =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D15262" rel=3D"noreferrer" target=3D"_blank">http://bugs.racket-lang=
 .org/query/?cmd=3Dview&amp;pr=3D15262</a><br>
 &gt;<br>
 &gt; Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; It seems to happen when the inputs are S-expressions that contain symb=
 ols<br>
 &gt; whose names are made entirely of digits.<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt; This seems to only work in DrRacket&#39;s REPL (and only erratically),=
  but here&#39;s<br>
 &gt; a transcript:<br>
 &gt;<br>
 &gt; Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].<br>
 &gt; Language: racket; memory limit: 1024 MB.<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1318898<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1318898<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319152<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319152<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319403<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319403<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319680<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319813<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319944<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1319944<br>
 &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot;))<br>
 &gt; 1320190<br>
 &gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; Directly writing the symbol down makes the problem disappear, it seems=
 :<br>
 &gt;<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt; 1327984<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; unix &quot;Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 =
 22:52:10 UTC<br>
 &gt; 2015 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-linux/3m) (get-displ=
 ay-depth) =3D 32<br>
 &gt; Human Language: english<br>
 &gt; (current-memory-use) 761594160<br>
 &gt; raco pkg (show):<br>
 &gt; Installation-wide:<br>
 &gt;=C2=A0 Package=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0Checksum=C2=A0 =C2=A0 =C2=A0Source<br>
 &gt;=C2=A0 2d=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 4d8a7c27...=C2=A0 catalog 2d<br>
 &gt; git://<a href=3D"http://github.com/racket/2d?path=3D2d" rel=3D"norefer=
 rer" target=3D"_blank">github.com/racket/2d?path=3D2d</a><br>
 &gt;=C2=A0 main-distribution=C2=A0 =C2=A0 =C2=A0 =C2=A01a0cd523...=C2=A0 ca=
 talog main-distribution<br>
 &gt; git://<a href=3D"http://github.com/racket/main-distribution" rel=3D"no=
 referrer" target=3D"_blank">github.com/racket/main-distribution</a><br>
 &gt;=C2=A0 main-distribution-test=C2=A0 046a9380...=C2=A0 catalog main-dist=
 ribution-test<br>
 &gt; git://<a href=3D"http://github.com/racket/main-distribution-test" rel=
 =3D"noreferrer" target=3D"_blank">github.com/racket/main-distribution-test<=
 /a><br>
 &gt;=C2=A0 racket-lib=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0static-link<br>
 &gt; /home/paul/src/racket/pkgs/racket-lib<br>
 &gt;=C2=A0 redex=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0b3732832...=C2=A0 catalog redex<br>
 &gt; git://<a href=3D"http://github.com/racket/redex/?path=3Dredex" rel=3D"=
 noreferrer" target=3D"_blank">github.com/racket/redex/?path=3Dredex</a><br>
 &gt;=C2=A0 [242 auto-installed packages not shown]<br>
 &gt; User-specific for installation &quot;development&quot;:<br>
 &gt;=C2=A0 [none]<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; Collections:<br>
 &gt; (&quot;/home/paul/.racket/development/collects&quot;<br>
 &gt;=C2=A0 (non-existent-path))<br>
 &gt; (&quot;/home/paul/src/racket/racket/collects&quot;<br>
 &gt;=C2=A0 (&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler&quot; &q=
 uot;data&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &quot;file=
 &quot; &quot;info&quot;<br>
 &gt; &quot;info-domain&quot; &quot;json&quot; &quot;launcher&quot; &quot;ne=
 t&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet&quot; &quot;racket=
 &quot; &quot;raco&quot;<br>
 &gt; &quot;reader&quot; &quot;realm&quot; &quot;s-exp&quot; &quot;setup&quo=
 t; &quot;syntax&quot; &quot;unstable&quot; &quot;version&quot; &quot;xml&qu=
 ot;))<br>
 &gt;<br>
 &gt; Recent Internal Errors:<br>
 &gt; Computer Language: ((&quot;Determine language from source&quot;) (#(#t=
  print<br>
 &gt; mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot;=
  #t #t ((test)<br>
 &gt; (main)) #t))<br>
 </blockquote></div><br></div>
 </blockquote></div></div></div>
 </blockquote></div><br></div>
 
 --001a1142768e730dab052cffce86--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Paul Stansifer <paul.stansifer@gmail.com>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Tue, 1 Mar 2016 11:26:26 -0600

 I think this means that α-equal-hash-code cannot re-use
 equal-hash-code (altho α-equal? could be I suppose) but would have to
 compute its own hash explicitly. No?
 
 Robby
 
 On Tue, Mar 1, 2016 at 11:07 AM, Paul Stansifer
 <paul.stansifer@gmail.com> wrote:
 > Both `α-equal-hash-code` and `α-equal?` internally use a `canonicalize`
 > function to generate a canonical version of their arguments, which then gets
 > passed to `equal-hash-code` or `equal?` respectively, and then gets thrown
 > away. It could be cached, and maybe even should be (after the Redex
 > representation change), but I think it's a big trap for the lifetime of the
 > canonicalized value to matter, so I want to pick something stable to
 > canonicalize to.
 >
 > Paul
 >
 > On Tue, Mar 1, 2016 at 11:56 AM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >>
 >> Paul, can you say why you are relying on the equal? Relationship for gc'd
 >> values?
 >>
 >> Robby
 >>
 >>
 >> On Tuesday, March 1, 2016, Paul Stansifer <paul.stansifer@gmail.com>
 >> wrote:
 >>>
 >>> Ah, that makes sense.
 >>>
 >>> The behavior seems to go away for prefab structs, and there's no reason I
 >>> can't use them for my code instead of symbols. But is that a guarantee or a
 >>> lucky guess? Nothing in the documentation convinces me I can rely on it.
 >>>
 >>> This might (or might not) trip up future users, but I'm fine. I kind of
 >>> want to suggest adding "that exist in memory at the same time" to the
 >>> documentation for `equal-hash-code`, but even though I looked at the
 >>> documentation before filing this bug, I'm not 100% sure that I would have
 >>> even noticed, so the documentation bloat is probably not worth it.
 >>>
 >>> Thanks,
 >>> Paul
 >>>
 >>> On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <mflatt@cs.utah.edu>
 >>> wrote:
 >>>>
 >>>> The issue is that the symbol produced by the first `(string->symbol
 >>>> "1")` doesn't exist by time a value is produced by third
 >>>> `(string->symbol "1")`. Since the two values are never reachable at the
 >>>> same time, they'll never be both passed to `equal?`. (Apparently, a GC
 >>>> happened between the second and third interaction.)
 >>>>
 >>>> I concede that other interpretations of "`equal?` values" are possible,
 >>>> but that's the currently implemented interpretation. Do you need a
 >>>> different interpretation to be implemented?
 >>>>
 >>>> At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com wrote:
 >>>> > A new problem report is waiting at
 >>>> >   http://bugs.racket-lang.org/query/?cmd=view&pr=15262
 >>>> >
 >>>> > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 >>>> >
 >>>> > *** Description:
 >>>> > It seems to happen when the inputs are S-expressions that contain
 >>>> > symbols
 >>>> > whose names are made entirely of digits.
 >>>> >
 >>>> > *** How to repeat:
 >>>> > This seems to only work in DrRacket's REPL (and only erratically), but
 >>>> > here's
 >>>> > a transcript:
 >>>> >
 >>>> > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 >>>> > Language: racket; memory limit: 1024 MB.
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1318898
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1318898
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1319152
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1319152
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1319403
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1319403
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1319680
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1319813
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1319944
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1319944
 >>>> > > (equal-hash-code (string->symbol "1"))
 >>>> > 1320190
 >>>> > >
 >>>> >
 >>>> >
 >>>> > Directly writing the symbol down makes the problem disappear, it
 >>>> > seems:
 >>>> >
 >>>> > > (equal-hash-code '|1|)
 >>>> > 1327984
 >>>> > > (equal-hash-code '|1|)
 >>>> > 1327984
 >>>> > > (equal-hash-code '|1|)
 >>>> > 1327984
 >>>> > > (equal-hash-code '|1|)
 >>>> > 1327984
 >>>> > > (equal-hash-code '|1|)
 >>>> > 1327984
 >>>> > > (equal-hash-code '|1|)
 >>>> > 1327984
 >>>> > > (equal-hash-code '|1|)
 >>>> > 1327984
 >>>> > > (equal-hash-code '|1|)
 >>>> > 1327984
 >>>> >
 >>>> > *** Environment:
 >>>> > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17
 >>>> > 22:52:10 UTC
 >>>> > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>>> > (get-display-depth) = 32
 >>>> > Human Language: english
 >>>> > (current-memory-use) 761594160
 >>>> > raco pkg (show):
 >>>> > Installation-wide:
 >>>> >  Package                 Checksum     Source
 >>>> >  2d                      4d8a7c27...  catalog 2d
 >>>> > git://github.com/racket/2d?path=2d
 >>>> >  main-distribution       1a0cd523...  catalog main-distribution
 >>>> > git://github.com/racket/main-distribution
 >>>> >  main-distribution-test  046a9380...  catalog main-distribution-test
 >>>> > git://github.com/racket/main-distribution-test
 >>>> >  racket-lib                           static-link
 >>>> > /home/paul/src/racket/pkgs/racket-lib
 >>>> >  redex                   b3732832...  catalog redex
 >>>> > git://github.com/racket/redex/?path=redex
 >>>> >  [242 auto-installed packages not shown]
 >>>> > User-specific for installation "development":
 >>>> >  [none]
 >>>> >
 >>>> >
 >>>> >
 >>>> > Collections:
 >>>> > ("/home/paul/.racket/development/collects"
 >>>> >  (non-existent-path))
 >>>> > ("/home/paul/src/racket/racket/collects"
 >>>> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >>>> > "info"
 >>>> > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >>>> > "racket" "raco"
 >>>> > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 >>>> >
 >>>> > Recent Internal Errors:
 >>>> > Computer Language: (("Determine language from source") (#(#t print
 >>>> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 >>>> > ((test)
 >>>> > (main)) #t))
 >>>
 >>>
 >
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Paul Stansifer <paul.stansifer@gmail.com>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Tue, 1 Mar 2016 10:41:40 -0700

 At Tue, 1 Mar 2016 11:44:53 -0500, Paul Stansifer wrote:
 > The behavior seems to go away for prefab structs, and there's no reason I
 > can't use them for my code instead of symbols. But is that a guarantee or a
 > lucky guess? Nothing in the documentation convinces me I can rely on it.
 
 I'm not sure how you're using a prefab struct, so it's hard to say for
 certain. Looking at the implementation, it seems that the prefab struct
 type's name is not used:
 
   > (equal-hash-code '#s(a 1))
  1237515
  > (equal-hash-code '#s(b 1))
  1237515
 
 That suggests to me that the hash function should be improved to
 distinguish better among prefab struct types --- possibly a step in the
 opposite direction for your purposes.
 
 At Tue, 1 Mar 2016 11:26:26 -0600, Robby Findler wrote:
 > I think this means that α-equal-hash-code cannot re-use
 > equal-hash-code (altho α-equal? could be I suppose) but would have to
 > compute its own hash explicitly. No?
 
 I think that's true, but maybe we should change the implementation and
 its guarantees. I see ways to improve the guarantees for interned
 symbols, so that the hash code depends only on the characters that form
 the symbol. Offhand, I can't think of any other datatype that would
 have a similar problem, but I could easily be forgetting something.
 
 I'll investigate whether the `equal-hash-code` guarantee can be
 improved (at low cost) and report back.
 
 
From: Paul Stansifer <paul.stansifer@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Tue, 1 Mar 2016 14:21:29 -0500

 --001a114661dc4fd41c052d01ad53
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Not necessarily. One option is just to store all the generated symbols in a
 list somewhere so that their notion of equality doesn't expire. Really, as
 long as I can find *something* there are infinitely many of that won't
 appear in Redex terms, I can use that for my canonical names.
 
 Shoot; it never occurred to me, but I *can't* use symbols: the way things
 currently work, Redex terms with free names that are symbolic numbers will
 break alpha-equivalence.
 
 I think I have a plan, and it should be able to use `equal-hash-code` as it
 exists: I'm going to generate a fresh symbol g (and keep it in memory
 permanently), and canonicalize variables to `(,g ,serial-number). There's
 no need for the canonical form to be user-consumable in any way.
 
 I should be able to fix both problems with one commit!
 
 Paul
 
 
 On Tue, Mar 1, 2016 at 12:26 PM, Robby Findler <robby@eecs.northwestern.edu=
 >
 wrote:
 
 > I think this means that =CE=B1-equal-hash-code cannot re-use
 > equal-hash-code (altho =CE=B1-equal? could be I suppose) but would have t=
 o
 > compute its own hash explicitly. No?
 >
 > Robby
 >
 > On Tue, Mar 1, 2016 at 11:07 AM, Paul Stansifer
 > <paul.stansifer@gmail.com> wrote:
 > > Both `=CE=B1-equal-hash-code` and `=CE=B1-equal?` internally use a `can=
 onicalize`
 > > function to generate a canonical version of their arguments, which then
 > gets
 > > passed to `equal-hash-code` or `equal?` respectively, and then gets
 > thrown
 > > away. It could be cached, and maybe even should be (after the Redex
 > > representation change), but I think it's a big trap for the lifetime of
 > the
 > > canonicalized value to matter, so I want to pick something stable to
 > > canonicalize to.
 > >
 > > Paul
 > >
 > > On Tue, Mar 1, 2016 at 11:56 AM, Robby Findler <
 > robby@eecs.northwestern.edu>
 > > wrote:
 > >>
 > >> Paul, can you say why you are relying on the equal? Relationship for
 > gc'd
 > >> values?
 > >>
 > >> Robby
 > >>
 > >>
 > >> On Tuesday, March 1, 2016, Paul Stansifer <paul.stansifer@gmail.com>
 > >> wrote:
 > >>>
 > >>> Ah, that makes sense.
 > >>>
 > >>> The behavior seems to go away for prefab structs, and there's no
 > reason I
 > >>> can't use them for my code instead of symbols. But is that a guarante=
 e
 > or a
 > >>> lucky guess? Nothing in the documentation convinces me I can rely on
 > it.
 > >>>
 > >>> This might (or might not) trip up future users, but I'm fine. I kind =
 of
 > >>> want to suggest adding "that exist in memory at the same time" to the
 > >>> documentation for `equal-hash-code`, but even though I looked at the
 > >>> documentation before filing this bug, I'm not 100% sure that I would
 > have
 > >>> even noticed, so the documentation bloat is probably not worth it.
 > >>>
 > >>> Thanks,
 > >>> Paul
 > >>>
 > >>> On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <mflatt@cs.utah.edu>
 > >>> wrote:
 > >>>>
 > >>>> The issue is that the symbol produced by the first `(string->symbol
 > >>>> "1")` doesn't exist by time a value is produced by third
 > >>>> `(string->symbol "1")`. Since the two values are never reachable at
 > the
 > >>>> same time, they'll never be both passed to `equal?`. (Apparently, a =
 GC
 > >>>> happened between the second and third interaction.)
 > >>>>
 > >>>> I concede that other interpretations of "`equal?` values" are
 > possible,
 > >>>> but that's the currently implemented interpretation. Do you need a
 > >>>> different interpretation to be implemented?
 > >>>>
 > >>>> At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com wrote:
 > >>>> > A new problem report is waiting at
 > >>>> >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D15262
 > >>>> >
 > >>>> > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 > >>>> >
 > >>>> > *** Description:
 > >>>> > It seems to happen when the inputs are S-expressions that contain
 > >>>> > symbols
 > >>>> > whose names are made entirely of digits.
 > >>>> >
 > >>>> > *** How to repeat:
 > >>>> > This seems to only work in DrRacket's REPL (and only erratically),
 > but
 > >>>> > here's
 > >>>> > a transcript:
 > >>>> >
 > >>>> > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 > >>>> > Language: racket; memory limit: 1024 MB.
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1318898
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1318898
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1319152
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1319152
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1319403
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1319403
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1319680
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1319813
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1319944
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1319944
 > >>>> > > (equal-hash-code (string->symbol "1"))
 > >>>> > 1320190
 > >>>> > >
 > >>>> >
 > >>>> >
 > >>>> > Directly writing the symbol down makes the problem disappear, it
 > >>>> > seems:
 > >>>> >
 > >>>> > > (equal-hash-code '|1|)
 > >>>> > 1327984
 > >>>> > > (equal-hash-code '|1|)
 > >>>> > 1327984
 > >>>> > > (equal-hash-code '|1|)
 > >>>> > 1327984
 > >>>> > > (equal-hash-code '|1|)
 > >>>> > 1327984
 > >>>> > > (equal-hash-code '|1|)
 > >>>> > 1327984
 > >>>> > > (equal-hash-code '|1|)
 > >>>> > 1327984
 > >>>> > > (equal-hash-code '|1|)
 > >>>> > 1327984
 > >>>> > > (equal-hash-code '|1|)
 > >>>> > 1327984
 > >>>> >
 > >>>> > *** Environment:
 > >>>> > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17
 > >>>> > 22:52:10 UTC
 > >>>> > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > >>>> > (get-display-depth) =3D 32
 > >>>> > Human Language: english
 > >>>> > (current-memory-use) 761594160
 > >>>> > raco pkg (show):
 > >>>> > Installation-wide:
 > >>>> >  Package                 Checksum     Source
 > >>>> >  2d                      4d8a7c27...  catalog 2d
 > >>>> > git://github.com/racket/2d?path=3D2d
 > >>>> >  main-distribution       1a0cd523...  catalog main-distribution
 > >>>> > git://github.com/racket/main-distribution
 > >>>> >  main-distribution-test  046a9380...  catalog main-distribution-te=
 st
 > >>>> > git://github.com/racket/main-distribution-test
 > >>>> >  racket-lib                           static-link
 > >>>> > /home/paul/src/racket/pkgs/racket-lib
 > >>>> >  redex                   b3732832...  catalog redex
 > >>>> > git://github.com/racket/redex/?path=3Dredex
 > >>>> >  [242 auto-installed packages not shown]
 > >>>> > User-specific for installation "development":
 > >>>> >  [none]
 > >>>> >
 > >>>> >
 > >>>> >
 > >>>> > Collections:
 > >>>> > ("/home/paul/.racket/development/collects"
 > >>>> >  (non-existent-path))
 > >>>> > ("/home/paul/src/racket/racket/collects"
 > >>>> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 > >>>> > "info"
 > >>>> > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 > >>>> > "racket" "raco"
 > >>>> > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version"
 > "xml"))
 > >>>> >
 > >>>> > Recent Internal Errors:
 > >>>> > Computer Language: (("Determine language from source") (#(#t print
 > >>>> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 > >>>> > ((test)
 > >>>> > (main)) #t))
 > >>>
 > >>>
 > >
 >
 
 --001a114661dc4fd41c052d01ad53
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>Not necessarily. One option is just to store all the =
 generated symbols in a list somewhere so that their notion of equality does=
 n&#39;t expire. Really, as long as I can find *something* there are infinit=
 ely many of that won&#39;t appear in Redex terms, I can use that for my can=
 onical names.<br><br></div><div>Shoot; it never occurred to me, but I *can&=
 #39;t* use symbols: the way things currently work, Redex terms with free na=
 mes that are symbolic numbers will break alpha-equivalence.<br><br></div><d=
 iv>I think I have a plan, and it should be able to use `equal-hash-code` as=
  it exists: I&#39;m going to generate a fresh symbol g (and keep it in memo=
 ry permanently), and canonicalize variables to `(,g ,serial-number). There&=
 #39;s no need for the canonical form to be user-consumable in any way.<br><=
 br></div><div>I should be able to fix both problems with one commit!<br></d=
 iv><div><br></div><div>Paul<br></div><br></div><div class=3D"gmail_extra"><=
 br><div class=3D"gmail_quote">On Tue, Mar 1, 2016 at 12:26 PM, Robby Findle=
 r <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" targ=
 et=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><blockqu=
 ote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc s=
 olid;padding-left:1ex">I think this means that =CE=B1-equal-hash-code canno=
 t re-use<br>
 equal-hash-code (altho =CE=B1-equal? could be I suppose) but would have to<=
 br>
 compute its own hash explicitly. No?<br>
 <span class=3D"HOEnZb"><font color=3D"#888888"><br>
 Robby<br>
 </font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Tue, Mar 1, 2016 at 11:07 AM, Paul Stansifer<br>
 &lt;<a href=3D"mailto:paul.stansifer@gmail.com">paul.stansifer@gmail.com</a=
 >&gt; wrote:<br>
 &gt; Both `=CE=B1-equal-hash-code` and `=CE=B1-equal?` internally use a `ca=
 nonicalize`<br>
 &gt; function to generate a canonical version of their arguments, which the=
 n gets<br>
 &gt; passed to `equal-hash-code` or `equal?` respectively, and then gets th=
 rown<br>
 &gt; away. It could be cached, and maybe even should be (after the Redex<br=
 >
 &gt; representation change), but I think it&#39;s a big trap for the lifeti=
 me of the<br>
 &gt; canonicalized value to matter, so I want to pick something stable to<b=
 r>
 &gt; canonicalize to.<br>
 &gt;<br>
 &gt; Paul<br>
 &gt;<br>
 &gt; On Tue, Mar 1, 2016 at 11:56 AM, Robby Findler &lt;<a href=3D"mailto:r=
 obby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; Paul, can you say why you are relying on the equal? Relationship f=
 or gc&#39;d<br>
 &gt;&gt; values?<br>
 &gt;&gt;<br>
 &gt;&gt; Robby<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; On Tuesday, March 1, 2016, Paul Stansifer &lt;<a href=3D"mailto:pa=
 ul.stansifer@gmail.com">paul.stansifer@gmail.com</a>&gt;<br>
 &gt;&gt; wrote:<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Ah, that makes sense.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; The behavior seems to go away for prefab structs, and there&#3=
 9;s no reason I<br>
 &gt;&gt;&gt; can&#39;t use them for my code instead of symbols. But is that=
  a guarantee or a<br>
 &gt;&gt;&gt; lucky guess? Nothing in the documentation convinces me I can r=
 ely on it.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; This might (or might not) trip up future users, but I&#39;m fi=
 ne. I kind of<br>
 &gt;&gt;&gt; want to suggest adding &quot;that exist in memory at the same =
 time&quot; to the<br>
 &gt;&gt;&gt; documentation for `equal-hash-code`, but even though I looked =
 at the<br>
 &gt;&gt;&gt; documentation before filing this bug, I&#39;m not 100% sure th=
 at I would have<br>
 &gt;&gt;&gt; even noticed, so the documentation bloat is probably not worth=
  it.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Thanks,<br>
 &gt;&gt;&gt; Paul<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt &lt;<a href=3D"=
 mailto:mflatt@cs.utah.edu">mflatt@cs.utah.edu</a>&gt;<br>
 &gt;&gt;&gt; wrote:<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; The issue is that the symbol produced by the first `(strin=
 g-&gt;symbol<br>
 &gt;&gt;&gt;&gt; &quot;1&quot;)` doesn&#39;t exist by time a value is produ=
 ced by third<br>
 &gt;&gt;&gt;&gt; `(string-&gt;symbol &quot;1&quot;)`. Since the two values =
 are never reachable at the<br>
 &gt;&gt;&gt;&gt; same time, they&#39;ll never be both passed to `equal?`. (=
 Apparently, a GC<br>
 &gt;&gt;&gt;&gt; happened between the second and third interaction.)<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; I concede that other interpretations of &quot;`equal?` val=
 ues&quot; are possible,<br>
 &gt;&gt;&gt;&gt; but that&#39;s the currently implemented interpretation. D=
 o you need a<br>
 &gt;&gt;&gt;&gt; different interpretation to be implemented?<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; At Tue, 1 Mar 2016 10:40:02 -0500, <a href=3D"mailto:paul.=
 stansifer@gmail.com">paul.stansifer@gmail.com</a> wrote:<br>
 &gt;&gt;&gt;&gt; &gt; A new problem report is waiting at<br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 =C2=A0<a href=3D"http://bugs.racket-lang.org/qu=
 ery/?cmd=3Dview&amp;pr=3D15262" rel=3D"noreferrer" target=3D"_blank">http:/=
 /bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D15262</a><br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; Reported by Paul Stansifer for release: 6.4.0.1--2016=
 -01-13(-/f)<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; *** Description:<br>
 &gt;&gt;&gt;&gt; &gt; It seems to happen when the inputs are S-expressions =
 that contain<br>
 &gt;&gt;&gt;&gt; &gt; symbols<br>
 &gt;&gt;&gt;&gt; &gt; whose names are made entirely of digits.<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; *** How to repeat:<br>
 &gt;&gt;&gt;&gt; &gt; This seems to only work in DrRacket&#39;s REPL (and o=
 nly erratically), but<br>
 &gt;&gt;&gt;&gt; &gt; here&#39;s<br>
 &gt;&gt;&gt;&gt; &gt; a transcript:<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f)=
  [3m].<br>
 &gt;&gt;&gt;&gt; &gt; Language: racket; memory limit: 1024 MB.<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1318898<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1318898<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1319152<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1319152<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1319403<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1319403<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1319680<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1319813<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1319944<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1319944<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &quot;1&quot=
 ;))<br>
 &gt;&gt;&gt;&gt; &gt; 1320190<br>
 &gt;&gt;&gt;&gt; &gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; Directly writing the symbol down makes the problem di=
 sappear, it<br>
 &gt;&gt;&gt;&gt; &gt; seems:<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; *** Environment:<br>
 &gt;&gt;&gt;&gt; &gt; unix &quot;Linux saffron 3.13.0-74-generic #118-Ubunt=
 u SMP Thu Dec 17<br>
 &gt;&gt;&gt;&gt; &gt; 22:52:10 UTC<br>
 &gt;&gt;&gt;&gt; &gt; 2015 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-lin=
 ux/3m)<br>
 &gt;&gt;&gt;&gt; &gt; (get-display-depth) =3D 32<br>
 &gt;&gt;&gt;&gt; &gt; Human Language: english<br>
 &gt;&gt;&gt;&gt; &gt; (current-memory-use) 761594160<br>
 &gt;&gt;&gt;&gt; &gt; raco pkg (show):<br>
 &gt;&gt;&gt;&gt; &gt; Installation-wide:<br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 Package=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0Checksum=C2=A0 =C2=A0 =C2=A0Source<br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 2d=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 4d8a7c27...=C2=A0 catalog 2d<br>
 &gt;&gt;&gt;&gt; &gt; git://<a href=3D"http://github.com/racket/2d?path=3D2=
 d" rel=3D"noreferrer" target=3D"_blank">github.com/racket/2d?path=3D2d</a><=
 br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 main-distribution=C2=A0 =C2=A0 =C2=A0 =C2=A01a0=
 cd523...=C2=A0 catalog main-distribution<br>
 &gt;&gt;&gt;&gt; &gt; git://<a href=3D"http://github.com/racket/main-distri=
 bution" rel=3D"noreferrer" target=3D"_blank">github.com/racket/main-distrib=
 ution</a><br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 main-distribution-test=C2=A0 046a9380...=C2=A0 =
 catalog main-distribution-test<br>
 &gt;&gt;&gt;&gt; &gt; git://<a href=3D"http://github.com/racket/main-distri=
 bution-test" rel=3D"noreferrer" target=3D"_blank">github.com/racket/main-di=
 stribution-test</a><br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 racket-lib=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0static-link<b=
 r>
 &gt;&gt;&gt;&gt; &gt; /home/paul/src/racket/pkgs/racket-lib<br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 redex=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0b3732832...=C2=A0 catalog redex<br>
 &gt;&gt;&gt;&gt; &gt; git://<a href=3D"http://github.com/racket/redex/?path=
 =3Dredex" rel=3D"noreferrer" target=3D"_blank">github.com/racket/redex/?pat=
 h=3Dredex</a><br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 [242 auto-installed packages not shown]<br>
 &gt;&gt;&gt;&gt; &gt; User-specific for installation &quot;development&quot=
 ;:<br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 [none]<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; Collections:<br>
 &gt;&gt;&gt;&gt; &gt; (&quot;/home/paul/.racket/development/collects&quot;<=
 br>
 &gt;&gt;&gt;&gt; &gt;=C2=A0 (non-existent-path))<br>
 &gt;&gt;&gt;&gt; &gt; (&quot;/home/paul/src/racket/racket/collects&quot;<br=
 >
 &gt;&gt;&gt;&gt; &gt;=C2=A0 (&quot;.gitignore&quot; &quot;acks&quot; &quot;=
 compiler&quot; &quot;data&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi=
 &quot; &quot;file&quot;<br>
 &gt;&gt;&gt;&gt; &gt; &quot;info&quot;<br>
 &gt;&gt;&gt;&gt; &gt; &quot;info-domain&quot; &quot;json&quot; &quot;launch=
 er&quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet&q=
 uot;<br>
 &gt;&gt;&gt;&gt; &gt; &quot;racket&quot; &quot;raco&quot;<br>
 &gt;&gt;&gt;&gt; &gt; &quot;reader&quot; &quot;realm&quot; &quot;s-exp&quot=
 ; &quot;setup&quot; &quot;syntax&quot; &quot;unstable&quot; &quot;version&q=
 uot; &quot;xml&quot;))<br>
 &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt;&gt; &gt; Recent Internal Errors:<br>
 &gt;&gt;&gt;&gt; &gt; Computer Language: ((&quot;Determine language from so=
 urce&quot;) (#(#t print<br>
 &gt;&gt;&gt;&gt; &gt; mixed-fraction-e #f #t debug) (default) #() &quot;#la=
 ng racket\n&quot; #t #t<br>
 &gt;&gt;&gt;&gt; &gt; ((test)<br>
 &gt;&gt;&gt;&gt; &gt; (main)) #t))<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --001a114661dc4fd41c052d01ad53--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Paul Stansifer <paul.stansifer@gmail.com>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Tue, 1 Mar 2016 13:49:05 -0600

 That sounds like a leak. I think that's probably not what we want in
 the long term.
 
 Lets see what Matthew's investigation turns up? (And, thanks Matthew!)
 And then go from there?
 
 Robby
 
 
 On Tue, Mar 1, 2016 at 1:21 PM, Paul Stansifer <paul.stansifer@gmail.com> wrote:
 > Not necessarily. One option is just to store all the generated symbols in a
 > list somewhere so that their notion of equality doesn't expire. Really, as
 > long as I can find *something* there are infinitely many of that won't
 > appear in Redex terms, I can use that for my canonical names.
 >
 > Shoot; it never occurred to me, but I *can't* use symbols: the way things
 > currently work, Redex terms with free names that are symbolic numbers will
 > break alpha-equivalence.
 >
 > I think I have a plan, and it should be able to use `equal-hash-code` as it
 > exists: I'm going to generate a fresh symbol g (and keep it in memory
 > permanently), and canonicalize variables to `(,g ,serial-number). There's no
 > need for the canonical form to be user-consumable in any way.
 >
 > I should be able to fix both problems with one commit!
 >
 > Paul
 >
 >
 > On Tue, Mar 1, 2016 at 12:26 PM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >>
 >> I think this means that α-equal-hash-code cannot re-use
 >> equal-hash-code (altho α-equal? could be I suppose) but would have to
 >> compute its own hash explicitly. No?
 >>
 >> Robby
 >>
 >> On Tue, Mar 1, 2016 at 11:07 AM, Paul Stansifer
 >> <paul.stansifer@gmail.com> wrote:
 >> > Both `α-equal-hash-code` and `α-equal?` internally use a `canonicalize`
 >> > function to generate a canonical version of their arguments, which then
 >> > gets
 >> > passed to `equal-hash-code` or `equal?` respectively, and then gets
 >> > thrown
 >> > away. It could be cached, and maybe even should be (after the Redex
 >> > representation change), but I think it's a big trap for the lifetime of
 >> > the
 >> > canonicalized value to matter, so I want to pick something stable to
 >> > canonicalize to.
 >> >
 >> > Paul
 >> >
 >> > On Tue, Mar 1, 2016 at 11:56 AM, Robby Findler
 >> > <robby@eecs.northwestern.edu>
 >> > wrote:
 >> >>
 >> >> Paul, can you say why you are relying on the equal? Relationship for
 >> >> gc'd
 >> >> values?
 >> >>
 >> >> Robby
 >> >>
 >> >>
 >> >> On Tuesday, March 1, 2016, Paul Stansifer <paul.stansifer@gmail.com>
 >> >> wrote:
 >> >>>
 >> >>> Ah, that makes sense.
 >> >>>
 >> >>> The behavior seems to go away for prefab structs, and there's no
 >> >>> reason I
 >> >>> can't use them for my code instead of symbols. But is that a guarantee
 >> >>> or a
 >> >>> lucky guess? Nothing in the documentation convinces me I can rely on
 >> >>> it.
 >> >>>
 >> >>> This might (or might not) trip up future users, but I'm fine. I kind
 >> >>> of
 >> >>> want to suggest adding "that exist in memory at the same time" to the
 >> >>> documentation for `equal-hash-code`, but even though I looked at the
 >> >>> documentation before filing this bug, I'm not 100% sure that I would
 >> >>> have
 >> >>> even noticed, so the documentation bloat is probably not worth it.
 >> >>>
 >> >>> Thanks,
 >> >>> Paul
 >> >>>
 >> >>> On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <mflatt@cs.utah.edu>
 >> >>> wrote:
 >> >>>>
 >> >>>> The issue is that the symbol produced by the first `(string->symbol
 >> >>>> "1")` doesn't exist by time a value is produced by third
 >> >>>> `(string->symbol "1")`. Since the two values are never reachable at
 >> >>>> the
 >> >>>> same time, they'll never be both passed to `equal?`. (Apparently, a
 >> >>>> GC
 >> >>>> happened between the second and third interaction.)
 >> >>>>
 >> >>>> I concede that other interpretations of "`equal?` values" are
 >> >>>> possible,
 >> >>>> but that's the currently implemented interpretation. Do you need a
 >> >>>> different interpretation to be implemented?
 >> >>>>
 >> >>>> At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com wrote:
 >> >>>> > A new problem report is waiting at
 >> >>>> >   http://bugs.racket-lang.org/query/?cmd=view&pr=15262
 >> >>>> >
 >> >>>> > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 >> >>>> >
 >> >>>> > *** Description:
 >> >>>> > It seems to happen when the inputs are S-expressions that contain
 >> >>>> > symbols
 >> >>>> > whose names are made entirely of digits.
 >> >>>> >
 >> >>>> > *** How to repeat:
 >> >>>> > This seems to only work in DrRacket's REPL (and only erratically),
 >> >>>> > but
 >> >>>> > here's
 >> >>>> > a transcript:
 >> >>>> >
 >> >>>> > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 >> >>>> > Language: racket; memory limit: 1024 MB.
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1318898
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1318898
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1319152
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1319152
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1319403
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1319403
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1319680
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1319813
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1319944
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1319944
 >> >>>> > > (equal-hash-code (string->symbol "1"))
 >> >>>> > 1320190
 >> >>>> > >
 >> >>>> >
 >> >>>> >
 >> >>>> > Directly writing the symbol down makes the problem disappear, it
 >> >>>> > seems:
 >> >>>> >
 >> >>>> > > (equal-hash-code '|1|)
 >> >>>> > 1327984
 >> >>>> > > (equal-hash-code '|1|)
 >> >>>> > 1327984
 >> >>>> > > (equal-hash-code '|1|)
 >> >>>> > 1327984
 >> >>>> > > (equal-hash-code '|1|)
 >> >>>> > 1327984
 >> >>>> > > (equal-hash-code '|1|)
 >> >>>> > 1327984
 >> >>>> > > (equal-hash-code '|1|)
 >> >>>> > 1327984
 >> >>>> > > (equal-hash-code '|1|)
 >> >>>> > 1327984
 >> >>>> > > (equal-hash-code '|1|)
 >> >>>> > 1327984
 >> >>>> >
 >> >>>> > *** Environment:
 >> >>>> > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17
 >> >>>> > 22:52:10 UTC
 >> >>>> > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >> >>>> > (get-display-depth) = 32
 >> >>>> > Human Language: english
 >> >>>> > (current-memory-use) 761594160
 >> >>>> > raco pkg (show):
 >> >>>> > Installation-wide:
 >> >>>> >  Package                 Checksum     Source
 >> >>>> >  2d                      4d8a7c27...  catalog 2d
 >> >>>> > git://github.com/racket/2d?path=2d
 >> >>>> >  main-distribution       1a0cd523...  catalog main-distribution
 >> >>>> > git://github.com/racket/main-distribution
 >> >>>> >  main-distribution-test  046a9380...  catalog
 >> >>>> > main-distribution-test
 >> >>>> > git://github.com/racket/main-distribution-test
 >> >>>> >  racket-lib                           static-link
 >> >>>> > /home/paul/src/racket/pkgs/racket-lib
 >> >>>> >  redex                   b3732832...  catalog redex
 >> >>>> > git://github.com/racket/redex/?path=redex
 >> >>>> >  [242 auto-installed packages not shown]
 >> >>>> > User-specific for installation "development":
 >> >>>> >  [none]
 >> >>>> >
 >> >>>> >
 >> >>>> >
 >> >>>> > Collections:
 >> >>>> > ("/home/paul/.racket/development/collects"
 >> >>>> >  (non-existent-path))
 >> >>>> > ("/home/paul/src/racket/racket/collects"
 >> >>>> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >> >>>> > "info"
 >> >>>> > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >> >>>> > "racket" "raco"
 >> >>>> > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version"
 >> >>>> > "xml"))
 >> >>>> >
 >> >>>> > Recent Internal Errors:
 >> >>>> > Computer Language: (("Determine language from source") (#(#t print
 >> >>>> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 >> >>>> > ((test)
 >> >>>> > (main)) #t))
 >> >>>
 >> >>>
 >> >
 >
 >
 
From: Paul Stansifer <paul.stansifer@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Tue, 1 Mar 2016 14:53:09 -0500

 --001a113d391c5c8d39052d021d14
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 There's only one gensymmed variable, total (also, the storing a list of
 generated names at the top of the email was written before I realized there
 was a better way). It's just there so that we can tell what is supposed to
 be a variable reference, and what was originally a number (slash, a
 `(something ,number)).
 
 Paul
 
 On Tuesday, March 1, 2016, Robby Findler <robby@eecs.northwestern.edu>
 wrote:
 
 > That sounds like a leak. I think that's probably not what we want in
 > the long term.
 >
 > Lets see what Matthew's investigation turns up? (And, thanks Matthew!)
 > And then go from there?
 >
 > Robby
 >
 >
 > On Tue, Mar 1, 2016 at 1:21 PM, Paul Stansifer <paul.stansifer@gmail.com
 > <javascript:;>> wrote:
 > > Not necessarily. One option is just to store all the generated symbols
 > in a
 > > list somewhere so that their notion of equality doesn't expire. Really,
 > as
 > > long as I can find *something* there are infinitely many of that won't
 > > appear in Redex terms, I can use that for my canonical names.
 > >
 > > Shoot; it never occurred to me, but I *can't* use symbols: the way thin=
 gs
 > > currently work, Redex terms with free names that are symbolic numbers
 > will
 > > break alpha-equivalence.
 > >
 > > I think I have a plan, and it should be able to use `equal-hash-code` a=
 s
 > it
 > > exists: I'm going to generate a fresh symbol g (and keep it in memory
 > > permanently), and canonicalize variables to `(,g ,serial-number).
 > There's no
 > > need for the canonical form to be user-consumable in any way.
 > >
 > > I should be able to fix both problems with one commit!
 > >
 > > Paul
 > >
 > >
 > > On Tue, Mar 1, 2016 at 12:26 PM, Robby Findler <
 > robby@eecs.northwestern.edu <javascript:;>>
 > > wrote:
 > >>
 > >> I think this means that =CE=B1-equal-hash-code cannot re-use
 > >> equal-hash-code (altho =CE=B1-equal? could be I suppose) but would hav=
 e to
 > >> compute its own hash explicitly. No?
 > >>
 > >> Robby
 > >>
 > >> On Tue, Mar 1, 2016 at 11:07 AM, Paul Stansifer
 > >> <paul.stansifer@gmail.com <javascript:;>> wrote:
 > >> > Both `=CE=B1-equal-hash-code` and `=CE=B1-equal?` internally use a
 > `canonicalize`
 > >> > function to generate a canonical version of their arguments, which
 > then
 > >> > gets
 > >> > passed to `equal-hash-code` or `equal?` respectively, and then gets
 > >> > thrown
 > >> > away. It could be cached, and maybe even should be (after the Redex
 > >> > representation change), but I think it's a big trap for the lifetime
 > of
 > >> > the
 > >> > canonicalized value to matter, so I want to pick something stable to
 > >> > canonicalize to.
 > >> >
 > >> > Paul
 > >> >
 > >> > On Tue, Mar 1, 2016 at 11:56 AM, Robby Findler
 > >> > <robby@eecs.northwestern.edu <javascript:;>>
 > >> > wrote:
 > >> >>
 > >> >> Paul, can you say why you are relying on the equal? Relationship fo=
 r
 > >> >> gc'd
 > >> >> values?
 > >> >>
 > >> >> Robby
 > >> >>
 > >> >>
 > >> >> On Tuesday, March 1, 2016, Paul Stansifer <paul.stansifer@gmail.com
 > <javascript:;>>
 > >> >> wrote:
 > >> >>>
 > >> >>> Ah, that makes sense.
 > >> >>>
 > >> >>> The behavior seems to go away for prefab structs, and there's no
 > >> >>> reason I
 > >> >>> can't use them for my code instead of symbols. But is that a
 > guarantee
 > >> >>> or a
 > >> >>> lucky guess? Nothing in the documentation convinces me I can rely =
 on
 > >> >>> it.
 > >> >>>
 > >> >>> This might (or might not) trip up future users, but I'm fine. I ki=
 nd
 > >> >>> of
 > >> >>> want to suggest adding "that exist in memory at the same time" to
 > the
 > >> >>> documentation for `equal-hash-code`, but even though I looked at t=
 he
 > >> >>> documentation before filing this bug, I'm not 100% sure that I wou=
 ld
 > >> >>> have
 > >> >>> even noticed, so the documentation bloat is probably not worth it.
 > >> >>>
 > >> >>> Thanks,
 > >> >>> Paul
 > >> >>>
 > >> >>> On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <mflatt@cs.utah.edu
 > <javascript:;>>
 > >> >>> wrote:
 > >> >>>>
 > >> >>>> The issue is that the symbol produced by the first `(string->symb=
 ol
 > >> >>>> "1")` doesn't exist by time a value is produced by third
 > >> >>>> `(string->symbol "1")`. Since the two values are never reachable =
 at
 > >> >>>> the
 > >> >>>> same time, they'll never be both passed to `equal?`. (Apparently,=
  a
 > >> >>>> GC
 > >> >>>> happened between the second and third interaction.)
 > >> >>>>
 > >> >>>> I concede that other interpretations of "`equal?` values" are
 > >> >>>> possible,
 > >> >>>> but that's the currently implemented interpretation. Do you need =
 a
 > >> >>>> different interpretation to be implemented?
 > >> >>>>
 > >> >>>> At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com
 > <javascript:;> wrote:
 > >> >>>> > A new problem report is waiting at
 > >> >>>> >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D15262
 > >> >>>> >
 > >> >>>> > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f=
 )
 > >> >>>> >
 > >> >>>> > *** Description:
 > >> >>>> > It seems to happen when the inputs are S-expressions that conta=
 in
 > >> >>>> > symbols
 > >> >>>> > whose names are made entirely of digits.
 > >> >>>> >
 > >> >>>> > *** How to repeat:
 > >> >>>> > This seems to only work in DrRacket's REPL (and only
 > erratically),
 > >> >>>> > but
 > >> >>>> > here's
 > >> >>>> > a transcript:
 > >> >>>> >
 > >> >>>> > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 > >> >>>> > Language: racket; memory limit: 1024 MB.
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1318898
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1318898
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1319152
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1319152
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1319403
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1319403
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1319680
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1319813
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1319944
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1319944
 > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > >> >>>> > 1320190
 > >> >>>> > >
 > >> >>>> >
 > >> >>>> >
 > >> >>>> > Directly writing the symbol down makes the problem disappear, i=
 t
 > >> >>>> > seems:
 > >> >>>> >
 > >> >>>> > > (equal-hash-code '|1|)
 > >> >>>> > 1327984
 > >> >>>> > > (equal-hash-code '|1|)
 > >> >>>> > 1327984
 > >> >>>> > > (equal-hash-code '|1|)
 > >> >>>> > 1327984
 > >> >>>> > > (equal-hash-code '|1|)
 > >> >>>> > 1327984
 > >> >>>> > > (equal-hash-code '|1|)
 > >> >>>> > 1327984
 > >> >>>> > > (equal-hash-code '|1|)
 > >> >>>> > 1327984
 > >> >>>> > > (equal-hash-code '|1|)
 > >> >>>> > 1327984
 > >> >>>> > > (equal-hash-code '|1|)
 > >> >>>> > 1327984
 > >> >>>> >
 > >> >>>> > *** Environment:
 > >> >>>> > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 1=
 7
 > >> >>>> > 22:52:10 UTC
 > >> >>>> > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > >> >>>> > (get-display-depth) =3D 32
 > >> >>>> > Human Language: english
 > >> >>>> > (current-memory-use) 761594160
 > >> >>>> > raco pkg (show):
 > >> >>>> > Installation-wide:
 > >> >>>> >  Package                 Checksum     Source
 > >> >>>> >  2d                      4d8a7c27...  catalog 2d
 > >> >>>> > git://github.com/racket/2d?path=3D2d
 > >> >>>> >  main-distribution       1a0cd523...  catalog main-distribution
 > >> >>>> > git://github.com/racket/main-distribution
 > >> >>>> >  main-distribution-test  046a9380...  catalog
 > >> >>>> > main-distribution-test
 > >> >>>> > git://github.com/racket/main-distribution-test
 > >> >>>> >  racket-lib                           static-link
 > >> >>>> > /home/paul/src/racket/pkgs/racket-lib
 > >> >>>> >  redex                   b3732832...  catalog redex
 > >> >>>> > git://github.com/racket/redex/?path=3Dredex
 > >> >>>> >  [242 auto-installed packages not shown]
 > >> >>>> > User-specific for installation "development":
 > >> >>>> >  [none]
 > >> >>>> >
 > >> >>>> >
 > >> >>>> >
 > >> >>>> > Collections:
 > >> >>>> > ("/home/paul/.racket/development/collects"
 > >> >>>> >  (non-existent-path))
 > >> >>>> > ("/home/paul/src/racket/racket/collects"
 > >> >>>> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi"
 > "file"
 > >> >>>> > "info"
 > >> >>>> > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 > >> >>>> > "racket" "raco"
 > >> >>>> > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version"
 > >> >>>> > "xml"))
 > >> >>>> >
 > >> >>>> > Recent Internal Errors:
 > >> >>>> > Computer Language: (("Determine language from source") (#(#t
 > print
 > >> >>>> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t
 > #t
 > >> >>>> > ((test)
 > >> >>>> > (main)) #t))
 > >> >>>
 > >> >>>
 > >> >
 > >
 > >
 >
 
 --001a113d391c5c8d39052d021d14
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 There&#39;s only one gensymmed variable, total (also, the storing a list of=
  generated names at the top of the email was written before I realized ther=
 e was a better way). It&#39;s just there so that we can tell what is suppos=
 ed to be a variable reference, and what was originally a number (slash, a `=
 (something ,number)).=C2=A0<div><br></div><div>Paul<br><br>On Tuesday, Marc=
 h 1, 2016, Robby Findler &lt;<a href=3D"mailto:robby@eecs.northwestern.edu"=
 >robby@eecs.northwestern.edu</a>&gt; wrote:<br><blockquote class=3D"gmail_q=
 uote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1e=
 x">That sounds like a leak. I think that&#39;s probably not what we want in=
 <br>
 the long term.<br>
 <br>
 Lets see what Matthew&#39;s investigation turns up? (And, thanks Matthew!)<=
 br>
 And then go from there?<br>
 <br>
 Robby<br>
 <br>
 <br>
 On Tue, Mar 1, 2016 at 1:21 PM, Paul Stansifer &lt;<a href=3D"javascript:;"=
  onclick=3D"_e(event, &#39;cvml&#39;, &#39;paul.stansifer@gmail.com&#39;)">=
 paul.stansifer@gmail.com</a>&gt; wrote:<br>
 &gt; Not necessarily. One option is just to store all the generated symbols=
  in a<br>
 &gt; list somewhere so that their notion of equality doesn&#39;t expire. Re=
 ally, as<br>
 &gt; long as I can find *something* there are infinitely many of that won&#=
 39;t<br>
 &gt; appear in Redex terms, I can use that for my canonical names.<br>
 &gt;<br>
 &gt; Shoot; it never occurred to me, but I *can&#39;t* use symbols: the way=
  things<br>
 &gt; currently work, Redex terms with free names that are symbolic numbers =
 will<br>
 &gt; break alpha-equivalence.<br>
 &gt;<br>
 &gt; I think I have a plan, and it should be able to use `equal-hash-code` =
 as it<br>
 &gt; exists: I&#39;m going to generate a fresh symbol g (and keep it in mem=
 ory<br>
 &gt; permanently), and canonicalize variables to `(,g ,serial-number). Ther=
 e&#39;s no<br>
 &gt; need for the canonical form to be user-consumable in any way.<br>
 &gt;<br>
 &gt; I should be able to fix both problems with one commit!<br>
 &gt;<br>
 &gt; Paul<br>
 &gt;<br>
 &gt;<br>
 &gt; On Tue, Mar 1, 2016 at 12:26 PM, Robby Findler &lt;<a href=3D"javascri=
 pt:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;robby@eecs.northwestern.edu=
 &#39;)">robby@eecs.northwestern.edu</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; I think this means that =CE=B1-equal-hash-code cannot re-use<br>
 &gt;&gt; equal-hash-code (altho =CE=B1-equal? could be I suppose) but would=
  have to<br>
 &gt;&gt; compute its own hash explicitly. No?<br>
 &gt;&gt;<br>
 &gt;&gt; Robby<br>
 &gt;&gt;<br>
 &gt;&gt; On Tue, Mar 1, 2016 at 11:07 AM, Paul Stansifer<br>
 &gt;&gt; &lt;<a href=3D"javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, =
 &#39;paul.stansifer@gmail.com&#39;)">paul.stansifer@gmail.com</a>&gt; wrote=
 :<br>
 &gt;&gt; &gt; Both `=CE=B1-equal-hash-code` and `=CE=B1-equal?` internally =
 use a `canonicalize`<br>
 &gt;&gt; &gt; function to generate a canonical version of their arguments, =
 which then<br>
 &gt;&gt; &gt; gets<br>
 &gt;&gt; &gt; passed to `equal-hash-code` or `equal?` respectively, and the=
 n gets<br>
 &gt;&gt; &gt; thrown<br>
 &gt;&gt; &gt; away. It could be cached, and maybe even should be (after the=
  Redex<br>
 &gt;&gt; &gt; representation change), but I think it&#39;s a big trap for t=
 he lifetime of<br>
 &gt;&gt; &gt; the<br>
 &gt;&gt; &gt; canonicalized value to matter, so I want to pick something st=
 able to<br>
 &gt;&gt; &gt; canonicalize to.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Paul<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Tue, Mar 1, 2016 at 11:56 AM, Robby Findler<br>
 &gt;&gt; &gt; &lt;<a href=3D"javascript:;" onclick=3D"_e(event, &#39;cvml&#=
 39;, &#39;robby@eecs.northwestern.edu&#39;)">robby@eecs.northwestern.edu</a=
 >&gt;<br>
 &gt;&gt; &gt; wrote:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Paul, can you say why you are relying on the equal? Relat=
 ionship for<br>
 &gt;&gt; &gt;&gt; gc&#39;d<br>
 &gt;&gt; &gt;&gt; values?<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Robby<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; On Tuesday, March 1, 2016, Paul Stansifer &lt;<a href=3D"=
 javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;paul.stansifer@gmai=
 l.com&#39;)">paul.stansifer@gmail.com</a>&gt;<br>
 &gt;&gt; &gt;&gt; wrote:<br>
 &gt;&gt; &gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt; Ah, that makes sense.<br>
 &gt;&gt; &gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt; The behavior seems to go away for prefab structs, and=
  there&#39;s no<br>
 &gt;&gt; &gt;&gt;&gt; reason I<br>
 &gt;&gt; &gt;&gt;&gt; can&#39;t use them for my code instead of symbols. Bu=
 t is that a guarantee<br>
 &gt;&gt; &gt;&gt;&gt; or a<br>
 &gt;&gt; &gt;&gt;&gt; lucky guess? Nothing in the documentation convinces m=
 e I can rely on<br>
 &gt;&gt; &gt;&gt;&gt; it.<br>
 &gt;&gt; &gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt; This might (or might not) trip up future users, but I=
 &#39;m fine. I kind<br>
 &gt;&gt; &gt;&gt;&gt; of<br>
 &gt;&gt; &gt;&gt;&gt; want to suggest adding &quot;that exist in memory at =
 the same time&quot; to the<br>
 &gt;&gt; &gt;&gt;&gt; documentation for `equal-hash-code`, but even though =
 I looked at the<br>
 &gt;&gt; &gt;&gt;&gt; documentation before filing this bug, I&#39;m not 100=
 % sure that I would<br>
 &gt;&gt; &gt;&gt;&gt; have<br>
 &gt;&gt; &gt;&gt;&gt; even noticed, so the documentation bloat is probably =
 not worth it.<br>
 &gt;&gt; &gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt; Thanks,<br>
 &gt;&gt; &gt;&gt;&gt; Paul<br>
 &gt;&gt; &gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt; On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt &lt;<a=
  href=3D"javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;mflatt@cs.=
 utah.edu&#39;)">mflatt@cs.utah.edu</a>&gt;<br>
 &gt;&gt; &gt;&gt;&gt; wrote:<br>
 &gt;&gt; &gt;&gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; The issue is that the symbol produced by the firs=
 t `(string-&gt;symbol<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &quot;1&quot;)` doesn&#39;t exist by time a value=
  is produced by third<br>
 &gt;&gt; &gt;&gt;&gt;&gt; `(string-&gt;symbol &quot;1&quot;)`. Since the tw=
 o values are never reachable at<br>
 &gt;&gt; &gt;&gt;&gt;&gt; the<br>
 &gt;&gt; &gt;&gt;&gt;&gt; same time, they&#39;ll never be both passed to `e=
 qual?`. (Apparently, a<br>
 &gt;&gt; &gt;&gt;&gt;&gt; GC<br>
 &gt;&gt; &gt;&gt;&gt;&gt; happened between the second and third interaction=
 .)<br>
 &gt;&gt; &gt;&gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; I concede that other interpretations of &quot;`eq=
 ual?` values&quot; are<br>
 &gt;&gt; &gt;&gt;&gt;&gt; possible,<br>
 &gt;&gt; &gt;&gt;&gt;&gt; but that&#39;s the currently implemented interpre=
 tation. Do you need a<br>
 &gt;&gt; &gt;&gt;&gt;&gt; different interpretation to be implemented?<br>
 &gt;&gt; &gt;&gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; At Tue, 1 Mar 2016 10:40:02 -0500, <a href=3D"jav=
 ascript:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;paul.stansifer@gmail.c=
 om&#39;)">paul.stansifer@gmail.com</a> wrote:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; A new problem report is waiting at<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 =C2=A0<a href=3D"http://bugs.racket-la=
 ng.org/query/?cmd=3Dview&amp;pr=3D15262" target=3D"_blank">http://bugs.rack=
 et-lang.org/query/?cmd=3Dview&amp;pr=3D15262</a><br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Reported by Paul Stansifer for release: 6.4.=
 0.1--2016-01-13(-/f)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; *** Description:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; It seems to happen when the inputs are S-exp=
 ressions that contain<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; symbols<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; whose names are made entirely of digits.<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; *** How to repeat:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; This seems to only work in DrRacket&#39;s RE=
 PL (and only erratically),<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; but<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; here&#39;s<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; a transcript:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Welcome to DrRacket, version 6.4.0.1--2016-0=
 1-13(-/f) [3m].<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Language: racket; memory limit: 1024 MB.<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1318898<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1318898<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1319152<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1319152<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1319403<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1319403<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1319680<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1319813<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1319944<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1319944<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code (string-&gt;symbol &qu=
 ot;1&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1320190<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Directly writing the symbol down makes the p=
 roblem disappear, it<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; seems:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &gt; (equal-hash-code &#39;|1|)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 1327984<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; *** Environment:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; unix &quot;Linux saffron 3.13.0-74-generic #=
 118-Ubuntu SMP Thu Dec 17<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 22:52:10 UTC<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; 2015 x86_64 x86_64 x86_64 GNU/Linux&quot; (x=
 86_64-linux/3m)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; (get-display-depth) =3D 32<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Human Language: english<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; (current-memory-use) 761594160<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; raco pkg (show):<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Installation-wide:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 Package=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Checksum=C2=A0 =C2=A0 =C2=A0Source<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 2d=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 4d8a7c27...=C2=A0 catalog 2d<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; git://<a href=3D"http://github.com/racket/2d=
 ?path=3D2d" target=3D"_blank">github.com/racket/2d?path=3D2d</a><br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 main-distribution=C2=A0 =C2=A0 =C2=A0 =
 =C2=A01a0cd523...=C2=A0 catalog main-distribution<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; git://<a href=3D"http://github.com/racket/ma=
 in-distribution" target=3D"_blank">github.com/racket/main-distribution</a><=
 br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 main-distribution-test=C2=A0 046a9380.=
 ..=C2=A0 catalog<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; main-distribution-test<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; git://<a href=3D"http://github.com/racket/ma=
 in-distribution-test" target=3D"_blank">github.com/racket/main-distribution=
 -test</a><br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 racket-lib=C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0static=
 -link<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; /home/paul/src/racket/pkgs/racket-lib<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 redex=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0b3732832...=C2=A0 catalog redex<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; git://<a href=3D"http://github.com/racket/re=
 dex/?path=3Dredex" target=3D"_blank">github.com/racket/redex/?path=3Dredex<=
 /a><br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 [242 auto-installed packages not shown=
 ]<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; User-specific for installation &quot;develop=
 ment&quot;:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 [none]<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Collections:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; (&quot;/home/paul/.racket/development/collec=
 ts&quot;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 (non-existent-path))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; (&quot;/home/paul/src/racket/racket/collects=
 &quot;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;=C2=A0 (&quot;.gitignore&quot; &quot;acks&quo=
 t; &quot;compiler&quot; &quot;data&quot; &quot;db&quot; &quot;dynext&quot; =
 &quot;ffi&quot; &quot;file&quot;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &quot;info&quot;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &quot;info-domain&quot; &quot;json&quot; &qu=
 ot;launcher&quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&quot; &quot=
 ;planet&quot;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &quot;racket&quot; &quot;raco&quot;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &quot;reader&quot; &quot;realm&quot; &quot;s=
 -exp&quot; &quot;setup&quot; &quot;syntax&quot; &quot;unstable&quot; &quot;=
 version&quot;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; &quot;xml&quot;))<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Recent Internal Errors:<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; Computer Language: ((&quot;Determine languag=
 e from source&quot;) (#(#t print<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; mixed-fraction-e #f #t debug) (default) #() =
 &quot;#lang racket\n&quot; #t #t<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; ((test)<br>
 &gt;&gt; &gt;&gt;&gt;&gt; &gt; (main)) #t))<br>
 &gt;&gt; &gt;&gt;&gt;<br>
 &gt;&gt; &gt;&gt;&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 </blockquote></div>
 
 --001a113d391c5c8d39052d021d14--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Paul Stansifer <paul.stansifer@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15262: `equal-hash-code` returns different
 values for equal inputs.
Date: Wed, 2 Mar 2016 11:51:11 -0700

 In case it's useful, I've made `equal-hash-code` produce the same
 answer always for an interned symbol that's made of a given sequence of
 characters. The par that I wasn't sure about turned out to be a
 non-issue; it turns out that CGC was already providing that guarantee.
 
 At Tue, 1 Mar 2016 14:53:09 -0500, Paul Stansifer wrote:
 > There's only one gensymmed variable, total (also, the storing a list of
 > generated names at the top of the email was written before I realized there
 > was a better way). It's just there so that we can tell what is supposed to
 > be a variable reference, and what was originally a number (slash, a
 > `(something ,number)).
 > 
 > Paul
 > 
 > On Tuesday, March 1, 2016, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 > 
 > > That sounds like a leak. I think that's probably not what we want in
 > > the long term.
 > >
 > > Lets see what Matthew's investigation turns up? (And, thanks Matthew!)
 > > And then go from there?
 > >
 > > Robby
 > >
 > >
 > > On Tue, Mar 1, 2016 at 1:21 PM, Paul Stansifer <paul.stansifer@gmail.com
 > > <javascript:;>> wrote:
 > > > Not necessarily. One option is just to store all the generated symbols
 > > in a
 > > > list somewhere so that their notion of equality doesn't expire. Really,
 > > as
 > > > long as I can find *something* there are infinitely many of that won't
 > > > appear in Redex terms, I can use that for my canonical names.
 > > >
 > > > Shoot; it never occurred to me, but I *can't* use symbols: the way things
 > > > currently work, Redex terms with free names that are symbolic numbers
 > > will
 > > > break alpha-equivalence.
 > > >
 > > > I think I have a plan, and it should be able to use `equal-hash-code` as
 > > it
 > > > exists: I'm going to generate a fresh symbol g (and keep it in memory
 > > > permanently), and canonicalize variables to `(,g ,serial-number).
 > > There's no
 > > > need for the canonical form to be user-consumable in any way.
 > > >
 > > > I should be able to fix both problems with one commit!
 > > >
 > > > Paul
 > > >
 > > >
 > > > On Tue, Mar 1, 2016 at 12:26 PM, Robby Findler <
 > > robby@eecs.northwestern.edu <javascript:;>>
 > > > wrote:
 > > >>
 > > >> I think this means that α-equal-hash-code cannot re-use
 > > >> equal-hash-code (altho α-equal? could be I suppose) but would have to
 > > >> compute its own hash explicitly. No?
 > > >>
 > > >> Robby
 > > >>
 > > >> On Tue, Mar 1, 2016 at 11:07 AM, Paul Stansifer
 > > >> <paul.stansifer@gmail.com <javascript:;>> wrote:
 > > >> > Both `α-equal-hash-code` and `α-equal?` internally use a
 > > `canonicalize`
 > > >> > function to generate a canonical version of their arguments, which
 > > then
 > > >> > gets
 > > >> > passed to `equal-hash-code` or `equal?` respectively, and then gets
 > > >> > thrown
 > > >> > away. It could be cached, and maybe even should be (after the Redex
 > > >> > representation change), but I think it's a big trap for the lifetime
 > > of
 > > >> > the
 > > >> > canonicalized value to matter, so I want to pick something stable to
 > > >> > canonicalize to.
 > > >> >
 > > >> > Paul
 > > >> >
 > > >> > On Tue, Mar 1, 2016 at 11:56 AM, Robby Findler
 > > >> > <robby@eecs.northwestern.edu <javascript:;>>
 > > >> > wrote:
 > > >> >>
 > > >> >> Paul, can you say why you are relying on the equal? Relationship for
 > > >> >> gc'd
 > > >> >> values?
 > > >> >>
 > > >> >> Robby
 > > >> >>
 > > >> >>
 > > >> >> On Tuesday, March 1, 2016, Paul Stansifer <paul.stansifer@gmail.com
 > > <javascript:;>>
 > > >> >> wrote:
 > > >> >>>
 > > >> >>> Ah, that makes sense.
 > > >> >>>
 > > >> >>> The behavior seems to go away for prefab structs, and there's no
 > > >> >>> reason I
 > > >> >>> can't use them for my code instead of symbols. But is that a
 > > guarantee
 > > >> >>> or a
 > > >> >>> lucky guess? Nothing in the documentation convinces me I can rely on
 > > >> >>> it.
 > > >> >>>
 > > >> >>> This might (or might not) trip up future users, but I'm fine. I kind
 > > >> >>> of
 > > >> >>> want to suggest adding "that exist in memory at the same time" to
 > > the
 > > >> >>> documentation for `equal-hash-code`, but even though I looked at the
 > > >> >>> documentation before filing this bug, I'm not 100% sure that I would
 > > >> >>> have
 > > >> >>> even noticed, so the documentation bloat is probably not worth it.
 > > >> >>>
 > > >> >>> Thanks,
 > > >> >>> Paul
 > > >> >>>
 > > >> >>> On Tue, Mar 1, 2016 at 10:56 AM, Matthew Flatt <mflatt@cs.utah.edu
 > > <javascript:;>>
 > > >> >>> wrote:
 > > >> >>>>
 > > >> >>>> The issue is that the symbol produced by the first `(string->symbol
 > > >> >>>> "1")` doesn't exist by time a value is produced by third
 > > >> >>>> `(string->symbol "1")`. Since the two values are never reachable at
 > > >> >>>> the
 > > >> >>>> same time, they'll never be both passed to `equal?`. (Apparently, a
 > > >> >>>> GC
 > > >> >>>> happened between the second and third interaction.)
 > > >> >>>>
 > > >> >>>> I concede that other interpretations of "`equal?` values" are
 > > >> >>>> possible,
 > > >> >>>> but that's the currently implemented interpretation. Do you need a
 > > >> >>>> different interpretation to be implemented?
 > > >> >>>>
 > > >> >>>> At Tue, 1 Mar 2016 10:40:02 -0500, paul.stansifer@gmail.com
 > > <javascript:;> wrote:
 > > >> >>>> > A new problem report is waiting at
 > > >> >>>> >   http://bugs.racket-lang.org/query/?cmd=view&pr=15262
 > > >> >>>> >
 > > >> >>>> > Reported by Paul Stansifer for release: 6.4.0.1--2016-01-13(-/f)
 > > >> >>>> >
 > > >> >>>> > *** Description:
 > > >> >>>> > It seems to happen when the inputs are S-expressions that contain
 > > >> >>>> > symbols
 > > >> >>>> > whose names are made entirely of digits.
 > > >> >>>> >
 > > >> >>>> > *** How to repeat:
 > > >> >>>> > This seems to only work in DrRacket's REPL (and only
 > > erratically),
 > > >> >>>> > but
 > > >> >>>> > here's
 > > >> >>>> > a transcript:
 > > >> >>>> >
 > > >> >>>> > Welcome to DrRacket, version 6.4.0.1--2016-01-13(-/f) [3m].
 > > >> >>>> > Language: racket; memory limit: 1024 MB.
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1318898
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1318898
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1319152
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1319152
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1319403
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1319403
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1319680
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1319813
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1319944
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1319944
 > > >> >>>> > > (equal-hash-code (string->symbol "1"))
 > > >> >>>> > 1320190
 > > >> >>>> > >
 > > >> >>>> >
 > > >> >>>> >
 > > >> >>>> > Directly writing the symbol down makes the problem disappear, it
 > > >> >>>> > seems:
 > > >> >>>> >
 > > >> >>>> > > (equal-hash-code '|1|)
 > > >> >>>> > 1327984
 > > >> >>>> > > (equal-hash-code '|1|)
 > > >> >>>> > 1327984
 > > >> >>>> > > (equal-hash-code '|1|)
 > > >> >>>> > 1327984
 > > >> >>>> > > (equal-hash-code '|1|)
 > > >> >>>> > 1327984
 > > >> >>>> > > (equal-hash-code '|1|)
 > > >> >>>> > 1327984
 > > >> >>>> > > (equal-hash-code '|1|)
 > > >> >>>> > 1327984
 > > >> >>>> > > (equal-hash-code '|1|)
 > > >> >>>> > 1327984
 > > >> >>>> > > (equal-hash-code '|1|)
 > > >> >>>> > 1327984
 > > >> >>>> >
 > > >> >>>> > *** Environment:
 > > >> >>>> > unix "Linux saffron 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17
 > > >> >>>> > 22:52:10 UTC
 > > >> >>>> > 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > > >> >>>> > (get-display-depth) = 32
 > > >> >>>> > Human Language: english
 > > >> >>>> > (current-memory-use) 761594160
 > > >> >>>> > raco pkg (show):
 > > >> >>>> > Installation-wide:
 > > >> >>>> >  Package                 Checksum     Source
 > > >> >>>> >  2d                      4d8a7c27...  catalog 2d
 > > >> >>>> > git://github.com/racket/2d?path=2d
 > > >> >>>> >  main-distribution       1a0cd523...  catalog main-distribution
 > > >> >>>> > git://github.com/racket/main-distribution
 > > >> >>>> >  main-distribution-test  046a9380...  catalog
 > > >> >>>> > main-distribution-test
 > > >> >>>> > git://github.com/racket/main-distribution-test
 > > >> >>>> >  racket-lib                           static-link
 > > >> >>>> > /home/paul/src/racket/pkgs/racket-lib
 > > >> >>>> >  redex                   b3732832...  catalog redex
 > > >> >>>> > git://github.com/racket/redex/?path=redex
 > > >> >>>> >  [242 auto-installed packages not shown]
 > > >> >>>> > User-specific for installation "development":
 > > >> >>>> >  [none]
 > > >> >>>> >
 > > >> >>>> >
 > > >> >>>> >
 > > >> >>>> > Collections:
 > > >> >>>> > ("/home/paul/.racket/development/collects"
 > > >> >>>> >  (non-existent-path))
 > > >> >>>> > ("/home/paul/src/racket/racket/collects"
 > > >> >>>> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi"
 > > "file"
 > > >> >>>> > "info"
 > > >> >>>> > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 > > >> >>>> > "racket" "raco"
 > > >> >>>> > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version"
 > > >> >>>> > "xml"))
 > > >> >>>> >
 > > >> >>>> > Recent Internal Errors:
 > > >> >>>> > Computer Language: (("Determine language from source") (#(#t
 > > print
 > > >> >>>> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t
 > > #t
 > > >> >>>> > ((test)
 > > >> >>>> > (main)) #t))
 > > >> >>>
 > > >> >>>
 > > >> >
 > > >
 > > >
 > >
 
