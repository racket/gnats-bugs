From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Jun  2 02:27:09 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q526R5Gu014880
	for <bugs@bugs.plt-scheme.org>; Sat, 2 Jun 2012 02:27:05 -0400
Message-Id: <201206020627.q526R27N014873@champlain.ccs.neu.edu>
Date: Sat, 2 Jun 2012 02:27:02 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR does not support expressions that may be of multiple different number of values

>Number:         12818
>Category:       all
>Synopsis:       TR does not support expressions that may be of multiple different number of values
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Jun 02 02:28:01 -0400 2012
>Closed-Date:    Sun Jun 03 08:32:02 -0400 2012
>Last-Modified:  Mon Feb 18 23:14:21 -0500 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.10--2012-05-31(aa3971e4/d/split-boolean)
>Environment:
macosx "Darwin eric-dobsons-macbook.local 11.3.0 Darwin Kernel Version 11.3.0: Thu Jan 12 18:48:32 PST 2012; root:xnu-1699.24.23~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 474500336
Links: (links) = ("raco-git" "rudybot"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/eric/Library/Racket/5.3.0.10/collects"
 ("info-domain"))
("/Users/eric/proj/racket/plt/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "type!
 d" "typed-racket" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
The following should be able to type check.

(lambda (x) (if x (values x) (values)))

Instead it gives the error message:

Type Checker: Expected the same number of values from both branches of `if' expression, but got 1 and 0 in: (if x (values x) (values))

The use case is for a situation like 

(define-syntax (for/accum stx)                            
  (syntax-case stx ()                                     
   ((_ clauses bodies ...)                                
    #'(reverse                                            
        (for/fold/derived stx ((vals '())) clauses        
          (call-with-values                               
            (lambda () bodies ...)                        
            (lambda vs (append (reverse vs) vals))))))))  

This expression would be part of the body.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12818: TR does not support expressions that may
 be of multiple different number of values
Date: Sat, 2 Jun 2012 06:58:42 -0400

 On Sat, Jun 2, 2012 at 2:28 AM,  <eric.n.dobson@gmail.com> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12818
 >
 > Reported by Eric Dobson for release: 5.3.0.10--2012-05-31(aa3971e4/d/split-boolean)
 >
 > *** Description:
 > The following should be able to type check.
 >
 > (lambda (x) (if x (values x) (values)))
 >
 > Instead it gives the error message:
 >
 > Type Checker: Expected the same number of values from both branches of `if' expression, but got 1 and 0 in: (if x (values x) (values))
 
 This is something I intentionally don't want to support.  All of the
 existing uses of multiple numbers of values in Racket are, in my
 opinion, pretty ugly design (see `fold-files` for an example, which I
 extended a little to make it work better in TR).
 
 The big problem with supporting it is that (U (Values) (Values
 Integer)) is fundamentally ill-kinded, and so we would need another
 construct like `U` to handle values.
 
 > The use case is for a situation like
 >
 > (define-syntax (for/accum stx)
 >  (syntax-case stx ()
 >   ((_ clauses bodies ...)
 >    #'(reverse
 >        (for/fold/derived stx ((vals '())) clauses
 >          (call-with-values
 >            (lambda () bodies ...)
 >            (lambda vs (append (reverse vs) vals))))))))
 >
 > This expression would be part of the body.
 
 How problematic is it to use a list as the result of `bodies ...`?
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12818: TR does not support expressions that may be of multiple different number of values
Date: Sat, 2 Jun 2012 07:49:43 -0700

 I am trying lists, I'm still running into issues where the inferencer is not picking up something that I think is obvious.
 I was hoping that this would solve that issue, but I see the reasoning against it. I think this can be closed as won't-fix/working-as-intended.
 
 On Jun 2, 2012, at 3:58 AM, Sam Tobin-Hochstadt wrote:
 
 > On Sat, Jun 2, 2012 at 2:28 AM,  <eric.n.dobson@gmail.com> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12818
 >> 
 >> Reported by Eric Dobson for release: 5.3.0.10--2012-05-31(aa3971e4/d/split-boolean)
 >> 
 >> *** Description:
 >> The following should be able to type check.
 >> 
 >> (lambda (x) (if x (values x) (values)))
 >> 
 >> Instead it gives the error message:
 >> 
 >> Type Checker: Expected the same number of values from both branches of `if' expression, but got 1 and 0 in: (if x (values x) (values))
 > 
 > This is something I intentionally don't want to support.  All of the
 > existing uses of multiple numbers of values in Racket are, in my
 > opinion, pretty ugly design (see `fold-files` for an example, which I
 > extended a little to make it work better in TR).
 > 
 > The big problem with supporting it is that (U (Values) (Values
 > Integer)) is fundamentally ill-kinded, and so we would need another
 > construct like `U` to handle values.
 > 
 >> The use case is for a situation like
 >> 
 >> (define-syntax (for/accum stx)
 >>  (syntax-case stx ()
 >>   ((_ clauses bodies ...)
 >>    #'(reverse
 >>        (for/fold/derived stx ((vals '())) clauses
 >>          (call-with-values
 >>            (lambda () bodies ...)
 >>            (lambda vs (append (reverse vs) vals))))))))
 >> 
 >> This expression would be part of the body.
 > 
 > How problematic is it to use a list as the result of `bodies ...`?
 > -- 
 > sam th
 > samth@ccs.neu.edu
 
 

State changed from "open" to "closed" by samth at Sun, 03 Jun 2012 08:32:02 -0400
Reason>>> By design, see discussion.


Responsible changed from "nobody" to "samth" by eli at Mon, 18 Feb 2013 23:14:21 -0500
Reason>>> samth closed

