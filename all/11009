From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jun 30 19:27:40 2010
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o5UNRcgp010519
	for <bugs@bugs.plt-scheme.org>; Wed, 30 Jun 2010 19:27:38 -0400
Message-Id: <201006302327.o5UNRYsQ010512@champlain.ccs.neu.edu>
Date: Wed, 30 Jun 2010 19:27:34 -0400
From: samth@ccs.neu.edu
To: bugs@racket-lang.org
Subject: ill-formed compiled code error

>Number:         11009
>Category:       all
>Synopsis:       ill-formed compiled code error
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jun 30 19:28:01 -0400 2010
>Closed-Date:    Thu Jul 01 00:03:44 -0400 2010
>Last-Modified:  Thu Jul 01 00:03:44 -0400 2010
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.0.2--2010-06-30(f763404/g)
>Environment:
unix "Linux punge 2.6.32-22-generic #36-Ubuntu SMP Thu Jun 3 22:02:19 UTC 2010 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 155859748

Collections:
(("/home/samth/.racket/5.0.0.2/collects" non-existent-path) ("/home/samth/sw/plt/collects" "honu" "eopl" "tests" "typed" "test-engine" "errortrace" "sgl" "plot" "combinator-parser" "mzcom" "test-box-recovery" "version" ".gitignore" "defaults" "deinprogramm" "s-exp" "handin-client" "srpersist" "launcher" "scriblib" "browser" "unstable" "tool" "r5rs" "rico" "gui-debugger" "at-exp" "swindle" "scheme" "reader" "frtime" "meta" "racket" "file" "racklog" "slatex" "net" "wxme" "syntax" "scribblings" "parser-tools" "ffi" "hierlist" "handin-server" "2htdp" "framework" "openssl" "dynext" "datalog" "slideshow" "games" "raco" "xml" "texpict" "graphics" "mzscheme" "profile" "help" "web-server" "schelog" "rktunit" "trace" "make" "algol60" "mzlib" "rackunit" "icons" "plai" "sirmail" "lazy" "mrlib" "setup" "racunit" "string-constants" "syntax-color" "r6rs" "repos-time-stamp" "drscheme" "lang" "repo-time-stamp" "afm" "planet" "typed-scheme" "info-domain" "config" "guibuilder" "stepper" "mred"!
  "raclog" "embedded-gui" "preprocessor" "readline" "htdp" "compiler" "srfi" "waterworld" "macro-debugger" "html" "scribble" "mysterx" "redex" "drracket" "rnrs" "teachpack" "tex2page" "schemeunit"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang typed/racket\n" #t))
>Description:
The program below produces this error:

[samth@punge:~/sw/plt/collects/tests/racket/benchmarks/shootout (master) plt] raco make spectralnorm-lua.rkt
[samth@punge:~/sw/plt/collects/tests/racket/benchmarks/shootout (master) plt] racket spectralnorm-lua.rkt 1000
compiled/spectralnorm-lua_rkt.zo::23598: read (compiled): ill-formed code [../../../racket/gc2/../src/eval.c:11961]

#lang racket/base

;; The Computer Language Benchmarks Game
;; http://shootout.alioth.debian.org/

;; Translated from Mike Pall's Lua version.

(require racket/cmdline racket/trace racket/contract
	 racket/require (for-syntax racket/base)
	 (rename-in
          (filtered-in
           (lambda (name) (regexp-replace #rx"unsafe-" name ""))
           racket/unsafe/ops))
         (only-in racket/flonum make-flvector))

(define (A i j)
  (define ij (fx+ i j))
  (fl/ 1.0 (fl+ (fl* (fl* (fx->fl ij)
                          (fx->fl (fx+ ij 1)))
                     0.5) 
                (fx->fl (fx+ i 1)))))

;; uses x, overwrites y
(define (Av x y N)
  (for ([i (in-range N)])
    (flvector-set! y i
                   ;; this fold is more functional than the lua version
                   (for/fold ([a 0.0])
                       ([j (in-range N)])
                     (fl+ a (fl* (flvector-ref x j) (A i j)))))))


(define (Atv x y N)
  (for ([i (in-range N)])
    (flvector-set! y i
                   ;; this fold is more functional than the lua version
                   (for/fold ([a 0.0])
                       ([j (in-range N)])
                     (fl+ a (fl* (flvector-ref x j) (A j i)))))))

(define (AtAv x y t N)
  (Av x t N)
  (Atv t y N))

(define N (command-line #:args n (or (and (pair? n) (string->number (car n))) 5)))

(define u (make-flvector N 1.0))
(define v (make-flvector N))
(define t (make-flvector N))
(define (flvector->list f)
  (for/list ([i (in-range (flvector-length f))]) (flvector-ref f i)))

(for ([i (in-range 10)])
  (AtAv u v t N)
  (AtAv v u t N))

(printf "~a\n" (real->decimal-string 
                (flsqrt 
                 (let loop ([vBv 0.0] [vv 0.0] [i 0])
                   (if (fx= i N)
                       (fl/ vBv vv)
                       (let ([ui (flvector-ref u i)] [vi (flvector-ref v i)])
                         (loop (fl+ vBv (fl* ui vi))
                               (fl+ vv (fl* vi vi))
                               (fx+ i 1))))))
                9))
>How-To-Repeat:

>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "mflatt" by mflatt@racket-lang.org at Thu, 01 Jul 2010 00:03:44 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/159daa43aa
State changed from "open" to "closed" by mflatt@racket-lang.org at Thu, 01 Jul 2010 00:03:44 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/159daa43aa
