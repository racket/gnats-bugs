From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Sep 21 17:14:13 2015
Received: from mail-ig0-f172.google.com (mail-ig0-f172.google.com [209.85.213.172])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t8LLE5Zi000317
	for <bugs@bugs.plt-scheme.org>; Mon, 21 Sep 2015 17:14:05 -0400
Message-Id: <201509212114.t8LLE3Tj000305@winooski.ccs.neu.edu>
Date: Mon, 21 Sep 2015 17:14:03 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: TR: type for even?

>Number:         15156
>Category:       all
>Synopsis:       TR: type for even?
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Sep 21 17:16:01 -0400 2015
>Last-Modified:  Fri Sep 25 08:36:01 -0400 2015
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.2.1
>Environment:
windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 285129972
raco pkg (show):
Installation-wide:
 Package            Checksum     Source
 main-distribution  11d4bacb...  catalog main-distribution
 racket-lib         dad43491...  catalog racket-lib
 [191 auto-installed packages not shown]
User-specific for installation "6.2.1":
 [none]



Collections:
("C:\\Users\\eli\\AppData\\Roaming\\Racket\\6.2.1\\collects"
 ("info-domain" "pl"))
("C:\\Program Files (x86)\\Racket\\collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t test-coverage) (default) #() "#lang racket\n" #f #f ((test) (main)) #t))
>Description:
TR insists on having an Integer argument to `even?`, but
R accepts integers like 3.0 too.

(As a result, a simple function like

    (define (foo n) (if (even? n) (/ n 2) (+ 1 (* n 3))))

is hard to do in class: I have to choose whether to talk
about quotient, or about exact vs inexact.)
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: eli@barzilay.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/15156: TR: type for even?
Date: Tue, 22 Sep 2015 15:12:01 +0000

 --001a1143384010d5800520576c1c
 Content-Type: text/plain; charset=UTF-8
 
 Unfortunately, I don't think this is fixable without a much more
 sophisticated type system (such as the one Andrew Kent is presenting at
 RacketCon).
 
 Even if we had a type that included inexact integers, there are basically
 no operations closed on that type, so your function would work on exact
 integers and constant inexact ones, which doesn't seem much more useful.
 
 Also, why not just give the function the type `(: foo : Integer ->
 Exact-Rational)`?
 
 Sam
 
 On Mon, Sep 21, 2015 at 5:16 PM <eli@barzilay.org> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15156
 >
 > Reported by Eli Barzilay for release: 6.2.1
 >
 > *** Description:
 > TR insists on having an Integer argument to `even?`, but
 > R accepts integers like 3.0 too.
 >
 > (As a result, a simple function like
 >
 >     (define (foo n) (if (even? n) (/ n 2) (+ 1 (* n 3))))
 >
 > is hard to do in class: I have to choose whether to talk
 > about quotient, or about exact vs inexact.)
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m)
 > (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 285129972
 > raco pkg (show):
 > Installation-wide:
 >  Package            Checksum     Source
 >  main-distribution  11d4bacb...  catalog main-distribution
 >  racket-lib         dad43491...  catalog racket-lib
 >  [191 auto-installed packages not shown]
 > User-specific for installation "6.2.1":
 >  [none]
 >
 >
 >
 > Collections:
 > ("C:\\Users\\eli\\AppData\\Roaming\\Racket\\6.2.1\\collects"
 >  ("info-domain" "pl"))
 > ("C:\\Program Files (x86)\\Racket\\collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info"
 > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket"
 > "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version"
 > "xml"))
 >
 > Recent Internal Errors:
 > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t test-coverage) (default) #() "#lang racket\n" #f #f
 > ((test) (main)) #t))
 >
 >
 
 --001a1143384010d5800520576c1c
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Unfortunately, I don&#39;t think this is fixable without a=
  much more sophisticated type system (such as the one Andrew Kent is presen=
 ting at RacketCon).<div><br></div><div>Even if we had a type that included =
 inexact integers, there are basically no operations closed on that type, so=
  your function would work on exact integers and constant inexact ones, whic=
 h doesn&#39;t seem much more useful.</div><div><br></div><div>Also, why not=
  just give the function the type `(: foo : Integer -&gt; Exact-Rational)`?<=
 /div><div><br></div><div>Sam</div></div><br><div class=3D"gmail_quote"><div=
  dir=3D"ltr">On Mon, Sep 21, 2015 at 5:16 PM &lt;<a href=3D"mailto:eli@barz=
 ilay.org">eli@barzilay.org</a>&gt; wrote:<br></div><blockquote class=3D"gma=
 il_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=
 t:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D15=
 156" rel=3D"noreferrer" target=3D"_blank">http://bugs.racket-lang.org/query=
 /?cmd=3Dview&amp;pr=3D15156</a><br>
 <br>
 Reported by Eli Barzilay for release: 6.2.1<br>
 <br>
 *** Description:<br>
 TR insists on having an Integer argument to `even?`, but<br>
 R accepts integers like 3.0 too.<br>
 <br>
 (As a result, a simple function like<br>
 <br>
 =C2=A0 =C2=A0 (define (foo n) (if (even? n) (/ n 2) (+ 1 (* n 3))))<br>
 <br>
 is hard to do in class: I have to choose whether to talk<br>
 about quotient, or about exact vs inexact.)<br>
 <br>
 *** How to repeat:<br>
 <br>
 <br>
 *** Environment:<br>
 windows &quot;Windows NT 6.1 (Build 7601) Service Pack 1&quot; (win32\i386\=
 3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 285129972<br>
 raco pkg (show):<br>
 Installation-wide:<br>
 =C2=A0Package=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Checksum=C2=A0 =C2=
 =A0 =C2=A0Source<br>
 =C2=A0main-distribution=C2=A0 11d4bacb...=C2=A0 catalog main-distribution<b=
 r>
 =C2=A0racket-lib=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0dad43491...=C2=A0 catalog=
  racket-lib<br>
 =C2=A0[191 auto-installed packages not shown]<br>
 User-specific for installation &quot;6.2.1&quot;:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;C:\\Users\\eli\\AppData\\Roaming\\Racket\\6.2.1\\collects&quot;<br>
 =C2=A0(&quot;info-domain&quot; &quot;pl&quot;))<br>
 (&quot;C:\\Program Files (x86)\\Racket\\collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler&quot; &quot;d=
 ata&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &quot;file&quot=
 ; &quot;info&quot; &quot;info-domain&quot; &quot;json&quot; &quot;launcher&=
 quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet&quot=
 ; &quot;racket&quot; &quot;raco&quot; &quot;reader&quot; &quot;realm&quot; =
 &quot;s-exp&quot; &quot;setup&quot; &quot;syntax&quot; &quot;unstable&quot;=
  &quot;version&quot; &quot;xml&quot;))<br>
 <br>
 Recent Internal Errors:<br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t test-coverage) (default) #() &quot;#lang racket\n&=
 quot; #f #f ((test) (main)) #t))<br>
 <br>
 </blockquote></div>
 
 --001a1143384010d5800520576c1c--
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15156: TR: type for even?
Date: Thu, 24 Sep 2015 09:08:33 -0400

 On Tue, Sep 22, 2015 at 11:12 AM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > Unfortunately, I don't think this is fixable without a much more
 > sophisticated type system (such as the one Andrew Kent is presenting
 > at RacketCon).
 >
 > Even if we had a type that included inexact integers, there are
 > basically no operations closed on that type, so your function would
 > work on exact integers and constant inexact ones, which doesn't seem
 > much more useful.
 
 I wasn't thinking about a type that corresponds to `integer?` -- I know
 that this is unlikely to get resolved.  Instead, I was thinking about
 extending the type which means that (even? 3.2) is a runtime error
 instead of a type error.  Not ideal, but it follows the path of allowing
 racket code.
 
 
 > Also, why not just give the function the type `(: foo : Integer ->
 > Exact-Rational)`?
 
 (It happened to be an example that I gave for use in a function that
 needs an A->A argument.)
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15156: TR: type for even?
Date: Thu, 24 Sep 2015 09:12:29 -0400

 In general, TR maps `integer?` domain contracts to the `Integer` type.
 Is there a particular reason that you think `even?` should be
 different? I'm open to changing this if so.
 
 Sam
 
 On Thu, Sep 24, 2015 at 9:08 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Tue, Sep 22, 2015 at 11:12 AM, Sam Tobin-Hochstadt
 > <samth@cs.indiana.edu> wrote:
 >> Unfortunately, I don't think this is fixable without a much more
 >> sophisticated type system (such as the one Andrew Kent is presenting
 >> at RacketCon).
 >>
 >> Even if we had a type that included inexact integers, there are
 >> basically no operations closed on that type, so your function would
 >> work on exact integers and constant inexact ones, which doesn't seem
 >> much more useful.
 >
 > I wasn't thinking about a type that corresponds to `integer?` -- I know
 > that this is unlikely to get resolved.  Instead, I was thinking about
 > extending the type which means that (even? 3.2) is a runtime error
 > instead of a type error.  Not ideal, but it follows the path of allowing
 > racket code.
 >
 >
 >> Also, why not just give the function the type `(: foo : Integer ->
 >> Exact-Rational)`?
 >
 > (It happened to be an example that I gave for use in a function that
 > needs an A->A argument.)
 >
 > --
 >                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15156: TR: type for even?
Date: Fri, 25 Sep 2015 08:35:47 -0400

 On Thu, Sep 24, 2015 at 9:12 AM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > In general, TR maps `integer?` domain contracts to the `Integer` type.
 > Is there a particular reason that you think `even?` should be
 > different? I'm open to changing this if so.
 
 I think that one thing that the main thing that threw me off is that
 it's a predicate.  For example, with something like `gcd` I'm generally
 surprised at R when it works with inexact integers so TR does what I
 expect -- but `even?` is a predicate so I kind of expected it to work.
 Perhaps I would even expect `(even? 'foo)` to be false instead of an
 error, but that's ugly enough that it'll be more expected to fail.
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
