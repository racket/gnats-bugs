From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Feb  6 15:02:49 2015
Received: from mail-ob0-f179.google.com (mail-ob0-f179.google.com [209.85.214.179])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t16K2cGV003331
	for <bugs@bugs.plt-scheme.org>; Fri, 6 Feb 2015 15:02:39 -0500
Message-Id: <201502062002.t16K2XJx003323@winooski.ccs.neu.edu>
Date: Fri, 6 Feb 2015 15:02:33 -0500
From: gustavo@oma.org.ar
To: bugs@racket-lang.org
Subject: Add fxround->fx primitive

>Number:         14968
>Category:       all
>Synopsis:       Add fxround->fx primitive
>Class:          change-request
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Feb 06 15:04:01 -0500 2015
>Originator:     Gustavo Massaccesi
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1
>Environment:
windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 249044844
raco pkg (show):
Installation-wide:
 Package              Checksum                                    Source
 main-distribution    84a366a8c2b2908babe6c2811b0ada036bb159df    (catalog main-distribution)
 racket-lib           436f0928598fc1a8abf27422e8e6588bef45f652    (catalog racket-lib)
 [187 auto-installed packages not shown]
User-specific for installation "6.1.1":
 Package        Checksum                                    Source
 disassemble    cf0ee3a5f8463e0867eba4c964d742a29325a996    (url github://github.com/samth/disassemble/master)



Collections:
("C:\\Users\\User\\AppData\\Roaming\\Racket\\6.1.1\\collects"
 (non-existent-path))
("C:\\Program Files\\Racket\\collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f ((test) (main)) #t))
>Description:
I was trying to solve the fasta-redux test in the Computer Language Benchmarks
Game http://benchmarksgame.alioth.debian.org/u32/performance.php?test=fastaredux

The problem is that the unsafe-flround primitive is too slow, and makes the solution slower than the solution of the original fasta problem. In this case, I actually need the fx versions, i.e. a fast version of

(define (unsafe-flround->fx x)
  (unsafe-fl->fx (unsafe-flround x)))

And the similar definitions for unsafe-fltruncate->fx, unsafe-flfloor->fx and unsafe-flceiling->fx. I tried to write the jit code myself, but it's too difficult.

The original fasta-redux problem is too quirky, so I create a simplified version that is easy to understand but has the same performance problems. The run times in my computer are interleaved at the bottom.

Currently, unsafe-fl->fx is implemented most of the times a unsafe-flround->fx, but it may be unsafe-fltruncate->fx in same cases and in some platforms. So this is not a reliable method.
>How-To-Repeat:
#lang racket/base
#;(require racket/fixnum
         racket/flonum)
(require racket/require
         (for-syntax racket/base)
         (filtered-in (lambda (name)
                        (regexp-replace #rx"unsafe-" name ""))
                      racket/unsafe/ops))

(define out #f)

(define _rx (make-pseudo-random-generator))
(define (my-random-flr)
  (flrandom _rx))

(define _rz 42)
(define (my-random-bad)
  (set! _rz (fxremainder (fx* _rz 7) 127))
  (fl/ (fx->fl _rz) 127.))
  

(define msg #"Hello World!")
(define msg-len (fx->fl (bytes-length msg)))
(define len 60)
(define buf (make-bytes len))

(define-syntax-rule (generate-message my-random my-round)
  (begin
    (collect-garbage)
    (collect-garbage)
    (collect-garbage)
    (set! out (open-output-bytes))
    (time (for ([i (in-range 100000)])
            (for ([n (in-range 60)])
              (let ()
                (define r (fl* (my-random) msg-len))
                (define r* (my-round (fl- r .5)))
                (bytes-set! buf n (bytes-ref msg r*))))
            (displayln buf out)))
    (set! out #f)))

(generate-message my-random-flr (lambda (x) (fl->fx (flround x))))
(generate-message my-random-flr (lambda (x) (fl->fx x)))
(generate-message my-random-flr fl->fx)
;cpu time: 2808 real time: 2884 gc time: 0
;cpu time: 2028 real time: 2042 gc time: 16
;cpu time: 2075 real time: 2070 gc time: 0

(generate-message my-random-bad (lambda (x) (fl->fx (flround x))))
(generate-message my-random-bad (lambda (x) (fl->fx x)))
(generate-message my-random-bad fl->fx)
;cpu time: 2090 real time: 2108 gc time: 16
;cpu time: 1248 real time: 1252 gc time: 16
;cpu time: 1248 real time: 1262 gc time: 0
>Fix:
