From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Feb 21 17:40:48 2013
Received: from mail-oa0-f49.google.com (mail-oa0-f49.google.com [209.85.219.49])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r1LMei5T023418
	for <bugs@bugs.plt-scheme.org>; Thu, 21 Feb 2013 17:40:45 -0500
Message-Id: <201302212240.r1LMegex023413@champlain.ccs.neu.edu>
Date: Thu, 21 Feb 2013 17:40:42 -0500
From: jmj@fellowhuman.com
To: bugs@racket-lang.org
Subject: 2htdp/image: drawing primitives alter colors

>Number:         13541
>Category:       all
>Synopsis:       2htdp/image: drawing primitives alter colors
>Class:          sw-bug
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Feb 21 17:44:01 -0500 2013
>Closed-Date:    Fri Feb 22 16:40:30 -0500 2013
>Last-Modified:  Sat Feb 23 14:12:01 -0500 2013
>Originator:     Jordan Johnson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.3
>Environment:
windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 237997864
Links: (links) = ("hw" "hw-solutions" "jmj"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
Planet2 (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific:
 [none]



Collections:
("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects"
 (non-existent-path))
("C:\\Program Files\\Racket\\collects"
 ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
When make-color is used as an argument to various drawing primitives in the 2htdp/image library (e.g., circle, square, rectangle, ellipse), the color is altered.  The resulting color has RGB values that may not be equal to the input color's corresponding values.

This does not occur for all RGB values, and it depends in part upon the alpha value for the color; with full opacity (255) it does not occur, but at lower opacities the RGB values are further off.

This behavior is present on v5.3.1 and v5.3.3, tested by running on Windows in DrRacket and on Linux via gracket-text.  The behavior was NOT present in v5.2.1 on Linux.
>How-To-Repeat:
#lang racket

(require 2htdp/image)

;; This shows which colors are being altered:
(build-list 255 (lambda (i)
                  (list i
                        '->
                        (image->color-list
                         (square 1 'solid (make-color i i i 200))))))

;; This should produce false, but produces true:
(image=? (triangle 1 'solid (make-color 103 103 103 200))
         (triangle 1 'solid (make-color 104 104 104 200)))
>Fix:
>Audit-Trail:
From: Danny Yoo <dyoo@hashcollision.org>
To: nobody@racket-lang.org, jmj@fellowhuman.com, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 16:14:01 -0700

 Yeah, I can see this too in HEAD.  The following program shows:
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #lang racket
 (require 2htdp/image)
 
 (define colors
   (build-list 255 (lambda (i)
                     (list i
                           '->
                           (first
                            (image->color-list
                             (color-list->bitmap (list (make-color i i i 200))
                                                 1 1)))))))
 (define weird-colors
   (for/list ([c colors]
              #:unless (match c
                         [(list c '-> (color c c c 200))
                          #t]
                         [else #f]))
     c))
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
 
 I observe the following bands of weird colors on Racket 5.3.3 under
 Mac OS X 10.8.2:
 
 
 > weird-colors
 (list
  (list 2 '-> (color 3 3 3 200))
  (list 7 '-> (color 6 6 6 200))
  (list 12 '-> (color 11 11 11 200))
  (list 16 '-> (color 17 17 17 200))
  (list 21 '-> (color 20 20 20 200))
  (list 25 '-> (color 26 26 26 200))
  (list 30 '-> (color 31 31 31 200))
  (list 35 '-> (color 34 34 34 200))
  (list 39 '-> (color 40 40 40 200))
  (list 44 '-> (color 45 45 45 200))
  (list 49 '-> (color 48 48 48 200))
  (list 53 '-> (color 54 54 54 200))
  (list 58 '-> (color 57 57 57 200))
  (list 63 '-> (color 62 62 62 200))
  (list 67 '-> (color 68 68 68 200))
  (list 72 '-> (color 71 71 71 200))
  (list 77 '-> (color 76 76 76 200))
  (list 81 '-> (color 82 82 82 200))
  (list 86 '-> (color 85 85 85 200))
  (list 90 '-> (color 91 91 91 200))
  (list 95 '-> (color 96 96 96 200))
  (list 100 '-> (color 99 99 99 200))
  (list 104 '-> (color 105 105 105 200))
  (list 109 '-> (color 108 108 108 200))
  (list 114 '-> (color 113 113 113 200))
  (list 118 '-> (color 119 119 119 200))
  (list 123 '-> (color 122 122 122 200))
  (list 127 '-> (color 128 128 128 200))
  (list 132 '-> (color 133 133 133 200))
  (list 137 '-> (color 136 136 136 200))
  (list 141 '-> (color 142 142 142 200))
  (list 146 '-> (color 147 147 147 200))
  (list 151 '-> (color 150 150 150 200))
  (list 155 '-> (color 156 156 156 200))
  (list 160 '-> (color 159 159 159 200))
  (list 165 '-> (color 164 164 164 200))
  (list 169 '-> (color 170 170 170 200))
  (list 174 '-> (color 173 173 173 200))
  (list 179 '-> (color 178 178 178 200))
  (list 183 '-> (color 184 184 184 200))
  (list 188 '-> (color 187 187 187 200))
  (list 192 '-> (color 193 193 193 200))
  (list 197 '-> (color 198 198 198 200))
  (list 202 '-> (color 201 201 201 200))
  (list 206 '-> (color 207 207 207 200))
  (list 211 '-> (color 210 210 210 200))
  (list 216 '-> (color 215 215 215 200))
  (list 220 '-> (color 221 221 221 200))
  (list 225 '-> (color 224 224 224 200))
  (list 229 '-> (color 230 230 230 200))
  (list 234 '-> (color 235 235 235 200))
  (list 239 '-> (color 238 238 238 200))
  (list 243 '-> (color 244 244 244 200))
  (list 248 '-> (color 249 249 249 200))
  (list 253 '-> (color 252 252 252 200)))
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jordan Johnson <jmj@fellowhuman.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 19:07:39 -0600

 --f46d0444e92552a46304d645d1d3
 Content-Type: text/plain; charset=UTF-8
 
 This program's behavior actually seems fine to me.
 
 For the first list, I think this is just rounding errors (and they will
 likely be platform-specific).
 
 For the triangle, those two triangles draw exactly the same, presumably
 because of the rounding errors. Image equality isn't structural; it draws
 the images and then compares them, pixel by pixel (with some performance
 improvements in certain cases that avoids the drawing but I don't believe
 that's happening in this case).
 
 Robby
 
 
 On Thu, Feb 21, 2013 at 4:44 PM, <jmj@fellowhuman.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13541
 >
 > Reported by Jordan Johnson for release: 5.3.3
 >
 > *** Description:
 > When make-color is used as an argument to various drawing primitives in
 > the 2htdp/image library (e.g., circle, square, rectangle, ellipse), the
 > color is altered.  The resulting color has RGB values that may not be equal
 > to the input color's corresponding values.
 >
 > This does not occur for all RGB values, and it depends in part upon the
 > alpha value for the color; with full opacity (255) it does not occur, but
 > at lower opacities the RGB values are further off.
 >
 > This behavior is present on v5.3.1 and v5.3.3, tested by running on
 > Windows in DrRacket and on Linux via gracket-text.  The behavior was NOT
 > present in v5.2.1 on Linux.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (require 2htdp/image)
 >
 > ;; This shows which colors are being altered:
 > (build-list 255 (lambda (i)
 >                   (list i
 >                         '->
 >                         (image->color-list
 >                          (square 1 'solid (make-color i i i 200))))))
 >
 > ;; This should produce false, but produces true:
 > (image=? (triangle 1 'solid (make-color 103 103 103 200))
 >          (triangle 1 'solid (make-color 104 104 104 200)))
 >
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m)
 > (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 237997864
 > Links: (links) = ("hw" "hw-solutions" "jmj"); (links #:user? #f) = ();
 > (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > Planet2 (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific:
 >  [none]
 >
 >
 >
 > Collections:
 > ("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects"
 >  (non-existent-path))
 > ("C:\\Program Files\\Racket\\collects"
 >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config"
 > "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme"
 > "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework"
 > "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help"
 > "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang"
 > "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx"
 > "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 > "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor"
 > "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader"
 > "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble"
 > "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi"
 > "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 > "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme"
 > "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Teaching Languages" "How to Design Programs"
 > "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >
 >
 
 --f46d0444e92552a46304d645d1d3
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">This program&#39;s behavior actually seems fine to me.=C2=
 =A0<div><br></div><div>For the first list, I think this is just rounding er=
 rors (and they will likely be platform-specific).=C2=A0</div><div><br></div=
 ><div>For the triangle, those two triangles draw exactly the same, presumab=
 ly because of the rounding errors. Image equality isn&#39;t structural; it =
 draws the images and then compares them, pixel by pixel (with some performa=
 nce improvements in certain cases that avoids the drawing but I don&#39;t b=
 elieve that&#39;s happening in this case).</div>
 <div style><br>Robby</div></div><div class=3D"gmail_extra"><br><br><div cla=
 ss=3D"gmail_quote">On Thu, Feb 21, 2013 at 4:44 PM,  <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:jmj@fellowhuman.com" target=3D"_blank">jmj@fellowhuman.co=
 m</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 541" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13541</a><br>
 <br>
 Reported by Jordan Johnson for release: 5.3.3<br>
 <br>
 *** Description:<br>
 When make-color is used as an argument to various drawing primitives in the=
  2htdp/image library (e.g., circle, square, rectangle, ellipse), the color =
 is altered. =C2=A0The resulting color has RGB values that may not be equal =
 to the input color&#39;s corresponding values.<br>
 
 <br>
 This does not occur for all RGB values, and it depends in part upon the alp=
 ha value for the color; with full opacity (255) it does not occur, but at l=
 ower opacities the RGB values are further off.<br>
 <br>
 This behavior is present on v5.3.1 and v5.3.3, tested by running on Windows=
  in DrRacket and on Linux via gracket-text. =C2=A0The behavior was NOT pres=
 ent in v5.2.1 on Linux.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require 2htdp/image)<br>
 <br>
 ;; This shows which colors are being altered:<br>
 (build-list 255 (lambda (i)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (list i<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 &#39;-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (image-&gt;color-list<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0(square 1 &#39;solid (make-color i i i 200))))))<br>
 <br>
 ;; This should produce false, but produces true:<br>
 (image=3D? (triangle 1 &#39;solid (make-color 103 103 103 200))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(triangle 1 &#39;solid (make-color 104 10=
 4 104 200)))<br>
 <br>
 *** Environment:<br>
 windows &quot;Windows NT 6.1 (Build 7601) Service Pack 1&quot; (win32\i386\=
 3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 237997864<br>
 Links: (links) =3D (&quot;hw&quot; &quot;hw-solutions&quot; &quot;jmj&quot;=
 ); (links #:user? #f) =3D (); (links #:root? #t) =3D (); (links #:user? #f =
 #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\colle=
 cts&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;C:\\Program Files\\Racket\\collects&quot;<br>
 =C2=A0(&quot;2htdp&quot; &quot;algol60&quot; &quot;at-exp&quot; &quot;brows=
 er&quot; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot; =
 &quot;data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &q=
 uot;deinprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dyne=
 xt&quot; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &=
 quot;ffi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; &q=
 uot;future-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gu=
 i-debugger&quot; &quot;help&quot; &quot;hierlist&quot; &quot;htdp&quot; &qu=
 ot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; =
 &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &qu=
 ot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;mred&quot; =
 &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;mzlib&quot; &=
 quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;parser-tools&=
 quot; &quot;picturing-programs&quot; &quot;plai&quot; &quot;planet&quot; &q=
 uot;planet2&quot; &quot;plot&quot; &quot;preprocessor&quot; &quot;profile&q=
 uot; &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quo=
 t; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &quot;readline&=
 quot; &quot;redex&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quo=
 t; &quot;schemeunit&quot; &quot;scribble&quot; &quot;scribblings&quot; &quo=
 t;scriblib&quot; &quot;setup&quot; &quot;sgl&quot; &quot;slatex&quot; &quot=
 ;slideshow&quot; &quot;srfi&quot; &quot;stepper&quot; &quot;string-constant=
 s&quot; &quot;swindle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &qu=
 ot;teachpack&quot; &quot;test-engine&quot; &quot;texpict&quot; &quot;trace&=
 quot; &quot;typed&quot; &quot;typed-racket&quot; &quot;typed-scheme&quot; &=
 quot;unstable&quot; &quot;version&quot; &quot;web-server&quot; &quot;wxme&q=
 uot; &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 <br>
 Computer Language: ((&quot;Teaching Languages&quot; &quot;How to Design Pro=
 grams&quot; &quot;Beginning Student&quot;) (#(#t constructor repeating-deci=
 mal #f #t none) #f ()))<br>
 <br>
 </blockquote></div><br></div>
 
 --f46d0444e92552a46304d645d1d3--
From: Jordan Johnson <jmj@fellowhuman.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 17:42:59 -0800

 --Apple-Mail-824B184B-195C-48F4-B2CC-1A393AB4945D
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 Regrettably I can't recall the exact numbers that the students were using, b=
 ut there was a discernible difference between actual and expected color in t=
 he output of one of the student programs I tested.  Also, the whole reason t=
 hat this came up in the first place was that a check-expect failed, and it w=
 as checking a function whose output was an image, not a list of colors -- an=
 d I presume check-expect uses the method you describe, of drawing and then c=
 hecking pixels.
 
 Which is to say, the behavior is actually producing visibly different end re=
 sults.  I will try and cook up a test to demonstrate it for you.
 
 Best,
 Jordan
 
 On Feb 21, 2013, at 5:07 PM, Robby Findler <robby@eecs.northwestern.edu> wro=
 te:
 
 > This program's behavior actually seems fine to me.=20
 >=20
 > For the first list, I think this is just rounding errors (and they will li=
 kely be platform-specific).=20
 >=20
 > For the triangle, those two triangles draw exactly the same, presumably be=
 cause of the rounding errors. Image equality isn't structural; it draws the i=
 mages and then compares them, pixel by pixel (with some performance improvem=
 ents in certain cases that avoids the drawing but I don't believe that's hap=
 pening in this case).
 >=20
 > Robby
 >=20
 >=20
 > On Thu, Feb 21, 2013 at 4:44 PM, <jmj@fellowhuman.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13541
 >=20
 > Reported by Jordan Johnson for release: 5.3.3
 >=20
 > *** Description:
 > When make-color is used as an argument to various drawing primitives in th=
 e 2htdp/image library (e.g., circle, square, rectangle, ellipse), the color i=
 s altered.  The resulting color has RGB values that may not be equal to the i=
 nput color's corresponding values.
 >=20
 > This does not occur for all RGB values, and it depends in part upon the al=
 pha value for the color; with full opacity (255) it does not occur, but at l=
 ower opacities the RGB values are further off.
 >=20
 > This behavior is present on v5.3.1 and v5.3.3, tested by running on Window=
 s in DrRacket and on Linux via gracket-text.  The behavior was NOT present i=
 n v5.2.1 on Linux.
 >=20
 > *** How to repeat:
 > #lang racket
 >=20
 > (require 2htdp/image)
 >=20
 > ;; This shows which colors are being altered:
 > (build-list 255 (lambda (i)
 >                   (list i
 >                         '->
 >                         (image->color-list
 >                          (square 1 'solid (make-color i i i 200))))))
 >=20
 > ;; This should produce false, but produces true:
 > (image=3D? (triangle 1 'solid (make-color 103 103 103 200))
 >          (triangle 1 'solid (make-color 104 104 104 200)))
 >=20
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-=
 display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 237997864
 > Links: (links) =3D ("hw" "hw-solutions" "jmj"); (links #:user? #f) =3D ();=
  (links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()
 > Planet2 (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific:
 >  [none]
 >=20
 >=20
 >=20
 > Collections:
 > ("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects"=
 
 >  (non-existent-path))
 > ("C:\\Program Files\\Racket\\collects"
 >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config"=
  "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dyne=
 xt" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "fu=
 ture-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "=
 html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-=
 debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "=
 net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2"=
  "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit"=
  "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "sc=
 ribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "=
 stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "t=
 est-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstabl=
 e" "version" "web-server" "wxme" "xml" "xrepl"))
 >=20
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Beginn=
 ing Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >=20
 >=20
 
 --Apple-Mail-824B184B-195C-48F4-B2CC-1A393AB4945D
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=utf-8
 
 <html><head></head><body bgcolor=3D"#FFFFFF"><div>Regrettably I can't recall=
  the exact numbers that the students were using, but there was a discernible=
  difference between actual and expected color in the output of one of the st=
 udent programs I tested. &nbsp;Also, the whole reason that this came up in t=
 he first place was that a check-expect failed, and it was checking a functio=
 n whose output was an image, not a list of colors -- and I presume check-exp=
 ect uses the method you describe, of drawing and then checking pixels.</div>=
 <div><br></div><div>Which is to say, the behavior is actually producing visi=
 bly different end results. &nbsp;I will try and cook up a test to demonstrat=
 e it for you.<br><br>Best,<div>Jordan</div></div><div><br>On Feb 21, 2013, a=
 t 5:07 PM, Robby Findler &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">=
 robby@eecs.northwestern.edu</a>&gt; wrote:<br><br></div><div></div><blockquo=
 te type=3D"cite"><div><div dir=3D"ltr">This program's behavior actually seem=
 s fine to me.&nbsp;<div><br></div><div>For the first list, I think this is j=
 ust rounding errors (and they will likely be platform-specific).&nbsp;</div>=
 <div><br></div><div>For the triangle, those two triangles draw exactly the s=
 ame, presumably because of the rounding errors. Image equality isn't structu=
 ral; it draws the images and then compares them, pixel by pixel (with some p=
 erformance improvements in certain cases that avoids the drawing but I don't=
  believe that's happening in this case).</div>
 <div style=3D""><br>Robby</div></div><div class=3D"gmail_extra"><br><br><div=
  class=3D"gmail_quote">On Thu, Feb 21, 2013 at 4:44 PM,  <span dir=3D"ltr">&=
 lt;<a href=3D"mailto:jmj@fellowhuman.com" target=3D"_blank">jmj@fellowhuman.=
 com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px=
  #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 &nbsp; <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D135=
 41" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D=
 13541</a><br>
 <br>
 Reported by Jordan Johnson for release: 5.3.3<br>
 <br>
 *** Description:<br>
 When make-color is used as an argument to various drawing primitives in the 2=
 htdp/image library (e.g., circle, square, rectangle, ellipse), the color is a=
 ltered. &nbsp;The resulting color has RGB values that may not be equal to th=
 e input color's corresponding values.<br>
 
 <br>
 This does not occur for all RGB values, and it depends in part upon the alph=
 a value for the color; with full opacity (255) it does not occur, but at low=
 er opacities the RGB values are further off.<br>
 <br>
 This behavior is present on v5.3.1 and v5.3.3, tested by running on Windows i=
 n DrRacket and on Linux via gracket-text. &nbsp;The behavior was NOT present=
  in v5.2.1 on Linux.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require 2htdp/image)<br>
 <br>
 ;; This shows which colors are being altered:<br>
 (build-list 255 (lambda (i)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (list i<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=
  &nbsp; '-&gt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=
  &nbsp; (image-&gt;color-list<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=
  &nbsp; &nbsp;(square 1 'solid (make-color i i i 200))))))<br>
 <br>
 ;; This should produce false, but produces true:<br>
 (image=3D? (triangle 1 'solid (make-color 103 103 103 200))<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(triangle 1 'solid (make-color 104 104 104=
  200)))<br>
 <br>
 *** Environment:<br>
 windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-di=
 splay-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 237997864<br>
 Links: (links) =3D ("hw" "hw-solutions" "jmj"); (links #:user? #f) =3D (); (=
 links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 &nbsp;[none]<br>
 User-specific, all-version:<br>
 &nbsp;[none]<br>
 User-specific, version-specific:<br>
 &nbsp;[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 ("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects"<b=
 r>
 &nbsp;(non-existent-path))<br>
 ("C:\\Program Files\\Racket\\collects"<br>
 &nbsp;("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "conf=
 ig" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "d=
 ynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "=
 future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp=
 " "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "mac=
 ro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzschem=
 e" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plan=
 et2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "racku=
 nit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit"=
  "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srf=
 i" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack=
 " "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "uns=
 table" "version" "web-server" "wxme" "xml" "xrepl"))<br>
 
 <br>
 Computer Language: (("Teaching Languages" "How to Design Programs" "Beginnin=
 g Student") (#(#t constructor repeating-decimal #f #t none) #f ()))<br>
 <br>
 </blockquote></div><br></div>
 </div></blockquote></body></html>=
 
 --Apple-Mail-824B184B-195C-48F4-B2CC-1A393AB4945D--
From: Jordan Johnson <jmj@fellowhuman.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 17:54:32 -0800

 --Apple-Mail-6A4F4644-E746-47B7-BDF4-E3FB3A1FC103
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 Hi Robby,
 
 Try this code (distilled and abbreviated from my student's work):
 
 ;; --- begin
 #lang racket
 
 (require 2htdp/image)
 
 ;; photo-negative : image -> image
 ;; takes an image and gives the same image, where every pixel is
 ;; the opposite color.
 (define (photo-negative i)
   (color-list->bitmap (map negate-color (image->color-list i))
                       (image-width i)
                       (image-height i)))
 
 (define (negate-color c) ; color -> color
   (define (neg x) (- 255 x))
   (make-color (neg (color-red c)) (neg (color-green c)) (neg (color-blue c))=
 
               (color-alpha c)))
 
 (beside (photo-negative (square 200 'solid (make-color 30 15 255 200)))
         (square 200 'solid (make-color 225 240 0 200)))
 ;; --- end
 
 On my machine and monitor, the beside-expression at the end produces an imag=
 e with two regions of visibly distinct colors.
 
 Best,
 Jordan
 
 On Feb 21, 2013, at 5:07 PM, Robby Findler <robby@eecs.northwestern.edu> wro=
 te:
 
 > This program's behavior actually seems fine to me.=20
 >=20
 > For the first list, I think this is just rounding errors (and they will li=
 kely be platform-specific).=20
 >=20
 > For the triangle, those two triangles draw exactly the same, presumably be=
 cause of the rounding errors. Image equality isn't structural; it draws the i=
 mages and then compares them, pixel by pixel (with some performance improvem=
 ents in certain cases that avoids the drawing but I don't believe that's hap=
 pening in this case).
 >=20
 > Robby
 >=20
 >=20
 > On Thu, Feb 21, 2013 at 4:44 PM, <jmj@fellowhuman.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13541
 >=20
 > Reported by Jordan Johnson for release: 5.3.3
 >=20
 > *** Description:
 > When make-color is used as an argument to various drawing primitives in th=
 e 2htdp/image library (e.g., circle, square, rectangle, ellipse), the color i=
 s altered.  The resulting color has RGB values that may not be equal to the i=
 nput color's corresponding values.
 >=20
 > This does not occur for all RGB values, and it depends in part upon the al=
 pha value for the color; with full opacity (255) it does not occur, but at l=
 ower opacities the RGB values are further off.
 >=20
 > This behavior is present on v5.3.1 and v5.3.3, tested by running on Window=
 s in DrRacket and on Linux via gracket-text.  The behavior was NOT present i=
 n v5.2.1 on Linux.
 >=20
 > *** How to repeat:
 > #lang racket
 >=20
 > (require 2htdp/image)
 >=20
 > ;; This shows which colors are being altered:
 > (build-list 255 (lambda (i)
 >                   (list i
 >                         '->
 >                         (image->color-list
 >                          (square 1 'solid (make-color i i i 200))))))
 >=20
 > ;; This should produce false, but produces true:
 > (image=3D? (triangle 1 'solid (make-color 103 103 103 200))
 >          (triangle 1 'solid (make-color 104 104 104 200)))
 >=20
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-=
 display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 237997864
 > Links: (links) =3D ("hw" "hw-solutions" "jmj"); (links #:user? #f) =3D ();=
  (links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()
 > Planet2 (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific:
 >  [none]
 >=20
 >=20
 >=20
 > Collections:
 > ("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects"=
 
 >  (non-existent-path))
 > ("C:\\Program Files\\Racket\\collects"
 >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config"=
  "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dyne=
 xt" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "fu=
 ture-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "=
 html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-=
 debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "=
 net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2"=
  "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit"=
  "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "sc=
 ribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "=
 stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "t=
 est-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstabl=
 e" "version" "web-server" "wxme" "xml" "xrepl"))
 >=20
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Beginn=
 ing Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >=20
 >=20
 
 --Apple-Mail-6A4F4644-E746-47B7-BDF4-E3FB3A1FC103
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=utf-8
 
 <html><head></head><body bgcolor=3D"#FFFFFF"><div>Hi Robby,</div><div><br></=
 div><div>Try this code (distilled and abbreviated from my student's work):</=
 div><div><div><br></div><div>;; --- begin</div><div>#lang racket</div><div><=
 br></div><div>(require 2htdp/image)</div><div><br></div><div>;; photo-negati=
 ve : image -&gt; image</div><div>;; takes an image and gives the same image,=
  where every pixel is</div><div>;; the opposite color.</div><div>(define (ph=
 oto-negative i)</div><div>&nbsp; (color-list-&gt;bitmap (map negate-color (i=
 mage-&gt;color-list i))</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &=
 nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (image-width i)</div><div>&nbsp; &nbsp; &n=
 bsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (image-height i=
 )))</div><div><br></div><div>(define (negate-color c) ; color -&gt; color</d=
 iv><div>&nbsp; (define (neg x) (- 255 x))</div><div>&nbsp; (make-color (neg (=
 color-red c)) (neg (color-green c)) (neg (color-blue c))</div><div>&nbsp; &n=
 bsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (color-alpha c)))</div><div><br></di=
 v><div>(beside (photo-negative (square 200 'solid (make-color&nbsp;<a href=3D=
 "tel:30%2015%20255%20200" x-apple-data-detectors=3D"true" x-apple-data-detec=
 tors-result=3D"0">30 15 255 200</a>)))</div><div>&nbsp; &nbsp; &nbsp; &nbsp;=
  (square 200 'solid (make-color&nbsp;<a href=3D"tel:225%20240%200%20200" x-a=
 pple-data-detectors=3D"true" x-apple-data-detectors-result=3D"1">225 240 0 2=
 00</a>)))</div><div>;; --- end</div><div><br></div><div>On my machine and mo=
 nitor, the beside-expression at the end produces an image with two regions o=
 f visibly distinct colors.</div><br>Best,<div>Jordan</div></div><div><br>On =
 Feb 21, 2013, at 5:07 PM, Robby Findler &lt;<a href=3D"mailto:robby@eecs.nor=
 thwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br><br></div><div>=
 </div><blockquote type=3D"cite"><div><div dir=3D"ltr">This program's behavio=
 r actually seems fine to me.&nbsp;<div><br></div><div>For the first list, I t=
 hink this is just rounding errors (and they will likely be platform-specific=
 ).&nbsp;</div><div><br></div><div>For the triangle, those two triangles draw=
  exactly the same, presumably because of the rounding errors. Image equality=
  isn't structural; it draws the images and then compares them, pixel by pixe=
 l (with some performance improvements in certain cases that avoids the drawi=
 ng but I don't believe that's happening in this case).</div>
 <div style=3D""><br>Robby</div></div><div class=3D"gmail_extra"><br><br><div=
  class=3D"gmail_quote">On Thu, Feb 21, 2013 at 4:44 PM,  <span dir=3D"ltr">&=
 lt;<a href=3D"mailto:jmj@fellowhuman.com" target=3D"_blank">jmj@fellowhuman.=
 com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px=
  #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 &nbsp; <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D135=
 41" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D=
 13541</a><br>
 <br>
 Reported by Jordan Johnson for release: 5.3.3<br>
 <br>
 *** Description:<br>
 When make-color is used as an argument to various drawing primitives in the 2=
 htdp/image library (e.g., circle, square, rectangle, ellipse), the color is a=
 ltered. &nbsp;The resulting color has RGB values that may not be equal to th=
 e input color's corresponding values.<br>
 
 <br>
 This does not occur for all RGB values, and it depends in part upon the alph=
 a value for the color; with full opacity (255) it does not occur, but at low=
 er opacities the RGB values are further off.<br>
 <br>
 This behavior is present on v5.3.1 and v5.3.3, tested by running on Windows i=
 n DrRacket and on Linux via gracket-text. &nbsp;The behavior was NOT present=
  in v5.2.1 on Linux.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require 2htdp/image)<br>
 <br>
 ;; This shows which colors are being altered:<br>
 (build-list 255 (lambda (i)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (list i<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=
  &nbsp; '-&gt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=
  &nbsp; (image-&gt;color-list<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=
  &nbsp; &nbsp;(square 1 'solid (make-color i i i 200))))))<br>
 <br>
 ;; This should produce false, but produces true:<br>
 (image=3D? (triangle 1 'solid (make-color 103 103 103 200))<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(triangle 1 'solid (make-color 104 104 104=
  200)))<br>
 <br>
 *** Environment:<br>
 windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-di=
 splay-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 237997864<br>
 Links: (links) =3D ("hw" "hw-solutions" "jmj"); (links #:user? #f) =3D (); (=
 links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 &nbsp;[none]<br>
 User-specific, all-version:<br>
 &nbsp;[none]<br>
 User-specific, version-specific:<br>
 &nbsp;[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 ("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects"<b=
 r>
 &nbsp;(non-existent-path))<br>
 ("C:\\Program Files\\Racket\\collects"<br>
 &nbsp;("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "conf=
 ig" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "d=
 ynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "=
 future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp=
 " "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "mac=
 ro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzschem=
 e" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plan=
 et2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "racku=
 nit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit"=
  "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srf=
 i" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack=
 " "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "uns=
 table" "version" "web-server" "wxme" "xml" "xrepl"))<br>
 
 <br>
 Computer Language: (("Teaching Languages" "How to Design Programs" "Beginnin=
 g Student") (#(#t constructor repeating-decimal #f #t none) #f ()))<br>
 <br>
 </blockquote></div><br></div>
 </div></blockquote></body></html>=
 
 --Apple-Mail-6A4F4644-E746-47B7-BDF4-E3FB3A1FC103--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jordan Johnson <jmj@fellowhuman.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 20:20:04 -0600

 --bcaec5523da24ac48504d646d419
 Content-Type: text/plain; charset=UTF-8
 
 I get #f when I change the beside to equal?. Do you get #t?
 
 Robby
 
 
 On Thu, Feb 21, 2013 at 7:54 PM, Jordan Johnson <jmj@fellowhuman.com> wrote:
 
 > Hi Robby,
 >
 > Try this code (distilled and abbreviated from my student's work):
 >
 > ;; --- begin
 > #lang racket
 >
 > (require 2htdp/image)
 >
 > ;; photo-negative : image -> image
 > ;; takes an image and gives the same image, where every pixel is
 > ;; the opposite color.
 > (define (photo-negative i)
 >   (color-list->bitmap (map negate-color (image->color-list i))
 >                       (image-width i)
 >                       (image-height i)))
 >
 > (define (negate-color c) ; color -> color
 >   (define (neg x) (- 255 x))
 >   (make-color (neg (color-red c)) (neg (color-green c)) (neg (color-blue
 > c))
 >               (color-alpha c)))
 >
 > (beside (photo-negative (square 200 'solid (make-color 30 15 255 200)))
 >         (square 200 'solid (make-color 225 240 0 200)))
 > ;; --- end
 >
 > On my machine and monitor, the beside-expression at the end produces an
 > image with two regions of visibly distinct colors.
 >
 > Best,
 > Jordan
 >
 > On Feb 21, 2013, at 5:07 PM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >
 > This program's behavior actually seems fine to me.
 >
 > For the first list, I think this is just rounding errors (and they will
 > likely be platform-specific).
 >
 > For the triangle, those two triangles draw exactly the same, presumably
 > because of the rounding errors. Image equality isn't structural; it draws
 > the images and then compares them, pixel by pixel (with some performance
 > improvements in certain cases that avoids the drawing but I don't believe
 > that's happening in this case).
 >
 > Robby
 >
 >
 > On Thu, Feb 21, 2013 at 4:44 PM, <jmj@fellowhuman.com> wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13541
 >>
 >> Reported by Jordan Johnson for release: 5.3.3
 >>
 >> *** Description:
 >> When make-color is used as an argument to various drawing primitives in
 >> the 2htdp/image library (e.g., circle, square, rectangle, ellipse), the
 >> color is altered.  The resulting color has RGB values that may not be equal
 >> to the input color's corresponding values.
 >>
 >> This does not occur for all RGB values, and it depends in part upon the
 >> alpha value for the color; with full opacity (255) it does not occur, but
 >> at lower opacities the RGB values are further off.
 >>
 >> This behavior is present on v5.3.1 and v5.3.3, tested by running on
 >> Windows in DrRacket and on Linux via gracket-text.  The behavior was NOT
 >> present in v5.2.1 on Linux.
 >>
 >> *** How to repeat:
 >> #lang racket
 >>
 >> (require 2htdp/image)
 >>
 >> ;; This shows which colors are being altered:
 >> (build-list 255 (lambda (i)
 >>                   (list i
 >>                         '->
 >>                         (image->color-list
 >>                          (square 1 'solid (make-color i i i 200))))))
 >>
 >> ;; This should produce false, but produces true:
 >> (image=? (triangle 1 'solid (make-color 103 103 103 200))
 >>          (triangle 1 'solid (make-color 104 104 104 200)))
 >>
 >> *** Environment:
 >> windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m)
 >> (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 237997864
 >> Links: (links) = ("hw" "hw-solutions" "jmj"); (links #:user? #f) = ();
 >> (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >> Planet2 (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  [none]
 >> User-specific, version-specific:
 >>  [none]
 >>
 >>
 >>
 >> Collections:
 >> ("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects"
 >>  (non-existent-path))
 >> ("C:\\Program Files\\Racket\\collects"
 >>  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler"
 >> "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket"
 >> "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"
 >> "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger"
 >> "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 >> "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib"
 >> "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 >> "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor"
 >> "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader"
 >> "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble"
 >> "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi"
 >> "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 >> "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme"
 >> "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>
 >> Computer Language: (("Teaching Languages" "How to Design Programs"
 >> "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >>
 >>
 >
 
 --bcaec5523da24ac48504d646d419
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I get #f when I change the beside to equal?. Do you get #t=
 ?<div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br><br><d=
 iv class=3D"gmail_quote">On Thu, Feb 21, 2013 at 7:54 PM, Jordan Johnson <s=
 pan dir=3D"ltr">&lt;<a href=3D"mailto:jmj@fellowhuman.com" target=3D"_blank=
 ">jmj@fellowhuman.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div bgcolor=3D"#FFFFFF"><div>Hi Robby,</div=
 ><div><br></div><div>Try this code (distilled and abbreviated from my stude=
 nt&#39;s work):</div>
 <div><div><br></div><div>;; --- begin</div><div>#lang racket</div><div><br>=
 </div><div>(require 2htdp/image)</div><div><br></div><div>;; photo-negative=
  : image -&gt; image</div><div>;; takes an image and gives the same image, =
 where every pixel is</div>
 <div>;; the opposite color.</div><div>(define (photo-negative i)</div><div>=
 =C2=A0 (color-list-&gt;bitmap (map negate-color (image-&gt;color-list i))</=
 div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (image-width i)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (image-height i)))</div>
 <div><br></div><div>(define (negate-color c) ; color -&gt; color</div><div>=
 =C2=A0 (define (neg x) (- 255 x))</div><div>=C2=A0 (make-color (neg (color-=
 red c)) (neg (color-green c)) (neg (color-blue c))</div><div>=C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (color-alpha c)))</div>
 <div><br></div><div>(beside (photo-negative (square 200 &#39;solid (make-co=
 lor=C2=A0<a href=3D"tel:30%2015%20255%20200" target=3D"_blank">30 15 255 20=
 0</a>)))</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 (square 200 &#39;solid (make=
 -color=C2=A0<a href=3D"tel:225%20240%200%20200" target=3D"_blank">225 240 0=
  200</a>)))</div>
 <div>;; --- end</div><div><br></div><div>On my machine and monitor, the bes=
 ide-expression at the end produces an image with two regions of visibly dis=
 tinct colors.</div><br>Best,<div>Jordan</div></div><div class=3D"im"><div>
 <br>On Feb 21, 2013, at 5:07 PM, Robby Findler &lt;<a href=3D"mailto:robby@=
 eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu</a>&gt=
 ; wrote:<br><br></div><div></div></div><div><div class=3D"h5"><blockquote t=
 ype=3D"cite">
 <div><div dir=3D"ltr">This program&#39;s behavior actually seems fine to me=
 .=C2=A0<div><br></div><div>For the first list, I think this is just roundin=
 g errors (and they will likely be platform-specific).=C2=A0</div><div><br><=
 /div><div>
 For the triangle, those two triangles draw exactly the same, presumably bec=
 ause of the rounding errors. Image equality isn&#39;t structural; it draws =
 the images and then compares them, pixel by pixel (with some performance im=
 provements in certain cases that avoids the drawing but I don&#39;t believe=
  that&#39;s happening in this case).</div>
 
 <div><br>Robby</div></div><div class=3D"gmail_extra"><br><br><div class=3D"=
 gmail_quote">On Thu, Feb 21, 2013 at 4:44 PM,  <span dir=3D"ltr">&lt;<a hre=
 f=3D"mailto:jmj@fellowhuman.com" target=3D"_blank">jmj@fellowhuman.com</a>&=
 gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 541" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13541</a><br>
 <br>
 Reported by Jordan Johnson for release: 5.3.3<br>
 <br>
 *** Description:<br>
 When make-color is used as an argument to various drawing primitives in the=
  2htdp/image library (e.g., circle, square, rectangle, ellipse), the color =
 is altered. =C2=A0The resulting color has RGB values that may not be equal =
 to the input color&#39;s corresponding values.<br>
 
 
 <br>
 This does not occur for all RGB values, and it depends in part upon the alp=
 ha value for the color; with full opacity (255) it does not occur, but at l=
 ower opacities the RGB values are further off.<br>
 <br>
 This behavior is present on v5.3.1 and v5.3.3, tested by running on Windows=
  in DrRacket and on Linux via gracket-text. =C2=A0The behavior was NOT pres=
 ent in v5.2.1 on Linux.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require 2htdp/image)<br>
 <br>
 ;; This shows which colors are being altered:<br>
 (build-list 255 (lambda (i)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (list i<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 &#39;-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (image-&gt;color-list<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0(square 1 &#39;solid (make-color i i i 200))))))<br>
 <br>
 ;; This should produce false, but produces true:<br>
 (image=3D? (triangle 1 &#39;solid (make-color 103 103 103 200))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(triangle 1 &#39;solid (make-color 104 10=
 4 104 200)))<br>
 <br>
 *** Environment:<br>
 windows &quot;Windows NT 6.1 (Build 7601) Service Pack 1&quot; (win32\i386\=
 3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 237997864<br>
 Links: (links) =3D (&quot;hw&quot; &quot;hw-solutions&quot; &quot;jmj&quot;=
 ); (links #:user? #f) =3D (); (links #:root? #t) =3D (); (links #:user? #f =
 #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\colle=
 cts&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;C:\\Program Files\\Racket\\collects&quot;<br>
 =C2=A0(&quot;2htdp&quot; &quot;algol60&quot; &quot;at-exp&quot; &quot;brows=
 er&quot; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot; =
 &quot;data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &q=
 uot;deinprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dyne=
 xt&quot; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &=
 quot;ffi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; &q=
 uot;future-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gu=
 i-debugger&quot; &quot;help&quot; &quot;hierlist&quot; &quot;htdp&quot; &qu=
 ot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; =
 &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &qu=
 ot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;mred&quot; =
 &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;mzlib&quot; &=
 quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;parser-tools&=
 quot; &quot;picturing-programs&quot; &quot;plai&quot; &quot;planet&quot; &q=
 uot;planet2&quot; &quot;plot&quot; &quot;preprocessor&quot; &quot;profile&q=
 uot; &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quo=
 t; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &quot;readline&=
 quot; &quot;redex&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quo=
 t; &quot;schemeunit&quot; &quot;scribble&quot; &quot;scribblings&quot; &quo=
 t;scriblib&quot; &quot;setup&quot; &quot;sgl&quot; &quot;slatex&quot; &quot=
 ;slideshow&quot; &quot;srfi&quot; &quot;stepper&quot; &quot;string-constant=
 s&quot; &quot;swindle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &qu=
 ot;teachpack&quot; &quot;test-engine&quot; &quot;texpict&quot; &quot;trace&=
 quot; &quot;typed&quot; &quot;typed-racket&quot; &quot;typed-scheme&quot; &=
 quot;unstable&quot; &quot;version&quot; &quot;web-server&quot; &quot;wxme&q=
 uot; &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 
 <br>
 Computer Language: ((&quot;Teaching Languages&quot; &quot;How to Design Pro=
 grams&quot; &quot;Beginning Student&quot;) (#(#t constructor repeating-deci=
 mal #f #t none) #f ()))<br>
 <br>
 </blockquote></div><br></div>
 </div></blockquote></div></div></div></blockquote></div><br></div>
 
 --bcaec5523da24ac48504d646d419--
From: Jordan Johnson <jmj@fellowhuman.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 18:26:34 -0800

 --Apple-Mail-48CD6C47-8BA0-4144-B79F-28DB6CFDA20A
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 No, I get #f too -- the problem being that the program logic suggests that t=
 hose two halves should be equal, both visually and in the image-equality sen=
 se, but they in fact are not (in either sense).
 
 Best,
 Jordan
 
 On Feb 21, 2013, at 6:20 PM, Robby Findler <robby@eecs.northwestern.edu> wro=
 te:
 
 > I get #f when I change the beside to equal?. Do you get #t?
 >=20
 > Robby
 >=20
 >=20
 > On Thu, Feb 21, 2013 at 7:54 PM, Jordan Johnson <jmj@fellowhuman.com> wrot=
 e:
 > Hi Robby,
 >=20
 > Try this code (distilled and abbreviated from my student's work):
 >=20
 > ;; --- begin
 > #lang racket
 >=20
 > (require 2htdp/image)
 >=20
 > ;; photo-negative : image -> image
 > ;; takes an image and gives the same image, where every pixel is
 > ;; the opposite color.
 > (define (photo-negative i)
 >   (color-list->bitmap (map negate-color (image->color-list i))
 >                       (image-width i)
 >                       (image-height i)))
 >=20
 > (define (negate-color c) ; color -> color
 >   (define (neg x) (- 255 x))
 >   (make-color (neg (color-red c)) (neg (color-green c)) (neg (color-blue c=
 ))
 >               (color-alpha c)))
 >=20
 > (beside (photo-negative (square 200 'solid (make-color 30 15 255 200)))
 >         (square 200 'solid (make-color 225 240 0 200)))
 > ;; --- end
 >=20
 > On my machine and monitor, the beside-expression at the end produces an im=
 age with two regions of visibly distinct colors.
 >=20
 > Best,
 > Jordan
 >=20
 > On Feb 21, 2013, at 5:07 PM, Robby Findler <robby@eecs.northwestern.edu> w=
 rote:
 >=20
 >> This program's behavior actually seems fine to me.=20
 >>=20
 >> For the first list, I think this is just rounding errors (and they will l=
 ikely be platform-specific).=20
 >>=20
 >> For the triangle, those two triangles draw exactly the same, presumably b=
 ecause of the rounding errors. Image equality isn't structural; it draws the=
  images and then compares them, pixel by pixel (with some performance improv=
 ements in certain cases that avoids the drawing but I don't believe that's h=
 appening in this case).
 >>=20
 >> Robby
 >>=20
 >>=20
 >> On Thu, Feb 21, 2013 at 4:44 PM, <jmj@fellowhuman.com> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13541
 >>=20
 >> Reported by Jordan Johnson for release: 5.3.3
 >>=20
 >> *** Description:
 >> When make-color is used as an argument to various drawing primitives in t=
 he 2htdp/image library (e.g., circle, square, rectangle, ellipse), the color=
  is altered.  The resulting color has RGB values that may not be equal to th=
 e input color's corresponding values.
 >>=20
 >> This does not occur for all RGB values, and it depends in part upon the a=
 lpha value for the color; with full opacity (255) it does not occur, but at l=
 ower opacities the RGB values are further off.
 >>=20
 >> This behavior is present on v5.3.1 and v5.3.3, tested by running on Windo=
 ws in DrRacket and on Linux via gracket-text.  The behavior was NOT present i=
 n v5.2.1 on Linux.
 >>=20
 >> *** How to repeat:
 >> #lang racket
 >>=20
 >> (require 2htdp/image)
 >>=20
 >> ;; This shows which colors are being altered:
 >> (build-list 255 (lambda (i)
 >>                   (list i
 >>                         '->
 >>                         (image->color-list
 >>                          (square 1 'solid (make-color i i i 200))))))
 >>=20
 >> ;; This should produce false, but produces true:
 >> (image=3D? (triangle 1 'solid (make-color 103 103 103 200))
 >>          (triangle 1 'solid (make-color 104 104 104 200)))
 >>=20
 >> *** Environment:
 >> windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get=
 -display-depth) =3D 32
 >> Human Language: english
 >> (current-memory-use) 237997864
 >> Links: (links) =3D ("hw" "hw-solutions" "jmj"); (links #:user? #f) =3D ()=
 ; (links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()
 >> Planet2 (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  [none]
 >> User-specific, version-specific:
 >>  [none]
 >>=20
 >>=20
 >>=20
 >> Collections:
 >> ("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects=
 "
 >>  (non-existent-path))
 >> ("C:\\Program Files\\Racket\\collects"
 >>  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config=
 " "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dyn=
 ext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "f=
 uture-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp"=
  "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macr=
 o-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme=
 " "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plane=
 t2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackun=
 it" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "=
 scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi"=
  "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "=
 test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstab=
 le" "version" "web-server" "wxme" "xml" "xrepl"))
 >>=20
 >> Computer Language: (("Teaching Languages" "How to Design Programs" "Begin=
 ning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >>=20
 >>=20
 >=20
 
 --Apple-Mail-48CD6C47-8BA0-4144-B79F-28DB6CFDA20A
 Content-Transfer-Encoding: 7bit
 Content-Type: text/html;
 	charset=utf-8
 
 <html><head></head><body bgcolor="#FFFFFF"><div>No, I get #f too -- the problem being that the program logic suggests that those two halves should be equal, both visually and in the image-equality sense, but they in fact are not (in either sense).<br><br>Best,<div>Jordan</div></div><div><br>On Feb 21, 2013, at 6:20 PM, Robby Findler &lt;<a href="mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br><br></div><div></div><blockquote type="cite"><div><div dir="ltr">I get #f when I change the beside to equal?. Do you get #t?<div><br></div><div>Robby</div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Thu, Feb 21, 2013 at 7:54 PM, Jordan Johnson <span dir="ltr">&lt;<a href="mailto:jmj@fellowhuman.com" target="_blank">jmj@fellowhuman.com</a>&gt;</span> wrote:<br>
 <blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div bgcolor="#FFFFFF"><div>Hi Robby,</div><div><br></div><div>Try this code (distilled and abbreviated from my student's work):</div>
 <div><div><br></div><div>;; --- begin</div><div>#lang racket</div><div><br></div><div>(require 2htdp/image)</div><div><br></div><div>;; photo-negative : image -&gt; image</div><div>;; takes an image and gives the same image, where every pixel is</div>
 <div>;; the opposite color.</div><div>(define (photo-negative i)</div><div>&nbsp; (color-list-&gt;bitmap (map negate-color (image-&gt;color-list i))</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (image-width i)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (image-height i)))</div>
 <div><br></div><div>(define (negate-color c) ; color -&gt; color</div><div>&nbsp; (define (neg x) (- 255 x))</div><div>&nbsp; (make-color (neg (color-red c)) (neg (color-green c)) (neg (color-blue c))</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (color-alpha c)))</div>
 <div><br></div><div>(beside (photo-negative (square 200 'solid (make-color&nbsp;<a href="tel:30%2015%20255%20200" target="_blank">30 15 255 200</a>)))</div><div>&nbsp; &nbsp; &nbsp; &nbsp; (square 200 'solid (make-color&nbsp;<a href="tel:225%20240%200%20200" target="_blank">225 240 0 200</a>)))</div>
 <div>;; --- end</div><div><br></div><div>On my machine and monitor, the beside-expression at the end produces an image with two regions of visibly distinct colors.</div><br>Best,<div>Jordan</div></div><div class="im"><div>
 <br>On Feb 21, 2013, at 5:07 PM, Robby Findler &lt;<a href="mailto:robby@eecs.northwestern.edu" target="_blank">robby@eecs.northwestern.edu</a>&gt; wrote:<br><br></div><div></div></div><div><div class="h5"><blockquote type="cite">
 <div><div dir="ltr">This program's behavior actually seems fine to me.&nbsp;<div><br></div><div>For the first list, I think this is just rounding errors (and they will likely be platform-specific).&nbsp;</div><div><br></div><div>
 For the triangle, those two triangles draw exactly the same, presumably because of the rounding errors. Image equality isn't structural; it draws the images and then compares them, pixel by pixel (with some performance improvements in certain cases that avoids the drawing but I don't believe that's happening in this case).</div>
 
 <div><br>Robby</div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Thu, Feb 21, 2013 at 4:44 PM,  <span dir="ltr">&lt;<a href="mailto:jmj@fellowhuman.com" target="_blank">jmj@fellowhuman.com</a>&gt;</span> wrote:<br>
 
 <blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 &nbsp; <a href="http://bugs.racket-lang.org/query/?cmd=view&amp;pr=13541" target="_blank">http://bugs.racket-lang.org/query/?cmd=view&amp;pr=13541</a><br>
 <br>
 Reported by Jordan Johnson for release: 5.3.3<br>
 <br>
 *** Description:<br>
 When make-color is used as an argument to various drawing primitives in the 2htdp/image library (e.g., circle, square, rectangle, ellipse), the color is altered. &nbsp;The resulting color has RGB values that may not be equal to the input color's corresponding values.<br>
 
 
 <br>
 This does not occur for all RGB values, and it depends in part upon the alpha value for the color; with full opacity (255) it does not occur, but at lower opacities the RGB values are further off.<br>
 <br>
 This behavior is present on v5.3.1 and v5.3.3, tested by running on Windows in DrRacket and on Linux via gracket-text. &nbsp;The behavior was NOT present in v5.2.1 on Linux.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require 2htdp/image)<br>
 <br>
 ;; This shows which colors are being altered:<br>
 (build-list 255 (lambda (i)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (list i<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '-&gt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (image-&gt;color-list<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(square 1 'solid (make-color i i i 200))))))<br>
 <br>
 ;; This should produce false, but produces true:<br>
 (image=? (triangle 1 'solid (make-color 103 103 103 200))<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(triangle 1 'solid (make-color 104 104 104 200)))<br>
 <br>
 *** Environment:<br>
 windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32<br>
 Human Language: english<br>
 (current-memory-use) 237997864<br>
 Links: (links) = ("hw" "hw-solutions" "jmj"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 &nbsp;[none]<br>
 User-specific, all-version:<br>
 &nbsp;[none]<br>
 User-specific, version-specific:<br>
 &nbsp;[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 ("C:\\Users\\jjohnson.INTERNAL\\AppData\\Roaming\\Racket\\5.3.3\\collects"<br>
 &nbsp;(non-existent-path))<br>
 ("C:\\Program Files\\Racket\\collects"<br>
 &nbsp;("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))<br>
 
 
 <br>
 Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))<br>
 <br>
 </blockquote></div><br></div>
 </div></blockquote></div></div></div></blockquote></div><br></div>
 </div></blockquote></body></html>
 --Apple-Mail-48CD6C47-8BA0-4144-B79F-28DB6CFDA20A--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jordan Johnson <jmj@fellowhuman.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 21:23:00 -0600

 --14dae93b59b65b8f7204d647b517
 Content-Type: text/plain; charset=UTF-8
 
 This all seems to be the same issue to me. When you draw with a non-255
 alpha value then the color that you're drawing falls between two integer
 values and so it picks one and that's why those two triangles, with
 different rgb values actually draw the same way and that's why you get
 slightly different results for the big squares.
 
 And ultimately there isn't much we can do about this at the Racket level
 anyways: the 2htdp/image library defers to the platform-specific drawing
 library (not even directly, but via the cairo library) -- what you're
 seeing is a reflection of how that behaves.
 
 At least I think so; it is possible that the racket/gui layer could change
 to use floats or something for color values and that might get you more
 precision, but I'm not sure that that's even available without
 re-implementing cairo. Matthew would know more, but I'm sure that, from the
 larger perspective, it was a huge win for us to be able to rely on cairo so
 I don't think we'll really serious consider going back on that particular
 design decision, I'm sorry to say.
 
 Robby
 
 On Thursday, February 21, 2013, Jordan Johnson wrote:
 
 > No, I get #f too -- the problem being that the program logic suggests that
 > those two halves should be equal, both visually and in the image-equality
 > sense, but they in fact are not (in either sense).
 >
 > Best,
 > Jordan
 >
 > On Feb 21, 2013, at 6:20 PM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >
 > I get #f when I change the beside to equal?. Do you get #t?
 >
 > Robby
 >
 >
 > On Thu, Feb 21, 2013 at 7:54 PM, Jordan Johnson <jmj@fellowhuman.com>wrote:
 >
 > Hi Robby,
 >
 > Try this code (distilled and abbreviated from my student's work):
 >
 > ;; --- begin
 > #lang racket
 >
 > (require 2htdp/image)
 >
 > ;; photo-negative : image -> image
 > ;; takes an image and gives the same image, where every pixel is
 > ;; the opposite color.
 > (define (photo-negative i)
 >   (color-list->bitmap (map negate-color (image->color-list i))
 >                       (image-width i)
 >                       (image-height i)))
 >
 > (define (negate-color c) ; color -> color
 >   (define (neg x) (- 255 x))
 >   (make-color (neg (color-red c)) (neg (color-green c)) (neg (color-blue
 > c))
 >               (color-alpha c)))
 >
 > (beside (photo-negative (square 200 'solid (make-color 30 15 255 200)))
 >         (square 200 'solid (make-color 225 240 0 200)))
 > ;; --- end
 >
 > On my machine and monitor, the beside-expression at the end produces an
 > image with two regions of visibly distinct colors.
 >
 > Best,
 > Jordan
 >
 > On Feb 21, 2013, at 5:07 PM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >
 > This program's behavior actually seems fine to me.
 >
 > For the first list, I think this is just rounding errors (and they will
 > likely be platform-specific).
 >
 > For the triangle, those two triangles draw exactly the same, presumably
 > because of the rounding errors. Image equality isn't structural; it draws
 > the images and then compares them, pixel by pixel (with some performance
 > improvements in certain cases that avoids the drawing but I don't believe
 > that's happening in this case).
 >
 > Robby
 >
 >
 > On Thu, Feb 21, 2013 at 4:44 PM, <jmj@fellowhuman.com> wrote:
 >
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13541
 >
 > Reported by Jordan Johnson for release: 5.3.3
 >
 > *** Description:
 > When make-color is used as an argument to various drawing primitives in
 > the 2htdp/image library (e.g., circle, square, rectangle, ellipse), the
 > color is altered.  The resulting color has RGB values that may not be equal
 > to the input color's corresponding values.
 >
 > This does not occur for all RGB values, and it depends in part upon the
 > alpha value for the color; with full opacity (255) it does not occur, but
 > at lower opacities the RGB values are further off.
 >
 > This behavior is present on v5.3.1 and v5.3.3, tested by running on
 > Windows in DrRacket and on Linux via gracket-text.  The behavior was NOT
 > present in v5.2.1 on Linux.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (require 2htdp/image)
 >
 > ;; This shows which colors are being altered:
 > (build-list 255 (lambda (i)
 >                   (list i
 >                         '->
 >                         (image->color-list
 >                          (square 1 'solid (make-color i i i 200))))))
 >
 > ;; This should produce false, but produces true:
 > (image=? (triangle 1 'solid (make-color 103 103 103 200))
 >          (triangle 1 'solid (make-color 104 104 104 200)))
 >
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m)
 > (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 237997864
 > Links: (links) = ("hw" "hw-solutions" "jmj"); (links #:user? #f) = ();
 > (links #:root? #t) = (); (links #
 >
 >
 
 --14dae93b59b65b8f7204d647b517
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 This all seems to be the same issue to me. When you draw with a non-255 alp=
 ha value then the color that you&#39;re drawing falls between two integer v=
 alues and so it picks one and that&#39;s why those two triangles, with diff=
 erent rgb values actually draw the same way and that&#39;s why you get slig=
 htly different results for the big squares.<div>
 <br></div><div>And ultimately there isn&#39;t much we can do about this at =
 the Racket level anyways: the 2htdp/image library defers to the platform-sp=
 ecific drawing library (not even directly, but via the cairo library) -- wh=
 at you&#39;re seeing is a reflection of how that behaves.</div>
 <div><br></div><div>At least I think so; it is possible that the racket/gui=
  layer could change to use floats or something for color values and that mi=
 ght get you more precision, but I&#39;m not sure that that&#39;s even avail=
 able without re-implementing cairo. Matthew would know more, but I&#39;m su=
 re that, from the larger perspective, it was a huge win for us to be able t=
 o rely on cairo so I don&#39;t think we&#39;ll really serious consider goin=
 g back on that particular design decision, I&#39;m sorry to say.</div>
 <div><br></div><div>Robby<br><br>On Thursday, February 21, 2013, Jordan Joh=
 nson  wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8e=
 x;border-left:1px #ccc solid;padding-left:1ex"><div bgcolor=3D"#FFFFFF"><di=
 v>
 No, I get #f too -- the problem being that the program logic suggests that =
 those two halves should be equal, both visually and in the image-equality s=
 ense, but they in fact are not (in either sense).<br><br>Best,<div>Jordan</=
 div>
 </div><div><br>On Feb 21, 2013, at 6:20 PM, Robby Findler &lt;<a>robby@eecs=
 .northwestern.edu</a>&gt; wrote:<br><br></div><div></div><blockquote type=
 =3D"cite"><div><div dir=3D"ltr">I get #f when I change the beside to equal?=
 . Do you get #t?<div>
 <br></div><div>Robby</div></div><div><br><br><div>On Thu, Feb 21, 2013 at 7=
 :54 PM, Jordan Johnson <span dir=3D"ltr">&lt;<a>jmj@fellowhuman.com</a>&gt;=
 </span> wrote:<br>
 <blockquote style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
 eft:1ex"><div bgcolor=3D"#FFFFFF"><div>Hi Robby,</div><div><br></div><div>T=
 ry this code (distilled and abbreviated from my student&#39;s work):</div>
 
 <div><div><br></div><div>;; --- begin</div><div>#lang racket</div><div><br>=
 </div><div>(require 2htdp/image)</div><div><br></div><div>;; photo-negative=
  : image -&gt; image</div><div>;; takes an image and gives the same image, =
 where every pixel is</div>
 
 <div>;; the opposite color.</div><div>(define (photo-negative i)</div><div>=
 =C2=A0 (color-list-&gt;bitmap (map negate-color (image-&gt;color-list i))</=
 div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (image-width i)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (image-height i)))</div>
 
 <div><br></div><div>(define (negate-color c) ; color -&gt; color</div><div>=
 =C2=A0 (define (neg x) (- 255 x))</div><div>=C2=A0 (make-color (neg (color-=
 red c)) (neg (color-green c)) (neg (color-blue c))</div><div>=C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (color-alpha c)))</div>
 
 <div><br></div><div>(beside (photo-negative (square 200 &#39;solid (make-co=
 lor=C2=A0<a>30 15 255 200</a>)))</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 (squ=
 are 200 &#39;solid (make-color=C2=A0<a>225 240 0 200</a>)))</div>
 <div>;; --- end</div><div><br></div><div>On my machine and monitor, the bes=
 ide-expression at the end produces an image with two regions of visibly dis=
 tinct colors.</div><br>Best,<div>Jordan</div></div><div><div>
 <br>On Feb 21, 2013, at 5:07 PM, Robby Findler &lt;<a>robby@eecs.northweste=
 rn.edu</a>&gt; wrote:<br><br></div><div></div></div><div><div><blockquote t=
 ype=3D"cite">
 <div><div dir=3D"ltr">This program&#39;s behavior actually seems fine to me=
 .=C2=A0<div><br></div><div>For the first list, I think this is just roundin=
 g errors (and they will likely be platform-specific).=C2=A0</div><div><br><=
 /div><div>
 
 For the triangle, those two triangles draw exactly the same, presumably bec=
 ause of the rounding errors. Image equality isn&#39;t structural; it draws =
 the images and then compares them, pixel by pixel (with some performance im=
 provements in certain cases that avoids the drawing but I don&#39;t believe=
  that&#39;s happening in this case).</div>
 
 
 <div><br>Robby</div></div><div><br><br><div>On Thu, Feb 21, 2013 at 4:44 PM=
 ,  <span dir=3D"ltr">&lt;<a>jmj@fellowhuman.com</a>&gt;</span> wrote:<br>
 
 <blockquote style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
 eft:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 541" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13541</a><br>
 <br>
 Reported by Jordan Johnson for release: 5.3.3<br>
 <br>
 *** Description:<br>
 When make-color is used as an argument to various drawing primitives in the=
  2htdp/image library (e.g., circle, square, rectangle, ellipse), the color =
 is altered. =C2=A0The resulting color has RGB values that may not be equal =
 to the input color&#39;s corresponding values.<br>
 
 
 
 <br>
 This does not occur for all RGB values, and it depends in part upon the alp=
 ha value for the color; with full opacity (255) it does not occur, but at l=
 ower opacities the RGB values are further off.<br>
 <br>
 This behavior is present on v5.3.1 and v5.3.3, tested by running on Windows=
  in DrRacket and on Linux via gracket-text. =C2=A0The behavior was NOT pres=
 ent in v5.2.1 on Linux.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require 2htdp/image)<br>
 <br>
 ;; This shows which colors are being altered:<br>
 (build-list 255 (lambda (i)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (list i<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 &#39;-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (image-&gt;color-list<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0(square 1 &#39;solid (make-color i i i 200))))))<br>
 <br>
 ;; This should produce false, but produces true:<br>
 (image=3D? (triangle 1 &#39;solid (make-color 103 103 103 200))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(triangle 1 &#39;solid (make-color 104 10=
 4 104 200)))<br>
 <br>
 *** Environment:<br>
 windows &quot;Windows NT 6.1 (Build 7601) Service Pack 1&quot; (win32\i386\=
 3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 237997864<br>
 Links: (links) =3D (&quot;hw&quot; &quot;hw-solutions&quot; &quot;jmj&quot;=
 ); (links #:user? #f) =3D (); (links #:root? #t) =3D (); (links #</blockquo=
 te></div></div></div></blockquote></div></div></div></blockquote></div></di=
 v>
 </div></blockquote></div></blockquote></div>
 
 --14dae93b59b65b8f7204d647b517--
From: Stephen Bloch <bloch@adelphi.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Jordan Johnson <jmj@fellowhuman.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 23:50:03 -0500

 On Feb 21, 2013, at 10:23 PM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 
 > This all seems to be the same issue to me. When you draw with a non-255 alpha value then the color that you're drawing falls between two integer values and so it picks one and that's why those two triangles, with different rgb values actually draw the same way and that's why you get slightly different results for the big squares.
 
 In the example at hand, there are two constant-colored squares which, in a just world, should be pixel-for-pixel identical.  Yes, they both have non-255 alphas, but that shouldn't affect their rgb fields; it should only affect the way their rgb fields show up on the screen.  (Genotype, not phenotype.)  In fact, since they both have the same non-255 alpha and they're both being drawn on the same background, they should STILL show up identically.
 
 > And ultimately there isn't much we can do about this at the Racket level anyways: the 2htdp/image library defers to the platform-specific drawing library (not even directly, but via the cairo library) -- what you're seeing is a reflection of how that behaves.
 
 Sure, the image library uses a platform-specific drawing library to draw things on the screen.  But why should decisions made by that platform-specific library leak back into the image library's data structures?
 
 
From: Jordan Johnson <jmj@fellowhuman.com>
To: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Cc: 
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Thu, 21 Feb 2013 20:55:08 -0800

 ------UOA6ZU2RJI9DNJJ97YPZEZJ9ZLMWTF
 Content-Type: text/plain;
  charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Ok, lemme make sure I'm following correctly:
 
 In any operation
 	 (F (square 200 'solid (make-color R1 G1 B1 A1))
 where F produces a bitmap, the procedure is something like
 
 	1) Racket evaluates the color and produces some internal (vector-based) =
 representation of a square of the exact color specified
 	2) Racket calls out to cairo, which does its own color calculations and =
 produces a bitmap representation in which new values R2, G2, B2 for each =
 pixel are computed based on R1, G1, B1, and A1
 	3) whenever the color of a pixel in the result of (F ...) is needed, Rac=
 ket reads it from said bitmap.
 
 Is that right? (And, I imagine, v5.2.1 predates the switch to cairo?)
 
 Hm. Then this could be considered a documentation & education issue -- it=
  does violate the expectations of a graphics-inexperienced user, in that =
 the exposed representation of color, a struct, suggests that RGB values a=
 re independent of alpha -- but I'm not sure what to suggest as a way of d=
 ocumenting it. Perhaps the best that can be done is to add a line to the =
 teachpack's documentation of color structs and/or image->color-list, docu=
 menting that actual RGB values of bitmap pixels may differ from those spe=
 cified in the color struct, when alpha < 255?
 
 Or perhaps what we really need is for the printer to show
 	#i(make-color R G B A)
 if A < 255.  :)  (No, I'm not serious.)
 
 Thanks for taking the time to explain.
 
 Best,
 jmj=20
 --=20
 Sent from my Android phone with K-9 Mail.
 
 Robby Findler <robby@eecs.northwestern.edu> wrote:
 
 >This all seems to be the same issue to me. When you draw with a non-255
 >alpha value then the color that you're drawing falls between two
 >integer
 >values and so it picks one and that's why those two triangles, with
 >different rgb values actually draw the same way and that's why you get
 >slightly different results for the big squares.
 >
 >And ultimately there isn't much we can do about this at the Racket
 >level
 >anyways: the 2htdp/image library defers to the platform-specific
 >drawing
 >library (not even directly, but via the cairo library) -- what you're
 >seeing is a reflection of how that behaves.
 >
 >At least I think so; it is possible that the racket/gui layer could
 >change
 >to use floats or something for color values and that might get you more
 >precision, but I'm not sure that that's even available without
 >re-implementing cairo. Matthew would know more, but I'm sure that, from
 >the
 >larger perspective, it was a huge win for us to be able to rely on
 >cairo so
 >I don't think we'll really serious consider going back on that
 >particular
 >design decision, I'm sorry to say.
 >
 >Robby
 >
 >On Thursday, February 21, 2013, Jordan Johnson wrote:
 >
 >> No, I get #f too -- the problem being that the program logic suggests
 >that
 >> those two halves should be equal, both visually and in the
 >image-equality
 >> sense, but they in fact are not (in either sense).
 >>
 >> Best,
 >> Jordan
 >>
 >> On Feb 21, 2013, at 6:20 PM, Robby Findler
 ><robby@eecs.northwestern.edu>
 >> wrote:
 >>
 >> I get #f when I change the beside to equal?. Do you get #t?
 >>
 >> Robby
 >>
 >>
 >> On Thu, Feb 21, 2013 at 7:54 PM, Jordan Johnson
 ><jmj@fellowhuman.com>wrote:
 >>
 >> Hi Robby,
 >>
 >> Try this code (distilled and abbreviated from my student's work):
 >>
 >> ;; --- begin
 >> #lang racket
 >>
 >> (require 2htdp/image)
 >>
 >> ;; photo-negative : image -> image
 >> ;; takes an image and gives the same image, where every pixel is
 >> ;; the opposite color.
 >> (define (photo-negative i)
 >>   (color-list->bitmap (map negate-color (image->color-list i))
 >>                       (image-width i)
 >>                       (image-height i)))
 >>
 >> (define (negate-color c) ; color -> color
 >>   (define (neg x) (- 255 x))
 >>   (make-color (neg (color-red c)) (neg (color-green c)) (neg
 >(color-blue
 >> c))
 >>               (color-alpha c)))
 >>
 >> (beside (photo-negative (square 200 'solid (make-color 30 15 255
 >200)))
 >>         (square 200 'solid (make-color 225 240 0 200)))
 >> ;; --- end
 >>
 >> On my machine and monitor, the beside-expression at the end produces
 >an
 >> image with two regions of visibly distinct colors.
 >>
 >> Best,
 >> Jordan
 >>
 >> On Feb 21, 2013, at 5:07 PM, Robby Findler
 ><robby@eecs.northwestern.edu>
 >> wrote:
 >>
 >> This program's behavior actually seems fine to me.
 >>
 >> For the first list, I think this is just rounding errors (and they
 >will
 >> likely be platform-specific).
 >>
 >> For the triangle, those two triangles draw exactly the same,
 >presumably
 >> because of the rounding errors. Image equality isn't structural; it
 >draws
 >> the images and then compares them, pixel by pixel (with some
 >performance
 >> improvements in certain cases that avoids the drawing but I don't
 >believe
 >> that's happening in this case).
 >>
 >> Robby
 >>
 >>
 >> On Thu, Feb 21, 2013 at 4:44 PM, <jmj@fellowhuman.com> wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13541
 >>
 >> Reported by Jordan Johnson for release: 5.3.3
 >>
 >> *** Description:
 >> When make-color is used as an argument to various drawing primitives
 >in
 >> the 2htdp/image library (e.g., circle, square, rectangle, ellipse),
 >the
 >> color is altered.  The resulting color has RGB values that may not be
 >equal
 >> to the input color's corresponding values.
 >>
 >> This does not occur for all RGB values, and it depends in part upon
 >the
 >> alpha value for the color; with full opacity (255) it does not occur,
 >but
 >> at lower opacities the RGB values are further off.
 >>
 >> This behavior is present on v5.3.1 and v5.3.3, tested by running on
 >> Windows in DrRacket and on Linux via gracket-text.  The behavior was
 >NOT
 >> present in v5.2.1 on Linux.
 >>
 >> *** How to repeat:
 >> #lang racket
 >>
 >> (require 2htdp/image)
 >>
 >> ;; This shows which colors are being altered:
 >> (build-list 255 (lambda (i)
 >>                   (list i
 >>                         '->
 >>                         (image->color-list
 >>                          (square 1 'solid (make-color i i i 200))))))
 >>
 >> ;; This should produce false, but produces true:
 >> (image=3D? (triangle 1 'solid (make-color 103 103 103 200))
 >>          (triangle 1 'solid (make-color 104 104 104 200)))
 >>
 >> *** Environment:
 >> windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m)
 >> (get-display-depth) =3D 32
 >> Human Language: english
 >> (current-memory-use) 237997864
 >> Links: (links) =3D ("hw" "hw-solutions" "jmj"); (links #:user? #f) =3D
 >();
 >> (links #:root? #t) =3D (); (links #
 >>
 >>
 
 ------UOA6ZU2RJI9DNJJ97YPZEZJ9ZLMWTF
 Content-Type: text/html;
  charset=utf-8
 Content-Transfer-Encoding: quoted-printable
 
 <html><head/><body><html><head></head><body>Ok, lemme make sure I&#39;m f=
 ollowing correctly:<br>
 <br>
 In any operation<br>
 	 (F (square 200 &#39;solid (make-color R1 G1 B1 A1))<br>
 where F produces a bitmap, the procedure is something like<br>
 <br>
 	1) Racket evaluates the color and produces some internal (vector-based) =
 representation of a square of the exact color specified<br>
 	2) Racket calls out to cairo, which does its own color calculations and =
 produces a bitmap representation in which new values R2, G2, B2 for each =
 pixel are computed based on R1, G1, B1, and A1<br>
 	3) whenever the color of a pixel in the result of (F ...) is needed, Rac=
 ket reads it from said bitmap.<br>
 <br>
 Is that right? (And, I imagine, v5.2.1 predates the switch to cairo?)<br>
 <br>
 Hm. Then this could be considered a documentation &amp; education issue -=
 - it does violate the expectations of a graphics-inexperienced user, in t=
 hat the exposed representation of color, a struct, suggests that RGB valu=
 es are independent of alpha -- but I&#39;m not sure what to suggest as a =
 way of documenting it. Perhaps the best that can be done is to add a line=
  to the teachpack&#39;s documentation of color structs and/or image-&gt;c=
 olor-list, documenting that actual RGB values of bitmap pixels may differ=
  from those specified in the color struct, when alpha &lt; 255?<br>
 <br>
 Or perhaps what we really need is for the printer to show<br>
 	#i(make-color R G B A)<br>
 if A &lt; 255.  :)  (No, I&#39;m not serious.)<br>
 <br>
 Thanks for taking the time to explain.<br>
 <br>
 Best,<br>
 jmj <br>
 -- <br>
 Sent from my Android phone with K-9 Mail.<br><br><div class=3D"gmail_quot=
 e">Robby Findler &lt;robby@eecs.northwestern.edu&gt; wrote:<blockquote cl=
 ass=3D"gmail_quote" style=3D"margin: 0pt 0pt 0pt 0.8ex; border-left: 1px =
 solid rgb(204, 204, 204); padding-left: 1ex;">
 This all seems to be the same issue to me. When you draw with a non-255 a=
 lpha value then the color that you&#39;re drawing falls between two integ=
 er values and so it picks one and that&#39;s why those two triangles, wit=
 h different rgb values actually draw the same way and that&#39;s why you =
 get slightly different results for the big squares.<div>
 <br /></div><div>And ultimately there isn&#39;t much we can do about this=
  at the Racket level anyways: the 2htdp/image library defers to the platf=
 orm-specific drawing library (not even directly, but via the cairo librar=
 y) -- what you&#39;re seeing is a reflection of how that behaves.</div>
 <div><br /></div><div>At least I think so; it is possible that the racket=
 /gui layer could change to use floats or something for color values and t=
 hat might get you more precision, but I&#39;m not sure that that&#39;s ev=
 en available without re-implementing cairo. Matthew would know more, but =
 I&#39;m sure that, from the larger perspective, it was a huge win for us =
 to be able to rely on cairo so I don&#39;t think we&#39;ll really serious=
  consider going back on that particular design decision, I&#39;m sorry to=
  say.</div>
 <div><br /></div><div>Robby<br /><br />On Thursday, February 21, 2013, Jo=
 rdan Johnson  wrote:<br /><blockquote class=3D"gmail_quote" style=3D"marg=
 in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div bgcolor=3D=
 "#FFFFFF"><div>
 No, I get #f too -- the problem being that the program logic suggests tha=
 t those two halves should be equal, both visually and in the image-equali=
 ty sense, but they in fact are not (in either sense).<br /><br />Best,<di=
 v>Jordan</div>
 </div><div><br />On Feb 21, 2013, at 6:20 PM, Robby Findler &lt;<a>robby@=
 eecs.northwestern.edu</a>&gt; wrote:<br /><br /></div><div></div><blockqu=
 ote type=3D"cite"><div><div dir=3D"ltr">I get #f when I change the beside=
  to equal?. Do you get #t?<div>
 <br /></div><div>Robby</div></div><div><br /><br /><div>On Thu, Feb 21, 2=
 013 at 7:54 PM, Jordan Johnson <span dir=3D"ltr">&lt;<a>jmj@fellowhuman.c=
 om</a>&gt;</span> wrote:<br />
 <blockquote style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding=
 -left:1ex"><div bgcolor=3D"#FFFFFF"><div>Hi Robby,</div><div><br /></div>=
 <div>Try this code (distilled and abbreviated from my student&#39;s work)=
 :</div>
 
 <div><div><br /></div><div>;; --- begin</div><div>#lang racket</div><div>=
 <br /></div><div>(require 2htdp/image)</div><div><br /></div><div>;; phot=
 o-negative : image -&gt; image</div><div>;; takes an image and gives the =
 same image, where every pixel is</div>
 
 <div>;; the opposite color.</div><div>(define (photo-negative i)</div><di=
 v>=C2=A0 (color-list-&gt;bitmap (map negate-color (image-&gt;color-list i=
 ))</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 (image-width i)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (image-height i)))</div>
 
 <div><br /></div><div>(define (negate-color c) ; color -&gt; color</div><=
 div>=C2=A0 (define (neg x) (- 255 x))</div><div>=C2=A0 (make-color (neg (=
 color-red c)) (neg (color-green c)) (neg (color-blue c))</div><div>=C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (color-alpha c)))</div>
 
 <div><br /></div><div>(beside (photo-negative (square 200 &#39;solid (mak=
 e-color=C2=A0<a>30 15 255 200</a>)))</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0=
  (square 200 &#39;solid (make-color=C2=A0<a>225 240 0 200</a>)))</div>
 <div>;; --- end</div><div><br /></div><div>On my machine and monitor, the=
  beside-expression at the end produces an image with two regions of visib=
 ly distinct colors.</div><br />Best,<div>Jordan</div></div><div><div>
 <br />On Feb 21, 2013, at 5:07 PM, Robby Findler &lt;<a>robby@eecs.northw=
 estern.edu</a>&gt; wrote:<br /><br /></div><div></div></div><div><div><bl=
 ockquote type=3D"cite">
 <div><div dir=3D"ltr">This program&#39;s behavior actually seems fine to =
 me.=C2=A0<div><br /></div><div>For the first list, I think this is just r=
 ounding errors (and they will likely be platform-specific).=C2=A0</div><d=
 iv><br /></div><div>
 
 For the triangle, those two triangles draw exactly the same, presumably b=
 ecause of the rounding errors. Image equality isn&#39;t structural; it dr=
 aws the images and then compares them, pixel by pixel (with some performa=
 nce improvements in certain cases that avoids the drawing but I don&#39;t=
  believe that&#39;s happening in this case).</div>
 
 
 <div><br />Robby</div></div><div><br /><br /><div>On Thu, Feb 21, 2013 at=
  4:44 PM,  <span dir=3D"ltr">&lt;<a>jmj@fellowhuman.com</a>&gt;</span> wr=
 ote:<br />
 
 <blockquote style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding=
 -left:1ex">A new problem report is waiting at<br />
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D=
 13541" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&am=
 p;pr=3D13541</a><br />
 <br />
 Reported by Jordan Johnson for release: 5.3.3<br />
 <br />
 *** Description:<br />
 When make-color is used as an argument to various drawing primitives in t=
 he 2htdp/image library (e.g., circle, square, rectangle, ellipse), the co=
 lor is altered. =C2=A0The resulting color has RGB values that may not be =
 equal to the input color&#39;s corresponding values.<br />
 
 
 
 <br />
 This does not occur for all RGB values, and it depends in part upon the a=
 lpha value for the color; with full opacity (255) it does not occur, but =
 at lower opacities the RGB values are further off.<br />
 <br />
 This behavior is present on v5.3.1 and v5.3.3, tested by running on Windo=
 ws in DrRacket and on Linux via gracket-text. =C2=A0The behavior was NOT =
 present in v5.2.1 on Linux.<br />
 <br />
 *** How to repeat:<br />
 #lang racket<br />
 <br />
 (require 2htdp/image)<br />
 <br />
 ;; This shows which colors are being altered:<br />
 (build-list 255 (lambda (i)<br />
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (list i<br=
  />
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 &#39;-&gt;<br />
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (image-&gt;color-list<br />
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0(square 1 &#39;solid (make-color i i i 200))))))<br />
 <br />
 ;; This should produce false, but produces true:<br />
 (image=3D? (triangle 1 &#39;solid (make-color 103 103 103 200))<br />
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(triangle 1 &#39;solid (make-color 104 =
 104 104 200)))<br />
 <br />
 *** Environment:<br />
 windows &quot;Windows NT 6.1 (Build 7601) Service Pack 1&quot; (win32\i38=
 6\3m) (get-display-depth) =3D 32<br />
 Human Language: english<br />
 (current-memory-use) 237997864<br />
 Links: (links) =3D (&quot;hw&quot; &quot;hw-solutions&quot; &quot;jmj&quo=
 t;); (links #:user? #f) =3D (); (links #:root? #t) =3D (); (links #</bloc=
 kquote></div></div></div></blockquote></div></div></div></blockquote></di=
 v></div>
 </div></blockquote></div></blockquote></div>
 </blockquote></div></body></html></body></html>
 ------UOA6ZU2RJI9DNJJ97YPZEZJ9ZLMWTF--
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stephen Bloch <bloch@adelphi.edu>
Cc: Jordan Johnson <jmj@fellowhuman.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Fri, 22 Feb 2013 07:39:11 -0600

 --e89a8f923da2fcf07e04d650503a
 Content-Type: text/plain; charset=UTF-8
 
 On Thu, Feb 21, 2013 at 10:50 PM, Stephen Bloch <bloch@adelphi.edu> wrote:
 
 >
 > On Feb 21, 2013, at 10:23 PM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >
 > > This all seems to be the same issue to me. When you draw with a non-255
 > alpha value then the color that you're drawing falls between two integer
 > values and so it picks one and that's why those two triangles, with
 > different rgb values actually draw the same way and that's why you get
 > slightly different results for the big squares.
 >
 > In the example at hand, there are two constant-colored squares which, in a
 > just world, should be pixel-for-pixel identical.  Yes, they both have
 > non-255 alphas, but that shouldn't affect their rgb fields; it should only
 > affect the way their rgb fields show up on the screen.  (Genotype, not
 > phenotype.)  In fact, since they both have the same non-255 alpha and
 > they're both being drawn on the same background, they should STILL show up
 > identically.
 >
 >
 No, I don't think this is an accurate characterization of reality. The
 result of photo-negative has different rgb values than the other one, due
 to the rounding error introduced by image->color-list.
 
 
 > > And ultimately there isn't much we can do about this at the Racket level
 > anyways: the 2htdp/image library defers to the platform-specific drawing
 > library (not even directly, but via the cairo library) -- what you're
 > seeing is a reflection of how that behaves.
 >
 > Sure, the image library uses a platform-specific drawing library to draw
 > things on the screen.  But why should decisions made by that
 > platform-specific library leak back into the image library's data
 > structures?
 >
 >
 How else should image->color-list be implemented besides drawing the image?
 
 Robby
 
 --e89a8f923da2fcf07e04d650503a
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Thu, Feb 21, 2013 at 10:50 PM, Stephen Bloch <span dir=3D"ltr">&=
 lt;<a href=3D"mailto:bloch@adelphi.edu" target=3D"_blank">bloch@adelphi.edu=
 </a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex"><div class=3D"im"><br>
 On Feb 21, 2013, at 10:23 PM, Robby Findler &lt;<a href=3D"mailto:robby@eec=
 s.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 <br>
 &gt; This all seems to be the same issue to me. When you draw with a non-25=
 5 alpha value then the color that you&#39;re drawing falls between two inte=
 ger values and so it picks one and that&#39;s why those two triangles, with=
  different rgb values actually draw the same way and that&#39;s why you get=
  slightly different results for the big squares.<br>
 
 <br>
 </div>In the example at hand, there are two constant-colored squares which,=
  in a just world, should be pixel-for-pixel identical. =C2=A0Yes, they both=
  have non-255 alphas, but that shouldn&#39;t affect their rgb fields; it sh=
 ould only affect the way their rgb fields show up on the screen. =C2=A0(Gen=
 otype, not phenotype.) =C2=A0In fact, since they both have the same non-255=
  alpha and they&#39;re both being drawn on the same background, they should=
  STILL show up identically.<br>
 
 <div class=3D"im"><br></div></blockquote><div><br></div><div style>No, I do=
 n&#39;t think this is an accurate characterization of reality. The result o=
 f photo-negative has different rgb values than the other one, due to the ro=
 unding error introduced by image-&gt;color-list.</div>
 <div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px =
 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-l=
 eft-style:solid;padding-left:1ex"><div class=3D"im">
 &gt; And ultimately there isn&#39;t much we can do about this at the Racket=
  level anyways: the 2htdp/image library defers to the platform-specific dra=
 wing library (not even directly, but via the cairo library) -- what you&#39=
 ;re seeing is a reflection of how that behaves.<br>
 
 <br>
 </div>Sure, the image library uses a platform-specific drawing library to d=
 raw things on the screen. =C2=A0But why should decisions made by that platf=
 orm-specific library leak back into the image library&#39;s data structures=
 ?<br>
 
 <br>
 </blockquote></div><br></div><div class=3D"gmail_extra" style>How else shou=
 ld image-&gt;color-list be implemented besides drawing the image?</div><div=
  class=3D"gmail_extra" style><br></div><div class=3D"gmail_extra" style>Rob=
 by</div>
 </div>
 
 --e89a8f923da2fcf07e04d650503a--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jordan Johnson <jmj@fellowhuman.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Fri, 22 Feb 2013 07:39:56 -0600

 --14dae939992db4811f04d6505349
 Content-Type: text/plain; charset=UTF-8
 
 This is my take on what's happening, but I should be clear here: I am not
 positive that that's what's happening.
 
 Let me try to get more confirmation and, if it is, I can add a section to
 the docs that tries to explain this.
 
 Robby
 
 
 On Thu, Feb 21, 2013 at 10:55 PM, Jordan Johnson <jmj@fellowhuman.com>wrote:
 
 > Ok, lemme make sure I'm following correctly:
 >
 > In any operation
 > (F (square 200 'solid (make-color R1 G1 B1 A1))
 > where F produces a bitmap, the procedure is something like
 >
 > 1) Racket evaluates the color and produces some internal (vector-based)
 > representation of a square of the exact color specified
 > 2) Racket calls out to cairo, which does its own color calculations and
 > produces a bitmap representation in which new values R2, G2, B2 for each
 > pixel are computed based on R1, G1, B1, and A1
 > 3) whenever the color of a pixel in the result of (F ...) is needed,
 > Racket reads it from said bitmap.
 >
 > Is that right? (And, I imagine, v5.2.1 predates the switch to cairo?)
 >
 > Hm. Then this could be considered a documentation & education issue -- it
 > does violate the expectations of a graphics-inexperienced user, in that the
 > exposed representation of color, a struct, suggests that RGB values are
 > independent of alpha -- but I'm not sure what to suggest as a way of
 > documenting it. Perhaps the best that can be done is to add a line to the
 > teachpack's documentation of color structs and/or image->color-list,
 > documenting that actual RGB values of bitmap pixels may differ from those
 > specified in the color struct, when alpha < 255?
 >
 > Or perhaps what we really need is for the printer to show
 > #i(make-color R G B A)
 > if A < 255. :) (No, I'm not serious.)
 >
 > Thanks for taking the time to explain.
 >
 > Best,
 > jmj
 > --
 > Sent from my Android phone with K-9 Mail.
 >
 >
 > Robby Findler <robby@eecs.northwestern.edu> wrote:
 >>
 >> This all seems to be the same issue to me. When you draw with a non-255
 >> alpha value then the color that you're drawing falls between two integer
 >> values and so it picks one and that's why those two triangles, with
 >> different rgb values actually draw the same way and that's why you get
 >> slightly different results for the big squares.
 >>
 >> And ultimately there isn't much we can do about this at the Racket level
 >> anyways: the 2htdp/image library defers to the platform-specific drawing
 >> library (not even directly, but via the cairo library) -- what you're
 >> seeing is a reflection of how that behaves.
 >>
 >> At least I think so; it is possible that the racket/gui layer could
 >> change to use floats or something for color values and that might get you
 >> more precision, but I'm not sure that that's even available without
 >> re-implementing cairo. Matthew would know more, but I'm sure that, from the
 >> larger perspective, it was a huge win for us to be able to rely on cairo so
 >> I don't think we'll really serious consider going back on that particular
 >> design decision, I'm sorry to say.
 >>
 >> Robby
 >>
 >> On Thursday, February 21, 2013, Jordan Johnson wrote:
 >>
 >>> No, I get #f too -- the problem being that the program logic suggests
 >>> that those two halves should be equal, both visually and in the
 >>> image-equality sense, but they in fact are not (in either sense).
 >>>
 >>> Best,
 >>> Jordan
 >>>
 >>> On Feb 21, 2013, at 6:20 PM, Robby Findler <robby@eecs.northwestern.edu>
 >>> wrote:
 >>>
 >>> I get #f when I change the beside to equal?. Do you get #t?
 >>>
 >>> Robby
 >>>
 >>>
 >>> On Thu, Feb 21, 2013 at 7:54 PM, Jordan Johnson <jmj@fellowhuman.com>wrote:
 >>>
 >>> Hi Robby,
 >>>
 >>> Try this code (distilled and abbreviated from my student's work):
 >>>
 >>> ;; --- begin
 >>> #lang racket
 >>>
 >>> (require 2htdp/image)
 >>>
 >>> ;; photo-negative : image -> image
 >>> ;; takes an image and gives the same image, where every pixel is
 >>> ;; the opposite color.
 >>> (define (photo-negative i)
 >>>   (color-list->bitmap (map negate-color (image->color-list i))
 >>>                       (image-width i)
 >>>                       (image-height i)))
 >>>
 >>> (define (negate-color c) ; color -> color
 >>>   (define (neg x) (- 255 x))
 >>>   (make-color (neg (color-red c)) (neg (color-green c)) (neg (color-blue
 >>> c))
 >>>               (color-alpha c)))
 >>>
 >>> (beside (photo-negative (square 200 'solid (make-color 30 15 255 200)))
 >>>         (square 200 'solid (make-color 225 240 0 200)))
 >>> ;; --- end
 >>>
 >>> On my machine and monitor, the beside-expression at the end produces an
 >>> image with two regions of visibly distinct colors.
 >>>
 >>> Best,
 >>> Jordan
 >>>
 >>> On Feb 21, 2013, at 5:07 PM, Robby Findler <robby@eecs.northwestern.edu>
 >>> wrote:
 >>>
 >>> This program's behavior actually seems fine to me.
 >>>
 >>> For the first list, I think this is just rounding errors (and they will
 >>> likely be platform-specific).
 >>>
 >>> For the triangle, those two triangles draw exactly the same, presumably
 >>> because of the rounding errors. Image equality isn't structural; it draws
 >>> the images and then compares them, pixel by pixel (with some performance
 >>> improvements in certain cases that avoids the drawing but I don't believe
 >>> that's happening in this case).
 >>>
 >>> Robby
 >>>
 >>>
 >>> On Thu, Feb 21, 2013 at 4:44 PM, <jmj@fellowhuman.com> wrote:
 >>>
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=13541
 >>>
 >>> Reported by Jordan Johnson for release: 5.3.3
 >>>
 >>> *** Description:
 >>> When make-color is used as an argument to various drawing primitives in
 >>> the 2htdp/image library (e.g., circle, square, rectangle, ellipse), the
 >>> color is altered.  The resulting color has RGB values that may not be equal
 >>> to the input color's corresponding values.
 >>>
 >>> This does not occur for all RGB values, and it depends in part upon the
 >>> alpha value for the color; with full opacity (255) it does not occur, but
 >>> at lower opacities the RGB values are further off.
 >>>
 >>> This behavior is present on v5.3.1 and v5.3.3, tested by running on
 >>> Windows in DrRacket and on Linux via gracket-text.  The behavior was NOT
 >>> present in v5.2.1 on Linux.
 >>>
 >>> *** How to repeat:
 >>> #lang racket
 >>>
 >>> (require 2htdp/image)
 >>>
 >>> ;; This shows which colors are being altered:
 >>> (build-list 255 (lambda (i)
 >>>                   (list i
 >>>                         '->
 >>>                         (image->color-list
 >>>                          (square 1 'solid (make-color i i i 200))))))
 >>>
 >>> ;; This should produce false, but produces true:
 >>> (image=? (triangle 1 'solid (make-color 103 103 103 200))
 >>>          (triangle 1 'solid (make-color 104 104 104 200)))
 >>>
 >>> *** Environment:
 >>> windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m)
 >>> (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 237997864
 >>> Links: (links) = ("hw" "hw-solutions" "jmj"); (links #:user? #f) = ();
 >>> (links #:root? #t) = (); (links #
 >>>
 >>>
 
 --14dae939992db4811f04d6505349
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">This is my take on what&#39;s happening, but I should be c=
 lear here: I am not positive that that&#39;s what&#39;s happening.<div><br>=
 </div><div style>Let me try to get more confirmation and, if it is, I can a=
 dd a section to the docs that tries to explain this.</div>
 <div style><br></div><div style>Robby</div></div><div class=3D"gmail_extra"=
 ><br><br><div class=3D"gmail_quote">On Thu, Feb 21, 2013 at 10:55 PM, Jorda=
 n Johnson <span dir=3D"ltr">&lt;<a href=3D"mailto:jmj@fellowhuman.com" targ=
 et=3D"_blank">jmj@fellowhuman.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div><div>Ok, lemme make sure I&#39;m follow=
 ing correctly:<br>
 <br>
 In any operation<br>
 	 (F (square 200 &#39;solid (make-color R1 G1 B1 A1))<br>
 where F produces a bitmap, the procedure is something like<br>
 <br>
 	1) Racket evaluates the color and produces some internal (vector-based) re=
 presentation of a square of the exact color specified<br>
 	2) Racket calls out to cairo, which does its own color calculations and pr=
 oduces a bitmap representation in which new values R2, G2, B2 for each pixe=
 l are computed based on R1, G1, B1, and A1<br>
 	3) whenever the color of a pixel in the result of (F ...) is needed, Racke=
 t reads it from said bitmap.<br>
 <br>
 Is that right? (And, I imagine, v5.2.1 predates the switch to cairo?)<br>
 <br>
 Hm. Then this could be considered a documentation &amp; education issue -- =
 it does violate the expectations of a graphics-inexperienced user, in that =
 the exposed representation of color, a struct, suggests that RGB values are=
  independent of alpha -- but I&#39;m not sure what to suggest as a way of d=
 ocumenting it. Perhaps the best that can be done is to add a line to the te=
 achpack&#39;s documentation of color structs and/or image-&gt;color-list, d=
 ocumenting that actual RGB values of bitmap pixels may differ from those sp=
 ecified in the color struct, when alpha &lt; 255?<br>
 
 <br>
 Or perhaps what we really need is for the printer to show<br>
 	#i(make-color R G B A)<br>
 if A &lt; 255.  :)  (No, I&#39;m not serious.)<br>
 <br>
 Thanks for taking the time to explain.<br>
 <br>
 Best,<br>
 jmj <br><span class=3D"HOEnZb"><font color=3D"#888888">
 -- <br>
 Sent from my Android phone with K-9 Mail.</font></span><div><div class=3D"h=
 5"><br><br><div class=3D"gmail_quote">Robby Findler &lt;<a href=3D"mailto:r=
 obby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu</=
 a>&gt; wrote:<blockquote class=3D"gmail_quote" style=3D"margin:0pt 0pt 0pt =
 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
 
 This all seems to be the same issue to me. When you draw with a non-255 alp=
 ha value then the color that you&#39;re drawing falls between two integer v=
 alues and so it picks one and that&#39;s why those two triangles, with diff=
 erent rgb values actually draw the same way and that&#39;s why you get slig=
 htly different results for the big squares.<div>
 
 <br></div><div>And ultimately there isn&#39;t much we can do about this at =
 the Racket level anyways: the 2htdp/image library defers to the platform-sp=
 ecific drawing library (not even directly, but via the cairo library) -- wh=
 at you&#39;re seeing is a reflection of how that behaves.</div>
 
 <div><br></div><div>At least I think so; it is possible that the racket/gui=
  layer could change to use floats or something for color values and that mi=
 ght get you more precision, but I&#39;m not sure that that&#39;s even avail=
 able without re-implementing cairo. Matthew would know more, but I&#39;m su=
 re that, from the larger perspective, it was a huge win for us to be able t=
 o rely on cairo so I don&#39;t think we&#39;ll really serious consider goin=
 g back on that particular design decision, I&#39;m sorry to say.</div>
 
 <div><br></div><div>Robby<br><br>On Thursday, February 21, 2013, Jordan Joh=
 nson  wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8e=
 x;border-left:1px #ccc solid;padding-left:1ex"><div bgcolor=3D"#FFFFFF"><di=
 v>
 
 No, I get #f too -- the problem being that the program logic suggests that =
 those two halves should be equal, both visually and in the image-equality s=
 ense, but they in fact are not (in either sense).<br><br>Best,<div>Jordan</=
 div>
 
 </div><div><br>On Feb 21, 2013, at 6:20 PM, Robby Findler &lt;<a>robby@eecs=
 .northwestern.edu</a>&gt; wrote:<br><br></div><div></div><blockquote type=
 =3D"cite"><div><div dir=3D"ltr">I get #f when I change the beside to equal?=
 . Do you get #t?<div>
 
 <br></div><div>Robby</div></div><div><br><br><div>On Thu, Feb 21, 2013 at 7=
 :54 PM, Jordan Johnson <span dir=3D"ltr">&lt;<a>jmj@fellowhuman.com</a>&gt;=
 </span> wrote:<br>
 <blockquote style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
 eft:1ex"><div bgcolor=3D"#FFFFFF"><div>Hi Robby,</div><div><br></div><div>T=
 ry this code (distilled and abbreviated from my student&#39;s work):</div>
 
 
 <div><div><br></div><div>;; --- begin</div><div>#lang racket</div><div><br>=
 </div><div>(require 2htdp/image)</div><div><br></div><div>;; photo-negative=
  : image -&gt; image</div><div>;; takes an image and gives the same image, =
 where every pixel is</div>
 
 
 <div>;; the opposite color.</div><div>(define (photo-negative i)</div><div>=
 =C2=A0 (color-list-&gt;bitmap (map negate-color (image-&gt;color-list i))</=
 div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (image-width i)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (image-height i)))</div>
 
 
 <div><br></div><div>(define (negate-color c) ; color -&gt; color</div><div>=
 =C2=A0 (define (neg x) (- 255 x))</div><div>=C2=A0 (make-color (neg (color-=
 red c)) (neg (color-green c)) (neg (color-blue c))</div><div>=C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (color-alpha c)))</div>
 
 
 <div><br></div><div>(beside (photo-negative (square 200 &#39;solid (make-co=
 lor=C2=A0<a>30 15 255 200</a>)))</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 (squ=
 are 200 &#39;solid (make-color=C2=A0<a>225 240 0 200</a>)))</div>
 <div>;; --- end</div><div><br></div><div>On my machine and monitor, the bes=
 ide-expression at the end produces an image with two regions of visibly dis=
 tinct colors.</div><br>Best,<div>Jordan</div></div><div><div>
 <br>On Feb 21, 2013, at 5:07 PM, Robby Findler &lt;<a>robby@eecs.northweste=
 rn.edu</a>&gt; wrote:<br><br></div><div></div></div><div><div><blockquote t=
 ype=3D"cite">
 <div><div dir=3D"ltr">This program&#39;s behavior actually seems fine to me=
 .=C2=A0<div><br></div><div>For the first list, I think this is just roundin=
 g errors (and they will likely be platform-specific).=C2=A0</div><div><br><=
 /div><div>
 
 
 For the triangle, those two triangles draw exactly the same, presumably bec=
 ause of the rounding errors. Image equality isn&#39;t structural; it draws =
 the images and then compares them, pixel by pixel (with some performance im=
 provements in certain cases that avoids the drawing but I don&#39;t believe=
  that&#39;s happening in this case).</div>
 
 
 
 <div><br>Robby</div></div><div><br><br><div>On Thu, Feb 21, 2013 at 4:44 PM=
 ,  <span dir=3D"ltr">&lt;<a>jmj@fellowhuman.com</a>&gt;</span> wrote:<br>
 
 <blockquote style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
 eft:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 541" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13541</a><br>
 <br>
 Reported by Jordan Johnson for release: 5.3.3<br>
 <br>
 *** Description:<br>
 When make-color is used as an argument to various drawing primitives in the=
  2htdp/image library (e.g., circle, square, rectangle, ellipse), the color =
 is altered. =C2=A0The resulting color has RGB values that may not be equal =
 to the input color&#39;s corresponding values.<br>
 
 
 
 
 <br>
 This does not occur for all RGB values, and it depends in part upon the alp=
 ha value for the color; with full opacity (255) it does not occur, but at l=
 ower opacities the RGB values are further off.<br>
 <br>
 This behavior is present on v5.3.1 and v5.3.3, tested by running on Windows=
  in DrRacket and on Linux via gracket-text. =C2=A0The behavior was NOT pres=
 ent in v5.2.1 on Linux.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require 2htdp/image)<br>
 <br>
 ;; This shows which colors are being altered:<br>
 (build-list 255 (lambda (i)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (list i<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 &#39;-&gt;<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (image-&gt;color-list<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0(square 1 &#39;solid (make-color i i i 200))))))<br>
 <br>
 ;; This should produce false, but produces true:<br>
 (image=3D? (triangle 1 &#39;solid (make-color 103 103 103 200))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(triangle 1 &#39;solid (make-color 104 10=
 4 104 200)))<br>
 <br>
 *** Environment:<br>
 windows &quot;Windows NT 6.1 (Build 7601) Service Pack 1&quot; (win32\i386\=
 3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 237997864<br>
 Links: (links) =3D (&quot;hw&quot; &quot;hw-solutions&quot; &quot;jmj&quot;=
 ); (links #:user? #f) =3D (); (links #:root? #t) =3D (); (links #</blockquo=
 te></div></div></div></blockquote></div></div></div></blockquote></div></di=
 v>
 
 </div></blockquote></div></blockquote></div>
 </blockquote></div></div></div></div></div></blockquote></div><br></div>
 
 --14dae939992db4811f04d6505349--
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Fri, 22 Feb 2013 16:40:30 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/d403f3c6db
State changed from "open" to "closed" by robby@racket-lang.org at Fri, 22 Feb 2013 16:40:30 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/d403f3c6db
  | add docs to address how image equality, rounding, and alpha values
  | can conspire to confuse
  | 
  | closes PR 13541

From: Robby Findler <robby@eecs.northwestern.edu>
To: Jordan Johnson <jmj@fellowhuman.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Fri, 22 Feb 2013 15:46:42 -0600

 --bcaec5523da278f7e104d65720dd
 Content-Type: text/plain; charset=UTF-8
 
 Okay, after consulting with Matthew a little bit, it seems clear that a)
 this is something out of Racket's control (unless we give up on using
 Cairo, which is bad for other reasons) and b) that if there were a round
 deep inside the library at some spot where there is currently a floor, then
 the program you sent (with the color inversions) would work properly and c)
 the general phenomenon where alphas cause more colors to be "equal" than
 you'd think is something we can't get away from in general, even if one
 were to consider b) to be a bug. (Also conjectured: b) may be a concession
 to performance more than a bug per se, as flooring can often fit better
 into low-level assembly instructions than rounding can.)
 
 Anyways, I've pushed a change to the documentation to try to explain the c)
 issue more carefully. You can read the scribble source here if you like:
 
 
 http://git.racket-lang.org/plt/commitdiff/d403f3c6db0d23737afd1f8f0606d8ef9675d7b4?hp=17d6e162bcc0bba36fc8a76f90a6f51c2c3cd0bf
 
 Comments welcome.
 
 Robby
 
 --bcaec5523da278f7e104d65720dd
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>Okay, after consulting with Matthew a little bit, it =
 seems clear that a) this is something out of Racket&#39;s control (unless w=
 e give up on using Cairo, which is bad for other reasons) and b) that if th=
 ere were a round deep inside the library at some spot where there is curren=
 tly a floor, then the program you sent (with the color inversions) would wo=
 rk properly and c) the general phenomenon where alphas cause more colors to=
  be &quot;equal&quot; than you&#39;d think is something we can&#39;t get aw=
 ay from in general, even if one were to consider b) to be a bug. (Also conj=
 ectured: b) may be a concession to performance more than a bug per se, as f=
 looring can often fit better into low-level assembly instructions than roun=
 ding can.)</div>
 <div><br></div><div>Anyways, I&#39;ve pushed a change to the documentation =
 to try to explain the c) issue more carefully. You can read the scribble so=
 urce here if you like:</div><div><br></div><div>=C2=A0 <a href=3D"http://gi=
 t.racket-lang.org/plt/commitdiff/d403f3c6db0d23737afd1f8f0606d8ef9675d7b4?h=
 p=3D17d6e162bcc0bba36fc8a76f90a6f51c2c3cd0bf">http://git.racket-lang.org/pl=
 t/commitdiff/d403f3c6db0d23737afd1f8f0606d8ef9675d7b4?hp=3D17d6e162bcc0bba3=
 6fc8a76f90a6f51c2c3cd0bf</a></div>
 <div><br></div><div>Comments welcome.</div><div><br></div><div>Robby</div><=
 div><br></div></div>
 
 --bcaec5523da278f7e104d65720dd--
From: Neil Toronto <neil.toronto@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Jordan Johnson <jmj@fellowhuman.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter
 colors
Date: Sat, 23 Feb 2013 11:59:30 -0700

 Coming in late...
 
 Is this because the image is stored with RGB premultiplied by alpha? If 
 so, I'm not sure changing a floor to a round would help equality testing 
 much. Premultiplying by alpha irreversibly loses precision.
 
 It's also the correct way to store images because it makes compositing 
 (approximately) associative - so I'm not suggesting changing it. The 
 `images/flomap' docs talk about it, in the "Opacity" section:
 
    http://docs.racket-lang.org/images/Overview.html
 
 Neil ⊥
 
 On 02/22/2013 02:46 PM, Robby Findler wrote:
 > Okay, after consulting with Matthew a little bit, it seems clear that a)
 > this is something out of Racket's control (unless we give up on using
 > Cairo, which is bad for other reasons) and b) that if there were a round
 > deep inside the library at some spot where there is currently a floor,
 > then the program you sent (with the color inversions) would work
 > properly and c) the general phenomenon where alphas cause more colors to
 > be "equal" than you'd think is something we can't get away from in
 > general, even if one were to consider b) to be a bug. (Also conjectured:
 > b) may be a concession to performance more than a bug per se, as
 > flooring can often fit better into low-level assembly instructions than
 > rounding can.)
 >
 > Anyways, I've pushed a change to the documentation to try to explain the
 > c) issue more carefully. You can read the scribble source here if you like:
 >
 > http://git.racket-lang.org/plt/commitdiff/d403f3c6db0d23737afd1f8f0606d8ef9675d7b4?hp=17d6e162bcc0bba36fc8a76f90a6f51c2c3cd0bf
 >
 > Comments welcome.
 >
 > Robby
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: Jordan Johnson <jmj@fellowhuman.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13541: 2htdp/image: drawing primitives alter colors
Date: Sat, 23 Feb 2013 13:10:49 -0600

 --e89a8ff252bad77ab304d66910aa
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 On Sat, Feb 23, 2013 at 12:59 PM, Neil Toronto <neil.toronto@gmail.com>wrot=
 e:
 
 > Coming in late...
 >
 > Is this because the image is stored with RGB premultiplied by alpha? If
 > so, I'm not sure changing a floor to a round would help equality testing
 > much. Premultiplying by alpha irreversibly loses precision.
 >
 >
 The 2htdp/image colors objects are not premultiplied, but I believe cairo
 (or some piece of it) does, so they get converted to that before drawing
 happens or when turning an image back into colors that a student program
 would process.
 
 I think the floor/round issue would help only with the photo-negative
 function behaving the way it is expected; it doesn't help with the larger
 problem.
 
 
 > It's also the correct way to store images because it makes compositing
 > (approximately) associative - so I'm not suggesting changing it. The
 > `images/flomap' docs talk about it, in the "Opacity" section:
 >
 >   http://docs.racket-lang.org/**images/Overview.html<http://docs.racket-l=
 ang.org/images/Overview.html>
 >
 > Neil =E2=8A=A5
 >
 >
 > On 02/22/2013 02:46 PM, Robby Findler wrote:
 >
 >> Okay, after consulting with Matthew a little bit, it seems clear that a)
 >> this is something out of Racket's control (unless we give up on using
 >> Cairo, which is bad for other reasons) and b) that if there were a round
 >> deep inside the library at some spot where there is currently a floor,
 >> then the program you sent (with the color inversions) would work
 >> properly and c) the general phenomenon where alphas cause more colors to
 >> be "equal" than you'd think is something we can't get away from in
 >> general, even if one were to consider b) to be a bug. (Also conjectured:
 >> b) may be a concession to performance more than a bug per se, as
 >> flooring can often fit better into low-level assembly instructions than
 >> rounding can.)
 >>
 >> Anyways, I've pushed a change to the documentation to try to explain the
 >> c) issue more carefully. You can read the scribble source here if you
 >> like:
 >>
 >> http://git.racket-lang.org/**plt/commitdiff/**
 >> d403f3c6db0d23737afd1f8f0606d8**ef9675d7b4?hp=3D**
 >> 17d6e162bcc0bba36fc8a76f90a6f5**1c2c3cd0bf<http://git.racket-lang.org/pl=
 t/commitdiff/d403f3c6db0d23737afd1f8f0606d8ef9675d7b4?hp=3D17d6e162bcc0bba3=
 6fc8a76f90a6f51c2c3cd0bf>
 >>
 >> Comments welcome.
 >>
 >> Robby
 >>
 >>
 >
 
 --e89a8ff252bad77ab304d66910aa
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Sat, Feb 23, 2013 at 12:59 PM, Neil Toronto <span dir=3D"ltr">&l=
 t;<a href=3D"mailto:neil.toronto@gmail.com" target=3D"_blank">neil.toronto@=
 gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex">Coming in late...<br>
 <br>
 Is this because the image is stored with RGB premultiplied by alpha? If so,=
  I&#39;m not sure changing a floor to a round would help equality testing m=
 uch. Premultiplying by alpha irreversibly loses precision.<br>
 <br></blockquote><div><br></div><div style>The 2htdp/image colors objects a=
 re not premultiplied, but I believe cairo (or some piece of it) does, so th=
 ey get converted to that before drawing happens or when turning an image ba=
 ck into colors that a student program would process.</div>
 <br>I think the floor/round issue would help only with the photo-negative f=
 unction behaving the way it is expected; it doesn&#39;t help with the large=
 r problem.<div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margi=
 n:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204=
 );border-left-style:solid;padding-left:1ex">
 
 It&#39;s also the correct way to store images because it makes compositing =
 (approximately) associative - so I&#39;m not suggesting changing it. The `i=
 mages/flomap&#39; docs talk about it, in the &quot;Opacity&quot; section:<b=
 r>
 
 <br>
 =C2=A0 <a href=3D"http://docs.racket-lang.org/images/Overview.html" target=
 =3D"_blank">http://docs.racket-lang.org/<u></u>images/Overview.html</a><spa=
 n class=3D""><font color=3D"#888888"><br>
 <br>
 Neil =E2=8A=A5</font></span><div class=3D""><div class=3D"h5"><br>
 <br>
 On 02/22/2013 02:46 PM, Robby Findler wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex">
 Okay, after consulting with Matthew a little bit, it seems clear that a)<br=
 >
 this is something out of Racket&#39;s control (unless we give up on using<b=
 r>
 Cairo, which is bad for other reasons) and b) that if there were a round<br=
 >
 deep inside the library at some spot where there is currently a floor,<br>
 then the program you sent (with the color inversions) would work<br>
 properly and c) the general phenomenon where alphas cause more colors to<br=
 >
 be &quot;equal&quot; than you&#39;d think is something we can&#39;t get awa=
 y from in<br>
 general, even if one were to consider b) to be a bug. (Also conjectured:<br=
 >
 b) may be a concession to performance more than a bug per se, as<br>
 flooring can often fit better into low-level assembly instructions than<br>
 rounding can.)<br>
 <br>
 Anyways, I&#39;ve pushed a change to the documentation to try to explain th=
 e<br>
 c) issue more carefully. You can read the scribble source here if you like:=
 <br>
 <br>
 <a href=3D"http://git.racket-lang.org/plt/commitdiff/d403f3c6db0d23737afd1f=
 8f0606d8ef9675d7b4?hp=3D17d6e162bcc0bba36fc8a76f90a6f51c2c3cd0bf" target=3D=
 "_blank">http://git.racket-lang.org/<u></u>plt/commitdiff/<u></u>d403f3c6db=
 0d23737afd1f8f0606d8<u></u>ef9675d7b4?hp=3D<u></u>17d6e162bcc0bba36fc8a76f9=
 0a6f5<u></u>1c2c3cd0bf</a><br>
 
 <br>
 Comments welcome.<br>
 <br>
 Robby<br>
 <br>
 </blockquote>
 <br>
 </div></div></blockquote></div><br></div></div>
 
 --e89a8ff252bad77ab304d66910aa--
