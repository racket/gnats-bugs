From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jun  7 14:06:42 2011
Received: from mail-vw0-f44.google.com (mail-vw0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p57I6dqu032203
	for <bugs@bugs.plt-scheme.org>; Tue, 7 Jun 2011 14:06:40 -0400
Message-Id: <201106071806.p57I6asR032198@champlain.ccs.neu.edu>
Date: Tue, 7 Jun 2011 14:06:36 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Requireing a module at different phase levels produces different results

>Number:         11962
>Category:       all
>Synopsis:       Requireing a module at different phase levels produces different results
>Class:          not-a-bug
>Responsible:    cce
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jun 07 14:08:01 -0400 2011
>Closed-Date:    Tue Jun 07 14:20:27 -0400 2011
>Last-Modified:  Tue Jun 07 15:36:01 -0400 2011
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.1.5--2011-06-07(77c36cc/g)
>Environment:
macosx "Darwin eric-dobsons-macbook.local 10.7.0 Darwin Kernel Version 10.7.0: Sat Jan 29 15:17:16 PST 2011; root:xnu-1504.9.37~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 255782236

Collections:
("/Users/eric/Library/Racket/5.1.1.5/collects"
 (non-existent-path))
("/Users/eric/proj/racket/plt/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" "un!
 stable" "version" "waterworld" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t))
>Description:
Comparing identifiers for free-identifier=? produces different results depending on what phase the module is invoked at.
>How-To-Repeat:
#lang racket/load
(module a racket
  (require (rename-in racket (+ ++)))
  (free-identifier=? #'++ #'+))

(require (for-meta 2 'a))
(require (for-syntax 'a))
(require 'a)

Results:

#f
#f
#t


More interesting example

#lang racket/load

(module a racket
  (require (rename-in racket (+ ++)))
  'start
  (syntax-local-phase-level)
  (free-identifier=? #'++ #'+ -1)
  (free-identifier=? #'++ #'+ 0)
  (free-identifier=? #'++ #'+ 1)
  (free-identifier=? #'++ #'+ 2)
  (free-identifier=? #'++ #'+ 3)
  (free-identifier=? #'++ #'+ 4)
  'end)

(require (for-meta 2 'a))
(require (for-meta 1 'a))
(require (for-meta 0 'a))

results:
'start
0
#f
#f
#f
#t
#t
#f
'end
'start
0
#f
#f
#t
#t
#f
#f
'end
'start
0
#f
#t
#t
#f
#f
#f
'end
>Fix:
>Audit-Trail:
Class changed from "sw-bug" to "not-a-bug" by cce at Tue, 07 Jun 2011 14:20:27 -0400
Reason>>> by design

Responsible changed from "nobody" to "cce" by cce at Tue, 07 Jun 2011 14:20:27 -0400
Reason>>> closed

State changed from "open" to "closed" by cce at Tue, 07 Jun 2011 14:20:27 -0400
Reason>>> not a bug

From: Carl Eastlund <cce@plt-scheme.org>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 7 Jun 2011 14:21:08 -0400

 Okay... I think I read the report too quickly.  This was not the
 obvious misunderstanding I thought it was.
 
 Carl Eastlund
 
 
 
 On Tue, Jun 7, 2011 at 2:19 PM, Carl Eastlund <cce@plt-scheme.org> wrote:
 > On Tue, Jun 7, 2011 at 2:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >> *** Description:
 >> Comparing identifiers for free-identifier=? produces different results depending on what phase the module is invoked at.
 >
 > This is by design.  Note that free-identifier=? takes an optional
 > third argument specifying the phase level at which to compare.  Each
 > identifier may have a different binding at each phase;
 > free-identifier=? can only compare one pair of bindings at a time.
 >
 > --Carl
 >
 
From: Carl Eastlund <cce@plt-scheme.org>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 7 Jun 2011 14:19:43 -0400

 On Tue, Jun 7, 2011 at 2:08 PM,  <eric.n.dobson@gmail.com> wrote:
 > *** Description:
 > Comparing identifiers for free-identifier=? produces different results depending on what phase the module is invoked at.
 
 This is by design.  Note that free-identifier=? takes an optional
 third argument specifying the phase level at which to compare.  Each
 identifier may have a different binding at each phase;
 free-identifier=? can only compare one pair of bindings at a time.
 
 --Carl
From: Carl Eastlund <cce@plt-scheme.org>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 7 Jun 2011 14:25:27 -0400

 Having given at least a little more scrutiny, I think this is still by
 design.  The result of (syntax-local-phase-level) is 0 in all cases,
 because the comparison is made outside of any macro expansion.  Hence
 the comparison is made at phase 0, and the renamed require of + to ++
 only matters when the module is also invoked at phase 0.
 
 On Tue, Jun 7, 2011 at 2:21 PM, Carl Eastlund <cce@plt-scheme.org> wrote:
 > Okay... I think I read the report too quickly.  This was not the
 > obvious misunderstanding I thought it was.
 >
 > Carl Eastlund
 >
 >
 >
 > On Tue, Jun 7, 2011 at 2:19 PM, Carl Eastlund <cce@plt-scheme.org> wrote:
 >> On Tue, Jun 7, 2011 at 2:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >>> *** Description:
 >>> Comparing identifiers for free-identifier=? produces different results depending on what phase the module is invoked at.
 >>
 >> This is by design.  Note that free-identifier=? takes an optional
 >> third argument specifying the phase level at which to compare.  Each
 >> identifier may have a different binding at each phase;
 >> free-identifier=? can only compare one pair of bindings at a time.
 >>
 >> --Carl
 
From: Jon Rafkind <rafkind@cs.utah.edu>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 07 Jun 2011 12:32:53 -0600

 On 06/07/2011 12:19 PM, Carl Eastlund wrote:
 > On Tue, Jun 7, 2011 at 2:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >> *** Description:
 >> Comparing identifiers for free-identifier=? produces different results depending on what phase the module is invoked at.
 > This is by design.  Note that free-identifier=? takes an optional
 > third argument specifying the phase level at which to compare.  Each
 > identifier may have a different binding at each phase;
 > free-identifier=? can only compare one pair of bindings at a time.
 >
 
 Ok it looks like the issue is that `syntax-local-phase-level' is 0 no
 matter if you require a module at phase 0 or 1. So if I have
 
 A:
 #lang racket
 (printf "phase ~a\n" (syntax-local-phase-level))
 ;; (free-identifier=? #'+ #'+)
 
 and then require it two different ways:
 B:
 #lang racket
 (require "a.rkt")
 (require (for-syntax "a.rkt"))
 
 Then it prints
 
 phase 0
 phase 0
 
 so the free-identifier=? check inside A is checking at the absolute
 phase level of 0 instead of the phase relative to how it was required.
 Is this how things really should be? Shouldn't
 `syntax-local-phase-level' start out as the same phase the module was
 required in?
From: Carl Eastlund <cce@plt-scheme.org>
To: rafkind@cs.utah.edu
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 7 Jun 2011 14:36:11 -0400

 On Tue, Jun 7, 2011 at 2:32 PM, Jon Rafkind <rafkind@cs.utah.edu> wrote:
 > On 06/07/2011 12:19 PM, Carl Eastlund wrote:
 >> On Tue, Jun 7, 2011 at 2:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >>> *** Description:
 >>> Comparing identifiers for free-identifier=? produces different results depending on what phase the module is invoked at.
 >> This is by design.  Note that free-identifier=? takes an optional
 >> third argument specifying the phase level at which to compare.  Each
 >> identifier may have a different binding at each phase;
 >> free-identifier=? can only compare one pair of bindings at a time.
 >>
 >
 > Ok it looks like the issue is that `syntax-local-phase-level' is 0 no
 > matter if you require a module at phase 0 or 1. So if I have
 >
 > A:
 > #lang racket
 > (printf "phase ~a\n" (syntax-local-phase-level))
 > ;; (free-identifier=? #'+ #'+)
 >
 > and then require it two different ways:
 > B:
 > #lang racket
 > (require "a.rkt")
 > (require (for-syntax "a.rkt"))
 >
 > Then it prints
 >
 > phase 0
 > phase 0
 >
 > so the free-identifier=? check inside A is checking at the absolute
 > phase level of 0 instead of the phase relative to how it was required.
 > Is this how things really should be? Shouldn't
 > `syntax-local-phase-level' start out as the same phase the module was
 > required in?
 
 The function syntax-local-phase-level is documented to always return 0
 outside the dynamic extent of macro expansion.  I don't know how to
 get one's hands on the current dynamic phase level.
 
 On the other hand, the following program performs the comparisons
 correctly, so free-identifier=? does work in macros:
 
 #lang racket/load
 
 (module m racket
   (require (only-in racket [+ ++]))
   (define-syntax (id=? stx)
     (syntax-case stx []
       [(_ a b) #`(quote #,(free-identifier=? #'a #'b))]))
   (id=? + ++))
 
 (require (for-meta 2 'm))
 (require (for-meta 1 'm))
 (require (for-meta 0 'm))
 
From: Jon Rafkind <rafkind@cs.utah.edu>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 07 Jun 2011 12:40:43 -0600

 > The function syntax-local-phase-level is documented to always return 0
 > outside the dynamic extent of macro expansion.  I don't know how to
 > get one's hands on the current dynamic phase level.
 >
 > On the other hand, the following program performs the comparisons
 > correctly, so free-identifier=? does work in macros:
 >
 > #lang racket/load
 >
 > (module m racket
 >   (require (only-in racket [+ ++]))
 >   (define-syntax (id=? stx)
 >     (syntax-case stx []
 >       [(_ a b) #`(quote #,(free-identifier=? #'a #'b))]))
 >   (id=? + ++))
 >
 > (require (for-meta 2 'm))
 > (require (for-meta 1 'm))
 > (require (for-meta 0 'm))
 
 Seems like that `id=?' could be a library function of some sort.
 Actually given this limitation of free-identifier=? (that it uses
 syntax-local-phase-level) I don't see why anyone would ever really want
 to use it.
 
 I ran into this issue recently with syntax-parse and the solution there
 was to use literal-sets with the #:for-template keyword to make phase
 comparisons work properly.
From: Carl Eastlund <cce@plt-scheme.org>
To: rafkind@cs.utah.edu
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 7 Jun 2011 14:46:24 -0400

 Responses to previous emails are below, but here's a version of the
 original program that not only works, but does so without having to
 define any macros.  The namespace tricks here could certainly be used
 to define a "current-dynamic-phase-level" function, or something of
 the sort.
 
 #lang racket/load
 
 (module m racket
   (require (only-in racket [+ ++]))
   (define-namespace-anchor here)
   (free-identifier=? #'+ #'++
     (namespace-base-phase
       (namespace-anchor->namespace here))))
 
 (require (for-meta 2 'm))
 (require (for-meta 1 'm))
 (require (for-meta 0 'm))
 
 On Tue, Jun 7, 2011 at 2:40 PM, Jon Rafkind <rafkind@cs.utah.edu> wrote:
 >
 >> The function syntax-local-phase-level is documented to always return 0
 >> outside the dynamic extent of macro expansion.  I don't know how to
 >> get one's hands on the current dynamic phase level.
 >>
 >> On the other hand, the following program performs the comparisons
 >> correctly, so free-identifier=? does work in macros:
 >>
 >> #lang racket/load
 >>
 >> (module m racket
 >>   (require (only-in racket [+ ++]))
 >>   (define-syntax (id=? stx)
 >>     (syntax-case stx []
 >>       [(_ a b) #`(quote #,(free-identifier=? #'a #'b))]))
 >>   (id=? + ++))
 >>
 >> (require (for-meta 2 'm))
 >> (require (for-meta 1 'm))
 >> (require (for-meta 0 'm))
 >
 > Seems like that `id=?' could be a library function of some sort.
 > Actually given this limitation of free-identifier=? (that it uses
 > syntax-local-phase-level) I don't see why anyone would ever really want
 > to use it.
 
 Because that's the right phase to use during macro expansion.  And
 id=? there is a macro, not a function.  You couldn't map it over a
 list, for instance.
 
 > I ran into this issue recently with syntax-parse and the solution there
 > was to use literal-sets with the #:for-template keyword to make phase
 > comparisons work properly.
 
 I don't think this is necessarily the same issue, other than that
 phases are involved.
 
 --Carl
 
From: Jon Rafkind <rafkind@cs.utah.edu>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 07 Jun 2011 13:23:29 -0600

 I don't get whats going on with plain expressions in a module at higher
 phases.
 
 a.rkt
 #lang racket
 (define-syntax (foo stx)
   (printf "this is always executed\n"))
 (foo)
 (printf "but not this\n")
 
 If (require "a.rkt") I see both print statements, if I (require
 (for-syntax "a.rkt")) I see both but if I (require (for-meta 2 "a.rkt"))
 I only see "this is always executed". Why is that?
 
 I guess `free-identifier=?' outside of a macro (i.e, outside the
 expander) is executed at a different phase then the module is being
 instantiated in?
 
 On 06/07/2011 12:46 PM, Carl Eastlund wrote:
 > Responses to previous emails are below, but here's a version of the
 > original program that not only works, but does so without having to
 > define any macros.  The namespace tricks here could certainly be used
 > to define a "current-dynamic-phase-level" function, or something of
 > the sort.
 >
 > #lang racket/load
 >
 > (module m racket
 >   (require (only-in racket [+ ++]))
 >   (define-namespace-anchor here)
 >   (free-identifier=? #'+ #'++
 >     (namespace-base-phase
 >       (namespace-anchor->namespace here))))
 >
 > (require (for-meta 2 'm))
 > (require (for-meta 1 'm))
 > (require (for-meta 0 'm))
 >
 > On Tue, Jun 7, 2011 at 2:40 PM, Jon Rafkind <rafkind@cs.utah.edu> wrote:
 >>> The function syntax-local-phase-level is documented to always return 0
 >>> outside the dynamic extent of macro expansion.  I don't know how to
 >>> get one's hands on the current dynamic phase level.
 >>>
 >>> On the other hand, the following program performs the comparisons
 >>> correctly, so free-identifier=? does work in macros:
 >>>
 >>> #lang racket/load
 >>>
 >>> (module m racket
 >>>   (require (only-in racket [+ ++]))
 >>>   (define-syntax (id=? stx)
 >>>     (syntax-case stx []
 >>>       [(_ a b) #`(quote #,(free-identifier=? #'a #'b))]))
 >>>   (id=? + ++))
 >>>
 >>> (require (for-meta 2 'm))
 >>> (require (for-meta 1 'm))
 >>> (require (for-meta 0 'm))
 >> Seems like that `id=?' could be a library function of some sort.
 >> Actually given this limitation of free-identifier=? (that it uses
 >> syntax-local-phase-level) I don't see why anyone would ever really want
 >> to use it.
 > Because that's the right phase to use during macro expansion.  And
 > id=? there is a macro, not a function.  You couldn't map it over a
 > list, for instance.
 >
 >> I ran into this issue recently with syntax-parse and the solution there
 >> was to use literal-sets with the #:for-template keyword to make phase
 >> comparisons work properly.
 > I don't think this is necessarily the same issue, other than that
 > phases are involved.
 >
 > --Carl
 
From: Carl Eastlund <cce@plt-scheme.org>
To: rafkind@cs.utah.edu
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11962: Requireing a module at different phase
 levels produces different results
Date: Tue, 7 Jun 2011 15:34:05 -0400

 On Tue, Jun 7, 2011 at 3:23 PM, Jon Rafkind <rafkind@cs.utah.edu> wrote:
 > I don't get whats going on with plain expressions in a module at higher
 > phases.
 >
 > a.rkt
 > #lang racket
 > (define-syntax (foo stx)
 >  (printf "this is always executed\n"))
 > (foo)
 > (printf "but not this\n")
 >
 > If (require "a.rkt") I see both print statements, if I (require
 > (for-syntax "a.rkt")) I see both but if I (require (for-meta 2 "a.rkt"))
 > I only see "this is always executed". Why is that?
 
 I believe certain phases of modules only get run on-demand, so you
 have to trigger it somehow.  For instance, in the earlier programs in
 this thread, I didn't get all the output if I ran them in racket at
 the command-line.  In DrRacket, I got all of it.  I don't know what
 about DrRacket triggered the execution, but it did.
 
 > I guess `free-identifier=?' outside of a macro (i.e, outside the
 > expander) is executed at a different phase then the module is being
 > instantiated in?
 
 It's always run at the phase of the surrounding code -- there's no way
 to "switch" phases dynamically -- but it doesn't always inspect the
 binding intended for that phase.  It inspects the binding of whatever
 phase you tell it via its third argument, which defaults to
 (syntax-local-phase-level).  That means outside the macro expander, it
 always defaults to phase 0.  If you run the module at a higher phase,
 it won't be inspecting the same binding as the module sees.
 
 --Carl
 
