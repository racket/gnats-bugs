From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Dec  2 12:18:38 2012
Received: from mail-ie0-f172.google.com (mail-ie0-f172.google.com [209.85.223.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id qB2HIZk3025268
	for <bugs@bugs.plt-scheme.org>; Sun, 2 Dec 2012 12:18:36 -0500
Message-Id: <201212021718.qB2HIYKs025262@champlain.ccs.neu.edu>
Date: Sun, 2 Dec 2012 12:18:34 -0500
From: kieron.hardy@gmail.com
To: bugs@racket-lang.org
Subject: DrRacket crash while in GC

>Number:         13337
>Category:       all
>Synopsis:       DrRacket crash while in GC
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Dec 02 12:20:01 -0500 2012
>Closed-Date:    Mon Dec 03 09:54:59 -0500 2012
>Last-Modified:  Tue Dec 04 13:49:13 -0500 2012
>Originator:     Kieron Hardy
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1.9--2012-11-30(e4f5a05/a)
>Environment:
windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 146607052
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\collects"
 (non-existent-path))
("C:\\tools\\Racket\\Racket-5.3.1.9\\collects"
 ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n" #f #t ((main) (test))))
>Description:
While refactoring a program I introduced a bug (that boiled down to infinite mutual recursion). During debugging DrRacket would often crash sometime after pressing Stop to end the program.

I reduced the buggy code and now have a program that when run for long enough reliably causes DrRacket to crash or stop responding to Windows. e.g. In the last 10 executions, after running for 20+ seconds then pressing Stop, DrRacket crashed 7 times and stopped responding to Windows 2 times.

Note that if the program is executed for only a short while before pressing Stop, DrRacket works as expected, but after running for 20+ seconds and pressing Stop, DrRacket will take up to a minute or more to cleanup or crash. 

Example crash report (note all crash reports are identical except for the Additional Information values):

 Problem signature:
   Problem Event Name:	APPCRASH
   Application Name:	DrRacket.exe
   Application Version:	0.0.0.0
   Application Timestamp:	50b873a9
   Fault Module Name:	libracket3m_8bh229.dll
   Fault Module Version:	0.0.0.0
   Fault Module Timestamp:	50b873a5
   Exception Code:	40000015
   Exception Offset:	0023d458
   OS Version:	6.0.6002.2.2.0.256.1
   Locale ID:	1033
   Additional Information 1:	3a1d
   Additional Information 2:	e6af31ffe7611d6f728def978fa505fc
   Additional Information 3:	09a6
   Additional Information 4:	f923b1b753e818b70998b9346432def3
>How-To-Repeat:
#lang racket/base

(require racket/class)
(require framework/preferences)

(define (djt:set-default name val predicate)
  (preferences:set-default 
    name 
    val 
    predicate 
    #:aliases (list )
    #:rewrite-aliases (list )
    ))

(djt:set-default 'xxxxxxxxxxxxxxxxxxxxxxxx 
                 "dir" 
                 (lambda (x) (string? x)))

(define (djt:get-preference name)
  (preferences:get 
    name
    ))

(define djt-file%
  (class object%
    
    (init-field
      [get-file-path-fn (lambda () (void))]
      [get-file-name-fn (lambda () (void))]
      )
    
    (super-new)
    
    (define/public (get-file-path)
      (get-file-path-fn))

    (define/public (get-file-name)
      (get-file-name-fn))

    ))

(define djt-file-manager
  (new
    (class object%
      (super-new)
      
      (define game-file
        (new djt-file%
          [get-file-path-fn
            (lambda ()
              (string-append
                (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)
                "\\"))]
          [get-file-name-fn
            (lambda ()
              (string-append
                (get-game-file-path)
                (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)))]
          ))

      (define/public (get-game-file-path)
        (send game-file get-file-name)) ; Bug: should be get-file-path

      (define/public (get-game-file-name)
        (send game-file get-file-name))

      )))

{printf "game-file-name:\"~a\"~n" 
        (send djt-file-manager get-game-file-name)
        }
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Kieron Hardy <kieron.hardy@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13337: DrRacket crash while in GC
Date: Sun, 2 Dec 2012 13:12:02 -0600

 Have you disabled the memory limit?
 
 Robby
 
 On Sun, Dec 2, 2012 at 11:20 AM,  <kieron.hardy@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13337
 >
 > Reported by Kieron Hardy for release: 5.3.1.9--2012-11-30(e4f5a05/a)
 >
 > *** Description:
 > While refactoring a program I introduced a bug (that boiled down to infinite mutual recursion). During debugging DrRacket would often crash sometime after pressing Stop to end the program.
 >
 > I reduced the buggy code and now have a program that when run for long enough reliably causes DrRacket to crash or stop responding to Windows. e.g. In the last 10 executions, after running for 20+ seconds then pressing Stop, DrRacket crashed 7 times and stopped responding to Windows 2 times.
 >
 > Note that if the program is executed for only a short while before pressing Stop, DrRacket works as expected, but after running for 20+ seconds and pressing Stop, DrRacket will take up to a minute or more to cleanup or crash.
 >
 > Example crash report (note all crash reports are identical except for the Additional Information values):
 >
 >  Problem signature:
 >    Problem Event Name:  APPCRASH
 >    Application Name:    DrRacket.exe
 >    Application Version: 0.0.0.0
 >    Application Timestamp:       50b873a9
 >    Fault Module Name:   libracket3m_8bh229.dll
 >    Fault Module Version:        0.0.0.0
 >    Fault Module Timestamp:      50b873a5
 >    Exception Code:      40000015
 >    Exception Offset:    0023d458
 >    OS Version:  6.0.6002.2.2.0.256.1
 >    Locale ID:   1033
 >    Additional Information 1:    3a1d
 >    Additional Information 2:    e6af31ffe7611d6f728def978fa505fc
 >    Additional Information 3:    09a6
 >    Additional Information 4:    f923b1b753e818b70998b9346432def3
 >
 > *** How to repeat:
 > #lang racket/base
 >
 > (require racket/class)
 > (require framework/preferences)
 >
 > (define (djt:set-default name val predicate)
 >   (preferences:set-default
 >     name
 >     val
 >     predicate
 >     #:aliases (list )
 >     #:rewrite-aliases (list )
 >     ))
 >
 > (djt:set-default 'xxxxxxxxxxxxxxxxxxxxxxxx
 >                  "dir"
 >                  (lambda (x) (string? x)))
 >
 > (define (djt:get-preference name)
 >   (preferences:get
 >     name
 >     ))
 >
 > (define djt-file%
 >   (class object%
 >
 >     (init-field
 >       [get-file-path-fn (lambda () (void))]
 >       [get-file-name-fn (lambda () (void))]
 >       )
 >
 >     (super-new)
 >
 >     (define/public (get-file-path)
 >       (get-file-path-fn))
 >
 >     (define/public (get-file-name)
 >       (get-file-name-fn))
 >
 >     ))
 >
 > (define djt-file-manager
 >   (new
 >     (class object%
 >       (super-new)
 >
 >       (define game-file
 >         (new djt-file%
 >           [get-file-path-fn
 >             (lambda ()
 >               (string-append
 >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)
 >                 "\\"))]
 >           [get-file-name-fn
 >             (lambda ()
 >               (string-append
 >                 (get-game-file-path)
 >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)))]
 >           ))
 >
 >       (define/public (get-game-file-path)
 >         (send game-file get-file-name)) ; Bug: should be get-file-path
 >
 >       (define/public (get-game-file-name)
 >         (send game-file get-file-name))
 >
 >       )))
 >
 > {printf "game-file-name:\"~a\"~n"
 >         (send djt-file-manager get-game-file-name)
 >         }
 >
 > *** Environment:
 > windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 146607052
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\collects"
 >  (non-existent-path))
 > ("C:\\tools\\Racket\\Racket-5.3.1.9\\collects"
 >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n" #f #t ((main) (test))))
 >
 
From: Kieron Hardy <kieron.hardy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13337: DrRacket crash while in GC
Date: Sun, 2 Dec 2012 13:37:43 -0700

 --e89a8fb1f600cb677204cfe49a85
 Content-Type: text/plain; charset=ISO-8859-1
 
 Memory limit was disabled.
 
 With a limit of 128M, DrRacket gives the out of memory error, while
 cleaning up a short while after pressing Stop.
 
 On Sun, Dec 2, 2012 at 12:12 PM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > Have you disabled the memory limit?
 >
 > Robby
 >
 > On Sun, Dec 2, 2012 at 11:20 AM,  <kieron.hardy@gmail.com> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=13337
 > >
 > > Reported by Kieron Hardy for release: 5.3.1.9--2012-11-30(e4f5a05/a)
 > >
 > > *** Description:
 > > While refactoring a program I introduced a bug (that boiled down to
 > infinite mutual recursion). During debugging DrRacket would often crash
 > sometime after pressing Stop to end the program.
 > >
 > > I reduced the buggy code and now have a program that when run for long
 > enough reliably causes DrRacket to crash or stop responding to Windows.
 > e.g. In the last 10 executions, after running for 20+ seconds then pressing
 > Stop, DrRacket crashed 7 times and stopped responding to Windows 2 times.
 > >
 > > Note that if the program is executed for only a short while before
 > pressing Stop, DrRacket works as expected, but after running for 20+
 > seconds and pressing Stop, DrRacket will take up to a minute or more to
 > cleanup or crash.
 > >
 > > Example crash report (note all crash reports are identical except for
 > the Additional Information values):
 > >
 > >  Problem signature:
 > >    Problem Event Name:  APPCRASH
 > >    Application Name:    DrRacket.exe
 > >    Application Version: 0.0.0.0
 > >    Application Timestamp:       50b873a9
 > >    Fault Module Name:   libracket3m_8bh229.dll
 > >    Fault Module Version:        0.0.0.0
 > >    Fault Module Timestamp:      50b873a5
 > >    Exception Code:      40000015
 > >    Exception Offset:    0023d458
 > >    OS Version:  6.0.6002.2.2.0.256.1
 > >    Locale ID:   1033
 > >    Additional Information 1:    3a1d
 > >    Additional Information 2:    e6af31ffe7611d6f728def978fa505fc
 > >    Additional Information 3:    09a6
 > >    Additional Information 4:    f923b1b753e818b70998b9346432def3
 > >
 > > *** How to repeat:
 > > #lang racket/base
 > >
 > > (require racket/class)
 > > (require framework/preferences)
 > >
 > > (define (djt:set-default name val predicate)
 > >   (preferences:set-default
 > >     name
 > >     val
 > >     predicate
 > >     #:aliases (list )
 > >     #:rewrite-aliases (list )
 > >     ))
 > >
 > > (djt:set-default 'xxxxxxxxxxxxxxxxxxxxxxxx
 > >                  "dir"
 > >                  (lambda (x) (string? x)))
 > >
 > > (define (djt:get-preference name)
 > >   (preferences:get
 > >     name
 > >     ))
 > >
 > > (define djt-file%
 > >   (class object%
 > >
 > >     (init-field
 > >       [get-file-path-fn (lambda () (void))]
 > >       [get-file-name-fn (lambda () (void))]
 > >       )
 > >
 > >     (super-new)
 > >
 > >     (define/public (get-file-path)
 > >       (get-file-path-fn))
 > >
 > >     (define/public (get-file-name)
 > >       (get-file-name-fn))
 > >
 > >     ))
 > >
 > > (define djt-file-manager
 > >   (new
 > >     (class object%
 > >       (super-new)
 > >
 > >       (define game-file
 > >         (new djt-file%
 > >           [get-file-path-fn
 > >             (lambda ()
 > >               (string-append
 > >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)
 > >                 "\\"))]
 > >           [get-file-name-fn
 > >             (lambda ()
 > >               (string-append
 > >                 (get-game-file-path)
 > >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)))]
 > >           ))
 > >
 > >       (define/public (get-game-file-path)
 > >         (send game-file get-file-name)) ; Bug: should be get-file-path
 > >
 > >       (define/public (get-game-file-name)
 > >         (send game-file get-file-name))
 > >
 > >       )))
 > >
 > > {printf "game-file-name:\"~a\"~n"
 > >         (send djt-file-manager get-game-file-name)
 > >         }
 > >
 > > *** Environment:
 > > windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m)
 > (get-display-depth) = 32
 > > Human Language: english
 > > (current-memory-use) 146607052
 > > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 > (links #:user? #f #:root? #t) = ()
 > >
 > >
 > > Collections:
 > > ("C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\collects"
 > >  (non-existent-path))
 > > ("C:\\tools\\Racket\\Racket-5.3.1.9\\collects"
 > >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler"
 > "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket"
 > "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"
 > "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger"
 > "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 > "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib"
 > "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 > "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor"
 > "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader"
 > "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit"
 > "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow"
 > "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color"
 > "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket"
 > "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 > >
 > > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n" #f #t
 > ((main) (test))))
 > >
 >
 
 --e89a8fb1f600cb677204cfe49a85
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 Memory limit was disabled.<br><br>With a limit of 128M, DrRacket gives the =
 out of memory error, while cleaning up a short while after pressing Stop. <=
 br><br><div class=3D"gmail_quote">On Sun, Dec 2, 2012 at 12:12 PM, Robby Fi=
 ndler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" =
 target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">Have you disabled the memory limit?<br>
 <br>
 Robby<br>
 <br>
 On Sun, Dec 2, 2012 at 11:20 AM, =A0&lt;<a href=3D"mailto:kieron.hardy@gmai=
 l.com">kieron.hardy@gmail.com</a>&gt; wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt; =A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D=
 13337" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;=
 pr=3D13337</a><br>
 &gt;<br>
 &gt; Reported by Kieron Hardy for release: 5.3.1.9--2012-11-30(e4f5a05/a)<b=
 r>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; While refactoring a program I introduced a bug (that boiled down to in=
 finite mutual recursion). During debugging DrRacket would often crash somet=
 ime after pressing Stop to end the program.<br>
 &gt;<br>
 &gt; I reduced the buggy code and now have a program that when run for long=
  enough reliably causes DrRacket to crash or stop responding to Windows. e.=
 g. In the last 10 executions, after running for 20+ seconds then pressing S=
 top, DrRacket crashed 7 times and stopped responding to Windows 2 times.<br=
 >
 
 &gt;<br>
 &gt; Note that if the program is executed for only a short while before pre=
 ssing Stop, DrRacket works as expected, but after running for 20+ seconds a=
 nd pressing Stop, DrRacket will take up to a minute or more to cleanup or c=
 rash.<br>
 
 &gt;<br>
 &gt; Example crash report (note all crash reports are identical except for =
 the Additional Information values):<br>
 &gt;<br>
 &gt; =A0Problem signature:<br>
 &gt; =A0 =A0Problem Event Name: =A0APPCRASH<br>
 &gt; =A0 =A0Application Name: =A0 =A0DrRacket.exe<br>
 &gt; =A0 =A0Application Version: 0.0.0.0<br>
 &gt; =A0 =A0Application Timestamp: =A0 =A0 =A0 50b873a9<br>
 &gt; =A0 =A0Fault Module Name: =A0 libracket3m_8bh229.dll<br>
 &gt; =A0 =A0Fault Module Version: =A0 =A0 =A0 =A00.0.0.0<br>
 &gt; =A0 =A0Fault Module Timestamp: =A0 =A0 =A050b873a5<br>
 &gt; =A0 =A0Exception Code: =A0 =A0 =A040000015<br>
 &gt; =A0 =A0Exception Offset: =A0 =A00023d458<br>
 &gt; =A0 =A0OS Version: =A06.0.6002.2.2.0.256.1<br>
 &gt; =A0 =A0Locale ID: =A0 1033<br>
 &gt; =A0 =A0Additional Information 1: =A0 =A03a1d<br>
 &gt; =A0 =A0Additional Information 2: =A0 =A0e6af31ffe7611d6f728def978fa505=
 fc<br>
 &gt; =A0 =A0Additional Information 3: =A0 =A009a6<br>
 &gt; =A0 =A0Additional Information 4: =A0 =A0f923b1b753e818b70998b9346432de=
 f3<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt; #lang racket/base<br>
 &gt;<br>
 &gt; (require racket/class)<br>
 &gt; (require framework/preferences)<br>
 &gt;<br>
 &gt; (define (djt:set-default name val predicate)<br>
 &gt; =A0 (preferences:set-default<br>
 &gt; =A0 =A0 name<br>
 &gt; =A0 =A0 val<br>
 &gt; =A0 =A0 predicate<br>
 &gt; =A0 =A0 #:aliases (list )<br>
 &gt; =A0 =A0 #:rewrite-aliases (list )<br>
 &gt; =A0 =A0 ))<br>
 &gt;<br>
 &gt; (djt:set-default &#39;xxxxxxxxxxxxxxxxxxxxxxxx<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0&quot;dir&quot;<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0(lambda (x) (string? x)))<br>
 &gt;<br>
 &gt; (define (djt:get-preference name)<br>
 &gt; =A0 (preferences:get<br>
 &gt; =A0 =A0 name<br>
 &gt; =A0 =A0 ))<br>
 &gt;<br>
 &gt; (define djt-file%<br>
 &gt; =A0 (class object%<br>
 &gt;<br>
 &gt; =A0 =A0 (init-field<br>
 &gt; =A0 =A0 =A0 [get-file-path-fn (lambda () (void))]<br>
 &gt; =A0 =A0 =A0 [get-file-name-fn (lambda () (void))]<br>
 &gt; =A0 =A0 =A0 )<br>
 &gt;<br>
 &gt; =A0 =A0 (super-new)<br>
 &gt;<br>
 &gt; =A0 =A0 (define/public (get-file-path)<br>
 &gt; =A0 =A0 =A0 (get-file-path-fn))<br>
 &gt;<br>
 &gt; =A0 =A0 (define/public (get-file-name)<br>
 &gt; =A0 =A0 =A0 (get-file-name-fn))<br>
 &gt;<br>
 &gt; =A0 =A0 ))<br>
 &gt;<br>
 &gt; (define djt-file-manager<br>
 &gt; =A0 (new<br>
 &gt; =A0 =A0 (class object%<br>
 &gt; =A0 =A0 =A0 (super-new)<br>
 &gt;<br>
 &gt; =A0 =A0 =A0 (define game-file<br>
 &gt; =A0 =A0 =A0 =A0 (new djt-file%<br>
 &gt; =A0 =A0 =A0 =A0 =A0 [get-file-path-fn<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 (lambda ()<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 (string-append<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (djt:get-preference &#39;xxxxxxxxxxxxx=
 xxxxxxxxxxx)<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 &quot;\\&quot;))]<br>
 &gt; =A0 =A0 =A0 =A0 =A0 [get-file-name-fn<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 (lambda ()<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 (string-append<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (get-game-file-path)<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (djt:get-preference &#39;xxxxxxxxxxxxx=
 xxxxxxxxxxx)))]<br>
 &gt; =A0 =A0 =A0 =A0 =A0 ))<br>
 &gt;<br>
 &gt; =A0 =A0 =A0 (define/public (get-game-file-path)<br>
 &gt; =A0 =A0 =A0 =A0 (send game-file get-file-name)) ; Bug: should be get-f=
 ile-path<br>
 &gt;<br>
 &gt; =A0 =A0 =A0 (define/public (get-game-file-name)<br>
 &gt; =A0 =A0 =A0 =A0 (send game-file get-file-name))<br>
 &gt;<br>
 &gt; =A0 =A0 =A0 )))<br>
 &gt;<br>
 &gt; {printf &quot;game-file-name:\&quot;~a\&quot;~n&quot;<br>
 &gt; =A0 =A0 =A0 =A0 (send djt-file-manager get-game-file-name)<br>
 &gt; =A0 =A0 =A0 =A0 }<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; windows &quot;Windows NT 6.0 (Build 6002) Service Pack 2&quot; (win32\=
 i386\3m) (get-display-depth) =3D 32<br>
 &gt; Human Language: english<br>
 &gt; (current-memory-use) 146607052<br>
 &gt; Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =
 =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 &gt;<br>
 &gt;<br>
 &gt; Collections:<br>
 &gt; (&quot;C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\collects&=
 quot;<br>
 &gt; =A0(non-existent-path))<br>
 &gt; (&quot;C:\\tools\\Racket\\Racket-5.3.1.9\\collects&quot;<br>
 &gt; =A0(&quot;2htdp&quot; &quot;algol60&quot; &quot;at-exp&quot; &quot;bro=
 wser&quot; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot=
 ; &quot;data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; =
 &quot;deinprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dy=
 next&quot; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot;=
  &quot;ffi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; =
 &quot;future-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;=
 gui-debugger&quot; &quot;help&quot; &quot;hierlist&quot; &quot;htdp&quot; &=
 quot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot=
 ; &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &=
 quot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;mred&quot=
 ; &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;mzlib&quot;=
  &quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;parser-tool=
 s&quot; &quot;picturing-programs&quot; &quot;plai&quot; &quot;planet&quot; =
 &quot;planet2&quot; &quot;plot&quot; &quot;preprocessor&quot; &quot;profile=
 &quot; &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&q=
 uot; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &quot;readlin=
 e&quot; &quot;redex&quot; &quot;repo-time-stamp&quot; &quot;rnrs&quot; &quo=
 t;s-exp&quot; &quot;scheme&quot; &quot;schemeunit&quot; &quot;scribble&quot=
 ; &quot;scribblings&quot; &quot;scriblib&quot; &quot;setup&quot; &quot;sgl&=
 quot; &quot;slatex&quot; &quot;slideshow&quot; &quot;srfi&quot; &quot;stepp=
 er&quot; &quot;string-constants&quot; &quot;swindle&quot; &quot;syntax&quot=
 ; &quot;syntax-color&quot; &quot;teachpack&quot; &quot;test-engine&quot; &q=
 uot;texpict&quot; &quot;trace&quot; &quot;typed&quot; &quot;typed-racket&qu=
 ot; &quot;typed-scheme&quot; &quot;unstable&quot; &quot;version&quot; &quot=
 ;web-server&quot; &quot;wxme&quot; &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 &gt;<br>
 &gt; Computer Language: ((&quot;Determine language from source&quot;) (#(#t=
  print mixed-fraction-e #f #t debug/profile) (default) #() &quot;#lang rack=
 et\n&quot; #f #t ((main) (test))))<br>
 &gt;<br>
 </blockquote></div><br>
 
 --e89a8fb1f600cb677204cfe49a85--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Kieron Hardy <kieron.hardy@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13337: DrRacket crash while in GC
Date: Sun, 2 Dec 2012 14:38:49 -0600

 Well, then I think that's just the expected behavior.
 
 Robby
 
 On Sun, Dec 2, 2012 at 2:37 PM, Kieron Hardy <kieron.hardy@gmail.com> wrote:
 > Memory limit was disabled.
 >
 > With a limit of 128M, DrRacket gives the out of memory error, while cleaning
 > up a short while after pressing Stop.
 >
 > On Sun, Dec 2, 2012 at 12:12 PM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >>
 >> Have you disabled the memory limit?
 >>
 >> Robby
 >>
 >> On Sun, Dec 2, 2012 at 11:20 AM,  <kieron.hardy@gmail.com> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13337
 >> >
 >> > Reported by Kieron Hardy for release: 5.3.1.9--2012-11-30(e4f5a05/a)
 >> >
 >> > *** Description:
 >> > While refactoring a program I introduced a bug (that boiled down to
 >> > infinite mutual recursion). During debugging DrRacket would often crash
 >> > sometime after pressing Stop to end the program.
 >> >
 >> > I reduced the buggy code and now have a program that when run for long
 >> > enough reliably causes DrRacket to crash or stop responding to Windows. e.g.
 >> > In the last 10 executions, after running for 20+ seconds then pressing Stop,
 >> > DrRacket crashed 7 times and stopped responding to Windows 2 times.
 >> >
 >> > Note that if the program is executed for only a short while before
 >> > pressing Stop, DrRacket works as expected, but after running for 20+ seconds
 >> > and pressing Stop, DrRacket will take up to a minute or more to cleanup or
 >> > crash.
 >> >
 >> > Example crash report (note all crash reports are identical except for
 >> > the Additional Information values):
 >> >
 >> >  Problem signature:
 >> >    Problem Event Name:  APPCRASH
 >> >    Application Name:    DrRacket.exe
 >> >    Application Version: 0.0.0.0
 >> >    Application Timestamp:       50b873a9
 >> >    Fault Module Name:   libracket3m_8bh229.dll
 >> >    Fault Module Version:        0.0.0.0
 >> >    Fault Module Timestamp:      50b873a5
 >> >    Exception Code:      40000015
 >> >    Exception Offset:    0023d458
 >> >    OS Version:  6.0.6002.2.2.0.256.1
 >> >    Locale ID:   1033
 >> >    Additional Information 1:    3a1d
 >> >    Additional Information 2:    e6af31ffe7611d6f728def978fa505fc
 >> >    Additional Information 3:    09a6
 >> >    Additional Information 4:    f923b1b753e818b70998b9346432def3
 >> >
 >> > *** How to repeat:
 >> > #lang racket/base
 >> >
 >> > (require racket/class)
 >> > (require framework/preferences)
 >> >
 >> > (define (djt:set-default name val predicate)
 >> >   (preferences:set-default
 >> >     name
 >> >     val
 >> >     predicate
 >> >     #:aliases (list )
 >> >     #:rewrite-aliases (list )
 >> >     ))
 >> >
 >> > (djt:set-default 'xxxxxxxxxxxxxxxxxxxxxxxx
 >> >                  "dir"
 >> >                  (lambda (x) (string? x)))
 >> >
 >> > (define (djt:get-preference name)
 >> >   (preferences:get
 >> >     name
 >> >     ))
 >> >
 >> > (define djt-file%
 >> >   (class object%
 >> >
 >> >     (init-field
 >> >       [get-file-path-fn (lambda () (void))]
 >> >       [get-file-name-fn (lambda () (void))]
 >> >       )
 >> >
 >> >     (super-new)
 >> >
 >> >     (define/public (get-file-path)
 >> >       (get-file-path-fn))
 >> >
 >> >     (define/public (get-file-name)
 >> >       (get-file-name-fn))
 >> >
 >> >     ))
 >> >
 >> > (define djt-file-manager
 >> >   (new
 >> >     (class object%
 >> >       (super-new)
 >> >
 >> >       (define game-file
 >> >         (new djt-file%
 >> >           [get-file-path-fn
 >> >             (lambda ()
 >> >               (string-append
 >> >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)
 >> >                 "\\"))]
 >> >           [get-file-name-fn
 >> >             (lambda ()
 >> >               (string-append
 >> >                 (get-game-file-path)
 >> >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)))]
 >> >           ))
 >> >
 >> >       (define/public (get-game-file-path)
 >> >         (send game-file get-file-name)) ; Bug: should be get-file-path
 >> >
 >> >       (define/public (get-game-file-name)
 >> >         (send game-file get-file-name))
 >> >
 >> >       )))
 >> >
 >> > {printf "game-file-name:\"~a\"~n"
 >> >         (send djt-file-manager get-game-file-name)
 >> >         }
 >> >
 >> > *** Environment:
 >> > windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m)
 >> > (get-display-depth) = 32
 >> > Human Language: english
 >> > (current-memory-use) 146607052
 >> > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >> > (links #:user? #f #:root? #t) = ()
 >> >
 >> >
 >> > Collections:
 >> > ("C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\collects"
 >> >  (non-existent-path))
 >> > ("C:\\tools\\Racket\\Racket-5.3.1.9\\collects"
 >> >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler"
 >> > "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket"
 >> > "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"
 >> > "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger"
 >> > "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang"
 >> > "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx"
 >> > "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 >> > "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor"
 >> > "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader"
 >> > "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit"
 >> > "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow"
 >> > "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color"
 >> > "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket"
 >> > "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >> >
 >> > Computer Language: (("Determine language from source") (#(#t print
 >> > mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n" #f #t
 >> > ((main) (test))))
 >> >
 >
 >
From: Kieron Hardy <kieron.hardy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13337: DrRacket crash while in GC
Date: Sun, 2 Dec 2012 13:50:36 -0700

 --e89a8ff1c170dc87ab04cfe4c8a1
 Content-Type: text/plain; charset=ISO-8859-1
 
 I would expect an out memory message (not a crash) even when DrRacket's use
 of memory was unlimited.
 
 On Sun, Dec 2, 2012 at 1:38 PM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > Well, then I think that's just the expected behavior.
 >
 > Robby
 >
 > On Sun, Dec 2, 2012 at 2:37 PM, Kieron Hardy <kieron.hardy@gmail.com>
 > wrote:
 > > Memory limit was disabled.
 > >
 > > With a limit of 128M, DrRacket gives the out of memory error, while
 > cleaning
 > > up a short while after pressing Stop.
 > >
 > > On Sun, Dec 2, 2012 at 12:12 PM, Robby Findler <
 > robby@eecs.northwestern.edu>
 > > wrote:
 > >>
 > >> Have you disabled the memory limit?
 > >>
 > >> Robby
 > >>
 > >> On Sun, Dec 2, 2012 at 11:20 AM,  <kieron.hardy@gmail.com> wrote:
 > >> > A new problem report is waiting at
 > >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13337
 > >> >
 > >> > Reported by Kieron Hardy for release: 5.3.1.9--2012-11-30(e4f5a05/a)
 > >> >
 > >> > *** Description:
 > >> > While refactoring a program I introduced a bug (that boiled down to
 > >> > infinite mutual recursion). During debugging DrRacket would often
 > crash
 > >> > sometime after pressing Stop to end the program.
 > >> >
 > >> > I reduced the buggy code and now have a program that when run for long
 > >> > enough reliably causes DrRacket to crash or stop responding to
 > Windows. e.g.
 > >> > In the last 10 executions, after running for 20+ seconds then
 > pressing Stop,
 > >> > DrRacket crashed 7 times and stopped responding to Windows 2 times.
 > >> >
 > >> > Note that if the program is executed for only a short while before
 > >> > pressing Stop, DrRacket works as expected, but after running for 20+
 > seconds
 > >> > and pressing Stop, DrRacket will take up to a minute or more to
 > cleanup or
 > >> > crash.
 > >> >
 > >> > Example crash report (note all crash reports are identical except for
 > >> > the Additional Information values):
 > >> >
 > >> >  Problem signature:
 > >> >    Problem Event Name:  APPCRASH
 > >> >    Application Name:    DrRacket.exe
 > >> >    Application Version: 0.0.0.0
 > >> >    Application Timestamp:       50b873a9
 > >> >    Fault Module Name:   libracket3m_8bh229.dll
 > >> >    Fault Module Version:        0.0.0.0
 > >> >    Fault Module Timestamp:      50b873a5
 > >> >    Exception Code:      40000015
 > >> >    Exception Offset:    0023d458
 > >> >    OS Version:  6.0.6002.2.2.0.256.1
 > >> >    Locale ID:   1033
 > >> >    Additional Information 1:    3a1d
 > >> >    Additional Information 2:    e6af31ffe7611d6f728def978fa505fc
 > >> >    Additional Information 3:    09a6
 > >> >    Additional Information 4:    f923b1b753e818b70998b9346432def3
 > >> >
 > >> > *** How to repeat:
 > >> > #lang racket/base
 > >> >
 > >> > (require racket/class)
 > >> > (require framework/preferences)
 > >> >
 > >> > (define (djt:set-default name val predicate)
 > >> >   (preferences:set-default
 > >> >     name
 > >> >     val
 > >> >     predicate
 > >> >     #:aliases (list )
 > >> >     #:rewrite-aliases (list )
 > >> >     ))
 > >> >
 > >> > (djt:set-default 'xxxxxxxxxxxxxxxxxxxxxxxx
 > >> >                  "dir"
 > >> >                  (lambda (x) (string? x)))
 > >> >
 > >> > (define (djt:get-preference name)
 > >> >   (preferences:get
 > >> >     name
 > >> >     ))
 > >> >
 > >> > (define djt-file%
 > >> >   (class object%
 > >> >
 > >> >     (init-field
 > >> >       [get-file-path-fn (lambda () (void))]
 > >> >       [get-file-name-fn (lambda () (void))]
 > >> >       )
 > >> >
 > >> >     (super-new)
 > >> >
 > >> >     (define/public (get-file-path)
 > >> >       (get-file-path-fn))
 > >> >
 > >> >     (define/public (get-file-name)
 > >> >       (get-file-name-fn))
 > >> >
 > >> >     ))
 > >> >
 > >> > (define djt-file-manager
 > >> >   (new
 > >> >     (class object%
 > >> >       (super-new)
 > >> >
 > >> >       (define game-file
 > >> >         (new djt-file%
 > >> >           [get-file-path-fn
 > >> >             (lambda ()
 > >> >               (string-append
 > >> >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)
 > >> >                 "\\"))]
 > >> >           [get-file-name-fn
 > >> >             (lambda ()
 > >> >               (string-append
 > >> >                 (get-game-file-path)
 > >> >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)))]
 > >> >           ))
 > >> >
 > >> >       (define/public (get-game-file-path)
 > >> >         (send game-file get-file-name)) ; Bug: should be get-file-path
 > >> >
 > >> >       (define/public (get-game-file-name)
 > >> >         (send game-file get-file-name))
 > >> >
 > >> >       )))
 > >> >
 > >> > {printf "game-file-name:\"~a\"~n"
 > >> >         (send djt-file-manager get-game-file-name)
 > >> >         }
 > >> >
 > >> > *** Environment:
 > >> > windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m)
 > >> > (get-display-depth) = 32
 > >> > Human Language: english
 > >> > (current-memory-use) 146607052
 > >> > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 > >> > (links #:user? #f #:root? #t) = ()
 > >> >
 > >> >
 > >> > Collections:
 > >> > ("C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\collects"
 > >> >  (non-existent-path))
 > >> > ("C:\\tools\\Racket\\Racket-5.3.1.9\\collects"
 > >> >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler"
 > >> > "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket"
 > >> > "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"
 > >> > "framework" "frtime" "future-visualizer" "games" "graphics"
 > "gui-debugger"
 > >> > "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 > "lang"
 > >> > "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib"
 > "mysterx"
 > >> > "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 > >> > "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor"
 > >> > "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader"
 > >> > "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme"
 > "schemeunit"
 > >> > "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow"
 > >> > "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color"
 > >> > "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket"
 > >> > "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"
 > "xrepl"))
 > >> >
 > >> > Computer Language: (("Determine language from source") (#(#t print
 > >> > mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n"
 > #f #t
 > >> > ((main) (test))))
 > >> >
 > >
 > >
 >
 
 --e89a8ff1c170dc87ab04cfe4c8a1
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 I would expect an out memory message (not a crash) even when DrRacket&#39;s=
  use of memory was unlimited.<br><div class=3D"gmail_quote"><br>On Sun, Dec=
  2, 2012 at 1:38 PM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:=
 robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu<=
 /a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">Well, then I think that&#39;s just the expec=
 ted behavior.<br>
 <span class=3D"HOEnZb"><font color=3D"#888888"><br>
 Robby<br>
 </font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Sun, Dec 2, 2012 at 2:37 PM, Kieron Hardy &lt;<a href=3D"mailto:kieron.h=
 ardy@gmail.com">kieron.hardy@gmail.com</a>&gt; wrote:<br>
 &gt; Memory limit was disabled.<br>
 &gt;<br>
 &gt; With a limit of 128M, DrRacket gives the out of memory error, while cl=
 eaning<br>
 &gt; up a short while after pressing Stop.<br>
 &gt;<br>
 &gt; On Sun, Dec 2, 2012 at 12:12 PM, Robby Findler &lt;<a href=3D"mailto:r=
 obby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; Have you disabled the memory limit?<br>
 &gt;&gt;<br>
 &gt;&gt; Robby<br>
 &gt;&gt;<br>
 &gt;&gt; On Sun, Dec 2, 2012 at 11:20 AM, =A0&lt;<a href=3D"mailto:kieron.h=
 ardy@gmail.com">kieron.hardy@gmail.com</a>&gt; wrote:<br>
 &gt;&gt; &gt; A new problem report is waiting at<br>
 &gt;&gt; &gt; =A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&=
 amp;pr=3D13337" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3D=
 view&amp;pr=3D13337</a><br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Reported by Kieron Hardy for release: 5.3.1.9--2012-11-30(e4f=
 5a05/a)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** Description:<br>
 &gt;&gt; &gt; While refactoring a program I introduced a bug (that boiled d=
 own to<br>
 &gt;&gt; &gt; infinite mutual recursion). During debugging DrRacket would o=
 ften crash<br>
 &gt;&gt; &gt; sometime after pressing Stop to end the program.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; I reduced the buggy code and now have a program that when run=
  for long<br>
 &gt;&gt; &gt; enough reliably causes DrRacket to crash or stop responding t=
 o Windows. e.g.<br>
 &gt;&gt; &gt; In the last 10 executions, after running for 20+ seconds then=
  pressing Stop,<br>
 &gt;&gt; &gt; DrRacket crashed 7 times and stopped responding to Windows 2 =
 times.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Note that if the program is executed for only a short while b=
 efore<br>
 &gt;&gt; &gt; pressing Stop, DrRacket works as expected, but after running =
 for 20+ seconds<br>
 &gt;&gt; &gt; and pressing Stop, DrRacket will take up to a minute or more =
 to cleanup or<br>
 &gt;&gt; &gt; crash.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Example crash report (note all crash reports are identical ex=
 cept for<br>
 &gt;&gt; &gt; the Additional Information values):<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0Problem signature:<br>
 &gt;&gt; &gt; =A0 =A0Problem Event Name: =A0APPCRASH<br>
 &gt;&gt; &gt; =A0 =A0Application Name: =A0 =A0DrRacket.exe<br>
 &gt;&gt; &gt; =A0 =A0Application Version: 0.0.0.0<br>
 &gt;&gt; &gt; =A0 =A0Application Timestamp: =A0 =A0 =A0 50b873a9<br>
 &gt;&gt; &gt; =A0 =A0Fault Module Name: =A0 libracket3m_8bh229.dll<br>
 &gt;&gt; &gt; =A0 =A0Fault Module Version: =A0 =A0 =A0 =A00.0.0.0<br>
 &gt;&gt; &gt; =A0 =A0Fault Module Timestamp: =A0 =A0 =A050b873a5<br>
 &gt;&gt; &gt; =A0 =A0Exception Code: =A0 =A0 =A040000015<br>
 &gt;&gt; &gt; =A0 =A0Exception Offset: =A0 =A00023d458<br>
 &gt;&gt; &gt; =A0 =A0OS Version: =A06.0.6002.2.2.0.256.1<br>
 &gt;&gt; &gt; =A0 =A0Locale ID: =A0 1033<br>
 &gt;&gt; &gt; =A0 =A0Additional Information 1: =A0 =A03a1d<br>
 &gt;&gt; &gt; =A0 =A0Additional Information 2: =A0 =A0e6af31ffe7611d6f728de=
 f978fa505fc<br>
 &gt;&gt; &gt; =A0 =A0Additional Information 3: =A0 =A009a6<br>
 &gt;&gt; &gt; =A0 =A0Additional Information 4: =A0 =A0f923b1b753e818b70998b=
 9346432def3<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** How to repeat:<br>
 &gt;&gt; &gt; #lang racket/base<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (require racket/class)<br>
 &gt;&gt; &gt; (require framework/preferences)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (define (djt:set-default name val predicate)<br>
 &gt;&gt; &gt; =A0 (preferences:set-default<br>
 &gt;&gt; &gt; =A0 =A0 name<br>
 &gt;&gt; &gt; =A0 =A0 val<br>
 &gt;&gt; &gt; =A0 =A0 predicate<br>
 &gt;&gt; &gt; =A0 =A0 #:aliases (list )<br>
 &gt;&gt; &gt; =A0 =A0 #:rewrite-aliases (list )<br>
 &gt;&gt; &gt; =A0 =A0 ))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (djt:set-default &#39;xxxxxxxxxxxxxxxxxxxxxxxx<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0&quot;dir&quot;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0(lambda (x) (string? x)))<=
 br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (define (djt:get-preference name)<br>
 &gt;&gt; &gt; =A0 (preferences:get<br>
 &gt;&gt; &gt; =A0 =A0 name<br>
 &gt;&gt; &gt; =A0 =A0 ))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (define djt-file%<br>
 &gt;&gt; &gt; =A0 (class object%<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 (init-field<br>
 &gt;&gt; &gt; =A0 =A0 =A0 [get-file-path-fn (lambda () (void))]<br>
 &gt;&gt; &gt; =A0 =A0 =A0 [get-file-name-fn (lambda () (void))]<br>
 &gt;&gt; &gt; =A0 =A0 =A0 )<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 (super-new)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 (define/public (get-file-path)<br>
 &gt;&gt; &gt; =A0 =A0 =A0 (get-file-path-fn))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 (define/public (get-file-name)<br>
 &gt;&gt; &gt; =A0 =A0 =A0 (get-file-name-fn))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 ))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (define djt-file-manager<br>
 &gt;&gt; &gt; =A0 (new<br>
 &gt;&gt; &gt; =A0 =A0 (class object%<br>
 &gt;&gt; &gt; =A0 =A0 =A0 (super-new)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 (define game-file<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 (new djt-file%<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 [get-file-path-fn<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 (lambda ()<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 (string-append<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (djt:get-preference &#39;xxxx=
 xxxxxxxxxxxxxxxxxxxx)<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 &quot;\\&quot;))]<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 [get-file-name-fn<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 (lambda ()<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 (string-append<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (get-game-file-path)<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 (djt:get-preference &#39;xxxx=
 xxxxxxxxxxxxxxxxxxxx)))]<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 ))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 (define/public (get-game-file-path)<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 (send game-file get-file-name)) ; Bug: should=
  be get-file-path<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 (define/public (get-game-file-name)<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 (send game-file get-file-name))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 )))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; {printf &quot;game-file-name:\&quot;~a\&quot;~n&quot;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 (send djt-file-manager get-game-file-name)<br=
 >
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 }<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** Environment:<br>
 &gt;&gt; &gt; windows &quot;Windows NT 6.0 (Build 6002) Service Pack 2&quot=
 ; (win32\i386\3m)<br>
 &gt;&gt; &gt; (get-display-depth) =3D 32<br>
 &gt;&gt; &gt; Human Language: english<br>
 &gt;&gt; &gt; (current-memory-use) 146607052<br>
 &gt;&gt; &gt; Links: (links) =3D (); (links #:user? #f) =3D (); (links #:ro=
 ot? #t) =3D ();<br>
 &gt;&gt; &gt; (links #:user? #f #:root? #t) =3D ()<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Collections:<br>
 &gt;&gt; &gt; (&quot;C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\=
 collects&quot;<br>
 &gt;&gt; &gt; =A0(non-existent-path))<br>
 &gt;&gt; &gt; (&quot;C:\\tools\\Racket\\Racket-5.3.1.9\\collects&quot;<br>
 &gt;&gt; &gt; =A0(&quot;2htdp&quot; &quot;algol60&quot; &quot;at-exp&quot; =
 &quot;browser&quot; &quot;compatibility&quot; &quot;compiler&quot;<br>
 &gt;&gt; &gt; &quot;config&quot; &quot;data&quot; &quot;datalog&quot; &quot=
 ;db&quot; &quot;defaults&quot; &quot;deinprogramm&quot; &quot;drracket&quot=
 ;<br>
 &gt;&gt; &gt; &quot;drscheme&quot; &quot;dynext&quot; &quot;embedded-gui&qu=
 ot; &quot;eopl&quot; &quot;errortrace&quot; &quot;ffi&quot; &quot;file&quot=
 ;<br>
 &gt;&gt; &gt; &quot;framework&quot; &quot;frtime&quot; &quot;future-visuali=
 zer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gui-debugger&quot;<b=
 r>
 &gt;&gt; &gt; &quot;help&quot; &quot;hierlist&quot; &quot;htdp&quot; &quot;=
 html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; &qu=
 ot;json&quot; &quot;lang&quot;<br>
 &gt;&gt; &gt; &quot;launcher&quot; &quot;lazy&quot; &quot;macro-debugger&qu=
 ot; &quot;make&quot; &quot;math&quot; &quot;mred&quot; &quot;mrlib&quot; &q=
 uot;mysterx&quot;<br>
 &gt;&gt; &gt; &quot;mzcom&quot; &quot;mzlib&quot; &quot;mzscheme&quot; &quo=
 t;net&quot; &quot;openssl&quot; &quot;parser-tools&quot;<br>
 &gt;&gt; &gt; &quot;picturing-programs&quot; &quot;plai&quot; &quot;planet&=
 quot; &quot;planet2&quot; &quot;plot&quot; &quot;preprocessor&quot;<br>
 &gt;&gt; &gt; &quot;profile&quot; &quot;r5rs&quot; &quot;r6rs&quot; &quot;r=
 acket&quot; &quot;racklog&quot; &quot;rackunit&quot; &quot;raco&quot; &quot=
 ;reader&quot;<br>
 &gt;&gt; &gt; &quot;readline&quot; &quot;redex&quot; &quot;repo-time-stamp&=
 quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quot; &quot;schemeuni=
 t&quot;<br>
 &gt;&gt; &gt; &quot;scribble&quot; &quot;scribblings&quot; &quot;scriblib&q=
 uot; &quot;setup&quot; &quot;sgl&quot; &quot;slatex&quot; &quot;slideshow&q=
 uot;<br>
 &gt;&gt; &gt; &quot;srfi&quot; &quot;stepper&quot; &quot;string-constants&q=
 uot; &quot;swindle&quot; &quot;syntax&quot; &quot;syntax-color&quot;<br>
 &gt;&gt; &gt; &quot;teachpack&quot; &quot;test-engine&quot; &quot;texpict&q=
 uot; &quot;trace&quot; &quot;typed&quot; &quot;typed-racket&quot;<br>
 &gt;&gt; &gt; &quot;typed-scheme&quot; &quot;unstable&quot; &quot;version&q=
 uot; &quot;web-server&quot; &quot;wxme&quot; &quot;xml&quot; &quot;xrepl&qu=
 ot;))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Computer Language: ((&quot;Determine language from source&quo=
 t;) (#(#t print<br>
 &gt;&gt; &gt; mixed-fraction-e #f #t debug/profile) (default) #() &quot;#la=
 ng racket\n&quot; #f #t<br>
 &gt;&gt; &gt; ((main) (test))))<br>
 &gt;&gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br>
 
 --e89a8ff1c170dc87ab04cfe4c8a1--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Kieron Hardy <kieron.hardy@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13337: DrRacket crash while in GC
Date: Sun, 2 Dec 2012 15:00:43 -0600

 It isn't DrRacket's use of memory that that limits; it is your
 program's memory. Your program consumed so much memory that DrRacket
 couldn't recover enough memory to even print something or open a
 dialog.
 
 Perhaps the wording should be stronger on the menu item, but when you
 do that, you are essentially disabling essential protections and the
 result of that is that drracket can now crash. It is the same as
 misusing unsafe-fx+ or something. If you don't have a good reason to
 do this, you shoudln't do it.
 
 That is, you can get drracket to crash by doing:
 
   (unsafe-car 1)
 
 For similar reasons, you won't get a dialog box saying "don't do
 that". You have to run this program for the nice message
 
   (car 1)
 
 Robby
 
 On Sun, Dec 2, 2012 at 2:50 PM, Kieron Hardy <kieron.hardy@gmail.com> wrote:
 > I would expect an out memory message (not a crash) even when DrRacket's use
 > of memory was unlimited.
 >
 >
 > On Sun, Dec 2, 2012 at 1:38 PM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >>
 >> Well, then I think that's just the expected behavior.
 >>
 >> Robby
 >>
 >> On Sun, Dec 2, 2012 at 2:37 PM, Kieron Hardy <kieron.hardy@gmail.com>
 >> wrote:
 >> > Memory limit was disabled.
 >> >
 >> > With a limit of 128M, DrRacket gives the out of memory error, while
 >> > cleaning
 >> > up a short while after pressing Stop.
 >> >
 >> > On Sun, Dec 2, 2012 at 12:12 PM, Robby Findler
 >> > <robby@eecs.northwestern.edu>
 >> > wrote:
 >> >>
 >> >> Have you disabled the memory limit?
 >> >>
 >> >> Robby
 >> >>
 >> >> On Sun, Dec 2, 2012 at 11:20 AM,  <kieron.hardy@gmail.com> wrote:
 >> >> > A new problem report is waiting at
 >> >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13337
 >> >> >
 >> >> > Reported by Kieron Hardy for release: 5.3.1.9--2012-11-30(e4f5a05/a)
 >> >> >
 >> >> > *** Description:
 >> >> > While refactoring a program I introduced a bug (that boiled down to
 >> >> > infinite mutual recursion). During debugging DrRacket would often
 >> >> > crash
 >> >> > sometime after pressing Stop to end the program.
 >> >> >
 >> >> > I reduced the buggy code and now have a program that when run for
 >> >> > long
 >> >> > enough reliably causes DrRacket to crash or stop responding to
 >> >> > Windows. e.g.
 >> >> > In the last 10 executions, after running for 20+ seconds then
 >> >> > pressing Stop,
 >> >> > DrRacket crashed 7 times and stopped responding to Windows 2 times.
 >> >> >
 >> >> > Note that if the program is executed for only a short while before
 >> >> > pressing Stop, DrRacket works as expected, but after running for 20+
 >> >> > seconds
 >> >> > and pressing Stop, DrRacket will take up to a minute or more to
 >> >> > cleanup or
 >> >> > crash.
 >> >> >
 >> >> > Example crash report (note all crash reports are identical except for
 >> >> > the Additional Information values):
 >> >> >
 >> >> >  Problem signature:
 >> >> >    Problem Event Name:  APPCRASH
 >> >> >    Application Name:    DrRacket.exe
 >> >> >    Application Version: 0.0.0.0
 >> >> >    Application Timestamp:       50b873a9
 >> >> >    Fault Module Name:   libracket3m_8bh229.dll
 >> >> >    Fault Module Version:        0.0.0.0
 >> >> >    Fault Module Timestamp:      50b873a5
 >> >> >    Exception Code:      40000015
 >> >> >    Exception Offset:    0023d458
 >> >> >    OS Version:  6.0.6002.2.2.0.256.1
 >> >> >    Locale ID:   1033
 >> >> >    Additional Information 1:    3a1d
 >> >> >    Additional Information 2:    e6af31ffe7611d6f728def978fa505fc
 >> >> >    Additional Information 3:    09a6
 >> >> >    Additional Information 4:    f923b1b753e818b70998b9346432def3
 >> >> >
 >> >> > *** How to repeat:
 >> >> > #lang racket/base
 >> >> >
 >> >> > (require racket/class)
 >> >> > (require framework/preferences)
 >> >> >
 >> >> > (define (djt:set-default name val predicate)
 >> >> >   (preferences:set-default
 >> >> >     name
 >> >> >     val
 >> >> >     predicate
 >> >> >     #:aliases (list )
 >> >> >     #:rewrite-aliases (list )
 >> >> >     ))
 >> >> >
 >> >> > (djt:set-default 'xxxxxxxxxxxxxxxxxxxxxxxx
 >> >> >                  "dir"
 >> >> >                  (lambda (x) (string? x)))
 >> >> >
 >> >> > (define (djt:get-preference name)
 >> >> >   (preferences:get
 >> >> >     name
 >> >> >     ))
 >> >> >
 >> >> > (define djt-file%
 >> >> >   (class object%
 >> >> >
 >> >> >     (init-field
 >> >> >       [get-file-path-fn (lambda () (void))]
 >> >> >       [get-file-name-fn (lambda () (void))]
 >> >> >       )
 >> >> >
 >> >> >     (super-new)
 >> >> >
 >> >> >     (define/public (get-file-path)
 >> >> >       (get-file-path-fn))
 >> >> >
 >> >> >     (define/public (get-file-name)
 >> >> >       (get-file-name-fn))
 >> >> >
 >> >> >     ))
 >> >> >
 >> >> > (define djt-file-manager
 >> >> >   (new
 >> >> >     (class object%
 >> >> >       (super-new)
 >> >> >
 >> >> >       (define game-file
 >> >> >         (new djt-file%
 >> >> >           [get-file-path-fn
 >> >> >             (lambda ()
 >> >> >               (string-append
 >> >> >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)
 >> >> >                 "\\"))]
 >> >> >           [get-file-name-fn
 >> >> >             (lambda ()
 >> >> >               (string-append
 >> >> >                 (get-game-file-path)
 >> >> >                 (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)))]
 >> >> >           ))
 >> >> >
 >> >> >       (define/public (get-game-file-path)
 >> >> >         (send game-file get-file-name)) ; Bug: should be
 >> >> > get-file-path
 >> >> >
 >> >> >       (define/public (get-game-file-name)
 >> >> >         (send game-file get-file-name))
 >> >> >
 >> >> >       )))
 >> >> >
 >> >> > {printf "game-file-name:\"~a\"~n"
 >> >> >         (send djt-file-manager get-game-file-name)
 >> >> >         }
 >> >> >
 >> >> > *** Environment:
 >> >> > windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m)
 >> >> > (get-display-depth) = 32
 >> >> > Human Language: english
 >> >> > (current-memory-use) 146607052
 >> >> > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) =
 >> >> > ();
 >> >> > (links #:user? #f #:root? #t) = ()
 >> >> >
 >> >> >
 >> >> > Collections:
 >> >> > ("C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\collects"
 >> >> >  (non-existent-path))
 >> >> > ("C:\\tools\\Racket\\Racket-5.3.1.9\\collects"
 >> >> >  ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler"
 >> >> > "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket"
 >> >> > "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"
 >> >> > "framework" "frtime" "future-visualizer" "games" "graphics"
 >> >> > "gui-debugger"
 >> >> > "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 >> >> > "lang"
 >> >> > "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib"
 >> >> > "mysterx"
 >> >> > "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 >> >> > "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor"
 >> >> > "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader"
 >> >> > "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme"
 >> >> > "schemeunit"
 >> >> > "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex"
 >> >> > "slideshow"
 >> >> > "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color"
 >> >> > "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket"
 >> >> > "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"
 >> >> > "xrepl"))
 >> >> >
 >> >> > Computer Language: (("Determine language from source") (#(#t print
 >> >> > mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n"
 >> >> > #f #t
 >> >> > ((main) (test))))
 >> >> >
 >> >
 >> >
 >
 >
From: Kieron Hardy <kieron.hardy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13337: DrRacket crash while in GC
Date: Mon, 3 Dec 2012 01:08:58 -0700

 Thanks for the info, Robby. 
 
 When stated that way, it's clear that a crash would be expected. The dialog to select "unlimited" definitely needs somewhere to include the word "unsafe". I had no idea that "take all the memory you can" meant "take off some of the safety belts". I'll need now to explore what a exe generated with Racket will do.
 
 I'm still surprised though, that the crash occurs when DrRacket is cleaning up. And also rather surprised that cleanup takes so long to do. I would have expected an out-of-memory crash during execution, as my previous misbehaving and/or exploratory non-Racket  programs have done. And I also would have expected cleanup to be much quicker. My thinking was that "Stop" meant "kill the process running the code that is in the Definitions window, the process that was started with Run", but clearly there's a lot more going on. Perhaps there might be some opportunities to speed cleanup with a few extra (or earlier) set!'s to #f, so as to help the GC know sooner that the program's memory is no longer needed.  Anyway, there's obviously other areas that I need to explore much further.
 
 BTW, I had forgotten changing the memory setting, but now remember trying "unlimited" so that I might be able to run MrEd Designer in DrRacket and debug an issue I am having when editing a particular UI. Unfortunately even "unlimited" (on my 4GB machine) was not enough for the combination of the complexity of the UI, the overhead of using DrRacket, and the (perhaps inefficient) implementation of MrEd Designer. I should have gone back to specifying some limit on memory usage earlier, and now I better understand your recent comments on the list regarding blindly setting the value to unlimited. 
 
 Cheers,
 
 Kieron.
 
 On Dec 2, 2012, at 14:00, Robby Findler <robby@eecs.northwestern.edu> wrote:
 
 > It isn't DrRacket's use of memory that that limits; it is your
 > program's memory. Your program consumed so much memory that DrRacket
 > couldn't recover enough memory to even print something or open a
 > dialog.
 > 
 > Perhaps the wording should be stronger on the menu item, but when you
 > do that, you are essentially disabling essential protections and the
 > result of that is that drracket can now crash. It is the same as
 > misusing unsafe-fx+ or something. If you don't have a good reason to
 > do this, you shoudln't do it.
 > 
 > That is, you can get drracket to crash by doing:
 > 
 >  (unsafe-car 1)
 > 
 > For similar reasons, you won't get a dialog box saying "don't do
 > that". You have to run this program for the nice message
 > 
 >  (car 1)
 > 
 > Robby
 > 
 > On Sun, Dec 2, 2012 at 2:50 PM, Kieron Hardy <kieron.hardy@gmail.com> wrote:
 >> I would expect an out memory message (not a crash) even when DrRacket's use
 >> of memory was unlimited.
 >> 
 >> 
 >> On Sun, Dec 2, 2012 at 1:38 PM, Robby Findler <robby@eecs.northwestern.edu>
 >> wrote:
 >>> 
 >>> Well, then I think that's just the expected behavior.
 >>> 
 >>> Robby
 >>> 
 >>> On Sun, Dec 2, 2012 at 2:37 PM, Kieron Hardy <kieron.hardy@gmail.com>
 >>> wrote:
 >>>> Memory limit was disabled.
 >>>> 
 >>>> With a limit of 128M, DrRacket gives the out of memory error, while
 >>>> cleaning
 >>>> up a short while after pressing Stop.
 >>>> 
 >>>> On Sun, Dec 2, 2012 at 12:12 PM, Robby Findler
 >>>> <robby@eecs.northwestern.edu>
 >>>> wrote:
 >>>>> 
 >>>>> Have you disabled the memory limit?
 >>>>> 
 >>>>> Robby
 >>>>> 
 >>>>> On Sun, Dec 2, 2012 at 11:20 AM,  <kieron.hardy@gmail.com> wrote:
 >>>>>> A new problem report is waiting at
 >>>>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13337
 >>>>>> 
 >>>>>> Reported by Kieron Hardy for release: 5.3.1.9--2012-11-30(e4f5a05/a)
 >>>>>> 
 >>>>>> *** Description:
 >>>>>> While refactoring a program I introduced a bug (that boiled down to
 >>>>>> infinite mutual recursion). During debugging DrRacket would often
 >>>>>> crash
 >>>>>> sometime after pressing Stop to end the program.
 >>>>>> 
 >>>>>> I reduced the buggy code and now have a program that when run for
 >>>>>> long
 >>>>>> enough reliably causes DrRacket to crash or stop responding to
 >>>>>> Windows. e.g.
 >>>>>> In the last 10 executions, after running for 20+ seconds then
 >>>>>> pressing Stop,
 >>>>>> DrRacket crashed 7 times and stopped responding to Windows 2 times.
 >>>>>> 
 >>>>>> Note that if the program is executed for only a short while before
 >>>>>> pressing Stop, DrRacket works as expected, but after running for 20+
 >>>>>> seconds
 >>>>>> and pressing Stop, DrRacket will take up to a minute or more to
 >>>>>> cleanup or
 >>>>>> crash.
 >>>>>> 
 >>>>>> Example crash report (note all crash reports are identical except for
 >>>>>> the Additional Information values):
 >>>>>> 
 >>>>>> Problem signature:
 >>>>>>   Problem Event Name:  APPCRASH
 >>>>>>   Application Name:    DrRacket.exe
 >>>>>>   Application Version: 0.0.0.0
 >>>>>>   Application Timestamp:       50b873a9
 >>>>>>   Fault Module Name:   libracket3m_8bh229.dll
 >>>>>>   Fault Module Version:        0.0.0.0
 >>>>>>   Fault Module Timestamp:      50b873a5
 >>>>>>   Exception Code:      40000015
 >>>>>>   Exception Offset:    0023d458
 >>>>>>   OS Version:  6.0.6002.2.2.0.256.1
 >>>>>>   Locale ID:   1033
 >>>>>>   Additional Information 1:    3a1d
 >>>>>>   Additional Information 2:    e6af31ffe7611d6f728def978fa505fc
 >>>>>>   Additional Information 3:    09a6
 >>>>>>   Additional Information 4:    f923b1b753e818b70998b9346432def3
 >>>>>> 
 >>>>>> *** How to repeat:
 >>>>>> #lang racket/base
 >>>>>> 
 >>>>>> (require racket/class)
 >>>>>> (require framework/preferences)
 >>>>>> 
 >>>>>> (define (djt:set-default name val predicate)
 >>>>>>  (preferences:set-default
 >>>>>>    name
 >>>>>>    val
 >>>>>>    predicate
 >>>>>>    #:aliases (list )
 >>>>>>    #:rewrite-aliases (list )
 >>>>>>    ))
 >>>>>> 
 >>>>>> (djt:set-default 'xxxxxxxxxxxxxxxxxxxxxxxx
 >>>>>>                 "dir"
 >>>>>>                 (lambda (x) (string? x)))
 >>>>>> 
 >>>>>> (define (djt:get-preference name)
 >>>>>>  (preferences:get
 >>>>>>    name
 >>>>>>    ))
 >>>>>> 
 >>>>>> (define djt-file%
 >>>>>>  (class object%
 >>>>>> 
 >>>>>>    (init-field
 >>>>>>      [get-file-path-fn (lambda () (void))]
 >>>>>>      [get-file-name-fn (lambda () (void))]
 >>>>>>      )
 >>>>>> 
 >>>>>>    (super-new)
 >>>>>> 
 >>>>>>    (define/public (get-file-path)
 >>>>>>      (get-file-path-fn))
 >>>>>> 
 >>>>>>    (define/public (get-file-name)
 >>>>>>      (get-file-name-fn))
 >>>>>> 
 >>>>>>    ))
 >>>>>> 
 >>>>>> (define djt-file-manager
 >>>>>>  (new
 >>>>>>    (class object%
 >>>>>>      (super-new)
 >>>>>> 
 >>>>>>      (define game-file
 >>>>>>        (new djt-file%
 >>>>>>          [get-file-path-fn
 >>>>>>            (lambda ()
 >>>>>>              (string-append
 >>>>>>                (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)
 >>>>>>                "\\"))]
 >>>>>>          [get-file-name-fn
 >>>>>>            (lambda ()
 >>>>>>              (string-append
 >>>>>>                (get-game-file-path)
 >>>>>>                (djt:get-preference 'xxxxxxxxxxxxxxxxxxxxxxxx)))]
 >>>>>>          ))
 >>>>>> 
 >>>>>>      (define/public (get-game-file-path)
 >>>>>>        (send game-file get-file-name)) ; Bug: should be
 >>>>>> get-file-path
 >>>>>> 
 >>>>>>      (define/public (get-game-file-name)
 >>>>>>        (send game-file get-file-name))
 >>>>>> 
 >>>>>>      )))
 >>>>>> 
 >>>>>> {printf "game-file-name:\"~a\"~n"
 >>>>>>        (send djt-file-manager get-game-file-name)
 >>>>>>        }
 >>>>>> 
 >>>>>> *** Environment:
 >>>>>> windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m)
 >>>>>> (get-display-depth) = 32
 >>>>>> Human Language: english
 >>>>>> (current-memory-use) 146607052
 >>>>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) =
 >>>>>> ();
 >>>>>> (links #:user? #f #:root? #t) = ()
 >>>>>> 
 >>>>>> 
 >>>>>> Collections:
 >>>>>> ("C:\\Users\\khardy\\AppData\\Roaming\\Racket\\5.3.1.9\\collects"
 >>>>>> (non-existent-path))
 >>>>>> ("C:\\tools\\Racket\\Racket-5.3.1.9\\collects"
 >>>>>> ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler"
 >>>>>> "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket"
 >>>>>> "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"
 >>>>>> "framework" "frtime" "future-visualizer" "games" "graphics"
 >>>>>> "gui-debugger"
 >>>>>> "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json"
 >>>>>> "lang"
 >>>>>> "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib"
 >>>>>> "mysterx"
 >>>>>> "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 >>>>>> "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor"
 >>>>>> "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader"
 >>>>>> "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme"
 >>>>>> "schemeunit"
 >>>>>> "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex"
 >>>>>> "slideshow"
 >>>>>> "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color"
 >>>>>> "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket"
 >>>>>> "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"
 >>>>>> "xrepl"))
 >>>>>> 
 >>>>>> Computer Language: (("Determine language from source") (#(#t print
 >>>>>> mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n"
 >>>>>> #f #t
 >>>>>> ((main) (test))))
 >>>>>> 
 >>>> 
 >>>> 
 >> 
 >> 
 
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Mon, 03 Dec 2012 09:54:59 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5163d424c3
State changed from "open" to "closed" by robby@racket-lang.org at Mon, 03 Dec 2012 09:54:59 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5163d424c3
From: Robby Findler <robby@eecs.northwestern.edu>
To: Kieron Hardy <kieron.hardy@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13337: DrRacket crash while in GC
Date: Mon, 3 Dec 2012 08:54:44 -0600

 --14dae93a18f90caece04cff3eee9
 Content-Type: text/plain; charset=UTF-8
 
 On Monday, December 3, 2012, Kieron Hardy wrote:
 
 > Thanks for the info, Robby.
 >
 > When stated that way, it's clear that a crash would be expected. The
 > dialog to select "unlimited" definitely needs somewhere to include the word
 > "unsafe". I had no idea that "take all the memory you can" meant "take off
 > some of the safety belts". I'll need now to explore what a exe generated
 > with Racket will do.
 >
 >
 Unless the program you created it with changes things, it will run in an
 unlimited mode. It is less dire in this situation, however, because there
 is only one thing going on in that racket process, namely your program. If
 your program has parts that might grow without bound and other parts can
 kill the potentially misbehaving part and continue, then you might want to
 look into custodian-memory-limit.
 
 
 > I'm still surprised though, that the crash occurs when DrRacket is
 > cleaning up. And also rather surprised that cleanup takes so long to do. I
 > would have expected an out-of-memory crash during execution, as my previous
 > misbehaving and/or exploratory non-Racket  programs have done. And I also
 > would have expected cleanup to be much quicker.
 
 
 Yes, that would be good if it were better. The current setup is what we
 have for now. If you want to read more about this, let me recommend Adam
 Wick's dissertation (and there was an ISMM paper too, which you can find
 from Matthew's website).
 
 
 > My thinking was that "Stop" meant "kill the process running the code that
 > is in the Definitions window, the process that was started with Run", but
 > clearly there's a lot more going on. Perhaps there might be some
 > opportunities to speed cleanup with a few extra (or earlier) set!'s to #f,
 > so as to help the GC know sooner that the program's memory is no longer
 > needed.  Anyway, there's obviously other areas that I need to explore much
 > further.
 >
 >
 There is only one (OS-level) process. DrRacket is it's own little OS!
 Again, I'll refer you to some research papers that we've written or,
 actually, in this case, you would probably be better off finding a talk
 that Matthew has given online on the subject.
 
 
 > BTW, I had forgotten changing the memory setting, but now remember trying
 > "unlimited" so that I might be able to run MrEd Designer in DrRacket and
 > debug an issue I am having when editing a particular UI. Unfortunately even
 > "unlimited" (on my 4GB machine) was not enough for the combination of the
 > complexity of the UI, the overhead of using DrRacket, and the (perhaps
 > inefficient) implementation of MrEd Designer. I should have gone back to
 > specifying some limit on memory usage earlier, and now I better understand
 > your recent comments on the list regarding blindly setting the value to
 > unlimited.
 >
 
 Thanks.
 
 I've improved the dialog and I'll push a fix that'll close this PR.
 
 Robby
 
 --14dae93a18f90caece04cff3eee9
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <br><br>On Monday, December 3, 2012, Kieron Hardy  wrote:<br><blockquote cl=
 ass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;p=
 adding-left:1ex">Thanks for the info, Robby.<br>
 <br>
 When stated that way, it&#39;s clear that a crash would be expected. The di=
 alog to select &quot;unlimited&quot; definitely needs somewhere to include =
 the word &quot;unsafe&quot;. I had no idea that &quot;take all the memory y=
 ou can&quot; meant &quot;take off some of the safety belts&quot;. I&#39;ll =
 need now to explore what a exe generated with Racket will do.<br>
 
 <br></blockquote><div><br></div><div>Unless the program you created it with=
  changes things, it will run in an unlimited mode. It is less dire in this =
 situation, however, because there is only one thing going on in that racket=
  process, namely your program. If your program has parts that might grow wi=
 thout bound and other parts can kill the potentially misbehaving part and c=
 ontinue, then you might want to look into custodian-memory-limit.</div>
 <div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8=
 ex;border-left:1px #ccc solid;padding-left:1ex">
 I&#39;m still surprised though, that the crash occurs when DrRacket is clea=
 ning up. And also rather surprised that cleanup takes so long to do. I woul=
 d have expected an out-of-memory crash during execution, as my previous mis=
 behaving and/or exploratory non-Racket =C2=A0programs have done. And I also=
  would have expected cleanup to be much quicker. </blockquote>
 <div><br></div><div>Yes, that would be good if it were better. The current =
 setup is what we have for now. If you want to read more about this, let me =
 recommend Adam Wick&#39;s dissertation (and there was an ISMM paper too, wh=
 ich you can find from Matthew&#39;s website).</div>
 <div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8=
 ex;border-left:1px #ccc solid;padding-left:1ex">My thinking was that &quot;=
 Stop&quot; meant &quot;kill the process running the code that is in the Def=
 initions window, the process that was started with Run&quot;, but clearly t=
 here&#39;s a lot more going on. Perhaps there might be some opportunities t=
 o speed cleanup with a few extra (or earlier) set!&#39;s to #f, so as to he=
 lp the GC know sooner that the program&#39;s memory is no longer needed. =
 =C2=A0Anyway, there&#39;s obviously other areas that I need to explore much=
  further.<br>
 
 <br></blockquote><div><br></div><div>There is only one (OS-level) process. =
 DrRacket is it&#39;s own little OS! Again, I&#39;ll refer you to some resea=
 rch papers that we&#39;ve written or, actually, in this case, you would pro=
 bably be better off finding a talk that Matthew has given online on the sub=
 ject.=C2=A0</div>
 <div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8=
 ex;border-left:1px #ccc solid;padding-left:1ex">
 BTW, I had forgotten changing the memory setting, but now remember trying &=
 quot;unlimited&quot; so that I might be able to run MrEd Designer in DrRack=
 et and debug an issue I am having when editing a particular UI. Unfortunate=
 ly even &quot;unlimited&quot; (on my 4GB machine) was not enough for the co=
 mbination of the complexity of the UI, the overhead of using DrRacket, and =
 the (perhaps inefficient) implementation of MrEd Designer. I should have go=
 ne back to specifying some limit on memory usage earlier, and now I better =
 understand your recent comments on the list regarding blindly setting the v=
 alue to unlimited.<br>
 
 </blockquote><div><br></div><div>Thanks.</div><div><br></div><div>I&#39;ve =
 improved the dialog and I&#39;ll push a fix that&#39;ll close this PR.</div=
 ><div><br></div><div>Robby</div><div><br></div>
 
 --14dae93a18f90caece04cff3eee9--

----------
A commit by soegaard@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/9fe258712d
