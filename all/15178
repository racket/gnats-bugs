From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Nov 14 00:17:46 2015
Received: from mail-io0-f171.google.com (mail-io0-f171.google.com [209.85.223.171])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id tAE5Hbtp012780
	for <bugs@bugs.plt-scheme.org>; Sat, 14 Nov 2015 00:17:38 -0500
Message-Id: <201511140517.tAE5HZZb012773@winooski.ccs.neu.edu>
Date: Sat, 14 Nov 2015 00:17:35 -0500
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: TR: bad type for `random`?

>Number:         15178
>Category:       all
>Synopsis:       TR: bad type for `random`?
>Class:          sw-bug
>Responsible:    stamourv
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Nov 14 00:20:01 -0500 2015
>Closed-Date:    Sat Nov 14 10:32:27 -0500 2015
>Last-Modified:  Mon Nov 16 17:24:01 -0500 2015
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.2.1
>Environment:
unix "Linux lambda.ccs.neu.edu 3.19.8-100.fc20.x86_64 #1 SMP Tue May 12 17:08:50 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 447282392
raco pkg (show):
Installation-wide:
 Package            Checksum     Source
 main-distribution  11d4bacb...  catalog main-distribution
 racket-lib         dad43491...  catalog racket-lib
 [185 auto-installed packages not shown]
User-specific for installation "6.2.1":
 [none]



Collections:
("/home/eli/.racket/6.2.1/collects"
 ("info-domain" "pl"))
("/home/eli/plt/x86_64-linux/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t test-coverage) (default) #() "#lang pl\n" #f #t ((test) (main)) #t))
>Description:
Looks like TR allows (in 6.2.1) using `random` with negative integers and 0,
isn't that supposed to be restricted by the typechecker?
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Vincent St-Amour <stamourv@eecs.northwestern.edu>
To: eli@barzilay.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Sat, 14 Nov 2015 09:31:01 -0600

 That's intended.
 
 A few years ago, we experimented with enforcing sign restrictions on
 some functions, like vector accesses. It turned out to make them quite
 painful to use, so we went back to the original types.
 
 Note that since the type you want is a subtype of the current type, you
 can always re-export `random` with the type you want.
 
 Vincent
 
 
 
 On Fri, 13 Nov 2015 23:20:02 -0600,
 eli@barzilay.org wrote:
 > 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15178
 > 
 > Reported by Eli Barzilay for release: 6.2.1
 > 
 > *** Description:
 > Looks like TR allows (in 6.2.1) using `random` with negative integers and 0,
 > isn't that supposed to be restricted by the typechecker?
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > unix "Linux lambda.ccs.neu.edu 3.19.8-100.fc20.x86_64 #1 SMP Tue May 12 17:08:50 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 447282392
 > raco pkg (show):
 > Installation-wide:
 >  Package            Checksum     Source
 >  main-distribution  11d4bacb...  catalog main-distribution
 >  racket-lib         dad43491...  catalog racket-lib
 >  [185 auto-installed packages not shown]
 > User-specific for installation "6.2.1":
 >  [none]
 > 
 > 
 > 
 > Collections:
 > ("/home/eli/.racket/6.2.1/collects"
 >  ("info-domain" "pl"))
 > ("/home/eli/plt/x86_64-linux/collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 > 
 > Recent Internal Errors: 
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t test-coverage) (default) #() "#lang pl\n" #f #t ((test) (main)) #t))

Responsible changed from "nobody" to "stamourv" by stamourv at Sat, 14 Nov 2015 10:32:27 -0500
Reason>>> base type env

State changed from "open" to "closed" by stamourv at Sat, 14 Nov 2015 10:32:27 -0500
Reason>>> not a bug

From: Eli Barzilay <eli@barzilay.org>
To: Vincent St-Amour <stamourv@eecs.northwestern.edu>
Cc: "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Mon, 16 Nov 2015 00:56:09 -0500

 On Sat, Nov 14, 2015 at 10:31 AM, Vincent St-Amour
 <stamourv@eecs.northwestern.edu> wrote:
 > That's intended.
 >
 > A few years ago, we experimented with enforcing sign restrictions on
 > some functions, like vector accesses. It turned out to make them quite
 > painful to use, so we went back to the original types.
 
 This sounds like a very odd decision.  In any case, I think that it
 would be helpful to sync errors with plain R so that there are errors
 that are clearly distinguishable as "this error would not happen in TR".
 As usual, my test case for this is explaining things to a student or a
 newbie, and as things are, the difference between things like
 
     (list-ref '(1 2 3) -9)
     (list-ref '(1 2 3) "nine")
 
 is really confusing.
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Eli Barzilay <eli@barzilay.org>,
        Vincent St-Amour <stamourv@eecs.northwestern.edu>
Cc: "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Mon, 16 Nov 2015 12:28:59 +0000

 --001a113f116e4c7ab60524a78e88
 Content-Type: text/plain; charset=UTF-8
 
 I'm not sure what it would mean to synchronize errors with Racket. As
 Vincent explained, we tried a more restrictive type and it was a bad idea.
 The error you get is just the underlying Racket error, so it seems
 synchronized to me.
 
 The difference between indexing with negative integers and strings is a
 distinction that Haskell, Java, and ML make as well.
 
 Sam
 
 On Mon, Nov 16, 2015, 12:56 AM Eli Barzilay <eli@barzilay.org> wrote:
 
 On Sat, Nov 14, 2015 at 10:31 AM, Vincent St-Amour
 <stamourv@eecs.northwestern.edu> wrote:
 > That's intended.
 >
 > A few years ago, we experimented with enforcing sign restrictions on
 > some functions, like vector accesses. It turned out to make them quite
 > painful to use, so we went back to the original types.
 
 This sounds like a very odd decision.  In any case, I think that it
 would be helpful to sync errors with plain R so that there are errors
 that are clearly distinguishable as "this error would not happen in TR".
 
 
 As usual, my test case for this is explaining things to a student or a
 newbie, and as things are, the difference between things like
 
     (list-ref '(1 2 3) -9)
     (list-ref '(1 2 3) "nine")
 
 is really confusing.
 
 --
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http:// <http://barzilay.org/>barzilay.org/
 <http://barzilay.org/>                   Maze is Life!
 
 --001a113f116e4c7ab60524a78e88
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">I&#39;m not sure what it would mean to synchronize errors wi=
 th Racket. As Vincent explained, we tried a more restrictive type and it wa=
 s a bad idea. The error you get is just the underlying Racket error, so it =
 seems synchronized to me.</p>
 <p dir=3D"ltr">The difference between indexing with negative integers and s=
 trings is a distinction that Haskell, Java, and ML make as well.</p>
 <p dir=3D"ltr">Sam<br>
 </p>
 <p dir=3D"ltr"></p>
 <p dir=3D"ltr">On Mon, Nov 16, 2015, 12:56 AM=C2=A0Eli Barzilay &lt;<a href=
 =3D"mailto:eli@barzilay.org">eli@barzilay.org</a>&gt; wrote:</p>
 <blockquote><p dir=3D"ltr">On Sat, Nov 14, 2015 at 10:31 AM, Vincent St-Amo=
 ur<br>
 &lt;<a href=3D"mailto:stamourv@eecs.northwestern.edu">stamourv@eecs.northwe=
 stern.edu</a>&gt; wrote:<br>
 &gt; That&#39;s intended.<br>
 &gt;<br>
 &gt; A few years ago, we experimented with enforcing sign restrictions on<b=
 r>
 &gt; some functions, like vector accesses. It turned out to make them quite=
 <br>
 &gt; painful to use, so we went back to the original types.</p>
 <p dir=3D"ltr">This sounds like a very odd decision.=C2=A0 In any case, I t=
 hink that it<br>
 would be helpful to sync errors with plain R so that there are errors<br>
 that are clearly distinguishable as &quot;this error would not happen in TR=
 &quot;.</p>
 </blockquote>
 <blockquote><p dir=3D"ltr"><br>
 As usual, my test case for this is explaining things to a student or a<br>
 newbie, and as things are, the difference between things like</p>
 <p dir=3D"ltr">=C2=A0 =C2=A0 (list-ref &#39;(1 2 3) -9)<br>
 =C2=A0 =C2=A0 (list-ref &#39;(1 2 3) &quot;nine&quot;)</p>
 <p dir=3D"ltr">is really confusing.</p>
 <p dir=3D"ltr">--<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((x=
 =3D&gt;x(x))(x=3D&gt;x(x)))=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0Eli Barzilay:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a hr=
 ef=3D"http://barzilay.org/">http://</a><a href=3D"http://barzilay.org/">bar=
 zilay.org</a><a href=3D"http://barzilay.org/">/</a>=C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Maze is Life!<br>
 </p>
 </blockquote>
 <p dir=3D"ltr"><br>
 </p>
 
 --001a113f116e4c7ab60524a78e88--
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Vincent St-Amour <stamourv@eecs.northwestern.edu>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Mon, 16 Nov 2015 12:59:57 -0500

 On Mon, Nov 16, 2015 at 7:28 AM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > I'm not sure what it would mean to synchronize errors with Racket. As
 > Vincent explained, we tried a more restrictive type and it was a bad
 > idea.  The error you get is just the underlying Racket error, so it
 > seems synchronized to me.
 
 I mean make it possible to look at an R error and be able to tell
 whether it'll be a type error in TR.
 
 
 > The difference between indexing with negative integers and strings is a
 > distinction that Haskell, Java, and ML make as well.
 
 That distinction is irrelevant there since they have no subtypes.
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Vincent St-Amour <stamourv@eecs.northwestern.edu>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Mon, 16 Nov 2015 19:00:38 +0000

 --001a113f261cec62fc0524ad06e4
 Content-Type: text/plain; charset=UTF-8
 
 In general, you can tell that if the spec requires an
 `exact-nonnegative-integer?` (perhaps with particular bounds, as in
 `vector-ref`), the TR type will be `Integer`. So that should tell you
 whether the error will be a type error.
 
 Sam
 
 On Mon, Nov 16, 2015 at 1:02 PM Eli Barzilay <eli@barzilay.org> wrote:
 
 > On Mon, Nov 16, 2015 at 7:28 AM, Sam Tobin-Hochstadt
 > <samth@cs.indiana.edu> wrote:
 > > I'm not sure what it would mean to synchronize errors with Racket. As
 > > Vincent explained, we tried a more restrictive type and it was a bad
 > > idea.  The error you get is just the underlying Racket error, so it
 > > seems synchronized to me.
 >
 > I mean make it possible to look at an R error and be able to tell
 > whether it'll be a type error in TR.
 >
 >
 > > The difference between indexing with negative integers and strings is a
 > > distinction that Haskell, Java, and ML make as well.
 >
 > That distinction is irrelevant there since they have no subtypes.
 >
 > --
 >                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
 >
 
 --001a113f261cec62fc0524ad06e4
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">In general, you can tell that if the spec requires an `exa=
 ct-nonnegative-integer?` (perhaps with particular bounds, as in `vector-ref=
 `), the TR type will be `Integer`. So that should tell you whether the erro=
 r will be a type error.<div><br></div><div>Sam</div></div><br><div class=3D=
 "gmail_quote"><div dir=3D"ltr">On Mon, Nov 16, 2015 at 1:02 PM Eli Barzilay=
  &lt;<a href=3D"mailto:eli@barzilay.org">eli@barzilay.org</a>&gt; wrote:<br=
 ></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-=
 left:1px #ccc solid;padding-left:1ex">On Mon, Nov 16, 2015 at 7:28 AM, Sam =
 Tobin-Hochstadt<br>
 &lt;<a href=3D"mailto:samth@cs.indiana.edu" target=3D"_blank">samth@cs.indi=
 ana.edu</a>&gt; wrote:<br>
 &gt; I&#39;m not sure what it would mean to synchronize errors with Racket.=
  As<br>
 &gt; Vincent explained, we tried a more restrictive type and it was a bad<b=
 r>
 &gt; idea.=C2=A0 The error you get is just the underlying Racket error, so =
 it<br>
 &gt; seems synchronized to me.<br>
 <br>
 I mean make it possible to look at an R error and be able to tell<br>
 whether it&#39;ll be a type error in TR.<br>
 <br>
 <br>
 &gt; The difference between indexing with negative integers and strings is =
 a<br>
 &gt; distinction that Haskell, Java, and ML make as well.<br>
 <br>
 That distinction is irrelevant there since they have no subtypes.<br>
 <br>
 --<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((x=
 =3D&gt;x(x))(x=3D&gt;x(x)))=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0Eli Barzilay:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a hr=
 ef=3D"http://barzilay.org/" rel=3D"noreferrer" target=3D"_blank">http://bar=
 zilay.org/</a>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0Maze is Life!<br>
 </blockquote></div>
 
 --001a113f261cec62fc0524ad06e4--
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Vincent St-Amour <stamourv@eecs.northwestern.edu>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Mon, 16 Nov 2015 14:33:23 -0500

 On Mon, Nov 16, 2015 at 2:00 PM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > In general, you can tell that if the spec requires an
 > `exact-nonnegative-integer?` (perhaps with particular bounds, as in
 > `vector-ref`), the TR type will be `Integer`. So that should tell you
 > whether the error will be a type error.
 
 I was thinking more like contract-error in R <=> type-error in TR.  (Not
 exactly that, but similar.)  Talking about `exact-nonnegative-integer?`
 won't help students and newbies.
 
 As a side note, I can see how enforcing non-negativeness can complicate
 random code, but I don't see how those kind of complications would apply
 to `random`.
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Vincent St-Amour <stamourv@eecs.northwestern.edu>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Mon, 16 Nov 2015 20:20:33 +0000

 --089e0111bea2c508c40524ae240b
 Content-Type: text/plain; charset=UTF-8
 
 Simply equating contract errors in Racket with type errors in TR would be
 impossible -- Racket uses contracts to specify lots of strong properties
 that we don't want to force the type checker to prove, even in those cases
 where we can even express the property. For example, indexing off the end
 of a vector is a contract error.
 
 Furthermore, this decision isn't going to change in a more restrictive
 direction, since that would potentially break people's code.
 
 Sam
 
 On Mon, Nov 16, 2015 at 2:33 PM Eli Barzilay <eli@barzilay.org> wrote:
 
 > On Mon, Nov 16, 2015 at 2:00 PM, Sam Tobin-Hochstadt
 > <samth@cs.indiana.edu> wrote:
 > > In general, you can tell that if the spec requires an
 > > `exact-nonnegative-integer?` (perhaps with particular bounds, as in
 > > `vector-ref`), the TR type will be `Integer`. So that should tell you
 > > whether the error will be a type error.
 >
 > I was thinking more like contract-error in R <=> type-error in TR.  (Not
 > exactly that, but similar.)  Talking about `exact-nonnegative-integer?`
 > won't help students and newbies.
 >
 > As a side note, I can see how enforcing non-negativeness can complicate
 > random code, but I don't see how those kind of complications would apply
 > to `random`.
 >
 > --
 >                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
 >
 
 --089e0111bea2c508c40524ae240b
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Simply equating contract errors in Racket with type errors=
  in TR would be impossible -- Racket uses contracts to specify lots of stro=
 ng properties that we don&#39;t want to force the type checker to prove, ev=
 en in those cases where we can even express the property. For example, inde=
 xing off the end of a vector is a contract error.<div><br></div><div>Furthe=
 rmore, this decision isn&#39;t going to change in a more restrictive direct=
 ion, since that would potentially break people&#39;s code.</div><div><br></=
 div><div>Sam</div></div><br><div class=3D"gmail_quote"><div dir=3D"ltr">On =
 Mon, Nov 16, 2015 at 2:33 PM Eli Barzilay &lt;<a href=3D"mailto:eli@barzila=
 y.org">eli@barzilay.org</a>&gt; wrote:<br></div><blockquote class=3D"gmail_=
 quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=
 ex">On Mon, Nov 16, 2015 at 2:00 PM, Sam Tobin-Hochstadt<br>
 &lt;<a href=3D"mailto:samth@cs.indiana.edu" target=3D"_blank">samth@cs.indi=
 ana.edu</a>&gt; wrote:<br>
 &gt; In general, you can tell that if the spec requires an<br>
 &gt; `exact-nonnegative-integer?` (perhaps with particular bounds, as in<br=
 >
 &gt; `vector-ref`), the TR type will be `Integer`. So that should tell you<=
 br>
 &gt; whether the error will be a type error.<br>
 <br>
 I was thinking more like contract-error in R &lt;=3D&gt; type-error in TR.=
 =C2=A0 (Not<br>
 exactly that, but similar.)=C2=A0 Talking about `exact-nonnegative-integer?=
 `<br>
 won&#39;t help students and newbies.<br>
 <br>
 As a side note, I can see how enforcing non-negativeness can complicate<br>
 random code, but I don&#39;t see how those kind of complications would appl=
 y<br>
 to `random`.<br>
 <br>
 --<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((x=
 =3D&gt;x(x))(x=3D&gt;x(x)))=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0Eli Barzilay:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a hr=
 ef=3D"http://barzilay.org/" rel=3D"noreferrer" target=3D"_blank">http://bar=
 zilay.org/</a>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0Maze is Life!<br>
 </blockquote></div>
 
 --089e0111bea2c508c40524ae240b--
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Vincent St-Amour <stamourv@eecs.northwestern.edu>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Mon, 16 Nov 2015 15:37:30 -0500

 On Mon, Nov 16, 2015 at 3:20 PM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > Simply equating contract errors in Racket with type errors in TR would
 > be impossible -- Racket uses contracts to specify lots of strong
 > properties that we don't want to force the type checker to prove, even
 > in those cases where we can even express the property. For example,
 > indexing off the end of a vector is a contract error.
 
 Yes, yes.  Like I said: "Not exactly that, but similar".
 
 The problem is that it's very difficult to predict what TR will do in
 certain cases.  Something like "bounds aren't checked by types" is
 something that can be internalized well enough, but that's not the case
 with `random`.
 
 That's added to things like the tighter-than-R type of `even?`, and the
 black magic that is needed to predict what happens with HO functions and
 you can see why all of this is hard for a class.
 
 Note that I'm not arguing for a change (obviously changing index types
 would be a huge breakage) -- except for maybe the `random` type -- just
 saying that consistency is important.
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Vincent St-Amour <stamourv@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        Vincent St-Amour <stamourv@eecs.northwestern.edu>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/15178: TR: bad type for `random`?
Date: Mon, 16 Nov 2015 16:23:36 -0600

 On Mon, 16 Nov 2015 13:33:23 -0600,
 Eli Barzilay wrote:
 > 
 > On Mon, Nov 16, 2015 at 2:00 PM, Sam Tobin-Hochstadt
 > <samth@cs.indiana.edu> wrote:
 > > In general, you can tell that if the spec requires an
 > > `exact-nonnegative-integer?` (perhaps with particular bounds, as in
 > > `vector-ref`), the TR type will be `Integer`. So that should tell you
 > > whether the error will be a type error.
 > 
 > I was thinking more like contract-error in R <=> type-error in TR.  (Not
 > exactly that, but similar.)  Talking about `exact-nonnegative-integer?`
 > won't help students and newbies.
 > 
 > As a side note, I can see how enforcing non-negativeness can complicate
 > random code, but I don't see how those kind of complications would apply
 > to `random`.
 
 If you compute the argument to `random`, then you need to enforce that
 the computation returns a non-negative number, which is sometimes hard
 to do, depending on the operation. If you get the bound as an input to
 your function (or compute it using an input), then your function now
 also needs a tighter type, and the change ripples on. Ensuring sign
 properties in TR is possible, but not easy, and can require large
 changes to types throughout your program.
 
 On Mon, 16 Nov 2015 14:37:30 -0600,
 Eli Barzilay wrote:
 > 
 > Note that I'm not arguing for a change (obviously changing index types
 > would be a huge breakage) -- except for maybe the `random` type -- just
 > saying that consistency is important.
 
 I think TR's internal consistency is more important in this case, and
 enforcing sign in this one case only would be surprising.
 
 Vincent
