From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jul 10 03:37:18 2011
Received: from mail-vw0-f44.google.com (mail-vw0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p6A7bFjc029242
	for <bugs@bugs.plt-scheme.org>; Sun, 10 Jul 2011 03:37:15 -0400
Message-Id: <201107100737.p6A7bBp0029237@champlain.ccs.neu.edu>
Date: Sun, 10 Jul 2011 03:37:11 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Problems due to `port-count-lines!' on the output port

>Number:         12035
>Category:       all
>Synopsis:       Problems due to `port-count-lines!' on the output port
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jul 10 03:40:01 -0400 2011
>Closed-Date:    Sun Jul 10 10:37:12 -0400 2011
>Last-Modified:  Sun Jul 10 11:56:01 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Linux
>Description:
When line counting is enabled on the current output port, the pretty
printer is smarter about how to position printouts.  Unfortunately,
this results in worse behavior since there's no way to know that the
input port is sharing the same terminal (and that input is displayed
on it, etc).  This can look particularly bad when the prompt is longer
than the default "> ".

For the interactive thing, I solved it by setting global variables to
track the prompt offset: after an input is read, it remembers the
current line and column number, and for later column accounting, it
will use this column as an offset if it's on the same line.

I think that this leads to a simple way to solve it: allow setting the
current column number for ports that have line counting enabled.
Then, the default prompt-read function can simply set it to 0 after
reading the input.

This *will* result in bogus output when the input is not shown, for example,

  echo "<the two expressions below>" | racket -q

but these are far from being common, and they usually have lots of
such problems anyway.  This could be resolved if there was a way to
tell if input is coming from a terminal, as in `terminal-port?', and
avoid printing the prompt in these cases.  But that doesn't work for
wrapped ports (like the readline port).
>How-To-Repeat:
$ racket
> (port-count-lines! (current-output-port))
> (make-list 20 'xxxxxxxx)
'(xxxxxxxx
    xxxxxxxx
    xxxxxxxx
    ...)
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/12035: Problems due to `port-count-lines!' on the output port
Date: Sun, 10 Jul 2011 03:55:46 -0400

 15 minutes ago, eli@barzilay.org wrote:
 > I think that this leads to a simple way to solve it: allow setting
 > the current column number for ports that have line counting enabled.
 > Then, the default prompt-read function can simply set it to 0 after
 > reading the input.
 
 If you're fine with this, I can probably do it.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: eli@barzilay.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12035: Problems due to `port-count-lines!' on the output port
Date: Sun, 10 Jul 2011 08:24:42 -0600

 I think it's best to set the output port's position only when both the
 input and output ports are terminals (in which case it's reasonable to
 assume that they're the same terminal). That happens to address the
 `echo ... | racket' problem.
 
 I'll push a change soon.
 
 At Sun, 10 Jul 2011 03:40:01 -0400, eli@barzilay.org wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12035
 > 
 > Reported by Eli Barzilay for release: HEAD
 > 
 > *** Description:
 > When line counting is enabled on the current output port, the pretty
 > printer is smarter about how to position printouts.  Unfortunately,
 > this results in worse behavior since there's no way to know that the
 > input port is sharing the same terminal (and that input is displayed
 > on it, etc).  This can look particularly bad when the prompt is longer
 > than the default "> ".
 > 
 > For the interactive thing, I solved it by setting global variables to
 > track the prompt offset: after an input is read, it remembers the
 > current line and column number, and for later column accounting, it
 > will use this column as an offset if it's on the same line.
 > 
 > I think that this leads to a simple way to solve it: allow setting the
 > current column number for ports that have line counting enabled.
 > Then, the default prompt-read function can simply set it to 0 after
 > reading the input.
 > 
 > This *will* result in bogus output when the input is not shown, for example,
 > 
 >   echo "<the two expressions below>" | racket -q
 > 
 > but these are far from being common, and they usually have lots of
 > such problems anyway.  This could be resolved if there was a way to
 > tell if input is coming from a terminal, as in `terminal-port?', and
 > avoid printing the prompt in these cases.  But that doesn't work for
 > wrapped ports (like the readline port).
 > 
 > *** How to repeat:
 > $ racket
 > > (port-count-lines! (current-output-port))
 > > (make-list 20 'xxxxxxxx)
 > '(xxxxxxxx
 >     xxxxxxxx
 >     xxxxxxxx
 >     ...)
 > 
 > *** Environment:
 > Linux
Responsible changed from "nobody" to "mflatt" by mflatt@racket-lang.org at Sun, 10 Jul 2011 10:37:12 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/cc6f3f69ab
State changed from "open" to "closed" by mflatt@racket-lang.org at Sun, 10 Jul 2011 10:37:12 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/cc6f3f69ab
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/12035: Problems due to `port-count-lines!' on
 the output port
Date: Sun, 10 Jul 2011 10:43:53 -0400

 It should really be done for readline which probably as popular.
 
 On 2011-07-10, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > I think it's best to set the output port's position only when both the
 > input and output ports are terminals (in which case it's reasonable to
 > assume that they're the same terminal). That happens to address the
 > `echo ... | racket' problem.
 >
 > I'll push a change soon.
 >
 > At Sun, 10 Jul 2011 03:40:01 -0400, eli@barzilay.org wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12035
 >>
 >> Reported by Eli Barzilay for release: HEAD
 >>
 >> *** Description:
 >> When line counting is enabled on the current output port, the pretty
 >> printer is smarter about how to position printouts.  Unfortunately,
 >> this results in worse behavior since there's no way to know that the
 >> input port is sharing the same terminal (and that input is displayed
 >> on it, etc).  This can look particularly bad when the prompt is longer
 >> than the default "> ".
 >>
 >> For the interactive thing, I solved it by setting global variables to
 >> track the prompt offset: after an input is read, it remembers the
 >> current line and column number, and for later column accounting, it
 >> will use this column as an offset if it's on the same line.
 >>
 >> I think that this leads to a simple way to solve it: allow setting the
 >> current column number for ports that have line counting enabled.
 >> Then, the default prompt-read function can simply set it to 0 after
 >> reading the input.
 >>
 >> This *will* result in bogus output when the input is not shown, for
 >> example,
 >>
 >>   echo "<the two expressions below>" | racket -q
 >>
 >> but these are far from being common, and they usually have lots of
 >> such problems anyway.  This could be resolved if there was a way to
 >> tell if input is coming from a terminal, as in `terminal-port?', and
 >> avoid printing the prompt in these cases.  But that doesn't work for
 >> wrapped ports (like the readline port).
 >>
 >> *** How to repeat:
 >> $ racket
 >> > (port-count-lines! (current-output-port))
 >> > (make-list 20 'xxxxxxxx)
 >> '(xxxxxxxx
 >>     xxxxxxxx
 >>     xxxxxxxx
 >>     ...)
 >>
 >> *** Environment:
 >> Linux
 >
 
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12035: Problems due to `port-count-lines!' on
 the output port
Date: Sun, 10 Jul 2011 08:47:52 -0600

 If I understand, the prompt read handler in `readline' doesn't print a
 prompt via `(current-output-port)', so it doesn't need to do anything.
 
 To put it another way, your example below has always looked right in a
 `readline'-based REPL, rght?
 
 At Sun, 10 Jul 2011 10:43:53 -0400, Eli Barzilay wrote:
 > It should really be done for readline which probably as popular.
 > 
 > On 2011-07-10, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > I think it's best to set the output port's position only when both the
 > > input and output ports are terminals (in which case it's reasonable to
 > > assume that they're the same terminal). That happens to address the
 > > `echo ... | racket' problem.
 > >
 > > I'll push a change soon.
 > >
 > > At Sun, 10 Jul 2011 03:40:01 -0400, eli@barzilay.org wrote:
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12035
 > >>
 > >> Reported by Eli Barzilay for release: HEAD
 > >>
 > >> *** Description:
 > >> When line counting is enabled on the current output port, the pretty
 > >> printer is smarter about how to position printouts.  Unfortunately,
 > >> this results in worse behavior since there's no way to know that the
 > >> input port is sharing the same terminal (and that input is displayed
 > >> on it, etc).  This can look particularly bad when the prompt is longer
 > >> than the default "> ".
 > >>
 > >> For the interactive thing, I solved it by setting global variables to
 > >> track the prompt offset: after an input is read, it remembers the
 > >> current line and column number, and for later column accounting, it
 > >> will use this column as an offset if it's on the same line.
 > >>
 > >> I think that this leads to a simple way to solve it: allow setting the
 > >> current column number for ports that have line counting enabled.
 > >> Then, the default prompt-read function can simply set it to 0 after
 > >> reading the input.
 > >>
 > >> This *will* result in bogus output when the input is not shown, for
 > >> example,
 > >>
 > >>   echo "<the two expressions below>" | racket -q
 > >>
 > >> but these are far from being common, and they usually have lots of
 > >> such problems anyway.  This could be resolved if there was a way to
 > >> tell if input is coming from a terminal, as in `terminal-port?', and
 > >> avoid printing the prompt in these cases.  But that doesn't work for
 > >> wrapped ports (like the readline port).
 > >>
 > >> *** How to repeat:
 > >> $ racket
 > >> > (port-count-lines! (current-output-port))
 > >> > (make-list 20 'xxxxxxxx)
 > >> '(xxxxxxxx
 > >>     xxxxxxxx
 > >>     xxxxxxxx
 > >>     ...)
 > >>
 > >> *** Environment:
 > >> Linux
 > >
 > 
 > 
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/12035: Problems due to `port-count-lines!' on
 the output port
Date: Sun, 10 Jul 2011 11:52:30 -0400

 I can't test things now, but I confused things earlier: the problem
 that I've seen isn't readline -- I just put information at the prompt
 by printing it out before calling the old reader, so that text is
 seen.  In any case, being able to set the location is good enough for
 me.
 
 On 2011-07-10, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > If I understand, the prompt read handler in `readline' doesn't print a
 > prompt via `(current-output-port)', so it doesn't need to do anything.
 >
 > To put it another way, your example below has always looked right in a
 > `readline'-based REPL, rght?
 >
 > At Sun, 10 Jul 2011 10:43:53 -0400, Eli Barzilay wrote:
 >> It should really be done for readline which probably as popular.
 >>
 >> On 2011-07-10, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 >> > I think it's best to set the output port's position only when both the
 >> > input and output ports are terminals (in which case it's reasonable to
 >> > assume that they're the same terminal). That happens to address the
 >> > `echo ... | racket' problem.
 >> >
 >> > I'll push a change soon.
 >> >
 >> > At Sun, 10 Jul 2011 03:40:01 -0400, eli@barzilay.org wrote:
 >> >> A new problem report is waiting at
 >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12035
 >> >>
 >> >> Reported by Eli Barzilay for release: HEAD
 >> >>
 >> >> *** Description:
 >> >> When line counting is enabled on the current output port, the pretty
 >> >> printer is smarter about how to position printouts.  Unfortunately,
 >> >> this results in worse behavior since there's no way to know that the
 >> >> input port is sharing the same terminal (and that input is displayed
 >> >> on it, etc).  This can look particularly bad when the prompt is longer
 >> >> than the default "> ".
 >> >>
 >> >> For the interactive thing, I solved it by setting global variables to
 >> >> track the prompt offset: after an input is read, it remembers the
 >> >> current line and column number, and for later column accounting, it
 >> >> will use this column as an offset if it's on the same line.
 >> >>
 >> >> I think that this leads to a simple way to solve it: allow setting the
 >> >> current column number for ports that have line counting enabled.
 >> >> Then, the default prompt-read function can simply set it to 0 after
 >> >> reading the input.
 >> >>
 >> >> This *will* result in bogus output when the input is not shown, for
 >> >> example,
 >> >>
 >> >>   echo "<the two expressions below>" | racket -q
 >> >>
 >> >> but these are far from being common, and they usually have lots of
 >> >> such problems anyway.  This could be resolved if there was a way to
 >> >> tell if input is coming from a terminal, as in `terminal-port?', and
 >> >> avoid printing the prompt in these cases.  But that doesn't work for
 >> >> wrapped ports (like the readline port).
 >> >>
 >> >> *** How to repeat:
 >> >> $ racket
 >> >> > (port-count-lines! (current-output-port))
 >> >> > (make-list 20 'xxxxxxxx)
 >> >> '(xxxxxxxx
 >> >>     xxxxxxxx
 >> >>     xxxxxxxx
 >> >>     ...)
 >> >>
 >> >> *** Environment:
 >> >> Linux
 >> >
 >>
 >>
 >> --
 >>           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>                   http://www.barzilay.org/                 Maze is Life!
 >
 
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
