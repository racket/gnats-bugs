From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Oct 31 18:04:19 2011
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p9VM4GcY027005
	for <bugs@bugs.plt-scheme.org>; Mon, 31 Oct 2011 18:04:16 -0400
Message-Id: <201110312204.p9VM4BQh026999@champlain.ccs.neu.edu>
Date: Mon, 31 Oct 2011 18:04:11 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: lazy-require defines bindings instead of just requiring them

>Number:         12335
>Category:       all
>Synopsis:       lazy-require defines bindings instead of just requiring them
>Class:          sw-bug
>Responsible:    ryanc
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Oct 31 18:08:01 -0400 2011
>Closed-Date:    Mon Oct 31 20:19:48 -0400 2011
>Last-Modified:  Mon Oct 31 20:19:48 -0400 2011
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.0.1--2011-10-29(8000e8e/g)
>Environment:
unix "Linux schroder 2.6.38-12-generic #51-Ubuntu SMP Wed Sep 28 14:27:32 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 396636928
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/neil/.racket/5.2.0.1/collects"
 (non-existent-path))
("/home/neil/plt/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "trace" "profile" "data" "sirmail" "parser-tools" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "guibuilder" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-debugger" "framework" "web-server" "deinprogram!
 m" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
In particular, (provide (all-defined-out)) provides bindings that were required lazily.
>How-To-Repeat:
#lang racket/load

(module provider racket/base
  (require unstable/lazy-require)
  (lazy-require [racket/list (flatten)])
  (provide (all-defined-out)))

(module requirer racket/base
  (require 'provider)
  (flatten '((1 2 3))))


Using 'flatten' should result in an "unbound identifier" error. It doesn't, because 'provider accidentally provides it.
>Fix:
>Audit-Trail:
From: Ryan Culpepper <ryan@cs.utah.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12335: lazy-require defines bindings instead
 of just requiring them
Date: Mon, 31 Oct 2011 16:08:13 -0600

 Yes. I don't think there's any way around that.
 
 Ryan
 
 
 On 10/31/2011 04:08 PM, neil.toronto@gmail.com wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=12335
 >
 > Reported by Neil Toronto for release: 5.2.0.1--2011-10-29(8000e8e/g)
 >
 > *** Description:
 > In particular, (provide (all-defined-out)) provides bindings that were required lazily.
 >
 > *** How to repeat:
 > #lang racket/load
 >
 > (module provider racket/base
 >    (require unstable/lazy-require)
 >    (lazy-require [racket/list (flatten)])
 >    (provide (all-defined-out)))
 >
 > (module requirer racket/base
 >    (require 'provider)
 >    (flatten '((1 2 3))))
 >
 >
 > Using 'flatten' should result in an "unbound identifier" error. It doesn't, because 'provider accidentally provides it.
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Ryan Culpepper <ryan@cs.utah.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12335: lazy-require defines bindings instead
 of just requiring them
Date: Mon, 31 Oct 2011 16:18:25 -0600

 You could make the visible binding a rename transformer and the set
 'not-provide-all-defined property on the transformer's target identifier.
 
 At Mon, 31 Oct 2011 16:08:13 -0600, Ryan Culpepper wrote:
 > Yes. I don't think there's any way around that.
 > 
 > Ryan
 > 
 > 
 > On 10/31/2011 04:08 PM, neil.toronto@gmail.com wrote:
 > > A new problem report is waiting at
 > >    http://bugs.racket-lang.org/query/?cmd=view&pr=12335
 > >
 > > Reported by Neil Toronto for release: 5.2.0.1--2011-10-29(8000e8e/g)
 > >
 > > *** Description:
 > > In particular, (provide (all-defined-out)) provides bindings that were 
 > required lazily.
 > >
 > > *** How to repeat:
 > > #lang racket/load
 > >
 > > (module provider racket/base
 > >    (require unstable/lazy-require)
 > >    (lazy-require [racket/list (flatten)])
 > >    (provide (all-defined-out)))
 > >
 > > (module requirer racket/base
 > >    (require 'provider)
 > >    (flatten '((1 2 3))))
 > >
 > >
 > > Using 'flatten' should result in an "unbound identifier" error. It doesn't, 
 > because 'provider accidentally provides it.
From: Ryan Culpepper <ryan@cs.utah.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12335: lazy-require defines bindings instead
 of just requiring them
Date: Mon, 31 Oct 2011 16:15:13 -0600

 Ah, I didn't know about that property. I'll do that, then.
 
 Ryan
 
 
 On 10/31/2011 04:18 PM, Matthew Flatt wrote:
 > You could make the visible binding a rename transformer and the set
 > 'not-provide-all-defined property on the transformer's target identifier.
 >
 > At Mon, 31 Oct 2011 16:08:13 -0600, Ryan Culpepper wrote:
 >> Yes. I don't think there's any way around that.
 >>
 >> Ryan
 >>
 >>
 >> On 10/31/2011 04:08 PM, neil.toronto@gmail.com wrote:
 >>> A new problem report is waiting at
 >>>     http://bugs.racket-lang.org/query/?cmd=view&pr=12335
 >>>
 >>> Reported by Neil Toronto for release: 5.2.0.1--2011-10-29(8000e8e/g)
 >>>
 >>> *** Description:
 >>> In particular, (provide (all-defined-out)) provides bindings that were
 >> required lazily.
 >>>
 >>> *** How to repeat:
 >>> #lang racket/load
 >>>
 >>> (module provider racket/base
 >>>     (require unstable/lazy-require)
 >>>     (lazy-require [racket/list (flatten)])
 >>>     (provide (all-defined-out)))
 >>>
 >>> (module requirer racket/base
 >>>     (require 'provider)
 >>>     (flatten '((1 2 3))))
 >>>
 >>>
 >>> Using 'flatten' should result in an "unbound identifier" error. It doesn't,
 >> because 'provider accidentally provides it.
Responsible changed from "nobody" to "ryanc" by ryanc@racket-lang.org at Mon, 31 Oct 2011 20:19:48 -0400
Reason>>> A commit by ryanc@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/98d8acfd4e
State changed from "open" to "closed" by ryanc@racket-lang.org at Mon, 31 Oct 2011 20:19:48 -0400
Reason>>> A commit by ryanc@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/98d8acfd4e
