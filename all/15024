From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Apr  1 18:54:20 2015
Received: from mail-ig0-f170.google.com (mail-ig0-f170.google.com [209.85.213.170])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t31MsJxT031535
	for <bugs@bugs.plt-scheme.org>; Wed, 1 Apr 2015 18:54:19 -0400
Message-Id: <201504012254.t31MsG8E031528@winooski.ccs.neu.edu>
Date: Wed, 1 Apr 2015 18:54:16 -0400
From: sspall10@gmail.com
To: bugs@racket-lang.org
Subject: segfault when program runs out of memory

>Number:         15024
>Category:       all
>Synopsis:       segfault when program runs out of memory
>Class:          sw-bug
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Apr 01 18:56:01 -0400 2015
>Last-Modified:  Thu Apr 02 08:48:02 -0400 2015
>Originator:     Sarah Spall
>Organization:
plt
>Submitter-Id:   unknown
>Release:        Racket v6.1.1.
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/41.0.2272.76 Chrome/41.0.2272.76 Safari/537.36
>Description:
Is this a bug? Just in case.
Used raco exe to compile function that never terminates, causes a segfault when run from command line.  When run in Dr.Racket I am notified that the program ran out of memory.

Program received signal SIGSEGV, Segmentation fault.
0x0000000000690cca in scheme_gmp_tls_unload ()
(gdb) bt
#0  0x0000000000690cca in scheme_gmp_tls_unload ()
#1  0x000000000065b5d3 in ?? ()
#2  0x000000000069d2b6 in ?? ()
#3  0x000000000069d96f in ?? ()
#4  0x00000000006a11aa in ?? ()
#5  0x00000000006a1f8a in GC_malloc_atomic ()
#6  0x000000000043d4ed in scheme_malloc_fail_ok ()
#7  0x000000000061eb1c in scheme_alloc_byte_string ()
#8  0x00000000005c9662 in ?? ()
#9  0x00000000005c9c58 in ?? ()
#10 0x00007ffff7e5c7a9 in ?? ()
#11 0x000000000043c560 in ?? ()
#12 0x0000000000000002 in ?? ()
#13 0x00007fffffffd4f0 in ?? ()
#14 0x0000000000000000 in ?? ()
>How-To-Repeat:
(define (count-tests list)
    (define (loop s)
        (if (empty? s)
	    0
            (+ 1 (loop (cdr list)))))
    (loop list))

(count-tests (list 1 2 3 4 5)) 
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: sspall10@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15024: segfault when program runs out of memory
Date: Thu, 2 Apr 2015 07:47:23 -0500

 Yes and no. DrRacket imposes more stringent memory limits than the OS
 usually imposes, with the result that DrRacket reliably has memory to
 compose an "out of memory" error. When you use `racket`, then only the
 OS's limit applies, and it applies to the process as a whole;
 sometimes, `racket` can recover enough to report an error, and
 sometimes it doesn't find the memory it needs to provide a good error
 message. The next release has some repairs that make Racket more likely
 to report "out of memory", but not always.
 
 For what it's worth, I don't think your debugger trace below is the
 actual crash. That particular SIGSEGV is intentional as part of the GC
 implementation. It will be caught by a signal handler. You can use
 `handle SIGSEGV nostop noprint` in gdb and then continue to get to the
 eventual crash backtrace.
 
 At Wed, 1 Apr 2015 18:56:01 -0400, sspall10@gmail.com wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15024
 > 
 > Reported by Sarah Spall for release: Racket v6.1.1.
 > 
 > *** Description:
 > Is this a bug? Just in case.
 > Used raco exe to compile function that never terminates, causes a segfault when 
 > run from command line.  When run in Dr.Racket I am notified that the program 
 > ran out of memory.
 > 
 > Program received signal SIGSEGV, Segmentation fault.
 > 0x0000000000690cca in scheme_gmp_tls_unload ()
 > (gdb) bt
 > #0  0x0000000000690cca in scheme_gmp_tls_unload ()
 > #1  0x000000000065b5d3 in ?? ()
 > #2  0x000000000069d2b6 in ?? ()
 > #3  0x000000000069d96f in ?? ()
 > #4  0x00000000006a11aa in ?? ()
 > #5  0x00000000006a1f8a in GC_malloc_atomic ()
 > #6  0x000000000043d4ed in scheme_malloc_fail_ok ()
 > #7  0x000000000061eb1c in scheme_alloc_byte_string ()
 > #8  0x00000000005c9662 in ?? ()
 > #9  0x00000000005c9c58 in ?? ()
 > #10 0x00007ffff7e5c7a9 in ?? ()
 > #11 0x000000000043c560 in ?? ()
 > #12 0x0000000000000002 in ?? ()
 > #13 0x00007fffffffd4f0 in ?? ()
 > #14 0x0000000000000000 in ?? ()
 > 
 > *** How to repeat:
 > (define (count-tests list)
 >     (define (loop s)
 >         (if (empty? s)
 > 	    0
 >             (+ 1 (loop (cdr list)))))
 >     (loop list))
 > 
 > (count-tests (list 1 2 3 4 5)) 
 > 
 > *** Environment:
 > Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like 
 > Gecko) Ubuntu Chromium/41.0.2272.76 Chrome/41.0.2272.76 Safari/537.36
