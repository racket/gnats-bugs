From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Aug  1 15:03:06 2017
Received: from mail-yw0-f179.google.com (mail-yw0-f179.google.com [209.85.161.179])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id v71J35jB030185
	for <bugs@bugs.plt-scheme.org>; Tue, 1 Aug 2017 15:03:05 -0400
Message-Id: <201708011903.v71J32o7030170@winooski.ccs.neu.edu>
Date: Tue, 1 Aug 2017 15:03:02 -0400
From: nathan.beenken@gmail.com
To: bugs@racket-lang.org
Subject: idea

>Number:         15465
>Category:       all
>Synopsis:       idea
>Class:          change-request
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Aug 01 15:04:01 -0400 2017
>Closed-Date:    Tue Aug 01 15:38:10 -0400 2017
>Last-Modified:  Tue Aug 01 15:40:01 -0400 2017
>Originator:     Nathan
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.9
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36
>Description:
Sorry about using the bug report, I wanted to contact the project developers and didn't see a page on that. I'm curious about something, and since I have no experience developing interpreters maybe you can help me.

It's always seemed to me that an interpreter should implement a thread pool and identify functions as either pure or impure based on whether or not they called only pure or any impure functions.

Given that information, couldn't you run a sort of "do-queue" and actually run as many threads as the CPU has cores, split in a manner similar to

(define-syntax-rule
  (threaded function argument ...)
  (apply function (map touch (list (future (lambda () argument)) ...))))

so that all the processing between input and output would be automatically run in parallel to the greatest extent that the previously mentioned rule would suggest is possible?

It seems to me like we're not really processing a list at all, but a tree, and we should be able to visit it in layers working from the leaves back up to the root. Viewed the other way (from roots to leaves), every time the tree splits, we've identified two processes that can be done in parallel (provided that they're both pure, which, since every impure function I've ever written used built in functions for it's side-effects, should be possible to determine from the perspective of the interpreter).

It seems as basic to a good coding environment (to me anyway) as memory management, but I've not run into any languages that claim to do anything of the kind.

Then again, I'm really just a novice with Lisp and haven't tried to make an interpreter at all, so perhaps there are very good reasons why that's a very bad idea. If you could contact me either way, I'd be interested to hear the pros and cons to such an approach from someone who actually has an idea of how to make a quality interpreter.

I don't use Racket professionally, but it just might be the best language I've ever played with.
>How-To-Repeat:
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by matthias at Tue, 01 Aug 2017 15:38:10 -0400
Reason>>> Not a bug

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: nathan.beenken@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15465: idea
Date: Tue, 1 Aug 2017 15:37:59 -0400

 You want to post this question on our mailing list: https://lists.racket-lang.org 
 
 
 
 
 > On Aug 1, 2017, at 3:04 PM, nathan.beenken@gmail.com wrote:
 > 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=15465
 > 
 > Reported by Nathan for release: 6.9
 > 
 > *** Description:
 > Sorry about using the bug report, I wanted to contact the project developers and didn't see a page on that. I'm curious about something, and since I have no experience developing interpreters maybe you can help me.
 > 
 > It's always seemed to me that an interpreter should implement a thread pool and identify functions as either pure or impure based on whether or not they called only pure or any impure functions.
 > 
 > Given that information, couldn't you run a sort of "do-queue" and actually run as many threads as the CPU has cores, split in a manner similar to
 > 
 > (define-syntax-rule
 >  (threaded function argument ...)
 >  (apply function (map touch (list (future (lambda () argument)) ...))))
 > 
 > so that all the processing between input and output would be automatically run in parallel to the greatest extent that the previously mentioned rule would suggest is possible?
 > 
 > It seems to me like we're not really processing a list at all, but a tree, and we should be able to visit it in layers working from the leaves back up to the root. Viewed the other way (from roots to leaves), every time the tree splits, we've identified two processes that can be done in parallel (provided that they're both pure, which, since every impure function I've ever written used built in functions for it's side-effects, should be possible to determine from the perspective of the interpreter).
 > 
 > It seems as basic to a good coding environment (to me anyway) as memory management, but I've not run into any languages that claim to do anything of the kind.
 > 
 > Then again, I'm really just a novice with Lisp and haven't tried to make an interpreter at all, so perhaps there are very good reasons why that's a very bad idea. If you could contact me either way, I'd be interested to hear the pros and cons to such an approach from someone who actually has an idea of how to make a quality interpreter.
 > 
 > I don't use Racket professionally, but it just might be the best language I've ever played with.
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36
 > 
 
 
