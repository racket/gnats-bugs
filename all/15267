From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar  7 15:52:24 2016
Received: from mail-io0-f182.google.com (mail-io0-f182.google.com [209.85.223.182])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u27KqLa0007793
	for <bugs@bugs.plt-scheme.org>; Mon, 7 Mar 2016 15:52:21 -0500
Message-Id: <201603072052.u27KqJ3F007786@winooski.ccs.neu.edu>
Date: Mon, 7 Mar 2016 15:52:19 -0500
From: sdmoore@fas.harvard.edu
To: bugs@racket-lang.org
Subject: ->i associates keyword arguments incorrectly

>Number:         15267
>Category:       all
>Synopsis:       ->i associates keyword arguments incorrectly
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Mar 07 15:56:01 -0500 2016
>Closed-Date:    Tue Mar 08 22:48:03 -0500 2016
>Last-Modified:  Tue Mar 08 22:48:03 -0500 2016
>Originator:     Scott Moore
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.4.0.13
>Environment:
FreeBSD amd64 / Mozilla/5.0 (X11; FreeBSD amd64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36
>Description:
There is a bug in ->i contracts that results in mandatory keyword arguments being associated with the wrong keywords during the application of the underlying function. This only seems to happen when there are more than two mandatory keyword arguments.
>How-To-Repeat:
#lang racket

(module foo racket
  (provide
   (contract-out
    [foo (->i ([x any/c]
               #:one [one any/c]
               #:two [two any/c]
               #:three [three any/c])
              [result any/c])]))
  (define (foo x #:one one #:two two #:three three)
    (list x one two three)))

(module+ test
  (require rackunit)
  (require (submod ".." foo))
  
  (check-equal? (list 0 1 2 3) (foo 0 #:one 1 #:two 2 #:three 3)))

--------------------
FAILURE
actual:     (0 1 2 3)
expected:   (0 1 3 2)
name:       check-equal?
location:   (#<path:/home/sdmoore/Desktop/bugs.rkt> 18 2 376 63)
expression: (check-equal? (list 0 1 2 3) (foo 0 #:one 1 #:two 2 #:three 3))
--------------------
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: "sdmoore@fas.harvard.edu" <sdmoore@fas.harvard.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>
Cc: "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15267: ->i associates keyword arguments incorrectly
Date: Tue, 8 Mar 2016 07:31:13 -0600

 --001a114ca9c856af7f052d8998a3
 Content-Type: text/plain; charset=UTF-8
 
 While you wait for me to find time to fix this you can probably work around
 it by sorting the keywords alphabetically.
 
 Robby
 
 On Monday, March 7, 2016, <sdmoore@fas.harvard.edu> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15267
 >
 > Reported by Scott Moore for release: 6.4.0.13
 >
 > *** Description:
 > There is a bug in ->i contracts that results in mandatory keyword
 > arguments being associated with the wrong keywords during the application
 > of the underlying function. This only seems to happen when there are more
 > than two mandatory keyword arguments.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (module foo racket
 >   (provide
 >    (contract-out
 >     [foo (->i ([x any/c]
 >                #:one [one any/c]
 >                #:two [two any/c]
 >                #:three [three any/c])
 >               [result any/c])]))
 >   (define (foo x #:one one #:two two #:three three)
 >     (list x one two three)))
 >
 > (module+ test
 >   (require rackunit)
 >   (require (submod ".." foo))
 >
 >   (check-equal? (list 0 1 2 3) (foo 0 #:one 1 #:two 2 #:three 3)))
 >
 > --------------------
 > FAILURE
 > actual:     (0 1 2 3)
 > expected:   (0 1 3 2)
 > name:       check-equal?
 > location:   (#<path:/home/sdmoore/Desktop/bugs.rkt> 18 2 376 63)
 > expression: (check-equal? (list 0 1 2 3) (foo 0 #:one 1 #:two 2 #:three 3))
 > --------------------
 >
 > *** Environment:
 > FreeBSD amd64 / Mozilla/5.0 (X11; FreeBSD amd64) AppleWebKit/537.36
 > (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36
 >
 >
 
 --001a114ca9c856af7f052d8998a3
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 While you wait for me to find time to fix this you can probably work around=
  it by sorting the keywords alphabetically.<div><br></div><div>Robby<span><=
 /span><br><br>On Monday, March 7, 2016,  &lt;<a href=3D"mailto:sdmoore@fas.=
 harvard.edu">sdmoore@fas.harvard.edu</a>&gt; wrote:<br><blockquote class=3D=
 "gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding=
 -left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D15=
 267" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D15267</a><br>
 <br>
 Reported by Scott Moore for release: 6.4.0.13<br>
 <br>
 *** Description:<br>
 There is a bug in -&gt;i contracts that results in mandatory keyword argume=
 nts being associated with the wrong keywords during the application of the =
 underlying function. This only seems to happen when there are more than two=
  mandatory keyword arguments.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (module foo racket<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0(contract-out<br>
 =C2=A0 =C2=A0 [foo (-&gt;i ([x any/c]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:one [one any/c]<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:two [two any/c]<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:three [three any/c=
 ])<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [result any/c])]))<br>
 =C2=A0 (define (foo x #:one one #:two two #:three three)<br>
 =C2=A0 =C2=A0 (list x one two three)))<br>
 <br>
 (module+ test<br>
 =C2=A0 (require rackunit)<br>
 =C2=A0 (require (submod &quot;..&quot; foo))<br>
 <br>
 =C2=A0 (check-equal? (list 0 1 2 3) (foo 0 #:one 1 #:two 2 #:three 3)))<br>
 <br>
 --------------------<br>
 FAILURE<br>
 actual:=C2=A0 =C2=A0 =C2=A0(0 1 2 3)<br>
 expected:=C2=A0 =C2=A0(0 1 3 2)<br>
 name:=C2=A0 =C2=A0 =C2=A0 =C2=A0check-equal?<br>
 location:=C2=A0 =C2=A0(#&lt;path:/home/sdmoore/Desktop/bugs.rkt&gt; 18 2 37=
 6 63)<br>
 expression: (check-equal? (list 0 1 2 3) (foo 0 #:one 1 #:two 2 #:three 3))=
 <br>
 --------------------<br>
 <br>
 *** Environment:<br>
 FreeBSD amd64 / Mozilla/5.0 (X11; FreeBSD amd64) AppleWebKit/537.36 (KHTML,=
  like Gecko) Chrome/48.0.2564.97 Safari/537.36<br>
 <br>
 </blockquote></div>
 
 --001a114ca9c856af7f052d8998a3--

State changed from "open" to "closed" by robby at Tue, 08 Mar 2016 22:48:03 -0500
Reason>>> 
fixed with 
https://github.com/racket/racket/commit/0f73870a1b82bf9252b0a4
f52693dd19c343ce1e

