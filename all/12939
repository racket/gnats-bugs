From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jul 25 13:09:16 2012
Received: from mail-vc0-f172.google.com (mail-vc0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q6PH9DB0026462
	for <bugs@bugs.plt-scheme.org>; Wed, 25 Jul 2012 13:09:13 -0400
Message-Id: <201207251709.q6PH9AcL026455@champlain.ccs.neu.edu>
Date: Wed, 25 Jul 2012 13:09:10 -0400
From: danburton.email@gmail.com
To: bugs@racket-lang.org
Subject: Typed Racket make-predicate instead of define-predicate

>Number:         12939
>Category:       all
>Synopsis:       Typed Racket make-predicate instead of define-predicate
>Class:          change-request
>Responsible:    samth
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jul 25 13:12:01 -0400 2012
>Closed-Date:    Mon Aug 20 12:46:24 -0400 2012
>Last-Modified:  Mon Aug 20 12:46:24 -0400 2012
>Originator:     Dan Burton
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:11.0) Gecko/20100101 Firefox/11.0
>Description:
Typed Racket provides a define-predicate macro, which works only at the top level:

    (define-predicate foo? Foo)

This is a nice thing to have, though inflexible. It would be more convenient if an expression macro were available

    (define foo? (make-predicate Foo))

Such expressions could be used inline, without having to name them:

    (if ((make-predicate Foo) x) 'foo 'not-foo)

There's only one catch I can think of: when a universally quantified type variable is used.

    ;; this should probably be illegal
    (define: (A) (blah [x : Any] [y : A]) : A
      (if ((make-predicate A) x) x y))
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org, danburton.email@gmail.com
Cc: 
Subject: Re: all/12939: Typed Racket make-predicate instead of define-predicate
Date: Thu, 26 Jul 2012 00:34:25 -0700

 I have the start of a fix for this. I have implemented a
 make-predicate function but still need to deal with the local
 type-variable problem.
 
 Can I be assigned to this bug, I didn't see a way to do that in the web UI.
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org, danburton.email@gmail.com
Subject: Re: all/12939: Typed Racket make-predicate instead of define-predicate
Date: Thu, 26 Jul 2012 00:57:37 -0700

 On Thu, Jul 26, 2012 at 12:34 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > I have the start of a fix for this.
 
 Great!
 
 > I have implemented a
 > make-predicate function but still need to deal with the local
 > type-variable problem.
 
 Just find the free variables of the type after parsing and make sure
 that it's empty.  Use the `fv` function from
 `typed-racket/types/utils.rkt`
 
 > Can I be assigned to this bug, I didn't see a way to do that in the web UI.
 
 Unfortunately not, but just replying to this email should be fine.
 -- 
 sam th
 samth@ccs.neu.edu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org, danburton.email@gmail.com
Subject: Re: all/12939: Typed Racket make-predicate instead of define-predicate
Date: Thu, 26 Jul 2012 22:37:54 -0700

 I am running into issues with the error case. The problem is that I
 cannot parse the type at expansion time (during the local expand, not
 all of phase 1) because the type tables and such are not ready. Thus I
 need to do the checking during typecheck time. The problem is that
 there is no current communication channel that would let me say that I
 need such work done then. I can either make a specific channel (syntax
 property) for ensuring that a type has no free variables, or a channel
 that allows arbitrary work to be done by embedding a procedure as the
 syntax property value. Neither of these seem particularly clean.
 
 Any suggestions?
 
 I am also thinking that this infrastructure will allow for the cast
 operator of pr/12201, as the only difference is making the contract
 non-flat and applying it.
 
 
 
 
 On Thu, Jul 26, 2012 at 12:57 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Thu, Jul 26, 2012 at 12:34 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> I have the start of a fix for this.
 >
 > Great!
 >
 >> I have implemented a
 >> make-predicate function but still need to deal with the local
 >> type-variable problem.
 >
 > Just find the free variables of the type after parsing and make sure
 > that it's empty.  Use the `fv` function from
 > `typed-racket/types/utils.rkt`
 >
 >> Can I be assigned to this bug, I didn't see a way to do that in the web UI.
 >
 > Unfortunately not, but just replying to this email should be fine.
 > --
 > sam th
 > samth@ccs.neu.edu
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org, danburton.email@gmail.com
Subject: Re: all/12939: Typed Racket make-predicate instead of define-predicate
Date: Wed, 1 Aug 2012 13:48:01 -0400

 On Thu, Jul 26, 2012 at 10:37 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > I am running into issues with the error case. The problem is that I
 > cannot parse the type at expansion time (during the local expand, not
 > all of phase 1) because the type tables and such are not ready. Thus I
 > need to do the checking during typecheck time. The problem is that
 > there is no current communication channel that would let me say that I
 > need such work done then. I can either make a specific channel (syntax
 > property) for ensuring that a type has no free variables, or a channel
 > that allows arbitrary work to be done by embedding a procedure as the
 > syntax property value. Neither of these seem particularly clean.
 
 Now that I think about it more, this shouldn't even be something you
 need to check for explicitly.  You can just try to generate the
 contract, and it should already fail when encountering a free
 variable.
 
 > I am also thinking that this infrastructure will allow for the cast
 > operator of pr/12201, as the only difference is making the contract
 > non-flat and applying it.
 
 I agree.
 
 >
 > On Thu, Jul 26, 2012 at 12:57 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> On Thu, Jul 26, 2012 at 12:34 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>> I have the start of a fix for this.
 >>
 >> Great!
 >>
 >>> I have implemented a
 >>> make-predicate function but still need to deal with the local
 >>> type-variable problem.
 >>
 >> Just find the free variables of the type after parsing and make sure
 >> that it's empty.  Use the `fv` function from
 >> `typed-racket/types/utils.rkt`
 >>
 >>> Can I be assigned to this bug, I didn't see a way to do that in the web UI.
 >>
 >> Unfortunately not, but just replying to this email should be fine.
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org, danburton.email@gmail.com
Subject: Re: all/12939: Typed Racket make-predicate instead of define-predicate
Date: Wed, 1 Aug 2012 21:55:24 -0700

 You need the explicit check for the error message, if you do the naive
 thing without it you get an awful error message:
 
 make-predicate-mod2.rkt:7:30: Type Checker: Type Error could not be
 converted to a contract.
 in: a
 
 The issue is that the type is taken out of its expression context and
 raised to the module level before it is turned into a contract. Thus
 the free variables, now become unbound type variables and are thus
 converted to error and give the above message.
 
 
 On Wed, Aug 1, 2012 at 10:48 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Thu, Jul 26, 2012 at 10:37 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> I am running into issues with the error case. The problem is that I
 >> cannot parse the type at expansion time (during the local expand, not
 >> all of phase 1) because the type tables and such are not ready. Thus I
 >> need to do the checking during typecheck time. The problem is that
 >> there is no current communication channel that would let me say that I
 >> need such work done then. I can either make a specific channel (syntax
 >> property) for ensuring that a type has no free variables, or a channel
 >> that allows arbitrary work to be done by embedding a procedure as the
 >> syntax property value. Neither of these seem particularly clean.
 >
 > Now that I think about it more, this shouldn't even be something you
 > need to check for explicitly.  You can just try to generate the
 > contract, and it should already fail when encountering a free
 > variable.
 >
 >> I am also thinking that this infrastructure will allow for the cast
 >> operator of pr/12201, as the only difference is making the contract
 >> non-flat and applying it.
 >
 > I agree.
 >
 >>
 >> On Thu, Jul 26, 2012 at 12:57 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>> On Thu, Jul 26, 2012 at 12:34 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>>> I have the start of a fix for this.
 >>>
 >>> Great!
 >>>
 >>>> I have implemented a
 >>>> make-predicate function but still need to deal with the local
 >>>> type-variable problem.
 >>>
 >>> Just find the free variables of the type after parsing and make sure
 >>> that it's empty.  Use the `fv` function from
 >>> `typed-racket/types/utils.rkt`
 >>>
 >>>> Can I be assigned to this bug, I didn't see a way to do that in the web UI.
 >>>
 >>> Unfortunately not, but just replying to this email should be fine.
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, nobody@racket-lang.org,
        bugs@racket-lang.org, bug-notification@racket-lang.org,
        danburton.email@gmail.com
Subject: Re: all/12939: Typed Racket make-predicate instead of define-predicate
Date: Thu, 2 Aug 2012 08:38:37 -0400

 Eric has already implemented a better solution; I'm reviewing the patch.
 
 On Thu, Aug 2, 2012 at 8:37 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > Is it possible to rewrite the error message via an exception handler? (Installing an exception handler isn't cheap but possibly easier to implement for now.)
 >
 >
 >
 > On Aug 2, 2012, at 12:55 AM, Eric Dobson wrote:
 >
 >> You need the explicit check for the error message, if you do the naive
 >> thing without it you get an awful error message:
 >>
 >> make-predicate-mod2.rkt:7:30: Type Checker: Type Error could not be
 >> converted to a contract.
 >> in: a
 >>
 >> The issue is that the type is taken out of its expression context and
 >> raised to the module level before it is turned into a contract. Thus
 >> the free variables, now become unbound type variables and are thus
 >> converted to error and give the above message.
 >>
 >>
 >> On Wed, Aug 1, 2012 at 10:48 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>> On Thu, Jul 26, 2012 at 10:37 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>>> I am running into issues with the error case. The problem is that I
 >>>> cannot parse the type at expansion time (during the local expand, not
 >>>> all of phase 1) because the type tables and such are not ready. Thus I
 >>>> need to do the checking during typecheck time. The problem is that
 >>>> there is no current communication channel that would let me say that I
 >>>> need such work done then. I can either make a specific channel (syntax
 >>>> property) for ensuring that a type has no free variables, or a channel
 >>>> that allows arbitrary work to be done by embedding a procedure as the
 >>>> syntax property value. Neither of these seem particularly clean.
 >>>
 >>> Now that I think about it more, this shouldn't even be something you
 >>> need to check for explicitly.  You can just try to generate the
 >>> contract, and it should already fail when encountering a free
 >>> variable.
 >>>
 >>>> I am also thinking that this infrastructure will allow for the cast
 >>>> operator of pr/12201, as the only difference is making the contract
 >>>> non-flat and applying it.
 >>>
 >>> I agree.
 >>>
 >>>>
 >>>> On Thu, Jul 26, 2012 at 12:57 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>>>> On Thu, Jul 26, 2012 at 12:34 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>>>>> I have the start of a fix for this.
 >>>>>
 >>>>> Great!
 >>>>>
 >>>>>> I have implemented a
 >>>>>> make-predicate function but still need to deal with the local
 >>>>>> type-variable problem.
 >>>>>
 >>>>> Just find the free variables of the type after parsing and make sure
 >>>>> that it's empty.  Use the `fv` function from
 >>>>> `typed-racket/types/utils.rkt`
 >>>>>
 >>>>>> Can I be assigned to this bug, I didn't see a way to do that in the web UI.
 >>>>>
 >>>>> Unfortunately not, but just replying to this email should be fine.
 >>>>> --
 >>>>> sam th
 >>>>> samth@ccs.neu.edu
 >>>
 >>>
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, nobody@racket-lang.org,
        bugs@racket-lang.org, bug-notification@racket-lang.org,
        danburton.email@gmail.com
Subject: Re: all/12939: Typed Racket make-predicate instead of define-predicate
Date: Thu, 2 Aug 2012 08:37:19 -0400

 --Apple-Mail=_FCB502AD-7A10-483D-ABBF-F64374CCEE45
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 Is it possible to rewrite the error message via an exception handler? =
 (Installing an exception handler isn't cheap but possibly easier to =
 implement for now.)=20
 
 
 
 On Aug 2, 2012, at 12:55 AM, Eric Dobson wrote:
 
 > You need the explicit check for the error message, if you do the naive
 > thing without it you get an awful error message:
 >=20
 > make-predicate-mod2.rkt:7:30: Type Checker: Type Error could not be
 > converted to a contract.
 > in: a
 >=20
 > The issue is that the type is taken out of its expression context and
 > raised to the module level before it is turned into a contract. Thus
 > the free variables, now become unbound type variables and are thus
 > converted to error and give the above message.
 >=20
 >=20
 > On Wed, Aug 1, 2012 at 10:48 AM, Sam Tobin-Hochstadt =
 <samth@ccs.neu.edu> wrote:
 >> On Thu, Jul 26, 2012 at 10:37 PM, Eric Dobson =
 <eric.n.dobson@gmail.com> wrote:
 >>> I am running into issues with the error case. The problem is that I
 >>> cannot parse the type at expansion time (during the local expand, =
 not
 >>> all of phase 1) because the type tables and such are not ready. Thus =
 I
 >>> need to do the checking during typecheck time. The problem is that
 >>> there is no current communication channel that would let me say that =
 I
 >>> need such work done then. I can either make a specific channel =
 (syntax
 >>> property) for ensuring that a type has no free variables, or a =
 channel
 >>> that allows arbitrary work to be done by embedding a procedure as =
 the
 >>> syntax property value. Neither of these seem particularly clean.
 >>=20
 >> Now that I think about it more, this shouldn't even be something you
 >> need to check for explicitly.  You can just try to generate the
 >> contract, and it should already fail when encountering a free
 >> variable.
 >>=20
 >>> I am also thinking that this infrastructure will allow for the cast
 >>> operator of pr/12201, as the only difference is making the contract
 >>> non-flat and applying it.
 >>=20
 >> I agree.
 >>=20
 >>>=20
 >>> On Thu, Jul 26, 2012 at 12:57 AM, Sam Tobin-Hochstadt =
 <samth@ccs.neu.edu> wrote:
 >>>> On Thu, Jul 26, 2012 at 12:34 AM, Eric Dobson =
 <eric.n.dobson@gmail.com> wrote:
 >>>>> I have the start of a fix for this.
 >>>>=20
 >>>> Great!
 >>>>=20
 >>>>> I have implemented a
 >>>>> make-predicate function but still need to deal with the local
 >>>>> type-variable problem.
 >>>>=20
 >>>> Just find the free variables of the type after parsing and make =
 sure
 >>>> that it's empty.  Use the `fv` function from
 >>>> `typed-racket/types/utils.rkt`
 >>>>=20
 >>>>> Can I be assigned to this bug, I didn't see a way to do that in =
 the web UI.
 >>>>=20
 >>>> Unfortunately not, but just replying to this email should be fine.
 >>>> --
 >>>> sam th
 >>>> samth@ccs.neu.edu
 >>=20
 >>=20
 >>=20
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 
 
 --Apple-Mail=_FCB502AD-7A10-483D-ABBF-F64374CCEE45
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgwMjEyMzcyMFowIwYJKoZI
 hvcNAQkEMRYEFOk6W/dYHxW0KnL5ymfMWHVQnAjWMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBALbkxunLsQDTbTWz5zeU9998pWQ7t8vcZkmFibZpCrNRFOBM/MTSLyWIfxm6DWIifc+3
 IBQ/eVylgcufCm2ZZi+WbN+qC6SWXwlqyF6tHVEtqqc3dD+fCduYLUDBMuPpVoRD6P9A4UUuXIn0
 OtdQSuY21no3i5VXeebleANBNjysJCypNq+T6mp8Q1rvhnWx3gW6mVUJNP+0BwvjoNLy1g6ElOoI
 iUKNlvaynKufc/wsAvZTpQyC60Sv+Sc6wmex4JHXHohj7YgOL+z9FW2qsWh1mZTpwAEtsnexw64y
 F1F8ojeLGGWr+F4jNlHrVrBYmgGfVYuO3CJRF3GHcBIarEsAAAAAAAA=
 
 --Apple-Mail=_FCB502AD-7A10-483D-ABBF-F64374CCEE45--
Responsible changed from "nobody" to "samth" by samth@racket-lang.org at Mon, 20 Aug 2012 12:46:24 -0400
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/533920480e
State changed from "open" to "closed" by samth@racket-lang.org at Mon, 20 Aug 2012 12:46:24 -0400
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/533920480e
