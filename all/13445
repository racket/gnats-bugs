From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jan 22 17:55:19 2013
Received: from mail-ob0-f172.google.com (mail-ob0-f172.google.com [209.85.214.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r0MMtFAK015327
	for <bugs@bugs.plt-scheme.org>; Tue, 22 Jan 2013 17:55:16 -0500
Message-Id: <201301222255.r0MMtC4x015321@champlain.ccs.neu.edu>
Date: Tue, 22 Jan 2013 17:55:12 -0500
From: vasishtha.spier@gmail.com
To: bugs@racket-lang.org
Subject: Racket Guide 13.7.2 The Mixin Form - and Racket Reference  5.5 Mixins - need example of use of mixin

>Number:         13445
>Category:       all
>Synopsis:       Racket Guide 13.7.2 The Mixin Form - and Racket Reference  5.5 Mixins - need example of use of mixin
>Class:          doc-bug
>Responsible:    dyoo
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jan 22 17:56:01 -0500 2013
>Closed-Date:    Tue Feb 19 14:45:08 -0500 2013
>Last-Modified:  Tue Feb 19 14:48:01 -0500 2013
>Originator:     Harry Spier
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1
>Environment:
windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 294496760
Links: (links) = ("OCR_PROJECT" "racket-ocr"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("C:\\Users\\Harry\\AppData\\Roaming\\Racket\\5.3.1\\collects"
 (non-existent-path))
("C:\\Program Files\\Racket\\collects"
 ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Racket Guide 13.7.2 The Mixin Form, and Racket Reference 5.5 Mixins - don't have an example of the use of the mixin form.  In the Racket Guide its only when you get to 13.7.3 that you see an example of its use, and then its somewhat obscured by the added complication of define-member-name and member-name-key etc. and the interface-decl's are empty in that example. Also the sentence in the guide:
 "The first set of interface-exprs determines the domain of the mixin, and the second set determines the range. That is, the expansion is a function that tests whether a given base class implements the first sequence of interface-exprs and produces a class that implements the second sequence of interface-exprs." 
left me unclear if the second sequence of interface-expr's specified just the method names the mixin added or the combined method names of the base class and the mixin.

It took me a while to figure out that its used like this (I think?)
#lang racket
(define fish-interface (interface () get-size  grow eat ))
(define hungry-interface (interface () eat-more))
(define fish% (class* object% (fish-interface)
                (super-new) 
                (init size)                ; initialization argument
                (define current-size size) ; field
                (define/public (get-size)
                  current-size)
                
                (define/public (grow amt)
                  (set! current-size (+ amt current-size)))
                
                (define/public (eat other-fish)
                  (grow (send other-fish get-size))))) 

(define (hungry-mixin %)
  ((mixin (fish-interface) (hungry-interface)
    (super-new)
    (inherit eat)
    (define/public (eat-more fish1 fish2)
      (eat fish1)
      (eat fish2))) %))

(define hungry-fish-a (new (hungry-mixin fish%) [size 10]))
(define minnow1 (new fish% [size 5]))
(define minnow2 (new fish% [size 5]))
(send hungry-fish-a get-size)
(send hungry-fish-a eat-more minnow1 minnow2)
(send hungry-fish-a get-size)
>How-To-Repeat:

>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "dyoo" by dyoo@racket-lang.org at Tue, 19 Feb 2013 14:45:08 -0500
Reason>>> A commit by dyoo@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/796550bd9f
State changed from "open" to "closed" by dyoo@racket-lang.org at Tue, 19 Feb 2013 14:45:08 -0500
Reason>>> A commit by dyoo@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/796550bd9f
  | Add example of mixin form to guide documentation.
  | 
  | Closes PR 13445.

From: Danny Yoo <dyoo@hashcollision.org>
To: vasishtha.spier@gmail.com, nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: all/13445: Racket Guide 13.7.2 The Mixin Form - and Racket
 Reference 5.5 Mixins - need example of use of mixin
Date: Tue, 19 Feb 2013 12:46:10 -0700

 Agreed!  I'll add the following example to the guide to demonstrate
 the mixin form.
 
 http://git.racket-lang.org/plt/blobdiff/e0650c43df4cf995d6ea09ce7146dc4040265583..796550bd9f9db1fdd83cc2e400c9c8ce6fbca5e9:/collects/scribblings/guide/class.scrbl
 
 
 Thanks for the feedback!
