From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jun  1 00:23:22 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q514NJ6Q025329
	for <bugs@bugs.plt-scheme.org>; Fri, 1 Jun 2012 00:23:19 -0400
Message-Id: <201206010423.q514NGPI025323@champlain.ccs.neu.edu>
Date: Fri, 1 Jun 2012 00:23:16 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Type on identity from racket/function is not precise

>Number:         12813
>Category:       all
>Synopsis:       Type on identity from racket/function is not precise
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jun 01 00:24:02 -0400 2012
>Closed-Date:    Sat Jun 02 18:54:03 -0400 2012
>Last-Modified:  Sat Jun 02 18:54:03 -0400 2012
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.10--2012-05-31(a6b6bcfe/d/fix-poly-structs)
>Environment:
macosx "Darwin eric-dobsons-macbook.local 11.3.0 Darwin Kernel Version 11.3.0: Thu Jan 12 18:48:32 PST 2012; root:xnu-1699.24.23~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 324824832
Links: (links) = ("raco-git" "rudybot"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/eric/Library/Racket/5.3.0.10/collects"
 ("info-domain"))
("/Users/eric/proj/racket/plt/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "type!
 d" "typed-racket" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
The following shows an interaction in the racket command line
-> (:print-type identity)
(All (a) (a -> a))
-> (:print-type (lambda (x) x))
(Any -> Any : ((! #f @ 0) | (#f @ 0)) (0))

The type of identity should be the type of (lambda (x) x).
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12813: Type on identity from racket/function is not precise
Date: Fri, 1 Jun 2012 09:40:10 -0400

 Hmph. I would not hesitate to export (lambda (x) x) with type Any -> Any but I would have second, third, and fourth thoughts exporting it with All alpha. alpha -> alpha. 
 
 
 
 On Jun 1, 2012, at 12:24 AM, eric.n.dobson@gmail.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12813
 > 
 > Reported by Eric Dobson for release: 5.3.0.10--2012-05-31(a6b6bcfe/d/fix-poly-structs)
 > 
 > *** Description:
 > The following shows an interaction in the racket command line
 > -> (:print-type identity)
 > (All (a) (a -> a))
 > -> (:print-type (lambda (x) x))
 > (Any -> Any : ((! #f @ 0) | (#f @ 0)) (0))
 > 
 > The type of identity should be the type of (lambda (x) x).
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > macosx "Darwin eric-dobsons-macbook.local 11.3.0 Darwin Kernel Version 11.3.0: Thu Jan 12 18:48:32 PST 2012; root:xnu-1699.24.23~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 324824832
 > Links: (links) = ("raco-git" "rudybot"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > 
 > 
 > Collections:
 > ("/Users/eric/Library/Racket/5.3.0.10/collects"
 > ("info-domain"))
 > ("/Users/eric/proj/racket/plt/collects"
 > (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "type!
 > d" "typed-racket" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 > 
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 > 
 
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12813: Type on identity from racket/function is
 not precise
Date: Fri, 1 Jun 2012 09:49:55 -0400

 On Fri, Jun 1, 2012 at 9:40 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > Hmph. I would not hesitate to export (lambda (x) x) with type Any -> Any but I would have second, third, and fourth thoughts exporting it with All alpha. alpha -> alpha.
 
 Maybe I'm missing something, but why isn't the latter a good type for
 the identity function?
 -- 
 sam th
 samth@ccs.neu.edu
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, eric.n.dobson@gmail.com,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12813: Type on identity from racket/function
 is not precise
Date: Fri, 01 Jun 2012 10:52:07 -0600

 On 06/01/2012 07:49 AM, Sam Tobin-Hochstadt wrote:
 > On Fri, Jun 1, 2012 at 9:40 AM, Matthias Felleisen<matthias@ccs.neu.edu>  wrote:
 >>
 >> Hmph. I would not hesitate to export (lambda (x) x) with type Any ->  Any but I would have second, third, and fourth thoughts exporting it with All alpha. alpha ->  alpha.
 >
 > Maybe I'm missing something, but why isn't the latter a good type for
 > the identity function?
 
 I'm confused as well. (Any -> Any) is a very imprecise type, but (All 
 (a) (a -> a)) is about as precise as TR can make the identity function. 
 It says that the output type is the same as the input type.
 
  > (define id (λ (x) x))
  > (id 1)
 - : Any
 1
  > (identity 1)
 - : Integer [generalized from One]
 1
 
 Then there's this:
 
  > ((λ (x) x) 1)
 - : Integer [generalized from One]
 1
 
 which indicates that the type of `identity' represents what TR infers 
 when you apply (λ (x) x) directly.
 
 Neil ⊥
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12813: Type on identity from racket/function is not precise
Date: Fri, 1 Jun 2012 09:58:45 -0700

 I think there is some confusion on what I want. I don't care about the Any vs polymorphism. I want the annotations about the value returned: ': ((! #f @ 0) | (#f @ 0)) (0))'. This is more precise than (All (a) a -> a), because it adds that if the return value is a true value then than argument was not false, and if it is false than the argument was false. It also says that it returns the argument, which (All (a) a -> a) guarantees (modulo holes in the type system). 
 
 
 On Jun 1, 2012, at 9:52 AM, Neil Toronto wrote:
 
 > On 06/01/2012 07:49 AM, Sam Tobin-Hochstadt wrote:
 >> On Fri, Jun 1, 2012 at 9:40 AM, Matthias Felleisen<matthias@ccs.neu.edu>  wrote:
 >>> 
 >>> Hmph. I would not hesitate to export (lambda (x) x) with type Any ->  Any but I would have second, third, and fourth thoughts exporting it with All alpha. alpha ->  alpha.
 >> 
 >> Maybe I'm missing something, but why isn't the latter a good type for
 >> the identity function?
 > 
 > I'm confused as well. (Any -> Any) is a very imprecise type, but (All (a) (a -> a)) is about as precise as TR can make the identity function. It says that the output type is the same as the input type.
 > 
 > > (define id (λ (x) x))
 > > (id 1)
 > - : Any
 > 1
 > > (identity 1)
 > - : Integer [generalized from One]
 > 1
 > 
 > Then there's this:
 > 
 > > ((λ (x) x) 1)
 > - : Integer [generalized from One]
 > 1
 > 
 > which indicates that the type of `identity' represents what TR infers when you apply (λ (x) x) directly.
 > 
 > Neil ⊥
 
 
Responsible changed from "nobody" to "samth" by samth@racket-lang.org at Sat, 02 Jun 2012 18:54:03 -0400
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/8459c22c01
State changed from "open" to "closed" by samth@racket-lang.org at Sat, 02 Jun 2012 18:54:03 -0400
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/8459c22c01
