From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Feb  2 11:38:30 2015
Received: from mail-oi0-f51.google.com (mail-oi0-f51.google.com [209.85.218.51])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t12GcNCg007566
	for <bugs@bugs.plt-scheme.org>; Mon, 2 Feb 2015 11:38:23 -0500
Message-Id: <201502021638.t12GcJXY007558@winooski.ccs.neu.edu>
Date: Mon, 2 Feb 2015 11:38:19 -0500
From: gustavo@oma.org.ar
To: bugs@racket-lang.org
Subject: JIT-Inlining of unsafe-fl->fx

>Number:         14962
>Category:       all
>Synopsis:       JIT-Inlining of unsafe-fl->fx
>Class:          sw-bug
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Feb 02 11:40:01 -0500 2015
>Last-Modified:  Wed Feb 04 11:28:01 -0500 2015
>Originator:     Gustavo Massaccesi
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1
>Environment:
windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 223099828
raco pkg (show):
Installation-wide:
 Package              Checksum                                    Source
 main-distribution    84a366a8c2b2908babe6c2811b0ada036bb159df    (catalog main-distribution)
 racket-lib           436f0928598fc1a8abf27422e8e6588bef45f652    (catalog racket-lib)
 [187 auto-installed packages not shown]
User-specific for installation "6.1.1":
 Package        Checksum                                    Source
 disassemble    cf0ee3a5f8463e0867eba4c964d742a29325a996    (url github://github.com/samth/disassemble/master)



Collections:
("C:\\Users\\User\\AppData\\Roaming\\Racket\\6.1.1\\collects"
 (non-existent-path))
("C:\\Program Files\\Racket\\collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f ((test) (main)) #t))
>Description:
(This is very strange.)

There are two implementations of unsafe-fl->fx. The implementation in C uses "truncate" and the jit-inlined implementation uses "round". It causes small incompatibilities, but you are not supposed to call unsafe-fl->fx with non integer flonums. The C implementation is slower than the jitinlined implementation. The problem is that the compiler uses it in unexpected situations. 

In particular, in these examples unsafe-fl->fx is slower than (lambda (x) (unsafe-fl->fx  x)). I expect than after the optimizations they are equivalent, or at least that unsafe-fl->fx is faster because the optimizer may get confused. I think this is the consequence of a subtle bug in the inlining heuristic.

In these examples the unsafe-fl->fx version is ~5 second faster than the other. The difference in the implementation is visible in the 4.9 case because they have different result. The difference in time is also present in the 7.0 that is a supported value. (The (random 1) is there to kill constant folding.)

;-----
#lang racket
(require racket/flonum)
(require racket/unsafe/ops)

(define (ev4.9 f)
  (f (unsafe-fl+ 4.9 (unsafe-fx->fl (random 1)))))

(define (ev7.0 f)
  (f (unsafe-fl+ 7.0 (unsafe-fx->fl (random 1)))))

(collect-garbage)
(collect-garbage)
(collect-garbage)
(time (for/last ([i (in-range 100000000)])
        (ev4.9 unsafe-fl->fx)))
;; cpu time: 102539 real time: 103243 gc time: 232
;; ==> 4

(collect-garbage)
(collect-garbage)
(collect-garbage)
(time (for/last ([i (in-range 100000000)])
        (ev4.9 (lambda (x) (unsafe-fl->fx  x)))))
;; cpu time: 95192 real time: 96170 gc time: 0
;; ==> 5

(collect-garbage)
(collect-garbage)
(collect-garbage)
(time (for/last ([i (in-range 100000000)])
        (ev7.0 unsafe-fl->fx)))
;; cpu time: 102961 real time: 103599 gc time: 280
;; ==> 7

(collect-garbage)
(collect-garbage)
(collect-garbage)
(time (for/last ([i (in-range 100000000)])
        (ev7.0 (lambda (x) (unsafe-fl->fx  x)))))
;; cpu time: 95676 real time: 96808 gc time: 0
:: ==> 7

(collect-garbage)
(collect-garbage)
(collect-garbage)
;-----

Another example:

In DrRacket this program has different results when "Debuging" is enabled or disabled. It's not a bug because it's you ere not supposed to call unsafe-fl->fx with non integer flonums, but it shows clearly how the implementation changes.

;------
#lang racket
(require racket/flonum)
(require racket/unsafe/ops)
(map fltruncate '(3.0 3.1 3.5 3.9 4.0 4.1 4.5 4.9 -3.0 -3.1 -3.5 -3.9 -4.0 -4.1 -4.5 -4.9 0.0 -0.0))
 (map flround '(3.0 3.1 3.5 3.9 4.0 4.1 4.5 4.9 -3.0 -3.1 -3.5 -3.9 -4.0 -4.1 -4.5 -4.9 0.0 -0.0))
(map unsafe-fl->fx '(3.0 3.1 3.5 3.9 4.0 4.1 4.5 4.9 -3.0 -3.1 -3.5 -3.9 -4.0 -4.1 -4.5 -4.9 0.0 -0.0))
 (map (lambda (x) (unsafe-fl->fx  x)) '(3.0 3.1 3.5 3.9 4.0 4.1 4.5 4.9 -3.0 -3.1 -3.5 -3.9 -4.0 -4.1 -4.5 -4.9 0.0 -0.0))
;-----

With "Debuging" Disabled:
'(3.0 3.0 3.0 3.0 4.0 4.0 4.0 4.0 -3.0 -3.0 -3.0 -3.0 -4.0 -4.0 -4.0 -4.0 0.0 -0
.0)
'(3.0 3.0 4.0 4.0 4.0 4.0 4.0 5.0 -3.0 -3.0 -4.0 -4.0 -4.0 -4.0 -4.0 -5.0 0.0 -0
.0)
'(3 3 3 4 4 4 4 5 -3 -3 -4 -4 -4 -4 -4 -5 0 0)
'(3 3 3 4 4 4 4 5 -3 -3 -4 -4 -4 -4 -4 -5 0 0)

With "Debuging" Enabled:
'(3.0 3.0 3.0 3.0 4.0 4.0 4.0 4.0 -3.0 -3.0 -3.0 -3.0 -4.0 -4.0 -4.0 -4.0 0.0 -0.0)
'(3.0 3.0 4.0 4.0 4.0 4.0 4.0 5.0 -3.0 -3.0 -4.0 -4.0 -4.0 -4.0 -4.0 -5.0 0.0 -0.0)
'(3 3 3 3 4 4 4 4 -3 -3 -3 -3 -4 -4 -4 -4 0 0)
'(3 3 4 4 4 4 4 5 -3 -3 -4 -4 -4 -4 -4 -5 0 0)
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Gustavo Massaccesi <gustavo@oma.org.ar>
To: Bugs Racket <bugs@racket-lang.org>,
        Bug Notification Racket <bug-notification@racket-lang.org>
Cc: 
Subject: Re: [racket-bug] all/14962: JIT-Inlining of unsafe-fl->fx
Date: Wed, 4 Feb 2015 13:10:35 -0300

 Another strange example, with a shorter versión of the previous program:
 
 #lang racket
 (require racket/flonum)
 (require racket/unsafe/ops)
 (define (ev4.9 f)
   (f (unsafe-fl+ 4.9 (unsafe-fx->fl (random 1)))))
 
 (collect-garbage)
 (for/last ([i (in-range 100)])
   (ev4.9 unsafe-fl->fx))
 (for/last ([i (in-range 100)])
   (ev4.9 (lambda (x) (unsafe-fl->fx  x))))
 ;---
 
 With this program I get 4 and 5 but if I comment (collect-garbage) I
 get 5 and 5.
 
 Gustavo
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Gustavo Massaccesi <gustavo@oma.org.ar>
Cc: Bugs Racket <bugs@racket-lang.org>,
        Bug Notification Racket <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14962: JIT-Inlining of unsafe-fl->fx
Date: Wed, 4 Feb 2015 17:26:37 +0100

 I think we probably agree that none of the examples represent a bug. If
 you break the contracts of an unsafe operation, the result can be
 entertaining or confusing, but anything is allowed.
 
 On the performance question, it's often the case that JIT does a better
 job with
 
  (lambda (x) (OP x))
 
 than
 
  OP
 
 for any primitive `OP` in a non-application position.
 
 In the former case, there will be some overhead when the function is
 called, but it will likely be from JIT-generated code to JIT-generated
 code, and so the path is relatively smooth. In the latter case, the
 call to `OP` will go through a slower path.
 
 It may be that replacing the latter form with the former is a good any
 for any JIT-inlinable operation, but I've never tried to measure the
 overall cost and benefit of that transformation.
 
 
 At Wed, 4 Feb 2015 13:10:35 -0300, Gustavo Massaccesi wrote:
 > Another strange example, with a shorter versión of the previous program:
 > 
 > #lang racket
 > (require racket/flonum)
 > (require racket/unsafe/ops)
 > (define (ev4.9 f)
 >   (f (unsafe-fl+ 4.9 (unsafe-fx->fl (random 1)))))
 > 
 > (collect-garbage)
 > (for/last ([i (in-range 100)])
 >   (ev4.9 unsafe-fl->fx))
 > (for/last ([i (in-range 100)])
 >   (ev4.9 (lambda (x) (unsafe-fl->fx  x))))
 > ;---
 > 
 > With this program I get 4 and 5 but if I comment (collect-garbage) I
 > get 5 and 5.
 > 
 > Gustavo
 
