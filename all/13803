From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri May 31 14:59:10 2013
Received: from mail-ob0-f176.google.com (mail-ob0-f176.google.com [209.85.214.176])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r4VIx6rA025972
	for <bugs@bugs.plt-scheme.org>; Fri, 31 May 2013 14:59:06 -0400
Message-Id: <201305311859.r4VIx4la025966@champlain.ccs.neu.edu>
Date: Fri, 31 May 2013 14:59:04 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: TR: memory-leaking, apparent infinite loop when checking higher-order mutually recursive functions

>Number:         13803
>Category:       all
>Synopsis:       TR: memory-leaking, apparent infinite loop when checking higher-order mutually recursive functions
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri May 31 15:00:01 -0400 2013
>Closed-Date:    Fri May 31 15:14:42 -0400 2013
>Last-Modified:  Fri May 31 15:16:01 -0400 2013
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4.5--2013-04-25(b5b13222/d)
>Environment:
unix "Linux schroder 3.2.0-44-generic #69-Ubuntu SMP Thu May 16 17:35:01 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 1855664752
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.4.5):
 [none]



Collections:
("/home/neil/.racket/5.3.4.5/collects"
 (non-existent-path))
("/home/neil/plt/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "planet2" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "realm" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "l!
 ang" "raco" "gui-debugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred" "pkg"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Typechecking the program in reproduction steps causes TR to apparently enter an infinite loop, which quickly eats up all system memory.

Commenting out the line that defines `zeros' allows it to finish.

Manually substituting `const-tree-children' and `const-tree' in their respective lexical scopes allows it to finish.
>How-To-Repeat:
#lang typed/racket/base

(require racket/promise)

(struct: (V) Tree-Node ([value : V] [children : (Tree-Children V)]) #:transparent)
(struct: (V) Tree-Children ([fst : (Tree V)] [snd : (Tree V)]) #:transparent)
(define-type (Tree V) (Promise (Tree-Node V)))

(: make-const-tree (All (V) (V -> (-> (Tree V)))))
(define (make-const-tree v)
  (define const-tree-children (make-const-tree-children v))
  (lambda () (delay (Tree-Node v (const-tree-children)))))

(: make-const-tree-children (All (V) (V -> (-> (Tree-Children V)))))
(define (make-const-tree-children v)
  (define const-tree (make-const-tree v))
  (lambda () (Tree-Children (const-tree) (const-tree))))

(define zeros ((inst make-const-tree Flonum) 0.0))
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by ntoronto at Fri, 31 May 2013 15:14:42 -0400
Reason>>> not a bug

From: Neil Toronto <neil.toronto@gmail.com>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13803: TR: memory-leaking, apparent infinite
 loop when checking higher-order mutually recursive functions
Date: Fri, 31 May 2013 13:13:57 -0600

 Oh, PLEASE never mind. This is my own infinite loop. What a brain fart. 
 I'll close it.
 
 On 05/31/2013 01:00 PM, neil.toronto@gmail.com wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=13803
 >
 > Reported by Neil Toronto for release: 5.3.4.5--2013-04-25(b5b13222/d)
 >
 > *** Description:
 > Typechecking the program in reproduction steps causes TR to apparently enter an infinite loop, which quickly eats up all system memory.
 >
 > Commenting out the line that defines `zeros' allows it to finish.
 >
 > Manually substituting `const-tree-children' and `const-tree' in their respective lexical scopes allows it to finish.
 >
 > *** How to repeat:
 > #lang typed/racket/base
 >
 > (require racket/promise)
 >
 > (struct: (V) Tree-Node ([value : V] [children : (Tree-Children V)]) #:transparent)
 > (struct: (V) Tree-Children ([fst : (Tree V)] [snd : (Tree V)]) #:transparent)
 > (define-type (Tree V) (Promise (Tree-Node V)))
 >
 > (: make-const-tree (All (V) (V -> (-> (Tree V)))))
 > (define (make-const-tree v)
 >    (define const-tree-children (make-const-tree-children v))
 >    (lambda () (delay (Tree-Node v (const-tree-children)))))
 >
 > (: make-const-tree-children (All (V) (V -> (-> (Tree-Children V)))))
 > (define (make-const-tree-children v)
 >    (define const-tree (make-const-tree v))
 >    (lambda () (Tree-Children (const-tree) (const-tree))))
 >
 > (define zeros ((inst make-const-tree Flonum) 0.0))
 >
 > *** Environment:
 > unix "Linux schroder 3.2.0-44-generic #69-Ubuntu SMP Thu May 16 17:35:01 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 1855664752
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > raco pkg (show):
 > Installation-wide:
 >   [none]
 > User-specific, all-version:
 >   [none]
 > User-specific, version-specific (5.3.4.5):
 >   [none]
 >
 >
 >
 > Collections:
 > ("/home/neil/.racket/5.3.4.5/collects"
 >   (non-existent-path))
 > ("/home/neil/plt/collects"
 >   ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "planet2" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "realm" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "l!
 >   ang" "raco" "gui-debugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred" "pkg"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
