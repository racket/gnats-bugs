From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jan 15 11:49:08 2014
Received: from mail-ob0-f178.google.com (mail-ob0-f178.google.com [209.85.214.178])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s0FGn61r021026
	for <bugs@bugs.plt-scheme.org>; Wed, 15 Jan 2014 11:49:06 -0500
Message-Id: <201401151649.s0FGn2sQ021004@winooski.ccs.neu.edu>
Date: Wed, 15 Jan 2014 11:49:02 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: opt/c should not make slower contracts than before

>Number:         14292
>Category:       all
>Synopsis:       opt/c should not make slower contracts than before
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jan 15 11:52:01 -0500 2014
>Last-Modified:  Wed Jan 15 12:44:01 -0500 2014
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
>Description:
I want to unconditionally use opt/c (in generated code), but it makes some simple contracts slower. I could see it misoptimizing an already specifically optimized contract, but it slows down very simple contracts.
>How-To-Repeat:
#lang racket


(module m racket
  (provide
    (contract-out
      [foo (opt/c (boolean? . -> . boolean?))]
      [bar (boolean? . -> . boolean?)]))
  (define (foo x) (not x))
  (define (bar x) (not x)))


(require 'm)

(define (rand-bool)
  (< (random) 0.5))

(define N 100000)
(for ((j 5))
  (collect-garbage)
  (collect-garbage)
  (collect-garbage)
  (time
    (for ((i (in-range N)))
      (foo (rand-bool))))
  (collect-garbage)
  (collect-garbage)
  (collect-garbage)
  (time
    (for ((i (in-range N)))
      (bar (rand-bool)))))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14292: opt/c should not make slower contracts
 than before
Date: Wed, 15 Jan 2014 11:40:33 -0600

 --089e0118470255df0304f005ce2f
 Content-Type: text/plain; charset=UTF-8
 
 This is the same basic problem as your previous PR: opt/c is not yet fully
 taking advantage of the new setup (specifically, provide/contract doesn't
 recognize it and do the special thing).
 
 Robby
 
 
 
 On Wed, Jan 15, 2014 at 10:52 AM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14292
 >
 > Reported by Eric Dobson for release: HEAD
 >
 > *** Description:
 > I want to unconditionally use opt/c (in generated code), but it makes some
 > simple contracts slower. I could see it misoptimizing an already
 > specifically optimized contract, but it slows down very simple contracts.
 >
 > *** How to repeat:
 > #lang racket
 >
 >
 > (module m racket
 >   (provide
 >     (contract-out
 >       [foo (opt/c (boolean? . -> . boolean?))]
 >       [bar (boolean? . -> . boolean?)]))
 >   (define (foo x) (not x))
 >   (define (bar x) (not x)))
 >
 >
 > (require 'm)
 >
 > (define (rand-bool)
 >   (< (random) 0.5))
 >
 > (define N 100000)
 > (for ((j 5))
 >   (collect-garbage)
 >   (collect-garbage)
 >   (collect-garbage)
 >   (time
 >     (for ((i (in-range N)))
 >       (foo (rand-bool))))
 >   (collect-garbage)
 >   (collect-garbage)
 >   (collect-garbage)
 >   (time
 >     (for ((i (in-range N)))
 >       (bar (rand-bool)))))
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5)
 > AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
 >
 >
 
 --089e0118470255df0304f005ce2f
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">This is the same basic problem as your previous PR: opt/c =
 is not yet fully taking advantage of the new setup (specifically, provide/c=
 ontract doesn&#39;t recognize it and do the special thing).<div><br></div>
 <div>Robby</div><div><br></div></div><div class=3D"gmail_extra"><br><br><di=
 v class=3D"gmail_quote">On Wed, Jan 15, 2014 at 10:52 AM,  <span dir=3D"ltr=
 ">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.d=
 obson@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 292" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14292</a><br>
 <br>
 Reported by Eric Dobson for release: HEAD<br>
 <br>
 *** Description:<br>
 I want to unconditionally use opt/c (in generated code), but it makes some =
 simple contracts slower. I could see it misoptimizing an already specifical=
 ly optimized contract, but it slows down very simple contracts.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 <br>
 (module m racket<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0 (contract-out<br>
 =C2=A0 =C2=A0 =C2=A0 [foo (opt/c (boolean? . -&gt; . boolean?))]<br>
 =C2=A0 =C2=A0 =C2=A0 [bar (boolean? . -&gt; . boolean?)]))<br>
 =C2=A0 (define (foo x) (not x))<br>
 =C2=A0 (define (bar x) (not x)))<br>
 <br>
 <br>
 (require &#39;m)<br>
 <br>
 (define (rand-bool)<br>
 =C2=A0 (&lt; (random) 0.5))<br>
 <br>
 (define N 100000)<br>
 (for ((j 5))<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (time<br>
 =C2=A0 =C2=A0 (for ((i (in-range N)))<br>
 =C2=A0 =C2=A0 =C2=A0 (foo (rand-bool))))<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (time<br>
 =C2=A0 =C2=A0 (for ((i (in-range N)))<br>
 =C2=A0 =C2=A0 =C2=A0 (bar (rand-bool)))))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.3=
 6 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36<br>
 <br>
 </blockquote></div><br></div>
 
 --089e0118470255df0304f005ce2f--
