From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Apr 19 17:39:51 2014
Received: from mail-ob0-f170.google.com (mail-ob0-f170.google.com [209.85.214.170])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s3JLdkmC005424
	for <bugs@bugs.plt-scheme.org>; Sat, 19 Apr 2014 17:39:46 -0400
Message-Id: <201404192139.s3JLdih3005417@winooski.ccs.neu.edu>
Date: Sat, 19 Apr 2014 17:39:44 -0400
From: alexander@knauth.org
To: bugs@racket-lang.org
Subject: wrong type for hash

>Number:         14455
>Category:       all
>Synopsis:       wrong type for hash
>Class:          not-a-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Apr 19 17:40:01 -0400 2014
>Closed-Date:    Tue Apr 29 14:51:26 -0400 2014
>Last-Modified:  Thu May 08 22:24:01 -0400 2014
>Originator:     Alex Knauth
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0
>Environment:
macosx "Darwin Alexander-D-Knauths-Computer-2.local 13.1.0 Darwin Kernel Version 13.1.0: Thu Jan 16 19:40:37 PST 2014; root:xnu-2422.90.20~2/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 442206516
Links: (links) = ("drracket-solarized" "first-class-methods" "def-multi"); (links #:user? #f) = ("syntax" "contract-profile" "ds-store" "sgl" "racklog" "trace" "mrlib" "mysterx" "slatex" "icons" "shell-completion" "games" "make" "plai" "eopl" "lazy" "preprocessor" "algol60" "datalog" "mzcom" "swindle" "unstable" "schemeunit" "frtime" "realm" "profile"); (links #:root? #t) = (#<path:/Users/Alex/Library/Racket/6.0/pkgs/memoize> #<path:/Users/Alex/Library/Racket/6.0/pkgs/hash-lambda>); (links #:user? #f #:root? #t) = (#<path:/Applications/Racket v6.0/share/pkgs/racket-lib> #<path:/Applications/Racket v6.0/share/pkgs/main-distribution> #<path:/Applications/Racket v6.0/share/pkgs/at-exp-lib> #<path:/Applications/Racket v6.0/share/pkgs/compatibility> #<path:/Applications/Racket v6.0/share/pkgs/compiler> #<path:/Applications/Racket v6.0/share/pkgs/data> #<path:/Applications/Racket v6.0/share/pkgs/db> #<path:/Applications/Racket v6.0/share/pkgs/deinprogramm> #<path:/Applications/Rac!
 ket v6.0/share/pkgs/draw> #<path:/Applications/Racket v6.0/share/pkgs/draw-doc> #<path:/Applications/Racket v6.0/share/pkgs/draw-lib> #<path:/Applications/Racket v6.0/share/pkgs/drracket> #<path:/Applications/Racket v6.0/share/pkgs/errortrace> #<path:/Applications/Racket v6.0/share/pkgs/future-visualizer> #<path:/Applications/Racket v6.0/share/pkgs/future-visualizer-typed> #<path:/Applications/Racket v6.0/share/pkgs/gui> #<path:/Applications/Racket v6.0/share/pkgs/htdp> #<path:/Applications/Racket v6.0/share/pkgs/html> #<path:/Applications/Racket v6.0/share/pkgs/images> #<path:/Applications/Racket v6.0/share/pkgs/macro-debugger> #<path:/Applications/Racket v6.0/share/pkgs/macro-debugger-text-lib> #<path:/Applications/Racket v6.0/share/pkgs/math> #<path:/Applications/Racket v6.0/share/pkgs/mzscheme> #<path:/Applications/Racket v6.0/share/pkgs/net> #<path:/Applications/Racket v6.0/share/pkgs/parser-tools> #<path:/Applications/Racket v6.0/share/pkgs/pconvert-lib> #<path:/Appli!
 cations/Racket v6.0/share/pkgs/pict> #<path:/Applications/Rack!
 et v6.0/share/pkgs/picturing-programs> #<path:/Applications/Racket v6.0/share/pkgs/planet> #<path:/Applications/Racket v6.0/share/pkgs/plot> #<path:/Applications/Racket v6.0/share/pkgs/profile> #<path:/Applications/Racket v6.0/share/pkgs/r5rs> #<path:/Applications/Racket v6.0/share/pkgs/r6rs> #<path:/Applications/Racket v6.0/share/pkgs/racket-doc> #<path:/Applications/Racket v6.0/share/pkgs/distributed-places> #<path:/Applications/Racket v6.0/share/pkgs/racket-index> #<path:/Applications/Racket v6.0/share/pkgs/rackunit> #<path:/Applications/Racket v6.0/share/pkgs/readline> #<path:/Applications/Racket v6.0/share/pkgs/redex> #<path:/Applications/Racket v6.0/share/pkgs/sandbox-lib> #<path:/Applications/Racket v6.0/share/pkgs/scribble> #<path:/Applications/Racket v6.0/share/pkgs/serialize-cstruct-lib> #<path:/Applications/Racket v6.0/share/pkgs/slideshow> #<path:/Applications/Racket v6.0/share/pkgs/snip> #<path:/Applications/Racket v6.0/share/pkgs/srfi> #<path:/Applications/Rac!
 ket v6.0/share/pkgs/string-constants> #<path:/Applications/Racket v6.0/share/pkgs/syntax-color> #<path:/Applications/Racket v6.0/share/pkgs/typed-racket> #<path:/Applications/Racket v6.0/share/pkgs/typed-racket-more> #<path:/Applications/Racket v6.0/share/pkgs/unstable> #<path:/Applications/Racket v6.0/share/pkgs/unstable-contract-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-latent-contract-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-list-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-options-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-parameter-group-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-2d> #<path:/Applications/Racket v6.0/share/pkgs/web-server> #<path:/Applications/Racket v6.0/share/pkgs/wxme> #<path:/Applications/Racket v6.0/share/pkgs/xrepl> #<path:/Applications/Racket v6.0/share/pkgs/base> #<path:/Applications/Racket v6.0/share/pkgs/compatibility-lib> #<path:/Applications/Racket v6.0/share/pkgs/dr!
 racket-plugin-lib> #<path:/Applications/Racket v6.0/share/pkgs/errortra!
 ce-lib> #<path:/Applications/Racket v6.0/share/pkgs/gui-lib> #<path:/Applications/Racket v6.0/share/pkgs/parser-tools-lib> #<path:/Applications/Racket v6.0/share/pkgs/string-constants-lib> #<path:/Applications/Racket v6.0/share/pkgs/rackunit-lib> #<path:/Applications/Racket v6.0/share/pkgs/scribble-doc> #<path:/Applications/Racket v6.0/share/pkgs/scribble-lib> #<path:/Applications/Racket v6.0/share/pkgs/scheme-lib> #<path:/Applications/Racket v6.0/share/pkgs/compatibility-doc> #<path:/Applications/Racket v6.0/share/pkgs/math-lib> #<path:/Applications/Racket v6.0/share/pkgs/compiler-lib> #<path:/Applications/Racket v6.0/share/pkgs/data-lib> #<path:/Applications/Racket v6.0/share/pkgs/data-doc> #<path:/Applications/Racket v6.0/share/pkgs/db-lib> #<path:/Applications/Racket v6.0/share/pkgs/db-doc> #<path:/Applications/Racket v6.0/share/pkgs/srfi-lib> #<path:/Applications/Racket v6.0/share/pkgs/wxme-lib> #<path:/Applications/Racket v6.0/share/pkgs/gui-doc> #<path:/Applications/!
 Racket v6.0/share/pkgs/pict-doc> #<path:/Applications/Racket v6.0/share/pkgs/pict-lib> #<path:/Applications/Racket v6.0/share/pkgs/draw-i386-macosx> #<path:/Applications/Racket v6.0/share/pkgs/planet-lib> #<path:/Applications/Racket v6.0/share/pkgs/snip-lib> #<path:/Applications/Racket v6.0/share/pkgs/typed-racket-lib> #<path:/Applications/Racket v6.0/share/pkgs/html-lib> #<path:/Applications/Racket v6.0/share/pkgs/images-lib> #<path:/Applications/Racket v6.0/share/pkgs/net-lib> #<path:/Applications/Racket v6.0/share/pkgs/srfi-doc> #<path:/Applications/Racket v6.0/share/pkgs/gui-pkg-manager-lib> #<path:/Applications/Racket v6.0/share/pkgs/mzscheme-doc> #<path:/Applications/Racket v6.0/share/pkgs/net-doc> #<path:/Applications/Racket v6.0/share/pkgs/planet-doc> #<path:/Applications/Racket v6.0/share/pkgs/string-constants-doc> #<path:/Applications/Racket v6.0/share/pkgs/errortrace-doc> #<path:/Applications/Racket v6.0/share/pkgs/profile-doc> #<path:/Applications/Racket v6.0/sh!
 are/pkgs/r5rs-doc> #<path:/Applications/Racket v6.0/share/pkgs/srfi-lit!
 e-lib> #<path:/Applications/Racket v6.0/share/pkgs/htdp-lib> #<path:/Applications/Racket v6.0/share/pkgs/htdp-doc> #<path:/Applications/Racket v6.0/share/pkgs/html-doc> #<path:/Applications/Racket v6.0/share/pkgs/images-gui-lib> #<path:/Applications/Racket v6.0/share/pkgs/images-doc> #<path:/Applications/Racket v6.0/share/pkgs/eli-tester> #<path:/Applications/Racket v6.0/share/pkgs/cext-lib> #<path:/Applications/Racket v6.0/share/pkgs/math-doc> #<path:/Applications/Racket v6.0/share/pkgs/mzscheme-lib> #<path:/Applications/Racket v6.0/share/pkgs/parser-tools-doc> #<path:/Applications/Racket v6.0/share/pkgs/web-server-lib> #<path:/Applications/Racket v6.0/share/pkgs/web-server-doc> #<path:/Applications/Racket v6.0/share/pkgs/plot-lib> #<path:/Applications/Racket v6.0/share/pkgs/plot-gui-lib> #<path:/Applications/Racket v6.0/share/pkgs/plot-doc> #<path:/Applications/Racket v6.0/share/pkgs/r5rs-lib> #<path:/Applications/Racket v6.0/share/pkgs/r6rs-lib> #<path:/Applications/Rack!
 et v6.0/share/pkgs/r6rs-doc> #<path:/Applications/Racket v6.0/share/pkgs/rackunit-doc> #<path:/Applications/Racket v6.0/share/pkgs/typed-racket-doc> #<path:/Applications/Racket v6.0/share/pkgs/slideshow-doc> #<path:/Applications/Racket v6.0/share/pkgs/distributed-places-lib> #<path:/Applications/Racket v6.0/share/pkgs/distributed-places-doc> #<path:/Applications/Racket v6.0/share/pkgs/rackunit-gui> #<path:/Applications/Racket v6.0/share/pkgs/rackunit-plugin-lib> #<path:/Applications/Racket v6.0/share/pkgs/readline-lib> #<path:/Applications/Racket v6.0/share/pkgs/readline-doc> #<path:/Applications/Racket v6.0/share/pkgs/redex-doc> #<path:/Applications/Racket v6.0/share/pkgs/redex-examples> #<path:/Applications/Racket v6.0/share/pkgs/redex-lib> #<path:/Applications/Racket v6.0/share/pkgs/redex-gui-lib> #<path:/Applications/Racket v6.0/share/pkgs/slideshow-lib> #<path:/Applications/Racket v6.0/share/pkgs/slideshow-exe> #<path:/Applications/Racket v6.0/share/pkgs/slideshow-plug!
 in> #<path:/Applications/Racket v6.0/share/pkgs/syntax-color-lib> #<pat!
 h:/Applications/Racket v6.0/share/pkgs/syntax-color-doc> #<path:/Applications/Racket v6.0/share/pkgs/unstable-flonum-lib> #<path:/Applications/Racket v6.0/share/pkgs/xrepl-lib> #<path:/Applications/Racket v6.0/share/pkgs/xrepl-doc> #<path:/Applications/Racket v6.0/share/pkgs/gui-i386-macosx> #<path:/Applications/Racket v6.0/share/pkgs/scribble-text-lib> #<path:/Applications/Racket v6.0/share/pkgs/math-i386-macosx> #<path:/Applications/Racket v6.0/share/pkgs/unstable-macro-testing-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-debug-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-pretty-lib> #<path:/Applications/Racket v6.0/share/pkgs/plot-compat> #<path:/Applications/Racket v6.0/share/pkgs/redex-pict-lib>)
raco pkg (show):
Installation-wide:
 Package              Checksum                                    Source
 main-distribution    3374a1a5514fd2924a0ede8bdb8598643edefb18    (catalog main-distribution)
 racket-lib           a252902ba8a8cf43065608682933909fca0fb87d    (catalog racket-lib)
 [175 auto-installed packages not shown]
User-specific for installation "6.0":
 Package                Checksum                                    Source
 def-multi              a039bb42e2c4266fdb30d9b3a82be8116f7db026    (url git://github.com/uselpa/def-multi)
 drracket-solarized     3c7ac56e3bde4f52653c08ad1058188f9bc10184    (catalog drracket-solarized)
 first-class-methods    #f                                          (link ../../../../Documents/DrRacket/stuff/first-class-methods pkg/first-class-methods)
 hash-lambda            921b71fc344c79c5505f3d72f151d86429fb3db3    (catalog hash-lambda)
 memoize                69a4d4cc133de81409991442bf90576d9867bff4    (catalog memoize)



Collections:
("/Users/Alex/Library/Racket/6.0/collects"
 (non-existent-path))
("/Applications/Racket v6.0/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang at-exp racket\n" #f #t ((main) (test)) #t))
>Description:
the type for hash appears to be (All (a b) (-> (HashTable a b))), so it's not letting me supply it with arguments, saying that it expects 0 arguments
>How-To-Repeat:
#lang typed/racket
(hash 0 0)
>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: alexander@knauth.org, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14455: wrong type for hash
Date: Sat, 19 Apr 2014 14:44:29 -0700

 The type for hash is conservative. TR currently cannot express the
 alternating requirement that hash requires.
 
 On Sat, Apr 19, 2014 at 2:40 PM,  <alexander@knauth.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14455
 >
 > Reported by Alex Knauth for release: 6.0
 >
 > *** Description:
 > the type for hash appears to be (All (a b) (-> (HashTable a b))), so it's not letting me supply it with arguments, saying that it expects 0 arguments
 >
 > *** How to repeat:
 > #lang typed/racket
 > (hash 0 0)
 >
 > *** Environment:
 > macosx "Darwin Alexander-D-Knauths-Computer-2.local 13.1.0 Darwin Kernel Version 13.1.0: Thu Jan 16 19:40:37 PST 2014; root:xnu-2422.90.20~2/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 442206516
 > Links: (links) = ("drracket-solarized" "first-class-methods" "def-multi"); (links #:user? #f) = ("syntax" "contract-profile" "ds-store" "sgl" "racklog" "trace" "mrlib" "mysterx" "slatex" "icons" "shell-completion" "games" "make" "plai" "eopl" "lazy" "preprocessor" "algol60" "datalog" "mzcom" "swindle" "unstable" "schemeunit" "frtime" "realm" "profile"); (links #:root? #t) = (#<path:/Users/Alex/Library/Racket/6.0/pkgs/memoize> #<path:/Users/Alex/Library/Racket/6.0/pkgs/hash-lambda>); (links #:user? #f #:root? #t) = (#<path:/Applications/Racket v6.0/share/pkgs/racket-lib> #<path:/Applications/Racket v6.0/share/pkgs/main-distribution> #<path:/Applications/Racket v6.0/share/pkgs/at-exp-lib> #<path:/Applications/Racket v6.0/share/pkgs/compatibility> #<path:/Applications/Racket v6.0/share/pkgs/compiler> #<path:/Applications/Racket v6.0/share/pkgs/data> #<path:/Applications/Racket v6.0/share/pkgs/db> #<path:/Applications/Racket v6.0/share/pkgs/deinprogramm> #<path:/Applications/Rac!
 >  ket v6.0/share/pkgs/draw> #<path:/Applications/Racket v6.0/share/pkgs/draw-doc> #<path:/Applications/Racket v6.0/share/pkgs/draw-lib> #<path:/Applications/Racket v6.0/share/pkgs/drracket> #<path:/Applications/Racket v6.0/share/pkgs/errortrace> #<path:/Applications/Racket v6.0/share/pkgs/future-visualizer> #<path:/Applications/Racket v6.0/share/pkgs/future-visualizer-typed> #<path:/Applications/Racket v6.0/share/pkgs/gui> #<path:/Applications/Racket v6.0/share/pkgs/htdp> #<path:/Applications/Racket v6.0/share/pkgs/html> #<path:/Applications/Racket v6.0/share/pkgs/images> #<path:/Applications/Racket v6.0/share/pkgs/macro-debugger> #<path:/Applications/Racket v6.0/share/pkgs/macro-debugger-text-lib> #<path:/Applications/Racket v6.0/share/pkgs/math> #<path:/Applications/Racket v6.0/share/pkgs/mzscheme> #<path:/Applications/Racket v6.0/share/pkgs/net> #<path:/Applications/Racket v6.0/share/pkgs/parser-tools> #<path:/Applications/Racket v6.0/share/pkgs/pconvert-lib> #<path:/Appli!
 >  cations/Racket v6.0/share/pkgs/pict> #<path:/Applications/Rack!
 >  et v6.0/share/pkgs/picturing-programs> #<path:/Applications/Racket v6.0/share/pkgs/planet> #<path:/Applications/Racket v6.0/share/pkgs/plot> #<path:/Applications/Racket v6.0/share/pkgs/profile> #<path:/Applications/Racket v6.0/share/pkgs/r5rs> #<path:/Applications/Racket v6.0/share/pkgs/r6rs> #<path:/Applications/Racket v6.0/share/pkgs/racket-doc> #<path:/Applications/Racket v6.0/share/pkgs/distributed-places> #<path:/Applications/Racket v6.0/share/pkgs/racket-index> #<path:/Applications/Racket v6.0/share/pkgs/rackunit> #<path:/Applications/Racket v6.0/share/pkgs/readline> #<path:/Applications/Racket v6.0/share/pkgs/redex> #<path:/Applications/Racket v6.0/share/pkgs/sandbox-lib> #<path:/Applications/Racket v6.0/share/pkgs/scribble> #<path:/Applications/Racket v6.0/share/pkgs/serialize-cstruct-lib> #<path:/Applications/Racket v6.0/share/pkgs/slideshow> #<path:/Applications/Racket v6.0/share/pkgs/snip> #<path:/Applications/Racket v6.0/share/pkgs/srfi> #<path:/Applications/Rac!
 >  ket v6.0/share/pkgs/string-constants> #<path:/Applications/Racket v6.0/share/pkgs/syntax-color> #<path:/Applications/Racket v6.0/share/pkgs/typed-racket> #<path:/Applications/Racket v6.0/share/pkgs/typed-racket-more> #<path:/Applications/Racket v6.0/share/pkgs/unstable> #<path:/Applications/Racket v6.0/share/pkgs/unstable-contract-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-latent-contract-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-list-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-options-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-parameter-group-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-2d> #<path:/Applications/Racket v6.0/share/pkgs/web-server> #<path:/Applications/Racket v6.0/share/pkgs/wxme> #<path:/Applications/Racket v6.0/share/pkgs/xrepl> #<path:/Applications/Racket v6.0/share/pkgs/base> #<path:/Applications/Racket v6.0/share/pkgs/compatibility-lib> #<path:/Applications/Racket v6.0/share/pkgs/dr!
 >  racket-plugin-lib> #<path:/Applications/Racket v6.0/share/pkgs/errortra!
 >  ce-lib> #<path:/Applications/Racket v6.0/share/pkgs/gui-lib> #<path:/Applications/Racket v6.0/share/pkgs/parser-tools-lib> #<path:/Applications/Racket v6.0/share/pkgs/string-constants-lib> #<path:/Applications/Racket v6.0/share/pkgs/rackunit-lib> #<path:/Applications/Racket v6.0/share/pkgs/scribble-doc> #<path:/Applications/Racket v6.0/share/pkgs/scribble-lib> #<path:/Applications/Racket v6.0/share/pkgs/scheme-lib> #<path:/Applications/Racket v6.0/share/pkgs/compatibility-doc> #<path:/Applications/Racket v6.0/share/pkgs/math-lib> #<path:/Applications/Racket v6.0/share/pkgs/compiler-lib> #<path:/Applications/Racket v6.0/share/pkgs/data-lib> #<path:/Applications/Racket v6.0/share/pkgs/data-doc> #<path:/Applications/Racket v6.0/share/pkgs/db-lib> #<path:/Applications/Racket v6.0/share/pkgs/db-doc> #<path:/Applications/Racket v6.0/share/pkgs/srfi-lib> #<path:/Applications/Racket v6.0/share/pkgs/wxme-lib> #<path:/Applications/Racket v6.0/share/pkgs/gui-doc> #<path:/Applications/!
 >  Racket v6.0/share/pkgs/pict-doc> #<path:/Applications/Racket v6.0/share/pkgs/pict-lib> #<path:/Applications/Racket v6.0/share/pkgs/draw-i386-macosx> #<path:/Applications/Racket v6.0/share/pkgs/planet-lib> #<path:/Applications/Racket v6.0/share/pkgs/snip-lib> #<path:/Applications/Racket v6.0/share/pkgs/typed-racket-lib> #<path:/Applications/Racket v6.0/share/pkgs/html-lib> #<path:/Applications/Racket v6.0/share/pkgs/images-lib> #<path:/Applications/Racket v6.0/share/pkgs/net-lib> #<path:/Applications/Racket v6.0/share/pkgs/srfi-doc> #<path:/Applications/Racket v6.0/share/pkgs/gui-pkg-manager-lib> #<path:/Applications/Racket v6.0/share/pkgs/mzscheme-doc> #<path:/Applications/Racket v6.0/share/pkgs/net-doc> #<path:/Applications/Racket v6.0/share/pkgs/planet-doc> #<path:/Applications/Racket v6.0/share/pkgs/string-constants-doc> #<path:/Applications/Racket v6.0/share/pkgs/errortrace-doc> #<path:/Applications/Racket v6.0/share/pkgs/profile-doc> #<path:/Applications/Racket v6.0/sh!
 >  are/pkgs/r5rs-doc> #<path:/Applications/Racket v6.0/share/pkgs/srfi-lit!
 >  e-lib> #<path:/Applications/Racket v6.0/share/pkgs/htdp-lib> #<path:/Applications/Racket v6.0/share/pkgs/htdp-doc> #<path:/Applications/Racket v6.0/share/pkgs/html-doc> #<path:/Applications/Racket v6.0/share/pkgs/images-gui-lib> #<path:/Applications/Racket v6.0/share/pkgs/images-doc> #<path:/Applications/Racket v6.0/share/pkgs/eli-tester> #<path:/Applications/Racket v6.0/share/pkgs/cext-lib> #<path:/Applications/Racket v6.0/share/pkgs/math-doc> #<path:/Applications/Racket v6.0/share/pkgs/mzscheme-lib> #<path:/Applications/Racket v6.0/share/pkgs/parser-tools-doc> #<path:/Applications/Racket v6.0/share/pkgs/web-server-lib> #<path:/Applications/Racket v6.0/share/pkgs/web-server-doc> #<path:/Applications/Racket v6.0/share/pkgs/plot-lib> #<path:/Applications/Racket v6.0/share/pkgs/plot-gui-lib> #<path:/Applications/Racket v6.0/share/pkgs/plot-doc> #<path:/Applications/Racket v6.0/share/pkgs/r5rs-lib> #<path:/Applications/Racket v6.0/share/pkgs/r6rs-lib> #<path:/Applications/Rack!
 >  et v6.0/share/pkgs/r6rs-doc> #<path:/Applications/Racket v6.0/share/pkgs/rackunit-doc> #<path:/Applications/Racket v6.0/share/pkgs/typed-racket-doc> #<path:/Applications/Racket v6.0/share/pkgs/slideshow-doc> #<path:/Applications/Racket v6.0/share/pkgs/distributed-places-lib> #<path:/Applications/Racket v6.0/share/pkgs/distributed-places-doc> #<path:/Applications/Racket v6.0/share/pkgs/rackunit-gui> #<path:/Applications/Racket v6.0/share/pkgs/rackunit-plugin-lib> #<path:/Applications/Racket v6.0/share/pkgs/readline-lib> #<path:/Applications/Racket v6.0/share/pkgs/readline-doc> #<path:/Applications/Racket v6.0/share/pkgs/redex-doc> #<path:/Applications/Racket v6.0/share/pkgs/redex-examples> #<path:/Applications/Racket v6.0/share/pkgs/redex-lib> #<path:/Applications/Racket v6.0/share/pkgs/redex-gui-lib> #<path:/Applications/Racket v6.0/share/pkgs/slideshow-lib> #<path:/Applications/Racket v6.0/share/pkgs/slideshow-exe> #<path:/Applications/Racket v6.0/share/pkgs/slideshow-plug!
 >  in> #<path:/Applications/Racket v6.0/share/pkgs/syntax-color-lib> #<pat!
 >  h:/Applications/Racket v6.0/share/pkgs/syntax-color-doc> #<path:/Applications/Racket v6.0/share/pkgs/unstable-flonum-lib> #<path:/Applications/Racket v6.0/share/pkgs/xrepl-lib> #<path:/Applications/Racket v6.0/share/pkgs/xrepl-doc> #<path:/Applications/Racket v6.0/share/pkgs/gui-i386-macosx> #<path:/Applications/Racket v6.0/share/pkgs/scribble-text-lib> #<path:/Applications/Racket v6.0/share/pkgs/math-i386-macosx> #<path:/Applications/Racket v6.0/share/pkgs/unstable-macro-testing-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-debug-lib> #<path:/Applications/Racket v6.0/share/pkgs/unstable-pretty-lib> #<path:/Applications/Racket v6.0/share/pkgs/plot-compat> #<path:/Applications/Racket v6.0/share/pkgs/redex-pict-lib>)
 > raco pkg (show):
 > Installation-wide:
 >  Package              Checksum                                    Source
 >  main-distribution    3374a1a5514fd2924a0ede8bdb8598643edefb18    (catalog main-distribution)
 >  racket-lib           a252902ba8a8cf43065608682933909fca0fb87d    (catalog racket-lib)
 >  [175 auto-installed packages not shown]
 > User-specific for installation "6.0":
 >  Package                Checksum                                    Source
 >  def-multi              a039bb42e2c4266fdb30d9b3a82be8116f7db026    (url git://github.com/uselpa/def-multi)
 >  drracket-solarized     3c7ac56e3bde4f52653c08ad1058188f9bc10184    (catalog drracket-solarized)
 >  first-class-methods    #f                                          (link ../../../../Documents/DrRacket/stuff/first-class-methods pkg/first-class-methods)
 >  hash-lambda            921b71fc344c79c5505f3d72f151d86429fb3db3    (catalog hash-lambda)
 >  memoize                69a4d4cc133de81409991442bf90576d9867bff4    (catalog memoize)
 >
 >
 >
 > Collections:
 > ("/Users/Alex/Library/Racket/6.0/collects"
 >  (non-existent-path))
 > ("/Applications/Racket v6.0/collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 >
 > Recent Internal Errors:
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang at-exp racket\n" #f #t ((main) (test)) #t))
 >
 
From: "Alexander D. Knauth" <alexander@knauth.org>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14455: wrong type for hash
Date: Sat, 19 Apr 2014 18:05:45 -0400

 So does that mean I just can�t use hash in typed racket, or should the type be changed to a less specific type, like (Any * -> (HashTable Any Any)).  Or maybe (All (a) (a * -> (HashTable a a))), or maybe something like this:
 (All (a b)
  (case->
   (-> (HashTable a b))
   (a b -> (HashTable a b))
   (a b a b -> (HashTable a b))
   (a b a b a b -> (HashTable a b))
   (a b a b a b a b -> (HashTable a b))
   (a b a b a b a b (U a b) * -> (HashTable a b))
   ))
 
 On Apr 19, 2014, at 5:44 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > The type for hash is conservative. TR currently cannot express the
 > alternating requirement that hash requires.
 > 
 > On Sat, Apr 19, 2014 at 2:40 PM,  <alexander@knauth.org> wrote:
 >> *** Description:
 >> the type for hash appears to be (All (a b) (-> (HashTable a b))), so it's not letting me supply it with arguments, saying that it expects 0 arguments
 >> 
 >> *** How to repeat:
 >> #lang typed/racket
 >> (hash 0 0)
 >> 
 >> 
 
 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: "Alexander D. Knauth" <alexander@knauth.org>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14455: wrong type for hash
Date: Sat, 19 Apr 2014 18:12:38 -0400

 On Sat, Apr 19, 2014 at 6:05 PM, Alexander D. Knauth
 <alexander@knauth.org> wrote:
 > So does that mean I just can’t use hash in typed racket,
 
 You can use `hash` to create hash tables, they're just empty.  You can
 then fill them in the usual way.
 
 > or should the type be changed to a less specific type, like (Any * -> (HashTable Any Any)).  Or maybe (All (a) (a * -> (HashTable a a))),
 
 These types are not particularly useful, unfortunately.
 
 > or maybe something like this:
 > (All (a b)
 >  (case->
 >   (-> (HashTable a b))
 >   (a b -> (HashTable a b))
 >   (a b a b -> (HashTable a b))
 >   (a b a b a b -> (HashTable a b))
 >   (a b a b a b a b -> (HashTable a b))
 >   (a b a b a b a b (U a b) * -> (HashTable a b))
 >   ))
 
 This type is more useful if you omit the last case -- the last case is
 unsound. But, as you can probably imagine, not having a varargs case
 makes the type confusing nonetheless.
 
 Sam
 
 
 > On Apr 19, 2014, at 5:44 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> The type for hash is conservative. TR currently cannot express the
 >> alternating requirement that hash requires.
 >>
 >> On Sat, Apr 19, 2014 at 2:40 PM,  <alexander@knauth.org> wrote:
 >>> *** Description:
 >>> the type for hash appears to be (All (a b) (-> (HashTable a b))), so it's not letting me supply it with arguments, saying that it expects 0 arguments
 >>>
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>> (hash 0 0)
 >>>
 >>>
 >
 

Class changed from "sw-bug" to "not-a-bug" by asumu at Tue, 29 Apr 2014 14:51:26 -0400
Reason>>> Duplicate of PR 14110

State changed from "open" to "closed" by asumu at Tue, 29 Apr 2014 14:51:26 -0400
Reason>>> Duplicate

From: Asumu Takikawa <asumu@ccs.neu.edu>
To: alexander@knauth.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14455: wrong type for hash
Date: Tue, 29 Apr 2014 14:50:44 -0400

 On 2014-04-19 17:40:02 -0400, alexander@knauth.org wrote:
 > *** Description:
 > the type for hash appears to be (All (a b) (-> (HashTable a b))), so
 > it's not letting me supply it with arguments, saying that it expects 0
 > arguments
 >
 > *** How to repeat:
 > #lang typed/racket
 > (hash 0 0)
 
 BTW, this is a duplicate of PR 14110[1] so I'm going to close it. Please
 post any followups to the other PR or the dev thread.
 
 [1]: http://bugs.racket-lang.org/query/?cmd=view&audit-trail&database=default&pr=14110
 
 Thanks,
 Asumu
From: "Alexander D. Knauth" <alexander@knauth.org>
To: bugs <bugs@racket-lang.org>, "Alexander D. Knauth" <alexander@knauth.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: 
Subject: Re: all/14455: wrong type for hash
Date: Wed, 7 May 2014 21:29:37 -0400

 --Apple-Mail=_17076CF5-D821-40D0-836D-6F0620BD9489
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=windows-1252
 
 For a minute I thought this might work:
 #lang typed/racket
 (require/typed typed/racket
                [hash
                 (All (a b)
                      ([] #:rest (Rec Lst (U Null (List* a b Lst)))
                          . ->* . (HashTable a b)))])
 But it gives me this error:
 . Type Checker: Type (All (a b) (-> (Rec Lst (U Null (Pairof a (Pairof b =
 Lst)))) * (HashTable a b))) could not be converted to a contract: =
 required a flat contract but generated an impersonator contract in: (All =
 (a b) (->* () #:rest (Rec Lst (U Null (List* a b Lst))) (HashTable a =
 b)))
 
 But that=92s not the real problem.
 
 The real problem is that it looks like it doesn=92t behave like the ->* =
 contract constructor after all. =20
 With ->* for contracts, you can say something like this:
 ([] #:rest (flat-rec-contract lst (or/c empty? (cons/c a (cons/c b =
 lst))))
     . ->* . (hash/c a b))
 But in typed racket, why doesn=92t it mean the same thing?  In typed =
 racket, it seems to mean this:
 ((Rec Lst (U Null (Pairof a (Pairof b Lst)))) * . -> . (HashTable a b)))
 
 Why Is the typed racket ->* behaving differently from the contract =
 version? =20
 
 
 --Apple-Mail=_17076CF5-D821-40D0-836D-6F0620BD9489
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=windows-1252
 
 <html><head><meta http-equiv=3D"Content-Type" content=3D"text/html =
 charset=3Dwindows-1252"></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;">For a =
 minute I thought this might work:<div><div><font face=3D"Courier =
 New">#lang typed/racket</font></div><div><font face=3D"Courier =
 New">(require/typed typed/racket</font></div><div><font face=3D"Courier =
 New">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 &nbsp;[hash</font></div><div><font face=3D"Courier New">&nbsp; &nbsp; =
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (All (a =
 b)</font></div><div><font face=3D"Courier New">&nbsp; &nbsp; &nbsp; =
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;([] #:rest (Rec =
 Lst (U Null (List* a b Lst)))</font></div><div><font face=3D"Courier =
 New">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 &nbsp; &nbsp; &nbsp; &nbsp;. -&gt;* . (HashTable a =
 b)))])</font></div></div><div>But it gives me this =
 error:</div><div><font face=3D"Courier New">. Type Checker: Type (All (a =
 b) (-&gt; (Rec Lst (U Null (Pairof a (Pairof b Lst)))) * (HashTable a =
 b))) could not be converted to a contract: required a flat contract but =
 generated an impersonator contract in: (All (a b) (-&gt;* () #:rest (Rec =
 Lst (U Null (List* a b Lst))) (HashTable a =
 b)))</font></div><div><br></div><div>But that=92s not the real =
 problem.</div><div><br></div><div>The real problem is that it looks like =
 it doesn=92t behave like the -&gt;* contract constructor after all. =
 &nbsp;</div><div>With -&gt;* for contracts, you can say something like =
 this:</div><div><div><font face=3D"Courier New">([] #:rest =
 (flat-rec-contract lst (or/c empty? (cons/c a (cons/c b =
 lst))))</font></div><div><font face=3D"Courier New">&nbsp; &nbsp; . =
 -&gt;* . (hash/c a b))</font></div></div><div>But in typed racket, why =
 doesn=92t it mean the same thing? &nbsp;In typed racket, it seems to =
 mean this:</div><div><span style=3D"font-family: 'Courier New';">((Rec =
 Lst (U Null (Pairof a (Pairof b Lst)))) * . -&gt; . (HashTable a =
 b)))</span></div><div><br></div><div>Why Is the typed racket -&gt;* =
 behaving differently from the contract version? =
 &nbsp;</div><div><br></div></body></html>=
 
 --Apple-Mail=_17076CF5-D821-40D0-836D-6F0620BD9489--
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: "Alexander D. Knauth" <alexander@knauth.org>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Subject: Re: all/14455: wrong type for hash
Date: Thu, 8 May 2014 22:23:27 -0400

 On 2014-05-07 21:29:37 -0400, Alexander D. Knauth wrote:
 >    With ->* for contracts, you can say something like this:
 >
 >    But in typed racket, why doesn't it mean the same thing?  In typed racket,
 >    it seems to mean this:
 >
 >    Why Is the typed racket ->* behaving differently from the contract
 >    version?
 
 We had to make a choice here between making -> and ->* consistent and
 making ->* from TR and contracts consistent with regard to rest args.
 
 Since there's no ideal backwards compatible option that's consistent in
 all cases, we went with making the type constructors consistent with
 each other.
 
 Cheers,
 Asumu
