From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Mar 16 16:54:53 2013
Received: from mail-ob0-f181.google.com (mail-ob0-f181.google.com [209.85.214.181])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2GKsoYD000688
	for <bugs@bugs.plt-scheme.org>; Sat, 16 Mar 2013 16:54:50 -0400
Message-Id: <201303162054.r2GKsms5000681@champlain.ccs.neu.edu>
Date: Sat, 16 Mar 2013 16:54:48 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: define-judgment-form bad error message

>Number:         13611
>Category:       all
>Synopsis:       define-judgment-form bad error message
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Mar 16 16:56:01 -0400 2013
>Last-Modified:  Sun Mar 17 09:08:01 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
The error refers to both positions but only gives the location of one. Also it gives the location which should be the canonical location, the other one should be the that is considered incorrect.

/Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected the same name in both positions
  at: well-formed-type
  in: (define-judgment-form TR #:mode (well-formed-type I I) #:contract (well-formed-type gamma t) (---------------------------------- "base" (well-formed-typeZZZ gamma base-type)) (---------------------------------- "base2" (well-formed-typeZZZ gamma base-ty...
  context...:
   /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:637:4: loop
   /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:522:0: parse-judgment-form-body
   /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:490:0: do-extended-judgment-form
   /Users/endobson/proj/racket/plt/collects/racket/private/modbeg.rkt:46:4
   standard-module-name-resolver 
>How-To-Repeat:
#lang racket

(require redex/reduction-semantics)

(define-language TR
  (gamma ::= (x ...))
  (s t ::=
     base-type
     (Pair t t)
     (All (x ...) t)
     (AllDots (x y ...) t)
     (Rec (x) t))
  (base-type ::= Int String)
  (x y z ::= variable-not-otherwise-mentioned))

(define-judgment-form TR
  #:mode (well-formed-type I I)
  #:contract (well-formed-type gamma t)
  (---------------------------------- "base"
   (well-formed-typeZZZ gamma base-type))
  (---------------------------------- "base2"
   (well-formed-typeZZZ gamma base-type)))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13611: define-judgment-form bad error message
Date: Sat, 16 Mar 2013 21:31:38 -0500

 --e89a8ff2510a04bde404d815ac15
 Content-Type: text/plain; charset=UTF-8
 
 I think this is a comment about raise-syntax-error or possibly the default
 error-display-handler, not about define-judgment-form.
 
 FWIW, two source locations are present in the error message, as you can see
 in DrRacket: Run highlights two places and online check syntax will let you
 jump between the two places with command-. (on the mac).
 
 Robby
 
 
 On Sat, Mar 16, 2013 at 3:56 PM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13611
 >
 > Reported by Eric Dobson for release: 5.3.2.3
 >
 > *** Description:
 > The error refers to both positions but only gives the location of one.
 > Also it gives the location which should be the canonical location, the
 > other one should be the that is considered incorrect.
 >
 > /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected the same
 > name in both positions
 >   at: well-formed-type
 >   in: (define-judgment-form TR #:mode (well-formed-type I I) #:contract
 > (well-formed-type gamma t) (---------------------------------- "base"
 > (well-formed-typeZZZ gamma base-type)) (----------------------------------
 > "base2" (well-formed-typeZZZ gamma base-ty...
 >   context...:
 >
 >  /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:637:4:
 > loop
 >
 >  /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:522:0:
 > parse-judgment-form-body
 >
 >  /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:490:0:
 > do-extended-judgment-form
 >    /Users/endobson/proj/racket/plt/collects/racket/private/modbeg.rkt:46:4
 >    standard-module-name-resolver
 >
 > *** How to repeat:
 > #lang racket
 >
 > (require redex/reduction-semantics)
 >
 > (define-language TR
 >   (gamma ::= (x ...))
 >   (s t ::=
 >      base-type
 >      (Pair t t)
 >      (All (x ...) t)
 >      (AllDots (x y ...) t)
 >      (Rec (x) t))
 >   (base-type ::= Int String)
 >   (x y z ::= variable-not-otherwise-mentioned))
 >
 > (define-judgment-form TR
 >   #:mode (well-formed-type I I)
 >   #:contract (well-formed-type gamma t)
 >   (---------------------------------- "base"
 >    (well-formed-typeZZZ gamma base-type))
 >   (---------------------------------- "base2"
 >    (well-formed-typeZZZ gamma base-type)))
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >
 >
 
 --e89a8ff2510a04bde404d815ac15
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I think this is a comment about raise-syntax-error or poss=
 ibly the default error-display-handler, not about define-judgment-form.<div=
 ><br></div><div style>FWIW, two source locations are present in the error m=
 essage, as you can see in DrRacket: Run highlights two places and online ch=
 eck syntax will let you jump between the two places with command-. (on the =
 mac).</div>
 <div style><br>Robby</div></div><div class=3D"gmail_extra"><br><br><div cla=
 ss=3D"gmail_quote">On Sat, Mar 16, 2013 at 3:56 PM,  <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@=
 gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 611" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13611</a><br>
 <br>
 Reported by Eric Dobson for release: 5.3.2.3<br>
 <br>
 *** Description:<br>
 The error refers to both positions but only gives the location of one. Also=
  it gives the location which should be the canonical location, the other on=
 e should be the that is considered incorrect.<br>
 <br>
 /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected the same =
 name in both positions<br>
 =C2=A0 at: well-formed-type<br>
 =C2=A0 in: (define-judgment-form TR #:mode (well-formed-type I I) #:contrac=
 t (well-formed-type gamma t) (---------------------------------- &quot;base=
 &quot; (well-formed-typeZZZ gamma base-type)) (----------------------------=
 ------ &quot;base2&quot; (well-formed-typeZZZ gamma base-ty...<br>
 
 =C2=A0 context...:<br>
 =C2=A0 =C2=A0/Users/endobson/proj/racket/plt/collects/redex/private/judgmen=
 t-form.rkt:637:4: loop<br>
 =C2=A0 =C2=A0/Users/endobson/proj/racket/plt/collects/redex/private/judgmen=
 t-form.rkt:522:0: parse-judgment-form-body<br>
 =C2=A0 =C2=A0/Users/endobson/proj/racket/plt/collects/redex/private/judgmen=
 t-form.rkt:490:0: do-extended-judgment-form<br>
 =C2=A0 =C2=A0/Users/endobson/proj/racket/plt/collects/racket/private/modbeg=
 .rkt:46:4<br>
 =C2=A0 =C2=A0standard-module-name-resolver<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require redex/reduction-semantics)<br>
 <br>
 (define-language TR<br>
 =C2=A0 (gamma ::=3D (x ...))<br>
 =C2=A0 (s t ::=3D<br>
 =C2=A0 =C2=A0 =C2=A0base-type<br>
 =C2=A0 =C2=A0 =C2=A0(Pair t t)<br>
 =C2=A0 =C2=A0 =C2=A0(All (x ...) t)<br>
 =C2=A0 =C2=A0 =C2=A0(AllDots (x y ...) t)<br>
 =C2=A0 =C2=A0 =C2=A0(Rec (x) t))<br>
 =C2=A0 (base-type ::=3D Int String)<br>
 =C2=A0 (x y z ::=3D variable-not-otherwise-mentioned))<br>
 <br>
 (define-judgment-form TR<br>
 =C2=A0 #:mode (well-formed-type I I)<br>
 =C2=A0 #:contract (well-formed-type gamma t)<br>
 =C2=A0 (---------------------------------- &quot;base&quot;<br>
 =C2=A0 =C2=A0(well-formed-typeZZZ gamma base-type))<br>
 =C2=A0 (---------------------------------- &quot;base2&quot;<br>
 =C2=A0 =C2=A0(well-formed-typeZZZ gamma base-type)))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.2=
 8 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28<br>
 <br>
 </blockquote></div><br></div>
 
 --e89a8ff2510a04bde404d815ac15--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13611: define-judgment-form bad error message
Date: Sat, 16 Mar 2013 19:36:14 -0700

 I agree that this is showing a problem in the default
 error-display-handler, I get a much better UX in drracket.
 
 On Sat, Mar 16, 2013 at 7:31 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I think this is a comment about raise-syntax-error or possibly the default
 > error-display-handler, not about define-judgment-form.
 >
 > FWIW, two source locations are present in the error message, as you can see
 > in DrRacket: Run highlights two places and online check syntax will let you
 > jump between the two places with command-. (on the mac).
 >
 > Robby
 >
 >
 > On Sat, Mar 16, 2013 at 3:56 PM, <eric.n.dobson@gmail.com> wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13611
 >>
 >> Reported by Eric Dobson for release: 5.3.2.3
 >>
 >> *** Description:
 >> The error refers to both positions but only gives the location of one.
 >> Also it gives the location which should be the canonical location, the other
 >> one should be the that is considered incorrect.
 >>
 >> /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected the same
 >> name in both positions
 >>   at: well-formed-type
 >>   in: (define-judgment-form TR #:mode (well-formed-type I I) #:contract
 >> (well-formed-type gamma t) (---------------------------------- "base"
 >> (well-formed-typeZZZ gamma base-type)) (----------------------------------
 >> "base2" (well-formed-typeZZZ gamma base-ty...
 >>   context...:
 >>
 >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:637:4:
 >> loop
 >>
 >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:522:0:
 >> parse-judgment-form-body
 >>
 >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:490:0:
 >> do-extended-judgment-form
 >>    /Users/endobson/proj/racket/plt/collects/racket/private/modbeg.rkt:46:4
 >>    standard-module-name-resolver
 >>
 >> *** How to repeat:
 >> #lang racket
 >>
 >> (require redex/reduction-semantics)
 >>
 >> (define-language TR
 >>   (gamma ::= (x ...))
 >>   (s t ::=
 >>      base-type
 >>      (Pair t t)
 >>      (All (x ...) t)
 >>      (AllDots (x y ...) t)
 >>      (Rec (x) t))
 >>   (base-type ::= Int String)
 >>   (x y z ::= variable-not-otherwise-mentioned))
 >>
 >> (define-judgment-form TR
 >>   #:mode (well-formed-type I I)
 >>   #:contract (well-formed-type gamma t)
 >>   (---------------------------------- "base"
 >>    (well-formed-typeZZZ gamma base-type))
 >>   (---------------------------------- "base2"
 >>    (well-formed-typeZZZ gamma base-type)))
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >>
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13611: define-judgment-form bad error message
Date: Sat, 16 Mar 2013 22:10:56 -0500

 --e89a8f5036fc931c5704d8163819
 Content-Type: text/plain; charset=UTF-8
 
 Well, I suppose it could be a problem with the way that redex calls
 raise-syntax-error. Here's a small example showing how it does that, in
 case someone wants to speak up in defense of raise-syntax-error, etc.
 
 #lang racket
 (define-syntax (m stx)
   (syntax-case stx ()
     [(_ a b)
      (raise-syntax-error 'n "i raise errors" stx #'a (list #'b))]))
 
 (m 1 2)
 
 
 
 On Sat, Mar 16, 2013 at 9:36 PM, Eric Dobson <eric.n.dobson@gmail.com>wrote:
 
 > I agree that this is showing a problem in the default
 > error-display-handler, I get a much better UX in drracket.
 >
 > On Sat, Mar 16, 2013 at 7:31 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > I think this is a comment about raise-syntax-error or possibly the
 > default
 > > error-display-handler, not about define-judgment-form.
 > >
 > > FWIW, two source locations are present in the error message, as you can
 > see
 > > in DrRacket: Run highlights two places and online check syntax will let
 > you
 > > jump between the two places with command-. (on the mac).
 > >
 > > Robby
 > >
 > >
 > > On Sat, Mar 16, 2013 at 3:56 PM, <eric.n.dobson@gmail.com> wrote:
 > >>
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13611
 > >>
 > >> Reported by Eric Dobson for release: 5.3.2.3
 > >>
 > >> *** Description:
 > >> The error refers to both positions but only gives the location of one.
 > >> Also it gives the location which should be the canonical location, the
 > other
 > >> one should be the that is considered incorrect.
 > >>
 > >> /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected the
 > same
 > >> name in both positions
 > >>   at: well-formed-type
 > >>   in: (define-judgment-form TR #:mode (well-formed-type I I) #:contract
 > >> (well-formed-type gamma t) (---------------------------------- "base"
 > >> (well-formed-typeZZZ gamma base-type))
 > (----------------------------------
 > >> "base2" (well-formed-typeZZZ gamma base-ty...
 > >>   context...:
 > >>
 > >>
 > /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:637:4:
 > >> loop
 > >>
 > >>
 > /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:522:0:
 > >> parse-judgment-form-body
 > >>
 > >>
 > /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:490:0:
 > >> do-extended-judgment-form
 > >>
 >  /Users/endobson/proj/racket/plt/collects/racket/private/modbeg.rkt:46:4
 > >>    standard-module-name-resolver
 > >>
 > >> *** How to repeat:
 > >> #lang racket
 > >>
 > >> (require redex/reduction-semantics)
 > >>
 > >> (define-language TR
 > >>   (gamma ::= (x ...))
 > >>   (s t ::=
 > >>      base-type
 > >>      (Pair t t)
 > >>      (All (x ...) t)
 > >>      (AllDots (x y ...) t)
 > >>      (Rec (x) t))
 > >>   (base-type ::= Int String)
 > >>   (x y z ::= variable-not-otherwise-mentioned))
 > >>
 > >> (define-judgment-form TR
 > >>   #:mode (well-formed-type I I)
 > >>   #:contract (well-formed-type gamma t)
 > >>   (---------------------------------- "base"
 > >>    (well-formed-typeZZZ gamma base-type))
 > >>   (---------------------------------- "base2"
 > >>    (well-formed-typeZZZ gamma base-type)))
 > >>
 > >> *** Environment:
 > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > >>
 > >
 >
 
 --e89a8f5036fc931c5704d8163819
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Well, I suppose it could be a problem with the way that re=
 dex calls raise-syntax-error. Here&#39;s a small example showing how it doe=
 s that, in case someone wants to speak up in defense of raise-syntax-error,=
  etc.<div>
 <br></div><div><div>#lang racket</div><div>(define-syntax (m stx)</div><div=
 >=C2=A0 (syntax-case stx ()</div><div>=C2=A0 =C2=A0 [(_ a b)</div><div>=C2=
 =A0 =C2=A0 =C2=A0(raise-syntax-error &#39;n &quot;i raise errors&quot; stx =
 #&#39;a (list #&#39;b))]))</div>
 <div><br></div><div>(m 1 2)</div></div><div><br></div></div><div class=3D"g=
 mail_extra"><br><br><div class=3D"gmail_quote">On Sat, Mar 16, 2013 at 9:36=
  PM, Eric Dobson <span dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmai=
 l.com" target=3D"_blank">eric.n.dobson@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I agree that this is showing a problem in th=
 e default<br>
 error-display-handler, I get a much better UX in drracket.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Sat, Mar 16, 2013 at 7:31 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt; I think this is a comment about raise-syntax-error or possibly the def=
 ault<br>
 &gt; error-display-handler, not about define-judgment-form.<br>
 &gt;<br>
 &gt; FWIW, two source locations are present in the error message, as you ca=
 n see<br>
 &gt; in DrRacket: Run highlights two places and online check syntax will le=
 t you<br>
 &gt; jump between the two places with command-. (on the mac).<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Sat, Mar 16, 2013 at 3:56 PM, &lt;<a href=3D"mailto:eric.n.dobson@g=
 mail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&am=
 p;pr=3D13611" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D13611</a><br>
 &gt;&gt;<br>
 &gt;&gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt;&gt;<br>
 &gt;&gt; *** Description:<br>
 &gt;&gt; The error refers to both positions but only gives the location of =
 one.<br>
 &gt;&gt; Also it gives the location which should be the canonical location,=
  the other<br>
 &gt;&gt; one should be the that is considered incorrect.<br>
 &gt;&gt;<br>
 &gt;&gt; /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected =
 the same<br>
 &gt;&gt; name in both positions<br>
 &gt;&gt; =C2=A0 at: well-formed-type<br>
 &gt;&gt; =C2=A0 in: (define-judgment-form TR #:mode (well-formed-type I I) =
 #:contract<br>
 &gt;&gt; (well-formed-type gamma t) (---------------------------------- &qu=
 ot;base&quot;<br>
 &gt;&gt; (well-formed-typeZZZ gamma base-type)) (--------------------------=
 --------<br>
 &gt;&gt; &quot;base2&quot; (well-formed-typeZZZ gamma base-ty...<br>
 &gt;&gt; =C2=A0 context...:<br>
 &gt;&gt;<br>
 &gt;&gt; /Users/endobson/proj/racket/plt/collects/redex/private/judgment-fo=
 rm.rkt:637:4:<br>
 &gt;&gt; loop<br>
 &gt;&gt;<br>
 &gt;&gt; /Users/endobson/proj/racket/plt/collects/redex/private/judgment-fo=
 rm.rkt:522:0:<br>
 &gt;&gt; parse-judgment-form-body<br>
 &gt;&gt;<br>
 &gt;&gt; /Users/endobson/proj/racket/plt/collects/redex/private/judgment-fo=
 rm.rkt:490:0:<br>
 &gt;&gt; do-extended-judgment-form<br>
 &gt;&gt; =C2=A0 =C2=A0/Users/endobson/proj/racket/plt/collects/racket/priva=
 te/modbeg.rkt:46:4<br>
 &gt;&gt; =C2=A0 =C2=A0standard-module-name-resolver<br>
 &gt;&gt;<br>
 &gt;&gt; *** How to repeat:<br>
 &gt;&gt; #lang racket<br>
 &gt;&gt;<br>
 &gt;&gt; (require redex/reduction-semantics)<br>
 &gt;&gt;<br>
 &gt;&gt; (define-language TR<br>
 &gt;&gt; =C2=A0 (gamma ::=3D (x ...))<br>
 &gt;&gt; =C2=A0 (s t ::=3D<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0base-type<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0(Pair t t)<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0(All (x ...) t)<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0(AllDots (x y ...) t)<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0(Rec (x) t))<br>
 &gt;&gt; =C2=A0 (base-type ::=3D Int String)<br>
 &gt;&gt; =C2=A0 (x y z ::=3D variable-not-otherwise-mentioned))<br>
 &gt;&gt;<br>
 &gt;&gt; (define-judgment-form TR<br>
 &gt;&gt; =C2=A0 #:mode (well-formed-type I I)<br>
 &gt;&gt; =C2=A0 #:contract (well-formed-type gamma t)<br>
 &gt;&gt; =C2=A0 (---------------------------------- &quot;base&quot;<br>
 &gt;&gt; =C2=A0 =C2=A0(well-formed-typeZZZ gamma base-type))<br>
 &gt;&gt; =C2=A0 (---------------------------------- &quot;base2&quot;<br>
 &gt;&gt; =C2=A0 =C2=A0(well-formed-typeZZZ gamma base-type)))<br>
 &gt;&gt;<br>
 &gt;&gt; *** Environment:<br>
 &gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)<br>
 &gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/5=
 37.28<br>
 &gt;&gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --e89a8f5036fc931c5704d8163819--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13611: define-judgment-form bad error message
Date: Sun, 17 Mar 2013 08:17:38 -0400

 I just tried basically all the combinations of calls to
 `raise-syntax-error` in that macro, and I couldn't improve on what you
 have there.  So I don't think it's a problem in redex.
 
 On Sat, Mar 16, 2013 at 11:10 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Well, I suppose it could be a problem with the way that redex calls
 > raise-syntax-error. Here's a small example showing how it does that, in case
 > someone wants to speak up in defense of raise-syntax-error, etc.
 >
 > #lang racket
 > (define-syntax (m stx)
 >   (syntax-case stx ()
 >     [(_ a b)
 >      (raise-syntax-error 'n "i raise errors" stx #'a (list #'b))]))
 >
 > (m 1 2)
 >
 >
 >
 > On Sat, Mar 16, 2013 at 9:36 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 >>
 >> I agree that this is showing a problem in the default
 >> error-display-handler, I get a much better UX in drracket.
 >>
 >> On Sat, Mar 16, 2013 at 7:31 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> > I think this is a comment about raise-syntax-error or possibly the
 >> > default
 >> > error-display-handler, not about define-judgment-form.
 >> >
 >> > FWIW, two source locations are present in the error message, as you can
 >> > see
 >> > in DrRacket: Run highlights two places and online check syntax will let
 >> > you
 >> > jump between the two places with command-. (on the mac).
 >> >
 >> > Robby
 >> >
 >> >
 >> > On Sat, Mar 16, 2013 at 3:56 PM, <eric.n.dobson@gmail.com> wrote:
 >> >>
 >> >> A new problem report is waiting at
 >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13611
 >> >>
 >> >> Reported by Eric Dobson for release: 5.3.2.3
 >> >>
 >> >> *** Description:
 >> >> The error refers to both positions but only gives the location of one.
 >> >> Also it gives the location which should be the canonical location, the
 >> >> other
 >> >> one should be the that is considered incorrect.
 >> >>
 >> >> /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected the
 >> >> same
 >> >> name in both positions
 >> >>   at: well-formed-type
 >> >>   in: (define-judgment-form TR #:mode (well-formed-type I I) #:contract
 >> >> (well-formed-type gamma t) (---------------------------------- "base"
 >> >> (well-formed-typeZZZ gamma base-type))
 >> >> (----------------------------------
 >> >> "base2" (well-formed-typeZZZ gamma base-ty...
 >> >>   context...:
 >> >>
 >> >>
 >> >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:637:4:
 >> >> loop
 >> >>
 >> >>
 >> >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:522:0:
 >> >> parse-judgment-form-body
 >> >>
 >> >>
 >> >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:490:0:
 >> >> do-extended-judgment-form
 >> >>
 >> >> /Users/endobson/proj/racket/plt/collects/racket/private/modbeg.rkt:46:4
 >> >>    standard-module-name-resolver
 >> >>
 >> >> *** How to repeat:
 >> >> #lang racket
 >> >>
 >> >> (require redex/reduction-semantics)
 >> >>
 >> >> (define-language TR
 >> >>   (gamma ::= (x ...))
 >> >>   (s t ::=
 >> >>      base-type
 >> >>      (Pair t t)
 >> >>      (All (x ...) t)
 >> >>      (AllDots (x y ...) t)
 >> >>      (Rec (x) t))
 >> >>   (base-type ::= Int String)
 >> >>   (x y z ::= variable-not-otherwise-mentioned))
 >> >>
 >> >> (define-judgment-form TR
 >> >>   #:mode (well-formed-type I I)
 >> >>   #:contract (well-formed-type gamma t)
 >> >>   (---------------------------------- "base"
 >> >>    (well-formed-typeZZZ gamma base-type))
 >> >>   (---------------------------------- "base2"
 >> >>    (well-formed-typeZZZ gamma base-type)))
 >> >>
 >> >> *** Environment:
 >> >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >> >>
 >> >
 >
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13611: define-judgment-form bad error message
Date: Sun, 17 Mar 2013 08:02:52 -0500

 --f46d0447886d7686a404d81e7d18
 Content-Type: text/plain; charset=UTF-8
 
 (Technically, I think that there may be ways to construct exn:fail:syntax
 exception records that raise-syntax-error doesn't do, but I think you're
 right that something elsewhere has to change.)
 
 Robby
 
 
 On Sun, Mar 17, 2013 at 7:17 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 
 > I just tried basically all the combinations of calls to
 > `raise-syntax-error` in that macro, and I couldn't improve on what you
 > have there.  So I don't think it's a problem in redex.
 >
 > On Sat, Mar 16, 2013 at 11:10 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > Well, I suppose it could be a problem with the way that redex calls
 > > raise-syntax-error. Here's a small example showing how it does that, in
 > case
 > > someone wants to speak up in defense of raise-syntax-error, etc.
 > >
 > > #lang racket
 > > (define-syntax (m stx)
 > >   (syntax-case stx ()
 > >     [(_ a b)
 > >      (raise-syntax-error 'n "i raise errors" stx #'a (list #'b))]))
 > >
 > > (m 1 2)
 > >
 > >
 > >
 > > On Sat, Mar 16, 2013 at 9:36 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > > wrote:
 > >>
 > >> I agree that this is showing a problem in the default
 > >> error-display-handler, I get a much better UX in drracket.
 > >>
 > >> On Sat, Mar 16, 2013 at 7:31 PM, Robby Findler
 > >> <robby@eecs.northwestern.edu> wrote:
 > >> > I think this is a comment about raise-syntax-error or possibly the
 > >> > default
 > >> > error-display-handler, not about define-judgment-form.
 > >> >
 > >> > FWIW, two source locations are present in the error message, as you
 > can
 > >> > see
 > >> > in DrRacket: Run highlights two places and online check syntax will
 > let
 > >> > you
 > >> > jump between the two places with command-. (on the mac).
 > >> >
 > >> > Robby
 > >> >
 > >> >
 > >> > On Sat, Mar 16, 2013 at 3:56 PM, <eric.n.dobson@gmail.com> wrote:
 > >> >>
 > >> >> A new problem report is waiting at
 > >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13611
 > >> >>
 > >> >> Reported by Eric Dobson for release: 5.3.2.3
 > >> >>
 > >> >> *** Description:
 > >> >> The error refers to both positions but only gives the location of
 > one.
 > >> >> Also it gives the location which should be the canonical location,
 > the
 > >> >> other
 > >> >> one should be the that is considered incorrect.
 > >> >>
 > >> >> /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected the
 > >> >> same
 > >> >> name in both positions
 > >> >>   at: well-formed-type
 > >> >>   in: (define-judgment-form TR #:mode (well-formed-type I I)
 > #:contract
 > >> >> (well-formed-type gamma t) (---------------------------------- "base"
 > >> >> (well-formed-typeZZZ gamma base-type))
 > >> >> (----------------------------------
 > >> >> "base2" (well-formed-typeZZZ gamma base-ty...
 > >> >>   context...:
 > >> >>
 > >> >>
 > >> >>
 > /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:637:4:
 > >> >> loop
 > >> >>
 > >> >>
 > >> >>
 > /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:522:0:
 > >> >> parse-judgment-form-body
 > >> >>
 > >> >>
 > >> >>
 > /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:490:0:
 > >> >> do-extended-judgment-form
 > >> >>
 > >> >>
 > /Users/endobson/proj/racket/plt/collects/racket/private/modbeg.rkt:46:4
 > >> >>    standard-module-name-resolver
 > >> >>
 > >> >> *** How to repeat:
 > >> >> #lang racket
 > >> >>
 > >> >> (require redex/reduction-semantics)
 > >> >>
 > >> >> (define-language TR
 > >> >>   (gamma ::= (x ...))
 > >> >>   (s t ::=
 > >> >>      base-type
 > >> >>      (Pair t t)
 > >> >>      (All (x ...) t)
 > >> >>      (AllDots (x y ...) t)
 > >> >>      (Rec (x) t))
 > >> >>   (base-type ::= Int String)
 > >> >>   (x y z ::= variable-not-otherwise-mentioned))
 > >> >>
 > >> >> (define-judgment-form TR
 > >> >>   #:mode (well-formed-type I I)
 > >> >>   #:contract (well-formed-type gamma t)
 > >> >>   (---------------------------------- "base"
 > >> >>    (well-formed-typeZZZ gamma base-type))
 > >> >>   (---------------------------------- "base2"
 > >> >>    (well-formed-typeZZZ gamma base-type)))
 > >> >>
 > >> >> *** Environment:
 > >> >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 > Safari/537.28
 > >> >>
 > >> >
 > >
 > >
 >
 
 --f46d0447886d7686a404d81e7d18
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">(Technically, I think that there may be ways to construct =
 exn:fail:syntax exception records that raise-syntax-error doesn&#39;t do, b=
 ut I think you&#39;re right that something elsewhere has to change.)<div><b=
 r>
 </div><div>Robby</div></div><div class=3D"gmail_extra"><br><br><div class=
 =3D"gmail_quote">On Sun, Mar 17, 2013 at 7:17 AM, Sam Tobin-Hochstadt <span=
  dir=3D"ltr">&lt;<a href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">sam=
 th@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I just tried basically all the combinations =
 of calls to<br>
 `raise-syntax-error` in that macro, and I couldn&#39;t improve on what you<=
 br>
 have there. =C2=A0So I don&#39;t think it&#39;s a problem in redex.<br>
 <br>
 On Sat, Mar 16, 2013 at 11:10 PM, Robby Findler<br>
 <div class=3D"HOEnZb"><div class=3D"h5">&lt;<a href=3D"mailto:robby@eecs.no=
 rthwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt; Well, I suppose it could be a problem with the way that redex calls<br=
 >
 &gt; raise-syntax-error. Here&#39;s a small example showing how it does tha=
 t, in case<br>
 &gt; someone wants to speak up in defense of raise-syntax-error, etc.<br>
 &gt;<br>
 &gt; #lang racket<br>
 &gt; (define-syntax (m stx)<br>
 &gt; =C2=A0 (syntax-case stx ()<br>
 &gt; =C2=A0 =C2=A0 [(_ a b)<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(raise-syntax-error &#39;n &quot;i raise errors&qu=
 ot; stx #&#39;a (list #&#39;b))]))<br>
 &gt;<br>
 &gt; (m 1 2)<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Sat, Mar 16, 2013 at 9:36 PM, Eric Dobson &lt;<a href=3D"mailto:eri=
 c.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; I agree that this is showing a problem in the default<br>
 &gt;&gt; error-display-handler, I get a much better UX in drracket.<br>
 &gt;&gt;<br>
 &gt;&gt; On Sat, Mar 16, 2013 at 7:31 PM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.nort=
 hwestern.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt; I think this is a comment about raise-syntax-error or possibl=
 y the<br>
 &gt;&gt; &gt; default<br>
 &gt;&gt; &gt; error-display-handler, not about define-judgment-form.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; FWIW, two source locations are present in the error message, =
 as you can<br>
 &gt;&gt; &gt; see<br>
 &gt;&gt; &gt; in DrRacket: Run highlights two places and online check synta=
 x will let<br>
 &gt;&gt; &gt; you<br>
 &gt;&gt; &gt; jump between the two places with command-. (on the mac).<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Robby<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Sat, Mar 16, 2013 at 3:56 PM, &lt;<a href=3D"mailto:eric.n=
 .dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D13611" target=3D"_blank">http://bugs.racket-lang.org/query=
 /?cmd=3Dview&amp;pr=3D13611</a><br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Description:<br>
 &gt;&gt; &gt;&gt; The error refers to both positions but only gives the loc=
 ation of one.<br>
 &gt;&gt; &gt;&gt; Also it gives the location which should be the canonical =
 location, the<br>
 &gt;&gt; &gt;&gt; other<br>
 &gt;&gt; &gt;&gt; one should be the that is considered incorrect.<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: =
 expected the<br>
 &gt;&gt; &gt;&gt; same<br>
 &gt;&gt; &gt;&gt; name in both positions<br>
 &gt;&gt; &gt;&gt; =C2=A0 at: well-formed-type<br>
 &gt;&gt; &gt;&gt; =C2=A0 in: (define-judgment-form TR #:mode (well-formed-t=
 ype I I) #:contract<br>
 &gt;&gt; &gt;&gt; (well-formed-type gamma t) (-----------------------------=
 ----- &quot;base&quot;<br>
 &gt;&gt; &gt;&gt; (well-formed-typeZZZ gamma base-type))<br>
 &gt;&gt; &gt;&gt; (----------------------------------<br>
 &gt;&gt; &gt;&gt; &quot;base2&quot; (well-formed-typeZZZ gamma base-ty...<b=
 r>
 &gt;&gt; &gt;&gt; =C2=A0 context...:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; /Users/endobson/proj/racket/plt/collects/redex/private/ju=
 dgment-form.rkt:637:4:<br>
 &gt;&gt; &gt;&gt; loop<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; /Users/endobson/proj/racket/plt/collects/redex/private/ju=
 dgment-form.rkt:522:0:<br>
 &gt;&gt; &gt;&gt; parse-judgment-form-body<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; /Users/endobson/proj/racket/plt/collects/redex/private/ju=
 dgment-form.rkt:490:0:<br>
 &gt;&gt; &gt;&gt; do-extended-judgment-form<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; /Users/endobson/proj/racket/plt/collects/racket/private/m=
 odbeg.rkt:46:4<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0standard-module-name-resolver<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** How to repeat:<br>
 &gt;&gt; &gt;&gt; #lang racket<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (require redex/reduction-semantics)<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (define-language TR<br>
 &gt;&gt; &gt;&gt; =C2=A0 (gamma ::=3D (x ...))<br>
 &gt;&gt; &gt;&gt; =C2=A0 (s t ::=3D<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0base-type<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0(Pair t t)<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0(All (x ...) t)<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0(AllDots (x y ...) t)<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0(Rec (x) t))<br>
 &gt;&gt; &gt;&gt; =C2=A0 (base-type ::=3D Int String)<br>
 &gt;&gt; &gt;&gt; =C2=A0 (x y z ::=3D variable-not-otherwise-mentioned))<br=
 >
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (define-judgment-form TR<br>
 &gt;&gt; &gt;&gt; =C2=A0 #:mode (well-formed-type I I)<br>
 &gt;&gt; &gt;&gt; =C2=A0 #:contract (well-formed-type gamma t)<br>
 &gt;&gt; &gt;&gt; =C2=A0 (---------------------------------- &quot;base&quo=
 t;<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0(well-formed-typeZZZ gamma base-type))<br>
 &gt;&gt; &gt;&gt; =C2=A0 (---------------------------------- &quot;base2&qu=
 ot;<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0(well-formed-typeZZZ gamma base-type)))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Environment:<br>
 &gt;&gt; &gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)=
 <br>
 &gt;&gt; &gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2=
  Safari/537.28<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --f46d0447886d7686a404d81e7d18--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13611: define-judgment-form bad error message
Date: Sun, 17 Mar 2013 09:05:22 -0400

 The documentation suggests that providing #f for both `expr` and
 `sub-expr` allows direct specification of the `exprs` field of
 `exn:fail:syntax`, and that still didn't help.
 
 On Sun, Mar 17, 2013 at 9:02 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > (Technically, I think that there may be ways to construct exn:fail:syntax
 > exception records that raise-syntax-error doesn't do, but I think you're
 > right that something elsewhere has to change.)
 >
 > Robby
 >
 >
 > On Sun, Mar 17, 2013 at 7:17 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>
 > wrote:
 >>
 >> I just tried basically all the combinations of calls to
 >> `raise-syntax-error` in that macro, and I couldn't improve on what you
 >> have there.  So I don't think it's a problem in redex.
 >>
 >> On Sat, Mar 16, 2013 at 11:10 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> > Well, I suppose it could be a problem with the way that redex calls
 >> > raise-syntax-error. Here's a small example showing how it does that, in
 >> > case
 >> > someone wants to speak up in defense of raise-syntax-error, etc.
 >> >
 >> > #lang racket
 >> > (define-syntax (m stx)
 >> >   (syntax-case stx ()
 >> >     [(_ a b)
 >> >      (raise-syntax-error 'n "i raise errors" stx #'a (list #'b))]))
 >> >
 >> > (m 1 2)
 >> >
 >> >
 >> >
 >> > On Sat, Mar 16, 2013 at 9:36 PM, Eric Dobson <eric.n.dobson@gmail.com>
 >> > wrote:
 >> >>
 >> >> I agree that this is showing a problem in the default
 >> >> error-display-handler, I get a much better UX in drracket.
 >> >>
 >> >> On Sat, Mar 16, 2013 at 7:31 PM, Robby Findler
 >> >> <robby@eecs.northwestern.edu> wrote:
 >> >> > I think this is a comment about raise-syntax-error or possibly the
 >> >> > default
 >> >> > error-display-handler, not about define-judgment-form.
 >> >> >
 >> >> > FWIW, two source locations are present in the error message, as you
 >> >> > can
 >> >> > see
 >> >> > in DrRacket: Run highlights two places and online check syntax will
 >> >> > let
 >> >> > you
 >> >> > jump between the two places with command-. (on the mac).
 >> >> >
 >> >> > Robby
 >> >> >
 >> >> >
 >> >> > On Sat, Mar 16, 2013 at 3:56 PM, <eric.n.dobson@gmail.com> wrote:
 >> >> >>
 >> >> >> A new problem report is waiting at
 >> >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13611
 >> >> >>
 >> >> >> Reported by Eric Dobson for release: 5.3.2.3
 >> >> >>
 >> >> >> *** Description:
 >> >> >> The error refers to both positions but only gives the location of
 >> >> >> one.
 >> >> >> Also it gives the location which should be the canonical location,
 >> >> >> the
 >> >> >> other
 >> >> >> one should be the that is considered incorrect.
 >> >> >>
 >> >> >> /Users/endobson/tmp/tmp.rkt:17:10: define-judgment-form: expected
 >> >> >> the
 >> >> >> same
 >> >> >> name in both positions
 >> >> >>   at: well-formed-type
 >> >> >>   in: (define-judgment-form TR #:mode (well-formed-type I I)
 >> >> >> #:contract
 >> >> >> (well-formed-type gamma t) (----------------------------------
 >> >> >> "base"
 >> >> >> (well-formed-typeZZZ gamma base-type))
 >> >> >> (----------------------------------
 >> >> >> "base2" (well-formed-typeZZZ gamma base-ty...
 >> >> >>   context...:
 >> >> >>
 >> >> >>
 >> >> >>
 >> >> >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:637:4:
 >> >> >> loop
 >> >> >>
 >> >> >>
 >> >> >>
 >> >> >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:522:0:
 >> >> >> parse-judgment-form-body
 >> >> >>
 >> >> >>
 >> >> >>
 >> >> >> /Users/endobson/proj/racket/plt/collects/redex/private/judgment-form.rkt:490:0:
 >> >> >> do-extended-judgment-form
 >> >> >>
 >> >> >>
 >> >> >> /Users/endobson/proj/racket/plt/collects/racket/private/modbeg.rkt:46:4
 >> >> >>    standard-module-name-resolver
 >> >> >>
 >> >> >> *** How to repeat:
 >> >> >> #lang racket
 >> >> >>
 >> >> >> (require redex/reduction-semantics)
 >> >> >>
 >> >> >> (define-language TR
 >> >> >>   (gamma ::= (x ...))
 >> >> >>   (s t ::=
 >> >> >>      base-type
 >> >> >>      (Pair t t)
 >> >> >>      (All (x ...) t)
 >> >> >>      (AllDots (x y ...) t)
 >> >> >>      (Rec (x) t))
 >> >> >>   (base-type ::= Int String)
 >> >> >>   (x y z ::= variable-not-otherwise-mentioned))
 >> >> >>
 >> >> >> (define-judgment-form TR
 >> >> >>   #:mode (well-formed-type I I)
 >> >> >>   #:contract (well-formed-type gamma t)
 >> >> >>   (---------------------------------- "base"
 >> >> >>    (well-formed-typeZZZ gamma base-type))
 >> >> >>   (---------------------------------- "base2"
 >> >> >>    (well-formed-typeZZZ gamma base-type)))
 >> >> >>
 >> >> >> *** Environment:
 >> >> >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> >> >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 >> >> >> Safari/537.28
 >> >> >>
 >> >> >
 >> >
 >> >
 >
 >
