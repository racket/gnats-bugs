From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Dec  1 00:22:33 2014
Received: from mail-ig0-f170.google.com (mail-ig0-f170.google.com [209.85.213.170])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id sB15MUkE000866
	for <bugs@bugs.plt-scheme.org>; Mon, 1 Dec 2014 00:22:30 -0500
Message-Id: <201412010522.sB15MRaN000859@winooski.ccs.neu.edu>
Date: Mon, 1 Dec 2014 00:22:27 -0500
From: mark@markelee.com
To: bugs@racket-lang.org
Subject: extflonum returns a different solution to flonum and mixed-integer calculations

>Number:         14862
>Category:       all
>Synopsis:       extflonum returns a different solution to flonum and mixed-integer calculations
>Class:          not-a-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Dec 01 00:24:01 -0500 2014
>Closed-Date:    Mon Dec 01 07:01:00 -0500 2014
>Last-Modified:  Mon Dec 01 07:01:00 -0500 2014
>Originator:     Mark Lee
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.21 (KHTML, like Gecko) konqueror/4.14.2 Safari/537.21
>Description:
When running my fibonacci solver, I find that my extfloat code returns different numbers compared to my flonum code and mixed-integer code.
>How-To-Repeat:
#lang racket

;; written by Mark Lee

;; require some modules
(require racket/flonum)
(require racket/extflonum)

;; requires SSE instructions, solve with long double precision
(define (fibonacci-extfloat extfl)
   (if (extfl<= extfl 2.0t0)
       1.0t0
       (extfl+ (fibonacci-extfloat (extfl- extfl 1.0t0))
               (fibonacci-extfloat (extfl- extfl 2.0t0)))))
               
(define (fibonacci-binet-extfloat extfl)
   (extflround (extfl* (extfl/ 1.0t0 (extflsqrt 5.0t0))
               (extflexpt (extfl/ (extfl+ 1.0t0 (extflsqrt 5.0t0)) 2.0t0) extfl))))

;; solve with double precision
(define (fibonacci-float fl)
   (if (fl<= fl 2.0)
       1.0
       (fl+ (fibonacci-float (fl- fl 1.0))
            (fibonacci-float (fl- fl 2.0)))))
            
(define (fibonacci-binet-float fl)
   (flround (fl* (fl/ 1.0 (flsqrt 5.0))
               (flexpt (fl/ (fl+ 1.0 (flsqrt 5.0)) 2.0) fl))))

;; test to see if long double and double produce the same result
(= (fl->exact-integer (fibonacci-binet-float (->fl 1474)))
   (extfl->exact-integer (fibonacci-binet-extfloat (->extfl 1474))))
>Fix:
>Audit-Trail:
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: mark@markelee.com, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14862: extflonum returns a different solution to
 flonum and mixed-integer calculations
Date: Mon, 1 Dec 2014 06:16:33 -0500

 Isn't this to be expected because extflonums have more precision and
 thus round differently when you do stuff like sqrt, expt, and round?
 
 Jay
 
 On Mon, Dec 1, 2014 at 12:24 AM,  <mark@markelee.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14862
 >
 > Reported by Mark Lee for release: 6.1.1
 >
 > *** Description:
 > When running my fibonacci solver, I find that my extfloat code returns different numbers compared to my flonum code and mixed-integer code.
 >
 > *** How to repeat:
 > #lang racket
 >
 > ;; written by Mark Lee
 >
 > ;; require some modules
 > (require racket/flonum)
 > (require racket/extflonum)
 >
 > ;; requires SSE instructions, solve with long double precision
 > (define (fibonacci-extfloat extfl)
 >    (if (extfl<= extfl 2.0t0)
 >        1.0t0
 >        (extfl+ (fibonacci-extfloat (extfl- extfl 1.0t0))
 >                (fibonacci-extfloat (extfl- extfl 2.0t0)))))
 >
 > (define (fibonacci-binet-extfloat extfl)
 >    (extflround (extfl* (extfl/ 1.0t0 (extflsqrt 5.0t0))
 >                (extflexpt (extfl/ (extfl+ 1.0t0 (extflsqrt 5.0t0)) 2.0t0) extfl))))
 >
 > ;; solve with double precision
 > (define (fibonacci-float fl)
 >    (if (fl<= fl 2.0)
 >        1.0
 >        (fl+ (fibonacci-float (fl- fl 1.0))
 >             (fibonacci-float (fl- fl 2.0)))))
 >
 > (define (fibonacci-binet-float fl)
 >    (flround (fl* (fl/ 1.0 (flsqrt 5.0))
 >                (flexpt (fl/ (fl+ 1.0 (flsqrt 5.0)) 2.0) fl))))
 >
 > ;; test to see if long double and double produce the same result
 > (= (fl->exact-integer (fibonacci-binet-float (->fl 1474)))
 >    (extfl->exact-integer (fibonacci-binet-extfloat (->extfl 1474))))
 >
 > *** Environment:
 > Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.21 (KHTML, like Gecko) konqueror/4.14.2 Safari/537.21
 >
 
 
 
 -- 
 Jay McCarthy
 http://jeapostrophe.github.io
 
            "Wherefore, be not weary in well-doing,
       for ye are laying the foundation of a great work.
 And out of small things proceedeth that which is great."
                           - D&C 64:33
From: Neil Toronto <neil.toronto@gmail.com>
To: Jay McCarthy <jay.mccarthy@gmail.com>, mark@markelee.com,
        bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14862: extflonum returns a different solution
 to flonum and mixed-integer calculations
Date: Mon, 01 Dec 2014 06:58:34 -0500

 Yup. Closing.
 
 Neil âŠ¥
 
 On 12/01/2014 06:16 AM, Jay McCarthy wrote:
 > Isn't this to be expected because extflonums have more precision and
 > thus round differently when you do stuff like sqrt, expt, and round?
 >
 > Jay
 >
 > On Mon, Dec 1, 2014 at 12:24 AM,  <mark@markelee.com> wrote:
 >> A new problem report is waiting at
 >>    http://bugs.racket-lang.org/query/?cmd=view&pr=14862
 >>
 >> Reported by Mark Lee for release: 6.1.1
 >>
 >> *** Description:
 >> When running my fibonacci solver, I find that my extfloat code returns different numbers compared to my flonum code and mixed-integer code.
 >>
 >> *** How to repeat:
 >> #lang racket
 >>
 >> ;; written by Mark Lee
 >>
 >> ;; require some modules
 >> (require racket/flonum)
 >> (require racket/extflonum)
 >>
 >> ;; requires SSE instructions, solve with long double precision
 >> (define (fibonacci-extfloat extfl)
 >>     (if (extfl<= extfl 2.0t0)
 >>         1.0t0
 >>         (extfl+ (fibonacci-extfloat (extfl- extfl 1.0t0))
 >>                 (fibonacci-extfloat (extfl- extfl 2.0t0)))))
 >>
 >> (define (fibonacci-binet-extfloat extfl)
 >>     (extflround (extfl* (extfl/ 1.0t0 (extflsqrt 5.0t0))
 >>                 (extflexpt (extfl/ (extfl+ 1.0t0 (extflsqrt 5.0t0)) 2.0t0) extfl))))
 >>
 >> ;; solve with double precision
 >> (define (fibonacci-float fl)
 >>     (if (fl<= fl 2.0)
 >>         1.0
 >>         (fl+ (fibonacci-float (fl- fl 1.0))
 >>              (fibonacci-float (fl- fl 2.0)))))
 >>
 >> (define (fibonacci-binet-float fl)
 >>     (flround (fl* (fl/ 1.0 (flsqrt 5.0))
 >>                 (flexpt (fl/ (fl+ 1.0 (flsqrt 5.0)) 2.0) fl))))
 >>
 >> ;; test to see if long double and double produce the same result
 >> (= (fl->exact-integer (fibonacci-binet-float (->fl 1474)))
 >>     (extfl->exact-integer (fibonacci-binet-extfloat (->extfl 1474))))
 >>
 >> *** Environment:
 >> Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.21 (KHTML, like Gecko) konqueror/4.14.2 Safari/537.21
 >>
 >
 >
 >
 

Class changed from "sw-bug" to "not-a-bug" by ntoronto at Mon, 01 Dec 2014 07:01:00 -0500
Reason>>> 80-bit floats have more precision.

State changed from "open" to "closed" by ntoronto at Mon, 01 Dec 2014 07:01:00 -0500
Reason>>> Not an error.

