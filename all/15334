From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jul 29 15:28:10 2016
Received: from mail-it0-f54.google.com (mail-it0-f54.google.com [209.85.214.54])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u6TJS7fb017110
	for <bugs@bugs.plt-scheme.org>; Fri, 29 Jul 2016 15:28:07 -0400
Message-Id: <201607291928.u6TJS41U017103@winooski.ccs.neu.edu>
Date: Fri, 29 Jul 2016 15:28:04 -0400
From: clements@racket-lang.org
To: bugs@racket-lang.org
Subject: rename identifier no longer warns of collisions?

>Number:         15334
>Category:       all
>Synopsis:       rename identifier no longer warns of collisions?
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Jul 29 15:32:01 -0400 2016
>Last-Modified:  Fri Aug 26 13:56:01 -0400 2016
>Originator:     John Clements
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.6.0.3--2016-07-29(-/f)
>Environment:
macosx "Darwin pajaro2 15.5.0 Darwin Kernel Version 15.5.0: Tue Apr 19 18:36:36 PDT 2016; root:xnu-3248.50.21~8/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 318720740
raco pkg (show):
Installation-wide:
 Package                    Checksum          Source
 cover                      caf2fedbd767e...  catalog...elease
 csv-reading                9761cc44d0843...  catalog...eading
 frog                       18cdb9a3d9669...  catalog...master
 gnucash                    27c9e457efdda...  clone.../gnucash
 gregor                     0d7c40c8d6ce6...  catalog...gregor
 handin                     bb2ce6ac4750b...  catalog...master
 htdp                       491e8037ccde6...  clone...ath=htdp
 htdp-doc                   491e8037ccde6...  clone...htdp-doc
 htdp-lib                   491e8037ccde6...  clone...htdp-lib
 htdp-test                  491e8037ccde6...  clone...tdp-test
 jbc-utils                                    link...jbc-utils
 levenshtein                47882e819e941...  catalog...shtein
 main-distribution          1a0cd523117ae...  catalog...bution
 main-distribution-test     046a93803a9e8...  catalog...n-test
 mboxrd-read                b123593ab3a67...  clone...d/master
 mode-lambda                09e87f743f8c2...  catalog...lambda
 molis-hai                  a3a00c0b99ab9...  clone...lis-hai/
 net-lib                    a57c4800948e4...  clone...=net-lib
 plai-typed                 e40ce884d9a76...  catalog...master
 plai-typed-s-exp-match     ff05b257cc873...  catalog...master
 postmark                                     link.../postmark
 rackbot                                      link...s/rackbot
 racket-handin-client       a497e71c50138...  url...162-cpe430
 racket-lib                                   static-link...ib
 rsound                     4dc9c8f91aa76...  clone.../master/
 sha                        2c9bdff6c0168...  catalog...master
 sonic-pi                                     link.../sonic-pi
 sxml                       c873de9d140da...  clone...l/master
 wavelet-transform-haar-1d                    link...m-haar-1d
 [244 auto-installed packages not shown]
User-specific for installation "development":
 [none]



Collections:
("/Users/clements/Library/Racket/development/collects"
 (non-existent-path))
("/Users/clements/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
It appears that the right-click "rename" menu
option no longer signals a warning when the
identifier being renamed has uses that will be 
captured after the change.

Note: I was wondering whether perhaps I had
clicked on some "don't warn me about this"
checkbox, so I moved ~/Library/Preferences/
org.racket-lang.* to /tmp/ and checked again.
Same behavior.
>How-To-Repeat:
Open DrR, enter this program:

#lang racket

(define (abc a b c)
  (let ([d 14])
    (+ a c d)))

right-click on 'a', and rename to 'd'. I expected 
a warning about the existence of a 'd' binding
that would capture the renamed use of 'a', but 
instead the rename was performed without a 
warning.
>Fix:
>Audit-Trail:
From: Daniel Feltey <daniel.feltey@eecs.northwestern.edu>
To: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org, clements@racket-lang.org
Cc: 
Subject: Re: all/15334: rename identifier no longer warns of collisions?
Date: Fri, 29 Jul 2016 14:58:04 -0500

 --94eb2c05a74c2724690538cbabec
 Content-Type: text/plain; charset=UTF-8
 
 For what it's worth this used to give a warning in DrRacket in 6.2, but
 starting around the time when the new exapnder was introduced in 6.3 the
 warning has disappeared.
 
 You can still see a warning if you define a top-level `d`, but that warning
 seems spurious since it would not actually conflict with `a` being renamed
 to `d`.
 
 Dan
 
 --94eb2c05a74c2724690538cbabec
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div><div>For what it&#39;s worth this used to give a warn=
 ing in DrRacket in 6.2, but starting around the time when the new exapnder =
 was introduced in 6.3 the warning has disappeared.<br><br></div>You can sti=
 ll see a warning if you define a top-level `d`, but that warning seems spur=
 ious since it would not actually conflict with `a` being renamed to `d`.<br=
 ><br></div>Dan<br></div>
 
 --94eb2c05a74c2724690538cbabec--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Daniel Feltey <daniel.feltey@eecs.northwestern.edu>
Cc: nobody <nobody@racket-lang.org>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: all/15334: rename identifier no longer warns of collisions?
Date: Thu, 25 Aug 2016 13:36:37 -0500

 Thanks, guys. Here's a simplification of the program that produces
 different output on 6.2 than it does in 6.3 (and later versions of
 Racket).
 
 #lang racket
 
 (define stx
   (parameterize ([current-namespace (make-base-namespace)])
     (expand
      '(module m racket/base
         (define (abc a b c)
           (let ([d 14])
             (+ a c d)))))))
 
 
 (define (get-ids name)
   (let loop ([stx stx])
     (cond
       [(and (identifier? stx)
             (equal? (syntax-e stx) name))
        (list stx)]
       [(syntax? stx)
        (loop (syntax-e stx))]
       [(pair? stx)
        (append (loop (car stx)) (loop (cdr stx)))]
       [else '()])))
 
 (define as (get-ids 'a))
 (define ds (get-ids 'd))
 
 (define new-ds
   (for/list ([a (in-list as)])
     (datum->syntax a 'd)))
 
 (for*/list ([d1 (in-list ds)]
             [d2 (in-list new-ds)])
   (free-identifier=? d1 d2))
 
 
 On Fri, Jul 29, 2016 at 2:58 PM, Daniel Feltey
 <daniel.feltey@eecs.northwestern.edu> wrote:
 > For what it's worth this used to give a warning in DrRacket in 6.2, but
 > starting around the time when the new exapnder was introduced in 6.3 the
 > warning has disappeared.
 >
 > You can still see a warning if you define a top-level `d`, but that warning
 > seems spurious since it would not actually conflict with `a` being renamed
 > to `d`.
 >
 > Dan
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Daniel Feltey <daniel.feltey@eecs.northwestern.edu>,
        nobody <nobody@racket-lang.org>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: all/15334: rename identifier no longer warns of collisions?
Date: Thu, 25 Aug 2016 14:49:52 -0600

 Nice. While the example shows some differences between the old and new
 expander, though, I think the underlying problem reflects different
 needs of different clients of `expand`.
 
 Clients that use `free-variables` want expansion to replace references
 to variables with identifiers that are `bound-identifier=?` to the
 bindings. Check Syntax doesn't want that; it really wants the original
 identifiers (which are, of course, `free-identifier=?` --- but not
 necessarily `bound-identifier=?`) left in place.
 
 The old expander sortof accommodated both, but not really. For example,
 the old expander doesn't do what Check Syntax wants in the case of
 
         (define (abc a)
           (define-syntax-rule (m)
             (let ([d 14])
               (+ a d)))
           (m))
 
 I think I can similarly construct examples with the old expander that
 break `free-variables`. I don't see a way to construct examples with
 the new expander that are similarly broken for `free-variables`
 clients, though.
 
 Meanwhile (and unlike the old expander), the new expander is capable of
 producing either form of expansion. So, I think the solution will be to
 give Check Syntax a different way to call `expand`. I'd like delay that
 a little while, though, to see if we can get away with adding the
 option to just the new-new expander.
 
 At Thu, 25 Aug 2016 13:36:37 -0500, Robby Findler wrote:
 > Thanks, guys. Here's a simplification of the program that produces
 > different output on 6.2 than it does in 6.3 (and later versions of
 > Racket).
 > 
 > #lang racket
 > 
 > (define stx
 >   (parameterize ([current-namespace (make-base-namespace)])
 >     (expand
 >      '(module m racket/base
 >         (define (abc a b c)
 >           (let ([d 14])
 >             (+ a c d)))))))
 > 
 > 
 > (define (get-ids name)
 >   (let loop ([stx stx])
 >     (cond
 >       [(and (identifier? stx)
 >             (equal? (syntax-e stx) name))
 >        (list stx)]
 >       [(syntax? stx)
 >        (loop (syntax-e stx))]
 >       [(pair? stx)
 >        (append (loop (car stx)) (loop (cdr stx)))]
 >       [else '()])))
 > 
 > (define as (get-ids 'a))
 > (define ds (get-ids 'd))
 > 
 > (define new-ds
 >   (for/list ([a (in-list as)])
 >     (datum->syntax a 'd)))
 > 
 > (for*/list ([d1 (in-list ds)]
 >             [d2 (in-list new-ds)])
 >   (free-identifier=? d1 d2))
 > 
 > 
 > On Fri, Jul 29, 2016 at 2:58 PM, Daniel Feltey
 > <daniel.feltey@eecs.northwestern.edu> wrote:
 > > For what it's worth this used to give a warning in DrRacket in 6.2, but
 > > starting around the time when the new exapnder was introduced in 6.3 the
 > > warning has disappeared.
 > >
 > > You can still see a warning if you define a top-level `d`, but that warning
 > > seems spurious since it would not actually conflict with `a` being renamed
 > > to `d`.
 > >
 > > Dan
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Daniel Feltey <daniel.feltey@eecs.northwestern.edu>,
        nobody <nobody@racket-lang.org>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: all/15334: rename identifier no longer warns of collisions?
Date: Thu, 25 Aug 2016 16:31:41 -0500

 Okay!
 
 The guard that Check Syntax does for renaming doesn't work (in other
 ways) for other reasons anyway.
 
 Robby
 
 On Thu, Aug 25, 2016 at 3:49 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > Nice. While the example shows some differences between the old and new
 > expander, though, I think the underlying problem reflects different
 > needs of different clients of `expand`.
 >
 > Clients that use `free-variables` want expansion to replace references
 > to variables with identifiers that are `bound-identifier=?` to the
 > bindings. Check Syntax doesn't want that; it really wants the original
 > identifiers (which are, of course, `free-identifier=?` --- but not
 > necessarily `bound-identifier=?`) left in place.
 >
 > The old expander sortof accommodated both, but not really. For example,
 > the old expander doesn't do what Check Syntax wants in the case of
 >
 >         (define (abc a)
 >           (define-syntax-rule (m)
 >             (let ([d 14])
 >               (+ a d)))
 >           (m))
 >
 > I think I can similarly construct examples with the old expander that
 > break `free-variables`. I don't see a way to construct examples with
 > the new expander that are similarly broken for `free-variables`
 > clients, though.
 >
 > Meanwhile (and unlike the old expander), the new expander is capable of
 > producing either form of expansion. So, I think the solution will be to
 > give Check Syntax a different way to call `expand`. I'd like delay that
 > a little while, though, to see if we can get away with adding the
 > option to just the new-new expander.
 >
 > At Thu, 25 Aug 2016 13:36:37 -0500, Robby Findler wrote:
 >> Thanks, guys. Here's a simplification of the program that produces
 >> different output on 6.2 than it does in 6.3 (and later versions of
 >> Racket).
 >>
 >> #lang racket
 >>
 >> (define stx
 >>   (parameterize ([current-namespace (make-base-namespace)])
 >>     (expand
 >>      '(module m racket/base
 >>         (define (abc a b c)
 >>           (let ([d 14])
 >>             (+ a c d)))))))
 >>
 >>
 >> (define (get-ids name)
 >>   (let loop ([stx stx])
 >>     (cond
 >>       [(and (identifier? stx)
 >>             (equal? (syntax-e stx) name))
 >>        (list stx)]
 >>       [(syntax? stx)
 >>        (loop (syntax-e stx))]
 >>       [(pair? stx)
 >>        (append (loop (car stx)) (loop (cdr stx)))]
 >>       [else '()])))
 >>
 >> (define as (get-ids 'a))
 >> (define ds (get-ids 'd))
 >>
 >> (define new-ds
 >>   (for/list ([a (in-list as)])
 >>     (datum->syntax a 'd)))
 >>
 >> (for*/list ([d1 (in-list ds)]
 >>             [d2 (in-list new-ds)])
 >>   (free-identifier=? d1 d2))
 >>
 >>
 >> On Fri, Jul 29, 2016 at 2:58 PM, Daniel Feltey
 >> <daniel.feltey@eecs.northwestern.edu> wrote:
 >> > For what it's worth this used to give a warning in DrRacket in 6.2, but
 >> > starting around the time when the new exapnder was introduced in 6.3 the
 >> > warning has disappeared.
 >> >
 >> > You can still see a warning if you define a top-level `d`, but that warning
 >> > seems spurious since it would not actually conflict with `a` being renamed
 >> > to `d`.
 >> >
 >> > Dan
From: "John Clements" <clements@brinckerhoff.org>
To: "Robby Findler" <robby@eecs.northwestern.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Daniel Feltey" <daniel.feltey@eecs.northwestern.edu>,
        "nobody" <nobody@racket-lang.org>, "bugs" <bugs@racket-lang.org>,
        "bug-notification" <bug-notification@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: all/15334: rename identifier no longer warns of collisions?
Date: Fri, 26 Aug 2016 13:57:04 -0400

 
 > On Aug 25, 2016, at 2:31 PM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 > 
 > Okay!
 > 
 > The guard that Check Syntax does for renaming doesn't work (in other
 > ways) for other reasons anyway.
 
 Glad to hear about progress on this front; I keep using the renamer, but I always wonder whether I’m doing something terrible :).
 
 Many thanks,
 
 John
 
 > 
 > Robby
 > 
 > On Thu, Aug 25, 2016 at 3:49 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 >> Nice. While the example shows some differences between the old and new
 >> expander, though, I think the underlying problem reflects different
 >> needs of different clients of `expand`.
 >> 
 >> Clients that use `free-variables` want expansion to replace references
 >> to variables with identifiers that are `bound-identifier=?` to the
 >> bindings. Check Syntax doesn't want that; it really wants the original
 >> identifiers (which are, of course, `free-identifier=?` --- but not
 >> necessarily `bound-identifier=?`) left in place.
 >> 
 >> The old expander sortof accommodated both, but not really. For example,
 >> the old expander doesn't do what Check Syntax wants in the case of
 >> 
 >>        (define (abc a)
 >>          (define-syntax-rule (m)
 >>            (let ([d 14])
 >>              (+ a d)))
 >>          (m))
 >> 
 >> I think I can similarly construct examples with the old expander that
 >> break `free-variables`. I don't see a way to construct examples with
 >> the new expander that are similarly broken for `free-variables`
 >> clients, though.
 >> 
 >> Meanwhile (and unlike the old expander), the new expander is capable of
 >> producing either form of expansion. So, I think the solution will be to
 >> give Check Syntax a different way to call `expand`. I'd like delay that
 >> a little while, though, to see if we can get away with adding the
 >> option to just the new-new expander.
 >> 
 >> At Thu, 25 Aug 2016 13:36:37 -0500, Robby Findler wrote:
 >>> Thanks, guys. Here's a simplification of the program that produces
 >>> different output on 6.2 than it does in 6.3 (and later versions of
 >>> Racket).
 >>> 
 >>> #lang racket
 >>> 
 >>> (define stx
 >>>  (parameterize ([current-namespace (make-base-namespace)])
 >>>    (expand
 >>>     '(module m racket/base
 >>>        (define (abc a b c)
 >>>          (let ([d 14])
 >>>            (+ a c d)))))))
 >>> 
 >>> 
 >>> (define (get-ids name)
 >>>  (let loop ([stx stx])
 >>>    (cond
 >>>      [(and (identifier? stx)
 >>>            (equal? (syntax-e stx) name))
 >>>       (list stx)]
 >>>      [(syntax? stx)
 >>>       (loop (syntax-e stx))]
 >>>      [(pair? stx)
 >>>       (append (loop (car stx)) (loop (cdr stx)))]
 >>>      [else '()])))
 >>> 
 >>> (define as (get-ids 'a))
 >>> (define ds (get-ids 'd))
 >>> 
 >>> (define new-ds
 >>>  (for/list ([a (in-list as)])
 >>>    (datum->syntax a 'd)))
 >>> 
 >>> (for*/list ([d1 (in-list ds)]
 >>>            [d2 (in-list new-ds)])
 >>>  (free-identifier=? d1 d2))
 >>> 
 >>> 
 >>> On Fri, Jul 29, 2016 at 2:58 PM, Daniel Feltey
 >>> <daniel.feltey@eecs.northwestern.edu> wrote:
 >>>> For what it's worth this used to give a warning in DrRacket in 6.2, but
 >>>> starting around the time when the new exapnder was introduced in 6.3 the
 >>>> warning has disappeared.
 >>>> 
 >>>> You can still see a warning if you define a top-level `d`, but that warning
 >>>> seems spurious since it would not actually conflict with `a` being renamed
 >>>> to `d`.
 >>>> 
 >>>> Dan
 
 
 
 
