From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Mar  4 15:44:08 2010
Received: from mail-yx0-f173.google.com (mail-yx0-f173.google.com [209.85.210.173])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o24Ki6vp023482
	for <bugs@bugs.plt-scheme.org>; Thu, 4 Mar 2010 15:44:07 -0500
Message-Id: <201003042044.o24Ki3ED023474@champlain.ccs.neu.edu>
Date: Thu, 4 Mar 2010 15:44:03 -0500
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: any/c changes values that have prop:procedure

>Number:         10808
>Category:       all
>Synopsis:       any/c changes values that have prop:procedure
>Class:          sw-bug
>Responsible:    sstrickl
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Mar 04 15:48:01 -0500 2010
>Closed-Date:    Thu Mar 04 16:15:56 -0500 2010
>Last-Modified:  Thu Mar 04 16:20:02 -0500 2010
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.4.5-svn4mar2010
>Environment:
macosx "Darwin Kauai.ccs.neu.edu 9.7.0 Darwin Kernel Version 9.7.0: Tue Mar 31 22:54:29 PDT 2009; root:xnu-1228.12.14~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 556601188

Collections:
(("/Users/cce/svn/2010-03-04/dist/add-on/4.2.4.5/collects" non-existent-path) ("/Users/cce/svn/2010-03-04/dist/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" !
 "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #f))
>Description:
The program below defines a "constant" structure with prop:procedure.  Wrapping an instance of "constant" with any/c apparently wraps it with a function that duplicates the prop:procedure behavior, but stops it being an instance of "constant".

The final expression in the program fails with a runtime error.
>How-To-Repeat:
#lang scheme

(define-struct constant [value]
  #:property prop:procedure (lambda (x) (constant-value x)))

(define x (make-constant 'x))

(x)
(constant-value x)

(define y (contract any/c x 'positive 'negative))

(y)
(constant-value y)
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: cce@ccs.neu.edu, bugs@plt-scheme.org
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        Stevie Strickland <sstrickl@ccs.neu.edu>
Subject: Re: [plt-bug] all/10808: any/c changes values that have 
	prop:procedure
Date: Thu, 4 Mar 2010 15:00:10 -0600

 The contract is just wrapping it with another prop:procedure struct so
 you can probably make this behavior show up without contracts.
 
 Unless prop:procedures are not supposed to "look inside"? In which
 case, we need to add some predicate that says "this struct has a
 prop:procedure" property and the contract library can avoid putting
 another wrapper in that case.
 
 A similar thing happens with parameters.
 
 Robby
 
 On Thu, Mar 4, 2010 at 2:48 PM,  <cce@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10808
 >
 > Reported by Carl Eastlund for release: 4.2.4.5-svn4mar2010
 >
 > *** Description:
 > The program below defines a "constant" structure with prop:procedure. =C2=
 =A0Wrapping an instance of "constant" with any/c apparently wraps it with a=
  function that duplicates the prop:procedure behavior, but stops it being a=
 n instance of "constant".
 >
 > The final expression in the program fails with a runtime error.
 >
 > *** How to repeat:
 > #lang scheme
 >
 > (define-struct constant [value]
 > =C2=A0#:property prop:procedure (lambda (x) (constant-value x)))
 >
 > (define x (make-constant 'x))
 >
 > (x)
 > (constant-value x)
 >
 > (define y (contract any/c x 'positive 'negative))
 >
 > (y)
 > (constant-value y)
 >
 > *** Environment:
 > macosx "Darwin Kauai.ccs.neu.edu 9.7.0 Darwin Kernel Version 9.7.0: Tue M=
 ar 31 22:54:29 PDT 2009; root:xnu-1228.12.14~1/RELEASE_PPC Power Macintosh =
 powerpc" (ppc-macosx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 556601188
 >
 > Collections:
 > (("/Users/cce/svn/2010-03-04/dist/add-on/4.2.4.5/collects" non-existent-p=
 ath) ("/Users/cce/svn/2010-03-04/dist/collects" ".svn" "2htdp" "afm" "algol=
 60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "=
 deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" =
 "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" =
 "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "ico=
 ns" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "=
 mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-=
 tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reade=
 r" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeuni=
 t" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "sl=
 ideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax"=
  "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2=
 page" "texpict" !
 > =C2=A0"trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "w=
 eb-server" "wxme" "xml"))
 > Computer Language: (("Determine language from source") (#(#t write mixed-=
 fraction-e #f #t debug) (default) #() "#lang scheme\n" #f))
 >
 >
From: Carl Eastlund <cce@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, Matthew Flatt <mflatt@cs.utah.edu>,
        Stevie Strickland <sstrickl@ccs.neu.edu>
Subject: Re: [plt-bug] all/10808: any/c changes values that have 
	prop:procedure
Date: Thu, 4 Mar 2010 16:09:13 -0500

 Robby,
 
 I'm not sure I understand your entire response.  Let me back up and
 ask a simpler question.  Why is any/c wrapping anything to begin with?
 
 --Carl
 
 On Thu, Mar 4, 2010 at 4:00 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > The contract is just wrapping it with another prop:procedure struct so
 > you can probably make this behavior show up without contracts.
 >
 > Unless prop:procedures are not supposed to "look inside"? In which
 > case, we need to add some predicate that says "this struct has a
 > prop:procedure" property and the contract library can avoid putting
 > another wrapper in that case.
 >
 > A similar thing happens with parameters.
 >
 > Robby
 >
 > On Thu, Mar 4, 2010 at 2:48 PM, =A0<cce@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >> =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10808
 >>
 >> Reported by Carl Eastlund for release: 4.2.4.5-svn4mar2010
 >>
 >> *** Description:
 >> The program below defines a "constant" structure with prop:procedure. =
 =A0Wrapping an instance of "constant" with any/c apparently wraps it with a=
  function that duplicates the prop:procedure behavior, but stops it being a=
 n instance of "constant".
 >>
 >> The final expression in the program fails with a runtime error.
 >>
 >> *** How to repeat:
 >> #lang scheme
 >>
 >> (define-struct constant [value]
 >> =A0#:property prop:procedure (lambda (x) (constant-value x)))
 >>
 >> (define x (make-constant 'x))
 >>
 >> (x)
 >> (constant-value x)
 >>
 >> (define y (contract any/c x 'positive 'negative))
 >>
 >> (y)
 >> (constant-value y)
From: Robby Findler <robby@eecs.northwestern.edu>
To: Carl Eastlund <cce@ccs.neu.edu>
Cc: bugs@plt-scheme.org, Matthew Flatt <mflatt@cs.utah.edu>,
        Stevie Strickland <sstrickl@ccs.neu.edu>
Subject: Re: [plt-bug] all/10808: any/c changes values that have 
	prop:procedure
Date: Thu, 4 Mar 2010 15:11:07 -0600

 And, for the next question, this is to be able to (Eventually) support
 the ability to randomly test files by using their contracts to
 generate random inputs.
 
 Robby
 
 On Thu, Mar 4, 2010 at 3:10 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > To implement the new value-contract function that returns the (latent)
 > contract on a function (if any).
 >
 > Robby
 >
 > On Thu, Mar 4, 2010 at 3:09 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >> Robby,
 >>
 >> I'm not sure I understand your entire response. =C2=A0Let me back up and
 >> ask a simpler question. =C2=A0Why is any/c wrapping anything to begin wi=
 th?
 >>
 >> --Carl
 >>
 >> On Thu, Mar 4, 2010 at 4:00 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> The contract is just wrapping it with another prop:procedure struct so
 >>> you can probably make this behavior show up without contracts.
 >>>
 >>> Unless prop:procedures are not supposed to "look inside"? In which
 >>> case, we need to add some predicate that says "this struct has a
 >>> prop:procedure" property and the contract library can avoid putting
 >>> another wrapper in that case.
 >>>
 >>> A similar thing happens with parameters.
 >>>
 >>> Robby
 >>>
 >>> On Thu, Mar 4, 2010 at 2:48 PM, =C2=A0<cce@ccs.neu.edu> wrote:
 >>>> A new problem report is waiting at
 >>>> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10808
 >>>>
 >>>> Reported by Carl Eastlund for release: 4.2.4.5-svn4mar2010
 >>>>
 >>>> *** Description:
 >>>> The program below defines a "constant" structure with prop:procedure. =
 =C2=A0Wrapping an instance of "constant" with any/c apparently wraps it wit=
 h a function that duplicates the prop:procedure behavior, but stops it bein=
 g an instance of "constant".
 >>>>
 >>>> The final expression in the program fails with a runtime error.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang scheme
 >>>>
 >>>> (define-struct constant [value]
 >>>> =C2=A0#:property prop:procedure (lambda (x) (constant-value x)))
 >>>>
 >>>> (define x (make-constant 'x))
 >>>>
 >>>> (x)
 >>>> (constant-value x)
 >>>>
 >>>> (define y (contract any/c x 'positive 'negative))
 >>>>
 >>>> (y)
 >>>> (constant-value y)
 >>
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Carl Eastlund <cce@ccs.neu.edu>
Cc: bugs@plt-scheme.org, Matthew Flatt <mflatt@cs.utah.edu>,
        Stevie Strickland <sstrickl@ccs.neu.edu>
Subject: Re: [plt-bug] all/10808: any/c changes values that have 
	prop:procedure
Date: Thu, 4 Mar 2010 15:10:39 -0600

 To implement the new value-contract function that returns the (latent)
 contract on a function (if any).
 
 Robby
 
 On Thu, Mar 4, 2010 at 3:09 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 > Robby,
 >
 > I'm not sure I understand your entire response. =C2=A0Let me back up and
 > ask a simpler question. =C2=A0Why is any/c wrapping anything to begin wit=
 h?
 >
 > --Carl
 >
 > On Thu, Mar 4, 2010 at 4:00 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> The contract is just wrapping it with another prop:procedure struct so
 >> you can probably make this behavior show up without contracts.
 >>
 >> Unless prop:procedures are not supposed to "look inside"? In which
 >> case, we need to add some predicate that says "this struct has a
 >> prop:procedure" property and the contract library can avoid putting
 >> another wrapper in that case.
 >>
 >> A similar thing happens with parameters.
 >>
 >> Robby
 >>
 >> On Thu, Mar 4, 2010 at 2:48 PM, =C2=A0<cce@ccs.neu.edu> wrote:
 >>> A new problem report is waiting at
 >>> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10808
 >>>
 >>> Reported by Carl Eastlund for release: 4.2.4.5-svn4mar2010
 >>>
 >>> *** Description:
 >>> The program below defines a "constant" structure with prop:procedure. =
 =C2=A0Wrapping an instance of "constant" with any/c apparently wraps it wit=
 h a function that duplicates the prop:procedure behavior, but stops it bein=
 g an instance of "constant".
 >>>
 >>> The final expression in the program fails with a runtime error.
 >>>
 >>> *** How to repeat:
 >>> #lang scheme
 >>>
 >>> (define-struct constant [value]
 >>> =C2=A0#:property prop:procedure (lambda (x) (constant-value x)))
 >>>
 >>> (define x (make-constant 'x))
 >>>
 >>> (x)
 >>> (constant-value x)
 >>>
 >>> (define y (contract any/c x 'positive 'negative))
 >>>
 >>> (y)
 >>> (constant-value y)
 >

Responsible changed from "nobody" to "sstrickl" by sstrickl at Thu, 04 Mar 2010 16:15:56 -0500
Reason>>> I've refactored the recording of contracts so that the wrapping is done at a more 
appropriate layer.

State changed from "open" to "closed" by sstrickl at Thu, 04 Mar 2010 16:15:56 -0500
Reason>>> Fixed in SVN r18469.

From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Carl Eastlund <cce@ccs.neu.edu>, bugs@plt-scheme.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10808: any/c changes values that have  prop:procedure
Date: Thu, 4 Mar 2010 16:14:28 -0500

 On Mar 4, 2010, at 4:10 PM, Robby Findler wrote:
 > To implement the new value-contract function that returns the (latent)
 > contract on a function (if any).
 
 I think it should be the responsibility of the contract to determine how =
 to wrap the returned value appropriately, which only makes sense for =
 higher-order contracts anyway.  (For example, eventually unit/c, =
 class/c, and object/c will do the recording as well.)
 
 (And I doubt you're going to ever wrap a contract with any/c, or at =
 least generate useful test cases from that -- instead, you might wrap it =
 with (-> any/c any/c), or even (unconstrained-domain-> any/c).)
 
 The changes I just made to trunk a) fix Carl's problem and b) shift the =
 responsibility of recording the contract to the (higher-order) contract =
 projection, as should be correct.
 
 Stevie=
From: Carl Eastlund <cce@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, Matthew Flatt <mflatt@cs.utah.edu>,
        Stevie Strickland <sstrickl@ccs.neu.edu>
Subject: Re: [plt-bug] all/10808: any/c changes values that have 
	prop:procedure
Date: Thu, 4 Mar 2010 16:12:42 -0500

 Well, whatever wrapper you use, please make sure it doesn't change the
 behavior of the wrapped value any more than the contract itself does.
 In this case, the wrapper changed far more than any/c did.
 
 Carl Eastlund
 
 On Thu, Mar 4, 2010 at 4:10 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > To implement the new value-contract function that returns the (latent)
 > contract on a function (if any).
 >
 > Robby
 >
 > On Thu, Mar 4, 2010 at 3:09 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >> Robby,
 >>
 >> I'm not sure I understand your entire response. =A0Let me back up and
 >> ask a simpler question. =A0Why is any/c wrapping anything to begin with?
 >>
 >> --Carl
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Carl Eastlund <cce@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10808: any/c changes values that have  prop:procedure
Date: Thu, 4 Mar 2010 16:17:46 -0500

 On Mar 4, 2010, at 4:14 PM, Stevie Strickland wrote:
 > On Mar 4, 2010, at 4:10 PM, Robby Findler wrote:
 >> To implement the new value-contract function that returns the =
 (latent)
 >> contract on a function (if any).
 >=20
 > I think it should be the responsibility of the contract to determine =
 how to wrap the returned value appropriately, which only makes sense for =
 higher-order contracts anyway.  (For example, eventually unit/c, =
 class/c, and object/c will do the recording as well.)
 
 Also, moving contract recording to the projections means that pieces of =
 contracts are also recorded as they're applied, which will be useful for =
 plans I have in the future.
 
 Stevie=
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: Carl Eastlund <cce@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10808: any/c changes values that have 
	prop:procedure
Date: Thu, 4 Mar 2010 15:19:24 -0600

 On Thu, Mar 4, 2010 at 3:17 PM, Stevie Strickland <sstrickl@ccs.neu.edu> wr=
 ote:
 > On Mar 4, 2010, at 4:14 PM, Stevie Strickland wrote:
 >> On Mar 4, 2010, at 4:10 PM, Robby Findler wrote:
 >>> To implement the new value-contract function that returns the (latent)
 >>> contract on a function (if any).
 >>
 >> I think it should be the responsibility of the contract to determine how=
  to wrap the returned value appropriately, which only makes sense for highe=
 r-order contracts anyway. =C2=A0(For example, eventually unit/c, class/c, a=
 nd object/c will do the recording as well.)
 >
 > Also, moving contract recording to the projections means that pieces of c=
 ontracts are also recorded as they're applied, which will be useful for pla=
 ns I have in the future.
 
 How bad does this hurt performance? (I explicit didn't do it this way
 to avoid this problem.)
 
 You can run micro benchmarks, like calling this function a lot:
 
   (contract (-> (-> any/c any) any) (lambda (f) (f)) 'pos 'neg)
 
 as one way to test.
 
 Robby
