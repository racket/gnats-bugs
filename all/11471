From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Nov 28 22:26:10 2010
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id oAT3Q7MA017118
	for <bugs@bugs.plt-scheme.org>; Sun, 28 Nov 2010 22:26:07 -0500
Message-Id: <201011290326.oAT3Q46T017109@champlain.ccs.neu.edu>
Date: Sun, 28 Nov 2010 22:26:04 -0500
From: mlsmith@cs.vassar.edu
To: bugs@racket-lang.org
Subject: stop-when doesn't render final scene in 5.0.2 (Mac)

>Number:         11471
>Category:       all
>Synopsis:       stop-when doesn't render final scene in 5.0.2 (Mac)
>Class:          sw-bug
>Responsible:    matthias
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Nov 28 22:28:01 -0500 2010
>Closed-Date:    Mon Nov 29 10:59:20 -0500 2010
>Last-Modified:  Mon Nov 29 10:59:20 -0500 2010
>Originator:     Marc Smith
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.2
>Environment:
macosx "Darwin mlsmith-2.home 10.5.0 Darwin Kernel Version 10.5.0: Fri Nov  5 23:20:39 PDT 2010; root:xnu-1504.9.17~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 212951620

Collections:
(("/Users/mlsmith/Library/Racket/5.0.2/collects" non-existent-path) ("/Applications/Racket v5.0.2/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server!
 " "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
When I run the attached program in 5.0.1, the final scene is rendered when the worm hits a wall. In 5.0.2, the world ends, but the final scene is not rendered. 
>How-To-Repeat:
Run this program in 5.0.1 (Mac) and the final scene is displayed. In 5.0.2, the final scene is not rendered. 

;; CS101 - Fall 2010
;; Prof Smith
;; Assign 6 
;; Exercise 161 Solution
;; Due: last day of classes

;--------1---------2---------3---------4---------5---------6---------7
;---+----0----+----0----+----0----+----0----+----0----+----0----+----0

(require 2htdp/image)
(require 2htdp/universe)

;  Exercise 161: 
;  Develop a data representation for worms with tails. A worm’s tail is 
;  a possibly empty sequence of “connected” segments. Here “connected” 
;  means that the coordinates of a segment differ from those of its 
;  predecessor in at most one direction and, if rendered, the two 
;  segments touch. To keep things simple, treat all segments – head and 
;  tail segments – the same.
; 
;  Then modify your program from exercise 159 to accommodate a 
;  multi-segment worm. Keep things simple: (1) your program may render 
;  all worm segments as red disks; (2) one way to think of the worm’s 
;  movement is to add a segment in the direction in which it is moving 
;  and to delete the last segment; and (3) ignore that the worm may run 
;  into the wall or into itself. 



; A list-of-segments (los) is either
; - empty
; - (cons p segs)
; where p is a (make-posn number number), and 
;       segs is a los

(define-struct worm (segs dir))
; A worm is a (make-worm s d) where
; - s represents the worm's list of segments, and
; - d represents the worm's direction, (make-posn number number)


; Constants
(define RADIUS 10)                              ;\
(define DIAMETER (* RADIUS 2))                  ;  worm-related
(define SEGMENT (circle RADIUS "solid" "red"))  ;/
(define WIDTH (* DIAMETER 50))                ;--  scene-
(define HEIGHT (* DIAMETER 50))               ;--  related
(define MTSCENE (empty-scene WIDTH HEIGHT))
(define INIT-WORM 
  (make-worm 
   (cons (make-posn (/ WIDTH 2) (/ HEIGHT 2)) 
         (cons (make-posn (- (/ WIDTH 2) DIAMETER) (/ HEIGHT 2))
               (cons (make-posn (- (/ WIDTH 2) (* 2 DIAMETER)) (/ HEIGHT 2))
               empty)))
   (make-posn DIAMETER 0)))

; los -> image
; renders the worm's list of segments
(define (render-worm segs)
  (cond [(empty? segs) MTSCENE]
        [else (place-image SEGMENT 
               (posn-x (first segs)) (posn-y (first segs))
               (render-worm (rest segs)))]))

; worm -> image
; renders the worm in the world
(define (render w)
  (render-worm (worm-segs w)))

; worm -> image
; renders the final state of the world
(define (render-final w)
  (place-image (text "worm hit border" 36 "indigo")
               150 (- HEIGHT 50)
               (render w)))


; posn posn -> posn
; adds the two given posns
(define (add-posn p1 p2)
  (make-posn (+ (posn-x p1) (posn-x p2))
             (+ (posn-y p1) (posn-y p2))))

; (non-empty los) -> los
; deletes the last segment of the given worm
(define (delete-last segs)
  (cond [(empty? (rest segs)) empty]
        [else (cons (first segs)
                    (delete-last (rest segs)))]))

; (non-empty los) posn -> los
; moves the given worm by removing the last segment and adding a new first
(define (move-worm segs dxdy)
  (cons (add-posn dxdy (first segs)) 
        (delete-last segs)))
             

; worm -> worm
; moves the worm
(define (worm-tick w)
  (make-worm (move-worm (worm-segs w) (worm-dir w))
             (worm-dir w)))

; worm key -> worm
; changes direction of worm given direction of arrow key pressed
(define (worm-ctrl w k)
  (local ((define dir 
            (cond [(key=? k "up") (make-posn 0 (- DIAMETER))]
                  [(key=? k "down") (make-posn 0 DIAMETER)]
                  [(key=? k "left") (make-posn (- DIAMETER) 0)]
                  [(key=? k "right") (make-posn DIAMETER 0)]
                  [else (worm-dir w)])))
    (make-worm (worm-segs w) dir)))


; worm -> boolean
; determines whether worm has hit left wall
(define (hit-left-wall? w)
  (<= (posn-x (first (worm-segs w))) 0)) 

; worm -> boolean
; determines whether worm has hit right wall
(define (hit-right-wall? w)
  (>= (posn-x (first (worm-segs w))) WIDTH)) 

; worm -> boolean
; determines whether worm has hit top wall
(define (hit-top-wall? w)
  (<= (posn-y (first (worm-segs w))) 0)) 

; worm -> boolean
; determines whether worm has hit bottom wall
(define (hit-bottom-wall? w)
  (>= (posn-y (first (worm-segs w))) HEIGHT)) 

; worm -> boolean
; determines whether worm has run into one of the walls
(define (game-over? w) 
  (or (hit-left-wall? w)
      (hit-right-wall? w)
      (hit-top-wall? w)
      (hit-bottom-wall? w)))


(define (worm-main rate)
  (big-bang INIT-WORM
            (on-tick worm-tick rate)
            (on-key worm-ctrl)
            (stop-when game-over? render-final)
            (to-draw render)))

(worm-main 1/4)
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "matthias" by matthias@racket-lang.org at Mon, 29 Nov 2010 10:59:20 -0500
Reason>>> A commit by matthias@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/6df50ffe83
State changed from "open" to "closed" by matthias@racket-lang.org at Mon, 29 Nov 2010 10:59:20 -0500
Reason>>> A commit by matthias@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/6df50ffe83
