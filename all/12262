From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Oct  6 17:04:24 2011
Received: from mail-vw0-f44.google.com (mail-vw0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p96L4Lsi016753
	for <bugs@bugs.plt-scheme.org>; Thu, 6 Oct 2011 17:04:21 -0400
Message-Id: <201110062104.p96L4HfJ016747@champlain.ccs.neu.edu>
Date: Thu, 6 Oct 2011 17:04:17 -0400
From: samth@ccs.neu.edu
To: bugs@racket-lang.org
Subject: plot violates its own contract

>Number:         12262
>Category:       all
>Synopsis:       plot violates its own contract
>Class:          sw-bug
>Responsible:    ntoronto
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Oct 06 17:08:01 -0400 2011
>Closed-Date:    Thu Nov 10 15:53:11 -0500 2011
>Last-Modified:  Thu Nov 10 15:53:11 -0500 2011
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.3.12--2011-10-06(53c609a/g)
>Environment:
unix "Linux punge 2.6.38-11-generic #48-Ubuntu SMP Fri Jul 29 19:05:14 UTC 2011 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 286451692
Links: (links) = ("gcstat" "raco-git" "disassemble"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/samth/sw/plt/add-on/5.1.3.12/collects"
 (non-existent-path))
("/home/samth/sw/plt/collects"
 ("db" "honu" "eopl" "tests" "typed" "test-engine" "errortrace" "sgl" "plot" "combinator-parser" "mzcom" "test-box-recovery" "version" ".gitignore" "defaults" "deinprogramm" "s-exp" "handin-client" "srpersist" "launcher" "scriblib" "browser" "unstable" "r5rs" "gui-debugger" "at-exp" "swindle" "scheme" "reader" "frtime" "meta" "racket" "file" "racklog" "data" "slatex" "net" "wxme" "syntax" "scribblings" "parser-tools" "ffi" "hierlist" "handin-server" "2htdp" "framework" "mz" "openssl" "dynext" "datalog" "slideshow" "games" "raco" "picturing-programs" "xml" "texpict" "graphics" "mzscheme" "profile" "help" "web-server" "schelog" "trace" "make" "algol60" "mzlib" "rackunit" "icons" "plai" "sirmail" "lazy" "mrlib" "setup" "xrepl" "string-constants" "typed-racket" "syntax-color" "r6rs" "drscheme" "lang" "repo-time-stamp" "afm" "planet" "typed-scheme" "info-domain" "config" "guibuilder" "stepper" "mred" "embedded-gui" "preprocessor" "readline" "htdp" "compiler" "srfi" "waterworld" "!
 macro-debugger" "html" "scribble" "mysterx" "redex" "drracket" "rnrs" "teachpack" "tex2page" "schemeunit"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t))
>Description:
The following program (adapted from the front page)

#lang racket   ; draw a graph of cos
(require (prefix-in p: plot/compat) plot) ; and deriv^3(cos)
(define ((deriv f) x)
  (/ (- (f x) (f (- x 0.001))) 0.001))
(define (thrice f) (lambda (x) (f (f (f x)))))
(plot (p:mix (p:line ((thrice deriv) sin) #:color 'red)
             (p:line cos #:color 'blue)))

Produces a contract error as follows: 

/sw/plt/collects/racket/contract/private/blame.rkt:58:0: plot: contract violation, expected: list, given: #<procedure:f>
  contract from: (function plot), blaming: 
    <collects>/plot/plot2d/plot.rkt
  contract: 
    (->*
     ((or/c
       (listof
        (recursive-contract (treeof contract)))
       renderer2d?))
     (#:bgcolor
      (or/c
       exact-integer?
       (or/c
        (list/c real? real? real?)
        string?
        symbol?
        (is-a?/c class:color%)))
      #:fgcolor
      (or/c
       exact-integer?
       (or/c
        (list/c real? real? real?)
        string?
        symbol?
        (is-a?/c class:color%)))
      #:height
      (and/c integer? (>=/c 1))
      #:legend-anchor
      (symbols
       'top-left
       'top
       'top-right
       'left
       'center
       'right
       'bottom-left
       'bottom
       'bottom-right)
      #:lncolor
      (or/c
       exact-integer?
       (or/c
        (list/c real? real? real?)
        string?
        symbol?
        (is-a?/c class:color%)))
      #:out-file
      (or/c path-string? output-port? #f)
      #:out-kind
      (symbols
       'auto
       'png
       'jpeg
       'xmb
       'xpm
       'bmp
       'ps
       'pdf
       'svg)
      #:title
      (or/c string? #f)
      #:width
      (and/c integer? (>=/c 1))
      #:x-label
      (or/c string? #f)
      #:x-max
      (or/c real? #f)
      #:x-min
      (or/c real? #f)
      #:y-label
      (or/c string? #f)
      #:y-max
      (or/c real? #f)
      #:y-min
      (or/c real? #f))
     (or/c (is-a?/c class:snip%) void?))
  at: <collects>/plot/plot2d/plot.rkt
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Neil Toronto <neil.toronto@gmail.com>
To: samth@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12262: plot violates its own contract
Date: Thu, 06 Oct 2011 17:35:33 -0600

 That should be 'p:plot' at the beginning of line 6, which takes a 
 procedure as an argument, as produced by 'p:mix'. The contracts are all 
 working fine.
 
 I'll put a big warning at the top of the documentation of 'plot/compat' 
 that it shouldn't be required along with 'plot'.
 
 Neil T
 
 On 10/06/2011 03:08 PM, samth@ccs.neu.edu wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=12262
 >
 > Reported by Sam TH for release: 5.1.3.12--2011-10-06(53c609a/g)
 >
 > *** Description:
 > The following program (adapted from the front page)
 >
 > #lang racket   ; draw a graph of cos
 > (require (prefix-in p: plot/compat) plot) ; and deriv^3(cos)
 > (define ((deriv f) x)
 >    (/ (- (f x) (f (- x 0.001))) 0.001))
 > (define (thrice f) (lambda (x) (f (f (f x)))))
 > (plot (p:mix (p:line ((thrice deriv) sin) #:color 'red)
 >               (p:line cos #:color 'blue)))
 >
 > Produces a contract error as follows:
 >
 > /sw/plt/collects/racket/contract/private/blame.rkt:58:0: plot: contract violation, expected: list, given: #<procedure:f>
 >    contract from: (function plot), blaming:
 >      <collects>/plot/plot2d/plot.rkt
 >    contract:
 >      (->*
 >       ((or/c
 >         (listof
 >          (recursive-contract (treeof contract)))
 >         renderer2d?))
 >       (#:bgcolor
 >        (or/c
 >         exact-integer?
 >         (or/c
 >          (list/c real? real? real?)
 >          string?
 >          symbol?
 >          (is-a?/c class:color%)))
 >        #:fgcolor
 >        (or/c
 >         exact-integer?
 >         (or/c
 >          (list/c real? real? real?)
 >          string?
 >          symbol?
 >          (is-a?/c class:color%)))
 >        #:height
 >        (and/c integer? (>=/c 1))
 >        #:legend-anchor
 >        (symbols
 >         'top-left
 >         'top
 >         'top-right
 >         'left
 >         'center
 >         'right
 >         'bottom-left
 >         'bottom
 >         'bottom-right)
 >        #:lncolor
 >        (or/c
 >         exact-integer?
 >         (or/c
 >          (list/c real? real? real?)
 >          string?
 >          symbol?
 >          (is-a?/c class:color%)))
 >        #:out-file
 >        (or/c path-string? output-port? #f)
 >        #:out-kind
 >        (symbols
 >         'auto
 >         'png
 >         'jpeg
 >         'xmb
 >         'xpm
 >         'bmp
 >         'ps
 >         'pdf
 >         'svg)
 >        #:title
 >        (or/c string? #f)
 >        #:width
 >        (and/c integer? (>=/c 1))
 >        #:x-label
 >        (or/c string? #f)
 >        #:x-max
 >        (or/c real? #f)
 >        #:x-min
 >        (or/c real? #f)
 >        #:y-label
 >        (or/c string? #f)
 >        #:y-max
 >        (or/c real? #f)
 >        #:y-min
 >        (or/c real? #f))
 >       (or/c (is-a?/c class:snip%) void?))
 >    at:<collects>/plot/plot2d/plot.rkt
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux punge 2.6.38-11-generic #48-Ubuntu SMP Fri Jul 29 19:05:14 UTC 2011 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 286451692
 > Links: (links) = ("gcstat" "raco-git" "disassemble"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/samth/sw/plt/add-on/5.1.3.12/collects"
 >   (non-existent-path))
 > ("/home/samth/sw/plt/collects"
 >   ("db" "honu" "eopl" "tests" "typed" "test-engine" "errortrace" "sgl" "plot" "combinator-parser" "mzcom" "test-box-recovery" "version" ".gitignore" "defaults" "deinprogramm" "s-exp" "handin-client" "srpersist" "launcher" "scriblib" "browser" "unstable" "r5rs" "gui-debugger" "at-exp" "swindle" "scheme" "reader" "frtime" "meta" "racket" "file" "racklog" "data" "slatex" "net" "wxme" "syntax" "scribblings" "parser-tools" "ffi" "hierlist" "handin-server" "2htdp" "framework" "mz" "openssl" "dynext" "datalog" "slideshow" "games" "raco" "picturing-programs" "xml" "texpict" "graphics" "mzscheme" "profile" "help" "web-server" "schelog" "trace" "make" "algol60" "mzlib" "rackunit" "icons" "plai" "sirmail" "lazy" "mrlib" "setup" "xrepl" "string-constants" "typed-racket" "syntax-color" "r6rs" "drscheme" "lang" "repo-time-stamp" "afm" "planet" "typed-scheme" "info-domain" "config" "guibuilder" "stepper" "mred" "embedded-gui" "preprocessor" "readline" "htdp" "compiler" "srfi" "waterworld"
  "!
 >   macro-debugger" "html" "scribble" "mysterx" "redex" "drracket" "rnrs" "teachpack" "tex2page" "schemeunit"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t))
 >
 
Responsible changed from "nobody" to "ntoronto" by ntoronto@racket-lang.org at Thu, 06 Oct 2011 21:02:53 -0400
Reason>>> A commit by ntoronto@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/94a9a808ec
State changed from "open" to "closed" by ntoronto@racket-lang.org at Thu, 06 Oct 2011 21:02:53 -0400
Reason>>> A commit by ntoronto@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/94a9a808ec
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: samth@ccs.neu.edu, bug-notification@racket-lang.org,
        nobody@racket-lang.org, bugs@racket-lang.org
Subject: Re: [racket-bug] all/12262: plot violates its own contract
Date: Thu, 6 Oct 2011 21:51:48 -0400

 --0015173feec4360f3904aeabaf24
 Content-Type: text/plain; charset=ISO-8859-1
 
 I realize that this isn't the intended usage.  But your code is being
 induced to violate its own contract -- the blame is assigned to the plot
 library. So either your code or your contract should change.
 
 sam th
 On Oct 6, 2011 7:35 PM, "Neil Toronto" <neil.toronto@gmail.com> wrote:
 > That should be 'p:plot' at the beginning of line 6, which takes a
 > procedure as an argument, as produced by 'p:mix'. The contracts are all
 > working fine.
 >
 > I'll put a big warning at the top of the documentation of 'plot/compat'
 > that it shouldn't be required along with 'plot'.
 >
 > Neil T
 >
 > On 10/06/2011 03:08 PM, samth@ccs.neu.edu wrote:
 >> A new problem report is waiting at
 >> http://bugs.racket-lang.org/query/?cmd=view&pr=12262
 >>
 >> Reported by Sam TH for release: 5.1.3.12--2011-10-06(53c609a/g)
 >>
 >> *** Description:
 >> The following program (adapted from the front page)
 >>
 >> #lang racket ; draw a graph of cos
 >> (require (prefix-in p: plot/compat) plot) ; and deriv^3(cos)
 >> (define ((deriv f) x)
 >> (/ (- (f x) (f (- x 0.001))) 0.001))
 >> (define (thrice f) (lambda (x) (f (f (f x)))))
 >> (plot (p:mix (p:line ((thrice deriv) sin) #:color 'red)
 >> (p:line cos #:color 'blue)))
 >>
 >> Produces a contract error as follows:
 >>
 >> /sw/plt/collects/racket/contract/private/blame.rkt:58:0: plot: contract
 violation, expected: list, given: #<procedure:f>
 >> contract from: (function plot), blaming:
 >> <collects>/plot/plot2d/plot.rkt
 >> contract:
 >> (->*
 >> ((or/c
 >> (listof
 >> (recursive-contract (treeof contract)))
 >> renderer2d?))
 >> (#:bgcolor
 >> (or/c
 >> exact-integer?
 >> (or/c
 >> (list/c real? real? real?)
 >> string?
 >> symbol?
 >> (is-a?/c class:color%)))
 >> #:fgcolor
 >> (or/c
 >> exact-integer?
 >> (or/c
 >> (list/c real? real? real?)
 >> string?
 >> symbol?
 >> (is-a?/c class:color%)))
 >> #:height
 >> (and/c integer? (>=/c 1))
 >> #:legend-anchor
 >> (symbols
 >> 'top-left
 >> 'top
 >> 'top-right
 >> 'left
 >> 'center
 >> 'right
 >> 'bottom-left
 >> 'bottom
 >> 'bottom-right)
 >> #:lncolor
 >> (or/c
 >> exact-integer?
 >> (or/c
 >> (list/c real? real? real?)
 >> string?
 >> symbol?
 >> (is-a?/c class:color%)))
 >> #:out-file
 >> (or/c path-string? output-port? #f)
 >> #:out-kind
 >> (symbols
 >> 'auto
 >> 'png
 >> 'jpeg
 >> 'xmb
 >> 'xpm
 >> 'bmp
 >> 'ps
 >> 'pdf
 >> 'svg)
 >> #:title
 >> (or/c string? #f)
 >> #:width
 >> (and/c integer? (>=/c 1))
 >> #:x-label
 >> (or/c string? #f)
 >> #:x-max
 >> (or/c real? #f)
 >> #:x-min
 >> (or/c real? #f)
 >> #:y-label
 >> (or/c string? #f)
 >> #:y-max
 >> (or/c real? #f)
 >> #:y-min
 >> (or/c real? #f))
 >> (or/c (is-a?/c class:snip%) void?))
 >> at:<collects>/plot/plot2d/plot.rkt
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux punge 2.6.38-11-generic #48-Ubuntu SMP Fri Jul 29 19:05:14
 UTC 2011 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 286451692
 >> Links: (links) = ("gcstat" "raco-git" "disassemble"); (links #:user? #f)
 = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/samth/sw/plt/add-on/5.1.3.12/collects"
 >> (non-existent-path))
 >> ("/home/samth/sw/plt/collects"
 >> ("db" "honu" "eopl" "tests" "typed" "test-engine" "errortrace" "sgl"
 "plot" "combinator-parser" "mzcom" "test-box-recovery" "version"
 ".gitignore" "defaults" "deinprogramm" "s-exp" "handin-client" "srpersist"
 "launcher" "scriblib" "browser" "unstable" "r5rs" "gui-debugger" "at-exp"
 "swindle" "scheme" "reader" "frtime" "meta" "racket" "file" "racklog" "data"
 "slatex" "net" "wxme" "syntax" "scribblings" "parser-tools" "ffi" "hierlist"
 "handin-server" "2htdp" "framework" "mz" "openssl" "dynext" "datalog"
 "slideshow" "games" "raco" "picturing-programs" "xml" "texpict" "graphics"
 "mzscheme" "profile" "help" "web-server" "schelog" "trace" "make" "algol60"
 "mzlib" "rackunit" "icons" "plai" "sirmail" "lazy" "mrlib" "setup" "xrepl"
 "string-constants" "typed-racket" "syntax-color" "r6rs" "drscheme" "lang"
 "repo-time-stamp" "afm" "planet" "typed-scheme" "info-domain" "config"
 "guibuilder" "stepper" "mred" "embedded-gui" "preprocessor" "readline"
 "htdp" "compiler" "srfi" "waterworld"
 > "!
 >> macro-debugger" "html" "scribble" "mysterx" "redex" "drracket" "rnrs"
 "teachpack" "tex2page" "schemeunit"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print
 mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t))
 >>
 >
 
 --0015173feec4360f3904aeabaf24
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 <p>I realize that this isn&#39;t the intended usage.=A0 But your code is be=
 ing induced to violate its own contract -- the blame is assigned to the plo=
 t library. So either your code or your contract should change.</p>
 <p>sam th</p>
 <div class=3D"gmail_quote">On Oct 6, 2011 7:35 PM, &quot;Neil Toronto&quot;=
  &lt;<a href=3D"mailto:neil.toronto@gmail.com">neil.toronto@gmail.com</a>&g=
 t; wrote:<br type=3D"attribution">&gt; That should be &#39;p:plot&#39; at t=
 he beginning of line 6, which takes a <br>
 &gt; procedure as an argument, as produced by &#39;p:mix&#39;. The contract=
 s are all <br>&gt; working fine.<br>&gt; <br>&gt; I&#39;ll put a big warnin=
 g at the top of the documentation of &#39;plot/compat&#39; <br>&gt; that it=
  shouldn&#39;t be required along with &#39;plot&#39;.<br>
 &gt; <br>&gt; Neil T<br>&gt; <br>&gt; On 10/06/2011 03:08 PM, <a href=3D"ma=
 ilto:samth@ccs.neu.edu">samth@ccs.neu.edu</a> wrote:<br>&gt;&gt; A new prob=
 lem report is waiting at<br>&gt;&gt;    <a href=3D"http://bugs.racket-lang.=
 org/query/?cmd=3Dview&amp;pr=3D12262">http://bugs.racket-lang.org/query/?cm=
 d=3Dview&amp;pr=3D12262</a><br>
 &gt;&gt;<br>&gt;&gt; Reported by Sam TH for release: 5.1.3.12--2011-10-06(5=
 3c609a/g)<br>&gt;&gt;<br>&gt;&gt; *** Description:<br>&gt;&gt; The followin=
 g program (adapted from the front page)<br>&gt;&gt;<br>&gt;&gt; #lang racke=
 t   ; draw a graph of cos<br>
 &gt;&gt; (require (prefix-in p: plot/compat) plot) ; and deriv^3(cos)<br>&g=
 t;&gt; (define ((deriv f) x)<br>&gt;&gt;    (/ (- (f x) (f (- x 0.001))) 0.=
 001))<br>&gt;&gt; (define (thrice f) (lambda (x) (f (f (f x)))))<br>&gt;&gt=
 ; (plot (p:mix (p:line ((thrice deriv) sin) #:color &#39;red)<br>
 &gt;&gt;               (p:line cos #:color &#39;blue)))<br>&gt;&gt;<br>&gt;=
 &gt; Produces a contract error as follows:<br>&gt;&gt;<br>&gt;&gt; /sw/plt/=
 collects/racket/contract/private/blame.rkt:58:0: plot: contract violation, =
 expected: list, given: #&lt;procedure:f&gt;<br>
 &gt;&gt;    contract from: (function plot), blaming:<br>&gt;&gt;      &lt;c=
 ollects&gt;/plot/plot2d/plot.rkt<br>&gt;&gt;    contract:<br>&gt;&gt;      =
 (-&gt;*<br>&gt;&gt;       ((or/c<br>&gt;&gt;         (listof<br>&gt;&gt;   =
        (recursive-contract (treeof contract)))<br>
 &gt;&gt;         renderer2d?))<br>&gt;&gt;       (#:bgcolor<br>&gt;&gt;    =
     (or/c<br>&gt;&gt;         exact-integer?<br>&gt;&gt;         (or/c<br>&=
 gt;&gt;          (list/c real? real? real?)<br>&gt;&gt;          string?<br=
 >
 &gt;&gt;          symbol?<br>&gt;&gt;          (is-a?/c class:color%)))<br>=
 &gt;&gt;        #:fgcolor<br>&gt;&gt;        (or/c<br>&gt;&gt;         exac=
 t-integer?<br>&gt;&gt;         (or/c<br>&gt;&gt;          (list/c real? rea=
 l? real?)<br>
 &gt;&gt;          string?<br>&gt;&gt;          symbol?<br>&gt;&gt;         =
  (is-a?/c class:color%)))<br>&gt;&gt;        #:height<br>&gt;&gt;        (a=
 nd/c integer? (&gt;=3D/c 1))<br>&gt;&gt;        #:legend-anchor<br>&gt;&gt;=
         (symbols<br>
 &gt;&gt;         &#39;top-left<br>&gt;&gt;         &#39;top<br>&gt;&gt;    =
      &#39;top-right<br>&gt;&gt;         &#39;left<br>&gt;&gt;         &#39;=
 center<br>&gt;&gt;         &#39;right<br>&gt;&gt;         &#39;bottom-left<=
 br>
 &gt;&gt;         &#39;bottom<br>&gt;&gt;         &#39;bottom-right)<br>&gt;=
 &gt;        #:lncolor<br>&gt;&gt;        (or/c<br>&gt;&gt;         exact-in=
 teger?<br>&gt;&gt;         (or/c<br>&gt;&gt;          (list/c real? real? r=
 eal?)<br>
 &gt;&gt;          string?<br>&gt;&gt;          symbol?<br>&gt;&gt;         =
  (is-a?/c class:color%)))<br>&gt;&gt;        #:out-file<br>&gt;&gt;        =
 (or/c path-string? output-port? #f)<br>&gt;&gt;        #:out-kind<br>&gt;&g=
 t;        (symbols<br>
 &gt;&gt;         &#39;auto<br>&gt;&gt;         &#39;png<br>&gt;&gt;        =
  &#39;jpeg<br>&gt;&gt;         &#39;xmb<br>&gt;&gt;         &#39;xpm<br>&gt=
 ;&gt;         &#39;bmp<br>&gt;&gt;         &#39;ps<br>&gt;&gt;         &#39=
 ;pdf<br>
 &gt;&gt;         &#39;svg)<br>&gt;&gt;        #:title<br>&gt;&gt;        (o=
 r/c string? #f)<br>&gt;&gt;        #:width<br>&gt;&gt;        (and/c intege=
 r? (&gt;=3D/c 1))<br>&gt;&gt;        #:x-label<br>&gt;&gt;        (or/c str=
 ing? #f)<br>
 &gt;&gt;        #:x-max<br>&gt;&gt;        (or/c real? #f)<br>&gt;&gt;     =
    #:x-min<br>&gt;&gt;        (or/c real? #f)<br>&gt;&gt;        #:y-label<=
 br>&gt;&gt;        (or/c string? #f)<br>&gt;&gt;        #:y-max<br>&gt;&gt;=
         (or/c real? #f)<br>
 &gt;&gt;        #:y-min<br>&gt;&gt;        (or/c real? #f))<br>&gt;&gt;    =
    (or/c (is-a?/c class:snip%) void?))<br>&gt;&gt;    at:&lt;collects&gt;/p=
 lot/plot2d/plot.rkt<br>&gt;&gt;<br>&gt;&gt; *** How to repeat:<br>&gt;&gt;<=
 br>
 &gt;&gt;<br>&gt;&gt; *** Environment:<br>&gt;&gt; unix &quot;Linux punge 2.=
 6.38-11-generic #48-Ubuntu SMP Fri Jul 29 19:05:14 UTC 2011 i686 i686 i386 =
 GNU/Linux&quot; (i386-linux/3m) (get-display-depth) =3D 32<br>&gt;&gt; Huma=
 n Language: english<br>
 &gt;&gt; (current-memory-use) 286451692<br>&gt;&gt; Links: (links) =3D (&qu=
 ot;gcstat&quot; &quot;raco-git&quot; &quot;disassemble&quot;); (links #:use=
 r? #f) =3D (); (links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D=
  ()<br>
 &gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Collections:<br>&gt;&gt; (&quot;/home/samt=
 h/sw/plt/add-on/<a href=3D"http://5.1.3.12/collects">5.1.3.12/collects</a>&=
 quot;<br>&gt;&gt;   (non-existent-path))<br>&gt;&gt; (&quot;/home/samth/sw/=
 plt/collects&quot;<br>
 &gt;&gt;   (&quot;db&quot; &quot;honu&quot; &quot;eopl&quot; &quot;tests&qu=
 ot; &quot;typed&quot; &quot;test-engine&quot; &quot;errortrace&quot; &quot;=
 sgl&quot; &quot;plot&quot; &quot;combinator-parser&quot; &quot;mzcom&quot; =
 &quot;test-box-recovery&quot; &quot;version&quot; &quot;.gitignore&quot; &q=
 uot;defaults&quot; &quot;deinprogramm&quot; &quot;s-exp&quot; &quot;handin-=
 client&quot; &quot;srpersist&quot; &quot;launcher&quot; &quot;scriblib&quot=
 ; &quot;browser&quot; &quot;unstable&quot; &quot;r5rs&quot; &quot;gui-debug=
 ger&quot; &quot;at-exp&quot; &quot;swindle&quot; &quot;scheme&quot; &quot;r=
 eader&quot; &quot;frtime&quot; &quot;meta&quot; &quot;racket&quot; &quot;fi=
 le&quot; &quot;racklog&quot; &quot;data&quot; &quot;slatex&quot; &quot;net&=
 quot; &quot;wxme&quot; &quot;syntax&quot; &quot;scribblings&quot; &quot;par=
 ser-tools&quot; &quot;ffi&quot; &quot;hierlist&quot; &quot;handin-server&qu=
 ot; &quot;2htdp&quot; &quot;framework&quot; &quot;mz&quot; &quot;openssl&qu=
 ot; &quot;dynext&quot; &quot;datalog&quot; &quot;slideshow&quot; &quot;game=
 s&quot; &quot;raco&quot; &quot;picturing-programs&quot; &quot;xml&quot; &qu=
 ot;texpict&quot; &quot;graphics&quot; &quot;mzscheme&quot; &quot;profile&qu=
 ot; &quot;help&quot; &quot;web-server&quot; &quot;schelog&quot; &quot;trace=
 &quot; &quot;make&quot; &quot;algol60&quot; &quot;mzlib&quot; &quot;rackuni=
 t&quot; &quot;icons&quot; &quot;plai&quot; &quot;sirmail&quot; &quot;lazy&q=
 uot; &quot;mrlib&quot; &quot;setup&quot; &quot;xrepl&quot; &quot;string-con=
 stants&quot; &quot;typed-racket&quot; &quot;syntax-color&quot; &quot;r6rs&q=
 uot; &quot;drscheme&quot; &quot;lang&quot; &quot;repo-time-stamp&quot; &quo=
 t;afm&quot; &quot;planet&quot; &quot;typed-scheme&quot; &quot;info-domain&q=
 uot; &quot;config&quot; &quot;guibuilder&quot; &quot;stepper&quot; &quot;mr=
 ed&quot; &quot;embedded-gui&quot; &quot;preprocessor&quot; &quot;readline&q=
 uot; &quot;htdp&quot; &quot;compiler&quot; &quot;srfi&quot; &quot;waterworl=
 d&quot;<br>
 &gt;  &quot;!<br>&gt;&gt;   macro-debugger&quot; &quot;html&quot; &quot;scr=
 ibble&quot; &quot;mysterx&quot; &quot;redex&quot; &quot;drracket&quot; &quo=
 t;rnrs&quot; &quot;teachpack&quot; &quot;tex2page&quot; &quot;schemeunit&qu=
 ot;))<br>
 &gt;&gt;<br>&gt;&gt; Computer Language: ((&quot;Determine language from sou=
 rce&quot;) (#(#t print mixed-fraction-e #f #t none) (default) #() &quot;#la=
 ng racket\n&quot; #t #t))<br>&gt;&gt;<br>&gt; <br></div>
 
 --0015173feec4360f3904aeabaf24--
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bug-notification@racket-lang.org, nobody@racket-lang.org,
        bugs@racket-lang.org
Subject: Re: [racket-bug] all/12262: plot violates its own contract
Date: Thu, 06 Oct 2011 20:27:11 -0600

 Ah. I mistakenly interpreted "violates its own contract" as a 
 "self-contract violation," which I didn't see in the error message, and 
 didn't look any further.
 
 Well, that being the gist of the report... either I misunderstand blame 
 altogether or there's a bug in the contract system. Consider this 
 stripped-down reproduction of the problem:
 
 #lang racket/load
 
 (module provider racket
    (define/contract (takes-a-list xs) ((listof real?) . -> . void?)
      (void))
    (provide takes-a-list))
 
 (require 'provider)
 (takes-a-list (λ (x) x))
 
 => takes-a-list: contract violation, expected: list, given: #<procedure>
    contract from: (function takes-a-list), blaming: provider
    contract: (-> (listof real?) void?)
          at: unsaved-editor104188:4.20
 
 
 Whether I'm wrong or the blame is wrong, I'll reopen the bug.
 
 Neil T
 
 On 10/06/2011 07:51 PM, Sam Tobin-Hochstadt wrote:
 > I realize that this isn't the intended usage.  But your code is being
 > induced to violate its own contract -- the blame is assigned to the plot
 > library. So either your code or your contract should change.
 >
 > sam th
 >
 > On Oct 6, 2011 7:35 PM, "Neil Toronto" <neil.toronto@gmail.com
 > <mailto:neil.toronto@gmail.com>> wrote:
 >  > That should be 'p:plot' at the beginning of line 6, which takes a
 >  > procedure as an argument, as produced by 'p:mix'. The contracts are all
 >  > working fine.
 >  >
 >  > I'll put a big warning at the top of the documentation of 'plot/compat'
 >  > that it shouldn't be required along with 'plot'.
 >  >
 >  > Neil T
 >  >
 >  > On 10/06/2011 03:08 PM, samth@ccs.neu.edu <mailto:samth@ccs.neu.edu>
 > wrote:
 >  >> A new problem report is waiting at
 >  >> http://bugs.racket-lang.org/query/?cmd=view&pr=12262
 > <http://bugs.racket-lang.org/query/?cmd=view&pr=12262>
 >  >>
 >  >> Reported by Sam TH for release: 5.1.3.12--2011-10-06(53c609a/g)
 >  >>
 >  >> *** Description:
 >  >> The following program (adapted from the front page)
 >  >>
 >  >> #lang racket ; draw a graph of cos
 >  >> (require (prefix-in p: plot/compat) plot) ; and deriv^3(cos)
 >  >> (define ((deriv f) x)
 >  >> (/ (- (f x) (f (- x 0.001))) 0.001))
 >  >> (define (thrice f) (lambda (x) (f (f (f x)))))
 >  >> (plot (p:mix (p:line ((thrice deriv) sin) #:color 'red)
 >  >> (p:line cos #:color 'blue)))
 >  >>
 >  >> Produces a contract error as follows:
 >  >>
 >  >> /sw/plt/collects/racket/contract/private/blame.rkt:58:0: plot:
 > contract violation, expected: list, given: #<procedure:f>
 >  >> contract from: (function plot), blaming:
 >  >> <collects>/plot/plot2d/plot.rkt
 >  >> contract:
 >  >> (->*
 >  >> ((or/c
 >  >> (listof
 >  >> (recursive-contract (treeof contract)))
 >  >> renderer2d?))
 >  >> (#:bgcolor
 >  >> (or/c
 >  >> exact-integer?
 >  >> (or/c
 >  >> (list/c real? real? real?)
 >  >> string?
 >  >> symbol?
 >  >> (is-a?/c class:color%)))
 >  >> #:fgcolor
 >  >> (or/c
 >  >> exact-integer?
 >  >> (or/c
 >  >> (list/c real? real? real?)
 >  >> string?
 >  >> symbol?
 >  >> (is-a?/c class:color%)))
 >  >> #:height
 >  >> (and/c integer? (>=/c 1))
 >  >> #:legend-anchor
 >  >> (symbols
 >  >> 'top-left
 >  >> 'top
 >  >> 'top-right
 >  >> 'left
 >  >> 'center
 >  >> 'right
 >  >> 'bottom-left
 >  >> 'bottom
 >  >> 'bottom-right)
 >  >> #:lncolor
 >  >> (or/c
 >  >> exact-integer?
 >  >> (or/c
 >  >> (list/c real? real? real?)
 >  >> string?
 >  >> symbol?
 >  >> (is-a?/c class:color%)))
 >  >> #:out-file
 >  >> (or/c path-string? output-port? #f)
 >  >> #:out-kind
 >  >> (symbols
 >  >> 'auto
 >  >> 'png
 >  >> 'jpeg
 >  >> 'xmb
 >  >> 'xpm
 >  >> 'bmp
 >  >> 'ps
 >  >> 'pdf
 >  >> 'svg)
 >  >> #:title
 >  >> (or/c string? #f)
 >  >> #:width
 >  >> (and/c integer? (>=/c 1))
 >  >> #:x-label
 >  >> (or/c string? #f)
 >  >> #:x-max
 >  >> (or/c real? #f)
 >  >> #:x-min
 >  >> (or/c real? #f)
 >  >> #:y-label
 >  >> (or/c string? #f)
 >  >> #:y-max
 >  >> (or/c real? #f)
 >  >> #:y-min
 >  >> (or/c real? #f))
 >  >> (or/c (is-a?/c class:snip%) void?))
 >  >> at:<collects>/plot/plot2d/plot.rkt
 >  >>
 >  >> *** How to repeat:
 >  >>
 >  >>
 >  >> *** Environment:
 >  >> unix "Linux punge 2.6.38-11-generic #48-Ubuntu SMP Fri Jul 29
 > 19:05:14 UTC 2011 i686 i686 i386 GNU/Linux" (i386-linux/3m)
 > (get-display-depth) = 32
 >  >> Human Language: english
 >  >> (current-memory-use) 286451692
 >  >> Links: (links) = ("gcstat" "raco-git" "disassemble"); (links #:user?
 > #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >  >>
 >  >>
 >  >> Collections:
 >  >> ("/home/samth/sw/plt/add-on/5.1.3.12/collects
 > <http://5.1.3.12/collects>"
 >  >> (non-existent-path))
 >  >> ("/home/samth/sw/plt/collects"
 >  >> ("db" "honu" "eopl" "tests" "typed" "test-engine" "errortrace" "sgl"
 > "plot" "combinator-parser" "mzcom" "test-box-recovery" "version"
 > ".gitignore" "defaults" "deinprogramm" "s-exp" "handin-client"
 > "srpersist" "launcher" "scriblib" "browser" "unstable" "r5rs"
 > "gui-debugger" "at-exp" "swindle" "scheme" "reader" "frtime" "meta"
 > "racket" "file" "racklog" "data" "slatex" "net" "wxme" "syntax"
 > "scribblings" "parser-tools" "ffi" "hierlist" "handin-server" "2htdp"
 > "framework" "mz" "openssl" "dynext" "datalog" "slideshow" "games" "raco"
 > "picturing-programs" "xml" "texpict" "graphics" "mzscheme" "profile"
 > "help" "web-server" "schelog" "trace" "make" "algol60" "mzlib"
 > "rackunit" "icons" "plai" "sirmail" "lazy" "mrlib" "setup" "xrepl"
 > "string-constants" "typed-racket" "syntax-color" "r6rs" "drscheme"
 > "lang" "repo-time-stamp" "afm" "planet" "typed-scheme" "info-domain"
 > "config" "guibuilder" "stepper" "mred" "embedded-gui" "preprocessor"
 > "readline" "htdp" "compiler" "srfi" "waterworld"
 >  > "!
 >  >> macro-debugger" "html" "scribble" "mysterx" "redex" "drracket"
 > "rnrs" "teachpack" "tex2page" "schemeunit"))
 >  >>
 >  >> Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t))
 >  >>
 >  >
 

State changed from "closed" to "open" by ntoronto at Thu, 06 Oct 2011 22:28:37 -0400
Reason>>> Either I misunderstand blame or blame is being misassigned.

From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bug-notification@racket-lang.org, nobody@racket-lang.org,
        bugs@racket-lang.org
Subject: Re: [racket-bug] all/12262: plot violates its own contract
Date: Thu, 6 Oct 2011 22:45:40 -0400

 On Thu, Oct 6, 2011 at 10:27 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > Ah. I mistakenly interpreted "violates its own contract" as a "self-contract
 > violation," which I didn't see in the error message, and didn't look any
 > further.
 >
 > Well, that being the gist of the report... either I misunderstand blame
 > altogether or there's a bug in the contract system. Consider this
 > stripped-down reproduction of the problem:
 >
 > #lang racket/load
 >
 > (module provider racket
 >  (define/contract (takes-a-list xs) ((listof real?) . -> . void?)
 >    (void))
 >  (provide takes-a-list))
 >
 > (require 'provider)
 > (takes-a-list (λ (x) x))
 >
 > => takes-a-list: contract violation, expected: list, given: #<procedure>
 >  contract from: (function takes-a-list), blaming: provider
 >  contract: (-> (listof real?) void?)
 >        at: unsaved-editor104188:4.20
 
 This is blaming `provider', the module, not the function
 `takes-a-list'.  provider broke the contract -- it wasn't supposed to
 let bad things happen to takes a list, and yet it did.  The only
 contract here was between the module (provider) and the function
 (takes-a-list), the provider side didn't uphold its end, and it was
 blamed.
 
 Does that make sense?
 
 >
 >
 > Whether I'm wrong or the blame is wrong, I'll reopen the bug.
 >
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Neil Toronto <neil.toronto@gmail.com>, bug-notification@racket-lang.org,
        nobody@racket-lang.org, bugs@racket-lang.org
Subject: Re: [racket-bug] all/12262: plot violates its own contract
Date: Fri, 7 Oct 2011 05:12:56 -0500

 On Thu, Oct 6, 2011 at 9:45 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Thu, Oct 6, 2011 at 10:27 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 >> Ah. I mistakenly interpreted "violates its own contract" as a "self-contract
 >> violation," which I didn't see in the error message, and didn't look any
 >> further.
 >>
 >> Well, that being the gist of the report... either I misunderstand blame
 >> altogether or there's a bug in the contract system. Consider this
 >> stripped-down reproduction of the problem:
 >>
 >> #lang racket/load
 >>
 >> (module provider racket
 >>  (define/contract (takes-a-list xs) ((listof real?) . -> . void?)
 >>    (void))
 >>  (provide takes-a-list))
 >>
 >> (require 'provider)
 >> (takes-a-list (λ (x) x))
 >>
 >> => takes-a-list: contract violation, expected: list, given: #<procedure>
 >>  contract from: (function takes-a-list), blaming: provider
 >>  contract: (-> (listof real?) void?)
 >>        at: unsaved-editor104188:4.20
 >
 > This is blaming `provider', the module, not the function
 > `takes-a-list'.  provider broke the contract -- it wasn't supposed to
 > let bad things happen to takes a list, and yet it did.  The only
 > contract here was between the module (provider) and the function
 > (takes-a-list), the provider side didn't uphold its end, and it was
 > blamed.
 >
 
 IOW, `define/contract' plus `provide' is not the same as `provide/contract'.
 

State changed from "open" to "closed" by ntoronto at Thu, 10 Nov 2011 15:53:11 -0500
Reason>>> Fixed in 5.2.0.2 by push #23836

