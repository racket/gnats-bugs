From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri May  8 02:56:06 2015
Received: from mail-ig0-f173.google.com (mail-ig0-f173.google.com [209.85.213.173])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t486tvoC018883
	for <bugs@bugs.plt-scheme.org>; Fri, 8 May 2015 02:55:58 -0400
Message-Id: <201505080655.t486tsUU018876@winooski.ccs.neu.edu>
Date: Fri, 8 May 2015 02:55:54 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Obscure contract error message

>Number:         15057
>Category:       all
>Synopsis:       Obscure contract error message
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri May 08 03:00:01 -0400 2015
>Closed-Date:    Sat May 09 13:02:51 -0400 2015
>Last-Modified:  Sat May 09 23:08:01 -0400 2015
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        Any
>Environment:
Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36
>Description:
I know that this is complicated etc, so feel free to dismiss it.

See the message below (leading to a separate PR).

It took me a while to figure out what it's saying.

1. It would help if the first line said "broke its own contract", which
   would be a better hint that something is wrong in the file.

2. Second, it says "received" as if it's `with-writer` that is the
   subject, but it's really talking about the argument that was passed
   to it.  "promised" is similarly confusing, maybe even more (since it
   *is* `with-writer` that did the promising, right?  Or at least its
   (broken) contract.)

3. "a disjunct" is a term that, I'm guessing, doesn't work for most
   people.  Why not "a part"?  -- It seems not too important to know
   that it's a disjunct since that information is in the contract
   anyway.

4. The path description thing also looks like an overkill, both in being
   complicated, and in including the whole contract, which can be as bad
   as some TR type errors...  I think that it would be better to show
   just the broken part, and then say that it's a part of <the whole
   thing>.

5. The pretty-printing made the contract part take a large amount of
   space, which obscures the rest.  (I removed the newlines below.)

6. The error context includes the contract code, it would be better to
   avoid that.

To summarize, I think that this reads better:

    with-writer: broke its own contract
      a contracted function received 4 arguments, promised: 2 to 3 non-keyword arguments
      in: (->* (string? output-port?) (exact-nonnegative-integer?) any/c)
      which is a part of
               the 1st argument of
               (->* ((or/c #f (->* (string? output-port?) (exact-nonnegative-integer?) any/c))) #:rest (listof outputable/c) any/c)
      contract from: 
          <pkgs>/scribble-text-lib/scribble/text/output.rkt
      blaming: <pkgs>/scribble-text-lib/scribble/text/output.rkt
       (assuming the contract is correct)
      at: <pkgs>/scribble-text-lib/scribble/text/output.rkt:276.25
      context...:
        /home/eli/plt/share/pkgs/scribble-text-lib/scribble/text/output.rkt:86:2: output-string
        ...
>How-To-Repeat:
with-writer: broke its contract
  received 4 arguments
  promised: 2 to 3 non-keyword arguments
  in: a disjunct of
      the 1st argument of
      (->* ((or/c #f (->* (string? output-port?) (exact-nonnegative-integer?) any/c))) #:rest (listof outputable/c) any/c)
  contract from: 
      <pkgs>/scribble-text-lib/scribble/text/output.rkt
  blaming: <pkgs>/scribble-text-lib/scribble/text/output.rkt
   (assuming the contract is correct)
  at: <pkgs>/scribble-text-lib/scribble/text/output.rkt:276.25
  context...:
   /home/eli/plt/x86_64-linux/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
   /home/eli/plt/x86_64-linux/collects/racket/contract/private/arrow.rkt:449:11: basic-checker-name
   /home/eli/plt/share/pkgs/scribble-text-lib/scribble/text/output.rkt:86:2: output-string
...
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15057: Obscure contract error message
Date: Fri, 8 May 2015 06:48:57 -0500

 Thanks, Eli. I htink I understand all of these except point 6. Are you
 talking about somehow removing something from the stacktrace?
 
 Robby
 
 On Fri, May 8, 2015 at 2:00 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15057
 >
 > Reported by Eli Barzilay for release: Any
 >
 > *** Description:
 > I know that this is complicated etc, so feel free to dismiss it.
 >
 > See the message below (leading to a separate PR).
 >
 > It took me a while to figure out what it's saying.
 >
 > 1. It would help if the first line said "broke its own contract", which
 >    would be a better hint that something is wrong in the file.
 >
 > 2. Second, it says "received" as if it's `with-writer` that is the
 >    subject, but it's really talking about the argument that was passed
 >    to it.  "promised" is similarly confusing, maybe even more (since it
 >    *is* `with-writer` that did the promising, right?  Or at least its
 >    (broken) contract.)
 >
 > 3. "a disjunct" is a term that, I'm guessing, doesn't work for most
 >    people.  Why not "a part"?  -- It seems not too important to know
 >    that it's a disjunct since that information is in the contract
 >    anyway.
 >
 > 4. The path description thing also looks like an overkill, both in being
 >    complicated, and in including the whole contract, which can be as bad
 >    as some TR type errors...  I think that it would be better to show
 >    just the broken part, and then say that it's a part of <the whole
 >    thing>.
 >
 > 5. The pretty-printing made the contract part take a large amount of
 >    space, which obscures the rest.  (I removed the newlines below.)
 >
 > 6. The error context includes the contract code, it would be better to
 >    avoid that.
 >
 > To summarize, I think that this reads better:
 >
 >     with-writer: broke its own contract
 >       a contracted function received 4 arguments, promised: 2 to 3 non-keyword arguments
 >       in: (->* (string? output-port?) (exact-nonnegative-integer?) any/c)
 >       which is a part of
 >                the 1st argument of
 >                (->* ((or/c #f (->* (string? output-port?) (exact-nonnegative-integer?) any/c))) #:rest (listof outputable/c) any/c)
 >       contract from:
 >           <pkgs>/scribble-text-lib/scribble/text/output.rkt
 >       blaming: <pkgs>/scribble-text-lib/scribble/text/output.rkt
 >        (assuming the contract is correct)
 >       at: <pkgs>/scribble-text-lib/scribble/text/output.rkt:276.25
 >       context...:
 >         /home/eli/plt/share/pkgs/scribble-text-lib/scribble/text/output.rkt:86:2: output-string
 >         ...
 >
 > *** How to repeat:
 > with-writer: broke its contract
 >   received 4 arguments
 >   promised: 2 to 3 non-keyword arguments
 >   in: a disjunct of
 >       the 1st argument of
 >       (->* ((or/c #f (->* (string? output-port?) (exact-nonnegative-integer?) any/c))) #:rest (listof outputable/c) any/c)
 >   contract from:
 >       <pkgs>/scribble-text-lib/scribble/text/output.rkt
 >   blaming: <pkgs>/scribble-text-lib/scribble/text/output.rkt
 >    (assuming the contract is correct)
 >   at: <pkgs>/scribble-text-lib/scribble/text/output.rkt:276.25
 >   context...:
 >    /home/eli/plt/x86_64-linux/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
 >    /home/eli/plt/x86_64-linux/collects/racket/contract/private/arrow.rkt:449:11: basic-checker-name
 >    /home/eli/plt/share/pkgs/scribble-text-lib/scribble/text/output.rkt:86:2: output-string
 > ...
 >
 > *** Environment:
 > Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36
 >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15057: Obscure contract error message
Date: Fri, 8 May 2015 10:43:51 -0400

 Yeah -- something like the drracket code that removes the drr frames
 from the context, only IIRC the problem there was removing frame from
 the other side.
 
 Actually, I vaguely remember talking about it several times.  I think
 that the idea was to make it possible to remove such frames from code
 which is basically error-throwing helpers (which in the case of contract
 errors is a lot of code).  For example, if it was cheap enough, then the
 contract code could put some continuation mark on its entry points, and
 filter out context frames above that mark if it throws an error.  (But a
 mark is probably too expensive for every contract check?)
 
 In any case, I think that compared to the other problems, this was among
 the weakest.
 
 
 On Fri, May 8, 2015 at 7:48 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Thanks, Eli. I htink I understand all of these except point 6. Are you
 > talking about somehow removing something from the stacktrace?
 >
 > Robby
 >
 > On Fri, May 8, 2015 at 2:00 AM,  <eli@barzilay.org> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=15057
 >>
 >> Reported by Eli Barzilay for release: Any
 >>
 >> *** Description:
 >> I know that this is complicated etc, so feel free to dismiss it.
 >>
 >> See the message below (leading to a separate PR).
 >>
 >> It took me a while to figure out what it's saying.
 >>
 >> 1. It would help if the first line said "broke its own contract", which
 >>    would be a better hint that something is wrong in the file.
 >>
 >> 2. Second, it says "received" as if it's `with-writer` that is the
 >>    subject, but it's really talking about the argument that was passed
 >>    to it.  "promised" is similarly confusing, maybe even more (since it
 >>    *is* `with-writer` that did the promising, right?  Or at least its
 >>    (broken) contract.)
 >>
 >> 3. "a disjunct" is a term that, I'm guessing, doesn't work for most
 >>    people.  Why not "a part"?  -- It seems not too important to know
 >>    that it's a disjunct since that information is in the contract
 >>    anyway.
 >>
 >> 4. The path description thing also looks like an overkill, both in being
 >>    complicated, and in including the whole contract, which can be as bad
 >>    as some TR type errors...  I think that it would be better to show
 >>    just the broken part, and then say that it's a part of <the whole
 >>    thing>.
 >>
 >> 5. The pretty-printing made the contract part take a large amount of
 >>    space, which obscures the rest.  (I removed the newlines below.)
 >>
 >> 6. The error context includes the contract code, it would be better to
 >>    avoid that.
 >>
 >> To summarize, I think that this reads better:
 >>
 >>     with-writer: broke its own contract
 >>       a contracted function received 4 arguments, promised: 2 to 3 non-keyword arguments
 >>       in: (->* (string? output-port?) (exact-nonnegative-integer?) any/c)
 >>       which is a part of
 >>                the 1st argument of
 >>                (->* ((or/c #f (->* (string? output-port?) (exact-nonnegative-integer?) any/c))) #:rest (listof outputable/c) any/c)
 >>       contract from:
 >>           <pkgs>/scribble-text-lib/scribble/text/output.rkt
 >>       blaming: <pkgs>/scribble-text-lib/scribble/text/output.rkt
 >>        (assuming the contract is correct)
 >>       at: <pkgs>/scribble-text-lib/scribble/text/output.rkt:276.25
 >>       context...:
 >>         /home/eli/plt/share/pkgs/scribble-text-lib/scribble/text/output.rkt:86:2: output-string
 >>         ...
 >>
 >> *** How to repeat:
 >> with-writer: broke its contract
 >>   received 4 arguments
 >>   promised: 2 to 3 non-keyword arguments
 >>   in: a disjunct of
 >>       the 1st argument of
 >>       (->* ((or/c #f (->* (string? output-port?) (exact-nonnegative-integer?) any/c))) #:rest (listof outputable/c) any/c)
 >>   contract from:
 >>       <pkgs>/scribble-text-lib/scribble/text/output.rkt
 >>   blaming: <pkgs>/scribble-text-lib/scribble/text/output.rkt
 >>    (assuming the contract is correct)
 >>   at: <pkgs>/scribble-text-lib/scribble/text/output.rkt:276.25
 >>   context...:
 >>    /home/eli/plt/x86_64-linux/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
 >>    /home/eli/plt/x86_64-linux/collects/racket/contract/private/arrow.rkt:449:11: basic-checker-name
 >>    /home/eli/plt/share/pkgs/scribble-text-lib/scribble/text/output.rkt:86:2: output-string
 >> ...
 >>
 >> *** Environment:
 >> Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36
 >>
 
 
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Sat, 09 May 2015 13:02:51 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/7fb67ad644
State changed from "open" to "closed" by robby@racket-lang.org at Sat, 09 May 2015 13:02:51 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/7fb67ad644
  | improve error messages from contract system
  | 
  | closes PR 15057

From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15057: Obscure contract error message
Date: Sat, 9 May 2015 12:02:48 -0500

 Okay, I've made some changes. Further suggestions welcome. I've closed
 the PR, but that's mostly because I'm overwhelmed in open PRs. Feel
 free to re-open if you think there is something more that I'm capable
 of fixing. More comments below.
 
 Thanks,
 Robby
 
 
 1. fixed
 
 2. I changed "received" to "supplied"; as for "promised", this text is
 all written with teh assumption that the code is wrong and the
 contract is right. I agree this isn't a valid assumption, but it seems
 hard (and perhaps more confusing) to weave that uncertainty into
 everything.
 
 3. went with "in: a part of the or/c of" because not all of the things
 that can follow "in:" will be grammatically correct with the "which is
 a" prefix, I don't think
 
 4. I agree, except that the broken part is supposed to be the
 "recieved/promised" lines. That's why they come first. The whole thing
 is there later, just in case someone finds some extra clues there that
 are useful (which I have in past occasions).
 
 5. it pretty-prints it when it is over a certain size. I find the
 newlines helpful. FWIW.
 
 6. I don't know how to improve that and anyway, it isn't really part
 of the contract system, but instead part of the way error messages in
 general are printed.
 
 This program (which I think is the same contract violation as the one
 you reported):
 
 #lang racket/base
 (require racket/contract/base)
 
 ((contract (->* ((or/c #f (->* (string? output-port?)
 (exact-nonnegative-integer?) any/c)))
                 #:rest
                 (listof any/c)
                 any/c)
            (λ (f . whatever)
              (f 1 2 3 4))
            'pos 'neg)
  (λ whatever 1))
 
 
 now produces this output:
 
 ...Users/robby/tmp2.rkt:4:1: broke its own contract
   supplied: 4 arguments
   promised: 2 or 3 non-keyword arguments
   in: a part of the or/c of
       the 1st argument of
       (->*
        ((or/c
          #f
          (->*
           (string? output-port?)
           (exact-nonnegative-integer?)
           any/c)))
        #:rest
        (listof any/c)
        any/c)
   contract from: pos
   blaming: pos
    (assuming the contract is correct)
   context...:
    /Users/robby/git/plt/racket/collects/racket/contract/private/blame.rkt:143:0:
 raise-blame-error16
    /Users/robby/git/plt/racket/collects/racket/contract/private/arrow.rkt:457:11:
 basic-checker-name
    /Users/robby/tmp2.rkt: [running body]
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15057: Obscure contract error message
Date: Sat, 9 May 2015 21:14:51 -0500

 --001a1137681699c3520515b0d3b6
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 No, supplied and received are. At least that's what the library does now.
 It looks at the direction and uses on of those for errors like Eli's
 example. (It would use the other if you put everything to the left of an
 arrow in the example.)
 
 Robby
 
 On Saturday, May 9, 2015, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 
 >
 > Are the words "supplied" and "promised" really parallel here?
 >
 >
 > On May 9, 2015, at 1:02 PM, Robby Findler wrote:
 >
 > > Okay, I've made some changes. Further suggestions welcome. I've closed
 > > the PR, but that's mostly because I'm overwhelmed in open PRs. Feel
 > > free to re-open if you think there is something more that I'm capable
 > > of fixing. More comments below.
 > >
 > > Thanks,
 > > Robby
 > >
 > >
 > > 1. fixed
 > >
 > > 2. I changed "received" to "supplied"; as for "promised", this text is
 > > all written with teh assumption that the code is wrong and the
 > > contract is right. I agree this isn't a valid assumption, but it seems
 > > hard (and perhaps more confusing) to weave that uncertainty into
 > > everything.
 > >
 > > 3. went with "in: a part of the or/c of" because not all of the things
 > > that can follow "in:" will be grammatically correct with the "which is
 > > a" prefix, I don't think
 > >
 > > 4. I agree, except that the broken part is supposed to be the
 > > "recieved/promised" lines. That's why they come first. The whole thing
 > > is there later, just in case someone finds some extra clues there that
 > > are useful (which I have in past occasions).
 > >
 > > 5. it pretty-prints it when it is over a certain size. I find the
 > > newlines helpful. FWIW.
 > >
 > > 6. I don't know how to improve that and anyway, it isn't really part
 > > of the contract system, but instead part of the way error messages in
 > > general are printed.
 > >
 > > This program (which I think is the same contract violation as the one
 > > you reported):
 > >
 > > #lang racket/base
 > > (require racket/contract/base)
 > >
 > > ((contract (->* ((or/c #f (->* (string? output-port?)
 > > (exact-nonnegative-integer?) any/c)))
 > >                #:rest
 > >                (listof any/c)
 > >                any/c)
 > >           (=CE=BB (f . whatever)
 > >             (f 1 2 3 4))
 > >           'pos 'neg)
 > > (=CE=BB whatever 1))
 > >
 > >
 > > now produces this output:
 > >
 > > ...Users/robby/tmp2.rkt:4:1: broke its own contract
 > >  supplied: 4 arguments
 > >  promised: 2 or 3 non-keyword arguments
 > >  in: a part of the or/c of
 > >      the 1st argument of
 > >      (->*
 > >       ((or/c
 > >         #f
 > >         (->*
 > >          (string? output-port?)
 > >          (exact-nonnegative-integer?)
 > >          any/c)))
 > >       #:rest
 > >       (listof any/c)
 > >       any/c)
 > >  contract from: pos
 > >  blaming: pos
 > >   (assuming the contract is correct)
 > >  context...:
 > >
 >  /Users/robby/git/plt/racket/collects/racket/contract/private/blame.rkt:1=
 43:0:
 > > raise-blame-error16
 > >
 >  /Users/robby/git/plt/racket/collects/racket/contract/private/arrow.rkt:4=
 57:11:
 > > basic-checker-name
 > >   /Users/robby/tmp2.rkt: [running body]
 >
 >
 
 --001a1137681699c3520515b0d3b6
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 No, supplied and received are. At least that&#39;s what the library does no=
 w. It looks at the direction and uses on of those for errors like Eli&#39;s=
  example. (It would use the other if you put everything to the left of an a=
 rrow in the example.)<div><br></div><div>Robby<br><br>On Saturday, May 9, 2=
 015, Matthias Felleisen &lt;<a href=3D"mailto:matthias@ccs.neu.edu">matthia=
 s@ccs.neu.edu</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"=
 margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
 Are the words &quot;supplied&quot; and &quot;promised&quot; really parallel=
  here?<br>
 <br>
 <br>
 On May 9, 2015, at 1:02 PM, Robby Findler wrote:<br>
 <br>
 &gt; Okay, I&#39;ve made some changes. Further suggestions welcome. I&#39;v=
 e closed<br>
 &gt; the PR, but that&#39;s mostly because I&#39;m overwhelmed in open PRs.=
  Feel<br>
 &gt; free to re-open if you think there is something more that I&#39;m capa=
 ble<br>
 &gt; of fixing. More comments below.<br>
 &gt;<br>
 &gt; Thanks,<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; 1. fixed<br>
 &gt;<br>
 &gt; 2. I changed &quot;received&quot; to &quot;supplied&quot;; as for &quo=
 t;promised&quot;, this text is<br>
 &gt; all written with teh assumption that the code is wrong and the<br>
 &gt; contract is right. I agree this isn&#39;t a valid assumption, but it s=
 eems<br>
 &gt; hard (and perhaps more confusing) to weave that uncertainty into<br>
 &gt; everything.<br>
 &gt;<br>
 &gt; 3. went with &quot;in: a part of the or/c of&quot; because not all of =
 the things<br>
 &gt; that can follow &quot;in:&quot; will be grammatically correct with the=
  &quot;which is<br>
 &gt; a&quot; prefix, I don&#39;t think<br>
 &gt;<br>
 &gt; 4. I agree, except that the broken part is supposed to be the<br>
 &gt; &quot;recieved/promised&quot; lines. That&#39;s why they come first. T=
 he whole thing<br>
 &gt; is there later, just in case someone finds some extra clues there that=
 <br>
 &gt; are useful (which I have in past occasions).<br>
 &gt;<br>
 &gt; 5. it pretty-prints it when it is over a certain size. I find the<br>
 &gt; newlines helpful. FWIW.<br>
 &gt;<br>
 &gt; 6. I don&#39;t know how to improve that and anyway, it isn&#39;t reall=
 y part<br>
 &gt; of the contract system, but instead part of the way error messages in<=
 br>
 &gt; general are printed.<br>
 &gt;<br>
 &gt; This program (which I think is the same contract violation as the one<=
 br>
 &gt; you reported):<br>
 &gt;<br>
 &gt; #lang racket/base<br>
 &gt; (require racket/contract/base)<br>
 &gt;<br>
 &gt; ((contract (-&gt;* ((or/c #f (-&gt;* (string? output-port?)<br>
 &gt; (exact-nonnegative-integer?) any/c)))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:rest<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (listof any/c)<=
 br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 any/c)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=CE=BB (f . whatever)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(f 1 2 3 4))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;pos &#39;neg)<br>
 &gt; (=CE=BB whatever 1))<br>
 &gt;<br>
 &gt;<br>
 &gt; now produces this output:<br>
 &gt;<br>
 &gt; ...Users/robby/tmp2.rkt:4:1: broke its own contract<br>
 &gt;=C2=A0 supplied: 4 arguments<br>
 &gt;=C2=A0 promised: 2 or 3 non-keyword arguments<br>
 &gt;=C2=A0 in: a part of the or/c of<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 the 1st argument of<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 (-&gt;*<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#f<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt;*<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (string? output-port?)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (exact-nonnegative-integer?)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 any/c)))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0#:rest<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0(listof any/c)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0any/c)<br>
 &gt;=C2=A0 contract from: pos<br>
 &gt;=C2=A0 blaming: pos<br>
 &gt;=C2=A0 =C2=A0(assuming the contract is correct)<br>
 &gt;=C2=A0 context...:<br>
 &gt;=C2=A0 =C2=A0/Users/robby/git/plt/racket/collects/racket/contract/priva=
 te/blame.rkt:143:0:<br>
 &gt; raise-blame-error16<br>
 &gt;=C2=A0 =C2=A0/Users/robby/git/plt/racket/collects/racket/contract/priva=
 te/arrow.rkt:457:11:<br>
 &gt; basic-checker-name<br>
 &gt;=C2=A0 =C2=A0/Users/robby/tmp2.rkt: [running body]<br>
 <br>
 </blockquote></div>
 
 --001a1137681699c3520515b0d3b6--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15057: Obscure contract error message
Date: Sat, 9 May 2015 22:11:48 -0400

 Are the words "supplied" and "promised" really parallel here? 
 
 
 On May 9, 2015, at 1:02 PM, Robby Findler wrote:
 
 > Okay, I've made some changes. Further suggestions welcome. I've closed
 > the PR, but that's mostly because I'm overwhelmed in open PRs. Feel
 > free to re-open if you think there is something more that I'm capable
 > of fixing. More comments below.
 > 
 > Thanks,
 > Robby
 > 
 > 
 > 1. fixed
 > 
 > 2. I changed "received" to "supplied"; as for "promised", this text is
 > all written with teh assumption that the code is wrong and the
 > contract is right. I agree this isn't a valid assumption, but it seems
 > hard (and perhaps more confusing) to weave that uncertainty into
 > everything.
 > 
 > 3. went with "in: a part of the or/c of" because not all of the things
 > that can follow "in:" will be grammatically correct with the "which is
 > a" prefix, I don't think
 > 
 > 4. I agree, except that the broken part is supposed to be the
 > "recieved/promised" lines. That's why they come first. The whole thing
 > is there later, just in case someone finds some extra clues there that
 > are useful (which I have in past occasions).
 > 
 > 5. it pretty-prints it when it is over a certain size. I find the
 > newlines helpful. FWIW.
 > 
 > 6. I don't know how to improve that and anyway, it isn't really part
 > of the contract system, but instead part of the way error messages in
 > general are printed.
 > 
 > This program (which I think is the same contract violation as the one
 > you reported):
 > 
 > #lang racket/base
 > (require racket/contract/base)
 > 
 > ((contract (->* ((or/c #f (->* (string? output-port?)
 > (exact-nonnegative-integer?) any/c)))
 >                #:rest
 >                (listof any/c)
 >                any/c)
 >           (λ (f . whatever)
 >             (f 1 2 3 4))
 >           'pos 'neg)
 > (λ whatever 1))
 > 
 > 
 > now produces this output:
 > 
 > ...Users/robby/tmp2.rkt:4:1: broke its own contract
 >  supplied: 4 arguments
 >  promised: 2 or 3 non-keyword arguments
 >  in: a part of the or/c of
 >      the 1st argument of
 >      (->*
 >       ((or/c
 >         #f
 >         (->*
 >          (string? output-port?)
 >          (exact-nonnegative-integer?)
 >          any/c)))
 >       #:rest
 >       (listof any/c)
 >       any/c)
 >  contract from: pos
 >  blaming: pos
 >   (assuming the contract is correct)
 >  context...:
 >   /Users/robby/git/plt/racket/collects/racket/contract/private/blame.rkt:143:0:
 > raise-blame-error16
 >   /Users/robby/git/plt/racket/collects/racket/contract/private/arrow.rkt:457:11:
 > basic-checker-name
 >   /Users/robby/tmp2.rkt: [running body]
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15057: Obscure contract error message
Date: Sat, 9 May 2015 22:17:44 -0400

 --Apple-Mail=_E7B4A5E5-6707-4E6F-BE4C-DC84C3BC9AAD
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=utf-8
 
 
 What I am getting at is this:=20
 
  all verbs must have the same subject in a contract violation report
  and ideally they must have the same active/passive voice.
 
 Otherwise readers/programmers will continue to be confused. If =
 'promised' is active voice for the positive side and 'supplied' is =
 active voice for the negative one, we have a problem. If 'supplied' is =
 passive voice for the positive side, we're having a smaller but still a =
 problem. Does this make sense?=20
 
 
 
 
 On May 9, 2015, at 10:14 PM, Robby Findler wrote:
 
 > No, supplied and received are. At least that's what the library does =
 now. It looks at the direction and uses on of those for errors like =
 Eli's example. (It would use the other if you put everything to the left =
 of an arrow in the example.)
 >=20
 > Robby
 >=20
 > On Saturday, May 9, 2015, Matthias Felleisen <matthias@ccs.neu.edu> =
 wrote:
 >=20
 > Are the words "supplied" and "promised" really parallel here?
 >=20
 >=20
 > On May 9, 2015, at 1:02 PM, Robby Findler wrote:
 >=20
 > > Okay, I've made some changes. Further suggestions welcome. I've =
 closed
 > > the PR, but that's mostly because I'm overwhelmed in open PRs. Feel
 > > free to re-open if you think there is something more that I'm =
 capable
 > > of fixing. More comments below.
 > >
 > > Thanks,
 > > Robby
 > >
 > >
 > > 1. fixed
 > >
 > > 2. I changed "received" to "supplied"; as for "promised", this text =
 is
 > > all written with teh assumption that the code is wrong and the
 > > contract is right. I agree this isn't a valid assumption, but it =
 seems
 > > hard (and perhaps more confusing) to weave that uncertainty into
 > > everything.
 > >
 > > 3. went with "in: a part of the or/c of" because not all of the =
 things
 > > that can follow "in:" will be grammatically correct with the "which =
 is
 > > a" prefix, I don't think
 > >
 > > 4. I agree, except that the broken part is supposed to be the
 > > "recieved/promised" lines. That's why they come first. The whole =
 thing
 > > is there later, just in case someone finds some extra clues there =
 that
 > > are useful (which I have in past occasions).
 > >
 > > 5. it pretty-prints it when it is over a certain size. I find the
 > > newlines helpful. FWIW.
 > >
 > > 6. I don't know how to improve that and anyway, it isn't really part
 > > of the contract system, but instead part of the way error messages =
 in
 > > general are printed.
 > >
 > > This program (which I think is the same contract violation as the =
 one
 > > you reported):
 > >
 > > #lang racket/base
 > > (require racket/contract/base)
 > >
 > > ((contract (->* ((or/c #f (->* (string? output-port?)
 > > (exact-nonnegative-integer?) any/c)))
 > >                #:rest
 > >                (listof any/c)
 > >                any/c)
 > >           (=CE=BB (f . whatever)
 > >             (f 1 2 3 4))
 > >           'pos 'neg)
 > > (=CE=BB whatever 1))
 > >
 > >
 > > now produces this output:
 > >
 > > ...Users/robby/tmp2.rkt:4:1: broke its own contract
 > >  supplied: 4 arguments
 > >  promised: 2 or 3 non-keyword arguments
 > >  in: a part of the or/c of
 > >      the 1st argument of
 > >      (->*
 > >       ((or/c
 > >         #f
 > >         (->*
 > >          (string? output-port?)
 > >          (exact-nonnegative-integer?)
 > >          any/c)))
 > >       #:rest
 > >       (listof any/c)
 > >       any/c)
 > >  contract from: pos
 > >  blaming: pos
 > >   (assuming the contract is correct)
 > >  context...:
 > >   =
 /Users/robby/git/plt/racket/collects/racket/contract/private/blame.rkt:143=
 :0:
 > > raise-blame-error16
 > >   =
 /Users/robby/git/plt/racket/collects/racket/contract/private/arrow.rkt:457=
 :11:
 > > basic-checker-name
 > >   /Users/robby/tmp2.rkt: [running body]
 >=20
 
 
 --Apple-Mail=_E7B4A5E5-6707-4E6F-BE4C-DC84C3BC9AAD
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=utf-8
 
 <html><head></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
 "><div><br></div><div>What I am getting at is =
 this:&nbsp;</div><div><br></div><div>&nbsp;all verbs must have the same =
 subject in a contract violation report</div><div>&nbsp;and ideally they =
 must have the same active/passive =
 voice.</div><div><br></div><div>Otherwise readers/programmers will =
 continue to be confused. If 'promised' is active voice for the positive =
 side and 'supplied' is active voice for the negative one, we have a =
 problem. If 'supplied' is passive voice for the positive side, we're =
 having a smaller but still a problem. Does this make =
 sense?&nbsp;</div><div><br></div><div><br></div><div><br></div><br><div><d=
 iv>On May 9, 2015, at 10:14 PM, Robby Findler wrote:</div><br =
 class=3D"Apple-interchange-newline"><blockquote type=3D"cite">No, =
 supplied and received are. At least that's what the library does now. It =
 looks at the direction and uses on of those for errors like Eli's =
 example. (It would use the other if you put everything to the left of an =
 arrow in the example.)<div><br></div><div>Robby<br><br>On Saturday, May =
 9, 2015, Matthias Felleisen &lt;<a =
 href=3D"mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt; =
 wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
 Are the words "supplied" and "promised" really parallel here?<br>
 <br>
 <br>
 On May 9, 2015, at 1:02 PM, Robby Findler wrote:<br>
 <br>
 &gt; Okay, I've made some changes. Further suggestions welcome. I've =
 closed<br>
 &gt; the PR, but that's mostly because I'm overwhelmed in open PRs. =
 Feel<br>
 &gt; free to re-open if you think there is something more that I'm =
 capable<br>
 &gt; of fixing. More comments below.<br>
 &gt;<br>
 &gt; Thanks,<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; 1. fixed<br>
 &gt;<br>
 &gt; 2. I changed "received" to "supplied"; as for "promised", this text =
 is<br>
 &gt; all written with teh assumption that the code is wrong and the<br>
 &gt; contract is right. I agree this isn't a valid assumption, but it =
 seems<br>
 &gt; hard (and perhaps more confusing) to weave that uncertainty =
 into<br>
 &gt; everything.<br>
 &gt;<br>
 &gt; 3. went with "in: a part of the or/c of" because not all of the =
 things<br>
 &gt; that can follow "in:" will be grammatically correct with the "which =
 is<br>
 &gt; a" prefix, I don't think<br>
 &gt;<br>
 &gt; 4. I agree, except that the broken part is supposed to be the<br>
 &gt; "recieved/promised" lines. That's why they come first. The whole =
 thing<br>
 &gt; is there later, just in case someone finds some extra clues there =
 that<br>
 &gt; are useful (which I have in past occasions).<br>
 &gt;<br>
 &gt; 5. it pretty-prints it when it is over a certain size. I find =
 the<br>
 &gt; newlines helpful. FWIW.<br>
 &gt;<br>
 &gt; 6. I don't know how to improve that and anyway, it isn't really =
 part<br>
 &gt; of the contract system, but instead part of the way error messages =
 in<br>
 &gt; general are printed.<br>
 &gt;<br>
 &gt; This program (which I think is the same contract violation as the =
 one<br>
 &gt; you reported):<br>
 &gt;<br>
 &gt; #lang racket/base<br>
 &gt; (require racket/contract/base)<br>
 &gt;<br>
 &gt; ((contract (-&gt;* ((or/c #f (-&gt;* (string? output-port?)<br>
 &gt; (exact-nonnegative-integer?) any/c)))<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #:rest<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (listof =
 any/c)<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; any/c)<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(=CE=BB (f . whatever)<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(f 1 2 3 4))<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'pos 'neg)<br>
 &gt; (=CE=BB whatever 1))<br>
 &gt;<br>
 &gt;<br>
 &gt; now produces this output:<br>
 &gt;<br>
 &gt; ...Users/robby/tmp2.rkt:4:1: broke its own contract<br>
 &gt;&nbsp; supplied: 4 arguments<br>
 &gt;&nbsp; promised: 2 or 3 non-keyword arguments<br>
 &gt;&nbsp; in: a part of the or/c of<br>
 &gt;&nbsp; &nbsp; &nbsp; the 1st argument of<br>
 &gt;&nbsp; &nbsp; &nbsp; (-&gt;*<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp;((or/c<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#f<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(-&gt;*<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (string? output-port?)<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (exact-nonnegative-integer?)<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; any/c)))<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp;#:rest<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp;(listof any/c)<br>
 &gt;&nbsp; &nbsp; &nbsp; &nbsp;any/c)<br>
 &gt;&nbsp; contract from: pos<br>
 &gt;&nbsp; blaming: pos<br>
 &gt;&nbsp; &nbsp;(assuming the contract is correct)<br>
 &gt;&nbsp; context...:<br>
 &gt;&nbsp; =
 &nbsp;/Users/robby/git/plt/racket/collects/racket/contract/private/blame.r=
 kt:143:0:<br>
 &gt; raise-blame-error16<br>
 &gt;&nbsp; =
 &nbsp;/Users/robby/git/plt/racket/collects/racket/contract/private/arrow.r=
 kt:457:11:<br>
 &gt; basic-checker-name<br>
 &gt;&nbsp; &nbsp;/Users/robby/tmp2.rkt: [running body]<br>
 <br>
 </blockquote></div>
 </blockquote></div><br></body></html>=
 
 --Apple-Mail=_E7B4A5E5-6707-4E6F-BE4C-DC84C3BC9AAD--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15057: Obscure contract error message
Date: Sat, 9 May 2015 22:04:27 -0500

 --001a113a6334f5663a0515b184bb
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 On Saturday, May 9, 2015, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 
 >
 > What I am getting at is this:
 >
 >  all verbs must have the same subject in a contract violation report
 >  and ideally they must have the same active/passive voice.
 >
 > Otherwise readers/programmers will continue to be confused. If 'promised'
 > is active voice for the positive side and 'supplied' is active voice for
 > the negative one, we have a problem.
 >
 
 It isn't! Like I said, the words in this case are received and supplied.
 
 
 
 > If 'supplied' is passive voice for the positive side, we're having a
 > smaller but still a problem. Does this make sense?
 >
 >
 >
 >
 > On May 9, 2015, at 10:14 PM, Robby Findler wrote:
 >
 > No, supplied and received are. At least that's what the library does now.
 > It looks at the direction and uses on of those for errors like Eli's
 > example. (It would use the other if you put everything to the left of an
 > arrow in the example.)
 >
 > Robby
 >
 > On Saturday, May 9, 2015, Matthias Felleisen <matthias@ccs.neu.edu
 > <javascript:_e(%7B%7D,'cvml','matthias@ccs.neu.edu');>> wrote:
 >
 >>
 >> Are the words "supplied" and "promised" really parallel here?
 >>
 >>
 >> On May 9, 2015, at 1:02 PM, Robby Findler wrote:
 >>
 >> > Okay, I've made some changes. Further suggestions welcome. I've closed
 >> > the PR, but that's mostly because I'm overwhelmed in open PRs. Feel
 >> > free to re-open if you think there is something more that I'm capable
 >> > of fixing. More comments below.
 >> >
 >> > Thanks,
 >> > Robby
 >> >
 >> >
 >> > 1. fixed
 >> >
 >> > 2. I changed "received" to "supplied"; as for "promised", this text is
 >> > all written with teh assumption that the code is wrong and the
 >> > contract is right. I agree this isn't a valid assumption, but it seems
 >> > hard (and perhaps more confusing) to weave that uncertainty into
 >> > everything.
 >> >
 >> > 3. went with "in: a part of the or/c of" because not all of the things
 >> > that can follow "in:" will be grammatically correct with the "which is
 >> > a" prefix, I don't think
 >> >
 >> > 4. I agree, except that the broken part is supposed to be the
 >> > "recieved/promised" lines. That's why they come first. The whole thing
 >> > is there later, just in case someone finds some extra clues there that
 >> > are useful (which I have in past occasions).
 >> >
 >> > 5. it pretty-prints it when it is over a certain size. I find the
 >> > newlines helpful. FWIW.
 >> >
 >> > 6. I don't know how to improve that and anyway, it isn't really part
 >> > of the contract system, but instead part of the way error messages in
 >> > general are printed.
 >> >
 >> > This program (which I think is the same contract violation as the one
 >> > you reported):
 >> >
 >> > #lang racket/base
 >> > (require racket/contract/base)
 >> >
 >> > ((contract (->* ((or/c #f (->* (string? output-port?)
 >> > (exact-nonnegative-integer?) any/c)))
 >> >                #:rest
 >> >                (listof any/c)
 >> >                any/c)
 >> >           (=CE=BB (f . whatever)
 >> >             (f 1 2 3 4))
 >> >           'pos 'neg)
 >> > (=CE=BB whatever 1))
 >> >
 >> >
 >> > now produces this output:
 >> >
 >> > ...Users/robby/tmp2.rkt:4:1: broke its own contract
 >> >  supplied: 4 arguments
 >> >  promised: 2 or 3 non-keyword arguments
 >> >  in: a part of the or/c of
 >> >      the 1st argument of
 >> >      (->*
 >> >       ((or/c
 >> >         #f
 >> >         (->*
 >> >          (string? output-port?)
 >> >          (exact-nonnegative-integer?)
 >> >          any/c)))
 >> >       #:rest
 >> >       (listof any/c)
 >> >       any/c)
 >> >  contract from: pos
 >> >  blaming: pos
 >> >   (assuming the contract is correct)
 >> >  context...:
 >> >
 >>  /Users/robby/git/plt/racket/collects/racket/contract/private/blame.rkt:=
 143:0:
 >> > raise-blame-error16
 >> >
 >>  /Users/robby/git/plt/racket/collects/racket/contract/private/arrow.rkt:=
 457:11:
 >> > basic-checker-name
 >> >   /Users/robby/tmp2.rkt: [running body]
 >>
 >>
 >
 
 --001a113a6334f5663a0515b184bb
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <br><br>On Saturday, May 9, 2015, Matthias Felleisen &lt;<a href=3D"mailto:=
 matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt; wrote:<br><blockquote cl=
 ass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;p=
 adding-left:1ex"><div style=3D"word-wrap:break-word"><div><br></div><div>Wh=
 at I am getting at is this:=C2=A0</div><div><br></div><div>=C2=A0all verbs =
 must have the same subject in a contract violation report</div><div>=C2=A0a=
 nd ideally they must have the same active/passive voice.</div><div><br></di=
 v><div>Otherwise readers/programmers will continue to be confused. If &#39;=
 promised&#39; is active voice for the positive side and &#39;supplied&#39; =
 is active voice for the negative one, we have a problem.=C2=A0</div><div></=
 div></div></blockquote><div><br></div>It isn&#39;t! Like I said, the words =
 in this case are received and supplied.=C2=A0<span></span><br><div><br></di=
 v><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style=3D"word-wrap:b=
 reak-word"><div>If &#39;supplied&#39; is passive voice for the positive sid=
 e, we&#39;re having a smaller but still a problem. Does this make sense?=C2=
 =A0</div><div><br></div><div><br></div><div><br></div><br><div><div>On May =
 9, 2015, at 10:14 PM, Robby Findler wrote:</div><br><blockquote type=3D"cit=
 e">No, supplied and received are. At least that&#39;s what the library does=
  now. It looks at the direction and uses on of those for errors like Eli&#3=
 9;s example. (It would use the other if you put everything to the left of a=
 n arrow in the example.)<div><br></div><div>Robby<br><br>On Saturday, May 9=
 , 2015, Matthias Felleisen &lt;<a href=3D"javascript:_e(%7B%7D,&#39;cvml&#3=
 9;,&#39;matthias@ccs.neu.edu&#39;);" target=3D"_blank">matthias@ccs.neu.edu=
 </a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
 Are the words &quot;supplied&quot; and &quot;promised&quot; really parallel=
  here?<br>
 <br>
 <br>
 On May 9, 2015, at 1:02 PM, Robby Findler wrote:<br>
 <br>
 &gt; Okay, I&#39;ve made some changes. Further suggestions welcome. I&#39;v=
 e closed<br>
 &gt; the PR, but that&#39;s mostly because I&#39;m overwhelmed in open PRs.=
  Feel<br>
 &gt; free to re-open if you think there is something more that I&#39;m capa=
 ble<br>
 &gt; of fixing. More comments below.<br>
 &gt;<br>
 &gt; Thanks,<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; 1. fixed<br>
 &gt;<br>
 &gt; 2. I changed &quot;received&quot; to &quot;supplied&quot;; as for &quo=
 t;promised&quot;, this text is<br>
 &gt; all written with teh assumption that the code is wrong and the<br>
 &gt; contract is right. I agree this isn&#39;t a valid assumption, but it s=
 eems<br>
 &gt; hard (and perhaps more confusing) to weave that uncertainty into<br>
 &gt; everything.<br>
 &gt;<br>
 &gt; 3. went with &quot;in: a part of the or/c of&quot; because not all of =
 the things<br>
 &gt; that can follow &quot;in:&quot; will be grammatically correct with the=
  &quot;which is<br>
 &gt; a&quot; prefix, I don&#39;t think<br>
 &gt;<br>
 &gt; 4. I agree, except that the broken part is supposed to be the<br>
 &gt; &quot;recieved/promised&quot; lines. That&#39;s why they come first. T=
 he whole thing<br>
 &gt; is there later, just in case someone finds some extra clues there that=
 <br>
 &gt; are useful (which I have in past occasions).<br>
 &gt;<br>
 &gt; 5. it pretty-prints it when it is over a certain size. I find the<br>
 &gt; newlines helpful. FWIW.<br>
 &gt;<br>
 &gt; 6. I don&#39;t know how to improve that and anyway, it isn&#39;t reall=
 y part<br>
 &gt; of the contract system, but instead part of the way error messages in<=
 br>
 &gt; general are printed.<br>
 &gt;<br>
 &gt; This program (which I think is the same contract violation as the one<=
 br>
 &gt; you reported):<br>
 &gt;<br>
 &gt; #lang racket/base<br>
 &gt; (require racket/contract/base)<br>
 &gt;<br>
 &gt; ((contract (-&gt;* ((or/c #f (-&gt;* (string? output-port?)<br>
 &gt; (exact-nonnegative-integer?) any/c)))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:rest<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (listof any/c)<=
 br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 any/c)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=CE=BB (f . whatever)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(f 1 2 3 4))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;pos &#39;neg)<br>
 &gt; (=CE=BB whatever 1))<br>
 &gt;<br>
 &gt;<br>
 &gt; now produces this output:<br>
 &gt;<br>
 &gt; ...Users/robby/tmp2.rkt:4:1: broke its own contract<br>
 &gt;=C2=A0 supplied: 4 arguments<br>
 &gt;=C2=A0 promised: 2 or 3 non-keyword arguments<br>
 &gt;=C2=A0 in: a part of the or/c of<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 the 1st argument of<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 (-&gt;*<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#f<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt;*<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (string? output-port?)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (exact-nonnegative-integer?)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 any/c)))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0#:rest<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0(listof any/c)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0any/c)<br>
 &gt;=C2=A0 contract from: pos<br>
 &gt;=C2=A0 blaming: pos<br>
 &gt;=C2=A0 =C2=A0(assuming the contract is correct)<br>
 &gt;=C2=A0 context...:<br>
 &gt;=C2=A0 =C2=A0/Users/robby/git/plt/racket/collects/racket/contract/priva=
 te/blame.rkt:143:0:<br>
 &gt; raise-blame-error16<br>
 &gt;=C2=A0 =C2=A0/Users/robby/git/plt/racket/collects/racket/contract/priva=
 te/arrow.rkt:457:11:<br>
 &gt; basic-checker-name<br>
 &gt;=C2=A0 =C2=A0/Users/robby/tmp2.rkt: [running body]<br>
 <br>
 </blockquote></div>
 </blockquote></div><br></div></blockquote>
 
 --001a113a6334f5663a0515b184bb--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15057: Obscure contract error message
Date: Sat, 9 May 2015 22:05:05 -0500

 --001a1147f2483dbc4e0515b1871d
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Argh sorry. I didn't mean to hit send.
 
 Maybe you can make you comments more concrete tho as I don't get what you
 are saying.
 
 On Saturday, May 9, 2015, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 
 >
 > What I am getting at is this:
 >
 >  all verbs must have the same subject in a contract violation report
 >  and ideally they must have the same active/passive voice.
 >
 > Otherwise readers/programmers will continue to be confused. If 'promised'
 > is active voice for the positive side and 'supplied' is active voice for
 > the negative one, we have a problem. If 'supplied' is passive voice for t=
 he
 > positive side, we're having a smaller but still a problem. Does this make
 > sense?
 >
 >
 >
 >
 > On May 9, 2015, at 10:14 PM, Robby Findler wrote:
 >
 > No, supplied and received are. At least that's what the library does now.
 > It looks at the direction and uses on of those for errors like Eli's
 > example. (It would use the other if you put everything to the left of an
 > arrow in the example.)
 >
 > Robby
 >
 > On Saturday, May 9, 2015, Matthias Felleisen <matthias@ccs.neu.edu
 > <javascript:_e(%7B%7D,'cvml','matthias@ccs.neu.edu');>> wrote:
 >
 >>
 >> Are the words "supplied" and "promised" really parallel here?
 >>
 >>
 >> On May 9, 2015, at 1:02 PM, Robby Findler wrote:
 >>
 >> > Okay, I've made some changes. Further suggestions welcome. I've closed
 >> > the PR, but that's mostly because I'm overwhelmed in open PRs. Feel
 >> > free to re-open if you think there is something more that I'm capable
 >> > of fixing. More comments below.
 >> >
 >> > Thanks,
 >> > Robby
 >> >
 >> >
 >> > 1. fixed
 >> >
 >> > 2. I changed "received" to "supplied"; as for "promised", this text is
 >> > all written with teh assumption that the code is wrong and the
 >> > contract is right. I agree this isn't a valid assumption, but it seems
 >> > hard (and perhaps more confusing) to weave that uncertainty into
 >> > everything.
 >> >
 >> > 3. went with "in: a part of the or/c of" because not all of the things
 >> > that can follow "in:" will be grammatically correct with the "which is
 >> > a" prefix, I don't think
 >> >
 >> > 4. I agree, except that the broken part is supposed to be the
 >> > "recieved/promised" lines. That's why they come first. The whole thing
 >> > is there later, just in case someone finds some extra clues there that
 >> > are useful (which I have in past occasions).
 >> >
 >> > 5. it pretty-prints it when it is over a certain size. I find the
 >> > newlines helpful. FWIW.
 >> >
 >> > 6. I don't know how to improve that and anyway, it isn't really part
 >> > of the contract system, but instead part of the way error messages in
 >> > general are printed.
 >> >
 >> > This program (which I think is the same contract violation as the one
 >> > you reported):
 >> >
 >> > #lang racket/base
 >> > (require racket/contract/base)
 >> >
 >> > ((contract (->* ((or/c #f (->* (string? output-port?)
 >> > (exact-nonnegative-integer?) any/c)))
 >> >                #:rest
 >> >                (listof any/c)
 >> >                any/c)
 >> >           (=CE=BB (f . whatever)
 >> >             (f 1 2 3 4))
 >> >           'pos 'neg)
 >> > (=CE=BB whatever 1))
 >> >
 >> >
 >> > now produces this output:
 >> >
 >> > ...Users/robby/tmp2.rkt:4:1: broke its own contract
 >> >  supplied: 4 arguments
 >> >  promised: 2 or 3 non-keyword arguments
 >> >  in: a part of the or/c of
 >> >      the 1st argument of
 >> >      (->*
 >> >       ((or/c
 >> >         #f
 >> >         (->*
 >> >          (string? output-port?)
 >> >          (exact-nonnegative-integer?)
 >> >          any/c)))
 >> >       #:rest
 >> >       (listof any/c)
 >> >       any/c)
 >> >  contract from: pos
 >> >  blaming: pos
 >> >   (assuming the contract is correct)
 >> >  context...:
 >> >
 >>  /Users/robby/git/plt/racket/collects/racket/contract/private/blame.rkt:=
 143:0:
 >> > raise-blame-error16
 >> >
 >>  /Users/robby/git/plt/racket/collects/racket/contract/private/arrow.rkt:=
 457:11:
 >> > basic-checker-name
 >> >   /Users/robby/tmp2.rkt: [running body]
 >>
 >>
 >
 
 --001a1147f2483dbc4e0515b1871d
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Argh sorry. I didn&#39;t mean to hit send.=C2=A0<div><br></div><div>Maybe y=
 ou can make you comments more concrete tho as I don&#39;t get what you are =
 saying.=C2=A0<span></span><br><br>On Saturday, May 9, 2015, Matthias Fellei=
 sen &lt;<a href=3D"mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt=
 ; wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bo=
 rder-left:1px #ccc solid;padding-left:1ex"><div style=3D"word-wrap:break-wo=
 rd"><div><br></div><div>What I am getting at is this:=C2=A0</div><div><br><=
 /div><div>=C2=A0all verbs must have the same subject in a contract violatio=
 n report</div><div>=C2=A0and ideally they must have the same active/passive=
  voice.</div><div><br></div><div>Otherwise readers/programmers will continu=
 e to be confused. If &#39;promised&#39; is active voice for the positive si=
 de and &#39;supplied&#39; is active voice for the negative one, we have a p=
 roblem. If &#39;supplied&#39; is passive voice for the positive side, we&#3=
 9;re having a smaller but still a problem. Does this make sense?=C2=A0</div=
 ><div><br></div><div><br></div><div><br></div><br><div><div>On May 9, 2015,=
  at 10:14 PM, Robby Findler wrote:</div><br><blockquote type=3D"cite">No, s=
 upplied and received are. At least that&#39;s what the library does now. It=
  looks at the direction and uses on of those for errors like Eli&#39;s exam=
 ple. (It would use the other if you put everything to the left of an arrow =
 in the example.)<div><br></div><div>Robby<br><br>On Saturday, May 9, 2015, =
 Matthias Felleisen &lt;<a href=3D"javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;=
 matthias@ccs.neu.edu&#39;);" target=3D"_blank">matthias@ccs.neu.edu</a>&gt;=
  wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bor=
 der-left:1px #ccc solid;padding-left:1ex"><br>
 Are the words &quot;supplied&quot; and &quot;promised&quot; really parallel=
  here?<br>
 <br>
 <br>
 On May 9, 2015, at 1:02 PM, Robby Findler wrote:<br>
 <br>
 &gt; Okay, I&#39;ve made some changes. Further suggestions welcome. I&#39;v=
 e closed<br>
 &gt; the PR, but that&#39;s mostly because I&#39;m overwhelmed in open PRs.=
  Feel<br>
 &gt; free to re-open if you think there is something more that I&#39;m capa=
 ble<br>
 &gt; of fixing. More comments below.<br>
 &gt;<br>
 &gt; Thanks,<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; 1. fixed<br>
 &gt;<br>
 &gt; 2. I changed &quot;received&quot; to &quot;supplied&quot;; as for &quo=
 t;promised&quot;, this text is<br>
 &gt; all written with teh assumption that the code is wrong and the<br>
 &gt; contract is right. I agree this isn&#39;t a valid assumption, but it s=
 eems<br>
 &gt; hard (and perhaps more confusing) to weave that uncertainty into<br>
 &gt; everything.<br>
 &gt;<br>
 &gt; 3. went with &quot;in: a part of the or/c of&quot; because not all of =
 the things<br>
 &gt; that can follow &quot;in:&quot; will be grammatically correct with the=
  &quot;which is<br>
 &gt; a&quot; prefix, I don&#39;t think<br>
 &gt;<br>
 &gt; 4. I agree, except that the broken part is supposed to be the<br>
 &gt; &quot;recieved/promised&quot; lines. That&#39;s why they come first. T=
 he whole thing<br>
 &gt; is there later, just in case someone finds some extra clues there that=
 <br>
 &gt; are useful (which I have in past occasions).<br>
 &gt;<br>
 &gt; 5. it pretty-prints it when it is over a certain size. I find the<br>
 &gt; newlines helpful. FWIW.<br>
 &gt;<br>
 &gt; 6. I don&#39;t know how to improve that and anyway, it isn&#39;t reall=
 y part<br>
 &gt; of the contract system, but instead part of the way error messages in<=
 br>
 &gt; general are printed.<br>
 &gt;<br>
 &gt; This program (which I think is the same contract violation as the one<=
 br>
 &gt; you reported):<br>
 &gt;<br>
 &gt; #lang racket/base<br>
 &gt; (require racket/contract/base)<br>
 &gt;<br>
 &gt; ((contract (-&gt;* ((or/c #f (-&gt;* (string? output-port?)<br>
 &gt; (exact-nonnegative-integer?) any/c)))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:rest<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (listof any/c)<=
 br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 any/c)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=CE=BB (f . whatever)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(f 1 2 3 4))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&#39;pos &#39;neg)<br>
 &gt; (=CE=BB whatever 1))<br>
 &gt;<br>
 &gt;<br>
 &gt; now produces this output:<br>
 &gt;<br>
 &gt; ...Users/robby/tmp2.rkt:4:1: broke its own contract<br>
 &gt;=C2=A0 supplied: 4 arguments<br>
 &gt;=C2=A0 promised: 2 or 3 non-keyword arguments<br>
 &gt;=C2=A0 in: a part of the or/c of<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 the 1st argument of<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 (-&gt;*<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0((or/c<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#f<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt;*<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (string? output-port?)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (exact-nonnegative-integer?)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 any/c)))<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0#:rest<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0(listof any/c)<br>
 &gt;=C2=A0 =C2=A0 =C2=A0 =C2=A0any/c)<br>
 &gt;=C2=A0 contract from: pos<br>
 &gt;=C2=A0 blaming: pos<br>
 &gt;=C2=A0 =C2=A0(assuming the contract is correct)<br>
 &gt;=C2=A0 context...:<br>
 &gt;=C2=A0 =C2=A0/Users/robby/git/plt/racket/collects/racket/contract/priva=
 te/blame.rkt:143:0:<br>
 &gt; raise-blame-error16<br>
 &gt;=C2=A0 =C2=A0/Users/robby/git/plt/racket/collects/racket/contract/priva=
 te/arrow.rkt:457:11:<br>
 &gt; basic-checker-name<br>
 &gt;=C2=A0 =C2=A0/Users/robby/tmp2.rkt: [running body]<br>
 <br>
 </blockquote></div>
 </blockquote></div><br></div></blockquote></div>
 
 --001a1147f2483dbc4e0515b1871d--
