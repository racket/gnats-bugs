From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jun  8 13:03:53 2014
Received: from mail-ob0-f176.google.com (mail-ob0-f176.google.com [209.85.214.176])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s58H3qJ2009726
	for <bugs@bugs.plt-scheme.org>; Sun, 8 Jun 2014 13:03:52 -0400
Message-Id: <201406081703.s58H3oPK009719@winooski.ccs.neu.edu>
Date: Sun, 8 Jun 2014 13:03:50 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Printing with :type for recursive list types is broken

>Number:         14552
>Category:       all
>Synopsis:       Printing with :type for recursive list types is broken
>Class:          sw-bug
>Responsible:    asumu
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jun 08 13:04:01 -0400 2014
>Closed-Date:    Mon Jun 09 13:39:33 -0400 2014
>Last-Modified:  Mon Jun 09 13:39:33 -0400 2014
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
>Description:
The following program has the bad output:

(Listof Symbol)
(Listof g273)
>How-To-Repeat:
#lang racket/load

(require typed/racket)

(:type (Rec x (U (Pair Symbol x) Null)))
(:type (Rec x (U (Pair x x) Null)))
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14552: Printing with :type for recursive list
 types is broken
Date: Mon, 9 Jun 2014 11:47:45 -0400

 On 2014-06-08 13:04:02 -0400, eric.n.dobson@gmail.com wrote:
 > (:type (Rec x (U (Pair Symbol x) Null)))
 > (:type (Rec x (U (Pair x x) Null)))
 
 Can we fix this by just ruling out the case where the element type is the
 same as the `Rec` variable? Are there any other problematic cases?
 
 (ruling that out should be easy since `Listof:` already takes an
  optional variable pattern)
 
 Cheers,
 Asumu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14552: Printing with :type for recursive list
 types is broken
Date: Mon, 9 Jun 2014 08:52:27 -0700

 I think that is on the right track, but the check is if it is free in
 element type not is it the whole element type.
 
 Also MListof:.
 
 On Mon, Jun 9, 2014 at 8:47 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2014-06-08 13:04:02 -0400, eric.n.dobson@gmail.com wrote:
 >> (:type (Rec x (U (Pair Symbol x) Null)))
 >> (:type (Rec x (U (Pair x x) Null)))
 >
 > Can we fix this by just ruling out the case where the element type is the
 > same as the `Rec` variable? Are there any other problematic cases?
 >
 > (ruling that out should be easy since `Listof:` already takes an
 >  optional variable pattern)
 >
 > Cheers,
 > Asumu
Responsible changed from "nobody" to "asumu" by asumu@racket-lang.org at Mon, 09 Jun 2014 13:39:33 -0400
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/bbc6a6b42d
State changed from "open" to "closed" by asumu@racket-lang.org at Mon, 09 Jun 2014 13:39:33 -0400
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/bbc6a6b42d
  | Fix printing for certain list types with a mu var
  | 
  | Closes PR 14552

