From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Feb  9 17:28:06 2013
Received: from mail-ob0-f176.google.com (mail-ob0-f176.google.com [209.85.214.176])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r19MS2RR016193
	for <bugs@bugs.plt-scheme.org>; Sat, 9 Feb 2013 17:28:02 -0500
Message-Id: <201302092228.r19MS0fM016184@champlain.ccs.neu.edu>
Date: Sat, 9 Feb 2013 17:28:00 -0500
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: ->i with #:pre/name does not signal blame when the precondition fails

>Number:         13512
>Category:       all
>Synopsis:       ->i with #:pre/name does not signal blame when the precondition fails
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Feb 09 17:32:01 -0500 2013
>Last-Modified:  Sat Feb 09 19:40:01 -0500 2013
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.3--2013-02-06(a85a7198/d)
>Environment:
macosx "Darwin europeii.westell.com 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 432394640
Links: (links) = ("Acquire"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
Planet2 (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific:
 [none]



Collections:
("/Users/matthias/0Unison/collects/"
 ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/5.3.2.3/collects"
 (non-existent-path))
("/Users/matthias/plt/collects"
 (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "realm" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "s!
 windle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
If the precondition in an ->i fails, say like this

 (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:" (member l x) (result natural-number/c))))

all you get is a raw (old style) error message: 

 member: not a proper list: 'b

If this is across several modules, you don't know where what broke. 
>How-To-Repeat:
Here is a small single-module example: 

#lang racket

(module A racket
  (provide
   (contract-out
    (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:" (member l x) (result natural-number/c)))))
  
  (define (f l x)
    0))

(module B racket 
  (require (submod ".." A))
  
  (printf (f '(a b c) 'b)))

(require (submod "." B))

Distribute across two files to see that the error message is not a blame message. 
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13512: ->i with #:pre/name does not signal blame
 when the precondition fails
Date: Sat, 9 Feb 2013 16:58:11 -0600

 --e89a8ff1c6d639bc7e04d5529c69
 Content-Type: text/plain; charset=UTF-8
 
 Why do you expect something different?
 
 In other words, why is this not the same as this:
 
 (-> (if (member 'x 'y) integer? symbol?) any)
 
 Robby
 
 
 
 On Sat, Feb 9, 2013 at 4:32 PM, <matthias@ccs.neu.edu> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13512
 >
 > Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)
 >
 > *** Description:
 > If the precondition in an ->i fails, say like this
 >
 >  (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:"
 > (member l x) (result natural-number/c))))
 >
 > all you get is a raw (old style) error message:
 >
 >  member: not a proper list: 'b
 >
 > If this is across several modules, you don't know where what broke.
 >
 > *** How to repeat:
 > Here is a small single-module example:
 >
 > #lang racket
 >
 > (module A racket
 >   (provide
 >    (contract-out
 >     (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:"
 > (member l x) (result natural-number/c)))))
 >
 >   (define (f l x)
 >     0))
 >
 > (module B racket
 >   (require (submod ".." A))
 >
 >   (printf (f '(a b c) 'b)))
 >
 > (require (submod "." B))
 >
 > Distribute across two files to see that the error message is not a blame
 > message.
 >
 > *** Environment:
 > macosx "Darwin europeii.westell.com 11.4.2 Darwin Kernel Version 11.4.2:
 > Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64"
 > (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 432394640
 > Links: (links) = ("Acquire"); (links #:user? #f) = (); (links #:root? #t)
 > = (); (links #:user? #f #:root? #t) = ()
 > Planet2 (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific:
 >  [none]
 >
 >
 >
 > Collections:
 > ("/Users/matthias/0Unison/collects/"
 >  ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain"
 > "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils"
 > "web"))
 > ("/Users/matthias/Library/Racket/5.3.2.3/collects"
 >  (non-existent-path))
 > ("/Users/matthias/plt/collects"
 >  (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser"
 > "combinator-parser" "compatibility" "compiler" "config" "data" "datalog"
 > "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext"
 > "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime"
 > "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder"
 > "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html"
 > "icons" "images" "info-domain" "json" "lang" "launcher" "lazy"
 > "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom"
 > "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs"
 > "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs"
 > "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline"
 > "realm" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp"
 > "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup"
 > "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper"
 > "string-constants" "s!
 >  windle" "syntax" "syntax-color" "teachpack" "test-box-recovery"
 > "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed"
 > "typed-racket" "typed-scheme" "unstable" "version" "waterworld"
 > "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 > (test))))
 >
 >
 
 --e89a8ff1c6d639bc7e04d5529c69
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div style>Why do you expect something different?</div><di=
 v style><br></div><div style>In other words, why is this not the same as th=
 is:</div><div style><br></div><div style>(-&gt; (if (member &#39;x &#39;y) =
 integer? symbol?) any)<br>
 <br></div><div>Robby</div><div><br></div></div><div class=3D"gmail_extra"><=
 br><br><div class=3D"gmail_quote">On Sat, Feb 9, 2013 at 4:32 PM,  <span di=
 r=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" target=3D"_blank">mat=
 thias@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 512" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13512</a><br>
 <br>
 Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)<br>
 <br>
 *** Description:<br>
 If the precondition in an -&gt;i fails, say like this<br>
 <br>
 =C2=A0(f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) &quot;=
 bug:&quot; (member l x) (result natural-number/c))))<br>
 <br>
 all you get is a raw (old style) error message:<br>
 <br>
 =C2=A0member: not a proper list: &#39;b<br>
 <br>
 If this is across several modules, you don&#39;t know where what broke.<br>
 <br>
 *** How to repeat:<br>
 Here is a small single-module example:<br>
 <br>
 #lang racket<br>
 <br>
 (module A racket<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0(contract-out<br>
 =C2=A0 =C2=A0 (f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x=
 ) &quot;bug:&quot; (member l x) (result natural-number/c)))))<br>
 <br>
 =C2=A0 (define (f l x)<br>
 =C2=A0 =C2=A0 0))<br>
 <br>
 (module B racket<br>
 =C2=A0 (require (submod &quot;..&quot; A))<br>
 <br>
 =C2=A0 (printf (f &#39;(a b c) &#39;b)))<br>
 <br>
 (require (submod &quot;.&quot; B))<br>
 <br>
 Distribute across two files to see that the error message is not a blame me=
 ssage.<br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin <a href=3D"http://europeii.westell.com" target=3D"_blan=
 k">europeii.westell.com</a> 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23=
  16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64&quot; (x86_6=
 4-macosx/3m) (get-display-depth) =3D 32<br>
 
 Human Language: english<br>
 (current-memory-use) 432394640<br>
 Links: (links) =3D (&quot;Acquire&quot;); (links #:user? #f) =3D (); (links=
  #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/matthias/0Unison/collects/&quot;<br>
 =C2=A0(&quot;._.DS_Store&quot; &quot;.DS_Store&quot; &quot;compiled&quot; &=
 quot;date&quot; &quot;finance&quot; &quot;info-domain&quot; &quot;info.ss&q=
 uot; &quot;pdf.ss~&quot; &quot;session&quot; &quot;short&quot; &quot;testin=
 g&quot; &quot;tll-collects&quot; &quot;utils&quot; &quot;web&quot;))<br>
 
 (&quot;/Users/matthias/Library/Racket/<a href=3D"http://5.3.2.3/collects" t=
 arget=3D"_blank">5.3.2.3/collects</a>&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/matthias/plt/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;2htdp&quot; &quot;afm&quot; &quot;algol=
 60&quot; &quot;at-exp&quot; &quot;browser&quot; &quot;combinator-parser&quo=
 t; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot; &quot;=
 data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &quot;de=
 inprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dynext&quo=
 t; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &quot;f=
 fi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; &quot;fu=
 ture-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gui-debu=
 gger&quot; &quot;guibuilder&quot; &quot;handin-client&quot; &quot;handin-se=
 rver&quot; &quot;help&quot; &quot;hierlist&quot; &quot;honu&quot; &quot;htd=
 p&quot; &quot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-do=
 main&quot; &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;laz=
 y&quot; &quot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;=
 meta&quot; &quot;mred&quot; &quot;mrlib&quot; &quot;mysterx&quot; &quot;mz&=
 quot; &quot;mzcom&quot; &quot;mzlib&quot; &quot;mzscheme&quot; &quot;net&qu=
 ot; &quot;openssl&quot; &quot;parser-tools&quot; &quot;picturing-programs&q=
 uot; &quot;plai&quot; &quot;planet&quot; &quot;planet2&quot; &quot;plot&quo=
 t; &quot;preprocessor&quot; &quot;profile&quot; &quot;r5rs&quot; &quot;r6rs=
 &quot; &quot;racket&quot; &quot;racklog&quot; &quot;rackunit&quot; &quot;ra=
 clog&quot; &quot;raco&quot; &quot;racunit&quot; &quot;reader&quot; &quot;re=
 adline&quot; &quot;realm&quot; &quot;redex&quot; &quot;repo-time-stamp&quot=
 ; &quot;repos-time-stamp&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;sch=
 elog&quot; &quot;scheme&quot; &quot;schemeunit&quot; &quot;scribble&quot; &=
 quot;scribblings&quot; &quot;scriblib&quot; &quot;setup&quot; &quot;sgl&quo=
 t; &quot;sirmail&quot; &quot;slatex&quot; &quot;slideshow&quot; &quot;srfi&=
 quot; &quot;srpersist&quot; &quot;stepper&quot; &quot;string-constants&quot=
 ; &quot;s!<br>
 
 =C2=A0windle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &quot;teachp=
 ack&quot; &quot;test-box-recovery&quot; &quot;test-engine&quot; &quot;tests=
 &quot; &quot;tex2page&quot; &quot;texpict&quot; &quot;tool&quot; &quot;trac=
 e&quot; &quot;typed&quot; &quot;typed-racket&quot; &quot;typed-scheme&quot;=
  &quot;unstable&quot; &quot;version&quot; &quot;waterworld&quot; &quot;web-=
 server&quot; &quot;wxme&quot; &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 
 --e89a8ff1c6d639bc7e04d5529c69--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13512: ->i with #:pre/name does not signal blame when the precondition fails
Date: Sat, 9 Feb 2013 18:22:14 -0500

 --Apple-Mail=_638C0929-EC64-4C3B-9866-1667CA9CDA82
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 Well, I'd expect at least=20
 
 > (+ 'a 1)
 . . +: contract violation
   expected: number?
   given: 'a
   argument position: 1st
   other arguments...:
    1
 
 As opposed to this:=20
 
 > (member '() 'a)
 . . member: not a proper list: 'a=20
 
 
 And the former may help. BUT, somehow I expected ->i to treat #:pre and =
 blame itself for running code that blows up.=20
 
 [[ Didn't we go thru this with Philippe? ]]
 
 
 
 On Feb 9, 2013, at 5:58 PM, Robby Findler wrote:
 
 > Why do you expect something different?
 >=20
 > In other words, why is this not the same as this:
 >=20
 > (-> (if (member 'x 'y) integer? symbol?) any)
 >=20
 > Robby
 >=20
 >=20
 >=20
 > On Sat, Feb 9, 2013 at 4:32 PM, <matthias@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13512
 >=20
 > Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)
 >=20
 > *** Description:
 > If the precondition in an ->i fails, say like this
 >=20
 >  (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:" =
 (member l x) (result natural-number/c))))
 >=20
 > all you get is a raw (old style) error message:
 >=20
 >  member: not a proper list: 'b
 >=20
 > If this is across several modules, you don't know where what broke.
 >=20
 > *** How to repeat:
 > Here is a small single-module example:
 >=20
 > #lang racket
 >=20
 > (module A racket
 >   (provide
 >    (contract-out
 >     (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:" =
 (member l x) (result natural-number/c)))))
 >=20
 >   (define (f l x)
 >     0))
 >=20
 > (module B racket
 >   (require (submod ".." A))
 >=20
 >   (printf (f '(a b c) 'b)))
 >=20
 > (require (submod "." B))
 >=20
 > Distribute across two files to see that the error message is not a =
 blame message.
 >=20
 > *** Environment:
 > macosx "Darwin europeii.westell.com 11.4.2 Darwin Kernel Version =
 11.4.2: Thu Aug 23 16:25:48 PDT 2012; =
 root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) =
 (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 432394640
 > Links: (links) =3D ("Acquire"); (links #:user? #f) =3D (); (links =
 #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()
 > Planet2 (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific:
 >  [none]
 >=20
 >=20
 >=20
 > Collections:
 > ("/Users/matthias/0Unison/collects/"
 >  ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain" =
 "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" =
 "web"))
 > ("/Users/matthias/Library/Racket/5.3.2.3/collects"
 >  (non-existent-path))
 > ("/Users/matthias/plt/collects"
 >  (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" =
 "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" =
 "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" =
 "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" =
 "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" =
 "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" =
 "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" =
 "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mz" =
 "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" =
 "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" =
 "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" =
 "racunit" "reader" "readline" "realm" "redex" "repo-time-stamp" =
 "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" =
 "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" =
 "slideshow" "srfi" "srpersist" "stepper" "string-constants" "s!
 >  windle" "syntax" "syntax-color" "teachpack" "test-box-recovery" =
 "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed" =
 "typed-racket" "typed-scheme" "unstable" "version" "waterworld" =
 "web-server" "wxme" "xml" "xrepl"))
 >=20
 > Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t =
 ((main) (test))))
 >=20
 >=20
 
 
 --Apple-Mail=_638C0929-EC64-4C3B-9866-1667CA9CDA82
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=us-ascii
 
 <html><head></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
 "><div><br></div><div>Well, I'd expect at =
 least&nbsp;</div><div><br></div><div>&gt; (+ 'a 1)</div><div>. . +: =
 contract violation</div><div>&nbsp; expected: number?</div><div>&nbsp; =
 given: 'a</div><div>&nbsp; argument position: 1st</div><div>&nbsp; other =
 arguments...:</div><div>&nbsp; &nbsp;1</div><div><br></div><div>As =
 opposed to this:&nbsp;</div><div><br></div><div>&gt; (member '() =
 'a)</div><div>. . member: not a proper list: =
 'a&nbsp;</div><div><br></div><div><br></div><div>And the former may =
 help. BUT, somehow I expected -&gt;i to treat #:pre and blame itself for =
 running code that blows up.&nbsp;</div><div><br></div><div>[[ Didn't we =
 go thru this with Philippe? =
 ]]</div><div><br></div><div><br></div><br><div><div>On Feb 9, 2013, at =
 5:58 PM, Robby Findler wrote:</div><br =
 class=3D"Apple-interchange-newline"><blockquote type=3D"cite"><div =
 dir=3D"ltr"><div style=3D"">Why do you expect something =
 different?</div><div style=3D""><br></div><div style=3D"">In other =
 words, why is this not the same as this:</div><div =
 style=3D""><br></div><div style=3D"">(-&gt; (if (member 'x 'y) integer? =
 symbol?) any)<br>
 <br></div><div>Robby</div><div><br></div></div><div =
 class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Sat, Feb 9, =
 2013 at 4:32 PM,  <span dir=3D"ltr">&lt;<a =
 href=3D"mailto:matthias@ccs.neu.edu" =
 target=3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex">A new problem report =
 is waiting at<br>
 &nbsp; <a =
 href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13512" =
 target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D1=
 3512</a><br>
 <br>
 Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)<br>
 <br>
 *** Description:<br>
 If the precondition in an -&gt;i fails, say like this<br>
 <br>
 &nbsp;(f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) =
 "bug:" (member l x) (result natural-number/c))))<br>
 <br>
 all you get is a raw (old style) error message:<br>
 <br>
 &nbsp;member: not a proper list: 'b<br>
 <br>
 If this is across several modules, you don't know where what broke.<br>
 <br>
 *** How to repeat:<br>
 Here is a small single-module example:<br>
 <br>
 #lang racket<br>
 <br>
 (module A racket<br>
 &nbsp; (provide<br>
 &nbsp; &nbsp;(contract-out<br>
 &nbsp; &nbsp; (f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name =
 (l x) "bug:" (member l x) (result natural-number/c)))))<br>
 <br>
 &nbsp; (define (f l x)<br>
 &nbsp; &nbsp; 0))<br>
 <br>
 (module B racket<br>
 &nbsp; (require (submod ".." A))<br>
 <br>
 &nbsp; (printf (f '(a b c) 'b)))<br>
 <br>
 (require (submod "." B))<br>
 <br>
 Distribute across two files to see that the error message is not a blame =
 message.<br>
 <br>
 *** Environment:<br>
 macosx "Darwin <a href=3D"http://europeii.westell.com/" =
 target=3D"_blank">europeii.westell.com</a> 11.4.2 Darwin Kernel Version =
 11.4.2: Thu Aug 23 16:25:48 PDT 2012; =
 root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) =
 (get-display-depth) =3D 32<br>
 
 Human Language: english<br>
 (current-memory-use) 432394640<br>
 Links: (links) =3D ("Acquire"); (links #:user? #f) =3D (); (links =
 #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 &nbsp;[none]<br>
 User-specific, all-version:<br>
 &nbsp;[none]<br>
 User-specific, version-specific:<br>
 &nbsp;[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 ("/Users/matthias/0Unison/collects/"<br>
 &nbsp;("._.DS_Store" ".DS_Store" "compiled" "date" "finance" =
 "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" =
 "tll-collects" "utils" "web"))<br>
 
 ("/Users/matthias/Library/Racket/<a href=3D"http://5.3.2.3/collects" =
 target=3D"_blank">5.3.2.3/collects</a>"<br>
 &nbsp;(non-existent-path))<br>
 ("/Users/matthias/plt/collects"<br>
 &nbsp;(".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" =
 "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" =
 "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" =
 "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" =
 "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" =
 "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" =
 "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" =
 "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mz" =
 "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" =
 "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" =
 "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" =
 "racunit" "reader" "readline" "realm" "redex" "repo-time-stamp" =
 "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" =
 "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" =
 "slideshow" "srfi" "srpersist" "stepper" "string-constants" "s!<br>
 
 &nbsp;windle" "syntax" "syntax-color" "teachpack" "test-box-recovery" =
 "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed" =
 "typed-racket" "typed-scheme" "unstable" "version" "waterworld" =
 "web-server" "wxme" "xml" "xrepl"))<br>
 
 <br>
 Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t =
 ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 </blockquote></div><br></body></html>=
 
 --Apple-Mail=_638C0929-EC64-4C3B-9866-1667CA9CDA82--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13512: ->i with #:pre/name does not signal blame
 when the precondition fails
Date: Sat, 9 Feb 2013 17:43:48 -0600

 --e89a8f923da25ccf0404d5533fe4
 Content-Type: text/plain; charset=UTF-8
 
 I don't recall going through this with Philippe. And #:pre doesn't install
 an exception handler or put a contract boundary (not that the latter would
 do anything in this case anyways, since member doesn't have a blame-aware
 contract, just like + doesn't).
 
 Robby
 
 
 On Sat, Feb 9, 2013 at 5:22 PM, Matthias Felleisen <matthias@ccs.neu.edu>wrote:
 
 >
 > Well, I'd expect at least
 >
 > > (+ 'a 1)
 > . . +: contract violation
 >   expected: number?
 >   given: 'a
 >   argument position: 1st
 >   other arguments...:
 >    1
 >
 > As opposed to this:
 >
 > > (member '() 'a)
 > . . member: not a proper list: 'a
 >
 >
 > And the former may help. BUT, somehow I expected ->i to treat #:pre and
 > blame itself for running code that blows up.
 >
 > [[ Didn't we go thru this with Philippe? ]]
 >
 >
 >
 > On Feb 9, 2013, at 5:58 PM, Robby Findler wrote:
 >
 > Why do you expect something different?
 >
 > In other words, why is this not the same as this:
 >
 > (-> (if (member 'x 'y) integer? symbol?) any)
 >
 > Robby
 >
 >
 >
 > On Sat, Feb 9, 2013 at 4:32 PM, <matthias@ccs.neu.edu> wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13512
 >>
 >> Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)
 >>
 >> *** Description:
 >> If the precondition in an ->i fails, say like this
 >>
 >>  (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:"
 >> (member l x) (result natural-number/c))))
 >>
 >> all you get is a raw (old style) error message:
 >>
 >>  member: not a proper list: 'b
 >>
 >> If this is across several modules, you don't know where what broke.
 >>
 >> *** How to repeat:
 >> Here is a small single-module example:
 >>
 >> #lang racket
 >>
 >> (module A racket
 >>   (provide
 >>    (contract-out
 >>     (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:"
 >> (member l x) (result natural-number/c)))))
 >>
 >>   (define (f l x)
 >>     0))
 >>
 >> (module B racket
 >>   (require (submod ".." A))
 >>
 >>   (printf (f '(a b c) 'b)))
 >>
 >> (require (submod "." B))
 >>
 >> Distribute across two files to see that the error message is not a blame
 >> message.
 >>
 >> *** Environment:
 >> macosx "Darwin europeii.westell.com 11.4.2 Darwin Kernel Version 11.4.2:
 >> Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64"
 >> (x86_64-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 432394640
 >> Links: (links) = ("Acquire"); (links #:user? #f) = (); (links #:root? #t)
 >> = (); (links #:user? #f #:root? #t) = ()
 >> Planet2 (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  [none]
 >> User-specific, version-specific:
 >>  [none]
 >>
 >>
 >>
 >> Collections:
 >> ("/Users/matthias/0Unison/collects/"
 >>  ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain"
 >> "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils"
 >> "web"))
 >> ("/Users/matthias/Library/Racket/5.3.2.3/collects"
 >>  (non-existent-path))
 >> ("/Users/matthias/plt/collects"
 >>  (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser"
 >> "combinator-parser" "compatibility" "compiler" "config" "data" "datalog"
 >> "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext"
 >> "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime"
 >> "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder"
 >> "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html"
 >> "icons" "images" "info-domain" "json" "lang" "launcher" "lazy"
 >> "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom"
 >> "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs"
 >> "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs"
 >> "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline"
 >> "realm" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp"
 >> "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup"
 >> "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper"
 >> "string-constants" "s!
 >>  windle" "syntax" "syntax-color" "teachpack" "test-box-recovery"
 >> "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed"
 >> "typed-racket" "typed-scheme" "unstable" "version" "waterworld"
 >> "web-server" "wxme" "xml" "xrepl"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print
 >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >> (test))))
 >>
 >>
 >
 >
 
 --e89a8f923da25ccf0404d5533fe4
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I don&#39;t recall going through this with=C2=A0Philippe. =
 And #:pre doesn&#39;t install an exception handler or put a contract bounda=
 ry (not that the latter would do anything in this case anyways, since membe=
 r doesn&#39;t have a blame-aware contract, just like + doesn&#39;t).<div>
 <div><br></div><div style>Robby</div></div></div><div class=3D"gmail_extra"=
 ><br><br><div class=3D"gmail_quote">On Sat, Feb 9, 2013 at 5:22 PM, Matthia=
 s Felleisen <span dir=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" t=
 arget=3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div style=3D"word-wrap:break-word"><div><br=
 ></div><div>Well, I&#39;d expect at least=C2=A0</div><div><br></div><div>&g=
 t; (+ &#39;a 1)</div>
 <div>. . +: contract violation</div><div>=C2=A0 expected: number?</div><div=
 >=C2=A0 given: &#39;a</div><div>=C2=A0 argument position: 1st</div><div>=C2=
 =A0 other arguments...:</div><div>=C2=A0 =C2=A01</div><div><br></div><div>A=
 s opposed to this:=C2=A0</div><div>
 <br></div><div>&gt; (member &#39;() &#39;a)</div><div>. . member: not a pro=
 per list: &#39;a=C2=A0</div><div><br></div><div><br></div><div>And the form=
 er may help. BUT, somehow I expected -&gt;i to treat #:pre and blame itself=
  for running code that blows up.=C2=A0</div>
 <div><br></div><div>[[ Didn&#39;t we go thru this with Philippe? ]]</div><d=
 iv><div class=3D"h5"><div><br></div><div><br></div><br><div><div>On Feb 9, =
 2013, at 5:58 PM, Robby Findler wrote:</div><br><blockquote type=3D"cite"><=
 div dir=3D"ltr">
 <div>Why do you expect something different?</div><div><br></div><div>In oth=
 er words, why is this not the same as this:</div><div><br></div><div>(-&gt;=
  (if (member &#39;x &#39;y) integer? symbol?) any)<br>
 <br></div><div>Robby</div><div><br></div></div><div class=3D"gmail_extra"><=
 br><br><div class=3D"gmail_quote">On Sat, Feb 9, 2013 at 4:32 PM,  <span di=
 r=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" target=3D"_blank">mat=
 thias@ccs.neu.edu</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 512" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13512</a><br>
 <br>
 Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)<br>
 <br>
 *** Description:<br>
 If the precondition in an -&gt;i fails, say like this<br>
 <br>
 =C2=A0(f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) &quot;=
 bug:&quot; (member l x) (result natural-number/c))))<br>
 <br>
 all you get is a raw (old style) error message:<br>
 <br>
 =C2=A0member: not a proper list: &#39;b<br>
 <br>
 If this is across several modules, you don&#39;t know where what broke.<br>
 <br>
 *** How to repeat:<br>
 Here is a small single-module example:<br>
 <br>
 #lang racket<br>
 <br>
 (module A racket<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0(contract-out<br>
 =C2=A0 =C2=A0 (f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x=
 ) &quot;bug:&quot; (member l x) (result natural-number/c)))))<br>
 <br>
 =C2=A0 (define (f l x)<br>
 =C2=A0 =C2=A0 0))<br>
 <br>
 (module B racket<br>
 =C2=A0 (require (submod &quot;..&quot; A))<br>
 <br>
 =C2=A0 (printf (f &#39;(a b c) &#39;b)))<br>
 <br>
 (require (submod &quot;.&quot; B))<br>
 <br>
 Distribute across two files to see that the error message is not a blame me=
 ssage.<br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin <a href=3D"http://europeii.westell.com/" target=3D"_bla=
 nk">europeii.westell.com</a> 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 2=
 3 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64&quot; (x86_=
 64-macosx/3m) (get-display-depth) =3D 32<br>
 
 
 Human Language: english<br>
 (current-memory-use) 432394640<br>
 Links: (links) =3D (&quot;Acquire&quot;); (links #:user? #f) =3D (); (links=
  #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/matthias/0Unison/collects/&quot;<br>
 =C2=A0(&quot;._.DS_Store&quot; &quot;.DS_Store&quot; &quot;compiled&quot; &=
 quot;date&quot; &quot;finance&quot; &quot;info-domain&quot; &quot;info.ss&q=
 uot; &quot;pdf.ss~&quot; &quot;session&quot; &quot;short&quot; &quot;testin=
 g&quot; &quot;tll-collects&quot; &quot;utils&quot; &quot;web&quot;))<br>
 
 
 (&quot;/Users/matthias/Library/Racket/<a href=3D"http://5.3.2.3/collects" t=
 arget=3D"_blank">5.3.2.3/collects</a>&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/matthias/plt/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;2htdp&quot; &quot;afm&quot; &quot;algol=
 60&quot; &quot;at-exp&quot; &quot;browser&quot; &quot;combinator-parser&quo=
 t; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot; &quot;=
 data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &quot;de=
 inprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dynext&quo=
 t; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &quot;f=
 fi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; &quot;fu=
 ture-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gui-debu=
 gger&quot; &quot;guibuilder&quot; &quot;handin-client&quot; &quot;handin-se=
 rver&quot; &quot;help&quot; &quot;hierlist&quot; &quot;honu&quot; &quot;htd=
 p&quot; &quot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-do=
 main&quot; &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;laz=
 y&quot; &quot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;=
 meta&quot; &quot;mred&quot; &quot;mrlib&quot; &quot;mysterx&quot; &quot;mz&=
 quot; &quot;mzcom&quot; &quot;mzlib&quot; &quot;mzscheme&quot; &quot;net&qu=
 ot; &quot;openssl&quot; &quot;parser-tools&quot; &quot;picturing-programs&q=
 uot; &quot;plai&quot; &quot;planet&quot; &quot;planet2&quot; &quot;plot&quo=
 t; &quot;preprocessor&quot; &quot;profile&quot; &quot;r5rs&quot; &quot;r6rs=
 &quot; &quot;racket&quot; &quot;racklog&quot; &quot;rackunit&quot; &quot;ra=
 clog&quot; &quot;raco&quot; &quot;racunit&quot; &quot;reader&quot; &quot;re=
 adline&quot; &quot;realm&quot; &quot;redex&quot; &quot;repo-time-stamp&quot=
 ; &quot;repos-time-stamp&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;sch=
 elog&quot; &quot;scheme&quot; &quot;schemeunit&quot; &quot;scribble&quot; &=
 quot;scribblings&quot; &quot;scriblib&quot; &quot;setup&quot; &quot;sgl&quo=
 t; &quot;sirmail&quot; &quot;slatex&quot; &quot;slideshow&quot; &quot;srfi&=
 quot; &quot;srpersist&quot; &quot;stepper&quot; &quot;string-constants&quot=
 ; &quot;s!<br>
 
 
 =C2=A0windle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &quot;teachp=
 ack&quot; &quot;test-box-recovery&quot; &quot;test-engine&quot; &quot;tests=
 &quot; &quot;tex2page&quot; &quot;texpict&quot; &quot;tool&quot; &quot;trac=
 e&quot; &quot;typed&quot; &quot;typed-racket&quot; &quot;typed-scheme&quot;=
  &quot;unstable&quot; &quot;version&quot; &quot;waterworld&quot; &quot;web-=
 server&quot; &quot;wxme&quot; &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 </blockquote></div><br></div></div></div></blockquote></div><br></div>
 
 --e89a8f923da25ccf0404d5533fe4--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13512: ->i with #:pre/name does not signal blame
 when the precondition fails
Date: Sat, 9 Feb 2013 17:46:54 -0600

 --f46d0445184968ab5504d5534a75
 Content-Type: text/plain; charset=UTF-8
 
 Well, there are a bunch of calls to raise-mismatch-error in
 collects/racket/private/list.rkt that should probably be
 raise-arguments-error.
 
 Robby
 
 
 On Sat, Feb 9, 2013 at 5:43 PM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > I don't recall going through this with Philippe. And #:pre doesn't install
 > an exception handler or put a contract boundary (not that the latter would
 > do anything in this case anyways, since member doesn't have a blame-aware
 > contract, just like + doesn't).
 >
 > Robby
 >
 >
 > On Sat, Feb 9, 2013 at 5:22 PM, Matthias Felleisen <matthias@ccs.neu.edu>wrote:
 >
 >>
 >> Well, I'd expect at least
 >>
 >> > (+ 'a 1)
 >> . . +: contract violation
 >>   expected: number?
 >>   given: 'a
 >>   argument position: 1st
 >>   other arguments...:
 >>    1
 >>
 >> As opposed to this:
 >>
 >> > (member '() 'a)
 >> . . member: not a proper list: 'a
 >>
 >>
 >> And the former may help. BUT, somehow I expected ->i to treat #:pre and
 >> blame itself for running code that blows up.
 >>
 >> [[ Didn't we go thru this with Philippe? ]]
 >>
 >>
 >>
 >> On Feb 9, 2013, at 5:58 PM, Robby Findler wrote:
 >>
 >> Why do you expect something different?
 >>
 >> In other words, why is this not the same as this:
 >>
 >> (-> (if (member 'x 'y) integer? symbol?) any)
 >>
 >> Robby
 >>
 >>
 >>
 >> On Sat, Feb 9, 2013 at 4:32 PM, <matthias@ccs.neu.edu> wrote:
 >>
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=13512
 >>>
 >>> Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)
 >>>
 >>> *** Description:
 >>> If the precondition in an ->i fails, say like this
 >>>
 >>>  (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:"
 >>> (member l x) (result natural-number/c))))
 >>>
 >>> all you get is a raw (old style) error message:
 >>>
 >>>  member: not a proper list: 'b
 >>>
 >>> If this is across several modules, you don't know where what broke.
 >>>
 >>> *** How to repeat:
 >>> Here is a small single-module example:
 >>>
 >>> #lang racket
 >>>
 >>> (module A racket
 >>>   (provide
 >>>    (contract-out
 >>>     (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:"
 >>> (member l x) (result natural-number/c)))))
 >>>
 >>>   (define (f l x)
 >>>     0))
 >>>
 >>> (module B racket
 >>>   (require (submod ".." A))
 >>>
 >>>   (printf (f '(a b c) 'b)))
 >>>
 >>> (require (submod "." B))
 >>>
 >>> Distribute across two files to see that the error message is not a blame
 >>> message.
 >>>
 >>> *** Environment:
 >>> macosx "Darwin europeii.westell.com 11.4.2 Darwin Kernel Version
 >>> 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64
 >>> x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 432394640
 >>> Links: (links) = ("Acquire"); (links #:user? #f) = (); (links #:root?
 >>> #t) = (); (links #:user? #f #:root? #t) = ()
 >>> Planet2 (show):
 >>> Installation-wide:
 >>>  [none]
 >>> User-specific, all-version:
 >>>  [none]
 >>> User-specific, version-specific:
 >>>  [none]
 >>>
 >>>
 >>>
 >>> Collections:
 >>> ("/Users/matthias/0Unison/collects/"
 >>>  ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain"
 >>> "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils"
 >>> "web"))
 >>> ("/Users/matthias/Library/Racket/5.3.2.3/collects"
 >>>  (non-existent-path))
 >>> ("/Users/matthias/plt/collects"
 >>>  (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser"
 >>> "combinator-parser" "compatibility" "compiler" "config" "data" "datalog"
 >>> "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext"
 >>> "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime"
 >>> "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder"
 >>> "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html"
 >>> "icons" "images" "info-domain" "json" "lang" "launcher" "lazy"
 >>> "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom"
 >>> "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs"
 >>> "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs"
 >>> "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline"
 >>> "realm" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp"
 >>> "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup"
 >>> "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper"
 >>> "string-constants" "s!
 >>>  windle" "syntax" "syntax-color" "teachpack" "test-box-recovery"
 >>> "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed"
 >>> "typed-racket" "typed-scheme" "unstable" "version" "waterworld"
 >>> "web-server" "wxme" "xml" "xrepl"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print
 >>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >>> (test))))
 >>>
 >>>
 >>
 >>
 >
 
 --f46d0445184968ab5504d5534a75
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Well, there are a bunch of calls to raise-mismatch-error i=
 n collects/racket/private/list.rkt that should probably be raise-arguments-=
 error.<div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br><=
 br>
 <div class=3D"gmail_quote">On Sat, Feb 9, 2013 at 5:43 PM, Robby Findler <s=
 pan dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=
 =3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><blockquot=
 e class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc sol=
 id;padding-left:1ex">
 <div dir=3D"ltr">I don&#39;t recall going through this with=C2=A0Philippe. =
 And #:pre doesn&#39;t install an exception handler or put a contract bounda=
 ry (not that the latter would do anything in this case anyways, since membe=
 r doesn&#39;t have a blame-aware contract, just like + doesn&#39;t).<span c=
 lass=3D"HOEnZb"><font color=3D"#888888"><div>
 
 <div><br></div><div>Robby</div></div></font></span></div><div class=3D"HOEn=
 Zb"><div class=3D"h5"><div class=3D"gmail_extra"><br><br><div class=3D"gmai=
 l_quote">On Sat, Feb 9, 2013 at 5:22 PM, Matthias Felleisen <span dir=3D"lt=
 r">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" target=3D"_blank">matthias@c=
 cs.neu.edu</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div style=3D"word-wrap:break-word"><div><br=
 ></div><div>Well, I&#39;d expect at least=C2=A0</div><div><br></div><div>&g=
 t; (+ &#39;a 1)</div>
 
 <div>. . +: contract violation</div><div>=C2=A0 expected: number?</div><div=
 >=C2=A0 given: &#39;a</div><div>=C2=A0 argument position: 1st</div><div>=C2=
 =A0 other arguments...:</div><div>=C2=A0 =C2=A01</div><div><br></div><div>A=
 s opposed to this:=C2=A0</div>
 <div>
 <br></div><div>&gt; (member &#39;() &#39;a)</div><div>. . member: not a pro=
 per list: &#39;a=C2=A0</div><div><br></div><div><br></div><div>And the form=
 er may help. BUT, somehow I expected -&gt;i to treat #:pre and blame itself=
  for running code that blows up.=C2=A0</div>
 
 <div><br></div><div>[[ Didn&#39;t we go thru this with Philippe? ]]</div><d=
 iv><div><div><br></div><div><br></div><br><div><div>On Feb 9, 2013, at 5:58=
  PM, Robby Findler wrote:</div><br><blockquote type=3D"cite"><div dir=3D"lt=
 r">
 
 <div>Why do you expect something different?</div><div><br></div><div>In oth=
 er words, why is this not the same as this:</div><div><br></div><div>(-&gt;=
  (if (member &#39;x &#39;y) integer? symbol?) any)<br>
 <br></div><div>Robby</div><div><br></div></div><div class=3D"gmail_extra"><=
 br><br><div class=3D"gmail_quote">On Sat, Feb 9, 2013 at 4:32 PM,  <span di=
 r=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" target=3D"_blank">mat=
 thias@ccs.neu.edu</a>&gt;</span> wrote:<br>
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 512" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13512</a><br>
 <br>
 Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)<br>
 <br>
 *** Description:<br>
 If the precondition in an -&gt;i fails, say like this<br>
 <br>
 =C2=A0(f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) &quot;=
 bug:&quot; (member l x) (result natural-number/c))))<br>
 <br>
 all you get is a raw (old style) error message:<br>
 <br>
 =C2=A0member: not a proper list: &#39;b<br>
 <br>
 If this is across several modules, you don&#39;t know where what broke.<br>
 <br>
 *** How to repeat:<br>
 Here is a small single-module example:<br>
 <br>
 #lang racket<br>
 <br>
 (module A racket<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0(contract-out<br>
 =C2=A0 =C2=A0 (f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x=
 ) &quot;bug:&quot; (member l x) (result natural-number/c)))))<br>
 <br>
 =C2=A0 (define (f l x)<br>
 =C2=A0 =C2=A0 0))<br>
 <br>
 (module B racket<br>
 =C2=A0 (require (submod &quot;..&quot; A))<br>
 <br>
 =C2=A0 (printf (f &#39;(a b c) &#39;b)))<br>
 <br>
 (require (submod &quot;.&quot; B))<br>
 <br>
 Distribute across two files to see that the error message is not a blame me=
 ssage.<br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin <a href=3D"http://europeii.westell.com/" target=3D"_bla=
 nk">europeii.westell.com</a> 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 2=
 3 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64&quot; (x86_=
 64-macosx/3m) (get-display-depth) =3D 32<br>
 
 
 
 Human Language: english<br>
 (current-memory-use) 432394640<br>
 Links: (links) =3D (&quot;Acquire&quot;); (links #:user? #f) =3D (); (links=
  #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/matthias/0Unison/collects/&quot;<br>
 =C2=A0(&quot;._.DS_Store&quot; &quot;.DS_Store&quot; &quot;compiled&quot; &=
 quot;date&quot; &quot;finance&quot; &quot;info-domain&quot; &quot;info.ss&q=
 uot; &quot;pdf.ss~&quot; &quot;session&quot; &quot;short&quot; &quot;testin=
 g&quot; &quot;tll-collects&quot; &quot;utils&quot; &quot;web&quot;))<br>
 
 
 
 (&quot;/Users/matthias/Library/Racket/<a href=3D"http://5.3.2.3/collects" t=
 arget=3D"_blank">5.3.2.3/collects</a>&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/matthias/plt/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;2htdp&quot; &quot;afm&quot; &quot;algol=
 60&quot; &quot;at-exp&quot; &quot;browser&quot; &quot;combinator-parser&quo=
 t; &quot;compatibility&quot; &quot;compiler&quot; &quot;config&quot; &quot;=
 data&quot; &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &quot;de=
 inprogramm&quot; &quot;drracket&quot; &quot;drscheme&quot; &quot;dynext&quo=
 t; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &quot;f=
 fi&quot; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot; &quot;fu=
 ture-visualizer&quot; &quot;games&quot; &quot;graphics&quot; &quot;gui-debu=
 gger&quot; &quot;guibuilder&quot; &quot;handin-client&quot; &quot;handin-se=
 rver&quot; &quot;help&quot; &quot;hierlist&quot; &quot;honu&quot; &quot;htd=
 p&quot; &quot;html&quot; &quot;icons&quot; &quot;images&quot; &quot;info-do=
 main&quot; &quot;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;laz=
 y&quot; &quot;macro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;=
 meta&quot; &quot;mred&quot; &quot;mrlib&quot; &quot;mysterx&quot; &quot;mz&=
 quot; &quot;mzcom&quot; &quot;mzlib&quot; &quot;mzscheme&quot; &quot;net&qu=
 ot; &quot;openssl&quot; &quot;parser-tools&quot; &quot;picturing-programs&q=
 uot; &quot;plai&quot; &quot;planet&quot; &quot;planet2&quot; &quot;plot&quo=
 t; &quot;preprocessor&quot; &quot;profile&quot; &quot;r5rs&quot; &quot;r6rs=
 &quot; &quot;racket&quot; &quot;racklog&quot; &quot;rackunit&quot; &quot;ra=
 clog&quot; &quot;raco&quot; &quot;racunit&quot; &quot;reader&quot; &quot;re=
 adline&quot; &quot;realm&quot; &quot;redex&quot; &quot;repo-time-stamp&quot=
 ; &quot;repos-time-stamp&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;sch=
 elog&quot; &quot;scheme&quot; &quot;schemeunit&quot; &quot;scribble&quot; &=
 quot;scribblings&quot; &quot;scriblib&quot; &quot;setup&quot; &quot;sgl&quo=
 t; &quot;sirmail&quot; &quot;slatex&quot; &quot;slideshow&quot; &quot;srfi&=
 quot; &quot;srpersist&quot; &quot;stepper&quot; &quot;string-constants&quot=
 ; &quot;s!<br>
 
 
 
 =C2=A0windle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &quot;teachp=
 ack&quot; &quot;test-box-recovery&quot; &quot;test-engine&quot; &quot;tests=
 &quot; &quot;tex2page&quot; &quot;texpict&quot; &quot;tool&quot; &quot;trac=
 e&quot; &quot;typed&quot; &quot;typed-racket&quot; &quot;typed-scheme&quot;=
  &quot;unstable&quot; &quot;version&quot; &quot;waterworld&quot; &quot;web-=
 server&quot; &quot;wxme&quot; &quot;xml&quot; &quot;xrepl&quot;))<br>
 
 
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 </blockquote></div><br></div></div></div></blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 
 --f46d0445184968ab5504d5534a75--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13512: ->i with #:pre/name does not signal blame when the precondition fails
Date: Sat, 9 Feb 2013 19:38:12 -0500

 --Apple-Mail=_B5CC9E9F-CCAB-460B-ACBB-C1F5FB15C2DE
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 I think that might be all I need. -- Matthias
 
 
 
 On Feb 9, 2013, at 6:46 PM, Robby Findler wrote:
 
 > Well, there are a bunch of calls to raise-mismatch-error in =
 collects/racket/private/list.rkt that should probably be =
 raise-arguments-error.
 >=20
 > Robby
 >=20
 >=20
 > On Sat, Feb 9, 2013 at 5:43 PM, Robby Findler =
 <robby@eecs.northwestern.edu> wrote:
 > I don't recall going through this with Philippe. And #:pre doesn't =
 install an exception handler or put a contract boundary (not that the =
 latter would do anything in this case anyways, since member doesn't have =
 a blame-aware contract, just like + doesn't).
 >=20
 > Robby
 >=20
 >=20
 > On Sat, Feb 9, 2013 at 5:22 PM, Matthias Felleisen =
 <matthias@ccs.neu.edu> wrote:
 >=20
 > Well, I'd expect at least=20
 >=20
 > > (+ 'a 1)
 > . . +: contract violation
 >   expected: number?
 >   given: 'a
 >   argument position: 1st
 >   other arguments...:
 >    1
 >=20
 > As opposed to this:=20
 >=20
 > > (member '() 'a)
 > . . member: not a proper list: 'a=20
 >=20
 >=20
 > And the former may help. BUT, somehow I expected ->i to treat #:pre =
 and blame itself for running code that blows up.=20
 >=20
 > [[ Didn't we go thru this with Philippe? ]]
 >=20
 >=20
 >=20
 > On Feb 9, 2013, at 5:58 PM, Robby Findler wrote:
 >=20
 >> Why do you expect something different?
 >>=20
 >> In other words, why is this not the same as this:
 >>=20
 >> (-> (if (member 'x 'y) integer? symbol?) any)
 >>=20
 >> Robby
 >>=20
 >>=20
 >>=20
 >> On Sat, Feb 9, 2013 at 4:32 PM, <matthias@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13512
 >>=20
 >> Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)
 >>=20
 >> *** Description:
 >> If the precondition in an ->i fails, say like this
 >>=20
 >>  (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) "bug:" =
 (member l x) (result natural-number/c))))
 >>=20
 >> all you get is a raw (old style) error message:
 >>=20
 >>  member: not a proper list: 'b
 >>=20
 >> If this is across several modules, you don't know where what broke.
 >>=20
 >> *** How to repeat:
 >> Here is a small single-module example:
 >>=20
 >> #lang racket
 >>=20
 >> (module A racket
 >>   (provide
 >>    (contract-out
 >>     (f (->i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) =
 "bug:" (member l x) (result natural-number/c)))))
 >>=20
 >>   (define (f l x)
 >>     0))
 >>=20
 >> (module B racket
 >>   (require (submod ".." A))
 >>=20
 >>   (printf (f '(a b c) 'b)))
 >>=20
 >> (require (submod "." B))
 >>=20
 >> Distribute across two files to see that the error message is not a =
 blame message.
 >>=20
 >> *** Environment:
 >> macosx "Darwin europeii.westell.com 11.4.2 Darwin Kernel Version =
 11.4.2: Thu Aug 23 16:25:48 PDT 2012; =
 root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) =
 (get-display-depth) =3D 32
 >> Human Language: english
 >> (current-memory-use) 432394640
 >> Links: (links) =3D ("Acquire"); (links #:user? #f) =3D (); (links =
 #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()
 >> Planet2 (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  [none]
 >> User-specific, version-specific:
 >>  [none]
 >>=20
 >>=20
 >>=20
 >> Collections:
 >> ("/Users/matthias/0Unison/collects/"
 >>  ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain" =
 "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" =
 "web"))
 >> ("/Users/matthias/Library/Racket/5.3.2.3/collects"
 >>  (non-existent-path))
 >> ("/Users/matthias/plt/collects"
 >>  (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" =
 "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" =
 "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" =
 "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" =
 "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" =
 "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" =
 "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" =
 "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mz" =
 "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" =
 "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" =
 "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" =
 "racunit" "reader" "readline" "realm" "redex" "repo-time-stamp" =
 "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" =
 "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" =
 "slideshow" "srfi" "srpersist" "stepper" "string-constants" "s!
 >>  windle" "syntax" "syntax-color" "teachpack" "test-box-recovery" =
 "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed" =
 "typed-racket" "typed-scheme" "unstable" "version" "waterworld" =
 "web-server" "wxme" "xml" "xrepl"))
 >>=20
 >> Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t =
 ((main) (test))))
 >>=20
 >>=20
 >=20
 >=20
 >=20
 
 
 --Apple-Mail=_B5CC9E9F-CCAB-460B-ACBB-C1F5FB15C2DE
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=us-ascii
 
 <html><head></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
 "><div><br></div><div>I think that might be all I need. -- =
 Matthias</div><div><br></div><div><br></div><br><div><div>On Feb 9, =
 2013, at 6:46 PM, Robby Findler wrote:</div><br =
 class=3D"Apple-interchange-newline"><blockquote type=3D"cite"><div =
 dir=3D"ltr">Well, there are a bunch of calls to raise-mismatch-error in =
 collects/racket/private/list.rkt that should probably be =
 raise-arguments-error.<div><br></div><div>Robby</div></div><div =
 class=3D"gmail_extra"><br><br>
 <div class=3D"gmail_quote">On Sat, Feb 9, 2013 at 5:43 PM, Robby Findler =
 <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" =
 target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> =
 wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 <div dir=3D"ltr">I don't recall going through this with&nbsp;Philippe. =
 And #:pre doesn't install an exception handler or put a contract =
 boundary (not that the latter would do anything in this case anyways, =
 since member doesn't have a blame-aware contract, just like + =
 doesn't).<span class=3D"HOEnZb"><font color=3D"#888888"><div>
 
 <div><br></div><div>Robby</div></div></font></span></div><div =
 class=3D"HOEnZb"><div class=3D"h5"><div class=3D"gmail_extra"><br><br><div=
  class=3D"gmail_quote">On Sat, Feb 9, 2013 at 5:22 PM, Matthias =
 Felleisen <span dir=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" =
 target=3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div =
 style=3D"word-wrap:break-word"><div><br></div><div>Well, I'd expect at =
 least&nbsp;</div><div><br></div><div>&gt; (+ 'a 1)</div>
 
 <div>. . +: contract violation</div><div>&nbsp; expected: =
 number?</div><div>&nbsp; given: 'a</div><div>&nbsp; argument position: =
 1st</div><div>&nbsp; other arguments...:</div><div>&nbsp; =
 &nbsp;1</div><div><br></div><div>As opposed to this:&nbsp;</div>
 <div>
 <br></div><div>&gt; (member '() 'a)</div><div>. . member: not a proper =
 list: 'a&nbsp;</div><div><br></div><div><br></div><div>And the former =
 may help. BUT, somehow I expected -&gt;i to treat #:pre and blame itself =
 for running code that blows up.&nbsp;</div>
 
 <div><br></div><div>[[ Didn't we go thru this with Philippe? =
 ]]</div><div><div><div><br></div><div><br></div><br><div><div>On Feb 9, =
 2013, at 5:58 PM, Robby Findler wrote:</div><br><blockquote =
 type=3D"cite"><div dir=3D"ltr">
 
 <div>Why do you expect something different?</div><div><br></div><div>In =
 other words, why is this not the same as =
 this:</div><div><br></div><div>(-&gt; (if (member 'x 'y) integer? =
 symbol?) any)<br>
 <br></div><div>Robby</div><div><br></div></div><div =
 class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Sat, Feb 9, =
 2013 at 4:32 PM,  <span dir=3D"ltr">&lt;<a =
 href=3D"mailto:matthias@ccs.neu.edu" =
 target=3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> wrote:<br>
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex">A new problem report =
 is waiting at<br>
 &nbsp; <a =
 href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13512" =
 target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D1=
 3512</a><br>
 <br>
 Reported by matthias for release: 5.3.2.3--2013-02-06(a85a7198/d)<br>
 <br>
 *** Description:<br>
 If the precondition in an -&gt;i fails, say like this<br>
 <br>
 &nbsp;(f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name (l x) =
 "bug:" (member l x) (result natural-number/c))))<br>
 <br>
 all you get is a raw (old style) error message:<br>
 <br>
 &nbsp;member: not a proper list: 'b<br>
 <br>
 If this is across several modules, you don't know where what broke.<br>
 <br>
 *** How to repeat:<br>
 Here is a small single-module example:<br>
 <br>
 #lang racket<br>
 <br>
 (module A racket<br>
 &nbsp; (provide<br>
 &nbsp; &nbsp;(contract-out<br>
 &nbsp; &nbsp; (f (-&gt;i ((l (listof symbol?)) (x symbol?)) #:pre/name =
 (l x) "bug:" (member l x) (result natural-number/c)))))<br>
 <br>
 &nbsp; (define (f l x)<br>
 &nbsp; &nbsp; 0))<br>
 <br>
 (module B racket<br>
 &nbsp; (require (submod ".." A))<br>
 <br>
 &nbsp; (printf (f '(a b c) 'b)))<br>
 <br>
 (require (submod "." B))<br>
 <br>
 Distribute across two files to see that the error message is not a blame =
 message.<br>
 <br>
 *** Environment:<br>
 macosx "Darwin <a href=3D"http://europeii.westell.com/" =
 target=3D"_blank">europeii.westell.com</a> 11.4.2 Darwin Kernel Version =
 11.4.2: Thu Aug 23 16:25:48 PDT 2012; =
 root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) =
 (get-display-depth) =3D 32<br>
 
 
 
 Human Language: english<br>
 (current-memory-use) 432394640<br>
 Links: (links) =3D ("Acquire"); (links #:user? #f) =3D (); (links =
 #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 &nbsp;[none]<br>
 User-specific, all-version:<br>
 &nbsp;[none]<br>
 User-specific, version-specific:<br>
 &nbsp;[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 ("/Users/matthias/0Unison/collects/"<br>
 &nbsp;("._.DS_Store" ".DS_Store" "compiled" "date" "finance" =
 "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" =
 "tll-collects" "utils" "web"))<br>
 
 
 
 ("/Users/matthias/Library/Racket/<a href=3D"http://5.3.2.3/collects" =
 target=3D"_blank">5.3.2.3/collects</a>"<br>
 &nbsp;(non-existent-path))<br>
 ("/Users/matthias/plt/collects"<br>
 &nbsp;(".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" =
 "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" =
 "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" =
 "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" =
 "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" =
 "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" =
 "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" =
 "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mz" =
 "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" =
 "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" =
 "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" =
 "racunit" "reader" "readline" "realm" "redex" "repo-time-stamp" =
 "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" =
 "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" =
 "slideshow" "srfi" "srpersist" "stepper" "string-constants" "s!<br>
 
 
 
 &nbsp;windle" "syntax" "syntax-color" "teachpack" "test-box-recovery" =
 "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed" =
 "typed-racket" "typed-scheme" "unstable" "version" "waterworld" =
 "web-server" "wxme" "xml" "xrepl"))<br>
 
 
 
 <br>
 Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t =
 ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 </blockquote></div><br></div></div></div></blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 </blockquote></div><br></body></html>=
 
 --Apple-Mail=_B5CC9E9F-CCAB-460B-ACBB-C1F5FB15C2DE--
