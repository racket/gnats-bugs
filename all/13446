From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jan 23 01:19:32 2013
Received: from mail-oa0-f42.google.com (mail-oa0-f42.google.com [209.85.219.42])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r0N6IsJm000420
	for <bugs@bugs.plt-scheme.org>; Wed, 23 Jan 2013 01:18:54 -0500
Message-Id: <201301230618.r0N6Ip1E000415@champlain.ccs.neu.edu>
Date: Wed, 23 Jan 2013 01:18:51 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR does not correctly generate contracts for parameters

>Number:         13446
>Category:       all
>Synopsis:       TR does not correctly generate contracts for parameters
>Class:          sw-bug
>Responsible:    asumu
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jan 23 01:20:01 -0500 2013
>Closed-Date:    Wed Jan 23 14:46:25 -0500 2013
>Last-Modified:  Fri Mar 01 21:32:01 -0500 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
Parameters where input and output are not equal, are unsound.
>How-To-Repeat:
#lang racket/load

(module a typed/racket
  (provide p)
  (: p (Parameterof String Index))
  (define p (make-parameter 0 string-length)))

(require 'a) 
(p 0)
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 11:48:33 -0500

 On 2013-01-23 01:20:02 -0500, eric.n.dobson@gmail.com wrote:
 > *** Description:
 > Parameters where input and output are not equal, are unsound.
 
 It looks like that we would need to modify `parameter/c` to fix this,
 since `parameter/c` currently doesn't allow different guards on setting
 and retrieving the data in a parameter.
 
 For backwards compatibility, how about modifying `parameter/c` to
 take a keyword argument #:guard that takes a contract that checks when
 the parameter is set?
 
 Cheers,
 Asumu
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 11:57:14 -0500

 Why not just add a second, optional argument to `parameter/c`, with
 the same semantics as `Parameterof`?
 
 On Wed, Jan 23, 2013 at 11:48 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2013-01-23 01:20:02 -0500, eric.n.dobson@gmail.com wrote:
 >> *** Description:
 >> Parameters where input and output are not equal, are unsound.
 >
 > It looks like that we would need to modify `parameter/c` to fix this,
 > since `parameter/c` currently doesn't allow different guards on setting
 > and retrieving the data in a parameter.
 >
 > For backwards compatibility, how about modifying `parameter/c` to
 > take a keyword argument #:guard that takes a contract that checks when
 > the parameter is set?
 >
 > Cheers,
 > Asumu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 11:02:58 -0600

 --e89a8ff1c7c692d93404d3f7aa9f
 Content-Type: text/plain; charset=UTF-8
 
 I was just trying to think thru how that would work.
 
 But why didn't you use the name "Parameter" for this type?
 
 
 On Wed, Jan 23, 2013 at 10:57 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 
 > Why not just add a second, optional argument to `parameter/c`, with
 > the same semantics as `Parameterof`?
 >
 > On Wed, Jan 23, 2013 at 11:48 AM, Asumu Takikawa <asumu@ccs.neu.edu>
 > wrote:
 > > On 2013-01-23 01:20:02 -0500, eric.n.dobson@gmail.com wrote:
 > >> *** Description:
 > >> Parameters where input and output are not equal, are unsound.
 > >
 > > It looks like that we would need to modify `parameter/c` to fix this,
 > > since `parameter/c` currently doesn't allow different guards on setting
 > > and retrieving the data in a parameter.
 > >
 > > For backwards compatibility, how about modifying `parameter/c` to
 > > take a keyword argument #:guard that takes a contract that checks when
 > > the parameter is set?
 > >
 > > Cheers,
 > > Asumu
 >
 
 --e89a8ff1c7c692d93404d3f7aa9f
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I was just trying to think thru how that would work.<div><=
 br></div><div style>But why didn&#39;t you use the name &quot;Parameter&quo=
 t; for this type?</div></div><div class=3D"gmail_extra"><br><br><div class=
 =3D"gmail_quote">
 On Wed, Jan 23, 2013 at 10:57 AM, Sam Tobin-Hochstadt <span dir=3D"ltr">&lt=
 ;<a href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</=
 a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0=
  0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 Why not just add a second, optional argument to `parameter/c`, with<br>
 the same semantics as `Parameterof`?<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Wed, Jan 23, 2013 at 11:48 AM, Asumu Takikawa &lt;<a href=3D"mailto:asum=
 u@ccs.neu.edu">asumu@ccs.neu.edu</a>&gt; wrote:<br>
 &gt; On 2013-01-23 01:20:02 -0500, <a href=3D"mailto:eric.n.dobson@gmail.co=
 m">eric.n.dobson@gmail.com</a> wrote:<br>
 &gt;&gt; *** Description:<br>
 &gt;&gt; Parameters where input and output are not equal, are unsound.<br>
 &gt;<br>
 &gt; It looks like that we would need to modify `parameter/c` to fix this,<=
 br>
 &gt; since `parameter/c` currently doesn&#39;t allow different guards on se=
 tting<br>
 &gt; and retrieving the data in a parameter.<br>
 &gt;<br>
 &gt; For backwards compatibility, how about modifying `parameter/c` to<br>
 &gt; take a keyword argument #:guard that takes a contract that checks when=
 <br>
 &gt; the parameter is set?<br>
 &gt;<br>
 &gt; Cheers,<br>
 &gt; Asumu<br>
 </div></div></blockquote></div><br></div>
 
 --e89a8ff1c7c692d93404d3f7aa9f--
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 12:02:11 -0500

 On 2013-01-23 11:57:14 -0500, Sam Tobin-Hochstadt wrote:
 > Why not just add a second, optional argument to `parameter/c`, with
 > the same semantics as `Parameterof`?
 
 That's probably a better idea, yeah. I don't remember why I thought it
 would be backwards incompatible to do that.
 
 Cheers,
 Asumu
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 12:14:53 -0500

 On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > But why didn't you use the name "Parameter" for this type?
 
 The Typed Racket convention is to use the `of` suffix for containers,
 the way the `listof` contract combinator works.  I'm open to changing
 this, though, if you have a suggestion.  How did you decide on the
 combination of `list/c`, `listof`, and `parameter/c`?
 
 Sam
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 11:34:37 -0600

 --bcaec54c4e7cb7feb604d3f81ba9
 Content-Type: text/plain; charset=UTF-8
 
 On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 
 > On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > But why didn't you use the name "Parameter" for this type?
 >
 > The Typed Racket convention is to use the `of` suffix for containers,
 > the way the `listof` contract combinator works.  I'm open to changing
 > this, though, if you have a suggestion.  How did you decide on the
 > combination of `list/c`, `listof`, and `parameter/c`?
 >
 >
 Generally I use "/c" for all contracts unless there is a place where you
 want two different contracts (list/c and listof) for a single container. In
 that case, when one argument to the contract that applies to a bunch of
 different things in the container then I used "of".
 
 That is, I would be happiest if the contract library's adds "/c" suffix
 when TR's capitalizes the first letter.
 
 So we have:
 
  list/c <-> List
  listof <-> Listof
  parameter/c <-> Parameter
 
 ... are there places where that doesn't work?
 
 Robby
 
 --bcaec54c4e7cb7feb604d3f81ba9
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt <span dir=3D"=
 ltr">&lt;<a href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.n=
 eu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div class=3D"im">On Wed, Jan 23, 2013 at 12=
 :02 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt; But why didn&#39;t you use the name &quot;Parameter&quot; for this typ=
 e?<br>
 <br>
 </div>The Typed Racket convention is to use the `of` suffix for containers,=
 <br>
 the way the `listof` contract combinator works. =C2=A0I&#39;m open to chang=
 ing<br>
 this, though, if you have a suggestion. =C2=A0How did you decide on the<br>
 combination of `list/c`, `listof`, and `parameter/c`?<br><br></blockquote><=
 div><br></div><div style>Generally I use &quot;/c&quot; for all contracts u=
 nless there is a place where you want two different contracts (list/c and l=
 istof) for a single container. In that case, when one argument to the contr=
 act that applies to a bunch of different things in the container then I use=
 d &quot;of&quot;.</div>
 <div style><br></div><div style>That is, I would be happiest if the contrac=
 t library&#39;s adds &quot;/c&quot; suffix when TR&#39;s capitalizes the fi=
 rst letter.</div><div style><br></div><div style>So we have:</div><div styl=
 e>
 <br></div><div style>=C2=A0list/c &lt;-&gt; List</div><div style>=C2=A0list=
 of &lt;-&gt; Listof</div><div style>=C2=A0parameter/c &lt;-&gt; Parameter</=
 div><div style><br></div><div style>... are there places where that doesn&#=
 39;t work?</div>
 <div style><br></div><div style>Robby</div></div><br></div></div>
 
 --bcaec54c4e7cb7feb604d3f81ba9--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 12:39:35 -0500

 I think that works everywhere.  I was trying to come up with a rule to
 make naming consistent for boxes/lists/pairs/etc. I guess the rule
 would be that `of` as a suffix is only used when distinguishing two
 possibilities.
 
 On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 >
 >
 >
 > On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>
 > wrote:
 >>
 >> On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> > But why didn't you use the name "Parameter" for this type?
 >>
 >> The Typed Racket convention is to use the `of` suffix for containers,
 >> the way the `listof` contract combinator works.  I'm open to changing
 >> this, though, if you have a suggestion.  How did you decide on the
 >> combination of `list/c`, `listof`, and `parameter/c`?
 >>
 >
 > Generally I use "/c" for all contracts unless there is a place where you
 > want two different contracts (list/c and listof) for a single container. In
 > that case, when one argument to the contract that applies to a bunch of
 > different things in the container then I used "of".
 >
 > That is, I would be happiest if the contract library's adds "/c" suffix when
 > TR's capitalizes the first letter.
 >
 > So we have:
 >
 >  list/c <-> List
 >  listof <-> Listof
 >  parameter/c <-> Parameter
 >
 > ... are there places where that doesn't work?
 >
 > Robby
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 11:57:57 -0600

 --f46d044630063247f904d3f86ff2
 Content-Type: text/plain; charset=UTF-8
 
 (its)
 
 
 On Wed, Jan 23, 2013 at 11:57 AM, Robby Findler <robby@eecs.northwestern.edu
 > wrote:
 
 > Yeah, well and "of" somehow carries the "lots of" meaning to me which
 > suggests it fits better with the contract systems' existing "listof" than
 > it's "list/c".
 >
 > FWIW, I got this convention from MrSpidey. :)
 >
 > Robby
 >
 >
 > On Wed, Jan 23, 2013 at 11:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 >
 >> I think that works everywhere.  I was trying to come up with a rule to
 >> make naming consistent for boxes/lists/pairs/etc. I guess the rule
 >> would be that `of` as a suffix is only used when distinguishing two
 >> possibilities.
 >>
 >> On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> >
 >> >
 >> >
 >> > On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt <
 >> samth@ccs.neu.edu>
 >> > wrote:
 >> >>
 >> >> On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler
 >> >> <robby@eecs.northwestern.edu> wrote:
 >> >> > But why didn't you use the name "Parameter" for this type?
 >> >>
 >> >> The Typed Racket convention is to use the `of` suffix for containers,
 >> >> the way the `listof` contract combinator works.  I'm open to changing
 >> >> this, though, if you have a suggestion.  How did you decide on the
 >> >> combination of `list/c`, `listof`, and `parameter/c`?
 >> >>
 >> >
 >> > Generally I use "/c" for all contracts unless there is a place where you
 >> > want two different contracts (list/c and listof) for a single
 >> container. In
 >> > that case, when one argument to the contract that applies to a bunch of
 >> > different things in the container then I used "of".
 >> >
 >> > That is, I would be happiest if the contract library's adds "/c" suffix
 >> when
 >> > TR's capitalizes the first letter.
 >> >
 >> > So we have:
 >> >
 >> >  list/c <-> List
 >> >  listof <-> Listof
 >> >  parameter/c <-> Parameter
 >> >
 >> > ... are there places where that doesn't work?
 >> >
 >> > Robby
 >> >
 >>
 >
 >
 
 --f46d044630063247f904d3f86ff2
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">(its)</div><div class=3D"gmail_extra"><br><br><div class=
 =3D"gmail_quote">On Wed, Jan 23, 2013 at 11:57 AM, Robby Findler <span dir=
 =3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blan=
 k">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">Yeah, well and &quot;of&quo=
 t; somehow carries the &quot;lots of&quot; meaning to me which suggests it =
 fits better with the contract systems&#39; existing &quot;listof&quot; than=
  it&#39;s &quot;list/c&quot;.<div>
 
 <br></div><div>FWIW, I got this convention from MrSpidey. :)</div><span cla=
 ss=3D"HOEnZb"><font color=3D"#888888"><div><br>Robby</div></font></span></d=
 iv><div class=3D"HOEnZb"><div class=3D"h5"><div class=3D"gmail_extra"><br><=
 br><div class=3D"gmail_quote">
 On Wed, Jan 23, 2013 at 11:39 AM, Sam Tobin-Hochstadt <span dir=3D"ltr">&lt=
 ;<a href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</=
 a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I think that works everywhere. =C2=A0I was t=
 rying to come up with a rule to<br>
 make naming consistent for boxes/lists/pairs/etc. I guess the rule<br>
 would be that `of` as a suffix is only used when distinguishing two<br>
 possibilities.<br>
 <br>
 On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler<br>
 <div><div>&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_bla=
 nk">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt &lt;<a href=3D"m=
 ailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blan=
 k">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt; But why didn&#39;t you use the name &quot;Parameter&quot; for=
  this type?<br>
 &gt;&gt;<br>
 &gt;&gt; The Typed Racket convention is to use the `of` suffix for containe=
 rs,<br>
 &gt;&gt; the way the `listof` contract combinator works. =C2=A0I&#39;m open=
  to changing<br>
 &gt;&gt; this, though, if you have a suggestion. =C2=A0How did you decide o=
 n the<br>
 &gt;&gt; combination of `list/c`, `listof`, and `parameter/c`?<br>
 &gt;&gt;<br>
 &gt;<br>
 &gt; Generally I use &quot;/c&quot; for all contracts unless there is a pla=
 ce where you<br>
 &gt; want two different contracts (list/c and listof) for a single containe=
 r. In<br>
 &gt; that case, when one argument to the contract that applies to a bunch o=
 f<br>
 &gt; different things in the container then I used &quot;of&quot;.<br>
 &gt;<br>
 &gt; That is, I would be happiest if the contract library&#39;s adds &quot;=
 /c&quot; suffix when<br>
 &gt; TR&#39;s capitalizes the first letter.<br>
 &gt;<br>
 &gt; So we have:<br>
 &gt;<br>
 &gt; =C2=A0list/c &lt;-&gt; List<br>
 &gt; =C2=A0listof &lt;-&gt; Listof<br>
 &gt; =C2=A0parameter/c &lt;-&gt; Parameter<br>
 &gt;<br>
 &gt; ... are there places where that doesn&#39;t work?<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 
 --f46d044630063247f904d3f86ff2--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 11:57:42 -0600

 --14dae93993c344e38c04d3f86e9d
 Content-Type: text/plain; charset=UTF-8
 
 Yeah, well and "of" somehow carries the "lots of" meaning to me which
 suggests it fits better with the contract systems' existing "listof" than
 it's "list/c".
 
 FWIW, I got this convention from MrSpidey. :)
 
 Robby
 
 
 On Wed, Jan 23, 2013 at 11:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 
 > I think that works everywhere.  I was trying to come up with a rule to
 > make naming consistent for boxes/lists/pairs/etc. I guess the rule
 > would be that `of` as a suffix is only used when distinguishing two
 > possibilities.
 >
 > On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > >
 > >
 > >
 > > On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu
 > >
 > > wrote:
 > >>
 > >> On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler
 > >> <robby@eecs.northwestern.edu> wrote:
 > >> > But why didn't you use the name "Parameter" for this type?
 > >>
 > >> The Typed Racket convention is to use the `of` suffix for containers,
 > >> the way the `listof` contract combinator works.  I'm open to changing
 > >> this, though, if you have a suggestion.  How did you decide on the
 > >> combination of `list/c`, `listof`, and `parameter/c`?
 > >>
 > >
 > > Generally I use "/c" for all contracts unless there is a place where you
 > > want two different contracts (list/c and listof) for a single container.
 > In
 > > that case, when one argument to the contract that applies to a bunch of
 > > different things in the container then I used "of".
 > >
 > > That is, I would be happiest if the contract library's adds "/c" suffix
 > when
 > > TR's capitalizes the first letter.
 > >
 > > So we have:
 > >
 > >  list/c <-> List
 > >  listof <-> Listof
 > >  parameter/c <-> Parameter
 > >
 > > ... are there places where that doesn't work?
 > >
 > > Robby
 > >
 >
 
 --14dae93993c344e38c04d3f86e9d
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Yeah, well and &quot;of&quot; somehow carries the &quot;lo=
 ts of&quot; meaning to me which suggests it fits better with the contract s=
 ystems&#39; existing &quot;listof&quot; than it&#39;s &quot;list/c&quot;.<d=
 iv>
 <br></div><div style>FWIW, I got this convention from MrSpidey. :)</div><di=
 v style><br>Robby</div></div><div class=3D"gmail_extra"><br><br><div class=
 =3D"gmail_quote">On Wed, Jan 23, 2013 at 11:39 AM, Sam Tobin-Hochstadt <spa=
 n dir=3D"ltr">&lt;<a href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">sa=
 mth@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I think that works everywhere. =C2=A0I was t=
 rying to come up with a rule to<br>
 make naming consistent for boxes/lists/pairs/etc. I guess the rule<br>
 would be that `of` as a suffix is only used when distinguishing two<br>
 possibilities.<br>
 <br>
 On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler<br>
 <div class=3D"HOEnZb"><div class=3D"h5">&lt;<a href=3D"mailto:robby@eecs.no=
 rthwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt &lt;<a href=3D"m=
 ailto:samth@ccs.neu.edu">samth@ccs.neu.edu</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.nort=
 hwestern.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt; But why didn&#39;t you use the name &quot;Parameter&quot; for=
  this type?<br>
 &gt;&gt;<br>
 &gt;&gt; The Typed Racket convention is to use the `of` suffix for containe=
 rs,<br>
 &gt;&gt; the way the `listof` contract combinator works. =C2=A0I&#39;m open=
  to changing<br>
 &gt;&gt; this, though, if you have a suggestion. =C2=A0How did you decide o=
 n the<br>
 &gt;&gt; combination of `list/c`, `listof`, and `parameter/c`?<br>
 &gt;&gt;<br>
 &gt;<br>
 &gt; Generally I use &quot;/c&quot; for all contracts unless there is a pla=
 ce where you<br>
 &gt; want two different contracts (list/c and listof) for a single containe=
 r. In<br>
 &gt; that case, when one argument to the contract that applies to a bunch o=
 f<br>
 &gt; different things in the container then I used &quot;of&quot;.<br>
 &gt;<br>
 &gt; That is, I would be happiest if the contract library&#39;s adds &quot;=
 /c&quot; suffix when<br>
 &gt; TR&#39;s capitalizes the first letter.<br>
 &gt;<br>
 &gt; So we have:<br>
 &gt;<br>
 &gt; =C2=A0list/c &lt;-&gt; List<br>
 &gt; =C2=A0listof &lt;-&gt; Listof<br>
 &gt; =C2=A0parameter/c &lt;-&gt; Parameter<br>
 &gt;<br>
 &gt; ... are there places where that doesn&#39;t work?<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --14dae93993c344e38c04d3f86e9d--
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 13:11:13 -0500

 --MPkR1dXiUZqK+927
 Content-Type: text/plain; charset=us-ascii
 Content-Disposition: inline
 
 On 2013-01-23 11:57:14 -0500, Sam Tobin-Hochstadt wrote:
 > Why not just add a second, optional argument to `parameter/c`, with
 > the same semantics as `Parameterof`?
 
 Here's a patch that implements the contract change (attached). Look
 okay? I'm still testing the fix on the TR side.
 
 Cheers,
 Asumu
 
 --MPkR1dXiUZqK+927
 Content-Type: text/x-diff; charset=utf-8
 Content-Disposition: attachment; filename="0001-Equip-parameter-c-with-separate-in-out-contracts.patch"
 Content-Transfer-Encoding: 8bit
 
 From 4b075faeca05a03aa73f4d842a728d6f776a81c2 Mon Sep 17 00:00:00 2001
 From: Asumu Takikawa <asumu@ccs.neu.edu>
 Date: Wed, 23 Jan 2013 13:04:57 -0500
 Subject: [PATCH] Equip `parameter/c` with separate in/out contracts
 
 ---
  collects/racket/contract/private/misc.rkt      |   35 +++++++++--------
  collects/scribblings/reference/contracts.scrbl |   21 +++++++++-
  collects/tests/racket/contract-test.rktl       |   49 +++++++++++++++++++++++-
  3 files changed, 86 insertions(+), 19 deletions(-)
 
 diff --git a/collects/racket/contract/private/misc.rkt b/collects/racket/contract/private/misc.rkt
 index eaead9f..2d9e896 100644
 --- a/collects/racket/contract/private/misc.rkt
 +++ b/collects/racket/contract/private/misc.rkt
 @@ -850,20 +850,25 @@
                                    (values p-app promise))))))))
         #:first-order promise?))))
  
 -(define/subexpression-pos-prop (parameter/c x)
 -  (make-parameter/c (coerce-contract 'parameter/c x)))
 -
 -(define-struct parameter/c (ctc)
 +;; (parameter/c in/out-ctc)
 +;; (parameter/c in-ctc out-ctc)
 +(define/subexpression-pos-prop parameter/c
 +  (λ (in-ctc [out-ctc in-ctc])
 +    (make-parameter/c (coerce-contract 'parameter/c in-ctc)
 +                      (coerce-contract 'parameter-c out-ctc))))
 +
 +(define-struct parameter/c (in out)
    #:omit-define-syntaxes
    #:property prop:contract
    (build-contract-property
     #:projection
     (λ (ctc)
 -      (let ([c-proc (contract-projection (parameter/c-ctc ctc))])
 +      (let* ([in-proc (contract-projection (parameter/c-in ctc))]
 +             [out-proc (contract-projection (parameter/c-out ctc))])
          (λ (blame)
            (define blame/c (blame-add-context blame "the parameter of"))
 -          (define partial-neg-contract (c-proc (blame-swap blame/c)))
 -          (define partial-pos-contract (c-proc blame/c))
 +          (define partial-neg-contract (in-proc (blame-swap blame/c)))
 +          (define partial-pos-contract (out-proc blame/c))
            (λ (val)
              (cond
                [(parameter? val)
 @@ -875,23 +880,23 @@
                 (raise-blame-error blame val '(expected "a parameter"))])))))
  
     #:name
 -   (λ (ctc) (build-compound-type-name 'parameter/c (parameter/c-ctc ctc)))
 +   (λ (ctc) (build-compound-type-name 'parameter/c
 +                                      (parameter/c-in ctc)
 +                                      (parameter/c-out ctc)))
     #:first-order
     (λ (ctc)
 -      (let ([tst (contract-first-order (parameter/c-ctc ctc))])
 +      (let ([tst (contract-first-order (parameter/c-out ctc))])
          (λ (x)
             (and (parameter? x)
                  (tst (x))))))
  
     #:stronger
     (λ (this that)
 -      ;; must be invariant (because the library doesn't currently split out pos/neg contracts
 -      ;; which could be tested individually ....)
        (and (parameter/c? that)
 -           (contract-stronger? (parameter/c-ctc this) 
 -                               (parameter/c-ctc that))
 -           (contract-stronger? (parameter/c-ctc that) 
 -                               (parameter/c-ctc this))))))
 +           (and (contract-stronger? (parameter/c-out this)
 +                                    (parameter/c-out that))
 +                (contract-stronger? (parameter/c-in that)
 +                                    (parameter/c-in this)))))))
  
  (define-struct procedure-arity-includes/c (n)
    #:omit-define-syntaxes
 diff --git a/collects/scribblings/reference/contracts.scrbl b/collects/scribblings/reference/contracts.scrbl
 index cbd2f8c..ed66dac 100644
 --- a/collects/scribblings/reference/contracts.scrbl
 +++ b/collects/scribblings/reference/contracts.scrbl
 @@ -476,10 +476,27 @@ inspect the entire tree.
  }
  
  
 -@defproc[(parameter/c [c contract?]) contract?]{
 +@defproc[(parameter/c [in contract?] [out contract? in])
 +         contract?]{
  
  Produces a contract on parameters whose values must match
 -@racket[contract].}
 +@racket[_out]. When the value in the contracted parameter
 +is set, it must match @racket[_in].
 +
 +@examples[#:eval (contract-eval)
 +(define/contract current-snack
 +  (parameter/c string?)
 +  (make-parameter "potato-chip"))
 +(define baked/c
 +  (flat-named-contract 'baked/c (λ (s) (regexp-match #rx"baked" s))))
 +(define/contract current-dinner
 +  (parameter/c string? baked/c)
 +  (make-parameter "turkey" (λ (s) (string-append "roasted " s))))
 +
 +(current-snack 'not-a-snack)
 +(parameterize ([current-dinner "tofurkey"])
 +  (current-dinner))
 +]}
  
  
  @defproc[(procedure-arity-includes/c [n exact-nonnegative-integer?]) flat-contract?]{
 diff --git a/collects/tests/racket/contract-test.rktl b/collects/tests/racket/contract-test.rktl
 index c3daa0b..07c858f 100644
 --- a/collects/tests/racket/contract-test.rktl
 +++ b/collects/tests/racket/contract-test.rktl
 @@ -3869,11 +3869,42 @@
       #f))
  
    (test/pos-blame
 -   'parameter/c1
 +   'parameter/c2
     '((contract (parameter/c integer?)
                 (make-parameter 'not-an-int)
                 'pos 'neg)))
  
 +  (test/pos-blame
 +   'parameter/c3
 +   '((contract (parameter/c integer? string?)
 +               (make-parameter 'not-an-int number->string)
 +               'pos 'neg)))
 +
 +  (test/neg-blame
 +   'parameter/c4
 +   '((contract (parameter/c integer? string?)
 +               (make-parameter 5 number->string)
 +               'pos 'neg)
 +     'not-an-int))
 +
 +  (test/spec-passed
 +   'parameter/c5
 +   '((contract (parameter/c integer? string?)
 +               (make-parameter "foo" number->string)
 +               'pos 'neg)))
 +
 +  (test/spec-passed
 +   'parameter/c6
 +   '((contract (parameter/c integer? string?)
 +               (make-parameter "foo" number->string)
 +               'pos 'neg)
 +     5))
 +
 +  (test/pos-blame
 +   'parameter/c7
 +   '((contract (parameter/c integer? string?)
 +               (make-parameter 5 values)
 +               'pos 'neg)))
  
  ;
  ;
 @@ -12185,7 +12216,8 @@ so that propagation occurs.
    (test-name '(list/c (-> boolean? boolean?) integer?)
               (list/c (-> boolean? boolean?) integer?))
  
 -  (test-name '(parameter/c integer?) (parameter/c integer?))
 +  (test-name '(parameter/c integer? integer?) (parameter/c integer?))
 +  (test-name '(parameter/c integer? string?) (parameter/c integer? string?))
  
    (test-name '(hash/c symbol? boolean?) (hash/c symbol? boolean?))
    (test-name '(hash/c symbol? boolean? #:immutable #t) (hash/c symbol? boolean? #:immutable #t))
 @@ -12363,6 +12395,19 @@ so that propagation occurs.
    (ctest #f contract-stronger? (parameter/c (between/c 0 5)) (parameter/c (between/c 1 4)))
    (ctest #f contract-stronger? (parameter/c (between/c 1 4)) (parameter/c (between/c 0 5)))
  
 +  (ctest #f contract-stronger? (parameter/c (between/c 1 4) (between/c 0 5))
 +                               (parameter/c (between/c 0 5)))
 +  (ctest #t contract-stronger? (parameter/c (between/c 0 5) (between/c 1 4))
 +                               (parameter/c (between/c 1 4)))
 +  (ctest #t contract-stronger? (parameter/c (between/c 0 5))
 +                               (parameter/c (between/c 1 4) (between/c 0 5)))
 +  (ctest #f contract-stronger? (parameter/c (between/c 1 4))
 +                               (parameter/c (between/c 0 5) (between/c 0 5)))
 +  (ctest #t contract-stronger? (parameter/c (between/c 0 5) (between/c 1 4))
 +                               (parameter/c (between/c 1 4) (between/c 0 5)))
 +  (ctest #f contract-stronger? (parameter/c (between/c 1 4) (between/c 0 5))
 +                               (parameter/c (between/c 0 5) (between/c 1 4)))
 +
    (ctest #t contract-stronger? (symbols 'x 'y) (symbols 'x 'y 'z))
    (ctest #f contract-stronger? (symbols 'x 'y 'z) (symbols 'x 'y))
    (ctest #t contract-stronger? (symbols 'x 'y) (symbols 'z 'x 'y))
 -- 
 1.7.10.4
 
 
 --MPkR1dXiUZqK+927--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Wed, 23 Jan 2013 12:27:19 -0600

 --e89a8fb1f81e33c30c04d3f8d8ad
 Content-Type: text/plain; charset=UTF-8
 
 That looks okay to me.
 
 Thanks!
 
 
 On Wed, Jan 23, 2013 at 12:11 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 
 > On 2013-01-23 11:57:14 -0500, Sam Tobin-Hochstadt wrote:
 > > Why not just add a second, optional argument to `parameter/c`, with
 > > the same semantics as `Parameterof`?
 >
 > Here's a patch that implements the contract change (attached). Look
 > okay? I'm still testing the fix on the TR side.
 >
 > Cheers,
 > Asumu
 >
 
 --e89a8fb1f81e33c30c04d3f8d8ad
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">That looks okay to me.<div><br></div><div>Thanks!</div></d=
 iv><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Wed, Ja=
 n 23, 2013 at 12:11 PM, Asumu Takikawa <span dir=3D"ltr">&lt;<a href=3D"mai=
 lto:asumu@ccs.neu.edu" target=3D"_blank">asumu@ccs.neu.edu</a>&gt;</span> w=
 rote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div class=3D"im">On 2013-01-23 11:57:14 -05=
 00, Sam Tobin-Hochstadt wrote:<br>
 </div><div class=3D"im">&gt; Why not just add a second, optional argument t=
 o `parameter/c`, with<br>
 &gt; the same semantics as `Parameterof`?<br>
 <br>
 </div>Here&#39;s a patch that implements the contract change (attached). Lo=
 ok<br>
 okay? I&#39;m still testing the fix on the TR side.<br>
 <br>
 Cheers,<br>
 Asumu<br>
 </blockquote></div><br></div>
 
 --e89a8fb1f81e33c30c04d3f8d8ad--
Responsible changed from "nobody" to "asumu" by asumu@racket-lang.org at Wed, 23 Jan 2013 14:46:25 -0500
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/4b279eaf6a
State changed from "open" to "closed" by asumu@racket-lang.org at Wed, 23 Jan 2013 14:46:25 -0500
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/4b279eaf6a
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Fri, 1 Mar 2013 11:00:21 -0600

 --e89a8ff1c2ba50b1d204d6dff1d4
 Content-Type: text/plain; charset=UTF-8
 
 Hi all: just wanted to make sure that this change (Parameter vs Parameterof
 and presumably similar naming things elsewhere in TR) was still on
 someone's list somewhere.
 
 Robby
 
 
 On Wed, Jan 23, 2013 at 11:57 AM, Robby Findler <robby@eecs.northwestern.edu
 > wrote:
 
 > Yeah, well and "of" somehow carries the "lots of" meaning to me which
 > suggests it fits better with the contract systems' existing "listof" than
 > it's "list/c".
 >
 > FWIW, I got this convention from MrSpidey. :)
 >
 > Robby
 >
 >
 > On Wed, Jan 23, 2013 at 11:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 >
 >> I think that works everywhere.  I was trying to come up with a rule to
 >> make naming consistent for boxes/lists/pairs/etc. I guess the rule
 >> would be that `of` as a suffix is only used when distinguishing two
 >> possibilities.
 >>
 >> On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> >
 >> >
 >> >
 >> > On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt <
 >> samth@ccs.neu.edu>
 >> > wrote:
 >> >>
 >> >> On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler
 >> >> <robby@eecs.northwestern.edu> wrote:
 >> >> > But why didn't you use the name "Parameter" for this type?
 >> >>
 >> >> The Typed Racket convention is to use the `of` suffix for containers,
 >> >> the way the `listof` contract combinator works.  I'm open to changing
 >> >> this, though, if you have a suggestion.  How did you decide on the
 >> >> combination of `list/c`, `listof`, and `parameter/c`?
 >> >>
 >> >
 >> > Generally I use "/c" for all contracts unless there is a place where you
 >> > want two different contracts (list/c and listof) for a single
 >> container. In
 >> > that case, when one argument to the contract that applies to a bunch of
 >> > different things in the container then I used "of".
 >> >
 >> > That is, I would be happiest if the contract library's adds "/c" suffix
 >> when
 >> > TR's capitalizes the first letter.
 >> >
 >> > So we have:
 >> >
 >> >  list/c <-> List
 >> >  listof <-> Listof
 >> >  parameter/c <-> Parameter
 >> >
 >> > ... are there places where that doesn't work?
 >> >
 >> > Robby
 >> >
 >>
 >
 >
 
 --e89a8ff1c2ba50b1d204d6dff1d4
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Hi all: just wanted to make sure that this change (Paramet=
 er vs Parameterof and presumably similar naming things elsewhere in TR) was=
  still on someone&#39;s list somewhere.<div><br></div><div>Robby</div></div=
 >
 <div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Wed, Jan 2=
 3, 2013 at 11:57 AM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:=
 robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu<=
 /a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">Yeah, well and &quot;of&quo=
 t; somehow carries the &quot;lots of&quot; meaning to me which suggests it =
 fits better with the contract systems&#39; existing &quot;listof&quot; than=
  it&#39;s &quot;list/c&quot;.<div>
 
 <br></div><div>FWIW, I got this convention from MrSpidey. :)</div><span cla=
 ss=3D"HOEnZb"><font color=3D"#888888"><div><br>Robby</div></font></span></d=
 iv><div class=3D"HOEnZb"><div class=3D"h5"><div class=3D"gmail_extra"><br><=
 br><div class=3D"gmail_quote">
 On Wed, Jan 23, 2013 at 11:39 AM, Sam Tobin-Hochstadt <span dir=3D"ltr">&lt=
 ;<a href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</=
 a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I think that works everywhere. =C2=A0I was t=
 rying to come up with a rule to<br>
 make naming consistent for boxes/lists/pairs/etc. I guess the rule<br>
 would be that `of` as a suffix is only used when distinguishing two<br>
 possibilities.<br>
 <br>
 On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler<br>
 <div><div>&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_bla=
 nk">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt &lt;<a href=3D"m=
 ailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blan=
 k">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt; But why didn&#39;t you use the name &quot;Parameter&quot; for=
  this type?<br>
 &gt;&gt;<br>
 &gt;&gt; The Typed Racket convention is to use the `of` suffix for containe=
 rs,<br>
 &gt;&gt; the way the `listof` contract combinator works. =C2=A0I&#39;m open=
  to changing<br>
 &gt;&gt; this, though, if you have a suggestion. =C2=A0How did you decide o=
 n the<br>
 &gt;&gt; combination of `list/c`, `listof`, and `parameter/c`?<br>
 &gt;&gt;<br>
 &gt;<br>
 &gt; Generally I use &quot;/c&quot; for all contracts unless there is a pla=
 ce where you<br>
 &gt; want two different contracts (list/c and listof) for a single containe=
 r. In<br>
 &gt; that case, when one argument to the contract that applies to a bunch o=
 f<br>
 &gt; different things in the container then I used &quot;of&quot;.<br>
 &gt;<br>
 &gt; That is, I would be happiest if the contract library&#39;s adds &quot;=
 /c&quot; suffix when<br>
 &gt; TR&#39;s capitalizes the first letter.<br>
 &gt;<br>
 &gt; So we have:<br>
 &gt;<br>
 &gt; =C2=A0list/c &lt;-&gt; List<br>
 &gt; =C2=A0listof &lt;-&gt; Listof<br>
 &gt; =C2=A0parameter/c &lt;-&gt; Parameter<br>
 &gt;<br>
 &gt; ... are there places where that doesn&#39;t work?<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 
 --e89a8ff1c2ba50b1d204d6dff1d4--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, Asumu Takikawa <asumu@ccs.neu.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        Eric Dobson <eric.n.dobson@gmail.com>, nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13446: TR does not correctly generate contracts
 for parameters
Date: Fri, 1 Mar 2013 21:28:31 -0500

 --f46d043c816c4ed98704d6e7e1a2
 Content-Type: text/plain; charset=UTF-8
 
 Yes, that's still something I plan to do.
 On Mar 1, 2013 11:00 AM, "Robby Findler" <robby@eecs.northwestern.edu>
 wrote:
 
 > Hi all: just wanted to make sure that this change (Parameter vs
 > Parameterof and presumably similar naming things elsewhere in TR) was still
 > on someone's list somewhere.
 >
 > Robby
 >
 >
 > On Wed, Jan 23, 2013 at 11:57 AM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 >
 >> Yeah, well and "of" somehow carries the "lots of" meaning to me which
 >> suggests it fits better with the contract systems' existing "listof" than
 >> it's "list/c".
 >>
 >> FWIW, I got this convention from MrSpidey. :)
 >>
 >> Robby
 >>
 >>
 >> On Wed, Jan 23, 2013 at 11:39 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 >>
 >>> I think that works everywhere.  I was trying to come up with a rule to
 >>> make naming consistent for boxes/lists/pairs/etc. I guess the rule
 >>> would be that `of` as a suffix is only used when distinguishing two
 >>> possibilities.
 >>>
 >>> On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>> >
 >>> >
 >>> >
 >>> > On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt <
 >>> samth@ccs.neu.edu>
 >>> > wrote:
 >>> >>
 >>> >> On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler
 >>> >> <robby@eecs.northwestern.edu> wrote:
 >>> >> > But why didn't you use the name "Parameter" for this type?
 >>> >>
 >>> >> The Typed Racket convention is to use the `of` suffix for containers,
 >>> >> the way the `listof` contract combinator works.  I'm open to changing
 >>> >> this, though, if you have a suggestion.  How did you decide on the
 >>> >> combination of `list/c`, `listof`, and `parameter/c`?
 >>> >>
 >>> >
 >>> > Generally I use "/c" for all contracts unless there is a place where
 >>> you
 >>> > want two different contracts (list/c and listof) for a single
 >>> container. In
 >>> > that case, when one argument to the contract that applies to a bunch of
 >>> > different things in the container then I used "of".
 >>> >
 >>> > That is, I would be happiest if the contract library's adds "/c"
 >>> suffix when
 >>> > TR's capitalizes the first letter.
 >>> >
 >>> > So we have:
 >>> >
 >>> >  list/c <-> List
 >>> >  listof <-> Listof
 >>> >  parameter/c <-> Parameter
 >>> >
 >>> > ... are there places where that doesn't work?
 >>> >
 >>> > Robby
 >>> >
 >>>
 >>
 >>
 >
 
 --f46d043c816c4ed98704d6e7e1a2
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p>Yes, that&#39;s still something I plan to do.</p>
 <div class=3D"gmail_quote">On Mar 1, 2013 11:00 AM, &quot;Robby Findler&quo=
 t; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northweste=
 rn.edu</a>&gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_qu=
 ote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex=
 ">
 <div dir=3D"ltr">Hi all: just wanted to make sure that this change (Paramet=
 er vs Parameterof and presumably similar naming things elsewhere in TR) was=
  still on someone&#39;s list somewhere.<div><br></div><div>Robby</div></div=
 >
 
 <div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Wed, Jan 2=
 3, 2013 at 11:57 AM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:=
 robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu<=
 /a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">Yeah, well and &quot;of&quo=
 t; somehow carries the &quot;lots of&quot; meaning to me which suggests it =
 fits better with the contract systems&#39; existing &quot;listof&quot; than=
  it&#39;s &quot;list/c&quot;.<div>
 
 
 <br></div><div>FWIW, I got this convention from MrSpidey. :)</div><span><fo=
 nt color=3D"#888888"><div><br>Robby</div></font></span></div><div><div><div=
  class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">
 On Wed, Jan 23, 2013 at 11:39 AM, Sam Tobin-Hochstadt <span dir=3D"ltr">&lt=
 ;<a href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</=
 a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I think that works everywhere. =C2=A0I was t=
 rying to come up with a rule to<br>
 make naming consistent for boxes/lists/pairs/etc. I guess the rule<br>
 would be that `of` as a suffix is only used when distinguishing two<br>
 possibilities.<br>
 <br>
 On Wed, Jan 23, 2013 at 12:34 PM, Robby Findler<br>
 <div><div>&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_bla=
 nk">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Wed, Jan 23, 2013 at 11:14 AM, Sam Tobin-Hochstadt &lt;<a href=3D"m=
 ailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; On Wed, Jan 23, 2013 at 12:02 PM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blan=
 k">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt; But why didn&#39;t you use the name &quot;Parameter&quot; for=
  this type?<br>
 &gt;&gt;<br>
 &gt;&gt; The Typed Racket convention is to use the `of` suffix for containe=
 rs,<br>
 &gt;&gt; the way the `listof` contract combinator works. =C2=A0I&#39;m open=
  to changing<br>
 &gt;&gt; this, though, if you have a suggestion. =C2=A0How did you decide o=
 n the<br>
 &gt;&gt; combination of `list/c`, `listof`, and `parameter/c`?<br>
 &gt;&gt;<br>
 &gt;<br>
 &gt; Generally I use &quot;/c&quot; for all contracts unless there is a pla=
 ce where you<br>
 &gt; want two different contracts (list/c and listof) for a single containe=
 r. In<br>
 &gt; that case, when one argument to the contract that applies to a bunch o=
 f<br>
 &gt; different things in the container then I used &quot;of&quot;.<br>
 &gt;<br>
 &gt; That is, I would be happiest if the contract library&#39;s adds &quot;=
 /c&quot; suffix when<br>
 &gt; TR&#39;s capitalizes the first letter.<br>
 &gt;<br>
 &gt; So we have:<br>
 &gt;<br>
 &gt; =C2=A0list/c &lt;-&gt; List<br>
 &gt; =C2=A0listof &lt;-&gt; Listof<br>
 &gt; =C2=A0parameter/c &lt;-&gt; Parameter<br>
 &gt;<br>
 &gt; ... are there places where that doesn&#39;t work?<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 </blockquote></div>
 
 --f46d043c816c4ed98704d6e7e1a2--
