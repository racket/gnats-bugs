From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Mar 13 09:28:29 2015
Received: from mail-ig0-f178.google.com (mail-ig0-f178.google.com [209.85.213.178])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t2DDSQR3002618
	for <bugs@bugs.plt-scheme.org>; Fri, 13 Mar 2015 09:28:26 -0400
Message-Id: <201503131328.t2DDSM0k002611@winooski.ccs.neu.edu>
Date: Fri, 13 Mar 2015 09:28:22 -0400
From: laurent.orseau@gmail.com
To: bugs@racket-lang.org
Subject: plot snips are broken?

>Number:         15003
>Category:       all
>Synopsis:       plot snips are broken?
>Class:          sw-bug
>Responsible:    nobody
>Severity:       critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Mar 13 09:32:02 -0400 2015
>Last-Modified:  Fri Mar 13 19:32:01 -0400 2015
>Originator:     Laurent Orseau
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1.8--2015-03-13(e1bfebe/a)
>Environment:
unix "Linux lorseau.lon.corp.google.com 3.13.0-43-generic #72-Ubuntu SMP Mon Dec 8 19:35:06 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 859371040
raco pkg (show):
Installation-wide:
 Package            Checksum     Source
 main-distribution  b2df1d1d...  catalog main-distribution
 racket-lib         72e96f53...  catalog racket-lib
 [185 auto-installed packages not shown]
User-specific for installation "snapshot":
 Package          Checksum              Source
 florence-markov                        link...orence-markov
 lux              9ca19d01...           catalog lux
 pict3d           e1c36a5f...           catalog...nto/pict3d
 script-plugin    0163179a...           catalog...ipt-plugin
 towers           53cef4c4...           catalog towers
 [2 auto-installed packages not shown]



Collections:
("/usr/local/google/home/lorseau/.racket/snapshot/collects"
 (non-existent-path))
("/usr/share/racket-6.1.1.8/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: Saved 5 internal errors:

get-editor: broke its contract
  two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
  produced: (object:...engine/test-tool.scm:22:6 ...)
  in: the range of
      the get-editor method in
      a disjunct of
      the 2nd argument of
      the set-admin method in
      ...
      the range of
      (->
       (recursive-contract
        anonymous-contract
        #:impersonator)
       (cons/c
        any/c
        (cons/c
         any/c
         (cons/c
          any/c
          (cons/c
           (cons/c
            any/c
            (cons/c
             any/c
             (cons/c
              any/c
              (cons/c
               (recursive-contract
                anonymous-contract
                #:impersonator)
               any/c))))
           (cons/c
            (cons/c
             (cons/c
              (->
               Real
               Real
               invertible-function?
               any)
              any/c)
             (cons/c
              (cons/c
               (->
                Real
                Real
                invertible-function?
                any)
               any/c)
              (cons/c
               (cons/c
                (->
                 Real
                 Real
                 invertible-function?
                 any)
                any/c)
               any/c)))
            any/c)))))
       (->
        (or/c #f #t)
        (vectorof ivl?)
        Positive-Integer
        Positive-Integer
        (values
         (recursive-contract
          anonymous-contract
          #:impersonator)
         (vectorof ivl?)
         (-> (vectorof ivl?) (vectorof ivl?))))
       (vectorof ivl?)
       (vectorof ivl?)
       (-> (vectorof ivl?) (vectorof ivl?))
       any/c
       any/c
       (recursive-contract
        anonymous-contract
        #:impersonator))
  contract from: 
      (interface for make-2d-plot-snip)
  contract on: make-2d-plot-snip
  blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
   (assuming the contract is correct)
  at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
  context...:
   /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
   /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler


get-editor: broke its contract
  two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
  produced: (object:...engine/test-tool.scm:22:6 ...)
  in: the range of
      the get-editor method in
      a disjunct of
      the 2nd argument of
      the set-admin method in
      ...
      the range of
      (->
       (recursive-contract
        anonymous-contract
        #:impersonator)
       (cons/c
        any/c
        (cons/c
         any/c
         (cons/c
          any/c
          (cons/c
           (cons/c
            any/c
            (cons/c
             any/c
             (cons/c
              any/c
              (cons/c
               (recursive-contract
                anonymous-contract
                #:impersonator)
               any/c))))
           (cons/c
            (cons/c
             (cons/c
              (->
               Real
               Real
               invertible-function?
               any)
              any/c)
             (cons/c
              (cons/c
               (->
                Real
                Real
                invertible-function?
                any)
               any/c)
              (cons/c
               (cons/c
                (->
                 Real
                 Real
                 invertible-function?
                 any)
                any/c)
               any/c)))
            any/c)))))
       (->
        (or/c #f #t)
        (vectorof ivl?)
        Positive-Integer
        Positive-Integer
        (values
         (recursive-contract
          anonymous-contract
          #:impersonator)
         (vectorof ivl?)
         (-> (vectorof ivl?) (vectorof ivl?))))
       (vectorof ivl?)
       (vectorof ivl?)
       (-> (vectorof ivl?) (vectorof ivl?))
       any/c
       any/c
       (recursive-contract
        anonymous-contract
        #:impersonator))
  contract from: 
      (interface for make-2d-plot-snip)
  contract on: make-2d-plot-snip
  blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
   (assuming the contract is correct)
  at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
  context...:
   /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
   /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler


get-editor: broke its contract
  two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
  produced: (object:...engine/test-tool.scm:22:6 ...)
  in: the range of
      the get-editor method in
      a disjunct of
      the 2nd argument of
      the set-admin method in
      ...
      the range of
      (->
       (recursive-contract
        anonymous-contract
        #:impersonator)
       (cons/c
        any/c
        (cons/c
         any/c
         (cons/c
          any/c
          (cons/c
           (cons/c
            any/c
            (cons/c
             any/c
             (cons/c
              any/c
              (cons/c
               (recursive-contract
                anonymous-contract
                #:impersonator)
               any/c))))
           (cons/c
            (cons/c
             (cons/c
              (->
               Real
               Real
               invertible-function?
               any)
              any/c)
             (cons/c
              (cons/c
               (->
                Real
                Real
                invertible-function?
                any)
               any/c)
              (cons/c
               (cons/c
                (->
                 Real
                 Real
                 invertible-function?
                 any)
                any/c)
               any/c)))
            any/c)))))
       (->
        (or/c #f #t)
        (vectorof ivl?)
        Positive-Integer
        Positive-Integer
        (values
         (recursive-contract
          anonymous-contract
          #:impersonator)
         (vectorof ivl?)
         (-> (vectorof ivl?) (vectorof ivl?))))
       (vectorof ivl?)
       (vectorof ivl?)
       (-> (vectorof ivl?) (vectorof ivl?))
       any/c
       any/c
       (recursive-contract
        anonymous-contract
        #:impersonator))
  contract from: 
      (interface for make-2d-plot-snip)
  contract on: make-2d-plot-snip
  blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
   (assuming the contract is correct)
  at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
  context...:
   /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
   /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler


get-editor: broke its contract
  two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
  produced: (object:...engine/test-tool.scm:22:6 ...)
  in: the range of
      the get-editor method in
      a disjunct of
      the 2nd argument of
      the set-admin method in
      ...
      the range of
      (->
       (recursive-contract
        anonymous-contract
        #:impersonator)
       (cons/c
        any/c
        (cons/c
         any/c
         (cons/c
          any/c
          (cons/c
           (cons/c
            any/c
            (cons/c
             any/c
             (cons/c
              any/c
              (cons/c
               (recursive-contract
                anonymous-contract
                #:impersonator)
               any/c))))
           (cons/c
            (cons/c
             (cons/c
              (->
               Real
               Real
               invertible-function?
               any)
              any/c)
             (cons/c
              (cons/c
               (->
                Real
                Real
                invertible-function?
                any)
               any/c)
              (cons/c
               (cons/c
                (->
                 Real
                 Real
                 invertible-function?
                 any)
                any/c)
               any/c)))
            any/c)))))
       (->
        (or/c #f #t)
        (vectorof ivl?)
        Positive-Integer
        Positive-Integer
        (values
         (recursive-contract
          anonymous-contract
          #:impersonator)
         (vectorof ivl?)
         (-> (vectorof ivl?) (vectorof ivl?))))
       (vectorof ivl?)
       (vectorof ivl?)
       (-> (vectorof ivl?) (vectorof ivl?))
       any/c
       any/c
       (recursive-contract
        anonymous-contract
        #:impersonator))
  contract from: 
      (interface for make-2d-plot-snip)
  contract on: make-2d-plot-snip
  blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
   (assuming the contract is correct)
  at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
  context...:
   /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
   /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler


get-editor: broke its contract
  two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
  produced: (object:...engine/test-tool.scm:22:6 ...)
  in: the range of
      the get-editor method in
      a disjunct of
      the 2nd argument of
      the set-admin method in
      ...
      the range of
      (->
       (recursive-contract
        anonymous-contract
        #:impersonator)
       (cons/c
        any/c
        (cons/c
         any/c
         (cons/c
          any/c
          (cons/c
           (cons/c
            any/c
            (cons/c
             any/c
             (cons/c
              any/c
              (cons/c
               (recursive-contract
                anonymous-contract
                #:impersonator)
               any/c))))
           (cons/c
            (cons/c
             (cons/c
              (->
               Real
               Real
               invertible-function?
               any)
              any/c)
             (cons/c
              (cons/c
               (->
                Real
                Real
                invertible-function?
                any)
               any/c)
              (cons/c
               (cons/c
                (->
                 Real
                 Real
                 invertible-function?
                 any)
                any/c)
               any/c)))
            any/c)))))
       (->
        (or/c #f #t)
        (vectorof ivl?)
        Positive-Integer
        Positive-Integer
        (values
         (recursive-contract
          anonymous-contract
          #:impersonator)
         (vectorof ivl?)
         (-> (vectorof ivl?) (vectorof ivl?))))
       (vectorof ivl?)
       (vectorof ivl?)
       (-> (vectorof ivl?) (vectorof ivl?))
       any/c
       any/c
       (recursive-contract
        anonymous-contract
        #:impersonator))
  contract from: 
      (interface for make-2d-plot-snip)
  contract on: make-2d-plot-snip
  blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
   (assuming the contract is correct)
  at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
  context...:
   /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
   /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler

Computer Language: (("Determine language from source") (#(#t trad-write mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
Hi,

I get the following error message when using plots in DrRacket (which makes it impossible to use):

get-editor: broke its contract
  two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
  produced: (object:...engine/test-tool.scm:22:6 ...)
  in: the range of
      the get-editor method in
      a disjunct of
      the 2nd argument of
      the set-admin method in
      ...
      the range of
      (->
       (recursive-contract
        anonymous-contract
        #:impersonator)
       (cons/c
        any/c
        (cons/c
         any/c
         (cons/c
          any/c
          (cons/c
           (cons/c
            any/c
            (cons/c
             any/c
             (cons/c
              any/c
              (cons/c
               (recursive-contract
                anonymous-contract
                #:impersonator)
               any/c))))
           (cons/c
            (cons/c
             (cons/c
              (->
               Real
               Real
               invertible-function?
               any)
              any/c)
             (cons/c
              (cons/c
               (->
                Real
                Real
                invertible-function?
                any)
               any/c)
              (cons/c
               (cons/c
                (->
                 Real
                 Real
                 invertible-function?
                 any)
                any/c)
               any/c)))
            any/c)))))
       (->
        (or/c #f #t)
        (vectorof ivl?)
        Positive-Integer
        Positive-Integer
        (values
         (recursive-contract
          anonymous-contract
          #:impersonator)
         (vectorof ivl?)
         (-> (vectorof ivl?) (vectorof ivl?))))
       (vectorof ivl?)
       (vectorof ivl?)
       (-> (vectorof ivl?) (vectorof ivl?))
       any/c
       any/c
       (recursive-contract
        anonymous-contract
        #:impersonator))
  contract from: 
      (interface for make-2d-plot-snip)
  contract on: make-2d-plot-snip
  blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
   (assuming the contract is correct)
  at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
  context...:
   /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
   /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
   /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
   /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler
>How-To-Repeat:
In DrRacket:

#lang racket
(require plot)
(plot (function sin) #:x-min 0 #:x-max 1)

Then hover the mouse over the snip.
>Fix:
>Audit-Trail:
From: Neil Toronto <neil.toronto@gmail.com>
To: laurent.orseau@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/15003: plot snips are broken?
Date: Fri, 13 Mar 2015 11:42:18 -0400

 This looks like it's due to a recent change to the Snip% class type. Asumu?
 
 To work around the error, you can do one of two things. Either don't let 
 the mouse hover over the snip (bleah) or use (require plot/bitmap) 
 instead of (require plot).
 
 Neil ⊥
 
 On 03/13/2015 09:32 AM, laurent.orseau@gmail.com wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=15003
 >
 > Reported by Laurent Orseau for release: 6.1.1.8--2015-03-13(e1bfebe/a)
 >
 > *** Description:
 > Hi,
 >
 > I get the following error message when using plots in DrRacket (which makes it impossible to use):
 >
 > get-editor: broke its contract
 >    two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
 >    produced: (object:...engine/test-tool.scm:22:6 ...)
 >    in: the range of
 >        the get-editor method in
 >        a disjunct of
 >        the 2nd argument of
 >        the set-admin method in
 >        ...
 >        the range of
 >        (->
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator)
 >         (cons/c
 >          any/c
 >          (cons/c
 >           any/c
 >           (cons/c
 >            any/c
 >            (cons/c
 >             (cons/c
 >              any/c
 >              (cons/c
 >               any/c
 >               (cons/c
 >                any/c
 >                (cons/c
 >                 (recursive-contract
 >                  anonymous-contract
 >                  #:impersonator)
 >                 any/c))))
 >             (cons/c
 >              (cons/c
 >               (cons/c
 >                (->
 >                 Real
 >                 Real
 >                 invertible-function?
 >                 any)
 >                any/c)
 >               (cons/c
 >                (cons/c
 >                 (->
 >                  Real
 >                  Real
 >                  invertible-function?
 >                  any)
 >                 any/c)
 >                (cons/c
 >                 (cons/c
 >                  (->
 >                   Real
 >                   Real
 >                   invertible-function?
 >                   any)
 >                  any/c)
 >                 any/c)))
 >              any/c)))))
 >         (->
 >          (or/c #f #t)
 >          (vectorof ivl?)
 >          Positive-Integer
 >          Positive-Integer
 >          (values
 >           (recursive-contract
 >            anonymous-contract
 >            #:impersonator)
 >           (vectorof ivl?)
 >           (-> (vectorof ivl?) (vectorof ivl?))))
 >         (vectorof ivl?)
 >         (vectorof ivl?)
 >         (-> (vectorof ivl?) (vectorof ivl?))
 >         any/c
 >         any/c
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator))
 >    contract from:
 >        (interface for make-2d-plot-snip)
 >    contract on: make-2d-plot-snip
 >    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >     (assuming the contract is correct)
 >    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >    context...:
 >     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
 >     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler
 >
 > *** How to repeat:
 > In DrRacket:
 >
 > #lang racket
 > (require plot)
 > (plot (function sin) #:x-min 0 #:x-max 1)
 >
 > Then hover the mouse over the snip.
 >
 > *** Environment:
 > unix "Linux lorseau.lon.corp.google.com 3.13.0-43-generic #72-Ubuntu SMP Mon Dec 8 19:35:06 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 859371040
 > raco pkg (show):
 > Installation-wide:
 >   Package            Checksum     Source
 >   main-distribution  b2df1d1d...  catalog main-distribution
 >   racket-lib         72e96f53...  catalog racket-lib
 >   [185 auto-installed packages not shown]
 > User-specific for installation "snapshot":
 >   Package          Checksum              Source
 >   florence-markov                        link...orence-markov
 >   lux              9ca19d01...           catalog lux
 >   pict3d           e1c36a5f...           catalog...nto/pict3d
 >   script-plugin    0163179a...           catalog...ipt-plugin
 >   towers           53cef4c4...           catalog towers
 >   [2 auto-installed packages not shown]
 >
 >
 >
 > Collections:
 > ("/usr/local/google/home/lorseau/.racket/snapshot/collects"
 >   (non-existent-path))
 > ("/usr/share/racket-6.1.1.8/collects"
 >   (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))
 >
 > Recent Internal Errors: Saved 5 internal errors:
 >
 > get-editor: broke its contract
 >    two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
 >    produced: (object:...engine/test-tool.scm:22:6 ...)
 >    in: the range of
 >        the get-editor method in
 >        a disjunct of
 >        the 2nd argument of
 >        the set-admin method in
 >        ...
 >        the range of
 >        (->
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator)
 >         (cons/c
 >          any/c
 >          (cons/c
 >           any/c
 >           (cons/c
 >            any/c
 >            (cons/c
 >             (cons/c
 >              any/c
 >              (cons/c
 >               any/c
 >               (cons/c
 >                any/c
 >                (cons/c
 >                 (recursive-contract
 >                  anonymous-contract
 >                  #:impersonator)
 >                 any/c))))
 >             (cons/c
 >              (cons/c
 >               (cons/c
 >                (->
 >                 Real
 >                 Real
 >                 invertible-function?
 >                 any)
 >                any/c)
 >               (cons/c
 >                (cons/c
 >                 (->
 >                  Real
 >                  Real
 >                  invertible-function?
 >                  any)
 >                 any/c)
 >                (cons/c
 >                 (cons/c
 >                  (->
 >                   Real
 >                   Real
 >                   invertible-function?
 >                   any)
 >                  any/c)
 >                 any/c)))
 >              any/c)))))
 >         (->
 >          (or/c #f #t)
 >          (vectorof ivl?)
 >          Positive-Integer
 >          Positive-Integer
 >          (values
 >           (recursive-contract
 >            anonymous-contract
 >            #:impersonator)
 >           (vectorof ivl?)
 >           (-> (vectorof ivl?) (vectorof ivl?))))
 >         (vectorof ivl?)
 >         (vectorof ivl?)
 >         (-> (vectorof ivl?) (vectorof ivl?))
 >         any/c
 >         any/c
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator))
 >    contract from:
 >        (interface for make-2d-plot-snip)
 >    contract on: make-2d-plot-snip
 >    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >     (assuming the contract is correct)
 >    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >    context...:
 >     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
 >     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler
 >
 >
 > get-editor: broke its contract
 >    two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
 >    produced: (object:...engine/test-tool.scm:22:6 ...)
 >    in: the range of
 >        the get-editor method in
 >        a disjunct of
 >        the 2nd argument of
 >        the set-admin method in
 >        ...
 >        the range of
 >        (->
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator)
 >         (cons/c
 >          any/c
 >          (cons/c
 >           any/c
 >           (cons/c
 >            any/c
 >            (cons/c
 >             (cons/c
 >              any/c
 >              (cons/c
 >               any/c
 >               (cons/c
 >                any/c
 >                (cons/c
 >                 (recursive-contract
 >                  anonymous-contract
 >                  #:impersonator)
 >                 any/c))))
 >             (cons/c
 >              (cons/c
 >               (cons/c
 >                (->
 >                 Real
 >                 Real
 >                 invertible-function?
 >                 any)
 >                any/c)
 >               (cons/c
 >                (cons/c
 >                 (->
 >                  Real
 >                  Real
 >                  invertible-function?
 >                  any)
 >                 any/c)
 >                (cons/c
 >                 (cons/c
 >                  (->
 >                   Real
 >                   Real
 >                   invertible-function?
 >                   any)
 >                  any/c)
 >                 any/c)))
 >              any/c)))))
 >         (->
 >          (or/c #f #t)
 >          (vectorof ivl?)
 >          Positive-Integer
 >          Positive-Integer
 >          (values
 >           (recursive-contract
 >            anonymous-contract
 >            #:impersonator)
 >           (vectorof ivl?)
 >           (-> (vectorof ivl?) (vectorof ivl?))))
 >         (vectorof ivl?)
 >         (vectorof ivl?)
 >         (-> (vectorof ivl?) (vectorof ivl?))
 >         any/c
 >         any/c
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator))
 >    contract from:
 >        (interface for make-2d-plot-snip)
 >    contract on: make-2d-plot-snip
 >    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >     (assuming the contract is correct)
 >    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >    context...:
 >     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
 >     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler
 >
 >
 > get-editor: broke its contract
 >    two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
 >    produced: (object:...engine/test-tool.scm:22:6 ...)
 >    in: the range of
 >        the get-editor method in
 >        a disjunct of
 >        the 2nd argument of
 >        the set-admin method in
 >        ...
 >        the range of
 >        (->
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator)
 >         (cons/c
 >          any/c
 >          (cons/c
 >           any/c
 >           (cons/c
 >            any/c
 >            (cons/c
 >             (cons/c
 >              any/c
 >              (cons/c
 >               any/c
 >               (cons/c
 >                any/c
 >                (cons/c
 >                 (recursive-contract
 >                  anonymous-contract
 >                  #:impersonator)
 >                 any/c))))
 >             (cons/c
 >              (cons/c
 >               (cons/c
 >                (->
 >                 Real
 >                 Real
 >                 invertible-function?
 >                 any)
 >                any/c)
 >               (cons/c
 >                (cons/c
 >                 (->
 >                  Real
 >                  Real
 >                  invertible-function?
 >                  any)
 >                 any/c)
 >                (cons/c
 >                 (cons/c
 >                  (->
 >                   Real
 >                   Real
 >                   invertible-function?
 >                   any)
 >                  any/c)
 >                 any/c)))
 >              any/c)))))
 >         (->
 >          (or/c #f #t)
 >          (vectorof ivl?)
 >          Positive-Integer
 >          Positive-Integer
 >          (values
 >           (recursive-contract
 >            anonymous-contract
 >            #:impersonator)
 >           (vectorof ivl?)
 >           (-> (vectorof ivl?) (vectorof ivl?))))
 >         (vectorof ivl?)
 >         (vectorof ivl?)
 >         (-> (vectorof ivl?) (vectorof ivl?))
 >         any/c
 >         any/c
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator))
 >    contract from:
 >        (interface for make-2d-plot-snip)
 >    contract on: make-2d-plot-snip
 >    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >     (assuming the contract is correct)
 >    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >    context...:
 >     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
 >     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler
 >
 >
 > get-editor: broke its contract
 >    two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
 >    produced: (object:...engine/test-tool.scm:22:6 ...)
 >    in: the range of
 >        the get-editor method in
 >        a disjunct of
 >        the 2nd argument of
 >        the set-admin method in
 >        ...
 >        the range of
 >        (->
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator)
 >         (cons/c
 >          any/c
 >          (cons/c
 >           any/c
 >           (cons/c
 >            any/c
 >            (cons/c
 >             (cons/c
 >              any/c
 >              (cons/c
 >               any/c
 >               (cons/c
 >                any/c
 >                (cons/c
 >                 (recursive-contract
 >                  anonymous-contract
 >                  #:impersonator)
 >                 any/c))))
 >             (cons/c
 >              (cons/c
 >               (cons/c
 >                (->
 >                 Real
 >                 Real
 >                 invertible-function?
 >                 any)
 >                any/c)
 >               (cons/c
 >                (cons/c
 >                 (->
 >                  Real
 >                  Real
 >                  invertible-function?
 >                  any)
 >                 any/c)
 >                (cons/c
 >                 (cons/c
 >                  (->
 >                   Real
 >                   Real
 >                   invertible-function?
 >                   any)
 >                  any/c)
 >                 any/c)))
 >              any/c)))))
 >         (->
 >          (or/c #f #t)
 >          (vectorof ivl?)
 >          Positive-Integer
 >          Positive-Integer
 >          (values
 >           (recursive-contract
 >            anonymous-contract
 >            #:impersonator)
 >           (vectorof ivl?)
 >           (-> (vectorof ivl?) (vectorof ivl?))))
 >         (vectorof ivl?)
 >         (vectorof ivl?)
 >         (-> (vectorof ivl?) (vectorof ivl?))
 >         any/c
 >         any/c
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator))
 >    contract from:
 >        (interface for make-2d-plot-snip)
 >    contract on: make-2d-plot-snip
 >    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >     (assuming the contract is correct)
 >    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >    context...:
 >     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
 >     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler
 >
 >
 > get-editor: broke its contract
 >    two of the clauses in the or/c might both match: (recursive-contract anonymous-contract #:impersonator) and (recursive-contract anonymous-contract #:impersonator)
 >    produced: (object:...engine/test-tool.scm:22:6 ...)
 >    in: the range of
 >        the get-editor method in
 >        a disjunct of
 >        the 2nd argument of
 >        the set-admin method in
 >        ...
 >        the range of
 >        (->
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator)
 >         (cons/c
 >          any/c
 >          (cons/c
 >           any/c
 >           (cons/c
 >            any/c
 >            (cons/c
 >             (cons/c
 >              any/c
 >              (cons/c
 >               any/c
 >               (cons/c
 >                any/c
 >                (cons/c
 >                 (recursive-contract
 >                  anonymous-contract
 >                  #:impersonator)
 >                 any/c))))
 >             (cons/c
 >              (cons/c
 >               (cons/c
 >                (->
 >                 Real
 >                 Real
 >                 invertible-function?
 >                 any)
 >                any/c)
 >               (cons/c
 >                (cons/c
 >                 (->
 >                  Real
 >                  Real
 >                  invertible-function?
 >                  any)
 >                 any/c)
 >                (cons/c
 >                 (cons/c
 >                  (->
 >                   Real
 >                   Real
 >                   invertible-function?
 >                   any)
 >                  any/c)
 >                 any/c)))
 >              any/c)))))
 >         (->
 >          (or/c #f #t)
 >          (vectorof ivl?)
 >          Positive-Integer
 >          Positive-Integer
 >          (values
 >           (recursive-contract
 >            anonymous-contract
 >            #:impersonator)
 >           (vectorof ivl?)
 >           (-> (vectorof ivl?) (vectorof ivl?))))
 >         (vectorof ivl?)
 >         (vectorof ivl?)
 >         (-> (vectorof ivl?) (vectorof ivl?))
 >         any/c
 >         any/c
 >         (recursive-contract
 >          anonymous-contract
 >          #:impersonator))
 >    contract from:
 >        (interface for make-2d-plot-snip)
 >    contract on: make-2d-plot-snip
 >    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >     (assuming the contract is correct)
 >    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >    context...:
 >     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
 >     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rkt:186:4: on-event method in plot-snip%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:450:2: on-event method in text%
 >     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canvas.rkt:394:2: on-event method in editor-canvas%
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:147:2: call-with-break-parameterization
 >     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:264:2: call-with-exception-handler
 >
 > Computer Language: (("Determine language from source") (#(#t trad-write mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
 >
 
From: Laurent <laurent.orseau@gmail.com>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15003: plot snips are broken?
Date: Fri, 13 Mar 2015 15:48:23 +0000

 --bcaec51867906be13c05112d6fe8
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Thanks for the (non-bleah) workaround, that's even simpler than turning
 snips to bitmaps by hand.
 
 On Fri, Mar 13, 2015 at 3:42 PM, Neil Toronto <neil.toronto@gmail.com>
 wrote:
 
 > This looks like it's due to a recent change to the Snip% class type. Asum=
 u?
 >
 > To work around the error, you can do one of two things. Either don't let
 > the mouse hover over the snip (bleah) or use (require plot/bitmap) instea=
 d
 > of (require plot).
 >
 > Neil =E2=8A=A5
 >
 > On 03/13/2015 09:32 AM, laurent.orseau@gmail.com wrote:
 >
 >> A new problem report is waiting at
 >>    http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D15003
 >>
 >> Reported by Laurent Orseau for release: 6.1.1.8--2015-03-13(e1bfebe/a)
 >>
 >> *** Description:
 >> Hi,
 >>
 >> I get the following error message when using plots in DrRacket (which
 >> makes it impossible to use):
 >>
 >> get-editor: broke its contract
 >>    two of the clauses in the or/c might both match: (recursive-contract
 >> anonymous-contract #:impersonator) and (recursive-contract
 >> anonymous-contract #:impersonator)
 >>    produced: (object:...engine/test-tool.scm:22:6 ...)
 >>    in: the range of
 >>        the get-editor method in
 >>        a disjunct of
 >>        the 2nd argument of
 >>        the set-admin method in
 >>        ...
 >>        the range of
 >>        (->
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator)
 >>         (cons/c
 >>          any/c
 >>          (cons/c
 >>           any/c
 >>           (cons/c
 >>            any/c
 >>            (cons/c
 >>             (cons/c
 >>              any/c
 >>              (cons/c
 >>               any/c
 >>               (cons/c
 >>                any/c
 >>                (cons/c
 >>                 (recursive-contract
 >>                  anonymous-contract
 >>                  #:impersonator)
 >>                 any/c))))
 >>             (cons/c
 >>              (cons/c
 >>               (cons/c
 >>                (->
 >>                 Real
 >>                 Real
 >>                 invertible-function?
 >>                 any)
 >>                any/c)
 >>               (cons/c
 >>                (cons/c
 >>                 (->
 >>                  Real
 >>                  Real
 >>                  invertible-function?
 >>                  any)
 >>                 any/c)
 >>                (cons/c
 >>                 (cons/c
 >>                  (->
 >>                   Real
 >>                   Real
 >>                   invertible-function?
 >>                   any)
 >>                  any/c)
 >>                 any/c)))
 >>              any/c)))))
 >>         (->
 >>          (or/c #f #t)
 >>          (vectorof ivl?)
 >>          Positive-Integer
 >>          Positive-Integer
 >>          (values
 >>           (recursive-contract
 >>            anonymous-contract
 >>            #:impersonator)
 >>           (vectorof ivl?)
 >>           (-> (vectorof ivl?) (vectorof ivl?))))
 >>         (vectorof ivl?)
 >>         (vectorof ivl?)
 >>         (-> (vectorof ivl?) (vectorof ivl?))
 >>         any/c
 >>         any/c
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator))
 >>    contract from:
 >>        (interface for make-2d-plot-snip)
 >>    contract on: make-2d-plot-snip
 >>    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >>     (assuming the contract is correct)
 >>    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >>    context...:
 >>     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt=
 :143:0:
 >> raise-blame-error16
 >>     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rk=
 t:186:4:
 >> on-event method in plot-snip%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:45=
 0:2:
 >> on-event method in text%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canv=
 as.rkt:394:2:
 >> on-event method in editor-canvas%
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:14=
 7:2:
 >> call-with-break-parameterization
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:26=
 4:2:
 >> call-with-exception-handler
 >>
 >> *** How to repeat:
 >> In DrRacket:
 >>
 >> #lang racket
 >> (require plot)
 >> (plot (function sin) #:x-min 0 #:x-max 1)
 >>
 >> Then hover the mouse over the snip.
 >>
 >> *** Environment:
 >> unix "Linux lorseau.lon.corp.google.com 3.13.0-43-generic #72-Ubuntu SMP
 >> Mon Dec 8 19:35:06 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux"
 >> (x86_64-linux/3m) (get-display-depth) =3D 32
 >> Human Language: english
 >> (current-memory-use) 859371040
 >> raco pkg (show):
 >> Installation-wide:
 >>   Package            Checksum     Source
 >>   main-distribution  b2df1d1d...  catalog main-distribution
 >>   racket-lib         72e96f53...  catalog racket-lib
 >>   [185 auto-installed packages not shown]
 >> User-specific for installation "snapshot":
 >>   Package          Checksum              Source
 >>   florence-markov                        link...orence-markov
 >>   lux              9ca19d01...           catalog lux
 >>   pict3d           e1c36a5f...           catalog...nto/pict3d
 >>   script-plugin    0163179a...           catalog...ipt-plugin
 >>   towers           53cef4c4...           catalog towers
 >>   [2 auto-installed packages not shown]
 >>
 >>
 >>
 >> Collections:
 >> ("/usr/local/google/home/lorseau/.racket/snapshot/collects"
 >>   (non-existent-path))
 >> ("/usr/share/racket-6.1.1.8/collects"
 >>   (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >> "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >> "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "sr=
 fi"
 >> "syntax" "unstable" "version" "xml"))
 >>
 >> Recent Internal Errors: Saved 5 internal errors:
 >>
 >> get-editor: broke its contract
 >>    two of the clauses in the or/c might both match: (recursive-contract
 >> anonymous-contract #:impersonator) and (recursive-contract
 >> anonymous-contract #:impersonator)
 >>    produced: (object:...engine/test-tool.scm:22:6 ...)
 >>    in: the range of
 >>        the get-editor method in
 >>        a disjunct of
 >>        the 2nd argument of
 >>        the set-admin method in
 >>        ...
 >>        the range of
 >>        (->
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator)
 >>         (cons/c
 >>          any/c
 >>          (cons/c
 >>           any/c
 >>           (cons/c
 >>            any/c
 >>            (cons/c
 >>             (cons/c
 >>              any/c
 >>              (cons/c
 >>               any/c
 >>               (cons/c
 >>                any/c
 >>                (cons/c
 >>                 (recursive-contract
 >>                  anonymous-contract
 >>                  #:impersonator)
 >>                 any/c))))
 >>             (cons/c
 >>              (cons/c
 >>               (cons/c
 >>                (->
 >>                 Real
 >>                 Real
 >>                 invertible-function?
 >>                 any)
 >>                any/c)
 >>               (cons/c
 >>                (cons/c
 >>                 (->
 >>                  Real
 >>                  Real
 >>                  invertible-function?
 >>                  any)
 >>                 any/c)
 >>                (cons/c
 >>                 (cons/c
 >>                  (->
 >>                   Real
 >>                   Real
 >>                   invertible-function?
 >>                   any)
 >>                  any/c)
 >>                 any/c)))
 >>              any/c)))))
 >>         (->
 >>          (or/c #f #t)
 >>          (vectorof ivl?)
 >>          Positive-Integer
 >>          Positive-Integer
 >>          (values
 >>           (recursive-contract
 >>            anonymous-contract
 >>            #:impersonator)
 >>           (vectorof ivl?)
 >>           (-> (vectorof ivl?) (vectorof ivl?))))
 >>         (vectorof ivl?)
 >>         (vectorof ivl?)
 >>         (-> (vectorof ivl?) (vectorof ivl?))
 >>         any/c
 >>         any/c
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator))
 >>    contract from:
 >>        (interface for make-2d-plot-snip)
 >>    contract on: make-2d-plot-snip
 >>    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >>     (assuming the contract is correct)
 >>    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >>    context...:
 >>     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt=
 :143:0:
 >> raise-blame-error16
 >>     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rk=
 t:186:4:
 >> on-event method in plot-snip%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:45=
 0:2:
 >> on-event method in text%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canv=
 as.rkt:394:2:
 >> on-event method in editor-canvas%
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:14=
 7:2:
 >> call-with-break-parameterization
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:26=
 4:2:
 >> call-with-exception-handler
 >>
 >>
 >> get-editor: broke its contract
 >>    two of the clauses in the or/c might both match: (recursive-contract
 >> anonymous-contract #:impersonator) and (recursive-contract
 >> anonymous-contract #:impersonator)
 >>    produced: (object:...engine/test-tool.scm:22:6 ...)
 >>    in: the range of
 >>        the get-editor method in
 >>        a disjunct of
 >>        the 2nd argument of
 >>        the set-admin method in
 >>        ...
 >>        the range of
 >>        (->
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator)
 >>         (cons/c
 >>          any/c
 >>          (cons/c
 >>           any/c
 >>           (cons/c
 >>            any/c
 >>            (cons/c
 >>             (cons/c
 >>              any/c
 >>              (cons/c
 >>               any/c
 >>               (cons/c
 >>                any/c
 >>                (cons/c
 >>                 (recursive-contract
 >>                  anonymous-contract
 >>                  #:impersonator)
 >>                 any/c))))
 >>             (cons/c
 >>              (cons/c
 >>               (cons/c
 >>                (->
 >>                 Real
 >>                 Real
 >>                 invertible-function?
 >>                 any)
 >>                any/c)
 >>               (cons/c
 >>                (cons/c
 >>                 (->
 >>                  Real
 >>                  Real
 >>                  invertible-function?
 >>                  any)
 >>                 any/c)
 >>                (cons/c
 >>                 (cons/c
 >>                  (->
 >>                   Real
 >>                   Real
 >>                   invertible-function?
 >>                   any)
 >>                  any/c)
 >>                 any/c)))
 >>              any/c)))))
 >>         (->
 >>          (or/c #f #t)
 >>          (vectorof ivl?)
 >>          Positive-Integer
 >>          Positive-Integer
 >>          (values
 >>           (recursive-contract
 >>            anonymous-contract
 >>            #:impersonator)
 >>           (vectorof ivl?)
 >>           (-> (vectorof ivl?) (vectorof ivl?))))
 >>         (vectorof ivl?)
 >>         (vectorof ivl?)
 >>         (-> (vectorof ivl?) (vectorof ivl?))
 >>         any/c
 >>         any/c
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator))
 >>    contract from:
 >>        (interface for make-2d-plot-snip)
 >>    contract on: make-2d-plot-snip
 >>    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >>     (assuming the contract is correct)
 >>    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >>    context...:
 >>     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt=
 :143:0:
 >> raise-blame-error16
 >>     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rk=
 t:186:4:
 >> on-event method in plot-snip%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:45=
 0:2:
 >> on-event method in text%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canv=
 as.rkt:394:2:
 >> on-event method in editor-canvas%
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:14=
 7:2:
 >> call-with-break-parameterization
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:26=
 4:2:
 >> call-with-exception-handler
 >>
 >>
 >> get-editor: broke its contract
 >>    two of the clauses in the or/c might both match: (recursive-contract
 >> anonymous-contract #:impersonator) and (recursive-contract
 >> anonymous-contract #:impersonator)
 >>    produced: (object:...engine/test-tool.scm:22:6 ...)
 >>    in: the range of
 >>        the get-editor method in
 >>        a disjunct of
 >>        the 2nd argument of
 >>        the set-admin method in
 >>        ...
 >>        the range of
 >>        (->
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator)
 >>         (cons/c
 >>          any/c
 >>          (cons/c
 >>           any/c
 >>           (cons/c
 >>            any/c
 >>            (cons/c
 >>             (cons/c
 >>              any/c
 >>              (cons/c
 >>               any/c
 >>               (cons/c
 >>                any/c
 >>                (cons/c
 >>                 (recursive-contract
 >>                  anonymous-contract
 >>                  #:impersonator)
 >>                 any/c))))
 >>             (cons/c
 >>              (cons/c
 >>               (cons/c
 >>                (->
 >>                 Real
 >>                 Real
 >>                 invertible-function?
 >>                 any)
 >>                any/c)
 >>               (cons/c
 >>                (cons/c
 >>                 (->
 >>                  Real
 >>                  Real
 >>                  invertible-function?
 >>                  any)
 >>                 any/c)
 >>                (cons/c
 >>                 (cons/c
 >>                  (->
 >>                   Real
 >>                   Real
 >>                   invertible-function?
 >>                   any)
 >>                  any/c)
 >>                 any/c)))
 >>              any/c)))))
 >>         (->
 >>          (or/c #f #t)
 >>          (vectorof ivl?)
 >>          Positive-Integer
 >>          Positive-Integer
 >>          (values
 >>           (recursive-contract
 >>            anonymous-contract
 >>            #:impersonator)
 >>           (vectorof ivl?)
 >>           (-> (vectorof ivl?) (vectorof ivl?))))
 >>         (vectorof ivl?)
 >>         (vectorof ivl?)
 >>         (-> (vectorof ivl?) (vectorof ivl?))
 >>         any/c
 >>         any/c
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator))
 >>    contract from:
 >>        (interface for make-2d-plot-snip)
 >>    contract on: make-2d-plot-snip
 >>    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >>     (assuming the contract is correct)
 >>    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >>    context...:
 >>     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt=
 :143:0:
 >> raise-blame-error16
 >>     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rk=
 t:186:4:
 >> on-event method in plot-snip%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:45=
 0:2:
 >> on-event method in text%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canv=
 as.rkt:394:2:
 >> on-event method in editor-canvas%
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:14=
 7:2:
 >> call-with-break-parameterization
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:26=
 4:2:
 >> call-with-exception-handler
 >>
 >>
 >> get-editor: broke its contract
 >>    two of the clauses in the or/c might both match: (recursive-contract
 >> anonymous-contract #:impersonator) and (recursive-contract
 >> anonymous-contract #:impersonator)
 >>    produced: (object:...engine/test-tool.scm:22:6 ...)
 >>    in: the range of
 >>        the get-editor method in
 >>        a disjunct of
 >>        the 2nd argument of
 >>        the set-admin method in
 >>        ...
 >>        the range of
 >>        (->
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator)
 >>         (cons/c
 >>          any/c
 >>          (cons/c
 >>           any/c
 >>           (cons/c
 >>            any/c
 >>            (cons/c
 >>             (cons/c
 >>              any/c
 >>              (cons/c
 >>               any/c
 >>               (cons/c
 >>                any/c
 >>                (cons/c
 >>                 (recursive-contract
 >>                  anonymous-contract
 >>                  #:impersonator)
 >>                 any/c))))
 >>             (cons/c
 >>              (cons/c
 >>               (cons/c
 >>                (->
 >>                 Real
 >>                 Real
 >>                 invertible-function?
 >>                 any)
 >>                any/c)
 >>               (cons/c
 >>                (cons/c
 >>                 (->
 >>                  Real
 >>                  Real
 >>                  invertible-function?
 >>                  any)
 >>                 any/c)
 >>                (cons/c
 >>                 (cons/c
 >>                  (->
 >>                   Real
 >>                   Real
 >>                   invertible-function?
 >>                   any)
 >>                  any/c)
 >>                 any/c)))
 >>              any/c)))))
 >>         (->
 >>          (or/c #f #t)
 >>          (vectorof ivl?)
 >>          Positive-Integer
 >>          Positive-Integer
 >>          (values
 >>           (recursive-contract
 >>            anonymous-contract
 >>            #:impersonator)
 >>           (vectorof ivl?)
 >>           (-> (vectorof ivl?) (vectorof ivl?))))
 >>         (vectorof ivl?)
 >>         (vectorof ivl?)
 >>         (-> (vectorof ivl?) (vectorof ivl?))
 >>         any/c
 >>         any/c
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator))
 >>    contract from:
 >>        (interface for make-2d-plot-snip)
 >>    contract on: make-2d-plot-snip
 >>    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >>     (assuming the contract is correct)
 >>    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >>    context...:
 >>     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt=
 :143:0:
 >> raise-blame-error16
 >>     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rk=
 t:186:4:
 >> on-event method in plot-snip%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:45=
 0:2:
 >> on-event method in text%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canv=
 as.rkt:394:2:
 >> on-event method in editor-canvas%
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:14=
 7:2:
 >> call-with-break-parameterization
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:26=
 4:2:
 >> call-with-exception-handler
 >>
 >>
 >> get-editor: broke its contract
 >>    two of the clauses in the or/c might both match: (recursive-contract
 >> anonymous-contract #:impersonator) and (recursive-contract
 >> anonymous-contract #:impersonator)
 >>    produced: (object:...engine/test-tool.scm:22:6 ...)
 >>    in: the range of
 >>        the get-editor method in
 >>        a disjunct of
 >>        the 2nd argument of
 >>        the set-admin method in
 >>        ...
 >>        the range of
 >>        (->
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator)
 >>         (cons/c
 >>          any/c
 >>          (cons/c
 >>           any/c
 >>           (cons/c
 >>            any/c
 >>            (cons/c
 >>             (cons/c
 >>              any/c
 >>              (cons/c
 >>               any/c
 >>               (cons/c
 >>                any/c
 >>                (cons/c
 >>                 (recursive-contract
 >>                  anonymous-contract
 >>                  #:impersonator)
 >>                 any/c))))
 >>             (cons/c
 >>              (cons/c
 >>               (cons/c
 >>                (->
 >>                 Real
 >>                 Real
 >>                 invertible-function?
 >>                 any)
 >>                any/c)
 >>               (cons/c
 >>                (cons/c
 >>                 (->
 >>                  Real
 >>                  Real
 >>                  invertible-function?
 >>                  any)
 >>                 any/c)
 >>                (cons/c
 >>                 (cons/c
 >>                  (->
 >>                   Real
 >>                   Real
 >>                   invertible-function?
 >>                   any)
 >>                  any/c)
 >>                 any/c)))
 >>              any/c)))))
 >>         (->
 >>          (or/c #f #t)
 >>          (vectorof ivl?)
 >>          Positive-Integer
 >>          Positive-Integer
 >>          (values
 >>           (recursive-contract
 >>            anonymous-contract
 >>            #:impersonator)
 >>           (vectorof ivl?)
 >>           (-> (vectorof ivl?) (vectorof ivl?))))
 >>         (vectorof ivl?)
 >>         (vectorof ivl?)
 >>         (-> (vectorof ivl?) (vectorof ivl?))
 >>         any/c
 >>         any/c
 >>         (recursive-contract
 >>          anonymous-contract
 >>          #:impersonator))
 >>    contract from:
 >>        (interface for make-2d-plot-snip)
 >>    contract on: make-2d-plot-snip
 >>    blaming: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt
 >>     (assuming the contract is correct)
 >>    at: <pkgs>/plot-gui-lib/plot/private/gui/plot2d.rkt:17.2
 >>    context...:
 >>     /usr/share/racket-6.1.1.8/collects/racket/contract/private/blame.rkt=
 :143:0:
 >> raise-blame-error16
 >>     /usr/share/racket-6.1.1.8/pkgs/plot-gui-lib/plot/private/gui/snip.rk=
 t:186:4:
 >> on-event method in plot-snip%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/text.rkt:45=
 0:2:
 >> on-event method in text%
 >>     /usr/share/racket-6.1.1.8/pkgs/gui-lib/mred/private/wxme/editor-canv=
 as.rkt:394:2:
 >> on-event method in editor-canvas%
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:14=
 7:2:
 >> call-with-break-parameterization
 >>     /usr/share/racket-6.1.1.8/collects/racket/private/more-scheme.rkt:26=
 4:2:
 >> call-with-exception-handler
 >>
 >> Computer Language: (("Determine language from source") (#(#t trad-write
 >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((tes=
 t)
 >> (main)) #t))
 >>
 >>
 >
 
 --bcaec51867906be13c05112d6fe8
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: base64
 
 PGRpdiBkaXI9Imx0ciI+VGhhbmtzIGZvciB0aGUgKG5vbi1ibGVhaCkgd29ya2Fyb3VuZCwgdGhh
 dCYjMzk7cyBldmVuIHNpbXBsZXIgdGhhbiB0dXJuaW5nIHNuaXBzIHRvIGJpdG1hcHMgYnkgaGFu
 ZC48L2Rpdj48ZGl2IGNsYXNzPSJnbWFpbF9leHRyYSI+PGJyPjxkaXYgY2xhc3M9ImdtYWlsX3F1
 b3RlIj5PbiBGcmksIE1hciAxMywgMjAxNSBhdCAzOjQyIFBNLCBOZWlsIFRvcm9udG8gPHNwYW4g
 ZGlyPSJsdHIiPiZsdDs8YSBocmVmPSJtYWlsdG86bmVpbC50b3JvbnRvQGdtYWlsLmNvbSIgdGFy
 Z2V0PSJfYmxhbmsiPm5laWwudG9yb250b0BnbWFpbC5jb208L2E+Jmd0Ozwvc3Bhbj4gd3JvdGU6
 PGJyPjxibG9ja3F1b3RlIGNsYXNzPSJnbWFpbF9xdW90ZSIgc3R5bGU9Im1hcmdpbjowIDAgMCAu
 OGV4O2JvcmRlci1sZWZ0OjFweCAjY2NjIHNvbGlkO3BhZGRpbmctbGVmdDoxZXgiPlRoaXMgbG9v
 a3MgbGlrZSBpdCYjMzk7cyBkdWUgdG8gYSByZWNlbnQgY2hhbmdlIHRvIHRoZSBTbmlwJSBjbGFz
 cyB0eXBlLiBBc3VtdT88YnI+DQo8YnI+DQpUbyB3b3JrIGFyb3VuZCB0aGUgZXJyb3IsIHlvdSBj
 YW4gZG8gb25lIG9mIHR3byB0aGluZ3MuIEVpdGhlciBkb24mIzM5O3QgbGV0IHRoZSBtb3VzZSBo
 b3ZlciBvdmVyIHRoZSBzbmlwIChibGVhaCkgb3IgdXNlIChyZXF1aXJlIHBsb3QvYml0bWFwKSBp
 bnN0ZWFkIG9mIChyZXF1aXJlIHBsb3QpLjxicj4NCjxicj4NCk5laWwg4oqlPGJyPg0KPGJyPg0K
 T24gMDMvMTMvMjAxNSAwOTozMiBBTSwgPGEgaHJlZj0ibWFpbHRvOmxhdXJlbnQub3JzZWF1QGdt
 YWlsLmNvbSIgdGFyZ2V0PSJfYmxhbmsiPmxhdXJlbnQub3JzZWF1QGdtYWlsLmNvbTwvYT4gd3Jv
 dGU6PGJyPg0KPGJsb2NrcXVvdGUgY2xhc3M9ImdtYWlsX3F1b3RlIiBzdHlsZT0ibWFyZ2luOjAg
 MCAwIC44ZXg7Ym9yZGVyLWxlZnQ6MXB4ICNjY2Mgc29saWQ7cGFkZGluZy1sZWZ0OjFleCI+DQpB
 IG5ldyBwcm9ibGVtIHJlcG9ydCBpcyB3YWl0aW5nIGF0PGJyPg0KwqAgwqA8YSBocmVmPSJodHRw
 Oi8vYnVncy5yYWNrZXQtbGFuZy5vcmcvcXVlcnkvP2NtZD12aWV3JmFtcDtwcj0xNTAwMyIgdGFy
 Z2V0PSJfYmxhbmsiPmh0dHA6Ly9idWdzLnJhY2tldC1sYW5nLm9yZy88dT48L3U+cXVlcnkvP2Nt
 ZD12aWV3JmFtcDtwcj0xNTAwMzwvYT48YnI+DQo8YnI+DQpSZXBvcnRlZCBieSBMYXVyZW50IE9y
 c2VhdSBmb3IgcmVsZWFzZTogNi4xLjEuOC0tMjAxNS0wMy0xMyhlMWJmZWJlL2EpPGJyPg0KPGJy
 Pg0KKioqIERlc2NyaXB0aW9uOjxicj4NCkhpLDxicj4NCjxicj4NCkkgZ2V0IHRoZSBmb2xsb3dp
 bmcgZXJyb3IgbWVzc2FnZSB3aGVuIHVzaW5nIHBsb3RzIGluIERyUmFja2V0ICh3aGljaCBtYWtl
 cyBpdCBpbXBvc3NpYmxlIHRvIHVzZSk6PGJyPg0KPGJyPg0KZ2V0LWVkaXRvcjogYnJva2UgaXRz
 IGNvbnRyYWN0PGJyPg0KwqAgwqB0d28gb2YgdGhlIGNsYXVzZXMgaW4gdGhlIG9yL2MgbWlnaHQg
 Ym90aCBtYXRjaDogKHJlY3Vyc2l2ZS1jb250cmFjdCBhbm9ueW1vdXMtY29udHJhY3QgIzppbXBl
 cnNvbmF0b3IpIGFuZCAocmVjdXJzaXZlLWNvbnRyYWN0IGFub255bW91cy1jb250cmFjdCAjOmlt
 cGVyc29uYXRvcik8YnI+DQrCoCDCoHByb2R1Y2VkOiAob2JqZWN0Oi4uLmVuZ2luZS90ZXN0LXRv
 b2wuPHU+PC91PnNjbToyMjo2IC4uLik8YnI+DQrCoCDCoGluOiB0aGUgcmFuZ2Ugb2Y8YnI+DQrC
 oCDCoCDCoCDCoHRoZSBnZXQtZWRpdG9yIG1ldGhvZCBpbjxicj4NCsKgIMKgIMKgIMKgYSBkaXNq
 dW5jdCBvZjxicj4NCsKgIMKgIMKgIMKgdGhlIDJuZCBhcmd1bWVudCBvZjxicj4NCsKgIMKgIMKg
 IMKgdGhlIHNldC1hZG1pbiBtZXRob2QgaW48YnI+DQrCoCDCoCDCoCDCoC4uLjxicj4NCsKgIMKg
 IMKgIMKgdGhlIHJhbmdlIG9mPGJyPg0KwqAgwqAgwqAgwqAoLSZndDs8YnI+DQrCoCDCoCDCoCDC
 oCAocmVjdXJzaXZlLWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqBhbm9ueW1vdXMtY29udHJh
 Y3Q8YnI+DQrCoCDCoCDCoCDCoCDCoCM6aW1wZXJzb25hdG9yKTxicj4NCsKgIMKgIMKgIMKgIChj
 b25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoGFueS9jPGJyPg0KwqAgwqAgwqAgwqAgwqAoY29ucy9j
 PGJyPg0KwqAgwqAgwqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJy
 Pg0KwqAgwqAgwqAgwqAgwqAgwqBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxi
 cj4NCsKgIMKgIMKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoGFu
 eS9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAg
 wqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAg
 wqAgwqAgwqAgwqAgwqAgwqBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgKGNvbnMv
 Yzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIChyZWN1cnNpdmUtY29udHJhY3Q8YnI+DQrC
 oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGFub255bW91cy1jb250cmFjdDxicj4NCsKgIMKgIMKg
 IMKgIMKgIMKgIMKgIMKgIMKgIzppbXBlcnNvbmF0b3IpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAg
 wqAgwqAgYW55L2MpKSkpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgKGNvbnMvYzxicj4NCsKgIMKg
 IMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIChjb25zL2M8
 YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIMKgIMKg
 IMKgIMKgIFJlYWw8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBSZWFsPGJyPg0KwqAgwqAg
 wqAgwqAgwqAgwqAgwqAgwqAgaW52ZXJ0aWJsZS1mdW5jdGlvbj88YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoCDCoCDCoCBhbnkpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYyk8YnI+DQrC
 oCDCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAo
 Y29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgKC0mZ3Q7PGJyPg0KwqAgwqAgwqAg
 wqAgwqAgwqAgwqAgwqAgwqBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBSZWFs
 PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBpbnZlcnRpYmxlLWZ1bmN0aW9uPzxicj4N
 CsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgYW55KTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKg
 IMKgIGFueS9jKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKg
 IMKgIMKgIMKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
 oCgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIFJlYWw8YnI+DQrCoCDCoCDC
 oCDCoCDCoCDCoCDCoCDCoCDCoCBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
 aW52ZXJ0aWJsZS1mdW5jdGlvbj88YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBhbnkp
 PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYyk8YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoCDCoCDCoCBhbnkvYykpKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgYW55L2MpKSkpKTxi
 cj4NCsKgIMKgIMKgIMKgICgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIMKgKG9yL2MgI2YgI3QpPGJy
 Pg0KwqAgwqAgwqAgwqAgwqAodmVjdG9yb2YgaXZsPyk8YnI+DQrCoCDCoCDCoCDCoCDCoFBvc2l0
 aXZlLUludGVnZXI8YnI+DQrCoCDCoCDCoCDCoCDCoFBvc2l0aXZlLUludGVnZXI8YnI+DQrCoCDC
 oCDCoCDCoCDCoCh2YWx1ZXM8YnI+DQrCoCDCoCDCoCDCoCDCoCAocmVjdXJzaXZlLWNvbnRyYWN0
 PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqBhbm9ueW1vdXMtY29udHJhY3Q8YnI+DQrCoCDCoCDCoCDC
 oCDCoCDCoCM6aW1wZXJzb25hdG9yKTxicj4NCsKgIMKgIMKgIMKgIMKgICh2ZWN0b3JvZiBpdmw/
 KTxicj4NCsKgIMKgIMKgIMKgIMKgICgtJmd0OyAodmVjdG9yb2YgaXZsPykgKHZlY3Rvcm9mIGl2
 bD8pKSkpPGJyPg0KwqAgwqAgwqAgwqAgKHZlY3Rvcm9mIGl2bD8pPGJyPg0KwqAgwqAgwqAgwqAg
 KHZlY3Rvcm9mIGl2bD8pPGJyPg0KwqAgwqAgwqAgwqAgKC0mZ3Q7ICh2ZWN0b3JvZiBpdmw/KSAo
 dmVjdG9yb2YgaXZsPykpPGJyPg0KwqAgwqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCBh
 bnkvYzxicj4NCsKgIMKgIMKgIMKgIChyZWN1cnNpdmUtY29udHJhY3Q8YnI+DQrCoCDCoCDCoCDC
 oCDCoGFub255bW91cy1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgIzppbXBlcnNvbmF0b3Ip
 KTxicj4NCsKgIMKgY29udHJhY3QgZnJvbTo8YnI+DQrCoCDCoCDCoCDCoChpbnRlcmZhY2UgZm9y
 IG1ha2UtMmQtcGxvdC1zbmlwKTxicj4NCsKgIMKgY29udHJhY3Qgb246IG1ha2UtMmQtcGxvdC1z
 bmlwPGJyPg0KwqAgwqBibGFtaW5nOiAmbHQ7cGtncyZndDsvcGxvdC1ndWktbGliL3Bsb3QvPHU+
 PC91PnByaXZhdGUvZ3VpL3Bsb3QyZC5ya3Q8YnI+DQrCoCDCoCAoYXNzdW1pbmcgdGhlIGNvbnRy
 YWN0IGlzIGNvcnJlY3QpPGJyPg0KwqAgwqBhdDogJmx0O3BrZ3MmZ3Q7L3Bsb3QtZ3VpLWxpYi9w
 bG90Lzx1PjwvdT5wcml2YXRlL2d1aS9wbG90MmQucmt0OjE3LjI8YnI+DQrCoCDCoGNvbnRleHQu
 Li46PGJyPg0KwqAgwqAgL3Vzci9zaGFyZS9yYWNrZXQtNi4xLjEuOC88dT48L3U+Y29sbGVjdHMv
 cmFja2V0L2NvbnRyYWN0Lzx1PjwvdT5wcml2YXRlL2JsYW1lLnJrdDoxNDM6MDogcmFpc2UtYmxh
 bWUtZXJyb3IxNjxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+PC91PnBr
 Z3MvcGxvdC1ndWktbGliL3Bsb3QvPHU+PC91PnByaXZhdGUvZ3VpL3NuaXAucmt0OjE4Njo0OiBv
 bi1ldmVudCBtZXRob2QgaW4gcGxvdC1zbmlwJTxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0
 LTYuMS4xLjgvPHU+PC91PnBrZ3MvZ3VpLWxpYi9tcmVkL3ByaXZhdGUvPHU+PC91Pnd4bWUvdGV4
 dC5ya3Q6NDUwOjI6IG9uLWV2ZW50IG1ldGhvZCBpbiB0ZXh0JTxicj4NCsKgIMKgIC91c3Ivc2hh
 cmUvcmFja2V0LTYuMS4xLjgvPHU+PC91PnBrZ3MvZ3VpLWxpYi9tcmVkL3ByaXZhdGUvPHU+PC91
 Pnd4bWUvZWRpdG9yLWNhbnZhcy5ya3Q6Mzk0OjI6IG9uLWV2ZW50IG1ldGhvZCBpbiBlZGl0b3It
 Y2FudmFzJTxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+PC91PmNvbGxl
 Y3RzL3JhY2tldC9wcml2YXRlL21vcmUtPHU+PC91PnNjaGVtZS5ya3Q6MTQ3OjI6IGNhbGwtd2l0
 aC1icmVhay08dT48L3U+cGFyYW1ldGVyaXphdGlvbjxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFj
 a2V0LTYuMS4xLjgvPHU+PC91PmNvbGxlY3RzL3JhY2tldC9wcml2YXRlL21vcmUtPHU+PC91PnNj
 aGVtZS5ya3Q6MjY0OjI6IGNhbGwtd2l0aC1leGNlcHRpb24taGFuZGxlcjxicj4NCjxicj4NCioq
 KiBIb3cgdG8gcmVwZWF0Ojxicj4NCkluIERyUmFja2V0Ojxicj4NCjxicj4NCiNsYW5nIHJhY2tl
 dDxicj4NCihyZXF1aXJlIHBsb3QpPGJyPg0KKHBsb3QgKGZ1bmN0aW9uIHNpbikgIzp4LW1pbiAw
 ICM6eC1tYXggMSk8YnI+DQo8YnI+DQpUaGVuIGhvdmVyIHRoZSBtb3VzZSBvdmVyIHRoZSBzbmlw
 Ljxicj4NCjxicj4NCioqKiBFbnZpcm9ubWVudDo8YnI+DQp1bml4ICZxdW90O0xpbnV4IDxhIGhy
 ZWY9Imh0dHA6Ly9sb3JzZWF1Lmxvbi5jb3JwLmdvb2dsZS5jb20iIHRhcmdldD0iX2JsYW5rIj5s
 b3JzZWF1Lmxvbi5jb3JwLmdvb2dsZS5jb208L2E+IDMuMTMuMC00My1nZW5lcmljICM3Mi1VYnVu
 dHUgU01QIE1vbiBEZWMgOCAxOTozNTowNiBVVEMgMjAxNCB4ODZfNjQgeDg2XzY0IHg4Nl82NCBH
 TlUvTGludXgmcXVvdDsgKHg4Nl82NC1saW51eC8zbSkgKGdldC1kaXNwbGF5LWRlcHRoKSA9IDMy
 PGJyPg0KSHVtYW4gTGFuZ3VhZ2U6IGVuZ2xpc2g8YnI+DQooY3VycmVudC1tZW1vcnktdXNlKSA4
 NTkzNzEwNDA8YnI+DQpyYWNvIHBrZyAoc2hvdyk6PGJyPg0KSW5zdGFsbGF0aW9uLXdpZGU6PGJy
 Pg0KwqAgUGFja2FnZcKgIMKgIMKgIMKgIMKgIMKgIENoZWNrc3VtwqAgwqAgwqBTb3VyY2U8YnI+
 DQrCoCBtYWluLWRpc3RyaWJ1dGlvbsKgIGIyZGYxZDFkLi4uwqAgY2F0YWxvZyBtYWluLWRpc3Ry
 aWJ1dGlvbjxicj4NCsKgIHJhY2tldC1saWLCoCDCoCDCoCDCoCDCoDcyZTk2ZjUzLi4uwqAgY2F0
 YWxvZyByYWNrZXQtbGliPGJyPg0KwqAgWzE4NSBhdXRvLWluc3RhbGxlZCBwYWNrYWdlcyBub3Qg
 c2hvd25dPGJyPg0KVXNlci1zcGVjaWZpYyBmb3IgaW5zdGFsbGF0aW9uICZxdW90O3NuYXBzaG90
 JnF1b3Q7Ojxicj4NCsKgIFBhY2thZ2XCoCDCoCDCoCDCoCDCoCBDaGVja3N1bcKgIMKgIMKgIMKg
 IMKgIMKgIMKgIFNvdXJjZTxicj4NCsKgIGZsb3JlbmNlLW1hcmtvdsKgIMKgIMKgIMKgIMKgIMKg
 IMKgIMKgIMKgIMKgIMKgIMKgIGxpbmsuLi5vcmVuY2UtbWFya292PGJyPg0KwqAgbHV4wqAgwqAg
 wqAgwqAgwqAgwqAgwqAgOWNhMTlkMDEuLi7CoCDCoCDCoCDCoCDCoCDCoGNhdGFsb2cgbHV4PGJy
 Pg0KwqAgcGljdDNkwqAgwqAgwqAgwqAgwqAgwqBlMWMzNmE1Zi4uLsKgIMKgIMKgIMKgIMKgIMKg
 Y2F0YWxvZy4uLm50by9waWN0M2Q8YnI+DQrCoCBzY3JpcHQtcGx1Z2luwqAgwqAgMDE2MzE3OWEu
 Li7CoCDCoCDCoCDCoCDCoCDCoGNhdGFsb2cuLi5pcHQtcGx1Z2luPGJyPg0KwqAgdG93ZXJzwqAg
 wqAgwqAgwqAgwqAgwqA1M2NlZjRjNC4uLsKgIMKgIMKgIMKgIMKgIMKgY2F0YWxvZyB0b3dlcnM8
 YnI+DQrCoCBbMiBhdXRvLWluc3RhbGxlZCBwYWNrYWdlcyBub3Qgc2hvd25dPGJyPg0KPGJyPg0K
 PGJyPg0KPGJyPg0KQ29sbGVjdGlvbnM6PGJyPg0KKCZxdW90Oy91c3IvbG9jYWwvZ29vZ2xlL2hv
 bWUvPHU+PC91PmxvcnNlYXUvLnJhY2tldC9zbmFwc2hvdC88dT48L3U+Y29sbGVjdHMmcXVvdDs8
 YnI+DQrCoCAobm9uLWV4aXN0ZW50LXBhdGgpKTxicj4NCigmcXVvdDsvdXNyL3NoYXJlL3JhY2tl
 dC02LjEuMS44Lzx1PjwvdT5jb2xsZWN0cyZxdW90Ozxicj4NCsKgICgmcXVvdDsuZ2l0aWdub3Jl
 JnF1b3Q7ICZxdW90O2Fja3MmcXVvdDsgJnF1b3Q7Y29tcGlsZXImcXVvdDsgJnF1b3Q7ZGF0YSZx
 dW90OyAmcXVvdDtkYiZxdW90OyAmcXVvdDtkeW5leHQmcXVvdDsgJnF1b3Q7ZmZpJnF1b3Q7ICZx
 dW90O2ZpbGUmcXVvdDsgJnF1b3Q7aW5mbyZxdW90OyAmcXVvdDtpbmZvLWRvbWFpbiZxdW90OyAm
 cXVvdDtqc29uJnF1b3Q7ICZxdW90O2xhdW5jaGVyJnF1b3Q7ICZxdW90O25ldCZxdW90OyAmcXVv
 dDtvcGVuc3NsJnF1b3Q7ICZxdW90O3BrZyZxdW90OyAmcXVvdDtwbGFuZXQmcXVvdDsgJnF1b3Q7
 cmFja2V0JnF1b3Q7ICZxdW90O3JhY2t1bml0JnF1b3Q7ICZxdW90O3JhY28mcXVvdDsgJnF1b3Q7
 cmVhZGVyJnF1b3Q7ICZxdW90O3JlYWxtJnF1b3Q7ICZxdW90O3MtZXhwJnF1b3Q7ICZxdW90O3Nj
 aGVtZSZxdW90OyAmcXVvdDtzZXR1cCZxdW90OyAmcXVvdDtzcmZpJnF1b3Q7ICZxdW90O3N5bnRh
 eCZxdW90OyAmcXVvdDt1bnN0YWJsZSZxdW90OyAmcXVvdDt2ZXJzaW9uJnF1b3Q7ICZxdW90O3ht
 bCZxdW90OykpPGJyPg0KPGJyPg0KUmVjZW50IEludGVybmFsIEVycm9yczogU2F2ZWQgNSBpbnRl
 cm5hbCBlcnJvcnM6PGJyPg0KPGJyPg0KZ2V0LWVkaXRvcjogYnJva2UgaXRzIGNvbnRyYWN0PGJy
 Pg0KwqAgwqB0d28gb2YgdGhlIGNsYXVzZXMgaW4gdGhlIG9yL2MgbWlnaHQgYm90aCBtYXRjaDog
 KHJlY3Vyc2l2ZS1jb250cmFjdCBhbm9ueW1vdXMtY29udHJhY3QgIzppbXBlcnNvbmF0b3IpIGFu
 ZCAocmVjdXJzaXZlLWNvbnRyYWN0IGFub255bW91cy1jb250cmFjdCAjOmltcGVyc29uYXRvcik8
 YnI+DQrCoCDCoHByb2R1Y2VkOiAob2JqZWN0Oi4uLmVuZ2luZS90ZXN0LXRvb2wuPHU+PC91PnNj
 bToyMjo2IC4uLik8YnI+DQrCoCDCoGluOiB0aGUgcmFuZ2Ugb2Y8YnI+DQrCoCDCoCDCoCDCoHRo
 ZSBnZXQtZWRpdG9yIG1ldGhvZCBpbjxicj4NCsKgIMKgIMKgIMKgYSBkaXNqdW5jdCBvZjxicj4N
 CsKgIMKgIMKgIMKgdGhlIDJuZCBhcmd1bWVudCBvZjxicj4NCsKgIMKgIMKgIMKgdGhlIHNldC1h
 ZG1pbiBtZXRob2QgaW48YnI+DQrCoCDCoCDCoCDCoC4uLjxicj4NCsKgIMKgIMKgIMKgdGhlIHJh
 bmdlIG9mPGJyPg0KwqAgwqAgwqAgwqAoLSZndDs8YnI+DQrCoCDCoCDCoCDCoCAocmVjdXJzaXZl
 LWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqBhbm9ueW1vdXMtY29udHJhY3Q8YnI+DQrCoCDC
 oCDCoCDCoCDCoCM6aW1wZXJzb25hdG9yKTxicj4NCsKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrC
 oCDCoCDCoCDCoCDCoGFueS9jPGJyPg0KwqAgwqAgwqAgwqAgwqAoY29ucy9jPGJyPg0KwqAgwqAg
 wqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAg
 wqAgwqAgwqBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKgIMKg
 IMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoGFueS9jPGJyPg0KwqAg
 wqAgwqAgwqAgwqAgwqAgwqAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgYW55L2M8
 YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAg
 wqAgwqBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKg
 IMKgIMKgIMKgIMKgIMKgIMKgIChyZWN1cnNpdmUtY29udHJhY3Q8YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoCDCoCDCoCDCoGFub255bW91cy1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKg
 IMKgIMKgIzppbXBlcnNvbmF0b3IpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYW55L2Mp
 KSkpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKg
 IMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDC
 oCDCoCDCoCDCoCDCoCDCoCgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIFJlYWw8
 YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAg
 wqAgwqAgaW52ZXJ0aWJsZS1mdW5jdGlvbj88YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBh
 bnkpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYyk8YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAoY29ucy9jPGJyPg0K
 wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgKC0mZ3Q7PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAg
 wqAgwqBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBSZWFsPGJyPg0KwqAgwqAg
 wqAgwqAgwqAgwqAgwqAgwqAgwqBpbnZlcnRpYmxlLWZ1bmN0aW9uPzxicj4NCsKgIMKgIMKgIMKg
 IMKgIMKgIMKgIMKgIMKgYW55KTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGFueS9jKTxi
 cj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKg
 IMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCgtJmd0Ozxicj4N
 CsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIFJlYWw8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDC
 oCDCoCDCoCBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgaW52ZXJ0aWJsZS1m
 dW5jdGlvbj88YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBhbnkpPGJyPg0KwqAgwqAg
 wqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYyk8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBh
 bnkvYykpKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgYW55L2MpKSkpKTxicj4NCsKgIMKgIMKg
 IMKgICgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIMKgKG9yL2MgI2YgI3QpPGJyPg0KwqAgwqAgwqAg
 wqAgwqAodmVjdG9yb2YgaXZsPyk8YnI+DQrCoCDCoCDCoCDCoCDCoFBvc2l0aXZlLUludGVnZXI8
 YnI+DQrCoCDCoCDCoCDCoCDCoFBvc2l0aXZlLUludGVnZXI8YnI+DQrCoCDCoCDCoCDCoCDCoCh2
 YWx1ZXM8YnI+DQrCoCDCoCDCoCDCoCDCoCAocmVjdXJzaXZlLWNvbnRyYWN0PGJyPg0KwqAgwqAg
 wqAgwqAgwqAgwqBhbm9ueW1vdXMtY29udHJhY3Q8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCM6aW1w
 ZXJzb25hdG9yKTxicj4NCsKgIMKgIMKgIMKgIMKgICh2ZWN0b3JvZiBpdmw/KTxicj4NCsKgIMKg
 IMKgIMKgIMKgICgtJmd0OyAodmVjdG9yb2YgaXZsPykgKHZlY3Rvcm9mIGl2bD8pKSkpPGJyPg0K
 wqAgwqAgwqAgwqAgKHZlY3Rvcm9mIGl2bD8pPGJyPg0KwqAgwqAgwqAgwqAgKHZlY3Rvcm9mIGl2
 bD8pPGJyPg0KwqAgwqAgwqAgwqAgKC0mZ3Q7ICh2ZWN0b3JvZiBpdmw/KSAodmVjdG9yb2YgaXZs
 PykpPGJyPg0KwqAgwqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCBhbnkvYzxicj4NCsKg
 IMKgIMKgIMKgIChyZWN1cnNpdmUtY29udHJhY3Q8YnI+DQrCoCDCoCDCoCDCoCDCoGFub255bW91
 cy1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgIzppbXBlcnNvbmF0b3IpKTxicj4NCsKgIMKg
 Y29udHJhY3QgZnJvbTo8YnI+DQrCoCDCoCDCoCDCoChpbnRlcmZhY2UgZm9yIG1ha2UtMmQtcGxv
 dC1zbmlwKTxicj4NCsKgIMKgY29udHJhY3Qgb246IG1ha2UtMmQtcGxvdC1zbmlwPGJyPg0KwqAg
 wqBibGFtaW5nOiAmbHQ7cGtncyZndDsvcGxvdC1ndWktbGliL3Bsb3QvPHU+PC91PnByaXZhdGUv
 Z3VpL3Bsb3QyZC5ya3Q8YnI+DQrCoCDCoCAoYXNzdW1pbmcgdGhlIGNvbnRyYWN0IGlzIGNvcnJl
 Y3QpPGJyPg0KwqAgwqBhdDogJmx0O3BrZ3MmZ3Q7L3Bsb3QtZ3VpLWxpYi9wbG90Lzx1PjwvdT5w
 cml2YXRlL2d1aS9wbG90MmQucmt0OjE3LjI8YnI+DQrCoCDCoGNvbnRleHQuLi46PGJyPg0KwqAg
 wqAgL3Vzci9zaGFyZS9yYWNrZXQtNi4xLjEuOC88dT48L3U+Y29sbGVjdHMvcmFja2V0L2NvbnRy
 YWN0Lzx1PjwvdT5wcml2YXRlL2JsYW1lLnJrdDoxNDM6MDogcmFpc2UtYmxhbWUtZXJyb3IxNjxi
 cj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+PC91PnBrZ3MvcGxvdC1ndWkt
 bGliL3Bsb3QvPHU+PC91PnByaXZhdGUvZ3VpL3NuaXAucmt0OjE4Njo0OiBvbi1ldmVudCBtZXRo
 b2QgaW4gcGxvdC1zbmlwJTxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+
 PC91PnBrZ3MvZ3VpLWxpYi9tcmVkL3ByaXZhdGUvPHU+PC91Pnd4bWUvdGV4dC5ya3Q6NDUwOjI6
 IG9uLWV2ZW50IG1ldGhvZCBpbiB0ZXh0JTxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYu
 MS4xLjgvPHU+PC91PnBrZ3MvZ3VpLWxpYi9tcmVkL3ByaXZhdGUvPHU+PC91Pnd4bWUvZWRpdG9y
 LWNhbnZhcy5ya3Q6Mzk0OjI6IG9uLWV2ZW50IG1ldGhvZCBpbiBlZGl0b3ItY2FudmFzJTxicj4N
 CsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+PC91PmNvbGxlY3RzL3JhY2tldC9w
 cml2YXRlL21vcmUtPHU+PC91PnNjaGVtZS5ya3Q6MTQ3OjI6IGNhbGwtd2l0aC1icmVhay08dT48
 L3U+cGFyYW1ldGVyaXphdGlvbjxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgv
 PHU+PC91PmNvbGxlY3RzL3JhY2tldC9wcml2YXRlL21vcmUtPHU+PC91PnNjaGVtZS5ya3Q6MjY0
 OjI6IGNhbGwtd2l0aC1leGNlcHRpb24taGFuZGxlcjxicj4NCjxicj4NCjxicj4NCmdldC1lZGl0
 b3I6IGJyb2tlIGl0cyBjb250cmFjdDxicj4NCsKgIMKgdHdvIG9mIHRoZSBjbGF1c2VzIGluIHRo
 ZSBvci9jIG1pZ2h0IGJvdGggbWF0Y2g6IChyZWN1cnNpdmUtY29udHJhY3QgYW5vbnltb3VzLWNv
 bnRyYWN0ICM6aW1wZXJzb25hdG9yKSBhbmQgKHJlY3Vyc2l2ZS1jb250cmFjdCBhbm9ueW1vdXMt
 Y29udHJhY3QgIzppbXBlcnNvbmF0b3IpPGJyPg0KwqAgwqBwcm9kdWNlZDogKG9iamVjdDouLi5l
 bmdpbmUvdGVzdC10b29sLjx1PjwvdT5zY206MjI6NiAuLi4pPGJyPg0KwqAgwqBpbjogdGhlIHJh
 bmdlIG9mPGJyPg0KwqAgwqAgwqAgwqB0aGUgZ2V0LWVkaXRvciBtZXRob2QgaW48YnI+DQrCoCDC
 oCDCoCDCoGEgZGlzanVuY3Qgb2Y8YnI+DQrCoCDCoCDCoCDCoHRoZSAybmQgYXJndW1lbnQgb2Y8
 YnI+DQrCoCDCoCDCoCDCoHRoZSBzZXQtYWRtaW4gbWV0aG9kIGluPGJyPg0KwqAgwqAgwqAgwqAu
 Li48YnI+DQrCoCDCoCDCoCDCoHRoZSByYW5nZSBvZjxicj4NCsKgIMKgIMKgIMKgKC0mZ3Q7PGJy
 Pg0KwqAgwqAgwqAgwqAgKHJlY3Vyc2l2ZS1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgYW5v
 bnltb3VzLWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqAjOmltcGVyc29uYXRvcik8YnI+DQrC
 oCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqBhbnkvYzxicj4NCsKgIMKgIMKg
 IMKgIMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIGFueS9jPGJyPg0KwqAgwqAgwqAgwqAg
 wqAgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAg
 wqAgwqAgwqAgwqBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKg
 IMKgIMKgIMKgIMKgIMKgIMKgIGFueS9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgKGNvbnMv
 Yzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDC
 oCDCoCDCoChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCAocmVjdXJzaXZlLWNv
 bnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBhbm9ueW1vdXMtY29udHJhY3Q8
 YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCM6aW1wZXJzb25hdG9yKTxicj4NCsKgIMKg
 IMKgIMKgIMKgIMKgIMKgIMKgIGFueS9jKSkpKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIChjb25z
 L2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDC
 oCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAoLSZndDs8YnI+DQrCoCDC
 oCDCoCDCoCDCoCDCoCDCoCDCoCBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgUmVh
 bDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGludmVydGlibGUtZnVuY3Rpb24/PGJyPg0K
 wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYW55KTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
 YW55L2MpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKg
 IMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgICgtJmd0Ozxi
 cj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgUmVhbDxicj4NCsKgIMKgIMKgIMKgIMKgIMKg
 IMKgIMKgIMKgUmVhbDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgaW52ZXJ0aWJsZS1m
 dW5jdGlvbj88YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGFueSk8YnI+DQrCoCDCoCDC
 oCDCoCDCoCDCoCDCoCDCoCBhbnkvYyk8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoChjb25z
 L2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAg
 wqAgwqAgwqAgwqAgwqAoLSZndDs8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBSZWFs
 PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgUmVhbDxicj4NCsKgIMKgIMKgIMKgIMKg
 IMKgIMKgIMKgIMKgIGludmVydGlibGUtZnVuY3Rpb24/PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAg
 wqAgwqAgwqAgYW55KTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgYW55L2MpPGJyPg0K
 wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYW55L2MpKSk8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDC
 oGFueS9jKSkpKSk8YnI+DQrCoCDCoCDCoCDCoCAoLSZndDs8YnI+DQrCoCDCoCDCoCDCoCDCoChv
 ci9jICNmICN0KTxicj4NCsKgIMKgIMKgIMKgIMKgKHZlY3Rvcm9mIGl2bD8pPGJyPg0KwqAgwqAg
 wqAgwqAgwqBQb3NpdGl2ZS1JbnRlZ2VyPGJyPg0KwqAgwqAgwqAgwqAgwqBQb3NpdGl2ZS1JbnRl
 Z2VyPGJyPg0KwqAgwqAgwqAgwqAgwqAodmFsdWVzPGJyPg0KwqAgwqAgwqAgwqAgwqAgKHJlY3Vy
 c2l2ZS1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgYW5vbnltb3VzLWNvbnRyYWN0PGJy
 Pg0KwqAgwqAgwqAgwqAgwqAgwqAjOmltcGVyc29uYXRvcik8YnI+DQrCoCDCoCDCoCDCoCDCoCAo
 dmVjdG9yb2YgaXZsPyk8YnI+DQrCoCDCoCDCoCDCoCDCoCAoLSZndDsgKHZlY3Rvcm9mIGl2bD8p
 ICh2ZWN0b3JvZiBpdmw/KSkpKTxicj4NCsKgIMKgIMKgIMKgICh2ZWN0b3JvZiBpdmw/KTxicj4N
 CsKgIMKgIMKgIMKgICh2ZWN0b3JvZiBpdmw/KTxicj4NCsKgIMKgIMKgIMKgICgtJmd0OyAodmVj
 dG9yb2YgaXZsPykgKHZlY3Rvcm9mIGl2bD8pKTxicj4NCsKgIMKgIMKgIMKgIGFueS9jPGJyPg0K
 wqAgwqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCAocmVjdXJzaXZlLWNvbnRyYWN0PGJy
 Pg0KwqAgwqAgwqAgwqAgwqBhbm9ueW1vdXMtY29udHJhY3Q8YnI+DQrCoCDCoCDCoCDCoCDCoCM6
 aW1wZXJzb25hdG9yKSk8YnI+DQrCoCDCoGNvbnRyYWN0IGZyb206PGJyPg0KwqAgwqAgwqAgwqAo
 aW50ZXJmYWNlIGZvciBtYWtlLTJkLXBsb3Qtc25pcCk8YnI+DQrCoCDCoGNvbnRyYWN0IG9uOiBt
 YWtlLTJkLXBsb3Qtc25pcDxicj4NCsKgIMKgYmxhbWluZzogJmx0O3BrZ3MmZ3Q7L3Bsb3QtZ3Vp
 LWxpYi9wbG90Lzx1PjwvdT5wcml2YXRlL2d1aS9wbG90MmQucmt0PGJyPg0KwqAgwqAgKGFzc3Vt
 aW5nIHRoZSBjb250cmFjdCBpcyBjb3JyZWN0KTxicj4NCsKgIMKgYXQ6ICZsdDtwa2dzJmd0Oy9w
 bG90LWd1aS1saWIvcGxvdC88dT48L3U+cHJpdmF0ZS9ndWkvcGxvdDJkLnJrdDoxNy4yPGJyPg0K
 wqAgwqBjb250ZXh0Li4uOjxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+
 PC91PmNvbGxlY3RzL3JhY2tldC9jb250cmFjdC88dT48L3U+cHJpdmF0ZS9ibGFtZS5ya3Q6MTQz
 OjA6IHJhaXNlLWJsYW1lLWVycm9yMTY8YnI+DQrCoCDCoCAvdXNyL3NoYXJlL3JhY2tldC02LjEu
 MS44Lzx1PjwvdT5wa2dzL3Bsb3QtZ3VpLWxpYi9wbG90Lzx1PjwvdT5wcml2YXRlL2d1aS9zbmlw
 LnJrdDoxODY6NDogb24tZXZlbnQgbWV0aG9kIGluIHBsb3Qtc25pcCU8YnI+DQrCoCDCoCAvdXNy
 L3NoYXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5wa2dzL2d1aS1saWIvbXJlZC9wcml2YXRlLzx1
 PjwvdT53eG1lL3RleHQucmt0OjQ1MDoyOiBvbi1ldmVudCBtZXRob2QgaW4gdGV4dCU8YnI+DQrC
 oCDCoCAvdXNyL3NoYXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5wa2dzL2d1aS1saWIvbXJlZC9w
 cml2YXRlLzx1PjwvdT53eG1lL2VkaXRvci1jYW52YXMucmt0OjM5NDoyOiBvbi1ldmVudCBtZXRo
 b2QgaW4gZWRpdG9yLWNhbnZhcyU8YnI+DQrCoCDCoCAvdXNyL3NoYXJlL3JhY2tldC02LjEuMS44
 Lzx1PjwvdT5jb2xsZWN0cy9yYWNrZXQvcHJpdmF0ZS9tb3JlLTx1PjwvdT5zY2hlbWUucmt0OjE0
 NzoyOiBjYWxsLXdpdGgtYnJlYWstPHU+PC91PnBhcmFtZXRlcml6YXRpb248YnI+DQrCoCDCoCAv
 dXNyL3NoYXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5jb2xsZWN0cy9yYWNrZXQvcHJpdmF0ZS9t
 b3JlLTx1PjwvdT5zY2hlbWUucmt0OjI2NDoyOiBjYWxsLXdpdGgtZXhjZXB0aW9uLWhhbmRsZXI8
 YnI+DQo8YnI+DQo8YnI+DQpnZXQtZWRpdG9yOiBicm9rZSBpdHMgY29udHJhY3Q8YnI+DQrCoCDC
 oHR3byBvZiB0aGUgY2xhdXNlcyBpbiB0aGUgb3IvYyBtaWdodCBib3RoIG1hdGNoOiAocmVjdXJz
 aXZlLWNvbnRyYWN0IGFub255bW91cy1jb250cmFjdCAjOmltcGVyc29uYXRvcikgYW5kIChyZWN1
 cnNpdmUtY29udHJhY3QgYW5vbnltb3VzLWNvbnRyYWN0ICM6aW1wZXJzb25hdG9yKTxicj4NCsKg
 IMKgcHJvZHVjZWQ6IChvYmplY3Q6Li4uZW5naW5lL3Rlc3QtdG9vbC48dT48L3U+c2NtOjIyOjYg
 Li4uKTxicj4NCsKgIMKgaW46IHRoZSByYW5nZSBvZjxicj4NCsKgIMKgIMKgIMKgdGhlIGdldC1l
 ZGl0b3IgbWV0aG9kIGluPGJyPg0KwqAgwqAgwqAgwqBhIGRpc2p1bmN0IG9mPGJyPg0KwqAgwqAg
 wqAgwqB0aGUgMm5kIGFyZ3VtZW50IG9mPGJyPg0KwqAgwqAgwqAgwqB0aGUgc2V0LWFkbWluIG1l
 dGhvZCBpbjxicj4NCsKgIMKgIMKgIMKgLi4uPGJyPg0KwqAgwqAgwqAgwqB0aGUgcmFuZ2Ugb2Y8
 YnI+DQrCoCDCoCDCoCDCoCgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIChyZWN1cnNpdmUtY29udHJh
 Y3Q8YnI+DQrCoCDCoCDCoCDCoCDCoGFub255bW91cy1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKg
 IMKgIzppbXBlcnNvbmF0b3IpPGJyPg0KwqAgwqAgwqAgwqAgKGNvbnMvYzxicj4NCsKgIMKgIMKg
 IMKgIMKgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCDCoChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDC
 oCBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDC
 oGFueS9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAg
 wqAgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgYW55L2M8YnI+DQrCoCDCoCDCoCDC
 oCDCoCDCoCDCoChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCBhbnkvYzxicj4NCsKg
 IMKgIMKgIMKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGFu
 eS9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAg
 wqAgwqAgwqAgwqAgKHJlY3Vyc2l2ZS1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKg
 IMKgIMKgYW5vbnltb3VzLWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAj
 OmltcGVyc29uYXRvcik8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBhbnkvYykpKSk8YnI+
 DQrCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAoY29u
 cy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKg
 IMKgIMKgIMKgKC0mZ3Q7PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgUmVhbDxicj4NCsKg
 IMKgIMKgIMKgIMKgIMKgIMKgIMKgIFJlYWw8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBp
 bnZlcnRpYmxlLWZ1bmN0aW9uPzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGFueSk8YnI+
 DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGFueS9jKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKg
 IChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoChjb25zL2M8YnI+DQrCoCDCoCDC
 oCDCoCDCoCDCoCDCoCDCoCAoLSZndDs8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoFJl
 YWw8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoFJlYWw8YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoCDCoCDCoCDCoGludmVydGlibGUtZnVuY3Rpb24/PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAg
 wqAgwqAgwqBhbnkpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYW55L2MpPGJyPg0KwqAg
 wqAgwqAgwqAgwqAgwqAgwqAgwqAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
 KGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgKC0mZ3Q7PGJyPg0KwqAgwqAg
 wqAgwqAgwqAgwqAgwqAgwqAgwqAgUmVhbDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
 IFJlYWw8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBpbnZlcnRpYmxlLWZ1bmN0aW9u
 Pzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGFueSk8YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoCDCoCDCoCDCoGFueS9jKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGFueS9jKSkp
 PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYykpKSkpPGJyPg0KwqAgwqAgwqAgwqAgKC0m
 Z3Q7PGJyPg0KwqAgwqAgwqAgwqAgwqAob3IvYyAjZiAjdCk8YnI+DQrCoCDCoCDCoCDCoCDCoCh2
 ZWN0b3JvZiBpdmw/KTxicj4NCsKgIMKgIMKgIMKgIMKgUG9zaXRpdmUtSW50ZWdlcjxicj4NCsKg
 IMKgIMKgIMKgIMKgUG9zaXRpdmUtSW50ZWdlcjxicj4NCsKgIMKgIMKgIMKgIMKgKHZhbHVlczxi
 cj4NCsKgIMKgIMKgIMKgIMKgIChyZWN1cnNpdmUtY29udHJhY3Q8YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoGFub255bW91cy1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIzppbXBlcnNvbmF0
 b3IpPGJyPg0KwqAgwqAgwqAgwqAgwqAgKHZlY3Rvcm9mIGl2bD8pPGJyPg0KwqAgwqAgwqAgwqAg
 wqAgKC0mZ3Q7ICh2ZWN0b3JvZiBpdmw/KSAodmVjdG9yb2YgaXZsPykpKSk8YnI+DQrCoCDCoCDC
 oCDCoCAodmVjdG9yb2YgaXZsPyk8YnI+DQrCoCDCoCDCoCDCoCAodmVjdG9yb2YgaXZsPyk8YnI+
 DQrCoCDCoCDCoCDCoCAoLSZndDsgKHZlY3Rvcm9mIGl2bD8pICh2ZWN0b3JvZiBpdmw/KSk8YnI+
 DQrCoCDCoCDCoCDCoCBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIGFueS9jPGJyPg0KwqAgwqAgwqAg
 wqAgKHJlY3Vyc2l2ZS1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgYW5vbnltb3VzLWNvbnRy
 YWN0PGJyPg0KwqAgwqAgwqAgwqAgwqAjOmltcGVyc29uYXRvcikpPGJyPg0KwqAgwqBjb250cmFj
 dCBmcm9tOjxicj4NCsKgIMKgIMKgIMKgKGludGVyZmFjZSBmb3IgbWFrZS0yZC1wbG90LXNuaXAp
 PGJyPg0KwqAgwqBjb250cmFjdCBvbjogbWFrZS0yZC1wbG90LXNuaXA8YnI+DQrCoCDCoGJsYW1p
 bmc6ICZsdDtwa2dzJmd0Oy9wbG90LWd1aS1saWIvcGxvdC88dT48L3U+cHJpdmF0ZS9ndWkvcGxv
 dDJkLnJrdDxicj4NCsKgIMKgIChhc3N1bWluZyB0aGUgY29udHJhY3QgaXMgY29ycmVjdCk8YnI+
 DQrCoCDCoGF0OiAmbHQ7cGtncyZndDsvcGxvdC1ndWktbGliL3Bsb3QvPHU+PC91PnByaXZhdGUv
 Z3VpL3Bsb3QyZC5ya3Q6MTcuMjxicj4NCsKgIMKgY29udGV4dC4uLjo8YnI+DQrCoCDCoCAvdXNy
 L3NoYXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5jb2xsZWN0cy9yYWNrZXQvY29udHJhY3QvPHU+
 PC91PnByaXZhdGUvYmxhbWUucmt0OjE0MzowOiByYWlzZS1ibGFtZS1lcnJvcjE2PGJyPg0KwqAg
 wqAgL3Vzci9zaGFyZS9yYWNrZXQtNi4xLjEuOC88dT48L3U+cGtncy9wbG90LWd1aS1saWIvcGxv
 dC88dT48L3U+cHJpdmF0ZS9ndWkvc25pcC5ya3Q6MTg2OjQ6IG9uLWV2ZW50IG1ldGhvZCBpbiBw
 bG90LXNuaXAlPGJyPg0KwqAgwqAgL3Vzci9zaGFyZS9yYWNrZXQtNi4xLjEuOC88dT48L3U+cGtn
 cy9ndWktbGliL21yZWQvcHJpdmF0ZS88dT48L3U+d3htZS90ZXh0LnJrdDo0NTA6Mjogb24tZXZl
 bnQgbWV0aG9kIGluIHRleHQlPGJyPg0KwqAgwqAgL3Vzci9zaGFyZS9yYWNrZXQtNi4xLjEuOC88
 dT48L3U+cGtncy9ndWktbGliL21yZWQvcHJpdmF0ZS88dT48L3U+d3htZS9lZGl0b3ItY2FudmFz
 LnJrdDozOTQ6Mjogb24tZXZlbnQgbWV0aG9kIGluIGVkaXRvci1jYW52YXMlPGJyPg0KwqAgwqAg
 L3Vzci9zaGFyZS9yYWNrZXQtNi4xLjEuOC88dT48L3U+Y29sbGVjdHMvcmFja2V0L3ByaXZhdGUv
 bW9yZS08dT48L3U+c2NoZW1lLnJrdDoxNDc6MjogY2FsbC13aXRoLWJyZWFrLTx1PjwvdT5wYXJh
 bWV0ZXJpemF0aW9uPGJyPg0KwqAgwqAgL3Vzci9zaGFyZS9yYWNrZXQtNi4xLjEuOC88dT48L3U+
 Y29sbGVjdHMvcmFja2V0L3ByaXZhdGUvbW9yZS08dT48L3U+c2NoZW1lLnJrdDoyNjQ6MjogY2Fs
 bC13aXRoLWV4Y2VwdGlvbi1oYW5kbGVyPGJyPg0KPGJyPg0KPGJyPg0KZ2V0LWVkaXRvcjogYnJv
 a2UgaXRzIGNvbnRyYWN0PGJyPg0KwqAgwqB0d28gb2YgdGhlIGNsYXVzZXMgaW4gdGhlIG9yL2Mg
 bWlnaHQgYm90aCBtYXRjaDogKHJlY3Vyc2l2ZS1jb250cmFjdCBhbm9ueW1vdXMtY29udHJhY3Qg
 IzppbXBlcnNvbmF0b3IpIGFuZCAocmVjdXJzaXZlLWNvbnRyYWN0IGFub255bW91cy1jb250cmFj
 dCAjOmltcGVyc29uYXRvcik8YnI+DQrCoCDCoHByb2R1Y2VkOiAob2JqZWN0Oi4uLmVuZ2luZS90
 ZXN0LXRvb2wuPHU+PC91PnNjbToyMjo2IC4uLik8YnI+DQrCoCDCoGluOiB0aGUgcmFuZ2Ugb2Y8
 YnI+DQrCoCDCoCDCoCDCoHRoZSBnZXQtZWRpdG9yIG1ldGhvZCBpbjxicj4NCsKgIMKgIMKgIMKg
 YSBkaXNqdW5jdCBvZjxicj4NCsKgIMKgIMKgIMKgdGhlIDJuZCBhcmd1bWVudCBvZjxicj4NCsKg
 IMKgIMKgIMKgdGhlIHNldC1hZG1pbiBtZXRob2QgaW48YnI+DQrCoCDCoCDCoCDCoC4uLjxicj4N
 CsKgIMKgIMKgIMKgdGhlIHJhbmdlIG9mPGJyPg0KwqAgwqAgwqAgwqAoLSZndDs8YnI+DQrCoCDC
 oCDCoCDCoCAocmVjdXJzaXZlLWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqBhbm9ueW1vdXMt
 Y29udHJhY3Q8YnI+DQrCoCDCoCDCoCDCoCDCoCM6aW1wZXJzb25hdG9yKTxicj4NCsKgIMKgIMKg
 IMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoGFueS9jPGJyPg0KwqAgwqAgwqAgwqAgwqAo
 Y29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCDCoCAoY29u
 cy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgKGNv
 bnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDC
 oCDCoGFueS9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAoY29ucy9jPGJyPg0KwqAgwqAgwqAg
 wqAgwqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0K
 wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKg
 KGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIChyZWN1cnNpdmUtY29udHJhY3Q8
 YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoGFub255bW91cy1jb250cmFjdDxicj4NCsKg
 IMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIzppbXBlcnNvbmF0b3IpPGJyPg0KwqAgwqAgwqAgwqAg
 wqAgwqAgwqAgwqAgYW55L2MpKSkpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgKGNvbnMvYzxicj4N
 CsKgIMKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIChj
 b25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCgtJmd0Ozxicj4NCsKgIMKgIMKgIMKg
 IMKgIMKgIMKgIMKgIFJlYWw8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBSZWFsPGJyPg0K
 wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgaW52ZXJ0aWJsZS1mdW5jdGlvbj88YnI+DQrCoCDCoCDC
 oCDCoCDCoCDCoCDCoCDCoCBhbnkpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYyk8
 YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAg
 wqAgwqAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgKC0mZ3Q7PGJyPg0KwqAg
 wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAg
 wqBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBpbnZlcnRpYmxlLWZ1bmN0aW9u
 Pzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgYW55KTxicj4NCsKgIMKgIMKgIMKgIMKg
 IMKgIMKgIMKgIGFueS9jKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4N
 CsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDC
 oCDCoCDCoCgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIFJlYWw8YnI+DQrC
 oCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAg
 wqAgwqAgaW52ZXJ0aWJsZS1mdW5jdGlvbj88YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
 oCBhbnkpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYyk8YnI+DQrCoCDCoCDC
 oCDCoCDCoCDCoCDCoCDCoCBhbnkvYykpKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgYW55L2Mp
 KSkpKTxicj4NCsKgIMKgIMKgIMKgICgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIMKgKG9yL2MgI2Yg
 I3QpPGJyPg0KwqAgwqAgwqAgwqAgwqAodmVjdG9yb2YgaXZsPyk8YnI+DQrCoCDCoCDCoCDCoCDC
 oFBvc2l0aXZlLUludGVnZXI8YnI+DQrCoCDCoCDCoCDCoCDCoFBvc2l0aXZlLUludGVnZXI8YnI+
 DQrCoCDCoCDCoCDCoCDCoCh2YWx1ZXM8YnI+DQrCoCDCoCDCoCDCoCDCoCAocmVjdXJzaXZlLWNv
 bnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqBhbm9ueW1vdXMtY29udHJhY3Q8YnI+DQrCoCDC
 oCDCoCDCoCDCoCDCoCM6aW1wZXJzb25hdG9yKTxicj4NCsKgIMKgIMKgIMKgIMKgICh2ZWN0b3Jv
 ZiBpdmw/KTxicj4NCsKgIMKgIMKgIMKgIMKgICgtJmd0OyAodmVjdG9yb2YgaXZsPykgKHZlY3Rv
 cm9mIGl2bD8pKSkpPGJyPg0KwqAgwqAgwqAgwqAgKHZlY3Rvcm9mIGl2bD8pPGJyPg0KwqAgwqAg
 wqAgwqAgKHZlY3Rvcm9mIGl2bD8pPGJyPg0KwqAgwqAgwqAgwqAgKC0mZ3Q7ICh2ZWN0b3JvZiBp
 dmw/KSAodmVjdG9yb2YgaXZsPykpPGJyPg0KwqAgwqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDC
 oCDCoCBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIChyZWN1cnNpdmUtY29udHJhY3Q8YnI+DQrCoCDC
 oCDCoCDCoCDCoGFub255bW91cy1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgIzppbXBlcnNv
 bmF0b3IpKTxicj4NCsKgIMKgY29udHJhY3QgZnJvbTo8YnI+DQrCoCDCoCDCoCDCoChpbnRlcmZh
 Y2UgZm9yIG1ha2UtMmQtcGxvdC1zbmlwKTxicj4NCsKgIMKgY29udHJhY3Qgb246IG1ha2UtMmQt
 cGxvdC1zbmlwPGJyPg0KwqAgwqBibGFtaW5nOiAmbHQ7cGtncyZndDsvcGxvdC1ndWktbGliL3Bs
 b3QvPHU+PC91PnByaXZhdGUvZ3VpL3Bsb3QyZC5ya3Q8YnI+DQrCoCDCoCAoYXNzdW1pbmcgdGhl
 IGNvbnRyYWN0IGlzIGNvcnJlY3QpPGJyPg0KwqAgwqBhdDogJmx0O3BrZ3MmZ3Q7L3Bsb3QtZ3Vp
 LWxpYi9wbG90Lzx1PjwvdT5wcml2YXRlL2d1aS9wbG90MmQucmt0OjE3LjI8YnI+DQrCoCDCoGNv
 bnRleHQuLi46PGJyPg0KwqAgwqAgL3Vzci9zaGFyZS9yYWNrZXQtNi4xLjEuOC88dT48L3U+Y29s
 bGVjdHMvcmFja2V0L2NvbnRyYWN0Lzx1PjwvdT5wcml2YXRlL2JsYW1lLnJrdDoxNDM6MDogcmFp
 c2UtYmxhbWUtZXJyb3IxNjxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+
 PC91PnBrZ3MvcGxvdC1ndWktbGliL3Bsb3QvPHU+PC91PnByaXZhdGUvZ3VpL3NuaXAucmt0OjE4
 Njo0OiBvbi1ldmVudCBtZXRob2QgaW4gcGxvdC1zbmlwJTxicj4NCsKgIMKgIC91c3Ivc2hhcmUv
 cmFja2V0LTYuMS4xLjgvPHU+PC91PnBrZ3MvZ3VpLWxpYi9tcmVkL3ByaXZhdGUvPHU+PC91Pnd4
 bWUvdGV4dC5ya3Q6NDUwOjI6IG9uLWV2ZW50IG1ldGhvZCBpbiB0ZXh0JTxicj4NCsKgIMKgIC91
 c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+PC91PnBrZ3MvZ3VpLWxpYi9tcmVkL3ByaXZhdGUv
 PHU+PC91Pnd4bWUvZWRpdG9yLWNhbnZhcy5ya3Q6Mzk0OjI6IG9uLWV2ZW50IG1ldGhvZCBpbiBl
 ZGl0b3ItY2FudmFzJTxicj4NCsKgIMKgIC91c3Ivc2hhcmUvcmFja2V0LTYuMS4xLjgvPHU+PC91
 PmNvbGxlY3RzL3JhY2tldC9wcml2YXRlL21vcmUtPHU+PC91PnNjaGVtZS5ya3Q6MTQ3OjI6IGNh
 bGwtd2l0aC1icmVhay08dT48L3U+cGFyYW1ldGVyaXphdGlvbjxicj4NCsKgIMKgIC91c3Ivc2hh
 cmUvcmFja2V0LTYuMS4xLjgvPHU+PC91PmNvbGxlY3RzL3JhY2tldC9wcml2YXRlL21vcmUtPHU+
 PC91PnNjaGVtZS5ya3Q6MjY0OjI6IGNhbGwtd2l0aC1leGNlcHRpb24taGFuZGxlcjxicj4NCjxi
 cj4NCjxicj4NCmdldC1lZGl0b3I6IGJyb2tlIGl0cyBjb250cmFjdDxicj4NCsKgIMKgdHdvIG9m
 IHRoZSBjbGF1c2VzIGluIHRoZSBvci9jIG1pZ2h0IGJvdGggbWF0Y2g6IChyZWN1cnNpdmUtY29u
 dHJhY3QgYW5vbnltb3VzLWNvbnRyYWN0ICM6aW1wZXJzb25hdG9yKSBhbmQgKHJlY3Vyc2l2ZS1j
 b250cmFjdCBhbm9ueW1vdXMtY29udHJhY3QgIzppbXBlcnNvbmF0b3IpPGJyPg0KwqAgwqBwcm9k
 dWNlZDogKG9iamVjdDouLi5lbmdpbmUvdGVzdC10b29sLjx1PjwvdT5zY206MjI6NiAuLi4pPGJy
 Pg0KwqAgwqBpbjogdGhlIHJhbmdlIG9mPGJyPg0KwqAgwqAgwqAgwqB0aGUgZ2V0LWVkaXRvciBt
 ZXRob2QgaW48YnI+DQrCoCDCoCDCoCDCoGEgZGlzanVuY3Qgb2Y8YnI+DQrCoCDCoCDCoCDCoHRo
 ZSAybmQgYXJndW1lbnQgb2Y8YnI+DQrCoCDCoCDCoCDCoHRoZSBzZXQtYWRtaW4gbWV0aG9kIGlu
 PGJyPg0KwqAgwqAgwqAgwqAuLi48YnI+DQrCoCDCoCDCoCDCoHRoZSByYW5nZSBvZjxicj4NCsKg
 IMKgIMKgIMKgKC0mZ3Q7PGJyPg0KwqAgwqAgwqAgwqAgKHJlY3Vyc2l2ZS1jb250cmFjdDxicj4N
 CsKgIMKgIMKgIMKgIMKgYW5vbnltb3VzLWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqAjOmlt
 cGVyc29uYXRvcik8YnI+DQrCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqBh
 bnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIGFueS9j
 PGJyPg0KwqAgwqAgwqAgwqAgwqAgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgYW55L2M8
 YnI+DQrCoCDCoCDCoCDCoCDCoCDCoChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCAoY29u
 cy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqBhbnkvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKg
 IMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIGFueS9jPGJyPg0KwqAgwqAgwqAg
 wqAgwqAgwqAgwqAgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgYW55L2M8YnI+
 DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDC
 oCDCoCAocmVjdXJzaXZlLWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqBh
 bm9ueW1vdXMtY29udHJhY3Q8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCM6aW1wZXJz
 b25hdG9yKTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGFueS9jKSkpKTxicj4NCsKgIMKg
 IMKgIMKgIMKgIMKgIChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoChjb25zL2M8YnI+
 DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9jPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAg
 wqAoLSZndDs8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBSZWFsPGJyPg0KwqAgwqAgwqAg
 wqAgwqAgwqAgwqAgwqAgUmVhbDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGludmVydGli
 bGUtZnVuY3Rpb24/PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYW55KTxicj4NCsKgIMKg
 IMKgIMKgIMKgIMKgIMKgIMKgYW55L2MpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgKGNvbnMv
 Yzxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgKGNvbnMvYzxicj4NCsKgIMKgIMKgIMKgIMKg
 IMKgIMKgIMKgICgtJmd0Ozxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgUmVhbDxicj4N
 CsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgUmVhbDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKg
 IMKgIMKgaW52ZXJ0aWJsZS1mdW5jdGlvbj88YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDC
 oGFueSk8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBhbnkvYyk8YnI+DQrCoCDCoCDCoCDC
 oCDCoCDCoCDCoCDCoChjb25zL2M8YnI+DQrCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCAoY29ucy9j
 PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAoLSZndDs8YnI+DQrCoCDCoCDCoCDCoCDC
 oCDCoCDCoCDCoCDCoCBSZWFsPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgUmVhbDxi
 cj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGludmVydGlibGUtZnVuY3Rpb24/PGJyPg0K
 wqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYW55KTxicj4NCsKgIMKgIMKgIMKgIMKgIMKgIMKg
 IMKgIMKgYW55L2MpPGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYW55L2MpKSk8YnI+DQrC
 oCDCoCDCoCDCoCDCoCDCoCDCoGFueS9jKSkpKSk8YnI+DQrCoCDCoCDCoCDCoCAoLSZndDs8YnI+
 DQrCoCDCoCDCoCDCoCDCoChvci9jICNmICN0KTxicj4NCsKgIMKgIMKgIMKgIMKgKHZlY3Rvcm9m
 IGl2bD8pPGJyPg0KwqAgwqAgwqAgwqAgwqBQb3NpdGl2ZS1JbnRlZ2VyPGJyPg0KwqAgwqAgwqAg
 wqAgwqBQb3NpdGl2ZS1JbnRlZ2VyPGJyPg0KwqAgwqAgwqAgwqAgwqAodmFsdWVzPGJyPg0KwqAg
 wqAgwqAgwqAgwqAgKHJlY3Vyc2l2ZS1jb250cmFjdDxicj4NCsKgIMKgIMKgIMKgIMKgIMKgYW5v
 bnltb3VzLWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqAgwqAjOmltcGVyc29uYXRvcik8YnI+
 DQrCoCDCoCDCoCDCoCDCoCAodmVjdG9yb2YgaXZsPyk8YnI+DQrCoCDCoCDCoCDCoCDCoCAoLSZn
 dDsgKHZlY3Rvcm9mIGl2bD8pICh2ZWN0b3JvZiBpdmw/KSkpKTxicj4NCsKgIMKgIMKgIMKgICh2
 ZWN0b3JvZiBpdmw/KTxicj4NCsKgIMKgIMKgIMKgICh2ZWN0b3JvZiBpdmw/KTxicj4NCsKgIMKg
 IMKgIMKgICgtJmd0OyAodmVjdG9yb2YgaXZsPykgKHZlY3Rvcm9mIGl2bD8pKTxicj4NCsKgIMKg
 IMKgIMKgIGFueS9jPGJyPg0KwqAgwqAgwqAgwqAgYW55L2M8YnI+DQrCoCDCoCDCoCDCoCAocmVj
 dXJzaXZlLWNvbnRyYWN0PGJyPg0KwqAgwqAgwqAgwqAgwqBhbm9ueW1vdXMtY29udHJhY3Q8YnI+
 DQrCoCDCoCDCoCDCoCDCoCM6aW1wZXJzb25hdG9yKSk8YnI+DQrCoCDCoGNvbnRyYWN0IGZyb206
 PGJyPg0KwqAgwqAgwqAgwqAoaW50ZXJmYWNlIGZvciBtYWtlLTJkLXBsb3Qtc25pcCk8YnI+DQrC
 oCDCoGNvbnRyYWN0IG9uOiBtYWtlLTJkLXBsb3Qtc25pcDxicj4NCsKgIMKgYmxhbWluZzogJmx0
 O3BrZ3MmZ3Q7L3Bsb3QtZ3VpLWxpYi9wbG90Lzx1PjwvdT5wcml2YXRlL2d1aS9wbG90MmQucmt0
 PGJyPg0KwqAgwqAgKGFzc3VtaW5nIHRoZSBjb250cmFjdCBpcyBjb3JyZWN0KTxicj4NCsKgIMKg
 YXQ6ICZsdDtwa2dzJmd0Oy9wbG90LWd1aS1saWIvcGxvdC88dT48L3U+cHJpdmF0ZS9ndWkvcGxv
 dDJkLnJrdDoxNy4yPGJyPg0KwqAgwqBjb250ZXh0Li4uOjxicj4NCsKgIMKgIC91c3Ivc2hhcmUv
 cmFja2V0LTYuMS4xLjgvPHU+PC91PmNvbGxlY3RzL3JhY2tldC9jb250cmFjdC88dT48L3U+cHJp
 dmF0ZS9ibGFtZS5ya3Q6MTQzOjA6IHJhaXNlLWJsYW1lLWVycm9yMTY8YnI+DQrCoCDCoCAvdXNy
 L3NoYXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5wa2dzL3Bsb3QtZ3VpLWxpYi9wbG90Lzx1Pjwv
 dT5wcml2YXRlL2d1aS9zbmlwLnJrdDoxODY6NDogb24tZXZlbnQgbWV0aG9kIGluIHBsb3Qtc25p
 cCU8YnI+DQrCoCDCoCAvdXNyL3NoYXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5wa2dzL2d1aS1s
 aWIvbXJlZC9wcml2YXRlLzx1PjwvdT53eG1lL3RleHQucmt0OjQ1MDoyOiBvbi1ldmVudCBtZXRo
 b2QgaW4gdGV4dCU8YnI+DQrCoCDCoCAvdXNyL3NoYXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5w
 a2dzL2d1aS1saWIvbXJlZC9wcml2YXRlLzx1PjwvdT53eG1lL2VkaXRvci1jYW52YXMucmt0OjM5
 NDoyOiBvbi1ldmVudCBtZXRob2QgaW4gZWRpdG9yLWNhbnZhcyU8YnI+DQrCoCDCoCAvdXNyL3No
 YXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5jb2xsZWN0cy9yYWNrZXQvcHJpdmF0ZS9tb3JlLTx1
 PjwvdT5zY2hlbWUucmt0OjE0NzoyOiBjYWxsLXdpdGgtYnJlYWstPHU+PC91PnBhcmFtZXRlcml6
 YXRpb248YnI+DQrCoCDCoCAvdXNyL3NoYXJlL3JhY2tldC02LjEuMS44Lzx1PjwvdT5jb2xsZWN0
 cy9yYWNrZXQvcHJpdmF0ZS9tb3JlLTx1PjwvdT5zY2hlbWUucmt0OjI2NDoyOiBjYWxsLXdpdGgt
 ZXhjZXB0aW9uLWhhbmRsZXI8YnI+DQo8YnI+DQpDb21wdXRlciBMYW5ndWFnZTogKCgmcXVvdDtE
 ZXRlcm1pbmUgbGFuZ3VhZ2UgZnJvbSBzb3VyY2UmcXVvdDspICgjKCN0IHRyYWQtd3JpdGUgbWl4
 ZWQtZnJhY3Rpb24tZSAjZiAjdCBkZWJ1ZykgKGRlZmF1bHQpICMoKSAmcXVvdDsjbGFuZyByYWNr
 ZXRcbiZxdW90OyAjdCAjdCAoKHRlc3QpIChtYWluKSkgI3QpKTxicj4NCjxicj4NCjwvYmxvY2tx
 dW90ZT4NCjxicj4NCjwvYmxvY2txdW90ZT48L2Rpdj48YnI+PC9kaXY+DQo=
 --bcaec51867906be13c05112d6fe8--
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: laurent.orseau@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15003: plot snips are broken?
Date: Fri, 13 Mar 2015 16:54:34 -0400

 On 2015-03-13 11:42:18 -0400, Neil Toronto wrote:
 > This looks like it's due to a recent change to the Snip% class type. Asumu?
 
 Looks like it was a problem I introduced in the contracts that TR
 compiles to. I pushed a fix for that.
 
 Unfortunately interacting with the snip is still pretty slow for me
 (even just hovering over it) presumably due to the contract overhead.
 
 Cheers,
 Asumu
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: laurent.orseau@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15003: plot snips are broken?
Date: Fri, 13 Mar 2015 18:40:38 -0400

 On 2015-03-13 16:54:34 -0400, Asumu Takikawa wrote:
 > Unfortunately interacting with the snip is still pretty slow for me
 > (even just hovering over it) presumably due to the contract overhead.
 
 I thought I had an idea of why this happens, but my attempted fix failed
 to have any noticeable effect. (I tried to reduce some contract
 allocation overhead that TR might be causing since DrRacket's GC icon
 spins quite a bit for this). Not sure what to try next.
 
 Cheers,
 Asumu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: Neil Toronto <neil.toronto@gmail.com>,
        Laurent Orseau <laurent.orseau@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15003: plot snips are broken?
Date: Fri, 13 Mar 2015 18:29:21 -0500

 The contract profiler?
 
 Or maybe cheating the expansion and dropping contracts?
 
 Robby
 
 On Fri, Mar 13, 2015 at 5:40 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2015-03-13 16:54:34 -0400, Asumu Takikawa wrote:
 >> Unfortunately interacting with the snip is still pretty slow for me
 >> (even just hovering over it) presumably due to the contract overhead.
 >
 > I thought I had an idea of why this happens, but my attempted fix failed
 > to have any noticeable effect. (I tried to reduce some contract
 > allocation overhead that TR might be causing since DrRacket's GC icon
 > spins quite a bit for this). Not sure what to try next.
 >
 > Cheers,
 > Asumu
