From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Feb  4 18:49:47 2014
Received: from mail-oa0-f44.google.com (mail-oa0-f44.google.com [209.85.219.44])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s14Nni9o019362
	for <bugs@bugs.plt-scheme.org>; Tue, 4 Feb 2014 18:49:44 -0500
Message-Id: <201402042349.s14NngCO019355@winooski.ccs.neu.edu>
Date: Tue, 4 Feb 2014 18:49:42 -0500
From: matias@fortlogic.net
To: bugs@racket-lang.org
Subject: contract induced interface inconsistency

>Number:         14337
>Category:       all
>Synopsis:       contract induced interface inconsistency
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Feb 04 18:52:01 -0500 2014
>Originator:     Matias Eyzaguirre
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.9.3
>Environment:
mac-i386-osx
>Description:
The documentation says that if an interface declares a binding that is already implemented by a super-interface, then an exception is thrown. This is the case when the overriding binding isn't wrapped in a contract.

I can imagine that this behavior might be intentional so that a sub-interface can provide a more specific contract, however the documentation implies that this isn't allowed. I should think that if the behavior is intentional then the documentation should be updated to reflect the reality, and if it is unintentional then Racket's interface module should be updated to reflect the documentation.
>How-To-Repeat:
#lang racket

(define-syntax-rule (demonstrate-error body ...)
  (with-handlers ([exn:fail:object? (Î» (e) e)])
    body ...))

;;; override a with a different contract
(demonstrate-error
 (interface ((interface ()
               (a real?)))
   (a 'a)))

;;; override a with the same contract
(demonstrate-error
 (interface ((interface ()
               (a real?)))
   (a real?)))

;;; override naked a with contracted a
(demonstrate-error
 (interface ((interface ()
               a))
   (a real?)))

;;; override contracted a with naked a
(demonstrate-error
 (interface ((interface ()
               (a real?)))
   a))

;;; override naked a with naked a
(demonstrate-error
 (interface ((interface ()
               a))
   a))
>Fix:
