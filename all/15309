From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jun  9 13:45:00 2016
Received: from mail-it0-f53.google.com (mail-it0-f53.google.com [209.85.214.53])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u59Hivc2004041
	for <bugs@bugs.plt-scheme.org>; Thu, 9 Jun 2016 13:44:58 -0400
Message-Id: <201606091744.u59HijZf004028@winooski.ccs.neu.edu>
Date: Thu, 9 Jun 2016 13:44:45 -0400
From: sznurek@gmail.com
To: bugs@racket-lang.org
Subject: The '(name id pat)' pattern in Redex binds 'pat' in match clause

>Number:         15309
>Category:       all
>Synopsis:       The '(name id pat)' pattern in Redex binds 'pat' in match clause
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Jun 09 13:48:02 -0400 2016
>Last-Modified:  Thu Jun 09 16:24:01 -0400 2016
>Originator:     Łukasz Dąbek
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.5
>Environment:
linux-other
>Description:
Dear maintainers,

I am not sure if this is a bug but documentation is silent about it: should '(name the-name any)' bind only 'the-name' or also 'any' in match clauses? It seems to do the latter and it is quite surprising.
>How-To-Repeat:
> (define-language L)
> (redex-match L ((name a any_1) (name b any_2)) (term (10 20)))
(list (match (list (bind 'a 10) (bind 'any_1 10) (bind 'any_2 20) (bind 'b 20))))
> (redex-match L ((name a any) (name b any)) (term (10 20)))
#f
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: =?UTF-8?B?xYF1a2FzeiBExIViZWs=?= <sznurek@gmail.com>,
        bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15309: The '(name id pat)' pattern in Redex
 binds 'pat' in match clause
Date: Thu, 9 Jun 2016 14:51:46 -0500

 I can agree that it is surprising, but the pattern inside the `name`
 is treated like a pattern outside the name and it seems like a
 dangerous change to change that.
 
 It is an encouraged style to just use `any` and not (name x any) and,
 for that matter, to avoid `name` most of the time, if you can. Are
 there times when you cannot do that?
 
 Robby
 
 On Thu, Jun 9, 2016 at 12:48 PM,  <sznurek@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15309
 >
 > Reported by Łukasz Dąbek for release: 6.5
 >
 > *** Description:
 > Dear maintainers,
 >
 > I am not sure if this is a bug but documentation is silent about it: should '(name the-name any)' bind only 'the-name' or also 'any' in match clauses? It seems to do the latter and it is quite surprising.
 >
 > *** How to repeat:
 >> (define-language L)
 >> (redex-match L ((name a any_1) (name b any_2)) (term (10 20)))
 > (list (match (list (bind 'a 10) (bind 'any_1 10) (bind 'any_2 20) (bind 'b 20))))
 >> (redex-match L ((name a any) (name b any)) (term (10 20)))
 > #f
 >
 > *** Environment:
 > linux-other
 >
 
From: =?UTF-8?B?xYF1a2FzeiBExIViZWs=?= <sznurek@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15309: The '(name id pat)' pattern in Redex
 binds 'pat' in match clause
Date: Thu, 9 Jun 2016 22:07:08 +0200

 --001a113cf426a8f8eb0534ddf836
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Not really, I just wanted to enhance readability of my definitions by using
 the following:
 
 (define-metafunction my-lang
    my-func : natural natural expr -> expr
    ([my-func (name level natural) (name position natural) expr] ...))
 
 instead of naming the variables `natural_level` and `natural_position`. Is
 there any idiomatic way to do this?
 
 Do I understand correctly that the `name` pattern should be used only when
 I want to simultaneously destroy term and have reference to it as a whole?
 Something as Haskell's @ pattern?
 
 Best,
 =C5=81ukasz.
 
 2016-06-09 21:51 GMT+02:00 Robby Findler <robby@eecs.northwestern.edu>:
 
 > I can agree that it is surprising, but the pattern inside the `name`
 > is treated like a pattern outside the name and it seems like a
 > dangerous change to change that.
 >
 > It is an encouraged style to just use `any` and not (name x any) and,
 > for that matter, to avoid `name` most of the time, if you can. Are
 > there times when you cannot do that?
 >
 > Robby
 >
 > On Thu, Jun 9, 2016 at 12:48 PM,  <sznurek@gmail.com> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D15309
 > >
 > > Reported by =C5=81ukasz D=C4=85bek for release: 6.5
 > >
 > > *** Description:
 > > Dear maintainers,
 > >
 > > I am not sure if this is a bug but documentation is silent about it:
 > should '(name the-name any)' bind only 'the-name' or also 'any' in match
 > clauses? It seems to do the latter and it is quite surprising.
 > >
 > > *** How to repeat:
 > >> (define-language L)
 > >> (redex-match L ((name a any_1) (name b any_2)) (term (10 20)))
 > > (list (match (list (bind 'a 10) (bind 'any_1 10) (bind 'any_2 20) (bind
 > 'b 20))))
 > >> (redex-match L ((name a any) (name b any)) (term (10 20)))
 > > #f
 > >
 > > *** Environment:
 > > linux-other
 > >
 >
 
 --001a113cf426a8f8eb0534ddf836
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div><div><div><div><div><div>Not really, I just wanted to=
  enhance readability of my definitions by using the following:<br><br></div=
 >(define-metafunction my-lang<br></div>=C2=A0=C2=A0 my-func : natural natur=
 al expr -&gt; expr<br></div>=C2=A0=C2=A0 ([my-func (name level natural) (na=
 me position natural) expr] ...))<br><br></div>instead of naming the variabl=
 es `natural_level` and `natural_position`. Is there any idiomatic way to do=
  this?<br><br></div>Do I understand correctly that the `name` pattern shoul=
 d be used only when I want to simultaneously destroy term and have referenc=
 e to it as a whole? Something as Haskell&#39;s @ pattern?<br><br></div><div=
 >Best,<br></div><div>=C5=81ukasz.<br></div></div><div class=3D"gmail_extra"=
 ><br><div class=3D"gmail_quote">2016-06-09 21:51 GMT+02:00 Robby Findler <s=
 pan dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=
 =3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span>:<br><blockquote clas=
 s=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;pad=
 ding-left:1ex">I can agree that it is surprising, but the pattern inside th=
 e `name`<br>
 is treated like a pattern outside the name and it seems like a<br>
 dangerous change to change that.<br>
 <br>
 It is an encouraged style to just use `any` and not (name x any) and,<br>
 for that matter, to avoid `name` most of the time, if you can. Are<br>
 there times when you cannot do that?<br>
 <br>
 Robby<br>
 <br>
 On Thu, Jun 9, 2016 at 12:48 PM,=C2=A0 &lt;<a href=3D"mailto:sznurek@gmail.=
 com">sznurek@gmail.com</a>&gt; wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt;=C2=A0 =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D15309" rel=3D"noreferrer" target=3D"_blank">http://bugs.racket-lang=
 .org/query/?cmd=3Dview&amp;pr=3D15309</a><br>
 &gt;<br>
 &gt; Reported by =C5=81ukasz D=C4=85bek for release: 6.5<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; Dear maintainers,<br>
 &gt;<br>
 &gt; I am not sure if this is a bug but documentation is silent about it: s=
 hould &#39;(name the-name any)&#39; bind only &#39;the-name&#39; or also &#=
 39;any&#39; in match clauses? It seems to do the latter and it is quite sur=
 prising.<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt;&gt; (define-language L)<br>
 &gt;&gt; (redex-match L ((name a any_1) (name b any_2)) (term (10 20)))<br>
 &gt; (list (match (list (bind &#39;a 10) (bind &#39;any_1 10) (bind &#39;an=
 y_2 20) (bind &#39;b 20))))<br>
 &gt;&gt; (redex-match L ((name a any) (name b any)) (term (10 20)))<br>
 &gt; #f<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; linux-other<br>
 &gt;<br>
 </blockquote></div><br></div>
 
 --001a113cf426a8f8eb0534ddf836--
From: Robby Findler <robby@eecs.northwestern.edu>
To: =?UTF-8?B?xYF1a2FzeiBExIViZWs=?= <sznurek@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15309: The '(name id pat)' pattern in Redex
 binds 'pat' in match clause
Date: Thu, 9 Jun 2016 15:26:51 -0500

 On Thu, Jun 9, 2016 at 3:07 PM, Łukasz Dąbek <sznurek@gmail.com> wrote:
 > Not really, I just wanted to enhance readability of my definitions by using
 > the following:
 >
 > (define-metafunction my-lang
 >    my-func : natural natural expr -> expr
 >    ([my-func (name level natural) (name position natural) expr] ...))
 >
 > instead of naming the variables `natural_level` and `natural_position`. Is
 > there any idiomatic way to do this?
 
 That's the idiomatic way. I've often thought that the standard math
 notation of putting the important part in the subscript is bad and
 strange, but Redex's design is to try to follow the "standard"
 conventions as much as it can. Sorry. :(
 
 > Do I understand correctly that the `name` pattern should be used only when I
 > want to simultaneously destroy term and have reference to it as a whole?
 > Something as Haskell's @ pattern?
 
 Right.
 
 > Best,
 > Łukasz.
 >
 > 2016-06-09 21:51 GMT+02:00 Robby Findler <robby@eecs.northwestern.edu>:
 >>
 >> I can agree that it is surprising, but the pattern inside the `name`
 >> is treated like a pattern outside the name and it seems like a
 >> dangerous change to change that.
 >>
 >> It is an encouraged style to just use `any` and not (name x any) and,
 >> for that matter, to avoid `name` most of the time, if you can. Are
 >> there times when you cannot do that?
 >>
 >> Robby
 >>
 >> On Thu, Jun 9, 2016 at 12:48 PM,  <sznurek@gmail.com> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=15309
 >> >
 >> > Reported by Łukasz Dąbek for release: 6.5
 >> >
 >> > *** Description:
 >> > Dear maintainers,
 >> >
 >> > I am not sure if this is a bug but documentation is silent about it:
 >> > should '(name the-name any)' bind only 'the-name' or also 'any' in match
 >> > clauses? It seems to do the latter and it is quite surprising.
 >> >
 >> > *** How to repeat:
 >> >> (define-language L)
 >> >> (redex-match L ((name a any_1) (name b any_2)) (term (10 20)))
 >> > (list (match (list (bind 'a 10) (bind 'any_1 10) (bind 'any_2 20) (bind
 >> > 'b 20))))
 >> >> (redex-match L ((name a any) (name b any)) (term (10 20)))
 >> > #f
 >> >
 >> > *** Environment:
 >> > linux-other
 >> >
 >
 >
 
