From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Dec  8 04:07:45 2014
Received: from mail-ig0-f170.google.com (mail-ig0-f170.google.com [209.85.213.170])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id sB897axi004710
	for <bugs@bugs.plt-scheme.org>; Mon, 8 Dec 2014 04:07:37 -0500
Message-Id: <201412080907.sB897XOC004703@winooski.ccs.neu.edu>
Date: Mon, 8 Dec 2014 04:07:33 -0500
From: asbr@ifi.uio.no
To: bugs@racket-lang.org
Subject: Racket crashes with memory loads over 1 GB

>Number:         14872
>Category:       all
>Synopsis:       Racket crashes with memory loads over 1 GB
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Dec 08 04:08:01 -0500 2014
>Last-Modified:  Mon Dec 08 07:20:01 -0500 2014
>Originator:     Asbjørn Brændeland
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1
>Environment:
windows "Windows NT 6.2 (Build 9200)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 301305528
raco pkg (show):
Installation-wide:
 Package              Checksum                                    Source
 main-distribution    84a366a8c2b2908babe6c2811b0ada036bb159df    (catalog main-distribution)
 racket-lib           436f0928598fc1a8abf27422e8e6588bef45f652    (catalog racket-lib)
 [187 auto-installed packages not shown]
User-specific for installation "6.1.1":
 [none]



Collections:
("C:\\Users\\ospyearn\\AppData\\Roaming\\Racket\\6.1.1\\collects"
 (non-existent-path))
("C:\\Program Files (x86)\\Racket\\collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
On my computer (Intel Core i7, 8 GB ram, Windows 8.1) the numbers returned by (current-memory-use) in the program below, seem to indicate that Racket cannot handle a memory load of much more than 1 gigabyte, even if the memory limit is set higher via the Racket menu. Racket handles a list of integers that expands to a length of 58 million, without problems, and crashes invariably, if the list length is set to 59 million or more. If the list length is set to something in between, Racket may occasionally compute and print the result and then become unresponsive. Once in a blue moon Racket aborts the program gracefully and prints an errorr message.
>How-To-Repeat:
; Memory limit 6400 MB
(define mega (* 1024 1024))  ; to divide memory usage for readability
(define big-length 58000000) ; INCREASE TO 59 MILLION TO INDUCE CRASH
(define (make-big-list n L)  ; build a list of n integers and then return the current memory usage.
  (if (= n big-length) (current-memory-use) (make-big-list (+ n 1) (cons n L))))
(collect-garbage)
(quotient (current-memory-use) mega)
(quotient (make-big-list 1 '()) mega)
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: asbr@ifi.uio.no, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14872: Racket crashes with memory loads over 1 GB
Date: Mon, 8 Dec 2014 05:19:18 -0700

 The 32-bit version of Racket on Windows is limited to something like
 1GB, due to only 2GB being available to a 32-bit application (from the
 OS) plus the overhead of GC.
 
 The 64-bit variant of Racket for Windows can use much more memory.
 
 At Mon, 8 Dec 2014 04:08:02 -0500, asbr@ifi.uio.no wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14872
 > 
 > Reported by AsbjÃ¸rn BrÃ¦ndeland for release: 6.1.1
 > 
 > *** Description:
 > On my computer (Intel Core i7, 8 GB ram, Windows 8.1) the numbers returned by 
 > (current-memory-use) in the program below, seem to indicate that Racket cannot 
 > handle a memory load of much more than 1 gigabyte, even if the memory limit is 
 > set higher via the Racket menu. Racket handles a list of integers that expands 
 > to a length of 58 million, without problems, and crashes invariably, if the 
 > list length is set to 59 million or more. If the list length is set to 
 > something in between, Racket may occasionally compute and print the result and 
 > then become unresponsive. Once in a blue moon Racket aborts the program 
 > gracefully and prints an errorr message.
 > 
 > *** How to repeat:
 > ; Memory limit 6400 MB
 > (define mega (* 1024 1024))  ; to divide memory usage for readability
 > (define big-length 58000000) ; INCREASE TO 59 MILLION TO INDUCE CRASH
 > (define (make-big-list n L)  ; build a list of n integers and then return the 
 > current memory usage.
 >   (if (= n big-length) (current-memory-use) (make-big-list (+ n 1) (cons n L))))
 > (collect-garbage)
 > (quotient (current-memory-use) mega)
 > (quotient (make-big-list 1 '()) mega)
 > 
 > *** Environment:
 > windows "Windows NT 6.2 (Build 9200)" (win32\i386\3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 301305528
 > raco pkg (show):
 > Installation-wide:
 >  Package              Checksum                                    Source
 >  main-distribution    84a366a8c2b2908babe6c2811b0ada036bb159df    (catalog 
 > main-distribution)
 >  racket-lib           436f0928598fc1a8abf27422e8e6588bef45f652    (catalog 
 > racket-lib)
 >  [187 auto-installed packages not shown]
 > User-specific for installation "6.1.1":
 >  [none]
 > 
 > 
 > 
 > Collections:
 > ("C:\\Users\\ospyearn\\AppData\\Roaming\\Racket\\6.1.1\\collects"
 >  (non-existent-path))
 > ("C:\\Program Files (x86)\\Racket\\collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" 
 > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" 
 > "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 > 
 > Recent Internal Errors: 
 > Computer Language: (("Determine language from source") (#(#t print 
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) 
 > (main)) #t))
 
