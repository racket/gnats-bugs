From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Jun  1 15:16:21 2013
Received: from mail-ob0-f169.google.com (mail-ob0-f169.google.com [209.85.214.169])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r51JGIIF021038
	for <bugs@bugs.plt-scheme.org>; Sat, 1 Jun 2013 15:16:18 -0400
Message-Id: <201306011916.r51JGGRX021032@champlain.ccs.neu.edu>
Date: Sat, 1 Jun 2013 15:16:16 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: compiler/zo-parse cannot parse a compiled module expression

>Number:         13808
>Category:       all
>Synopsis:       compiler/zo-parse cannot parse a compiled module expression
>Class:          not-a-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Jun 01 15:20:01 -0400 2013
>Closed-Date:    Fri Mar 27 02:15:53 -0400 2015
>Last-Modified:  Fri Mar 27 02:15:53 -0400 2015
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
I wanted to compile a module and then decompile it, but the only way to get a compilation-top? from a compiled-module-expression? The only way I could figure out to do this was to write it out to binary form and then read it back in. It seems like there should be an easier way to do this.
>How-To-Repeat:
#lang racket

(require compiler/zo-parse compiler/decompile)

(decompile
 (with-input-from-bytes (with-output-to-bytes (lambda () (display (compile
                                                                   #'(module foo racket/base (let () (vector? (vector 2 3)) 'foobar))))))
  zo-parse))
>Fix:
>Audit-Trail:
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13808: compiler/zo-parse cannot parse a compiled
 module expression
Date: Sun, 2 Jun 2013 07:28:16 -0600

 The zo-parser is for parsing the zo format, which is the binary format
 used to store compiled things externally to Racket. The zo format is
 not the same as the internal representation of the compiled thing.
 (For example, the C code has it's own implementation of zo-parse that
 doesn't produce structures like what our zo-parse uses.)
 
 You want a function that would be typed like internal-compiled-form ->
 zo-parse-structures. I don't think it is reasonable to maintain such a
 function, because of how complicated it would be. Feel free to turn
 your example expression sequence into a function provided by zo-parse,
 though.
 
 Jay
 
 
 On Sat, Jun 1, 2013 at 1:20 PM,  <eric.n.dobson@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13808
 >
 > Reported by Eric Dobson for release: 5.3.2.3
 >
 > *** Description:
 > I wanted to compile a module and then decompile it, but the only way to get a compilation-top? from a compiled-module-expression? The only way I could figure out to do this was to write it out to binary form and then read it back in. It seems like there should be an easier way to do this.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (require compiler/zo-parse compiler/decompile)
 >
 > (decompile
 >  (with-input-from-bytes (with-output-to-bytes (lambda () (display (compile
 >                                                                    #'(module foo racket/base (let () (vector? (vector 2 3)) 'foobar))))))
 >   zo-parse))
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
 

Class changed from "sw-bug" to "not-a-bug" by endobson at Fri, 27 Mar 2015 02:15:53 -0400
Reason>>> .

State changed from "open" to "closed" by endobson at Fri, 27 Mar 2015 02:15:53 -0400
Reason>>> .

