From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu May 21 16:24:43 2009
Received: from qw-out-2122.google.com (qw-out-2122.google.com [74.125.92.25])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n4LKOXuo024428
	for <bugs@bugs.plt-scheme.org>; Thu, 21 May 2009 16:24:33 -0400
Message-Id: <200905212024.n4LKOWbw024422@champlain.ccs.neu.edu>
Date: Thu, 21 May 2009 16:24:32 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: sequences, feature request or bug report?

>Number:         10254
>Category:       all
>Synopsis:       sequences, feature request or bug report?
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu May 21 16:28:01 -0400 2009
>Closed-Date:    Sat Dec 03 11:50:48 -0500 2011
>Last-Modified:  Mon Feb 18 23:44:55 -0500 2013
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.0.2-svn19may2009
>Environment:
macosx "Darwin antarctica.local 8.11.1 Darwin Kernel Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 168689372

Collections:
(("/Users/matthias/0Unison/collects/" ".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "short" "testing" "tll-collects" "utils" "web") ("/Users/matthias/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "2htdp" "afm" "algol60" "at-exp" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "little-helper" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" !
 "scribblings" "scriblib" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "test-suite" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
I thought I'd quickly write a sequenceof contract

(define (sequenceof p)
  (let* ([ctc (coerce-flat-contract 'sequenceof p)]
         [pred (flat-contract-predicate ctc)])
    (build-flat-contract
     (build-compound-type-name 'sequenceof ctc)
     (Î» (v)
       (and (sequence? v)
            (for/and ((x v)) x))))))

but oh no, sequences are potentially infinite (cyclic)
things. So yes, they are mutable. But no, you don't 
want to check every one of its elements. 

1. Are sequences truly infinite or cyclic only? 

2. If they are cyclic, can we get a sequence->mlist function 
please? Then the above can be implemented with some care via
a list traversal. 

3. If they are truly infinite (a stream of all primes), 
we are looking at something completely novel in our contract
world: 

 a higher-order contract for a MUTABLE higher-order objects

because sequences are mutable. 

Somewhat stunned -- Matthias
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Carl Eastlund <cce@plt-scheme.org>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10254: sequences, feature request or bug report?
Date: Thu, 21 May 2009 16:35:11 -0400

 I'm pretty sure the in-naturals sequence is not cyclic.
 
 --Carl
 
 On Thu, May 21, 2009 at 4:28 PM,  <matthias@ccs.neu.edu> wrote:
 > I thought I'd quickly write a sequenceof contract
 >
 > (define (sequenceof p)
 > =A0(let* ([ctc (coerce-flat-contract 'sequenceof p)]
 > =A0 =A0 =A0 =A0 [pred (flat-contract-predicate ctc)])
 > =A0 =A0(build-flat-contract
 > =A0 =A0 (build-compound-type-name 'sequenceof ctc)
 > =A0 =A0 (=EB (v)
 > =A0 =A0 =A0 (and (sequence? v)
 > =A0 =A0 =A0 =A0 =A0 =A0(for/and ((x v)) x))))))
 >
 > but oh no, sequences are potentially infinite (cyclic)
 > things. So yes, they are mutable. But no, you don't
 > want to check every one of its elements.
 >
 > 1. Are sequences truly infinite or cyclic only?
 >
 > 2. If they are cyclic, can we get a sequence->mlist function
 > please? Then the above can be implemented with some care via
 > a list traversal.
 >
 > 3. If they are truly infinite (a stream of all primes),
 > we are looking at something completely novel in our contract
 > world:
 >
 > =A0a higher-order contract for a MUTABLE higher-order objects
 >
 > because sequences are mutable.
 >
 > Somewhat stunned -- Matthias
From: Eli Barzilay <eli@barzilay.org>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10254: sequences, feature request or bug report?
Date: Thu, 21 May 2009 21:19:44 -0400

 On May 21, matthias@ccs.neu.edu wrote:
 > I thought I'd quickly write a sequenceof contract
 >=20
 > (define (sequenceof p)
 >   (let* ([ctc (coerce-flat-contract 'sequenceof p)]
 >          [pred (flat-contract-predicate ctc)])
 >     (build-flat-contract
 >      (build-compound-type-name 'sequenceof ctc)
 >      (=CE=BB (v)
 >        (and (sequence=3F v)
 >             (for/and ((x v)) x))))))
 
 I think that you'd have to make it lazy (wrap the sequence with the
 guard).
 
 
 > 2. If they are cyclic, can we get a sequence->mlist function=20
 > please=3F Then the above can be implemented with some care via
 > a list traversal.
 
 I think that having some `sequence->list' will eventually happen (IMO
 it much more useful than some *cough*make-list*cough* functions).  But
 not mlists, since even if the sequence is cyclic you can't tell if it
 is.  (BTW, it's possible to have cyclic lists too...)
 
 
 > 3. If they are truly infinite (a stream of all primes),=20
 > we are looking at something completely novel in our contract
 > world:=20
 >=20
 >  a higher-order contract for a MUTABLE higher-order objects
 >=20
 > because sequences are mutable.=20
 
 But you're not contracting the state, you're contracting the resulting
 values, right=3F  In that sense it doesn't seem different than some
 (-> integer=3F) thing, for a non-trivial thunk.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                   http://www.barzilay.org/                 Maze is Life=
 !
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10254: sequences, feature request or bug report?
Date: Fri, 22 May 2009 09:26:17 -0400

 On May 21, 2009, at 9:19 PM, Eli Barzilay wrote:
 
 > On May 21, matthias@ccs.neu.edu wrote:
 >> I thought I'd quickly write a sequenceof contract
 >>
 >> (define (sequenceof p)
 >>   (let* ([ctc (coerce-flat-contract 'sequenceof p)]
 >>          [pred (flat-contract-predicate ctc)])
 >>     (build-flat-contract
 >>      (build-compound-type-name 'sequenceof ctc)
 >>      (=CE=BB (v)
 >>        (and (sequence? v)
 >>             (for/and ((x v)) x))))))
 >
 > I think that you'd have to make it lazy (wrap the sequence with the
 > guard).
 
 
 That's a standard solution for HO objects. Question is whether the =20
 language of sequences is expressive enough to allow it as is.
 
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10254: sequences, feature request or bug report?
Date: Fri, 22 May 2009 13:24:13 -0400

 On May 22, Matthias Felleisen wrote:
 > 
 > That's a standard solution for HO objects. Question is whether the
 > language of sequences is expressive enough to allow it as is.
 
 You mean whether it's possible to do that wrapping, right?  It is.
 (But the interface is inconvenient...)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

State changed from "open" to "closed" by samth at Sat, 03 Dec 2011 11:50:48 -0500
Reason>>> not a bug, plus sequence/c now exists


Responsible changed from "nobody" to "samth" by eli at Mon, 18 Feb 2013 23:44:55 -0500
Reason>>> samth closed

