From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Apr 14 21:32:07 2017
Received: from mail-it0-f41.google.com (mail-it0-f41.google.com [209.85.214.41])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id v3F1W2rV013366
	for <bugs@bugs.plt-scheme.org>; Fri, 14 Apr 2017 21:32:02 -0400
Message-Id: <201704150131.v3F1Vxhs013354@winooski.ccs.neu.edu>
Date: Fri, 14 Apr 2017 21:31:59 -0400
From: riglesia@stanford.edu
To: bugs@racket-lang.org
Subject: SICP/Scheme Bug Related to Nested Procedure Definitions

>Number:         15418
>Category:       all
>Synopsis:       SICP/Scheme Bug Related to Nested Procedure Definitions
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Apr 14 21:36:01 -0400 2017
>Last-Modified:  Fri Apr 14 22:40:01 -0400 2017
>Originator:     Ricardo Iglesias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.8
>Environment:
macosx "Darwin rescomp-16-334310.stanford.edu 16.5.0 Darwin Kernel Version 16.5.0: Fri Mar  3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 409879716
raco pkg (show):
Installation-wide:
 Package            Checksum             Source
 main-distribution  a1f1a5d5ec746afb...  catalog...tribution
 racket-lib         da688040bffb69e8...  catalog racket-lib
 [189 auto-installed packages not shown]
User-specific for installation "6.8":
 Package  Checksum                Source
 sicp     12f53f84270ded143c8...  catalog...cp-lang/sicp



Collections:
("/Users/ricardoiglesias/Library/Racket/6.8/collects"
 (non-existent-path))
("/Applications/Racket v6.8/collects"
 ("acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
I am currently going through MIT's Structure and Interpretation of Computer Programs, SICP, book andin the implementation of one of the exercises, I seem to be having an error with the use of nested functions. 

The structure of the program is as follows
(define (helper_function ...) ...)
(define (main_function ...)
   (define (procedure_1))
   (define (procedure_2))
   ( * (helper_function procedure1) (helper_function procedure2)))

When I run this code (with #lang sicp), I get the following error: num-prod: undefined; cannot use before initialization. Running the same code with #lang scheme has the code run as expected.
>How-To-Repeat:
Run the following code using DrRacket:

=======================================

#lang sicp

(define (product term a next b)
  (if (> a b) 1
      (* (term a) (product term (next a) next b))))

(define (inc x) (+ x 1))

(define (pi-approx n)
  (define (inc x) (+ x 1))

  (define (square x) (* x x))

  (define (num-prod ind) (* (* 2 ind) (* 2 (+ ind 1)))) ; calculates the product in the numerator for a certain term
  (define (denom-prod ind) (square (+ (* ind 2 ) 1))) ;Denominator product at index ind

  ;;When I comment these two lines out, the code runs fine
  (define num (product num-prod 1 inc n))
  (define denom (product denom-prod 1 inc n)) 

  (/ (* 4 (/ num denom)) 1.0) );;Resulting value

(pi-approx 500)

================================
Output with #lang sicp: Error mentioned above
Output with #lang scheme: 3.14316...
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: riglesia@stanford.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15418: SICP/Scheme Bug Related to Nested Procedure Definitions
Date: Fri, 14 Apr 2017 20:50:57 -0600

 Hi Ricardo,
 
 The `sicp` language is based on R5RS, and that's how R5RS works.
 See
 
  http://docs.racket-lang.org/r5rs/r5rs-std/r5rs-Z-H-8.html#%_sec_5.2.2
 
 and specifically the part that says
 
  Just as for the equivalent letrec expression, it must be possible to
  evaluate each <expression> of every internal definition in a <body>
  without assigning or referring to the value of any <variable> being
  defined.
 
 Your example works with `#lang scheme` because `#lang scheme` is
 essentially `#lang racket`, and Racket has different rules for internal
 definitions. The Racket (and R6RS) rules make internal definitions more
 like top-level definitions, where an expression can reference a
 definition any time after the definition.
 
 Matthew
 
 At Fri, 14 Apr 2017 21:36:02 -0400, riglesia@stanford.edu wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15418
 > 
 > Reported by Ricardo Iglesias for release: 6.8
 > 
 > *** Description:
 > I am currently going through MIT's Structure and Interpretation of Computer 
 > Programs, SICP, book andin the implementation of one of the exercises, I seem 
 > to be having an error with the use of nested functions. 
 > 
 > The structure of the program is as follows
 > (define (helper_function ...) ...)
 > (define (main_function ...)
 >    (define (procedure_1))
 >    (define (procedure_2))
 >    ( * (helper_function procedure1) (helper_function procedure2)))
 > 
 > When I run this code (with #lang sicp), I get the following error: num-prod: 
 > undefined; cannot use before initialization. Running the same code with #lang 
 > scheme has the code run as expected.
 > 
 > *** How to repeat:
 > Run the following code using DrRacket:
 > 
 > =======================================
 > 
 > #lang sicp
 > 
 > (define (product term a next b)
 >   (if (> a b) 1
 >       (* (term a) (product term (next a) next b))))
 > 
 > (define (inc x) (+ x 1))
 > 
 > (define (pi-approx n)
 >   (define (inc x) (+ x 1))
 > 
 >   (define (square x) (* x x))
 > 
 >   (define (num-prod ind) (* (* 2 ind) (* 2 (+ ind 1)))) ; calculates the 
 > product in the numerator for a certain term
 >   (define (denom-prod ind) (square (+ (* ind 2 ) 1))) ;Denominator product at 
 > index ind
 > 
 >   ;;When I comment these two lines out, the code runs fine
 >   (define num (product num-prod 1 inc n))
 >   (define denom (product denom-prod 1 inc n)) 
 > 
 >   (/ (* 4 (/ num denom)) 1.0) );;Resulting value
 > 
 > (pi-approx 500)
 > 
 > ================================
 > Output with #lang sicp: Error mentioned above
 > Output with #lang scheme: 3.14316...
 > 
 > *** Environment:
 > macosx "Darwin rescomp-16-334310.stanford.edu 16.5.0 Darwin Kernel Version 
 > 16.5.0: Fri Mar  3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64 
 > x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 409879716
 > raco pkg (show):
 > Installation-wide:
 >  Package            Checksum             Source
 >  main-distribution  a1f1a5d5ec746afb...  catalog...tribution
 >  racket-lib         da688040bffb69e8...  catalog racket-lib
 >  [189 auto-installed packages not shown]
 > User-specific for installation "6.8":
 >  Package  Checksum                Source
 >  sicp     12f53f84270ded143c8...  catalog...cp-lang/sicp
 > 
 > 
 > 
 > Collections:
 > ("/Users/ricardoiglesias/Library/Racket/6.8/collects"
 >  (non-existent-path))
 > ("/Applications/Racket v6.8/collects"
 >  ("acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" 
 > "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" 
 > "realm" "s-exp" "setup" "syntax" "version" "xml"))
 > 
 > Recent Internal Errors: 
 > Computer Language: (("Determine language from source") (#(#t print 
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) 
 > (main)) #t))
