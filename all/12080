From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jul 29 12:26:00 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p6TGPuxv009005
	for <bugs@bugs.plt-scheme.org>; Fri, 29 Jul 2011 12:25:56 -0400
Message-Id: <201107291625.p6TGPpGd009000@champlain.ccs.neu.edu>
Date: Fri, 29 Jul 2011 12:25:51 -0400
From: sbloch@adelphi.edu
To: bugs@racket-lang.org
Subject: searching in split windows

>Number:         12080
>Category:       all
>Synopsis:       searching in split windows
>Class:          sw-bug
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jul 29 12:28:01 -0400 2011
>Closed-Date:    Sat Aug 06 00:35:29 -0400 2011
>Last-Modified:  Sat Aug 06 00:36:01 -0400 2011
>Originator:     Stephen Bloch
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.2.3--2011-07-24(764f356/g)
>Environment:
macosx "Darwin Winchester.local 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 179143544

Collections:
("/Users/bloch/Library/Racket/5.1.2.3/collects"
 (non-existent-path))
("/Users/bloch/programming/teachpacks/racket/plt/collects"
 (".DS_Store" ".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed!
 -scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student with lambda") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
When you have more than one pane in the DrRacket window (e.g. with "View->Split"), and you use "Find", "Find Next", etc, it scrolls the BOTTOM pane to wherever the thing was found.
I think it should scroll whichever pane had the insertion point most recently (before invoking "Find Next", "Find Previous", "Replace", etc. or before clicking in the find/replace area).
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: sbloch@adelphi.edu, bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/12080: searching in split windows
Date: Fri, 5 Aug 2011 19:38:43 -0700

 On Fri, Jul 29, 2011 at 9:28 AM,  <sbloch@adelphi.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12080
 >
 > Reported by Stephen Bloch for release: 5.1.2.3--2011-07-24(764f356/g)
 >
 > *** Description:
 > When you have more than one pane in the DrRacket window (e.g. with "View->Split"), and you use "Find", "Find Next", etc, it scrolls the BOTTOM pane to wherever the thing was found.
 > I think it should scroll whichever pane had the insertion point most recently (before invoking "Find Next", "Find Previous", "Replace", etc. or before clicking in the find/replace area).
 >
 
 I'm not sure about this, but it seems like this might be something to
 be fixed at the editor<%>/text% level, instead of at the drracket
 level.
 
 I can pretty easily change drracket so that it does what the
 "active-primary" button is doing in the code below. It currently does
 what the other button does.
 
 I know we've talked about this before; what is the right level to be
 fixing this?
 
 Thanks,
 Robby
 
 #lang racket/gui
 (define f (new frame% [label ""] [width 400] [height 600]))
 (define t (new text%))
 (define ec1 (new editor-canvas% [parent f] [editor t]))
 (define ec2 (new editor-canvas% [parent f] [editor t]))
 (define b (new button% [label "active-primary"] [parent f]
                [callback
                 (λ _
                   (define sp (send t get-start-position))
                   (send (or (send t get-active-canvas) ec1)
 call-as-primary-owner
                         (λ ()
                           (send t set-position
                                 (- (send t last-position) sp)
                                 (- (send t last-position) sp)))))]))
 (define b2 (new button% [label "other"] [parent f]
                 [callback
                  (λ _
                    (define sp (send t get-start-position))
                    (send t set-position
                          (- (send t last-position) sp)
                          (- (send t last-position) sp)))]))
 (for ([x (in-range 0 100)])
   (send t insert (format "~a\n" x)
         (send t last-position)
         (send t last-position)))
 (send f show #t)
 
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Sat, 06 Aug 2011 00:35:29 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/fc50be1caa
State changed from "open" to "closed" by robby@racket-lang.org at Sat, 06 Aug 2011 00:35:29 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/fc50be1caa
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: sbloch@adelphi.edu, bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/12080: searching in split windows
Date: Fri, 5 Aug 2011 21:35:30 -0700

 Eh. I just went ahead and used call-as-primary-owner to just deal with
 this one case explicitly (searching). Maybe we don't really want to
 change how set-position behaves, I dunno.
 
 Robby
 
 On Fri, Aug 5, 2011 at 7:38 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Fri, Jul 29, 2011 at 9:28 AM,  <sbloch@adelphi.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12080
 >>
 >> Reported by Stephen Bloch for release: 5.1.2.3--2011-07-24(764f356/g)
 >>
 >> *** Description:
 >> When you have more than one pane in the DrRacket window (e.g. with "View->Split"), and you use "Find", "Find Next", etc, it scrolls the BOTTOM pane to wherever the thing was found.
 >> I think it should scroll whichever pane had the insertion point most recently (before invoking "Find Next", "Find Previous", "Replace", etc. or before clicking in the find/replace area).
 >>
 >
 > I'm not sure about this, but it seems like this might be something to
 > be fixed at the editor<%>/text% level, instead of at the drracket
 > level.
 >
 > I can pretty easily change drracket so that it does what the
 > "active-primary" button is doing in the code below. It currently does
 > what the other button does.
 >
 > I know we've talked about this before; what is the right level to be
 > fixing this?
 >
 > Thanks,
 > Robby
 >
 > #lang racket/gui
 > (define f (new frame% [label ""] [width 400] [height 600]))
 > (define t (new text%))
 > (define ec1 (new editor-canvas% [parent f] [editor t]))
 > (define ec2 (new editor-canvas% [parent f] [editor t]))
 > (define b (new button% [label "active-primary"] [parent f]
 >               [callback
 >                (λ _
 >                  (define sp (send t get-start-position))
 >                  (send (or (send t get-active-canvas) ec1)
 > call-as-primary-owner
 >                        (λ ()
 >                          (send t set-position
 >                                (- (send t last-position) sp)
 >                                (- (send t last-position) sp)))))]))
 > (define b2 (new button% [label "other"] [parent f]
 >                [callback
 >                 (λ _
 >                   (define sp (send t get-start-position))
 >                   (send t set-position
 >                         (- (send t last-position) sp)
 >                         (- (send t last-position) sp)))]))
 > (for ([x (in-range 0 100)])
 >  (send t insert (format "~a\n" x)
 >        (send t last-position)
 >        (send t last-position)))
 > (send f show #t)
 >
 
