From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jan 16 21:17:58 2015
Received: from mail-ie0-f178.google.com (mail-ie0-f178.google.com [209.85.223.178])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t0H2HsUG028006
	for <bugs@bugs.plt-scheme.org>; Fri, 16 Jan 2015 21:17:55 -0500
Message-Id: <201501170217.t0H2HohJ027996@winooski.ccs.neu.edu>
Date: Fri, 16 Jan 2015 21:17:50 -0500
From: 1531322066@qq.com
To: bugs@racket-lang.org
Subject: memf function is wrong

>Number:         14937
>Category:       all
>Synopsis:       memf function is wrong
>Class:          sw-bug
>Responsible:    matthias
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jan 16 21:20:01 -0500 2015
>Closed-Date:    Fri Jan 16 21:48:27 -0500 2015
>Last-Modified:  Fri Jan 16 22:00:01 -0500 2015
>Originator:     Kevin Huang
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1
>Environment:
windows-xp
>Description:
(memf (lambda (arg)
          (> arg 9))
        '(7 8 9 10 11 9))

=> '(10 11 9)  ;; wrong! What I want is => '(10 11) 

The good is recursive version:
(define memberf
  (lambda (pred ls)
    (cond
      [(null? ls) '()]
      [(pred (car ls)) (cons (car ls) (memberf pred (cdr ls)))]
      [else (memberf pred (cdr ls))])))
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: 1531322066@qq.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14937: memf function is wrong
Date: Fri, 16 Jan 2015 21:47:46 -0500

 The docs say: 
 
 "Like member, but finds an element using the predicate proc; an element is found whenproc applied to the element returns a true value." 
 
 The docs for member say: 
 
 "Locates the _____first_____ element of lst that is equal? to v. If such an element exists, the tail oflst starting with that element is returned. Otherwise, the result is #f."
 
 Notice the emphasis on first. So memf is correct as documented. 
 
 
 
 
 
 On Jan 16, 2015, at 9:20 PM, 1531322066@qq.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=14937
 > 
 > Reported by Kevin Huang for release: 6.1
 > 
 > *** Description:
 > (memf (lambda (arg)
 >          (> arg 9))
 >        '(7 8 9 10 11 9))
 > 
 > => '(10 11 9)  ;; wrong! What I want is => '(10 11) 
 > 
 > The good is recursive version:
 > (define memberf
 >  (lambda (pred ls)
 >    (cond
 >      [(null? ls) '()]
 >      [(pred (car ls)) (cons (car ls) (memberf pred (cdr ls)))]
 >      [else (memberf pred (cdr ls))])))
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > windows-xp
 > 
 
 

Responsible changed from "nobody" to "matthias" by matthias at Fri, 16 Jan 2015 21:48:27 -0500
Reason>>> .

State changed from "open" to "closed" by matthias at Fri, 16 Jan 2015 21:48:27 -0500
Reason>>> .

From: David Van Horn <dvanhorn@cs.umd.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>, 1531322066@qq.com,
        bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14937: memf function is wrong
Date: Fri, 16 Jan 2015 21:58:41 -0500

 By the way, the desired function here is called "filter".
 
 David
 
 
 On 1/16/15 9:47 PM, Matthias Felleisen wrote:
 > 
 > 
 > The docs say: 
 > 
 > "Like member, but finds an element using the predicate proc; an element is found whenproc applied to the element returns a true value." 
 > 
 > The docs for member say: 
 > 
 > "Locates the _____first_____ element of lst that is equal? to v. If such an element exists, the tail oflst starting with that element is returned. Otherwise, the result is #f."
 > 
 > Notice the emphasis on first. So memf is correct as documented. 
 > 
 > 
 > 
 > 
 > 
 > On Jan 16, 2015, at 9:20 PM, 1531322066@qq.com wrote:
 > 
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=14937
 >>
 >> Reported by Kevin Huang for release: 6.1
 >>
 >> *** Description:
 >> (memf (lambda (arg)
 >>          (> arg 9))
 >>        '(7 8 9 10 11 9))
 >>
 >> => '(10 11 9)  ;; wrong! What I want is => '(10 11) 
 >>
 >> The good is recursive version:
 >> (define memberf
 >>  (lambda (pred ls)
 >>    (cond
 >>      [(null? ls) '()]
 >>      [(pred (car ls)) (cons (car ls) (memberf pred (cdr ls)))]
 >>      [else (memberf pred (cdr ls))])))
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> windows-xp
 >>
 
