From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jul 11 22:27:44 2010
Received: from mail-gw0-f44.google.com (mail-gw0-f44.google.com [74.125.83.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o6C2Rg9c029064
	for <bugs@bugs.plt-scheme.org>; Sun, 11 Jul 2010 22:27:42 -0400
Message-Id: <201007120227.o6C2ReM6029057@champlain.ccs.neu.edu>
Date: Sun, 11 Jul 2010 22:27:40 -0400
From: sk@cs.brown.edu
To: bugs@racket-lang.org
Subject: : in untyped code

>Number:         11028
>Category:       all
>Synopsis:       : in untyped code
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jul 11 22:28:02 -0400 2010
>Closed-Date:    Thu Aug 19 11:31:14 -0400 2010
>Last-Modified:  Thu Aug 19 11:31:14 -0400 2010
>Originator:     Shriram Krishnamurthi
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0
>Environment:
windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 141438480

Collections:
(("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0\\collects" non-existent-path) ("C:\\Program Files (x86)\\Racket\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" !
 "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
Can we make (: ...) work in regular Racket (and *SL)?  How about if it
just inserts contracts?
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: sk@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Sun, 11 Jul 2010 22:38:01 -0400

 On Sun, Jul 11, 2010 at 10:28 PM,  <sk@cs.brown.edu> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11028
 >
 > Reported by Shriram Krishnamurthi for release: 5.0
 >
 > *** Description:
 > Can we make (: ...) work in regular Racket (and *SL)? =A0How about if it
 > just inserts contracts?
 
 Using what contract form?  Are you imagining `define/contract'?  And
 what syntax for the contracts?
 
 Also, this requires the implementation to be built into the language
 or very ugly mutation tricks in the definition of `:' and `define'.
 --=20
 sam th
 samth@ccs.neu.edu
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Sun, 11 Jul 2010 22:45:54 -0400

 I was actually hoping that because : already has a well-defined
 language, it stays unchanged.  That is, given
 
 ----------
 #lang typed/racket
 
 (: foo (Real -> Real))
 (define foo ...)
 ----------
 
 if I just change
 
 #lang typed/racket
 
 to
 
 #lang racket
 
 then the rest of the file stays unchanged, but the enforcement is with
 contracts instead.
 
 I had reason to do this recently, where I was just fighting too hard
 with the type system and wanted to first make sure my program ran.
 But that is not easy to do in the current setup.
 
 Shriram
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Sun, 11 Jul 2010 22:48:48 -0400

 On Sun, Jul 11, 2010 at 10:45 PM, Shriram Krishnamurthi <sk@cs.brown.edu> w=
 rote:
 > I was actually hoping that because : already has a well-defined
 > language, it stays unchanged. =A0That is, given
 >
 > ----------
 > #lang typed/racket
 >
 > (: foo (Real -> Real))
 > (define foo ...)
 > ----------
 >
 > if I just change
 >
 > #lang typed/racket
 >
 > to
 >
 > #lang racket
 >
 > then the rest of the file stays unchanged, but the enforcement is with
 > contracts instead.
 
 While this would be nice, I think it's both semantically and
 implemenationally hard.  In particular, what notion of 'contract
 boundary' do you have in mind?
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Sun, 11 Jul 2010 22:55:29 -0400

 I don't even understand the question.
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 05:58:03 -0400

 Are you imagining that
 
 (: fun the-contract)
 
 will expand to something like
 
 (set! fun (contract the-contract fun 'positive 'negative))
 
 ?
 
 [Which obviously will not work because fun may not be defined, so what
 would really need to happen is for #%module-begin to locate a place to
 put a contract region.]
 
 What would 'positive and 'negative be replaced with to be meaningful?
 
 Were you imaging the : and define cooperate to expand into
 define/contract? That seems plausible to me.
 
 On Sun, Jul 11, 2010 at 10:55 PM, Shriram Krishnamurthi <sk@cs.brown.edu> wrote:
 > I don't even understand the question.
 >
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 05:58:03 -0400

 Are you imagining that
 
 (: fun the-contract)
 
 will expand to something like
 
 (set! fun (contract the-contract fun 'positive 'negative))
 
 ?
 
 [Which obviously will not work because fun may not be defined, so what
 would really need to happen is for #%module-begin to locate a place to
 put a contract region.]
 
 What would 'positive and 'negative be replaced with to be meaningful?
 
 Were you imaging the : and define cooperate to expand into
 define/contract? That seems plausible to me.
 
 On Sun, Jul 11, 2010 at 10:55 PM, Shriram Krishnamurthi <sk@cs.brown.edu> wrote:
 > I don't even understand the question.
 >
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 05:58:03 -0400

 Are you imagining that
 
 (: fun the-contract)
 
 will expand to something like
 
 (set! fun (contract the-contract fun 'positive 'negative))
 
 ?
 
 [Which obviously will not work because fun may not be defined, so what
 would really need to happen is for #%module-begin to locate a place to
 put a contract region.]
 
 What would 'positive and 'negative be replaced with to be meaningful?
 
 Were you imaging the : and define cooperate to expand into
 define/contract? That seems plausible to me.
 
 On Sun, Jul 11, 2010 at 10:55 PM, Shriram Krishnamurthi <sk@cs.brown.edu> wrote:
 > I don't even understand the question.
 >
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 08:12:23 -0400

 On Mon, Jul 12, 2010 at 5:58 AM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 > Are you imagining that
 >
 > (: fun the-contract)
 >
 > will expand to something like
 >
 > (set! fun (contract the-contract fun 'positive 'negative))
 >
 > ?
 >
 > [Which obviously will not work because fun may not be defined, so what
 > would really need to happen is for #%module-begin to locate a place to
 > put a contract region.]
 >
 > What would 'positive and 'negative be replaced with to be meaningful?
 >
 > Were you imaging the : and define cooperate to expand into
 > define/contract? That seems plausible to me.
 
 That's certainly plausible, but I've heard the desire for "contracts"
 in the student languages to be checked on recursive calls, making them
 not really contracts at all.  So that would require a different
 enforcement mechanism than `define/contract'.
 
 Also, this would require `define' (and thus `racket/base') depending
 on the contract library, which it currently doesn't (let alone the
 whole TR impl).
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 08:23:48 -0400

 Contracts are about establishing blame between interactions across a
 boundary. With a recursive call inside a single function, there is no
 boundary to contract across. I suppose we could imagine an f-x-blamee
 and f-x+1-blamee but the contract system doesn't make that easy.
 
 On Mon, Jul 12, 2010 at 8:19 AM, Shriram Krishnamurthi <sk@cs.brown.edu> wrote:
 > Why does checking on recursive calls make something not be a contract?
 >
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 08:40:31 -0400

 On Mon, Jul 12, 2010 at 8:23 AM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 > Contracts are about establishing blame between interactions across a
 > boundary.
 
 This "definition" of contracts focuses on a second-order effect
 instead of a first-order one.  Also, callers and callees are perfectly
 good boundaries.  It's conceivable that the Racket notion of contracts
 has just gotten perverted to focus on just one level of interaction,
 ignoring the others.
 
 If that's the case, then forget that I said "contracts" -- call them
 "checks" instead.  The point is, it doesn't seem hard to translate the
 types into predicates, and wrap expressions in them.  All this
 discussion of contracts and blame is distracting from the basic point,
 which is that once you get into the typed world, you get stuck in
 there.
 
 Shriram
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 08:19:30 -0400

 Why does checking on recursive calls make something not be a contract?
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Jay McCarthy <jay.mccarthy@gmail.com>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 08:44:22 -0400

 On Mon, Jul 12, 2010 at 8:40 AM, Shriram Krishnamurthi <sk@cs.brown.edu> wr=
 ote:
 >
 > If that's the case, then forget that I said "contracts" -- call them
 > "checks" instead. =A0The point is, it doesn't seem hard to translate the
 > types into predicates, and wrap expressions in them. =A0All this
 > discussion of contracts and blame is distracting from the basic point,
 > which is that once you get into the typed world, you get stuck in
 > there.
 
 If all you want is to escape from typechecking while maintaining the
 syntax, you can use `typed/racket/no-check' as the language.
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 08:17:36 -0400

 On Mon, Jul 12, 2010 at 8:12 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wr=
 ote:
 > On Mon, Jul 12, 2010 at 5:58 AM, Jay McCarthy <jay.mccarthy@gmail.com> wr=
 ote:
 >> Are you imagining that
 >>
 >> (: fun the-contract)
 >>
 >> will expand to something like
 >>
 >> (set! fun (contract the-contract fun 'positive 'negative))
 >>
 >> ?
 >>
 >> [Which obviously will not work because fun may not be defined, so what
 >> would really need to happen is for #%module-begin to locate a place to
 >> put a contract region.]
 >>
 >> What would 'positive and 'negative be replaced with to be meaningful?
 >>
 >> Were you imaging the : and define cooperate to expand into
 >> define/contract? That seems plausible to me.
 >
 > That's certainly plausible, but I've heard the desire for "contracts"
 > in the student languages to be checked on recursive calls, making them
 > not really contracts at all. =C2=A0So that would require a different
 > enforcement mechanism than `define/contract'.
 
 Yes, I presume that's what Shriram wants too.
 
 >
 > Also, this would require `define' (and thus `racket/base') depending
 > on the contract library, which it currently doesn't (let alone the
 > whole TR impl).
 
 I don't find this part of the argument compelling because we can make
 the student language's define arbitrarily different.
 
 Jay
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Jay McCarthy <jay.mccarthy@gmail.com>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 09:16:03 -0400

 Aha, good.
 
 Just so you know, the docs say not this but
 
  #lang typed-scheme/no-check
 
 Shriram
 
 On Mon, Jul 12, 2010 at 8:44 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wr=
 ote:
 > On Mon, Jul 12, 2010 at 8:40 AM, Shriram Krishnamurthi <sk@cs.brown.edu> =
 wrote:
 >>
 >> If that's the case, then forget that I said "contracts" -- call them
 >> "checks" instead. =A0The point is, it doesn't seem hard to translate the
 >> types into predicates, and wrap expressions in them. =A0All this
 >> discussion of contracts and blame is distracting from the basic point,
 >> which is that once you get into the typed world, you get stuck in
 >> there.
 >
 > If all you want is to escape from typechecking while maintaining the
 > syntax, you can use `typed/racket/no-check' as the language.
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 09:24:38 -0400

 Everyone: we are working on adding signatures to the teaching  
 languages. They are 'checks' in the sense of Shriram's concluding  
 message.
 
 Shriram: I think it would be fair if you read our contract  
 documentation and FAQ before you condemn Racket's notion of contracts.  
 We have worked on these for 8 years now and I think that's the minimum  
 fairness we can expect.
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Jay McCarthy <jay.mccarthy@gmail.com>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11028: : in untyped code
Date: Mon, 12 Jul 2010 11:08:56 -0400

 On Mon, Jul 12, 2010 at 9:16 AM, Shriram Krishnamurthi <sk@cs.brown.edu> wr=
 ote:
 >
 > Just so you know, the docs say not this but
 >
 > =A0#lang typed-scheme/no-check
 
 The version in git has the correct info.
 --=20
 sam th
 samth@ccs.neu.edu

Responsible changed from "nobody" to "samth" by samth at Thu, 19 Aug 2010 11:31:14 -0400
Reason>>> tr

State changed from "open" to "closed" by samth at Thu, 19 Aug 2010 11:31:14 -0400
Reason>>> not a bug per se

