From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Sep  3 02:27:15 2012
Received: from mail-iy0-f172.google.com (mail-iy0-f172.google.com [209.85.210.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q836RCbQ025158
	for <bugs@bugs.plt-scheme.org>; Mon, 3 Sep 2012 02:27:12 -0400
Message-Id: <201209030627.q836R7ck025139@champlain.ccs.neu.edu>
Date: Mon, 3 Sep 2012 02:27:07 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: scheme_append should short circuit when right list is null

>Number:         13093
>Category:       all
>Synopsis:       scheme_append should short circuit when right list is null
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Sep 03 02:28:01 -0400 2012
>Last-Modified:  Wed Sep 19 22:52:01 -0400 2012
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
append doesn't short circuit creating a new list when the right most argument is null. This means that lots of extra garbage is created when appending large lists to null, as well as extra work (aslong as the list? bit has already been set on a cons pair somewhere in the list).
>How-To-Repeat:
#lang racket
(define l (make-list 10000000 #f))
(void (time (append l null) l))
(eq? (append l null) l)
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when right list is null
Date: Wed, 12 Sep 2012 14:43:57 -0400

 More than a week ago, eric.n.dobson@gmail.com wrote:
 > append doesn't short circuit creating a new list when the right most
 > argument is null. This means that lots of extra garbage is created
 > when appending large lists to null, as well as extra work (aslong as
 > the list? bit has already been set on a cons pair somewhere in the
 > list).
 
 (append foo '()) is a very common idiom for copying a list.  A
 questionable one, but it means that the decision to do that or not to
 do that is bigger than a random bug report.  (It's probably going to
 have a much bigger impact than string interning...)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when right list is null
Date: Wed, 12 Sep 2012 21:53:17 +0200

 What exactly is the big impact other than that the eq? guarantee is no longer guaranteed? I can't see too many uses of append where the right list might be empty. You want to measure drracket? 
 
 
 On Sep 12, 2012, at 8:43 PM, Eli Barzilay wrote:
 
 > More than a week ago, eric.n.dobson@gmail.com wrote:
 >> append doesn't short circuit creating a new list when the right most
 >> argument is null. This means that lots of extra garbage is created
 >> when appending large lists to null, as well as extra work (aslong as
 >> the list? bit has already been set on a cons pair somewhere in the
 >> list).
 > 
 > (append foo '()) is a very common idiom for copying a list.  A
 > questionable one, but it means that the decision to do that or not to
 > do that is bigger than a random bug report.  (It's probably going to
 > have a much bigger impact than string interning...)
 > 
 > -- 
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                    http://barzilay.org/                   Maze is Life!
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, eric.n.dobson@gmail.com,
        bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when
 right list is null
Date: Wed, 12 Sep 2012 14:56:02 -0500

 Yeah, right: the immutability of lists means that such guarantees are
 probably much less widely relied on.
 
 (Not that I think spending too much time on this issue is wise--
 changes to primitives like this are easy to work around and possibly
 lead to subtle bugs so probably not worth it.)
 
 Robby
 
 On Wed, Sep 12, 2012 at 2:53 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > What exactly is the big impact other than that the eq? guarantee is no longer guaranteed? I can't see too many uses of append where the right list might be empty. You want to measure drracket?
 >
 >
 > On Sep 12, 2012, at 8:43 PM, Eli Barzilay wrote:
 >
 >> More than a week ago, eric.n.dobson@gmail.com wrote:
 >>> append doesn't short circuit creating a new list when the right most
 >>> argument is null. This means that lots of extra garbage is created
 >>> when appending large lists to null, as well as extra work (aslong as
 >>> the list? bit has already been set on a cons pair somewhere in the
 >>> list).
 >>
 >> (append foo '()) is a very common idiom for copying a list.  A
 >> questionable one, but it means that the decision to do that or not to
 >> do that is bigger than a random bug report.  (It's probably going to
 >> have a much bigger impact than string interning...)
 >>
 >> --
 >>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>                    http://barzilay.org/                   Maze is Life!
 >
From: Ryan Culpepper <ryan@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, eric.n.dobson@gmail.com,
        bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when
 right list is null
Date: Wed, 12 Sep 2012 19:24:00 -0400

 On 09/12/2012 03:53 PM, Matthias Felleisen wrote:
 >
 > What exactly is the big impact other than that the eq? guarantee is
 > no longer guaranteed? I can't see too many uses of append where the
 > right list might be empty. You want to measure drracket?
 
 I instrumented scheme_append to notice when the second argument is empty 
 and record the length of the first argument in bins of 0, 1, 2-10, 
 11-100, and >100. Here are the measurements for a couple different 
 executions.
 
 building racket, "make":
    0     : 1207876
    1     : 305539
    2-10  : 311423
    11-100: 29837
    > 100 : 957
    total : 1855632
    all calls: 3505953
    total%:   53%
    nonzero%: 18%
 
 building racket, "setup -D -j 1":
    0     : 986382
    1     : 650287
    2-10  : 1087880
    11-100: 17780
    > 100 : 390
    total : 2742719
    all calls: not recorded
 
 start drracket and then exit:
    0     : 109030
    1     : 4755
    2-10  : 4569
    11-100: 1036
    > 100 : 26
    total : 119416
    all calls: 258079
    total%:   46%
    nonzero%: 4%
 
 building documentation, "setup -j 1"
    0     : 20858295
    1     : 7161624
    2-10  : 1461069
    11-100: 43687
    > 100 : 193
    total : 29524868
    all calls: 58834801
    total%:   50%
    nonzero%: 15%
 
 "all calls" is the number of calls to scheme_append, including those 
 when the second argument is non-empty. "nonzero%" is the percentage of 
 calls for which the first argument was non-empty and the second argument 
 was empty; those are the only calls for which short-circuiting would 
 have any effect.
 
 Ryan
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Ryan Culpepper <ryan@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, Eli Barzilay <eli@barzilay.org>,
        eric.n.dobson@gmail.com, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when
 right list is null
Date: Thu, 13 Sep 2012 00:18:01 -0500

 Very nice!
 
 Did you try actually changing scheme_append to implement the
 optimization? If so, does the peak memory use change? Does anything
 crash?
 
 Robby
 
 On Wed, Sep 12, 2012 at 6:24 PM, Ryan Culpepper <ryan@cs.utah.edu> wrote:
 > On 09/12/2012 03:53 PM, Matthias Felleisen wrote:
 >>
 >>
 >> What exactly is the big impact other than that the eq? guarantee is
 >> no longer guaranteed? I can't see too many uses of append where the
 >> right list might be empty. You want to measure drracket?
 >
 >
 > I instrumented scheme_append to notice when the second argument is empty and
 > record the length of the first argument in bins of 0, 1, 2-10, 11-100, and
 >>100. Here are the measurements for a couple different executions.
 >
 > building racket, "make":
 >   0     : 1207876
 >   1     : 305539
 >   2-10  : 311423
 >   11-100: 29837
 >   > 100 : 957
 >   total : 1855632
 >   all calls: 3505953
 >   total%:   53%
 >   nonzero%: 18%
 >
 > building racket, "setup -D -j 1":
 >   0     : 986382
 >   1     : 650287
 >   2-10  : 1087880
 >   11-100: 17780
 >   > 100 : 390
 >   total : 2742719
 >   all calls: not recorded
 >
 > start drracket and then exit:
 >   0     : 109030
 >   1     : 4755
 >   2-10  : 4569
 >   11-100: 1036
 >   > 100 : 26
 >   total : 119416
 >   all calls: 258079
 >   total%:   46%
 >   nonzero%: 4%
 >
 > building documentation, "setup -j 1"
 >   0     : 20858295
 >   1     : 7161624
 >   2-10  : 1461069
 >   11-100: 43687
 >   > 100 : 193
 >   total : 29524868
 >   all calls: 58834801
 >   total%:   50%
 >   nonzero%: 15%
 >
 > "all calls" is the number of calls to scheme_append, including those when
 > the second argument is non-empty. "nonzero%" is the percentage of calls for
 > which the first argument was non-empty and the second argument was empty;
 > those are the only calls for which short-circuiting would have any effect.
 >
 > Ryan
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Ryan Culpepper <ryan@cs.utah.edu>
Cc: Eli Barzilay <eli@barzilay.org>, eric.n.dobson@gmail.com,
        bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when right list is null
Date: Thu, 13 Sep 2012 09:19:25 +0200

 Thanks. This is more than I expected. Same question as Robby -- Matthias
 
 
 
 On Sep 13, 2012, at 1:24 AM, Ryan Culpepper wrote:
 
 > On 09/12/2012 03:53 PM, Matthias Felleisen wrote:
 >> 
 >> What exactly is the big impact other than that the eq? guarantee is
 >> no longer guaranteed? I can't see too many uses of append where the
 >> right list might be empty. You want to measure drracket?
 > 
 > I instrumented scheme_append to notice when the second argument is empty and record the length of the first argument in bins of 0, 1, 2-10, 11-100, and >100. Here are the measurements for a couple different executions.
 > 
 > building racket, "make":
 >  0     : 1207876
 >  1     : 305539
 >  2-10  : 311423
 >  11-100: 29837
 >  > 100 : 957
 >  total : 1855632
 >  all calls: 3505953
 >  total%:   53%
 >  nonzero%: 18%
 > 
 > building racket, "setup -D -j 1":
 >  0     : 986382
 >  1     : 650287
 >  2-10  : 1087880
 >  11-100: 17780
 >  > 100 : 390
 >  total : 2742719
 >  all calls: not recorded
 > 
 > start drracket and then exit:
 >  0     : 109030
 >  1     : 4755
 >  2-10  : 4569
 >  11-100: 1036
 >  > 100 : 26
 >  total : 119416
 >  all calls: 258079
 >  total%:   46%
 >  nonzero%: 4%
 > 
 > building documentation, "setup -j 1"
 >  0     : 20858295
 >  1     : 7161624
 >  2-10  : 1461069
 >  11-100: 43687
 >  > 100 : 193
 >  total : 29524868
 >  all calls: 58834801
 >  total%:   50%
 >  nonzero%: 15%
 > 
 > "all calls" is the number of calls to scheme_append, including those when the second argument is non-empty. "nonzero%" is the percentage of calls for which the first argument was non-empty and the second argument was empty; those are the only calls for which short-circuiting would have any effect.
 > 
 > Ryan
 > 
 
 
From: Ryan Culpepper <ryan@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, Eli Barzilay <eli@barzilay.org>,
        eric.n.dobson@gmail.com, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when
 right list is null
Date: Fri, 14 Sep 2012 12:26:22 -0400

 On 09/13/2012 01:18 AM, Robby Findler wrote:
 > Very nice!
 >
 > Did you try actually changing scheme_append to implement the
 > optimization? If so, does the peak memory use change? Does anything
 > crash?
 
 Yes, I also made that change when I added the instrumentation. I didn't 
 measure peak memory or anything like that. Nothing crashed, but I didn't 
 do anything complicated to exercise the change.
 
 --
 
 As a separate but related thought, I wonder if scheme_append (and 
 possibly vector->list, string->list, etc) would benefit from allocating 
 all of their pairs in one operation rather than allocating them one at a 
 time. I tried to experiment with this idea using GC_malloc_array_tagged, 
 but either that function isn't meant for that purpose or I used it wrong 
 (immediate segfault).
 
 Ryan
 
 > On Wed, Sep 12, 2012 at 6:24 PM, Ryan Culpepper <ryan@cs.utah.edu> wrote:
 >> On 09/12/2012 03:53 PM, Matthias Felleisen wrote:
 >>>
 >>>
 >>> What exactly is the big impact other than that the eq? guarantee is
 >>> no longer guaranteed? I can't see too many uses of append where the
 >>> right list might be empty. You want to measure drracket?
 >>
 >>
 >> I instrumented scheme_append to notice when the second argument is empty and
 >> record the length of the first argument in bins of 0, 1, 2-10, 11-100, and
 >>> 100. Here are the measurements for a couple different executions.
 >>
 >> building racket, "make":
 >>    0     : 1207876
 >>    1     : 305539
 >>    2-10  : 311423
 >>    11-100: 29837
 >>    > 100 : 957
 >>    total : 1855632
 >>    all calls: 3505953
 >>    total%:   53%
 >>    nonzero%: 18%
 >>
 >> building racket, "setup -D -j 1":
 >>    0     : 986382
 >>    1     : 650287
 >>    2-10  : 1087880
 >>    11-100: 17780
 >>    > 100 : 390
 >>    total : 2742719
 >>    all calls: not recorded
 >>
 >> start drracket and then exit:
 >>    0     : 109030
 >>    1     : 4755
 >>    2-10  : 4569
 >>    11-100: 1036
 >>    > 100 : 26
 >>    total : 119416
 >>    all calls: 258079
 >>    total%:   46%
 >>    nonzero%: 4%
 >>
 >> building documentation, "setup -j 1"
 >>    0     : 20858295
 >>    1     : 7161624
 >>    2-10  : 1461069
 >>    11-100: 43687
 >>    > 100 : 193
 >>    total : 29524868
 >>    all calls: 58834801
 >>    total%:   50%
 >>    nonzero%: 15%
 >>
 >> "all calls" is the number of calls to scheme_append, including those when
 >> the second argument is non-empty. "nonzero%" is the percentage of calls for
 >> which the first argument was non-empty and the second argument was empty;
 >> those are the only calls for which short-circuiting would have any effect.
 >>
 >> Ryan
 >>
 
From: Eli Barzilay <eli@barzilay.org>
To: Ryan Culpepper <ryan@cs.utah.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, eric.n.dobson@gmail.com,
        bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when
 right list is null
Date: Tue, 18 Sep 2012 13:49:45 -0400

 On Friday, Ryan Culpepper wrote:
 > As a separate but related thought, I wonder if scheme_append (and
 > possibly vector->list, string->list, etc) would benefit from
 > allocating all of their pairs in one operation rather than
 > allocating them one at a time. I tried to experiment with this idea
 > using GC_malloc_array_tagged, but either that function isn't meant
 > for that purpose or I used it wrong (immediate segfault).
 
 There are a bunch of more related issues like
 (eq? foo (substring foo 0)) and some that are harder:
 (eq? foo (regexp-replace* #rx"x" foo "y")).
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Ryan Culpepper <ryan@cs.utah.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, eric.n.dobson@gmail.com,
        bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when
 right list is null
Date: Tue, 18 Sep 2012 13:02:37 -0500

 eq? is the devil.
 
 Robby
 
 On Tue, Sep 18, 2012 at 12:49 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Friday, Ryan Culpepper wrote:
 >> As a separate but related thought, I wonder if scheme_append (and
 >> possibly vector->list, string->list, etc) would benefit from
 >> allocating all of their pairs in one operation rather than
 >> allocating them one at a time. I tried to experiment with this idea
 >> using GC_malloc_array_tagged, but either that function isn't meant
 >> for that purpose or I used it wrong (immediate segfault).
 >
 > There are a bunch of more related issues like
 > (eq? foo (substring foo 0)) and some that are harder:
 > (eq? foo (regexp-replace* #rx"x" foo "y")).
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Ryan Culpepper <ryan@cs.utah.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, eric.n.dobson@gmail.com,
        bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13093: scheme_append should short circuit when
 right list is null
Date: Wed, 19 Sep 2012 22:48:36 -0400

 Yesterday, Robby Findler wrote:
 > eq? is the devil.
 
 In this case its only sin is that it makes the (redundant) allocation
 apparent, which makes some people write code defensively to avoid
 it...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
