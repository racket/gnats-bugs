From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jun  2 18:24:56 2010
Received: from mail-gw0-f44.google.com (mail-gw0-f44.google.com [74.125.83.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o52MOs16027211
	for <bugs@bugs.plt-scheme.org>; Wed, 2 Jun 2010 18:24:54 -0400
Message-Id: <201006022224.o52MOmQN027201@champlain.ccs.neu.edu>
Date: Wed, 2 Jun 2010 18:24:48 -0400
From: endobson@cs.brown.edu
To: bugs@plt-scheme.org
Subject: TypedRacket provides untyped identifier

>Number:         10956
>Category:       all
>Synopsis:       TypedRacket provides untyped identifier
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jun 02 18:28:01 -0400 2010
>Closed-Date:    Mon Jun 14 08:25:01 -0400 2010
>Last-Modified:  Mon Jun 14 08:25:01 -0400 2010
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.0.1--2010-06-01(-/f)
>Environment:
macosx "Darwin eric-dobsons-macbook.local 10.3.0 Darwin Kernel Version 10.3.0: Fri Feb 26 11:58:09 PST 2010; root:xnu-1504.3.12~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 176531504

Collections:
(("/Users/eric/Library/Racket/5.0.0.1/collects" non-existent-path) ("/Users/eric/proj/plt/collects" ".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engin!
 e" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug/profile) (default) #() "#lang scheme\n" #f))
>Description:
The language typed/racket provides the identifier curry, but not typed. Thus using it makes the type checker fail. I would think that all identifiers provided by typed/racket would be typed.
>How-To-Repeat:
#lang typed/racket
curry
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: endobson@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [plt-bug] all/10956: TypedRacket provides untyped identifier
Date: Wed, 2 Jun 2010 19:08:36 -0400

 Hallelujah, someone else who believes that all these ids need types.=20
 
 Send in a patch via git.=20
 
 
 
 On Jun 2, 2010, at 6:28 PM, endobson@cs.brown.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D10956
 >=20
 > Reported by Eric Dobson for release: 5.0.0.1--2010-06-01(-/f)
 >=20
 > *** Description:
 > The language typed/racket provides the identifier curry, but not =
 typed. Thus using it makes the type checker fail. I would think that all =
 identifiers provided by typed/racket would be typed.
 >=20
 > *** How to repeat:
 > #lang typed/racket
 > curry
 >=20
 > *** Environment:
 > macosx "Darwin eric-dobsons-macbook.local 10.3.0 Darwin Kernel Version =
 10.3.0: Fri Feb 26 11:58:09 PST 2010; root:xnu-1504.3.12~1/RELEASE_I386 =
 i386" (i386-macosx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 176531504
 >=20
 > Collections:
 > (("/Users/eric/Library/Racket/5.0.0.1/collects" non-existent-path) =
 ("/Users/eric/proj/plt/collects" ".gitignore" "2htdp" "afm" "algol60" =
 "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" =
 "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" =
 "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" =
 "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" =
 "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" =
 "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" =
 "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" =
 "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" =
 "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" =
 "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" =
 "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" =
 "string-constants" "swindle" "syntax" "syntax-color" "teachpack" =
 "test-box-recovery" "test-engin!
 > e" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" =
 "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
 > Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug/profile) (default) #() "#lang scheme\n" =
 #f))
 >=20
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: bugs@plt-scheme.org, endobson@cs.brown.edu
Cc: 
Subject: Re: all/10956: TypedRacket provides untyped identifier
Date: Thu, 10 Jun 2010 13:07:15 -0400

 --Apple-Mail-7--617791375
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 I was not able to come up with a suitable type for curry, but added =
 types for other identifiers. I hope that this works for submitting a =
 patch, I could not figure out how to get git to send the patch email =
 directly, and change the subject so that it would be picked up as this =
 bug, (I am assuming the bug tracker uses the email subject to keep track =
 of threads).
 
 I also came up with a program which determines all the untyped =
 identifiers provided by typed racket, might be useful in tracking down =
 those remaining untyped identifiers.
 
 
 #lang typed/racket
 
 (define-syntax (untyped stx)
    (let-values (((vars stxs) (module->exports 'typed/racket)))
      (with-syntax ((vars (map car (cdr (assoc 0 vars)))))
        #'(void . vars))))
  (untyped)
 
 
 
 --Apple-Mail-7--617791375
 Content-Disposition: attachment;
 	filename=0001-Added-some-stuff-to-typed-scheme-mostly-port-and-cha.patch
 Content-Type: application/octet-stream;
 	x-unix-mode=0660;
 	name="0001-Added-some-stuff-to-typed-scheme-mostly-port-and-cha.patch"
 Content-Transfer-Encoding: quoted-printable
 
 =46rom=20ac6c8060428a6705a1cdf49ccc2436a8ac93d4ae=20Mon=20Sep=2017=20=
 00:00:00=202001=0AFrom:=20Eric=20Dobson=20<endobson@cs.brown.edu>=0A=
 Date:=20Thu,=2010=20Jun=202010=2012:15:23=20-0400=0ASubject:=20[PATCH]=20=
 Added=20some=20stuff=20to=20typed=20scheme,=20mostly=20port=20and=20=
 character=20functions.=0A=0A---=0A=20=
 collects/typed-scheme/private/base-env.rkt=20|=20=20=2037=20=
 ++++++++++++++++++++++++++++=0A=201=20files=20changed,=2037=20=
 insertions(+),=200=20deletions(-)=0A=0Adiff=20--git=20=
 a/collects/typed-scheme/private/base-env.rkt=20=
 b/collects/typed-scheme/private/base-env.rkt=0Aindex=20cd4dbe7..a5b43ae=20=
 100644=0A---=20a/collects/typed-scheme/private/base-env.rkt=0A+++=20=
 b/collects/typed-scheme/private/base-env.rkt=0A@@=20-278,6=20+278,7=20@@=0A=
 =20[void=20(->*=20'()=20Univ=20-Void)]=0A=20[void?=20(make-pred-ty=20=
 -Void)]=0A=20[printf=20(->*=20(list=20-String)=20Univ=20-Void)]=0A=
 +[eprintf=20(->*=20(list=20-String)=20Univ=20-Void)]=0A=20[fprintf=20=
 (->*=20(list=20-Output-Port=20-String)=20Univ=20-Void)]=0A=20[format=20=
 (->*=20(list=20-String)=20Univ=20-String)]=0A=20=0A@@=20-318,6=20+319,22=20=
 @@=0A=20[string<=3D?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A=
 =20[string>=3D?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A=20=
 =0A+[char-alphabetic?=20(->=20-Char=20B)]=0A+[char-lower-case?=20(->=20=
 -Char=20B)]=0A+[char-upper-case?=20(->=20-Char=20B)]=0A=
 +[char-title-case?=20(->=20-Char=20B)]=0A+[char-numeric?=20(->=20-Char=20=
 B)]=0A+[char-symbolic?=20(->=20-Char=20B)]=0A+[char-punctuation?=20(->=20=
 -Char=20B)]=0A+[char-graphic?=20(->=20-Char=20B)]=0A+[char-whitespace?=20=
 (->=20-Char=20B)]=0A+[char-blank?=20(->=20-Char=20B)]=0A=
 +[char-iso-control?=20(->=20-Char=20B)]=0A+[char-general-category=20(->=20=
 -Char=20(apply=20Un=20(map=20-val=0A+=20=20'(lu=20ll=20lt=20lm=20lo=20mn=20=
 mc=20me=20nd=20nl=20no=20ps=20pe=20pi=20pf=20pd=0A+=20=20=20=20pc=20po=20=
 sc=20sm=20sk=20so=20zs=20zp=20zl=20cc=20cf=20cs=20co=20cn))))]=0A=
 +[make-known-char-range-list=20(->=20(-lst=20(-Tuple=20(list=20=
 -ExactPositiveInteger=20-ExactPositiveInteger=20B))))]=0A+=0A=20=
 [string-ci<?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A=20=
 [string-ci>?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A=20=
 [string-ci=3D?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A@@=20=
 -334,6=20+351,7=20@@=0A=20[char-foldcase=20(->=20-Char=20-Char)]=0A=20=
 [char->integer=20(->=20-Char=20-Nat)]=0A=20[integer->char=20(->=20-Nat=20=
 -Char)]=0A+[char-utf-8-length=20(->=20-Char=20(apply=20Un=20(map=20-val=20=
 '(1=202=203=204=205=206))))]=0A=20=0A=20[string-normalize-nfd=20(->=20=
 -String=20-String)]=0A=20[string-normalize-nfkd=20(->=20-String=20=
 -String)]=0A@@=20-566,6=20+584,7=20@@=0A=20[close-output-port=20(->=20=
 -Output-Port=20-Void)]=0A=20[read-line=20=20(->opt=20[-Input-Port=20Sym]=20=
 -String)]=0A=20[copy-file=20(->=20-Pathlike=20-Pathlike=20-Void)]=0A=
 +[flush-output=20(->opt=20[-Output-Port]=20-Void)]=0A=20=
 [file-stream-buffer-mode=20(cl->=20[(-Port)=20(Un=20(-val=20'none)=20=
 (-val=20'line)=20(-val=20'block)=20(-val=20#f))]=0A=20=20=20=20=20=20=20=20=
 =20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
 [(-Port=20(Un=20(-val=20'none)=20(-val=20'line)=20(-val=20'block)))=20=
 -Void])]=0A=20[file-position=20(->=20-Port=20-Nat)]=0A@@=20-590,6=20=
 +609,9=20@@=0A=20[open-output-bytes=0A=20=20(cl->*=20[[Univ]=20.=20->opt=20=
 .=20-Output-Port])]=0A=20[get-output-bytes=20(-Output-Port=20[Univ=20N=20=
 N]=20.=20->opt=20.=20-Bytes)]=0A+[char-ready?=20(->opt=20[-Input-Port]=20=
 B)]=0A+[byte-ready?=20(->opt=20[-Input-Port]=20B)]=0A+=0A=20#;[exn:fail?=20=
 (->=20Univ=20B)]=0A=20#;[exn:fail:read?=20(->=20Univ=20B)]=0A=20=0A@@=20=
 -657,6=20+679,8=20@@=0A=20=0A=20[list->string=20((-lst=20-Char)=20.=20->=20=
 .=20-String)]=0A=20[string->list=20(-String=20.=20->=20.=20(-lst=20=
 -Char))]=0A+[build-string=20(-Nat=20(-Nat=20.=20->=20.=20-Char)=20.=20->=20=
 .=20-String)]=0A+=0A=20[sort=20(-poly=20(a=20b)=20(cl->*=20((-lst=20a)=20=
 (a=20a=20.=20->=20.=20B)=0A=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
 =20=20=20=20=20=20=20=20=20=20=20#:cache-keys?=20B=20#f=0A=20=20=20=20=20=
 =20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20.=20=
 ->key=20.=20(-lst=20a))=0A@@=20-670,6=20+694,12=20@@=0A=20=0A=20[path?=20=
 (make-pred-ty=20-Path)]=0A=20=0A+;;=20scheme/function=0A+[const=20(-poly=20=
 (a)=20(->=20a=20(->*=20'()=20Univ=20a)))]=0A+(primitive?=20(->=20Univ=20=
 B))=0A+(primitive-closure?=20(->=20Univ=20B))=0A+=0A+=0A=20;;=20=
 scheme/cmdline=0A=20=0A=20[parse-command-line=0A@@=20-711,6=20+741,8=20=
 @@=0A=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
 ((-lst=20b)=20b)=20.=20->...=20.(-lst=20c)))]=0A=20[append*=0A=20=20=
 (-poly=20(a)=20((-lst=20(-lst=20a))=20.=20->=20.=20(-lst=20a)))]=0A=
 +[argmin=20(-poly=20(a)=20((a=20.=20->=20.=20-Real)=20(-lst=20a)=20.=20=
 ->=20.=20a))]=0A+[argmax=20(-poly=20(a)=20((a=20.=20->=20.=20-Real)=20=
 (-lst=20a)=20.=20->=20.=20a))]=0A=20=0A=20;;=20scheme/tcp=0A=20=
 [tcp-listener?=20(make-pred-ty=20-TCP-Listener)]=0A@@=20-740,10=20=
 +772,15=20@@=0A=20=0A=20;;=20scheme/port=0A=20[port->lines=20(cl->*=20=
 ([-Input-Port]=20.=20->opt=20.=20(-lst=20-String)))]=0A=
 +[port->bytes-lines=20(cl->*=20([-Input-Port]=20.=20->opt=20.=20(-lst=20=
 -Bytes)))]=0A+[port->list=20(-poly=20(a)=20(->opt=20[(->=20-Input-Port=20=
 a)=20-Input-Port]=20(-lst=20a)))]=0A=20[port->bytes=20(->opt=20=
 [-Input-Port]=20-Bytes)]=0A+[port->string=20(->opt=20[-Input-Port]=20=
 -String)]=0A=20[with-output-to-string=0A=20=20=20(->=20(->=20Univ)=20=
 -String)]=0A=20[open-output-nowhere=20(->=20-Output-Port)]=0A+[copy-port=20=
 (->*=20(list=20-Input-Port=20-Output-Port)=20-Output-Port=20-Void)]=0A+=0A=
 =20[input-port?=20(make-pred-ty=20-Input-Port)]=0A=20[output-port?=20=
 (make-pred-ty=20-Output-Port)]=0A=20=0A--=20=0A1.7.1=0A=0A=
 
 --Apple-Mail-7--617791375--
From: Eric Dobson <endobson@mac.com>
To: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org, endobson@cs.brown.edu
Cc: 
Subject: Re: all/10956: TypedRacket provides untyped identifier
Date: Sat, 12 Jun 2010 23:07:15 -0400

 --Apple-Mail-4--408991042
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 I think I clicked the wrong link and my last email only went to the =
 audit trail, and so I am sending it again.
 
 -----
 
 I was not able to come up with a suitable type for curry, but added =
 types for other identifiers. I hope that this works for submitting a =
 patch, I could not figure out how to get git to send the patch email =
 directly, and change the subject so that it would be picked up as this =
 bug, (I am assuming the bug tracker uses the email subject to keep track =
 of threads).
 
 I also came up with a program which determines all the untyped =
 identifiers provided by typed racket, might be useful in tracking down =
 those remaining untyped identifiers.
 
 
 #lang typed/racket
 
 (define-syntax (untyped stx)
   (let-values (((vars stxs) (module->exports 'typed/racket)))
     (with-syntax ((vars (map car (cdr (assoc 0 vars)))))
       #'(void . vars))))
 (untyped)
 
 
 --Apple-Mail-4--408991042
 Content-Disposition: attachment;
 	filename=0001-Added-some-stuff-to-typed-scheme-mostly-port-and-cha.patch
 Content-Type: application/octet-stream;
 	x-unix-mode=0660;
 	name="0001-Added-some-stuff-to-typed-scheme-mostly-port-and-cha.patch"
 Content-Transfer-Encoding: quoted-printable
 
 =46rom=20ac6c8060428a6705a1cdf49ccc2436a8ac93d4ae=20Mon=20Sep=2017=20=
 00:00:00=202001=0AFrom:=20Eric=20Dobson=20<endobson@cs.brown.edu>=0A=
 Date:=20Thu,=2010=20Jun=202010=2012:15:23=20-0400=0ASubject:=20[PATCH]=20=
 Added=20some=20stuff=20to=20typed=20scheme,=20mostly=20port=20and=20=
 character=20functions.=0A=0A---=0A=20=
 collects/typed-scheme/private/base-env.rkt=20|=20=20=2037=20=
 ++++++++++++++++++++++++++++=0A=201=20files=20changed,=2037=20=
 insertions(+),=200=20deletions(-)=0A=0Adiff=20--git=20=
 a/collects/typed-scheme/private/base-env.rkt=20=
 b/collects/typed-scheme/private/base-env.rkt=0Aindex=20cd4dbe7..a5b43ae=20=
 100644=0A---=20a/collects/typed-scheme/private/base-env.rkt=0A+++=20=
 b/collects/typed-scheme/private/base-env.rkt=0A@@=20-278,6=20+278,7=20@@=0A=
 =20[void=20(->*=20'()=20Univ=20-Void)]=0A=20[void?=20(make-pred-ty=20=
 -Void)]=0A=20[printf=20(->*=20(list=20-String)=20Univ=20-Void)]=0A=
 +[eprintf=20(->*=20(list=20-String)=20Univ=20-Void)]=0A=20[fprintf=20=
 (->*=20(list=20-Output-Port=20-String)=20Univ=20-Void)]=0A=20[format=20=
 (->*=20(list=20-String)=20Univ=20-String)]=0A=20=0A@@=20-318,6=20+319,22=20=
 @@=0A=20[string<=3D?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A=
 =20[string>=3D?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A=20=
 =0A+[char-alphabetic?=20(->=20-Char=20B)]=0A+[char-lower-case?=20(->=20=
 -Char=20B)]=0A+[char-upper-case?=20(->=20-Char=20B)]=0A=
 +[char-title-case?=20(->=20-Char=20B)]=0A+[char-numeric?=20(->=20-Char=20=
 B)]=0A+[char-symbolic?=20(->=20-Char=20B)]=0A+[char-punctuation?=20(->=20=
 -Char=20B)]=0A+[char-graphic?=20(->=20-Char=20B)]=0A+[char-whitespace?=20=
 (->=20-Char=20B)]=0A+[char-blank?=20(->=20-Char=20B)]=0A=
 +[char-iso-control?=20(->=20-Char=20B)]=0A+[char-general-category=20(->=20=
 -Char=20(apply=20Un=20(map=20-val=0A+=20=20'(lu=20ll=20lt=20lm=20lo=20mn=20=
 mc=20me=20nd=20nl=20no=20ps=20pe=20pi=20pf=20pd=0A+=20=20=20=20pc=20po=20=
 sc=20sm=20sk=20so=20zs=20zp=20zl=20cc=20cf=20cs=20co=20cn))))]=0A=
 +[make-known-char-range-list=20(->=20(-lst=20(-Tuple=20(list=20=
 -ExactPositiveInteger=20-ExactPositiveInteger=20B))))]=0A+=0A=20=
 [string-ci<?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A=20=
 [string-ci>?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A=20=
 [string-ci=3D?=20(->*=20(list=20-String=20-String)=20-String=20B)]=0A@@=20=
 -334,6=20+351,7=20@@=0A=20[char-foldcase=20(->=20-Char=20-Char)]=0A=20=
 [char->integer=20(->=20-Char=20-Nat)]=0A=20[integer->char=20(->=20-Nat=20=
 -Char)]=0A+[char-utf-8-length=20(->=20-Char=20(apply=20Un=20(map=20-val=20=
 '(1=202=203=204=205=206))))]=0A=20=0A=20[string-normalize-nfd=20(->=20=
 -String=20-String)]=0A=20[string-normalize-nfkd=20(->=20-String=20=
 -String)]=0A@@=20-566,6=20+584,7=20@@=0A=20[close-output-port=20(->=20=
 -Output-Port=20-Void)]=0A=20[read-line=20=20(->opt=20[-Input-Port=20Sym]=20=
 -String)]=0A=20[copy-file=20(->=20-Pathlike=20-Pathlike=20-Void)]=0A=
 +[flush-output=20(->opt=20[-Output-Port]=20-Void)]=0A=20=
 [file-stream-buffer-mode=20(cl->=20[(-Port)=20(Un=20(-val=20'none)=20=
 (-val=20'line)=20(-val=20'block)=20(-val=20#f))]=0A=20=20=20=20=20=20=20=20=
 =20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
 [(-Port=20(Un=20(-val=20'none)=20(-val=20'line)=20(-val=20'block)))=20=
 -Void])]=0A=20[file-position=20(->=20-Port=20-Nat)]=0A@@=20-590,6=20=
 +609,9=20@@=0A=20[open-output-bytes=0A=20=20(cl->*=20[[Univ]=20.=20->opt=20=
 .=20-Output-Port])]=0A=20[get-output-bytes=20(-Output-Port=20[Univ=20N=20=
 N]=20.=20->opt=20.=20-Bytes)]=0A+[char-ready?=20(->opt=20[-Input-Port]=20=
 B)]=0A+[byte-ready?=20(->opt=20[-Input-Port]=20B)]=0A+=0A=20#;[exn:fail?=20=
 (->=20Univ=20B)]=0A=20#;[exn:fail:read?=20(->=20Univ=20B)]=0A=20=0A@@=20=
 -657,6=20+679,8=20@@=0A=20=0A=20[list->string=20((-lst=20-Char)=20.=20->=20=
 .=20-String)]=0A=20[string->list=20(-String=20.=20->=20.=20(-lst=20=
 -Char))]=0A+[build-string=20(-Nat=20(-Nat=20.=20->=20.=20-Char)=20.=20->=20=
 .=20-String)]=0A+=0A=20[sort=20(-poly=20(a=20b)=20(cl->*=20((-lst=20a)=20=
 (a=20a=20.=20->=20.=20B)=0A=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
 =20=20=20=20=20=20=20=20=20=20=20#:cache-keys?=20B=20#f=0A=20=20=20=20=20=
 =20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20.=20=
 ->key=20.=20(-lst=20a))=0A@@=20-670,6=20+694,12=20@@=0A=20=0A=20[path?=20=
 (make-pred-ty=20-Path)]=0A=20=0A+;;=20scheme/function=0A+[const=20(-poly=20=
 (a)=20(->=20a=20(->*=20'()=20Univ=20a)))]=0A+(primitive?=20(->=20Univ=20=
 B))=0A+(primitive-closure?=20(->=20Univ=20B))=0A+=0A+=0A=20;;=20=
 scheme/cmdline=0A=20=0A=20[parse-command-line=0A@@=20-711,6=20+741,8=20=
 @@=0A=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
 ((-lst=20b)=20b)=20.=20->...=20.(-lst=20c)))]=0A=20[append*=0A=20=20=
 (-poly=20(a)=20((-lst=20(-lst=20a))=20.=20->=20.=20(-lst=20a)))]=0A=
 +[argmin=20(-poly=20(a)=20((a=20.=20->=20.=20-Real)=20(-lst=20a)=20.=20=
 ->=20.=20a))]=0A+[argmax=20(-poly=20(a)=20((a=20.=20->=20.=20-Real)=20=
 (-lst=20a)=20.=20->=20.=20a))]=0A=20=0A=20;;=20scheme/tcp=0A=20=
 [tcp-listener?=20(make-pred-ty=20-TCP-Listener)]=0A@@=20-740,10=20=
 +772,15=20@@=0A=20=0A=20;;=20scheme/port=0A=20[port->lines=20(cl->*=20=
 ([-Input-Port]=20.=20->opt=20.=20(-lst=20-String)))]=0A=
 +[port->bytes-lines=20(cl->*=20([-Input-Port]=20.=20->opt=20.=20(-lst=20=
 -Bytes)))]=0A+[port->list=20(-poly=20(a)=20(->opt=20[(->=20-Input-Port=20=
 a)=20-Input-Port]=20(-lst=20a)))]=0A=20[port->bytes=20(->opt=20=
 [-Input-Port]=20-Bytes)]=0A+[port->string=20(->opt=20[-Input-Port]=20=
 -String)]=0A=20[with-output-to-string=0A=20=20=20(->=20(->=20Univ)=20=
 -String)]=0A=20[open-output-nowhere=20(->=20-Output-Port)]=0A+[copy-port=20=
 (->*=20(list=20-Input-Port=20-Output-Port)=20-Output-Port=20-Void)]=0A+=0A=
 =20[input-port?=20(make-pred-ty=20-Input-Port)]=0A=20[output-port?=20=
 (make-pred-ty=20-Output-Port)]=0A=20=0A--=20=0A1.7.1=0A=0A=
 
 --Apple-Mail-4--408991042
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 
 
 
 --Apple-Mail-4--408991042--
Responsible changed from "nobody" to "samth" by samth@racket-lang.org at Mon, 14 Jun 2010 08:25:01 -0400
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/81f262c7ca
State changed from "open" to "closed" by samth@racket-lang.org at Mon, 14 Jun 2010 08:25:01 -0400
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/81f262c7ca
