From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jan  8 02:23:03 2014
Received: from mail-oa0-f46.google.com (mail-oa0-f46.google.com [209.85.219.46])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s087N2SN009096
	for <bugs@bugs.plt-scheme.org>; Wed, 8 Jan 2014 02:23:02 -0500
Message-Id: <201401080722.s087Mxes009088@winooski.ccs.neu.edu>
Date: Wed, 8 Jan 2014 02:22:59 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: or/c says that no clauses match when 2 do

>Number:         14274
>Category:       all
>Synopsis:       or/c says that no clauses match when 2 do
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jan 08 02:24:01 -0500 2014
>Last-Modified:  Wed Jan 08 10:40:01 -0500 2014
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
This gives the wrong error message, I expect it to say that two clauses pased the first order check.

f: broke its contract
  none of the branches of the or/c matched
  produced: '(x)
  in: the 1st argument of
      ...
      the 1st argument of
      (-> (parametric->/c (A12 B13) ...) any)
  contract from: (function f)
  blaming: (function f)
  at: /Users/endobson/tmp/tmp.rkt:13.18
  context...:
   /Users/endobson/proj/racket/plt/racket/collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16
   basic-lambda6831
   /Users/endobson/tmp/tmp.rkt: [running body]
endobson@yggdrasil () ~/proj/racket/plt/pkgs/typ
>How-To-Repeat:
#lang racket


(require racket/contract)
(define ctc
 (-> (parametric->/c (A12 B13)
       (-> (or/c B13
                 (letrec ((rec-c (recursive-contract (or/c A12 (listof rec-c)) #:impersonator)))
                     rec-c))
           any))
     any))

(define/contract (f g)
  ctc
  g)

((f values) '(x))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14274: or/c says that no clauses match when 2 do
Date: Wed, 8 Jan 2014 09:37:25 -0600

 --089e0160c35e0eff2e04ef7745ed
 Content-Type: text/plain; charset=UTF-8
 
 This looks like a limitation of the contract system's ability to support
 parametric->/c. Currrently that contract combinator has the wrong
 first-order check and, to fix it, I think that the contract system would
 have to tell the first-order check whether it is in a negative or positive
 position.
 
 In any case, here is a shorter example of the same thing (f) and an example
 of a place where the current first-order check is right (to demonstrate how
 the first order check isn't getting enough information to know what to do).
 
 #lang racket
 
 (define/contract (f x)
   (parametric->/c (a b) (-> (or/c a b) any/c))
   x)
 (f 1)
 
 (define/contract (g)
   (parametric->/c (a b) (-> (or/c a b)))
   2)
 
 (g)
 
 
 On Wed, Jan 8, 2014 at 1:24 AM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14274
 >
 > Reported by Eric Dobson for release: HEAD
 >
 > *** Description:
 > This gives the wrong error message, I expect it to say that two clauses
 > pased the first order check.
 >
 > f: broke its contract
 >   none of the branches of the or/c matched
 >   produced: '(x)
 >   in: the 1st argument of
 >       ...
 >       the 1st argument of
 >       (-> (parametric->/c (A12 B13) ...) any)
 >   contract from: (function f)
 >   blaming: (function f)
 >   at: /Users/endobson/tmp/tmp.rkt:13.18
 >   context...:
 >
 >  /Users/endobson/proj/racket/plt/racket/collects/racket/contract/private/blame.rkt:143:0:
 > raise-blame-error16
 >    basic-lambda6831
 >    /Users/endobson/tmp/tmp.rkt: [running body]
 > endobson@yggdrasil () ~/proj/racket/plt/pkgs/typ
 >
 > *** How to repeat:
 > #lang racket
 >
 >
 > (require racket/contract)
 > (define ctc
 >  (-> (parametric->/c (A12 B13)
 >        (-> (or/c B13
 >                  (letrec ((rec-c (recursive-contract (or/c A12 (listof
 > rec-c)) #:impersonator)))
 >                      rec-c))
 >            any))
 >      any))
 >
 > (define/contract (f g)
 >   ctc
 >   g)
 >
 > ((f values) '(x))
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >
 >
 
 --089e0160c35e0eff2e04ef7745ed
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">This looks like a limitation of the contract system&#39;s =
 ability to support parametric-&gt;/c. Currrently that contract combinator h=
 as the wrong first-order check and, to fix it, I think that the contract sy=
 stem would have to tell the first-order check whether it is in a negative o=
 r positive position.=C2=A0<div>
 <br></div><div>In any case, here is a shorter example of the same thing (f)=
  and an example of a place where the current first-order check is right (to=
  demonstrate how the first order check isn&#39;t getting enough information=
  to know what to do).</div>
 <div><br></div><div><div>#lang racket</div><div><br></div><div>(define/cont=
 ract (f x)</div><div>=C2=A0 (parametric-&gt;/c (a b) (-&gt; (or/c a b) any/=
 c))</div><div>=C2=A0 x)</div><div>(f 1)</div><div><br></div><div>(define/co=
 ntract (g)</div>
 <div>=C2=A0 (parametric-&gt;/c (a b) (-&gt; (or/c a b)))</div><div>=C2=A0 2=
 )</div><div><br></div><div>(g)</div></div></div><div class=3D"gmail_extra">=
 <br><br><div class=3D"gmail_quote">On Wed, Jan 8, 2014 at 1:24 AM,  <span d=
 ir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank"=
 >eric.n.dobson@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 274" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14274</a><br>
 <br>
 Reported by Eric Dobson for release: HEAD<br>
 <br>
 *** Description:<br>
 This gives the wrong error message, I expect it to say that two clauses pas=
 ed the first order check.<br>
 <br>
 f: broke its contract<br>
 =C2=A0 none of the branches of the or/c matched<br>
 =C2=A0 produced: &#39;(x)<br>
 =C2=A0 in: the 1st argument of<br>
 =C2=A0 =C2=A0 =C2=A0 ...<br>
 =C2=A0 =C2=A0 =C2=A0 the 1st argument of<br>
 =C2=A0 =C2=A0 =C2=A0 (-&gt; (parametric-&gt;/c (A12 B13) ...) any)<br>
 =C2=A0 contract from: (function f)<br>
 =C2=A0 blaming: (function f)<br>
 =C2=A0 at: /Users/endobson/tmp/tmp.rkt:13.18<br>
 =C2=A0 context...:<br>
 =C2=A0 =C2=A0/Users/endobson/proj/racket/plt/racket/collects/racket/contrac=
 t/private/blame.rkt:143:0: raise-blame-error16<br>
 =C2=A0 =C2=A0basic-lambda6831<br>
 =C2=A0 =C2=A0/Users/endobson/tmp/tmp.rkt: [running body]<br>
 endobson@yggdrasil () ~/proj/racket/plt/pkgs/typ<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 <br>
 (require racket/contract)<br>
 (define ctc<br>
 =C2=A0(-&gt; (parametric-&gt;/c (A12 B13)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(-&gt; (or/c B13<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(letrec ((rec=
 -c (recursive-contract (or/c A12 (listof rec-c)) #:impersonator)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0rec-c))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0any))<br>
 =C2=A0 =C2=A0 =C2=A0any))<br>
 <br>
 (define/contract (f g)<br>
 =C2=A0 ctc<br>
 =C2=A0 g)<br>
 <br>
 ((f values) &#39;(x))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.2=
 8 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28<br>
 <br>
 </blockquote></div><br></div>
 
 --089e0160c35e0eff2e04ef7745ed--
