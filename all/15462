From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jul 19 10:47:24 2017
Received: from mail-yw0-f179.google.com (mail-yw0-f179.google.com [209.85.161.179])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id v6JElN2K009412
	for <bugs@bugs.plt-scheme.org>; Wed, 19 Jul 2017 10:47:23 -0400
Message-Id: <201707191447.v6JElKQK009388@winooski.ccs.neu.edu>
Date: Wed, 19 Jul 2017 10:47:20 -0400
From: sk@cs.brown.edu
To: bugs@racket-lang.org
Subject: bad error message

>Number:         15462
>Category:       all
>Synopsis:       bad error message
>Class:          sw-bug
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jul 19 10:48:01 -0400 2017
>Last-Modified:  Fri Jul 21 13:08:01 -0400 2017
>Originator:     Shriram Krishnamurthi
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.9
>Environment:
macosx "Darwin csm-wl-dhcp-203-242.mines.edu 16.6.0 Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 463897404
raco pkg (show):
Installation-wide:
 Package            Checksum             Source
 main-distribution  59e9a33d2c5f01ae...  catalog...tribution
 racket-lib         cd090dc3c3452a44...  catalog racket-lib
 [192 auto-installed packages not shown]
User-specific for installation "6.9":
 Package                          Checksum        Source
 handin                           3c75e42125f...  catalog...ster
 racket-school-mystery-languages  906ea60b53a...  catalog...hool
 rosette                          b23562e6ee6...  catalog...ette



Collections:
("/Users/sk/Library/Racket/6.9/collects"
 (non-existent-path))
("/Applications/Racket v6.9/collects"
 ("acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student") (#(#t constructor repeating-decimal #f #t none) #f () #f))
>Description:
I have the following code in Intermediate Student:

(define (l33t-word loc)
  (local ([define f (first loc)])
    (cond (cond

Note the accidental "cond" instead of "cons" at the beginning of the line.

This produces an error highlighting the inner "cond" that says "cond: expected an open parenthesis before cond, but found none", when patently there is one!
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/15462: bad error message
Date: Wed, 19 Jul 2017 10:51:29 -0400

 You have filed a similar bug report before using 
 
  (cond 
    (empty? x) 
 
 as an example, which points to the open ( for empty? and uses the same words. 
 
 I do wonder how we could fix this. 
 
 
 > On Jul 19, 2017, at 10:48 AM, sk@cs.brown.edu wrote:
 > 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=15462
 > 
 > Reported by Shriram Krishnamurthi for release: 6.9
 > 
 > *** Description:
 > I have the following code in Intermediate Student:
 > 
 > (define (l33t-word loc)
 >  (local ([define f (first loc)])
 >    (cond (cond
 > 
 > Note the accidental "cond" instead of "cons" at the beginning of the line.
 > 
 > This produces an error highlighting the inner "cond" that says "cond: expected an open parenthesis before cond, but found none", when patently there is one!
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > macosx "Darwin csm-wl-dhcp-203-242.mines.edu 16.6.0 Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 463897404
 > raco pkg (show):
 > Installation-wide:
 > Package            Checksum             Source
 > main-distribution  59e9a33d2c5f01ae...  catalog...tribution
 > racket-lib         cd090dc3c3452a44...  catalog racket-lib
 > [192 auto-installed packages not shown]
 > User-specific for installation "6.9":
 > Package                          Checksum        Source
 > handin                           3c75e42125f...  catalog...ster
 > racket-school-mystery-languages  906ea60b53a...  catalog...hool
 > rosette                          b23562e6ee6...  catalog...ette
 > 
 > 
 > 
 > Collections:
 > ("/Users/sk/Library/Racket/6.9/collects"
 > (non-existent-path))
 > ("/Applications/Racket v6.9/collects"
 > ("acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "version" "xml"))
 > 
 > Recent Internal Errors: 
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student") (#(#t constructor repeating-decimal #f #t none) #f () #f))
 > 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15462: bad error message
Date: Fri, 21 Jul 2017 10:49:11 -0500

 I think that `cond` could do more checking of its arguments. In
 particular, it could look for the "open open" in each cond-line and,
 if it doesn't find one, it could look at what it does find and signal
 an error if it isn't a variable definition or a known identifier bound
 to something primitive.
 
 Robby
 
 
 On Wed, Jul 19, 2017 at 9:51 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > You have filed a similar bug report before using
 >
 >  (cond
 >    (empty? x)
 >
 > as an example, which points to the open ( for empty? and uses the same words.
 >
 > I do wonder how we could fix this.
 >
 >
 >> On Jul 19, 2017, at 10:48 AM, sk@cs.brown.edu wrote:
 >>
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=15462
 >>
 >> Reported by Shriram Krishnamurthi for release: 6.9
 >>
 >> *** Description:
 >> I have the following code in Intermediate Student:
 >>
 >> (define (l33t-word loc)
 >>  (local ([define f (first loc)])
 >>    (cond (cond
 >>
 >> Note the accidental "cond" instead of "cons" at the beginning of the line.
 >>
 >> This produces an error highlighting the inner "cond" that says "cond: expected an open parenthesis before cond, but found none", when patently there is one!
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> macosx "Darwin csm-wl-dhcp-203-242.mines.edu 16.6.0 Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 463897404
 >> raco pkg (show):
 >> Installation-wide:
 >> Package            Checksum             Source
 >> main-distribution  59e9a33d2c5f01ae...  catalog...tribution
 >> racket-lib         cd090dc3c3452a44...  catalog racket-lib
 >> [192 auto-installed packages not shown]
 >> User-specific for installation "6.9":
 >> Package                          Checksum        Source
 >> handin                           3c75e42125f...  catalog...ster
 >> racket-school-mystery-languages  906ea60b53a...  catalog...hool
 >> rosette                          b23562e6ee6...  catalog...ette
 >>
 >>
 >>
 >> Collections:
 >> ("/Users/sk/Library/Racket/6.9/collects"
 >> (non-existent-path))
 >> ("/Applications/Racket v6.9/collects"
 >> ("acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "version" "xml"))
 >>
 >> Recent Internal Errors:
 >> Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student") (#(#t constructor repeating-decimal #f #t none) #f () #f))
 >>
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15462: bad error message
Date: Fri, 21 Jul 2017 13:06:40 -0400

 I would imagine something like this: 
 
 #lang racket
 
 (require (for-syntax syntax/parse))
 (require syntax/macro-testing)
 (require rackunit)
 
 (define-syntax (nc-cond stx)
   (syntax-parse stx
     [(_) (raise-syntax-error 'cond "no clauses")]
     [(_ (f:id e) ...) (raise-syntax-error 'cond "perhaps an error")]))
 
 (check-exn exn? (λ () (convert-compile-time-error (nc-cond)) "no clauses"))
 (check-exn exn? (λ () (convert-compile-time-error (nc-cond (empty? 0))) “perhaps”))
 
 In BSL, the ‘perhaps’ clauses would have to signal an error in BSL if f is a function. 
 In ISL, the ‘perhaps’ clauses would have to leave this alone because functions are now values. The ‘not a boolean’ error will kick in. 
 
 Now I need to figure out how to get the defined function names, how to get the BSL function names, and how to get hold of all imported function names. 
 
 And lastly, can anyone guess what this does: 
 
   (require racket)
   (define x 0)
   (cond [sin x])
 
 Perhaps we should give up on semantics and just go with syntax. 
 
 
 
 
 
 
 > On Jul 21, 2017, at 11:49 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 > 
 > I think that `cond` could do more checking of its arguments. In
 > particular, it could look for the "open open" in each cond-line and,
 > if it doesn't find one, it could look at what it does find and signal
 > an error if it isn't a variable definition or a known identifier bound
 > to something primitive.
 > 
 > Robby
 > 
 > 
 > On Wed, Jul 19, 2017 at 9:51 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >> 
 >> You have filed a similar bug report before using
 >> 
 >> (cond
 >>   (empty? x)
 >> 
 >> as an example, which points to the open ( for empty? and uses the same words.
 >> 
 >> I do wonder how we could fix this.
 >> 
 >> 
 >>> On Jul 19, 2017, at 10:48 AM, sk@cs.brown.edu wrote:
 >>> 
 >>> A new problem report is waiting at
 >>> http://bugs.racket-lang.org/query/?cmd=view&pr=15462
 >>> 
 >>> Reported by Shriram Krishnamurthi for release: 6.9
 >>> 
 >>> *** Description:
 >>> I have the following code in Intermediate Student:
 >>> 
 >>> (define (l33t-word loc)
 >>> (local ([define f (first loc)])
 >>>   (cond (cond
 >>> 
 >>> Note the accidental "cond" instead of "cons" at the beginning of the line.
 >>> 
 >>> This produces an error highlighting the inner "cond" that says "cond: expected an open parenthesis before cond, but found none", when patently there is one!
 >>> 
 >>> *** How to repeat:
 >>> 
 >>> 
 >>> *** Environment:
 >>> macosx "Darwin csm-wl-dhcp-203-242.mines.edu 16.6.0 Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 463897404
 >>> raco pkg (show):
 >>> Installation-wide:
 >>> Package            Checksum             Source
 >>> main-distribution  59e9a33d2c5f01ae...  catalog...tribution
 >>> racket-lib         cd090dc3c3452a44...  catalog racket-lib
 >>> [192 auto-installed packages not shown]
 >>> User-specific for installation "6.9":
 >>> Package                          Checksum        Source
 >>> handin                           3c75e42125f...  catalog...ster
 >>> racket-school-mystery-languages  906ea60b53a...  catalog...hool
 >>> rosette                          b23562e6ee6...  catalog...ette
 >>> 
 >>> 
 >>> 
 >>> Collections:
 >>> ("/Users/sk/Library/Racket/6.9/collects"
 >>> (non-existent-path))
 >>> ("/Applications/Racket v6.9/collects"
 >>> ("acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "version" "xml"))
 >>> 
 >>> Recent Internal Errors:
 >>> Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student") (#(#t constructor repeating-decimal #f #t none) #f () #f))
 >>> 
 >> 
 
 
