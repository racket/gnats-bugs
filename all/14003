From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Sep  6 14:22:40 2013
Received: from mail-wg0-f50.google.com (mail-wg0-f50.google.com [74.125.82.50])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r86IMZ1f016733
	for <bugs@bugs.plt-scheme.org>; Fri, 6 Sep 2013 14:22:36 -0400
Message-Id: <201309061822.r86IMWZB016725@champlain.ccs.neu.edu>
Date: Fri, 6 Sep 2013 14:22:32 -0400
From: justinpombrio@cs.brown.edu
To: bugs@racket-lang.org
Subject: Subprocess does not raise an exception when failing to spawn a process.

>Number:         14003
>Category:       all
>Synopsis:       Subprocess does not raise an exception when failing to spawn a process.
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Sep 06 14:24:01 -0400 2013
>Closed-Date:    Fri Sep 06 22:33:28 -0400 2013
>Last-Modified:  Fri Sep 06 22:33:28 -0400 2013
>Originator:     Justin Pombrio
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.6
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36
>Description:
When `subprocess` is given a file name which does not exist, it returns successfully instead of raising an exception. An exception should be raised because (i) the documentation for subprocess states "The exn:fail exception is raised when a low-level error prevents the spawning of a process or ...", and (ii) failures should be loud, not silent.

Specifically, the program

  #lang racket

  (let-values [[[p in out err]
                (subprocess #f #f #f "THIS_FILE_DNE")]]
    (display (read-line in)) (newline)
    (display (read-line err)) (newline))

produces the output

  #<eof>
  racket: exec failed (No such file or directory; errno=2)

instead of raising an exception. (That second line is output on stdout, not an error message.)
>How-To-Repeat:
Run the following program:

#lang racket

(let-values [[[p in out err]
              (subprocess #f #f #f "THIS_FILE_DNE")]]
  (display (read-line in)) (newline)
  (display (read-line err)) (newline))
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: justinpombrio@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14003: Subprocess does not raise an exception when failing to spawn a process.
Date: Fri, 6 Sep 2013 14:05:07 -0600

 On Unix variants, "creating a process" and "starting a program" are
 actually two separate steps: fork() and then execve(). It's tricky, at
 best, to create the illusion that those two parts are one step and make
 a program-start failure an error for process creation.
 
 I think the current interface is the right one: the subprocess-creating
 program is responsible for checking the status of the subprocess and/or
 reading its stderr to find out how the subprocess is doing, and that
 checking covers both program-starting problems and errors in the
 program that is started.
 
 Meanwhile, the documentation should be improved to remind programmers
 of the way that processes work.
 
 At Fri, 6 Sep 2013 14:24:02 -0400, justinpombrio@cs.brown.edu wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14003
 > 
 > Reported by Justin Pombrio for release: 5.3.6
 > 
 > *** Description:
 > When `subprocess` is given a file name which does not exist, it returns 
 > successfully instead of raising an exception. An exception should be raised 
 > because (i) the documentation for subprocess states "The exn:fail exception is 
 > raised when a low-level error prevents the spawning of a process or ...", and 
 > (ii) failures should be loud, not silent.
 > 
 > Specifically, the program
 > 
 >   #lang racket
 > 
 >   (let-values [[[p in out err]
 >                 (subprocess #f #f #f "THIS_FILE_DNE")]]
 >     (display (read-line in)) (newline)
 >     (display (read-line err)) (newline))
 > 
 > produces the output
 > 
 >   #<eof>
 >   racket: exec failed (No such file or directory; errno=2)
 > 
 > instead of raising an exception. (That second line is output on stdout, not an 
 > error message.)
 > 
 > *** How to repeat:
 > Run the following program:
 > 
 > #lang racket
 > 
 > (let-values [[[p in out err]
 >               (subprocess #f #f #f "THIS_FILE_DNE")]]
 >   (display (read-line in)) (newline)
 >   (display (read-line err)) (newline))
 > 
 > *** Environment:
 > Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like 
 > Gecko) Chrome/28.0.1500.95 Safari/537.36
Responsible changed from "nobody" to "mflatt" by mflatt@racket-lang.org at Fri, 06 Sep 2013 22:33:28 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/af022e5b7e
State changed from "open" to "closed" by mflatt@racket-lang.org at Fri, 06 Sep 2013 22:33:28 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/af022e5b7e
  | subprocess docs: add notes about exec failure and full-pipe deadlock
  | 
  | Closes PR 14003 and 13914

