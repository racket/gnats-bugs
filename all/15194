From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Dec  1 08:54:28 2015
Received: from mail-ig0-f179.google.com (mail-ig0-f179.google.com [209.85.213.179])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id tB1DsLQM025008
	for <bugs@bugs.plt-scheme.org>; Tue, 1 Dec 2015 08:54:21 -0500
Message-Id: <201512011354.tB1DsIuu025001@winooski.ccs.neu.edu>
Date: Tue, 1 Dec 2015 08:54:18 -0500
From: david@davidchristiansen.dk
To: bugs@racket-lang.org
Subject: Documentation for snips suggests that a necessary step is unnecessary

>Number:         15194
>Category:       all
>Synopsis:       Documentation for snips suggests that a necessary step is unnecessary
>Class:          doc-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Dec 01 08:56:01 -0500 2015
>Originator:     David Raymond Christiansen
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.3
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:42.0) Gecko/20100101 Firefox/42.0
>Description:
The documentation for snips, in particular the example that describes what is necessary to define a new snip class at http://docs.racket-lang.org/gui/editor-overview.html?q=snipclass#%28part._snip-example%29, suggests that snipclasses are only necessary if one would like the snip to support copying and pasting. However, there must be a snipclass in order to insert it into a pasteboard, but a trivial snipclass is sufficient.
>How-To-Repeat:
The following code does not work:

#lang racket/gui

(define proof-editor%
  (class pasteboard%
    (super-new)))

(define proof-step-snip%
  (class snip%
    (define/override (get-extent dc x y w h descent space lspace rspace)
      (when w
        (set-box! w 300))
      (when h
        (set-box! h 40))
      (when descent
        (set-box! descent 0))
      (when space
        (set-box! space 0))
      (when lspace
        (set-box! lspace 0))
      (when rspace
        (set-box! rspace 0)))

    (define/override (draw dc x y left top right bottom dx dy draw-caret)
      (send dc draw-line left top right bottom))

    (define/override (copy) (new proof-step-snip%))


    (super-new)))

(define (go)

  (define frame (new frame%
                     [label "Window Title Here!"]
                     [width 700]
                     [height 700]))
  (define canvas (new editor-canvas%
                      [parent frame]))
  (define editor (new proof-editor%))
  (send canvas set-editor editor)
  (send editor insert (new proof-step-snip%))
  (send frame show #t))

The following modified version does:

#lang racket/gui

(define proof-editor%
  (class pasteboard%
    (super-new)))

(define proof-step-snip%
  (class snip%
    (define/override (get-extent dc x y w h descent space lspace rspace)
      (when w
        (set-box! w 300))
      (when h
        (set-box! h 40))
      (when descent
        (set-box! descent 0))
      (when space
        (set-box! space 0))
      (when lspace
        (set-box! lspace 0))
      (when rspace
        (set-box! rspace 0)))

    (define/override (draw dc x y left top right bottom dx dy draw-caret)
      (send dc draw-line left top right bottom))

    (define/override (copy) (new proof-step-snip%))


    (super-new)
    (set-snipclass (new snip-class%))))

(define (go)

  (define frame (new frame%
                     [label "Window Title Here!"]
                     [width 700]
                     [height 700]))
  (define canvas (new editor-canvas%
                      [parent frame]))
  (define editor (new proof-editor%))
  (send canvas set-editor editor)
  (send editor insert (new proof-step-snip%))
  (send frame show #t))

In the first case, evaluating (go) causes the error:
insert in pasteboard%: cannot insert a snip without a snipclass: (object:proof-step-snip% ...)
>Fix:
