From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun May 15 08:00:21 2016
Received: from mail-io0-f171.google.com (mail-io0-f171.google.com [209.85.223.171])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u4FC0FYd016932
	for <bugs@bugs.plt-scheme.org>; Sun, 15 May 2016 08:00:16 -0400
Message-Id: <201605151200.u4FC0CbR016925@winooski.ccs.neu.edu>
Date: Sun, 15 May 2016 08:00:12 -0400
From: sznurek@gmail.com
To: bugs@racket-lang.org
Subject: The (require redex) statement execution is slow

>Number:         15304
>Category:       all
>Synopsis:       The (require redex) statement execution is slow
>Class:          sw-bug
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun May 15 08:04:02 -0400 2016
>Last-Modified:  Sun May 15 17:04:01 -0400 2016
>Originator:     Łukasz Dąbek
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.5
>Environment:
linux-other
>Description:
Dear maintainers,

Requiring redex library is slow on my PC (takes about 2-3 seconds) and very slow on my laptop (about 10-15 seconds). My PC is equipped with SSD drive, my laptop has classic hard drive. Both are running updated Arch Linux.

Running `echo -e "#lang racket\n(require redex)\n" > /tmp/example.rkt; strace -c racket /tmp/example.rkt` produces the following output:

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 80.73    0.000088           0     41846     35097 stat
 11.93    0.000013           0      2962       384 open
  7.34    0.000008           0     22863           lseek
  0.00    0.000000           0     11925         3 read
  0.00    0.000000           0        30           write
  0.00    0.000000           0      2582           close
  0.00    0.000000           0      2533           fstat
  0.00    0.000000           0       357           poll
  0.00    0.000000           0      2624           mmap
  0.00    0.000000           0      6707           mprotect
  0.00    0.000000           0        46           munmap
  0.00    0.000000           0        50           brk
  0.00    0.000000           0        13           rt_sigaction
  0.00    0.000000           0       131           rt_sigprocmask
  0.00    0.000000           0      5557           rt_sigreturn
  0.00    0.000000           0         3           ioctl
  0.00    0.000000           0         1           pwrite64
  0.00    0.000000           0        97           writev
  0.00    0.000000           0        59        16 access
  0.00    0.000000           0         1           pipe
  0.00    0.000000           0         2           shmget
  0.00    0.000000           0         2           shmat
  0.00    0.000000           0         2           shmctl
  0.00    0.000000           0         5           socket
  0.00    0.000000           0         5         1 connect
  0.00    0.000000           0         8           sendto
  0.00    0.000000           0        17         5 recvfrom
  0.00    0.000000           0        10           sendmsg
  0.00    0.000000           0       496       404 recvmsg
  0.00    0.000000           0         1           shutdown
  0.00    0.000000           0         3           getsockname
  0.00    0.000000           0         2           getpeername
  0.00    0.000000           0         4           clone
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         5           uname
  0.00    0.000000           0         2           shmdt
  0.00    0.000000           0        15           fcntl
  0.00    0.000000           0         4           getdents
  0.00    0.000000           0         1           getcwd
  0.00    0.000000           0         4           getrlimit
  0.00    0.000000           0       104           getrusage
  0.00    0.000000           0         1           sysinfo
  0.00    0.000000           0         1           getuid
  0.00    0.000000           0         3           geteuid
  0.00    0.000000           0         2           getegid
  0.00    0.000000           0         3           getresuid
  0.00    0.000000           0         3           getresgid
  0.00    0.000000           0         2           sigaltstack
  0.00    0.000000           0        28           fstatfs
  0.00    0.000000           0         1           prctl
  0.00    0.000000           0         1           arch_prctl
  0.00    0.000000           0       571           futex
  0.00    0.000000           0         1           epoll_create
  0.00    0.000000           0         1           set_tid_address
  0.00    0.000000           0         6           fadvise64
  0.00    0.000000           0         1           clock_getres
  0.00    0.000000           0       466           epoll_wait
  0.00    0.000000           0         1           set_robust_list
  0.00    0.000000           0         8           eventfd2
------ ----------- ----------- --------- --------- ----------------
100.00    0.000109                102180     35910 total
2.29user 0.12system 0:02.42elapsed 99%CPU (0avgtext+0avgdata 273516maxresident)k
0inputs+0outputs (0major+73497minor)pagefaults 0swaps

The stat and open syscalls count seems little too big.
>How-To-Repeat:
The execution of the following command is slow:

echo -e "#lang racket\n(require redex)\n" > /tmp/example.rkt; strace -c racket /tmp/example.rkt
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: sznurek@gmail.com, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15304: The (require redex) statement execution
 is slow
Date: Sun, 15 May 2016 07:24:14 -0500

 If you change the line to
 
   (require redex/reduction-semantics)
 
 you'll avoid loading the GUI parts of redex and when I do that, I see
 much smaller numbers.
 
 Robby
 
 
 On Sun, May 15, 2016 at 7:04 AM,  <sznurek@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15304
 >
 > Reported by Łukasz Dąbek for release: 6.5
 >
 > *** Description:
 > Dear maintainers,
 >
 > Requiring redex library is slow on my PC (takes about 2-3 seconds) and very slow on my laptop (about 10-15 seconds). My PC is equipped with SSD drive, my laptop has classic hard drive. Both are running updated Arch Linux.
 >
 > Running `echo -e "#lang racket\n(require redex)\n" > /tmp/example.rkt; strace -c racket /tmp/example.rkt` produces the following output:
 >
 > % time     seconds  usecs/call     calls    errors syscall
 > ------ ----------- ----------- --------- --------- ----------------
 >  80.73    0.000088           0     41846     35097 stat
 >  11.93    0.000013           0      2962       384 open
 >   7.34    0.000008           0     22863           lseek
 >   0.00    0.000000           0     11925         3 read
 >   0.00    0.000000           0        30           write
 >   0.00    0.000000           0      2582           close
 >   0.00    0.000000           0      2533           fstat
 >   0.00    0.000000           0       357           poll
 >   0.00    0.000000           0      2624           mmap
 >   0.00    0.000000           0      6707           mprotect
 >   0.00    0.000000           0        46           munmap
 >   0.00    0.000000           0        50           brk
 >   0.00    0.000000           0        13           rt_sigaction
 >   0.00    0.000000           0       131           rt_sigprocmask
 >   0.00    0.000000           0      5557           rt_sigreturn
 >   0.00    0.000000           0         3           ioctl
 >   0.00    0.000000           0         1           pwrite64
 >   0.00    0.000000           0        97           writev
 >   0.00    0.000000           0        59        16 access
 >   0.00    0.000000           0         1           pipe
 >   0.00    0.000000           0         2           shmget
 >   0.00    0.000000           0         2           shmat
 >   0.00    0.000000           0         2           shmctl
 >   0.00    0.000000           0         5           socket
 >   0.00    0.000000           0         5         1 connect
 >   0.00    0.000000           0         8           sendto
 >   0.00    0.000000           0        17         5 recvfrom
 >   0.00    0.000000           0        10           sendmsg
 >   0.00    0.000000           0       496       404 recvmsg
 >   0.00    0.000000           0         1           shutdown
 >   0.00    0.000000           0         3           getsockname
 >   0.00    0.000000           0         2           getpeername
 >   0.00    0.000000           0         4           clone
 >   0.00    0.000000           0         1           execve
 >   0.00    0.000000           0         5           uname
 >   0.00    0.000000           0         2           shmdt
 >   0.00    0.000000           0        15           fcntl
 >   0.00    0.000000           0         4           getdents
 >   0.00    0.000000           0         1           getcwd
 >   0.00    0.000000           0         4           getrlimit
 >   0.00    0.000000           0       104           getrusage
 >   0.00    0.000000           0         1           sysinfo
 >   0.00    0.000000           0         1           getuid
 >   0.00    0.000000           0         3           geteuid
 >   0.00    0.000000           0         2           getegid
 >   0.00    0.000000           0         3           getresuid
 >   0.00    0.000000           0         3           getresgid
 >   0.00    0.000000           0         2           sigaltstack
 >   0.00    0.000000           0        28           fstatfs
 >   0.00    0.000000           0         1           prctl
 >   0.00    0.000000           0         1           arch_prctl
 >   0.00    0.000000           0       571           futex
 >   0.00    0.000000           0         1           epoll_create
 >   0.00    0.000000           0         1           set_tid_address
 >   0.00    0.000000           0         6           fadvise64
 >   0.00    0.000000           0         1           clock_getres
 >   0.00    0.000000           0       466           epoll_wait
 >   0.00    0.000000           0         1           set_robust_list
 >   0.00    0.000000           0         8           eventfd2
 > ------ ----------- ----------- --------- --------- ----------------
 > 100.00    0.000109                102180     35910 total
 > 2.29user 0.12system 0:02.42elapsed 99%CPU (0avgtext+0avgdata 273516maxresident)k
 > 0inputs+0outputs (0major+73497minor)pagefaults 0swaps
 >
 > The stat and open syscalls count seems little too big.
 >
 > *** How to repeat:
 > The execution of the following command is slow:
 >
 > echo -e "#lang racket\n(require redex)\n" > /tmp/example.rkt; strace -c racket /tmp/example.rkt
 >
 > *** Environment:
 > linux-other
 >
 
From: =?UTF-8?B?xYF1a2FzeiBExIViZWs=?= <sznurek@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15304: The (require redex) statement execution
 is slow
Date: Sun, 15 May 2016 15:43:12 +0200

 --001a114a922c98328c0532e1b105
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Thank you for your suggestion, it is much faster than requiring whole redex
 library.
 
 =C5=81ukasz.
 
 2016-05-15 14:24 GMT+02:00 Robby Findler <robby@eecs.northwestern.edu>:
 
 > If you change the line to
 >
 >   (require redex/reduction-semantics)
 >
 > you'll avoid loading the GUI parts of redex and when I do that, I see
 > much smaller numbers.
 >
 > Robby
 >
 >
 > On Sun, May 15, 2016 at 7:04 AM,  <sznurek@gmail.com> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D15304
 > >
 > > Reported by =C5=81ukasz D=C4=85bek for release: 6.5
 > >
 > > *** Description:
 > > Dear maintainers,
 > >
 > > Requiring redex library is slow on my PC (takes about 2-3 seconds) and
 > very slow on my laptop (about 10-15 seconds). My PC is equipped with SSD
 > drive, my laptop has classic hard drive. Both are running updated Arch
 > Linux.
 > >
 > > Running `echo -e "#lang racket\n(require redex)\n" > /tmp/example.rkt;
 > strace -c racket /tmp/example.rkt` produces the following output:
 > >
 > > % time     seconds  usecs/call     calls    errors syscall
 > > ------ ----------- ----------- --------- --------- ----------------
 > >  80.73    0.000088           0     41846     35097 stat
 > >  11.93    0.000013           0      2962       384 open
 > >   7.34    0.000008           0     22863           lseek
 > >   0.00    0.000000           0     11925         3 read
 > >   0.00    0.000000           0        30           write
 > >   0.00    0.000000           0      2582           close
 > >   0.00    0.000000           0      2533           fstat
 > >   0.00    0.000000           0       357           poll
 > >   0.00    0.000000           0      2624           mmap
 > >   0.00    0.000000           0      6707           mprotect
 > >   0.00    0.000000           0        46           munmap
 > >   0.00    0.000000           0        50           brk
 > >   0.00    0.000000           0        13           rt_sigaction
 > >   0.00    0.000000           0       131           rt_sigprocmask
 > >   0.00    0.000000           0      5557           rt_sigreturn
 > >   0.00    0.000000           0         3           ioctl
 > >   0.00    0.000000           0         1           pwrite64
 > >   0.00    0.000000           0        97           writev
 > >   0.00    0.000000           0        59        16 access
 > >   0.00    0.000000           0         1           pipe
 > >   0.00    0.000000           0         2           shmget
 > >   0.00    0.000000           0         2           shmat
 > >   0.00    0.000000           0         2           shmctl
 > >   0.00    0.000000           0         5           socket
 > >   0.00    0.000000           0         5         1 connect
 > >   0.00    0.000000           0         8           sendto
 > >   0.00    0.000000           0        17         5 recvfrom
 > >   0.00    0.000000           0        10           sendmsg
 > >   0.00    0.000000           0       496       404 recvmsg
 > >   0.00    0.000000           0         1           shutdown
 > >   0.00    0.000000           0         3           getsockname
 > >   0.00    0.000000           0         2           getpeername
 > >   0.00    0.000000           0         4           clone
 > >   0.00    0.000000           0         1           execve
 > >   0.00    0.000000           0         5           uname
 > >   0.00    0.000000           0         2           shmdt
 > >   0.00    0.000000           0        15           fcntl
 > >   0.00    0.000000           0         4           getdents
 > >   0.00    0.000000           0         1           getcwd
 > >   0.00    0.000000           0         4           getrlimit
 > >   0.00    0.000000           0       104           getrusage
 > >   0.00    0.000000           0         1           sysinfo
 > >   0.00    0.000000           0         1           getuid
 > >   0.00    0.000000           0         3           geteuid
 > >   0.00    0.000000           0         2           getegid
 > >   0.00    0.000000           0         3           getresuid
 > >   0.00    0.000000           0         3           getresgid
 > >   0.00    0.000000           0         2           sigaltstack
 > >   0.00    0.000000           0        28           fstatfs
 > >   0.00    0.000000           0         1           prctl
 > >   0.00    0.000000           0         1           arch_prctl
 > >   0.00    0.000000           0       571           futex
 > >   0.00    0.000000           0         1           epoll_create
 > >   0.00    0.000000           0         1           set_tid_address
 > >   0.00    0.000000           0         6           fadvise64
 > >   0.00    0.000000           0         1           clock_getres
 > >   0.00    0.000000           0       466           epoll_wait
 > >   0.00    0.000000           0         1           set_robust_list
 > >   0.00    0.000000           0         8           eventfd2
 > > ------ ----------- ----------- --------- --------- ----------------
 > > 100.00    0.000109                102180     35910 total
 > > 2.29user 0.12system 0:02.42elapsed 99%CPU (0avgtext+0avgdata
 > 273516maxresident)k
 > > 0inputs+0outputs (0major+73497minor)pagefaults 0swaps
 > >
 > > The stat and open syscalls count seems little too big.
 > >
 > > *** How to repeat:
 > > The execution of the following command is slow:
 > >
 > > echo -e "#lang racket\n(require redex)\n" > /tmp/example.rkt; strace -c
 > racket /tmp/example.rkt
 > >
 > > *** Environment:
 > > linux-other
 > >
 >
 
 --001a114a922c98328c0532e1b105
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: base64
 
 PGRpdiBkaXI9Imx0ciI+PGRpdj48ZGl2PjxkaXY+PGRpdj5UaGFuayB5b3UgZm9yIHlvdXIgc3Vn
 Z2VzdGlvbiwgaXQgaXMgbXVjaCBmYXN0ZXIgdGhhbiByZXF1aXJpbmcgd2hvbGUgcmVkZXggbGli
 cmFyeS48YnI+PGJyPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PsWBdWthc3ouPGJyPjwvZGl2Pjxk
 aXYgY2xhc3M9ImdtYWlsX2V4dHJhIj48YnI+PGRpdiBjbGFzcz0iZ21haWxfcXVvdGUiPjIwMTYt
 MDUtMTUgMTQ6MjQgR01UKzAyOjAwIFJvYmJ5IEZpbmRsZXIgPHNwYW4gZGlyPSJsdHIiPiZsdDs8
 YSBocmVmPSJtYWlsdG86cm9iYnlAZWVjcy5ub3J0aHdlc3Rlcm4uZWR1IiB0YXJnZXQ9Il9ibGFu
 ayI+cm9iYnlAZWVjcy5ub3J0aHdlc3Rlcm4uZWR1PC9hPiZndDs8L3NwYW4+Ojxicj48YmxvY2tx
 dW90ZSBjbGFzcz0iZ21haWxfcXVvdGUiIHN0eWxlPSJtYXJnaW46MCAwIDAgLjhleDtib3JkZXIt
 bGVmdDoxcHggI2NjYyBzb2xpZDtwYWRkaW5nLWxlZnQ6MWV4Ij5JZiB5b3UgY2hhbmdlIHRoZSBs
 aW5lIHRvPGJyPg0KPGJyPg0KwqAgKHJlcXVpcmUgcmVkZXgvcmVkdWN0aW9uLXNlbWFudGljcyk8
 YnI+DQo8YnI+DQp5b3UmIzM5O2xsIGF2b2lkIGxvYWRpbmcgdGhlIEdVSSBwYXJ0cyBvZiByZWRl
 eCBhbmQgd2hlbiBJIGRvIHRoYXQsIEkgc2VlPGJyPg0KbXVjaCBzbWFsbGVyIG51bWJlcnMuPGJy
 Pg0KPGJyPg0KUm9iYnk8YnI+DQo8YnI+DQo8YnI+DQpPbiBTdW4sIE1heSAxNSwgMjAxNiBhdCA3
 OjA0IEFNLMKgICZsdDs8YSBocmVmPSJtYWlsdG86c3pudXJla0BnbWFpbC5jb20iPnN6bnVyZWtA
 Z21haWwuY29tPC9hPiZndDsgd3JvdGU6PGJyPg0KJmd0OyBBIG5ldyBwcm9ibGVtIHJlcG9ydCBp
 cyB3YWl0aW5nIGF0PGJyPg0KJmd0O8KgIMKgPGEgaHJlZj0iaHR0cDovL2J1Z3MucmFja2V0LWxh
 bmcub3JnL3F1ZXJ5Lz9jbWQ9dmlldyZhbXA7cHI9MTUzMDQiIHJlbD0ibm9yZWZlcnJlciIgdGFy
 Z2V0PSJfYmxhbmsiPmh0dHA6Ly9idWdzLnJhY2tldC1sYW5nLm9yZy9xdWVyeS8/Y21kPXZpZXcm
 YW1wO3ByPTE1MzA0PC9hPjxicj4NCiZndDs8YnI+DQomZ3Q7IFJlcG9ydGVkIGJ5IMWBdWthc3og
 RMSFYmVrIGZvciByZWxlYXNlOiA2LjU8YnI+DQomZ3Q7PGJyPg0KJmd0OyAqKiogRGVzY3JpcHRp
 b246PGJyPg0KJmd0OyBEZWFyIG1haW50YWluZXJzLDxicj4NCiZndDs8YnI+DQomZ3Q7IFJlcXVp
 cmluZyByZWRleCBsaWJyYXJ5IGlzIHNsb3cgb24gbXkgUEMgKHRha2VzIGFib3V0IDItMyBzZWNv
 bmRzKSBhbmQgdmVyeSBzbG93IG9uIG15IGxhcHRvcCAoYWJvdXQgMTAtMTUgc2Vjb25kcykuIE15
 IFBDIGlzIGVxdWlwcGVkIHdpdGggU1NEIGRyaXZlLCBteSBsYXB0b3AgaGFzIGNsYXNzaWMgaGFy
 ZCBkcml2ZS4gQm90aCBhcmUgcnVubmluZyB1cGRhdGVkIEFyY2ggTGludXguPGJyPg0KJmd0Ozxi
 cj4NCiZndDsgUnVubmluZyBgZWNobyAtZSAmcXVvdDsjbGFuZyByYWNrZXRcbihyZXF1aXJlIHJl
 ZGV4KVxuJnF1b3Q7ICZndDsgL3RtcC9leGFtcGxlLnJrdDsgc3RyYWNlIC1jIHJhY2tldCAvdG1w
 L2V4YW1wbGUucmt0YCBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIG91dHB1dDo8YnI+DQomZ3Q7PGJy
 Pg0KJmd0OyAlIHRpbWXCoCDCoCDCoHNlY29uZHPCoCB1c2Vjcy9jYWxswqAgwqAgwqBjYWxsc8Kg
 IMKgIGVycm9ycyBzeXNjYWxsPGJyPg0KJmd0OyAtLS0tLS0gLS0tLS0tLS0tLS0gLS0tLS0tLS0t
 LS0gLS0tLS0tLS0tIC0tLS0tLS0tLSAtLS0tLS0tLS0tLS0tLS0tPGJyPg0KJmd0O8KgIDgwLjcz
 wqAgwqAgMC4wMDAwODjCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoDQxODQ2wqAgwqAgwqAzNTA5
 NyBzdGF0PGJyPg0KJmd0O8KgIDExLjkzwqAgwqAgMC4wMDAwMTPCoCDCoCDCoCDCoCDCoCDCoDDC
 oCDCoCDCoCAyOTYywqAgwqAgwqAgwqAzODQgb3Blbjxicj4NCiZndDvCoCDCoDcuMzTCoCDCoCAw
 LjAwMDAwOMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgMjI4NjPCoCDCoCDCoCDCoCDCoCDCoGxz
 ZWVrPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAg
 wqAgwqAxMTkyNcKgIMKgIMKgIMKgIMKgMyByZWFkPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAu
 MDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAgMzDCoCDCoCDCoCDCoCDCoCDCoHdy
 aXRlPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAg
 wqAgwqAgMjU4MsKgIMKgIMKgIMKgIMKgIMKgY2xvc2U8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAg
 MC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCAyNTMzwqAgwqAgwqAgwqAgwqAgwqBm
 c3RhdDxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKg
 IMKgIMKgIMKgMzU3wqAgwqAgwqAgwqAgwqAgwqBwb2xsPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKg
 IDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgMjYyNMKgIMKgIMKgIMKgIMKgIMKg
 bW1hcDxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKg
 IMKgIMKgIDY3MDfCoCDCoCDCoCDCoCDCoCDCoG1wcm90ZWN0PGJyPg0KJmd0O8KgIMKgMC4wMMKg
 IMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAgNDbCoCDCoCDCoCDCoCDC
 oCDCoG11bm1hcDxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKg
 IMKgMMKgIMKgIMKgIMKgIDUwwqAgwqAgwqAgwqAgwqAgwqBicms8YnI+DQomZ3Q7wqAgwqAwLjAw
 wqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCAxM8KgIMKgIMKgIMKg
 IMKgIMKgcnRfc2lnYWN0aW9uPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAg
 wqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAxMzHCoCDCoCDCoCDCoCDCoCDCoHJ0X3NpZ3Byb2NtYXNr
 PGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAg
 wqAgNTU1N8KgIMKgIMKgIMKgIMKgIMKgcnRfc2lncmV0dXJuPGJyPg0KJmd0O8KgIMKgMC4wMMKg
 IMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAgwqAzwqAgwqAgwqAgwqAg
 wqAgwqBpb2N0bDxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKg
 IMKgMMKgIMKgIMKgIMKgIMKgMcKgIMKgIMKgIMKgIMKgIMKgcHdyaXRlNjQ8YnI+DQomZ3Q7wqAg
 wqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCA5N8KgIMKg
 IMKgIMKgIMKgIMKgd3JpdGV2PGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAg
 wqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAgNTnCoCDCoCDCoCDCoCAxNiBhY2Nlc3M8YnI+DQomZ3Q7
 wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDHC
 oCDCoCDCoCDCoCDCoCDCoHBpcGU8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDC
 oCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDLCoCDCoCDCoCDCoCDCoCDCoHNobWdldDxicj4N
 CiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKg
 IMKgMsKgIMKgIMKgIMKgIMKgIMKgc2htYXQ8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4wMDAw
 MDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDLCoCDCoCDCoCDCoCDCoCDCoHNobWN0
 bDxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKg
 IMKgIMKgIMKgNcKgIMKgIMKgIMKgIMKgIMKgc29ja2V0PGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKg
 IDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAgwqA1wqAgwqAgwqAgwqAgwqAx
 IGNvbm5lY3Q8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDC
 oDDCoCDCoCDCoCDCoCDCoDjCoCDCoCDCoCDCoCDCoCDCoHNlbmR0bzxicj4NCiZndDvCoCDCoDAu
 MDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKgIDE3wqAgwqAgwqAg
 wqAgwqA1IHJlY3Zmcm9tPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAg
 wqAgwqAgwqAwwqAgwqAgwqAgwqAgMTDCoCDCoCDCoCDCoCDCoCDCoHNlbmRtc2c8YnI+DQomZ3Q7
 wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoDQ5NsKg
 IMKgIMKgIMKgNDA0IHJlY3Ztc2c8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDC
 oCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDHCoCDCoCDCoCDCoCDCoCDCoHNodXRkb3duPGJy
 Pg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAg
 wqAgwqAzwqAgwqAgwqAgwqAgwqAgwqBnZXRzb2NrbmFtZTxicj4NCiZndDvCoCDCoDAuMDDCoCDC
 oCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKgIMKgMsKgIMKgIMKgIMKgIMKg
 IMKgZ2V0cGVlcm5hbWU8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDC
 oCDCoCDCoDDCoCDCoCDCoCDCoCDCoDTCoCDCoCDCoCDCoCDCoCDCoGNsb25lPGJyPg0KJmd0O8Kg
 IMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAgwqAxwqAg
 wqAgwqAgwqAgwqAgwqBleGVjdmU8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDC
 oCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDXCoCDCoCDCoCDCoCDCoCDCoHVuYW1lPGJyPg0K
 Jmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAg
 wqAywqAgwqAgwqAgwqAgwqAgwqBzaG1kdDxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAw
 MMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKgIDE1wqAgwqAgwqAgwqAgwqAgwqBmY250bDxi
 cj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKg
 IMKgIMKgNMKgIMKgIMKgIMKgIMKgIMKgZ2V0ZGVudHM8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAg
 MC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDHCoCDCoCDCoCDCoCDCoCDC
 oGdldGN3ZDxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKg
 MMKgIMKgIMKgIMKgIMKgNMKgIMKgIMKgIMKgIMKgIMKgZ2V0cmxpbWl0PGJyPg0KJmd0O8KgIMKg
 MC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAxMDTCoCDCoCDC
 oCDCoCDCoCDCoGdldHJ1c2FnZTxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKg
 IMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKgIMKgMcKgIMKgIMKgIMKgIMKgIMKgc3lzaW5mbzxicj4N
 CiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKg
 IMKgMcKgIMKgIMKgIMKgIMKgIMKgZ2V0dWlkPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAw
 MDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAgwqAzwqAgwqAgwqAgwqAgwqAgwqBnZXRl
 dWlkPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAg
 wqAgwqAgwqAgwqAywqAgwqAgwqAgwqAgwqAgwqBnZXRlZ2lkPGJyPg0KJmd0O8KgIMKgMC4wMMKg
 IMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAgwqAgwqAgwqAgwqAzwqAgwqAgwqAgwqAg
 wqAgwqBnZXRyZXN1aWQ8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDC
 oCDCoCDCoDDCoCDCoCDCoCDCoCDCoDPCoCDCoCDCoCDCoCDCoCDCoGdldHJlc2dpZDxicj4NCiZn
 dDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKgIMKg
 MsKgIMKgIMKgIMKgIMKgIMKgc2lnYWx0c3RhY2s8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4w
 MDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCAyOMKgIMKgIMKgIMKgIMKgIMKgZnN0
 YXRmczxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAwMMKgIMKgIMKgIMKgIMKgIMKgMMKg
 IMKgIMKgIMKgIMKgMcKgIMKgIMKgIMKgIMKgIMKgcHJjdGw8YnI+DQomZ3Q7wqAgwqAwLjAwwqAg
 wqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDHCoCDCoCDCoCDCoCDC
 oCDCoGFyY2hfcHJjdGw8YnI+DQomZ3Q7wqAgwqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDC
 oCDCoCDCoDDCoCDCoCDCoCDCoDU3McKgIMKgIMKgIMKgIMKgIMKgZnV0ZXg8YnI+DQomZ3Q7wqAg
 wqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDHCoCDC
 oCDCoCDCoCDCoCDCoGVwb2xsX2NyZWF0ZTxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAw
 MMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKgIMKgMcKgIMKgIMKgIMKgIMKgIMKgc2V0X3Rp
 ZF9hZGRyZXNzPGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAg
 wqAwwqAgwqAgwqAgwqAgwqA2wqAgwqAgwqAgwqAgwqAgwqBmYWR2aXNlNjQ8YnI+DQomZ3Q7wqAg
 wqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDHCoCDC
 oCDCoCDCoCDCoCDCoGNsb2NrX2dldHJlczxicj4NCiZndDvCoCDCoDAuMDDCoCDCoCAwLjAwMDAw
 MMKgIMKgIMKgIMKgIMKgIMKgMMKgIMKgIMKgIMKgNDY2wqAgwqAgwqAgwqAgwqAgwqBlcG9sbF93
 YWl0PGJyPg0KJmd0O8KgIMKgMC4wMMKgIMKgIDAuMDAwMDAwwqAgwqAgwqAgwqAgwqAgwqAwwqAg
 wqAgwqAgwqAgwqAxwqAgwqAgwqAgwqAgwqAgwqBzZXRfcm9idXN0X2xpc3Q8YnI+DQomZ3Q7wqAg
 wqAwLjAwwqAgwqAgMC4wMDAwMDDCoCDCoCDCoCDCoCDCoCDCoDDCoCDCoCDCoCDCoCDCoDjCoCDC
 oCDCoCDCoCDCoCDCoGV2ZW50ZmQyPGJyPg0KJmd0OyAtLS0tLS0gLS0tLS0tLS0tLS0gLS0tLS0t
 LS0tLS0gLS0tLS0tLS0tIC0tLS0tLS0tLSAtLS0tLS0tLS0tLS0tLS0tPGJyPg0KJmd0OyAxMDAu
 MDDCoCDCoCAwLjAwMDEwOcKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIDEwMjE4MMKgIMKgIMKgMzU5
 MTAgdG90YWw8YnI+DQomZ3Q7IDIuMjl1c2VyIDAuMTJzeXN0ZW0gMDowMi40MmVsYXBzZWQgOTkl
 Q1BVICgwYXZndGV4dCswYXZnZGF0YSAyNzM1MTZtYXhyZXNpZGVudClrPGJyPg0KJmd0OyAwaW5w
 dXRzKzBvdXRwdXRzICgwbWFqb3IrNzM0OTdtaW5vcilwYWdlZmF1bHRzIDBzd2Fwczxicj4NCiZn
 dDs8YnI+DQomZ3Q7IFRoZSBzdGF0IGFuZCBvcGVuIHN5c2NhbGxzIGNvdW50IHNlZW1zIGxpdHRs
 ZSB0b28gYmlnLjxicj4NCiZndDs8YnI+DQomZ3Q7ICoqKiBIb3cgdG8gcmVwZWF0Ojxicj4NCiZn
 dDsgVGhlIGV4ZWN1dGlvbiBvZiB0aGUgZm9sbG93aW5nIGNvbW1hbmQgaXMgc2xvdzo8YnI+DQom
 Z3Q7PGJyPg0KJmd0OyBlY2hvIC1lICZxdW90OyNsYW5nIHJhY2tldFxuKHJlcXVpcmUgcmVkZXgp
 XG4mcXVvdDsgJmd0OyAvdG1wL2V4YW1wbGUucmt0OyBzdHJhY2UgLWMgcmFja2V0IC90bXAvZXhh
 bXBsZS5ya3Q8YnI+DQomZ3Q7PGJyPg0KJmd0OyAqKiogRW52aXJvbm1lbnQ6PGJyPg0KJmd0OyBs
 aW51eC1vdGhlcjxicj4NCiZndDs8YnI+DQo8L2Jsb2NrcXVvdGU+PC9kaXY+PGJyPjwvZGl2Pg0K
 --001a114a922c98328c0532e1b105--
From: Robby Findler <robby@eecs.northwestern.edu>
To: =?UTF-8?B?xYF1a2FzeiBExIViZWs=?= <sznurek@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15304: The (require redex) statement execution
 is slow
Date: Sun, 15 May 2016 14:30:12 -0500

 Looking more carefully at strace's output, it appears that the 25k
 stat lines are when racket is trying to find the files to require.
 There don't appear to be many directly repeated lines in there (when I
 grep for ENOENT I see 25k lines and when I remove duplicate lines
 there are still 13k lines) but maybe there is a way that somehow the
 search for collections can be improved because there are only about
 500 or so files (according to the trace from below).
 
 More interestingly, when changing from (require redex) to (require
 redex/reduction-semantics) there are about half as many files loaded
 (according to the code below), but there are more like 10x the number
 of calls to stat according to strace.
 
 I haven't found it yet, but that 10x vs 2x suggests that maybe there
 is something interesting remaining to be discovered here.
 
 Robby
 
 #lang racket/base
 (require racket/list)
 (require mred)
 
 (define (process what)
   (define ht (make-hash))
   (parameterize ([current-load/use-compiled
                   (let ([orig (current-load/use-compiled)])
                     (λ (pth thing)
                       (define k (simplify-path (path->string pth)))
                       (hash-set! ht k (+ (hash-ref ht k 0) 1))
                       (orig pth thing)))]
                  [current-namespace (make-gui-namespace)])
     (dynamic-require what #f))
   (values (take (sort (hash-map ht list) > #:key cadr) 10)
           (hash-count ht)))
 
 (process 'redex)
 (process 'redex/reduction-semantics)
 
From: =?UTF-8?B?xYF1a2FzeiBExIViZWs=?= <sznurek@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15304: The (require redex) statement execution
 is slow
Date: Sun, 15 May 2016 22:35:52 +0200

 --94eb2c048eb0619c460532e775f9
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Are you sure about the duplicate stat entries? For (require
 redex/reduction-semantics) I got:
 
 $ strace racket /tmp/example.rkt 2>&1 | grep ENOENT | awk '{print $1;}' |
 sort | uniq | wc -l
 1274
 $ strace racket /tmp/example.rkt 2>&1 | grep ENOENT | awk '{print $1;}' |
 wc -l
 11814
 
 And for (require redex):
 
 $ strace racket /tmp/example.rkt 2>&1 | grep ENOENT | awk '{print $1;}' |
 sort | uniq | wc -l
 3663
 $ strace racket /tmp/example.rkt 2>&1 | grep ENOENT | awk '{print $1;}' |
 wc -l
 35237
 
 It seems that there are 10x more files checked than necessary. Although I
 am not sure if this is where most of the time is spent, it seems to be
 little excessive.
 
 =C5=81ukasz
 
 2016-05-15 21:30 GMT+02:00 Robby Findler <robby@eecs.northwestern.edu>:
 
 > Looking more carefully at strace's output, it appears that the 25k
 > stat lines are when racket is trying to find the files to require.
 > There don't appear to be many directly repeated lines in there (when I
 > grep for ENOENT I see 25k lines and when I remove duplicate lines
 > there are still 13k lines) but maybe there is a way that somehow the
 > search for collections can be improved because there are only about
 > 500 or so files (according to the trace from below).
 >
 > More interestingly, when changing from (require redex) to (require
 > redex/reduction-semantics) there are about half as many files loaded
 > (according to the code below), but there are more like 10x the number
 > of calls to stat according to strace.
 >
 > I haven't found it yet, but that 10x vs 2x suggests that maybe there
 > is something interesting remaining to be discovered here.
 >
 > Robby
 >
 > #lang racket/base
 > (require racket/list)
 > (require mred)
 >
 > (define (process what)
 >   (define ht (make-hash))
 >   (parameterize ([current-load/use-compiled
 >                   (let ([orig (current-load/use-compiled)])
 >                     (=CE=BB (pth thing)
 >                       (define k (simplify-path (path->string pth)))
 >                       (hash-set! ht k (+ (hash-ref ht k 0) 1))
 >                       (orig pth thing)))]
 >                  [current-namespace (make-gui-namespace)])
 >     (dynamic-require what #f))
 >   (values (take (sort (hash-map ht list) > #:key cadr) 10)
 >           (hash-count ht)))
 >
 > (process 'redex)
 > (process 'redex/reduction-semantics)
 >
 
 --94eb2c048eb0619c460532e775f9
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div><div>Are you sure about the duplicate stat entries? F=
 or (require redex/reduction-semantics) I got:<br><br>$ strace racket /tmp/e=
 xample.rkt 2&gt;&amp;1 | grep ENOENT | awk &#39;{print $1;}&#39; | sort | u=
 niq | wc -l<br>1274<br>$ strace racket /tmp/example.rkt 2&gt;&amp;1 | grep =
 ENOENT | awk &#39;{print $1;}&#39; | wc -l=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
 =A0 <br>11814<br><br></div><div>And for (require redex):<br><br>$ strace ra=
 cket /tmp/example.rkt 2&gt;&amp;1 | grep ENOENT | awk &#39;{print $1;}&#39;=
  | sort | uniq | wc -l<br>3663<br>$ strace racket /tmp/example.rkt 2&gt;&am=
 p;1 | grep ENOENT | awk &#39;{print $1;}&#39; | wc -l=C2=A0=C2=A0=C2=A0=C2=
 =A0=C2=A0=C2=A0 <br>35237<br><br></div>It seems that there are 10x more fil=
 es checked than necessary. Although I am not sure if this is where most of =
 the time is spent, it seems to be little excessive.<br><br></div>=C5=81ukas=
 z<br></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">2016-0=
 5-15 21:30 GMT+02:00 Robby Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:=
 robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern.edu<=
 /a>&gt;</span>:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex">Looking more carefully at=
  strace&#39;s output, it appears that the 25k<br>
 stat lines are when racket is trying to find the files to require.<br>
 There don&#39;t appear to be many directly repeated lines in there (when I<=
 br>
 grep for ENOENT I see 25k lines and when I remove duplicate lines<br>
 there are still 13k lines) but maybe there is a way that somehow the<br>
 search for collections can be improved because there are only about<br>
 500 or so files (according to the trace from below).<br>
 <br>
 More interestingly, when changing from (require redex) to (require<br>
 redex/reduction-semantics) there are about half as many files loaded<br>
 (according to the code below), but there are more like 10x the number<br>
 of calls to stat according to strace.<br>
 <br>
 I haven&#39;t found it yet, but that 10x vs 2x suggests that maybe there<br=
 >
 is something interesting remaining to be discovered here.<br>
 <br>
 Robby<br>
 <br>
 #lang racket/base<br>
 (require racket/list)<br>
 (require mred)<br>
 <br>
 (define (process what)<br>
 =C2=A0 (define ht (make-hash))<br>
 =C2=A0 (parameterize ([current-load/use-compiled<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (let ([orig =
 (current-load/use-compiled)])<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (=CE=
 =BB (pth thing)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 (define k (simplify-path (path-&gt;string pth)))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 (hash-set! ht k (+ (hash-ref ht k 0) 1))<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 (orig pth thing)))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[current-name=
 space (make-gui-namespace)])<br>
 =C2=A0 =C2=A0 (dynamic-require what #f))<br>
 =C2=A0 (values (take (sort (hash-map ht list) &gt; #:key cadr) 10)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (hash-count ht)))<br>
 <br>
 (process &#39;redex)<br>
 (process &#39;redex/reduction-semantics)<br>
 </blockquote></div><br></div>
 
 --94eb2c048eb0619c460532e775f9--
From: Robby Findler <robby@eecs.northwestern.edu>
To: =?UTF-8?B?xYF1a2FzeiBExIViZWs=?= <sznurek@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15304: The (require redex) statement execution
 is slow
Date: Sun, 15 May 2016 16:07:06 -0500

 Oh, yes. You're right. I had left out the awk step, which made my results wrong.
 
 Robby
 
 
 On Sun, May 15, 2016 at 3:35 PM, Łukasz Dąbek <sznurek@gmail.com> wrote:
 > Are you sure about the duplicate stat entries? For (require
 > redex/reduction-semantics) I got:
 >
 > $ strace racket /tmp/example.rkt 2>&1 | grep ENOENT | awk '{print $1;}' |
 > sort | uniq | wc -l
 > 1274
 > $ strace racket /tmp/example.rkt 2>&1 | grep ENOENT | awk '{print $1;}' | wc
 > -l
 > 11814
 >
 > And for (require redex):
 >
 > $ strace racket /tmp/example.rkt 2>&1 | grep ENOENT | awk '{print $1;}' |
 > sort | uniq | wc -l
 > 3663
 > $ strace racket /tmp/example.rkt 2>&1 | grep ENOENT | awk '{print $1;}' | wc
 > -l
 > 35237
 >
 > It seems that there are 10x more files checked than necessary. Although I am
 > not sure if this is where most of the time is spent, it seems to be little
 > excessive.
 >
 > Łukasz
 >
 > 2016-05-15 21:30 GMT+02:00 Robby Findler <robby@eecs.northwestern.edu>:
 >>
 >> Looking more carefully at strace's output, it appears that the 25k
 >> stat lines are when racket is trying to find the files to require.
 >> There don't appear to be many directly repeated lines in there (when I
 >> grep for ENOENT I see 25k lines and when I remove duplicate lines
 >> there are still 13k lines) but maybe there is a way that somehow the
 >> search for collections can be improved because there are only about
 >> 500 or so files (according to the trace from below).
 >>
 >> More interestingly, when changing from (require redex) to (require
 >> redex/reduction-semantics) there are about half as many files loaded
 >> (according to the code below), but there are more like 10x the number
 >> of calls to stat according to strace.
 >>
 >> I haven't found it yet, but that 10x vs 2x suggests that maybe there
 >> is something interesting remaining to be discovered here.
 >>
 >> Robby
 >>
 >> #lang racket/base
 >> (require racket/list)
 >> (require mred)
 >>
 >> (define (process what)
 >>   (define ht (make-hash))
 >>   (parameterize ([current-load/use-compiled
 >>                   (let ([orig (current-load/use-compiled)])
 >>                     (λ (pth thing)
 >>                       (define k (simplify-path (path->string pth)))
 >>                       (hash-set! ht k (+ (hash-ref ht k 0) 1))
 >>                       (orig pth thing)))]
 >>                  [current-namespace (make-gui-namespace)])
 >>     (dynamic-require what #f))
 >>   (values (take (sort (hash-map ht list) > #:key cadr) 10)
 >>           (hash-count ht)))
 >>
 >> (process 'redex)
 >> (process 'redex/reduction-semantics)
 >
 >
 
