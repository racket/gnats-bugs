From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Apr  5 06:17:55 2013
Received: from mail-oa0-f53.google.com (mail-oa0-f53.google.com [209.85.219.53])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r35AHpPE005659
	for <bugs@bugs.plt-scheme.org>; Fri, 5 Apr 2013 06:17:52 -0400
Message-Id: <201304051017.r35AHoMN005654@champlain.ccs.neu.edu>
Date: Fri, 5 Apr 2013 06:17:50 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Package distribution as zip files

>Number:         13659
>Category:       all
>Synopsis:       Package distribution as zip files
>Class:          sw-bug
>Responsible:    jay
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Apr 05 06:20:01 -0400 2013
>Closed-Date:    Mon Apr 29 17:02:55 -0400 2013
>Last-Modified:  Mon Apr 29 17:02:55 -0400 2013
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Any
>Description:
In the section about publishing a package manually, it looks like the
only acceptable format is a zip file, but there's only a vague
recommendation ("it is preferable") to use the package command, but no
description of what goes in the zip file in case people want to use
other tools.  (This is actually a sub-bug, but maybe it's not documented
intentionally.)

But in addition to this, there is also no description of what gets used
if there is no checksum file.  It would be nice if it used the date as
reported by a header query for the server.  (This might be what the code
is doing anyway, and in that case the only thing to fix is the docs.)

Using this, it is possible to have random zip files serve as packages.
But related to this, it would be also good to be able to use gitweb-
generated zip files as packages, which means that packages could be
hosted on our server with no further work.  The only issue there is that
the zip file will have a directory structure, and I see that "pkg
create" puts everything at the top of the zip file.  A way to do this is
to implement some kind of search for known files, like a zip file with a
single directory that contains an "info.rkt" file -- and describe this
behavior too, of course.

And a different yet very related problem: having a flat bunch of files
in a zip file (or in a tgz) is very "impolite": there are many people
who expect to be able to unzip these things to look inside them, and
having no directory is obviously painful.  (For example, such tar files
are called tar-bombs: http://www.linfo.org/tarbomb.html)
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13659: Package distribution as zip files
Date: Sat, 6 Apr 2013 14:49:17 -0600

 On Fri, Apr 5, 2013 at 4:20 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13659
 >
 > Reported by Eli Barzilay for release: HEAD
 >
 > *** Description:
 > In the section about publishing a package manually, it looks like the
 > only acceptable format is a zip file, but there's only a vague
 > recommendation ("it is preferable") to use the package command,
 
 Zip is not mentioned in any way. It is simply the default, so the
 further commands have to use it.
 
 > but no
 > description of what goes in the zip file in case people want to use
 > other tools.  (This is actually a sub-bug, but maybe it's not documented
 > intentionally.)
 
 The package contents go in it... what else would? The documentation says
 
 "A package is a set of modules in some number of collections."
 and
 "The package directory can contain a file named"info.rkt" to declare
 other metadata "
 
 So this is fully defined.
 
 > But in addition to this, there is also no description of what gets used
 > if there is no checksum file.  It would be nice if it used the date as
 > reported by a header query for the server.  (This might be what the code
 > is doing anyway, and in that case the only thing to fix is the docs.)
 
 Nothing is used if there is no checksum. All the commands default to
 failure if the checksum is not present. The only other option is force
 installation.
 
 > Using this, it is possible to have random zip files serve as packages.
 
 This is true of the current system
 
 > But related to this, it would be also good to be able to use gitweb-
 > generated zip files as packages, which means that packages could be
 > hosted on our server with no further work.  The only issue there is that
 > the zip file will have a directory structure, and I see that "pkg
 > create" puts everything at the top of the zip file.  A way to do this is
 > to implement some kind of search for known files, like a zip file with a
 > single directory that contains an "info.rkt" file -- and describe this
 > behavior too, of course.
 >
 > And a different yet very related problem: having a flat bunch of files
 > in a zip file (or in a tgz) is very "impolite": there are many people
 > who expect to be able to unzip these things to look inside them, and
 > having no directory is obviously painful.  (For example, such tar files
 > are called tar-bombs: http://www.linfo.org/tarbomb.html)
 
 A package archive is an archive of the package, which is a set of collections.
 
 Jay
 
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > Any
 >
 
 
 
 --
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
From: Eli Barzilay <eli@barzilay.org>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13659: Package distribution as zip files
Date: Sat, 6 Apr 2013 17:35:30 -0400

 30 minutes ago, Jay McCarthy wrote:
 > On Fri, Apr 5, 2013 at 4:20 AM,  <eli@barzilay.org> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=13659
 > >
 > > Reported by Eli Barzilay for release: HEAD
 > >
 > > *** Description:
 > > In the section about publishing a package manually, it looks like the
 > > only acceptable format is a zip file, but there's only a vague
 > > recommendation ("it is preferable") to use the package command,
 > 
 > Zip is not mentioned in any way. It is simply the default, so the
 > further commands have to use it.
 
 The sample "scp" command has ".zip" and in the URL.  If it can have
 another format, then these two should be clarified further.
 
 
 > > but no description of what goes in the zip file in case people
 > > want to use other tools.  (This is actually a sub-bug, but maybe
 > > it's not documented intentionally.)
 > 
 > The package contents go in it... what else would?
 
 Is it expected to be in a subdirectory or not?  If so, should the
 subdirectory have a name that follows some format?  If not, how would
 it know which collection to install it to?  Is there any metadata that
 goes outside of the info file?  There is an option somewhere to create
 a manifest file -- is that needed?  Where do I put things like an
 icon/logo for my library, a readme file, etc?
 
 I'm not looking for answers to these things -- they're just the bunch
 of random questions I ask myself when I look at a new package system.
 
 
 > The documentation says
 > 
 > "A package is a set of modules in some number of collections."
 > and
 > "The package directory can contain a file named"info.rkt" to declare
 > other metadata "
 
 OK, I found this in the "package concepts" page.  That's *not* a place
 that I would look in when I'm trying to create a package.  So the
 least that should be added is a link from the manual deployment
 section to that part.
 
 In addition, it's not a good explanation.  It looks like you're using
 "collection" in the sense of a "directory", but the meaning of
 "collection" was never strictly tied to a directory -- and see also
 the description from the guide that you linked to:
 
     A collection is a set of installed library modules.
 
 So if you do talk about subdirectories, this requires further
 clarification.
 
 
 > > But in addition to this, there is also no description of what gets
 > > used if there is no checksum file.  It would be nice if it used
 > > the date as reported by a header query for the server.  (This
 > > might be what the code is doing anyway, and in that case the only
 > > thing to fix is the docs.)
 > 
 > Nothing is used if there is no checksum. All the commands default to
 > failure if the checksum is not present. The only other option is
 > force installation.
 
 (OK, this is bad for something that is no longer related to this, so
 I'll file a separate PR.)
 
 
 > > Using this, it is possible to have random zip files serve as
 > > packages.
 > 
 > This is true of the current system
 
 (And the contents of this PR is the negation of this conclusion...)
 
 
 > > But related to this, it would be also good to be able to use
 > > gitweb- generated zip files as packages, which means that packages
 > > could be hosted on our server with no further work.  The only
 > > issue there is that the zip file will have a directory structure,
 > > and I see that "pkg create" puts everything at the top of the zip
 > > file.  A way to do this is to implement some kind of search for
 > > known files, like a zip file with a single directory that contains
 > > an "info.rkt" file -- and describe this behavior too, of course.
 > >
 > > And a different yet very related problem: having a flat bunch of
 > > files in a zip file (or in a tgz) is very "impolite": there are
 > > many people who expect to be able to unzip these things to look
 > > inside them, and having no directory is obviously painful.  (For
 > > example, such tar files are called tar-bombs:
 > > http://www.linfo.org/tarbomb.html)
 > 
 > A package archive is an archive of the package, which is a set of
 > collections.
 
 Here's what I did:
 
     raco pkg create ~/.racket/5.3.3.8/collects/pl
 
 and the resulting zip file had the contents of that directory as is,
 not in a directory.  If that's a wrong use, then it's an easy mistake
 to make, and people should somehow be protected from doing it.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13659: Package distribution as zip files
Date: Sat, 6 Apr 2013 15:51:17 -0600

 On Sat, Apr 6, 2013 at 3:35 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 30 minutes ago, Jay McCarthy wrote:
 >> On Fri, Apr 5, 2013 at 4:20 AM,  <eli@barzilay.org> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13659
 >> >
 >> > Reported by Eli Barzilay for release: HEAD
 >> >
 >> > *** Description:
 >> > In the section about publishing a package manually, it looks like the
 >> > only acceptable format is a zip file, but there's only a vague
 >> > recommendation ("it is preferable") to use the package command,
 >>
 >> Zip is not mentioned in any way. It is simply the default, so the
 >> further commands have to use it.
 >
 > The sample "scp" command has ".zip" and in the URL.  If it can have
 > another format, then these two should be clarified further.
 
 This section is not exhaustive documentation on "raco pkg create". You
 can read that here:
 
 http://docs.racket-lang.org/planet2/Managing_Packages.html#(raco-pkg-cmd._create)
 
 >> > but no description of what goes in the zip file in case people
 >> > want to use other tools.  (This is actually a sub-bug, but maybe
 >> > it's not documented intentionally.)
 >>
 >> The package contents go in it... what else would?
 >
 > Is it expected to be in a subdirectory or not?
 
 No. Why would it? Should we have an exhaustive of all the things that
 don't need to be there? You don't need to include your SSN. You don't
 need to get a signature in triplicate.
 
 There's no list of what to contain, because there's nothing required
 other than *what the package is*. It's *just* the package contents. Is
 this some place in the documentation that makes you think there will
 be other stuff?
 
 >  If so, should the
 > subdirectory have a name that follows some format?  If not, how would
 > it know which collection to install it to?
 
 Package is a set of collections, not a collection, so there is no
 "collection to install it to".
 
 >  Is there any metadata that
 > goes outside of the info file?
 
 No
 
 >  There is an option somewhere to create
 > a manifest file -- is that needed?
 
 No, which the package concept page explains. A manifest is only used
 in the directory URL source format.
 
 >  Where do I put things like an
 > icon/logo for my library, a readme file, etc?
 
 Those are not visible to Racket, so they are not mandated in any way
 by the package system. You can put them wherever you want.
 
 > I'm not looking for answers to these things -- they're just the bunch
 > of random questions I ask myself when I look at a new package system.
 >
 >
 >> The documentation says
 >>
 >> "A package is a set of modules in some number of collections."
 >> and
 >> "The package directory can contain a file named"info.rkt" to declare
 >> other metadata "
 >
 > OK, I found this in the "package concepts" page.  That's *not* a place
 > that I would look in when I'm trying to create a package.  So the
 > least that should be added is a link from the manual deployment
 > section to that part.
 
 I think it is reasonable for you to try to understand X before you try
 to create X.
 
 >
 > In addition, it's not a good explanation.  It looks like you're using
 > "collection" in the sense of a "directory", but the meaning of
 > "collection" was never strictly tied to a directory -- and see also
 > the description from the guide that you linked to:
 >
 >     A collection is a set of installed library modules.
 >
 > So if you do talk about subdirectories, this requires further
 > clarification.
 
 Perhaps we should go through and change "collection" to "collection
 directory" then.
 
 >> > But in addition to this, there is also no description of what gets
 >> > used if there is no checksum file.  It would be nice if it used
 >> > the date as reported by a header query for the server.  (This
 >> > might be what the code is doing anyway, and in that case the only
 >> > thing to fix is the docs.)
 >>
 >> Nothing is used if there is no checksum. All the commands default to
 >> failure if the checksum is not present. The only other option is
 >> force installation.
 >
 > (OK, this is bad for something that is no longer related to this, so
 > I'll file a separate PR.)
 >
 >
 >> > Using this, it is possible to have random zip files serve as
 >> > packages.
 >>
 >> This is true of the current system
 >
 > (And the contents of this PR is the negation of this conclusion...)
 
 This is bogus. Try this:
 
 cd /tmp
 mkdir - example-pkg/collection-1
 echo '#lang racket 2' > example-pkg/collection-1/a.rkt
 cd example-pkg
 zip -r ../random.zip .
 
 and now "random.zip" is a package
 
 In fact, *every* zip file in existence is already a package, although
 probably unlikely to contain any Racket code.
 
 >> > But related to this, it would be also good to be able to use
 >> > gitweb- generated zip files as packages, which means that packages
 >> > could be hosted on our server with no further work.  The only
 >> > issue there is that the zip file will have a directory structure,
 >> > and I see that "pkg create" puts everything at the top of the zip
 >> > file.  A way to do this is to implement some kind of search for
 >> > known files, like a zip file with a single directory that contains
 >> > an "info.rkt" file -- and describe this behavior too, of course.
 >> >
 >> > And a different yet very related problem: having a flat bunch of
 >> > files in a zip file (or in a tgz) is very "impolite": there are
 >> > many people who expect to be able to unzip these things to look
 >> > inside them, and having no directory is obviously painful.  (For
 >> > example, such tar files are called tar-bombs:
 >> > http://www.linfo.org/tarbomb.html)
 >>
 >> A package archive is an archive of the package, which is a set of
 >> collections.
 >
 > Here's what I did:
 >
 >     raco pkg create ~/.racket/5.3.3.8/collects/pl
 >
 > and the resulting zip file had the contents of that directory as is,
 > not in a directory.  If that's a wrong use, then it's an easy mistake
 > to make, and people should somehow be protected from doing it.
 
 That's a valid command, but it probably doesn't mean what you think.
 
 If collects/pl had subdirectories a, b, and c, then your command
 created a package named "pl" that had the "a" collection, "b"
 collection, and "c" collection. It's unlikely you meant this, but from
 "raco pkg create"'s perspective, you just gave it a directory; how
 could it know you didn't want the a, b, and c collections?
 
 Jay
 
 --
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13659: Package distribution as zip files
Date: Sat, 6 Apr 2013 16:57:02 -0500

 --e89a8ff1cd48a67d5904d9b848c9
 Content-Type: text/plain; charset=UTF-8
 
 On Sat, Apr 6, 2013 at 4:51 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 
 > On Sat, Apr 6, 2013 at 3:35 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > Here's what I did:
 > >
 > >     raco pkg create ~/.racket/5.3.3.8/collects/pl
 > >
 > > and the resulting zip file had the contents of that directory as is,
 > > not in a directory.  If that's a wrong use, then it's an easy mistake
 > > to make, and people should somehow be protected from doing it.
 >
 >
 
 > That's a valid command, but it probably doesn't mean what you think.
 >
 > If collects/pl had subdirectories a, b, and c, then your command
 > created a package named "pl" that had the "a" collection, "b"
 > collection, and "c" collection. It's unlikely you meant this, but from
 > "raco pkg create"'s perspective, you just gave it a directory; how
 > could it know you didn't want the a, b, and c collections?
 >
 
 
 It probably would have helped if raco pkg create gave a little status
 output saying what it did. (Not that I'm saying who should take on this
 change.)
 
 Also, I noticed that if I pass an empty (but existing) directory on the
 command-line, then raco pkg create calls 'zip' in a way that causes it to
 signal an error. Probably raco pkg create should signal its own error
 (ditto).
 
 $ raco pkg create ~/Desktop/x/
 zip: no paths specified
   context...:
    /Users/robby/git/plt/collects/file/zip.rkt:264:2: zip
    f600
    /Users/robby/git/plt/collects/pkg/main.rkt: [running body]
    /Users/robby/git/plt/collects/pkg/raco.rkt: [traversing imports]
    /Users/robby/git/plt/collects/raco/raco.rkt: [running body]
    /Users/robby/git/plt/collects/raco/main.rkt: [running body]
 
 
 Robby
 
 --e89a8ff1cd48a67d5904d9b848c9
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">On Sat, Apr 6, 2013 at 4:51 PM, Jay McCarthy <span dir=3D"=
 ltr">&lt;<a href=3D"mailto:jay.mccarthy@gmail.com" target=3D"_blank">jay.mc=
 carthy@gmail.com</a>&gt;</span> wrote:<br><div class=3D"gmail_extra"><div c=
 lass=3D"gmail_quote">
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex"><div class=3D"im">On Sat, Apr 6, 2013 at 3:35 PM, Eli Barz=
 ilay &lt;<a href=3D"mailto:eli@barzilay.org">eli@barzilay.org</a>&gt; wrote=
 :<br>
 
 
 &gt; Here&#39;s what I did:<br>
 &gt;<br>
 &gt; =C2=A0 =C2=A0 raco pkg create ~/.racket/<a href=3D"http://5.3.3.8/coll=
 ects/pl" target=3D"_blank">5.3.3.8/collects/pl</a><br>
 &gt;<br>
 &gt; and the resulting zip file had the contents of that directory as is,<b=
 r>
 &gt; not in a directory. =C2=A0If that&#39;s a wrong use, then it&#39;s an =
 easy mistake<br>
 &gt; to make, and people should somehow be protected from doing it.<br>
 <br>
 </div></blockquote><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=
 =3D"margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(20=
 4,204,204);border-left-style:solid;padding-left:1ex">That&#39;s a valid com=
 mand, but it probably doesn&#39;t mean what you think.<br>
 
 <br>
 If collects/pl had subdirectories a, b, and c, then your command<br>
 created a package named &quot;pl&quot; that had the &quot;a&quot; collectio=
 n, &quot;b&quot;<br>
 collection, and &quot;c&quot; collection. It&#39;s unlikely you meant this,=
  but from<br>
 &quot;raco pkg create&quot;&#39;s perspective, you just gave it a directory=
 ; how<br>
 could it know you didn&#39;t want the a, b, and c collections?<br>
 <span class=3D""><font color=3D"#888888"></font></span>=C2=A0</blockquote><=
 div><br></div><div style>It probably would have helped if raco pkg create g=
 ave a little status output saying what it did. (Not that I&#39;m saying who=
  should take on this change.)</div>
 <div style><br></div><div style>Also, I noticed that if I pass an empty (bu=
 t existing) directory on the command-line, then raco pkg create calls &#39;=
 zip&#39; in a way that causes it to signal an error. Probably raco pkg crea=
 te should signal its own error (ditto).</div>
 <div style><br></div><div style><div>$ raco pkg create ~/Desktop/x/</div><d=
 iv>zip: no paths specified</div><div>=C2=A0 context...:</div><div>=C2=A0 =
 =C2=A0/Users/robby/git/plt/collects/file/zip.rkt:264:2: zip</div><div>=C2=
 =A0 =C2=A0f600</div><div>
 =C2=A0 =C2=A0/Users/robby/git/plt/collects/pkg/main.rkt: [running body]</di=
 v><div>=C2=A0 =C2=A0/Users/robby/git/plt/collects/pkg/raco.rkt: [traversing=
  imports]</div><div>=C2=A0 =C2=A0/Users/robby/git/plt/collects/raco/raco.rk=
 t: [running body]</div><div>
 =C2=A0 =C2=A0/Users/robby/git/plt/collects/raco/main.rkt: [running body]</d=
 iv><div><br></div></div><div style><br></div><div style>Robby=C2=A0</div></=
 div><br></div></div>
 
 --e89a8ff1cd48a67d5904d9b848c9--
From: Eli Barzilay <eli@barzilay.org>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13659: Package distribution as zip files
Date: Sat, 6 Apr 2013 18:26:40 -0400

 20 minutes ago, Jay McCarthy wrote:
 > On Sat, Apr 6, 2013 at 3:35 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > 30 minutes ago, Jay McCarthy wrote:
 > >> On Fri, Apr 5, 2013 at 4:20 AM,  <eli@barzilay.org> wrote:
 > >> > In the section about publishing a package manually, it looks
 > >> > like the only acceptable format is a zip file, but there's only
 > >> > a vague recommendation ("it is preferable") to use the package
 > >> > command,
 > >>
 > >> Zip is not mentioned in any way. It is simply the default, so the
 > >> further commands have to use it.
 > >
 > > The sample "scp" command has ".zip" and in the URL.  If it can
 > > have another format, then these two should be clarified further.
 > 
 > This section is not exhaustive documentation on "raco pkg
 > create". You can read that here:
 > 
 > http://docs.racket-lang.org/planet2/Managing_Packages.html#(raco-pkg-cmd._create)
 
 I don't know how this is related to what I talked about.  According to
 the little text that I've seen in the manual deployment page, I got
 the impression that it should be a zip file.  For this, I'm just
 asking to make that text clearer, for the sake of people who will want
 to create packages directly, not through "pkg create".
 
 
 > >> > but no description of what goes in the zip file in case people
 > >> > want to use other tools.  (This is actually a sub-bug, but
 > >> > maybe it's not documented intentionally.)
 > >>
 > >> The package contents go in it... what else would?
 > >
 > > Is it expected to be in a subdirectory or not?
 > 
 > No. Why would it?
 
 (Um...  I'm thoroughly confused then.  According to the below, the
 code *should* be in a subdirectory.)
 
 
 > Should we have an exhaustive of all the things that don't need to be
 > there? You don't need to include your SSN. You don't need to get a
 > signature in triplicate.
 
 Sarcasm is unnecessary, I made a list of things that could very
 possibly go into a package.  Even the place where the files are
 (subdirectory or not) is obviously not clear enough.
 
 
 > There's no list of what to contain, because there's nothing required
 > other than *what the package is*. It's *just* the package contents. Is
 > this some place in the documentation that makes you think there will
 > be other stuff?
 
 Please try to read this from a point of view of someone who doesn't
 know what should be in.  "What a package is" doesn't help if I really
 don't know what goes in a package.  Same goes for "package contents".
 If I'm creating a zip file by myslef, then that could be one of
 
     cd ~/code/foo; zip ~/html/public/foo.zip *
     cd ~/code; zip ~/html/public/foo.zip foo
     (etc)
 
 
 > > If so, should the subdirectory have a name that follows some
 > > format?  If not, how would it know which collection to install it
 > > to?
 > 
 > Package is a set of collections, not a collection, so there is no
 > "collection to install it to".
 
 (OK, (a) clear now, (b) contradicts the "No. Why would it?" above; (c)
 related to the next PR.)
 
 (Ignoring the rest: like I said, I wasn't looking for concrete
 answers.)
 
 
 > > OK, I found this in the "package concepts" page.  That's *not* a
 > > place that I would look in when I'm trying to create a package.
 > > So the least that should be added is a link from the manual
 > > deployment section to that part.
 > 
 > I think it is reasonable for you to try to understand X before you
 > try to create X.
 
 I find this approach unreasonable.  The set of people who did not read
 the first page is now provably containing at least one person.  Is it
 really so much of a big deal to add a link and to describe things
 better?
 
 
 > >> > Using this, it is possible to have random zip files serve as
 > >> > packages.
 > >>
 > >> This is true of the current system
 > >
 > > (And the contents of this PR is the negation of this conclusion...)
 > 
 > This is bogus. Try this:
 > 
 > cd /tmp
 > mkdir - example-pkg/collection-1
 > echo '#lang racket 2' > example-pkg/collection-1/a.rkt
 > cd example-pkg
 > zip -r ../random.zip .
 > 
 > and now "random.zip" is a package
 > 
 > In fact, *every* zip file in existence is already a package,
 > although probably unlikely to contain any Racket code.
 
 The broken part is "serve".  According to you, if I follow this with
 
   mv ../random.zip ~/html/public
 
 then it's not usable.
 
 
 > > Here's what I did:
 > >
 > >     raco pkg create ~/.racket/5.3.3.8/collects/pl
 > >
 > > and the resulting zip file had the contents of that directory as
 > > is, not in a directory.  If that's a wrong use, then it's an easy
 > > mistake to make, and people should somehow be protected from doing
 > > it.
 > 
 > That's a valid command, but it probably doesn't mean what you think.
 > 
 > If collects/pl had subdirectories a, b, and c, then your command
 > created a package named "pl" that had the "a" collection, "b"
 > collection, and "c" collection. It's unlikely you meant this, but
 > from "raco pkg create"'s perspective, you just gave it a directory;
 > how could it know you didn't want the a, b, and c collections?
 
 It has a whole pile of files, most of them *.rkt files, it has no
 subdirectory with an info file, it has a bogus collection directory
 called "compiled".
 
 Also, what happens with toplevel files in a zip file if I install it?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13659: Package distribution as zip files
Date: Sat, 6 Apr 2013 17:22:34 -0600

 On Sat, Apr 6, 2013 at 4:26 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 20 minutes ago, Jay McCarthy wrote:
 >> On Sat, Apr 6, 2013 at 3:35 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > 30 minutes ago, Jay McCarthy wrote:
 >> >> On Fri, Apr 5, 2013 at 4:20 AM,  <eli@barzilay.org> wrote:
 >> >> > In the section about publishing a package manually, it looks
 >> >> > like the only acceptable format is a zip file, but there's only
 >> >> > a vague recommendation ("it is preferable") to use the package
 >> >> > command,
 >> >>
 >> >> Zip is not mentioned in any way. It is simply the default, so the
 >> >> further commands have to use it.
 >> >
 >> > The sample "scp" command has ".zip" and in the URL.  If it can
 >> > have another format, then these two should be clarified further.
 >>
 >> This section is not exhaustive documentation on "raco pkg
 >> create". You can read that here:
 >>
 >> http://docs.racket-lang.org/planet2/Managing_Packages.html#(raco-pkg-cmd._create)
 >
 > I don't know how this is related to what I talked about.  According to
 > the little text that I've seen in the manual deployment page, I got
 > the impression that it should be a zip file.
 
 The text does not mention "zip". It uses "pkg create" with the default
 arguments, so a zip gets created. If you are curious about what "pkg
 create" does, then is it not reasonable to read the "pkg create"
 documentation?
 
 >  For this, I'm just
 > asking to make that text clearer, for the sake of people who will want
 > to create packages directly, not through "pkg create".
 
 What do you want the text to be changed to?
 
 >
 >> >> > but no description of what goes in the zip file in case people
 >> >> > want to use other tools.  (This is actually a sub-bug, but
 >> >> > maybe it's not documented intentionally.)
 >> >>
 >> >> The package contents go in it... what else would?
 >> >
 >> > Is it expected to be in a subdirectory or not?
 >>
 >> No. Why would it?
 >
 > (Um...  I'm thoroughly confused then.  According to the below, the
 > code *should* be in a subdirectory.)
 
 The package contents are not in a subdirectory. But the package
 contents are a set of collections, which are themselves directories.
 
 >
 >> Should we have an exhaustive of all the things that don't need to be
 >> there? You don't need to include your SSN. You don't need to get a
 >> signature in triplicate.
 >
 > Sarcasm is unnecessary, I made a list of things that could very
 > possibly go into a package.  Even the place where the files are
 > (subdirectory or not) is obviously not clear enough.
 >
 >
 >> There's no list of what to contain, because there's nothing required
 >> other than *what the package is*. It's *just* the package contents. Is
 >> this some place in the documentation that makes you think there will
 >> be other stuff?
 >
 > Please try to read this from a point of view of someone who doesn't
 > know what should be in.  "What a package is" doesn't help if I really
 > don't know what goes in a package.  Same goes for "package contents".
 > If I'm creating a zip file by myslef, then that could be one of
 >
 >     cd ~/code/foo; zip ~/html/public/foo.zip *
 >     cd ~/code; zip ~/html/public/foo.zip foo
 >     (etc)
 
 Yes and both of them are right for different situations. If "foo" is a
 collection root, then the first is correct. If "foo" is a collection,
 then the second is correct.
 
 >
 >> > If so, should the subdirectory have a name that follows some
 >> > format?  If not, how would it know which collection to install it
 >> > to?
 >>
 >> Package is a set of collections, not a collection, so there is no
 >> "collection to install it to".
 >
 > (OK, (a) clear now, (b) contradicts the "No. Why would it?" above; (c)
 > related to the next PR.)
 >
 > (Ignoring the rest: like I said, I wasn't looking for concrete
 > answers.)
 >
 >
 >> > OK, I found this in the "package concepts" page.  That's *not* a
 >> > place that I would look in when I'm trying to create a package.
 >> > So the least that should be added is a link from the manual
 >> > deployment section to that part.
 >>
 >> I think it is reasonable for you to try to understand X before you
 >> try to create X.
 >
 > I find this approach unreasonable.  The set of people who did not read
 > the first page is now provably containing at least one person.  Is it
 > really so much of a big deal to add a link and to describe things
 > better?
 
 There *is* a link. It is on the left side of the package where it says
 "Package concepts". Re: the text. I honestly have no idea what text
 you want it to say. "Please read the documentation about what a
 package *is* before trying to make one." is what I would say
 
 >
 >> >> > Using this, it is possible to have random zip files serve as
 >> >> > packages.
 >> >>
 >> >> This is true of the current system
 >> >
 >> > (And the contents of this PR is the negation of this conclusion...)
 >>
 >> This is bogus. Try this:
 >>
 >> cd /tmp
 >> mkdir - example-pkg/collection-1
 >> echo '#lang racket 2' > example-pkg/collection-1/a.rkt
 >> cd example-pkg
 >> zip -r ../random.zip .
 >>
 >> and now "random.zip" is a package
 >>
 >> In fact, *every* zip file in existence is already a package,
 >> although probably unlikely to contain any Racket code.
 >
 > The broken part is "serve".  According to you, if I follow this with
 >
 >   mv ../random.zip ~/html/public
 >
 > then it's not usable.
 
 Why is it not usable?
 
 >
 >
 >> > Here's what I did:
 >> >
 >> >     raco pkg create ~/.racket/5.3.3.8/collects/pl
 >> >
 >> > and the resulting zip file had the contents of that directory as
 >> > is, not in a directory.  If that's a wrong use, then it's an easy
 >> > mistake to make, and people should somehow be protected from doing
 >> > it.
 >>
 >> That's a valid command, but it probably doesn't mean what you think.
 >>
 >> If collects/pl had subdirectories a, b, and c, then your command
 >> created a package named "pl" that had the "a" collection, "b"
 >> collection, and "c" collection. It's unlikely you meant this, but
 >> from "raco pkg create"'s perspective, you just gave it a directory;
 >> how could it know you didn't want the a, b, and c collections?
 >
 > It has a whole pile of files, most of them *.rkt files, it has no
 > subdirectory with an info file, it has a bogus collection directory
 > called "compiled".
 
 The info file is always optional, so it doesn't matter that it isn't there.
 
 > Also, what happens with toplevel files in a zip file if I install it?
 
 They get put into the installation directory but they are not usable
 by Racket, because they aren't part of a collection, so you can never
 require them. They are also never in conflict with other top-level
 files of other packages for the same reason
 
 Jay
 
 --
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
Responsible changed from "nobody" to "jay" by jay@racket-lang.org at Mon, 29 Apr 2013 17:02:55 -0400
Reason>>> A commit by jay@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5aed43de52
State changed from "open" to "closed" by jay@racket-lang.org at Mon, 29 Apr 2013 17:02:55 -0400
Reason>>> A commit by jay@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5aed43de52
  | Fixes PR13659. There's nothing wrong with an empty zip file, so zip shouldn't error

