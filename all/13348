From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Dec  5 21:37:59 2012
Received: from mail-ie0-f171.google.com (mail-ie0-f171.google.com [209.85.223.171])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id qB62buog018442
	for <bugs@bugs.plt-scheme.org>; Wed, 5 Dec 2012 21:37:56 -0500
Message-Id: <201212060237.qB62bqwj018436@champlain.ccs.neu.edu>
Date: Wed, 5 Dec 2012 21:37:52 -0500
From: dvanhorn@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Redex: render-reduction-relation ignores context-closure

>Number:         13348
>Category:       all
>Synopsis:       Redex: render-reduction-relation ignores context-closure
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Dec 05 21:40:01 -0500 2012
>Last-Modified:  Thu Dec 06 22:16:01 -0500 2012
>Originator:     David Van Horn
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1.9--2012-12-03(5163d424/d)
>Environment:
macosx "Darwin doom.local 12.2.0 Darwin Kernel Version 12.2.0: Sat Aug 25 00:48:52 PDT 2012; root:xnu-2050.18.24~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 537515488
Links: (links) = ("tests" "raco-git" "eqil" "var" "class"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/Users/dvanhorn/Documents/git/ralist> #<path:/Users/dvanhorn/Documents/git/fector> #<path:/Users/dvanhorn/Documents/git/pcf>); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/dvanhorn/Library/Racket/5.3.1.9/collects"
 ("info-domain"))
("/Users/dvanhorn/Documents/git/racket/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace" "typed" "typed-racket" "type!
 d-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Rendering a relation defined with context-closure
just renders the relation and not its closure.

Rendering a relation using `with' also just
throws away the "with" part of the relation.
>How-To-Repeat:
#lang racket
(require redex)

(define-language L
  (M natural (+ M M) (- M M))
  (E hole (+ E M) (+ natural E)))

(define s
  (reduction-relation 
   L
   (--> (+ natural_1 natural_2)
        ,(+ (term natural_1) (term natural_2)))))

(render-reduction-relation (context-closure s L E))

(define t
  (reduction-relation
   L
   (==> (+ natural_1 natural_2)
        ,(+ (term natural_1) (term natural_2)))
   with
   [(--> (in-hole E M_0) (in-hole E M_1))
    (==> M_0 M_1)]))

(render-reduction-relation t)
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13348: Redex: render-reduction-relation ignores context-closure
Date: Wed, 5 Dec 2012 21:20:12 -0600

 The context-closure part is at least intentional.
 
 Am I'm not sure what to do with the with part. I suppose there could
 be a separate pict that you could get that was rendering only (parts
 of) the with. Would that be useful?
 
 Robby
 
 On Wed, Dec 5, 2012 at 8:40 PM,  <dvanhorn@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13348
 >
 > Reported by David Van Horn for release: 5.3.1.9--2012-12-03(5163d424/d)
 >
 > *** Description:
 > Rendering a relation defined with context-closure
 > just renders the relation and not its closure.
 >
 > Rendering a relation using `with' also just
 > throws away the "with" part of the relation.
 >
 > *** How to repeat:
 > #lang racket
 > (require redex)
 >
 > (define-language L
 >   (M natural (+ M M) (- M M))
 >   (E hole (+ E M) (+ natural E)))
 >
 > (define s
 >   (reduction-relation
 >    L
 >    (--> (+ natural_1 natural_2)
 >         ,(+ (term natural_1) (term natural_2)))))
 >
 > (render-reduction-relation (context-closure s L E))
 >
 > (define t
 >   (reduction-relation
 >    L
 >    (==> (+ natural_1 natural_2)
 >         ,(+ (term natural_1) (term natural_2)))
 >    with
 >    [(--> (in-hole E M_0) (in-hole E M_1))
 >     (==> M_0 M_1)]))
 >
 > (render-reduction-relation t)
 >
 > *** Environment:
 > macosx "Darwin doom.local 12.2.0 Darwin Kernel Version 12.2.0: Sat Aug 25 00:48:52 PDT 2012; root:xnu-2050.18.24~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 537515488
 > Links: (links) = ("tests" "raco-git" "eqil" "var" "class"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/Users/dvanhorn/Documents/git/ralist> #<path:/Users/dvanhorn/Documents/git/fector> #<path:/Users/dvanhorn/Documents/git/pcf>); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/Users/dvanhorn/Library/Racket/5.3.1.9/collects"
 >  ("info-domain"))
 > ("/Users/dvanhorn/Documents/git/racket/collects"
 >  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace" "typed" "typed-racket" "type!
 >  d-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
From: David Van Horn <dvanhorn@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13348: Redex: render-reduction-relation ignores
 context-closure
Date: Wed, 05 Dec 2012 22:45:20 -0500

 On 12/5/12 10:20 PM, Robby Findler wrote:
 > The context-closure part is at least intentional.
 >
 > Am I'm not sure what to do with the with part. I suppose there could
 > be a separate pict that you could get that was rendering only (parts
 > of) the with. Would that be useful?
 
 If the context-closure thing is intentional, I'm probably just stuck 
 rewriting my relations.  Alternatively, being able to generate a pict
 
     E[M] -> E[N] iff M ~> N
 
 would be fine.  (I think originally I thought that context-closure 
 should generate a pict that looks as if I had written the relation as 
 E[M] -> E[N] for each M -> N in the original relation, but I don't think 
 that's useful.)
 
 David
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: David Van Horn <dvanhorn@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13348: Redex: render-reduction-relation ignores context-closure
Date: Thu, 6 Dec 2012 02:11:45 -0600

 On Wed, Dec 5, 2012 at 9:45 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 > On 12/5/12 10:20 PM, Robby Findler wrote:
 >>
 >> The context-closure part is at least intentional.
 >>
 >> Am I'm not sure what to do with the with part. I suppose there could
 >> be a separate pict that you could get that was rendering only (parts
 >> of) the with. Would that be useful?
 >
 >
 > If the context-closure thing is intentional, I'm probably just stuck
 > rewriting my relations.
 
 I can try to add something! (But see the problem below.)
 
 > Alternatively, being able to generate a pict
 >
 >    E[M] -> E[N] iff M ~> N
 >
 > would be fine.
 
 Generating such a pict is what I would have in mind to capture the
 'with' section.
 
 > (I think originally I thought that context-closure should
 > generate a pict that looks as if I had written the relation as E[M] -> E[N]
 > for each M -> N in the original relation, but I don't think that's useful.)
 
 FWIW, doing rewrites like that for typesetting is tricky because of
 the way the typesetting works; as long as the "E" here is always on a
 single line I think it would be okay (as in this case), but when the
 user might have some complex expression then it is hard to compose the
 information that goes into the typesetting since it is all based on
 source locations in the program text.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13348: Redex: render-reduction-relation ignores context-closure
Date: Thu, 6 Dec 2012 10:54:22 -0500

 Over the last couple of years, we have type-set such 
 specifications with tables that look like this, 
 especially in Christos's papers: 
 
     E[.]                    |--->            E[.]
 ---------------------------------------------------------------
       e                                        e'   beta
       e                                        e'   gamma 
       e                                        e'   delta 
 
 etc. It is compact and easy to understand. 
 
 
 
 
 
 
 On Dec 6, 2012, at 3:11 AM, Robby Findler wrote:
 
 > On Wed, Dec 5, 2012 at 9:45 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 >> On 12/5/12 10:20 PM, Robby Findler wrote:
 >>> 
 >>> The context-closure part is at least intentional.
 >>> 
 >>> Am I'm not sure what to do with the with part. I suppose there could
 >>> be a separate pict that you could get that was rendering only (parts
 >>> of) the with. Would that be useful?
 >> 
 >> 
 >> If the context-closure thing is intentional, I'm probably just stuck
 >> rewriting my relations.
 > 
 > I can try to add something! (But see the problem below.)
 > 
 >> Alternatively, being able to generate a pict
 >> 
 >>   E[M] -> E[N] iff M ~> N
 >> 
 >> would be fine.
 > 
 > Generating such a pict is what I would have in mind to capture the
 > 'with' section.
 > 
 >> (I think originally I thought that context-closure should
 >> generate a pict that looks as if I had written the relation as E[M] -> E[N]
 >> for each M -> N in the original relation, but I don't think that's useful.)
 > 
 > FWIW, doing rewrites like that for typesetting is tricky because of
 > the way the typesetting works; as long as the "E" here is always on a
 > single line I think it would be okay (as in this case), but when the
 > user might have some complex expression then it is hard to compose the
 > information that goes into the typesetting since it is all based on
 > source locations in the program text.
 > 
 > Robby
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13348: Redex: render-reduction-relation ignores context-closure
Date: Thu, 6 Dec 2012 11:08:24 -0600

 That's the kind of thing where I could give you the individual picts
 and (the "e"s and "e'"s) and you could reassemble them into such
 tables with the pict library.
 
 Does that seem helpful here?
 
 On Thu, Dec 6, 2012 at 9:54 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > Over the last couple of years, we have type-set such
 > specifications with tables that look like this,
 > especially in Christos's papers:
 >
 >     E[.]                    |--->            E[.]
 > ---------------------------------------------------------------
 >       e                                        e'   beta
 >       e                                        e'   gamma
 >       e                                        e'   delta
 >
 > etc. It is compact and easy to understand.
 >
 >
 >
 >
 >
 >
 > On Dec 6, 2012, at 3:11 AM, Robby Findler wrote:
 >
 >> On Wed, Dec 5, 2012 at 9:45 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 >>> On 12/5/12 10:20 PM, Robby Findler wrote:
 >>>>
 >>>> The context-closure part is at least intentional.
 >>>>
 >>>> Am I'm not sure what to do with the with part. I suppose there could
 >>>> be a separate pict that you could get that was rendering only (parts
 >>>> of) the with. Would that be useful?
 >>>
 >>>
 >>> If the context-closure thing is intentional, I'm probably just stuck
 >>> rewriting my relations.
 >>
 >> I can try to add something! (But see the problem below.)
 >>
 >>> Alternatively, being able to generate a pict
 >>>
 >>>   E[M] -> E[N] iff M ~> N
 >>>
 >>> would be fine.
 >>
 >> Generating such a pict is what I would have in mind to capture the
 >> 'with' section.
 >>
 >>> (I think originally I thought that context-closure should
 >>> generate a pict that looks as if I had written the relation as E[M] -> E[N]
 >>> for each M -> N in the original relation, but I don't think that's useful.)
 >>
 >> FWIW, doing rewrites like that for typesetting is tricky because of
 >> the way the typesetting works; as long as the "E" here is always on a
 >> single line I think it would be okay (as in this case), but when the
 >> user might have some complex expression then it is hard to compose the
 >> information that goes into the typesetting since it is all based on
 >> source locations in the program text.
 >>
 >> Robby
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13348: Redex: render-reduction-relation ignores context-closure
Date: Thu, 6 Dec 2012 14:04:27 -0500

 There's no way to produce it like this? 
 No building blocks, just the whole table. 
 
 
 On Dec 6, 2012, at 12:08 PM, Robby Findler wrote:
 
 > That's the kind of thing where I could give you the individual picts
 > and (the "e"s and "e'"s) and you could reassemble them into such
 > tables with the pict library.
 > 
 > Does that seem helpful here?
 > 
 > On Thu, Dec 6, 2012 at 9:54 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> 
 >> Over the last couple of years, we have type-set such
 >> specifications with tables that look like this,
 >> especially in Christos's papers:
 >> 
 >>    E[.]                    |--->            E[.]
 >> ---------------------------------------------------------------
 >>      e                                        e'   beta
 >>      e                                        e'   gamma
 >>      e                                        e'   delta
 >> 
 >> etc. It is compact and easy to understand.
 >> 
 >> 
 >> 
 >> 
 >> 
 >> 
 >> On Dec 6, 2012, at 3:11 AM, Robby Findler wrote:
 >> 
 >>> On Wed, Dec 5, 2012 at 9:45 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 >>>> On 12/5/12 10:20 PM, Robby Findler wrote:
 >>>>> 
 >>>>> The context-closure part is at least intentional.
 >>>>> 
 >>>>> Am I'm not sure what to do with the with part. I suppose there could
 >>>>> be a separate pict that you could get that was rendering only (parts
 >>>>> of) the with. Would that be useful?
 >>>> 
 >>>> 
 >>>> If the context-closure thing is intentional, I'm probably just stuck
 >>>> rewriting my relations.
 >>> 
 >>> I can try to add something! (But see the problem below.)
 >>> 
 >>>> Alternatively, being able to generate a pict
 >>>> 
 >>>>  E[M] -> E[N] iff M ~> N
 >>>> 
 >>>> would be fine.
 >>> 
 >>> Generating such a pict is what I would have in mind to capture the
 >>> 'with' section.
 >>> 
 >>>> (I think originally I thought that context-closure should
 >>>> generate a pict that looks as if I had written the relation as E[M] -> E[N]
 >>>> for each M -> N in the original relation, but I don't think that's useful.)
 >>> 
 >>> FWIW, doing rewrites like that for typesetting is tricky because of
 >>> the way the typesetting works; as long as the "E" here is always on a
 >>> single line I think it would be okay (as in this case), but when the
 >>> user might have some complex expression then it is hard to compose the
 >>> information that goes into the typesetting since it is all based on
 >>> source locations in the program text.
 >>> 
 >>> Robby
 >> 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13348: Redex: render-reduction-relation ignores context-closure
Date: Thu, 6 Dec 2012 20:06:42 -0600

 Of course, it could. BUt this seems like a pretty specialized use. I
 can see how it might be a useful helper function, but it doesn't seem
 like the only way one should typeset reduction relations.
 
 On Thu, Dec 6, 2012 at 1:04 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 >
 > There's no way to produce it like this?
 > No building blocks, just the whole table.
 >
 >
 > On Dec 6, 2012, at 12:08 PM, Robby Findler wrote:
 >
 >> That's the kind of thing where I could give you the individual picts
 >> and (the "e"s and "e'"s) and you could reassemble them into such
 >> tables with the pict library.
 >>
 >> Does that seem helpful here?
 >>
 >> On Thu, Dec 6, 2012 at 9:54 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >>>
 >>> Over the last couple of years, we have type-set such
 >>> specifications with tables that look like this,
 >>> especially in Christos's papers:
 >>>
 >>>    E[.]                    |--->            E[.]
 >>> ---------------------------------------------------------------
 >>>      e                                        e'   beta
 >>>      e                                        e'   gamma
 >>>      e                                        e'   delta
 >>>
 >>> etc. It is compact and easy to understand.
 >>>
 >>>
 >>>
 >>>
 >>>
 >>>
 >>> On Dec 6, 2012, at 3:11 AM, Robby Findler wrote:
 >>>
 >>>> On Wed, Dec 5, 2012 at 9:45 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 >>>>> On 12/5/12 10:20 PM, Robby Findler wrote:
 >>>>>>
 >>>>>> The context-closure part is at least intentional.
 >>>>>>
 >>>>>> Am I'm not sure what to do with the with part. I suppose there could
 >>>>>> be a separate pict that you could get that was rendering only (parts
 >>>>>> of) the with. Would that be useful?
 >>>>>
 >>>>>
 >>>>> If the context-closure thing is intentional, I'm probably just stuck
 >>>>> rewriting my relations.
 >>>>
 >>>> I can try to add something! (But see the problem below.)
 >>>>
 >>>>> Alternatively, being able to generate a pict
 >>>>>
 >>>>>  E[M] -> E[N] iff M ~> N
 >>>>>
 >>>>> would be fine.
 >>>>
 >>>> Generating such a pict is what I would have in mind to capture the
 >>>> 'with' section.
 >>>>
 >>>>> (I think originally I thought that context-closure should
 >>>>> generate a pict that looks as if I had written the relation as E[M] -> E[N]
 >>>>> for each M -> N in the original relation, but I don't think that's useful.)
 >>>>
 >>>> FWIW, doing rewrites like that for typesetting is tricky because of
 >>>> the way the typesetting works; as long as the "E" here is always on a
 >>>> single line I think it would be okay (as in this case), but when the
 >>>> user might have some complex expression then it is hard to compose the
 >>>> information that goes into the typesetting since it is all based on
 >>>> source locations in the program text.
 >>>>
 >>>> Robby
 >>>
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13348: Redex: render-reduction-relation ignores context-closure
Date: Thu, 6 Dec 2012 22:13:19 -0500

 Can we have two entry points for the function? 
 
 I think this rendering is actually a pretty good one, right enough to be a default. 
 The other entry point could return a matrix of images. 
 
 
 
 
 On Dec 6, 2012, at 9:06 PM, Robby Findler wrote:
 
 > Of course, it could. BUt this seems like a pretty specialized use. I
 > can see how it might be a useful helper function, but it doesn't seem
 > like the only way one should typeset reduction relations.
 > 
 > On Thu, Dec 6, 2012 at 1:04 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> 
 >> 
 >> There's no way to produce it like this?
 >> No building blocks, just the whole table.
 >> 
 >> 
 >> On Dec 6, 2012, at 12:08 PM, Robby Findler wrote:
 >> 
 >>> That's the kind of thing where I could give you the individual picts
 >>> and (the "e"s and "e'"s) and you could reassemble them into such
 >>> tables with the pict library.
 >>> 
 >>> Does that seem helpful here?
 >>> 
 >>> On Thu, Dec 6, 2012 at 9:54 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >>>> 
 >>>> Over the last couple of years, we have type-set such
 >>>> specifications with tables that look like this,
 >>>> especially in Christos's papers:
 >>>> 
 >>>>   E[.]                    |--->            E[.]
 >>>> ---------------------------------------------------------------
 >>>>     e                                        e'   beta
 >>>>     e                                        e'   gamma
 >>>>     e                                        e'   delta
 >>>> 
 >>>> etc. It is compact and easy to understand.
 >>>> 
 >>>> 
 >>>> 
 >>>> 
 >>>> 
 >>>> 
 >>>> On Dec 6, 2012, at 3:11 AM, Robby Findler wrote:
 >>>> 
 >>>>> On Wed, Dec 5, 2012 at 9:45 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 >>>>>> On 12/5/12 10:20 PM, Robby Findler wrote:
 >>>>>>> 
 >>>>>>> The context-closure part is at least intentional.
 >>>>>>> 
 >>>>>>> Am I'm not sure what to do with the with part. I suppose there could
 >>>>>>> be a separate pict that you could get that was rendering only (parts
 >>>>>>> of) the with. Would that be useful?
 >>>>>> 
 >>>>>> 
 >>>>>> If the context-closure thing is intentional, I'm probably just stuck
 >>>>>> rewriting my relations.
 >>>>> 
 >>>>> I can try to add something! (But see the problem below.)
 >>>>> 
 >>>>>> Alternatively, being able to generate a pict
 >>>>>> 
 >>>>>> E[M] -> E[N] iff M ~> N
 >>>>>> 
 >>>>>> would be fine.
 >>>>> 
 >>>>> Generating such a pict is what I would have in mind to capture the
 >>>>> 'with' section.
 >>>>> 
 >>>>>> (I think originally I thought that context-closure should
 >>>>>> generate a pict that looks as if I had written the relation as E[M] -> E[N]
 >>>>>> for each M -> N in the original relation, but I don't think that's useful.)
 >>>>> 
 >>>>> FWIW, doing rewrites like that for typesetting is tricky because of
 >>>>> the way the typesetting works; as long as the "E" here is always on a
 >>>>> single line I think it would be okay (as in this case), but when the
 >>>>> user might have some complex expression then it is hard to compose the
 >>>>> information that goes into the typesetting since it is all based on
 >>>>> source locations in the program text.
 >>>>> 
 >>>>> Robby
 >>>> 
 >> 
 
 
