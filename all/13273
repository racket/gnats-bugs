From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Nov 18 13:55:51 2012
Received: from mail-ia0-f172.google.com (mail-ia0-f172.google.com [209.85.210.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id qAIItmwp030671
	for <bugs@bugs.plt-scheme.org>; Sun, 18 Nov 2012 13:55:48 -0500
Message-Id: <201211181855.qAIItkqv030666@champlain.ccs.neu.edu>
Date: Sun, 18 Nov 2012 13:55:46 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: for forms do not allow for intermediate definitions in the sequences

>Number:         13273
>Category:       all
>Synopsis:       for forms do not allow for intermediate definitions in the sequences
>Class:          change-request
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Nov 18 13:56:01 -0500 2012
>Last-Modified:  Mon Nov 19 00:24:01 -0500 2012
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
I would like to be able to introduce bindings in the midst of the sequence expressions. This is because I want to destructure the value returned by one sequence, and not have to repeat that destructuring 
>How-To-Repeat:
#lang racket

(struct val (name fields))

(define vals (list (val 'a (list 1 2 3)) (val 'b (list 1 2 3))))

(for*/list ((a-val vals)
            (field-name (val-fields a-val)))
  (list (val-name a-val) field-name))


;; Wanted (open to changing the syntax)
#;
(for*/list ((a-val vals)
            #:define (match-define (val name fields) a-val)
            (field fields))
    (list name field))
>Fix:
>Audit-Trail:
From: Neil Toronto <neil.toronto@gmail.com>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13273: for forms do not allow for intermediate
 definitions in the sequences
Date: Sun, 18 Nov 2012 17:04:28 -0700

 On 11/18/2012 11:56 AM, eric.n.dobson@gmail.com wrote:
 > #lang racket
 >
 > (struct val (name fields))
 >
 > (define vals (list (val 'a (list 1 2 3)) (val 'b (list 1 2 3))))
 >
 > (for*/list ((a-val vals)
 >              (field-name (val-fields a-val)))
 >    (list (val-name a-val) field-name))
 >
 >
 > ;; Wanted (open to changing the syntax)
 > #;
 > (for*/list ((a-val vals)
 >              #:define (match-define (val name fields) a-val)
 >              (field fields))
 >      (list name field))
 
 You can currently do this:
 
    (for*/list ([a-val vals]
                [name  (in-value (val-name a-val))]
                [fields  (in-value (val-fields a-val))]
                [field fields])
      (list name field))
 
 The destructuring is manual, which isn't very declarative. We have a few 
 proponents of having every #lang racket binding form implemented using 
 match, myself included. If we had our way, you could write this:
 
    (for*/list ([a-val vals]
                [(val val-name val-fields)  (in-value a-val)]
                [field fields])
      (list name field))
 
 It's so beautiful. *sniff*
 
 Neil ⊥
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13273: for forms do not allow for intermediate
 definitions in the sequences
Date: Sun, 18 Nov 2012 16:45:17 -0800

 --f46d040f9f4a6b013f04cece6ece
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 This also increases the number of destructures by a factor equal to the
 number of structure fields, which can easily be 4-5.
 
 
 On Sun, Nov 18, 2012 at 4:04 PM, Neil Toronto <neil.toronto@gmail.com>wrote=
 :
 
 > On 11/18/2012 11:56 AM, eric.n.dobson@gmail.com wrote:
 >
 >> #lang racket
 >>
 >> (struct val (name fields))
 >>
 >> (define vals (list (val 'a (list 1 2 3)) (val 'b (list 1 2 3))))
 >>
 >> (for*/list ((a-val vals)
 >>              (field-name (val-fields a-val)))
 >>    (list (val-name a-val) field-name))
 >>
 >>
 >> ;; Wanted (open to changing the syntax)
 >> #;
 >> (for*/list ((a-val vals)
 >>              #:define (match-define (val name fields) a-val)
 >>              (field fields))
 >>      (list name field))
 >>
 >
 > You can currently do this:
 >
 >   (for*/list ([a-val vals]
 >               [name  (in-value (val-name a-val))]
 >               [fields  (in-value (val-fields a-val))]
 >               [field fields])
 >     (list name field))
 >
 > The destructuring is manual, which isn't very declarative. We have a few
 > proponents of having every #lang racket binding form implemented using
 > match, myself included. If we had our way, you could write this:
 >
 >   (for*/list ([a-val vals]
 >               [(val val-name val-fields)  (in-value a-val)]
 >               [field fields])
 >     (list name field))
 >
 > It's so beautiful. *sniff*
 >
 > Neil =E2=8A=A5
 >
 >
 
 --f46d040f9f4a6b013f04cece6ece
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 This also increases the number of destructures by a factor equal to the num=
 ber of structure fields, which can easily be 4-5.<div class=3D"gmail_extra"=
 ><br><br><div class=3D"gmail_quote">On Sun, Nov 18, 2012 at 4:04 PM, Neil T=
 oronto <span dir=3D"ltr">&lt;<a href=3D"mailto:neil.toronto@gmail.com" targ=
 et=3D"_blank">neil.toronto@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">On 11/18/2012 11:56 AM, <a href=3D"mailto:er=
 ic.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@gmail.com</a> wrote:=
 <br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 #lang racket<br>
 <br>
 (struct val (name fields))<br>
 <br>
 (define vals (list (val &#39;a (list 1 2 3)) (val &#39;b (list 1 2 3))))<br=
 >
 <br>
 (for*/list ((a-val vals)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(field-name (val-fields a-v=
 al)))<br>
 =C2=A0 =C2=A0(list (val-name a-val) field-name))<br>
 <br>
 <br>
 ;; Wanted (open to changing the syntax)<br>
 #;<br>
 (for*/list ((a-val vals)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#:define (match-define (val=
  name fields) a-val)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(field fields))<br>
 =C2=A0 =C2=A0 =C2=A0(list name field))<br>
 </blockquote>
 <br>
 You can currently do this:<br>
 <br>
 =C2=A0 (for*/list ([a-val vals]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [name =C2=A0(in-value (val=
 -name a-val))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [fields =C2=A0(in-value (v=
 al-fields a-val))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [field fields])<br>
 =C2=A0 =C2=A0 (list name field))<br>
 <br>
 The destructuring is manual, which isn&#39;t very declarative. We have a fe=
 w proponents of having every #lang racket binding form implemented using ma=
 tch, myself included. If we had our way, you could write this:<br>
 <br>
 =C2=A0 (for*/list ([a-val vals]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(val val-name val-fields)=
  =C2=A0(in-value a-val)]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [field fields])<br>
 =C2=A0 =C2=A0 (list name field))<br>
 <br>
 It&#39;s so beautiful. *sniff*<span class=3D"HOEnZb"><font color=3D"#888888=
 "><br>
 <br>
 Neil =E2=8A=A5<br>
 <br>
 </font></span></blockquote></div><br></div>
 
 --f46d040f9f4a6b013f04cece6ece--
From: Stephen Chang <stchang@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13273: for forms do not allow for intermediate
 definitions in the sequences
Date: Mon, 19 Nov 2012 00:20:32 -0500

 You can create a custom sequence:
 
 (define (in-val-lst lst)
   (make-do-sequence
    (thunk
     (values
      (match-lambda [(list-rest (val name fields) _) (values name fields)])
      rest
      lst
      (λ (pos) (not (null? pos)))
      #f
      #f))))
 
 > (for*/list ([(name fields) (in-val-lst vals)]
               [field fields])
     (list name field))
 '((a 1) (a 2) (a 3) (b 1) (b 2) (b 3))
 
 
 
 On Sun, Nov 18, 2012 at 7:45 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > This also increases the number of destructures by a factor equal to the
 > number of structure fields, which can easily be 4-5.
 >
 >
 > On Sun, Nov 18, 2012 at 4:04 PM, Neil Toronto <neil.toronto@gmail.com>
 > wrote:
 >>
 >> On 11/18/2012 11:56 AM, eric.n.dobson@gmail.com wrote:
 >>>
 >>> #lang racket
 >>>
 >>> (struct val (name fields))
 >>>
 >>> (define vals (list (val 'a (list 1 2 3)) (val 'b (list 1 2 3))))
 >>>
 >>> (for*/list ((a-val vals)
 >>>              (field-name (val-fields a-val)))
 >>>    (list (val-name a-val) field-name))
 >>>
 >>>
 >>> ;; Wanted (open to changing the syntax)
 >>> #;
 >>> (for*/list ((a-val vals)
 >>>              #:define (match-define (val name fields) a-val)
 >>>              (field fields))
 >>>      (list name field))
 >>
 >>
 >> You can currently do this:
 >>
 >>   (for*/list ([a-val vals]
 >>               [name  (in-value (val-name a-val))]
 >>               [fields  (in-value (val-fields a-val))]
 >>               [field fields])
 >>     (list name field))
 >>
 >> The destructuring is manual, which isn't very declarative. We have a few
 >> proponents of having every #lang racket binding form implemented using
 >> match, myself included. If we had our way, you could write this:
 >>
 >>   (for*/list ([a-val vals]
 >>               [(val val-name val-fields)  (in-value a-val)]
 >>               [field fields])
 >>     (list name field))
 >>
 >> It's so beautiful. *sniff*
 >>
 >> Neil ⊥
 >>
 >
 
