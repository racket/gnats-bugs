From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Feb 28 12:03:02 2014
Received: from mail-oa0-f50.google.com (mail-oa0-f50.google.com [209.85.219.50])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s1SH30Pu023377
	for <bugs@bugs.plt-scheme.org>; Fri, 28 Feb 2014 12:03:01 -0500
Message-Id: <201402281702.s1SH2uXE023362@winooski.ccs.neu.edu>
Date: Fri, 28 Feb 2014 12:02:56 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: match gives wrong results when variables with ... are used twice

>Number:         14379
>Category:       all
>Synopsis:       match gives wrong results when variables with ... are used twice
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Feb 28 12:04:01 -0500 2014
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
>Description:
I want to match against two lists to ensure they have the same elements (as part of a larger pattern). But different ways of doing this give different results and the first two give incorrect results.
>How-To-Repeat:
#lang racket


(match* ((list 1 2) (list 2 3))
  [((list f ...) (list f ...))
   f]
  [(_ _) #f])

(match (list (list 1 2) (list 2 3))
  [(list (list f ...) (list f ...))
   f]
  [_ #f])

(match (list (list 1 2) (list 2 3))
  [(list f f)
   f]
  [_ #f])


; =>
; '(2 3)
; '(1 2)
; #f
>Fix:
