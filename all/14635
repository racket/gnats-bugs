From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jul 13 07:51:39 2014
Received: from mail-oa0-f53.google.com (mail-oa0-f53.google.com [209.85.219.53])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s6DBpWd2025424
	for <bugs@bugs.plt-scheme.org>; Sun, 13 Jul 2014 07:51:32 -0400
Message-Id: <201407131151.s6DBpSq4025417@winooski.ccs.neu.edu>
Date: Sun, 13 Jul 2014 07:51:28 -0400
From: mmarin@info.uvt.ro
To: bugs@racket-lang.org
Subject: unexpected behaviour of #%top

>Number:         14635
>Category:       all
>Synopsis:       unexpected behaviour of #%top
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jul 13 07:52:01 -0400 2014
>Closed-Date:    Fri Jul 25 04:45:29 -0400 2014
>Last-Modified:  Fri Jul 25 04:45:29 -0400 2014
>Originator:     Mircea Marin
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.77.4 (KHTML, like Gecko) Version/7.0.5 Safari/537.77.4
>Description:
#%top has a different behaviour than the one documented and illustrated in "The Racket Reference/Syntactic Forms/Variable references and #%top":

I expect the following behaviour in the Interactions window:
> (define x 12)
> (let ([x 5]) (#%top . x)
12

but I get
> (define x 12)
> (let ([x 5]) (#%top . x)
5

It happens on both Mac and Windows installations of DrRacket.
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Mircea Marin <mmarin@info.uvt.ro>
To: bugs@racket-lang.org, bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/14635: unexpected behaviour of #%top
Date: Sun, 13 Jul 2014 15:08:05 +0300 (EEST)

 The unexpected behaviour from the interactions window is
 
 > (define x 12)
 > (let ([x 5]) (#%top . x))
 5
 
 According to the documentation, the last returned value would be 12.
 
 Also, unexpected behaviour is when this code is inside a module: If I run the following code from the Definitions Window
 
 #lang racket
 (define x 12)
 (let ([x 5]) (#%top . x))
 
 I get the error message 
 
 x: unbound identifier in module in: x
 
 Why is this so? x is bound to 12 in the module, and I expect to get value 12.
 
 
 
 
 ----- Mesaj original -----
 De la: bugs@racket-lang.org
 Către: mmarin@info.uvt.ro
 Trimis: duminică, 13 iulie, 2014 14:52:01
 Subiect: Re: [racket-bug] all/14635: unexpected behaviour of #%top
 
 Thank you very much for your problem report.
 It has the internal identification `all/14635'.
 You can check on the status of your problem report at
   http://bugs.racket-lang.org/query/?cmd=view&pr=14635
 
 If you wish to provide further information regarding this problem
 you can do so as a reply to this message.  (But please make sure
 that your mailer replies to both "bugs" and "bug-notification".)
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Mircea Marin <mmarin@info.uvt.ro>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14635: unexpected behaviour of #%top
Date: Mon, 14 Jul 2014 08:59:13 +0100

 Thanks for the report!
 
 I think that `#%top` as currently documented was a bad idea. The notion
 of skipping over local bindings to reach a top-level or module-level
 binding is awkward at best, and as the macro system has evolved in ways
 that make binding more consistent for macros, it interferes with the
 original and probably inconsistent idea of `#%top`.
 
 More below.
 
 
 At Sun, 13 Jul 2014 15:08:05 +0300 (EEST), Mircea Marin wrote:
 > The unexpected behaviour from the interactions window is
 > 
 > > (define x 12)
 > > (let ([x 5]) (#%top . x))
 > 5
 > 
 > According to the documentation, the last returned value would be 12.
 
 I'm inclined to call this a bug in the expander, and I'll fix it.
 DrRacket differs from command-line Racket, for example, because an
 extra call to `expand` is involved.
 
 
 > Also, unexpected behaviour is when this code is inside a module: If I
 > run the following code from the Definitions Window
 > 
 > #lang racket
 > (define x 12)
 > (let ([x 5]) (#%top . x))
 > 
 > I get the error message 
 > 
 > x: unbound identifier in module in: x
 
 Within a module, I think the repair is to change the specification of
 `#%top`. Macro-introduced bindings within a module can have context
 from nested scopes that makes them distinct from other bindings, so it
 doesn't make sense to define `#%top` as somehow always ignoring local
 scope.
 
 The same is true at the top level, but the binding situation at the top
 level is incremental and messy already (the top level is hopeless), so
 preserving the old behavior of `#%top` there seems ok.
 
Responsible changed from "nobody" to "mflatt" by mflatt@racket-lang.org at Fri, 25 Jul 2014 04:45:29 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/b25a2b83ba
State changed from "open" to "closed" by mflatt@racket-lang.org at Fri, 25 Jul 2014 04:45:29 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/b25a2b83ba
  | The implementation of `#%top` within a `module` has, for a while,
  | required that the identifier wrapped by `#%top` not have a local
  | binding. Change the documentation to match the implementation in that
  | way. (Since local binding in an identifier's lexical information
  | contributes to its identity as a top-level binding, that specification
  | of `#%top` would make sense everywhere, but I've left the top level
  | alone for backward compatibility.)
  | 
  | Also, change `local-expand` to never introduct `#%top`
  | wrappers. That's a little more consistent with what `#%top` has
  | evolved to mean, and it specifically works better with
  | `local-expand/capture-lifts`.
  | 
  | Closes PR 14635 and PR 14654

