From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Aug 20 19:45:07 2012
Received: from mail-gh0-f172.google.com (mail-gh0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q7KNj4XF006515
	for <bugs@bugs.plt-scheme.org>; Mon, 20 Aug 2012 19:45:04 -0400
Message-Id: <201208202344.q7KNipfb006498@champlain.ccs.neu.edu>
Date: Mon, 20 Aug 2012 19:44:51 -0400
From: gregwoodhouse@me.com
To: bugs@racket-lang.org
Subject: Cannot reference functions inside class/c

>Number:         13046
>Category:       all
>Synopsis:       Cannot reference functions inside class/c
>Class:          sw-bug
>Responsible:    matthias
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Aug 20 19:48:01 -0400 2012
>Closed-Date:    Mon Aug 20 20:20:54 -0400 2012
>Last-Modified:  Mon Feb 18 23:12:15 -0500 2013
>Originator:     Greg Woodhouse
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
macosx "Darwin Sedna.local 12.0.0 Darwin Kernel Version 12.0.0: Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 165990516
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/gregwoodhouse/Library/Racket/5.3/collects"
 (non-existent-path))
("/Applications/Racket v5.3/collects"
 ("2htdp" "algol60" "at-exp" "browser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
If I try to use a predicate inside class/c (or better (->m ...), I get an error such as

 coord?: undefined;
 cannot reference an identifier before its definition

This is not true of contracts I write on functions.
>How-To-Repeat:
(define/contract base-grid%
  (class/c
   (get-cell (->m coord? coord? digit?))
   (set-cell! (->m coord? coord? digit? void?))
   (show (->m void?)))
  
  (class* object% (base-grid<%>)
    (super-new)

...)

;;contract building blocks 
(define (digit? x) (and (integer? x) (>= x 0) (< x 10)))
(define (coord? x) (and (integer? x) (>= x 0) (< x 9)))
(define (cell? x)
  (and (list? x) (equal? (length x) 2) (coord? (first x)) (coord? (second x))))
(define (cell+value? x)
  (and (list? x) (equal? (length x) 3) (coord? (first x)) (coord? (second x)) (digit? (third x))))
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by matthias at Mon, 20 Aug 2012 20:20:54 -0400
Reason>>> not a bug, see explanation 

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: gregwoodhouse@me.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13046: Cannot reference functions inside class/c
Date: Mon, 20 Aug 2012 20:19:03 -0400

 --Apple-Mail=_B7184D7D-4247-4FC2-BEB0-EC7C8EE30E18
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 This is not a bug. When you write down a contract, its pieces must have =
 values when you evaluate the contract. So this works:=20
 
 #lang racket=20
 
 (define (coord? x) #t)
 (define (digit? x) #t)
 
 (define/contract base-grid%
   (class/c
 ;; now coord? and digit? are defined, can be derefernced, and used to =
 build the contract:=20
    (get-cell (->m coord? coord? digit?)))
   (class* object% ()
     (super-new)
     (init-field (x 0))
     (define/public (get-cell a b)
       x)))
 
 
 
 
 On Aug 20, 2012, at 7:48 PM, gregwoodhouse@me.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13046
 >=20
 > Reported by Greg Woodhouse for release: 5.3
 >=20
 > *** Description:
 > If I try to use a predicate inside class/c (or better (->m ...), I get =
 an error such as
 >=20
 > coord?: undefined;
 > cannot reference an identifier before its definition
 >=20
 > This is not true of contracts I write on functions.
 >=20
 > *** How to repeat:
 > (define/contract base-grid%
 >  (class/c
 >   (get-cell (->m coord? coord? digit?))
 >   (set-cell! (->m coord? coord? digit? void?))
 >   (show (->m void?)))
 >=20
 >  (class* object% (base-grid<%>)
 >    (super-new)
 >=20
 > ...)
 >=20
 > ;;contract building blocks=20
 > (define (digit? x) (and (integer? x) (>=3D x 0) (< x 10)))
 > (define (coord? x) (and (integer? x) (>=3D x 0) (< x 9)))
 > (define (cell? x)
 >  (and (list? x) (equal? (length x) 2) (coord? (first x)) (coord? =
 (second x))))
 > (define (cell+value? x)
 >  (and (list? x) (equal? (length x) 3) (coord? (first x)) (coord? =
 (second x)) (digit? (third x))))
 >=20
 > *** Environment:
 > macosx "Darwin Sedna.local 12.0.0 Darwin Kernel Version 12.0.0: Sun =
 Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64" =
 (i386-macosx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 165990516
 > Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D=
  (); (links #:user? #f #:root? #t) =3D ()
 >=20
 >=20
 > Collections:
 > ("/Users/gregwoodhouse/Library/Racket/5.3/collects"
 > (non-existent-path))
 > ("/Applications/Racket v5.3/collects"
 > ("2htdp" "algol60" "at-exp" "browser" "compiler" "config" "data" =
 "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" =
 "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" =
 "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" =
 "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" =
 "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" =
 "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" =
 "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" =
 "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" =
 "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" =
 "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" =
 "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" =
 "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" =
 "wxme" "xml" "xrepl"))
 >=20
 > Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t =
 ((main) (test))))
 >=20
 
 
 --Apple-Mail=_B7184D7D-4247-4FC2-BEB0-EC7C8EE30E18
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgyMTAwMTkwNFowIwYJKoZI
 hvcNAQkEMRYEFI1I/kctXuPRsGiOazVB6Gd796m7MIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAHR1IIqnQk/wvSgJ99zI+kCj3M21dGyFwICHj75Toty+C37g1q7zK7EFaJym8wXUoRQX
 WzKhyxORpnZc1Sq608zszdKpo2x7yGiKrOFCjKPvVwNGewKSlSL3b2dP9IvCK7BNw+L/ZYrgR9au
 vkGvy5Ufs2s50J4uoBB5GnVhEimffyAXPLNEtw2zib5wD0FovSvCdvx0NMg0zUEJt4k75mCmr0kM
 iUVMuwnzXp3jbANC9RsmY+1HgbGMxwfKoW5Uuf3ssSsCE4PLd3pUBVDkBeplsqFq3Di0H1s9+dxQ
 dzn3d3B65eiq646q8yRuDJxdihD4rBOKSQen3XsridZ1ywwAAAAAAAA=
 
 --Apple-Mail=_B7184D7D-4247-4FC2-BEB0-EC7C8EE30E18--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: gregwoodhouse@me.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13046: Cannot reference functions inside class/c
Date: Mon, 20 Aug 2012 19:28:07 -0500

 Also perhaps worth noting, the contract-out clause of provide
 explicitly moves the contracts to the end of the module before
 evaluating them.
 
 Robby
 
 On Mon, Aug 20, 2012 at 7:19 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > This is not a bug. When you write down a contract, its pieces must have values when you evaluate the contract. So this works:
 >
 > #lang racket
 >
 > (define (coord? x) #t)
 > (define (digit? x) #t)
 >
 > (define/contract base-grid%
 >   (class/c
 > ;; now coord? and digit? are defined, can be derefernced, and used to build the contract:
 >    (get-cell (->m coord? coord? digit?)))
 >   (class* object% ()
 >     (super-new)
 >     (init-field (x 0))
 >     (define/public (get-cell a b)
 >       x)))
 >
 >
 >
 >
 > On Aug 20, 2012, at 7:48 PM, gregwoodhouse@me.com wrote:
 >
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=13046
 >>
 >> Reported by Greg Woodhouse for release: 5.3
 >>
 >> *** Description:
 >> If I try to use a predicate inside class/c (or better (->m ...), I get an error such as
 >>
 >> coord?: undefined;
 >> cannot reference an identifier before its definition
 >>
 >> This is not true of contracts I write on functions.
 >>
 >> *** How to repeat:
 >> (define/contract base-grid%
 >>  (class/c
 >>   (get-cell (->m coord? coord? digit?))
 >>   (set-cell! (->m coord? coord? digit? void?))
 >>   (show (->m void?)))
 >>
 >>  (class* object% (base-grid<%>)
 >>    (super-new)
 >>
 >> ...)
 >>
 >> ;;contract building blocks
 >> (define (digit? x) (and (integer? x) (>= x 0) (< x 10)))
 >> (define (coord? x) (and (integer? x) (>= x 0) (< x 9)))
 >> (define (cell? x)
 >>  (and (list? x) (equal? (length x) 2) (coord? (first x)) (coord? (second x))))
 >> (define (cell+value? x)
 >>  (and (list? x) (equal? (length x) 3) (coord? (first x)) (coord? (second x)) (digit? (third x))))
 >>
 >> *** Environment:
 >> macosx "Darwin Sedna.local 12.0.0 Darwin Kernel Version 12.0.0: Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 165990516
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/Users/gregwoodhouse/Library/Racket/5.3/collects"
 >> (non-existent-path))
 >> ("/Applications/Racket v5.3/collects"
 >> ("2htdp" "algol60" "at-exp" "browser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 >
 
From: Gregory Woodhouse <gregwoodhouse@me.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13046: Cannot reference functions inside class/c
Date: Mon, 20 Aug 2012 18:02:36 -0700

 That explains it. I had been using the contract-out form for functions, but define/contract for classes.
 
 On Aug 20, 2012, at 5:28 PM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 
 > Also perhaps worth noting, the contract-out clause of provide
 > explicitly moves the contracts to the end of the module before
 > evaluating them.
 > 
 > Robby
 > 
 > On Mon, Aug 20, 2012 at 7:19 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >> 
 >> This is not a bug. When you write down a contract, its pieces must have values when you evaluate the contract. So this works:
 >> 
 >> #lang racket
 >> 
 >> (define (coord? x) #t)
 >> (define (digit? x) #t)
 >> 
 >> (define/contract base-grid%
 >>  (class/c
 >> ;; now coord? and digit? are defined, can be derefernced, and used to build the contract:
 >>   (get-cell (->m coord? coord? digit?)))
 >>  (class* object% ()
 >>    (super-new)
 >>    (init-field (x 0))
 >>    (define/public (get-cell a b)
 >>      x)))
 >> 
 >> 
 >> 
 >> 
 >> On Aug 20, 2012, at 7:48 PM, gregwoodhouse@me.com wrote:
 >> 
 >>> A new problem report is waiting at
 >>> http://bugs.racket-lang.org/query/?cmd=view&pr=13046
 >>> 
 >>> Reported by Greg Woodhouse for release: 5.3
 >>> 
 >>> *** Description:
 >>> If I try to use a predicate inside class/c (or better (->m ...), I get an error such as
 >>> 
 >>> coord?: undefined;
 >>> cannot reference an identifier before its definition
 >>> 
 >>> This is not true of contracts I write on functions.
 >>> 
 >>> *** How to repeat:
 >>> (define/contract base-grid%
 >>> (class/c
 >>>  (get-cell (->m coord? coord? digit?))
 >>>  (set-cell! (->m coord? coord? digit? void?))
 >>>  (show (->m void?)))
 >>> 
 >>> (class* object% (base-grid<%>)
 >>>   (super-new)
 >>> 
 >>> ...)
 >>> 
 >>> ;;contract building blocks
 >>> (define (digit? x) (and (integer? x) (>= x 0) (< x 10)))
 >>> (define (coord? x) (and (integer? x) (>= x 0) (< x 9)))
 >>> (define (cell? x)
 >>> (and (list? x) (equal? (length x) 2) (coord? (first x)) (coord? (second x))))
 >>> (define (cell+value? x)
 >>> (and (list? x) (equal? (length x) 3) (coord? (first x)) (coord? (second x)) (digit? (third x))))
 >>> 
 >>> *** Environment:
 >>> macosx "Darwin Sedna.local 12.0.0 Darwin Kernel Version 12.0.0: Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 165990516
 >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>> 
 >>> 
 >>> Collections:
 >>> ("/Users/gregwoodhouse/Library/Racket/5.3/collects"
 >>> (non-existent-path))
 >>> ("/Applications/Racket v5.3/collects"
 >>> ("2htdp" "algol60" "at-exp" "browser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>> 
 >>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>> 
 >> 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Gregory Woodhouse <gregwoodhouse@me.com>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13046: Cannot reference functions inside class/c
Date: Mon, 20 Aug 2012 20:17:47 -0500

 Just in case: the difference between contract-out and define/contract
 is a question of how you want blame assigned, specifically the
 granularity. define/contract treats each definition as its own
 separate unit of blame and provide+contract-out treats each module as
 its own unit of blame.
 
 Robby
 
 On Mon, Aug 20, 2012 at 8:02 PM, Gregory Woodhouse <gregwoodhouse@me.com> wrote:
 > That explains it. I had been using the contract-out form for functions, but define/contract for classes.
 >
 > On Aug 20, 2012, at 5:28 PM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 >
 >> Also perhaps worth noting, the contract-out clause of provide
 >> explicitly moves the contracts to the end of the module before
 >> evaluating them.
 >>
 >> Robby
 >>
 >> On Mon, Aug 20, 2012 at 7:19 PM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >>>
 >>> This is not a bug. When you write down a contract, its pieces must have values when you evaluate the contract. So this works:
 >>>
 >>> #lang racket
 >>>
 >>> (define (coord? x) #t)
 >>> (define (digit? x) #t)
 >>>
 >>> (define/contract base-grid%
 >>>  (class/c
 >>> ;; now coord? and digit? are defined, can be derefernced, and used to build the contract:
 >>>   (get-cell (->m coord? coord? digit?)))
 >>>  (class* object% ()
 >>>    (super-new)
 >>>    (init-field (x 0))
 >>>    (define/public (get-cell a b)
 >>>      x)))
 >>>
 >>>
 >>>
 >>>
 >>> On Aug 20, 2012, at 7:48 PM, gregwoodhouse@me.com wrote:
 >>>
 >>>> A new problem report is waiting at
 >>>> http://bugs.racket-lang.org/query/?cmd=view&pr=13046
 >>>>
 >>>> Reported by Greg Woodhouse for release: 5.3
 >>>>
 >>>> *** Description:
 >>>> If I try to use a predicate inside class/c (or better (->m ...), I get an error such as
 >>>>
 >>>> coord?: undefined;
 >>>> cannot reference an identifier before its definition
 >>>>
 >>>> This is not true of contracts I write on functions.
 >>>>
 >>>> *** How to repeat:
 >>>> (define/contract base-grid%
 >>>> (class/c
 >>>>  (get-cell (->m coord? coord? digit?))
 >>>>  (set-cell! (->m coord? coord? digit? void?))
 >>>>  (show (->m void?)))
 >>>>
 >>>> (class* object% (base-grid<%>)
 >>>>   (super-new)
 >>>>
 >>>> ...)
 >>>>
 >>>> ;;contract building blocks
 >>>> (define (digit? x) (and (integer? x) (>= x 0) (< x 10)))
 >>>> (define (coord? x) (and (integer? x) (>= x 0) (< x 9)))
 >>>> (define (cell? x)
 >>>> (and (list? x) (equal? (length x) 2) (coord? (first x)) (coord? (second x))))
 >>>> (define (cell+value? x)
 >>>> (and (list? x) (equal? (length x) 3) (coord? (first x)) (coord? (second x)) (digit? (third x))))
 >>>>
 >>>> *** Environment:
 >>>> macosx "Darwin Sedna.local 12.0.0 Darwin Kernel Version 12.0.0: Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
 >>>> Human Language: english
 >>>> (current-memory-use) 165990516
 >>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>>
 >>>>
 >>>> Collections:
 >>>> ("/Users/gregwoodhouse/Library/Racket/5.3/collects"
 >>>> (non-existent-path))
 >>>> ("/Applications/Racket v5.3/collects"
 >>>> ("2htdp" "algol60" "at-exp" "browser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>>>
 >>>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>>
 >>>
 >
 
From: Gregory Woodhouse <gregwoodhouse@me.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13046: Cannot reference functions inside class/c
Date: Mon, 20 Aug 2012 20:28:17 -0700

 I kind of guessed that. In any case, I've rewritten my module to put the exports at the end (and have switched to using provide + contract-out for the classes, too) and everything is fine. I don't like it because I like having my class contracts close to the class definitions (of which there are only two: grid% and base-grid%) because I like to keep related things close together in the source. 
 
 Now, the real mystery (for me) is what to do with my mixins. Yes, this has been a real learning experience in how to use the class system in Racket
 
 (define file-grid<%>
   (interface (base-grid<%>)
     load-grid!))
 
 (define file-mixin
   (mixin (base-grid<%>) (file-grid<%>)
     (super-new)
     (inherit set-cell!)
     ;load grid from a file
     (define/public (load-grid! fname)
       (with-handlers
           ((exn:fail:filesystem?
             (lambda (exn)
               (printf " Cannot open file ~a~n~a~n" fname exn)))
            (exn:fail?
             (lambda (exn)
               (printf "Something went wrong!~n~a~n" exn))))
         (let
             ([x
               (call-with-input-file fname
                 (lambda (in)
                   (read in)))])
           (for ([i x])
             (set-cell! (first i) (second i) (third i))))))))
 
 (define grid%
   (file-mixin
    (pencil-mixin base-grid%)))
 
 On Aug 20, 2012, at 6:17 PM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 
 > Just in case: the difference between contract-out and define/contract
 > is a question of how you want blame assigned, specifically the
 > granularity. define/contract treats each definition as its own
 > separate unit of blame and provide+contract-out treats each module as
 > its own unit of blame.
 > 
 > Robby
 > 
 > On Mon, Aug 20, 2012 at 8:02 PM, Gregory Woodhouse <gregwoodhouse@me.com> wrote:
 >> That explains it. I had been using the contract-out form for functions, but define/contract for classes.
 >> 
 >> On Aug 20, 2012, at 5:28 PM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 >> 
 >>> Also perhaps worth noting, the contract-out clause of provide
 >>> explicitly moves the contracts to the end of the module before
 >>> evaluating them.
 >>> 
 >>> Robby
 >>> 
 >>> On Mon, Aug 20, 2012 at 7:19 PM, Matthias Felleisen
 >>> <matthias@ccs.neu.edu> wrote:
 >>>> 
 >>>> This is not a bug. When you write down a contract, its pieces must have values when you evaluate the contract. So this works:
 >>>> 
 >>>> #lang racket
 >>>> 
 >>>> (define (coord? x) #t)
 >>>> (define (digit? x) #t)
 >>>> 
 >>>> (define/contract base-grid%
 >>>> (class/c
 >>>> ;; now coord? and digit? are defined, can be derefernced, and used to build the contract:
 >>>>  (get-cell (->m coord? coord? digit?)))
 >>>> (class* object% ()
 >>>>   (super-new)
 >>>>   (init-field (x 0))
 >>>>   (define/public (get-cell a b)
 >>>>     x)))
 >>>> 
 >>>> 
 >>>> 
 >>>> 
 >>>> On Aug 20, 2012, at 7:48 PM, gregwoodhouse@me.com wrote:
 >>>> 
 >>>>> A new problem report is waiting at
 >>>>> http://bugs.racket-lang.org/query/?cmd=view&pr=13046
 >>>>> 
 >>>>> Reported by Greg Woodhouse for release: 5.3
 >>>>> 
 >>>>> *** Description:
 >>>>> If I try to use a predicate inside class/c (or better (->m ...), I get an error such as
 >>>>> 
 >>>>> coord?: undefined;
 >>>>> cannot reference an identifier before its definition
 >>>>> 
 >>>>> This is not true of contracts I write on functions.
 >>>>> 
 >>>>> *** How to repeat:
 >>>>> (define/contract base-grid%
 >>>>> (class/c
 >>>>> (get-cell (->m coord? coord? digit?))
 >>>>> (set-cell! (->m coord? coord? digit? void?))
 >>>>> (show (->m void?)))
 >>>>> 
 >>>>> (class* object% (base-grid<%>)
 >>>>>  (super-new)
 >>>>> 
 >>>>> ...)
 >>>>> 
 >>>>> ;;contract building blocks
 >>>>> (define (digit? x) (and (integer? x) (>= x 0) (< x 10)))
 >>>>> (define (coord? x) (and (integer? x) (>= x 0) (< x 9)))
 >>>>> (define (cell? x)
 >>>>> (and (list? x) (equal? (length x) 2) (coord? (first x)) (coord? (second x))))
 >>>>> (define (cell+value? x)
 >>>>> (and (list? x) (equal? (length x) 3) (coord? (first x)) (coord? (second x)) (digit? (third x))))
 >>>>> 
 >>>>> *** Environment:
 >>>>> macosx "Darwin Sedna.local 12.0.0 Darwin Kernel Version 12.0.0: Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
 >>>>> Human Language: english
 >>>>> (current-memory-use) 165990516
 >>>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>>> 
 >>>>> 
 >>>>> Collections:
 >>>>> ("/Users/gregwoodhouse/Library/Racket/5.3/collects"
 >>>>> (non-existent-path))
 >>>>> ("/Applications/Racket v5.3/collects"
 >>>>> ("2htdp" "algol60" "at-exp" "browser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>>>> 
 >>>>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>>> 
 >>>> 
 >> 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Gregory Woodhouse <gregwoodhouse@me.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13046: Cannot reference functions inside class/c
Date: Tue, 21 Aug 2012 08:40:35 -0400

 --Apple-Mail=_1ACF30A7-3357-4CB1-AE55-1F3A5BDC0EEC
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 The Racket style is to put the export interface material at the top of a =
 module. In my experience, you almost always get away reading it instead =
 of the implementation when you need to know something about an export. =
 So in your case
 
 #lang racket=20
 
 (define (coordinate? x) ...)
 
 (define cell/c=20
   (class/c ...coordinate? ...))
 
 (provide/contract ...) or (provide (contract/out ...))
 
 ;; ----------------------------------------------------
 ;; implementation=20
 
 (require ..)
 
 Above the line you establish the terminology (ontology in modern words) =
 to talk to your 'client modules'. Below the line they shouldn't have to =
 look (much)=20
 
 -- Matthias
 
 
 
 
 On Aug 20, 2012, at 11:28 PM, Gregory Woodhouse wrote:
 
 > I kind of guessed that. In any case, I've rewritten my module to put =
 the exports at the end (and have switched to using provide + =
 contract-out for the classes, too) and everything is fine. I don't like =
 it because I like having my class contracts close to the class =
 definitions (of which there are only two: grid% and base-grid%) because =
 I like to keep related things close together in the source.=20
 >=20
 > Now, the real mystery (for me) is what to do with my mixins. Yes, this =
 has been a real learning experience in how to use the class system in =
 Racket
 >=20
 > (define file-grid<%>
 >  (interface (base-grid<%>)
 >    load-grid!))
 >=20
 > (define file-mixin
 >  (mixin (base-grid<%>) (file-grid<%>)
 >    (super-new)
 >    (inherit set-cell!)
 >    ;load grid from a file
 >    (define/public (load-grid! fname)
 >      (with-handlers
 >          ((exn:fail:filesystem?
 >            (lambda (exn)
 >              (printf " Cannot open file ~a~n~a~n" fname exn)))
 >           (exn:fail?
 >            (lambda (exn)
 >              (printf "Something went wrong!~n~a~n" exn))))
 >        (let
 >            ([x
 >              (call-with-input-file fname
 >                (lambda (in)
 >                  (read in)))])
 >          (for ([i x])
 >            (set-cell! (first i) (second i) (third i))))))))
 >=20
 > (define grid%
 >  (file-mixin
 >   (pencil-mixin base-grid%)))
 >=20
 > On Aug 20, 2012, at 6:17 PM, Robby Findler =
 <robby@eecs.northwestern.edu> wrote:
 >=20
 >> Just in case: the difference between contract-out and define/contract
 >> is a question of how you want blame assigned, specifically the
 >> granularity. define/contract treats each definition as its own
 >> separate unit of blame and provide+contract-out treats each module as
 >> its own unit of blame.
 >>=20
 >> Robby
 >>=20
 >> On Mon, Aug 20, 2012 at 8:02 PM, Gregory Woodhouse =
 <gregwoodhouse@me.com> wrote:
 >>> That explains it. I had been using the contract-out form for =
 functions, but define/contract for classes.
 >>>=20
 >>> On Aug 20, 2012, at 5:28 PM, Robby Findler =
 <robby@eecs.northwestern.edu> wrote:
 >>>=20
 >>>> Also perhaps worth noting, the contract-out clause of provide
 >>>> explicitly moves the contracts to the end of the module before
 >>>> evaluating them.
 >>>>=20
 >>>> Robby
 >>>>=20
 >>>> On Mon, Aug 20, 2012 at 7:19 PM, Matthias Felleisen
 >>>> <matthias@ccs.neu.edu> wrote:
 >>>>>=20
 >>>>> This is not a bug. When you write down a contract, its pieces must =
 have values when you evaluate the contract. So this works:
 >>>>>=20
 >>>>> #lang racket
 >>>>>=20
 >>>>> (define (coord? x) #t)
 >>>>> (define (digit? x) #t)
 >>>>>=20
 >>>>> (define/contract base-grid%
 >>>>> (class/c
 >>>>> ;; now coord? and digit? are defined, can be derefernced, and used =
 to build the contract:
 >>>>> (get-cell (->m coord? coord? digit?)))
 >>>>> (class* object% ()
 >>>>>  (super-new)
 >>>>>  (init-field (x 0))
 >>>>>  (define/public (get-cell a b)
 >>>>>    x)))
 >>>>>=20
 >>>>>=20
 >>>>>=20
 >>>>>=20
 >>>>> On Aug 20, 2012, at 7:48 PM, gregwoodhouse@me.com wrote:
 >>>>>=20
 >>>>>> A new problem report is waiting at
 >>>>>> http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13046
 >>>>>>=20
 >>>>>> Reported by Greg Woodhouse for release: 5.3
 >>>>>>=20
 >>>>>> *** Description:
 >>>>>> If I try to use a predicate inside class/c (or better (->m ...), =
 I get an error such as
 >>>>>>=20
 >>>>>> coord?: undefined;
 >>>>>> cannot reference an identifier before its definition
 >>>>>>=20
 >>>>>> This is not true of contracts I write on functions.
 >>>>>>=20
 >>>>>> *** How to repeat:
 >>>>>> (define/contract base-grid%
 >>>>>> (class/c
 >>>>>> (get-cell (->m coord? coord? digit?))
 >>>>>> (set-cell! (->m coord? coord? digit? void?))
 >>>>>> (show (->m void?)))
 >>>>>>=20
 >>>>>> (class* object% (base-grid<%>)
 >>>>>> (super-new)
 >>>>>>=20
 >>>>>> ...)
 >>>>>>=20
 >>>>>> ;;contract building blocks
 >>>>>> (define (digit? x) (and (integer? x) (>=3D x 0) (< x 10)))
 >>>>>> (define (coord? x) (and (integer? x) (>=3D x 0) (< x 9)))
 >>>>>> (define (cell? x)
 >>>>>> (and (list? x) (equal? (length x) 2) (coord? (first x)) (coord? =
 (second x))))
 >>>>>> (define (cell+value? x)
 >>>>>> (and (list? x) (equal? (length x) 3) (coord? (first x)) (coord? =
 (second x)) (digit? (third x))))
 >>>>>>=20
 >>>>>> *** Environment:
 >>>>>> macosx "Darwin Sedna.local 12.0.0 Darwin Kernel Version 12.0.0: =
 Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64" =
 (i386-macosx/3m) (get-display-depth) =3D 32
 >>>>>> Human Language: english
 >>>>>> (current-memory-use) 165990516
 >>>>>> Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? =
 #t) =3D (); (links #:user? #f #:root? #t) =3D ()
 >>>>>>=20
 >>>>>>=20
 >>>>>> Collections:
 >>>>>> ("/Users/gregwoodhouse/Library/Racket/5.3/collects"
 >>>>>> (non-existent-path))
 >>>>>> ("/Applications/Racket v5.3/collects"
 >>>>>> ("2htdp" "algol60" "at-exp" "browser" "compiler" "config" "data" =
 "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" =
 "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" =
 "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" =
 "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" =
 "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" =
 "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" =
 "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" =
 "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" =
 "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" =
 "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" =
 "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" =
 "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" =
 "wxme" "xml" "xrepl"))
 >>>>>>=20
 >>>>>> Computer Language: (("Determine language from source") (#(#t =
 print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t =
 ((main) (test))))
 >>>>>>=20
 >>>>>=20
 >>>=20
 >=20
 
 
 --Apple-Mail=_1ACF30A7-3357-4CB1-AE55-1F3A5BDC0EEC
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgyMTEyNDAzNlowIwYJKoZI
 hvcNAQkEMRYEFJBWH2XzUBHlxAKH/XGZQuPhPrjeMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAAyQYbNR/rF+AUL+KWlFV0J0M3TxnDChUUHrUJ+H0xq1fQY4OubwcjkL74paEBLYUXJi
 0Re3K/pdDyfmgah7URyWi9Bm0O/CEpcbCtCpp3FICyN2629yvyQT0pmuAGR4OS5h/RxGTUzg19AE
 4iWmYKdHjM7qv4EXbZsW3EmVqsBU1ybOrwdO5g/vWYPD7AdxTAsDIkl5YFs+vYAvUo+kFvXssnDg
 RML04LQQxSndX09NAkf/hGfU6ViyLB4lJPJowXwjZWX0OEZ5ek1hbPKCxKRTQN8xOPWJxvRwL9K9
 HYQdCM6hyCDbD3fjAq881ZEGMD71iX4p/imGF3x2EWPblQ0AAAAAAAA=
 
 --Apple-Mail=_1ACF30A7-3357-4CB1-AE55-1F3A5BDC0EEC--
From: Gregory Woodhouse <gregwoodhouse@me.com>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13046: Cannot reference functions inside class/c
Date: Tue, 21 Aug 2012 10:06:58 -0700

 That makes sense. I'll move it all to the top.  
 
 Sent from my iPhone
 
 On Aug 21, 2012, at 5:40 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 
 > 
 > The Racket style is to put the export interface material at the top of a module. In my experience, you almost always get away reading it instead of the implementation when you need to know something about an export. So in your case
 > 
 > #lang racket 
 > 
 > (define (coordinate? x) ...)
 > 
 > (define cell/c 
 >  (class/c ...coordinate? ...))
 > 
 > (provide/contract ...) or (provide (contract/out ...))
 > 
 > ;; ----------------------------------------------------
 > ;; implementation 
 > 
 > (require ..)
 > 
 > Above the line you establish the terminology (ontology in modern words) to talk to your 'client modules'. Below the line they shouldn't have to look (much) 
 > 
 > -- Matthias
 > 
 > 
 > 
 > 
 > On Aug 20, 2012, at 11:28 PM, Gregory Woodhouse wrote:
 > 
 >> I kind of guessed that. In any case, I've rewritten my module to put the exports at the end (and have switched to using provide + contract-out for the classes, too) and everything is fine. I don't like it because I like having my class contracts close to the class definitions (of which there are only two: grid% and base-grid%) because I like to keep related things close together in the source. 
 >> 
 >> Now, the real mystery (for me) is what to do with my mixins. Yes, this has been a real learning experience in how to use the class system in Racket
 >> 
 >> (define file-grid<%>
 >> (interface (base-grid<%>)
 >>   load-grid!))
 >> 
 >> (define file-mixin
 >> (mixin (base-grid<%>) (file-grid<%>)
 >>   (super-new)
 >>   (inherit set-cell!)
 >>   ;load grid from a file
 >>   (define/public (load-grid! fname)
 >>     (with-handlers
 >>         ((exn:fail:filesystem?
 >>           (lambda (exn)
 >>             (printf " Cannot open file ~a~n~a~n" fname exn)))
 >>          (exn:fail?
 >>           (lambda (exn)
 >>             (printf "Something went wrong!~n~a~n" exn))))
 >>       (let
 >>           ([x
 >>             (call-with-input-file fname
 >>               (lambda (in)
 >>                 (read in)))])
 >>         (for ([i x])
 >>           (set-cell! (first i) (second i) (third i))))))))
 >> 
 >> (define grid%
 >> (file-mixin
 >>  (pencil-mixin base-grid%)))
 >> 
 >> On Aug 20, 2012, at 6:17 PM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 >> 
 >>> Just in case: the difference between contract-out and define/contract
 >>> is a question of how you want blame assigned, specifically the
 >>> granularity. define/contract treats each definition as its own
 >>> separate unit of blame and provide+contract-out treats each module as
 >>> its own unit of blame.
 >>> 
 >>> Robby
 >>> 
 >>> On Mon, Aug 20, 2012 at 8:02 PM, Gregory Woodhouse <gregwoodhouse@me.com> wrote:
 >>>> That explains it. I had been using the contract-out form for functions, but define/contract for classes.
 >>>> 
 >>>> On Aug 20, 2012, at 5:28 PM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 >>>> 
 >>>>> Also perhaps worth noting, the contract-out clause of provide
 >>>>> explicitly moves the contracts to the end of the module before
 >>>>> evaluating them.
 >>>>> 
 >>>>> Robby
 >>>>> 
 >>>>> On Mon, Aug 20, 2012 at 7:19 PM, Matthias Felleisen
 >>>>> <matthias@ccs.neu.edu> wrote:
 >>>>>> 
 >>>>>> This is not a bug. When you write down a contract, its pieces must have values when you evaluate the contract. So this works:
 >>>>>> 
 >>>>>> #lang racket
 >>>>>> 
 >>>>>> (define (coord? x) #t)
 >>>>>> (define (digit? x) #t)
 >>>>>> 
 >>>>>> (define/contract base-grid%
 >>>>>> (class/c
 >>>>>> ;; now coord? and digit? are defined, can be derefernced, and used to build the contract:
 >>>>>> (get-cell (->m coord? coord? digit?)))
 >>>>>> (class* object% ()
 >>>>>> (super-new)
 >>>>>> (init-field (x 0))
 >>>>>> (define/public (get-cell a b)
 >>>>>>   x)))
 >>>>>> 
 >>>>>> 
 >>>>>> 
 >>>>>> 
 >>>>>> On Aug 20, 2012, at 7:48 PM, gregwoodhouse@me.com wrote:
 >>>>>> 
 >>>>>>> A new problem report is waiting at
 >>>>>>> http://bugs.racket-lang.org/query/?cmd=view&pr=13046
 >>>>>>> 
 >>>>>>> Reported by Greg Woodhouse for release: 5.3
 >>>>>>> 
 >>>>>>> *** Description:
 >>>>>>> If I try to use a predicate inside class/c (or better (->m ...), I get an error such as
 >>>>>>> 
 >>>>>>> coord?: undefined;
 >>>>>>> cannot reference an identifier before its definition
 >>>>>>> 
 >>>>>>> This is not true of contracts I write on functions.
 >>>>>>> 
 >>>>>>> *** How to repeat:
 >>>>>>> (define/contract base-grid%
 >>>>>>> (class/c
 >>>>>>> (get-cell (->m coord? coord? digit?))
 >>>>>>> (set-cell! (->m coord? coord? digit? void?))
 >>>>>>> (show (->m void?)))
 >>>>>>> 
 >>>>>>> (class* object% (base-grid<%>)
 >>>>>>> (super-new)
 >>>>>>> 
 >>>>>>> ...)
 >>>>>>> 
 >>>>>>> ;;contract building blocks
 >>>>>>> (define (digit? x) (and (integer? x) (>= x 0) (< x 10)))
 >>>>>>> (define (coord? x) (and (integer? x) (>= x 0) (< x 9)))
 >>>>>>> (define (cell? x)
 >>>>>>> (and (list? x) (equal? (length x) 2) (coord? (first x)) (coord? (second x))))
 >>>>>>> (define (cell+value? x)
 >>>>>>> (and (list? x) (equal? (length x) 3) (coord? (first x)) (coord? (second x)) (digit? (third x))))
 >>>>>>> 
 >>>>>>> *** Environment:
 >>>>>>> macosx "Darwin Sedna.local 12.0.0 Darwin Kernel Version 12.0.0: Sun Jun 24 23:00:16 PDT 2012; root:xnu-2050.7.9~1/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
 >>>>>>> Human Language: english
 >>>>>>> (current-memory-use) 165990516
 >>>>>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>>>>> 
 >>>>>>> 
 >>>>>>> Collections:
 >>>>>>> ("/Users/gregwoodhouse/Library/Racket/5.3/collects"
 >>>>>>> (non-existent-path))
 >>>>>>> ("/Applications/Racket v5.3/collects"
 >>>>>>> ("2htdp" "algol60" "at-exp" "browser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>>>>>> 
 >>>>>>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>>>>> 
 >>>>>> 
 >>>> 
 >> 
 > 

Responsible changed from "nobody" to "matthias" by eli at Mon, 18 Feb 2013 23:12:15 -0500
Reason>>> matthias closed

