From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Feb 10 10:31:08 2016
Received: from mail-io0-f179.google.com (mail-io0-f179.google.com [209.85.223.179])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u1AFV3CJ031899
	for <bugs@bugs.plt-scheme.org>; Wed, 10 Feb 2016 10:31:04 -0500
Message-Id: <201602101531.u1AFV1JO031881@winooski.ccs.neu.edu>
Date: Wed, 10 Feb 2016 10:31:01 -0500
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: read-json doesn't recognize truetrue

>Number:         15245
>Category:       all
>Synopsis:       read-json doesn't recognize truetrue
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Feb 10 10:32:01 -0500 2016
>Last-Modified:  Sat Feb 13 22:28:02 -0500 2016
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.4.0.7--2016-02-09(-/f)
>Environment:
macosx "Darwin antarctica.ccs.neu.edu 12.6.0 Darwin Kernel Version 12.6.0: Wed Mar 18 16:23:48 PDT 2015; root:xnu-2050.48.19~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 441366788
raco pkg (show):
Installation-wide:
 Package                 Checksum                            Source
 ansi                    cd01330c...                         catalog...tonyg/racket-ansi/master
 benchmark               78f36c4e...                         catalog.../racket-benchmark#master
 classicthesis-scribble  e6c3f2be...                         catalog...v/classicthesis-scribble
 glob                    b9e8ba3a...                         catalog...://github.com/bennn/glob
 graph                   ac23f439...                         catalog...com/stchang/graph/master
 honu                    7348c61d...                         catalog...//github.com/racket/honu
 htdp                    d70bce35...                         clone...com/racket/htdp/?path=htdp
 lipics                  1edffbfc...                         catalog...takikawa/lipics-scribble
 main-distribution       1a0cd523...                         catalog...racket/main-distribution
 main-distribution-test  046a9380...                         catalog...t/main-distribution-test
 r-lexer                 a9431308...                         catalog...fAndersen/racket-r-lexer
 racket-lib                                                  static-link.../plt/pkgs/racket-lib
 rackunit                062ac9d3...                         clone...et/rackunit/?path=rackunit
 redex                   8e3eaab9...                         clone...m/racket/redex/?path=redex
 sl2014                  4ffef910...                         catalog...ub.com/mfelleisen/sl2014
 unstable                6d2564bf...                         catalog.../unstable/?path=unstable
 [248 auto-installed packages not shown]
User-specific for installation "development":
 [none]



Collections:
("/Users/matthias/0Unison/collects/"
 (".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/development/collects"
 (non-existent-path))
("/Users/matthias/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket" #t #t ((test) (main)) #t))
>Description:
Arguably read-json should differ from S-expression reads in that it 
should separate tokens such as 'true' without relying on the existing
of white space between them. 

(Lisp/Scheme also ought to be self-delimiting in this respect but quirks
in the language -- # as part of identifier grammar -- prevent that.) 
>How-To-Repeat:
Here is the mini-version of the bug: 

> (with-input-from-string "truetrue" (lambda () (list (read-json) (read-json))))
string::1: read-json: bad input
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>
Cc: "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15245: read-json doesn't recognize truetrue
Date: Sat, 13 Feb 2016 22:01:17 -0500

 Just a comment from the sidelines: it looks like in the world where such
 issues should be well-discussed (the JS world), the overwhelming
 collective response to such issues is a shrug and then mumbling
 something about how you should really make sure that whoever generates
 your input should have made it a proper JSON.  They even go to implement
 hacks in the style of "if you have one JSON object per line, then simply
 wrap it in []s, replace the newlines with commas, then read the whole
 thing".
 
 Not a concrete answer, but at least for now there is no agreement on
 whether this would make any sense.  (JSON.parse() will, of course, throw
 an error since it's expecting a single JSON object.)
 
 
 On Wed, Feb 10, 2016 at 10:32 AM,  <matthias@ccs.neu.edu> wrote:
 >
 > *** Description:
 > Arguably read-json should differ from S-expression reads in that it
 > should separate tokens such as 'true' without relying on the existing
 > of white space between them.
 >
 > (Lisp/Scheme also ought to be self-delimiting in this respect but quirks
 > in the language -- # as part of identifier grammar -- prevent that.)
 >
 > *** How to repeat:
 > Here is the mini-version of the bug:
 >
 >> (with-input-from-string "truetrue" (lambda () (list (read-json) (read-json))))
 > string::1: read-json: bad input
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15245: read-json doesn't recognize truetrue
Date: Sat, 13 Feb 2016 22:05:29 -0500

 The JSON standard at json.org allow JSON values to be sent. They donâ€™t restrict this to parenthesized stuff. 
 
 My impression is that JSON is the teenage-heartbreak language of data exchange, as ill-defined and as ill-designed as Python. 
 
 
 
 > On Feb 13, 2016, at 10:01 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 
 > Just a comment from the sidelines: it looks like in the world where such
 > issues should be well-discussed (the JS world), the overwhelming
 > collective response to such issues is a shrug and then mumbling
 > something about how you should really make sure that whoever generates
 > your input should have made it a proper JSON.  They even go to implement
 > hacks in the style of "if you have one JSON object per line, then simply
 > wrap it in []s, replace the newlines with commas, then read the whole
 > thing".
 > 
 > Not a concrete answer, but at least for now there is no agreement on
 > whether this would make any sense.  (JSON.parse() will, of course, throw
 > an error since it's expecting a single JSON object.)
 > 
 > 
 > On Wed, Feb 10, 2016 at 10:32 AM,  <matthias@ccs.neu.edu> wrote:
 >> 
 >> *** Description:
 >> Arguably read-json should differ from S-expression reads in that it
 >> should separate tokens such as 'true' without relying on the existing
 >> of white space between them.
 >> 
 >> (Lisp/Scheme also ought to be self-delimiting in this respect but quirks
 >> in the language -- # as part of identifier grammar -- prevent that.)
 >> 
 >> *** How to repeat:
 >> Here is the mini-version of the bug:
 >> 
 >>> (with-input-from-string "truetrue" (lambda () (list (read-json) (read-json))))
 >> string::1: read-json: bad input
 > 
 > -- 
 >                    ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
 >                    http://barzilay.org/                   Maze is Life!
 
 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15245: read-json doesn't recognize truetrue
Date: Sat, 13 Feb 2016 22:12:39 -0500

 On Sat, Feb 13, 2016 at 10:05 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 > My impression is that JSON is the teenage-heartbreak language of data exchange, as ill-defined and as ill-designed as Python.
 
 The JSON specification is perfectly well-defined, and actually
 decently well-designed, but this isn't one of the things it specifies.
 In particular, the JSON spec itself only defines when a sequence of
 characters is legal JSON, so it doesn't specify the behavior of
 something like `read-json`. The JS standard, which defines
 JSON.parse(), doesn't define it to be read-like (one of the best
 features of Racket's json library).
 
 But given the JSON spec, the first four characters of your test case
 are a JSON document, and so I think `read-json` should behave the way
 you expect. Maybe the word-boundary parts of the regexps here:
 https://github.com/racket/racket/blob/master/racket/collects/json/main.rkt#L179-L181
 could just be removed, and everything would still work. Seems like the
 right thing to test.
 
 Sam
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Eli Barzilay <eli@barzilay.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15245: read-json doesn't recognize truetrue
Date: Sat, 13 Feb 2016 22:16:51 -0500

 > On Feb 13, 2016, at 10:12 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 > 
 > On Sat, Feb 13, 2016 at 10:05 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >> My impression is that JSON is the teenage-heartbreak language of data exchange, as ill-defined and as ill-designed as Python.
 > 
 > The JSON specification is perfectly well-defined,
 
 So what happens when a hash table contains the same key twice? How is this supposed to be mapped to a data representation? I can enumerate a few more such things. The worst aspect is that it does not specify which parts are JSON â€˜messagesâ€™ and whether such things have to separated by white space or newlines or whatever. 
 
 
 > and actually
 > decently well-designed, but this isn't one of the things it specifies.
 > In particular, the JSON spec itself only defines when a sequence of
 > characters is legal JSON, so it doesn't specify the behavior of
 > something like `read-json`. The JS standard, which defines
 > JSON.parse(), doesn't define it to be read-like (one of the best
 > features of Racket's json library).
 
 ((Donâ€™t confuse JS and its JSON treatment with JSON.)) 
 
 
 > But given the JSON spec, the first four characters of your test case
 > are a JSON document, and so I think `read-json` should behave the way
 > you expect. Maybe the word-boundary parts of the regexps here:
 > https://github.com/racket/racket/blob/master/racket/collects/json/main.rkt#L179-L181
 > could just be removed, and everything would still work. Seems like the
 > right thing to test.
 
 I think we should then also accept truetrue as two JSON messages, each conveying true. 
 
 
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15245: read-json doesn't recognize truetrue
Date: Sat, 13 Feb 2016 22:20:41 -0500

 On Sat, Feb 13, 2016 at 10:12 PM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > On Sat, Feb 13, 2016 at 10:05 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >> My impression is that JSON is the teenage-heartbreak language of data
 >> exchange, as ill-defined and as ill-designed as Python.
 >
 > The JSON specification is perfectly well-defined, and actually
 > decently well-designed, but this isn't one of the things it specifies.
 
 And *this* (the fact that it isn't) is why I completely agree with
 Matthias.  It's more like a cultural mentality than a spec.  I don't
 expect such an issue to go undiscussed in any kind of a lisp circle, but
 in JS the lack of anything about it is very surprising given how many
 more eyeballs went through these things.
 
 
 > But given the JSON spec, the first four characters of your test case
 > are a JSON document, and so I think `read-json` should behave the way
 > you expect. Maybe the word-boundary parts of the regexps here:
 > https://github.com/racket/racket/blob/master/racket/collects/json/main.rkt#L179-L181
 > could just be removed, and everything would still work. Seems like the
 > right thing to test.
 
 That looks reasonable to me.  But I wouldn't be surprised if there are
 also tests that should be adjusted.  (I *do* remember being aware of
 this failing, and intentionally keeping those `\\b`s.)
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15245: read-json doesn't recognize truetrue
Date: Sat, 13 Feb 2016 22:24:18 -0500

 On Sat, Feb 13, 2016 at 10:16 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > I think we should then also accept truetrue as two JSON messages, each
 > conveying true.
 
 (I think that this will be the result of that change.)
 
 -- 
                     ((x=>x(x))(x=>x(x)))                   Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15245: read-json doesn't recognize truetrue
Date: Sat, 13 Feb 2016 22:25:49 -0500

 On Sat, Feb 13, 2016 at 10:16 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 >> On Feb 13, 2016, at 10:12 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 >>
 >> On Sat, Feb 13, 2016 at 10:05 PM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >>> My impression is that JSON is the teenage-heartbreak language of data exchange, as ill-defined and as ill-designed as Python.
 >>
 >> The JSON specification is perfectly well-defined,
 >
 > So what happens when a hash table contains the same key twice? How is this supposed to be mapped to a data representation? I can enumerate a few more such things. The worst aspect is that it does not specify which parts are JSON â€˜messagesâ€™ and whether such things have to separated by white space or newlines or whatever.
 
 As you say below, it's important not to confuse a PL
 serialization/deserialization library with JSON, which is simply a
 grammar for a text format. JSON-the-text-format (specified by
 Ecma-404, here:
 http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf
 ) allows duplicate keys but intentionally does not specify how to map
 things to a data format.
 
 Individual language bindings for JSON can specify this, as the JS one
 does, but this is an intentional choice by JSON not to specify an
 object model (XML, in contrast, specifies a quite complicated object
 model), not an accident of ill-definedness.
 
 >> and actually
 >> decently well-designed, but this isn't one of the things it specifies.
 >> In particular, the JSON spec itself only defines when a sequence of
 >> characters is legal JSON, so it doesn't specify the behavior of
 >> something like `read-json`. The JS standard, which defines
 >> JSON.parse(), doesn't define it to be read-like (one of the best
 >> features of Racket's json library).
 >
 > ((Donâ€™t confuse JS and its JSON treatment with JSON.))
 
 Right, I was explicitly distinguishing them.
 
 >> But given the JSON spec, the first four characters of your test case
 >> are a JSON document, and so I think `read-json` should behave the way
 >> you expect. Maybe the word-boundary parts of the regexps here:
 >> https://github.com/racket/racket/blob/master/racket/collects/json/main.rkt#L179-L181
 >> could just be removed, and everything would still work. Seems like the
 >> right thing to test.
 >
 > I think we should then also accept truetrue as two JSON messages, each conveying true.
 
 I agree -- those are the lines you should look at to fix this.
 
 Sam
 
