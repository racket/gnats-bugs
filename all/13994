From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Sep  2 15:50:45 2013
Received: from mail-oa0-f41.google.com (mail-oa0-f41.google.com [209.85.219.41])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r82JodWQ016631
	for <bugs@bugs.plt-scheme.org>; Mon, 2 Sep 2013 15:50:39 -0400
Message-Id: <201309021950.r82JoaXq016626@champlain.ccs.neu.edu>
Date: Mon, 2 Sep 2013 15:50:36 -0400
From: g@fridim.org
To: bugs@racket-lang.org
Subject: hash-iterate-key : contract violation  using in-set

>Number:         13994
>Category:       all
>Synopsis:       hash-iterate-key : contract violation  using in-set
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Sep 02 15:52:02 -0400 2013
>Closed-Date:    Mon Oct 21 10:09:40 -0400 2013
>Last-Modified:  Mon Oct 21 10:09:40 -0400 2013
>Originator:     Guillaume Coré
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.6
>Environment:
Linux 3.10.7-1-ARCH #1 SMP PREEMPT Thu Aug 15 11:55:34 CEST 2013 x86_64 GNU/Linux
>Description:
$ racket bug.rkt
26664
hash-iterate-key: contract violation
  expected: exact-nonnegative-integer?
  given: -8863858122045784064
  argument position: 2nd
  other arguments...:
   '#hash((30 . #t) (32 . #t) (36 . #t) (38 . #t) (42 . #t) (44 . #t) (48 . #t) (50 . #t) (52 . #t) (54 . #t) (56 . #t) (58 . #t) (60 . #t) (62 . #t) (64 . #t) (66 . #t) (68 . #t) (70 . #t) (72 . #t) (74 . #t) (76 . #t) (78 . #t) (80 . #t) (82 . #t) (8...
  context...:
   /usr/lib/racket/collects/racket/set.rkt:301:2: for-loop
   /usr/lib/racket/collects/racket/set.rkt:53:4: print-one-line
   /usr/lib/racket/collects/racket/private/modbeg.rkt:10:4: print-values
   /home/fridim/Dropbox/Projects/euler/bug.rkt: [running body]
>How-To-Repeat:
#lang racket

(require math/number-theory)

(define limit 28123)

(define (is-abundant? n)
  (> (- (apply + (divisors n)) n) n))

(define abundants
  (for/set ([i (in-range limit)]
            #:when (is-abundant? i))
           i))

(define abundants-gen
  (for*/set ([i (in-set abundants)]
             [j (in-set abundants)]
             #:when (and (not (= i j)) (< (+ i j) limit)))
            (+ i j)))

(set-count abundants-gen)
abundants-gen
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: g@fridim.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13994: hash-iterate-key : contract violation  using in-set
Date: Mon, 2 Sep 2013 14:21:20 -0600

 Thanks for the report!
 
 This problem has been fixed in the development version of Racket.
 Snapshots of the development version are available here:
 
  http://www.cs.utah.edu/plt/snapshots/
  http://plt.eecs.northwestern.edu/snapshots/
 
 At Mon, 2 Sep 2013 15:52:02 -0400, g@fridim.org wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13994
 > 
 > Reported by Guillaume CorÃ© for release: 5.3.6
 > 
 > *** Description:
 > $ racket bug.rkt
 > 26664
 > hash-iterate-key: contract violation
 >   expected: exact-nonnegative-integer?
 >   given: -8863858122045784064
 >   argument position: 2nd
 >   other arguments...:
 >    '#hash((30 . #t) (32 . #t) (36 . #t) (38 . #t) (42 . #t) (44 . #t) (48 . 
 > #t) (50 . #t) (52 . #t) (54 . #t) (56 . #t) (58 . #t) (60 . #t) (62 . #t) (64 
 > . #t) (66 . #t) (68 . #t) (70 . #t) (72 . #t) (74 . #t) (76 . #t) (78 . #t) 
 > (80 . #t) (82 . #t) (8...
 >   context...:
 >    /usr/lib/racket/collects/racket/set.rkt:301:2: for-loop
 >    /usr/lib/racket/collects/racket/set.rkt:53:4: print-one-line
 >    /usr/lib/racket/collects/racket/private/modbeg.rkt:10:4: print-values
 >    /home/fridim/Dropbox/Projects/euler/bug.rkt: [running body]
 > 
 > *** How to repeat:
 > #lang racket
 > 
 > (require math/number-theory)
 > 
 > (define limit 28123)
 > 
 > (define (is-abundant? n)
 >   (> (- (apply + (divisors n)) n) n))
 > 
 > (define abundants
 >   (for/set ([i (in-range limit)]
 >             #:when (is-abundant? i))
 >            i))
 > 
 > (define abundants-gen
 >   (for*/set ([i (in-set abundants)]
 >              [j (in-set abundants)]
 >              #:when (and (not (= i j)) (< (+ i j) limit)))
 >             (+ i j)))
 > 
 > (set-count abundants-gen)
 > abundants-gen
 > 
 > *** Environment:
 > Linux 3.10.7-1-ARCH #1 SMP PREEMPT Thu Aug 15 11:55:34 CEST 2013 x86_64 
 > GNU/Linux
 

State changed from "open" to "closed" by samth at Mon, 21 Oct 2013 10:09:40 -0400
Reason>>> fixed

