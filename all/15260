From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Feb 27 09:21:40 2016
Received: from mail-ig0-f182.google.com (mail-ig0-f182.google.com [209.85.213.182])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u1RELdZK027984
	for <bugs@bugs.plt-scheme.org>; Sat, 27 Feb 2016 09:21:39 -0500
Message-Id: <201602221510.u1MFAX8v025749@winooski.ccs.neu.edu>
Date: Mon, 22 Feb 2016 10:10:33 -0500
From: tfb@tfeb.org
To: bugs@racket-lang.org
Subject: Obscure bug (I think) in class definitions

>Number:         15260
>Category:       all
>Synopsis:       Obscure bug (I think) in class definitions
>Class:          sw-bug
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Feb 27 09:24:07 -0500 2016
>Last-Modified:  Sat Feb 27 10:24:01 -0500 2016
>Originator:     Tim Bradshaw
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.4
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0
>Description:
Some class definitions with initialisation code that uses named let can fall over at macroexpansion time.  I think this is when the values of init or field forms are used in sufficiently complicated ways, but I am not sure and I'm not familiar enough with the guts of Racket to understand what's going on.

See the steps-to-reproduce for an example that fails and two versions which don't.

It's possible I just don't understand the class definition syntax well enough, and this isn't a bug at all.
>How-To-Repeat:
The following class definition blows up:

(define foo%
  (class object%
    (init items)
    (super-new)

    (let loop ([things (map car items)]
               [i 0])
      (unless (null? things) (loop (rest things) (+ i 1))))))


This rewrite works (pulling the items reference out of the named let):

(define foo%
  (class object%
    (init items)
    (super-new)

    (let ([them (map car items)])
      (let loop ([things them]
                 [i 0])
        (unless (null? things) (loop (rest things) (+ i 1)))))))

This not-quite-equivalent thing also works:

(define foo%
  (class object%
    (init items)
    (super-new)

    (let loop ([things (map car items)])
      (unless (null? things) (loop (rest things))))))


>Fix:
>Audit-Trail:
From: Tim Bradshaw <tfb@tfeb.org>
To: bugs@racket-lang.org, tfb@tfeb.org
Cc: 
Subject: Re: all/15260: Obscure bug (I think) in class definitions
Date: Sat, 27 Feb 2016 15:23:13 +0000

 This is a duplicate of all/15254: they're both the same problem and both submitted by me in fact.
 
