From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Feb 15 13:42:23 2013
Received: from mail-oa0-f43.google.com (mail-oa0-f43.google.com [209.85.219.43])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r1FIgJEK020101
	for <bugs@bugs.plt-scheme.org>; Fri, 15 Feb 2013 13:42:20 -0500
Message-Id: <201302151842.r1FIgHpK020095@champlain.ccs.neu.edu>
Date: Fri, 15 Feb 2013 13:42:17 -0500
From: emina@eecs.berkeley.edu
To: bugs@racket-lang.org
Subject: pattern matching bug

>Number:         13525
>Category:       all
>Synopsis:       pattern matching bug
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Feb 15 13:44:01 -0500 2013
>Closed-Date:    Tue Mar 25 10:18:55 -0400 2014
>Last-Modified:  Tue Mar 25 10:18:55 -0400 2014
>Originator:     Emina Torlak
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14
>Description:
Pattern matcher incorrectly binds pattern variables when the match is applied to multiple values with nested list patterns.

The following snippet shows the problem:

> (match* ('(1 2 3) '(1 (2) 3))
   [((list y ... x z ...) (list v ... (list x) w ...))
    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
            y x z v w)])

y = (1 2), x = 2, z = (), v = (1), w = (3)

This doesn't seem right, since the '2 in the first list is bound twice but the '3 is not bound at all.  I expected the following instead:

y = (1), x = 2, z = (3), v = (1), w = (3)

Note that similar examples work as expected:

> (match* ('(1 (2) 3) '(1 (2) 3))
  [((list y ... (list x) z ...) (list v ... (list x) w ...))
   (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
           y x z v w)])

y = (1), x = 2, z = (3), v = (1), w = (3)

> (match* ('(1 2 3) '(1 2 3))
   [((list y ... x z ...) (list v ... x w ...))
    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
            y x z v w)])

y = (1 2), x = 3, z = (), v = (1 2), w = ()


>How-To-Repeat:
Please see the description of the problem.
>Fix:
>Audit-Trail:
From: Stephen Chang <stchang@ccs.neu.edu>
To: emina@eecs.berkeley.edu, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 14:00:08 -0500

 The behavior seems correct. In your example, x appears twice in the
 pattern so it is bound twice, first to the 3 in the first list, then
 rebound to the 2 in the second list. (The y should be bound to (1 2)
 because the ellipses bind greedily, as seen in your last example.)
 
 On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 >
 > Reported by Emina Torlak for release: 5.3.1
 >
 > *** Description:
 > Pattern matcher incorrectly binds pattern variables when the match is applied to multiple values with nested list patterns.
 >
 > The following snippet shows the problem:
 >
 >> (match* ('(1 2 3) '(1 (2) 3))
 >    [((list y ... x z ...) (list v ... (list x) w ...))
 >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >             y x z v w)])
 >
 > y = (1 2), x = 2, z = (), v = (1), w = (3)
 >
 > This doesn't seem right, since the '2 in the first list is bound twice but the '3 is not bound at all.  I expected the following instead:
 >
 > y = (1), x = 2, z = (3), v = (1), w = (3)
 >
 > Note that similar examples work as expected:
 >
 >> (match* ('(1 (2) 3) '(1 (2) 3))
 >   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 >    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >            y x z v w)])
 >
 > y = (1), x = 2, z = (3), v = (1), w = (3)
 >
 >> (match* ('(1 2 3) '(1 2 3))
 >    [((list y ... x z ...) (list v ... x w ...))
 >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >             y x z v w)])
 >
 > y = (1 2), x = 3, z = (), v = (1 2), w = ()
 >
 >
 >
 > *** How to repeat:
 > Please see the description of the problem.
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14
 >
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Stephen Chang <stchang@ccs.neu.edu>
Cc: emina@eecs.berkeley.edu, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 14:07:27 -0500

 No, this is a bug.  When `x` appears twice (this is called a
 non-linear pattern) there's an equality constraint on all the matches
 for `x`.  Unfortunately, it doesn't work right with multiple `...` or
 with `list-no-order`, in a way that would be quite hard to fix.  I
 plan to make this a syntax error.
 
 Sam
 
 On Fri, Feb 15, 2013 at 2:00 PM, Stephen Chang <stchang@ccs.neu.edu> wrote:
 > The behavior seems correct. In your example, x appears twice in the
 > pattern so it is bound twice, first to the 3 in the first list, then
 > rebound to the 2 in the second list. (The y should be bound to (1 2)
 > because the ellipses bind greedily, as seen in your last example.)
 >
 > On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 >>
 >> Reported by Emina Torlak for release: 5.3.1
 >>
 >> *** Description:
 >> Pattern matcher incorrectly binds pattern variables when the match is applied to multiple values with nested list patterns.
 >>
 >> The following snippet shows the problem:
 >>
 >>> (match* ('(1 2 3) '(1 (2) 3))
 >>    [((list y ... x z ...) (list v ... (list x) w ...))
 >>     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>             y x z v w)])
 >>
 >> y = (1 2), x = 2, z = (), v = (1), w = (3)
 >>
 >> This doesn't seem right, since the '2 in the first list is bound twice but the '3 is not bound at all.  I expected the following instead:
 >>
 >> y = (1), x = 2, z = (3), v = (1), w = (3)
 >>
 >> Note that similar examples work as expected:
 >>
 >>> (match* ('(1 (2) 3) '(1 (2) 3))
 >>   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 >>    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>            y x z v w)])
 >>
 >> y = (1), x = 2, z = (3), v = (1), w = (3)
 >>
 >>> (match* ('(1 2 3) '(1 2 3))
 >>    [((list y ... x z ...) (list v ... x w ...))
 >>     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>             y x z v w)])
 >>
 >> y = (1 2), x = 3, z = (), v = (1 2), w = ()
 >>
 >>
 >>
 >> *** How to repeat:
 >> Please see the description of the problem.
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14
 >>
From: Stephen Chang <stchang@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: emina@eecs.berkeley.edu, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 14:09:35 -0500

 Ah ok, thanks.
 
 On Fri, Feb 15, 2013 at 2:07 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > No, this is a bug.  When `x` appears twice (this is called a
 > non-linear pattern) there's an equality constraint on all the matches
 > for `x`.  Unfortunately, it doesn't work right with multiple `...` or
 > with `list-no-order`, in a way that would be quite hard to fix.  I
 > plan to make this a syntax error.
 >
 > Sam
 >
 > On Fri, Feb 15, 2013 at 2:00 PM, Stephen Chang <stchang@ccs.neu.edu> wrote:
 >> The behavior seems correct. In your example, x appears twice in the
 >> pattern so it is bound twice, first to the 3 in the first list, then
 >> rebound to the 2 in the second list. (The y should be bound to (1 2)
 >> because the ellipses bind greedily, as seen in your last example.)
 >>
 >> On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 >>>
 >>> Reported by Emina Torlak for release: 5.3.1
 >>>
 >>> *** Description:
 >>> Pattern matcher incorrectly binds pattern variables when the match is applied to multiple values with nested list patterns.
 >>>
 >>> The following snippet shows the problem:
 >>>
 >>>> (match* ('(1 2 3) '(1 (2) 3))
 >>>    [((list y ... x z ...) (list v ... (list x) w ...))
 >>>     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>>             y x z v w)])
 >>>
 >>> y = (1 2), x = 2, z = (), v = (1), w = (3)
 >>>
 >>> This doesn't seem right, since the '2 in the first list is bound twice but the '3 is not bound at all.  I expected the following instead:
 >>>
 >>> y = (1), x = 2, z = (3), v = (1), w = (3)
 >>>
 >>> Note that similar examples work as expected:
 >>>
 >>>> (match* ('(1 (2) 3) '(1 (2) 3))
 >>>   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 >>>    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>>            y x z v w)])
 >>>
 >>> y = (1), x = 2, z = (3), v = (1), w = (3)
 >>>
 >>>> (match* ('(1 2 3) '(1 2 3))
 >>>    [((list y ... x z ...) (list v ... x w ...))
 >>>     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>>             y x z v w)])
 >>>
 >>> y = (1 2), x = 3, z = (), v = (1 2), w = ()
 >>>
 >>>
 >>>
 >>> *** How to repeat:
 >>> Please see the description of the problem.
 >>>
 >>> *** Environment:
 >>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14
 >>>
From: Emina Torlak <emina@eecs.berkeley.edu>
To: Stephen Chang <stchang@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 11:23:22 -0800

 --047d7b343f60011e5204d5c84f51
 Content-Type: text/plain; charset=ISO-8859-1
 
 Hi Stephen,
 
 Thanks for the clarification.  Based on the pattern matcher's behavior when
 matching
 against a single value, my understanding was that the repeated use of the
 same variable
 binds the same value.   That is, in the following example, the matcher
 tries (and fails) to
 bind "x"  to the same value:
 
 (match '(1 2 3)
     [(list y ... x x) #t]
     [_ #f])
 
 I expected this behavior to carry over to the case of multiple values being
 matched.
 I didn't expect the two uses of "x" to be bound independently in my
 original example.
 But given that this is the semantics, then I understand the outcome.
 
 Cheers,
 Emina
 
 On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang <stchang@ccs.neu.edu> wrote:
 
 > The behavior seems correct. In your example, x appears twice in the
 > pattern so it is bound twice, first to the 3 in the first list, then
 > rebound to the 2 in the second list. (The y should be bound to (1 2)
 > because the ellipses bind greedily, as seen in your last example.)
 >
 > On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 > >
 > > Reported by Emina Torlak for release: 5.3.1
 > >
 > > *** Description:
 > > Pattern matcher incorrectly binds pattern variables when the match is
 > applied to multiple values with nested list patterns.
 > >
 > > The following snippet shows the problem:
 > >
 > >> (match* ('(1 2 3) '(1 (2) 3))
 > >    [((list y ... x z ...) (list v ... (list x) w ...))
 > >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >             y x z v w)])
 > >
 > > y = (1 2), x = 2, z = (), v = (1), w = (3)
 > >
 > > This doesn't seem right, since the '2 in the first list is bound twice
 > but the '3 is not bound at all.  I expected the following instead:
 > >
 > > y = (1), x = 2, z = (3), v = (1), w = (3)
 > >
 > > Note that similar examples work as expected:
 > >
 > >> (match* ('(1 (2) 3) '(1 (2) 3))
 > >   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 > >    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >            y x z v w)])
 > >
 > > y = (1), x = 2, z = (3), v = (1), w = (3)
 > >
 > >> (match* ('(1 2 3) '(1 2 3))
 > >    [((list y ... x z ...) (list v ... x w ...))
 > >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >             y x z v w)])
 > >
 > > y = (1 2), x = 3, z = (), v = (1 2), w = ()
 > >
 > >
 > >
 > > *** How to repeat:
 > > Please see the description of the problem.
 > >
 > > *** Environment:
 > > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 > AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14
 > >
 >
 
 --047d7b343f60011e5204d5c84f51
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 Hi Stephen,<div><br></div><div>Thanks for the clarification. =A0Based on th=
 e pattern matcher&#39;s behavior when matching=A0</div><div>against a singl=
 e value, my understanding was that the=A0repeated use of the same variable<=
 /div>
 <div>binds the same value. =A0 That is, in the following example, the match=
 er tries (and=A0fails) to=A0</div><div>bind &quot;x&quot;=A0=A0to the same=
 =A0value:</div><div><br></div><div><div>(match &#39;(1 2 3)</div><div>=A0 =
 =A0 [(list y ... x x) #t]</div>
 <div>=A0 =A0 [_ #f])</div></div><div><br></div><div>I expected this behavio=
 r to carry over to the case of multiple values being matched. =A0</div><div=
 >I didn&#39;t expect the two uses of &quot;x&quot; to be bound independentl=
 y in my original example. =A0</div>
 <div>But given=A0that this=A0is the=A0semantics, then I understand the outc=
 ome. =A0</div><div><br></div><div>Cheers,</div><div>Emina</div><div><br><di=
 v class=3D"gmail_quote">On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang <sp=
 an dir=3D"ltr">&lt;<a href=3D"mailto:stchang@ccs.neu.edu" target=3D"_blank"=
 >stchang@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">The behavior seems correct. In your example,=
  x appears twice in the<br>
 pattern so it is bound twice, first to the 3 in the first list, then<br>
 rebound to the 2 in the second list. (The y should be bound to (1 2)<br>
 because the ellipses bind greedily, as seen in your last example.)<br>
 <br>
 On Fri, Feb 15, 2013 at 1:44 PM, =A0&lt;<a href=3D"mailto:emina@eecs.berkel=
 ey.edu">emina@eecs.berkeley.edu</a>&gt; wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt; =A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D=
 13525" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;=
 pr=3D13525</a><br>
 &gt;<br>
 &gt; Reported by Emina Torlak for release: 5.3.1<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; Pattern matcher incorrectly binds pattern variables when the match is =
 applied to multiple values with nested list patterns.<br>
 &gt;<br>
 &gt; The following snippet shows the problem:<br>
 &gt;<br>
 &gt;&gt; (match* (&#39;(1 2 3) &#39;(1 (2) 3))<br>
 &gt; =A0 =A0[((list y ... x z ...) (list v ... (list x) w ...))<br>
 &gt; =A0 =A0 (printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =3D ~a, w =3D ~a=
 \n&quot;<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 y x z v w)])<br>
 &gt;<br>
 &gt; y =3D (1 2), x =3D 2, z =3D (), v =3D (1), w =3D (3)<br>
 &gt;<br>
 &gt; This doesn&#39;t seem right, since the &#39;2 in the first list is bou=
 nd twice but the &#39;3 is not bound at all. =A0I expected the following in=
 stead:<br>
 &gt;<br>
 &gt; y =3D (1), x =3D 2, z =3D (3), v =3D (1), w =3D (3)<br>
 &gt;<br>
 &gt; Note that similar examples work as expected:<br>
 &gt;<br>
 &gt;&gt; (match* (&#39;(1 (2) 3) &#39;(1 (2) 3))<br>
 &gt; =A0 [((list y ... (list x) z ...) (list v ... (list x) w ...))<br>
 &gt; =A0 =A0(printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =3D ~a, w =3D ~a\=
 n&quot;<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0y x z v w)])<br>
 &gt;<br>
 &gt; y =3D (1), x =3D 2, z =3D (3), v =3D (1), w =3D (3)<br>
 &gt;<br>
 &gt;&gt; (match* (&#39;(1 2 3) &#39;(1 2 3))<br>
 &gt; =A0 =A0[((list y ... x z ...) (list v ... x w ...))<br>
 &gt; =A0 =A0 (printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =3D ~a, w =3D ~a=
 \n&quot;<br>
 &gt; =A0 =A0 =A0 =A0 =A0 =A0 y x z v w)])<br>
 &gt;<br>
 &gt; y =3D (1 2), x =3D 3, z =3D (), v =3D (1 2), w =3D ()<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt; Please see the description of the problem.<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/=
 536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14<br>
 &gt;<br>
 </blockquote></div><br></div>
 
 --047d7b343f60011e5204d5c84f51--
From: Stephen Chang <stchang@ccs.neu.edu>
To: Emina Torlak <emina@eecs.berkeley.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 15:05:17 -0500

 I was wrong (see Sam's reply). Sorry for any confusion.
 
 On Fri, Feb 15, 2013 at 2:23 PM, Emina Torlak <emina@eecs.berkeley.edu> wrote:
 > Hi Stephen,
 >
 > Thanks for the clarification.  Based on the pattern matcher's behavior when
 > matching
 > against a single value, my understanding was that the repeated use of the
 > same variable
 > binds the same value.   That is, in the following example, the matcher tries
 > (and fails) to
 > bind "x"  to the same value:
 >
 > (match '(1 2 3)
 >     [(list y ... x x) #t]
 >     [_ #f])
 >
 > I expected this behavior to carry over to the case of multiple values being
 > matched.
 > I didn't expect the two uses of "x" to be bound independently in my original
 > example.
 > But given that this is the semantics, then I understand the outcome.
 >
 > Cheers,
 > Emina
 >
 > On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang <stchang@ccs.neu.edu> wrote:
 >>
 >> The behavior seems correct. In your example, x appears twice in the
 >> pattern so it is bound twice, first to the 3 in the first list, then
 >> rebound to the 2 in the second list. (The y should be bound to (1 2)
 >> because the ellipses bind greedily, as seen in your last example.)
 >>
 >> On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 >> >
 >> > Reported by Emina Torlak for release: 5.3.1
 >> >
 >> > *** Description:
 >> > Pattern matcher incorrectly binds pattern variables when the match is
 >> > applied to multiple values with nested list patterns.
 >> >
 >> > The following snippet shows the problem:
 >> >
 >> >> (match* ('(1 2 3) '(1 (2) 3))
 >> >    [((list y ... x z ...) (list v ... (list x) w ...))
 >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >> >             y x z v w)])
 >> >
 >> > y = (1 2), x = 2, z = (), v = (1), w = (3)
 >> >
 >> > This doesn't seem right, since the '2 in the first list is bound twice
 >> > but the '3 is not bound at all.  I expected the following instead:
 >> >
 >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 >> >
 >> > Note that similar examples work as expected:
 >> >
 >> >> (match* ('(1 (2) 3) '(1 (2) 3))
 >> >   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 >> >    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >> >            y x z v w)])
 >> >
 >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 >> >
 >> >> (match* ('(1 2 3) '(1 2 3))
 >> >    [((list y ... x z ...) (list v ... x w ...))
 >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >> >             y x z v w)])
 >> >
 >> > y = (1 2), x = 3, z = (), v = (1 2), w = ()
 >> >
 >> >
 >> >
 >> > *** How to repeat:
 >> > Please see the description of the problem.
 >> >
 >> > *** Environment:
 >> > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 >> > AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14
 >> >
 >
 >
From: Emina Torlak <emina@eecs.berkeley.edu>
To: Stephen Chang <stchang@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 12:14:51 -0800

 --047d7b603fca1d741004d5c907b8
 Content-Type: text/plain; charset=ISO-8859-1
 
 No problem.  Thanks to both you and Sam for looking into it!
 
 On Fri, Feb 15, 2013 at 12:05 PM, Stephen Chang <stchang@ccs.neu.edu> wrote:
 
 > I was wrong (see Sam's reply). Sorry for any confusion.
 >
 > On Fri, Feb 15, 2013 at 2:23 PM, Emina Torlak <emina@eecs.berkeley.edu>
 > wrote:
 > > Hi Stephen,
 > >
 > > Thanks for the clarification.  Based on the pattern matcher's behavior
 > when
 > > matching
 > > against a single value, my understanding was that the repeated use of the
 > > same variable
 > > binds the same value.   That is, in the following example, the matcher
 > tries
 > > (and fails) to
 > > bind "x"  to the same value:
 > >
 > > (match '(1 2 3)
 > >     [(list y ... x x) #t]
 > >     [_ #f])
 > >
 > > I expected this behavior to carry over to the case of multiple values
 > being
 > > matched.
 > > I didn't expect the two uses of "x" to be bound independently in my
 > original
 > > example.
 > > But given that this is the semantics, then I understand the outcome.
 > >
 > > Cheers,
 > > Emina
 > >
 > > On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang <stchang@ccs.neu.edu>
 > wrote:
 > >>
 > >> The behavior seems correct. In your example, x appears twice in the
 > >> pattern so it is bound twice, first to the 3 in the first list, then
 > >> rebound to the 2 in the second list. (The y should be bound to (1 2)
 > >> because the ellipses bind greedily, as seen in your last example.)
 > >>
 > >> On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 > >> > A new problem report is waiting at
 > >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 > >> >
 > >> > Reported by Emina Torlak for release: 5.3.1
 > >> >
 > >> > *** Description:
 > >> > Pattern matcher incorrectly binds pattern variables when the match is
 > >> > applied to multiple values with nested list patterns.
 > >> >
 > >> > The following snippet shows the problem:
 > >> >
 > >> >> (match* ('(1 2 3) '(1 (2) 3))
 > >> >    [((list y ... x z ...) (list v ... (list x) w ...))
 > >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >> >             y x z v w)])
 > >> >
 > >> > y = (1 2), x = 2, z = (), v = (1), w = (3)
 > >> >
 > >> > This doesn't seem right, since the '2 in the first list is bound twice
 > >> > but the '3 is not bound at all.  I expected the following instead:
 > >> >
 > >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 > >> >
 > >> > Note that similar examples work as expected:
 > >> >
 > >> >> (match* ('(1 (2) 3) '(1 (2) 3))
 > >> >   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 > >> >    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >> >            y x z v w)])
 > >> >
 > >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 > >> >
 > >> >> (match* ('(1 2 3) '(1 2 3))
 > >> >    [((list y ... x z ...) (list v ... x w ...))
 > >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >> >             y x z v w)])
 > >> >
 > >> > y = (1 2), x = 3, z = (), v = (1 2), w = ()
 > >> >
 > >> >
 > >> >
 > >> > *** How to repeat:
 > >> > Please see the description of the problem.
 > >> >
 > >> > *** Environment:
 > >> > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 > >> > AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1
 > Safari/536.26.14
 > >> >
 > >
 > >
 >
 
 --047d7b603fca1d741004d5c907b8
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 No problem. =A0Thanks to both you and Sam for looking into it! =A0<div><br>=
 <div class=3D"gmail_quote">On Fri, Feb 15, 2013 at 12:05 PM, Stephen Chang =
 <span dir=3D"ltr">&lt;<a href=3D"mailto:stchang@ccs.neu.edu" target=3D"_bla=
 nk">stchang@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I was wrong (see Sam&#39;s reply). Sorry for=
  any confusion.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Fri, Feb 15, 2013 at 2:23 PM, Emina Torlak &lt;<a href=3D"mailto:emina@e=
 ecs.berkeley.edu">emina@eecs.berkeley.edu</a>&gt; wrote:<br>
 &gt; Hi Stephen,<br>
 &gt;<br>
 &gt; Thanks for the clarification. =A0Based on the pattern matcher&#39;s be=
 havior when<br>
 &gt; matching<br>
 &gt; against a single value, my understanding was that the repeated use of =
 the<br>
 &gt; same variable<br>
 &gt; binds the same value. =A0 That is, in the following example, the match=
 er tries<br>
 &gt; (and fails) to<br>
 &gt; bind &quot;x&quot; =A0to the same value:<br>
 &gt;<br>
 &gt; (match &#39;(1 2 3)<br>
 &gt; =A0 =A0 [(list y ... x x) #t]<br>
 &gt; =A0 =A0 [_ #f])<br>
 &gt;<br>
 &gt; I expected this behavior to carry over to the case of multiple values =
 being<br>
 &gt; matched.<br>
 &gt; I didn&#39;t expect the two uses of &quot;x&quot; to be bound independ=
 ently in my original<br>
 &gt; example.<br>
 &gt; But given that this is the semantics, then I understand the outcome.<b=
 r>
 &gt;<br>
 &gt; Cheers,<br>
 &gt; Emina<br>
 &gt;<br>
 &gt; On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang &lt;<a href=3D"mailto:=
 stchang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; The behavior seems correct. In your example, x appears twice in th=
 e<br>
 &gt;&gt; pattern so it is bound twice, first to the 3 in the first list, th=
 en<br>
 &gt;&gt; rebound to the 2 in the second list. (The y should be bound to (1 =
 2)<br>
 &gt;&gt; because the ellipses bind greedily, as seen in your last example.)=
 <br>
 &gt;&gt;<br>
 &gt;&gt; On Fri, Feb 15, 2013 at 1:44 PM, =A0&lt;<a href=3D"mailto:emina@ee=
 cs.berkeley.edu">emina@eecs.berkeley.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt; A new problem report is waiting at<br>
 &gt;&gt; &gt; =A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&=
 amp;pr=3D13525" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3D=
 view&amp;pr=3D13525</a><br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Reported by Emina Torlak for release: 5.3.1<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** Description:<br>
 &gt;&gt; &gt; Pattern matcher incorrectly binds pattern variables when the =
 match is<br>
 &gt;&gt; &gt; applied to multiple values with nested list patterns.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; The following snippet shows the problem:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt; (match* (&#39;(1 2 3) &#39;(1 (2) 3))<br>
 &gt;&gt; &gt; =A0 =A0[((list y ... x z ...) (list v ... (list x) w ...))<br=
 >
 &gt;&gt; &gt; =A0 =A0 (printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =3D ~a,=
  w =3D ~a\n&quot;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 y x z v w)])<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; y =3D (1 2), x =3D 2, z =3D (), v =3D (1), w =3D (3)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; This doesn&#39;t seem right, since the &#39;2 in the first li=
 st is bound twice<br>
 &gt;&gt; &gt; but the &#39;3 is not bound at all. =A0I expected the followi=
 ng instead:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; y =3D (1), x =3D 2, z =3D (3), v =3D (1), w =3D (3)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Note that similar examples work as expected:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt; (match* (&#39;(1 (2) 3) &#39;(1 (2) 3))<br>
 &gt;&gt; &gt; =A0 [((list y ... (list x) z ...) (list v ... (list x) w ...)=
 )<br>
 &gt;&gt; &gt; =A0 =A0(printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =3D ~a, =
 w =3D ~a\n&quot;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0y x z v w)])<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; y =3D (1), x =3D 2, z =3D (3), v =3D (1), w =3D (3)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt; (match* (&#39;(1 2 3) &#39;(1 2 3))<br>
 &gt;&gt; &gt; =A0 =A0[((list y ... x z ...) (list v ... x w ...))<br>
 &gt;&gt; &gt; =A0 =A0 (printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =3D ~a,=
  w =3D ~a\n&quot;<br>
 &gt;&gt; &gt; =A0 =A0 =A0 =A0 =A0 =A0 y x z v w)])<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; y =3D (1 2), x =3D 3, z =3D (), v =3D (1 2), w =3D ()<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** How to repeat:<br>
 &gt;&gt; &gt; Please see the description of the problem.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** Environment:<br>
 &gt;&gt; &gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)<br>
 &gt;&gt; &gt; AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safar=
 i/536.26.14<br>
 &gt;&gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --047d7b603fca1d741004d5c907b8--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Emina Torlak <emina@eecs.berkeley.edu>
Cc: Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 15:56:29 -0600

 --14dae9399a4d9c2b5704d5ca721e
 Content-Type: text/plain; charset=UTF-8
 
 FWIW, Redex's pattern matcher supports this kind of thing. (IT is a more
 complex, slower matcher.)
 
 Robby
 
 
 On Fri, Feb 15, 2013 at 2:14 PM, Emina Torlak <emina@eecs.berkeley.edu>wrote:
 
 > No problem.  Thanks to both you and Sam for looking into it!
 >
 > On Fri, Feb 15, 2013 at 12:05 PM, Stephen Chang <stchang@ccs.neu.edu>wrote:
 >
 >> I was wrong (see Sam's reply). Sorry for any confusion.
 >>
 >> On Fri, Feb 15, 2013 at 2:23 PM, Emina Torlak <emina@eecs.berkeley.edu>
 >> wrote:
 >> > Hi Stephen,
 >> >
 >> > Thanks for the clarification.  Based on the pattern matcher's behavior
 >> when
 >> > matching
 >> > against a single value, my understanding was that the repeated use of
 >> the
 >> > same variable
 >> > binds the same value.   That is, in the following example, the matcher
 >> tries
 >> > (and fails) to
 >> > bind "x"  to the same value:
 >> >
 >> > (match '(1 2 3)
 >> >     [(list y ... x x) #t]
 >> >     [_ #f])
 >> >
 >> > I expected this behavior to carry over to the case of multiple values
 >> being
 >> > matched.
 >> > I didn't expect the two uses of "x" to be bound independently in my
 >> original
 >> > example.
 >> > But given that this is the semantics, then I understand the outcome.
 >> >
 >> > Cheers,
 >> > Emina
 >> >
 >> > On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang <stchang@ccs.neu.edu>
 >> wrote:
 >> >>
 >> >> The behavior seems correct. In your example, x appears twice in the
 >> >> pattern so it is bound twice, first to the 3 in the first list, then
 >> >> rebound to the 2 in the second list. (The y should be bound to (1 2)
 >> >> because the ellipses bind greedily, as seen in your last example.)
 >> >>
 >> >> On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 >> >> > A new problem report is waiting at
 >> >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 >> >> >
 >> >> > Reported by Emina Torlak for release: 5.3.1
 >> >> >
 >> >> > *** Description:
 >> >> > Pattern matcher incorrectly binds pattern variables when the match is
 >> >> > applied to multiple values with nested list patterns.
 >> >> >
 >> >> > The following snippet shows the problem:
 >> >> >
 >> >> >> (match* ('(1 2 3) '(1 (2) 3))
 >> >> >    [((list y ... x z ...) (list v ... (list x) w ...))
 >> >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >> >> >             y x z v w)])
 >> >> >
 >> >> > y = (1 2), x = 2, z = (), v = (1), w = (3)
 >> >> >
 >> >> > This doesn't seem right, since the '2 in the first list is bound
 >> twice
 >> >> > but the '3 is not bound at all.  I expected the following instead:
 >> >> >
 >> >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 >> >> >
 >> >> > Note that similar examples work as expected:
 >> >> >
 >> >> >> (match* ('(1 (2) 3) '(1 (2) 3))
 >> >> >   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 >> >> >    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >> >> >            y x z v w)])
 >> >> >
 >> >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 >> >> >
 >> >> >> (match* ('(1 2 3) '(1 2 3))
 >> >> >    [((list y ... x z ...) (list v ... x w ...))
 >> >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >> >> >             y x z v w)])
 >> >> >
 >> >> > y = (1 2), x = 3, z = (), v = (1 2), w = ()
 >> >> >
 >> >> >
 >> >> >
 >> >> > *** How to repeat:
 >> >> > Please see the description of the problem.
 >> >> >
 >> >> > *** Environment:
 >> >> > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 >> >> > AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1
 >> Safari/536.26.14
 >> >> >
 >> >
 >> >
 >>
 >
 >
 
 --14dae9399a4d9c2b5704d5ca721e
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">FWIW, Redex&#39;s pattern matcher supports this kind of th=
 ing. (IT is a more complex, slower matcher.)<div><br></div><div>Robby</div>=
 </div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Fri,=
  Feb 15, 2013 at 2:14 PM, Emina Torlak <span dir=3D"ltr">&lt;<a href=3D"mai=
 lto:emina@eecs.berkeley.edu" target=3D"_blank">emina@eecs.berkeley.edu</a>&=
 gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">No problem. =C2=A0Thanks to both you and Sam=
  for looking into it! =C2=A0<div class=3D"HOEnZb"><div class=3D"h5"><div><b=
 r><div class=3D"gmail_quote">
 On Fri, Feb 15, 2013 at 12:05 PM, Stephen Chang <span dir=3D"ltr">&lt;<a hr=
 ef=3D"mailto:stchang@ccs.neu.edu" target=3D"_blank">stchang@ccs.neu.edu</a>=
 &gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I was wrong (see Sam&#39;s reply). Sorry for=
  any confusion.<br>
 <div><div><br>
 On Fri, Feb 15, 2013 at 2:23 PM, Emina Torlak &lt;<a href=3D"mailto:emina@e=
 ecs.berkeley.edu" target=3D"_blank">emina@eecs.berkeley.edu</a>&gt; wrote:<=
 br>
 &gt; Hi Stephen,<br>
 &gt;<br>
 &gt; Thanks for the clarification. =C2=A0Based on the pattern matcher&#39;s=
  behavior when<br>
 &gt; matching<br>
 &gt; against a single value, my understanding was that the repeated use of =
 the<br>
 &gt; same variable<br>
 &gt; binds the same value. =C2=A0 That is, in the following example, the ma=
 tcher tries<br>
 &gt; (and fails) to<br>
 &gt; bind &quot;x&quot; =C2=A0to the same value:<br>
 &gt;<br>
 &gt; (match &#39;(1 2 3)<br>
 &gt; =C2=A0 =C2=A0 [(list y ... x x) #t]<br>
 &gt; =C2=A0 =C2=A0 [_ #f])<br>
 &gt;<br>
 &gt; I expected this behavior to carry over to the case of multiple values =
 being<br>
 &gt; matched.<br>
 &gt; I didn&#39;t expect the two uses of &quot;x&quot; to be bound independ=
 ently in my original<br>
 &gt; example.<br>
 &gt; But given that this is the semantics, then I understand the outcome.<b=
 r>
 &gt;<br>
 &gt; Cheers,<br>
 &gt; Emina<br>
 &gt;<br>
 &gt; On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang &lt;<a href=3D"mailto:=
 stchang@ccs.neu.edu" target=3D"_blank">stchang@ccs.neu.edu</a>&gt; wrote:<b=
 r>
 &gt;&gt;<br>
 &gt;&gt; The behavior seems correct. In your example, x appears twice in th=
 e<br>
 &gt;&gt; pattern so it is bound twice, first to the 3 in the first list, th=
 en<br>
 &gt;&gt; rebound to the 2 in the second list. (The y should be bound to (1 =
 2)<br>
 &gt;&gt; because the ellipses bind greedily, as seen in your last example.)=
 <br>
 &gt;&gt;<br>
 &gt;&gt; On Fri, Feb 15, 2013 at 1:44 PM, =C2=A0&lt;<a href=3D"mailto:emina=
 @eecs.berkeley.edu" target=3D"_blank">emina@eecs.berkeley.edu</a>&gt; wrote=
 :<br>
 &gt;&gt; &gt; A new problem report is waiting at<br>
 &gt;&gt; &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D13525" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D13525</a><br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Reported by Emina Torlak for release: 5.3.1<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** Description:<br>
 &gt;&gt; &gt; Pattern matcher incorrectly binds pattern variables when the =
 match is<br>
 &gt;&gt; &gt; applied to multiple values with nested list patterns.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; The following snippet shows the problem:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt; (match* (&#39;(1 2 3) &#39;(1 (2) 3))<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0[((list y ... x z ...) (list v ... (list x) w ..=
 .))<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 (printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =
 =3D ~a, w =3D ~a\n&quot;<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 y x z v w)])<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; y =3D (1 2), x =3D 2, z =3D (), v =3D (1), w =3D (3)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; This doesn&#39;t seem right, since the &#39;2 in the first li=
 st is bound twice<br>
 &gt;&gt; &gt; but the &#39;3 is not bound at all. =C2=A0I expected the foll=
 owing instead:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; y =3D (1), x =3D 2, z =3D (3), v =3D (1), w =3D (3)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Note that similar examples work as expected:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt; (match* (&#39;(1 (2) 3) &#39;(1 (2) 3))<br>
 &gt;&gt; &gt; =C2=A0 [((list y ... (list x) z ...) (list v ... (list x) w .=
 ..))<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0(printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =
 =3D ~a, w =3D ~a\n&quot;<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0y x z v w)])<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; y =3D (1), x =3D 2, z =3D (3), v =3D (1), w =3D (3)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt; (match* (&#39;(1 2 3) &#39;(1 2 3))<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0[((list y ... x z ...) (list v ... x w ...))<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 (printf &quot;y =3D ~a, x =3D ~a, z =3D ~a, v =
 =3D ~a, w =3D ~a\n&quot;<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 y x z v w)])<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; y =3D (1 2), x =3D 3, z =3D (), v =3D (1 2), w =3D ()<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** How to repeat:<br>
 &gt;&gt; &gt; Please see the description of the problem.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** Environment:<br>
 &gt;&gt; &gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)<br>
 &gt;&gt; &gt; AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safar=
 i/536.26.14<br>
 &gt;&gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 
 --14dae9399a4d9c2b5704d5ca721e--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Emina Torlak <emina@eecs.berkeley.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 16:58:29 -0500

 Right, I think `match` could implement this by using something along
 the lines of Redex's current algorithms, but that would mean something
 like 2 different pattern match compilers in one, which I'm reluctant
 to do.
 
 Sam
 
 On Fri, Feb 15, 2013 at 4:56 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > FWIW, Redex's pattern matcher supports this kind of thing. (IT is a more
 > complex, slower matcher.)
 >
 > Robby
 >
 >
 > On Fri, Feb 15, 2013 at 2:14 PM, Emina Torlak <emina@eecs.berkeley.edu>
 > wrote:
 >>
 >> No problem.  Thanks to both you and Sam for looking into it!
 >>
 >> On Fri, Feb 15, 2013 at 12:05 PM, Stephen Chang <stchang@ccs.neu.edu>
 >> wrote:
 >>>
 >>> I was wrong (see Sam's reply). Sorry for any confusion.
 >>>
 >>> On Fri, Feb 15, 2013 at 2:23 PM, Emina Torlak <emina@eecs.berkeley.edu>
 >>> wrote:
 >>> > Hi Stephen,
 >>> >
 >>> > Thanks for the clarification.  Based on the pattern matcher's behavior
 >>> > when
 >>> > matching
 >>> > against a single value, my understanding was that the repeated use of
 >>> > the
 >>> > same variable
 >>> > binds the same value.   That is, in the following example, the matcher
 >>> > tries
 >>> > (and fails) to
 >>> > bind "x"  to the same value:
 >>> >
 >>> > (match '(1 2 3)
 >>> >     [(list y ... x x) #t]
 >>> >     [_ #f])
 >>> >
 >>> > I expected this behavior to carry over to the case of multiple values
 >>> > being
 >>> > matched.
 >>> > I didn't expect the two uses of "x" to be bound independently in my
 >>> > original
 >>> > example.
 >>> > But given that this is the semantics, then I understand the outcome.
 >>> >
 >>> > Cheers,
 >>> > Emina
 >>> >
 >>> > On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang <stchang@ccs.neu.edu>
 >>> > wrote:
 >>> >>
 >>> >> The behavior seems correct. In your example, x appears twice in the
 >>> >> pattern so it is bound twice, first to the 3 in the first list, then
 >>> >> rebound to the 2 in the second list. (The y should be bound to (1 2)
 >>> >> because the ellipses bind greedily, as seen in your last example.)
 >>> >>
 >>> >> On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 >>> >> > A new problem report is waiting at
 >>> >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 >>> >> >
 >>> >> > Reported by Emina Torlak for release: 5.3.1
 >>> >> >
 >>> >> > *** Description:
 >>> >> > Pattern matcher incorrectly binds pattern variables when the match
 >>> >> > is
 >>> >> > applied to multiple values with nested list patterns.
 >>> >> >
 >>> >> > The following snippet shows the problem:
 >>> >> >
 >>> >> >> (match* ('(1 2 3) '(1 (2) 3))
 >>> >> >    [((list y ... x z ...) (list v ... (list x) w ...))
 >>> >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>> >> >             y x z v w)])
 >>> >> >
 >>> >> > y = (1 2), x = 2, z = (), v = (1), w = (3)
 >>> >> >
 >>> >> > This doesn't seem right, since the '2 in the first list is bound
 >>> >> > twice
 >>> >> > but the '3 is not bound at all.  I expected the following instead:
 >>> >> >
 >>> >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 >>> >> >
 >>> >> > Note that similar examples work as expected:
 >>> >> >
 >>> >> >> (match* ('(1 (2) 3) '(1 (2) 3))
 >>> >> >   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 >>> >> >    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>> >> >            y x z v w)])
 >>> >> >
 >>> >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 >>> >> >
 >>> >> >> (match* ('(1 2 3) '(1 2 3))
 >>> >> >    [((list y ... x z ...) (list v ... x w ...))
 >>> >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 >>> >> >             y x z v w)])
 >>> >> >
 >>> >> > y = (1 2), x = 3, z = (), v = (1 2), w = ()
 >>> >> >
 >>> >> >
 >>> >> >
 >>> >> > *** How to repeat:
 >>> >> > Please see the description of the problem.
 >>> >> >
 >>> >> > *** Environment:
 >>> >> > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 >>> >> > AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1
 >>> >> > Safari/536.26.14
 >>> >> >
 >>> >
 >>> >
 >>
 >>
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Emina Torlak <emina@eecs.berkeley.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 16:00:52 -0600

 --f46d044518493f043f04d5ca8264
 Content-Type: text/plain; charset=UTF-8
 
 I'm just suggesting it as it might be a useful alternative for Emina.
 
 I definitely agree about your larger point and I hope to one day compile
 redex patterns to match.
 
 Robby
 
 
 On Fri, Feb 15, 2013 at 3:58 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 
 > Right, I think `match` could implement this by using something along
 > the lines of Redex's current algorithms, but that would mean something
 > like 2 different pattern match compilers in one, which I'm reluctant
 > to do.
 >
 > Sam
 >
 > On Fri, Feb 15, 2013 at 4:56 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > FWIW, Redex's pattern matcher supports this kind of thing. (IT is a more
 > > complex, slower matcher.)
 > >
 > > Robby
 > >
 > >
 > > On Fri, Feb 15, 2013 at 2:14 PM, Emina Torlak <emina@eecs.berkeley.edu>
 > > wrote:
 > >>
 > >> No problem.  Thanks to both you and Sam for looking into it!
 > >>
 > >> On Fri, Feb 15, 2013 at 12:05 PM, Stephen Chang <stchang@ccs.neu.edu>
 > >> wrote:
 > >>>
 > >>> I was wrong (see Sam's reply). Sorry for any confusion.
 > >>>
 > >>> On Fri, Feb 15, 2013 at 2:23 PM, Emina Torlak <emina@eecs.berkeley.edu
 > >
 > >>> wrote:
 > >>> > Hi Stephen,
 > >>> >
 > >>> > Thanks for the clarification.  Based on the pattern matcher's
 > behavior
 > >>> > when
 > >>> > matching
 > >>> > against a single value, my understanding was that the repeated use of
 > >>> > the
 > >>> > same variable
 > >>> > binds the same value.   That is, in the following example, the
 > matcher
 > >>> > tries
 > >>> > (and fails) to
 > >>> > bind "x"  to the same value:
 > >>> >
 > >>> > (match '(1 2 3)
 > >>> >     [(list y ... x x) #t]
 > >>> >     [_ #f])
 > >>> >
 > >>> > I expected this behavior to carry over to the case of multiple values
 > >>> > being
 > >>> > matched.
 > >>> > I didn't expect the two uses of "x" to be bound independently in my
 > >>> > original
 > >>> > example.
 > >>> > But given that this is the semantics, then I understand the outcome.
 > >>> >
 > >>> > Cheers,
 > >>> > Emina
 > >>> >
 > >>> > On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang <stchang@ccs.neu.edu
 > >
 > >>> > wrote:
 > >>> >>
 > >>> >> The behavior seems correct. In your example, x appears twice in the
 > >>> >> pattern so it is bound twice, first to the 3 in the first list, then
 > >>> >> rebound to the 2 in the second list. (The y should be bound to (1 2)
 > >>> >> because the ellipses bind greedily, as seen in your last example.)
 > >>> >>
 > >>> >> On Fri, Feb 15, 2013 at 1:44 PM,  <emina@eecs.berkeley.edu> wrote:
 > >>> >> > A new problem report is waiting at
 > >>> >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13525
 > >>> >> >
 > >>> >> > Reported by Emina Torlak for release: 5.3.1
 > >>> >> >
 > >>> >> > *** Description:
 > >>> >> > Pattern matcher incorrectly binds pattern variables when the match
 > >>> >> > is
 > >>> >> > applied to multiple values with nested list patterns.
 > >>> >> >
 > >>> >> > The following snippet shows the problem:
 > >>> >> >
 > >>> >> >> (match* ('(1 2 3) '(1 (2) 3))
 > >>> >> >    [((list y ... x z ...) (list v ... (list x) w ...))
 > >>> >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >>> >> >             y x z v w)])
 > >>> >> >
 > >>> >> > y = (1 2), x = 2, z = (), v = (1), w = (3)
 > >>> >> >
 > >>> >> > This doesn't seem right, since the '2 in the first list is bound
 > >>> >> > twice
 > >>> >> > but the '3 is not bound at all.  I expected the following instead:
 > >>> >> >
 > >>> >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 > >>> >> >
 > >>> >> > Note that similar examples work as expected:
 > >>> >> >
 > >>> >> >> (match* ('(1 (2) 3) '(1 (2) 3))
 > >>> >> >   [((list y ... (list x) z ...) (list v ... (list x) w ...))
 > >>> >> >    (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >>> >> >            y x z v w)])
 > >>> >> >
 > >>> >> > y = (1), x = 2, z = (3), v = (1), w = (3)
 > >>> >> >
 > >>> >> >> (match* ('(1 2 3) '(1 2 3))
 > >>> >> >    [((list y ... x z ...) (list v ... x w ...))
 > >>> >> >     (printf "y = ~a, x = ~a, z = ~a, v = ~a, w = ~a\n"
 > >>> >> >             y x z v w)])
 > >>> >> >
 > >>> >> > y = (1 2), x = 3, z = (), v = (1 2), w = ()
 > >>> >> >
 > >>> >> >
 > >>> >> >
 > >>> >> > *** How to repeat:
 > >>> >> > Please see the description of the problem.
 > >>> >> >
 > >>> >> > *** Environment:
 > >>> >> > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 > >>> >> > AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1
 > >>> >> > Safari/536.26.14
 > >>> >> >
 > >>> >
 > >>> >
 > >>
 > >>
 > >
 >
 
 --f46d044518493f043f04d5ca8264
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I&#39;m just suggesting it as it might be a useful alterna=
 tive for Emina.=C2=A0<div><br></div><div style>I definitely agree about you=
 r larger point and I hope to one day compile redex patterns to match.</div>=
 <div style>
 <br></div><div style>Robby</div></div><div class=3D"gmail_extra"><br><br><d=
 iv class=3D"gmail_quote">On Fri, Feb 15, 2013 at 3:58 PM, Sam Tobin-Hochsta=
 dt <span dir=3D"ltr">&lt;<a href=3D"mailto:samth@ccs.neu.edu" target=3D"_bl=
 ank">samth@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">Right, I think `match` could implement this =
 by using something along<br>
 the lines of Redex&#39;s current algorithms, but that would mean something<=
 br>
 like 2 different pattern match compilers in one, which I&#39;m reluctant<br=
 >
 to do.<br>
 <span class=3D"HOEnZb"><font color=3D"#888888"><br>
 Sam<br>
 </font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Fri, Feb 15, 2013 at 4:56 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt; FWIW, Redex&#39;s pattern matcher supports this kind of thing. (IT is =
 a more<br>
 &gt; complex, slower matcher.)<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Fri, Feb 15, 2013 at 2:14 PM, Emina Torlak &lt;<a href=3D"mailto:em=
 ina@eecs.berkeley.edu">emina@eecs.berkeley.edu</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; No problem. =C2=A0Thanks to both you and Sam for looking into it!<=
 br>
 &gt;&gt;<br>
 &gt;&gt; On Fri, Feb 15, 2013 at 12:05 PM, Stephen Chang &lt;<a href=3D"mai=
 lto:stchang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt;<br>
 &gt;&gt; wrote:<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; I was wrong (see Sam&#39;s reply). Sorry for any confusion.<br=
 >
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; On Fri, Feb 15, 2013 at 2:23 PM, Emina Torlak &lt;<a href=3D"m=
 ailto:emina@eecs.berkeley.edu">emina@eecs.berkeley.edu</a>&gt;<br>
 &gt;&gt;&gt; wrote:<br>
 &gt;&gt;&gt; &gt; Hi Stephen,<br>
 &gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt; Thanks for the clarification. =C2=A0Based on the pattern =
 matcher&#39;s behavior<br>
 &gt;&gt;&gt; &gt; when<br>
 &gt;&gt;&gt; &gt; matching<br>
 &gt;&gt;&gt; &gt; against a single value, my understanding was that the rep=
 eated use of<br>
 &gt;&gt;&gt; &gt; the<br>
 &gt;&gt;&gt; &gt; same variable<br>
 &gt;&gt;&gt; &gt; binds the same value. =C2=A0 That is, in the following ex=
 ample, the matcher<br>
 &gt;&gt;&gt; &gt; tries<br>
 &gt;&gt;&gt; &gt; (and fails) to<br>
 &gt;&gt;&gt; &gt; bind &quot;x&quot; =C2=A0to the same value:<br>
 &gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt; (match &#39;(1 2 3)<br>
 &gt;&gt;&gt; &gt; =C2=A0 =C2=A0 [(list y ... x x) #t]<br>
 &gt;&gt;&gt; &gt; =C2=A0 =C2=A0 [_ #f])<br>
 &gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt; I expected this behavior to carry over to the case of mul=
 tiple values<br>
 &gt;&gt;&gt; &gt; being<br>
 &gt;&gt;&gt; &gt; matched.<br>
 &gt;&gt;&gt; &gt; I didn&#39;t expect the two uses of &quot;x&quot; to be b=
 ound independently in my<br>
 &gt;&gt;&gt; &gt; original<br>
 &gt;&gt;&gt; &gt; example.<br>
 &gt;&gt;&gt; &gt; But given that this is the semantics, then I understand t=
 he outcome.<br>
 &gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt; Cheers,<br>
 &gt;&gt;&gt; &gt; Emina<br>
 &gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt; On Fri, Feb 15, 2013 at 11:00 AM, Stephen Chang &lt;<a hr=
 ef=3D"mailto:stchang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt;<br>
 &gt;&gt;&gt; &gt; wrote:<br>
 &gt;&gt;&gt; &gt;&gt;<br>
 &gt;&gt;&gt; &gt;&gt; The behavior seems correct. In your example, x appear=
 s twice in the<br>
 &gt;&gt;&gt; &gt;&gt; pattern so it is bound twice, first to the 3 in the f=
 irst list, then<br>
 &gt;&gt;&gt; &gt;&gt; rebound to the 2 in the second list. (The y should be=
  bound to (1 2)<br>
 &gt;&gt;&gt; &gt;&gt; because the ellipses bind greedily, as seen in your l=
 ast example.)<br>
 &gt;&gt;&gt; &gt;&gt;<br>
 &gt;&gt;&gt; &gt;&gt; On Fri, Feb 15, 2013 at 1:44 PM, =C2=A0&lt;<a href=3D=
 "mailto:emina@eecs.berkeley.edu">emina@eecs.berkeley.edu</a>&gt; wrote:<br>
 &gt;&gt;&gt; &gt;&gt; &gt; A new problem report is waiting at<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/qu=
 ery/?cmd=3Dview&amp;pr=3D13525" target=3D"_blank">http://bugs.racket-lang.o=
 rg/query/?cmd=3Dview&amp;pr=3D13525</a><br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; Reported by Emina Torlak for release: 5.3.1<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; *** Description:<br>
 &gt;&gt;&gt; &gt;&gt; &gt; Pattern matcher incorrectly binds pattern variab=
 les when the match<br>
 &gt;&gt;&gt; &gt;&gt; &gt; is<br>
 &gt;&gt;&gt; &gt;&gt; &gt; applied to multiple values with nested list patt=
 erns.<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; The following snippet shows the problem:<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt;&gt; (match* (&#39;(1 2 3) &#39;(1 (2) 3))<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 =C2=A0[((list y ... x z ...) (list v ... =
 (list x) w ...))<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 =C2=A0 (printf &quot;y =3D ~a, x =3D ~a, =
 z =3D ~a, v =3D ~a, w =3D ~a\n&quot;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 y x z =
 v w)])<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; y =3D (1 2), x =3D 2, z =3D (), v =3D (1), w =3D=
  (3)<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; This doesn&#39;t seem right, since the &#39;2 in=
  the first list is bound<br>
 &gt;&gt;&gt; &gt;&gt; &gt; twice<br>
 &gt;&gt;&gt; &gt;&gt; &gt; but the &#39;3 is not bound at all. =C2=A0I expe=
 cted the following instead:<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; y =3D (1), x =3D 2, z =3D (3), v =3D (1), w =3D =
 (3)<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; Note that similar examples work as expected:<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt;&gt; (match* (&#39;(1 (2) 3) &#39;(1 (2) 3))<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 [((list y ... (list x) z ...) (list v ...=
  (list x) w ...))<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 =C2=A0(printf &quot;y =3D ~a, x =3D ~a, z=
  =3D ~a, v =3D ~a, w =3D ~a\n&quot;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0y x z v=
  w)])<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; y =3D (1), x =3D 2, z =3D (3), v =3D (1), w =3D =
 (3)<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt;&gt; (match* (&#39;(1 2 3) &#39;(1 2 3))<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 =C2=A0[((list y ... x z ...) (list v ... =
 x w ...))<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 =C2=A0 (printf &quot;y =3D ~a, x =3D ~a, =
 z =3D ~a, v =3D ~a, w =3D ~a\n&quot;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 y x z =
 v w)])<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; y =3D (1 2), x =3D 3, z =3D (), v =3D (1 2), w =
 =3D ()<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; *** How to repeat:<br>
 &gt;&gt;&gt; &gt;&gt; &gt; Please see the description of the problem.<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;&gt; &gt; *** Environment:<br>
 &gt;&gt;&gt; &gt;&gt; &gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS =
 X 10_7_5)<br>
 &gt;&gt;&gt; &gt;&gt; &gt; AppleWebKit/536.26.14 (KHTML, like Gecko) Versio=
 n/6.0.1<br>
 &gt;&gt;&gt; &gt;&gt; &gt; Safari/536.26.14<br>
 &gt;&gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;<br>
 &gt;&gt;&gt; &gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --f46d044518493f043f04d5ca8264--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Emina Torlak <emina@eecs.berkeley.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 17:09:35 -0500

 On Fri, Feb 15, 2013 at 5:00 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I'm just suggesting it as it might be a useful alternative for Emina.
 
 Oh, definitely.  If you need a really-expressive pattern language over
 s-expressions, then redex is a noticeably better choice than `match`.
 
 Sam
From: Emina Torlak <emina@eecs.berkeley.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13525: pattern matching bug
Date: Fri, 15 Feb 2013 14:41:44 -0800

 --047d7b6224406ee6d204d5cb1473
 Content-Type: text/plain; charset=ISO-8859-1
 
 I do matches like these rarely (for now), but if more crop up, I'll
 definitely take a look at the Redex pattern matcher.
 
 Emina
 
 On Fri, Feb 15, 2013 at 2:09 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 
 > On Fri, Feb 15, 2013 at 5:00 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > I'm just suggesting it as it might be a useful alternative for Emina.
 >
 > Oh, definitely.  If you need a really-expressive pattern language over
 > s-expressions, then redex is a noticeably better choice than `match`.
 >
 > Sam
 >
 
 --047d7b6224406ee6d204d5cb1473
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 I do matches like these rarely (for now), but if more crop up, I&#39;ll def=
 initely=A0take a look at the Redex pattern matcher.<div><br></div><div>Emin=
 a<br><br><div class=3D"gmail_quote">On Fri, Feb 15, 2013 at 2:09 PM, Sam To=
 bin-Hochstadt <span dir=3D"ltr">&lt;<a href=3D"mailto:samth@ccs.neu.edu" ta=
 rget=3D"_blank">samth@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div class=3D"im">On Fri, Feb 15, 2013 at 5:=
 00 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt; I&#39;m just suggesting it as it might be a useful alternative for Emi=
 na.<br>
 <br>
 </div>Oh, definitely. =A0If you need a really-expressive pattern language o=
 ver<br>
 s-expressions, then redex is a noticeably better choice than `match`.<br>
 <span class=3D"HOEnZb"><font color=3D"#888888"><br>
 Sam<br>
 </font></span></blockquote></div><br></div>
 
 --047d7b6224406ee6d204d5cb1473--

State changed from "open" to "closed" by samth at Tue, 25 Mar 2014 10:18:55 -0400
Reason>>> This is a duplicate of PR10083.

