From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Feb  2 23:36:24 2013
Received: from mail-ob0-f169.google.com (mail-ob0-f169.google.com [209.85.214.169])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r134aLTG013870
	for <bugs@bugs.plt-scheme.org>; Sat, 2 Feb 2013 23:36:21 -0500
Message-Id: <201302030436.r134aJMc013864@champlain.ccs.neu.edu>
Date: Sat, 2 Feb 2013 23:36:19 -0500
From: lewis1711@gmail.com
To: bugs@racket-lang.org
Subject: Typed Racket - Can't pess a set of numbers into a procedure expecting a sequence of numbers

>Number:         13485
>Category:       all
>Synopsis:       Typed Racket - Can't pess a set of numbers into a procedure expecting a sequence of numbers
>Class:          sw-bug
>Responsible:    endobson
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Feb 02 23:40:01 -0500 2013
>Closed-Date:    Thu Feb 21 01:02:09 -0500 2013
>Last-Modified:  Thu Feb 21 01:02:09 -0500 2013
>Originator:     Lewis Potter
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2
>Environment:
unix "Linux tsmi 3.5.0-21-generic #32-Ubuntu SMP Tue Dec 11 18:51:59 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 241768576
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
Planet2 (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific:
 [none]



Collections:
("/home/lewis/.racket/5.3.2/collects"
 (non-existent-path))
("/usr/lib/racket/collects"
 ("gui-debugger" "make" "db" "parser-tools" "mred" "plai" "rackunit" "planet2" "mzcom" "ffi" "lang" "stepper" "xrepl" "s-exp" "help" "slatex" "scheme" "config" "schemeunit" "racket" "embedded-gui" "reader" "typed-racket" "teachpack" "swindle" "macro-debugger" "mrlib" "dynext" "drscheme" "scriblib" "profile" "framework" "string-constants" "math" "json" "preprocessor" "graphics" "deinprogramm" "syntax" "typed-scheme" "eopl" "compiler" "at-exp" "version" "slideshow" "texpict" "trace" "mzscheme" "typed" "unstable" "file" "raco" "test-engine" "setup" "hierlist" "defaults" "syntax-color" "datalog" "r5rs" "srfi" "net" "planet" "frtime" "racklog" "data" "sgl" "lazy" "plot" "readline" "r6rs" "browser" "scribble" "wxme" "rnrs" "picturing-programs" "mysterx" "xml" "launcher" "web-server" "mzlib" "future-visualizer" "redex" "compatibility" "algol60" "drracket" "icons" "games" "openssl" "images" "2htdp" "errortrace" "scribblings" "html" "info-domain" "htdp"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Can't pass (set 1 2 3) into a procedure expecting (Sequenceof Number). Set is a subtype of sequence according to the docs.

As an aside... why does one need to write (for/sum: : Number ...)? (for/sum: Number would be preferable, surely one colon is enough :)
>How-To-Repeat:
Welcome to Racket v5.3.2.
>  (: dot-product ([Sequenceof Number][Sequenceof Number] -> Number))
> (define (dot-product ls rs) (for/sum: : Number ([l ls][r rs]) (* l r)))
> (dot-product (set 1 2 3) (list 3 4 2))
stdin::153: Type Checker: Polymorphic function set could not be applied to arguments:
Domain: e *
Arguments: One Positive-Byte Positive-Byte
Result type: (Setof e)
Expected result: (Sequenceof Number)

  in: (set 1 2 3)
  context...:
   /usr/lib/racket/collects/typed-racket/typecheck/tc-toplevel.rkt:420:0: tc-toplevel-form
   temp49
   /usr/lib/racket/collects/typed-racket/typed-racket.rkt:40:4
   /usr/lib/racket/collects/racket/private/misc.rkt:87:7
> (sequence? (set 1 2))
- : Boolean
#t
>Fix:
>Audit-Trail:
From: Danny Yoo <dyoo@hashcollision.org>
To: lewis1711@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13485: Typed Racket - Can't pess a set of
 numbers into a procedure expecting a sequence of numbers
Date: Sun, 3 Feb 2013 17:20:27 -0700

 > As an aside... why does one need to write (for/sum: : Number ...)? (for/sum: Number would be preferable, surely one colon is enough :)
 
 The second part is because we might be in a context where the local
 type inference can figure out the result of the for/sum: without the
 additional hint from us.  In that case, we'd be able to omit the
 output type of the for/sum:.
 
 Another example:
 
     https://gist.github.com/4696161
 
 In this situation, Typed Racket can infer that the value of the for:'s
 body will be Void, so we don't have to write out:
 
      (for: : Void ([i : Integer (in-range 100)]) ...)
 
 instead.
Responsible changed from "nobody" to "endobson" by endobson@racket-lang.org at Thu, 21 Feb 2013 01:02:09 -0500
Reason>>> A commit by endobson@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/4f9f00680e
State changed from "open" to "closed" by endobson@racket-lang.org at Thu, 21 Feb 2013 01:02:09 -0500
Reason>>> A commit by endobson@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/4f9f00680e
  | Make (Set a) a subtype of (Sequenceof a).
  | 
  | Closes PR13485.
  | Closes PR12615.

