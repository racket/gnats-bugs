From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Dec  3 16:02:46 2013
Received: from mail-ob0-f181.google.com (mail-ob0-f181.google.com [209.85.214.181])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rB3L2ha1009010
	for <bugs@bugs.plt-scheme.org>; Tue, 3 Dec 2013 16:02:44 -0500
Message-Id: <201312032102.rB3L2bpD008998@winooski.ccs.neu.edu>
Date: Tue, 3 Dec 2013 16:02:37 -0500
From: dfeltey@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Unhelpful Error Message when function breaks its contract with wrong number of arguments

>Number:         14220
>Category:       all
>Synopsis:       Unhelpful Error Message when function breaks its contract with wrong number of arguments
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Dec 03 16:04:01 -0500 2013
>Closed-Date:    Wed Dec 11 13:07:38 -0500 2013
>Last-Modified:  Wed Dec 11 13:07:38 -0500 2013
>Originator:     Daniel Feltey
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.6
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17
>Description:
Consider a racket module:

(module BAD racket
  (module BAD-CONTRACT racket
    (provide (contract-out [foo (any/c any/c any/c . -> . any/c)]))    
    (define (foo x y) x))  
  (require 'BAD-CONTRACT))

This produces the error message:
; foo: broke its contract
;  promised a procedure that accepts 3 mandatory arguments without any keywords
;  produced: #<procedure:foo>
;  in: (-> any/c any/c any/c any/c)
;  contract from: (BAD BAD-CONTRACT)
;  blaming: (BAD BAD-CONTRACT)
;  at: readline-input:33.28
; [,bt for context]

Which is unhelpful because it doesn't list the correct arity of the function foo and makes it difficult to discern the cause of the error.

>How-To-Repeat:
Try to run the following racket module:

(module BAD racket 
  (module BAD-CONTRACT racket
    (provide (contract-out [foo (any/c any/c any/c . -> . any/c)]))    
    (define (foo x y) x))
  (require 'BAD-CONTRACT))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: dfeltey@ccs.neu.edu, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14220: Unhelpful Error Message when function
 breaks its contract with wrong number of arguments
Date: Wed, 4 Dec 2013 15:23:51 -0600

 --089e01177567906c6d04ecbc073b
 Content-Type: text/plain; charset=UTF-8
 
 Urgh. THIS example;
 
 #lang racket/base
 
 (module BAD-CONTRACT racket/base
   (require racket/contract/base)
   (provide (contract-out [foo (-> any/c)]))
   (define (foo x y . q) x))
 (require 'BAD-CONTRACT)
 
 
 
 On Wed, Dec 4, 2013 at 3:23 PM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > Oh, sorry: that's with this example:
 >
 > #lang racket/base
 >
 > (module BAD-CONTRACT racket/base
 >   (require racket/contract/base)
 >   (provide (contract-out [foo (-> any/c)]))
 >   (define (foo x y #:z [z 1] . q) x))
 > (require 'BAD-CONTRACT)
 >
 >
 >
 > On Wed, Dec 4, 2013 at 3:23 PM, Robby Findler <robby@eecs.northwestern.edu
 > > wrote:
 >
 >> How does something like this look to people?
 >>
 >> foo: broke its contract
 >>
 >>   promised: a procedure that accepts 0 non-keyword arguments
 >>
 >>   produced: #<procedure:foo>
 >>
 >>   foo accepts: 2 or arbitrarily more arguments
 >>
 >>   in: (-> any/c)
 >>
 >>   contract from:
 >>
 >>       (/Users/robby/tmp1.rkt BAD-CONTRACT)
 >>
 >>   blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)
 >>
 >>   at: /Users/robby/tmp1.rkt:4.26
 >>
 >>   context...:
 >>
 >>
 >> /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/blame.rkt:143:0:
 >> raise-blame-error16
 >>
 >>
 >> /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val-first.rkt:723:2
 >>
 >>
 >> /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val-first.rkt:599:4
 >>
 >>    (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [running body]
 >>
 >>    /Users/robby/tmp1.rkt: [traversing imports]
 >>
 >>
 >> On Tue, Dec 3, 2013 at 3:04 PM, <dfeltey@ccs.neu.edu> wrote:
 >>
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=14220
 >>>
 >>> Reported by Daniel Feltey for release: 5.3.6
 >>>
 >>> *** Description:
 >>> Consider a racket module:
 >>>
 >>> (module BAD racket
 >>>   (module BAD-CONTRACT racket
 >>>     (provide (contract-out [foo (any/c any/c any/c . -> . any/c)]))
 >>>     (define (foo x y) x))
 >>>   (require 'BAD-CONTRACT))
 >>>
 >>> This produces the error message:
 >>> ; foo: broke its contract
 >>> ;  promised a procedure that accepts 3 mandatory arguments without any
 >>> keywords
 >>> ;  produced: #<procedure:foo>
 >>> ;  in: (-> any/c any/c any/c any/c)
 >>> ;  contract from: (BAD BAD-CONTRACT)
 >>> ;  blaming: (BAD BAD-CONTRACT)
 >>> ;  at: readline-input:33.28
 >>> ; [,bt for context]
 >>>
 >>> Which is unhelpful because it doesn't list the correct arity of the
 >>> function foo and makes it difficult to discern the cause of the error.
 >>>
 >>>
 >>> *** How to repeat:
 >>> Try to run the following racket module:
 >>>
 >>> (module BAD racket
 >>>   (module BAD-CONTRACT racket
 >>>     (provide (contract-out [foo (any/c any/c any/c . -> . any/c)]))
 >>>     (define (foo x y) x))
 >>>   (require 'BAD-CONTRACT))
 >>>
 >>> *** Environment:
 >>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 >>> AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17
 >>>
 >>>
 >>
 >
 
 --089e01177567906c6d04ecbc073b
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Urgh. THIS example;<div><br></div><div><div>#lang racket/b=
 ase</div><div><br></div><div>(module BAD-CONTRACT racket/base</div><div>=C2=
 =A0 (require racket/contract/base)</div><div>=C2=A0 (provide (contract-out =
 [foo (-&gt; any/c)]))</div>
 <div>=C2=A0 (define (foo x y . q) x))</div><div>(require &#39;BAD-CONTRACT)=
 </div></div><div><br></div></div><div class=3D"gmail_extra"><br><br><div cl=
 ass=3D"gmail_quote">On Wed, Dec 4, 2013 at 3:23 PM, Robby Findler <span dir=
 =3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blan=
 k">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">Oh, sorry: that&#39;s with =
 this example:<div><br></div><div><div>#lang racket/base</div><div><br></div=
 ><div>
 (module BAD-CONTRACT racket/base</div><div>=C2=A0 (require racket/contract/=
 base)</div><div>=C2=A0 (provide (contract-out [foo (-&gt; any/c)]))</div>
 <div>=C2=A0 (define (foo x y #:z [z 1] . q) x))</div><div>(require &#39;BAD=
 -CONTRACT)</div></div><div><br></div></div><div class=3D"HOEnZb"><div class=
 =3D"h5"><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On We=
 d, Dec 4, 2013 at 3:23 PM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D"m=
 ailto:robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwester=
 n.edu</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">How does something like thi=
 s look to people?<div><br></div><div>
 
 
 
 
 
 
 
 <p>foo: broke its contract</p>
 <p>=C2=A0 promised: a procedure that accepts 0 non-keyword arguments</p>
 <p>=C2=A0 produced: #&lt;procedure:foo&gt;</p>
 <p>=C2=A0 foo accepts: 2 or arbitrarily more arguments</p>
 <p>=C2=A0 in: (-&gt; any/c)</p>
 <p>=C2=A0 contract from:=C2=A0</p>
 <p>=C2=A0 =C2=A0 =C2=A0 (/Users/robby/tmp1.rkt BAD-CONTRACT)</p>
 <p>=C2=A0 blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)</p>
 <p>=C2=A0 at: /Users/robby/tmp1.rkt:4.26</p>
 <p>=C2=A0 context...:</p>
 <p>=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/contract/pr=
 ivate/blame.rkt:143:0: raise-blame-error16</p>
 <p>=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/contract/pr=
 ivate/arrow-val-first.rkt:723:2</p>
 <p>=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/contract/pr=
 ivate/arrow-val-first.rkt:599:4</p>
 <p>=C2=A0=C2=A0 (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [running body]=
 </p>
 <p>=C2=A0=C2=A0 /Users/robby/tmp1.rkt: [traversing imports]</p></div></div>=
 <div><div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On =
 Tue, Dec 3, 2013 at 3:04 PM,  <span dir=3D"ltr">&lt;<a href=3D"mailto:dfelt=
 ey@ccs.neu.edu" target=3D"_blank">dfeltey@ccs.neu.edu</a>&gt;</span> wrote:=
 <br>
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 220" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14220</a><br>
 <br>
 Reported by Daniel Feltey for release: 5.3.6<br>
 <br>
 *** Description:<br>
 Consider a racket module:<br>
 <br>
 (module BAD racket<br>
 =C2=A0 (module BAD-CONTRACT racket<br>
 =C2=A0 =C2=A0 (provide (contract-out [foo (any/c any/c any/c . -&gt; . any/=
 c)]))<br>
 =C2=A0 =C2=A0 (define (foo x y) x))<br>
 =C2=A0 (require &#39;BAD-CONTRACT))<br>
 <br>
 This produces the error message:<br>
 ; foo: broke its contract<br>
 ; =C2=A0promised a procedure that accepts 3 mandatory arguments without any=
  keywords<br>
 ; =C2=A0produced: #&lt;procedure:foo&gt;<br>
 ; =C2=A0in: (-&gt; any/c any/c any/c any/c)<br>
 ; =C2=A0contract from: (BAD BAD-CONTRACT)<br>
 ; =C2=A0blaming: (BAD BAD-CONTRACT)<br>
 ; =C2=A0at: readline-input:33.28<br>
 ; [,bt for context]<br>
 <br>
 Which is unhelpful because it doesn&#39;t list the correct arity of the fun=
 ction foo and makes it difficult to discern the cause of the error.<br>
 <br>
 <br>
 *** How to repeat:<br>
 Try to run the following racket module:<br>
 <br>
 (module BAD racket<br>
 =C2=A0 (module BAD-CONTRACT racket<br>
 =C2=A0 =C2=A0 (provide (contract-out [foo (any/c any/c any/c . -&gt; . any/=
 c)]))<br>
 =C2=A0 =C2=A0 (define (foo x y) x))<br>
 =C2=A0 (require &#39;BAD-CONTRACT))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.2=
 6.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17<br>
 <br>
 </blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 
 --089e01177567906c6d04ecbc073b--
From: Robby Findler <robby@eecs.northwestern.edu>
To: dfeltey@ccs.neu.edu, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14220: Unhelpful Error Message when function
 breaks its contract with wrong number of arguments
Date: Wed, 4 Dec 2013 15:23:24 -0600

 --001a11c1f540f2991404ecbc05c4
 Content-Type: text/plain; charset=UTF-8
 
 Oh, sorry: that's with this example:
 
 #lang racket/base
 
 (module BAD-CONTRACT racket/base
   (require racket/contract/base)
   (provide (contract-out [foo (-> any/c)]))
   (define (foo x y #:z [z 1] . q) x))
 (require 'BAD-CONTRACT)
 
 
 
 On Wed, Dec 4, 2013 at 3:23 PM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > How does something like this look to people?
 >
 > foo: broke its contract
 >
 >   promised: a procedure that accepts 0 non-keyword arguments
 >
 >   produced: #<procedure:foo>
 >
 >   foo accepts: 2 or arbitrarily more arguments
 >
 >   in: (-> any/c)
 >
 >   contract from:
 >
 >       (/Users/robby/tmp1.rkt BAD-CONTRACT)
 >
 >   blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)
 >
 >   at: /Users/robby/tmp1.rkt:4.26
 >
 >   context...:
 >
 >
 > /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/blame.rkt:143:0:
 > raise-blame-error16
 >
 >
 > /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val-first.rkt:723:2
 >
 >
 > /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val-first.rkt:599:4
 >
 >    (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [running body]
 >
 >    /Users/robby/tmp1.rkt: [traversing imports]
 >
 >
 > On Tue, Dec 3, 2013 at 3:04 PM, <dfeltey@ccs.neu.edu> wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14220
 >>
 >> Reported by Daniel Feltey for release: 5.3.6
 >>
 >> *** Description:
 >> Consider a racket module:
 >>
 >> (module BAD racket
 >>   (module BAD-CONTRACT racket
 >>     (provide (contract-out [foo (any/c any/c any/c . -> . any/c)]))
 >>     (define (foo x y) x))
 >>   (require 'BAD-CONTRACT))
 >>
 >> This produces the error message:
 >> ; foo: broke its contract
 >> ;  promised a procedure that accepts 3 mandatory arguments without any
 >> keywords
 >> ;  produced: #<procedure:foo>
 >> ;  in: (-> any/c any/c any/c any/c)
 >> ;  contract from: (BAD BAD-CONTRACT)
 >> ;  blaming: (BAD BAD-CONTRACT)
 >> ;  at: readline-input:33.28
 >> ; [,bt for context]
 >>
 >> Which is unhelpful because it doesn't list the correct arity of the
 >> function foo and makes it difficult to discern the cause of the error.
 >>
 >>
 >> *** How to repeat:
 >> Try to run the following racket module:
 >>
 >> (module BAD racket
 >>   (module BAD-CONTRACT racket
 >>     (provide (contract-out [foo (any/c any/c any/c . -> . any/c)]))
 >>     (define (foo x y) x))
 >>   (require 'BAD-CONTRACT))
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 >> AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17
 >>
 >>
 >
 
 --001a11c1f540f2991404ecbc05c4
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Oh, sorry: that&#39;s with this example:<div><br></div><di=
 v><div>#lang racket/base</div><div><br></div><div>(module BAD-CONTRACT rack=
 et/base</div><div>=C2=A0 (require racket/contract/base)</div><div>=C2=A0 (p=
 rovide (contract-out [foo (-&gt; any/c)]))</div>
 <div>=C2=A0 (define (foo x y #:z [z 1] . q) x))</div><div>(require &#39;BAD=
 -CONTRACT)</div></div><div><br></div></div><div class=3D"gmail_extra"><br><=
 br><div class=3D"gmail_quote">On Wed, Dec 4, 2013 at 3:23 PM, Robby Findler=
  <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" targe=
 t=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">How does something like thi=
 s look to people?<div><br></div><div>
 
 
 
 
 
 
 
 <p>foo: broke its contract</p>
 <p>=C2=A0 promised: a procedure that accepts 0 non-keyword arguments</p>
 <p>=C2=A0 produced: #&lt;procedure:foo&gt;</p>
 <p>=C2=A0 foo accepts: 2 or arbitrarily more arguments</p>
 <p>=C2=A0 in: (-&gt; any/c)</p>
 <p>=C2=A0 contract from:=C2=A0</p>
 <p>=C2=A0 =C2=A0 =C2=A0 (/Users/robby/tmp1.rkt BAD-CONTRACT)</p>
 <p>=C2=A0 blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)</p>
 <p>=C2=A0 at: /Users/robby/tmp1.rkt:4.26</p>
 <p>=C2=A0 context...:</p>
 <p>=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/contract/pr=
 ivate/blame.rkt:143:0: raise-blame-error16</p>
 <p>=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/contract/pr=
 ivate/arrow-val-first.rkt:723:2</p>
 <p>=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/contract/pr=
 ivate/arrow-val-first.rkt:599:4</p>
 <p>=C2=A0=C2=A0 (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [running body]=
 </p>
 <p>=C2=A0=C2=A0 /Users/robby/tmp1.rkt: [traversing imports]</p></div></div>=
 <div class=3D"HOEnZb"><div class=3D"h5"><div class=3D"gmail_extra"><br><br>=
 <div class=3D"gmail_quote">On Tue, Dec 3, 2013 at 3:04 PM,  <span dir=3D"lt=
 r">&lt;<a href=3D"mailto:dfeltey@ccs.neu.edu" target=3D"_blank">dfeltey@ccs=
 .neu.edu</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 220" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14220</a><br>
 <br>
 Reported by Daniel Feltey for release: 5.3.6<br>
 <br>
 *** Description:<br>
 Consider a racket module:<br>
 <br>
 (module BAD racket<br>
 =C2=A0 (module BAD-CONTRACT racket<br>
 =C2=A0 =C2=A0 (provide (contract-out [foo (any/c any/c any/c . -&gt; . any/=
 c)]))<br>
 =C2=A0 =C2=A0 (define (foo x y) x))<br>
 =C2=A0 (require &#39;BAD-CONTRACT))<br>
 <br>
 This produces the error message:<br>
 ; foo: broke its contract<br>
 ; =C2=A0promised a procedure that accepts 3 mandatory arguments without any=
  keywords<br>
 ; =C2=A0produced: #&lt;procedure:foo&gt;<br>
 ; =C2=A0in: (-&gt; any/c any/c any/c any/c)<br>
 ; =C2=A0contract from: (BAD BAD-CONTRACT)<br>
 ; =C2=A0blaming: (BAD BAD-CONTRACT)<br>
 ; =C2=A0at: readline-input:33.28<br>
 ; [,bt for context]<br>
 <br>
 Which is unhelpful because it doesn&#39;t list the correct arity of the fun=
 ction foo and makes it difficult to discern the cause of the error.<br>
 <br>
 <br>
 *** How to repeat:<br>
 Try to run the following racket module:<br>
 <br>
 (module BAD racket<br>
 =C2=A0 (module BAD-CONTRACT racket<br>
 =C2=A0 =C2=A0 (provide (contract-out [foo (any/c any/c any/c . -&gt; . any/=
 c)]))<br>
 =C2=A0 =C2=A0 (define (foo x y) x))<br>
 =C2=A0 (require &#39;BAD-CONTRACT))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.2=
 6.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17<br>
 <br>
 </blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 
 --001a11c1f540f2991404ecbc05c4--
From: Robby Findler <robby@eecs.northwestern.edu>
To: dfeltey@ccs.neu.edu, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14220: Unhelpful Error Message when function
 breaks its contract with wrong number of arguments
Date: Wed, 4 Dec 2013 15:23:03 -0600

 --047d7b33cd74b1148d04ecbc04dd
 Content-Type: text/plain; charset=UTF-8
 
 How does something like this look to people?
 
 foo: broke its contract
 
   promised: a procedure that accepts 0 non-keyword arguments
 
   produced: #<procedure:foo>
 
   foo accepts: 2 or arbitrarily more arguments
 
   in: (-> any/c)
 
   contract from:
 
       (/Users/robby/tmp1.rkt BAD-CONTRACT)
 
   blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)
 
   at: /Users/robby/tmp1.rkt:4.26
 
   context...:
 
 
 /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/blame.rkt:143:0:
 raise-blame-error16
 
 
 /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val-first.rkt:723:2
 
 
 /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val-first.rkt:599:4
 
    (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [running body]
 
    /Users/robby/tmp1.rkt: [traversing imports]
 
 
 On Tue, Dec 3, 2013 at 3:04 PM, <dfeltey@ccs.neu.edu> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14220
 >
 > Reported by Daniel Feltey for release: 5.3.6
 >
 > *** Description:
 > Consider a racket module:
 >
 > (module BAD racket
 >   (module BAD-CONTRACT racket
 >     (provide (contract-out [foo (any/c any/c any/c . -> . any/c)]))
 >     (define (foo x y) x))
 >   (require 'BAD-CONTRACT))
 >
 > This produces the error message:
 > ; foo: broke its contract
 > ;  promised a procedure that accepts 3 mandatory arguments without any
 > keywords
 > ;  produced: #<procedure:foo>
 > ;  in: (-> any/c any/c any/c any/c)
 > ;  contract from: (BAD BAD-CONTRACT)
 > ;  blaming: (BAD BAD-CONTRACT)
 > ;  at: readline-input:33.28
 > ; [,bt for context]
 >
 > Which is unhelpful because it doesn't list the correct arity of the
 > function foo and makes it difficult to discern the cause of the error.
 >
 >
 > *** How to repeat:
 > Try to run the following racket module:
 >
 > (module BAD racket
 >   (module BAD-CONTRACT racket
 >     (provide (contract-out [foo (any/c any/c any/c . -> . any/c)]))
 >     (define (foo x y) x))
 >   (require 'BAD-CONTRACT))
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)
 > AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17
 >
 >
 
 --047d7b33cd74b1148d04ecbc04dd
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">How does something like this look to people?<div><br></div=
 ><div>
 
 
 
 
 
 
 
 <p class=3D"">foo: broke its contract</p>
 <p class=3D"">=C2=A0 promised: a procedure that accepts 0 non-keyword argum=
 ents</p>
 <p class=3D"">=C2=A0 produced: #&lt;procedure:foo&gt;</p>
 <p class=3D"">=C2=A0 foo accepts: 2 or arbitrarily more arguments</p>
 <p class=3D"">=C2=A0 in: (-&gt; any/c)</p>
 <p class=3D"">=C2=A0 contract from:=C2=A0</p>
 <p class=3D"">=C2=A0 =C2=A0 =C2=A0 (/Users/robby/tmp1.rkt BAD-CONTRACT)</p>
 <p class=3D"">=C2=A0 blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)</p>
 <p class=3D"">=C2=A0 at: /Users/robby/tmp1.rkt:4.26</p>
 <p class=3D"">=C2=A0 context...:</p>
 <p class=3D"">=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/=
 contract/private/blame.rkt:143:0: raise-blame-error16</p>
 <p class=3D"">=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/=
 contract/private/arrow-val-first.rkt:723:2</p>
 <p class=3D"">=C2=A0=C2=A0 /Users/robby/git/ctc/plt/racket/collects/racket/=
 contract/private/arrow-val-first.rkt:599:4</p>
 <p class=3D"">=C2=A0=C2=A0 (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [ru=
 nning body]</p>
 <p class=3D"">=C2=A0=C2=A0 /Users/robby/tmp1.rkt: [traversing imports]</p><=
 /div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On=
  Tue, Dec 3, 2013 at 3:04 PM,  <span dir=3D"ltr">&lt;<a href=3D"mailto:dfel=
 tey@ccs.neu.edu" target=3D"_blank">dfeltey@ccs.neu.edu</a>&gt;</span> wrote=
 :<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 220" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14220</a><br>
 <br>
 Reported by Daniel Feltey for release: 5.3.6<br>
 <br>
 *** Description:<br>
 Consider a racket module:<br>
 <br>
 (module BAD racket<br>
 =C2=A0 (module BAD-CONTRACT racket<br>
 =C2=A0 =C2=A0 (provide (contract-out [foo (any/c any/c any/c . -&gt; . any/=
 c)]))<br>
 =C2=A0 =C2=A0 (define (foo x y) x))<br>
 =C2=A0 (require &#39;BAD-CONTRACT))<br>
 <br>
 This produces the error message:<br>
 ; foo: broke its contract<br>
 ; =C2=A0promised a procedure that accepts 3 mandatory arguments without any=
  keywords<br>
 ; =C2=A0produced: #&lt;procedure:foo&gt;<br>
 ; =C2=A0in: (-&gt; any/c any/c any/c any/c)<br>
 ; =C2=A0contract from: (BAD BAD-CONTRACT)<br>
 ; =C2=A0blaming: (BAD BAD-CONTRACT)<br>
 ; =C2=A0at: readline-input:33.28<br>
 ; [,bt for context]<br>
 <br>
 Which is unhelpful because it doesn&#39;t list the correct arity of the fun=
 ction foo and makes it difficult to discern the cause of the error.<br>
 <br>
 <br>
 *** How to repeat:<br>
 Try to run the following racket module:<br>
 <br>
 (module BAD racket<br>
 =C2=A0 (module BAD-CONTRACT racket<br>
 =C2=A0 =C2=A0 (provide (contract-out [foo (any/c any/c any/c . -&gt; . any/=
 c)]))<br>
 =C2=A0 =C2=A0 (define (foo x y) x))<br>
 =C2=A0 (require &#39;BAD-CONTRACT))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.2=
 6.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17<br>
 <br>
 </blockquote></div><br></div>
 
 --047d7b33cd74b1148d04ecbc04dd--
From: Robby Findler <robby@eecs.northwestern.edu>
To: dfeltey@ccs.neu.edu, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14220: Unhelpful Error Message when function
 breaks its contract with wrong number of arguments
Date: Wed, 4 Dec 2013 21:38:15 -0600

 --089e01161b4688281a04ecc14282
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 FWIW, here's a keyword example.
 
 #lang racket/base
 
 (module BAD-CONTRACT racket/base
   (require racket/contract/base)
   (provide (contract-out [foo (-> any/c)]))
   (define (foo x y #:x [z 1] . q) x))
 (require 'BAD-CONTRACT)
 
 foo: broke its contract
   promised: a procedure that accepts 0 non-keyword arguments
   produced: #<procedure:foo>
   foo accepts: 2 or arbitrarily many more normal arguments and the optional
 keywords #:x
   in: (-> any/c)
   contract from:
       (/Users/robby/tmp1.rkt BAD-CONTRACT)
   blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)
   at: /Users/robby/tmp1.rkt:5.26
   context...:
 
  /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/blame.rkt=
 :143:0:
 raise-blame-error16
 
  /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val=
 -first.rkt:713:2
 
  /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val=
 -first.rkt:589:4
    (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [running body]
    /Users/robby/tmp1.rkt: [traversing imports]
 =E2=98=95  [robby@yanpu]
 ~/git/ctc/plt/pkgs/racket-pkgs/racket-test/tests/racket/contract
 
 --089e01161b4688281a04ecc14282
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">FWIW, here&#39;s a keyword example.<div><br></div><div><di=
 v>#lang racket/base</div><div><br></div><div>(module BAD-CONTRACT racket/ba=
 se</div><div>=C2=A0 (require racket/contract/base)</div><div>=C2=A0 (provid=
 e (contract-out [foo (-&gt; any/c)]))</div>
 <div>=C2=A0 (define (foo x y #:x [z 1] . q) x))</div><div>(require &#39;BAD=
 -CONTRACT)</div><div><br></div><div>foo: broke its contract</div><div>=C2=
 =A0 promised: a procedure that accepts 0 non-keyword arguments</div><div>=
 =C2=A0 produced: #&lt;procedure:foo&gt;</div>
 <div>=C2=A0 foo accepts: 2 or arbitrarily many more normal arguments and th=
 e optional keywords #:x</div><div>=C2=A0 in: (-&gt; any/c)</div><div>=C2=A0=
  contract from:=C2=A0</div><div>=C2=A0 =C2=A0 =C2=A0 (/Users/robby/tmp1.rkt=
  BAD-CONTRACT)</div><div>=C2=A0 blaming: (/Users/robby/tmp1.rkt BAD-CONTRAC=
 T)</div>
 <div>=C2=A0 at: /Users/robby/tmp1.rkt:5.26</div><div>=C2=A0 context...:</di=
 v><div>=C2=A0 =C2=A0/Users/robby/git/ctc/plt/racket/collects/racket/contrac=
 t/private/blame.rkt:143:0: raise-blame-error16</div><div>=C2=A0 =C2=A0/User=
 s/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-val-first=
 .rkt:713:2</div>
 <div>=C2=A0 =C2=A0/Users/robby/git/ctc/plt/racket/collects/racket/contract/=
 private/arrow-val-first.rkt:589:4</div><div>=C2=A0 =C2=A0(submod /Users/rob=
 by/tmp1.rkt BAD-CONTRACT): [running body]</div><div>=C2=A0 =C2=A0/Users/rob=
 by/tmp1.rkt: [traversing imports]</div>
 <div>=E2=98=95 =C2=A0[robby@yanpu] ~/git/ctc/plt/pkgs/racket-pkgs/racket-te=
 st/tests/racket/contract</div><div><br></div></div></div>
 
 --089e01161b4688281a04ecc14282--
From: Robby Findler <robby@eecs.northwestern.edu>
To: dfeltey@ccs.neu.edu, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14220: Unhelpful Error Message when function
 breaks its contract with wrong number of arguments
Date: Wed, 4 Dec 2013 21:39:29 -0600

 --047d7b33d81aea296d04ecc146a9
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 (and I just fixed the plural problem)
 
 
 On Wed, Dec 4, 2013 at 9:38 PM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > FWIW, here's a keyword example.
 >
 > #lang racket/base
 >
 > (module BAD-CONTRACT racket/base
 >   (require racket/contract/base)
 >   (provide (contract-out [foo (-> any/c)]))
 >   (define (foo x y #:x [z 1] . q) x))
 > (require 'BAD-CONTRACT)
 >
 > foo: broke its contract
 >   promised: a procedure that accepts 0 non-keyword arguments
 >   produced: #<procedure:foo>
 >   foo accepts: 2 or arbitrarily many more normal arguments and the
 > optional keywords #:x
 >   in: (-> any/c)
 >   contract from:
 >       (/Users/robby/tmp1.rkt BAD-CONTRACT)
 >   blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)
 >   at: /Users/robby/tmp1.rkt:5.26
 >   context...:
 >
 >  /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/blame.r=
 kt:143:0:
 > raise-blame-error16
 >
 >  /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-v=
 al-first.rkt:713:2
 >
 >  /Users/robby/git/ctc/plt/racket/collects/racket/contract/private/arrow-v=
 al-first.rkt:589:4
 >    (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [running body]
 >    /Users/robby/tmp1.rkt: [traversing imports]
 > =E2=98=95  [robby@yanpu]
 > ~/git/ctc/plt/pkgs/racket-pkgs/racket-test/tests/racket/contract
 >
 >
 
 --047d7b33d81aea296d04ecc146a9
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">(and I just fixed the plural problem)</div><div class=3D"g=
 mail_extra"><br><br><div class=3D"gmail_quote">On Wed, Dec 4, 2013 at 9:38 =
 PM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northw=
 estern.edu" target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wr=
 ote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">FWIW, here&#39;s a keyword =
 example.<div><br></div><div><div class=3D"im"><div>#lang racket/base</div><=
 div>
 <br></div><div>(module BAD-CONTRACT racket/base</div><div>=C2=A0 (require r=
 acket/contract/base)</div><div>=C2=A0 (provide (contract-out [foo (-&gt; an=
 y/c)]))</div>
 </div><div>=C2=A0 (define (foo x y #:x [z 1] . q) x))</div><div>(require &#=
 39;BAD-CONTRACT)</div><div><br></div><div class=3D"im"><div>foo: broke its =
 contract</div><div>=C2=A0 promised: a procedure that accepts 0 non-keyword =
 arguments</div>
 <div>=C2=A0 produced: #&lt;procedure:foo&gt;</div>
 </div><div>=C2=A0 foo accepts: 2 or arbitrarily many more normal arguments =
 and the optional keywords #:x</div><div class=3D"im"><div>=C2=A0 in: (-&gt;=
  any/c)</div><div>=C2=A0 contract from:=C2=A0</div><div>=C2=A0 =C2=A0 =C2=
 =A0 (/Users/robby/tmp1.rkt BAD-CONTRACT)</div>
 <div>=C2=A0 blaming: (/Users/robby/tmp1.rkt BAD-CONTRACT)</div>
 </div><div>=C2=A0 at: /Users/robby/tmp1.rkt:5.26</div><div class=3D"im"><di=
 v>=C2=A0 context...:</div><div>=C2=A0 =C2=A0/Users/robby/git/ctc/plt/racket=
 /collects/racket/contract/private/blame.rkt:143:0: raise-blame-error16</div=
 ></div><div>=C2=A0 =C2=A0/Users/robby/git/ctc/plt/racket/collects/racket/co=
 ntract/private/arrow-val-first.rkt:713:2</div>
 
 <div>=C2=A0 =C2=A0/Users/robby/git/ctc/plt/racket/collects/racket/contract/=
 private/arrow-val-first.rkt:589:4</div><div class=3D"im"><div>=C2=A0 =C2=A0=
 (submod /Users/robby/tmp1.rkt BAD-CONTRACT): [running body]</div><div>=C2=
 =A0 =C2=A0/Users/robby/tmp1.rkt: [traversing imports]</div>
 
 </div><div>=E2=98=95 =C2=A0[robby@yanpu] ~/git/ctc/plt/pkgs/racket-pkgs/rac=
 ket-test/tests/racket/contract</div><div><br></div></div></div>
 </blockquote></div><br></div>
 
 --047d7b33d81aea296d04ecc146a9--
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Wed, 11 Dec 2013 13:07:38 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/c321f6dd0c
State changed from "open" to "closed" by robby@racket-lang.org at Wed, 11 Dec 2013 13:07:38 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/c321f6dd0c
  | Change contract system so that projections are more first-order friendly
  | 
  | The main changes are the addition of a new way to specify projections,
  | using the #:val-first-projection keyword argument; the main goal of the
  | new API is that more information can be supplied to the projection on
  | the server side of the contract boundary. In addition, the arrow contracts
  | will now, internally and in some cases (see define-module-boundary-contract)
  | return functions that accept one additional argument than the original
  | function did and then insert the name of the negative party into call sites.
  | 
  | The rough idea is that if you have a program like this one:
  | 
  |   #lang racket/base
  |   (define (f x) (+ x 1))
  |   (provide (contract-out [f (-> integer? integer?)]))
  | 
  | then the contract system produces something much closer to this:
  | 
  |   #lang racket/base
  |   (define (f x) (+ x 1))
  | 
  |   (provide (rename-out [external-f f]))
  |   (define (external-f neg-party x)
  |     (check-integer neg-party x)
  |     (define ans (f x))
  |     (check-integer neg-party ans)
  |     ans)
  | 
  |   (define local-blame-information ...)
  |   (define (check-integer neg-party v)
  |     (unless (integer? v)
  |       (raise-blame-error local-blame-information
  |                          #:missing-party neg-party
  |                          ...)))
  | 
  | where 'raise-blame-error' can now cope with blame objects that don't
  | have negative part information in them (when the #:missing-party
  | argument is supplied, essentially just reassembling the original blame
  | record at that point)
  | 
  | Then, on the client side, if we had
  | 
  |    (f x)
  | 
  | it gets transformed into
  | 
  |    (f '<<my-modules-name>> x)
  | 
  | and if we had
  | 
  |    (let ([g f])
  |      ...)
  | 
  | you get a slow path:
  | 
  |     (let ([g (lambda (x) (f '<<my-modules-name>> x))])
  |       ...)
  | 
  | (where we don't create a wrapper lambda, of course, we actually create
  | a procedure chaperone)
  | 
  | The performance improvements seem pretty good (see below for the
  | precise programs that I ran and the numbers I got):
  | 
  |   first order contract microbenchmark: 6x speedup
  |   higher-order contract microbenchmark: 1.5x speedup
  |   first-order TR contract interop micro benchmark: 6x speedup
  | 
  | This also improves the memory use for DrRacket by about 3% (from about
  | 236.8 mb to 231.3 mb), presumably because more of the data structures
  | created by the contract system can be created only once, on the server
  | side.
  | 
  | Be aware, however, that not all combinators are using the new
  | projections and the code that translates between the two APIs
  | is slow.
  | 
  | Also there are a bunch of other changes that got made while I was
  | doing this. Most notably, the change above were not designed for the
  | performance improvements to arrow contracts, but to make it possible
  | to implement class/c contracts with a (hopefully) negligible space
  | overhead. That work is not yet finished, but this commit includes some
  | changes to the class system to prepare the way for those changes.
  | 
  | Unfortuantely, these changes slow down 'send' on microbenchmarks by
  | about 24%. The change comes from the addition of an extra 'if' (and
  | predicate test and possibly the extra let expresison) that's inserted
  | into the expansion. I'm not happy about that (I was shooting for 10%)
  | but I'm not sure that we can do much about it (except perhaps double
  | check my measurements, see below).
  | 
  | Other misc changes:
  | 
  | - improve arity mismatch error messages by including the arity of the
  |   given procedure (closes PR 14220)
  | 
  | - Adjust case-> so it generates less code. This seems to reduce the
  |   size of the math library .zo files by about 3% (from 10440k to
  |   10156k for me)
  | 
  | - speeds up the contract tests a bit
  | 
  | - move recontract out into racket/contract (also, document it)
  | 
  | - added define-module-boundary-contract
  | 
  | - streamline TR's any-wrap/c and adjust it to use
  |   #:val-first-projection instead of #:projection
  | 
  | - adjust a bunch of contracts to print more nicely
  | 
  | - and, of course, Rackety
  | 
  | --------------------------------
  | 
  | The precise programs that I tried and their timings (the raw data
  | for the performance claims above):
  | 
  |  #lang racket/base
  | (module m racket/base
  |   (require racket/contract/base)
  |   (define (f x) x)
  |   (provide (contract-out [f (-> any/c any/c)])))
  | 
  | (require 'm)
  | (time
  |  (for ([x (in-range 100000)])
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)))
  | 
  | pre-push timings:
  | 
  | cpu time: 3553 real time: 3552 gc time: 52
  | cpu time: 3548 real time: 3552 gc time: 52
  | cpu time: 3525 real time: 3525 gc time: 54
  | cpu time: 3547 real time: 3547 gc time: 47
  | 
  | post-push timings:
  | 
  | cpu time: 515 real time: 515 gc time: 15
  | cpu time: 522 real time: 522 gc time: 17
  | cpu time: 560 real time: 560 gc time: 19
  | cpu time: 514 real time: 515 gc time: 19
  | cpu time: 507 real time: 507 gc time: 17
  | 
  | A second order example using vectors (note that vector/c isn't yet
  | updated to the #:val-first-projection, so it will be way slower)
  | 
  |  #lang racket/base
  | (module m racket/base
  |   (require racket/contract/base)
  |   (define (f x) (vector-ref x 0))
  |   (provide (contract-out [f (-> (vectorof any/c) any/c)])))
  | 
  | (require 'm)
  | (define v (vector void))
  | (time
  |  (for ([x (in-range 10000)])
  |    (f v) (f v) (f v) (f v) (f v) (f v) (f v) (f v)
  |    (f v) (f v) (f v) (f v) (f v) (f v) (f v) (f v)
  |    (f v) (f v) (f v) (f v) (f v) (f v) (f v) (f v)
  |    (f v) (f v) (f v) (f v) (f v) (f v) (f v) (f v)
  |    (f v) (f v) (f v) (f v) (f v) (f v) (f v) (f v)
  |    (f v) (f v) (f v) (f v) (f v) (f v) (f v) (f v)
  |    (f v) (f v) (f v) (f v) (f v) (f v) (f v) (f v)))
  | 
  | pre-push timings:
  | 
  | cpu time: 744 real time: 745 gc time: 20
  | cpu time: 679 real time: 679 gc time: 18
  | cpu time: 695 real time: 695 gc time: 23
  | cpu time: 743 real time: 742 gc time: 21
  | cpu time: 780 real time: 786 gc time: 21
  | cpu time: 723 real time: 726 gc time: 25
  | 
  | post-push timings:
  | 
  | cpu time: 448 real time: 448 gc time: 18
  | cpu time: 470 real time: 469 gc time: 19
  | cpu time: 466 real time: 465 gc time: 16
  | cpu time: 457 real time: 456 gc time: 15
  | cpu time: 465 real time: 466 gc time: 24
  | 
  | Using contracts in TR
  | 
  |  #lang racket/base
  | (module m typed/racket/base
  |   (: f (Any -> Any))
  |   (define (f x) x)
  |   (provide f))
  | 
  | (require 'm)
  | (time
  |  (for ([x (in-range 10000)])
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)
  |    (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8)))
  | 
  | pre-push timings:
  | 
  | cpu time: 357 real time: 357 gc time: 6
  | cpu time: 446 real time: 447 gc time: 4
  | cpu time: 361 real time: 359 gc time: 4
  | cpu time: 366 real time: 366 gc time: 5
  | cpu time: 368 real time: 367 gc time: 6
  | 
  | post-push timings
  | 
  | cpu time: 63 real time: 63 gc time: 7
  | cpu time: 64 real time: 63 gc time: 8
  | cpu time: 63 real time: 64 gc time: 8
  | cpu time: 58 real time: 58 gc time: 8
  | cpu time: 59 real time: 59 gc time: 7
  | 
  | Slowdown for 'send':
  | 
  |  #lang racket/base
  | (require racket/class)
  | (define c% (class object% (define/public (m x) x) (super-new)))
  | (define o (new c%))
  | (time
  |  (for ([x (in-range 100000)])
  |    (send o m 1) (send o m 2) (send o m 3) (send o m 4)
  |    (send o m 5) (send o m 6) (send o m 7) (send o m 8)
  |    (send o m 1) (send o m 2) (send o m 3) (send o m 4)
  |    (send o m 5) (send o m 6) (send o m 7) (send o m 8)
  |    (send o m 1) (send o m 2) (send o m 3) (send o m 4)
  |    (send o m 5) (send o m 6) (send o m 7) (send o m 8)
  |    (send o m 1) (send o m 2) (send o m 3) (send o m 4)
  |    (send o m 5) (send o m 6) (send o m 7) (send o m 8)
  |    (send o m 1) (send o m 2) (send o m 3) (send o m 4)
  |    (send o m 5) (send o m 6) (send o m 7) (send o m 8)))
  | 
  | timings pre-push:
  | 
  | cpu time: 251 real time: 251 gc time: 0
  | cpu time: 275 real time: 275 gc time: 0
  | cpu time: 250 real time: 250 gc time: 0
  | cpu time: 246 real time: 246 gc time: 0
  | cpu time: 247 real time: 246 gc time: 0
  | 
  | timings post-push:
  | 
  | cpu time: 303 real time: 302 gc time: 0
  | cpu time: 333 real time: 333 gc time: 0
  | cpu time: 315 real time: 315 gc time: 0
  | cpu time: 317 real time: 317 gc time: 0
  | cpu time: 311 real time: 310 gc time: 0

