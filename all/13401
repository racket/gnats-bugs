From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jan  1 00:57:47 2013
Received: from mail-ob0-f180.google.com (mail-ob0-f180.google.com [209.85.214.180])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r015vBJK012713
	for <bugs@bugs.plt-scheme.org>; Tue, 1 Jan 2013 00:57:11 -0500
Message-Id: <201301010557.r015v8cT012704@champlain.ccs.neu.edu>
Date: Tue, 1 Jan 2013 00:57:08 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: fsemaphores should support peeking

>Number:         13401
>Category:       all
>Synopsis:       fsemaphores should support peeking
>Class:          change-request
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Jan 01 01:00:01 -0500 2013
>Last-Modified:  Tue Jan 01 09:28:01 -0500 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
fsemaphores currently do not support peeking which means that I can not implement some algorithms I want with them. If it is possible (i.e. future safe) i think they should support this.
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13401: fsemaphores should support peeking
Date: Tue, 1 Jan 2013 06:13:55 -0700

 At Tue, 1 Jan 2013 01:00:02 -0500, eric.n.dobson@gmail.com wrote:
 > fsemaphores currently do not support peeking which means that I can not 
 > implement some algorithms I want with them. If it is possible (i.e. future 
 > safe) i think they should support this.
 
 Can you say more about the algorithm that you have in mind?
 
 I ask because futures provide no guarantee of concurrency, and so I
 worry about any attempt to synchronize them other than `touch'.
 Offhand, polling sounds even more problematic, so I'm curious to see an
 example where it could be useful.
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13401: fsemaphores should support peeking
Date: Tue, 1 Jan 2013 06:26:35 -0800

 --bcaec53d5b4bc872d904d23aeab9
 Content-Type: text/plain; charset=UTF-8
 
 I'm trying to write some future safe concurrent data structures. I have
 already implemented queues and deques, which work fine. But I cannot seem
 to figure out how to make a future safe ivar. I need something that can be
 pushed to once, and then be always ready, and support waking up already
 blocked threads of control (either future or racket thread). I am able to
 do that with a regular semaphore, but cannot do it with an fsemaphore.
 
 If futures don't provide any guarantee of concurrency then why are there
 fsemaphores? Do they have another use?
 
 Code:
 https://github.com/shekari/concurrent-data/blob/master/data/ivar.rkt
 
 
 On Tue, Jan 1, 2013 at 5:13 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 
 > At Tue, 1 Jan 2013 01:00:02 -0500, eric.n.dobson@gmail.com wrote:
 > > fsemaphores currently do not support peeking which means that I can not
 > > implement some algorithms I want with them. If it is possible (i.e.
 > future
 > > safe) i think they should support this.
 >
 > Can you say more about the algorithm that you have in mind?
 >
 > I ask because futures provide no guarantee of concurrency, and so I
 > worry about any attempt to synchronize them other than `touch'.
 > Offhand, polling sounds even more problematic, so I'm curious to see an
 > example where it could be useful.
 >
 >
 
 --bcaec53d5b4bc872d904d23aeab9
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I&#39;m trying to write some future safe concurrent data s=
 tructures. I have already implemented queues and deques, which work fine. B=
 ut I cannot seem to figure out how to make a future safe ivar. I need somet=
 hing that can be pushed to once, and then be always ready, and support waki=
 ng up already blocked threads of control (either future or racket thread). =
 I am able to do that with a regular semaphore, but cannot do it with an fse=
 maphore.<div>
 <br></div><div style>If futures don&#39;t provide any guarantee of concurre=
 ncy then why are there fsemaphores? Do they have another use?</div><div sty=
 le><br></div><div style>Code:</div><div style><a href=3D"https://github.com=
 /shekari/concurrent-data/blob/master/data/ivar.rkt">https://github.com/shek=
 ari/concurrent-data/blob/master/data/ivar.rkt</a><br>
 </div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">O=
 n Tue, Jan 1, 2013 at 5:13 AM, Matthew Flatt <span dir=3D"ltr">&lt;<a href=
 =3D"mailto:mflatt@cs.utah.edu" target=3D"_blank">mflatt@cs.utah.edu</a>&gt;=
 </span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">At Tue, 1 Jan 2013 01:00:02 -0500, <a href=
 =3D"mailto:eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a> wrote:<br>
 &gt; fsemaphores currently do not support peeking which means that I can no=
 t<br>
 &gt; implement some algorithms I want with them. If it is possible (i.e. fu=
 ture<br>
 &gt; safe) i think they should support this.<br>
 <br>
 Can you say more about the algorithm that you have in mind?<br>
 <br>
 I ask because futures provide no guarantee of concurrency, and so I<br>
 worry about any attempt to synchronize them other than `touch&#39;.<br>
 Offhand, polling sounds even more problematic, so I&#39;m curious to see an=
 <br>
 example where it could be useful.<br>
 <br>
 </blockquote></div><br></div>
 
 --bcaec53d5b4bc872d904d23aeab9--
