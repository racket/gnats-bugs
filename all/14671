From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jul 31 15:53:59 2014
Received: from mail-ig0-f175.google.com (mail-ig0-f175.google.com [209.85.213.175])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s6VJrr23018611
	for <bugs@bugs.plt-scheme.org>; Thu, 31 Jul 2014 15:53:54 -0400
Message-Id: <201407311953.s6VJrbhb018599@winooski.ccs.neu.edu>
Date: Thu, 31 Jul 2014 15:53:37 -0400
From: spencer@florence.io
To: bugs@racket-lang.org
Subject: color:text<%> documentation for get-token does not match drracket behavior

>Number:         14671
>Category:       all
>Synopsis:       color:text<%> documentation for get-token does not match drracket behavior
>Class:          doc-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Jul 31 15:56:01 -0400 2014
>Originator:     SpencerFlorence
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.0.3--2014-07-24(1bf54b06/d/local)
>Environment:
macosx "Darwin snips 13.3.0 Darwin Kernel Version 13.3.0: Tue Jun  3 21:27:35 PDT 2014; root:xnu-2422.110.17~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 422959936
raco pkg (show):
/Applications/Racket/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [216 auto-installed packages not shown]
Installation-wide:
 Package               Checksum                                    Source
 drracket-solarized    9a90657bb320d4231c85dff96ceaef6a835c5c4f    (catalog drracket-solarized)
 pop-pl                #f                                          (link /Users/florence/work/pop-pl)
User-specific for installation "development":
 [none]



Collections:
("/Users/florence/Library/Racket/development/collects"
 (non-existent-path))
("/Applications/Racket/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: Saved 3 internal errors:

color:text<%>: expected the token end to be between 1 and 1, got 2
  context...:
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:343:4: continue-re-tokenize method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:556:4: colorer-driver method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:579:4: colorer-callback method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:451:6
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:502:32
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:650:3


color:text<%>: expected the token end to be between 1 and 1, got 2
  context...:
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:343:4: continue-re-tokenize method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:556:4: colorer-driver method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:579:4: colorer-callback method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:451:6
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:502:32
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:650:3


color:text<%>: expected the token end to be between 21 and 21, got 22
  context...:
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:343:4: continue-re-tokenize method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:556:4: colorer-driver method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/framework/private/color.rkt:579:4: colorer-callback method in ...rk/private/color.rkt:77:2
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:451:6
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:502:32
   /Applications/Racket/pkgs/gui-pkgs/gui-lib/mred/private/wx/common/queue.rkt:650:3

Computer Language: (("Determine language from source") (#(#t quasiquote mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n" #f #t ((test) (main)) #t))
>Description:
The documentation for color:text<%> states that the fourth argument of "get-token" (in the one argument case) is:

The starting position of the token (or #f if eof); this number is relative to the third result of get-port-location when applied to the input port that gets passed to get-token.


assuming that "get-port-location" actually means "port-next-location", I read this to mean that if a lexer wishes say that the token starts directly at the begining of the port, it would return 0 for its fourth value.

However the code in pkgs/gui-pkgs/gui-lib/framework/private/color.rkt expects this number to be absolute (ie exactly the third value from port-next-location) (see line 365):

            (unless (<= pos-before new-token-start pos-after)
              (error 'color:text<%>
                     "expected the token start to be between ~s and ~s, got ~s" pos-before pos-after new-token-start))


where pos-before is the third result of port-next-location, and new-token-start is the fourth result of get-token.
>How-To-Repeat:
The folowing color-lexer appears in the docs:

(λ (port offset mode)
  (define-values (line col pos) (port-next-location port))
  (define c (read-char port))
  (cond
    [(eof-object? c)
     (values c 'eof #f #f #f 0 mode)]
    [else
     (values (string c)
             (if mode 'symbol 'string)
             #f
             (+ pos)
             (+ pos 1)
             0
             (not mode))]))

Modify it to return relative instead of absolute values:

(λ (port offset mode)
  (define-values (line col pos) (port-next-location port))
  (define c (read-char port))
  (cond
    [(eof-object? c)
     (values c 'eof #f #f #f 0 mode)]
    [else
     (values (string c)
             (if mode 'symbol 'string)
             #f
             0
             1
             0
             (not mode))]))

This lexer should exibit the issue.
>Fix:
