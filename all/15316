From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jun 24 16:37:16 2016
Received: from mail-it0-f54.google.com (mail-it0-f54.google.com [209.85.214.54])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u5OKbDfe000785
	for <bugs@bugs.plt-scheme.org>; Fri, 24 Jun 2016 16:37:13 -0400
Message-Id: <201606242037.u5OKbAfP000778@winooski.ccs.neu.edu>
Date: Fri, 24 Jun 2016 16:37:10 -0400
From: luke.whittlesey@gmail.com
To: bugs@racket-lang.org
Subject: Runaway memory use when error in #:methods gen:custom-write

>Number:         15316
>Category:       all
>Synopsis:       Runaway memory use when error in #:methods gen:custom-write
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Jun 24 16:40:01 -0400 2016
>Originator:     Luke Whittlesey
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.5
>Environment:
unix "Linux mycluster 4.5.4-1-ARCH #1 SMP PREEMPT Wed May 11 22:21:28 CEST 2016 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 1897453676
raco pkg (show):
Installation-wide:
 Package            Checksum             Source
 main-distribution  8802f8e0d53f2d0c...  catalog...tribution
 racket-lib         78e54839a012a8aa...  catalog racket-lib
 [184 auto-installed packages not shown]
User-specific for installation "6.5":
 Package   Checksum  Source
 graph               link /home/bob/test_racket/graph
 macrohdl            link /home/bob/macrohdl



Collections:
("/home/bob/.racket/6.5/collects"
 (non-existent-path))
("/usr/share/racket/collects"
 ("acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
The example below causes racket to run out of memory when I use displayln on the b structure.
>How-To-Repeat:
#lang racket

(struct a (member) #:transparent)

(struct b (member) #:transparent
  #:methods gen:custom-write
  [(define write-proc
     (lambda (obj port mode)
       (write-string
        (format "~a"
                (a-member obj))  ;;<- !!! should be b-member !!!
        port)))])


(define test (b 22))
(displayln test)  ;;<- this will cause the interpreter to run out of memory
>Fix:
