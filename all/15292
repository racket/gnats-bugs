From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Apr 20 11:17:07 2016
Received: from mail-ig0-f182.google.com (mail-ig0-f182.google.com [209.85.213.182])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u3KFH28k031980
	for <bugs@bugs.plt-scheme.org>; Wed, 20 Apr 2016 11:17:03 -0400
Message-Id: <201604201516.u3KFGuwT031963@winooski.ccs.neu.edu>
Date: Wed, 20 Apr 2016 11:16:56 -0400
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: provide: does not work with ->* properly 

>Number:         15292
>Category:       all
>Synopsis:       provide: does not work with ->* properly
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Apr 20 11:20:01 -0400 2016
>Last-Modified:  Tue May 03 18:16:02 -0400 2016
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.5.0.1--2016-04-11(-/f)
>Environment:
macosx "Darwin antarctica.ccs.neu.edu 12.6.0 Darwin Kernel Version 12.6.0: Wed Mar 18 16:23:48 PDT 2015; root:xnu-2050.48.19~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 865687128
raco pkg (show):
Installation-wide:
 Package                 Checksum                                 Source
 ansi                    cd01330ca673acde9eb83c2705fed82c30b9...  catalog....com/tonyg/racket-ansi/master
 benchmark               78f36c4e85e97de9de0367d0464d40710659...  catalog...mourv/racket-benchmark#master
 classicthesis-scribble  e6c3f2be24654cbf0b17d9027737c2d3eb1c...  catalog...amourv/classicthesis-scribble
 glob                    39e8249a1dd05abb1d398009efce66241379...  catalog...b git://github.com/bennn/glob
 graph                   43e8e1399284fed877fc9ac21e5205856af0...  catalog...thub.com/stchang/graph/master
 honu                    7348c61d2aaebbfba36f00405a4e8cb84712...  catalog... git://github.com/racket/honu
 htdp                    1d6bfae614720c3ed9a2e4956983d650beee...  clone...thub.com/racket/htdp/?path=htdp
 lipics                  1edffbfc00abd26d7b4207d024004943b908...  catalog....com/takikawa/lipics-scribble
 main-distribution       1a0cd523117ae3061b09604183a476122b7b...  catalog....com/racket/main-distribution
 main-distribution-test  046a93803a9e84c512d9baff722b378697f4...  catalog...racket/main-distribution-test
 r-lexer                 a94313082d524437ce031c2163640b2b5d86...  catalog...m/LeifAndersen/racket-r-lexer
 racket-lib                                                       static-link...thias/plt/pkgs/racket-lib
 rackunit                062ac9d3a48c1629cca9ed1348ec3b2b8350...  clone.../racket/rackunit/?path=rackunit
 redex                   42b556d970f2b7d5d870100de8f023324da8...  clone...ub.com/racket/redex/?path=redex
 sl2014                  4ffef910ae5109eef916f3d57aaab95f0298...  catalog.../github.com/mfelleisen/sl2014
 unstable                6d2564bf725be9d56320cfa5bf438e8d3daf...  catalog...acket/unstable/?path=unstable
 [248 auto-installed packages not shown]
User-specific for installation "development":
 [none]



Collections:
("/Users/matthias/0Unison/collects/"
 (".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/development/collects"
 (non-existent-path))
("/Users/matthias/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket" #t #t ((test) (main)) #t))
>Description:
provide: supposedly specifies the types for identifiers in clauses of the shape [v t]
This works for some simple clauses such as [f (-> Integer Integer)] but not for clauses
that use the optional domain ->*. 
>How-To-Repeat:
This raises a type error. Uncommenting the third line eliminates the error. 

#lang typed/racket
(provide: (f (->* () (String) Natural)))
; (: f (->* () (String) Natural))
(define (f [s "hello world"])
  (string-length s))
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15292: provide: does not work with ->* properly
Date: Tue, 3 May 2016 14:04:40 -0400

 On Wed, Apr 20, 2016 at 11:20 AM,  <matthias@ccs.neu.edu> wrote:
 >
 > *** Description:
 > provide: supposedly specifies the types for identifiers in clauses of the shape [v t]
 > This works for some simple clauses such as [f (-> Integer Integer)] but not for clauses
 > that use the optional domain ->*.
 >
 > *** How to repeat:
 > This raises a type error. Uncommenting the third line eliminates the error.
 >
 > #lang typed/racket
 > (provide: (f (->* () (String) Natural)))
 > ; (: f (->* () (String) Natural))
 > (define (f [s "hello world"])
 >   (string-length s))
 
 Unfortunately, this turns out to be unfixable.
 
 What's happening here is that `provide:` in 6.5 exports the identifier
 with the specified type, but doesn't change how the body of the module
 is type checked. Therefore, the type specified in `provide:` is not
 available for type inference, leading to the type error in the above
 program. I'm not sure what happened for your `(-> Integer Integer)`
 program, but it can't have been using the type from `provide:`.
 
 I tried changing this in a commit a few days ago, to make your example
 work properly.
 
 However, since this wasn't used locally before, it was possible to
 give a _different_ type annotation to the definition in the module.
 and thus trying to make `provide:` use the annotation in the module
 resulted in conflicts. These conflicts broke both actual tests, and
 the gradual-typing-performance benchmark suite, indicating that it
 needed to be reverted, which I've now done.
 
 Sam
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15292: provide: does not work with ->* properly
Date: Tue, 3 May 2016 16:50:17 -0400

 There is an argument to be made for having a different type in provide than inside the module. One could, for example, say (All (x) (-> x x)) inside and (-> Integer Integer) at the boundary. Perhaps we should just document the issue and explain that it provides flexibility and the cost is relatively simple: 
 
 (define-type f-s-type (-> Integer Integer))
 
 (provide: 
   (f f-s-type))
 
 (: f f-s-type)
 (define (f x) x)
 
 
 
 
 
 > On May 3, 2016, at 2:04 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 > 
 > On Wed, Apr 20, 2016 at 11:20 AM,  <matthias@ccs.neu.edu> wrote:
 >> 
 >> *** Description:
 >> provide: supposedly specifies the types for identifiers in clauses of the shape [v t]
 >> This works for some simple clauses such as [f (-> Integer Integer)] but not for clauses
 >> that use the optional domain ->*.
 >> 
 >> *** How to repeat:
 >> This raises a type error. Uncommenting the third line eliminates the error.
 >> 
 >> #lang typed/racket
 >> (provide: (f (->* () (String) Natural)))
 >> ; (: f (->* () (String) Natural))
 >> (define (f [s "hello world"])
 >>  (string-length s))
 > 
 > Unfortunately, this turns out to be unfixable.
 > 
 > What's happening here is that `provide:` in 6.5 exports the identifier
 > with the specified type, but doesn't change how the body of the module
 > is type checked. Therefore, the type specified in `provide:` is not
 > available for type inference, leading to the type error in the above
 > program. I'm not sure what happened for your `(-> Integer Integer)`
 > program, but it can't have been using the type from `provide:`.
 > 
 > I tried changing this in a commit a few days ago, to make your example
 > work properly.
 > 
 > However, since this wasn't used locally before, it was possible to
 > give a _different_ type annotation to the definition in the module.
 > and thus trying to make `provide:` use the annotation in the module
 > resulted in conflicts. These conflicts broke both actual tests, and
 > the gradual-typing-performance benchmark suite, indicating that it
 > needed to be reverted, which I've now done.
 > 
 > Sam
 
 
