From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Aug  4 14:17:46 2015
Received: from mail-ig0-f178.google.com (mail-ig0-f178.google.com [209.85.213.178])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t74IHS8J021816
	for <bugs@bugs.plt-scheme.org>; Tue, 4 Aug 2015 14:17:28 -0400
Message-Id: <201508041817.t74IHPws021809@winooski.ccs.neu.edu>
Date: Tue, 4 Aug 2015 14:17:25 -0400
From: stchang@ccs.neu.edu
To: bugs@racket-lang.org
Subject: can't use syntax-rules with pattern-expander

>Number:         15128
>Category:       all
>Synopsis:       can't use syntax-rules with pattern-expander
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Aug 04 14:20:01 -0400 2015
>Originator:     Stephen Chang
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.2.900.6
>Environment:
unix "Linux caprica 3.2.0-4-amd64 #1 SMP Debian 3.2.54-2 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 477829672
raco pkg (show):
Installation-wide:
 Package                 Checksum           Source
 main-distribution       0bb43032...        catalog...ibution
 main-distribution-test  73f33ac7...        catalog...on-test
 racket-lib                                 static-link...lib
 [224 auto-installed packages not shown]
User-specific for installation "development":
 [none]



Collections:
("/home/stchang/.racket/development/collects"
 (non-existent-path))
("/home/stchang/plt-stchang/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
The pattern-expander example from the docs doesnt appear to work.
>How-To-Repeat:
#lang racket
(require (for-syntax syntax/parse)
         (for-meta 2 racket/base))

(begin-for-syntax
  (define-syntax ~myseq
    (pattern-expander
     (syntax-rules ()
       [(_ x ...)
        (~seq x ...)]))))

(define-syntax (test stx)
  (syntax-parse stx
    [(_ (~myseq x ...))
     #'(void x ...)]))

(test 1 2 3) 

; => ~seq: cannot use identifier tainted by macro transformation in: ~seq

; this alternative is ok:

#lang racket
(require (for-syntax syntax/parse)
         (for-meta 2 syntax/parse racket/base))

(begin-for-syntax
  (define-syntax ~myseq2
    (pattern-expander
     (syntax-parser
       [(_ x ...)
        #:when (displayln "expanding")
        #'(~seq x ...)]))))

(define-syntax (test stx)
  (syntax-parse stx
    [(_ (~myseq2 x ...))
     #'(void x ...)]))

(test 1 2 3) ; => expanding
>Fix:
