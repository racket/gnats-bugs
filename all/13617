From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Mar 17 15:10:30 2013
Received: from mail-oa0-f50.google.com (mail-oa0-f50.google.com [209.85.219.50])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2HJAQOp024854
	for <bugs@bugs.plt-scheme.org>; Sun, 17 Mar 2013 15:10:26 -0400
Message-Id: <201303171910.r2HJAOpR024846@champlain.ccs.neu.edu>
Date: Sun, 17 Mar 2013 15:10:24 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: check-metafunction runs side conditions before prepare

>Number:         13617
>Category:       all
>Synopsis:       check-metafunction runs side conditions before prepare
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Mar 17 15:12:01 -0400 2013
>Closed-Date:    Mon Mar 18 13:54:43 -0400 2013
>Last-Modified:  Mon Mar 18 13:56:01 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
Where clauses and side conditions are run when calling check-metafunction before prepare is called, this means that they can be called with bad input arguments that they should never be called with.
>How-To-Repeat:
#lang racket

(require redex/reduction-semantics)

(define-language TR
  (x y z ::= variable-not-otherwise-mentioned))

(define-metafunction TR
  test : x -> x
  [(test x) x
   (side-condition (error 'broken))])
   

(check-metafunction test
     (lambda (args)
       (displayln 'run))
     #:prepare
     (lambda (args)
       (displayln 'prepare)))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13617: check-metafunction runs side conditions
 before prepare
Date: Sun, 17 Mar 2013 20:43:34 -0500

 --e89a8fb1ef2ef6304904d8291d2e
 Content-Type: text/plain; charset=UTF-8
 
 I believe this is by design. The side-conditions & wheres are evaluated as
 part of the random generation of something that matches the particular case.
 
 But why do you have a side-condition that can signal an error in the first
 place?
 
 Robby
 
 
 On Sun, Mar 17, 2013 at 2:12 PM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13617
 >
 > Reported by Eric Dobson for release: 5.3.2.3
 >
 > *** Description:
 > Where clauses and side conditions are run when calling check-metafunction
 > before prepare is called, this means that they can be called with bad input
 > arguments that they should never be called with.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (require redex/reduction-semantics)
 >
 > (define-language TR
 >   (x y z ::= variable-not-otherwise-mentioned))
 >
 > (define-metafunction TR
 >   test : x -> x
 >   [(test x) x
 >    (side-condition (error 'broken))])
 >
 >
 > (check-metafunction test
 >      (lambda (args)
 >        (displayln 'run))
 >      #:prepare
 >      (lambda (args)
 >        (displayln 'prepare)))
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >
 >
 
 --e89a8fb1ef2ef6304904d8291d2e
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I believe this is by design. The side-conditions &amp; whe=
 res are evaluated as part of the random generation of something that matche=
 s the particular case.<div><br></div><div style>But why do you have a side-=
 condition that can signal an error in the first place?</div>
 <div style><br></div><div style>Robby</div></div><div class=3D"gmail_extra"=
 ><br><br><div class=3D"gmail_quote">On Sun, Mar 17, 2013 at 2:12 PM,  <span=
  dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blan=
 k">eric.n.dobson@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 617" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13617</a><br>
 <br>
 Reported by Eric Dobson for release: 5.3.2.3<br>
 <br>
 *** Description:<br>
 Where clauses and side conditions are run when calling check-metafunction b=
 efore prepare is called, this means that they can be called with bad input =
 arguments that they should never be called with.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (require redex/reduction-semantics)<br>
 <br>
 (define-language TR<br>
 =C2=A0 (x y z ::=3D variable-not-otherwise-mentioned))<br>
 <br>
 (define-metafunction TR<br>
 =C2=A0 test : x -&gt; x<br>
 =C2=A0 [(test x) x<br>
 =C2=A0 =C2=A0(side-condition (error &#39;broken))])<br>
 <br>
 <br>
 (check-metafunction test<br>
 =C2=A0 =C2=A0 =C2=A0(lambda (args)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(displayln &#39;run))<br>
 =C2=A0 =C2=A0 =C2=A0#:prepare<br>
 =C2=A0 =C2=A0 =C2=A0(lambda (args)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(displayln &#39;prepare)))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.2=
 8 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28<br>
 <br>
 </blockquote></div><br></div>
 
 --e89a8fb1ef2ef6304904d8291d2e--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13617: check-metafunction runs side conditions
 before prepare
Date: Sun, 17 Mar 2013 18:55:35 -0700

 So the issue is that I have a metafunction that is not total (over the
 context free grammar), and I want a nice error message if I somehow
 call it wrong.
 
 
 On Sun, Mar 17, 2013 at 6:43 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I believe this is by design. The side-conditions & wheres are evaluated as
 > part of the random generation of something that matches the particular case.
 >
 > But why do you have a side-condition that can signal an error in the first
 > place?
 >
 > Robby
 >
 >
 > On Sun, Mar 17, 2013 at 2:12 PM, <eric.n.dobson@gmail.com> wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13617
 >>
 >> Reported by Eric Dobson for release: 5.3.2.3
 >>
 >> *** Description:
 >> Where clauses and side conditions are run when calling check-metafunction
 >> before prepare is called, this means that they can be called with bad input
 >> arguments that they should never be called with.
 >>
 >> *** How to repeat:
 >> #lang racket
 >>
 >> (require redex/reduction-semantics)
 >>
 >> (define-language TR
 >>   (x y z ::= variable-not-otherwise-mentioned))
 >>
 >> (define-metafunction TR
 >>   test : x -> x
 >>   [(test x) x
 >>    (side-condition (error 'broken))])
 >>
 >>
 >> (check-metafunction test
 >>      (lambda (args)
 >>        (displayln 'run))
 >>      #:prepare
 >>      (lambda (args)
 >>        (displayln 'prepare)))
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >>
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13617: check-metafunction runs side conditions
 before prepare
Date: Sun, 17 Mar 2013 20:57:27 -0500

 --e89a8ff1c2ba998c2904d8294f01
 Content-Type: text/plain; charset=UTF-8
 
 Can you not add a contract to it?
 
 Robby
 
 
 On Sun, Mar 17, 2013 at 8:55 PM, Eric Dobson <eric.n.dobson@gmail.com>wrote:
 
 > So the issue is that I have a metafunction that is not total (over the
 > context free grammar), and I want a nice error message if I somehow
 > call it wrong.
 >
 >
 > On Sun, Mar 17, 2013 at 6:43 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > I believe this is by design. The side-conditions & wheres are evaluated
 > as
 > > part of the random generation of something that matches the particular
 > case.
 > >
 > > But why do you have a side-condition that can signal an error in the
 > first
 > > place?
 > >
 > > Robby
 > >
 > >
 > > On Sun, Mar 17, 2013 at 2:12 PM, <eric.n.dobson@gmail.com> wrote:
 > >>
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13617
 > >>
 > >> Reported by Eric Dobson for release: 5.3.2.3
 > >>
 > >> *** Description:
 > >> Where clauses and side conditions are run when calling
 > check-metafunction
 > >> before prepare is called, this means that they can be called with bad
 > input
 > >> arguments that they should never be called with.
 > >>
 > >> *** How to repeat:
 > >> #lang racket
 > >>
 > >> (require redex/reduction-semantics)
 > >>
 > >> (define-language TR
 > >>   (x y z ::= variable-not-otherwise-mentioned))
 > >>
 > >> (define-metafunction TR
 > >>   test : x -> x
 > >>   [(test x) x
 > >>    (side-condition (error 'broken))])
 > >>
 > >>
 > >> (check-metafunction test
 > >>      (lambda (args)
 > >>        (displayln 'run))
 > >>      #:prepare
 > >>      (lambda (args)
 > >>        (displayln 'prepare)))
 > >>
 > >> *** Environment:
 > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > >>
 > >
 >
 
 --e89a8ff1c2ba998c2904d8294f01
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Can you not add a contract to it?<div><br>Robby</div></div=
 ><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Sun, Mar =
 17, 2013 at 8:55 PM, Eric Dobson <span dir=3D"ltr">&lt;<a href=3D"mailto:er=
 ic.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@gmail.com</a>&gt;</s=
 pan> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">So the issue is that I have a metafunction t=
 hat is not total (over the<br>
 context free grammar), and I want a nice error message if I somehow<br>
 call it wrong.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 <br>
 On Sun, Mar 17, 2013 at 6:43 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt; I believe this is by design. The side-conditions &amp; wheres are eval=
 uated as<br>
 &gt; part of the random generation of something that matches the particular=
  case.<br>
 &gt;<br>
 &gt; But why do you have a side-condition that can signal an error in the f=
 irst<br>
 &gt; place?<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Sun, Mar 17, 2013 at 2:12 PM, &lt;<a href=3D"mailto:eric.n.dobson@g=
 mail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&am=
 p;pr=3D13617" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D13617</a><br>
 &gt;&gt;<br>
 &gt;&gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt;&gt;<br>
 &gt;&gt; *** Description:<br>
 &gt;&gt; Where clauses and side conditions are run when calling check-metaf=
 unction<br>
 &gt;&gt; before prepare is called, this means that they can be called with =
 bad input<br>
 &gt;&gt; arguments that they should never be called with.<br>
 &gt;&gt;<br>
 &gt;&gt; *** How to repeat:<br>
 &gt;&gt; #lang racket<br>
 &gt;&gt;<br>
 &gt;&gt; (require redex/reduction-semantics)<br>
 &gt;&gt;<br>
 &gt;&gt; (define-language TR<br>
 &gt;&gt; =C2=A0 (x y z ::=3D variable-not-otherwise-mentioned))<br>
 &gt;&gt;<br>
 &gt;&gt; (define-metafunction TR<br>
 &gt;&gt; =C2=A0 test : x -&gt; x<br>
 &gt;&gt; =C2=A0 [(test x) x<br>
 &gt;&gt; =C2=A0 =C2=A0(side-condition (error &#39;broken))])<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; (check-metafunction test<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0(lambda (args)<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(displayln &#39;run))<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0#:prepare<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0(lambda (args)<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(displayln &#39;prepare)))<br>
 &gt;&gt;<br>
 &gt;&gt; *** Environment:<br>
 &gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)<br>
 &gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/5=
 37.28<br>
 &gt;&gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --e89a8ff1c2ba998c2904d8294f01--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13617: check-metafunction runs side conditions
 before prepare
Date: Sun, 17 Mar 2013 19:03:02 -0700

 I don't see a way to do a side condition using two different arguments
 in a meta function in the contract, which I can do as a side condition
 of a case.
 
 The function is subst : Type Var Type -> Type, but is invalid if var
 is free as an index variable (instead of as a type variable) in the
 second type.
 
 On Sun, Mar 17, 2013 at 6:57 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Can you not add a contract to it?
 >
 > Robby
 >
 >
 > On Sun, Mar 17, 2013 at 8:55 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 >>
 >> So the issue is that I have a metafunction that is not total (over the
 >> context free grammar), and I want a nice error message if I somehow
 >> call it wrong.
 >>
 >>
 >> On Sun, Mar 17, 2013 at 6:43 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> > I believe this is by design. The side-conditions & wheres are evaluated
 >> > as
 >> > part of the random generation of something that matches the particular
 >> > case.
 >> >
 >> > But why do you have a side-condition that can signal an error in the
 >> > first
 >> > place?
 >> >
 >> > Robby
 >> >
 >> >
 >> > On Sun, Mar 17, 2013 at 2:12 PM, <eric.n.dobson@gmail.com> wrote:
 >> >>
 >> >> A new problem report is waiting at
 >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13617
 >> >>
 >> >> Reported by Eric Dobson for release: 5.3.2.3
 >> >>
 >> >> *** Description:
 >> >> Where clauses and side conditions are run when calling
 >> >> check-metafunction
 >> >> before prepare is called, this means that they can be called with bad
 >> >> input
 >> >> arguments that they should never be called with.
 >> >>
 >> >> *** How to repeat:
 >> >> #lang racket
 >> >>
 >> >> (require redex/reduction-semantics)
 >> >>
 >> >> (define-language TR
 >> >>   (x y z ::= variable-not-otherwise-mentioned))
 >> >>
 >> >> (define-metafunction TR
 >> >>   test : x -> x
 >> >>   [(test x) x
 >> >>    (side-condition (error 'broken))])
 >> >>
 >> >>
 >> >> (check-metafunction test
 >> >>      (lambda (args)
 >> >>        (displayln 'run))
 >> >>      #:prepare
 >> >>      (lambda (args)
 >> >>        (displayln 'prepare)))
 >> >>
 >> >> *** Environment:
 >> >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >> >>
 >> >
 >
 >
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Mon, 18 Mar 2013 13:54:43 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/06696d67b4
State changed from "open" to "closed" by robby@racket-lang.org at Mon, 18 Mar 2013 13:54:43 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/06696d67b4
  | add a #:pre keyword to define-metafunction
  | 
  | The keyword allows the specification of contracts
  | that relate different arguments
  | 
  | closes PR 13617

From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13617: check-metafunction runs side conditions
 before prepare
Date: Mon, 18 Mar 2013 12:52:38 -0500

 --e89a8f923da29d0a8504d836a79b
 Content-Type: text/plain; charset=UTF-8
 
 Okay, I've added that. I'll push shortly and close the PR.
 
 Robby
 
 
 On Sun, Mar 17, 2013 at 9:03 PM, Eric Dobson <eric.n.dobson@gmail.com>wrote:
 
 > I don't see a way to do a side condition using two different arguments
 > in a meta function in the contract, which I can do as a side condition
 > of a case.
 >
 > The function is subst : Type Var Type -> Type, but is invalid if var
 > is free as an index variable (instead of as a type variable) in the
 > second type.
 >
 > On Sun, Mar 17, 2013 at 6:57 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > Can you not add a contract to it?
 > >
 > > Robby
 > >
 > >
 > > On Sun, Mar 17, 2013 at 8:55 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > > wrote:
 > >>
 > >> So the issue is that I have a metafunction that is not total (over the
 > >> context free grammar), and I want a nice error message if I somehow
 > >> call it wrong.
 > >>
 > >>
 > >> On Sun, Mar 17, 2013 at 6:43 PM, Robby Findler
 > >> <robby@eecs.northwestern.edu> wrote:
 > >> > I believe this is by design. The side-conditions & wheres are
 > evaluated
 > >> > as
 > >> > part of the random generation of something that matches the particular
 > >> > case.
 > >> >
 > >> > But why do you have a side-condition that can signal an error in the
 > >> > first
 > >> > place?
 > >> >
 > >> > Robby
 > >> >
 > >> >
 > >> > On Sun, Mar 17, 2013 at 2:12 PM, <eric.n.dobson@gmail.com> wrote:
 > >> >>
 > >> >> A new problem report is waiting at
 > >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13617
 > >> >>
 > >> >> Reported by Eric Dobson for release: 5.3.2.3
 > >> >>
 > >> >> *** Description:
 > >> >> Where clauses and side conditions are run when calling
 > >> >> check-metafunction
 > >> >> before prepare is called, this means that they can be called with bad
 > >> >> input
 > >> >> arguments that they should never be called with.
 > >> >>
 > >> >> *** How to repeat:
 > >> >> #lang racket
 > >> >>
 > >> >> (require redex/reduction-semantics)
 > >> >>
 > >> >> (define-language TR
 > >> >>   (x y z ::= variable-not-otherwise-mentioned))
 > >> >>
 > >> >> (define-metafunction TR
 > >> >>   test : x -> x
 > >> >>   [(test x) x
 > >> >>    (side-condition (error 'broken))])
 > >> >>
 > >> >>
 > >> >> (check-metafunction test
 > >> >>      (lambda (args)
 > >> >>        (displayln 'run))
 > >> >>      #:prepare
 > >> >>      (lambda (args)
 > >> >>        (displayln 'prepare)))
 > >> >>
 > >> >> *** Environment:
 > >> >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 > Safari/537.28
 > >> >>
 > >> >
 > >
 > >
 >
 
 --e89a8f923da29d0a8504d836a79b
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Okay, I&#39;ve added that. I&#39;ll push shortly and close=
  the PR.<div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br=
 ><br><div class=3D"gmail_quote">On Sun, Mar 17, 2013 at 9:03 PM, Eric Dobso=
 n <span dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" target=
 =3D"_blank">eric.n.dobson@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I don&#39;t see a way to do a side condition=
  using two different arguments<br>
 in a meta function in the contract, which I can do as a side condition<br>
 of a case.<br>
 <br>
 The function is subst : Type Var Type -&gt; Type, but is invalid if var<br>
 is free as an index variable (instead of as a type variable) in the<br>
 second type.<br>
 <br>
 On Sun, Mar 17, 2013 at 6:57 PM, Robby Findler<br>
 <div class=3D"HOEnZb"><div class=3D"h5">&lt;<a href=3D"mailto:robby@eecs.no=
 rthwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt; Can you not add a contract to it?<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Sun, Mar 17, 2013 at 8:55 PM, Eric Dobson &lt;<a href=3D"mailto:eri=
 c.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; So the issue is that I have a metafunction that is not total (over=
  the<br>
 &gt;&gt; context free grammar), and I want a nice error message if I someho=
 w<br>
 &gt;&gt; call it wrong.<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; On Sun, Mar 17, 2013 at 6:43 PM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.nort=
 hwestern.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt; I believe this is by design. The side-conditions &amp; wheres=
  are evaluated<br>
 &gt;&gt; &gt; as<br>
 &gt;&gt; &gt; part of the random generation of something that matches the p=
 articular<br>
 &gt;&gt; &gt; case.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; But why do you have a side-condition that can signal an error=
  in the<br>
 &gt;&gt; &gt; first<br>
 &gt;&gt; &gt; place?<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Robby<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Sun, Mar 17, 2013 at 2:12 PM, &lt;<a href=3D"mailto:eric.n=
 .dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D13617" target=3D"_blank">http://bugs.racket-lang.org/query=
 /?cmd=3Dview&amp;pr=3D13617</a><br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Description:<br>
 &gt;&gt; &gt;&gt; Where clauses and side conditions are run when calling<br=
 >
 &gt;&gt; &gt;&gt; check-metafunction<br>
 &gt;&gt; &gt;&gt; before prepare is called, this means that they can be cal=
 led with bad<br>
 &gt;&gt; &gt;&gt; input<br>
 &gt;&gt; &gt;&gt; arguments that they should never be called with.<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** How to repeat:<br>
 &gt;&gt; &gt;&gt; #lang racket<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (require redex/reduction-semantics)<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (define-language TR<br>
 &gt;&gt; &gt;&gt; =C2=A0 (x y z ::=3D variable-not-otherwise-mentioned))<br=
 >
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (define-metafunction TR<br>
 &gt;&gt; &gt;&gt; =C2=A0 test : x -&gt; x<br>
 &gt;&gt; &gt;&gt; =C2=A0 [(test x) x<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0(side-condition (error &#39;broken))])<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (check-metafunction test<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0(lambda (args)<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(displayln &#39;run))<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0#:prepare<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0(lambda (args)<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(displayln &#39;prepare)))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Environment:<br>
 &gt;&gt; &gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)=
 <br>
 &gt;&gt; &gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2=
  Safari/537.28<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --e89a8f923da29d0a8504d836a79b--
