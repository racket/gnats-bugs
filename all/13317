From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Nov 28 12:59:48 2012
Received: from mail-ie0-f172.google.com (mail-ie0-f172.google.com [209.85.223.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id qASHxjZK032414
	for <bugs@bugs.plt-scheme.org>; Wed, 28 Nov 2012 12:59:45 -0500
Message-Id: <201211281759.qASHxbIs032406@champlain.ccs.neu.edu>
Date: Wed, 28 Nov 2012 12:59:37 -0500
From: sbloch@adelphi.edu
To: bugs@racket-lang.org
Subject: interaction of define and check-expect

>Number:         13317
>Category:       all
>Synopsis:       interaction of define and check-expect
>Class:          change-request
>Responsible:    nobody
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Nov 28 13:00:01 -0500 2012
>Originator:     Stephen Bloch
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1
>Environment:
macosx "Darwin o50478-Bloch-iMac-2.local 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 182310224
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/bloch/Library/Racket/5.3.1/collects"
 (non-existent-path))
("/Applications/Racket v5.3.1/collects"
 ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Could we have a "check-define" form that is just like "define", but happens at check-time (after any previous check-expects and before any subsequent check-expects)?  It would never fail unless the right side of the define crashed.
>How-To-Repeat:
(check-expect (set! x (seven)) (void))
(check-define blah (+ x 1))
(check-expect blah 8)
...
(define x 4)
(define (seven) 7)
...
(test) ; unless in student language
>Fix:
