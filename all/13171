From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Oct  8 15:02:24 2012
Received: from mail-ie0-f172.google.com (mail-ie0-f172.google.com [209.85.223.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q98J2KPF017687
	for <bugs@bugs.plt-scheme.org>; Mon, 8 Oct 2012 15:02:20 -0400
Message-Id: <201210081902.q98J2EkD017680@champlain.ccs.neu.edu>
Date: Mon, 8 Oct 2012 15:02:14 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: Type of returned polymorphic struct instance is wrong

>Number:         13171
>Category:       all
>Synopsis:       Type of returned polymorphic struct instance is wrong
>Class:          sw-bug
>Responsible:    asumu
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Oct 08 15:04:01 -0400 2012
>Closed-Date:    Wed Jan 16 13:07:02 -0500 2013
>Last-Modified:  Mon Feb 18 23:09:54 -0500 2013
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1.1--2012-10-08(8aed5298/d)
>Environment:
unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 435201472
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/neil/.racket/5.3.1.1/collects"
 (non-existent-path))
("/home/neil/plt-math/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
In particular, the type parameter is `Any', when it should be `Index'.

The steps to reproduce are derived from `math/array' in my own repository, which no longer compiles after merging upstream.
>How-To-Repeat:
#lang typed/racket

(struct: (A) vec ([proc : (Index -> A)]))
(struct: (A) mutable-vec ([data : (Vectorof A)]))

(: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
(define (vec->mutable-vec vs)
  (mutable-vec (vector)))

(define vs (vec (λ: ([j : Index]) j)))


> vs
- : (vec Index)
#<vec>

> vec->mutable-vec
- : (All (A) ((vec A) -> (mutable-vec A)))
#<procedure:vec->mutable-vec>

> (vec->mutable-vec vs)
- : (mutable-vec Any)
#<mutable-vec>
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct
 instance is wrong
Date: Mon, 8 Oct 2012 17:22:52 -0400

 I don't think this is about structs, but just that inference of type
 parameters is doing the wrong thing.  If you explicitly instantiate
 with `(inst vec->mutable-vec Index)`, it works fine.
 
 On Mon, Oct 8, 2012 at 3:04 PM,  <neil.toronto@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13171
 >
 > Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/d)
 >
 > *** Description:
 > In particular, the type parameter is `Any', when it should be `Index'.
 >
 > The steps to reproduce are derived from `math/array' in my own repository, which no longer compiles after merging upstream.
 >
 > *** How to repeat:
 > #lang typed/racket
 >
 > (struct: (A) vec ([proc : (Index -> A)]))
 > (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >
 > (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 > (define (vec->mutable-vec vs)
 >   (mutable-vec (vector)))
 >
 > (define vs (vec (λ: ([j : Index]) j)))
 >
 >
 >> vs
 > - : (vec Index)
 > #<vec>
 >
 >> vec->mutable-vec
 > - : (All (A) ((vec A) -> (mutable-vec A)))
 > #<procedure:vec->mutable-vec>
 >
 >> (vec->mutable-vec vs)
 > - : (mutable-vec Any)
 > #<mutable-vec>
 >
 > *** Environment:
 > unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 435201472
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/neil/.racket/5.3.1.1/collects"
 >  (non-existent-path))
 > ("/home/neil/plt-math/collects"
 >  ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 >  ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct instance
 is wrong
Date: Mon, 08 Oct 2012 20:37:43 -0600

 It must be inference for just struct type parameters, then. If you 
 change `vec->mutable-vec' to return a (Vectorof A), TR infers the 
 correct input type at the application site.
 
 "It's an inference bug" doesn't mean you won't fix it, right? :)
 
 In the meantime, thanks for the workaround.
 
 Neil ⊥
 
 On 10/08/2012 03:22 PM, Sam Tobin-Hochstadt wrote:
 > I don't think this is about structs, but just that inference of type
 > parameters is doing the wrong thing.  If you explicitly instantiate
 > with `(inst vec->mutable-vec Index)`, it works fine.
 >
 > On Mon, Oct 8, 2012 at 3:04 PM,  <neil.toronto@gmail.com> wrote:
 >> A new problem report is waiting at
 >>    http://bugs.racket-lang.org/query/?cmd=view&pr=13171
 >>
 >> Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/d)
 >>
 >> *** Description:
 >> In particular, the type parameter is `Any', when it should be `Index'.
 >>
 >> The steps to reproduce are derived from `math/array' in my own repository, which no longer compiles after merging upstream.
 >>
 >> *** How to repeat:
 >> #lang typed/racket
 >>
 >> (struct: (A) vec ([proc : (Index -> A)]))
 >> (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >>
 >> (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 >> (define (vec->mutable-vec vs)
 >>    (mutable-vec (vector)))
 >>
 >> (define vs (vec (λ: ([j : Index]) j)))
 >>
 >>
 >>> vs
 >> - : (vec Index)
 >> #<vec>
 >>
 >>> vec->mutable-vec
 >> - : (All (A) ((vec A) -> (mutable-vec A)))
 >> #<procedure:vec->mutable-vec>
 >>
 >>> (vec->mutable-vec vs)
 >> - : (mutable-vec Any)
 >> #<mutable-vec>
 >>
 >> *** Environment:
 >> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 435201472
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/neil/.racket/5.3.1.1/collects"
 >>   (non-existent-path))
 >> ("/home/neil/plt-math/collects"
 >>   ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 >>   ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 >
 >
 >
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, bugs@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct
 instance is wrong
Date: Tue, 9 Oct 2012 07:09:51 -0400

 --20cf300fb18f8adf6304cb9e6016
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 On Oct 8, 2012 10:37 PM, "Neil Toronto" <neil.toronto@gmail.com> wrote:
 >
 > It must be inference for just struct type parameters, then. If you change
 `vec->mutable-vec' to return a (Vectorof A), TR infers the correct input
 type at the application site.
 >
 > "It's an inference bug" doesn't mean you won't fix it, right? :)
 
 No, that's not what I mean.
 
 > In the meantime, thanks for the workaround.
 >
 > Neil =E2=8A=A5
 >
 >
 > On 10/08/2012 03:22 PM, Sam Tobin-Hochstadt wrote:
 >>
 >> I don't think this is about structs, but just that inference of type
 >> parameters is doing the wrong thing.  If you explicitly instantiate
 >> with `(inst vec->mutable-vec Index)`, it works fine.
 >>
 >> On Mon, Oct 8, 2012 at 3:04 PM,  <neil.toronto@gmail.com> wrote:
 >>>
 >>> A new problem report is waiting at
 >>>    http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13171
 >>>
 >>> Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/d)
 >>>
 >>> *** Description:
 >>> In particular, the type parameter is `Any', when it should be `Index'.
 >>>
 >>> The steps to reproduce are derived from `math/array' in my own
 repository, which no longer compiles after merging upstream.
 >>>
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>>
 >>> (struct: (A) vec ([proc : (Index -> A)]))
 >>> (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >>>
 >>> (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 >>> (define (vec->mutable-vec vs)
 >>>    (mutable-vec (vector)))
 >>>
 >>> (define vs (vec (=CE=BB: ([j : Index]) j)))
 >>>
 >>>
 >>>> vs
 >>>
 >>> - : (vec Index)
 >>> #<vec>
 >>>
 >>>> vec->mutable-vec
 >>>
 >>> - : (All (A) ((vec A) -> (mutable-vec A)))
 >>> #<procedure:vec->mutable-vec>
 >>>
 >>>> (vec->mutable-vec vs)
 >>>
 >>> - : (mutable-vec Any)
 >>> #<mutable-vec>
 >>>
 >>> *** Environment:
 >>> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14
 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 (get-display-depth) =3D 32
 >>> Human Language: english
 >>> (current-memory-use) 435201472
 >>> Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =
 =3D ();
 (links #:user? #f #:root? #t) =3D ()
 >>>
 >>>
 >>> Collections:
 >>> ("/home/neil/.racket/5.3.1.1/collects"
 >>>   (non-existent-path))
 >>> ("/home/neil/plt-math/collects"
 >>>   ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser"
 "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace"
 "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page"
 "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client"
 "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html"
 "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme"
 "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble"
 "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help"
 "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor"
 "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex"
 "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs"
 "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher"
 "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images"
 "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco"
 "gui-d!
 >>>   ebugger" "framework" "web-server" "deinprogramm" "slideshow"
 "macro-debugger" "typed-racket" "net" "mred"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 (test))))
 >>>
 >>
 >>
 >>
 >
 
 --20cf300fb18f8adf6304cb9e6016
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr"><br>
 On Oct 8, 2012 10:37 PM, &quot;Neil Toronto&quot; &lt;<a href=3D"mailto:nei=
 l.toronto@gmail.com">neil.toronto@gmail.com</a>&gt; wrote:<br>
 &gt;<br>
 &gt; It must be inference for just struct type parameters, then. If you cha=
 nge `vec-&gt;mutable-vec&#39; to return a (Vectorof A), TR infers the corre=
 ct input type at the application site.<br>
 &gt;<br>
 &gt; &quot;It&#39;s an inference bug&quot; doesn&#39;t mean you won&#39;t f=
 ix it, right? :)</p>
 <p dir=3D"ltr">No, that&#39;s not what I mean.</p>
 <p dir=3D"ltr">&gt; In the meantime, thanks for the workaround.<br>
 &gt;<br>
 &gt; Neil =E2=8A=A5<br>
 &gt;<br>
 &gt;<br>
 &gt; On 10/08/2012 03:22 PM, Sam Tobin-Hochstadt wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; I don&#39;t think this is about structs, but just that inference o=
 f type<br>
 &gt;&gt; parameters is doing the wrong thing. =C2=A0If you explicitly insta=
 ntiate<br>
 &gt;&gt; with `(inst vec-&gt;mutable-vec Index)`, it works fine.<br>
 &gt;&gt;<br>
 &gt;&gt; On Mon, Oct 8, 2012 at 3:04 PM, =C2=A0&lt;<a href=3D"mailto:neil.t=
 oronto@gmail.com">neil.toronto@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; A new problem report is waiting at<br>
 &gt;&gt;&gt; =C2=A0 =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D13171">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;p=
 r=3D13171</a><br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed=
 5298/d)<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; *** Description:<br>
 &gt;&gt;&gt; In particular, the type parameter is `Any&#39;, when it should=
  be `Index&#39;.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; The steps to reproduce are derived from `math/array&#39; in my=
  own repository, which no longer compiles after merging upstream.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; *** How to repeat:<br>
 &gt;&gt;&gt; #lang typed/racket<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; (struct: (A) vec ([proc : (Index -&gt; A)]))<br>
 &gt;&gt;&gt; (struct: (A) mutable-vec ([data : (Vectorof A)]))<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; (: vec-&gt;mutable-vec (All (A) ((vec A) -&gt; (mutable-vec A)=
 )))<br>
 &gt;&gt;&gt; (define (vec-&gt;mutable-vec vs)<br>
 &gt;&gt;&gt; =C2=A0 =C2=A0(mutable-vec (vector)))<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; (define vs (vec (=CE=BB: ([j : Index]) j)))<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; vs<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; - : (vec Index)<br>
 &gt;&gt;&gt; #&lt;vec&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; vec-&gt;mutable-vec<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; - : (All (A) ((vec A) -&gt; (mutable-vec A)))<br>
 &gt;&gt;&gt; #&lt;procedure:vec-&gt;mutable-vec&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; (vec-&gt;mutable-vec vs)<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; - : (mutable-vec Any)<br>
 &gt;&gt;&gt; #&lt;mutable-vec&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; *** Environment:<br>
 &gt;&gt;&gt; unix &quot;Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue=
  Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-linu=
 x/3m) (get-display-depth) =3D 32<br>
 &gt;&gt;&gt; Human Language: english<br>
 &gt;&gt;&gt; (current-memory-use) 435201472<br>
 &gt;&gt;&gt; Links: (links) =3D (); (links #:user? #f) =3D (); (links #:roo=
 t? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Collections:<br>
 &gt;&gt;&gt; (&quot;/home/neil/.racket/<a href=3D"http://5.3.1.1/collects">=
 5.3.1.1/collects</a>&quot;<br>
 &gt;&gt;&gt; =C2=A0 (non-existent-path))<br>
 &gt;&gt;&gt; (&quot;/home/neil/plt-math/collects&quot;<br>
 &gt;&gt;&gt; =C2=A0 (&quot;wxme&quot; &quot;texpict&quot; &quot;compiler&qu=
 ot; &quot;typed&quot; &quot;games&quot; &quot;algol60&quot; &quot;browser&q=
 uot; &quot;file&quot; &quot;readline&quot; &quot;dynext&quot; &quot;scribbl=
 ings&quot; &quot;mzcom&quot; &quot;compatibility&quot; &quot;trace&quot; &q=
 uot;profile&quot; &quot;data&quot; &quot;sirmail&quot; &quot;json&quot; &qu=
 ot;parser-tools&quot; &quot;math&quot; &quot;tex2page&quot; &quot;scriblib&=
 quot; &quot;swindle&quot; &quot;schemeunit&quot; &quot;r6rs&quot; &quot;xre=
 pl&quot; &quot;mzlib&quot; &quot;handin-client&quot; &quot;repo-time-stamp&=
 quot; &quot;mysterx&quot; &quot;mrlib&quot; &quot;scheme&quot; &quot;combin=
 ator-parser&quot; &quot;html&quot; &quot;test-engine&quot; &quot;version&qu=
 ot; &quot;.gitignore&quot; &quot;make&quot; &quot;ffi&quot; &quot;mzscheme&=
 quot; &quot;picturing-programs&quot; &quot;hierlist&quot; &quot;teachpack&q=
 uot; &quot;at-exp&quot; &quot;lazy&quot; &quot;scribble&quot; &quot;openssl=
 &quot; &quot;defaults&quot; &quot;racket&quot; &quot;handin-server&quot; &q=
 uot;2htdp&quot; &quot;drscheme&quot; &quot;help&quot; &quot;eopl&quot; &quo=
 t;racklog&quot; &quot;drracket&quot; &quot;icons&quot; &quot;db&quot; &quot=
 ;errortrace&quot; &quot;preprocessor&quot; &quot;rackunit&quot; &quot;rnrs&=
 quot; &quot;string-constants&quot; &quot;meta&quot; &quot;slatex&quot; &quo=
 t;graphics&quot; &quot;redex&quot; &quot;reader&quot; &quot;plai&quot; &quo=
 t;honu&quot; &quot;config&quot; &quot;stepper&quot; &quot;frtime&quot; &quo=
 t;unstable&quot; &quot;r5rs&quot; &quot;planet&quot; &quot;tests&quot; &quo=
 t;s-exp&quot; &quot;embedded-gui&quot; &quot;info-domain&quot; &quot;syntax=
 &quot; &quot;launcher&quot; &quot;typed-scheme&quot; &quot;syntax-color&quo=
 t; &quot;srfi&quot; &quot;test-box-recovery&quot; &quot;xml&quot; &quot;ima=
 ges&quot; &quot;future-visualizer&quot; &quot;plot&quot; &quot;datalog&quot=
 ; &quot;sgl&quot; &quot;htdp&quot; &quot;setup&quot; &quot;lang&quot; &quot=
 ;raco&quot; &quot;gui-d!<br>
 
 &gt;&gt;&gt; =C2=A0 ebugger&quot; &quot;framework&quot; &quot;web-server&qu=
 ot; &quot;deinprogramm&quot; &quot;slideshow&quot; &quot;macro-debugger&quo=
 t; &quot;typed-racket&quot; &quot;net&quot; &quot;mred&quot;))<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Computer Language: ((&quot;Determine language from source&quot=
 ;) (#(#t print mixed-fraction-e #f #t debug) (default) #() &quot;#lang rack=
 et\n&quot; #t #t ((main) (test))))<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;<br>
 </p>
 
 --20cf300fb18f8adf6304cb9e6016--
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct instance
 is wrong
Date: Tue, 09 Oct 2012 13:51:40 -0600

 It seems I can't use the workaround. The function in question has the type
 
    (case-> ((Array Real)   (Array Real)   -> (Array Real))
            ((Array Number) (Array Number) -> (Array Number)))
 
 I could do it if I had a type variable restricted to `Real' or `Number'. 
 I've tried using `plambda:' to get one, but it doesn't seem to work.
 
 On 10/08/2012 03:22 PM, Sam Tobin-Hochstadt wrote:
 > I don't think this is about structs, but just that inference of type
 > parameters is doing the wrong thing.  If you explicitly instantiate
 > with `(inst vec->mutable-vec Index)`, it works fine.
 >
 > On Mon, Oct 8, 2012 at 3:04 PM,  <neil.toronto@gmail.com> wrote:
 >> A new problem report is waiting at
 >>    http://bugs.racket-lang.org/query/?cmd=view&pr=13171
 >>
 >> Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/d)
 >>
 >> *** Description:
 >> In particular, the type parameter is `Any', when it should be `Index'.
 >>
 >> The steps to reproduce are derived from `math/array' in my own repository, which no longer compiles after merging upstream.
 >>
 >> *** How to repeat:
 >> #lang typed/racket
 >>
 >> (struct: (A) vec ([proc : (Index -> A)]))
 >> (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >>
 >> (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 >> (define (vec->mutable-vec vs)
 >>    (mutable-vec (vector)))
 >>
 >> (define vs (vec (λ: ([j : Index]) j)))
 >>
 >>
 >>> vs
 >> - : (vec Index)
 >> #<vec>
 >>
 >>> vec->mutable-vec
 >> - : (All (A) ((vec A) -> (mutable-vec A)))
 >> #<procedure:vec->mutable-vec>
 >>
 >>> (vec->mutable-vec vs)
 >> - : (mutable-vec Any)
 >> #<mutable-vec>
 >>
 >> *** Environment:
 >> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 435201472
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/neil/.racket/5.3.1.1/collects"
 >>   (non-existent-path))
 >> ("/home/neil/plt-math/collects"
 >>   ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 >>   ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 >
 >
 >
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct
 instance is wrong
Date: Tue, 9 Oct 2012 15:55:31 -0400

 I'm quite confused.  How does a function with that type fit into the
 example you gave initially?
 
 On Tue, Oct 9, 2012 at 3:51 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > It seems I can't use the workaround. The function in question has the type
 >
 >   (case-> ((Array Real)   (Array Real)   -> (Array Real))
 >           ((Array Number) (Array Number) -> (Array Number)))
 >
 > I could do it if I had a type variable restricted to `Real' or `Number'.
 > I've tried using `plambda:' to get one, but it doesn't seem to work.
 >
 >
 > On 10/08/2012 03:22 PM, Sam Tobin-Hochstadt wrote:
 >>
 >> I don't think this is about structs, but just that inference of type
 >> parameters is doing the wrong thing.  If you explicitly instantiate
 >> with `(inst vec->mutable-vec Index)`, it works fine.
 >>
 >> On Mon, Oct 8, 2012 at 3:04 PM,  <neil.toronto@gmail.com> wrote:
 >>>
 >>> A new problem report is waiting at
 >>>    http://bugs.racket-lang.org/query/?cmd=view&pr=13171
 >>>
 >>> Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/d)
 >>>
 >>> *** Description:
 >>> In particular, the type parameter is `Any', when it should be `Index'.
 >>>
 >>> The steps to reproduce are derived from `math/array' in my own
 >>> repository, which no longer compiles after merging upstream.
 >>>
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>>
 >>> (struct: (A) vec ([proc : (Index -> A)]))
 >>> (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >>>
 >>> (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 >>> (define (vec->mutable-vec vs)
 >>>    (mutable-vec (vector)))
 >>>
 >>> (define vs (vec (λ: ([j : Index]) j)))
 >>>
 >>>
 >>>> vs
 >>>
 >>> - : (vec Index)
 >>> #<vec>
 >>>
 >>>> vec->mutable-vec
 >>>
 >>> - : (All (A) ((vec A) -> (mutable-vec A)))
 >>> #<procedure:vec->mutable-vec>
 >>>
 >>>> (vec->mutable-vec vs)
 >>>
 >>> - : (mutable-vec Any)
 >>> #<mutable-vec>
 >>>
 >>> *** Environment:
 >>> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44
 >>> UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>> (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 435201472
 >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >>> (links #:user? #f #:root? #t) = ()
 >>>
 >>>
 >>> Collections:
 >>> ("/home/neil/.racket/5.3.1.1/collects"
 >>>   (non-existent-path))
 >>> ("/home/neil/plt-math/collects"
 >>>   ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file"
 >>> "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile"
 >>> "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib"
 >>> "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client"
 >>> "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html"
 >>> "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme"
 >>> "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble"
 >>> "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help"
 >>> "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor"
 >>> "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex"
 >>> "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs"
 >>> "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher"
 >>> "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images"
 >>> "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco"
 >>> "gui-d!
 >>>   ebugger" "framework" "web-server" "deinprogramm" "slideshow"
 >>> "macro-debugger" "typed-racket" "net" "mred"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print
 >>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >>> (test))))
 >>>
 >>
 >>
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct instance
 is wrong
Date: Tue, 09 Oct 2012 22:56:28 -0600

 It looks like this:
 
 (: matrix*
     (case-> ((Array Real)   (Array Real)   -> (Array Real))
             ((Array Number) (Array Number) -> (Array Number))))
 (define (matrix* arr brr)
    ....
    ;; Get strict versions of both because each element in both is
    ;; evaluated multiple times
    (let ([arr  (array->mutable-array arr)]
          [brr  (array->mutable-array brr)])
      ....))
 
 
 There's no way to instantiate the type of `array->mutable-array'. Using 
 `Real' causes the typechecking pass for (Array Number) to fail, and 
 vice-versa (though in different places); and I don't have a type 
 variable to use.
 
 More generally, writing single-arity `case->' types makes annotating 
 expressions really hard. It's often impossible.
 
 Neil ⊥
 
 On 10/09/2012 01:55 PM, Sam Tobin-Hochstadt wrote:
 > I'm quite confused.  How does a function with that type fit into the
 > example you gave initially?
 >
 > On Tue, Oct 9, 2012 at 3:51 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 >> It seems I can't use the workaround. The function in question has the type
 >>
 >>    (case-> ((Array Real)   (Array Real)   -> (Array Real))
 >>            ((Array Number) (Array Number) -> (Array Number)))
 >>
 >> I could do it if I had a type variable restricted to `Real' or `Number'.
 >> I've tried using `plambda:' to get one, but it doesn't seem to work.
 >>
 >>
 >> On 10/08/2012 03:22 PM, Sam Tobin-Hochstadt wrote:
 >>>
 >>> I don't think this is about structs, but just that inference of type
 >>> parameters is doing the wrong thing.  If you explicitly instantiate
 >>> with `(inst vec->mutable-vec Index)`, it works fine.
 >>>
 >>> On Mon, Oct 8, 2012 at 3:04 PM,  <neil.toronto@gmail.com> wrote:
 >>>>
 >>>> A new problem report is waiting at
 >>>>     http://bugs.racket-lang.org/query/?cmd=view&pr=13171
 >>>>
 >>>> Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/d)
 >>>>
 >>>> *** Description:
 >>>> In particular, the type parameter is `Any', when it should be `Index'.
 >>>>
 >>>> The steps to reproduce are derived from `math/array' in my own
 >>>> repository, which no longer compiles after merging upstream.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang typed/racket
 >>>>
 >>>> (struct: (A) vec ([proc : (Index -> A)]))
 >>>> (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >>>>
 >>>> (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 >>>> (define (vec->mutable-vec vs)
 >>>>     (mutable-vec (vector)))
 >>>>
 >>>> (define vs (vec (λ: ([j : Index]) j)))
 >>>>
 >>>>
 >>>>> vs
 >>>>
 >>>> - : (vec Index)
 >>>> #<vec>
 >>>>
 >>>>> vec->mutable-vec
 >>>>
 >>>> - : (All (A) ((vec A) -> (mutable-vec A)))
 >>>> #<procedure:vec->mutable-vec>
 >>>>
 >>>>> (vec->mutable-vec vs)
 >>>>
 >>>> - : (mutable-vec Any)
 >>>> #<mutable-vec>
 >>>>
 >>>> *** Environment:
 >>>> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44
 >>>> UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>>> (get-display-depth) = 32
 >>>> Human Language: english
 >>>> (current-memory-use) 435201472
 >>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >>>> (links #:user? #f #:root? #t) = ()
 >>>>
 >>>>
 >>>> Collections:
 >>>> ("/home/neil/.racket/5.3.1.1/collects"
 >>>>    (non-existent-path))
 >>>> ("/home/neil/plt-math/collects"
 >>>>    ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file"
 >>>> "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile"
 >>>> "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib"
 >>>> "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client"
 >>>> "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html"
 >>>> "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme"
 >>>> "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble"
 >>>> "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help"
 >>>> "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor"
 >>>> "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex"
 >>>> "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs"
 >>>> "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher"
 >>>> "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images"
 >>>> "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco"
 >>>> "gui-d!
 >>>>    ebugger" "framework" "web-server" "deinprogramm" "slideshow"
 >>>> "macro-debugger" "typed-racket" "net" "mred"))
 >>>>
 >>>> Computer Language: (("Determine language from source") (#(#t print
 >>>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >>>> (test))))
 >>>>
 >>>
 >>>
 >>>
 >>
 >
 >
 >
 
From: Neil Toronto <neil.toronto@gmail.com>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct instance
 is wrong
Date: Fri, 16 Nov 2012 11:33:49 -0700

 On 10/08/2012 01:04 PM, neil.toronto@gmail.com wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=13171
 >
 > Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/d)
 >
 > *** Description:
 > In particular, the type parameter is `Any', when it should be `Index'.
 >
 > The steps to reproduce are derived from `math/array' in my own repository, which no longer compiles after merging upstream.
 >
 > *** How to repeat:
 > #lang typed/racket
 >
 > (struct: (A) vec ([proc : (Index -> A)]))
 > (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >
 > (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 > (define (vec->mutable-vec vs)
 >    (mutable-vec (vector)))
 >
 > (define vs (vec (Î»: ([j : Index]) j)))
 >
 >
 >> vs
 > - : (vec Index)
 > #<vec>
 >
 >> vec->mutable-vec
 > - : (All (A) ((vec A) -> (mutable-vec A)))
 > #<procedure:vec->mutable-vec>
 >
 >> (vec->mutable-vec vs)
 > - : (mutable-vec Any)
 > #<mutable-vec>
 
 This has been fixed at some point. Now (vec->mutable-vec vs) has the 
 right type and `math/matrix' compiles. Sam or Vincent, do you know which 
 commit might be responsible?
 
 Neil ⊥
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bug-notification@racket-lang.org, nobody@racket-lang.org,
        bugs@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct
 instance is wrong
Date: Fri, 16 Nov 2012 15:49:00 -0500

 --001636c5b3e9ba524104cea2e5a4
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Almost certainly, this was fixed by Eric's change to variance calculation.
 
 Sam
 On Nov 16, 2012 1:34 PM, "Neil Toronto" <neil.toronto@gmail.com> wrote:
 
 > On 10/08/2012 01:04 PM, neil.toronto@gmail.com wrote:
 >
 >> A new problem report is waiting at
 >>    http://bugs.racket-lang.org/**query/?cmd=3Dview&pr=3D13171<http://bug=
 s.racket-lang.org/query/?cmd=3Dview&pr=3D13171>
 >>
 >> Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/**d)
 >>
 >> *** Description:
 >> In particular, the type parameter is `pr=3D13171Any', when it should be `Index'.
 >>
 >> The steps to reproduce are derived from `math/array' in my own
 >> repository, which no longer compiles after merging upstream.
 >>
 >> *** How to repeat:
 >> #lang typed/racket
 >>
 >> (struct: (A) vec ([proc : (Index -> A)]))
 >> (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >>
 >> (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 >> (define (vec->mutable-vec vs)
 >>    (mutable-vec (vector)))
 >>
 >> (define vs (vec (=C3=8E=C2=BB: ([j : Index]) j)))
 >>
 >>
 >>  vs
 >>>
 >> - : (vec Index)
 >> #<vec>
 >>
 >>  vec->mutable-vec
 >>>
 >> - : (All (A) ((vec A) -> (mutable-vec A)))
 >> #<procedure:vec->mutable-vec>
 >>
 >>  (vec->mutable-vec vs)
 >>>
 >> - : (mutable-vec Any)
 >> #<mutable-vec>
 >>
 >
 > This has been fixed at some point. Now (vec->mutable-vec vs) has the righ=
 t
 > type and `math/matrix' compiles. Sam or Vincent, do you know which commit
 > might be responsible?
 >
 > Neil =E2=8A=A5
 >
 >
 
 --001636c5b3e9ba524104cea2e5a4
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p>Almost certainly, this was fixed by Eric&#39;s change to variance calcul=
 ation.</p>
 <p>Sam</p>
 <div class=3D"gmail_quote">On Nov 16, 2012 1:34 PM, &quot;Neil Toronto&quot=
 ; &lt;<a href=3D"mailto:neil.toronto@gmail.com">neil.toronto@gmail.com</a>&=
 gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_quote" style=
 =3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 On 10/08/2012 01:04 PM, <a href=3D"mailto:neil.toronto@gmail.com" target=3D=
 "_blank">neil.toronto@gmail.com</a> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 A new problem report is waiting at<br>
 =C2=A0 =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;p=
 r=3D13171" target=3D"_blank">http://bugs.racket-lang.org/<u></u>query/?cmd=
 =3Dview&amp;pr=3D13171</a><br>
 <br>
 Reported by Neil Toronto for release: 5.3.1.1--2012-10-08(8aed5298/<u></u>d=
 )<br>
 <br>
 *** Description:<br>
 In particular, the type parameter is `Any&#39;, when it should be `Index&#3=
 9;.<br>
 <br>
 The steps to reproduce are derived from `math/array&#39; in my own reposito=
 ry, which no longer compiles after merging upstream.<br>
 <br>
 *** How to repeat:<br>
 #lang typed/racket<br>
 <br>
 (struct: (A) vec ([proc : (Index -&gt; A)]))<br>
 (struct: (A) mutable-vec ([data : (Vectorof A)]))<br>
 <br>
 (: vec-&gt;mutable-vec (All (A) ((vec A) -&gt; (mutable-vec A))))<br>
 (define (vec-&gt;mutable-vec vs)<br>
 =C2=A0 =C2=A0(mutable-vec (vector)))<br>
 <br>
 (define vs (vec (=C3=8E=C2=BB: ([j : Index]) j)))<br>
 <br>
 <br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 vs<br>
 </blockquote>
 - : (vec Index)<br>
 #&lt;vec&gt;<br>
 <br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 vec-&gt;mutable-vec<br>
 </blockquote>
 - : (All (A) ((vec A) -&gt; (mutable-vec A)))<br>
 #&lt;procedure:vec-&gt;mutable-vec&gt;<br>
 <br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 (vec-&gt;mutable-vec vs)<br>
 </blockquote>
 - : (mutable-vec Any)<br>
 #&lt;mutable-vec&gt;<br>
 </blockquote>
 <br>
 This has been fixed at some point. Now (vec-&gt;mutable-vec vs) has the rig=
 ht type and `math/matrix&#39; compiles. Sam or Vincent, do you know which c=
 ommit might be responsible?<br>
 <br>
 Neil =E2=8A=A5<br>
 <br>
 </blockquote></div>
 
 --001636c5b3e9ba524104cea2e5a4--
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bug-notification@racket-lang.org, nobody@racket-lang.org,
        bugs@racket-lang.org
Subject: Re: [racket-bug] all/13171: Type of returned polymorphic struct instance
 is wrong
Date: Fri, 16 Nov 2012 15:14:00 -0700

 Excellent. We can close this.
 
 Neil ⊥
 
 On 11/16/2012 01:49 PM, Sam Tobin-Hochstadt wrote:
 > Almost certainly, this was fixed by Eric's change to variance calculation.
 >
 > Sam
 >
 > On Nov 16, 2012 1:34 PM, "Neil Toronto" <neil.toronto@gmail.com
 > <mailto:neil.toronto@gmail.com>> wrote:
 >
 >     On 10/08/2012 01:04 PM, neil.toronto@gmail.com
 >     <mailto:neil.toronto@gmail.com> wrote:
 >
 >         A new problem report is waiting at
 >         http://bugs.racket-lang.org/__query/?cmd=view&pr=13171
 >         <http://bugs.racket-lang.org/query/?cmd=view&pr=13171>
 >
 >         Reported by Neil Toronto for release:
 >         5.3.1.1--2012-10-08(8aed5298/__d)
 >
 >         *** Description:
 >         In particular, the type parameter is `Any', when it should be
 >         `Index'.
 >
 >         The steps to reproduce are derived from `math/array' in my own
 >         repository, which no longer compiles after merging upstream.
 >
 >         *** How to repeat:
 >         #lang typed/racket
 >
 >         (struct: (A) vec ([proc : (Index -> A)]))
 >         (struct: (A) mutable-vec ([data : (Vectorof A)]))
 >
 >         (: vec->mutable-vec (All (A) ((vec A) -> (mutable-vec A))))
 >         (define (vec->mutable-vec vs)
 >             (mutable-vec (vector)))
 >
 >         (define vs (vec (Î»: ([j : Index]) j)))
 >
 >
 >             vs
 >
 >         - : (vec Index)
 >         #<vec>
 >
 >             vec->mutable-vec
 >
 >         - : (All (A) ((vec A) -> (mutable-vec A)))
 >         #<procedure:vec->mutable-vec>
 >
 >             (vec->mutable-vec vs)
 >
 >         - : (mutable-vec Any)
 >         #<mutable-vec>
 >
 >
 >     This has been fixed at some point. Now (vec->mutable-vec vs) has the
 >     right type and `math/matrix' compiles. Sam or Vincent, do you know
 >     which commit might be responsible?
 >
 >     Neil ⊥
 >
 

State changed from "open" to "closed" by asumu at Wed, 16 Jan 2013 13:07:02 -0500
Reason>>> Already fixed (see audit trail)


Responsible changed from "nobody" to "asumu" by eli at Mon, 18 Feb 2013 23:09:54 -0500
Reason>>> asumu closed

