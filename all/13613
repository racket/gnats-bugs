From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Mar 16 23:09:10 2013
Received: from mail-ob0-f182.google.com (mail-ob0-f182.google.com [209.85.214.182])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2H397E7015818
	for <bugs@bugs.plt-scheme.org>; Sat, 16 Mar 2013 23:09:07 -0400
Message-Id: <201303170309.r2H395DH015812@champlain.ccs.neu.edu>
Date: Sat, 16 Mar 2013 23:09:05 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: define-metafunction does not document variable args

>Number:         13613
>Category:       all
>Synopsis:       define-metafunction does not document variable args
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Mar 16 23:12:01 -0400 2013
>Closed-Date:    Sun Mar 17 10:47:54 -0400 2013
>Last-Modified:  Sun Mar 17 10:52:01 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
define-metafunction does not document that it can support variable arity functions (just that it supports arbitrary arity), yet this feature is used in the examples.
>How-To-Repeat:

metafunction-contract	 	=	 	
 	 	|	 	id : pattern ... -> range

and 

Examples:
> (define-language empty-lang)
> (random-seed 0)
> (define-metafunction empty-lang
    Σ : number ... -> number
    [(Σ) 0]
    [(Σ number) number]
    [(Σ number_1 number_2 number_3 ...)
     (Σ ,(+ (term number_1) (term number_2)) number_3 ...)])
> (check-metafunction Σ (λ (args) (printf "~s\n" args)) #:attempts 2)
()
()
(0)
(0)
(2 1)
(0 1)
check-metafunction: no counterexamples in 2 attempts (with each clause)
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Sun, 17 Mar 2013 10:47:54 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/4bfd6ff6e3
State changed from "open" to "closed" by robby@racket-lang.org at Sun, 17 Mar 2013 10:47:54 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/4bfd6ff6e3
  | document define-metafunction's contract patterns properly
  | 
  | closes PR 13613

From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13613: define-metafunction does not document
 variable args
Date: Sun, 17 Mar 2013 09:48:32 -0500

 --14dae93b59b65bf26604d81ff768
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 FWIW, just in case it wasn't clear, you can do more than just variable
 arity. You can do anything you could do with a redex sequence.
 
 Robby
 
 
 On Sat, Mar 16, 2013 at 10:12 PM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13613
 >
 > Reported by Eric Dobson for release: 5.3.2.3
 >
 > *** Description:
 > define-metafunction does not document that it can support variable arity
 > functions (just that it supports arbitrary arity), yet this feature is us=
 ed
 > in the examples.
 >
 > *** How to repeat:
 >
 > metafunction-contract           =3D
 >                 |               id : pattern ... -> range
 >
 > and
 >
 > Examples:
 > > (define-language empty-lang)
 > > (random-seed 0)
 > > (define-metafunction empty-lang
 >     =CE=A3 : number ... -> number
 >     [(=CE=A3) 0]
 >     [(=CE=A3 number) number]
 >     [(=CE=A3 number_1 number_2 number_3 ...)
 >      (=CE=A3 ,(+ (term number_1) (term number_2)) number_3 ...)])
 > > (check-metafunction =CE=A3 (=CE=BB (args) (printf "~s\n" args)) #:attem=
 pts 2)
 > ()
 > ()
 > (0)
 > (0)
 > (2 1)
 > (0 1)
 > check-metafunction: no counterexamples in 2 attempts (with each clause)
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >
 >
 
 --14dae93b59b65bf26604d81ff768
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">FWIW, just in case it wasn&#39;t clear, you can do more th=
 an just variable arity. You can do anything you could do with a redex seque=
 nce.<div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br><br=
 >
 <div class=3D"gmail_quote">On Sat, Mar 16, 2013 at 10:12 PM,  <span dir=3D"=
 ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.=
 n.dobson@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quot=
 e" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 613" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13613</a><br>
 <br>
 Reported by Eric Dobson for release: 5.3.2.3<br>
 <br>
 *** Description:<br>
 define-metafunction does not document that it can support variable arity fu=
 nctions (just that it supports arbitrary arity), yet this feature is used i=
 n the examples.<br>
 <br>
 *** How to repeat:<br>
 <br>
 metafunction-contract =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =3D<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 | =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 id : pattern ... -&gt; range<br>
 <br>
 and<br>
 <br>
 Examples:<br>
 &gt; (define-language empty-lang)<br>
 &gt; (random-seed 0)<br>
 &gt; (define-metafunction empty-lang<br>
 =C2=A0 =C2=A0 =CE=A3 : number ... -&gt; number<br>
 =C2=A0 =C2=A0 [(=CE=A3) 0]<br>
 =C2=A0 =C2=A0 [(=CE=A3 number) number]<br>
 =C2=A0 =C2=A0 [(=CE=A3 number_1 number_2 number_3 ...)<br>
 =C2=A0 =C2=A0 =C2=A0(=CE=A3 ,(+ (term number_1) (term number_2)) number_3 .=
 ..)])<br>
 &gt; (check-metafunction =CE=A3 (=CE=BB (args) (printf &quot;~s\n&quot; arg=
 s)) #:attempts 2)<br>
 ()<br>
 ()<br>
 (0)<br>
 (0)<br>
 (2 1)<br>
 (0 1)<br>
 check-metafunction: no counterexamples in 2 attempts (with each clause)<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.2=
 8 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28<br>
 <br>
 </blockquote></div><br></div>
 
 --14dae93b59b65bf26604d81ff768--
