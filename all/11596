From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jan  6 10:24:45 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id p06FOg9L032389
	for <bugs@bugs.plt-scheme.org>; Thu, 6 Jan 2011 10:24:42 -0500
Message-Id: <201101061524.p06FOYH4032380@champlain.ccs.neu.edu>
Date: Thu, 6 Jan 2011 10:24:34 -0500
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: internal error in contracted program

>Number:         11596
>Category:       all
>Synopsis:       internal error in contracted program
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jan 06 10:28:01 -0500 2011
>Closed-Date:    Fri Jan 07 06:19:31 -0500 2011
>Last-Modified:  Fri Jan 07 06:19:31 -0500 2011
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.99.6--2011-01-05(3b51c1c/g)
>Environment:
macosx "Darwin antarctica.ccs.neu.edu 10.5.0 Darwin Kernel Version 10.5.0: Fri Nov  5 23:20:39 PDT 2010; root:xnu-1504.9.17~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 287000232

Collections:
("/Users/matthias/0Unison/collects/"
 (".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/5.0.99.6/collects"
 (non-existent-path))
("/Users/matthias/plt/collects"
 (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tes!
 ts" "tex2page" "texpict" "tool" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
You can get this from a plain old racket.load program: 

syntax-local-lift-module-end-declaration: not currently transforming a run-time expression in a module declaration
>How-To-Repeat:
run this 

#lang racket/load 

(module a racket 
  (provide/contract
   [f (->d ([x number?]) ([y number?]) (r number?))]

   (define (f x [y (* 2 x)])
     (list x y))))

(module b racket 
  (require 'a)
  (f 10))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: matthias@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11596: internal error in contracted program
Date: Thu, 6 Jan 2011 17:26:11 -0600

 On Thu, Jan 6, 2011 at 9:28 AM,  <matthias@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11596
 
 This appears to be a bug with expressions that appear as the first
 subexpression in a module. This program has the problem too:
 
 #lang racket/load
 
 (module m racket/base
   (provide m (all-from-out racket/base))
   (require (for-syntax racket/base))
   (define-syntax (m stx)
     (syntax-local-lift-module-end-declaration
      #'(define xyz 1))
     #'1))
 
 (module a 'm
   (m))
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: matthias@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11596: internal error in contracted program
Date: Thu, 06 Jan 2011 17:16:25 -0700

 Robby Findler wrote:
 > On Thu, Jan 6, 2011 at 9:28 AM,  <matthias@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=11596
 > 
 > This appears to be a bug with expressions that appear as the first
 > subexpression in a module. This program has the problem too:
 > 
 > #lang racket/load
 > 
 > (module m racket/base
 >   (provide m (all-from-out racket/base))
 >   (require (for-syntax racket/base))
 >   (define-syntax (m stx)
 >     (syntax-local-lift-module-end-declaration
 >      #'(define xyz 1))
 >     #'1))
 > 
 > (module a 'm
 >   (m))
 
 The problem isn't that it's the first form, but that it's the only form. 
 That's because the expander is expanding (m) looking for a 
 #%plain-module-begin form, and #%plain-module-begin is the thing that 
 "catches" module-level lifts.
 
 (Ordinarily you would never see this because #lang racket inserts an 
 explicit #%module-begin around the whole module.)
 
 One way to fix provide/contract would be to delay the lifting. Instead 
 of provide/contract doing the lifting itself, it could expand into code 
 that would do the lifting.
 
 Another way would be to check the context:
 
    (case (syntax-local-context)
      [(module-body) ;; the case under discussion
       #`(begin (define-values () (values))  ;; force module-body form
                #,stx)]
      [(module) ;; the good case
       <the usual stuff>]
      [else ;; expression or internal definition
       <error>])
 
 The code in the first case forces the expander to give up on finding a 
 #%plain-module-begin form and introduce one itself, but it's a bit 
 hacky. Perhaps we need a module-body-form analogue of #%expression.
 
 Ryan
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11596: internal error in contracted program
Date: Thu, 6 Jan 2011 19:33:23 -0500

 Yes I know how to fix it :-) The error message isn't an error message as =
 far as I am concerned.=20
 
 
 On Jan 6, 2011, at 7:31 PM, Carl Eastlund wrote:
 
 > On Thu, Jan 6, 2011 at 10:28 AM,  <matthias@ccs.neu.edu> wrote:
 >> #lang racket/load
 >>=20
 >> (module a racket
 >>  (provide/contract
 >>   [f (->d ([x number?]) ([y number?]) (r number?))]
 >>=20
 >>   (define (f x [y (* 2 x)])
 >>     (list x y))))
 >=20
 > The parens above are wrong.  The "define" is currently inside the
 > "provide/contract".  I don't know if this quick fix was overlooked, or
 > if the complaint is solely about the error message.
 >=20
 > --Carl
 
From: Carl Eastlund <cce@plt-scheme.org>
To: matthias@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11596: internal error in contracted program
Date: Thu, 6 Jan 2011 19:31:32 -0500

 On Thu, Jan 6, 2011 at 10:28 AM,  <matthias@ccs.neu.edu> wrote:
 > #lang racket/load
 >
 > (module a racket
 > =A0(provide/contract
 > =A0 [f (->d ([x number?]) ([y number?]) (r number?))]
 >
 > =A0 (define (f x [y (* 2 x)])
 > =A0 =A0 (list x y))))
 
 The parens above are wrong.  The "define" is currently inside the
 "provide/contract".  I don't know if this quick fix was overlooked, or
 if the complaint is solely about the error message.
 
 --Carl
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Carl Eastlund <cce@plt-scheme.org>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11596: internal error in contracted program
Date: Thu, 6 Jan 2011 18:34:13 -0600

 Also, fixing that doesn't actually change the error message.
 
 On Thu, Jan 6, 2011 at 6:33 PM, Matthias Felleisen <matthias@ccs.neu.edu> w=
 rote:
 >
 > Yes I know how to fix it :-) The error message isn't an error message as =
 far as I am concerned.
 >
 >
 > On Jan 6, 2011, at 7:31 PM, Carl Eastlund wrote:
 >
 >> On Thu, Jan 6, 2011 at 10:28 AM, =C2=A0<matthias@ccs.neu.edu> wrote:
 >>> #lang racket/load
 >>>
 >>> (module a racket
 >>> =C2=A0(provide/contract
 >>> =C2=A0 [f (->d ([x number?]) ([y number?]) (r number?))]
 >>>
 >>> =C2=A0 (define (f x [y (* 2 x)])
 >>> =C2=A0 =C2=A0 (list x y))))
 >>
 >> The parens above are wrong. =C2=A0The "define" is currently inside the
 >> "provide/contract". =C2=A0I don't know if this quick fix was overlooked,=
  or
 >> if the complaint is solely about the error message.
 >>
 >> --Carl
 >
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: matthias@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11596: internal error in contracted program
Date: Thu, 6 Jan 2011 18:36:40 -0600

 On Thu, Jan 6, 2011 at 6:16 PM, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 > Robby Findler wrote:
 >>
 >> On Thu, Jan 6, 2011 at 9:28 AM, =C2=A0<matthias@ccs.neu.edu> wrote:
 >>>
 >>> A new problem report is waiting at
 >>> =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11596
 >>
 >> This appears to be a bug with expressions that appear as the first
 >> subexpression in a module. This program has the problem too:
 >>
 >> #lang racket/load
 >>
 >> (module m racket/base
 >> =C2=A0(provide m (all-from-out racket/base))
 >> =C2=A0(require (for-syntax racket/base))
 >> =C2=A0(define-syntax (m stx)
 >> =C2=A0 =C2=A0(syntax-local-lift-module-end-declaration
 >> =C2=A0 =C2=A0 #'(define xyz 1))
 >> =C2=A0 =C2=A0#'1))
 >>
 >> (module a 'm
 >> =C2=A0(m))
 >
 > The problem isn't that it's the first form, but that it's the only form.
 > That's because the expander is expanding (m) looking for a
 > #%plain-module-begin form, and #%plain-module-begin is the thing that
 > "catches" module-level lifts.
 >
 > (Ordinarily you would never see this because #lang racket inserts an
 > explicit #%module-begin around the whole module.)
 
 Oh -- the #lang line is doing that?
 
 I feel like I've been here before, but I'm still not quite getting why
 racket/base can't wrap the body expression.
 
 > One way to fix provide/contract would be to delay the lifting. Instead of
 > provide/contract doing the lifting itself, it could expand into code that
 > would do the lifting.
 >
 > Another way would be to check the context:
 >
 > =C2=A0(case (syntax-local-context)
 > =C2=A0 =C2=A0[(module-body) ;; the case under discussion
 > =C2=A0 =C2=A0 #`(begin (define-values () (values)) =C2=A0;; force module-=
 body form
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#,stx)]
 > =C2=A0 =C2=A0[(module) ;; the good case
 > =C2=A0 =C2=A0 <the usual stuff>]
 > =C2=A0 =C2=A0[else ;; expression or internal definition
 > =C2=A0 =C2=A0 <error>])
 >
 > The code in the first case forces the expander to give up on finding a
 > #%plain-module-begin form and introduce one itself, but it's a bit hacky.
 
 Doing something like this doesn't seem so great.
 
 > Perhaps we need a module-body-form analogue of #%expression.
 
 Robby
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: matthias@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11596: internal error in contracted program
Date: Thu, 06 Jan 2011 18:12:14 -0700

 Robby Findler wrote:
 > On Thu, Jan 6, 2011 at 6:16 PM, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 >> Robby Findler wrote:
 >>> On Thu, Jan 6, 2011 at 9:28 AM,  <matthias@ccs.neu.edu> wrote:
 >>>> A new problem report is waiting at
 >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=11596
 >>> This appears to be a bug with expressions that appear as the first
 >>> subexpression in a module. This program has the problem too:
 >>>
 >>> #lang racket/load
 >>>
 >>> (module m racket/base
 >>>  (provide m (all-from-out racket/base))
 >>>  (require (for-syntax racket/base))
 >>>  (define-syntax (m stx)
 >>>    (syntax-local-lift-module-end-declaration
 >>>     #'(define xyz 1))
 >>>    #'1))
 >>>
 >>> (module a 'm
 >>>  (m))
 >> The problem isn't that it's the first form, but that it's the only form.
 >> That's because the expander is expanding (m) looking for a
 >> #%plain-module-begin form, and #%plain-module-begin is the thing that
 >> "catches" module-level lifts.
 >>
 >> (Ordinarily you would never see this because #lang racket inserts an
 >> explicit #%module-begin around the whole module.)
 > 
 > Oh -- the #lang line is doing that?
 
 Yes:
 
  > (parameterize ((read-accept-reader #t))
      (read (open-input-string "#lang racket 1 2 3")))
 '(module anonymous-module racket (#%module-begin 1 2 3))
 
 > I feel like I've been here before, but I'm still not quite getting why
 > racket/base can't wrap the body expression.
 
 The reader for #land racket/base would wrap it, but this example uses 
 the S-expression module syntax directly, so the reader isn't involved.
 
 The macro expander would eventually wrap it, once it determined that it 
 didn't expand into a #%plain-module-begin form. In DrRacket, run the 
 macro stepper on the following program:
 
    (module a racket/base (or #t #f))
 
 Disable macro hiding. You'll see it expand the or expression until it 
 hits let-values, which it recognizes as being definitely an expression 
 form. That's when it decides to add the #%module-begin wrapper.
 
 In the original example, the error occurred before it hit something it 
 recognized.
 
 >> One way to fix provide/contract would be to delay the lifting. Instead of
 >> provide/contract doing the lifting itself, it could expand into code that
 >> would do the lifting.
 >>
 >> Another way would be to check the context:
 >>
 >>  (case (syntax-local-context)
 >>    [(module-body) ;; the case under discussion
 >>     #`(begin (define-values () (values))  ;; force module-body form
 >>              #,stx)]
 >>    [(module) ;; the good case
 >>     <the usual stuff>]
 >>    [else ;; expression or internal definition
 >>     <error>])
 >>
 >> The code in the first case forces the expander to give up on finding a
 >> #%plain-module-begin form and introduce one itself, but it's a bit hacky.
 > 
 > Doing something like this doesn't seem so great.
 
 In order to avoid that error message, provide/contract must check that 
 its context supports that kind of lifting. Here's another way to get the 
 same error:
 
 #lang racket
 (require (for-syntax racket))
 (begin-for-syntax
    (provide/contract [+ (-> number? number?)]))
 
 Ryan
 
 
 >> Perhaps we need a module-body-form analogue of #%expression.
 > 
 > Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: matthias@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11596: internal error in contracted program
Date: Thu, 6 Jan 2011 19:43:35 -0600

 On Thu, Jan 6, 2011 at 7:12 PM, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 > Robby Findler wrote:
 >>
 >> On Thu, Jan 6, 2011 at 6:16 PM, Ryan Culpepper <ryanc@ccs.neu.edu> wrote=
 :
 >>>
 >>> Robby Findler wrote:
 >>>>
 >>>> On Thu, Jan 6, 2011 at 9:28 AM, =C2=A0<matthias@ccs.neu.edu> wrote:
 >>>>>
 >>>>> A new problem report is waiting at
 >>>>> =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11596
 >>>>
 >>>> This appears to be a bug with expressions that appear as the first
 >>>> subexpression in a module. This program has the problem too:
 >>>>
 >>>> #lang racket/load
 >>>>
 >>>> (module m racket/base
 >>>> =C2=A0(provide m (all-from-out racket/base))
 >>>> =C2=A0(require (for-syntax racket/base))
 >>>> =C2=A0(define-syntax (m stx)
 >>>> =C2=A0 (syntax-local-lift-module-end-declaration
 >>>> =C2=A0 =C2=A0#'(define xyz 1))
 >>>> =C2=A0 #'1))
 >>>>
 >>>> (module a 'm
 >>>> =C2=A0(m))
 >>>
 >>> The problem isn't that it's the first form, but that it's the only form=
 .
 >>> That's because the expander is expanding (m) looking for a
 >>> #%plain-module-begin form, and #%plain-module-begin is the thing that
 >>> "catches" module-level lifts.
 >>>
 >>> (Ordinarily you would never see this because #lang racket inserts an
 >>> explicit #%module-begin around the whole module.)
 >>
 >> Oh -- the #lang line is doing that?
 >
 > Yes:
 >
 >> (parameterize ((read-accept-reader #t))
 > =C2=A0 =C2=A0(read (open-input-string "#lang racket 1 2 3")))
 > '(module anonymous-module racket (#%module-begin 1 2 3))
 >
 >> I feel like I've been here before, but I'm still not quite getting why
 >> racket/base can't wrap the body expression.
 >
 > The reader for #land racket/base would wrap it, but this example uses the
 > S-expression module syntax directly, so the reader isn't involved.
 >
 > The macro expander would eventually wrap it, once it determined that it
 > didn't expand into a #%plain-module-begin form.
 
 Ah yes, this triggered my memory. Thanks.
 
 
 >  In DrRacket, run the macro
 > stepper on the following program:
 >
 > =C2=A0(module a racket/base (or #t #f))
 >
 > Disable macro hiding. You'll see it expand the or expression until it hit=
 s
 > let-values, which it recognizes as being definitely an expression form.
 > That's when it decides to add the #%module-begin wrapper.
 >
 > In the original example, the error occurred before it hit something it
 > recognized.
 >
 >>> One way to fix provide/contract would be to delay the lifting. Instead =
 of
 >>> provide/contract doing the lifting itself, it could expand into code th=
 at
 >>> would do the lifting.
 >>>
 >>> Another way would be to check the context:
 >>>
 >>> =C2=A0(case (syntax-local-context)
 >>> =C2=A0 [(module-body) ;; the case under discussion
 >>> =C2=A0 =C2=A0#`(begin (define-values () (values)) =C2=A0;; force module=
 -body form
 >>> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #,stx)]
 >>> =C2=A0 [(module) ;; the good case
 >>> =C2=A0 =C2=A0<the usual stuff>]
 >>> =C2=A0 [else ;; expression or internal definition
 >>> =C2=A0 =C2=A0<error>])
 >>>
 >>> The code in the first case forces the expander to give up on finding a
 >>> #%plain-module-begin form and introduce one itself, but it's a bit hack=
 y.
 >>
 >> Doing something like this doesn't seem so great.
 >
 > In order to avoid that error message, provide/contract must check that it=
 s
 > context supports that kind of lifting.
 
 I guess I'll do the above, then.
 
 > Here's another way to get the same
 > error:
 >
 > #lang racket
 > (require (for-syntax racket))
 > (begin-for-syntax
 > =C2=A0(provide/contract [+ (-> number? number?)]))
 >
 > Ryan
 >
 >
 >>> Perhaps we need a module-body-form analogue of #%expression.
 >>
 >> Robby
 >
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Fri, 07 Jan 2011 06:19:31 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/31a629ff9c
State changed from "open" to "closed" by robby@racket-lang.org at Fri, 07 Jan 2011 06:19:31 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/31a629ff9c
