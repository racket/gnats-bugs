From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Dec 14 03:15:19 2012
Received: from mail-ia0-f172.google.com (mail-ia0-f172.google.com [209.85.210.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id qBE8FGdq000423
	for <bugs@bugs.plt-scheme.org>; Fri, 14 Dec 2012 03:15:16 -0500
Message-Id: <201212140815.qBE8FEWH000417@champlain.ccs.neu.edu>
Date: Fri, 14 Dec 2012 03:15:14 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: data/gvector is not thread safe

>Number:         13367
>Category:       all
>Synopsis:       data/gvector is not thread safe
>Class:          sw-bug
>Responsible:    ryanc
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Dec 14 03:16:01 -0500 2012
>Closed-Date:    Mon Dec 17 02:24:11 -0500 2012
>Last-Modified:  Mon Dec 17 02:24:11 -0500 2012
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
The implementation of data/gvector allows 

(define v (gvector))
(thread (lambda () (gvector-add! v 1)))
(thread (lambda () (gvector-add! v 2)))

(gvector-count v) ; => 1

I was not able to replicate this but it was pretty obvious that was possible from reading the implementation.
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Ryan Culpepper <ryan@cs.utah.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13367: data/gvector is not thread safe
Date: Fri, 14 Dec 2012 12:44:29 -0500

 Most of the data structures in data/* are not thread-safe, I believe. I 
 thought that the docs said so, but I was wrong. I'll fix that.
 
 It would be possible to add a semaphore to make them thread-safe (but 
 not kill-safe). I would want to measure the cost for uncontended Racket 
 threads to see if it was small enough, though. I believe semaphore 
 access would cause futures to block, but I don't have a feel for whether 
 that's an important issue. Another option would be to support both 
 synchronized and unsynchronized versions.
 
 Any thoughts?
 
 Ryan
 
 
 On 12/14/2012 03:16 AM, eric.n.dobson@gmail.com wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=13367
 >
 > Reported by Eric Dobson for release: 5.3
 >
 > *** Description:
 > The implementation of data/gvector allows
 >
 > (define v (gvector))
 > (thread (lambda () (gvector-add! v 1)))
 > (thread (lambda () (gvector-add! v 2)))
 >
 > (gvector-count v) ; => 1
 >
 > I was not able to replicate this but it was pretty obvious that was possible from reading the implementation.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
 >
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Ryan Culpepper <ryan@cs.utah.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13367: data/gvector is not thread safe
Date: Fri, 14 Dec 2012 09:48:52 -0800

 --089e013c641c0cf5a704d0d3a597
 Content-Type: text/plain; charset=UTF-8
 
 I think documenting that they are not thread safe is an important first
 step. I also think that providing thread-safe and kill-safe data structures
 is important because writing them (especially kill-safe) is tricky and
 there should be some standard versions.
 
 
 On Fri, Dec 14, 2012 at 9:44 AM, Ryan Culpepper <ryan@cs.utah.edu> wrote:
 
 > Most of the data structures in data/* are not thread-safe, I believe. I
 > thought that the docs said so, but I was wrong. I'll fix that.
 >
 > It would be possible to add a semaphore to make them thread-safe (but not
 > kill-safe). I would want to measure the cost for uncontended Racket threads
 > to see if it was small enough, though. I believe semaphore access would
 > cause futures to block, but I don't have a feel for whether that's an
 > important issue. Another option would be to support both synchronized and
 > unsynchronized versions.
 >
 > Any thoughts?
 >
 > Ryan
 >
 >
 > On 12/14/2012 03:16 AM, eric.n.dobson@gmail.com wrote:
 >
 >> A new problem report is waiting at
 >>    http://bugs.racket-lang.org/**query/?cmd=view&pr=13367<http://bugs.racket-lang.org/query/?cmd=view&pr=13367>
 >>
 >> Reported by Eric Dobson for release: 5.3
 >>
 >> *** Description:
 >> The implementation of data/gvector allows
 >>
 >> (define v (gvector))
 >> (thread (lambda () (gvector-add! v 1)))
 >> (thread (lambda () (gvector-add! v 2)))
 >>
 >> (gvector-count v) ; => 1
 >>
 >> I was not able to replicate this but it was pretty obvious that was
 >> possible from reading the implementation.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0)
 >> AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
 >>
 >>
 >
 
 --089e013c641c0cf5a704d0d3a597
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I think documenting that they are not thread safe is an important first ste=
 p. I also think that providing thread-safe and kill-safe data structures is=
  important because writing them (especially kill-safe) is tricky and there =
 should be some standard versions.<div class=3D"gmail_extra">
 <br><br><div class=3D"gmail_quote">On Fri, Dec 14, 2012 at 9:44 AM, Ryan Cu=
 lpepper <span dir=3D"ltr">&lt;<a href=3D"mailto:ryan@cs.utah.edu" target=3D=
 "_blank">ryan@cs.utah.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gma=
 il_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=
 t:1ex">
 Most of the data structures in data/* are not thread-safe, I believe. I tho=
 ught that the docs said so, but I was wrong. I&#39;ll fix that.<br>
 <br>
 It would be possible to add a semaphore to make them thread-safe (but not k=
 ill-safe). I would want to measure the cost for uncontended Racket threads =
 to see if it was small enough, though. I believe semaphore access would cau=
 se futures to block, but I don&#39;t have a feel for whether that&#39;s an =
 important issue. Another option would be to support both synchronized and u=
 nsynchronized versions.<br>
 
 <br>
 Any thoughts?<br>
 <br>
 Ryan<br>
 <br>
 <br>
 On 12/14/2012 03:16 AM, <a href=3D"mailto:eric.n.dobson@gmail.com" target=
 =3D"_blank">eric.n.dobson@gmail.com</a> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 A new problem report is waiting at<br>
 =C2=A0 =C2=A0<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;p=
 r=3D13367" target=3D"_blank">http://bugs.racket-lang.org/<u></u>query/?cmd=
 =3Dview&amp;pr=3D13367</a><br>
 <br>
 Reported by Eric Dobson for release: 5.3<br>
 <br>
 *** Description:<br>
 The implementation of data/gvector allows<br>
 <br>
 (define v (gvector))<br>
 (thread (lambda () (gvector-add! v 1)))<br>
 (thread (lambda () (gvector-add! v 2)))<br>
 <br>
 (gvector-count v) ; =3D&gt; 1<br>
 <br>
 I was not able to replicate this but it was pretty obvious that was possibl=
 e from reading the implementation.<br>
 <br>
 *** How to repeat:<br>
 <br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2=
  (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2<br>
 <br>
 </blockquote>
 <br>
 </blockquote></div><br></div>
 
 --089e013c641c0cf5a704d0d3a597--
Responsible changed from "nobody" to "ryanc" by ryanc@racket-lang.org at Mon, 17 Dec 2012 02:24:11 -0500
Reason>>> A commit by ryanc@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/dfc33f851f
State changed from "open" to "closed" by ryanc@racket-lang.org at Mon, 17 Dec 2012 02:24:11 -0500
Reason>>> A commit by ryanc@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/dfc33f851f
