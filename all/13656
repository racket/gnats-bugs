From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Apr  5 02:57:10 2013
Received: from mail-ob0-f175.google.com (mail-ob0-f175.google.com [209.85.214.175])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r356v7a1022548
	for <bugs@bugs.plt-scheme.org>; Fri, 5 Apr 2013 02:57:07 -0400
Message-Id: <201304050657.r356v5Eo022542@champlain.ccs.neu.edu>
Date: Fri, 5 Apr 2013 02:57:05 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: package publishing uses an imaginary "github" scheme

>Number:         13656
>Category:       all
>Synopsis:       package publishing uses an imaginary "github" scheme
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Apr 05 03:00:01 -0400 2013
>Closed-Date:    Fri Aug 23 10:35:06 -0400 2013
>Last-Modified:  Wed Aug 28 12:24:01 -0400 2013
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Any
>Description:
As the subject says.  Abusing the scheme part for a URL is asking for
trouble in several different ways, and it should really be avoided.

Instead, it could just identify github URLs (since "github.com" is still
required) and do the usual github magic with them.  This can be done very
simply in two steps:

1. just change the instructions and replace "github://" with "https://"
   or "http://", and do the dispatching in the code based on the address.
   The code can ignore the scheme, and therefore existing bad URLs are
   fine.

2. In the next step, instruct people to use http://github.com/user/repo
   in the default case of the "master" branch, otherwise, tell them to
   point their browser to the branch (or tag) they want to use, and copy
   that URL.  This means that the code should now default to master,
   unless the URL matches

     https://github.com/([^/]+)/([^/]+)/(?:tree|commits)/([^/]+)(?:/.*)?$

   which gives you the user/repo/branch-or-tag-name.

   The code can still also allow the above /<branch> right after the repo
   name, which will make URLs from step #1 (and existing ones) still
   valid.
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: eli@barzilay.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Fri, 5 Apr 2013 08:35:23 -0400

 On 2013-04-05 03:00:02 -0400, eli@barzilay.org wrote:
 > As the subject says.  Abusing the scheme part for a URL is asking for
 > trouble in several different ways, and it should really be avoided.
 
 +1 to this. I've hit this myself when I assumed that to make a package,
 I just had to copy + paste whatever URL github shows me in the web
 interface.
 
 Cheers,
 Asumu
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 14:36:09 -0600

 I don't like this idea because it means that some HTTP(S) URLs are
 treated specially and it complicates or makes impossible doing things
 like storing a package archive in a github repository and using
 raw/blob URLs that still start with github.com/user/repo etc.
 
 If you want to submit a patch to the PNR that parses out some HTTP(S)
 URLs for convenience, I'm fine with that, but you should add a second
 textbox, so someone can input a real package source URL.
 
 Jay
 
 
 
 
 On Fri, Apr 5, 2013 at 1:00 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13656
 >
 > Reported by Eli Barzilay for release: HEAD
 >
 > *** Description:
 > As the subject says.  Abusing the scheme part for a URL is asking for
 > trouble in several different ways, and it should really be avoided.
 >
 > Instead, it could just identify github URLs (since "github.com" is still
 > required) and do the usual github magic with them.  This can be done very
 > simply in two steps:
 >
 > 1. just change the instructions and replace "github://" with "https://"
 >    or "http://", and do the dispatching in the code based on the address.
 >    The code can ignore the scheme, and therefore existing bad URLs are
 >    fine.
 >
 > 2. In the next step, instruct people to use http://github.com/user/repo
 >    in the default case of the "master" branch, otherwise, tell them to
 >    point their browser to the branch (or tag) they want to use, and copy
 >    that URL.  This means that the code should now default to master,
 >    unless the URL matches
 >
 >      https://github.com/([^/]+)/([^/]+)/(?:tree|commits)/([^/]+)(?:/.*)?$
 >
 >    which gives you the user/repo/branch-or-tag-name.
 >
 >    The code can still also allow the above /<branch> right after the repo
 >    name, which will make URLs from step #1 (and existing ones) still
 >    valid.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > Any
 >
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 15:42:05 -0500

 --e89a8ff1cf868fba3504d9b73c79
 Content-Type: text/plain; charset=UTF-8
 
 IIUC, the github:// urls actually do something different to exploit
 github's auto compression thing, right?  That sounds like a reason to leave
 things alone.
 
 Robby
 
 
 On Sat, Apr 6, 2013 at 3:36 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 
 > I don't like this idea because it means that some HTTP(S) URLs are
 > treated specially and it complicates or makes impossible doing things
 > like storing a package archive in a github repository and using
 > raw/blob URLs that still start with github.com/user/repo etc.
 >
 > If you want to submit a patch to the PNR that parses out some HTTP(S)
 > URLs for convenience, I'm fine with that, but you should add a second
 > textbox, so someone can input a real package source URL.
 >
 > Jay
 >
 >
 >
 >
 > On Fri, Apr 5, 2013 at 1:00 AM,  <eli@barzilay.org> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=13656
 > >
 > > Reported by Eli Barzilay for release: HEAD
 > >
 > > *** Description:
 > > As the subject says.  Abusing the scheme part for a URL is asking for
 > > trouble in several different ways, and it should really be avoided.
 > >
 > > Instead, it could just identify github URLs (since "github.com" is still
 > > required) and do the usual github magic with them.  This can be done very
 > > simply in two steps:
 > >
 > > 1. just change the instructions and replace "github://" with "https://"
 > >    or "http://", and do the dispatching in the code based on the
 > address.
 > >    The code can ignore the scheme, and therefore existing bad URLs are
 > >    fine.
 > >
 > > 2. In the next step, instruct people to use http://github.com/user/repo
 > >    in the default case of the "master" branch, otherwise, tell them to
 > >    point their browser to the branch (or tag) they want to use, and copy
 > >    that URL.  This means that the code should now default to master,
 > >    unless the URL matches
 > >
 > >      https://github.com/([
 > ^/]+)/([^/]+)/(?:tree|commits)/([^/]+)(?:/.*)?$
 > >
 > >    which gives you the user/repo/branch-or-tag-name.
 > >
 > >    The code can still also allow the above /<branch> right after the repo
 > >    name, which will make URLs from step #1 (and existing ones) still
 > >    valid.
 > >
 > > *** How to repeat:
 > >
 > >
 > > *** Environment:
 > > Any
 > >
 >
 >
 >
 > --
 > Jay McCarthy <jay@cs.byu.edu>
 > Assistant Professor / Brigham Young University
 > http://faculty.cs.byu.edu/~jay
 >
 > "The glory of God is Intelligence" - D&C 93
 >
 
 --e89a8ff1cf868fba3504d9b73c79
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">IIUC, the github:// urls actually do something different t=
 o exploit github&#39;s auto compression thing, right? =C2=A0That sounds lik=
 e a reason to leave things alone.<div style><br>Robby</div></div><div class=
 =3D"gmail_extra">
 <br><br><div class=3D"gmail_quote">On Sat, Apr 6, 2013 at 3:36 PM, Jay McCa=
 rthy <span dir=3D"ltr">&lt;<a href=3D"mailto:jay.mccarthy@gmail.com" target=
 =3D"_blank">jay.mccarthy@gmail.com</a>&gt;</span> wrote:<br><blockquote cla=
 ss=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;pa=
 dding-left:1ex">
 I don&#39;t like this idea because it means that some HTTP(S) URLs are<br>
 treated specially and it complicates or makes impossible doing things<br>
 like storing a package archive in a github repository and using<br>
 raw/blob URLs that still start with <a href=3D"http://github.com/user/repo"=
  target=3D"_blank">github.com/user/repo</a> etc.<br>
 <br>
 If you want to submit a patch to the PNR that parses out some HTTP(S)<br>
 URLs for convenience, I&#39;m fine with that, but you should add a second<b=
 r>
 textbox, so someone can input a real package source URL.<br>
 <br>
 Jay<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 <br>
 <br>
 <br>
 On Fri, Apr 5, 2013 at 1:00 AM, =C2=A0&lt;<a href=3D"mailto:eli@barzilay.or=
 g">eli@barzilay.org</a>&gt; wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13656" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D13656</a><br>
 &gt;<br>
 &gt; Reported by Eli Barzilay for release: HEAD<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; As the subject says. =C2=A0Abusing the scheme part for a URL is asking=
  for<br>
 &gt; trouble in several different ways, and it should really be avoided.<br=
 >
 &gt;<br>
 &gt; Instead, it could just identify github URLs (since &quot;<a href=3D"ht=
 tp://github.com" target=3D"_blank">github.com</a>&quot; is still<br>
 &gt; required) and do the usual github magic with them. =C2=A0This can be d=
 one very<br>
 &gt; simply in two steps:<br>
 &gt;<br>
 &gt; 1. just change the instructions and replace &quot;github://&quot; with=
  &quot;https://&quot;<br>
 &gt; =C2=A0 =C2=A0or &quot;http://&quot;, and do the dispatching in the cod=
 e based on the address.<br>
 &gt; =C2=A0 =C2=A0The code can ignore the scheme, and therefore existing ba=
 d URLs are<br>
 &gt; =C2=A0 =C2=A0fine.<br>
 &gt;<br>
 &gt; 2. In the next step, instruct people to use <a href=3D"http://github.c=
 om/user/repo" target=3D"_blank">http://github.com/user/repo</a><br>
 &gt; =C2=A0 =C2=A0in the default case of the &quot;master&quot; branch, oth=
 erwise, tell them to<br>
 &gt; =C2=A0 =C2=A0point their browser to the branch (or tag) they want to u=
 se, and copy<br>
 &gt; =C2=A0 =C2=A0that URL. =C2=A0This means that the code should now defau=
 lt to master,<br>
 &gt; =C2=A0 =C2=A0unless the URL matches<br>
 &gt;<br>
 &gt; =C2=A0 =C2=A0 =C2=A0<a href=3D"https://github.com/([" target=3D"_blank=
 ">https://github.com/([</a>^/]+)/([^/]+)/(?:tree|commits)/([^/]+)(?:/.*)?$<=
 br>
 &gt;<br>
 &gt; =C2=A0 =C2=A0which gives you the user/repo/branch-or-tag-name.<br>
 &gt;<br>
 &gt; =C2=A0 =C2=A0The code can still also allow the above /&lt;branch&gt; r=
 ight after the repo<br>
 &gt; =C2=A0 =C2=A0name, which will make URLs from step #1 (and existing one=
 s) still<br>
 &gt; =C2=A0 =C2=A0valid.<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt;<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; Any<br>
 &gt;<br>
 <br>
 <br>
 <br>
 </div></div><span class=3D"HOEnZb"><font color=3D"#888888">--<br>
 Jay McCarthy &lt;<a href=3D"mailto:jay@cs.byu.edu">jay@cs.byu.edu</a>&gt;<b=
 r>
 Assistant Professor / Brigham Young University<br>
 <a href=3D"http://faculty.cs.byu.edu/~jay" target=3D"_blank">http://faculty=
 .cs.byu.edu/~jay</a><br>
 <br>
 &quot;The glory of God is Intelligence&quot; - D&amp;C 93<br>
 </font></span></blockquote></div><br></div>
 
 --e89a8ff1cf868fba3504d9b73c79--
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 14:57:28 -0600

 Yes. The github:// just gives basic information: the user, the repo,
 the branch, and then a path. It uses the user/repo/branch to make a
 github JSON API request to get the auto-generated tgz path and then
 downloads that.
 
 I presume, however, that Eli is asking me to parse out those things
 from usual HTTP URLs and then deal with stuff like "blob"/etc when
 trying to figure out the internal path the user intended. This would
 be brittle to changes that github makes to its URL scheme, and so I
 think it would be best to put this feature in the PNR UI rather than
 built in.
 
 Jay
 
 
 On Sat, Apr 6, 2013 at 2:42 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > IIUC, the github:// urls actually do something different to exploit github's
 > auto compression thing, right?  That sounds like a reason to leave things
 > alone.
 >
 > Robby
 >
 >
 > On Sat, Apr 6, 2013 at 3:36 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 >>
 >> I don't like this idea because it means that some HTTP(S) URLs are
 >> treated specially and it complicates or makes impossible doing things
 >> like storing a package archive in a github repository and using
 >> raw/blob URLs that still start with github.com/user/repo etc.
 >>
 >> If you want to submit a patch to the PNR that parses out some HTTP(S)
 >> URLs for convenience, I'm fine with that, but you should add a second
 >> textbox, so someone can input a real package source URL.
 >>
 >> Jay
 >>
 >>
 >>
 >>
 >> On Fri, Apr 5, 2013 at 1:00 AM,  <eli@barzilay.org> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13656
 >> >
 >> > Reported by Eli Barzilay for release: HEAD
 >> >
 >> > *** Description:
 >> > As the subject says.  Abusing the scheme part for a URL is asking for
 >> > trouble in several different ways, and it should really be avoided.
 >> >
 >> > Instead, it could just identify github URLs (since "github.com" is still
 >> > required) and do the usual github magic with them.  This can be done
 >> > very
 >> > simply in two steps:
 >> >
 >> > 1. just change the instructions and replace "github://" with "https://"
 >> >    or "http://", and do the dispatching in the code based on the
 >> > address.
 >> >    The code can ignore the scheme, and therefore existing bad URLs are
 >> >    fine.
 >> >
 >> > 2. In the next step, instruct people to use http://github.com/user/repo
 >> >    in the default case of the "master" branch, otherwise, tell them to
 >> >    point their browser to the branch (or tag) they want to use, and copy
 >> >    that URL.  This means that the code should now default to master,
 >> >    unless the URL matches
 >> >
 >> >
 >> > https://github.com/([^/]+)/([^/]+)/(?:tree|commits)/([^/]+)(?:/.*)?$
 >> >
 >> >    which gives you the user/repo/branch-or-tag-name.
 >> >
 >> >    The code can still also allow the above /<branch> right after the
 >> > repo
 >> >    name, which will make URLs from step #1 (and existing ones) still
 >> >    valid.
 >> >
 >> > *** How to repeat:
 >> >
 >> >
 >> > *** Environment:
 >> > Any
 >> >
 >>
 >>
 >>
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://faculty.cs.byu.edu/~jay
 >>
 >> "The glory of God is Intelligence" - D&C 93
 >
 >
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
From: Eli Barzilay <eli@barzilay.org>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Robby Findler <robby@eecs.northwestern.edu>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 17:17:17 -0400

 30 minutes ago, Jay McCarthy wrote:
 > I don't like this idea because it means that some HTTP(S) URLs are
 > treated specially
 
 Yes, it's a hack, but a very common one these days.  AFAICT, this is
 exactly what happens on android, with certain applications registering
 themselves for certain URLs -- based on the domain part (but maybe
 other parts too).
 
 More than that, by including specific things to handle github, the
 package system already does this exact kind of hack.
 
 But note that the main thing that I'm complaining about here is that
 it's a bad hack since it invents a new scheme part -- and that's
 something that is generally tempting but leads to bad results.  If
 it's not a URL, then it shouldn't look like a URL.  (And currently it
 isn't a URL -- it's a semi-structured string that happens to look like
 a URL sometimes.)
 
 
 > and it complicates or makes impossible doing things like storing a
 > package archive in a github repository and using raw/blob URLs that
 > still start with github.com/user/repo etc.
 
 That's very easy to deal with: just look at the URL and don't touch it
 if it looks like a zip file or whatever.
 
 
 > If you want to submit a patch to the PNR that parses out some
 > HTTP(S) URLs for convenience, I'm fine with that, but you should add
 > a second textbox, so someone can input a real package source URL.
 
 Given the above, there is no need for an extra input or whatever, just
 smarter URL recognition.  I can write the regexps and the code, and I
 actually grepped for all mentions of `github' -- but they're all over
 the place, in several files.
 
 (I actually expected all of this kind of munging to be in a
 centralized place to make it easy to add such things, and I was
 surprised that it isn't.  I'd go for a more thorough reorganization
 that would do that kind of refactoring, but there is no chance that
 I'll have that kind of hacking time now.)
 
 Yet another comment about that: I completely agree that github is
 important, but embracing that in such a specialized way which
 contributes to rejecting other such things seems like a strange
 decision.  It's exactly this that would actually make me do the above
 refactoring if I had the time to do so.
 
 
 A few minutes ago, Jay McCarthy wrote:
 > Yes. The github:// just gives basic information: the user, the repo,
 > the branch, and then a path.
 
 (Yeah -- that's what I meant by a semi-structured string that looks
 like a URL.)
 
 
 > It uses the user/repo/branch to make a github JSON API request to
 > get the auto-generated tgz path and then downloads that.
 > 
 > I presume, however, that Eli is asking me to parse out those things
 > from usual HTTP URLs and then deal with stuff like "blob"/etc when
 > trying to figure out the internal path the user intended. This would
 > be brittle to changes that github makes to its URL scheme, and so I
 > think it would be best to put this feature in the PNR UI rather than
 > built in.
 
 One one hand, the parsing is really not that hard.  It's all within
 the reach of simple regexps.  On the brittleness side: yes, it's true
 that it depends on the format of their URLs -- but (a) these URLs are
 so popular, that they would be insane to change them, and (b) you
 already depend on the format of URLs in their API.  (And BTW, they
 have gone through many API definitions, but have not changed the
 repository URLs.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Jay McCarthy <jay.mccarthy@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 16:31:22 -0500

 --e89a8ff25172d0f78804d9b7ec77
 Content-Type: text/plain; charset=UTF-8
 
 Eli: it sounds like the main objection is the syntax of the github spec,
 not that we are treating github specially.
 
 But currently the "package source" grammar has all kinds of overloading and
 parsing fanciness to do things like distinguish urls from directories from
 files. For example, if I have a directory whose name is "x.zip" (certainly
 a possible thing), then I have to pass special flags to tell raco pkg to
 treat it like a directory instead of a file. Similarly, I cannot use a file
 whose name begins with "http://" (or perhaps a prefix of that).
 
 Given all that and the assumption that you still would want something that
 is as convenient as the current syntax for github-hosted packages, what
 syntax would you propose?
 
 Robby
 
 
 On Sat, Apr 6, 2013 at 4:17 PM, Eli Barzilay <eli@barzilay.org> wrote:
 
 > 30 minutes ago, Jay McCarthy wrote:
 > > I don't like this idea because it means that some HTTP(S) URLs are
 > > treated specially
 >
 > Yes, it's a hack, but a very common one these days.  AFAICT, this is
 > exactly what happens on android, with certain applications registering
 > themselves for certain URLs -- based on the domain part (but maybe
 > other parts too).
 >
 > More than that, by including specific things to handle github, the
 > package system already does this exact kind of hack.
 >
 > But note that the main thing that I'm complaining about here is that
 > it's a bad hack since it invents a new scheme part -- and that's
 > something that is generally tempting but leads to bad results.  If
 > it's not a URL, then it shouldn't look like a URL.  (And currently it
 > isn't a URL -- it's a semi-structured string that happens to look like
 > a URL sometimes.)
 >
 >
 > > and it complicates or makes impossible doing things like storing a
 > > package archive in a github repository and using raw/blob URLs that
 > > still start with github.com/user/repo etc.
 >
 > That's very easy to deal with: just look at the URL and don't touch it
 > if it looks like a zip file or whatever.
 >
 >
 > > If you want to submit a patch to the PNR that parses out some
 > > HTTP(S) URLs for convenience, I'm fine with that, but you should add
 > > a second textbox, so someone can input a real package source URL.
 >
 > Given the above, there is no need for an extra input or whatever, just
 > smarter URL recognition.  I can write the regexps and the code, and I
 > actually grepped for all mentions of `github' -- but they're all over
 > the place, in several files.
 >
 > (I actually expected all of this kind of munging to be in a
 > centralized place to make it easy to add such things, and I was
 > surprised that it isn't.  I'd go for a more thorough reorganization
 > that would do that kind of refactoring, but there is no chance that
 > I'll have that kind of hacking time now.)
 >
 > Yet another comment about that: I completely agree that github is
 > important, but embracing that in such a specialized way which
 > contributes to rejecting other such things seems like a strange
 > decision.  It's exactly this that would actually make me do the above
 > refactoring if I had the time to do so.
 >
 >
 > A few minutes ago, Jay McCarthy wrote:
 > > Yes. The github:// just gives basic information: the user, the repo,
 > > the branch, and then a path.
 >
 > (Yeah -- that's what I meant by a semi-structured string that looks
 > like a URL.)
 >
 >
 > > It uses the user/repo/branch to make a github JSON API request to
 > > get the auto-generated tgz path and then downloads that.
 > >
 > > I presume, however, that Eli is asking me to parse out those things
 > > from usual HTTP URLs and then deal with stuff like "blob"/etc when
 > > trying to figure out the internal path the user intended. This would
 > > be brittle to changes that github makes to its URL scheme, and so I
 > > think it would be best to put this feature in the PNR UI rather than
 > > built in.
 >
 > One one hand, the parsing is really not that hard.  It's all within
 > the reach of simple regexps.  On the brittleness side: yes, it's true
 > that it depends on the format of their URLs -- but (a) these URLs are
 > so popular, that they would be insane to change them, and (b) you
 > already depend on the format of URLs in their API.  (And BTW, they
 > have gone through many API definitions, but have not changed the
 > repository URLs.)
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
 >
 
 --e89a8ff25172d0f78804d9b7ec77
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Eli: it sounds like the main objection is the syntax of th=
 e github spec, not that we are treating github specially.<div><br></div><di=
 v>But currently the &quot;package source&quot; grammar has all kinds of ove=
 rloading and parsing fanciness to do things like distinguish urls from dire=
 ctories from files. For example, if I have a directory whose name is &quot;=
 x.zip&quot; (certainly a possible thing), then I have to pass special flags=
  to tell raco pkg to treat it like a directory instead of a file. Similarly=
 , I cannot use a file whose name begins with &quot;http://&quot; (or perhap=
 s a prefix of that).<div>
 <br></div><div>Given all that and the assumption that you still would want =
 something that is as convenient as the current syntax for github-hosted pac=
 kages, what syntax would you propose?</div></div><div><br>Robby</div></div>
 <div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Sat, Apr 6=
 , 2013 at 4:17 PM, Eli Barzilay <span dir=3D"ltr">&lt;<a href=3D"mailto:eli=
 @barzilay.org" target=3D"_blank">eli@barzilay.org</a>&gt;</span> wrote:<br>=
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 <div class=3D"im">30 minutes ago, Jay McCarthy wrote:<br>
 &gt; I don&#39;t like this idea because it means that some HTTP(S) URLs are=
 <br>
 &gt; treated specially<br>
 <br>
 </div>Yes, it&#39;s a hack, but a very common one these days. =C2=A0AFAICT,=
  this is<br>
 exactly what happens on android, with certain applications registering<br>
 themselves for certain URLs -- based on the domain part (but maybe<br>
 other parts too).<br>
 <br>
 More than that, by including specific things to handle github, the<br>
 package system already does this exact kind of hack.<br>
 <br>
 But note that the main thing that I&#39;m complaining about here is that<br=
 >
 it&#39;s a bad hack since it invents a new scheme part -- and that&#39;s<br=
 >
 something that is generally tempting but leads to bad results. =C2=A0If<br>
 it&#39;s not a URL, then it shouldn&#39;t look like a URL. =C2=A0(And curre=
 ntly it<br>
 isn&#39;t a URL -- it&#39;s a semi-structured string that happens to look l=
 ike<br>
 a URL sometimes.)<br>
 <div class=3D"im"><br>
 <br>
 &gt; and it complicates or makes impossible doing things like storing a<br>
 &gt; package archive in a github repository and using raw/blob URLs that<br=
 >
 &gt; still start with <a href=3D"http://github.com/user/repo" target=3D"_bl=
 ank">github.com/user/repo</a> etc.<br>
 <br>
 </div>That&#39;s very easy to deal with: just look at the URL and don&#39;t=
  touch it<br>
 if it looks like a zip file or whatever.<br>
 <div class=3D"im"><br>
 <br>
 &gt; If you want to submit a patch to the PNR that parses out some<br>
 &gt; HTTP(S) URLs for convenience, I&#39;m fine with that, but you should a=
 dd<br>
 &gt; a second textbox, so someone can input a real package source URL.<br>
 <br>
 </div>Given the above, there is no need for an extra input or whatever, jus=
 t<br>
 smarter URL recognition. =C2=A0I can write the regexps and the code, and I<=
 br>
 actually grepped for all mentions of `github&#39; -- but they&#39;re all ov=
 er<br>
 the place, in several files.<br>
 <br>
 (I actually expected all of this kind of munging to be in a<br>
 centralized place to make it easy to add such things, and I was<br>
 surprised that it isn&#39;t. =C2=A0I&#39;d go for a more thorough reorganiz=
 ation<br>
 that would do that kind of refactoring, but there is no chance that<br>
 I&#39;ll have that kind of hacking time now.)<br>
 <br>
 Yet another comment about that: I completely agree that github is<br>
 important, but embracing that in such a specialized way which<br>
 contributes to rejecting other such things seems like a strange<br>
 decision. =C2=A0It&#39;s exactly this that would actually make me do the ab=
 ove<br>
 refactoring if I had the time to do so.<br>
 <div class=3D"im"><br>
 <br>
 A few minutes ago, Jay McCarthy wrote:<br>
 &gt; Yes. The github:// just gives basic information: the user, the repo,<b=
 r>
 &gt; the branch, and then a path.<br>
 <br>
 </div>(Yeah -- that&#39;s what I meant by a semi-structured string that loo=
 ks<br>
 like a URL.)<br>
 <div class=3D"im"><br>
 <br>
 &gt; It uses the user/repo/branch to make a github JSON API request to<br>
 &gt; get the auto-generated tgz path and then downloads that.<br>
 &gt;<br>
 &gt; I presume, however, that Eli is asking me to parse out those things<br=
 >
 &gt; from usual HTTP URLs and then deal with stuff like &quot;blob&quot;/et=
 c when<br>
 &gt; trying to figure out the internal path the user intended. This would<b=
 r>
 &gt; be brittle to changes that github makes to its URL scheme, and so I<br=
 >
 &gt; think it would be best to put this feature in the PNR UI rather than<b=
 r>
 &gt; built in.<br>
 <br>
 </div>One one hand, the parsing is really not that hard. =C2=A0It&#39;s all=
  within<br>
 the reach of simple regexps. =C2=A0On the brittleness side: yes, it&#39;s t=
 rue<br>
 that it depends on the format of their URLs -- but (a) these URLs are<br>
 so popular, that they would be insane to change them, and (b) you<br>
 already depend on the format of URLs in their API. =C2=A0(And BTW, they<br>
 have gone through many API definitions, but have not changed the<br>
 repository URLs.)<br>
 <span class=3D"HOEnZb"><font color=3D"#888888"><br>
 --<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((lambda (x) (x x)) (lambda (x) (x x))) =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a hr=
 ef=3D"http://barzilay.org/" target=3D"_blank">http://barzilay.org/</a> =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze is Life!<b=
 r>
 </font></span></blockquote></div><br></div>
 
 --e89a8ff25172d0f78804d9b7ec77--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eli Barzilay <eli@barzilay.org>, Jay McCarthy <jay.mccarthy@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 15:53:41 -0600

 I think a special treatment of "git://github.com/" URIs might be better
 than special treatment of "https://github.com/" URIs. That would work
 well when no branch and subpath are specified.
 
 I don't know how branches and subpaths would work, since those aren't
 part of the "git:" scheme. Then again, special support for
 "https://github.com/" may have the same problem: I don't see a way to
 refer to the branch and subpath with a real "https://github.com/" URL.
 
 We could start with the "git:" scheme and represent branches and
 subpaths with a syntax along the lines of URL queries. That would still
 be fake (i.e,. not defined by the official "git:" URI scheme), but it
 may be less fake and less prone to future collision than a fake
 "github:" scheme.
 
 At Sat, 6 Apr 2013 16:31:22 -0500, Robby Findler wrote:
 > Eli: it sounds like the main objection is the syntax of the github spec,
 > not that we are treating github specially.
 > 
 > But currently the "package source" grammar has all kinds of overloading and
 > parsing fanciness to do things like distinguish urls from directories from
 > files. For example, if I have a directory whose name is "x.zip" (certainly
 > a possible thing), then I have to pass special flags to tell raco pkg to
 > treat it like a directory instead of a file. Similarly, I cannot use a file
 > whose name begins with "http://" (or perhaps a prefix of that).
 > 
 > Given all that and the assumption that you still would want something that
 > is as convenient as the current syntax for github-hosted packages, what
 > syntax would you propose?
 > 
 > Robby
 > 
 > 
 > On Sat, Apr 6, 2013 at 4:17 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 
 > > 30 minutes ago, Jay McCarthy wrote:
 > > > I don't like this idea because it means that some HTTP(S) URLs are
 > > > treated specially
 > >
 > > Yes, it's a hack, but a very common one these days.  AFAICT, this is
 > > exactly what happens on android, with certain applications registering
 > > themselves for certain URLs -- based on the domain part (but maybe
 > > other parts too).
 > >
 > > More than that, by including specific things to handle github, the
 > > package system already does this exact kind of hack.
 > >
 > > But note that the main thing that I'm complaining about here is that
 > > it's a bad hack since it invents a new scheme part -- and that's
 > > something that is generally tempting but leads to bad results.  If
 > > it's not a URL, then it shouldn't look like a URL.  (And currently it
 > > isn't a URL -- it's a semi-structured string that happens to look like
 > > a URL sometimes.)
 > >
 > >
 > > > and it complicates or makes impossible doing things like storing a
 > > > package archive in a github repository and using raw/blob URLs that
 > > > still start with github.com/user/repo etc.
 > >
 > > That's very easy to deal with: just look at the URL and don't touch it
 > > if it looks like a zip file or whatever.
 > >
 > >
 > > > If you want to submit a patch to the PNR that parses out some
 > > > HTTP(S) URLs for convenience, I'm fine with that, but you should add
 > > > a second textbox, so someone can input a real package source URL.
 > >
 > > Given the above, there is no need for an extra input or whatever, just
 > > smarter URL recognition.  I can write the regexps and the code, and I
 > > actually grepped for all mentions of `github' -- but they're all over
 > > the place, in several files.
 > >
 > > (I actually expected all of this kind of munging to be in a
 > > centralized place to make it easy to add such things, and I was
 > > surprised that it isn't.  I'd go for a more thorough reorganization
 > > that would do that kind of refactoring, but there is no chance that
 > > I'll have that kind of hacking time now.)
 > >
 > > Yet another comment about that: I completely agree that github is
 > > important, but embracing that in such a specialized way which
 > > contributes to rejecting other such things seems like a strange
 > > decision.  It's exactly this that would actually make me do the above
 > > refactoring if I had the time to do so.
 > >
 > >
 > > A few minutes ago, Jay McCarthy wrote:
 > > > Yes. The github:// just gives basic information: the user, the repo,
 > > > the branch, and then a path.
 > >
 > > (Yeah -- that's what I meant by a semi-structured string that looks
 > > like a URL.)
 > >
 > >
 > > > It uses the user/repo/branch to make a github JSON API request to
 > > > get the auto-generated tgz path and then downloads that.
 > > >
 > > > I presume, however, that Eli is asking me to parse out those things
 > > > from usual HTTP URLs and then deal with stuff like "blob"/etc when
 > > > trying to figure out the internal path the user intended. This would
 > > > be brittle to changes that github makes to its URL scheme, and so I
 > > > think it would be best to put this feature in the PNR UI rather than
 > > > built in.
 > >
 > > One one hand, the parsing is really not that hard.  It's all within
 > > the reach of simple regexps.  On the brittleness side: yes, it's true
 > > that it depends on the format of their URLs -- but (a) these URLs are
 > > so popular, that they would be insane to change them, and (b) you
 > > already depend on the format of URLs in their API.  (And BTW, they
 > > have gone through many API definitions, but have not changed the
 > > repository URLs.)
 > >
 > > --
 > >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 > >                     http://barzilay.org/                   Maze is Life!
 > >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Jay McCarthy <jay.mccarthy@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 17:59:40 -0400

 20 minutes ago, Robby Findler wrote:
 > Eli: it sounds like the main objection is the syntax of the github
 > spec, not that we are treating github specially.
 
 The main objection is that the github spec is a URL with an imaginary
 scheme.  This makes it technically a non-URL, but in practice it is
 *described* as a URL in the docs, and it is parsed using the URL
 library.  (BTW: what happens when GH becomes big enough to actually
 have their URL?)
 
 The more minor objection is that github is too deeply baked into the
 code in a way that makes it hard to modify, and impractical to add new
 bakings.
 
 
 > But currently the "package source" grammar has all kinds of
 > overloading and parsing fanciness to do things like distinguish urls
 > from directories from files. For example, if I have a directory
 > whose name is "x.zip" (certainly a possible thing), then I have to
 > pass special flags to tell raco pkg to treat it like a directory
 > instead of a file.
 
 They use URLs, so you can distinguish between files and directories
 (using a trailing slash) and there are very common ways to detect a
 directory when it's ambiguous.
 
 
 > Similarly, I cannot use a file whose name begins with "http://" (or
 > perhaps a prefix of that).
 
 (That's why they chose "//" which is something that is considered as
 "/" by existing FS things...)
 
 
 > Given all that and the assumption that you still would want
 > something that is as convenient as the current syntax for
 > github-hosted packages, what syntax would you propose?
 
 I would really prefer a plain HTTP/S url, and parsing it.
 
 But without that, it could be something like "github:user/repo/branch"
 or "github::..." or whatever -- something that wouldn't be described
 and handled as a URL.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 18:42:30 -0400

 40 minutes ago, Matthew Flatt wrote:
 > I think a special treatment of "git://github.com/" URIs might be
 > better than special treatment of "https://github.com/" URIs. That
 > would work well when no branch and subpath are specified.
 
 I'd expect something like that to work with any "git://" URLs...  But
 one nice thing about it is that the instructions could tell you to
 click the "Git Read-Only" button and grab that URL.
 
 
 > I don't know how branches and subpaths would work, since those
 > aren't part of the "git:" scheme. Then again, special support for
 > "https://github.com/" may have the same problem: I don't see a way
 > to refer to the branch and subpath with a real "https://github.com/"
 > URL.
 
 They do have very stable URLs, which is what I originally suggested.
 
 
 > We could start with the "git:" scheme and represent branches and
 > subpaths with a syntax along the lines of URL queries. That would
 > still be fake (i.e,. not defined by the official "git:" URI scheme),
 > but it may be less fake and less prone to future collision than a
 > fake "github:" scheme.
 
 For just a branch, a "@branch" suffix could be used, since "@" are not
 valid in paths anyway.  But I still very strongly prefer the plain URL
 thing.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 17:23:54 -0600

 I think it is better to make a new scheme with new rules than abuse on
 old one with its own rules that we will ignore/extend.
 
 On Sat, Apr 6, 2013 at 3:53 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > I think a special treatment of "git://github.com/" URIs might be better
 > than special treatment of "https://github.com/" URIs. That would work
 > well when no branch and subpath are specified.
 >
 > I don't know how branches and subpaths would work, since those aren't
 > part of the "git:" scheme. Then again, special support for
 > "https://github.com/" may have the same problem: I don't see a way to
 > refer to the branch and subpath with a real "https://github.com/" URL.
 >
 > We could start with the "git:" scheme and represent branches and
 > subpaths with a syntax along the lines of URL queries. That would still
 > be fake (i.e,. not defined by the official "git:" URI scheme), but it
 > may be less fake and less prone to future collision than a fake
 > "github:" scheme.
 >
 > At Sat, 6 Apr 2013 16:31:22 -0500, Robby Findler wrote:
 >> Eli: it sounds like the main objection is the syntax of the github spec,
 >> not that we are treating github specially.
 >>
 >> But currently the "package source" grammar has all kinds of overloading and
 >> parsing fanciness to do things like distinguish urls from directories from
 >> files. For example, if I have a directory whose name is "x.zip" (certainly
 >> a possible thing), then I have to pass special flags to tell raco pkg to
 >> treat it like a directory instead of a file. Similarly, I cannot use a file
 >> whose name begins with "http://" (or perhaps a prefix of that).
 >>
 >> Given all that and the assumption that you still would want something that
 >> is as convenient as the current syntax for github-hosted packages, what
 >> syntax would you propose?
 >>
 >> Robby
 >>
 >>
 >> On Sat, Apr 6, 2013 at 4:17 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >>
 >> > 30 minutes ago, Jay McCarthy wrote:
 >> > > I don't like this idea because it means that some HTTP(S) URLs are
 >> > > treated specially
 >> >
 >> > Yes, it's a hack, but a very common one these days.  AFAICT, this is
 >> > exactly what happens on android, with certain applications registering
 >> > themselves for certain URLs -- based on the domain part (but maybe
 >> > other parts too).
 >> >
 >> > More than that, by including specific things to handle github, the
 >> > package system already does this exact kind of hack.
 >> >
 >> > But note that the main thing that I'm complaining about here is that
 >> > it's a bad hack since it invents a new scheme part -- and that's
 >> > something that is generally tempting but leads to bad results.  If
 >> > it's not a URL, then it shouldn't look like a URL.  (And currently it
 >> > isn't a URL -- it's a semi-structured string that happens to look like
 >> > a URL sometimes.)
 >> >
 >> >
 >> > > and it complicates or makes impossible doing things like storing a
 >> > > package archive in a github repository and using raw/blob URLs that
 >> > > still start with github.com/user/repo etc.
 >> >
 >> > That's very easy to deal with: just look at the URL and don't touch it
 >> > if it looks like a zip file or whatever.
 >> >
 >> >
 >> > > If you want to submit a patch to the PNR that parses out some
 >> > > HTTP(S) URLs for convenience, I'm fine with that, but you should add
 >> > > a second textbox, so someone can input a real package source URL.
 >> >
 >> > Given the above, there is no need for an extra input or whatever, just
 >> > smarter URL recognition.  I can write the regexps and the code, and I
 >> > actually grepped for all mentions of `github' -- but they're all over
 >> > the place, in several files.
 >> >
 >> > (I actually expected all of this kind of munging to be in a
 >> > centralized place to make it easy to add such things, and I was
 >> > surprised that it isn't.  I'd go for a more thorough reorganization
 >> > that would do that kind of refactoring, but there is no chance that
 >> > I'll have that kind of hacking time now.)
 >> >
 >> > Yet another comment about that: I completely agree that github is
 >> > important, but embracing that in such a specialized way which
 >> > contributes to rejecting other such things seems like a strange
 >> > decision.  It's exactly this that would actually make me do the above
 >> > refactoring if I had the time to do so.
 >> >
 >> >
 >> > A few minutes ago, Jay McCarthy wrote:
 >> > > Yes. The github:// just gives basic information: the user, the repo,
 >> > > the branch, and then a path.
 >> >
 >> > (Yeah -- that's what I meant by a semi-structured string that looks
 >> > like a URL.)
 >> >
 >> >
 >> > > It uses the user/repo/branch to make a github JSON API request to
 >> > > get the auto-generated tgz path and then downloads that.
 >> > >
 >> > > I presume, however, that Eli is asking me to parse out those things
 >> > > from usual HTTP URLs and then deal with stuff like "blob"/etc when
 >> > > trying to figure out the internal path the user intended. This would
 >> > > be brittle to changes that github makes to its URL scheme, and so I
 >> > > think it would be best to put this feature in the PNR UI rather than
 >> > > built in.
 >> >
 >> > One one hand, the parsing is really not that hard.  It's all within
 >> > the reach of simple regexps.  On the brittleness side: yes, it's true
 >> > that it depends on the format of their URLs -- but (a) these URLs are
 >> > so popular, that they would be insane to change them, and (b) you
 >> > already depend on the format of URLs in their API.  (And BTW, they
 >> > have gone through many API definitions, but have not changed the
 >> > repository URLs.)
 >> >
 >> > --
 >> >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >> >                     http://barzilay.org/                   Maze is Life!
 >> >
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 17:25:56 -0600

 On Sat, Apr 6, 2013 at 3:59 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 20 minutes ago, Robby Findler wrote:
 >> Eli: it sounds like the main objection is the syntax of the github
 >> spec, not that we are treating github specially.
 >
 > The main objection is that the github spec is a URL with an imaginary
 > scheme.  This makes it technically a non-URL, but in practice it is
 > *described* as a URL in the docs, and it is parsed using the URL
 > library.
 
 My reading of the URL spec is that any scheme is valid and they don't
 need to be registered in any way. This *is* a URL. It's just one only
 our tools know about.
 
 > (BTW: what happens when GH becomes big enough to actually
 > have their URL?)
 
 What does this mean?
 
 > The more minor objection is that github is too deeply baked into the
 > code in a way that makes it hard to modify, and impractical to add new
 > bakings.
 
 What other bakings are you thinking of? I don't want to change the
 code that works for imaginary things.
 
 >> But currently the "package source" grammar has all kinds of
 >> overloading and parsing fanciness to do things like distinguish urls
 >> from directories from files. For example, if I have a directory
 >> whose name is "x.zip" (certainly a possible thing), then I have to
 >> pass special flags to tell raco pkg to treat it like a directory
 >> instead of a file.
 >
 > They use URLs, so you can distinguish between files and directories
 > (using a trailing slash) and there are very common ways to detect a
 > directory when it's ambiguous.
 >
 >
 >> Similarly, I cannot use a file whose name begins with "http://" (or
 >> perhaps a prefix of that).
 >
 > (That's why they chose "//" which is something that is considered as
 > "/" by existing FS things...)
 >
 >
 >> Given all that and the assumption that you still would want
 >> something that is as convenient as the current syntax for
 >> github-hosted packages, what syntax would you propose?
 >
 > I would really prefer a plain HTTP/S url, and parsing it.
 >
 > But without that, it could be something like "github:user/repo/branch"
 > or "github::..." or whatever -- something that wouldn't be described
 > and handled as a URL.
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
 
 
 
 --
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
From: Eli Barzilay <eli@barzilay.org>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 19:52:42 -0400

 20 minutes ago, Jay McCarthy wrote:
 > On Sat, Apr 6, 2013 at 3:59 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > 20 minutes ago, Robby Findler wrote:
 > >> Eli: it sounds like the main objection is the syntax of the
 > >> github spec, not that we are treating github specially.
 > >
 > > The main objection is that the github spec is a URL with an
 > > imaginary scheme.  This makes it technically a non-URL, but in
 > > practice it is *described* as a URL in the docs, and it is parsed
 > > using the URL library.
 > 
 > My reading of the URL spec is that any scheme is valid and they
 > don't need to be registered in any way. This *is* a URL. It's just
 > one only our tools know about.
 
 The URL spec is irrelevant, since it imposes no restriction on the
 format of random schemes, so strictly speaking any "x:y" string is a
 "proper" url.  The danger is making up your own rules for a made up
 scheme, which can have a (different) meaning later, or confuse users,
 or get into other tools that will misbehave (like url highlighters).
 
 
 > > (BTW: what happens when GH becomes big enough to actually have
 > > their URL?)
 > 
 > What does this mean?
 
 If there is some meaning for things like github://commit/foo/bar, for
 example, then these made up URLs turn from potentially bad to bad.
 
 
 > > The more minor objection is that github is too deeply baked into
 > > the code in a way that makes it hard to modify, and impractical to
 > > add new bakings.
 > 
 > What other bakings are you thinking of? I don't want to change the
 > code that works for imaginary things.
 
 I'm definitely not talking about imaginary things.  Here are some
 additional bakings that would be very practical to support:
 
 * Other code hosting services some are very popular (like googlecode,
   gitorious, bitbucket).
 
 * gitweb-based servers -- like our own server.  This is actually what
   motivated the whole thing, since Matthew originally wanted to serve
   the handin package from our server.  In addition, it is the most
   popular way to serve a repository, so many people use it.
 
 * Even things like a github enterprize installation.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Sat, 6 Apr 2013 18:15:16 -0600

 --001a11c37b3cf8c14904d9ba36fc
 Content-Type: text/plain; charset=UTF-8
 
 On Saturday, April 6, 2013, Eli Barzilay wrote:
 
 > 20 minutes ago, Jay McCarthy wrote:
 > > On Sat, Apr 6, 2013 at 3:59 PM, Eli Barzilay <eli@barzilay.org<javascript:;>>
 > wrote:
 > > > 20 minutes ago, Robby Findler wrote:
 > > >> Eli: it sounds like the main objection is the syntax of the
 > > >> github spec, not that we are treating github specially.
 > > >
 > > > The main objection is that the github spec is a URL with an
 > > > imaginary scheme.  This makes it technically a non-URL, but in
 > > > practice it is *described* as a URL in the docs, and it is parsed
 > > > using the URL library.
 > >
 > > My reading of the URL spec is that any scheme is valid and they
 > > don't need to be registered in any way. This *is* a URL. It's just
 > > one only our tools know about.
 >
 > The URL spec is irrelevant, since it imposes no restriction on the
 > format of random schemes, so strictly speaking any "x:y" string is a
 > "proper" url.  The danger is making up your own rules for a made up
 > scheme, which can have a (different) meaning later, or confuse users,
 > or get into other tools that will misbehave (like url highlighters).
 
 
 >
 > > > (BTW: what happens when GH becomes big enough to actually have
 > > > their URL?)
 > >
 > > What does this mean?
 >
 > If there is some meaning for things like github://commit/foo/bar, for
 > example, then these made up URLs turn from potentially bad to bad.
 >
 >
  I am fine with that risk, but if you are very worried then we should use a
 scheme that they would never want like
 
 racketpkg://github/....
 
 > > The more minor objection is that github is too deeply baked into
 > > > the code in a way that makes it hard to modify, and impractical to
 > > > add new bakings.
 > >
 > > What other bakings are you thinking of? I don't want to change the
 > > code that works for imaginary things.
 >
 > I'm definitely not talking about imaginary things.  Here are some
 > additional bakings that would be very practical to support:
 >
 > * Other code hosting services some are very popular (like googlecode,
 >   gitorious, bitbucket).
 >
 > * gitweb-based servers -- like our own server.  This is actually what
 >   motivated the whole thing, since Matthew originally wanted to serve
 >   the handin package from our server.  In addition, it is the most
 >   popular way to serve a repository, so many people use it.
 >
 > * Even things like a github enterprize installation.
 
 
 My original plan was to directly support git:// and use the 'archive'
 protocol, but after I implemented that I learned that github did not
 support it.
 
 I would gladly accept patches that supported these things. I don't see a
 way to usefully unify them, so I don't see value in unifying them with
 github. If you do, a patch that did it would be awesome, I imagine
 
 Jay
 
 
 
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
 >
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
 
 --001a11c37b3cf8c14904d9ba36fc
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <br><br>On Saturday, April 6, 2013, Eli Barzilay  wrote:<br><blockquote cla=
 ss=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;pa=
 dding-left:1ex">20 minutes ago, Jay McCarthy wrote:<br>
 &gt; On Sat, Apr 6, 2013 at 3:59 PM, Eli Barzilay &lt;<a href=3D"javascript=
 :;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;eli@barzilay.org&#39;)">eli@b=
 arzilay.org</a>&gt; wrote:<br>
 &gt; &gt; 20 minutes ago, Robby Findler wrote:<br>
 &gt; &gt;&gt; Eli: it sounds like the main objection is the syntax of the<b=
 r>
 &gt; &gt;&gt; github spec, not that we are treating github specially.<br>
 &gt; &gt;<br>
 &gt; &gt; The main objection is that the github spec is a URL with an<br>
 &gt; &gt; imaginary scheme. =C2=A0This makes it technically a non-URL, but =
 in<br>
 &gt; &gt; practice it is *described* as a URL in the docs, and it is parsed=
 <br>
 &gt; &gt; using the URL library.<br>
 &gt;<br>
 &gt; My reading of the URL spec is that any scheme is valid and they<br>
 &gt; don&#39;t need to be registered in any way. This *is* a URL. It&#39;s =
 just<br>
 &gt; one only our tools know about.<br>
 <br>
 The URL spec is irrelevant, since it imposes no restriction on the<br>
 format of random schemes, so strictly speaking any &quot;x:y&quot; string i=
 s a<br>
 &quot;proper&quot; url. =C2=A0The danger is making up your own rules for a =
 made up<br>
 scheme, which can have a (different) meaning later, or confuse users,<br>
 or get into other tools that will misbehave (like url highlighters).</block=
 quote><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-l=
 eft:1px #ccc solid;padding-left:1ex">
 <br>
 <br>
 &gt; &gt; (BTW: what happens when GH becomes big enough to actually have<br=
 >
 &gt; &gt; their URL?)<br>
 &gt;<br>
 &gt; What does this mean?<br>
 <br>
 If there is some meaning for things like github://commit/foo/bar, for<br>
 example, then these made up URLs turn from potentially bad to bad.<br>
 <br></blockquote><div><br></div><div>=C2=A0I am fine with that risk, but=C2=
 =A0<span></span>if you are very worried then we should use a scheme that th=
 ey would never want like</div><div><br></div><div>racketpkg://github/....</=
 div><div>
 <br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bord=
 er-left:1px #ccc solid;padding-left:1ex">
 &gt; &gt; The more minor objection is that github is too deeply baked into<=
 br>
 &gt; &gt; the code in a way that makes it hard to modify, and impractical t=
 o<br>
 &gt; &gt; add new bakings.<br>
 &gt;<br>
 &gt; What other bakings are you thinking of? I don&#39;t want to change the=
 <br>
 &gt; code that works for imaginary things.<br>
 <br>
 I&#39;m definitely not talking about imaginary things. =C2=A0Here are some<=
 br>
 additional bakings that would be very practical to support:<br>
 <br>
 * Other code hosting services some are very popular (like googlecode,<br>
 =C2=A0 gitorious, bitbucket).<br>
 <br>
 * gitweb-based servers -- like our own server. =C2=A0This is actually what<=
 br>
 =C2=A0 motivated the whole thing, since Matthew originally wanted to serve<=
 br>
 =C2=A0 the handin package from our server. =C2=A0In addition, it is the mos=
 t<br>
 =C2=A0 popular way to serve a repository, so many people use it.<br>
 <br>
 * Even things like a github enterprize installation.</blockquote><div><br><=
 /div><div>My original plan was to directly support git:// and use the &#39;=
 archive&#39; protocol, but after I implemented that I learned that github d=
 id not support it.</div>
 <div><br></div><div>I would gladly accept patches that supported these thin=
 gs. I don&#39;t see a way to usefully unify them, so I don&#39;t see value =
 in unifying them with github. If you do, a patch that did it would be aweso=
 me, I imagine</div>
 <div><br></div><div>Jay</div><div><br></div><div>=C2=A0</div><blockquote cl=
 ass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;p=
 adding-left:1ex">
 <br>
 --<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((lambda (x) (x x)) (lambda (x) (x x))) =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a hr=
 ef=3D"http://barzilay.org/" target=3D"_blank">http://barzilay.org/</a> =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze is Life!<b=
 r>
 </blockquote><br><br>-- <br>Jay McCarthy &lt;<a href=3D"mailto:jay@cs.byu.e=
 du" target=3D"_blank">jay@cs.byu.edu</a>&gt;<br>Assistant Professor / Brigh=
 am Young University<br><a href=3D"http://faculty.cs.byu.edu/~jay" target=3D=
 "_blank">http://faculty.cs.byu.edu/~jay</a><br>
 <br>&quot;The glory of God is Intelligence&quot; - D&amp;C 93<br>
 
 --001a11c37b3cf8c14904d9ba36fc--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Cc: 
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Fri, 23 Aug 2013 07:20:54 -0600

 I'm going to push a change so that instead of
 
  github://github.com/<user>/<repo>/<branch>[/<subpath>]
 
 the format for GitHub references will be
 
  git://github.com/<user>/<repo>[.git][/][?path=<subpath>][#<branch>]
 
 
 Naturally, the "github:" form will be supported for backward
 compatibility, at least for a while.
 
 
 My rationale (based on the discussion):
 
  * We're not supposed to make up unofficial schemes for URLs, and it's
    unlikely that we could make the "github:" scheme official.
 
    Making up extensions to the "git:" scheme has a similar problem, but
    I think it's much less of a problem.
 
  * "git:" is less surprising than "github:".
 
    People are used to "git:" references, and so it will be easier to
    recognize them, write them, and not have to think hard about whether
    it's "git:" or "github:".
 
  * A "git:" reference is nearly compatible with git.
 
    A simple GitHub reference (no subpath query or branch fragment) is a
    "git:" URL --- even though GitHub doesn't actually support that
    protocol, currently.
 
    We might eventually extend "git:" to not require "github.com" and
    work with the git protocol.
 
  * Special handling of "git:" URLs is less surprising than special
    handling of "https:" URLs.
 
    While I like the idea of being able to copy and paste the URL that
    GitHub provides, I worry that it could lead to ambiguity in a way
    that "git:" handling doesn't. In particular, it would make the
    parsing rules less regular (i.e., a remote archive reference would
    be anything of a certain URL form that doesn't refer to certain
    specially handled sites).
 
  * The "git:" form with an optional branch fragment matches the syntax
    of npm.
 
    Whether or not the Racket and npm communities actually overlap much,
    I don't find other precedents, and following any reasonable
    convention seems better than following none.
 
  * I like how the query and fragment parts separate out the optional
    parts of the reference from the required parts.
 
    I'm not sure that using a query for subpaths is best, but that's the
    best idea I have.
 
Responsible changed from "nobody" to "mflatt" by mflatt@racket-lang.org at Fri, 23 Aug 2013 10:35:06 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/e1efd2d98f
State changed from "open" to "closed" by mflatt@racket-lang.org at Fri, 23 Aug 2013 10:35:06 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/e1efd2d98f
  | package system: change syntax of a GitHub package source to "git://..."
  | 
  | Besides changing the URL scheme, the tag or branch is optional and
  | specified as a fragment (inspired by npm). Also, any subpath is expressed
  | as a "path=..." query (which similarly avoids giving a different meaning
  | to URLs than `git' itself would). The repository name can have a ".git"
  | suffix.
  | 
  | The "github://..." format is still supported for compatibility, but
  | `--type github' adds "git://..." instead of "github://..." if
  | neither is already present (which is incompatible, since branches
  | and tags are handled differently for the two forms).
  | 
  | Closes PR 13656
  | 
  | (See the PR for a discussion and my rationale for this choice.)

From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Fri, 23 Aug 2013 14:55:24 -0400

 On 2013-08-23 07:20:54 -0600, Matthew Flatt wrote:
 > I'm going to push a change so that instead of
 > 
 >  github://github.com/<user>/<repo>/<branch>[/<subpath>]
 > 
 > the format for GitHub references will be
 > 
 >  git://github.com/<user>/<repo>[.git][/][?path=<subpath>][#<branch>]
 
 Thanks Matthew, this looks like a nice improvement.
 
 >  * Special handling of "git:" URLs is less surprising than special
 >    handling of "https:" URLs.
 >
 >    While I like the idea of being able to copy and paste the URL that
 >    GitHub provides, I worry that it could lead to ambiguity in a way
 >    that "git:" handling doesn't. In particular, it would make the
 >    parsing rules less regular (i.e., a remote archive reference would
 >    be anything of a certain URL form that doesn't refer to certain
 >    specially handled sites).
 
 What if we had special handling of SSH clone URLs instead? e.g.,
   git@github.com:takikawa/taglib-racket.git
 
 These don't look like other supported kinds of package URLs (unless we
 get support for downloading packages via ssh). I guess the problem of
 specifying branches, subpaths, etc. still remains though.
 
 Cheers,
 Asumu
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13656: package publishing uses an imaginary
 "github" scheme
Date: Wed, 28 Aug 2013 07:36:53 -0600

 At Fri, 23 Aug 2013 14:55:24 -0400, Asumu Takikawa wrote:
 > On 2013-08-23 07:20:54 -0600, Matthew Flatt wrote:
 > >  * Special handling of "git:" URLs is less surprising than special
 > >    handling of "https:" URLs.
 > >
 > >    While I like the idea of being able to copy and paste the URL that
 > >    GitHub provides, I worry that it could lead to ambiguity in a way
 > >    that "git:" handling doesn't. In particular, it would make the
 > >    parsing rules less regular (i.e., a remote archive reference would
 > >    be anything of a certain URL form that doesn't refer to certain
 > >    specially handled sites).
 > 
 > What if we had special handling of SSH clone URLs instead? e.g.,
 >   git@github.com:takikawa/taglib-racket.git
 > 
 > These don't look like other supported kinds of package URLs (unless we
 > get support for downloading packages via ssh). I guess the problem of
 > specifying branches, subpaths, etc. still remains though.
 
 I think I didn't really consider this because I wanted to stick with a
 URL format. You also make a good point about branches and subpaths; I'm
 not sure how to fit them in, while "http:" URL conventions suggest a
 way to extend "git:".
 
 I think either could be made to work, but I still favor "git:". I'd
 also prefer to just have one way to refer to GitHub repositories, I
 think (and I think "github:" support should eventually go away).
 
