From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Apr 30 19:18:33 2016
Received: from mail-io0-f182.google.com (mail-io0-f182.google.com [209.85.223.182])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u3UNISgg006523
	for <bugs@bugs.plt-scheme.org>; Sat, 30 Apr 2016 19:18:29 -0400
Message-Id: <201604302318.u3UNIQL0006515@winooski.ccs.neu.edu>
Date: Sat, 30 Apr 2016 19:18:26 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: ellipsis in quasiquoted `match` patterns

>Number:         15297
>Category:       all
>Synopsis:       ellipsis in quasiquoted `match` patterns
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Apr 30 19:20:01 -0400 2016
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.3
>Environment:
Any
>Description:
1. It's confusing that an ellipsis (and its other _-ed forms) is still
   treated as such in quoasi-quoted patterns.  IMO it's confusing enough
   to be mentioned in the docs explicitly.

2. The syntax definition that *is* in the docs is unclear to me wrt
   ellipsis: I don't understand the "... is literal" comment or how that
   makes `...` different in some way than `___`.  I also think that the
   description of "qp" above it is missing things like
       (qp ... qp ooo qp ...)
   I'm guessing that it wasn't intended to be completely formal, which
   makes the above point even stronger...

3. Yet another thing that is worth mentioning explicitly is that `...`
   (and the _-ed forms) are different than `_` which is *not* treated as
   its usual wild-card-ness in q quasiquoted pattern.

4. Finally, it's probably too incompatible to fix it, but pretending
   uniformity and unquoting the meta-things is impossible now:
       (match '(foo foo) [`(,x ,_) #t] [_ #f])
   is the right thing, but
       (match '(foo foo) [`(,x ,...) #t] [_ #f])
   is a syntax error.

   If the latter is allowed, then you could do that "prenteded
   uniformity": it's as if a quasiquoted `...` is always implicitly
   unquoted.  Not ideal but easier to remember.

(This is not the first time I ran into this thing -- but for some reason
I always just switched to explicit constructors instead of getting some
sense out of qq-ed patterns.)
>How-To-Repeat:

>Fix:
