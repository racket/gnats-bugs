From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Apr  1 07:56:52 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p31Bulj4017736
	for <bugs@bugs.plt-scheme.org>; Fri, 1 Apr 2011 07:56:48 -0400
Message-Id: <201104011156.p31Buhu9017731@champlain.ccs.neu.edu>
Date: Fri, 1 Apr 2011 07:56:43 -0400
From: ryanc@racket-lang.org
To: bugs@racket-lang.org
Subject: can't apply arrow contract to procedure that accepts all keywords

>Number:         11833
>Category:       all
>Synopsis:       can't apply arrow contract to procedure that accepts all keywords
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Apr 01 08:00:01 -0400 2011
>Closed-Date:    Mon Apr 04 23:18:01 -0400 2011
>Last-Modified:  Mon Apr 04 23:18:01 -0400 2011
>Originator:     Ryan Culpepper
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.0.5--2011-04-01(c677932/g)
>Environment:
unix "Linux artichoke 2.6.35-28-generic #49-Ubuntu SMP Tue Mar 1 14:40:58 UTC 2011 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 142098616

Collections:
("/home/ryan/.racket/5.1.0.5/collects"
 (non-existent-path))
("/home/ryan/projects/racket/collects"
 ("swindle" "raco" "planet" "help" "info-domain" "scheme" "repo-time-stamp" "games" "honu" "syntax" "graphics" "browser" "stepper" "mzlib" "texpict" "redex" "r6rs" "typed" "picturing-programs" "version" "meta" "macro-debugger" "mzscheme" "mred" "preprocessor" "syntax-color" "framework" "mrlib" "sirmail" "rnrs" "htdp" "tests" "lazy" "frtime" "combinator-parser" "scriblib" "srfi" "waterworld" "afm" "compiler" "2htdp" "net" "srpersist" "at-exp" "config" "data" "schemeunit" "dynext" "defaults" "web-server" "make" "icons" "ffi" "xml" "typed-scheme" "algol60" "tex2page" "reader" "readline" "trace" "deinprogramm" "launcher" "racklog" "scribblings" "hierlist" "embedded-gui" "guibuilder" "racket" "handin-client" ".gitignore" "slatex" "profile" "datalog" "lang" "mzcom" "plai" "html" "file" "test-box-recovery" "setup" "scribble" "string-constants" "plot" "test-engine" "drracket" "unstable" "teachpack" "s-exp" "mysterx" "eopl" "r5rs" "gui-debugger" "errortrace" "mz" "parser-tools" "wxme!
 " "rackunit" "drscheme" "handin-server" "openssl" "sgl" "slideshow"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
Applying an arrow contract to a procedure that accepts all keywords (such as one created by make-keyword-procedure) causes an internal error.
>How-To-Repeat:
> (define f (make-keyword-procedure void))
> (define/contract g (-> #:a string? string?) f)
member: not a proper list: #f

> (procedure-keywords f)
'()
#f  ;; <- I suspect this is the cause
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Fri, 01 Apr 2011 10:12:12 -0400
Reason>>> A commit by robby@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/b926b17d7e
From: Robby Findler <robby@eecs.northwestern.edu>
To: ryanc@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure
 that accepts all keywords
Date: Fri, 1 Apr 2011 09:13:22 -0500

 On Fri, Apr 1, 2011 at 7:00 AM,  <ryanc@racket-lang.org> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=11833
 
 Fixing the obvious bug (pushed) leads to this program:
 
 #lang racket/base
 (require racket/contract)
 
 ((contract (-> #:a string? string?)
            (make-keyword-procedure void)
            'pos 'neg)
  #:a "x")
 
 producing this:
 
 chaperone-procedure: arity of chaperoning procedure:
 #<procedure:kw-chaperone> does not cover arity of original procedure:
 #<procedure:void>
 
 Does this mean that one would have to call procedure-reduce-arity
 before passing the original procedure to chaperone-procedure (but
 after testing the arity constraints)?
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: ryanc@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure
 that accepts all keywords
Date: Fri, 1 Apr 2011 09:22:42 -0500

 On Fri, Apr 1, 2011 at 9:21 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Fri, 1 Apr 2011 09:13:22 -0500, Robby Findler wrote:
 >> Fixing the obvious bug (pushed) leads to this program:
 >>
 >> #lang racket/base
 >> (require racket/contract)
 >>
 >> ((contract (-> #:a string? string?)
 >>            (make-keyword-procedure void)
 >>            'pos 'neg)
 >>  #:a "x")
 >>
 >> producing this:
 >>
 >> chaperone-procedure: arity of chaperoning procedure:
 >> #<procedure:kw-chaperone> does not cover arity of original procedure:
 >> #<procedure:void>
 >>
 >> Does this mean that one would have to call procedure-reduce-arity
 >> before passing the original procedure to chaperone-procedure (but
 >> after testing the arity constraints)?
 >
 > That sounds right, but is something about keywords special? That is, I
 > imagine that
 >
 >  (contract (-> integer? integer?) + 'pos 'neg)
 >
 > must similarly reduce the arity of `+' before adding a chaperone.
 
 Yeah, I was just wondering the same thing with these examples, which work:
 
 ((contract (-> #:a string? string?)
            (λ (#:a s [y "whatever"]) y)
            'pos 'neg)
  #:a "x")
 
 ((contract (-> #:a string? string?)
            (λ (#:a s #:y [y "whatever"]) y)
            'pos 'neg)
  #:a "x")
 
 so something is doing what seems like it should be 1/2 of the job or something?
 
 Robby
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: ryanc@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure
 that accepts all keywords
Date: Fri, 1 Apr 2011 08:21:03 -0600

 At Fri, 1 Apr 2011 09:13:22 -0500, Robby Findler wrote:
 > Fixing the obvious bug (pushed) leads to this program:
 > 
 > #lang racket/base
 > (require racket/contract)
 > 
 > ((contract (-> #:a string? string?)
 >            (make-keyword-procedure void)
 >            'pos 'neg)
 >  #:a "x")
 > 
 > producing this:
 > 
 > chaperone-procedure: arity of chaperoning procedure:
 > #<procedure:kw-chaperone> does not cover arity of original procedure:
 > #<procedure:void>
 > 
 > Does this mean that one would have to call procedure-reduce-arity
 > before passing the original procedure to chaperone-procedure (but
 > after testing the arity constraints)?
 
 That sounds right, but is something about keywords special? That is, I
 imagine that 
 
  (contract (-> integer? integer?) + 'pos 'neg)
 
 must similarly reduce the arity of `+' before adding a chaperone.
 

Responsible changed from "robby" to "sstrickl" by sstrickl at Fri, 01 Apr 2011 10:43:24 -0400
Reason>>> I'm responsible for whatever changes to arrow contracts caused this.

From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, ryanc@racket-lang.org,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure that accepts all keywords
Date: Fri, 1 Apr 2011 10:41:12 -0400

 On Apr 1, 2011, at 10:22 AM, Robby Findler wrote:
 > On Fri, Apr 1, 2011 at 9:21 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 >> At Fri, 1 Apr 2011 09:13:22 -0500, Robby Findler wrote:
 >>> Fixing the obvious bug (pushed) leads to this program:
 >>> 
 >>> #lang racket/base
 >>> (require racket/contract)
 >>> 
 >>> ((contract (-> #:a string? string?)
 >>>            (make-keyword-procedure void)
 >>>            'pos 'neg)
 >>>  #:a "x")
 >>> 
 >>> producing this:
 >>> 
 >>> chaperone-procedure: arity of chaperoning procedure:
 >>> #<procedure:kw-chaperone> does not cover arity of original procedure:
 >>> #<procedure:void>
 >>> 
 >>> Does this mean that one would have to call procedure-reduce-arity
 >>> before passing the original procedure to chaperone-procedure (but
 >>> after testing the arity constraints)?
 >> 
 >> That sounds right, but is something about keywords special? That is, I
 >> imagine that
 >> 
 >>  (contract (-> integer? integer?) + 'pos 'neg)
 >> 
 >> must similarly reduce the arity of `+' before adding a chaperone.
 > 
 > Yeah, I was just wondering the same thing with these examples, which work:
 > 
 > ((contract (-> #:a string? string?)
 >           (λ (#:a s [y "whatever"]) y)
 >           'pos 'neg)
 > #:a "x")
 > 
 > ((contract (-> #:a string? string?)
 >           (λ (#:a s #:y [y "whatever"]) y)
 >           'pos 'neg)
 > #:a "x")
 > 
 > so something is doing what seems like it should be 1/2 of the job or something?
 
 I try to generate apply wrappers for chaperone-procedure that are as general as the original procedure, but generate contract errors (not apply errors) for cases where people use the arity/keyword cases allowed by the original procedure which are not allowed by the contract.  It would be nice to keep that, so if there's a bug in what I'm doing, I'd rather fix that then go the reduce-arity route.  Let me take a look.
 
 Stevie
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, ryanc@racket-lang.org,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure that accepts all keywords
Date: Fri, 1 Apr 2011 08:46:03 -0600

 I'm surprised by the amount of code generated by expanding the contract
 `(-> integer? integer?)'. Does all of this code need to be "inlined",
 or can some of it be lifted out so that it isn't duplicated in every
 use of `->'?
 
 > (syntax->datum (expand '(-> integer? integer?)))
 '(let-values ()
    (let-values ()
      (#%app
       build-->
       '->
       '#f
       '#f
       (#%app list integer?)
       '()
       '#f
       (#%app list)
       '()
       '()
       '()
       (#%app list integer?)
       '#f
       (lambda (wrapper blame chk ctc integer?9 integer?11)
         (lambda (val)
           (#%app chk val '#f)
           (#%app
            wrapper
            val
            (let-values (((rng-checker49)
                          (#%app
                           values
                           (let-values (((core)
                                         (lambda (given-kws
                                                  given-args
                                                  rng4813
                                                  rng4814
                                                  new-rest)
                                           (let-values (((rng48)
                                                         (if rng4814
                                                           rng4813
                                                           unspecified-dom)))
                                             (let-values (((rest47) new-rest))
                                               (if (let-values (((or-part)
                                                                 (#%app
                                                                  pair?
                                                                  rest47)))
                                                     (if or-part
                                                       or-part
                                                       (#%app
                                                        eq?
                                                        unspecified-dom
                                                        rng48)))
                                                 (let-values ()
                                                   (let-values (((num-values)
                                                                 (#%app
                                                                  +
                                                                  (#%app
                                                                   length
                                                                   rest47)
                                                                  (if (#%app
                                                                       eq?
                                                                       unspecified-dom
                                                                       rng48)
                                                                    '0
                                                                    '1))))
                                                     (#%app
                                                      raise-blame-error
                                                      blame
                                                      val
                                                      '"expected ~a value~a, returned ~a value~a"
                                                      '1
                                                      '""
                                                      num-values
                                                      (if (#%app
                                                           =
                                                           num-values
                                                           '1)
                                                        '""
                                                        '"s"))))
                                                 (#%app void))
                                               (#%app integer?11 rng48))))))
                             (case-lambda
                              (() (#%app core null null '#f '#f null))
                              ((rng4813 . rest47)
                               (#%app core null null rng4813 '#t rest47)))))))
              (let-values (((basic-lambda50)
                            (lambda (dom46)
                              (#%app
                               call-with-immediate-continuation-mark
                               contract-key
                               (lambda (m)
                                 (if (if m
                                       (if (#%app = (#%app length m) '1)
                                         (#%app
                                          andmap
                                          procedure-closure-contents-eq?
                                          m
                                          (#%app list integer?11))
                                         '#f)
                                       '#f)
                                   (let-values ()
                                     (#%app values (#%app integer?9 dom46)))
                                   (let-values ()
                                     (#%app
                                      values
                                      rng-checker49
                                      (#%app integer?9 dom46)))))))))
                (if (#%app matches-arity-exactly? val '1 null null)
                  basic-lambda50
                  (let-values (((vr va) (#%app procedure-keywords val))
                               ((basic-checker52)
                                (lambda args
                                  (if (#%app = (#%app length args) '1)
                                    (#%app void)
                                    (let-values ()
                                      (#%app
                                       raise-blame-error
                                       blame
                                       val
                                       '"received ~a argument~a, expected ~a"
                                       (#%app length args)
                                       (if (#%app = (#%app length args) '1)
                                         '""
                                         '"s")
                                       '"1 non-keyword argument")))
                                  (#%app apply basic-lambda50 args))))
                    (if (let-values (((or-part) (#%app not va)))
                          (if or-part
                            or-part
                            (let-values (((or-part) (#%app pair? vr)))
                              (if or-part or-part (#%app pair? va)))))
                      (#%app
                       make-keyword-procedure
                       (lambda (kwds kwd-args . args)
                         (#%app
                          raise-blame-error
                          (#%app blame-swap blame)
                          val
                          '"expected no keywords"))
                       basic-checker52)
                      basic-checker52)))))
            impersonator-prop:contracted
            ctc
            impersonator-prop:application-mark
            (#%app cons contract-key (#%app list integer?11))))))))
 > 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Stevie Strickland <sstrickl@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        "ryanc@racket-lang.org" <ryanc@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure
 that accepts all keywords
Date: Fri, 1 Apr 2011 09:54:41 -0500

 Ugh. This is NOT wat it did when I last left it. I spent a lot of time
 getting the expansion small and still efficient in fact.
 
 Stevie: if this is what it rakes to signal those kinds of errors, let's not.
 
 Robby
 
 On Friday, April 1, 2011, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > I'm surprised by the amount of code generated by expanding the contract
 > `(-> integer? integer?)'. Does all of this code need to be "inlined",
 > or can some of it be lifted out so that it isn't duplicated in every
 > use of `->'?
 >
 >> (syntax->datum (expand '(-> integer? integer?)))
 > '(let-values ()
 >    (let-values ()
 >      (#%app
 >       build-->
 >       '->
 >       '#f
 >       '#f
 >       (#%app list integer?)
 >       '()
 >       '#f
 >       (#%app list)
 >       '()
 >       '()
 >       '()
 >       (#%app list integer?)
 >       '#f
 >       (lambda (wrapper blame chk ctc integer?9 integer?11)
 >         (lambda (val)
 >           (#%app chk val '#f)
 >           (#%app
 >            wrapper
 >            val
 >            (let-values (((rng-checker49)
 >                          (#%app
 >                           values
 >                           (let-values (((core)
 >                                         (lambda (given-kws
 >                                                  given-args
 >                                                  rng4813
 >                                                  rng4814
 >                                                  new-rest)
 >                                           (let-values (((rng48)
 >                                                         (if rng4814
 >                                                           rng4813
 >                                                           unspecified-dom)))
 >                                             (let-values (((rest47) new-rest))
 >                                               (if (let-values (((or-part)
 >                                                                 (#%app
 >                                                                  pair?
 >                                                                  rest47)))
 >                                                     (if or-part
 >                                                       or-part
 >                                                       (#%app
 >                                                        eq?
 >                                                        unspecified-dom
 >                                                        rng48)))
 >                                                 (let-values ()
 >                                                   (let-values (((num-values)
 >                                                                 (#%app
 >                                                                  +
 >                                                                  (#%app
 >                                                                   length
 >                                                                   rest47)
 >                                                                  (if (#%app
 >                                                                       eq?
 >                                                                       unspecified-dom
 >                                                                       rng48)
 >                                                                    '0
 >                                                                    '1))))
 >                                                     (#%app
 >                                                      raise-blame-error
 >                                                      blame
 >                                                      val
 >                                                      '"expected ~a value~a, returned ~a value~a"
 >                                                      '1
 >                                                      '""
 >                                                      num-values
 >                                                      (if (#%app
 >                                                           =
 >                                                           num-values
 >                                                           '1)
 >                                                        '""
 >                                                        '"s"))))
 >                                                 (#%app void))
 >                                               (#%app integer?11 rng48))))))
 >                             (case-lambda
 >                              (() (#%app core null null '#f '#f null))
 >                              ((rng4813 . rest47)
 >                               (#%app core null null rng4813 '#t rest47)))))))
 >              (let-values (((basic-lambda50)
 >                            (lambda (dom46)
 >                              (#%app
 >                               call-with-immediate-continuation-mark
 >                               contract-key
 >                               (lambda (m)
 >                                 (if (if m
 >                                       (if (#%app = (#%app length m) '1)
 >                                         (#%app
 >                                          andmap
 >                                          procedure-closure-contents-eq?
 >                                          m
 >                                          (#%app list integer?11))
 >                                         '#f)
 >                                       '#f)
 >                                   (let-values ()
 >                                     (#%app values (#%app integer?9 dom46)))
 >                                   (let-values ()
 >                                     (#%app
 >                                      values
 >                                      rng-checker49
 >                                      (#%app integer?9 dom46)))))))))
 >                (if (#%app matches-arity-exactly? val '1 null null)
 >                  basic-lambda50
 >                  (let-values (((vr va) (#%app procedure-keywords val))
 >                               ((basic-checker52)
 >                                (lambda args
 >                                  (if (#%app = (#%app length args) '1)
 >                                    (#%app void)
 >                                    (let-values ()
 >                                      (#%app
 >                                       raise-blame-error
 >                                       blame
 >                                       val
 >                                       '"received ~a argument~a, expected ~a"
 >                                       (#%app length args)
 >                                       (if (#%app = (#%app length args) '1)
 >                                         '""
 >                                         '"s")
 >                                       '"1 non-keyword argument")))
 >                                  (#%app apply basic-lambda50 args))))
 >                    (if (let-values (((or-part) (#%app not va)))
 >                          (if or-part
 >                            or-part
 >                            (let-values (((or-part) (#%app pair? vr)))
 >                              (if or-part or-part (#%app pair? va)))))
 >                      (#%app
 >                       make-keyword-procedure
 >                       (lambda (kwds kwd-args . args)
 >                         (#%app
 >                          raise-blame-error
 >                          (#%app blame-swap blame)
 >                          val
 >                          '"expected no keywords"))
 >                       basic-checker52)
 >                      basic-checker52)))))
 >            impersonator-prop:contracted
 >            ctc
 >            impersonator-prop:application-mark
 >            (#%app cons contract-key (#%app list integer?11))))))))
 >>
 >
 >
 
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, ryanc@racket-lang.org,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure that accepts all keywords
Date: Fri, 1 Apr 2011 10:54:34 -0400

 On Apr 1, 2011, at 10:46 AM, Matthew Flatt wrote:
 > I'm surprised by the amount of code generated by expanding the contract
 > `(-> integer? integer?)'. Does all of this code need to be "inlined",
 > or can some of it be lifted out so that it isn't duplicated in every
 > use of `->'?
 
 Part of what's going on here is that we have to generate two chaperone wrappers, depending on whether the procedure we get has exactly the same arity (that is, a procedure that takes only one mandatory non-keyword argument), though the non-matching wrapper should just either a) cause a contract error if the procedure is called in a way not matching the contract or b) call the matching wrapper if it is called properly.
 
 While I did try several different approaches to this, and so I tried to make sure it was as clean as possible, I need to go back and see whether or not I might have sloppily left something unnecessary in there.  I may have also put some things in as part of the expanded syntax that would have been better written as separately-called runtime functions (which is what I think you meant by lifting), so I'll check into that also.
 
 Stevie
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        "ryanc@racket-lang.org" <ryanc@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure that accepts all keywords
Date: Fri, 1 Apr 2011 11:03:20 -0400

 On Apr 1, 2011, at 10:54 AM, Robby Findler wrote:
 > Ugh. This is NOT wat it did when I last left it. I spent a lot of time
 > getting the expansion small and still efficient in fact.
 > 
 > Stevie: if this is what it rakes to signal those kinds of errors, let's not.
 
 Looking over the expanded code Matthew provided, I'm actually surprised by some of the code that I'm seeing for a non-keyword using, non-optional argument using, single value returning contract.  I think that the size of this code may just be mistakes I've made.  Give me the weekend to look it over to see what I can find?
 
 Stevie
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>,
        "ryanc@racket-lang.org" <ryanc@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11833: can't apply arrow contract to procedure
 that accepts all keywords
Date: Fri, 1 Apr 2011 10:14:26 -0500

 Sure! And I'm happy to help however I can. (it may be useful to
 compare with how far I got in the pre-chaperone world)
 
 Thanks.
 
 Robby
 
 On Friday, April 1, 2011, Stevie Strickland <sstrickl@ccs.neu.edu> wrote:
 > On Apr 1, 2011, at 10:54 AM, Robby Findler wrote:
 >> Ugh. This is NOT wat it did when I last left it. I spent a lot of time
 >> getting the expansion small and still efficient in fact.
 >>
 >> Stevie: if this is what it rakes to signal those kinds of errors, let's not.
 >
 > Looking over the expanded code Matthew provided, I'm actually surprised by some of the code that I'm seeing for a non-keyword using, non-optional argument using, single value returning contract.  I think that the size of this code may just be mistakes I've made.  Give me the weekend to look it over to see what I can find?
 >
 > Stevie
 
Responsible changed from "sstrickl" to "mflatt" by mflatt@racket-lang.org at Mon, 04 Apr 2011 23:18:01 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/d359daa5f5
State changed from "open" to "closed" by mflatt@racket-lang.org at Mon, 04 Apr 2011 23:18:01 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/d359daa5f5
