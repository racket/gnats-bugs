From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Nov 29 17:27:56 2012
Received: from mail-ia0-f172.google.com (mail-ia0-f172.google.com [209.85.210.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id qATMRrb8028894
	for <bugs@bugs.plt-scheme.org>; Thu, 29 Nov 2012 17:27:54 -0500
Message-Id: <201211292227.qATMRokf028889@champlain.ccs.neu.edu>
Date: Thu, 29 Nov 2012 17:27:50 -0500
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: typed/rackunit can't test higher-order values

>Number:         13326
>Category:       all
>Synopsis:       typed/rackunit can't test higher-order values
>Class:          sw-bug
>Responsible:    asumu
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Nov 29 17:28:02 -0500 2012
>Closed-Date:    Mon Dec 03 18:00:38 -0500 2012
>Last-Modified:  Tue Dec 04 13:49:12 -0500 2012
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1.9--2012-11-29(1f6b15da/d)
>Environment:
unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 681377832
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/neil/.racket/5.3.1.9/collects"
 (non-existent-path))
("/home/neil/plt/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "planet2" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "ra!
 co" "gui-debugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
This is currently affecting testing `math/array'. I'm getting around it using `check-true' and `equal?', but those don't give very informative messages when tests fail.
>How-To-Repeat:
#lang typed/racket
(require typed/rackunit)

(check-equal? (delay 0) (delay 0))


Run, and get this error:

check-equal?: broke its contract
 Attempted to use a higher-order value passed as `Any` in untyped code
 in: the domain of
      (recursive-contract
       (case->
        (-> any-wrap/c any-wrap/c any/c)
        (->
         any-wrap/c
         any-wrap/c
         (flat-named-contract
          'String
          (flat-contract-predicate string?))
         any/c))
       #:impersonator)
 contract from: (interface for check-equal?)
 blaming: (interface for check-equal?)
 at: <collects>/typed/rackunit/main.rkt:20.2
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13326: typed/rackunit can't test higher-order values
Date: Thu, 29 Nov 2012 17:49:59 -0500

 --Apple-Mail=_0A6BD8BC-67EE-44B3-9D5F-2A3328D87FA0
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 This is arguably a feature.=20
 
 It is impossible to compare higher-order values for equality and =
 therefore check-equal? should blow up on you if you try. Sadly it =
 doesn't as a simple check shows:=20
 
 #lang racket
 (require rackunit)
 (check-equal? (delay 0) (delay 0))
 
 I think this bug report should really complain that check-equal? doesn't =
 blow up.=20
 
 Having said that, I acknowledge of course that the reasoning that TR =
 provides is awful, even if technically correct.=20
 
 In any case, I sure hope that TR doesn't import the bug from rackunit.=20=
 
 
 
 
 
 
 
 On Nov 29, 2012, at 5:28 PM, neil.toronto@gmail.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13326
 >=20
 > Reported by Neil Toronto for release: 5.3.1.9--2012-11-29(1f6b15da/d)
 >=20
 > *** Description:
 > This is currently affecting testing `math/array'. I'm getting around =
 it using `check-true' and `equal?', but those don't give very =
 informative messages when tests fail.
 >=20
 > *** How to repeat:
 > #lang typed/racket
 > (require typed/rackunit)
 >=20
 > (check-equal? (delay 0) (delay 0))
 >=20
 >=20
 > Run, and get this error:
 >=20
 > check-equal?: broke its contract
 > Attempted to use a higher-order value passed as `Any` in untyped code
 > in: the domain of
 >      (recursive-contract
 >       (case->
 >        (-> any-wrap/c any-wrap/c any/c)
 >        (->
 >         any-wrap/c
 >         any-wrap/c
 >         (flat-named-contract
 >          'String
 >          (flat-contract-predicate string?))
 >         any/c))
 >       #:impersonator)
 > contract from: (interface for check-equal?)
 > blaming: (interface for check-equal?)
 > at: <collects>/typed/rackunit/main.rkt:20.2
 >=20
 > *** Environment:
 > unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 =
 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) =
 (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 681377832
 > Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D=
  (); (links #:user? #f #:root? #t) =3D ()
 >=20
 >=20
 > Collections:
 > ("/home/neil/.racket/5.3.1.9/collects"
 > (non-existent-path))
 > ("/home/neil/plt/collects"
 > ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" =
 "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" =
 "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" =
 "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" =
 "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" =
 "test-engine" "planet2" "version" ".gitignore" "make" "ffi" "mzscheme" =
 "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" =
 "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" =
 "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" =
 "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" =
 "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" =
 "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" =
 "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" =
 "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" =
 "lang" "ra!
 > co" "gui-debugger" "framework" "web-server" "deinprogramm" "slideshow" =
 "macro-debugger" "typed-racket" "net" "mred"))
 >=20
 > Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t =
 ((main) (test))))
 >=20
 
 
 --Apple-Mail=_0A6BD8BC-67EE-44B3-9D5F-2A3328D87FA0
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMTEyOTIyNDk2MFowIwYJKoZI
 hvcNAQkEMRYEFBn0C1ETmBUkJeP8AY2E+nbqQdjaMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAELx6Uq6pksGJPKxTKJBKRWGAYaD0cYsWJ6lcLjGt3IGY18NIH9ZeRUJHRdvTHOGyVUl
 uj1yXRcAJwxNQUaUYCIF0czm2wpr/cBZLADZI5ox8ltR1rhlDW4w6BIR/O+AH9+nquT2oUgOQ2of
 d0q5D81kCxdvDBxgZnNBiJECzlkRUDPR2kXyqfgNTffn8acnMP4BwpWO1udmX7Z1A4wITGsZ5W58
 KAzuI4NqklI6Ee/6kx9/5BZ24mPsy3C7Z3bJjq1LcNxKohanC2fFjmYQltYgC+SHmXixiJ7PwMf2
 GnXZw6Py9NHXp6sMfJ3U1gGgerCEZXlNKqByOpbMAZ92x4cAAAAAAAA=
 
 --Apple-Mail=_0A6BD8BC-67EE-44B3-9D5F-2A3328D87FA0--
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13326: typed/rackunit can't test higher-order
 values
Date: Thu, 29 Nov 2012 18:01:34 -0500

 On 2012-11-29 17:49:59 -0500, Matthias Felleisen wrote:
 > It is impossible to compare higher-order values for equality and
 > therefore check-equal? should blow up on you if you try. Sadly it
 > doesn't as a simple check shows:
 >
 > #lang racket
 > (require rackunit)
 > (check-equal? (delay 0) (delay 0))
 >
 > I think this bug report should really complain that check-equal?
 > doesn't blow up.
 
 The `check-equal?` function just checks using `equal?`, so isn't your
 complaint actually about the behavior of `equal?` on higher-order
 values?
 
 I would be confused if `check-equal?` threw an exception on values that
 I can use `equal?` on normally.
 
 Cheers,
 Asumu
From: Neil Toronto <neil.toronto@gmail.com>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13326: typed/rackunit can't test higher-order
 values
Date: Thu, 29 Nov 2012 16:02:53 -0700

 Arguably a feature, most of the time.
 
 Sometimes, though, you have values that contain higher-order values, who 
 know how to compare for equality. Like arrays:
 
    (struct: (A) Array ([shape : Indexes]
                        [size : Index]
                        [strict? : Boolean]
                        [unsafe-proc : (Indexes -> A)])
      [... other stuff ...]
      #:property prop:equal+hash
      (list array-recur-equal? array-hash-code array-hash-code))
 
 It works because an array has a finite domain. But TR has a problem with 
 `unsafe-proc' field values crossing into untyped code.
 
 BTW, the behavior isn't inherited from rackunit. This passes:
 
 #lang racket
 (require math/array rackunit)
 
 (check-equal? (array #[0 1 2 3])
                (array #[0 1 2 3]))
 
 and (check-equal? (delay 0) (delay 0)) correctly fails. The array tests 
 started blowing up when TR clamped down on using `Any' types that cross 
 the typed/untyped boundary. I'm not clear on the details.
 
 Neil ⊥
 
 On 11/29/2012 03:49 PM, Matthias Felleisen wrote:
 >
 > This is arguably a feature.
 >
 > It is impossible to compare higher-order values for equality and therefore check-equal? should blow up on you if you try. Sadly it doesn't as a simple check shows:
 >
 > #lang racket
 > (require rackunit)
 > (check-equal? (delay 0) (delay 0))
 >
 > I think this bug report should really complain that check-equal? doesn't blow up.
 >
 > Having said that, I acknowledge of course that the reasoning that TR provides is awful, even if technically correct.
 >
 > In any case, I sure hope that TR doesn't import the bug from rackunit.
 >
 >
 >
 >
 >
 >
 > On Nov 29, 2012, at 5:28 PM, neil.toronto@gmail.com wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13326
 >>
 >> Reported by Neil Toronto for release: 5.3.1.9--2012-11-29(1f6b15da/d)
 >>
 >> *** Description:
 >> This is currently affecting testing `math/array'. I'm getting around it using `check-true' and `equal?', but those don't give very informative messages when tests fail.
 >>
 >> *** How to repeat:
 >> #lang typed/racket
 >> (require typed/rackunit)
 >>
 >> (check-equal? (delay 0) (delay 0))
 >>
 >>
 >> Run, and get this error:
 >>
 >> check-equal?: broke its contract
 >> Attempted to use a higher-order value passed as `Any` in untyped code
 >> in: the domain of
 >>       (recursive-contract
 >>        (case->
 >>         (-> any-wrap/c any-wrap/c any/c)
 >>         (->
 >>          any-wrap/c
 >>          any-wrap/c
 >>          (flat-named-contract
 >>           'String
 >>           (flat-contract-predicate string?))
 >>          any/c))
 >>        #:impersonator)
 >> contract from: (interface for check-equal?)
 >> blaming: (interface for check-equal?)
 >> at: <collects>/typed/rackunit/main.rkt:20.2
 >>
 >> *** Environment:
 >> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 681377832
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/neil/.racket/5.3.1.9/collects"
 >> (non-existent-path))
 >> ("/home/neil/plt/collects"
 >> ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "planet2" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "ra!
 >> co" "gui-debugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13326: typed/rackunit can't test higher-order values
Date: Thu, 29 Nov 2012 18:19:18 -0500

 --Apple-Mail=_7779931E-5B2C-4BFA-AA9F-43C7B3BF9A91
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 You could also ask why 'check-' doesn't add more value. 
 I think a developer should be warned, which is why 
 check-expect in *SL rejects such things. 
 
 
 
 
 On Nov 29, 2012, at 6:01 PM, Asumu Takikawa wrote:
 
 > On 2012-11-29 17:49:59 -0500, Matthias Felleisen wrote:
 >> It is impossible to compare higher-order values for equality and
 >> therefore check-equal? should blow up on you if you try. Sadly it
 >> doesn't as a simple check shows:
 >> 
 >> #lang racket
 >> (require rackunit)
 >> (check-equal? (delay 0) (delay 0))
 >> 
 >> I think this bug report should really complain that check-equal?
 >> doesn't blow up.
 > 
 > The `check-equal?` function just checks using `equal?`, so isn't your
 > complaint actually about the behavior of `equal?` on higher-order
 > values?
 > 
 > I would be confused if `check-equal?` threw an exception on values that
 > I can use `equal?` on normally.
 > 
 > Cheers,
 > Asumu
 
 
 --Apple-Mail=_7779931E-5B2C-4BFA-AA9F-43C7B3BF9A91
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMTEyOTIzMTkxOFowIwYJKoZI
 hvcNAQkEMRYEFBG2uNY0/H7d3vNbPFZl98MRvXDaMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAGPHdqJSK771tnICs9cf/O0Nwt0QRCbhNsMpEZgIe1rgFASCwHuuOsyG8bwnMsmIrDlo
 8aHB2/44j1ms8PbEafbzyDppwb4wXSG4ASKwj5JWPhpp2uWfnsv4jqN01DKIMD1vxGBi6g1RDGPy
 2zNv+l+hX7zUlKUQzDFXSEiElYd2eAGRHktiguM9HkNJY21E1TCfW/XzktMGypaR40zcy0ERiy5r
 mtsg9xL893PCNPqIC+T5k4t7OZ1/9t49wyWjWnGkPN0pCad+Jc3cSOEbDEm8HuG8Rp2xh/H+8jEK
 qExZKUFy6EqZ6qo+0CNmamsaz7SNPVMWLNIzMditIhpHXfUAAAAAAAA=
 
 --Apple-Mail=_7779931E-5B2C-4BFA-AA9F-43C7B3BF9A91--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13326: typed/rackunit can't test higher-order values
Date: Thu, 29 Nov 2012 18:18:44 -0500

 --Apple-Mail=_5ACFC335-7B0D-4BFA-9AD6-59A8C69C0BF1
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=utf-8
 
 
 Arrays aren't higher-order. They are finite functions, with computable =
 domains. Denotationally you could think of them as tuples of pairs =
 (unless they contain functions that is, as in Scott domain not function =
 domain).=20
 
 If you had finite functions with non-computable domains, you would lose =
 too.=20
 
 
 On Nov 29, 2012, at 6:02 PM, Neil Toronto wrote:
 
 > Arguably a feature, most of the time.
 >=20
 > Sometimes, though, you have values that contain higher-order values, =
 who know how to compare for equality. Like arrays:
 >=20
 >  (struct: (A) Array ([shape : Indexes]
 >                      [size : Index]
 >                      [strict? : Boolean]
 >                      [unsafe-proc : (Indexes -> A)])
 >    [... other stuff ...]
 >    #:property prop:equal+hash
 >    (list array-recur-equal? array-hash-code array-hash-code))
 >=20
 > It works because an array has a finite domain. But TR has a problem =
 with `unsafe-proc' field values crossing into untyped code.
 >=20
 > BTW, the behavior isn't inherited from rackunit. This passes:
 >=20
 > #lang racket
 > (require math/array rackunit)
 >=20
 > (check-equal? (array #[0 1 2 3])
 >              (array #[0 1 2 3]))
 >=20
 > and (check-equal? (delay 0) (delay 0)) correctly fails. The array =
 tests started blowing up when TR clamped down on using `Any' types that =
 cross the typed/untyped boundary. I'm not clear on the details.
 >=20
 > Neil =E2=8A=A5
 >=20
 > On 11/29/2012 03:49 PM, Matthias Felleisen wrote:
 >>=20
 >> This is arguably a feature.
 >>=20
 >> It is impossible to compare higher-order values for equality and =
 therefore check-equal? should blow up on you if you try. Sadly it =
 doesn't as a simple check shows:
 >>=20
 >> #lang racket
 >> (require rackunit)
 >> (check-equal? (delay 0) (delay 0))
 >>=20
 >> I think this bug report should really complain that check-equal? =
 doesn't blow up.
 >>=20
 >> Having said that, I acknowledge of course that the reasoning that TR =
 provides is awful, even if technically correct.
 >>=20
 >> In any case, I sure hope that TR doesn't import the bug from =
 rackunit.
 >>=20
 >>=20
 >>=20
 >>=20
 >>=20
 >>=20
 >> On Nov 29, 2012, at 5:28 PM, neil.toronto@gmail.com wrote:
 >>=20
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13326
 >>>=20
 >>> Reported by Neil Toronto for release: =
 5.3.1.9--2012-11-29(1f6b15da/d)
 >>>=20
 >>> *** Description:
 >>> This is currently affecting testing `math/array'. I'm getting around =
 it using `check-true' and `equal?', but those don't give very =
 informative messages when tests fail.
 >>>=20
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>> (require typed/rackunit)
 >>>=20
 >>> (check-equal? (delay 0) (delay 0))
 >>>=20
 >>>=20
 >>> Run, and get this error:
 >>>=20
 >>> check-equal?: broke its contract
 >>> Attempted to use a higher-order value passed as `Any` in untyped =
 code
 >>> in: the domain of
 >>>      (recursive-contract
 >>>       (case->
 >>>        (-> any-wrap/c any-wrap/c any/c)
 >>>        (->
 >>>         any-wrap/c
 >>>         any-wrap/c
 >>>         (flat-named-contract
 >>>          'String
 >>>          (flat-contract-predicate string?))
 >>>         any/c))
 >>>       #:impersonator)
 >>> contract from: (interface for check-equal?)
 >>> blaming: (interface for check-equal?)
 >>> at: <collects>/typed/rackunit/main.rkt:20.2
 >>>=20
 >>> *** Environment:
 >>> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 =
 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) =
 (get-display-depth) =3D 32
 >>> Human Language: english
 >>> (current-memory-use) 681377832
 >>> Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =
 =3D (); (links #:user? #f #:root? #t) =3D ()
 >>>=20
 >>>=20
 >>> Collections:
 >>> ("/home/neil/.racket/5.3.1.9/collects"
 >>> (non-existent-path))
 >>> ("/home/neil/plt/collects"
 >>> ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" =
 "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" =
 "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" =
 "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" =
 "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" =
 "test-engine" "planet2" "version" ".gitignore" "make" "ffi" "mzscheme" =
 "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" =
 "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" =
 "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" =
 "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" =
 "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" =
 "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" =
 "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" =
 "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" =
 "lang" "r
 > a!
 >>> co" "gui-debugger" "framework" "web-server" "deinprogramm" =
 "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >>>=20
 >>> Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t =
 ((main) (test))))
 >>>=20
 >>=20
 >=20
 
 
 --Apple-Mail=_5ACFC335-7B0D-4BFA-9AD6-59A8C69C0BF1
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMTEyOTIzMTg0NVowIwYJKoZI
 hvcNAQkEMRYEFPHuvjBXzuJVLiDZQcMAaLA4eHSwMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAEvVXCTcNc/QnwnOZgs7rnS2AwRZnxlr6kAJ+ifaFGyFUCbWC4NuiOlWCgpvZqCpgTva
 8fPirZgRCZDCI24I31rnVhEuET+kfgy9eMDGE6mFtgWR9zTHNhKnAO9bbT6vNtZCtI/+qhfhhlC0
 mqUZex44WPld+nCvOyEiUZcKyLxfLJ08gNizA2SFyQh+v7Sg3e6fWklO4+x/6vAT/L3NmrRxpszM
 mhDyPQbSEsKswHA9pv/Ax5wGhRJ1Hnp0AY6C4aCmRmDp2H4GgFwKA273LBHj92TMhR6Lx67tXGie
 Va9so/S1NGb3PRoR+XfHtIIa8bIUjAGwGvWM7mBNq9SvyloAAAAAAAA=
 
 --Apple-Mail=_5ACFC335-7B0D-4BFA-9AD6-59A8C69C0BF1--
Responsible changed from "nobody" to "asumu" by asumu@racket-lang.org at Mon, 03 Dec 2012 18:00:38 -0500
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/0252207e38
State changed from "open" to "closed" by asumu@racket-lang.org at Mon, 03 Dec 2012 18:00:38 -0500
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/0252207e38

----------
A commit by soegaard@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/063843c0d2
