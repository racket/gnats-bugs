From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jun 27 21:19:01 2013
Received: from mail-oa0-f44.google.com (mail-oa0-f44.google.com [209.85.219.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r5S1Iv3H016433
	for <bugs@bugs.plt-scheme.org>; Thu, 27 Jun 2013 21:18:58 -0400
Message-Id: <201306280118.r5S1Itss016428@champlain.ccs.neu.edu>
Date: Thu, 27 Jun 2013 21:18:55 -0400
From: samth@ccs.neu.edu
To: bugs@racket-lang.org
Subject: big-bang/image program stutters from gc

>Number:         13895
>Category:       all
>Synopsis:       big-bang/image program stutters from gc
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jun 27 21:20:02 -0400 2013
>Closed-Date:    Mon Jul 01 11:09:08 -0400 2013
>Last-Modified:  Mon Jul 01 17:44:01 -0400 2013
>Originator:     Sam Tobin-Hochstadt
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4.11--2013-06-09(e25156d6/d)
>Environment:
unix "Linux ajax 3.2.0-45-generic-pae #70-Ubuntu SMP Wed May 29 20:31:05 UTC 2013 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 179474596
Links: (links) = ("assignments" "book" "var" "class"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/home/samth/sw/plt/add-on/5.3.4.11/pkgs/installed/gcstats>); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.4.11):
 Package[*=auto]    Checksum    Source
 gcstats            #f          (dir /home/samth/tmp/gcstats)



Collections:
("/home/samth/sw/plt/add-on/5.3.4.11/collects"
 ("info-domain"))
("/home/samth/sw/plt/collects"
 ("compatibility" "ffi" "hierlist" "images" "teachpack" "repo-time-stamp" "tool" "x.rkt" "icons" "framework" "contract-profile" "raco" "planet" "test-engine" "trace" "unstable" "htdp" "racunit" "setup" "embedded-gui" "readline" "0001-Ensure-that-vector-index-is-an-integer.patch" "browser" "xrepl" "deinprogramm" "raclog" "algol60" "make" "scribblings" "mzscheme" "mrlib" "sgl" "r5rs" "xml" "redex" "repos-time-stamp" "honu" "games" "syntax-color" "launcher" "parser-tools" "reader" "slideshow" "help" "drscheme" "scheme" "dynext" "rackunit" "afm" "srpersist" "typed-racket" "rico" "json" "sirmail" "tests" ".gitignore" "handin-client" "plot" "html" "tex2page" "handin-server" "meta" "info-domain" "data" "graphics" "profile" "lazy" "out.txt" "planet2" "db" "macro-debugger" "lang" "compiler" "mzcom" "gui-debugger" "guibuilder" "mysterx" "datalog" "frtime" "rnrs" "math" "scribble" "r6rs" "stepper" "syntax" "x.rkt~" "pict" "scriblib" "2htdp" "combinator-parser" "realm" "schelog" "0001-M!
 ake-autocompletion-fuzzier-similar-to-the-doc-searc.patch" "string-constants" "waterworld" "openssl" "schemeunit" "slatex" "errortrace" "plai" "net" "eopl" "s-exp" "drracket" "picturing-programs" "mzlib" "typed-scheme" "wxme" "out2.txt" "racklog" "web-server" "pkg" "config" "test-box-recovery" "srfi" "mred" "version" "defaults" "at-exp" "texpict" "file" "swindle" "typed" "preprocessor" "racket" "mz" "future-visualizer"))

Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
The program here: https://gist.github.com/samth/5881726 (courtesy of Katie Edmonds) seems to allocate and GC way too much.  This causes the animation to stutter.

Some simple investigation with my gcstats tool suggests that the max heap size is increasing over time, which doesn't seem like it should be happening here. 
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: samth@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Thu, 27 Jun 2013 21:43:51 -0400

 --Apple-Mail=_7BC0C618-43E9-4103-AB01-04FD159FEDF6
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 I modified the program so that main consumes the clock speed. When you =
 run at 1/5, I think you can't see major collections. When you run it at =
 1/50, you get some.=20
 
 No here are some simple truths:=20
 
 1. Your program allocate memory in several forms:=20
  -- new balls [small]
  -- new images [large]
 500 per second of each. Not to speak of the behind the scene memory for =
 say mouse events as I move across the canvas.=20
 
 2. Yes, these pieces of memory are single threaded and since you don't =
 turn on recording, the library does not hang on to them.=20
 
 3. Your memory allocation must grow for a while. GC will kick in. It =
 shrinks.=20
 
 What exactly makes you think there is a performance bug?=20
 
 
 
 
 
 
 
 
 On Jun 27, 2013, at 9:20 PM, samth@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13895
 >=20
 > Reported by Sam Tobin-Hochstadt for release: =
 5.3.4.11--2013-06-09(e25156d6/d)
 >=20
 > *** Description:
 > The program here: https://gist.github.com/samth/5881726 (courtesy of =
 Katie Edmonds) seems to allocate and GC way too much.  This causes the =
 animation to stutter.
 >=20
 > Some simple investigation with my gcstats tool suggests that the max =
 heap size is increasing over time, which doesn't seem like it should be =
 happening here.=20
 >=20
 > *** How to repeat:
 >=20
 >=20
 > *** Environment:
 > unix "Linux ajax 3.2.0-45-generic-pae #70-Ubuntu SMP Wed May 29 =
 20:31:05 UTC 2013 i686 i686 i386 GNU/Linux" (i386-linux/3m) =
 (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 179474596
 > Links: (links) =3D ("assignments" "book" "var" "class"); (links =
 #:user? #f) =3D (); (links #:root? #t) =3D =
 (#<path:/home/samth/sw/plt/add-on/5.3.4.11/pkgs/installed/gcstats>); =
 (links #:user? #f #:root? #t) =3D ()
 > raco pkg (show):
 > Installation-wide:
 > [none]
 > User-specific, all-version:
 > [none]
 > User-specific, version-specific (5.3.4.11):
 > Package[*=3Dauto]    Checksum    Source
 > gcstats            #f          (dir /home/samth/tmp/gcstats)
 >=20
 >=20
 >=20
 > Collections:
 > ("/home/samth/sw/plt/add-on/5.3.4.11/collects"
 > ("info-domain"))
 > ("/home/samth/sw/plt/collects"
 > ("compatibility" "ffi" "hierlist" "images" "teachpack" =
 "repo-time-stamp" "tool" "x.rkt" "icons" "framework" "contract-profile" =
 "raco" "planet" "test-engine" "trace" "unstable" "htdp" "racunit" =
 "setup" "embedded-gui" "readline" =
 "0001-Ensure-that-vector-index-is-an-integer.patch" "browser" "xrepl" =
 "deinprogramm" "raclog" "algol60" "make" "scribblings" "mzscheme" =
 "mrlib" "sgl" "r5rs" "xml" "redex" "repos-time-stamp" "honu" "games" =
 "syntax-color" "launcher" "parser-tools" "reader" "slideshow" "help" =
 "drscheme" "scheme" "dynext" "rackunit" "afm" "srpersist" "typed-racket" =
 "rico" "json" "sirmail" "tests" ".gitignore" "handin-client" "plot" =
 "html" "tex2page" "handin-server" "meta" "info-domain" "data" "graphics" =
 "profile" "lazy" "out.txt" "planet2" "db" "macro-debugger" "lang" =
 "compiler" "mzcom" "gui-debugger" "guibuilder" "mysterx" "datalog" =
 "frtime" "rnrs" "math" "scribble" "r6rs" "stepper" "syntax" "x.rkt~" =
 "pict" "scriblib" "2htdp" "combinator-parser" "realm" "schelog" "0001-M!
 > ake-autocompletion-fuzzier-similar-to-the-doc-searc.patch" =
 "string-constants" "waterworld" "openssl" "schemeunit" "slatex" =
 "errortrace" "plai" "net" "eopl" "s-exp" "drracket" "picturing-programs" =
 "mzlib" "typed-scheme" "wxme" "out2.txt" "racklog" "web-server" "pkg" =
 "config" "test-box-recovery" "srfi" "mred" "version" "defaults" "at-exp" =
 "texpict" "file" "swindle" "typed" "preprocessor" "racket" "mz" =
 "future-visualizer"))
 >=20
 > Computer Language: (("Teaching Languages" "How to Design Programs" =
 "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f =
 ()))
 >=20
 
 
 --Apple-Mail=_7BC0C618-43E9-4103-AB01-04FD159FEDF6
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDYyODAxNDM1MlowIwYJKoZI
 hvcNAQkEMRYEFGniZ83bpIGTLjtts00BeCqYL4vpMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAB8l02kO9l+YqEO8janXQHJhnpKOPuVLjApyj1EnQDtBWPJXem/Xj2IaGC850r4cUY/M
 ZthRo0bOfn0EJbA1C1wmFjM2gFU88RCUqxyCwfXOd2PZX9iN7kIZkifyxjTiEx4VGch+8DSy3CkC
 6yNNl2rrRasuH6Ong3KLD9OaYT3Anjv8okfHMZjppx75NgrCgbkcsaYIxjKN7IeMLm9OTclDNZwC
 27c0WBshdRvpvnCzG/NmSKWaEp1USlkbsXGQNCMoQAWZBSZnzYcPZLc/hxHtVqdAmH+CztuuH8Us
 DF9+UfQAM8SnnRCk4YerVPp0NdwWMg+0MmoBEY4+M2I00tUAAAAAAAA=
 
 --Apple-Mail=_7BC0C618-43E9-4103-AB01-04FD159FEDF6--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Thu, 27 Jun 2013 22:44:29 -0400

 On Thu, Jun 27, 2013 at 9:43 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > I modified the program so that main consumes the clock speed. When you run at 1/5, I think you can't see major collections. When you run it at 1/50, you get some.
 >
 > No here are some simple truths:
 >
 > 1. Your program allocate memory in several forms:
 >  -- new balls [small]
 >  -- new images [large]
 > 500 per second of each. Not to speak of the behind the scene memory for say mouse events as I move across the canvas.
 >
 > 2. Yes, these pieces of memory are single threaded and since you don't turn on recording, the library does not hang on to them.
 >
 > 3. Your memory allocation must grow for a while. GC will kick in. It shrinks.
 
 After running the program for 15+ major collections, the memory
 continues to increase.
 
 > What exactly makes you think there is a performance bug?
 
 First, I think we should be able to run this program without
 stuttering. And I would have thought it would run in constant space,
 which it doesn't seem to.
 
 Second, I tried running the program here:
 https://gist.github.com/samth/5882075 which uses the lower-level dc
 primitives to do something similar. It doesn't allocate much, and
 doesn't stutter.
 
 Third, if you're generating the image 500 times per second, then
 there's significant optimization possibility, since smooth graphics
 are generally thought to be 60 frames per second, although the exact
 amount that's optimal depends on the refresh rate of the display.
 Certainly your monitor won't display 500 images per second.
 
 Sam
 
 >
 >
 >
 >
 >
 >
 >
 >
 > On Jun 27, 2013, at 9:20 PM, samth@ccs.neu.edu wrote:
 >
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=13895
 >>
 >> Reported by Sam Tobin-Hochstadt for release: 5.3.4.11--2013-06-09(e25156d6/d)
 >>
 >> *** Description:
 >> The program here: https://gist.github.com/samth/5881726 (courtesy of Katie Edmonds) seems to allocate and GC way too much.  This causes the animation to stutter.
 >>
 >> Some simple investigation with my gcstats tool suggests that the max heap size is increasing over time, which doesn't seem like it should be happening here.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux ajax 3.2.0-45-generic-pae #70-Ubuntu SMP Wed May 29 20:31:05 UTC 2013 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 179474596
 >> Links: (links) = ("assignments" "book" "var" "class"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/home/samth/sw/plt/add-on/5.3.4.11/pkgs/installed/gcstats>); (links #:user? #f #:root? #t) = ()
 >> raco pkg (show):
 >> Installation-wide:
 >> [none]
 >> User-specific, all-version:
 >> [none]
 >> User-specific, version-specific (5.3.4.11):
 >> Package[*=auto]    Checksum    Source
 >> gcstats            #f          (dir /home/samth/tmp/gcstats)
 >>
 >>
 >>
 >> Collections:
 >> ("/home/samth/sw/plt/add-on/5.3.4.11/collects"
 >> ("info-domain"))
 >> ("/home/samth/sw/plt/collects"
 >> ("compatibility" "ffi" "hierlist" "images" "teachpack" "repo-time-stamp" "tool" "x.rkt" "icons" "framework" "contract-profile" "raco" "planet" "test-engine" "trace" "unstable" "htdp" "racunit" "setup" "embedded-gui" "readline" "0001-Ensure-that-vector-index-is-an-integer.patch" "browser" "xrepl" "deinprogramm" "raclog" "algol60" "make" "scribblings" "mzscheme" "mrlib" "sgl" "r5rs" "xml" "redex" "repos-time-stamp" "honu" "games" "syntax-color" "launcher" "parser-tools" "reader" "slideshow" "help" "drscheme" "scheme" "dynext" "rackunit" "afm" "srpersist" "typed-racket" "rico" "json" "sirmail" "tests" ".gitignore" "handin-client" "plot" "html" "tex2page" "handin-server" "meta" "info-domain" "data" "graphics" "profile" "lazy" "out.txt" "planet2" "db" "macro-debugger" "lang" "compiler" "mzcom" "gui-debugger" "guibuilder" "mysterx" "datalog" "frtime" "rnrs" "math" "scribble" "r6rs" "stepper" "syntax" "x.rkt~" "pict" "scriblib" "2htdp" "combinator-parser" "realm" "schelog" "0001-M!
 >> ake-autocompletion-fuzzier-similar-to-the-doc-searc.patch" "string-constants" "waterworld" "openssl" "schemeunit" "slatex" "errortrace" "plai" "net" "eopl" "s-exp" "drracket" "picturing-programs" "mzlib" "typed-scheme" "wxme" "out2.txt" "racklog" "web-server" "pkg" "config" "test-box-recovery" "srfi" "mred" "version" "defaults" "at-exp" "texpict" "file" "swindle" "typed" "preprocessor" "racket" "mz" "future-visualizer"))
 >>
 >> Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >>
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Thu, 27 Jun 2013 22:51:57 -0400

 --Apple-Mail=_076D3929-9800-4AE4-85F7-3580EF118A3C
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Jun 27, 2013, at 10:44 PM, Sam Tobin-Hochstadt wrote:
 
 > if you're generating the image 500 times per second, then
 
 Not me, you are generating it 500 times per second in the program. You =
 specified that.=20
 
 
 > there's significant optimization possibility, since smooth graphics
 > are generally thought to be 60 frames per second, although the exact
 > amount that's optimal depends on the refresh rate of the display.
 > Certainly your monitor won't display 500 images per second.
 
 Universe actually drops some share of those pictures w/o showing them. =
 You wouldn't notice.=20
 
 > Second, I tried running the program here:
 > https://gist.github.com/samth/5882075 which uses the lower-level dc
 > primitives to do something similar. It doesn't allocate much, and
 > doesn't stutter.
 
 Sure, you have an abstraction layer in between and not one that is =
 tuned. So you eliminated some overhead and you admit that it allocates. =
 See 'much'. So run it long enough to watch memory grow. The stuttering =
 is caused by the additional abstraction layers.=20
 
 [[ By cutting the abstraction layer you have also eliminated features. =
 For example, you can't step thru the program anymore. ]]
 
 ;; ---=20
 
 I will freely admit that universe deserves a serious rewrite with an eye =
 toward performance. I don't have time right now.=20
 
 
 --Apple-Mail=_076D3929-9800-4AE4-85F7-3580EF118A3C
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDYyODAyNTE1OFowIwYJKoZI
 hvcNAQkEMRYEFPKhMBPI7WldmlTSOoKZZcfu2S57MIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAKQZapd5tCgFl6n88hFhzFqtBE9ioMX4540rU2Y9mYwFoQBh3Ag1xRnyHgnu70jVrbfj
 k8wlECxi8yMrXnXhBObpQ5EvUoF6GenSLDyQg1lHnwO0gEXlYJyUQlCCVNS9dmeoYD0Edl7T0kUZ
 IRkCqTF0Rfrb4TWxkrzgLTEEoWJ0P/cTxjUB3tw5nBnWLxA1LNW/okibhuTVhn87tB9OLAemy3d9
 s9ef9uynJga7lNvNoFqj95exbjcVC6zf9WutbOGXojCUDmBLLyWd7kteKfprJBqOKXsCd9VyjYHp
 moSihpb2GZY4rF46ox6A1DmyB+iLzEF0aAf8nZpFjTCV/PcAAAAAAAA=
 
 --Apple-Mail=_076D3929-9800-4AE4-85F7-3580EF118A3C--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Thu, 27 Jun 2013 23:02:55 -0400

 On Thu, Jun 27, 2013 at 10:51 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Jun 27, 2013, at 10:44 PM, Sam Tobin-Hochstadt wrote:
 >
 >> if you're generating the image 500 times per second, then
 >
 > Not me, you are generating it 500 times per second in the program. You specified that.
 
 No, I disagree.  big-bang is nicely designed (who could the clever
 designer be?) so that there's a drawing *event*, rather than the
 programming doing the drawing explicitly.  I'm saying you could call
 `to-draw` many fewer times.
 
 >> there's significant optimization possibility, since smooth graphics
 >> are generally thought to be 60 frames per second, although the exact
 >> amount that's optimal depends on the refresh rate of the display.
 >> Certainly your monitor won't display 500 images per second.
 >
 > Universe actually drops some share of those pictures w/o showing them. You wouldn't notice.
 
 Do you render the pictures that you then drop?
 
 >> Second, I tried running the program here:
 >> https://gist.github.com/samth/5882075 which uses the lower-level dc
 >> primitives to do something similar. It doesn't allocate much, and
 >> doesn't stutter.
 >
 > Sure, you have an abstraction layer in between and not one that is tuned. So you eliminated some overhead and you admit that it allocates. See 'much'. So run it long enough to watch memory grow. The stuttering is caused by the additional abstraction layers.
 
 I would be very surprised if the second program I posted grows at all
 over time.  I've measured it for over a minute, and it seems steady
 for me at 101 MB max heap size.
 
 > [[ By cutting the abstraction layer you have also eliminated features. For example, you can't step thru the program anymore. ]]
 
 Sure, but that feature shouldn't result in unbounded memory growth.
 
 Sam
 
From: Stephen Chang <stchang@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Fri, 28 Jun 2013 01:33:30 -0400

 Occasionally I've wanted to show Racket to friends via fun little demo
 programs only to run into the same situation that Sam describes.
 
 Here is an example. I tried to duplicate this javascript example:
 
 http://codepen.io/loktar00/pen/DJGbo
 
 in universe:
 
 https://github.com/stchang/smoke
 
 I don't know if this program has exactly the same problem as Sam's,
 but it also runs slowly with frequent gc pauses.
 
 I tried various improvements such as lowering the frequency of new
 images and pre-transforming the images (I noticed rotations took a
 long time). This made things slightly faster but now it doesn't look
 as nice and there are still frequent gc interruptions.
 
 This email is not intended to be a "piling-on" but I wanted to add
 another example in case someone looks into it. I've been meaning to
 look into it myself (uhhh, in my free time of course).
 
 ps - Sam, what does your second animation do? For me, the logo flashes
 around erratically.
 
 On Thu, Jun 27, 2013 at 11:02 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Thu, Jun 27, 2013 at 10:51 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> On Jun 27, 2013, at 10:44 PM, Sam Tobin-Hochstadt wrote:
 >>
 >>> if you're generating the image 500 times per second, then
 >>
 >> Not me, you are generating it 500 times per second in the program. You specified that.
 >
 > No, I disagree.  big-bang is nicely designed (who could the clever
 > designer be?) so that there's a drawing *event*, rather than the
 > programming doing the drawing explicitly.  I'm saying you could call
 > `to-draw` many fewer times.
 >
 >>> there's significant optimization possibility, since smooth graphics
 >>> are generally thought to be 60 frames per second, although the exact
 >>> amount that's optimal depends on the refresh rate of the display.
 >>> Certainly your monitor won't display 500 images per second.
 >>
 >> Universe actually drops some share of those pictures w/o showing them. You wouldn't notice.
 >
 > Do you render the pictures that you then drop?
 >
 >>> Second, I tried running the program here:
 >>> https://gist.github.com/samth/5882075 which uses the lower-level dc
 >>> primitives to do something similar. It doesn't allocate much, and
 >>> doesn't stutter.
 >>
 >> Sure, you have an abstraction layer in between and not one that is tuned. So you eliminated some overhead and you admit that it allocates. See 'much'. So run it long enough to watch memory grow. The stuttering is caused by the additional abstraction layers.
 >
 > I would be very surprised if the second program I posted grows at all
 > over time.  I've measured it for over a minute, and it seems steady
 > for me at 101 MB max heap size.
 >
 >> [[ By cutting the abstraction layer you have also eliminated features. For example, you can't step thru the program anymore. ]]
 >
 > Sure, but that feature shouldn't result in unbounded memory growth.
 >
 > Sam
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Stephen Chang <stchang@ccs.neu.edu>
Cc: bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, bugs <bugs@racket-lang.org>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Fri, 28 Jun 2013 07:23:40 -0400

 --001a11c3c49066db9e04e0351cd8
 Content-Type: text/plain; charset=UTF-8
 
 On Jun 28, 2013 1:33 AM, "Stephen Chang" <stchang@ccs.neu.edu> wrote:
 >
 > Occasionally I've wanted to show Racket to friends via fun little demo
 > programs only to run into the same situation that Sam describes.
 >
 > Here is an example. I tried to duplicate this javascript example:
 >
 > http://codepen.io/loktar00/pen/DJGbo
 >
 > in universe:
 >
 > https://github.com/stchang/smoke
 >
 > I don't know if this program has exactly the same problem as Sam's,
 > but it also runs slowly with frequent gc pauses.
 >
 > I tried various improvements such as lowering the frequency of new
 > images and pre-transforming the images (I noticed rotations took a
 > long time). This made things slightly faster but now it doesn't look
 > as nice and there are still frequent gc interruptions.
 >
 > This email is not intended to be a "piling-on" but I wanted to add
 > another example in case someone looks into it. I've been meaning to
 > look into it myself (uhhh, in my free time of course).
 >
 > ps - Sam, what does your second animation do? For me, the logo flashes
 > around erratically.
 
 That. :-)  I just wanted something that moved and rotated the image.
 
 >
 > On Thu, Jun 27, 2013 at 11:02 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>
 wrote:
 > > On Thu, Jun 27, 2013 at 10:51 PM, Matthias Felleisen
 > > <matthias@ccs.neu.edu> wrote:
 > >>
 > >> On Jun 27, 2013, at 10:44 PM, Sam Tobin-Hochstadt wrote:
 > >>
 > >>> if you're generating the image 500 times per second, then
 > >>
 > >> Not me, you are generating it 500 times per second in the program. You
 specified that.
 > >
 > > No, I disagree.  big-bang is nicely designed (who could the clever
 > > designer be?) so that there's a drawing *event*, rather than the
 > > programming doing the drawing explicitly.  I'm saying you could call
 > > `to-draw` many fewer times.
 > >
 > >>> there's significant optimization possibility, since smooth graphics
 > >>> are generally thought to be 60 frames per second, although the exact
 > >>> amount that's optimal depends on the refresh rate of the display.
 > >>> Certainly your monitor won't display 500 images per second.
 > >>
 > >> Universe actually drops some share of those pictures w/o showing them.
 You wouldn't notice.
 > >
 > > Do you render the pictures that you then drop?
 > >
 > >>> Second, I tried running the program here:
 > >>> https://gist.github.com/samth/5882075 which uses the lower-level dc
 > >>> primitives to do something similar. It doesn't allocate much, and
 > >>> doesn't stutter.
 > >>
 > >> Sure, you have an abstraction layer in between and not one that is
 tuned. So you eliminated some overhead and you admit that it allocates. See
 'much'. So run it long enough to watch memory grow. The stuttering is
 caused by the additional abstraction layers.
 > >
 > > I would be very surprised if the second program I posted grows at all
 > > over time.  I've measured it for over a minute, and it seems steady
 > > for me at 101 MB max heap size.
 > >
 > >> [[ By cutting the abstraction layer you have also eliminated features.
 For example, you can't step thru the program anymore. ]]
 > >
 > > Sure, but that feature shouldn't result in unbounded memory growth.
 > >
 > > Sam
 
 --001a11c3c49066db9e04e0351cd8
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr"><br>
 On Jun 28, 2013 1:33 AM, &quot;Stephen Chang&quot; &lt;<a href=3D"mailto:st=
 chang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt; Occasionally I&#39;ve wanted to show Racket to friends via fun little =
 demo<br>
 &gt; programs only to run into the same situation that Sam describes.<br>
 &gt;<br>
 &gt; Here is an example. I tried to duplicate this javascript example:<br>
 &gt;<br>
 &gt; <a href=3D"http://codepen.io/loktar00/pen/DJGbo">http://codepen.io/lok=
 tar00/pen/DJGbo</a><br>
 &gt;<br>
 &gt; in universe:<br>
 &gt;<br>
 &gt; <a href=3D"https://github.com/stchang/smoke">https://github.com/stchan=
 g/smoke</a><br>
 &gt;<br>
 &gt; I don&#39;t know if this program has exactly the same problem as Sam&#=
 39;s,<br>
 &gt; but it also runs slowly with frequent gc pauses.<br>
 &gt;<br>
 &gt; I tried various improvements such as lowering the frequency of new<br>
 &gt; images and pre-transforming the images (I noticed rotations took a<br>
 &gt; long time). This made things slightly faster but now it doesn&#39;t lo=
 ok<br>
 &gt; as nice and there are still frequent gc interruptions.<br>
 &gt;<br>
 &gt; This email is not intended to be a &quot;piling-on&quot; but I wanted =
 to add<br>
 &gt; another example in case someone looks into it. I&#39;ve been meaning t=
 o<br>
 &gt; look into it myself (uhhh, in my free time of course).<br>
 &gt;<br>
 &gt; ps - Sam, what does your second animation do? For me, the logo flashes=
 <br>
 &gt; around erratically.</p>
 <p dir=3D"ltr">That. :-)=C2=A0 I just wanted something that moved and rotat=
 ed the image.</p>
 <p dir=3D"ltr">&gt;<br>
 &gt; On Thu, Jun 27, 2013 at 11:02 PM, Sam Tobin-Hochstadt &lt;<a href=3D"m=
 ailto:samth@ccs.neu.edu">samth@ccs.neu.edu</a>&gt; wrote:<br>
 &gt; &gt; On Thu, Jun 27, 2013 at 10:51 PM, Matthias Felleisen<br>
 &gt; &gt; &lt;<a href=3D"mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu<=
 /a>&gt; wrote:<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; On Jun 27, 2013, at 10:44 PM, Sam Tobin-Hochstadt wrote:<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt;&gt; if you&#39;re generating the image 500 times per second, =
 then<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; Not me, you are generating it 500 times per second in the pro=
 gram. You specified that.<br>
 &gt; &gt;<br>
 &gt; &gt; No, I disagree. =C2=A0big-bang is nicely designed (who could the =
 clever<br>
 &gt; &gt; designer be?) so that there&#39;s a drawing *event*, rather than =
 the<br>
 &gt; &gt; programming doing the drawing explicitly. =C2=A0I&#39;m saying yo=
 u could call<br>
 &gt; &gt; `to-draw` many fewer times.<br>
 &gt; &gt;<br>
 &gt; &gt;&gt;&gt; there&#39;s significant optimization possibility, since s=
 mooth graphics<br>
 &gt; &gt;&gt;&gt; are generally thought to be 60 frames per second, althoug=
 h the exact<br>
 &gt; &gt;&gt;&gt; amount that&#39;s optimal depends on the refresh rate of =
 the display.<br>
 &gt; &gt;&gt;&gt; Certainly your monitor won&#39;t display 500 images per s=
 econd.<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; Universe actually drops some share of those pictures w/o show=
 ing them. You wouldn&#39;t notice.<br>
 &gt; &gt;<br>
 &gt; &gt; Do you render the pictures that you then drop?<br>
 &gt; &gt;<br>
 &gt; &gt;&gt;&gt; Second, I tried running the program here:<br>
 &gt; &gt;&gt;&gt; <a href=3D"https://gist.github.com/samth/5882075">https:/=
 /gist.github.com/samth/5882075</a> which uses the lower-level dc<br>
 &gt; &gt;&gt;&gt; primitives to do something similar. It doesn&#39;t alloca=
 te much, and<br>
 &gt; &gt;&gt;&gt; doesn&#39;t stutter.<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; Sure, you have an abstraction layer in between and not one th=
 at is tuned. So you eliminated some overhead and you admit that it allocate=
 s. See &#39;much&#39;. So run it long enough to watch memory grow. The stut=
 tering is caused by the additional abstraction layers.<br>
 
 &gt; &gt;<br>
 &gt; &gt; I would be very surprised if the second program I posted grows at=
  all<br>
 &gt; &gt; over time. =C2=A0I&#39;ve measured it for over a minute, and it s=
 eems steady<br>
 &gt; &gt; for me at 101 MB max heap size.<br>
 &gt; &gt;<br>
 &gt; &gt;&gt; [[ By cutting the abstraction layer you have also eliminated =
 features. For example, you can&#39;t step thru the program anymore. ]]<br>
 &gt; &gt;<br>
 &gt; &gt; Sure, but that feature shouldn&#39;t result in unbounded memory g=
 rowth.<br>
 &gt; &gt;<br>
 &gt; &gt; Sam<br>
 </p>
 
 --001a11c3c49066db9e04e0351cd8--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Fri, 28 Jun 2013 07:57:16 -0400

 --Apple-Mail=_787179A7-4584-4020-9145-32C40AB13FA4
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Jun 27, 2013, at 11:02 PM, Sam Tobin-Hochstadt wrote:
 
 >>>=20
 >>> Second, I tried running the program here:
 >>> https://gist.github.com/samth/5882075 which uses the lower-level dc
 >>> primitives to do something similar. It doesn't allocate much, and
 >>> doesn't stutter.
 
 
 WHat I just noticed is that you=20
 
  (1) cut out both universe and image=20
  (2) manipulate a small image and insert it into the canvas=20
  (3) eliminate your own allocation of new balls and instead manipulate =
 the angle imperatively=20
 
 
 > define frame (new frame%
 >                    [label "Example"]
 >                    [width 600]
 >                    [height 600]))
 > (new canvas% [parent frame]
 >              [paint-callback
 >               (lambda (canvas dc)
 >                 (thread (lambda ()
 >                           (let loop ()=20
 >                             (sleep .001)
 >                             (send dc clear)
 >                             (send dc rotate (/ (modulo angle 360) (* 2 =
 pi)))
 >                             (send dc draw-bitmap LAMBDA (modulo n 300) =
 (modulo n 300))
 >                             (set! n (+ n 1)) (set! angle (+ 1 angle))
 >                             (loop))))
 >                 (send dc set-scale .5 .5))])
 > (send frame show #t)
 
 
 I am suspicious that this proves anything.=20=
 
 --Apple-Mail=_787179A7-4584-4020-9145-32C40AB13FA4
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDYyODExNTcxN1owIwYJKoZI
 hvcNAQkEMRYEFKyilobb0IluKfUVX9vdCQIl6vXzMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAGuSEmdJ6785hFI4+Y8FBd4xv3+AKV9eg/jCeLHsYYzeX498HsGDZeek3oPTmS1/3Vw/
 NfG7APH45j7dT4TiAAcHsLQ+RkNz7rPxWm63We8lVBYbZM/8BBQcSHdItlTBqNblrNzUC1M8nx0Y
 8zFKYBibFRVmZXC6uGot7dPn0ZMFm3sSHiDP2tgVSod5XSDAi2lmMVeeUpoSIQgjRze4HvMpzykk
 6D1PH+WmmfxFqkfflO5i6mwq+owXs2WLuuQhHeDVtF5g+3GBjpBsIyfk0rQIF51Y5ciU2FXzUr7z
 3iO+Ovtvd/WFwJmYzNemOqBxuOo02S5O3gSOtnEjbFIlRwcAAAAAAAA=
 
 --Apple-Mail=_787179A7-4584-4020-9145-32C40AB13FA4--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Sat, 29 Jun 2013 12:56:53 -0400

 --Apple-Mail=_C539FB6E-2D27-4BA2-BDB5-0EC0242FC387
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 
 > I am suspicious that this proves anything.
 
 Well, according to this experiment your gist really proves very little.=20=
 
 
 The program below is Katie's with MAIN replaced by code that directly=20
 calls into our GUI box but leaves everything else she does in place.=20
 
 It doesn't import any universe functionality other than image and a=20
 private helper function for image.=20
 
 The GC behavior is as bad as the one that you originally submitted=20
 BUT PLEASE CONFIRM ON YOUR MACHINE.=20
 
 [[=20
 I have also eliminated the check-expect (is void) macro and all
 check-expect lines. Please let her know that she's in grave danger
 of failing my F I due to over-commenting :-)=20
 ]]=20
 
 Robby cc-ed in case he spots something that consumes memory in=20
 image and triggers GC.=20
 
 THANKS -- Matthias
 
 
 
 #lang racket
 
 (require (except-in 2htdp/image frame))
 (require (only-in 2htdp/private/universe-image disable-cache))
 (require (except-in racket/gui/base make-pen make-color))
 
 ;; Constants
 (define WIDTH 600)
 (define HEIGHT 200)
 (define MTS (empty-scene WIDTH HEIGHT))
 (define CTR-Y (/ HEIGHT 2))
 (define LAMBDA (read-bitmap =
 "///Users/matthias/plt/pkgs/icons/plt-logo-red-flat.png"))
 (define ALMOST-PI 3.14159)
 (define RADIUS 39)
 (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 (define XMIN RADIUS)
 (define XMAX (- WIDTH RADIUS))
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D
 ;; Data definitions:
 
 (define-struct ball (x dx angle))
 ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] =
 Number[0,360))
 ;; interp. (make-ball x dx angle) is a round lambda symbol
 ;;          x is the position of the center of the ball (pixels)
 ;;          dx is the velocity (pixels per tick)
 ;;          angle is the rotation of the ball
 
 ;; Examples:
 (define B1 (make-ball 90 3 0))
 (define B2 (make-ball 200 -3 180))
 (define ball0 (make-ball 80 1 0))
 
 ;; Template rules used:
 ;; - compound data, 3 fields, atomic non-distinct
 
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 ;; Functions:
 
 ;; main : Ball -> Ball
 ;; start the world=20
 
 (define (main ball0)
   (define frame=20
     (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
  =20
   (define visible=20
     (new pasteboard%))
  =20
   (define editor-canvas
     (new editor-canvas% (parent frame) (editor visible)))
  =20
   (send editor-canvas focus)
  =20
   ;; Image -> Void
   ;; show the image in the visible world
   (define (show pict)
     (send visible begin-edit-sequence)
     (send visible lock #f)
     (let ([s (send visible find-first-snip)]
           [c (send visible get-canvas)])
       (when s (send visible delete s))
       (send visible insert (disable-cache (send pict copy)) 0 0)
       (send visible lock #t)
       (send visible end-edit-sequence)))
  =20
   (thread (lambda ()
             (let loop ([ball ball0])
               (sleep .001)
               (show (render-ball ball))
               (loop (next-ball ball)))))
   (send frame show #t))
 
 
 ;; next-ball: Ball -> Ball
 ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 
 (define (next-ball b)
   (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle =
 b))]
         [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) (ball-angle =
 b))]
         [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))=20
 
 ;; HELPERS For next-ball: next-x and next-angle
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 ;; next-x: Ball -> Natural[XMIN,XMAX]
 ;; find the hypothetical new x-coord of a Ball, NOT taking into account =
 that it may hit the edges
 (define (next-x b)
   (+ (ball-x b) (ball-dx b)))
 
 ;; simplify-angle: Number -> Number[0,360)
 ;; Given an angle in degrees, express it as a number between 0 and 360
 ;; Better than modulo because it can take non-integer values
 
 (define (simplify-angle a)
   (cond [(< a 0) (simplify-angle (+ a 360))]
         [(>=3D a 360) (simplify-angle (- a 360))]
         [else a]))
 
 
 ;; next-angle: Ball -> Number[0,360)
 ;; find the new angle of a Ball, expressed as Number[0,360)
 (define (next-angle b)
   (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))))
 
 ;; render-ball: Ball -> Image
 ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 (define (render-ball b)
   (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 
 ;; handle-mouse: Ball MouseEvent -> Ball
 ;; reverse rolling direction when the mouse is clicked
 (define (handle-mouse b x y me)
   (if (string=3D? me "button-up")
       (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
       (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 
 ;; =
 --------------------------------------------------------------------------=
 -------------------------
 ;; run program run=20
 
 (main (make-ball 80 1 0))
 
 
 --Apple-Mail=_C539FB6E-2D27-4BA2-BDB5-0EC0242FC387
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDYyOTE2NTY1NFowIwYJKoZI
 hvcNAQkEMRYEFOmMObVznwyjAigm7wgsAzc1CaT7MIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAIUrfbvhQl0QUR2Z/SsBKQuoFcJR2YdzzRWgzMaWYAEShEnF8t1hTc2FyRMg8fQVjRQD
 dbWVL61CXGy7C+lq6nufjs+TOl1ydpgUFQOm1edxdwW4ZsCxrPYCEMV10uoauLSz/r9FOrWagUsM
 Fu3uZBjSFk5t08Y3+CbOj3oQTwrVZ5eaW19N+UcHExuc4UYq+hxTV0iPyory5m+tbLkRnsuptter
 qC7VsOq0zJUNDx7qOrg9dVNriJO9jeTk7YoQ6DSc5SDpCRsSsvjRb4RmCBlcWtgvpSGOAXu13u1o
 rsIMwpYNkFyHzpd+WfklxLCtkT7lihsJt0zlI3bdrVN0SpIAAAAAAAA=
 
 --Apple-Mail=_C539FB6E-2D27-4BA2-BDB5-0EC0242FC387--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Sat, 29 Jun 2013 12:58:53 -0400

 --Apple-Mail=_58719E8E-46BA-468B-ABC8-C0070FD956A9
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 
 > I am suspicious that this proves anything.
 
 Well, according to this experiment your gist really proves very little.=20=
 
 
 The program below is Katie's with MAIN replaced by code that directly=20
 calls into our GUI box but leaves everything else she does in place.=20
 
 It doesn't import any universe functionality other than image and a=20
 private helper function for image.=20
 
 The GC behavior is as bad as the one that you originally submitted=20
 BUT PLEASE CONFIRM ON YOUR MACHINE.=20
 
 [[=20
 I have also eliminated the check-expect (is void) macro and all
 check-expect lines. Please let her know that she's in grave danger
 of failing my F I due to over-commenting :-)=20
 ]]=20
 
 Robby cc-ed in case he spots something that consumes memory in=20
 image and triggers GC.=20
 
 THANKS -- Matthias
 
 
 
 #lang racket
 
 (require (except-in 2htdp/image frame))
 (require (only-in 2htdp/private/universe-image disable-cache))
 (require (except-in racket/gui/base make-pen make-color))
 
 ;; Constants
 (define WIDTH 600)
 (define HEIGHT 200)
 (define MTS (empty-scene WIDTH HEIGHT))
 (define CTR-Y (/ HEIGHT 2))
 (define LAMBDA (read-bitmap =
 "///Users/matthias/plt/pkgs/icons/plt-logo-red-flat.png"))
 (define ALMOST-PI 3.14159)
 (define RADIUS 39)
 (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 (define XMIN RADIUS)
 (define XMAX (- WIDTH RADIUS))
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D
 ;; Data definitions:
 
 (define-struct ball (x dx angle))
 ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] =
 Number[0,360))
 ;; interp. (make-ball x dx angle) is a round lambda symbol
 ;;          x is the position of the center of the ball (pixels)
 ;;          dx is the velocity (pixels per tick)
 ;;          angle is the rotation of the ball
 
 ;; Examples:
 (define B1 (make-ball 90 3 0))
 (define B2 (make-ball 200 -3 180))
 (define ball0 (make-ball 80 1 0))
 
 ;; Template rules used:
 ;; - compound data, 3 fields, atomic non-distinct
 
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 ;; Functions:
 
 ;; main : Ball -> Ball
 ;; start the world=20
 
 (define (main ball0)
  (define frame=20
    (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
 
  (define visible=20
    (new pasteboard%))
 
  (define editor-canvas
    (new editor-canvas% (parent frame) (editor visible)))
 
  (send editor-canvas focus)
 
  ;; Image -> Void
  ;; show the image in the visible world
  (define (show pict)
    (send visible begin-edit-sequence)
    (send visible lock #f)
    (let ([s (send visible find-first-snip)]
          [c (send visible get-canvas)])
      (when s (send visible delete s))
      (send visible insert (disable-cache (send pict copy)) 0 0)
      (send visible lock #t)
      (send visible end-edit-sequence)))
 
  (thread (lambda ()
            (let loop ([ball ball0])
              (sleep .001)
              (show (render-ball ball))
              (loop (next-ball ball)))))
  (send frame show #t))
 
 
 ;; next-ball: Ball -> Ball
 ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 
 (define (next-ball b)
  (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle =
 b))]
        [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) (ball-angle =
 b))]
        [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))=20
 
 ;; HELPERS For next-ball: next-x and next-angle
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 ;; next-x: Ball -> Natural[XMIN,XMAX]
 ;; find the hypothetical new x-coord of a Ball, NOT taking into account =
 that it may hit the edges
 (define (next-x b)
  (+ (ball-x b) (ball-dx b)))
 
 ;; simplify-angle: Number -> Number[0,360)
 ;; Given an angle in degrees, express it as a number between 0 and 360
 ;; Better than modulo because it can take non-integer values
 
 (define (simplify-angle a)
  (cond [(< a 0) (simplify-angle (+ a 360))]
        [(>=3D a 360) (simplify-angle (- a 360))]
        [else a]))
 
 
 ;; next-angle: Ball -> Number[0,360)
 ;; find the new angle of a Ball, expressed as Number[0,360)
 (define (next-angle b)
  (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))))
 
 ;; render-ball: Ball -> Image
 ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 (define (render-ball b)
  (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 
 ;; handle-mouse: Ball MouseEvent -> Ball
 ;; reverse rolling direction when the mouse is clicked
 (define (handle-mouse b x y me)
  (if (string=3D? me "button-up")
      (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
      (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 
 ;; =
 --------------------------------------------------------------------------=
 -------------------------
 ;; run program run=20
 
 (main (make-ball 80 1 0))
 
 
 --Apple-Mail=_58719E8E-46BA-468B-ABC8-C0070FD956A9
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDYyOTE2NTg1M1owIwYJKoZI
 hvcNAQkEMRYEFA35O913gdsLgyi01Fy8W6r4Jc8ZMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAKy3cATOvxjO5W56egFo1k5MYS5bG/X4qRxLbg2G5x/7fd1nFfuyyYiXADeMJq8ib+vc
 l2frDJp91JZ3XTuPK7Wt64GYzHBuYtx+r0s/StIhOPyi9uQmXnA3Js9o/wCUNVgTIuHx9LksIgSw
 3uDNZXfxP+K6jGQLlR2ewZhwQrGO3VuNKMK6uhVTovPI9ivHRA23uj3FOLtq4SI6hjNjIX7eIs6y
 6r840KBVf1CfzCWMNU1Ztntr9/UgEhcxC5SlfehvyAp0iJpbbiQT/DliipUEudpg+ih4r+6nwPWd
 ntydXFVaYTki8XgQOrO1Fi6htYg3nOdOLubUOAsa4chWIYQAAAAAAAA=
 
 --Apple-Mail=_58719E8E-46BA-468B-ABC8-C0070FD956A9--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Sat, 29 Jun 2013 15:57:18 -0400

 On Sat, Jun 29, 2013 at 12:56 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 > On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 >
 >> I am suspicious that this proves anything.
 >
 > Well, according to this experiment your gist really proves very little.
 >
 > The program below is Katie's with MAIN replaced by code that directly
 > calls into our GUI box but leaves everything else she does in place.
 >
 > It doesn't import any universe functionality other than image and a
 > private helper function for image.
 
 What does `disable-cache` do?
 
 > The GC behavior is as bad as the one that you originally submitted
 > BUT PLEASE CONFIRM ON YOUR MACHINE.
 
 > Robby cc-ed in case he spots something that consumes memory in
 > image and triggers GC.
 
 Thanks for doing this experiment. I've tried this on my machine, and:
 
 1. It still clearly stutters.  I don't think it's quite as bad, but I
 should change my gcstats tool to report max pause time (and maybe
 MMU).
 2. The memory growth is much smaller.  My gcstats tool reports that
 after 4 seconds, the max memory use is 101MB, and after 50+ seconds,
 it's 134MB. In the universe version, the growth is something like
 100MB in a similar time frame.
 
 I'm going to investigate removing some of the other GUI layers that
 are still there (like editors and pasteboards) and see what happens.
 
 > [[
 > I have also eliminated the check-expect (is void) macro and all
 > check-expect lines. Please let her know that she's in grave danger
 > of failing my F I due to over-commenting :-)
 > ]]
 
 She would like to note that the comments were there because she was
 posting this code snippet to try to help other students understand the
 problem, who are likely in need of extra explanation.
 
 Sam
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Sat, 29 Jun 2013 16:57:35 -0400

 I created two more versions, both now at:
     https://gist.github.com/samth/5882075
 
 One is just like yours, but removes editors.  It behaves basically the
 same as your program.
 
 The second uses `slideshow/pict` instead of `2htdp/image`. It stutters
 much less, although it still does some, and I couldn't get it to
 implement the spec quite properly (because 2htdp/image's rotate is
 much nicer :).
 
 However, I then added max pause time reporting to my tool, and it's
 basically the same for all of these programs. So I'm now less sure
 that GC is actually causing the stuttering at all.
 
 Stumped,
 Sam
 
 On Sat, Jun 29, 2013 at 3:57 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Sat, Jun 29, 2013 at 12:56 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >> On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 >>
 >>> I am suspicious that this proves anything.
 >>
 >> Well, according to this experiment your gist really proves very little.
 >>
 >> The program below is Katie's with MAIN replaced by code that directly
 >> calls into our GUI box but leaves everything else she does in place.
 >>
 >> It doesn't import any universe functionality other than image and a
 >> private helper function for image.
 >
 > What does `disable-cache` do?
 >
 >> The GC behavior is as bad as the one that you originally submitted
 >> BUT PLEASE CONFIRM ON YOUR MACHINE.
 >
 >> Robby cc-ed in case he spots something that consumes memory in
 >> image and triggers GC.
 >
 > Thanks for doing this experiment. I've tried this on my machine, and:
 >
 > 1. It still clearly stutters.  I don't think it's quite as bad, but I
 > should change my gcstats tool to report max pause time (and maybe
 > MMU).
 > 2. The memory growth is much smaller.  My gcstats tool reports that
 > after 4 seconds, the max memory use is 101MB, and after 50+ seconds,
 > it's 134MB. In the universe version, the growth is something like
 > 100MB in a similar time frame.
 >
 > I'm going to investigate removing some of the other GUI layers that
 > are still there (like editors and pasteboards) and see what happens.
 >
 >> [[
 >> I have also eliminated the check-expect (is void) macro and all
 >> check-expect lines. Please let her know that she's in grave danger
 >> of failing my F I due to over-commenting :-)
 >> ]]
 >
 > She would like to note that the comments were there because she was
 > posting this code snippet to try to help other students understand the
 > problem, who are likely in need of extra explanation.
 >
 > Sam
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Sun, 30 Jun 2013 12:01:17 -0400

 --Apple-Mail=_B12E3F97-D95A-4E3F-9A20-6116573754BE
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 The growth in memory for universe surprises me. I just don't know where =
 it should come from because the code you see in my example *is* the =
 active code in universe. I just copied it over instead of importing it. =
 Well, there are the QUEUE-CALLBACKS to actually get events handled and =
 images drawn, and each of these allocates a closure.=20
 
 BTW, you should shift the calls to canvas manipulation from the user =
 thread to the eventspace thread. It is good practice, I tend to do so, =
 but I forgot to mention it in my eagerness to disprove your basic claim. =
 Robby reminded me.=20
 
 So one rough conjecture is that 2htdp/image consumes memory. Indeed, it =
 is quite possible that ROTATE is the culprit.=20
 
 And even worse, it is possible that memory isn't the reason for the =
 stutters. Now we need real experts to look at this.=20
 
 
 
 
 On Jun 29, 2013, at 4:57 PM, Sam Tobin-Hochstadt wrote:
 
 > I created two more versions, both now at:
 >    https://gist.github.com/samth/5882075
 >=20
 > One is just like yours, but removes editors.  It behaves basically the
 > same as your program.
 >=20
 > The second uses `slideshow/pict` instead of `2htdp/image`. It stutters
 > much less, although it still does some, and I couldn't get it to
 > implement the spec quite properly (because 2htdp/image's rotate is
 > much nicer :).
 >=20
 > However, I then added max pause time reporting to my tool, and it's
 > basically the same for all of these programs. So I'm now less sure
 > that GC is actually causing the stuttering at all.
 >=20
 > Stumped,
 > Sam
 >=20
 > On Sat, Jun 29, 2013 at 3:57 PM, Sam Tobin-Hochstadt =
 <samth@ccs.neu.edu> wrote:
 >> On Sat, Jun 29, 2013 at 12:56 PM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >>> On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 >>>=20
 >>>> I am suspicious that this proves anything.
 >>>=20
 >>> Well, according to this experiment your gist really proves very =
 little.
 >>>=20
 >>> The program below is Katie's with MAIN replaced by code that =
 directly
 >>> calls into our GUI box but leaves everything else she does in place.
 >>>=20
 >>> It doesn't import any universe functionality other than image and a
 >>> private helper function for image.
 >>=20
 >> What does `disable-cache` do?
 >>=20
 >>> The GC behavior is as bad as the one that you originally submitted
 >>> BUT PLEASE CONFIRM ON YOUR MACHINE.
 >>=20
 >>> Robby cc-ed in case he spots something that consumes memory in
 >>> image and triggers GC.
 >>=20
 >> Thanks for doing this experiment. I've tried this on my machine, and:
 >>=20
 >> 1. It still clearly stutters.  I don't think it's quite as bad, but I
 >> should change my gcstats tool to report max pause time (and maybe
 >> MMU).
 >> 2. The memory growth is much smaller.  My gcstats tool reports that
 >> after 4 seconds, the max memory use is 101MB, and after 50+ seconds,
 >> it's 134MB. In the universe version, the growth is something like
 >> 100MB in a similar time frame.
 >>=20
 >> I'm going to investigate removing some of the other GUI layers that
 >> are still there (like editors and pasteboards) and see what happens.
 >>=20
 >>> [[
 >>> I have also eliminated the check-expect (is void) macro and all
 >>> check-expect lines. Please let her know that she's in grave danger
 >>> of failing my F I due to over-commenting :-)
 >>> ]]
 >>=20
 >> She would like to note that the comments were there because she was
 >> posting this code snippet to try to help other students understand =
 the
 >> problem, who are likely in need of extra explanation.
 >>=20
 >> Sam
 
 
 --Apple-Mail=_B12E3F97-D95A-4E3F-9A20-6116573754BE
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDYzMDE2MDExOFowIwYJKoZI
 hvcNAQkEMRYEFH1D4sPJM2vF+q5ja6QAvPWvrrv2MIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAH8YybMwX57mZvMsKWRr7oWDI8eOBWM0IySUn+t9inp1v4icuwL2/MQeXqgwHY0Bs4ql
 XoO3IkWMD4r1gcfMumBdgai64Ce7HRbiKFdFTXfuPGkmyu8rnLOhOs5iNVImqSucTFh/QVtnw4VW
 vcWKhx3d9728i+Oni5SmEFauE1QkNwkzIcqxYflQuN7QFO84x4ARZeG4mSWwNkl4FTk6nwuv31Mv
 dY7brW2ufs8JVRApX0i4aIUC2kiDHf9tsGuKEL+kUgfiSEtqlnTfcwkp/zy/jfvI3sH6L5gRenuy
 7GyiODw8rZjuQ4G+Su9DC7DfEkWXVIdtLEi2tAAB3CBTngoAAAAAAAA=
 
 --Apple-Mail=_B12E3F97-D95A-4E3F-9A20-6116573754BE--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Sun, 30 Jun 2013 18:51:28 -0500

 --047d7b5d532a65ba8304e067ca12
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 FWIW, here are two comments on the code. Neither really related to the
 problem at hand, of course.
 
 1) the thread should look like this to avoid race conditions:
 
   (thread (lambda ()
             (let loop ([ball ball0])
               (sleep .001)
               (queue-callback (=CE=BB () (show (render-ball ball))) #f)
               (loop (next-ball ball)))))
 
 2) You can use collection-file-path instead of absolute paths. In this case=
 :
 
  (define LAMBDA (read-bitmap (collection-file-path
                              "plt-logo-red-flat.png"
                              "icons")))
 
 Robby
 
 
 On Sat, Jun 29, 2013 at 11:56 AM, Matthias Felleisen
 <matthias@ccs.neu.edu>wrote:
 
 >
 > On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 >
 > > I am suspicious that this proves anything.
 >
 > Well, according to this experiment your gist really proves very little.
 >
 > The program below is Katie's with MAIN replaced by code that directly
 > calls into our GUI box but leaves everything else she does in place.
 >
 > It doesn't import any universe functionality other than image and a
 > private helper function for image.
 >
 > The GC behavior is as bad as the one that you originally submitted
 > BUT PLEASE CONFIRM ON YOUR MACHINE.
 >
 > [[
 > I have also eliminated the check-expect (is void) macro and all
 > check-expect lines. Please let her know that she's in grave danger
 > of failing my F I due to over-commenting :-)
 > ]]
 >
 > Robby cc-ed in case he spots something that consumes memory in
 > image and triggers GC.
 >
 > THANKS -- Matthias
 >
 >
 >
 > #lang racket
 >
 > (require (except-in 2htdp/image frame))
 > (require (only-in 2htdp/private/universe-image disable-cache))
 > (require (except-in racket/gui/base make-pen make-color))
 >
 > ;; Constants
 > (define WIDTH 600)
 > (define HEIGHT 200)
 > (define MTS (empty-scene WIDTH HEIGHT))
 > (define CTR-Y (/ HEIGHT 2))
 > (define LAMBDA (read-bitmap
 > "///Users/matthias/plt/pkgs/icons/plt-logo-red-flat.png"))
 > (define ALMOST-PI 3.14159)
 > (define RADIUS 39)
 > (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 > (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 > (define XMIN RADIUS)
 > (define XMAX (- WIDTH RADIUS))
 > ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D
 > ;; Data definitions:
 >
 > (define-struct ball (x dx angle))
 > ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] Number[0,360=
 ))
 > ;; interp. (make-ball x dx angle) is a round lambda symbol
 > ;;          x is the position of the center of the ball (pixels)
 > ;;          dx is the velocity (pixels per tick)
 > ;;          angle is the rotation of the ball
 >
 > ;; Examples:
 > (define B1 (make-ball 90 3 0))
 > (define B2 (make-ball 200 -3 180))
 > (define ball0 (make-ball 80 1 0))
 >
 > ;; Template rules used:
 > ;; - compound data, 3 fields, atomic non-distinct
 >
 > ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 > ;; Functions:
 >
 > ;; main : Ball -> Ball
 > ;; start the world
 >
 > (define (main ball0)
 >   (define frame
 >     (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
 >
 >   (define visible
 >     (new pasteboard%))
 >
 >   (define editor-canvas
 >     (new editor-canvas% (parent frame) (editor visible)))
 >
 >   (send editor-canvas focus)
 >
 >   ;; Image -> Void
 >   ;; show the image in the visible world
 >   (define (show pict)
 >     (send visible begin-edit-sequence)
 >     (send visible lock #f)
 >     (let ([s (send visible find-first-snip)]
 >           [c (send visible get-canvas)])
 >       (when s (send visible delete s))
 >       (send visible insert (disable-cache (send pict copy)) 0 0)
 >       (send visible lock #t)
 >       (send visible end-edit-sequence)))
 >
 >   (thread (lambda ()
 >             (let loop ([ball ball0])
 >               (sleep .001)
 >               (show (render-ball ball))
 >               (loop (next-ball ball)))))
 >   (send frame show #t))
 >
 >
 > ;; next-ball: Ball -> Ball
 > ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 >
 > (define (next-ball b)
 >   (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle
 > b))]
 >         [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) (ball-angle
 > b))]
 >         [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))
 >
 > ;; HELPERS For next-ball: next-x and next-angle
 > ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 > ;; next-x: Ball -> Natural[XMIN,XMAX]
 > ;; find the hypothetical new x-coord of a Ball, NOT taking into account
 > that it may hit the edges
 > (define (next-x b)
 >   (+ (ball-x b) (ball-dx b)))
 >
 > ;; simplify-angle: Number -> Number[0,360)
 > ;; Given an angle in degrees, express it as a number between 0 and 360
 > ;; Better than modulo because it can take non-integer values
 >
 > (define (simplify-angle a)
 >   (cond [(< a 0) (simplify-angle (+ a 360))]
 >         [(>=3D a 360) (simplify-angle (- a 360))]
 >         [else a]))
 >
 >
 > ;; next-angle: Ball -> Number[0,360)
 > ;; find the new angle of a Ball, expressed as Number[0,360)
 > (define (next-angle b)
 >   (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))))
 >
 > ;; render-ball: Ball -> Image
 > ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 > (define (render-ball b)
 >   (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 >
 > ;; handle-mouse: Ball MouseEvent -> Ball
 > ;; reverse rolling direction when the mouse is clicked
 > (define (handle-mouse b x y me)
 >   (if (string=3D? me "button-up")
 >       (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
 >       (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 >
 > ;;
 > -------------------------------------------------------------------------=
 --------------------------
 > ;; run program run
 >
 > (main (make-ball 80 1 0))
 >
 >
 
 --047d7b5d532a65ba8304e067ca12
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>FWIW, here are two comments on the code. Neither real=
 ly related to the problem at hand, of course.<br></div><div><br></div><div>=
 1) the thread should look like this to avoid race conditions:</div>
 <div><br></div><div><div>=C2=A0 (thread (lambda ()</div><div>=C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (let loop ([ball ball0])</div><div>=C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (sleep .001)</div><div>=C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (queue-callback (=CE=BB () (show (rende=
 r-ball ball))) #f)</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (loop (next-ball ball=
 )))))</div><div><br></div><div>2) You can use collection-file-path instead =
 of absolute paths. In this case:</div><div><br></div><div>=C2=A0(define LAM=
 BDA (read-bitmap (collection-file-path =C2=A0</div>
 
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&quot;plt-logo-red-flat.png&quot;</div><d=
 iv>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&quot;icons&quot;)))</div></div><div><br>=
 </div><div>Robby</div><div class=3D"gmail_extra"><br><br><div class=3D"gmai=
 l_quote">
 
 On Sat, Jun 29, 2013 at 11:56 AM, Matthias Felleisen <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:matthias@ccs.neu.edu" target=3D"_blank">matthias@ccs.neu.=
 edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"mar=
 gin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 
 <div><br>
 On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:<br>
 <br>
 &gt; I am suspicious that this proves anything.<br>
 <br>
 </div>Well, according to this experiment your gist really proves very littl=
 e.<br>
 <br>
 The program below is Katie&#39;s with MAIN replaced by code that directly<b=
 r>
 calls into our GUI box but leaves everything else she does in place.<br>
 <br>
 It doesn&#39;t import any universe functionality other than image and a<br>
 private helper function for image.<br>
 <br>
 The GC behavior is as bad as the one that you originally submitted<br>
 BUT PLEASE CONFIRM ON YOUR MACHINE.<br>
 <br>
 [[<br>
 I have also eliminated the check-expect (is void) macro and all<br>
 check-expect lines. Please let her know that she&#39;s in grave danger<br>
 of failing my F I due to over-commenting :-)<br>
 ]]<br>
 <br>
 Robby cc-ed in case he spots something that consumes memory in<br>
 image and triggers GC.<br>
 <br>
 THANKS -- Matthias<br>
 <br>
 <br>
 <br>
 #lang racket<br>
 <br>
 (require (except-in 2htdp/image frame))<br>
 (require (only-in 2htdp/private/universe-image disable-cache))<br>
 (require (except-in racket/gui/base make-pen make-color))<br>
 <br>
 ;; Constants<br>
 (define WIDTH 600)<br>
 (define HEIGHT 200)<br>
 (define MTS (empty-scene WIDTH HEIGHT))<br>
 (define CTR-Y (/ HEIGHT 2))<br>
 (define LAMBDA (read-bitmap &quot;///Users/matthias/plt/pkgs/icons/plt-logo=
 -red-flat.png&quot;))<br>
 (define ALMOST-PI 3.14159)<br>
 (define RADIUS 39)<br>
 (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))<br>
 (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))<br>
 (define XMIN RADIUS)<br>
 (define XMAX (- WIDTH RADIUS))<br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; Data definitions:<br>
 <br>
 (define-struct ball (x dx angle))<br>
 ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] Number[0,360))=
 <br>
 ;; interp. (make-ball x dx angle) is a round lambda symbol<br>
 ;; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0x is the position of the center of the=
  ball (pixels)<br>
 ;; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0dx is the velocity (pixels per tick)<b=
 r>
 ;; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0angle is the rotation of the ball<br>
 <br>
 ;; Examples:<br>
 (define B1 (make-ball 90 3 0))<br>
 (define B2 (make-ball 200 -3 180))<br>
 (define ball0 (make-ball 80 1 0))<br>
 <br>
 ;; Template rules used:<br>
 ;; - compound data, 3 fields, atomic non-distinct<br>
 <br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; Functions:<br>
 <br>
 ;; main : Ball -&gt; Ball<br>
 ;; start the world<br>
 <br>
 (define (main ball0)<br>
 =C2=A0 (define frame<br>
 =C2=A0 =C2=A0 (new frame% [label &quot;Example&quot;] [width WIDTH] [height=
  HEIGHT]))<br>
 <br>
 =C2=A0 (define visible<br>
 =C2=A0 =C2=A0 (new pasteboard%))<br>
 <br>
 =C2=A0 (define editor-canvas<br>
 =C2=A0 =C2=A0 (new editor-canvas% (parent frame) (editor visible)))<br>
 <br>
 =C2=A0 (send editor-canvas focus)<br>
 <br>
 =C2=A0 ;; Image -&gt; Void<br>
 =C2=A0 ;; show the image in the visible world<br>
 =C2=A0 (define (show pict)<br>
 =C2=A0 =C2=A0 (send visible begin-edit-sequence)<br>
 =C2=A0 =C2=A0 (send visible lock #f)<br>
 =C2=A0 =C2=A0 (let ([s (send visible find-first-snip)]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [c (send visible get-canvas)])<br>
 =C2=A0 =C2=A0 =C2=A0 (when s (send visible delete s))<br>
 =C2=A0 =C2=A0 =C2=A0 (send visible insert (disable-cache (send pict copy)) =
 0 0)<br>
 =C2=A0 =C2=A0 =C2=A0 (send visible lock #t)<br>
 =C2=A0 =C2=A0 =C2=A0 (send visible end-edit-sequence)))<br>
 <br>
 =C2=A0 (thread (lambda ()<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (let loop ([ball ball0])<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (sleep .001)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (show (render-ball ball))<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (loop (next-ball ball)))))=
 <br>
 =C2=A0 (send frame show #t))<br>
 <br>
 <br>
 ;; next-ball: Ball -&gt; Ball<br>
 ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges<br>
 <br>
 (define (next-ball b)<br>
 =C2=A0 (cond [(&lt; (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-=
 angle b))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(&gt; (next-x b) XMAX) (make-ball XMAX (- (bal=
 l-dx b)) (ball-angle b))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [else (make-ball (next-x b) (ball-dx b) (next-a=
 ngle b))]))<br>
 <br>
 ;; HELPERS For next-ball: next-x and next-angle<br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; next-x: Ball -&gt; Natural[XMIN,XMAX]<br>
 ;; find the hypothetical new x-coord of a Ball, NOT taking into account tha=
 t it may hit the edges<br>
 (define (next-x b)<br>
 =C2=A0 (+ (ball-x b) (ball-dx b)))<br>
 <br>
 ;; simplify-angle: Number -&gt; Number[0,360)<br>
 ;; Given an angle in degrees, express it as a number between 0 and 360<br>
 ;; Better than modulo because it can take non-integer values<br>
 <br>
 (define (simplify-angle a)<br>
 =C2=A0 (cond [(&lt; a 0) (simplify-angle (+ a 360))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(&gt;=3D a 360) (simplify-angle (- a 360))]<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [else a]))<br>
 <br>
 <br>
 ;; next-angle: Ball -&gt; Number[0,360)<br>
 ;; find the new angle of a Ball, expressed as Number[0,360)<br>
 (define (next-angle b)<br>
 =C2=A0 (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))=
 ))<br>
 <br>
 ;; render-ball: Ball -&gt; Image<br>
 ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)<br>
 (define (render-ball b)<br>
 =C2=A0 (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))<b=
 r>
 <br>
 ;; handle-mouse: Ball MouseEvent -&gt; Ball<br>
 ;; reverse rolling direction when the mouse is clicked<br>
 (define (handle-mouse b x y me)<br>
 =C2=A0 (if (string=3D? me &quot;button-up&quot;)<br>
 =C2=A0 =C2=A0 =C2=A0 (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))<=
 br>
 =C2=A0 =C2=A0 =C2=A0 (make-ball (ball-x b) =C2=A0 =C2=A0(ball-dx b) =C2=A0(=
 ball-angle b))))<br>
 <br>
 ;; ------------------------------------------------------------------------=
 ---------------------------<br>
 ;; run program run<br>
 <br>
 (main (make-ball 80 1 0))<br>
 <br>
 </blockquote></div><br></div></div>
 
 --047d7b5d532a65ba8304e067ca12--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Sun, 30 Jun 2013 18:50:48 -0500

 --001a11c25632f99f7604e067c712
 Content-Type: text/plain; charset=UTF-8
 
 I've looked at it a little bit and rotating bitmaps allocates too much and
 just generally does too much work. I haven't had a chance to fix it yet,
 tho.
 
 Robby
 
 
 On Sun, Jun 30, 2013 at 11:01 AM, Matthias Felleisen
 <matthias@ccs.neu.edu>wrote:
 
 >
 > The growth in memory for universe surprises me. I just don't know where it
 > should come from because the code you see in my example *is* the active
 > code in universe. I just copied it over instead of importing it. Well,
 > there are the QUEUE-CALLBACKS to actually get events handled and images
 > drawn, and each of these allocates a closure.
 >
 > BTW, you should shift the calls to canvas manipulation from the user
 > thread to the eventspace thread. It is good practice, I tend to do so, but
 > I forgot to mention it in my eagerness to disprove your basic claim. Robby
 > reminded me.
 >
 > So one rough conjecture is that 2htdp/image consumes memory. Indeed, it is
 > quite possible that ROTATE is the culprit.
 >
 > And even worse, it is possible that memory isn't the reason for the
 > stutters. Now we need real experts to look at this.
 >
 >
 >
 >
 > On Jun 29, 2013, at 4:57 PM, Sam Tobin-Hochstadt wrote:
 >
 > > I created two more versions, both now at:
 > >    https://gist.github.com/samth/5882075
 > >
 > > One is just like yours, but removes editors.  It behaves basically the
 > > same as your program.
 > >
 > > The second uses `slideshow/pict` instead of `2htdp/image`. It stutters
 > > much less, although it still does some, and I couldn't get it to
 > > implement the spec quite properly (because 2htdp/image's rotate is
 > > much nicer :).
 > >
 > > However, I then added max pause time reporting to my tool, and it's
 > > basically the same for all of these programs. So I'm now less sure
 > > that GC is actually causing the stuttering at all.
 > >
 > > Stumped,
 > > Sam
 > >
 > > On Sat, Jun 29, 2013 at 3:57 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>
 > wrote:
 > >> On Sat, Jun 29, 2013 at 12:56 PM, Matthias Felleisen
 > >> <matthias@ccs.neu.edu> wrote:
 > >>> On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 > >>>
 > >>>> I am suspicious that this proves anything.
 > >>>
 > >>> Well, according to this experiment your gist really proves very little.
 > >>>
 > >>> The program below is Katie's with MAIN replaced by code that directly
 > >>> calls into our GUI box but leaves everything else she does in place.
 > >>>
 > >>> It doesn't import any universe functionality other than image and a
 > >>> private helper function for image.
 > >>
 > >> What does `disable-cache` do?
 > >>
 > >>> The GC behavior is as bad as the one that you originally submitted
 > >>> BUT PLEASE CONFIRM ON YOUR MACHINE.
 > >>
 > >>> Robby cc-ed in case he spots something that consumes memory in
 > >>> image and triggers GC.
 > >>
 > >> Thanks for doing this experiment. I've tried this on my machine, and:
 > >>
 > >> 1. It still clearly stutters.  I don't think it's quite as bad, but I
 > >> should change my gcstats tool to report max pause time (and maybe
 > >> MMU).
 > >> 2. The memory growth is much smaller.  My gcstats tool reports that
 > >> after 4 seconds, the max memory use is 101MB, and after 50+ seconds,
 > >> it's 134MB. In the universe version, the growth is something like
 > >> 100MB in a similar time frame.
 > >>
 > >> I'm going to investigate removing some of the other GUI layers that
 > >> are still there (like editors and pasteboards) and see what happens.
 > >>
 > >>> [[
 > >>> I have also eliminated the check-expect (is void) macro and all
 > >>> check-expect lines. Please let her know that she's in grave danger
 > >>> of failing my F I due to over-commenting :-)
 > >>> ]]
 > >>
 > >> She would like to note that the comments were there because she was
 > >> posting this code snippet to try to help other students understand the
 > >> problem, who are likely in need of extra explanation.
 > >>
 > >> Sam
 >
 >
 
 --001a11c25632f99f7604e067c712
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I&#39;ve looked at it a little bit and rotating bitmaps al=
 locates too much and just generally does too much work. I haven&#39;t had a=
  chance to fix it yet, tho.<div><br></div><div>Robby</div></div><div class=
 =3D"gmail_extra">
 <br><br><div class=3D"gmail_quote">On Sun, Jun 30, 2013 at 11:01 AM, Matthi=
 as Felleisen <span dir=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" =
 target=3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> wrote:<br><blockquote=
  class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc soli=
 d;padding-left:1ex">
 <br>
 The growth in memory for universe surprises me. I just don&#39;t know where=
  it should come from because the code you see in my example *is* the active=
  code in universe. I just copied it over instead of importing it. Well, the=
 re are the QUEUE-CALLBACKS to actually get events handled and images drawn,=
  and each of these allocates a closure.<br>
 
 <br>
 BTW, you should shift the calls to canvas manipulation from the user thread=
  to the eventspace thread. It is good practice, I tend to do so, but I forg=
 ot to mention it in my eagerness to disprove your basic claim. Robby remind=
 ed me.<br>
 
 <br>
 So one rough conjecture is that 2htdp/image consumes memory. Indeed, it is =
 quite possible that ROTATE is the culprit.<br>
 <br>
 And even worse, it is possible that memory isn&#39;t the reason for the stu=
 tters. Now we need real experts to look at this.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 <br>
 <br>
 <br>
 On Jun 29, 2013, at 4:57 PM, Sam Tobin-Hochstadt wrote:<br>
 <br>
 &gt; I created two more versions, both now at:<br>
 &gt; =C2=A0 =C2=A0<a href=3D"https://gist.github.com/samth/5882075" target=
 =3D"_blank">https://gist.github.com/samth/5882075</a><br>
 &gt;<br>
 &gt; One is just like yours, but removes editors. =C2=A0It behaves basicall=
 y the<br>
 &gt; same as your program.<br>
 &gt;<br>
 &gt; The second uses `slideshow/pict` instead of `2htdp/image`. It stutters=
 <br>
 &gt; much less, although it still does some, and I couldn&#39;t get it to<b=
 r>
 &gt; implement the spec quite properly (because 2htdp/image&#39;s rotate is=
 <br>
 &gt; much nicer :).<br>
 &gt;<br>
 &gt; However, I then added max pause time reporting to my tool, and it&#39;=
 s<br>
 &gt; basically the same for all of these programs. So I&#39;m now less sure=
 <br>
 &gt; that GC is actually causing the stuttering at all.<br>
 &gt;<br>
 &gt; Stumped,<br>
 &gt; Sam<br>
 &gt;<br>
 &gt; On Sat, Jun 29, 2013 at 3:57 PM, Sam Tobin-Hochstadt &lt;<a href=3D"ma=
 ilto:samth@ccs.neu.edu">samth@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;&gt; On Sat, Jun 29, 2013 at 12:56 PM, Matthias Felleisen<br>
 &gt;&gt; &lt;<a href=3D"mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</=
 a>&gt; wrote:<br>
 &gt;&gt;&gt; On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; I am suspicious that this proves anything.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Well, according to this experiment your gist really proves ver=
 y little.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; The program below is Katie&#39;s with MAIN replaced by code th=
 at directly<br>
 &gt;&gt;&gt; calls into our GUI box but leaves everything else she does in =
 place.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; It doesn&#39;t import any universe functionality other than im=
 age and a<br>
 &gt;&gt;&gt; private helper function for image.<br>
 &gt;&gt;<br>
 &gt;&gt; What does `disable-cache` do?<br>
 &gt;&gt;<br>
 &gt;&gt;&gt; The GC behavior is as bad as the one that you originally submi=
 tted<br>
 &gt;&gt;&gt; BUT PLEASE CONFIRM ON YOUR MACHINE.<br>
 &gt;&gt;<br>
 &gt;&gt;&gt; Robby cc-ed in case he spots something that consumes memory in=
 <br>
 &gt;&gt;&gt; image and triggers GC.<br>
 &gt;&gt;<br>
 &gt;&gt; Thanks for doing this experiment. I&#39;ve tried this on my machin=
 e, and:<br>
 &gt;&gt;<br>
 &gt;&gt; 1. It still clearly stutters. =C2=A0I don&#39;t think it&#39;s qui=
 te as bad, but I<br>
 &gt;&gt; should change my gcstats tool to report max pause time (and maybe<=
 br>
 &gt;&gt; MMU).<br>
 &gt;&gt; 2. The memory growth is much smaller. =C2=A0My gcstats tool report=
 s that<br>
 &gt;&gt; after 4 seconds, the max memory use is 101MB, and after 50+ second=
 s,<br>
 &gt;&gt; it&#39;s 134MB. In the universe version, the growth is something l=
 ike<br>
 &gt;&gt; 100MB in a similar time frame.<br>
 &gt;&gt;<br>
 &gt;&gt; I&#39;m going to investigate removing some of the other GUI layers=
  that<br>
 &gt;&gt; are still there (like editors and pasteboards) and see what happen=
 s.<br>
 &gt;&gt;<br>
 &gt;&gt;&gt; [[<br>
 &gt;&gt;&gt; I have also eliminated the check-expect (is void) macro and al=
 l<br>
 &gt;&gt;&gt; check-expect lines. Please let her know that she&#39;s in grav=
 e danger<br>
 &gt;&gt;&gt; of failing my F I due to over-commenting :-)<br>
 &gt;&gt;&gt; ]]<br>
 &gt;&gt;<br>
 &gt;&gt; She would like to note that the comments were there because she wa=
 s<br>
 &gt;&gt; posting this code snippet to try to help other students understand=
  the<br>
 &gt;&gt; problem, who are likely in need of extra explanation.<br>
 &gt;&gt;<br>
 &gt;&gt; Sam<br>
 <br>
 </div></div></blockquote></div><br></div>
 
 --001a11c25632f99f7604e067c712--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Mon, 1 Jul 2013 07:13:14 -0400

 --Apple-Mail=_9545AB7C-57C0-4311-9CF7-C63E6EA3023F
 Content-Type: multipart/alternative;
 	boundary="Apple-Mail=_8A977172-8D53-4000-828E-ED09BD0A6D90"
 
 
 --Apple-Mail=_8A977172-8D53-4000-828E-ED09BD0A6D90
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=utf-8
 
 
 As I pointed out in a reply that you should have seen before the =
 'lambda' in the queue callback is the only piece of memory allocation in =
 universe that I can think of. It is worth checking whether it explains =
 anything -- Matthias
 
 
 
 On Jun 30, 2013, at 7:51 PM, Robby Findler wrote:
 
 > FWIW, here are two comments on the code. Neither really related to the =
 problem at hand, of course.
 >=20
 > 1) the thread should look like this to avoid race conditions:
 >=20
 >   (thread (lambda ()
 >             (let loop ([ball ball0])
 >               (sleep .001)
 >               (queue-callback (=CE=BB () (show (render-ball ball))) =
 #f)
 >               (loop (next-ball ball)))))
 >=20
 > 2) You can use collection-file-path instead of absolute paths. In this =
 case:
 >=20
 >  (define LAMBDA (read-bitmap (collection-file-path =20
 >                              "plt-logo-red-flat.png"
 >                              "icons")))
 >=20
 > Robby
 >=20
 >=20
 > On Sat, Jun 29, 2013 at 11:56 AM, Matthias Felleisen =
 <matthias@ccs.neu.edu> wrote:
 >=20
 > On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 >=20
 > > I am suspicious that this proves anything.
 >=20
 > Well, according to this experiment your gist really proves very =
 little.
 >=20
 > The program below is Katie's with MAIN replaced by code that directly
 > calls into our GUI box but leaves everything else she does in place.
 >=20
 > It doesn't import any universe functionality other than image and a
 > private helper function for image.
 >=20
 > The GC behavior is as bad as the one that you originally submitted
 > BUT PLEASE CONFIRM ON YOUR MACHINE.
 >=20
 > [[
 > I have also eliminated the check-expect (is void) macro and all
 > check-expect lines. Please let her know that she's in grave danger
 > of failing my F I due to over-commenting :-)
 > ]]
 >=20
 > Robby cc-ed in case he spots something that consumes memory in
 > image and triggers GC.
 >=20
 > THANKS -- Matthias
 >=20
 >=20
 >=20
 > #lang racket
 >=20
 > (require (except-in 2htdp/image frame))
 > (require (only-in 2htdp/private/universe-image disable-cache))
 > (require (except-in racket/gui/base make-pen make-color))
 >=20
 > ;; Constants
 > (define WIDTH 600)
 > (define HEIGHT 200)
 > (define MTS (empty-scene WIDTH HEIGHT))
 > (define CTR-Y (/ HEIGHT 2))
 > (define LAMBDA (read-bitmap =
 "///Users/matthias/plt/pkgs/icons/plt-logo-red-flat.png"))
 > (define ALMOST-PI 3.14159)
 > (define RADIUS 39)
 > (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 > (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 > (define XMIN RADIUS)
 > (define XMAX (- WIDTH RADIUS))
 > ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D
 > ;; Data definitions:
 >=20
 > (define-struct ball (x dx angle))
 > ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] =
 Number[0,360))
 > ;; interp. (make-ball x dx angle) is a round lambda symbol
 > ;;          x is the position of the center of the ball (pixels)
 > ;;          dx is the velocity (pixels per tick)
 > ;;          angle is the rotation of the ball
 >=20
 > ;; Examples:
 > (define B1 (make-ball 90 3 0))
 > (define B2 (make-ball 200 -3 180))
 > (define ball0 (make-ball 80 1 0))
 >=20
 > ;; Template rules used:
 > ;; - compound data, 3 fields, atomic non-distinct
 >=20
 > ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 > ;; Functions:
 >=20
 > ;; main : Ball -> Ball
 > ;; start the world
 >=20
 > (define (main ball0)
 >   (define frame
 >     (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
 >=20
 >   (define visible
 >     (new pasteboard%))
 >=20
 >   (define editor-canvas
 >     (new editor-canvas% (parent frame) (editor visible)))
 >=20
 >   (send editor-canvas focus)
 >=20
 >   ;; Image -> Void
 >   ;; show the image in the visible world
 >   (define (show pict)
 >     (send visible begin-edit-sequence)
 >     (send visible lock #f)
 >     (let ([s (send visible find-first-snip)]
 >           [c (send visible get-canvas)])
 >       (when s (send visible delete s))
 >       (send visible insert (disable-cache (send pict copy)) 0 0)
 >       (send visible lock #t)
 >       (send visible end-edit-sequence)))
 >=20
 >   (thread (lambda ()
 >             (let loop ([ball ball0])
 >               (sleep .001)
 >               (show (render-ball ball))
 >               (loop (next-ball ball)))))
 >   (send frame show #t))
 >=20
 >=20
 > ;; next-ball: Ball -> Ball
 > ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 >=20
 > (define (next-ball b)
 >   (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) =
 (ball-angle b))]
 >         [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) =
 (ball-angle b))]
 >         [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))
 >=20
 > ;; HELPERS For next-ball: next-x and next-angle
 > ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 > ;; next-x: Ball -> Natural[XMIN,XMAX]
 > ;; find the hypothetical new x-coord of a Ball, NOT taking into =
 account that it may hit the edges
 > (define (next-x b)
 >   (+ (ball-x b) (ball-dx b)))
 >=20
 > ;; simplify-angle: Number -> Number[0,360)
 > ;; Given an angle in degrees, express it as a number between 0 and 360
 > ;; Better than modulo because it can take non-integer values
 >=20
 > (define (simplify-angle a)
 >   (cond [(< a 0) (simplify-angle (+ a 360))]
 >         [(>=3D a 360) (simplify-angle (- a 360))]
 >         [else a]))
 >=20
 >=20
 > ;; next-angle: Ball -> Number[0,360)
 > ;; find the new angle of a Ball, expressed as Number[0,360)
 > (define (next-angle b)
 >   (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx =
 b)))))
 >=20
 > ;; render-ball: Ball -> Image
 > ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 > (define (render-ball b)
 >   (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 >=20
 > ;; handle-mouse: Ball MouseEvent -> Ball
 > ;; reverse rolling direction when the mouse is clicked
 > (define (handle-mouse b x y me)
 >   (if (string=3D? me "button-up")
 >       (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
 >       (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 >=20
 > ;; =
 --------------------------------------------------------------------------=
 -------------------------
 > ;; run program run
 >=20
 > (main (make-ball 80 1 0))
 >=20
 >=20
 
 
 --Apple-Mail=_8A977172-8D53-4000-828E-ED09BD0A6D90
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=utf-8
 
 <html><head></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
 "><div><br></div><div>As I pointed out in a reply that you should have =
 seen before the 'lambda' in the queue callback is the only piece of =
 memory allocation in universe that I can think of. It is worth checking =
 whether it explains anything -- =
 Matthias</div><div><br></div><div><br></div><br><div><div>On Jun 30, =
 2013, at 7:51 PM, Robby Findler wrote:</div><br =
 class=3D"Apple-interchange-newline"><blockquote type=3D"cite"><div =
 dir=3D"ltr"><div>FWIW, here are two comments on the code. Neither really =
 related to the problem at hand, of =
 course.<br></div><div><br></div><div>1) the thread should look like this =
 to avoid race conditions:</div>
 <div><br></div><div><div>&nbsp; (thread (lambda ()</div><div>&nbsp; =
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (let loop ([ball =
 ball0])</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 (sleep .001)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 (queue-callback (=CE=BB () (show (render-ball ball))) #f)</div>
 <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (loop (next-ball =
 ball)))))</div><div><br></div><div>2) You can use collection-file-path =
 instead of absolute paths. In this =
 case:</div><div><br></div><div>&nbsp;(define LAMBDA (read-bitmap =
 (collection-file-path &nbsp;</div>
 
 <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 &nbsp;"plt-logo-red-flat.png"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; =
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 &nbsp;"icons")))</div></div><div><br></div><div>Robby</div><div =
 class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">
 
 On Sat, Jun 29, 2013 at 11:56 AM, Matthias Felleisen <span =
 dir=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" =
 target=3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> =
 wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 
 <div><br>
 On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:<br>
 <br>
 &gt; I am suspicious that this proves anything.<br>
 <br>
 </div>Well, according to this experiment your gist really proves very =
 little.<br>
 <br>
 The program below is Katie's with MAIN replaced by code that =
 directly<br>
 calls into our GUI box but leaves everything else she does in place.<br>
 <br>
 It doesn't import any universe functionality other than image and a<br>
 private helper function for image.<br>
 <br>
 The GC behavior is as bad as the one that you originally submitted<br>
 BUT PLEASE CONFIRM ON YOUR MACHINE.<br>
 <br>
 [[<br>
 I have also eliminated the check-expect (is void) macro and all<br>
 check-expect lines. Please let her know that she's in grave danger<br>
 of failing my F I due to over-commenting :-)<br>
 ]]<br>
 <br>
 Robby cc-ed in case he spots something that consumes memory in<br>
 image and triggers GC.<br>
 <br>
 THANKS -- Matthias<br>
 <br>
 <br>
 <br>
 #lang racket<br>
 <br>
 (require (except-in 2htdp/image frame))<br>
 (require (only-in 2htdp/private/universe-image disable-cache))<br>
 (require (except-in racket/gui/base make-pen make-color))<br>
 <br>
 ;; Constants<br>
 (define WIDTH 600)<br>
 (define HEIGHT 200)<br>
 (define MTS (empty-scene WIDTH HEIGHT))<br>
 (define CTR-Y (/ HEIGHT 2))<br>
 (define LAMBDA (read-bitmap =
 "///Users/matthias/plt/pkgs/icons/plt-logo-red-flat.png"))<br>
 (define ALMOST-PI 3.14159)<br>
 (define RADIUS 39)<br>
 (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))<br>
 (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))<br>
 (define XMIN RADIUS)<br>
 (define XMAX (- WIDTH RADIUS))<br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; Data definitions:<br>
 <br>
 (define-struct ball (x dx angle))<br>
 ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] =
 Number[0,360))<br>
 ;; interp. (make-ball x dx angle) is a round lambda symbol<br>
 ;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x is the position of the center of =
 the ball (pixels)<br>
 ;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dx is the velocity (pixels per =
 tick)<br>
 ;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;angle is the rotation of the =
 ball<br>
 <br>
 ;; Examples:<br>
 (define B1 (make-ball 90 3 0))<br>
 (define B2 (make-ball 200 -3 180))<br>
 (define ball0 (make-ball 80 1 0))<br>
 <br>
 ;; Template rules used:<br>
 ;; - compound data, 3 fields, atomic non-distinct<br>
 <br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; Functions:<br>
 <br>
 ;; main : Ball -&gt; Ball<br>
 ;; start the world<br>
 <br>
 (define (main ball0)<br>
 &nbsp; (define frame<br>
 &nbsp; &nbsp; (new frame% [label "Example"] [width WIDTH] [height =
 HEIGHT]))<br>
 <br>
 &nbsp; (define visible<br>
 &nbsp; &nbsp; (new pasteboard%))<br>
 <br>
 &nbsp; (define editor-canvas<br>
 &nbsp; &nbsp; (new editor-canvas% (parent frame) (editor visible)))<br>
 <br>
 &nbsp; (send editor-canvas focus)<br>
 <br>
 &nbsp; ;; Image -&gt; Void<br>
 &nbsp; ;; show the image in the visible world<br>
 &nbsp; (define (show pict)<br>
 &nbsp; &nbsp; (send visible begin-edit-sequence)<br>
 &nbsp; &nbsp; (send visible lock #f)<br>
 &nbsp; &nbsp; (let ([s (send visible find-first-snip)]<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [c (send visible get-canvas)])<br>
 &nbsp; &nbsp; &nbsp; (when s (send visible delete s))<br>
 &nbsp; &nbsp; &nbsp; (send visible insert (disable-cache (send pict =
 copy)) 0 0)<br>
 &nbsp; &nbsp; &nbsp; (send visible lock #t)<br>
 &nbsp; &nbsp; &nbsp; (send visible end-edit-sequence)))<br>
 <br>
 &nbsp; (thread (lambda ()<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (let loop ([ball ball0])<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (sleep .001)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (show (render-ball =
 ball))<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (loop (next-ball =
 ball)))))<br>
 &nbsp; (send frame show #t))<br>
 <br>
 <br>
 ;; next-ball: Ball -&gt; Ball<br>
 ;; increase ball-x by dx; increase ball-angle by dx; bounce off =
 edges<br>
 <br>
 (define (next-ball b)<br>
 &nbsp; (cond [(&lt; (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) =
 (ball-angle b))]<br>
 &nbsp; &nbsp; &nbsp; &nbsp; [(&gt; (next-x b) XMAX) (make-ball XMAX (- =
 (ball-dx b)) (ball-angle b))]<br>
 &nbsp; &nbsp; &nbsp; &nbsp; [else (make-ball (next-x b) (ball-dx b) =
 (next-angle b))]))<br>
 <br>
 ;; HELPERS For next-ball: next-x and next-angle<br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; next-x: Ball -&gt; Natural[XMIN,XMAX]<br>
 ;; find the hypothetical new x-coord of a Ball, NOT taking into account =
 that it may hit the edges<br>
 (define (next-x b)<br>
 &nbsp; (+ (ball-x b) (ball-dx b)))<br>
 <br>
 ;; simplify-angle: Number -&gt; Number[0,360)<br>
 ;; Given an angle in degrees, express it as a number between 0 and =
 360<br>
 ;; Better than modulo because it can take non-integer values<br>
 <br>
 (define (simplify-angle a)<br>
 &nbsp; (cond [(&lt; a 0) (simplify-angle (+ a 360))]<br>
 &nbsp; &nbsp; &nbsp; &nbsp; [(&gt;=3D a 360) (simplify-angle (- a =
 360))]<br>
 &nbsp; &nbsp; &nbsp; &nbsp; [else a]))<br>
 <br>
 <br>
 ;; next-angle: Ball -&gt; Number[0,360)<br>
 ;; find the new angle of a Ball, expressed as Number[0,360)<br>
 (define (next-angle b)<br>
 &nbsp; (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx =
 b)))))<br>
 <br>
 ;; render-ball: Ball -&gt; Image<br>
 ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)<br>
 (define (render-ball b)<br>
 &nbsp; (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y =
 MTS))<br>
 <br>
 ;; handle-mouse: Ball MouseEvent -&gt; Ball<br>
 ;; reverse rolling direction when the mouse is clicked<br>
 (define (handle-mouse b x y me)<br>
 &nbsp; (if (string=3D? me "button-up")<br>
 &nbsp; &nbsp; &nbsp; (make-ball (ball-x b) (- (ball-dx b)) (ball-angle =
 b))<br>
 &nbsp; &nbsp; &nbsp; (make-ball (ball-x b) &nbsp; &nbsp;(ball-dx b) =
 &nbsp;(ball-angle b))))<br>
 <br>
 ;; =
 --------------------------------------------------------------------------=
 -------------------------<br>
 ;; run program run<br>
 <br>
 (main (make-ball 80 1 0))<br>
 <br>
 </blockquote></div><br></div></div>
 </blockquote></div><br></body></html>=
 
 --Apple-Mail=_8A977172-8D53-4000-828E-ED09BD0A6D90--
 
 --Apple-Mail=_9545AB7C-57C0-4311-9CF7-C63E6EA3023F
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDcwMTExMTMxNVowIwYJKoZI
 hvcNAQkEMRYEFMw/Lr0LmvNY6HziNPKE7c8xyBFJMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAI2TK7ICO1lMH98Ko9hafbby07HyB9mgvAusw+qLvouiHXc6yRoX9++U1zoh5VkjTEEW
 fVCkzwDhvlGvIKnkkbqweDTJTGDLmBh2ATn33oWlhQ03Y4pMgMaavO0qy+4xzOo3g4oMzXcQGwBE
 ex1Ed0eRNe1bhv42lBPhxN0RXsBjLaUk2INfMgXl66skx7dU0XaUID7zDCja8Dky9MeymkuCp0Ui
 UyhwcmYo4a7mcrexsc+jwRZ4XFVaNSlmGk0KTXDT56Pytkcvo2pxAFzvQYMXWqwYLwCQw6sTT6Gv
 WhTdmgJSZBcDMv5hBSBuU/wkuMukDbJAI14x9Q2tlaseS4QAAAAAAAA=
 
 --Apple-Mail=_9545AB7C-57C0-4311-9CF7-C63E6EA3023F--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Mon, 1 Jul 2013 06:16:56 -0500

 --001a11c30252d61d0c04e0715dd0
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I don't think it does. As I said, the problem is in the bitmaps. FWIW, I've
 gotten far enough to be sure that that's the original issue -- I'm seeing
 about 3x the max framerate speed with a better bitmap drawing (but it
 currently draws wrongly in my version ... still trying to sort that out).
 
 Also there are many other places (ball creation, float arithmetic, etc) in
 this code that allocate a little including that lambda, but none of them
 allocate much (except the hidden allocation inside the code that draws
 bitmaps).
 
 And just in case there is remaining confusion here, the reason I pointed to
 this lambda has nothing to do with allocation or performance.
 
 Robby
 
 
 On Mon, Jul 1, 2013 at 6:13 AM, Matthias Felleisen <matthias@ccs.neu.edu>wr=
 ote:
 
 >
 > As I pointed out in a reply that you should have seen before the 'lambda'
 > in the queue callback is the only piece of memory allocation in universe
 > that I can think of. It is worth checking whether it explains anything --
 > Matthias
 >
 >
 >
 > On Jun 30, 2013, at 7:51 PM, Robby Findler wrote:
 >
 > FWIW, here are two comments on the code. Neither really related to the
 > problem at hand, of course.
 >
 > 1) the thread should look like this to avoid race conditions:
 >
 >   (thread (lambda ()
 >             (let loop ([ball ball0])
 >               (sleep .001)
 >               (queue-callback (=CE=BB () (show (render-ball ball))) #f)
 >               (loop (next-ball ball)))))
 >
 > 2) You can use collection-file-path instead of absolute paths. In this
 > case:
 >
 >  (define LAMBDA (read-bitmap (collection-file-path
 >                              "plt-logo-red-flat.png"
 >                              "icons")))
 >
 > Robby
 >
 >
 > On Sat, Jun 29, 2013 at 11:56 AM, Matthias Felleisen <matthias@ccs.neu.ed=
 u
 > > wrote:
 >
 >>
 >> On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:
 >>
 >> > I am suspicious that this proves anything.
 >>
 >> Well, according to this experiment your gist really proves very little.
 >>
 >> The program below is Katie's with MAIN replaced by code that directly
 >> calls into our GUI box but leaves everything else she does in place.
 >>
 >> It doesn't import any universe functionality other than image and a
 >> private helper function for image.
 >>
 >> The GC behavior is as bad as the one that you originally submitted
 >> BUT PLEASE CONFIRM ON YOUR MACHINE.
 >>
 >> [[
 >> I have also eliminated the check-expect (is void) macro and all
 >> check-expect lines. Please let her know that she's in grave danger
 >> of failing my F I due to over-commenting :-)
 >> ]]
 >>
 >> Robby cc-ed in case he spots something that consumes memory in
 >> image and triggers GC.
 >>
 >> THANKS -- Matthias
 >>
 >>
 >>
 >> #lang racket
 >>
 >> (require (except-in 2htdp/image frame))
 >> (require (only-in 2htdp/private/universe-image disable-cache))
 >> (require (except-in racket/gui/base make-pen make-color))
 >>
 >> ;; Constants
 >> (define WIDTH 600)
 >> (define HEIGHT 200)
 >> (define MTS (empty-scene WIDTH HEIGHT))
 >> (define CTR-Y (/ HEIGHT 2))
 >> (define LAMBDA (read-bitmap
 >> "///Users/matthias/plt/pkgs/icons/plt-logo-red-flat.png"))
 >> (define ALMOST-PI 3.14159)
 >> (define RADIUS 39)
 >> (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 >> (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 >> (define XMIN RADIUS)
 >> (define XMAX (- WIDTH RADIUS))
 >> ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D
 >> ;; Data definitions:
 >>
 >> (define-struct ball (x dx angle))
 >> ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH]
 >> Number[0,360))
 >> ;; interp. (make-ball x dx angle) is a round lambda symbol
 >> ;;          x is the position of the center of the ball (pixels)
 >> ;;          dx is the velocity (pixels per tick)
 >> ;;          angle is the rotation of the ball
 >>
 >> ;; Examples:
 >> (define B1 (make-ball 90 3 0))
 >> (define B2 (make-ball 200 -3 180))
 >> (define ball0 (make-ball 80 1 0))
 >>
 >> ;; Template rules used:
 >> ;; - compound data, 3 fields, atomic non-distinct
 >>
 >> ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 >> ;; Functions:
 >>
 >> ;; main : Ball -> Ball
 >> ;; start the world
 >>
 >> (define (main ball0)
 >>   (define frame
 >>     (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
 >>
 >>   (define visible
 >>     (new pasteboard%))
 >>
 >>   (define editor-canvas
 >>     (new editor-canvas% (parent frame) (editor visible)))
 >>
 >>   (send editor-canvas focus)
 >>
 >>   ;; Image -> Void
 >>   ;; show the image in the visible world
 >>   (define (show pict)
 >>     (send visible begin-edit-sequence)
 >>     (send visible lock #f)
 >>     (let ([s (send visible find-first-snip)]
 >>           [c (send visible get-canvas)])
 >>       (when s (send visible delete s))
 >>       (send visible insert (disable-cache (send pict copy)) 0 0)
 >>       (send visible lock #t)
 >>       (send visible end-edit-sequence)))
 >>
 >>   (thread (lambda ()
 >>             (let loop ([ball ball0])
 >>               (sleep .001)
 >>               (show (render-ball ball))
 >>               (loop (next-ball ball)))))
 >>   (send frame show #t))
 >>
 >>
 >> ;; next-ball: Ball -> Ball
 >> ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 >>
 >> (define (next-ball b)
 >>   (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle
 >> b))]
 >>         [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) (ball-angle
 >> b))]
 >>         [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))
 >>
 >> ;; HELPERS For next-ball: next-x and next-angle
 >> ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 >> ;; next-x: Ball -> Natural[XMIN,XMAX]
 >> ;; find the hypothetical new x-coord of a Ball, NOT taking into account
 >> that it may hit the edges
 >> (define (next-x b)
 >>   (+ (ball-x b) (ball-dx b)))
 >>
 >> ;; simplify-angle: Number -> Number[0,360)
 >> ;; Given an angle in degrees, express it as a number between 0 and 360
 >> ;; Better than modulo because it can take non-integer values
 >>
 >> (define (simplify-angle a)
 >>   (cond [(< a 0) (simplify-angle (+ a 360))]
 >>         [(>=3D a 360) (simplify-angle (- a 360))]
 >>         [else a]))
 >>
 >>
 >> ;; next-angle: Ball -> Number[0,360)
 >> ;; find the new angle of a Ball, expressed as Number[0,360)
 >> (define (next-angle b)
 >>   (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))))
 >>
 >> ;; render-ball: Ball -> Image
 >> ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 >> (define (render-ball b)
 >>   (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 >>
 >> ;; handle-mouse: Ball MouseEvent -> Ball
 >> ;; reverse rolling direction when the mouse is clicked
 >> (define (handle-mouse b x y me)
 >>   (if (string=3D? me "button-up")
 >>       (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
 >>       (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 >>
 >> ;;
 >> ------------------------------------------------------------------------=
 ---------------------------
 >> ;; run program run
 >>
 >> (main (make-ball 80 1 0))
 >>
 >>
 >
 >
 
 --001a11c30252d61d0c04e0715dd0
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I don&#39;t think it does. As I said, the problem is in th=
 e bitmaps. FWIW, I&#39;ve gotten far enough to be sure that that&#39;s the =
 original issue -- I&#39;m seeing about 3x the max framerate speed with a be=
 tter bitmap drawing (but it currently draws wrongly in my version ... still=
  trying to sort that out).<div>
 <br></div><div>Also there are many other places (ball creation, float arith=
 metic, etc) in this code that allocate a little including that lambda, but =
 none of them allocate much (except the hidden allocation inside the code th=
 at draws bitmaps).</div>
 <div><br></div><div style>And just in case there is remaining confusion her=
 e, the reason I pointed to this lambda has nothing to do with allocation or=
  performance.</div><div><br></div><div>Robby</div></div><div class=3D"gmail=
 _extra">
 <br><br><div class=3D"gmail_quote">On Mon, Jul 1, 2013 at 6:13 AM, Matthias=
  Felleisen <span dir=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" ta=
 rget=3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> wrote:<br><blockquote c=
 lass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;=
 padding-left:1ex">
 <div style=3D"word-wrap:break-word"><div><br></div><div>As I pointed out in=
  a reply that you should have seen before the &#39;lambda&#39; in the queue=
  callback is the only piece of memory allocation in universe that I can thi=
 nk of. It is worth checking whether it explains anything -- Matthias</div>
 <div><div class=3D"h5"><div><br></div><div><br></div><br><div><div>On Jun 3=
 0, 2013, at 7:51 PM, Robby Findler wrote:</div><br><blockquote type=3D"cite=
 "><div dir=3D"ltr"><div>FWIW, here are two comments on the code. Neither re=
 ally related to the problem at hand, of course.<br>
 </div><div><br></div><div>1) the thread should look like this to avoid race=
  conditions:</div>
 <div><br></div><div><div>=C2=A0 (thread (lambda ()</div><div>=C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (let loop ([ball ball0])</div><div>=C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (sleep .001)</div><div>=C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (queue-callback (=CE=BB () (show (rende=
 r-ball ball))) #f)</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (loop (next-ball ball=
 )))))</div><div><br></div><div>2) You can use collection-file-path instead =
 of absolute paths. In this case:</div><div><br></div><div>=C2=A0(define LAM=
 BDA (read-bitmap (collection-file-path =C2=A0</div>
 
 
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&quot;plt-logo-red-flat.png&quot;</div><d=
 iv>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&quot;icons&quot;)))</div></div><div><br>=
 </div><div>Robby</div><div class=3D"gmail_extra"><br><br><div class=3D"gmai=
 l_quote">
 
 
 On Sat, Jun 29, 2013 at 11:56 AM, Matthias Felleisen <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:matthias@ccs.neu.edu" target=3D"_blank">matthias@ccs.neu.=
 edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"mar=
 gin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 
 
 <div><br>
 On Jun 28, 2013, at 7:57 AM, Matthias Felleisen wrote:<br>
 <br>
 &gt; I am suspicious that this proves anything.<br>
 <br>
 </div>Well, according to this experiment your gist really proves very littl=
 e.<br>
 <br>
 The program below is Katie&#39;s with MAIN replaced by code that directly<b=
 r>
 calls into our GUI box but leaves everything else she does in place.<br>
 <br>
 It doesn&#39;t import any universe functionality other than image and a<br>
 private helper function for image.<br>
 <br>
 The GC behavior is as bad as the one that you originally submitted<br>
 BUT PLEASE CONFIRM ON YOUR MACHINE.<br>
 <br>
 [[<br>
 I have also eliminated the check-expect (is void) macro and all<br>
 check-expect lines. Please let her know that she&#39;s in grave danger<br>
 of failing my F I due to over-commenting :-)<br>
 ]]<br>
 <br>
 Robby cc-ed in case he spots something that consumes memory in<br>
 image and triggers GC.<br>
 <br>
 THANKS -- Matthias<br>
 <br>
 <br>
 <br>
 #lang racket<br>
 <br>
 (require (except-in 2htdp/image frame))<br>
 (require (only-in 2htdp/private/universe-image disable-cache))<br>
 (require (except-in racket/gui/base make-pen make-color))<br>
 <br>
 ;; Constants<br>
 (define WIDTH 600)<br>
 (define HEIGHT 200)<br>
 (define MTS (empty-scene WIDTH HEIGHT))<br>
 (define CTR-Y (/ HEIGHT 2))<br>
 (define LAMBDA (read-bitmap &quot;///Users/matthias/plt/pkgs/icons/plt-logo=
 -red-flat.png&quot;))<br>
 (define ALMOST-PI 3.14159)<br>
 (define RADIUS 39)<br>
 (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))<br>
 (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))<br>
 (define XMIN RADIUS)<br>
 (define XMAX (- WIDTH RADIUS))<br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; Data definitions:<br>
 <br>
 (define-struct ball (x dx angle))<br>
 ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] Number[0,360))=
 <br>
 ;; interp. (make-ball x dx angle) is a round lambda symbol<br>
 ;; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0x is the position of the center of the=
  ball (pixels)<br>
 ;; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0dx is the velocity (pixels per tick)<b=
 r>
 ;; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0angle is the rotation of the ball<br>
 <br>
 ;; Examples:<br>
 (define B1 (make-ball 90 3 0))<br>
 (define B2 (make-ball 200 -3 180))<br>
 (define ball0 (make-ball 80 1 0))<br>
 <br>
 ;; Template rules used:<br>
 ;; - compound data, 3 fields, atomic non-distinct<br>
 <br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; Functions:<br>
 <br>
 ;; main : Ball -&gt; Ball<br>
 ;; start the world<br>
 <br>
 (define (main ball0)<br>
 =C2=A0 (define frame<br>
 =C2=A0 =C2=A0 (new frame% [label &quot;Example&quot;] [width WIDTH] [height=
  HEIGHT]))<br>
 <br>
 =C2=A0 (define visible<br>
 =C2=A0 =C2=A0 (new pasteboard%))<br>
 <br>
 =C2=A0 (define editor-canvas<br>
 =C2=A0 =C2=A0 (new editor-canvas% (parent frame) (editor visible)))<br>
 <br>
 =C2=A0 (send editor-canvas focus)<br>
 <br>
 =C2=A0 ;; Image -&gt; Void<br>
 =C2=A0 ;; show the image in the visible world<br>
 =C2=A0 (define (show pict)<br>
 =C2=A0 =C2=A0 (send visible begin-edit-sequence)<br>
 =C2=A0 =C2=A0 (send visible lock #f)<br>
 =C2=A0 =C2=A0 (let ([s (send visible find-first-snip)]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [c (send visible get-canvas)])<br>
 =C2=A0 =C2=A0 =C2=A0 (when s (send visible delete s))<br>
 =C2=A0 =C2=A0 =C2=A0 (send visible insert (disable-cache (send pict copy)) =
 0 0)<br>
 =C2=A0 =C2=A0 =C2=A0 (send visible lock #t)<br>
 =C2=A0 =C2=A0 =C2=A0 (send visible end-edit-sequence)))<br>
 <br>
 =C2=A0 (thread (lambda ()<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (let loop ([ball ball0])<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (sleep .001)<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (show (render-ball ball))<=
 br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (loop (next-ball ball)))))=
 <br>
 =C2=A0 (send frame show #t))<br>
 <br>
 <br>
 ;; next-ball: Ball -&gt; Ball<br>
 ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges<br>
 <br>
 (define (next-ball b)<br>
 =C2=A0 (cond [(&lt; (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-=
 angle b))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(&gt; (next-x b) XMAX) (make-ball XMAX (- (bal=
 l-dx b)) (ball-angle b))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [else (make-ball (next-x b) (ball-dx b) (next-a=
 ngle b))]))<br>
 <br>
 ;; HELPERS For next-ball: next-x and next-angle<br>
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D<br>
 ;; next-x: Ball -&gt; Natural[XMIN,XMAX]<br>
 ;; find the hypothetical new x-coord of a Ball, NOT taking into account tha=
 t it may hit the edges<br>
 (define (next-x b)<br>
 =C2=A0 (+ (ball-x b) (ball-dx b)))<br>
 <br>
 ;; simplify-angle: Number -&gt; Number[0,360)<br>
 ;; Given an angle in degrees, express it as a number between 0 and 360<br>
 ;; Better than modulo because it can take non-integer values<br>
 <br>
 (define (simplify-angle a)<br>
 =C2=A0 (cond [(&lt; a 0) (simplify-angle (+ a 360))]<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(&gt;=3D a 360) (simplify-angle (- a 360))]<br=
 >
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [else a]))<br>
 <br>
 <br>
 ;; next-angle: Ball -&gt; Number[0,360)<br>
 ;; find the new angle of a Ball, expressed as Number[0,360)<br>
 (define (next-angle b)<br>
 =C2=A0 (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))=
 ))<br>
 <br>
 ;; render-ball: Ball -&gt; Image<br>
 ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)<br>
 (define (render-ball b)<br>
 =C2=A0 (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))<b=
 r>
 <br>
 ;; handle-mouse: Ball MouseEvent -&gt; Ball<br>
 ;; reverse rolling direction when the mouse is clicked<br>
 (define (handle-mouse b x y me)<br>
 =C2=A0 (if (string=3D? me &quot;button-up&quot;)<br>
 =C2=A0 =C2=A0 =C2=A0 (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))<=
 br>
 =C2=A0 =C2=A0 =C2=A0 (make-ball (ball-x b) =C2=A0 =C2=A0(ball-dx b) =C2=A0(=
 ball-angle b))))<br>
 <br>
 ;; ------------------------------------------------------------------------=
 ---------------------------<br>
 ;; run program run<br>
 <br>
 (main (make-ball 80 1 0))<br>
 <br>
 </blockquote></div><br></div></div>
 </blockquote></div><br></div></div></div></blockquote></div><br></div>
 
 --001a11c30252d61d0c04e0715dd0--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Mon, 1 Jul 2013 07:36:31 -0400

 --Apple-Mail=_38B3B97E-967F-443F-8B61-D52A94C8254C
 Content-Type: multipart/alternative;
 	boundary="Apple-Mail=_478864D8-4394-4178-AF85-32045F0DF4C7"
 
 
 --Apple-Mail=_478864D8-4394-4178-AF85-32045F0DF4C7
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Jul 1, 2013, at 7:16 AM, Robby Findler wrote:
 
 > I don't think it does. As I said, the problem is in the bitmaps. FWIW, =
 I've gotten far enough to be sure that that's the original issue -- I'm =
 seeing about 3x the max framerate speed with a better bitmap drawing =
 (but it currently draws wrongly in my version ... still trying to sort =
 that out).
 
 
 You and I seem to be missing each others emails. I never saw anything =
 about memory consumption in bitmap drawing.=20
 
 
 > Also there are many other places (ball creation, float arithmetic, =
 etc) in this code that allocate a little including that lambda, but none =
 of them allocate much (except the hidden allocation inside the code that =
 draws bitmaps).
 
 [[ I pointed those out. ]]
 
 
 > And just in case there is remaining confusion here, the reason I =
 pointed to this lambda has nothing to do with allocation or performance.
 
 [[ I know. I sent an email concerning queue-callback to this thread -- =
 not the private one. ]]=20
 
 
 
 --Apple-Mail=_478864D8-4394-4178-AF85-32045F0DF4C7
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=us-ascii
 
 <html><head></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
 "><br><div><div>On Jul 1, 2013, at 7:16 AM, Robby Findler =
 wrote:</div><br class=3D"Apple-interchange-newline"><blockquote =
 type=3D"cite"><span class=3D"Apple-style-span" style=3D"border-collapse: =
 separate; font-family: 'Lucida Grande'; font-style: normal; =
 font-variant: normal; font-weight: normal; letter-spacing: normal; =
 line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: =
 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: =
 0px; -webkit-border-horizontal-spacing: 0px; =
 -webkit-border-vertical-spacing: 0px; =
 -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: =
 auto; -webkit-text-stroke-width: 0px; font-size: medium; ">I don't think =
 it does. As I said, the problem is in the bitmaps. FWIW, I've gotten far =
 enough to be sure that that's the original issue -- I'm seeing about 3x =
 the max framerate speed with a better bitmap drawing (but it currently =
 draws wrongly in my version ... still trying to sort that =
 out).</span></blockquote><div><br></div><div><br></div><div>You and I =
 seem to be missing each others emails. I never saw anything about memory =
 consumption in bitmap drawing.&nbsp;</div><div><br></div><br><blockquote =
 type=3D"cite">Also there are many other places (ball creation, float =
 arithmetic, etc) in this code that allocate a little including that =
 lambda, but none of them allocate much (except the hidden allocation =
 inside the code that draws bitmaps).</blockquote><div><br></div><div>[[ =
 I pointed those out. ]]</div><div><br></div><br><blockquote =
 type=3D"cite">And just in case there is remaining confusion here, the =
 reason I pointed to this lambda has nothing to do with allocation or =
 performance.</blockquote><br></div><div>[[ I know. I sent an email =
 concerning queue-callback to this thread -- not the private one. =
 ]]&nbsp;</div><div><br></div><br></body></html>=
 
 --Apple-Mail=_478864D8-4394-4178-AF85-32045F0DF4C7--
 
 --Apple-Mail=_38B3B97E-967F-443F-8B61-D52A94C8254C
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDcwMTExMzYzMlowIwYJKoZI
 hvcNAQkEMRYEFKiHZwN+5lEMs7Gk/9yWIbRzN8E/MIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAFPCCPJ+alFzJbXY9FAAtnnj6sDUrAwPIdP+MU6sc9mtPThGie2ybcumUZOZinv4TKN/
 7pq0YmrtS6xo6Xxd6k5Hseo0QQdjNXZz3J+GCYWaex6izJx7IZX68Bs7FBSJnMONnPWu7XvLTvSW
 W0FQbmWS/wquH6ILv6OGf1WpZcltS+zyMzJRBgJ5+fEs/4tlf6fTndwwnK16PQ6knnaNZoueFgmF
 YPU5vlfQQLKcDY9mCXLqMMM1+mAzGGlgLUhgbk3fRhTxTl0BtJYK6pB9lA9SW1BMslXjRG7E8BZd
 5wRhc+LUSfQfWUEn3Q3vkt6LRDfct+kpq1cn8+5PcnjVi4YAAAAAAAA=
 
 --Apple-Mail=_38B3B97E-967F-443F-8B61-D52A94C8254C--
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Mon, 01 Jul 2013 11:09:08 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/df446195bf
State changed from "open" to "closed" by robby@racket-lang.org at Mon, 01 Jul 2013 11:09:08 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/df446195bf
  | improve the performance of rotated or scaled (but not flipped) bitmap
  | drawing in 2htdp/image
  | 
  | closes PR 13895

From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Mon, 1 Jul 2013 10:14:48 -0500

 --089e013a282c7b653a04e074b06e
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I've just pushed a performance improvement for 2htdp/image's treatment of
 rotated (and scaled) bitmaps that makes the program below run about 2x
 faster (in 10 seconds, I see slightly more than 2x more frames of
 animation). I hope you don't mind, but I closed the PR wil my commit.
 Please feel free to re-open if there's more to be done here.
 
 I don't think this will help with Stephen's program, as the only call to
 'rotate' I see there is commented out.
 
 Robby
 
 #lang racket
 (require (except-in 2htdp/image frame))
 (require (only-in 2htdp/private/universe-image disable-cache))
 (require (except-in racket/gui/base make-pen make-color))
 
 ;; Constants
 (define WIDTH 600)
 (define HEIGHT 200)
 (define MTS (empty-scene WIDTH HEIGHT))
 (define CTR-Y (/ HEIGHT 2))
 (define LAMBDA (read-bitmap (collection-file-path
                              "plt-logo-red-flat.png"
                              "icons")))
 (define ALMOST-PI 3.14159)
 (define RADIUS 39)
 (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 (define XMIN RADIUS)
 (define XMAX (- WIDTH RADIUS))
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D
 ;; Data definitions:
 
 (define-struct ball (x dx angle))
 ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] Number[0,360))
 ;; interp. (make-ball x dx angle) is a round lambda symbol
 ;;          x is the position of the center of the ball (pixels)
 ;;          dx is the velocity (pixels per tick)
 ;;          angle is the rotation of the ball
 
 ;; Examples:
 (define B1 (make-ball 90 3 0))
 (define B2 (make-ball 200 -3 180))
 (define ball0 (make-ball 80 1 0))
 
 ;; Template rules used:
 ;; - compound data, 3 fields, atomic non-distinct
 
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 ;; Functions:
 
 ;; main : Ball -> Ball
 ;; start the world
 
 (define (main ball0)
   (define frame
     (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
 
   (define visible
     (new pasteboard%))
 
   (define editor-canvas
     (new editor-canvas% (parent frame) (editor visible)))
 
   (send editor-canvas focus)
 
   ;; Image -> Void
   ;; show the image in the visible world
   (define (show pict)
     (send visible begin-edit-sequence)
     (send visible lock #f)
     (let ([s (send visible find-first-snip)]
           [c (send visible get-canvas)])
       (when s (send visible delete s))
       (send visible insert (disable-cache (send pict copy)) 0 0)
       (send visible lock #t)
       (send visible end-edit-sequence)))
 
   (send frame show #t)
   (thread (lambda ()
             (let loop ([ball ball0]
                        [i 0])
               (sleep .001)
               (queue-callback (=CE=BB ()
                                 (show (render-ball ball))
                                 (printf "~a\n" i))
                               #f)
               (loop (next-ball ball) (+ i 1))))))
 
 
 ;; next-ball: Ball -> Ball
 ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 
 (define (next-ball b)
   (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle
 b))]
         [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) (ball-angle
 b))]
         [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))
 
 ;; HELPERS For next-ball: next-x and next-angle
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 ;; next-x: Ball -> Natural[XMIN,XMAX]
 ;; find the hypothetical new x-coord of a Ball, NOT taking into account
 that it may hit the edges
 (define (next-x b)
   (+ (ball-x b) (ball-dx b)))
 
 ;; simplify-angle: Number -> Number[0,360)
 ;; Given an angle in degrees, express it as a number between 0 and 360
 ;; Better than modulo because it can take non-integer values
 
 (define (simplify-angle a)
   (cond [(< a 0) (simplify-angle (+ a 360))]
         [(>=3D a 360) (simplify-angle (- a 360))]
         [else a]))
 
 
 ;; next-angle: Ball -> Number[0,360)
 ;; find the new angle of a Ball, expressed as Number[0,360)
 (define (next-angle b)
   (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))))
 
 ;; render-ball: Ball -> Image
 ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 (define (render-ball b)
   (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 
 ;; handle-mouse: Ball MouseEvent -> Ball
 ;; reverse rolling direction when the mouse is clicked
 (define (handle-mouse b x y me)
   (if (string=3D? me "button-up")
       (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
       (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 
 ;;
 ---------------------------------------------------------------------------=
 ------------------------
 ;; run program run
 
 (require profile/render-text
          profile/analyzer
          profile/sampler)
 (define t (current-thread))
 (thread
  (=CE=BB ()
    (define s (create-sampler t 0.05))
    (sleep 10)
    (s 'stop)
    ;(render (analyze-samples (s 'get-snapshots)))
    (exit)))
 (main (make-ball 80 1 0))
 
 --089e013a282c7b653a04e074b06e
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I&#39;ve just pushed a performance improvement for 2htdp/i=
 mage&#39;s treatment of rotated (and scaled) bitmaps that makes the program=
  below run about 2x faster (in 10 seconds, I see slightly more than 2x more=
  frames of animation). I hope you don&#39;t mind, but I closed the PR wil m=
 y commit. Please feel free to re-open if there&#39;s more to be done here.<=
 div>
 <br></div><div>I don&#39;t think this will help with Stephen&#39;s program,=
  as the only call to &#39;rotate&#39; I see there is commented out.</div><d=
 iv><br></div><div>Robby<br><div><br></div><div><div>#lang racket</div><div>
 (require (except-in 2htdp/image frame))</div><div>(require (only-in 2htdp/p=
 rivate/universe-image disable-cache))</div><div>(require (except-in racket/=
 gui/base make-pen make-color))</div><div><br></div><div>;; Constants</div>
 <div>(define WIDTH 600)</div><div>(define HEIGHT 200)</div><div>(define MTS=
  (empty-scene WIDTH HEIGHT))</div><div>(define CTR-Y (/ HEIGHT 2))</div><di=
 v>(define LAMBDA (read-bitmap (collection-file-path =C2=A0</div><div>=C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0&quot;plt-logo-red-flat.png&quot;</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0&quot;icons&quot;)))</div><div>(define AL=
 MOST-PI 3.14159)</div><div>(define RADIUS 39)</div><div>(define CIRCUMFEREN=
 CE (* 2 ALMOST-PI RADIUS))</div><div>(define DEGREES-PER-PIXEL (/ 360 CIRCU=
 MFERENCE))</div>
 <div>(define XMIN RADIUS)</div><div>(define XMAX (- WIDTH RADIUS))</div><di=
 v>;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D</div><div>;; Data definitions:</div><div><br></=
 div><div>(define-struct ball (x dx angle))</div><div>;; Ball is (make-ball =
 Natural[0,WIDTH] Integer[-WIDTH,WIDTH] Number[0,360))</div>
 <div>;; interp. (make-ball x dx angle) is a round lambda symbol</div><div>;=
 ; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0x is the position of the center of the =
 ball (pixels)</div><div>;; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0dx is the velo=
 city (pixels per tick)</div><div>;; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0angle=
  is the rotation of the ball</div>
 <div><br></div><div>;; Examples:</div><div>(define B1 (make-ball 90 3 0))</=
 div><div>(define B2 (make-ball 200 -3 180))</div><div>(define ball0 (make-b=
 all 80 1 0))</div><div><br></div><div>;; Template rules used:</div><div>
 ;; - compound data, 3 fields, atomic non-distinct</div><div><br></div><div>=
 ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D</div>=
 <div>;; Functions:</div><div><br></div><div>;; main : Ball -&gt; Ball</div>=
 <div>;; start the world</div>
 <div><br></div><div>(define (main ball0)</div><div>=C2=A0 (define frame</di=
 v><div>=C2=A0 =C2=A0 (new frame% [label &quot;Example&quot;] [width WIDTH] =
 [height HEIGHT]))</div><div><br></div><div>=C2=A0 (define visible</div><div=
 >=C2=A0 =C2=A0 (new pasteboard%))</div>
 <div><br></div><div>=C2=A0 (define editor-canvas</div><div>=C2=A0 =C2=A0 (n=
 ew editor-canvas% (parent frame) (editor visible)))</div><div><br></div><di=
 v>=C2=A0 (send editor-canvas focus)</div><div><br></div><div>=C2=A0 ;; Imag=
 e -&gt; Void</div><div>
 =C2=A0 ;; show the image in the visible world</div><div>=C2=A0 (define (sho=
 w pict)</div><div>=C2=A0 =C2=A0 (send visible begin-edit-sequence)</div><di=
 v>=C2=A0 =C2=A0 (send visible lock #f)</div><div>=C2=A0 =C2=A0 (let ([s (se=
 nd visible find-first-snip)]</div><div>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [c (send visible get-canvas)])</div><div=
 >=C2=A0 =C2=A0 =C2=A0 (when s (send visible delete s))</div><div>=C2=A0 =C2=
 =A0 =C2=A0 (send visible insert (disable-cache (send pict copy)) 0 0)</div>=
 <div>=C2=A0 =C2=A0 =C2=A0 (send visible lock #t)</div><div>=C2=A0 =C2=A0 =
 =C2=A0 (send visible end-edit-sequence)))</div>
 <div><br></div><div>=C2=A0 (send frame show #t)</div><div>=C2=A0 (thread (l=
 ambda ()</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (let loop ([ba=
 ll ball0]</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0[i 0])</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 (sleep .001)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 (queue-callback (=CE=BB ()=C2=A0</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (show (render-ball ball))</div><d=
 iv>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (printf &quot;~a\n&quot; i))</div=
 ><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 (loop (next-ball ball) (+ i 1))))))</div>
 <div><br></div><div><br></div><div>;; next-ball: Ball -&gt; Ball</div><div>=
 ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges</div>=
 <div><br></div><div>(define (next-ball b)</div><div>=C2=A0 (cond [(&lt; (ne=
 xt-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle b))]</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 [(&gt; (next-x b) XMAX) (make-ball XMAX (-=
  (ball-dx b)) (ball-angle b))]</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 [else =
 (make-ball (next-x b) (ball-dx b) (next-angle b))]))</div><div><br></div><d=
 iv>;; HELPERS For next-ball: next-x and next-angle</div>
 <div>;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D</div><di=
 v>;; next-x: Ball -&gt; Natural[XMIN,XMAX]</div><div>;; find the hypothetic=
 al new x-coord of a Ball, NOT taking into account that it may hit the edges=
 </div><div>
 (define (next-x b)</div><div>=C2=A0 (+ (ball-x b) (ball-dx b)))</div><div><=
 br></div><div>;; simplify-angle: Number -&gt; Number[0,360)</div><div>;; Gi=
 ven an angle in degrees, express it as a number between 0 and 360</div><div=
 >
 ;; Better than modulo because it can take non-integer values</div><div><br>=
 </div><div>(define (simplify-angle a)</div><div>=C2=A0 (cond [(&lt; a 0) (s=
 implify-angle (+ a 360))]</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 [(&gt;=3D a=
  360) (simplify-angle (- a 360))]</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 [else a]))</div><div><br></div><div><br></=
 div><div>;; next-angle: Ball -&gt; Number[0,360)</div><div>;; find the new =
 angle of a Ball, expressed as Number[0,360)</div><div>(define (next-angle b=
 )</div><div>=C2=A0 (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (=
 ball-dx b)))))</div>
 <div><br></div><div>;; render-ball: Ball -&gt; Image</div><div>;; place lam=
 bda image on MTS at (ball-x b), at angle (ball-angle b)</div><div>(define (=
 render-ball b)</div><div>=C2=A0 (place-image (rotate (ball-angle b) LAMBDA)=
  (ball-x b) CTR-Y MTS))</div>
 <div><br></div><div>;; handle-mouse: Ball MouseEvent -&gt; Ball</div><div>;=
 ; reverse rolling direction when the mouse is clicked</div><div>(define (ha=
 ndle-mouse b x y me)</div><div>=C2=A0 (if (string=3D? me &quot;button-up&qu=
 ot;)</div>
 <div>=C2=A0 =C2=A0 =C2=A0 (make-ball (ball-x b) (- (ball-dx b)) (ball-angle=
  b))</div><div>=C2=A0 =C2=A0 =C2=A0 (make-ball (ball-x b) =C2=A0 =C2=A0(bal=
 l-dx b) =C2=A0(ball-angle b))))</div><div><br></div><div>;; ---------------=
 ---------------------------------------------------------------------------=
 ---------</div>
 <div>;; run program run</div><div><br></div><div>(require profile/render-te=
 xt</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0profile/analyzer</div><div>=
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0profile/sampler)</div><div>(define t (cur=
 rent-thread))</div><div>(thread</div><div>=C2=A0(=CE=BB ()</div>
 <div>=C2=A0 =C2=A0(define s (create-sampler t 0.05))</div><div>=C2=A0 =C2=
 =A0(sleep 10)</div><div>=C2=A0 =C2=A0(s &#39;stop)</div><div>=C2=A0 =C2=A0;=
 (render (analyze-samples (s &#39;get-snapshots)))</div><div>=C2=A0 =C2=A0(e=
 xit)))</div><div>(main (make-ball 80 1 0))</div>
 </div><div><br></div></div></div>
 
 --089e013a282c7b653a04e074b06e--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Mon, 1 Jul 2013 11:20:48 -0400

 Sam, what do you think? 
 
 
 On Jul 1, 2013, at 11:14 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 
 > I've just pushed a performance improvement for 2htdp/image's treatment of rotated (and scaled) bitmaps that makes the program below run about 2x faster (in 10 seconds, I see slightly more than 2x more frames of animation). I hope you don't mind, but I closed the PR wil my commit. Please feel free to re-open if there's more to be done here.
 > 
 > I don't think this will help with Stephen's program, as the only call to 'rotate' I see there is commented out.
 > 
 > Robby
 > 
 > #lang racket
 > (require (except-in 2htdp/image frame))
 > (require (only-in 2htdp/private/universe-image disable-cache))
 > (require (except-in racket/gui/base make-pen make-color))
 > 
 > ;; Constants
 > (define WIDTH 600)
 > (define HEIGHT 200)
 > (define MTS (empty-scene WIDTH HEIGHT))
 > (define CTR-Y (/ HEIGHT 2))
 > (define LAMBDA (read-bitmap (collection-file-path  
 >                              "plt-logo-red-flat.png"
 >                              "icons")))
 > (define ALMOST-PI 3.14159)
 > (define RADIUS 39)
 > (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 > (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 > (define XMIN RADIUS)
 > (define XMAX (- WIDTH RADIUS))
 > ;; ================================
 > ;; Data definitions:
 > 
 > (define-struct ball (x dx angle))
 > ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] Number[0,360))
 > ;; interp. (make-ball x dx angle) is a round lambda symbol
 > ;;          x is the position of the center of the ball (pixels)
 > ;;          dx is the velocity (pixels per tick)
 > ;;          angle is the rotation of the ball
 > 
 > ;; Examples:
 > (define B1 (make-ball 90 3 0))
 > (define B2 (make-ball 200 -3 180))
 > (define ball0 (make-ball 80 1 0))
 > 
 > ;; Template rules used:
 > ;; - compound data, 3 fields, atomic non-distinct
 > 
 > ;; ===============================================
 > ;; Functions:
 > 
 > ;; main : Ball -> Ball
 > ;; start the world
 > 
 > (define (main ball0)
 >   (define frame
 >     (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
 > 
 >   (define visible
 >     (new pasteboard%))
 > 
 >   (define editor-canvas
 >     (new editor-canvas% (parent frame) (editor visible)))
 > 
 >   (send editor-canvas focus)
 > 
 >   ;; Image -> Void
 >   ;; show the image in the visible world
 >   (define (show pict)
 >     (send visible begin-edit-sequence)
 >     (send visible lock #f)
 >     (let ([s (send visible find-first-snip)]
 >           [c (send visible get-canvas)])
 >       (when s (send visible delete s))
 >       (send visible insert (disable-cache (send pict copy)) 0 0)
 >       (send visible lock #t)
 >       (send visible end-edit-sequence)))
 > 
 >   (send frame show #t)
 >   (thread (lambda ()
 >             (let loop ([ball ball0]
 >                        [i 0])
 >               (sleep .001)
 >               (queue-callback (λ () 
 >                                 (show (render-ball ball))
 >                                 (printf "~a\n" i))
 >                               #f)
 >               (loop (next-ball ball) (+ i 1))))))
 > 
 > 
 > ;; next-ball: Ball -> Ball
 > ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 > 
 > (define (next-ball b)
 >   (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle b))]
 >         [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) (ball-angle b))]
 >         [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))
 > 
 > ;; HELPERS For next-ball: next-x and next-angle
 > ;; ============================================
 > ;; next-x: Ball -> Natural[XMIN,XMAX]
 > ;; find the hypothetical new x-coord of a Ball, NOT taking into account that it may hit the edges
 > (define (next-x b)
 >   (+ (ball-x b) (ball-dx b)))
 > 
 > ;; simplify-angle: Number -> Number[0,360)
 > ;; Given an angle in degrees, express it as a number between 0 and 360
 > ;; Better than modulo because it can take non-integer values
 > 
 > (define (simplify-angle a)
 >   (cond [(< a 0) (simplify-angle (+ a 360))]
 >         [(>= a 360) (simplify-angle (- a 360))]
 >         [else a]))
 > 
 > 
 > ;; next-angle: Ball -> Number[0,360)
 > ;; find the new angle of a Ball, expressed as Number[0,360)
 > (define (next-angle b)
 >   (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))))
 > 
 > ;; render-ball: Ball -> Image
 > ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 > (define (render-ball b)
 >   (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 > 
 > ;; handle-mouse: Ball MouseEvent -> Ball
 > ;; reverse rolling direction when the mouse is clicked
 > (define (handle-mouse b x y me)
 >   (if (string=? me "button-up")
 >       (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
 >       (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 > 
 > ;; ---------------------------------------------------------------------------------------------------
 > ;; run program run
 > 
 > (require profile/render-text
 >          profile/analyzer
 >          profile/sampler)
 > (define t (current-thread))
 > (thread
 >  (λ ()
 >    (define s (create-sampler t 0.05))
 >    (sleep 10)
 >    (s 'stop)
 >    ;(render (analyze-samples (s 'get-snapshots)))
 >    (exit)))
 > (main (make-ball 80 1 0))
 > 
 
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Mon, 1 Jul 2013 11:30:26 -0400

 I'm rebuilding now.
 
 On Mon, Jul 1, 2013 at 11:20 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Sam, what do you think?
 >
 >
 > On Jul 1, 2013, at 11:14 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 >
 >> I've just pushed a performance improvement for 2htdp/image's treatment of rotated (and scaled) bitmaps that makes the program below run about 2x faster (in 10 seconds, I see slightly more than 2x more frames of animation). I hope you don't mind, but I closed the PR wil my commit. Please feel free to re-open if there's more to be done here.
 >>
 >> I don't think this will help with Stephen's program, as the only call to 'rotate' I see there is commented out.
 >>
 >> Robby
 >>
 >> #lang racket
 >> (require (except-in 2htdp/image frame))
 >> (require (only-in 2htdp/private/universe-image disable-cache))
 >> (require (except-in racket/gui/base make-pen make-color))
 >>
 >> ;; Constants
 >> (define WIDTH 600)
 >> (define HEIGHT 200)
 >> (define MTS (empty-scene WIDTH HEIGHT))
 >> (define CTR-Y (/ HEIGHT 2))
 >> (define LAMBDA (read-bitmap (collection-file-path
 >>                              "plt-logo-red-flat.png"
 >>                              "icons")))
 >> (define ALMOST-PI 3.14159)
 >> (define RADIUS 39)
 >> (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 >> (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 >> (define XMIN RADIUS)
 >> (define XMAX (- WIDTH RADIUS))
 >> ;; ================================
 >> ;; Data definitions:
 >>
 >> (define-struct ball (x dx angle))
 >> ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] Number[0,360))
 >> ;; interp. (make-ball x dx angle) is a round lambda symbol
 >> ;;          x is the position of the center of the ball (pixels)
 >> ;;          dx is the velocity (pixels per tick)
 >> ;;          angle is the rotation of the ball
 >>
 >> ;; Examples:
 >> (define B1 (make-ball 90 3 0))
 >> (define B2 (make-ball 200 -3 180))
 >> (define ball0 (make-ball 80 1 0))
 >>
 >> ;; Template rules used:
 >> ;; - compound data, 3 fields, atomic non-distinct
 >>
 >> ;; ===============================================
 >> ;; Functions:
 >>
 >> ;; main : Ball -> Ball
 >> ;; start the world
 >>
 >> (define (main ball0)
 >>   (define frame
 >>     (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
 >>
 >>   (define visible
 >>     (new pasteboard%))
 >>
 >>   (define editor-canvas
 >>     (new editor-canvas% (parent frame) (editor visible)))
 >>
 >>   (send editor-canvas focus)
 >>
 >>   ;; Image -> Void
 >>   ;; show the image in the visible world
 >>   (define (show pict)
 >>     (send visible begin-edit-sequence)
 >>     (send visible lock #f)
 >>     (let ([s (send visible find-first-snip)]
 >>           [c (send visible get-canvas)])
 >>       (when s (send visible delete s))
 >>       (send visible insert (disable-cache (send pict copy)) 0 0)
 >>       (send visible lock #t)
 >>       (send visible end-edit-sequence)))
 >>
 >>   (send frame show #t)
 >>   (thread (lambda ()
 >>             (let loop ([ball ball0]
 >>                        [i 0])
 >>               (sleep .001)
 >>               (queue-callback (λ ()
 >>                                 (show (render-ball ball))
 >>                                 (printf "~a\n" i))
 >>                               #f)
 >>               (loop (next-ball ball) (+ i 1))))))
 >>
 >>
 >> ;; next-ball: Ball -> Ball
 >> ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 >>
 >> (define (next-ball b)
 >>   (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle b))]
 >>         [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) (ball-angle b))]
 >>         [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))
 >>
 >> ;; HELPERS For next-ball: next-x and next-angle
 >> ;; ============================================
 >> ;; next-x: Ball -> Natural[XMIN,XMAX]
 >> ;; find the hypothetical new x-coord of a Ball, NOT taking into account that it may hit the edges
 >> (define (next-x b)
 >>   (+ (ball-x b) (ball-dx b)))
 >>
 >> ;; simplify-angle: Number -> Number[0,360)
 >> ;; Given an angle in degrees, express it as a number between 0 and 360
 >> ;; Better than modulo because it can take non-integer values
 >>
 >> (define (simplify-angle a)
 >>   (cond [(< a 0) (simplify-angle (+ a 360))]
 >>         [(>= a 360) (simplify-angle (- a 360))]
 >>         [else a]))
 >>
 >>
 >> ;; next-angle: Ball -> Number[0,360)
 >> ;; find the new angle of a Ball, expressed as Number[0,360)
 >> (define (next-angle b)
 >>   (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))))
 >>
 >> ;; render-ball: Ball -> Image
 >> ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 >> (define (render-ball b)
 >>   (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 >>
 >> ;; handle-mouse: Ball MouseEvent -> Ball
 >> ;; reverse rolling direction when the mouse is clicked
 >> (define (handle-mouse b x y me)
 >>   (if (string=? me "button-up")
 >>       (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
 >>       (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 >>
 >> ;; ---------------------------------------------------------------------------------------------------
 >> ;; run program run
 >>
 >> (require profile/render-text
 >>          profile/analyzer
 >>          profile/sampler)
 >> (define t (current-thread))
 >> (thread
 >>  (λ ()
 >>    (define s (create-sampler t 0.05))
 >>    (sleep 10)
 >>    (s 'stop)
 >>    ;(render (analyze-samples (s 'get-snapshots)))
 >>    (exit)))
 >> (main (make-ball 80 1 0))
 >>
 >
 
From: Stephen Chang <stchang@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13895: big-bang/image program stutters from gc
Date: Mon, 1 Jul 2013 17:41:28 -0400

 > I don't think this will help with Stephen's program, as the only call to
 > 'rotate' I see there is commented out.
 
 I did identify rotate as a bottleneck and any improvements will help a
 lot. But yes, my program still stuttered after I removed the rotate
 (by generating pre-rotated images).
 
 
 
 
 
 >
 > Robby
 >
 > #lang racket
 > (require (except-in 2htdp/image frame))
 > (require (only-in 2htdp/private/universe-image disable-cache))
 > (require (except-in racket/gui/base make-pen make-color))
 >
 > ;; Constants
 > (define WIDTH 600)
 > (define HEIGHT 200)
 > (define MTS (empty-scene WIDTH HEIGHT))
 > (define CTR-Y (/ HEIGHT 2))
 > (define LAMBDA (read-bitmap (collection-file-path
 >                              "plt-logo-red-flat.png"
 >                              "icons")))
 > (define ALMOST-PI 3.14159)
 > (define RADIUS 39)
 > (define CIRCUMFERENCE (* 2 ALMOST-PI RADIUS))
 > (define DEGREES-PER-PIXEL (/ 360 CIRCUMFERENCE))
 > (define XMIN RADIUS)
 > (define XMAX (- WIDTH RADIUS))
 > ;; ================================
 > ;; Data definitions:
 >
 > (define-struct ball (x dx angle))
 > ;; Ball is (make-ball Natural[0,WIDTH] Integer[-WIDTH,WIDTH] Number[0,360))
 > ;; interp. (make-ball x dx angle) is a round lambda symbol
 > ;;          x is the position of the center of the ball (pixels)
 > ;;          dx is the velocity (pixels per tick)
 > ;;          angle is the rotation of the ball
 >
 > ;; Examples:
 > (define B1 (make-ball 90 3 0))
 > (define B2 (make-ball 200 -3 180))
 > (define ball0 (make-ball 80 1 0))
 >
 > ;; Template rules used:
 > ;; - compound data, 3 fields, atomic non-distinct
 >
 > ;; ===============================================
 > ;; Functions:
 >
 > ;; main : Ball -> Ball
 > ;; start the world
 >
 > (define (main ball0)
 >   (define frame
 >     (new frame% [label "Example"] [width WIDTH] [height HEIGHT]))
 >
 >   (define visible
 >     (new pasteboard%))
 >
 >   (define editor-canvas
 >     (new editor-canvas% (parent frame) (editor visible)))
 >
 >   (send editor-canvas focus)
 >
 >   ;; Image -> Void
 >   ;; show the image in the visible world
 >   (define (show pict)
 >     (send visible begin-edit-sequence)
 >     (send visible lock #f)
 >     (let ([s (send visible find-first-snip)]
 >           [c (send visible get-canvas)])
 >       (when s (send visible delete s))
 >       (send visible insert (disable-cache (send pict copy)) 0 0)
 >       (send visible lock #t)
 >       (send visible end-edit-sequence)))
 >
 >   (send frame show #t)
 >   (thread (lambda ()
 >             (let loop ([ball ball0]
 >                        [i 0])
 >               (sleep .001)
 >               (queue-callback (λ ()
 >                                 (show (render-ball ball))
 >                                 (printf "~a\n" i))
 >                               #f)
 >               (loop (next-ball ball) (+ i 1))))))
 >
 >
 > ;; next-ball: Ball -> Ball
 > ;; increase ball-x by dx; increase ball-angle by dx; bounce off edges
 >
 > (define (next-ball b)
 >   (cond [(< (next-x b) XMIN) (make-ball XMIN (- (ball-dx b)) (ball-angle
 > b))]
 >         [(> (next-x b) XMAX) (make-ball XMAX (- (ball-dx b)) (ball-angle
 > b))]
 >         [else (make-ball (next-x b) (ball-dx b) (next-angle b))]))
 >
 > ;; HELPERS For next-ball: next-x and next-angle
 > ;; ============================================
 > ;; next-x: Ball -> Natural[XMIN,XMAX]
 > ;; find the hypothetical new x-coord of a Ball, NOT taking into account that
 > it may hit the edges
 > (define (next-x b)
 >   (+ (ball-x b) (ball-dx b)))
 >
 > ;; simplify-angle: Number -> Number[0,360)
 > ;; Given an angle in degrees, express it as a number between 0 and 360
 > ;; Better than modulo because it can take non-integer values
 >
 > (define (simplify-angle a)
 >   (cond [(< a 0) (simplify-angle (+ a 360))]
 >         [(>= a 360) (simplify-angle (- a 360))]
 >         [else a]))
 >
 >
 > ;; next-angle: Ball -> Number[0,360)
 > ;; find the new angle of a Ball, expressed as Number[0,360)
 > (define (next-angle b)
 >   (simplify-angle (- (ball-angle b) (* DEGREES-PER-PIXEL (ball-dx b)))))
 >
 > ;; render-ball: Ball -> Image
 > ;; place lambda image on MTS at (ball-x b), at angle (ball-angle b)
 > (define (render-ball b)
 >   (place-image (rotate (ball-angle b) LAMBDA) (ball-x b) CTR-Y MTS))
 >
 > ;; handle-mouse: Ball MouseEvent -> Ball
 > ;; reverse rolling direction when the mouse is clicked
 > (define (handle-mouse b x y me)
 >   (if (string=? me "button-up")
 >       (make-ball (ball-x b) (- (ball-dx b)) (ball-angle b))
 >       (make-ball (ball-x b)    (ball-dx b)  (ball-angle b))))
 >
 > ;;
 > ---------------------------------------------------------------------------------------------------
 > ;; run program run
 >
 > (require profile/render-text
 >          profile/analyzer
 >          profile/sampler)
 > (define t (current-thread))
 > (thread
 >  (λ ()
 >    (define s (create-sampler t 0.05))
 >    (sleep 10)
 >    (s 'stop)
 >    ;(render (analyze-samples (s 'get-snapshots)))
 >    (exit)))
 > (main (make-ball 80 1 0))
 >
 
