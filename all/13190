From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Oct 15 15:13:45 2012
Received: from mail-ie0-f172.google.com (mail-ie0-f172.google.com [209.85.223.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q9FJDfp7019286
	for <bugs@bugs.plt-scheme.org>; Mon, 15 Oct 2012 15:13:42 -0400
Message-Id: <201210151913.q9FJDaPY019276@champlain.ccs.neu.edu>
Date: Mon, 15 Oct 2012 15:13:36 -0400
From: asumu@ccs.neu.edu
To: bugs@racket-lang.org
Subject: A dc pict can break other picts with mutation

>Number:         13190
>Category:       all
>Synopsis:       A dc pict can break other picts with mutation
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Oct 15 15:16:01 -0400 2012
>Last-Modified:  Mon Oct 15 16:52:01 -0400 2012
>Originator:     Asumu Takikawa
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1.1--2012-10-14(df594d3b/d)
>Environment:
unix "Linux willamette 3.2.0-2-amd64 #1 SMP Mon May 21 17:45:41 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 542056904
Links: (links) = ("pict-utils" "gcr-bug" "clojure"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/asumu/plt/racket-git/add-on/5.3.1.1/collects"
 (non-existent-path))
("/home/asumu/plt/racket-git/collects"
 ("graphics" "future-visualizer" "frtime" "framework" "make" "sgl" "launcher" "compiler" "mred" "srfi" "setup" "wxme" "honu" "mrlib" "scriblib" "r5rs" "trace" "info-domain" "typed-racket" "racket" "net" "file" "slideshow" "string-constants" "racklog" "openssl" "macro-debugger" "xml" "mysterx" "html" "drscheme" "at-exp" "tmp2" "hierlist" "profile" "icons" "sirmail" "readline" "config" "syntax" "scribble" "texpict" "mzlib" "typed" "web-server" "plai" "handin-client" "rnrs" "eopl" "drracket" "handin-server" "planet" "syntax-color" "repo-time-stamp" "test-engine" "games" "picturing-programs" "ffi" "xrepl" "images" "errortrace" "json" "tmp3" "data" "unstable" "tmp1" "NormalizationTest.txt" "r6rs" "browser" "2htdp" "parser-tools" "slatex" "scheme" "compatibility" "algol60" "scribblings" "stepper" "lazy" "rackunit" "gui-debugger" "plot" "help" "meta" "redex" "version" "defaults" "s-exp" "tests" "swindle" "mzscheme" "deinprogramm" "raco" "tmp0-filelib" "preprocessor" "typed-scheme" !
 "db" "embedded-gui" "lang" "dynext" "reader" ".gitignore" "htdp" "schemeunit" "teachpack" "mzcom" "datalog"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
In the example below, a `dc` pict mutates the current pen and
then draws a line. You might expect that the mutation will only
be visible for the extent of this pict, but the effect is visible
if you compose the pict with any others.

This manifests in the example below since the 500x500 rectangle
gets drawn using a dashed border.
>How-To-Repeat:
#lang racket

(require racket/draw
         slideshow/pict)

(vl-append
 (dc (λ (dc dx dy)
       (send dc set-pen (new pen% [style 'long-dash]))
       (send dc draw-line 0 0 300 300))
     100 100)
 (rectangle 500 500))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: asumu@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13190: A dc pict can break other picts with mutation
Date: Mon, 15 Oct 2012 14:20:08 -0500

 Yes, that's how it works.
 
 
 On Mon, Oct 15, 2012 at 2:16 PM,  <asumu@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13190
 >
 > Reported by Asumu Takikawa for release: 5.3.1.1--2012-10-14(df594d3b/d)
 >
 > *** Description:
 > In the example below, a `dc` pict mutates the current pen and
 > then draws a line. You might expect that the mutation will only
 > be visible for the extent of this pict, but the effect is visible
 > if you compose the pict with any others.
 >
 > This manifests in the example below since the 500x500 rectangle
 > gets drawn using a dashed border.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (require racket/draw
 >          slideshow/pict)
 >
 > (vl-append
 >  (dc (λ (dc dx dy)
 >        (send dc set-pen (new pen% [style 'long-dash]))
 >        (send dc draw-line 0 0 300 300))
 >      100 100)
 >  (rectangle 500 500))
 >
 > *** Environment:
 > unix "Linux willamette 3.2.0-2-amd64 #1 SMP Mon May 21 17:45:41 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 542056904
 > Links: (links) = ("pict-utils" "gcr-bug" "clojure"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/asumu/plt/racket-git/add-on/5.3.1.1/collects"
 >  (non-existent-path))
 > ("/home/asumu/plt/racket-git/collects"
 >  ("graphics" "future-visualizer" "frtime" "framework" "make" "sgl" "launcher" "compiler" "mred" "srfi" "setup" "wxme" "honu" "mrlib" "scriblib" "r5rs" "trace" "info-domain" "typed-racket" "racket" "net" "file" "slideshow" "string-constants" "racklog" "openssl" "macro-debugger" "xml" "mysterx" "html" "drscheme" "at-exp" "tmp2" "hierlist" "profile" "icons" "sirmail" "readline" "config" "syntax" "scribble" "texpict" "mzlib" "typed" "web-server" "plai" "handin-client" "rnrs" "eopl" "drracket" "handin-server" "planet" "syntax-color" "repo-time-stamp" "test-engine" "games" "picturing-programs" "ffi" "xrepl" "images" "errortrace" "json" "tmp3" "data" "unstable" "tmp1" "NormalizationTest.txt" "r6rs" "browser" "2htdp" "parser-tools" "slatex" "scheme" "compatibility" "algol60" "scribblings" "stepper" "lazy" "rackunit" "gui-debugger" "plot" "help" "meta" "redex" "version" "defaults" "s-exp" "tests" "swindle" "mzscheme" "deinprogramm" "raco" "tmp0-filelib" "preprocessor" "typed-scheme" !
 >  "db" "embedded-gui" "lang" "dynext" "reader" ".gitignore" "htdp" "schemeunit" "teachpack" "mzcom" "datalog"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13190: A dc pict can break other picts with
 mutation
Date: Mon, 15 Oct 2012 15:43:30 -0400

 On 2012-10-15 14:20:08 -0500, Robby Findler wrote:
 > Yes, that's how it works.
 
 Thanks, I understand that's how it is for using `racket/draw` in
 general, but it seems to me that for a functional, composition-based
 library like `slideshow/pict` it's undesirable to let the underlying
 imperative API show through.
 
 To be more concrete, I often use `dc` to just draw a shape that's hard
 to build using the built-in pict combinators. My intention isn't to set
 the dc state permanently for the drawing of other picts, however. For
 this use case, it might be more natural to reset the dc state on exit.
 
 If the reason `dc` is provided is to actually mutate the dc state and
 change how a bunch of picts are drawn at once, then I agree that the
 current setup is fine. (though in that case, do you mind if I revise the
 docs with some caveats?)
 
 Cheers,
 Asumu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13190: A dc pict can break other picts with mutation
Date: Mon, 15 Oct 2012 14:52:20 -0500

 I'm torn on this one. I agree with you that probably it is the case
 that anything using 'dc' that does that is broken, but since it has
 been this way so long and programs that use slideshow are just
 floating out there on course webpages and as parts of talks, I'm very
 nervous about backwards incompatibilities.
 
 Maybe the right thing is to introduce something with a new name that
 behaves like a protected version of 'dc' and then update the 'dc' docs
 to point there? (It is a shame that 'dc' is such a nice short name...)
 
 Robby
 
 On Mon, Oct 15, 2012 at 2:43 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2012-10-15 14:20:08 -0500, Robby Findler wrote:
 >> Yes, that's how it works.
 >
 > Thanks, I understand that's how it is for using `racket/draw` in
 > general, but it seems to me that for a functional, composition-based
 > library like `slideshow/pict` it's undesirable to let the underlying
 > imperative API show through.
 >
 > To be more concrete, I often use `dc` to just draw a shape that's hard
 > to build using the built-in pict combinators. My intention isn't to set
 > the dc state permanently for the drawing of other picts, however. For
 > this use case, it might be more natural to reset the dc state on exit.
 >
 > If the reason `dc` is provided is to actually mutate the dc state and
 > change how a bunch of picts are drawn at once, then I agree that the
 > current setup is fine. (though in that case, do you mind if I revise the
 > docs with some caveats?)
 >
 > Cheers,
 > Asumu
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13190: A dc pict can break other picts with mutation
Date: Mon, 15 Oct 2012 14:06:47 -0600

 Do dcs have something like OpenGL's glPushMatix and glPushAttrib that
 would allow changes but only scoped?
 
 On Mon, Oct 15, 2012 at 1:52 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I'm torn on this one. I agree with you that probably it is the case
 > that anything using 'dc' that does that is broken, but since it has
 > been this way so long and programs that use slideshow are just
 > floating out there on course webpages and as parts of talks, I'm very
 > nervous about backwards incompatibilities.
 >
 > Maybe the right thing is to introduce something with a new name that
 > behaves like a protected version of 'dc' and then update the 'dc' docs
 > to point there? (It is a shame that 'dc' is such a nice short name...)
 >
 > Robby
 >
 > On Mon, Oct 15, 2012 at 2:43 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >> On 2012-10-15 14:20:08 -0500, Robby Findler wrote:
 >>> Yes, that's how it works.
 >>
 >> Thanks, I understand that's how it is for using `racket/draw` in
 >> general, but it seems to me that for a functional, composition-based
 >> library like `slideshow/pict` it's undesirable to let the underlying
 >> imperative API show through.
 >>
 >> To be more concrete, I often use `dc` to just draw a shape that's hard
 >> to build using the built-in pict combinators. My intention isn't to set
 >> the dc state permanently for the drawing of other picts, however. For
 >> this use case, it might be more natural to reset the dc state on exit.
 >>
 >> If the reason `dc` is provided is to actually mutate the dc state and
 >> change how a bunch of picts are drawn at once, then I agree that the
 >> current setup is fine. (though in that case, do you mind if I revise the
 >> docs with some caveats?)
 >>
 >> Cheers,
 >> Asumu
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13190: A dc pict can break other picts with
 mutation
Date: Mon, 15 Oct 2012 16:02:54 -0400

 On 2012-10-15 14:52:20 -0500, Robby Findler wrote:
 > Maybe the right thing is to introduce something with a new name that
 > behaves like a protected version of 'dc' and then update the 'dc' docs
 > to point there? (It is a shame that 'dc' is such a nice short name...)
 
 I would be happy with that. That way, there's still an escape hatch if
 someone really needs it too.
 
 Cheers,
 Asumu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13190: A dc pict can break other picts with mutation
Date: Mon, 15 Oct 2012 15:22:19 -0500

 I think there is code that manually collects up the dc state variable
 as part of the record-dc% implementation (so there is some reuse to be
 had), but otherwise, no.
 
 Robby
 
 On Mon, Oct 15, 2012 at 3:06 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 > Do dcs have something like OpenGL's glPushMatix and glPushAttrib that
 > would allow changes but only scoped?
 >
 > On Mon, Oct 15, 2012 at 1:52 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> I'm torn on this one. I agree with you that probably it is the case
 >> that anything using 'dc' that does that is broken, but since it has
 >> been this way so long and programs that use slideshow are just
 >> floating out there on course webpages and as parts of talks, I'm very
 >> nervous about backwards incompatibilities.
 >>
 >> Maybe the right thing is to introduce something with a new name that
 >> behaves like a protected version of 'dc' and then update the 'dc' docs
 >> to point there? (It is a shame that 'dc' is such a nice short name...)
 >>
 >> Robby
 >>
 >> On Mon, Oct 15, 2012 at 2:43 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >>> On 2012-10-15 14:20:08 -0500, Robby Findler wrote:
 >>>> Yes, that's how it works.
 >>>
 >>> Thanks, I understand that's how it is for using `racket/draw` in
 >>> general, but it seems to me that for a functional, composition-based
 >>> library like `slideshow/pict` it's undesirable to let the underlying
 >>> imperative API show through.
 >>>
 >>> To be more concrete, I often use `dc` to just draw a shape that's hard
 >>> to build using the built-in pict combinators. My intention isn't to set
 >>> the dc state permanently for the drawing of other picts, however. For
 >>> this use case, it might be more natural to reset the dc state on exit.
 >>>
 >>> If the reason `dc` is provided is to actually mutate the dc state and
 >>> change how a bunch of picts are drawn at once, then I agree that the
 >>> current setup is fine. (though in that case, do you mind if I revise the
 >>> docs with some caveats?)
 >>>
 >>> Cheers,
 >>> Asumu
 >
 >
 >
 > --
 > Jay McCarthy <jay@cs.byu.edu>
 > Assistant Professor / Brigham Young University
 > http://faculty.cs.byu.edu/~jay
 >
 > "The glory of God is Intelligence" - D&C 93
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Jay McCarthy <jay.mccarthy@gmail.com>, Asumu Takikawa <asumu@ccs.neu.edu>,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13190: A dc pict can break other picts with mutation
Date: Mon, 15 Oct 2012 16:48:32 -0400

 1. I think you want EXTENT not SCOPE. 
 
 2. In a sense, you want 
 
 #lang racket
 
 (require racket/draw
         slideshow/pict)
 
 (vl-append
 (dc (λ (dc dx dy)
       (parameterize-send 
         [dc set-pen (new pen% [style 'long-dash])]
         [dc draw-line 0 0 300 300]))
     100 100)
 (rectangle 500 500))
 
 
 where parameterize send is kind of like fluid-set!. 
 
 
 
 
 On Oct 15, 2012, at 4:22 PM, Robby Findler wrote:
 
 > I think there is code that manually collects up the dc state variable
 > as part of the record-dc% implementation (so there is some reuse to be
 > had), but otherwise, no.
 > 
 > Robby
 > 
 > On Mon, Oct 15, 2012 at 3:06 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 >> Do dcs have something like OpenGL's glPushMatix and glPushAttrib that
 >> would allow changes but only scoped?
 >> 
 >> On Mon, Oct 15, 2012 at 1:52 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> I'm torn on this one. I agree with you that probably it is the case
 >>> that anything using 'dc' that does that is broken, but since it has
 >>> been this way so long and programs that use slideshow are just
 >>> floating out there on course webpages and as parts of talks, I'm very
 >>> nervous about backwards incompatibilities.
 >>> 
 >>> Maybe the right thing is to introduce something with a new name that
 >>> behaves like a protected version of 'dc' and then update the 'dc' docs
 >>> to point there? (It is a shame that 'dc' is such a nice short name...)
 >>> 
 >>> Robby
 >>> 
 >>> On Mon, Oct 15, 2012 at 2:43 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >>>> On 2012-10-15 14:20:08 -0500, Robby Findler wrote:
 >>>>> Yes, that's how it works.
 >>>> 
 >>>> Thanks, I understand that's how it is for using `racket/draw` in
 >>>> general, but it seems to me that for a functional, composition-based
 >>>> library like `slideshow/pict` it's undesirable to let the underlying
 >>>> imperative API show through.
 >>>> 
 >>>> To be more concrete, I often use `dc` to just draw a shape that's hard
 >>>> to build using the built-in pict combinators. My intention isn't to set
 >>>> the dc state permanently for the drawing of other picts, however. For
 >>>> this use case, it might be more natural to reset the dc state on exit.
 >>>> 
 >>>> If the reason `dc` is provided is to actually mutate the dc state and
 >>>> change how a bunch of picts are drawn at once, then I agree that the
 >>>> current setup is fine. (though in that case, do you mind if I revise the
 >>>> docs with some caveats?)
 >>>> 
 >>>> Cheers,
 >>>> Asumu
 >> 
 >> 
 >> 
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://faculty.cs.byu.edu/~jay
 >> 
 >> "The glory of God is Intelligence" - D&C 93
 
 
