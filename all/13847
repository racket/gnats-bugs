From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jun 12 02:56:11 2013
Received: from mail-oa0-f43.google.com (mail-oa0-f43.google.com [209.85.219.43])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r5C6u7kT018332
	for <bugs@bugs.plt-scheme.org>; Wed, 12 Jun 2013 02:56:07 -0400
Message-Id: <201306120648.r5C6mX2t018015@champlain.ccs.neu.edu>
Date: Wed, 12 Jun 2013 02:48:33 -0400
From: office@klepp.biz
To: bugs@racket-lang.org
Subject: racket/gui causes "on-paint" flooding

>Number:         13847
>Category:       all
>Synopsis:       racket/gui causes "on-paint" flooding
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jun 12 03:00:01 -0400 2013
>Originator:     Nikolaus Klepp
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4
>Environment:
unix "Linux dasding 3.2.0-4-amd64 #1 SMP Debian 3.2.41-2+deb7u2 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: german
(current-memory-use) 337912976
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.4):
 [none]



Collections:
("/home/nik/.racket/5.3.4/collects"
 (non-existent-path))
("/opt/racket/lib/racket/collects"
 ("help" "version" "data" "hierlist" "graphics" "scribblings" "teachpack" "macro-debugger" "redex" "defaults" "drscheme" "trace" "schemeunit" "mzlib" "plai" "info-domain" "games" "readline" "gui-debugger" "planet" "s-exp" "sgl" "file" "syntax-color" "typed-scheme" "json" "compiler" "mysterx" "r5rs" "browser" "2htdp" "string-constants" "icons" "texpict" "at-exp" "xrepl" "pkg" "mzscheme" "racklog" "rackunit" "config" "plot" "typed-racket" "syntax" "mrlib" "openssl" "swindle" "r6rs" "eopl" "wxme" "make" "embedded-gui" "parser-tools" "ffi" "mzcom" "typed" "scriblib" "compatibility" "slatex" "srfi" "deinprogramm" "drracket" "net" "algol60" "reader" "picturing-programs" "lazy" "db" "xml" "web-server" "images" "tests" "test-engine" "preprocessor" "dynext" "launcher" "mred" "framework" "htdp" "math" "profile" "stepper" "setup" "scribble" "slideshow" "racket" "errortrace" "rnrs" "datalog" "future-visualizer" "raco" "scheme" "lang" "html" "unstable" "frtime"))

Computer Language: (("Sprache aus Quelltext ermitteln") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
When a a panel% has a visible scrollbar and there are enough children to 
actually use that scrollbar, then all children get flooded with on-paint 
calls when the scrollbar is used. 

To be precise, the problem is not that the children get lots of on-paint, but 
that invisible children get that calls, too, which results in a pileup of 
on-paint calls that block the application when the drawing operation is 
expensive.

In my case I have several dozen graphs to present and even touching the 
scrollbar results in a desaster. 

Is there a workaround, say, can I find out if a child is visible at all?
>How-To-Repeat:
Example code - just scroll around and watch how often the first child is 
redrawn, even when invisible:

#lang racket

(require racket/gui)
(require plot)

(define counter 0)
 
(define frame (new frame% [label "on-paint flooding"] [min-height 800] 
[min-width 800]))
(define panel (new vertical-panel%  [parent frame] [style '(auto-hscroll 
auto-vscroll)]))

(for-each 
 (λ (a)
   (new canvas% 
        [parent panel] [min-height 150] [min-width 150]
        [paint-callback (λ (c dc)
                          (when (= a 0) (set! counter (add1 counter)))
                          (define-values (w h) (send dc get-size))
                          ; uncomment the following line to see the effect on 
expensive rendering:
                          ; (plot/dc (function (λ (x) (sin (* 4 x))) -1 1) dc 
0 0 w h )
                          (send dc draw-text (format "~a" counter) 0 0))]))
 '(0 1 2 3 4 5 6 7 8 9 10))

(send frame show #t)
>Fix:
