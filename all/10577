From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Nov 13 18:48:59 2009
Received: from mail-yw0-f183.google.com (mail-yw0-f183.google.com [209.85.211.183])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id nADNmtYL020142
	for <bugs@bugs.plt-scheme.org>; Fri, 13 Nov 2009 18:48:55 -0500
Message-Id: <200911132348.nADNmr5r020136@champlain.ccs.neu.edu>
Date: Fri, 13 Nov 2009 18:48:53 -0500
From: trenton@austin.rr.com
To: bugs@plt-scheme.org
Subject: found minor errors in documentation while reading through it

>Number:         10577
>Category:       all
>Synopsis:       found minor errors in documentation while reading through it
>Class:          doc-bug
>Responsible:    ryanc
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Nov 13 18:52:01 -0500 2009
>Closed-Date:    Fri Jun 10 15:43:16 -0400 2011
>Last-Modified:  Fri Jun 10 15:43:16 -0400 2011
>Originator:     trenton henry
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.2
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-us) AppleWebKit/531.9 (KHTML, like Gecko) Version/4.0.3 Safari/531.9
>Description:
No formatting preserved, so search for @@@.  My annotations are between @@@ pairs.


2.3.3 Tail Recursion
...
You can avoid piling up additions by adding along the way. To accumulate a length this way, we need a function that takes both a list and the length of the list seem @@@ seem-->seen @@@ so far; the code below uses a local function iter that accumulates the length in an argument len:
...
then the for/list form in the function both @@@ remove word "both" @@@ is expanded to essentially the same code as the iter local definition and use. The difference is merely syntactic convenience.

3.10 Hash Tables
A literal hash table can be written as an expression by using #hash (for an equal?-based table), #hasheq (for an eq?-based table), or #hasheqv (for an eqv?-based table). A parenthesized sequence must immediately follow #hash, #hasheq, or #hasheqv, where each element is @@@ is-->in @@@ a sequence is a dotted key–value pair. Literal hash tables are immutable, but they can be extended functionally (producing a new hash table without changing the old one) using hash-set.

4.5.4 internal definitions
4.5.4 internal definitions
this example
 (lambda (f)                ; one definition
    (define (log-it what)
      ;(printf "~a\n"))  @@@ error: missing 'what' @@@
      (printf "~a\n" what))
    (log-it "running")
    (f 0)
    (log-it "done"))

and this one

(lambda (f n)              ; two definitions
    (define (call n)
      (if (zero? n)
          (log-it "done")
          (begin
            (log-it "running")
            ;(f 0) @@@ error: 0-->n @@@
            (f n)
            (call (- n 1)))))
    (define (log-it what)
      ;(printf "~a\n")) @@@ error: missing 'what' @@@
      (printf "~a\n" what))
    ;(call f n))  @@@ error: too many args to (call) @@@
    (call n))

That's all I have found through section 4.5.  Still reading...

Overall this looks like wonderful.  Just trying to help tweak it out.
Regards
>How-To-Repeat:
read it.  try the examples.  feed them to my own nascent implementation and see if they work there also:)
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "ryanc" by ryanc@racket-lang.org at Fri, 10 Jun 2011 15:43:16 -0400
Reason>>> A commit by ryanc@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/d22a16a3c7
State changed from "open" to "closed" by ryanc@racket-lang.org at Fri, 10 Jun 2011 15:43:16 -0400
Reason>>> A commit by ryanc@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/d22a16a3c7
