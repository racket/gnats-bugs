From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Mar 30 23:18:20 2013
Received: from mail-oa0-f54.google.com (mail-oa0-f54.google.com [209.85.219.54])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2V3IGUW004509
	for <bugs@bugs.plt-scheme.org>; Sat, 30 Mar 2013 23:18:17 -0400
Message-Id: <201303310318.r2V3IEIM004503@champlain.ccs.neu.edu>
Date: Sat, 30 Mar 2013 23:18:14 -0400
From: justin@zamora.com
To: bugs@racket-lang.org
Subject: Bug with characters in letrec/named let

>Number:         13645
>Category:       all
>Synopsis:       Bug with characters in letrec/named let
>Class:          not-a-bug
>Responsible:    asumu
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Mar 30 23:20:01 -0400 2013
>Closed-Date:    Sun Mar 31 19:10:35 -0400 2013
>Last-Modified:  Mon Apr 01 07:30:27 -0400 2013
>Originator:     Justin Zamora
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.3.8--2013-03-30(0a482b61/d)
>Environment:
unix "Linux congo.ibm.com 2.6.32-279.19.1.el6.x86_64 #1 SMP Wed Nov 28 19:02:25 CET 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 339147652
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.3.8):
 [none]



Collections:
("/home/zamora/.racket/5.3.3.8/collects"
 (non-existent-path))
("/opt/racket/collects"
 ("sgl" "frtime" "r5rs" "launcher" "scriblib" "info-domain" "syntax" "setup" "rnrs" "icons" "make" "future-visualizer" "framework" "srfi" "readline" "scheme" "honu" "typed" "slatex" "hierlist" "gui-debugger" "scribble" "raco" "embedded-gui" "dynext" "defaults" "racket" "drracket" "scribblings" "browser" "pkg" "redex" "wxme" "eopl" "test-engine" "tests" "lazy" "string-constants" "drscheme" "mrlib" "r6rs" "2htdp" "htdp" "web-server" "preprocessor" "datalog" "parser-tools" "realm" "teachpack" "json" "texpict" "ffi" "handin-client" "repo-time-stamp" "errortrace" "macro-debugger" "version" "unstable" "file" "plot" "planet" "html" "compatibility" "typed-scheme" "typed-racket" "picturing-programs" "math" "mysterx" "schemeunit" "meta" "stepper" "racklog" "net" "mzlib" ".gitignore" "images" "mred" "rackunit" "algol60" "trace" "graphics" "handin-server" "xml" "openssl" "mzcom" "mzscheme" "deinprogramm" "profile" "swindle" "at-exp" "db" "slideshow" "config" "xrepl" "plai" "data" "synta!
 x-color" "help" "compiler" "lang" "reader" "s-exp" "games"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
There is a bug with the way characters interact with named let and letrec.  It appears that within the recursive call, the character has the wrong value.  If you remove the recursive call, the character has the correct value.
>How-To-Repeat:
Load the following program:

#lang racket
(define (next-char c)
  (integer->char (add1 (char->integer c))))

(define (test1)
  (let loop ([current-char #\A])
    (loop (next-char current-char))))

(define (test2)
  (let loop ([current-char #\A])
    (next-char current-char)))

Then see the problem by running the following interactions:

Welcome to DrRacket, version 5.3.3.8--2013-03-30(0a482b61/d) [3m].
Language: racket; memory limit: 512 MB.
> (test1)
. . integer->char: contract violation
  expected: (and/c (integer-in 0 #x10FFFF) (not/c (integer-in #xD800 #xDFFF)))
  given: 55296
> (test2)
#\B
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: justin@zamora.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13645: Bug with characters in letrec/named let
Date: Sat, 30 Mar 2013 23:58:24 -0400

 On 2013-03-30 23:20:01 -0400, justin@zamora.com wrote:
 > *** Description:
 > There is a bug with the way characters interact with named let and
 > letrec.  It appears that within the recursive call, the character has
 > the wrong value.  If you remove the recursive call, the character has
 > the correct value.
 >
 > *** How to repeat:
 > Load the following program:
 >
 > #lang racket
 > (define (next-char c)
 >   (integer->char (add1 (char->integer c))))
 >
 > (define (test1)
 >   (let loop ([current-char #\A])
 >     (loop (next-char current-char))))
 
 This isn't actually a bug in `let`. The named let is looping without an
 end condition, so it keeps incrementing `current-char`.  Eventually, it
 reaches the maximum integer representation of a character and causes a
 contract error.
 
 Cheers,
 Asumu

Class changed from "sw-bug" to "not-a-bug" by asumu at Sun, 31 Mar 2013 19:10:35 -0400
Reason>>> Not a bug.

State changed from "open" to "closed" by asumu at Sun, 31 Mar 2013 19:10:35 -0400
Reason>>> Not a bug.


Responsible changed from "nobody" to "asumu" by eli at Mon, 01 Apr 2013 07:30:27 -0400
Reason>>> .

