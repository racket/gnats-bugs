From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Jan  2 20:23:39 2016
Received: from mail-ig0-f178.google.com (mail-ig0-f178.google.com [209.85.213.178])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id u031NbOY013779
	for <bugs@bugs.plt-scheme.org>; Sat, 2 Jan 2016 20:23:37 -0500
Message-Id: <201601030123.u031NZk8013772@winooski.ccs.neu.edu>
Date: Sat, 2 Jan 2016 20:23:35 -0500
From: rmb@barthfamily.com
To: bugs@racket-lang.org
Subject: call/cc experiment produces unexpected output

>Number:         15211
>Category:       all
>Synopsis:       call/cc experiment produces unexpected output
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Jan 02 20:24:01 -0500 2016
>Last-Modified:  Sat Jan 02 20:40:01 -0500 2016
>Originator:     Richard Barth
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.3
>Environment:
macosx "Darwin Richard-Barths-MacBook-Pro.local 15.2.0 Darwin Kernel Version 15.2.0: Fri Nov 13 19:56:56 PST 2015; root:xnu-3248.20.55~2/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 1164033092
raco pkg (show):
Installation-wide:
 Package            Checksum     Source
 main-distribution  46973fb2...  catalog main-distribution
 racket-lib         1f53b49c...  catalog racket-lib
 [186 auto-installed packages not shown]
User-specific for installation "6.3":
 [none]



Collections:
("/Users/rick/Library/Racket/6.3/collects"
 (non-existent-path))
("/Applications/Racket v6.3/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n" #f #t ((test) (main)) #t))
>Description:
#lang racket

(define (coroutine routine)
  (let ((current routine))
    (lambda ()
      (let ((continuation-and-value
             (call/cc (lambda (return)
                        (let ((returner (lambda (value) (call/cc (lambda (next) (return (cons next value)))))))
                          (current returner)
                          (error "too many producer calls"))))))
        (set! current (car continuation-and-value))
        (cdr continuation-and-value)))))
(define producer
  (coroutine (lambda (out)
               (out 1)
               (out 2))))
(define (consumer)
  (displayln (producer))
  (displayln (producer)))
(consumer)
>How-To-Repeat:
Put the code shown above into a DrRacket window and run it; it produces:
1
2
. . too many producer calls

However, comment out the last line (the consumer invocation) and proceed as below everything works fine.

> (displayln (producer))
1
> (displayln (producer))
2
> 

Not sure if I've done something wrong or what.
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: rmb@barthfamily.com, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15211: call/cc experiment produces unexpected output
Date: Sat, 2 Jan 2016 19:35:57 -0600

 I didn't look closely, but could it be that the prompt puts a prompt
 around the expression it evaluates?
 
 You may want to take this to the mailing list, instead of the bug
 report form, too. Here's a link:
 
   https://groups.google.com/forum/#!forum/racket-users
 
 Robby
 
 
 On Sat, Jan 2, 2016 at 7:24 PM,  <rmb@barthfamily.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15211
 >
 > Reported by Richard Barth for release: 6.3
 >
 > *** Description:
 > #lang racket
 >
 > (define (coroutine routine)
 >   (let ((current routine))
 >     (lambda ()
 >       (let ((continuation-and-value
 >              (call/cc (lambda (return)
 >                         (let ((returner (lambda (value) (call/cc (lambda (next) (return (cons next value)))))))
 >                           (current returner)
 >                           (error "too many producer calls"))))))
 >         (set! current (car continuation-and-value))
 >         (cdr continuation-and-value)))))
 > (define producer
 >   (coroutine (lambda (out)
 >                (out 1)
 >                (out 2))))
 > (define (consumer)
 >   (displayln (producer))
 >   (displayln (producer)))
 > (consumer)
 >
 > *** How to repeat:
 > Put the code shown above into a DrRacket window and run it; it produces:
 > 1
 > 2
 > . . too many producer calls
 >
 > However, comment out the last line (the consumer invocation) and proceed as below everything works fine.
 >
 >> (displayln (producer))
 > 1
 >> (displayln (producer))
 > 2
 >>
 >
 > Not sure if I've done something wrong or what.
 >
 > *** Environment:
 > macosx "Darwin Richard-Barths-MacBook-Pro.local 15.2.0 Darwin Kernel Version 15.2.0: Fri Nov 13 19:56:56 PST 2015; root:xnu-3248.20.55~2/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 1164033092
 > raco pkg (show):
 > Installation-wide:
 >  Package            Checksum     Source
 >  main-distribution  46973fb2...  catalog main-distribution
 >  racket-lib         1f53b49c...  catalog racket-lib
 >  [186 auto-installed packages not shown]
 > User-specific for installation "6.3":
 >  [none]
 >
 >
 >
 > Collections:
 > ("/Users/rick/Library/Racket/6.3/collects"
 >  (non-existent-path))
 > ("/Applications/Racket v6.3/collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 >
 > Recent Internal Errors:
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug/profile) (default) #() "#lang racket\n" #f #t ((test) (main)) #t))
 >
