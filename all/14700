From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Aug 25 10:42:07 2014
Received: from mail-ig0-f182.google.com (mail-ig0-f182.google.com [209.85.213.182])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s7PEg6HP016660
	for <bugs@bugs.plt-scheme.org>; Mon, 25 Aug 2014 10:42:06 -0400
Message-Id: <201408251442.s7PEg4km016653@winooski.ccs.neu.edu>
Date: Mon, 25 Aug 2014 10:42:04 -0400
From: daniel.zidan.king@gmail.com
To: bugs@racket-lang.org
Subject: Docs for 6.4.4 Array Slicing are wrong

>Number:         14700
>Category:       all
>Synopsis:       Docs for 6.4.4 Array Slicing are wrong
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Aug 25 10:44:01 -0400 2014
>Last-Modified:  Thu Aug 28 08:56:01 -0400 2014
>Originator:     Daniel King
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0) Gecko/20100101 Firefox/31.0
>Description:
The example in 6.4.4 doesn't evaluate to the same result I get in Racket v6.0.1.

I've included my session below. It's worth noting that indexing with a 1 instead of a 0 works somewhat closer to expected, but does not remove the axis selected.

danking@spock # rlwrap racket
Welcome to Racket v6.0.1.
> (require math/array)
(define arr
    (build-array
     (vector 2 3 4)
     (lambda (js)
       (apply string-append (map number->string (vector->list js))))))
> arr
(array
 #[#[#["000" "001" "002" "003"]
     #["010" "011" "012" "013"]
     #["020" "021" "022" "023"]]
   #[#["100" "101" "102" "103"]
     #["110" "111" "112" "113"]
     #["120" "121" "122" "123"]]])
> (array-slice-ref arr (list 0 ::...))
(array #[])
> 
>How-To-Repeat:
#lang racket

(require math/array)

(define arr
    (build-array
     (vector 2 3 4)
     (lambda (js)
       (apply string-append (map number->string (vector->list js))))))

(array-slice-ref arr (list 0 ::...))

>Fix:
>Audit-Trail:
From: Neil Toronto <neil.toronto@gmail.com>
To: daniel.zidan.king@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/14700: Docs for 6.4.4 Array Slicing are wrong
Date: Wed, 27 Aug 2014 22:04:00 -0400

 Thanks for the report!
 
 Some progress tracking it down: the example works as expected in Typed 
 Racket, but not in untyped Racket. That is, using "#lang typed/racket" 
 and (lambda ([js : Indexes]) ...), it works as in the docs.
 
 Still looking!
 
 Neil ⊥
 
 On 08/25/2014 10:44 AM, daniel.zidan.king@gmail.com wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=14700
 >
 > Reported by Daniel King for release: 6.0.1
 >
 > *** Description:
 > The example in 6.4.4 doesn't evaluate to the same result I get in Racket v6.0.1.
 >
 > I've included my session below. It's worth noting that indexing with a 1 instead of a 0 works somewhat closer to expected, but does not remove the axis selected.
 >
 > danking@spock # rlwrap racket
 > Welcome to Racket v6.0.1.
 >> (require math/array)
 > (define arr
 >      (build-array
 >       (vector 2 3 4)
 >       (lambda (js)
 >         (apply string-append (map number->string (vector->list js))))))
 >> arr
 > (array
 >   #[#[#["000" "001" "002" "003"]
 >       #["010" "011" "012" "013"]
 >       #["020" "021" "022" "023"]]
 >     #[#["100" "101" "102" "103"]
 >       #["110" "111" "112" "113"]
 >       #["120" "121" "122" "123"]]])
 >> (array-slice-ref arr (list 0 ::...))
 > (array #[])
 >>
 >
 > *** How to repeat:
 > #lang racket
 >
 > (require math/array)
 >
 > (define arr
 >      (build-array
 >       (vector 2 3 4)
 >       (lambda (js)
 >         (apply string-append (map number->string (vector->list js))))))
 >
 > (array-slice-ref arr (list 0 ::...))
 >
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0) Gecko/20100101 Firefox/31.0
 >
 
From: Neil Toronto <neil.toronto@gmail.com>
To: daniel.zidan.king@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/14700: Docs for 6.4.4 Array Slicing are wrong
Date: Wed, 27 Aug 2014 22:49:05 -0400

 This appears to be a problem in TR's contract generation, but I don't 
 know who to blame.
 
 A nonnegative integer is also a sequence, so that e.g. (for ([i n]) ...) 
 loops over numbers up to n. So TR correctly simplifies (U Integer 
 (Sequenceof Integer)) to (U Negative-Integer (Sequenceof Integer)):
 
  > (ann 5 (U Integer (Sequenceof Integer)))
 - : (U Negative-Integer (Sequenceof Integer))
 5
 
 This causes nonnegative integers passed across the contract boundary as 
 that type to be wrapped as generic sequences. In the original program, 0 
 was being passed through the contract boundary as an empty sequence 
 (i.e. all the natural numbers up to 0), so it picked no rows; hence the 
 empty array result.
 
 Here's a smaller program that replicates the problem without relying on 
 `math/array`:
 
 #lang racket
 
 (module defs typed/racket
    (provide report-type)
 
    (: report-type (-> (U Integer (Sequenceof Integer)) Any))
    (define (report-type n)
      (if (integer? n) 'Integer '(Sequenceof Integer)))
 
    ;; Returns 'Integer
    (report-type 0))
 
 (require 'defs)
 ;; Returns '(Sequenceof Integer)
 (report-type 0)
 
 
 Here's an analogous program that just uses contracts:
 
 #lang racket
 
 (module defs racket
    (require unstable/contract)
 
    (provide
     (contract-out
      [report-type   (-> (or/c (and/c integer? negative?)
                               (sequence/c integer?))
                         any)]))
 
    (define (report-type n)
      (if (integer? n) 'Integer '(Sequenceof Integer)))
 
    ;; Returns 'Integer
    (report-type 0))
 
 (require 'defs)
 ;; Returns '(Sequenceof Integer)
 (report-type 0)
 
 
 One idea for a fix is to change `sequence/c` to pass nonnegative 
 integers through unchanged. (If TR uses that contract.) But I don't know 
 whether it's the right fix.
 
 Neil ⊥
 
 On 08/27/2014 10:04 PM, Neil Toronto wrote:
 > Thanks for the report!
 >
 > Some progress tracking it down: the example works as expected in Typed
 > Racket, but not in untyped Racket. That is, using "#lang typed/racket"
 > and (lambda ([js : Indexes]) ...), it works as in the docs.
 >
 > Still looking!
 >
 > Neil ⊥
 >
 > On 08/25/2014 10:44 AM, daniel.zidan.king@gmail.com wrote:
 >> A new problem report is waiting at
 >>    http://bugs.racket-lang.org/query/?cmd=view&pr=14700
 >>
 >> Reported by Daniel King for release: 6.0.1
 >>
 >> *** Description:
 >> The example in 6.4.4 doesn't evaluate to the same result I get in
 >> Racket v6.0.1.
 >>
 >> I've included my session below. It's worth noting that indexing with a
 >> 1 instead of a 0 works somewhat closer to expected, but does not
 >> remove the axis selected.
 >>
 >> danking@spock # rlwrap racket
 >> Welcome to Racket v6.0.1.
 >>> (require math/array)
 >> (define arr
 >>      (build-array
 >>       (vector 2 3 4)
 >>       (lambda (js)
 >>         (apply string-append (map number->string (vector->list js))))))
 >>> arr
 >> (array
 >>   #[#[#["000" "001" "002" "003"]
 >>       #["010" "011" "012" "013"]
 >>       #["020" "021" "022" "023"]]
 >>     #[#["100" "101" "102" "103"]
 >>       #["110" "111" "112" "113"]
 >>       #["120" "121" "122" "123"]]])
 >>> (array-slice-ref arr (list 0 ::...))
 >> (array #[])
 >>>
 >>
 >> *** How to repeat:
 >> #lang racket
 >>
 >> (require math/array)
 >>
 >> (define arr
 >>      (build-array
 >>       (vector 2 3 4)
 >>       (lambda (js)
 >>         (apply string-append (map number->string (vector->list js))))))
 >>
 >> (array-slice-ref arr (list 0 ::...))
 >>
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0)
 >> Gecko/20100101 Firefox/31.0
 >>
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: daniel.zidan.king@gmail.com, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14700: Docs for 6.4.4 Array Slicing are wrong
Date: Wed, 27 Aug 2014 23:02:13 -0500

 This seems like a bug to me:
 
 ☕  racket
 Welcome to Racket v6.1.0.5.
 > (require unstable/contract)
 > (contract (sequence/c integer?) 4 'pos 'neg)
 #<sequence>
 
 That should return 4 (being a contract violation would also be
 acceptable, but perhaps less preferable).
 
 Robby
 
 On Wed, Aug 27, 2014 at 9:49 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > This appears to be a problem in TR's contract generation, but I don't know
 > who to blame.
 >
 > A nonnegative integer is also a sequence, so that e.g. (for ([i n]) ...)
 > loops over numbers up to n. So TR correctly simplifies (U Integer
 > (Sequenceof Integer)) to (U Negative-Integer (Sequenceof Integer)):
 >
 >> (ann 5 (U Integer (Sequenceof Integer)))
 > - : (U Negative-Integer (Sequenceof Integer))
 > 5
 >
 > This causes nonnegative integers passed across the contract boundary as that
 > type to be wrapped as generic sequences. In the original program, 0 was
 > being passed through the contract boundary as an empty sequence (i.e. all
 > the natural numbers up to 0), so it picked no rows; hence the empty array
 > result.
 >
 > Here's a smaller program that replicates the problem without relying on
 > `math/array`:
 >
 > #lang racket
 >
 > (module defs typed/racket
 >   (provide report-type)
 >
 >   (: report-type (-> (U Integer (Sequenceof Integer)) Any))
 >   (define (report-type n)
 >     (if (integer? n) 'Integer '(Sequenceof Integer)))
 >
 >   ;; Returns 'Integer
 >   (report-type 0))
 >
 > (require 'defs)
 > ;; Returns '(Sequenceof Integer)
 > (report-type 0)
 >
 >
 > Here's an analogous program that just uses contracts:
 >
 > #lang racket
 >
 > (module defs racket
 >   (require unstable/contract)
 >
 >   (provide
 >    (contract-out
 >     [report-type   (-> (or/c (and/c integer? negative?)
 >                              (sequence/c integer?))
 >                        any)]))
 >
 >   (define (report-type n)
 >     (if (integer? n) 'Integer '(Sequenceof Integer)))
 >
 >   ;; Returns 'Integer
 >   (report-type 0))
 >
 > (require 'defs)
 > ;; Returns '(Sequenceof Integer)
 > (report-type 0)
 >
 >
 > One idea for a fix is to change `sequence/c` to pass nonnegative integers
 > through unchanged. (If TR uses that contract.) But I don't know whether it's
 > the right fix.
 >
 > Neil ⊥
 >
 >
 > On 08/27/2014 10:04 PM, Neil Toronto wrote:
 >>
 >> Thanks for the report!
 >>
 >> Some progress tracking it down: the example works as expected in Typed
 >> Racket, but not in untyped Racket. That is, using "#lang typed/racket"
 >> and (lambda ([js : Indexes]) ...), it works as in the docs.
 >>
 >> Still looking!
 >>
 >> Neil ⊥
 >>
 >> On 08/25/2014 10:44 AM, daniel.zidan.king@gmail.com wrote:
 >>>
 >>> A new problem report is waiting at
 >>>    http://bugs.racket-lang.org/query/?cmd=view&pr=14700
 >>>
 >>> Reported by Daniel King for release: 6.0.1
 >>>
 >>> *** Description:
 >>> The example in 6.4.4 doesn't evaluate to the same result I get in
 >>> Racket v6.0.1.
 >>>
 >>> I've included my session below. It's worth noting that indexing with a
 >>> 1 instead of a 0 works somewhat closer to expected, but does not
 >>> remove the axis selected.
 >>>
 >>> danking@spock # rlwrap racket
 >>> Welcome to Racket v6.0.1.
 >>>>
 >>>> (require math/array)
 >>>
 >>> (define arr
 >>>      (build-array
 >>>       (vector 2 3 4)
 >>>       (lambda (js)
 >>>         (apply string-append (map number->string (vector->list js))))))
 >>>>
 >>>> arr
 >>>
 >>> (array
 >>>   #[#[#["000" "001" "002" "003"]
 >>>       #["010" "011" "012" "013"]
 >>>       #["020" "021" "022" "023"]]
 >>>     #[#["100" "101" "102" "103"]
 >>>       #["110" "111" "112" "113"]
 >>>       #["120" "121" "122" "123"]]])
 >>>>
 >>>> (array-slice-ref arr (list 0 ::...))
 >>>
 >>> (array #[])
 >>>>
 >>>>
 >>>
 >>> *** How to repeat:
 >>> #lang racket
 >>>
 >>> (require math/array)
 >>>
 >>> (define arr
 >>>      (build-array
 >>>       (vector 2 3 4)
 >>>       (lambda (js)
 >>>         (apply string-append (map number->string (vector->list js))))))
 >>>
 >>> (array-slice-ref arr (list 0 ::...))
 >>>
 >>>
 >>> *** Environment:
 >>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0)
 >>> Gecko/20100101 Firefox/31.0
 >>>
 >>
 >
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: daniel.zidan.king@gmail.com, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14700: Docs for 6.4.4 Array Slicing are wrong
Date: Thu, 28 Aug 2014 05:26:00 -0400

 So it's all Carl's fault. I knew it!
 
 Seriously, though, isn't 4 a sequence?
 
  > (sequence->list 4)
 '(0 1 2 3)
 
 So the contract should return 4, not a contract, and not raise an error.
 
 Neil ⊥
 
 On 08/28/2014 12:02 AM, Robby Findler wrote:
 > This seems like a bug to me:
 >
 > ☕  racket
 > Welcome to Racket v6.1.0.5.
 >> (require unstable/contract)
 >> (contract (sequence/c integer?) 4 'pos 'neg)
 > #<sequence>
 >
 > That should return 4 (being a contract violation would also be
 > acceptable, but perhaps less preferable).
 >
 > Robby
 >
 > On Wed, Aug 27, 2014 at 9:49 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 >> This appears to be a problem in TR's contract generation, but I don't know
 >> who to blame.
 >>
 >> A nonnegative integer is also a sequence, so that e.g. (for ([i n]) ...)
 >> loops over numbers up to n. So TR correctly simplifies (U Integer
 >> (Sequenceof Integer)) to (U Negative-Integer (Sequenceof Integer)):
 >>
 >>> (ann 5 (U Integer (Sequenceof Integer)))
 >> - : (U Negative-Integer (Sequenceof Integer))
 >> 5
 >>
 >> This causes nonnegative integers passed across the contract boundary as that
 >> type to be wrapped as generic sequences. In the original program, 0 was
 >> being passed through the contract boundary as an empty sequence (i.e. all
 >> the natural numbers up to 0), so it picked no rows; hence the empty array
 >> result.
 >>
 >> Here's a smaller program that replicates the problem without relying on
 >> `math/array`:
 >>
 >> #lang racket
 >>
 >> (module defs typed/racket
 >>    (provide report-type)
 >>
 >>    (: report-type (-> (U Integer (Sequenceof Integer)) Any))
 >>    (define (report-type n)
 >>      (if (integer? n) 'Integer '(Sequenceof Integer)))
 >>
 >>    ;; Returns 'Integer
 >>    (report-type 0))
 >>
 >> (require 'defs)
 >> ;; Returns '(Sequenceof Integer)
 >> (report-type 0)
 >>
 >>
 >> Here's an analogous program that just uses contracts:
 >>
 >> #lang racket
 >>
 >> (module defs racket
 >>    (require unstable/contract)
 >>
 >>    (provide
 >>     (contract-out
 >>      [report-type   (-> (or/c (and/c integer? negative?)
 >>                               (sequence/c integer?))
 >>                         any)]))
 >>
 >>    (define (report-type n)
 >>      (if (integer? n) 'Integer '(Sequenceof Integer)))
 >>
 >>    ;; Returns 'Integer
 >>    (report-type 0))
 >>
 >> (require 'defs)
 >> ;; Returns '(Sequenceof Integer)
 >> (report-type 0)
 >>
 >>
 >> One idea for a fix is to change `sequence/c` to pass nonnegative integers
 >> through unchanged. (If TR uses that contract.) But I don't know whether it's
 >> the right fix.
 >>
 >> Neil ⊥
 >>
 >>
 >> On 08/27/2014 10:04 PM, Neil Toronto wrote:
 >>>
 >>> Thanks for the report!
 >>>
 >>> Some progress tracking it down: the example works as expected in Typed
 >>> Racket, but not in untyped Racket. That is, using "#lang typed/racket"
 >>> and (lambda ([js : Indexes]) ...), it works as in the docs.
 >>>
 >>> Still looking!
 >>>
 >>> Neil ⊥
 >>>
 >>> On 08/25/2014 10:44 AM, daniel.zidan.king@gmail.com wrote:
 >>>>
 >>>> A new problem report is waiting at
 >>>>     http://bugs.racket-lang.org/query/?cmd=view&pr=14700
 >>>>
 >>>> Reported by Daniel King for release: 6.0.1
 >>>>
 >>>> *** Description:
 >>>> The example in 6.4.4 doesn't evaluate to the same result I get in
 >>>> Racket v6.0.1.
 >>>>
 >>>> I've included my session below. It's worth noting that indexing with a
 >>>> 1 instead of a 0 works somewhat closer to expected, but does not
 >>>> remove the axis selected.
 >>>>
 >>>> danking@spock # rlwrap racket
 >>>> Welcome to Racket v6.0.1.
 >>>>>
 >>>>> (require math/array)
 >>>>
 >>>> (define arr
 >>>>       (build-array
 >>>>        (vector 2 3 4)
 >>>>        (lambda (js)
 >>>>          (apply string-append (map number->string (vector->list js))))))
 >>>>>
 >>>>> arr
 >>>>
 >>>> (array
 >>>>    #[#[#["000" "001" "002" "003"]
 >>>>        #["010" "011" "012" "013"]
 >>>>        #["020" "021" "022" "023"]]
 >>>>      #[#["100" "101" "102" "103"]
 >>>>        #["110" "111" "112" "113"]
 >>>>        #["120" "121" "122" "123"]]])
 >>>>>
 >>>>> (array-slice-ref arr (list 0 ::...))
 >>>>
 >>>> (array #[])
 >>>>>
 >>>>>
 >>>>
 >>>> *** How to repeat:
 >>>> #lang racket
 >>>>
 >>>> (require math/array)
 >>>>
 >>>> (define arr
 >>>>       (build-array
 >>>>        (vector 2 3 4)
 >>>>        (lambda (js)
 >>>>          (apply string-append (map number->string (vector->list js))))))
 >>>>
 >>>> (array-slice-ref arr (list 0 ::...))
 >>>>
 >>>>
 >>>> *** Environment:
 >>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0)
 >>>> Gecko/20100101 Firefox/31.0
 >>>>
 >>>
 >>
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: daniel.zidan.king@gmail.com, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14700: Docs for 6.4.4 Array Slicing are wrong
Date: Thu, 28 Aug 2014 05:32:09 -0400

 Also, I wonder how useful it really is to treat numbers as sequences of 
 their predecessors. It's surprising enough that it's really easy to get 
 something like `sequence/c` wrong. If I hadn't already learned about it 
 when coding array slicing in the first place, the cause of the error in 
 untyped `array-slice-ref` would have taken many hours to find.
 
 Is it worth it just so we can justify (for ([i n]) ...) with a 
 generalization? Does anyone use it outside of this idiom?
 
 Neil ⊥
 
 On 08/28/2014 05:26 AM, Neil Toronto wrote:
 > So it's all Carl's fault. I knew it!
 >
 > Seriously, though, isn't 4 a sequence?
 >
 >  > (sequence->list 4)
 > '(0 1 2 3)
 >
 > So the contract should return 4, not a contract, and not raise an error.
 >
 > Neil ⊥
 >
 > On 08/28/2014 12:02 AM, Robby Findler wrote:
 >> This seems like a bug to me:
 >>
 >> ☕  racket
 >> Welcome to Racket v6.1.0.5.
 >>> (require unstable/contract)
 >>> (contract (sequence/c integer?) 4 'pos 'neg)
 >> #<sequence>
 >>
 >> That should return 4 (being a contract violation would also be
 >> acceptable, but perhaps less preferable).
 >>
 >> Robby
 >>
 >> On Wed, Aug 27, 2014 at 9:49 PM, Neil Toronto <neil.toronto@gmail.com>
 >> wrote:
 >>> This appears to be a problem in TR's contract generation, but I don't
 >>> know
 >>> who to blame.
 >>>
 >>> A nonnegative integer is also a sequence, so that e.g. (for ([i n]) ...)
 >>> loops over numbers up to n. So TR correctly simplifies (U Integer
 >>> (Sequenceof Integer)) to (U Negative-Integer (Sequenceof Integer)):
 >>>
 >>>> (ann 5 (U Integer (Sequenceof Integer)))
 >>> - : (U Negative-Integer (Sequenceof Integer))
 >>> 5
 >>>
 >>> This causes nonnegative integers passed across the contract boundary
 >>> as that
 >>> type to be wrapped as generic sequences. In the original program, 0 was
 >>> being passed through the contract boundary as an empty sequence (i.e.
 >>> all
 >>> the natural numbers up to 0), so it picked no rows; hence the empty
 >>> array
 >>> result.
 >>>
 >>> Here's a smaller program that replicates the problem without relying on
 >>> `math/array`:
 >>>
 >>> #lang racket
 >>>
 >>> (module defs typed/racket
 >>>    (provide report-type)
 >>>
 >>>    (: report-type (-> (U Integer (Sequenceof Integer)) Any))
 >>>    (define (report-type n)
 >>>      (if (integer? n) 'Integer '(Sequenceof Integer)))
 >>>
 >>>    ;; Returns 'Integer
 >>>    (report-type 0))
 >>>
 >>> (require 'defs)
 >>> ;; Returns '(Sequenceof Integer)
 >>> (report-type 0)
 >>>
 >>>
 >>> Here's an analogous program that just uses contracts:
 >>>
 >>> #lang racket
 >>>
 >>> (module defs racket
 >>>    (require unstable/contract)
 >>>
 >>>    (provide
 >>>     (contract-out
 >>>      [report-type   (-> (or/c (and/c integer? negative?)
 >>>                               (sequence/c integer?))
 >>>                         any)]))
 >>>
 >>>    (define (report-type n)
 >>>      (if (integer? n) 'Integer '(Sequenceof Integer)))
 >>>
 >>>    ;; Returns 'Integer
 >>>    (report-type 0))
 >>>
 >>> (require 'defs)
 >>> ;; Returns '(Sequenceof Integer)
 >>> (report-type 0)
 >>>
 >>>
 >>> One idea for a fix is to change `sequence/c` to pass nonnegative
 >>> integers
 >>> through unchanged. (If TR uses that contract.) But I don't know
 >>> whether it's
 >>> the right fix.
 >>>
 >>> Neil ⊥
 >>>
 >>>
 >>> On 08/27/2014 10:04 PM, Neil Toronto wrote:
 >>>>
 >>>> Thanks for the report!
 >>>>
 >>>> Some progress tracking it down: the example works as expected in Typed
 >>>> Racket, but not in untyped Racket. That is, using "#lang typed/racket"
 >>>> and (lambda ([js : Indexes]) ...), it works as in the docs.
 >>>>
 >>>> Still looking!
 >>>>
 >>>> Neil ⊥
 >>>>
 >>>> On 08/25/2014 10:44 AM, daniel.zidan.king@gmail.com wrote:
 >>>>>
 >>>>> A new problem report is waiting at
 >>>>>     http://bugs.racket-lang.org/query/?cmd=view&pr=14700
 >>>>>
 >>>>> Reported by Daniel King for release: 6.0.1
 >>>>>
 >>>>> *** Description:
 >>>>> The example in 6.4.4 doesn't evaluate to the same result I get in
 >>>>> Racket v6.0.1.
 >>>>>
 >>>>> I've included my session below. It's worth noting that indexing with a
 >>>>> 1 instead of a 0 works somewhat closer to expected, but does not
 >>>>> remove the axis selected.
 >>>>>
 >>>>> danking@spock # rlwrap racket
 >>>>> Welcome to Racket v6.0.1.
 >>>>>>
 >>>>>> (require math/array)
 >>>>>
 >>>>> (define arr
 >>>>>       (build-array
 >>>>>        (vector 2 3 4)
 >>>>>        (lambda (js)
 >>>>>          (apply string-append (map number->string (vector->list
 >>>>> js))))))
 >>>>>>
 >>>>>> arr
 >>>>>
 >>>>> (array
 >>>>>    #[#[#["000" "001" "002" "003"]
 >>>>>        #["010" "011" "012" "013"]
 >>>>>        #["020" "021" "022" "023"]]
 >>>>>      #[#["100" "101" "102" "103"]
 >>>>>        #["110" "111" "112" "113"]
 >>>>>        #["120" "121" "122" "123"]]])
 >>>>>>
 >>>>>> (array-slice-ref arr (list 0 ::...))
 >>>>>
 >>>>> (array #[])
 >>>>>>
 >>>>>>
 >>>>>
 >>>>> *** How to repeat:
 >>>>> #lang racket
 >>>>>
 >>>>> (require math/array)
 >>>>>
 >>>>> (define arr
 >>>>>       (build-array
 >>>>>        (vector 2 3 4)
 >>>>>        (lambda (js)
 >>>>>          (apply string-append (map number->string (vector->list
 >>>>> js))))))
 >>>>>
 >>>>> (array-slice-ref arr (list 0 ::...))
 >>>>>
 >>>>>
 >>>>> *** Environment:
 >>>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0)
 >>>>> Gecko/20100101 Firefox/31.0
 >>>>>
 >>>>
 >>>
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: daniel.zidan.king@gmail.com, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14700: Docs for 6.4.4 Array Slicing are wrong
Date: Thu, 28 Aug 2014 07:55:47 -0500

 I think returning 4 is the right behavior in this case, but perhaps
 there needs to be special support for sequences of flat things or
 perhaps maybe even something more specialized, I'm not sure.
 
 Robby
 
 On Thu, Aug 28, 2014 at 4:26 AM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > So it's all Carl's fault. I knew it!
 >
 > Seriously, though, isn't 4 a sequence?
 >
 >> (sequence->list 4)
 > '(0 1 2 3)
 >
 > So the contract should return 4, not a contract, and not raise an error.
 >
 > Neil ⊥
 >
 >
 > On 08/28/2014 12:02 AM, Robby Findler wrote:
 >>
 >> This seems like a bug to me:
 >>
 >> ☕  racket
 >> Welcome to Racket v6.1.0.5.
 >>>
 >>> (require unstable/contract)
 >>> (contract (sequence/c integer?) 4 'pos 'neg)
 >>
 >> #<sequence>
 >>
 >> That should return 4 (being a contract violation would also be
 >> acceptable, but perhaps less preferable).
 >>
 >> Robby
 >>
 >> On Wed, Aug 27, 2014 at 9:49 PM, Neil Toronto <neil.toronto@gmail.com>
 >> wrote:
 >>>
 >>> This appears to be a problem in TR's contract generation, but I don't
 >>> know
 >>> who to blame.
 >>>
 >>> A nonnegative integer is also a sequence, so that e.g. (for ([i n]) ...)
 >>> loops over numbers up to n. So TR correctly simplifies (U Integer
 >>> (Sequenceof Integer)) to (U Negative-Integer (Sequenceof Integer)):
 >>>
 >>>> (ann 5 (U Integer (Sequenceof Integer)))
 >>>
 >>> - : (U Negative-Integer (Sequenceof Integer))
 >>> 5
 >>>
 >>> This causes nonnegative integers passed across the contract boundary as
 >>> that
 >>> type to be wrapped as generic sequences. In the original program, 0 was
 >>> being passed through the contract boundary as an empty sequence (i.e. all
 >>> the natural numbers up to 0), so it picked no rows; hence the empty array
 >>> result.
 >>>
 >>> Here's a smaller program that replicates the problem without relying on
 >>> `math/array`:
 >>>
 >>> #lang racket
 >>>
 >>> (module defs typed/racket
 >>>    (provide report-type)
 >>>
 >>>    (: report-type (-> (U Integer (Sequenceof Integer)) Any))
 >>>    (define (report-type n)
 >>>      (if (integer? n) 'Integer '(Sequenceof Integer)))
 >>>
 >>>    ;; Returns 'Integer
 >>>    (report-type 0))
 >>>
 >>> (require 'defs)
 >>> ;; Returns '(Sequenceof Integer)
 >>> (report-type 0)
 >>>
 >>>
 >>> Here's an analogous program that just uses contracts:
 >>>
 >>> #lang racket
 >>>
 >>> (module defs racket
 >>>    (require unstable/contract)
 >>>
 >>>    (provide
 >>>     (contract-out
 >>>      [report-type   (-> (or/c (and/c integer? negative?)
 >>>                               (sequence/c integer?))
 >>>                         any)]))
 >>>
 >>>    (define (report-type n)
 >>>      (if (integer? n) 'Integer '(Sequenceof Integer)))
 >>>
 >>>    ;; Returns 'Integer
 >>>    (report-type 0))
 >>>
 >>> (require 'defs)
 >>> ;; Returns '(Sequenceof Integer)
 >>> (report-type 0)
 >>>
 >>>
 >>> One idea for a fix is to change `sequence/c` to pass nonnegative integers
 >>> through unchanged. (If TR uses that contract.) But I don't know whether
 >>> it's
 >>> the right fix.
 >>>
 >>> Neil ⊥
 >>>
 >>>
 >>> On 08/27/2014 10:04 PM, Neil Toronto wrote:
 >>>>
 >>>>
 >>>> Thanks for the report!
 >>>>
 >>>> Some progress tracking it down: the example works as expected in Typed
 >>>> Racket, but not in untyped Racket. That is, using "#lang typed/racket"
 >>>> and (lambda ([js : Indexes]) ...), it works as in the docs.
 >>>>
 >>>> Still looking!
 >>>>
 >>>> Neil ⊥
 >>>>
 >>>> On 08/25/2014 10:44 AM, daniel.zidan.king@gmail.com wrote:
 >>>>>
 >>>>>
 >>>>> A new problem report is waiting at
 >>>>>     http://bugs.racket-lang.org/query/?cmd=view&pr=14700
 >>>>>
 >>>>> Reported by Daniel King for release: 6.0.1
 >>>>>
 >>>>> *** Description:
 >>>>> The example in 6.4.4 doesn't evaluate to the same result I get in
 >>>>> Racket v6.0.1.
 >>>>>
 >>>>> I've included my session below. It's worth noting that indexing with a
 >>>>> 1 instead of a 0 works somewhat closer to expected, but does not
 >>>>> remove the axis selected.
 >>>>>
 >>>>> danking@spock # rlwrap racket
 >>>>> Welcome to Racket v6.0.1.
 >>>>>>
 >>>>>>
 >>>>>> (require math/array)
 >>>>>
 >>>>>
 >>>>> (define arr
 >>>>>       (build-array
 >>>>>        (vector 2 3 4)
 >>>>>        (lambda (js)
 >>>>>          (apply string-append (map number->string (vector->list
 >>>>> js))))))
 >>>>>>
 >>>>>>
 >>>>>> arr
 >>>>>
 >>>>>
 >>>>> (array
 >>>>>    #[#[#["000" "001" "002" "003"]
 >>>>>        #["010" "011" "012" "013"]
 >>>>>        #["020" "021" "022" "023"]]
 >>>>>      #[#["100" "101" "102" "103"]
 >>>>>        #["110" "111" "112" "113"]
 >>>>>        #["120" "121" "122" "123"]]])
 >>>>>>
 >>>>>>
 >>>>>> (array-slice-ref arr (list 0 ::...))
 >>>>>
 >>>>>
 >>>>> (array #[])
 >>>>>>
 >>>>>>
 >>>>>>
 >>>>>
 >>>>> *** How to repeat:
 >>>>> #lang racket
 >>>>>
 >>>>> (require math/array)
 >>>>>
 >>>>> (define arr
 >>>>>       (build-array
 >>>>>        (vector 2 3 4)
 >>>>>        (lambda (js)
 >>>>>          (apply string-append (map number->string (vector->list
 >>>>> js))))))
 >>>>>
 >>>>> (array-slice-ref arr (list 0 ::...))
 >>>>>
 >>>>>
 >>>>> *** Environment:
 >>>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0)
 >>>>> Gecko/20100101 Firefox/31.0
 >>>>>
 >>>>
 >>>
 >
 
