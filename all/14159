From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Nov 17 13:15:36 2013
Received: from mail-oa0-f41.google.com (mail-oa0-f41.google.com [209.85.219.41])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rAHIFYvw027676
	for <bugs@bugs.plt-scheme.org>; Sun, 17 Nov 2013 13:15:34 -0500
Message-Id: <201311171815.rAHIFW5g027665@winooski.ccs.neu.edu>
Date: Sun, 17 Nov 2013 13:15:32 -0500
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: TR ignores type declaration?

>Number:         14159
>Category:       all
>Synopsis:       TR ignores type declaration?
>Class:          sw-bug
>Responsible:    stamourv
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Nov 17 13:16:01 -0500 2013
>Closed-Date:    Mon Nov 18 15:10:37 -0500 2013
>Last-Modified:  Mon Nov 18 17:00:02 -0500 2013
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36
>Description:
I'm not sure why this happens, but I'd expect the below to tell me that
`n' is a Fixnum, not an Integer:

-> (: n : Fixnum)
-> (define n 123)
-> n
- : Integer [generalized from Fixnum]
123
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Sun, 17 Nov 2013 10:46:28 -0800

 It is telling you that, thats what 'from Fixnum' means. The issue is
 that the precise type may not be meaningful to users and so we show
 both.
 
 Code for reference:
 https://github.com/plt/racket/blob/master/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/core.rkt#L132
 
 
 On Sun, Nov 17, 2013 at 10:16 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14159
 >
 > Reported by Eli Barzilay for release: HEAD
 >
 > *** Description:
 > I'm not sure why this happens, but I'd expect the below to tell me that
 > `n' is a Fixnum, not an Integer:
 >
 > -> (: n : Fixnum)
 > -> (define n 123)
 > -> n
 > - : Integer [generalized from Fixnum]
 > 123
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36
 >
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: eli@barzilay.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Sun, 17 Nov 2013 13:44:50 -0500

 On 2013-11-17 13:16:02 -0500, eli@barzilay.org wrote:
 > *** Description:
 > I'm not sure why this happens, but I'd expect the below to tell me that
 > `n' is a Fixnum, not an Integer:
 >
 > -> (: n : Fixnum)
 > -> (define n 123)
 > -> n
 > - : Integer [generalized from Fixnum]
 > 123
 
 This isn't a bug, it's just that Typed Racket is reporting a more
 general type that's easier to understand. If you use `n`, it still has
 the `Fixnum` type.
 
 The expression (:print-type n) will report `Fixnum` too.
 
 Cheers,
 Asumu
From: Eli Barzilay <eli@barzilay.org>
To: Eric Dobson <eric.n.dobson@gmail.com>, Asumu Takikawa <asumu@ccs.neu.edu>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Sun, 17 Nov 2013 14:15:24 -0500

 30 minutes ago, Asumu Takikawa wrote:
 > On 2013-11-17 13:16:02 -0500, eli@barzilay.org wrote:
 > > *** Description:
 > > I'm not sure why this happens, but I'd expect the below to tell me that
 > > `n' is a Fixnum, not an Integer:
 > >
 > > -> (: n : Fixnum)
 > > -> (define n 123)
 > > -> n
 > > - : Integer [generalized from Fixnum]
 > > 123
 > 
 > This isn't a bug, it's just that Typed Racket is reporting a more
 > general type that's easier to understand.  [...]
 
 20 minutes ago, Eric Dobson wrote:
 > It is telling you that, thats what 'from Fixnum' means. The issue is
 > that the precise type may not be meaningful to users and so we show
 > both.
 
 Both of these points are bogus: given that I declared it as `Fixnum',
 it is most definitely *not* easier for me to understand the
 generalized type, and the precise type is also more meaningful to me.
 
 To put this differently, I associate "generalized" with "TR needs to
 guess some good type, it guessed `BlahBlahBlah' but shows it to you as
 some nice `Blah'" -- but when there's a user declaration, then no such
 guessing happens.
 
 In any case, I used it in a context where I suspected that `abs' is
 broken or limited, and this made it very hard to try things out.  (I
 eventually resorted to looking at its type directly, which is actually
 direct evidence for someone with a little knowledge of TR getting
 confused by the unrequested helpfulness to the point of spending more
 work than needed...)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Sun, 17 Nov 2013 11:30:22 -0800

 On Sun, Nov 17, 2013 at 11:15 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > 30 minutes ago, Asumu Takikawa wrote:
 >> On 2013-11-17 13:16:02 -0500, eli@barzilay.org wrote:
 >> > *** Description:
 >> > I'm not sure why this happens, but I'd expect the below to tell me that
 >> > `n' is a Fixnum, not an Integer:
 >> >
 >> > -> (: n : Fixnum)
 >> > -> (define n 123)
 >> > -> n
 >> > - : Integer [generalized from Fixnum]
 >> > 123
 >>
 >> This isn't a bug, it's just that Typed Racket is reporting a more
 >> general type that's easier to understand.  [...]
 >
 > 20 minutes ago, Eric Dobson wrote:
 >> It is telling you that, thats what 'from Fixnum' means. The issue is
 >> that the precise type may not be meaningful to users and so we show
 >> both.
 >
 > Both of these points are bogus: given that I declared it as `Fixnum',
 > it is most definitely *not* easier for me to understand the
 > generalized type, and the precise type is also more meaningful to me.
 >
 The current type printer treats all expressions as equal. It seems
 like you want to treat some expressions specially. If so what are
 they?
 Identifiers?
 Forms like (ann <expr> <type>)?
 Forms like ((ann <expr> (-> <type>)))?
 
 > To put this differently, I associate "generalized" with "TR needs to
 > guess some good type, it guessed `BlahBlahBlah' but shows it to you as
 > some nice `Blah'" -- but when there's a user declaration, then no such
 > guessing happens.
 Thats not what generalized means. It means that TR determined the
 expression has one type, and thought that the type was too precise and
 so decided to show a generalization as well. Are you suggesting that
 the printing algorithm take more input than just the type? If so what
 inputs? If not is it an issue with what types we currently generalize?
 
 >
 > In any case, I used it in a context where I suspected that `abs' is
 > broken or limited, and this made it very hard to try things out.  (I
 > eventually resorted to looking at its type directly, which is actually
 > direct evidence for someone with a little knowledge of TR getting
 > confused by the unrequested helpfulness to the point of spending more
 > work than needed...)
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Sun, 17 Nov 2013 14:49:15 -0500

 20 minutes ago, Eric Dobson wrote:
 > The current type printer treats all expressions as equal. It seems
 > like you want to treat some expressions specially. If so what are
 > they?
 > Identifiers?
 > Forms like (ann <expr> <type>)?
 > Forms like ((ann <expr> (-> <type>)))?
 
 Well, basically it would be nice (and again, possibly impossible with
 the current design) to avoid any generalization of numbers where the
 code specifies the type somehow.  IOW: if, for example, the type of
 some `foo' was `Fixnum -> Fixnum' then I wouldn't want its results to
 be generalized either...  Ie, I was under the impression that only in
 cases like unanotated numbers or functions with multiple cases (where
 TR does some choice) the generalizations are used.
 
 
 > > To put this differently, I associate "generalized" with "TR needs
 > > to guess some good type, it guessed `BlahBlahBlah' but shows it to
 > > you as some nice `Blah'" -- but when there's a user declaration,
 > > then no such guessing happens.
 > Thats not what generalized means. It means that TR determined the
 > expression has one type, and thought that the type was too precise
 > and so decided to show a generalization as well. Are you suggesting
 > that the printing algorithm take more input than just the type?
 
 Yes, if possible.
 
 > If so what inputs? [...]
 
 "Did this type flow here through some place where there were multiple
 options?"
 
 (And my guess is that if it's done based only on the type, then such a
 change would be very impractical.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Eli Barzilay <eli@barzilay.org>, Asumu Takikawa <asumu@ccs.neu.edu>,
        bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Sun, 17 Nov 2013 14:12:00 -0600

 --089e0111bca454d78204eb650b7b
 Content-Type: text/plain; charset=UTF-8
 
 As someone who has gotten lots and lots of requests over the years that
 seem hard to cope with from the "internal" perspective (this seems to
 happen a lot for UX stuff), let me encourage the TR maintainers to just
 take the gestalt of Eli's request and try to think thru something on your
 own that would accommodate it instead of asking questions along these
 lines.
 
 Usually it takes some serious reflection to find something better than what
 is being done and you are the only ones with the experience and know how to
 be able to do it.
 
 Robby
 
 On Sunday, November 17, 2013, Eric Dobson wrote:
 
 > On Sun, Nov 17, 2013 at 11:15 AM, Eli Barzilay <eli@barzilay.org<javascript:;>>
 > wrote:
 > > 30 minutes ago, Asumu Takikawa wrote:
 > >> On 2013-11-17 13:16:02 -0500, eli@barzilay.org <javascript:;> wrote:
 > >> > *** Description:
 > >> > I'm not sure why this happens, but I'd expect the below to tell me
 > that
 > >> > `n' is a Fixnum, not an Integer:
 > >> >
 > >> > -> (: n : Fixnum)
 > >> > -> (define n 123)
 > >> > -> n
 > >> > - : Integer [generalized from Fixnum]
 > >> > 123
 > >>
 > >> This isn't a bug, it's just that Typed Racket is reporting a more
 > >> general type that's easier to understand.  [...]
 > >
 > > 20 minutes ago, Eric Dobson wrote:
 > >> It is telling you that, thats what 'from Fixnum' means. The issue is
 > >> that the precise type may not be meaningful to users and so we show
 > >> both.
 > >
 > > Both of these points are bogus: given that I declared it as `Fixnum',
 > > it is most definitely *not* easier for me to understand the
 > > generalized type, and the precise type is also more meaningful to me.
 > >
 > The current type printer treats all expressions as equal. It seems
 > like you want to treat some expressions specially. If so what are
 > they?
 > Identifiers?
 > Forms like (ann <expr> <type>)?
 > Forms like ((ann <expr> (-> <type>)))?
 >
 > > To put this differently, I associate "generalized" with "TR needs to
 > > guess some good type, it guessed `BlahBlahBlah' but shows it to you as
 > > some nice `Blah'" -- but when there's a user declaration, then no such
 > > guessing happens.
 > Thats not what generalized means. It means that TR determined the
 > expression has one type, and thought that the type was too precise and
 > so decided to show a generalization as well. Are you suggesting that
 > the printing algorithm take more input than just the type? If so what
 > inputs? If not is it an issue with what types we currently generalize?
 >
 > >
 > > In any case, I used it in a context where I suspected that `abs' is
 > > broken or limited, and this made it very hard to try things out.  (I
 > > eventually resorted to looking at its type directly, which is actually
 > > direct evidence for someone with a little knowledge of TR getting
 > > confused by the unrequested helpfulness to the point of spending more
 > > work than needed...)
 > >
 > > --
 > >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 > >                     http://barzilay.org/                   Maze is Life!
 >
 
 --089e0111bca454d78204eb650b7b
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 As someone who has gotten lots and lots of requests over the years that see=
 m hard to cope with from the &quot;internal&quot; perspective (this seems t=
 o happen a lot for UX stuff), let me encourage the TR maintainers to just t=
 ake the gestalt of Eli&#39;s request=C2=A0and try to think thru something o=
 n your own that would accommodate it instead of asking questions along thes=
 e lines.=C2=A0<div>
 <br></div><div>Usually it takes some serious reflection to find something b=
 etter than what is being done and you are the only ones with the experience=
  and know how to be able to do it.=C2=A0</div><div><br></div><div>Robby<br>=
 <br>
 On Sunday, November 17, 2013, Eric Dobson  wrote:<br><blockquote class=3D"g=
 mail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
 eft:1ex">On Sun, Nov 17, 2013 at 11:15 AM, Eli Barzilay &lt;<a href=3D"java=
 script:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;eli@barzilay.org&#39;)"=
 >eli@barzilay.org</a>&gt; wrote:<br>
 
 &gt; 30 minutes ago, Asumu Takikawa wrote:<br>
 &gt;&gt; On 2013-11-17 13:16:02 -0500, <a href=3D"javascript:;" onclick=3D"=
 _e(event, &#39;cvml&#39;, &#39;eli@barzilay.org&#39;)">eli@barzilay.org</a>=
  wrote:<br>
 &gt;&gt; &gt; *** Description:<br>
 &gt;&gt; &gt; I&#39;m not sure why this happens, but I&#39;d expect the bel=
 ow to tell me that<br>
 &gt;&gt; &gt; `n&#39; is a Fixnum, not an Integer:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; -&gt; (: n : Fixnum)<br>
 &gt;&gt; &gt; -&gt; (define n 123)<br>
 &gt;&gt; &gt; -&gt; n<br>
 &gt;&gt; &gt; - : Integer [generalized from Fixnum]<br>
 &gt;&gt; &gt; 123<br>
 &gt;&gt;<br>
 &gt;&gt; This isn&#39;t a bug, it&#39;s just that Typed Racket is reporting=
  a more<br>
 &gt;&gt; general type that&#39;s easier to understand. =C2=A0[...]<br>
 &gt;<br>
 &gt; 20 minutes ago, Eric Dobson wrote:<br>
 &gt;&gt; It is telling you that, thats what &#39;from Fixnum&#39; means. Th=
 e issue is<br>
 &gt;&gt; that the precise type may not be meaningful to users and so we sho=
 w<br>
 &gt;&gt; both.<br>
 &gt;<br>
 &gt; Both of these points are bogus: given that I declared it as `Fixnum&#3=
 9;,<br>
 &gt; it is most definitely *not* easier for me to understand the<br>
 &gt; generalized type, and the precise type is also more meaningful to me.<=
 br>
 &gt;<br>
 The current type printer treats all expressions as equal. It seems<br>
 like you want to treat some expressions specially. If so what are<br>
 they?<br>
 Identifiers?<br>
 Forms like (ann &lt;expr&gt; &lt;type&gt;)?<br>
 Forms like ((ann &lt;expr&gt; (-&gt; &lt;type&gt;)))?<br>
 <br>
 &gt; To put this differently, I associate &quot;generalized&quot; with &quo=
 t;TR needs to<br>
 &gt; guess some good type, it guessed `BlahBlahBlah&#39; but shows it to yo=
 u as<br>
 &gt; some nice `Blah&#39;&quot; -- but when there&#39;s a user declaration,=
  then no such<br>
 &gt; guessing happens.<br>
 Thats not what generalized means. It means that TR determined the<br>
 expression has one type, and thought that the type was too precise and<br>
 so decided to show a generalization as well. Are you suggesting that<br>
 the printing algorithm take more input than just the type? If so what<br>
 inputs? If not is it an issue with what types we currently generalize?<br>
 <br>
 &gt;<br>
 &gt; In any case, I used it in a context where I suspected that `abs&#39; i=
 s<br>
 &gt; broken or limited, and this made it very hard to try things out. =C2=
 =A0(I<br>
 &gt; eventually resorted to looking at its type directly, which is actually=
 <br>
 &gt; direct evidence for someone with a little knowledge of TR getting<br>
 &gt; confused by the unrequested helpfulness to the point of spending more<=
 br>
 &gt; work than needed...)<br>
 &gt;<br>
 &gt; --<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((lambda (x) (x x)) (lambda (x) (x =
 x))) =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 <a href=3D"http://barzilay.org/" target=3D"_blank">http://barzilay.org/</a>=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze is Lif=
 e!<br>
 </blockquote></div>
 
 --089e0111bca454d78204eb650b7b--
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 12:29:31 -0500

 I think part of the problem is that "generalized" is used in two
 different ways.
 
 First, there's actual generalization of types, used with invariant type
 constructors. That actually changes the types. Second, there's
 "generalization" of type output, which doesn't change the types, only
 the printed representation (which is what we're discussing here).
 
 Since the two are different, we should probably use different terms. In
 the latter case, "generalized" really means: "think of it as" and ignore
 the details.
 
 Eli: Would the following be less confusing, in your opinion?
 
     -> (: n : Fixnum)
     -> (define n 123)
     -> n
     - : Fixnum [think of it as Integer]
     123
 
 or maybe
 
     -> (: n : Fixnum)
     -> (define n 123)
     -> n
     - : Integer [more precisely, Fixnum]
     123
 
 
 Vincent
 
 
 At Sun, 17 Nov 2013 10:46:28 -0800,
 Eric Dobson wrote:
 > 
 > It is telling you that, thats what 'from Fixnum' means. The issue is
 > that the precise type may not be meaningful to users and so we show
 > both.
 > 
 > Code for reference:
 > https://github.com/plt/racket/blob/master/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/core.rkt#L132
 > 
 > 
 > On Sun, Nov 17, 2013 at 10:16 AM,  <eli@barzilay.org> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=14159
 > >
 > > Reported by Eli Barzilay for release: HEAD
 > >
 > > *** Description:
 > > I'm not sure why this happens, but I'd expect the below to tell me that
 > > `n' is a Fixnum, not an Integer:
 > >
 > > -> (: n : Fixnum)
 > > -> (define n 123)
 > > -> n
 > > - : Integer [generalized from Fixnum]
 > > 123
 > >
 > > *** How to repeat:
 > >
 > >
 > > *** Environment:
 > > Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36
 > >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, Eli Barzilay <eli@barzilay.org>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 11:44:05 -0600

 --001a11c3060020737004eb7718ac
 Content-Type: text/plain; charset=UTF-8
 
 I like the look of that second one a lot!
 
 Robby
 
 On Monday, November 18, 2013, Vincent St-Amour wrote:
 
 > I think part of the problem is that "generalized" is used in two
 > different ways.
 >
 > First, there's actual generalization of types, used with invariant type
 > constructors. That actually changes the types. Second, there's
 > "generalization" of type output, which doesn't change the types, only
 > the printed representation (which is what we're discussing here).
 >
 > Since the two are different, we should probably use different terms. In
 > the latter case, "generalized" really means: "think of it as" and ignore
 > the details.
 >
 > Eli: Would the following be less confusing, in your opinion?
 >
 >     -> (: n : Fixnum)
 >     -> (define n 123)
 >     -> n
 >     - : Fixnum [think of it as Integer]
 >     123
 >
 > or maybe
 >
 >     -> (: n : Fixnum)
 >     -> (define n 123)
 >     -> n
 >     - : Integer [more precisely, Fixnum]
 >     123
 >
 >
 > Vincent
 >
 >
 > At Sun, 17 Nov 2013 10:46:28 -0800,
 > Eric Dobson wrote:
 > >
 > > It is telling you that, thats what 'from Fixnum' means. The issue is
 > > that the precise type may not be meaningful to users and so we show
 > > both.
 > >
 > > Code for reference:
 > >
 > https://github.com/plt/racket/blob/master/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/core.rkt#L132
 > >
 > >
 > > On Sun, Nov 17, 2013 at 10:16 AM,  <eli@barzilay.org <javascript:;>>
 > wrote:
 > > > A new problem report is waiting at
 > > >   http://bugs.racket-lang.org/query/?cmd=view&pr=14159
 > > >
 > > > Reported by Eli Barzilay for release: HEAD
 > > >
 > > > *** Description:
 > > > I'm not sure why this happens, but I'd expect the below to tell me that
 > > > `n' is a Fixnum, not an Integer:
 > > >
 > > > -> (: n : Fixnum)
 > > > -> (define n 123)
 > > > -> n
 > > > - : Integer [generalized from Fixnum]
 > > > 123
 > > >
 > > > *** How to repeat:
 > > >
 > > >
 > > > *** Environment:
 > > > Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML,
 > like Gecko) Chrome/28.0.1500.95 Safari/537.36
 > > >
 >
 
 --001a11c3060020737004eb7718ac
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I like the look of that second one a lot!<span></span><div><br></div><div>R=
 obby<br><br>On Monday, November 18, 2013, Vincent St-Amour  wrote:<br><bloc=
 kquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #cc=
 c solid;padding-left:1ex">
 I think part of the problem is that &quot;generalized&quot; is used in two<=
 br>
 different ways.<br>
 <br>
 First, there&#39;s actual generalization of types, used with invariant type=
 <br>
 constructors. That actually changes the types. Second, there&#39;s<br>
 &quot;generalization&quot; of type output, which doesn&#39;t change the typ=
 es, only<br>
 the printed representation (which is what we&#39;re discussing here).<br>
 <br>
 Since the two are different, we should probably use different terms. In<br>
 the latter case, &quot;generalized&quot; really means: &quot;think of it as=
 &quot; and ignore<br>
 the details.<br>
 <br>
 Eli: Would the following be less confusing, in your opinion?<br>
 <br>
 =C2=A0 =C2=A0 -&gt; (: n : Fixnum)<br>
 =C2=A0 =C2=A0 -&gt; (define n 123)<br>
 =C2=A0 =C2=A0 -&gt; n<br>
 =C2=A0 =C2=A0 - : Fixnum [think of it as Integer]<br>
 =C2=A0 =C2=A0 123<br>
 <br>
 or maybe<br>
 <br>
 =C2=A0 =C2=A0 -&gt; (: n : Fixnum)<br>
 =C2=A0 =C2=A0 -&gt; (define n 123)<br>
 =C2=A0 =C2=A0 -&gt; n<br>
 =C2=A0 =C2=A0 - : Integer [more precisely, Fixnum]<br>
 =C2=A0 =C2=A0 123<br>
 <br>
 <br>
 Vincent<br>
 <br>
 <br>
 At Sun, 17 Nov 2013 10:46:28 -0800,<br>
 Eric Dobson wrote:<br>
 &gt;<br>
 &gt; It is telling you that, thats what &#39;from Fixnum&#39; means. The is=
 sue is<br>
 &gt; that the precise type may not be meaningful to users and so we show<br=
 >
 &gt; both.<br>
 &gt;<br>
 &gt; Code for reference:<br>
 &gt; <a href=3D"https://github.com/plt/racket/blob/master/pkgs/typed-racket=
 -pkgs/typed-racket-lib/typed-racket/core.rkt#L132" target=3D"_blank">https:=
 //github.com/plt/racket/blob/master/pkgs/typed-racket-pkgs/typed-racket-lib=
 /typed-racket/core.rkt#L132</a><br>
 
 &gt;<br>
 &gt;<br>
 &gt; On Sun, Nov 17, 2013 at 10:16 AM, =C2=A0&lt;<a href=3D"javascript:;" o=
 nclick=3D"_e(event, &#39;cvml&#39;, &#39;eli@barzilay.org&#39;)">eli@barzil=
 ay.org</a>&gt; wrote:<br>
 &gt; &gt; A new problem report is waiting at<br>
 &gt; &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D14159" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dv=
 iew&amp;pr=3D14159</a><br>
 &gt; &gt;<br>
 &gt; &gt; Reported by Eli Barzilay for release: HEAD<br>
 &gt; &gt;<br>
 &gt; &gt; *** Description:<br>
 &gt; &gt; I&#39;m not sure why this happens, but I&#39;d expect the below t=
 o tell me that<br>
 &gt; &gt; `n&#39; is a Fixnum, not an Integer:<br>
 &gt; &gt;<br>
 &gt; &gt; -&gt; (: n : Fixnum)<br>
 &gt; &gt; -&gt; (define n 123)<br>
 &gt; &gt; -&gt; n<br>
 &gt; &gt; - : Integer [generalized from Fixnum]<br>
 &gt; &gt; 123<br>
 &gt; &gt;<br>
 &gt; &gt; *** How to repeat:<br>
 &gt; &gt;<br>
 &gt; &gt;<br>
 &gt; &gt; *** Environment:<br>
 &gt; &gt; Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (K=
 HTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36<br>
 &gt; &gt;<br>
 </blockquote></div>
 
 --001a11c3060020737004eb7718ac--
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, Eli Barzilay <eli@barzilay.org>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 13:29:43 -0500

 On Mon, Nov 18, 2013 at 12:29 PM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 >
 > First, there's actual generalization of types, used with invariant type
 > constructors. That actually changes the types.
 
 This concept isn't ever exposed to users under that name, right?
 
 Sam
From: Eli Barzilay <eli@barzilay.org>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 13:45:49 -0500

 An hour ago, Vincent St-Amour wrote:
 > Eli: Would the following be less confusing, in your opinion?
 > 
 >     -> (: n : Fixnum)
 >     -> (define n 123)
 >     -> n
 >     - : Fixnum [think of it as Integer]
 >     123
 
 Thinking about a student POV, this one is bad since it uses the
 unfamiliar term first.
 
 
 > or maybe
 > 
 >     -> (: n : Fixnum)
 >     -> (define n 123)
 >     -> n
 >     - : Integer [more precisely, Fixnum]
 >     123
 
 This one is better.  I'm not a completely sure about the phrasing
 though, but I think that it's a good idea to get away from
 "generalize" and into somthing like this, where it's clear that it's a
 display thing.
 
 As for the first form of generalization -- you're talking about things
 like inferred box types, right?  Related to that, I thought that one
 way to clarify what I talked about earlier is to say that I want an
 explicitly-typed thing to show as the explicit type only in the same
 way that this:
 
     (box (ann 1 Fixnum))
 
 produces a Fixnum box ... but then I saw that it doesn't work...  (I
 was pretty sure that something like this existed at some point.)  In
 any case, if there's a way to do what I originally wanted, then it
 would be nice to have it done the same in this box example, and not
 change the explicitly specified type.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, Eli Barzilay <eli@barzilay.org>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 14:25:53 -0500

 At Mon, 18 Nov 2013 13:29:43 -0500,
 Sam Tobin-Hochstadt wrote:
 > 
 > On Mon, Nov 18, 2013 at 12:29 PM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 > >
 > > First, there's actual generalization of types, used with invariant type
 > > constructors. That actually changes the types.
 > 
 > This concept isn't ever exposed to users under that name, right?
 
 No, but Eli may have been aware of the concept, which may have
 contributed to the confusion.
 
 But yeah, the bigger problem is probably that the exact relationship
 between `Integer' and `Fixnum' in that message is not clear.
 
 Vincent
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 14:35:03 -0500

 At Mon, 18 Nov 2013 13:45:49 -0500,
 Eli Barzilay wrote:
 > > or maybe
 > > 
 > >     -> (: n : Fixnum)
 > >     -> (define n 123)
 > >     -> n
 > >     - : Integer [more precisely, Fixnum]
 > >     123
 > 
 > This one is better.  I'm not a completely sure about the phrasing
 > though, but I think that it's a good idea to get away from
 > "generalize" and into somthing like this, where it's clear that it's a
 > display thing.
 
 I'll change the message to that. I'm open to suggestions for the exact
 phrasing (I'm not 100% convinced either, but that's the best I could
 think of).
 
 > As for the first form of generalization -- you're talking about things
 > like inferred box types, right?
 
 Yes.
 
 > Related to that, I thought that one
 > way to clarify what I talked about earlier is to say that I want an
 > explicitly-typed thing to show as the explicit type only in the same
 > way that this:
 > 
 >     (box (ann 1 Fixnum))
 > 
 > produces a Fixnum box ... but then I saw that it doesn't work...  (I
 > was pretty sure that something like this existed at some point.)
 
 You need to annotate the box itself to get a Fixnum box. I'll add
 documentation about generalization, which will hopefully make this
 clearer.
 
 Vincent
Responsible changed from "nobody" to "stamourv" by stamourv@racket-lang.org at Mon, 18 Nov 2013 15:10:37 -0500
Reason>>> A commit by stamourv@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/def31658f1
State changed from "open" to "closed" by stamourv@racket-lang.org at Mon, 18 Nov 2013 15:10:37 -0500
Reason>>> A commit by stamourv@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/def31658f1
  | Improve message when simplifying type display at the REPL.
  | 
  | Closes PR14159.

From: Eli Barzilay <eli@barzilay.org>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 15:33:02 -0500

 50 minutes ago, Vincent St-Amour wrote:
 > At Mon, 18 Nov 2013 13:45:49 -0500, Eli Barzilay wrote:
 > > Related to that, I thought that one way to clarify what I talked
 > > about earlier is to say that I want an explicitly-typed thing to
 > > show as the explicit type only in the same way that this:
 > > 
 > >     (box (ann 1 Fixnum))
 > > 
 > > produces a Fixnum box ... but then I saw that it doesn't work...
 > > (I was pretty sure that something like this existed at some
 > > point.)
 > 
 > You need to annotate the box itself to get a Fixnum box. I'll add
 > documentation about generalization, which will hopefully make this
 > clearer.
 
 Yes, annotating the box always worked (and I painfully remember going
 through the phase when it was needed).  Still, having the above result
 in an Integer box is surprising in a similar way to what I talked
 about earlier: "I wrote Fixnum, so how did I get an Integer?".  Maybe
 the missing thing is some bit to put on types that were guessed, so
 you get 123 to type as a "weak Positive-Byte" which can be converted
 to something more sensible if needed, but (ann 123 Fixnum) has a
 strong type that cannot do that.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 15:59:46 -0500

 At Mon, 18 Nov 2013 15:33:02 -0500,
 Eli Barzilay wrote:
 > 
 > 50 minutes ago, Vincent St-Amour wrote:
 > > At Mon, 18 Nov 2013 13:45:49 -0500, Eli Barzilay wrote:
 > > > Related to that, I thought that one way to clarify what I talked
 > > > about earlier is to say that I want an explicitly-typed thing to
 > > > show as the explicit type only in the same way that this:
 > > > 
 > > >     (box (ann 1 Fixnum))
 > > > 
 > > > produces a Fixnum box ... but then I saw that it doesn't work...
 > > > (I was pretty sure that something like this existed at some
 > > > point.)
 > > 
 > > You need to annotate the box itself to get a Fixnum box. I'll add
 > > documentation about generalization, which will hopefully make this
 > > clearer.
 > 
 > Yes, annotating the box always worked (and I painfully remember going
 > through the phase when it was needed).  Still, having the above result
 > in an Integer box is surprising in a similar way to what I talked
 > about earlier: "I wrote Fixnum, so how did I get an Integer?".  Maybe
 > the missing thing is some bit to put on types that were guessed, so
 > you get 123 to type as a "weak Positive-Byte" which can be converted
 > to something more sensible if needed, but (ann 123 Fixnum) has a
 > strong type that cannot do that.
 
 I added documentation to explain this behavior. Does it help?
 
 Another thing that may help would be to, at the REPL, print a note
 whenever generalization happens. Maybe something like:
 
     > (define b (box 0))
     > b
     - : (Boxof Integer) [generalized Zero to Integer]
     '#&0
 
 Do you think that would help?
 
 Vincent
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14159: TR ignores type declaration?
Date: Mon, 18 Nov 2013 16:57:50 -0500

 On Mon, Nov 18, 2013 at 3:59 PM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 >
 > I added documentation to explain this behavior. Does it help?
 >
 > Another thing that may help would be to, at the REPL, print a note
 > whenever generalization happens. Maybe something like:
 >
 >     > (define b (box 0))
 >     > b
 >     - : (Boxof Integer) [generalized Zero to Integer]
 >     '#&0
 >
 > Do you think that would help?
 
 I think this would lead to a lot of inscrutable messages.  For example:
 
     (ann (for/list ([i (in-range 1 100)]) i) (Listof Number))
 
 calls `generalize` twice, including once where it actually does
 something (One -> Integer).
 
 Sam
