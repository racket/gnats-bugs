From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar 16 16:46:04 2009
Received: from mail-qy0-f108.google.com (mail-qy0-f108.google.com [209.85.221.108])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n2GKjtKU006533
	for <bugs@bugs.plt-scheme.org>; Mon, 16 Mar 2009 16:45:55 -0400
Message-Id: <200903162045.n2GKjPof006519@champlain.ccs.neu.edu>
Date: Mon, 16 Mar 2009 16:45:25 -0400
From: mark.engelberg@gmail.com
To: bugs@plt-scheme.org
Subject: set! sometimes doesn't work in interactions window

>Number:         10133
>Category:       all
>Synopsis:       set! sometimes doesn't work in interactions window
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Mar 16 16:48:01 -0400 2009
>Closed-Date:    Sat Dec 03 11:53:41 -0500 2011
>Last-Modified:  Mon Feb 18 23:44:35 -0500 2013
>Originator:     Mark Engelberg
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.4
>Environment:
windows "Windows NT 6.0 (Build 6001) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 122446680

Collections:
(("C:\\Users\\Mark\\AppData\\Roaming\\PLT Scheme\\4.1.4\\collects" "installed-teachpacks") ("C:\\Program Files (x86)\\PLT\\collects" "2htdp" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
Not sure whether this is intentional, but it seemed like a bug to me.

The following program works:
(define x 2)
(set! x 3)

However, if your program just consists of:
(define x 2)
and then you type:
(set! x 3) in the interactions window, you get an error (saying x is a constant).

On the other hand, if your program consists of:
(define x 2)
(set! x 3)
and then you type
(set! x 4) in the interactions window, it does work.

I would expect set! to always work in the interactions window, regardless of whether the variable has been mutated in the definitions window.
>How-To-Repeat:
Module language
#lang scheme
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: mark.engelberg@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10133: set! sometimes doesn't work in interactions window
Date: Mon, 16 Mar 2009 16:59:09 -0400

 On Mar 16, mark.engelberg@gmail.com wrote:
 > Not sure whether this is intentional, but it seemed like a bug to me.
 > 
 > The following program works:
 > (define x 2)
 > (set! x 3)
 > 
 > However, if your program just consists of:
 > (define x 2)
 > and then you type:
 > (set! x 3) in the interactions window, you get an error (saying x is a constant).
 
 It is intentional.  When a module is compiled, MzScheme detects
 mutable variables and treats them as implicit mutable boxed.  Other
 bindings can be (and such short bindings often are) inlined.  There is
 a parameter called `compile-enforce-module-constants' that controls
 this, which can be used to effectively disable this inlining, but
 there was an intentional decision to not do that in the module
 language.
 
 
 > On the other hand, if your program consists of:
 > (define x 2)
 > (set! x 3)
 > and then you type
 > (set! x 4) in the interactions window, it does work.
 
 [And this is because the identifier is already mutable.]
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: mark.engelberg@gmail.com, bugs@plt-scheme.org, nobody@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10133: set! sometimes doesn't work in interactions window
Date: Mon, 16 Mar 2009 15:08:33 -0600

 See also
 
  http://docs.plt-scheme.org/guide/module-set.html
 
 
 We should work on getting documentation links into error messages.
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: mark.engelberg@gmail.com, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10133: set! sometimes doesn't work in interactions window
Date: Mon, 16 Mar 2009 17:14:01 -0400

 On Mar 16, Matthew Flatt wrote:
 > See also
 > 
 >  http://docs.plt-scheme.org/guide/module-set.html
 > 
 > We should work on getting documentation links into error messages.
 
 +1
 
 I imagined some additional-info field in exceptions, which DrScheme
 can use to render error messages as links, and MzScheme can have some
 "verbose" mode that will show these error messages.
 
 The question is what should the field hold -- since you might want to
 have some text and possibly other exceptions there too.  For example,
 a test suite error can just say "3/5 tests failures", and the extra
 info can have a listing of all the sub-error messages.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

State changed from "open" to "closed" by samth at Sat, 03 Dec 2011 11:53:41 -0500
Reason>>> intentional behavior


Responsible changed from "nobody" to "samth" by eli at Mon, 18 Feb 2013 23:44:35 -0500
Reason>>> samth closed

