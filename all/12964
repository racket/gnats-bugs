From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Aug  2 19:31:06 2012
Received: from mail-gh0-f172.google.com (mail-gh0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q72NV39r002902
	for <bugs@bugs.plt-scheme.org>; Thu, 2 Aug 2012 19:31:03 -0400
Message-Id: <201208022330.q72NUxI3002889@champlain.ccs.neu.edu>
Date: Thu, 2 Aug 2012 19:30:59 -0400
From: brucehs@gmail.com
To: bugs@racket-lang.org
Subject: string->list works inconsistently within definitions

>Number:         12964
>Category:       all
>Synopsis:       string->list works inconsistently within definitions
>Class:          sw-bug
>Responsible:    matthias
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Aug 02 19:32:01 -0400 2012
>Closed-Date:    Thu Aug 02 20:55:41 -0400 2012
>Last-Modified:  Thu Aug 02 20:56:01 -0400 2012
>Originator:     Bruce Steinberg
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
>Description:
I'm a pretty inexperienced programmer, so please bear with me.

I've been trying to do some string processing and replacing a variable within a string. To do so, I've been using string->list and list->string conversions as I'm more comfortable with recursion on lists (been teaching myself via The Little Schemer). I've seem to have run into a bug in which string->list starts throwing up an exception once it is used in a definition, almost as if it has pre-converted the string. Code from the Interactions Window below:

(define grip-command "$ Chan :digits 05 12 Thru 10 At 50")

(define :before-list
    (lambda (list)
      (cond
        ((null? list) '())
        ((equal? #\: (car list)) '())
        (else (cons (car list)
                    (:before (cdr list)))))))
> (:before (string->list "$ Chan :digits 05 12 Thru 10 At 50"))
'(#\$ #\space #\C #\h #\a #\n #\space)
> (:before-list (string->list "$ Chan :digits 05 12 Thru 10 At 50"))
'(#\$ #\space #\C #\h #\a #\n #\space)
> (:before-list (string->list grip-command))
'(#\$ #\space #\C #\h #\a #\n #\space)
> (define :before
    (lambda (some-string)
      (:before-list (string->list some-string))))
> (:before grip-command)
. . string->list: expects argument of type <string>; given '(#\space #\C #\h #\a #\n #\space #\: #\d #\i #\g #\i #\t #\s #\space #\0 #\5 #\space #\1 #\2 #\space #\T #\h #\r #\u #\space #\1 #\0 #\space #\A #\t #\space #\5 #\0)
> (:before-list (string->list grip-command))
. . string->list: expects argument of type <string>; given '(#\space #\C #\h #\a #\n #\space #\: #\d #\i #\g #\i #\t #\s #\space #\0 #\5 #\space #\1 #\2 #\space #\T #\h #\r #\u #\space #\1 #\0 #\space #\A #\t #\space #\5 #\0)
> (:before-list grip-command)
. . car: expects argument of type <pair>; given "$ Chan :digits 05 12 Thru 10 At 50"
>How-To-Repeat:
Code from Interactions Window repasted here if that's helpful:


(define grip-command "$ Chan :digits 05 12 Thru 10 At 50")

(define :before-list
    (lambda (list)
      (cond
        ((null? list) '())
        ((equal? #\: (car list)) '())
        (else (cons (car list)
                    (:before (cdr list)))))))
> (:before (string->list "$ Chan :digits 05 12 Thru 10 At 50"))
'(#\$ #\space #\C #\h #\a #\n #\space)
> (:before-list (string->list "$ Chan :digits 05 12 Thru 10 At 50"))
'(#\$ #\space #\C #\h #\a #\n #\space)
> (:before-list (string->list grip-command))
'(#\$ #\space #\C #\h #\a #\n #\space)
> (define :before
    (lambda (some-string)
      (:before-list (string->list some-string))))
> (:before grip-command)
. . string->list: expects argument of type <string>; given '(#\space #\C #\h #\a #\n #\space #\: #\d #\i #\g #\i #\t #\s #\space #\0 #\5 #\space #\1 #\2 #\space #\T #\h #\r #\u #\space #\1 #\0 #\space #\A #\t #\space #\5 #\0)
> (:before-list (string->list grip-command))
. . string->list: expects argument of type <string>; given '(#\space #\C #\h #\a #\n #\space #\: #\d #\i #\g #\i #\t #\s #\space #\0 #\5 #\space #\1 #\2 #\space #\T #\h #\r #\u #\space #\1 #\0 #\space #\A #\t #\space #\5 #\0)
> (:before-list grip-command)
. . car: expects argument of type <pair>; given "$ Chan :digits 05 12 Thru 10 At 50"
>Fix:
>Audit-Trail:
From: Bruce Steinberg <brucehs@gmail.com>
To: bugs@racket-lang.org, bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/12964: string->list works inconsistently
 within definitions
Date: Thu, 2 Aug 2012 20:30:45 -0400

 --501b1bb5_520eedd1_df3f
 Content-Type: text/plain; charset="utf-8"
 Content-Transfer-Encoding: 7bit
 Content-Disposition: inline
 
 I think I discovered the problem within my own bad programming. Sorry for submitting this before I figured that out. 
 
 -Bruce 
 
 -----------------------
 Bruce Steinberg
 Lighting Design
 www.BruceSteinbergLD.com (http://www.BruceSteinbergDesign.com)
 
 
 
 On Thursday, August 2, 2012 at 7:32 PM, bugs@racket-lang.org wrote:
 
 > Thank you very much for your problem report.
 > It has the internal identification `all/12964'.
 > You can check on the status of your problem report at
 > http://bugs.racket-lang.org/query/?cmd=view&pr=12964
 > 
 > If you wish to provide further information regarding this problem
 > you can do so as a reply to this message. (But please make sure
 > that your mailer replies to both "bugs" and "bug-notification".)
 > 
 > 
 
 
 
 --501b1bb5_520eedd1_df3f
 Content-Type: text/html; charset="utf-8"
 Content-Transfer-Encoding: quoted-printable
 Content-Disposition: inline
 
 
                 <div>
                     I think I discovered the problem within my own bad pr=
 ogramming. Sorry for submitting this before I figured that out.
                 </div><div><br></div><div>-Bruce</div>
                 <div><div><br></div><div>-----------------------</div><di=
 v>Bruce Steinberg</div><div>Lighting Design<div><u><a href=3D=22http://ww=
 w.BruceSteinbergDesign.com=22>www.BruceSteinbergLD.com</a></u></div></div=
 ><div><br></div></div>
                 =20
                 <p style=3D=22color: =23A0A0A8;=22>On Thursday, August 2,=
  2012 at 7:32 PM, bugs=40racket-lang.org wrote:</p>
                 <blockquote type=3D=22cite=22 style=3D=22border-left-styl=
 e:solid;border-width:1px;margin-left:0px;padding-left:10px;=22>
                     <span><div><div><div>Thank you very much for your pro=
 blem report.</div><div>It has the internal identification =60all/12964'.<=
 /div><div>You can check on the status of your problem report at</div><div=
 >  <a href=3D=22http://bugs.racket-lang.org/query/=3Fcmd=3Dview&amp;pr=3D=
 12964=22>http://bugs.racket-lang.org/query/=3Fcmd=3Dview&amp;pr=3D12964</=
 a></div><div><br></div><div>If you wish to provide further information re=
 garding this problem</div><div>you can do so as a reply to this message. =
  (But please make sure</div><div>that your mailer replies to both =22bugs=
 =22 and =22bug-notification=22.)</div></div></div></span>
                 =20
                 =20
                 =20
                 =20
                 </blockquote>
                 =20
                 <div>
                     <br>
                 </div>
             
 --501b1bb5_520eedd1_df3f--
 

Responsible changed from "nobody" to "matthias" by matthias at Thu, 02 Aug 2012 20:55:41 -0400
Reason>>> .

State changed from "open" to "closed" by matthias at Thu, 02 Aug 2012 20:55:41 -0400
Reason>>> Submitter recognized bug in program. 

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: brucehs@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12964: string->list works inconsistently within definitions
Date: Thu, 2 Aug 2012 20:54:25 -0400

 --Apple-Mail=_D71AB0A0-E8FB-4BE5-9615-F8F1B5F76A2C
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 Did you mean something like this:=20
 
 > (define grip-command "$ Chan :digits 05 12 Thru 10 At 50")
 >=20
 > (define :before-list
 >    (lambda (list)
 >      (cond
 >        ((null? list) '())
 >        ((equal? #\: (car list)) '())
 >        (else (cons (car list) (:before-list (cdr list))))))) ;; <<-- =
 recursive call?
 >=20
 > (define :before
 >    (lambda (some-string)
 >      (list->string (:before-list (string->list some-string)))))
 >=20
 > (:before grip-command)
 
 
 Also consider using regular expressions or string-split:=20
 
 > > (string-split grip-command ":")
 > '("$ Chan " "digits 05 12 Thru 10 At 50")
 
 Note that the list contains two strings.=20
 
 
 
 
 
 On Aug 2, 2012, at 7:32 PM, brucehs@gmail.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D12964
 >=20
 > Reported by Bruce Steinberg for release: 5.2.1
 >=20
 > *** Description:
 > I'm a pretty inexperienced programmer, so please bear with me.
 >=20
 > I've been trying to do some string processing and replacing a variable =
 within a string. To do so, I've been using string->list and list->string =
 conversions as I'm more comfortable with recursion on lists (been =
 teaching myself via The Little Schemer). I've seem to have run into a =
 bug in which string->list starts throwing up an exception once it is =
 used in a definition, almost as if it has pre-converted the string. Code =
 from the Interactions Window below:
 >=20
 > (define grip-command "$ Chan :digits 05 12 Thru 10 At 50")
 >=20
 > (define :before-list
 >    (lambda (list)
 >      (cond
 >        ((null? list) '())
 >        ((equal? #\: (car list)) '())
 >        (else (cons (car list)
 >                    (:before (cdr list)))))))
 >> (:before (string->list "$ Chan :digits 05 12 Thru 10 At 50"))
 > '(#\$ #\space #\C #\h #\a #\n #\space)
 >> (:before-list (string->list "$ Chan :digits 05 12 Thru 10 At 50"))
 > '(#\$ #\space #\C #\h #\a #\n #\space)
 >> (:before-list (string->list grip-command))
 > '(#\$ #\space #\C #\h #\a #\n #\space)
 >> (define :before
 >    (lambda (some-string)
 >      (:before-list (string->list some-string))))
 >> (:before grip-command)
 > . . string->list: expects argument of type <string>; given '(#\space =
 #\C #\h #\a #\n #\space #\: #\d #\i #\g #\i #\t #\s #\space #\0 #\5 =
 #\space #\1 #\2 #\space #\T #\h #\r #\u #\space #\1 #\0 #\space #\A #\t =
 #\space #\5 #\0)
 >> (:before-list (string->list grip-command))
 > . . string->list: expects argument of type <string>; given '(#\space =
 #\C #\h #\a #\n #\space #\: #\d #\i #\g #\i #\t #\s #\space #\0 #\5 =
 #\space #\1 #\2 #\space #\T #\h #\r #\u #\space #\1 #\0 #\space #\A #\t =
 #\space #\5 #\0)
 >> (:before-list grip-command)
 > . . car: expects argument of type <pair>; given "$ Chan :digits 05 12 =
 Thru 10 At 50"
 >=20
 > *** How to repeat:
 > Code from Interactions Window repasted here if that's helpful:
 >=20
 >=20
 > (define grip-command "$ Chan :digits 05 12 Thru 10 At 50")
 >=20
 > (define :before-list
 >    (lambda (list)
 >      (cond
 >        ((null? list) '())
 >        ((equal? #\: (car list)) '())
 >        (else (cons (car list)
 >                    (:before (cdr list)))))))
 >> (:before (string->list "$ Chan :digits 05 12 Thru 10 At 50"))
 > '(#\$ #\space #\C #\h #\a #\n #\space)
 >> (:before-list (string->list "$ Chan :digits 05 12 Thru 10 At 50"))
 > '(#\$ #\space #\C #\h #\a #\n #\space)
 >> (:before-list (string->list grip-command))
 > '(#\$ #\space #\C #\h #\a #\n #\space)
 >> (define :before
 >    (lambda (some-string)
 >      (:before-list (string->list some-string))))
 >> (:before grip-command)
 > . . string->list: expects argument of type <string>; given '(#\space =
 #\C #\h #\a #\n #\space #\: #\d #\i #\g #\i #\t #\s #\space #\0 #\5 =
 #\space #\1 #\2 #\space #\T #\h #\r #\u #\space #\1 #\0 #\space #\A #\t =
 #\space #\5 #\0)
 >> (:before-list (string->list grip-command))
 > . . string->list: expects argument of type <string>; given '(#\space =
 #\C #\h #\a #\n #\space #\: #\d #\i #\g #\i #\t #\s #\space #\0 #\5 =
 #\space #\1 #\2 #\space #\T #\h #\r #\u #\space #\1 #\0 #\space #\A #\t =
 #\space #\5 #\0)
 >> (:before-list grip-command)
 > . . car: expects argument of type <pair>; given "$ Chan :digits 05 12 =
 Thru 10 At 50"
 >=20
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) =
 AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
 >=20
 
 
 --Apple-Mail=_D71AB0A0-E8FB-4BE5-9615-F8F1B5F76A2C
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgwMzAwNTQyNVowIwYJKoZI
 hvcNAQkEMRYEFEBVsY7svI6RrntkdSb4EqRbUvMCMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAHbNLakEdtv9nbUUeRw0hW3L95iCVm8LNavml8RhikOC/zoZ+0Ox1LPMKwd0ZjtRxsmk
 QhLisrCmHpfHoFFI7gJkJ9KfDCEs9RcuoJemZIYRI4WbP86YxcNjUAiPKM/9fNCFqUiEoOy2cdmr
 LnJ2XUb7ydrZByWnXKAMTqHSakmJUgQP3TR144sc/UJdcdfUko8mM6Ahz5bJg2zUMnLfV9dM+nOk
 IAySe+Fjg+qb17hG7EQyojE4VuyDv+IM/yQFp+5jfRhh3p/CdGC4/AZXVRZRcen2F7Z+Uhh7Mo4Q
 +gNJW2tbZ2P4FQBx0Y3WD2lKgUIsEdR5LkxSAox35nSik6MAAAAAAAA=
 
 --Apple-Mail=_D71AB0A0-E8FB-4BE5-9615-F8F1B5F76A2C--
