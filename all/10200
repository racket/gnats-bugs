From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Apr 14 11:40:31 2009
Received: from mail-qy0-f134.google.com (mail-qy0-f134.google.com [209.85.221.134])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n3EFeKE5025419
	for <bugs@bugs.plt-scheme.org>; Tue, 14 Apr 2009 11:40:20 -0400
Message-Id: <200904141540.n3EFeEiQ025411@champlain.ccs.neu.edu>
Date: Tue, 14 Apr 2009 11:40:14 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: Error location

>Number:         10200
>Category:       all
>Synopsis:       Error location
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Apr 14 11:44:01 -0400 2009
>Closed-Date:    Sat Dec 03 11:52:55 -0500 2011
>Last-Modified:  Mon Feb 18 23:44:39 -0500 2013
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.5.4
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 141088064

Collections:
(("/home/eli/.plt-scheme/4.1.5.4/collects" "CSU660" "info-domain") ("/home/scheme/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "stxclass" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "schemeunit" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "honu" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "typed"!
  "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
>Description:
When debugging is disabled, (user) errors show as coming from
drscheme/private/module-language.ss or .../rep.ss.  It would be better
to discard that source information before evaluation happens.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 10:58:32 -0500

 DrScheme used to do this. It is hard to get right and fragile.
 
 (I don't think this needs to be a PR ...)
 
 Robby
 
 On Tue, Apr 14, 2009 at 10:44 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10200
 >
 > Reported by Eli Barzilay for release: 4.1.5.4
 >
 > *** Description:
 > When debugging is disabled, (user) errors show as coming from
 > drscheme/private/module-language.ss or .../rep.ss. =C2=A0It would be bett=
 er
 > to discard that source information before evaluation happens.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02=
 :29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display=
 -depth) =3D 16
 > Human Language: english
 > (current-memory-use) 141088064
 >
 > Collections:
 > (("/home/eli/.plt-scheme/4.1.5.4/collects" "CSU660" "info-domain") ("/hom=
 e/scheme/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "mak=
 e" "preprocessor" "file" "openssl" "sgl" "htdch" "scriblib" "s-exp" "slides=
 how" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "wat=
 erworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "=
 mzcom" "help" "swindle" "config" "net" "stxclass" "hierlist" "test-box-reco=
 very" "2htdp" "profile" "trace" "schemeunit" "mrlib" "algol60" "browser" "p=
 rofj" "framework" "srpersist" "typed-scheme" "at-exp" "info-domain" "compil=
 er" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-cons=
 tants" "html" "slatex" "stepper" "repos-time-stamp" "honu" "launcher" "htdp=
 " "profjWizard" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "te=
 sts" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" =
 "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "=
 version" "typed"!
 > =C2=A0"texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "re=
 dex"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (=
 default) #() "#lang scheme\n" #t))
 >
 >
From: Sam TH <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 13:21:05 -0400

 On Tue, Apr 14, 2009 at 11:58 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > DrScheme used to do this. It is hard to get right and fragile.
 >
 > (I don't think this needs to be a PR ...)
 
 I think it's very useful to have this as a PR.  This way, we remember
 that it's something we might want to fix someday, even if we don't
 have a good solution for it now.  If we just have a mailing list
 discussion, eventually it will be forgotten, and brought up again by
 someone else, again and again.  Or forgotten permanently, which would
 be worse.
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 16:39:14 -0400

 On Apr 14, Robby Findler wrote:
 > DrScheme used to do this. It is hard to get right and fragile.
 
 Wouldn't this be easy using the new syntax/strip-context library, or
 something similar that gets rid of tthe source information?
 
 
 > (I don't think this needs to be a PR ...)
 
 The thing is that it looks like a bug when you use `error'
 intentionally in the code...  I just had this in class today -- to
 emulate a web-server function I used Shriram's trick of making the
 `read' function throw an error; I disabled debugging because it's
 inconvenient otherwise to keep clicking in the interactions window
 every time a simulated web read aborts with `error'.  The result right
 now is that every time you see the bogus source information, so I had
 to wave my hands trying to explain it away.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 15:42:08 -0500

 On Tue, Apr 14, 2009 at 3:39 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Apr 14, Robby Findler wrote:
 >> DrScheme used to do this. It is hard to get right and fragile.
 >
 > Wouldn't this be easy using the new syntax/strip-context library, or
 > something similar that gets rid of tthe source information?
 
 That already works for the errortrace stacks. It is the mzscheme level
 stacks that you're worried about, right?
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 18:10:53 -0400

 On Apr 14, Robby Findler wrote:
 > On Tue, Apr 14, 2009 at 3:39 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > On Apr 14, Robby Findler wrote:
 > >> DrScheme used to do this. It is hard to get right and fragile.
 > >
 > > Wouldn't this be easy using the new syntax/strip-context library, or
 > > something similar that gets rid of tthe source information?
 > 
 > That already works for the errortrace stacks. It is the mzscheme level
 > stacks that you're worried about, right?
 
 I'm not sure what you're talking about -- I'm talking about any random
 error message that looks like it's coming from somewhere in drscheme
 (when debugging is turned off):
 
   > (-)
   . . plt/collects/drscheme/private/rep.ss:1123:19: -: expects at least 1 argument, given 0
   > ffkjfkjf
   . . plt/collects/drscheme/private/rep.ss:1123:19: reference to an identifier before its definition: ffkjfkjf
   > (error "boo")
   . . plt/collects/drscheme/private/rep.ss:1123:19: boo
 
 This is especially bad since drscheme usually pays a lot of attention
 to having proper error messages -- and it makes this case really look
 more like a bug in drscheme.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 17:21:06 -0500

 Yes I understand what you are saying.
 
 I think you don't know how this works and I was trying to explain.
 Here's something: drs does not call the users code in an empty
 continuation. Right? So how can drscheme tell where the user's part of
 the continuation ends and it begins, when it comes time to print the
 error? The only way I know is fragile. Too fragile.
 
 Robby
 
 On Tuesday, April 14, 2009, Eli Barzilay <eli@barzilay.org> wrote:
 > On Apr 14, Robby Findler wrote:
 >> On Tue, Apr 14, 2009 at 3:39 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > On Apr 14, Robby Findler wrote:
 >> >> DrScheme used to do this. It is hard to get right and fragile.
 >> >
 >> > Wouldn't this be easy using the new syntax/strip-context library, or
 >> > something similar that gets rid of tthe source information?
 >>
 >> That already works for the errortrace stacks. It is the mzscheme level
 >> stacks that you're worried about, right?
 >
 > I'm not sure what you're talking about -- I'm talking about any random
 > error message that looks like it's coming from somewhere in drscheme
 > (when debugging is turned off):
 >
 >  =C2=A0> (-)
 >  =C2=A0. . plt/collects/drscheme/private/rep.ss:1123:19: -: expects at le=
 ast 1 argument, given 0
 >  =C2=A0> ffkjfkjf
 >  =C2=A0. . plt/collects/drscheme/private/rep.ss:1123:19: reference to an =
 identifier before its definition: ffkjfkjf
 >  =C2=A0> (error "boo")
 >  =C2=A0. . plt/collects/drscheme/private/rep.ss:1123:19: boo
 >
 > This is especially bad since drscheme usually pays a lot of attention
 > to having proper error messages -- and it makes this case really look
 > more like a bug in drscheme.
 >
 > --
 >  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0((lambda (x) (x x)) (lambda (x) (x x))=
 ) =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:
 >  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0http://www=
 .barzilay.org/ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze=
  is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 18:29:49 -0400

 On Apr 14, Robby Findler wrote:
 > Yes I understand what you are saying.
 > 
 > I think you don't know how this works and I was trying to explain.
 > Here's something: drs does not call the users code in an empty
 > continuation. Right? So how can drscheme tell where the user's part
 > of the continuation ends and it begins, when it comes time to print
 > the error? The only way I know is fragile. Too fragile.
 
 If I try something like this in mzscheme:
 
   > (define (foo x) (+ x 0))
   > (define (bar x) (list (foo x)))
   > (bar "3")
   +: expects type <number> as 1st argument, given: "3"; other arguments were: 0
 
 This would be better in DrScheme than printing the bogus source (that
 is, don't print any source).
 
 As for the printed source, where do you get it from?  If you're
 getting it from the context, then I don't know how come it looks like
 it does -- in mzscheme, the above has:
 
    === context ===
   stdin::1: foo
   stdin::26: bar
   /home/scheme/plt/collects/scheme/private/misc.ss:74:7
 
 so the first location is `foo', which is informative.  But in
 DrScheme, the same code still prints
 
   . . plt/collects/drscheme/private/module-language.ss:233:8: +:
   expects type <number> as 1st argument, given: "3"; other arguments
   were: 0
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 19:24:57 -0500

 I disagree that no source is better than the source locations from the
 continuation. I get them from the continuation marks.
 
 Robby
 
 On Tue, Apr 14, 2009 at 5:29 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Apr 14, Robby Findler wrote:
 >> Yes I understand what you are saying.
 >>
 >> I think you don't know how this works and I was trying to explain.
 >> Here's something: drs does not call the users code in an empty
 >> continuation. Right? So how can drscheme tell where the user's part
 >> of the continuation ends and it begins, when it comes time to print
 >> the error? The only way I know is fragile. Too fragile.
 >
 > If I try something like this in mzscheme:
 >
 > =C2=A0> (define (foo x) (+ x 0))
 > =C2=A0> (define (bar x) (list (foo x)))
 > =C2=A0> (bar "3")
 > =C2=A0+: expects type <number> as 1st argument, given: "3"; other argumen=
 ts were: 0
 >
 > This would be better in DrScheme than printing the bogus source (that
 > is, don't print any source).
 >
 > As for the printed source, where do you get it from? =C2=A0If you're
 > getting it from the context, then I don't know how come it looks like
 > it does -- in mzscheme, the above has:
 >
 > =C2=A0 =3D=3D=3D context =3D=3D=3D
 > =C2=A0stdin::1: foo
 > =C2=A0stdin::26: bar
 > =C2=A0/home/scheme/plt/collects/scheme/private/misc.ss:74:7
 >
 > so the first location is `foo', which is informative. =C2=A0But in
 > DrScheme, the same code still prints
 >
 > =C2=A0. . plt/collects/drscheme/private/module-language.ss:233:8: +:
 > =C2=A0expects type <number> as 1st argument, given: "3"; other arguments
 > =C2=A0were: 0
 >
 > --
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0((lambda (x) (x x)) (lambda (x) (x x)))=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0http://www.=
 barzilay.org/ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze =
 is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 23:01:57 -0400

 On Apr 14, Robby Findler wrote:
 > I disagree that no source is better than the source locations from
 > the continuation. I get them from the continuation marks.
 
 1. The error is completely bogus -- I expect anyone who sees something
    like:
 
     =A0. . plt/collects/drscheme/private/module-language.ss:233:8: +:
     =A0expects type <number> as 1st argument, given: "3"; other
     =A0arguments were: 0
 
    to make the reasonable conclusion that there is a bug in DrScheme,
    because that's what the error is saying.  IMO, spending time after
    each such complaint to explain why it happens is the wrong
    solution.
 
 2. I think that what you're really saying is that dropping the source
    is bad because there are *some* cases where it does provide useful
    information.
 
 3. So the best solution is if there is a way to get the
    drop-drscheme-frames feature working.
 
 Given this conclusion, I had a look in the file and see if I can come
 up with something that works, and I think that the following does:
 
 Define a hash table for DrScheme frames, and make a wrapper that grabs
 the drscheme frames and store them in the hash.  It must be an
 `equal=3F' hash, because it looks like each context is a fresh one.
 (The `call-with-stacktrace-name' name is bogus, it was just an easy
 place for me to hook this code to make sure that it works.)
 
   (define drscheme-stacks (make-hash))
   (define (call-with-stacktrace-name thunk)
     (let loop ([stack (continuation-mark-set->context
                        (current-continuation-marks))])
       ;; the iteration can stop as soon as it runs into a frame that
       ;; is already on the stack, since its tails will already be
       ;; there
       (when (and (pair=3F stack) (not (hash-ref drscheme-stacks stack #=
 f)))
         (hash-set! drscheme-stacks stack #t)
         (loop (cdr stack))))
     (thunk))
 
 I added some printfs to see how this is doing, and it seems that there
 are very few ways to get to that point -- so in practice this is going
 to be cheap and effective.  Then, you can use this table to cut the
 stack:
 
   (define (cut-out-top-of-stack exn)
     (let ([initial-stack (continuation-mark-set->context
                           (exn-continuation-marks exn))])
       (let loop ([stack initial-stack])
         (if (or (null=3F stack) (hash-ref drscheme-stacks stack #f))
           '()
           (cons (car stack) (loop (cdr stack)))))))
 
 I dropped the "ACK!" error message, because I think that there will
 always be cases where you won't see the drscheme frame at all.  (IIRC,
 when I played with making the profiler work with threads, I saw that
 threads will have an initially empty stack, so the above would
 actually get to a null in a way that shouldn't "ACK!".)
 
 I tried this with several examples (code that was big enough to have
 some context points in it, and simple one-expression tests), and it
 worked fine.  The only problem I've seen is when you have something
 like this in the definition window:
 
   #lang scheme
   (-)
 
 This still has a frame that looks like:
 
    ((*init . #(struct:srcloc #<path:/home/scheme/plt/collects/drscheme/=
 private/module-language.ss> 233 8 11220 332)))
 
 which results in still getting a bad error message.  That's
 probably becuase the wrapper should move into the code that
 initializes the module language.  (And given how it works, this could
 be as simple as exporting the wrapper function, and using it inside
 the module language initialization code -- since nested uses of the
 wrapper will just mark the new frames between them.)
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                   http://www.barzilay.org/                 Maze is Life=
 !
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 22:14:25 -0500

 Oh, that's a much better strategy that what I had tried! You could
 probably just save the context and then use eq? on the list elements
 (or possibly even only the first of the saved stack).
 
 Robby
 
 On Tue, Apr 14, 2009 at 10:01 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Apr 14, Robby Findler wrote:
 >> I disagree that no source is better than the source locations from
 >> the continuation. I get them from the continuation marks.
 >
 > 1. The error is completely bogus -- I expect anyone who sees something
 > =C2=A0 like:
 >
 > =C2=A0 =C2=A0=C2=A0. . plt/collects/drscheme/private/module-language.ss:2=
 33:8: +:
 > =C2=A0 =C2=A0=C2=A0expects type <number> as 1st argument, given: "3"; oth=
 er
 > =C2=A0 =C2=A0=C2=A0arguments were: 0
 >
 > =C2=A0 to make the reasonable conclusion that there is a bug in DrScheme,
 > =C2=A0 because that's what the error is saying. =C2=A0IMO, spending time =
 after
 > =C2=A0 each such complaint to explain why it happens is the wrong
 > =C2=A0 solution.
 >
 > 2. I think that what you're really saying is that dropping the source
 > =C2=A0 is bad because there are *some* cases where it does provide useful
 > =C2=A0 information.
 >
 > 3. So the best solution is if there is a way to get the
 > =C2=A0 drop-drscheme-frames feature working.
 >
 > Given this conclusion, I had a look in the file and see if I can come
 > up with something that works, and I think that the following does:
 >
 > Define a hash table for DrScheme frames, and make a wrapper that grabs
 > the drscheme frames and store them in the hash. =C2=A0It must be an
 > `equal?' hash, because it looks like each context is a fresh one.
 > (The `call-with-stacktrace-name' name is bogus, it was just an easy
 > place for me to hook this code to make sure that it works.)
 >
 > =C2=A0(define drscheme-stacks (make-hash))
 > =C2=A0(define (call-with-stacktrace-name thunk)
 > =C2=A0 =C2=A0(let loop ([stack (continuation-mark-set->context
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 (current-continuation-marks))])
 > =C2=A0 =C2=A0 =C2=A0;; the iteration can stop as soon as it runs into a f=
 rame that
 > =C2=A0 =C2=A0 =C2=A0;; is already on the stack, since its tails will alre=
 ady be
 > =C2=A0 =C2=A0 =C2=A0;; there
 > =C2=A0 =C2=A0 =C2=A0(when (and (pair? stack) (not (hash-ref drscheme-stac=
 ks stack #f)))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0(hash-set! drscheme-stacks stack #t)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0(loop (cdr stack))))
 > =C2=A0 =C2=A0(thunk))
 >
 > I added some printfs to see how this is doing, and it seems that there
 > are very few ways to get to that point -- so in practice this is going
 > to be cheap and effective. =C2=A0Then, you can use this table to cut the
 > stack:
 >
 > =C2=A0(define (cut-out-top-of-stack exn)
 > =C2=A0 =C2=A0(let ([initial-stack (continuation-mark-set->context
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0(exn-continuation-marks exn))])
 > =C2=A0 =C2=A0 =C2=A0(let loop ([stack initial-stack])
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0(if (or (null? stack) (hash-ref drscheme-stack=
 s stack #f))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0'()
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(cons (car stack) (loop (cdr stack)))))=
 ))
 >
 > I dropped the "ACK!" error message, because I think that there will
 > always be cases where you won't see the drscheme frame at all. =C2=A0(IIR=
 C,
 > when I played with making the profiler work with threads, I saw that
 > threads will have an initially empty stack, so the above would
 > actually get to a null in a way that shouldn't "ACK!".)
 >
 > I tried this with several examples (code that was big enough to have
 > some context points in it, and simple one-expression tests), and it
 > worked fine. =C2=A0The only problem I've seen is when you have something
 > like this in the definition window:
 >
 > =C2=A0#lang scheme
 > =C2=A0(-)
 >
 > This still has a frame that looks like:
 >
 > =C2=A0 ((*init . #(struct:srcloc #<path:/home/scheme/plt/collects/drschem=
 e/private/module-language.ss> 233 8 11220 332)))
 >
 > which results in still getting a bad error message. =C2=A0That's
 > probably becuase the wrapper should move into the code that
 > initializes the module language. =C2=A0(And given how it works, this coul=
 d
 > be as simple as exporting the wrapper function, and using it inside
 > the module language initialization code -- since nested uses of the
 > wrapper will just mark the new frames between them.)
 >
 > --
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0((lambda (x) (x x)) (lambda (x) (x x)))=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0http://www.=
 barzilay.org/ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze =
 is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10200: Error location
Date: Tue, 14 Apr 2009 23:24:06 -0400

 On Apr 14, Robby Findler wrote:
 > Oh, that's a much better strategy that what I had tried! You could
 > probably just save the context and then use eq? on the list elements
 > (or possibly even only the first of the saved stack).
 
 Matthew can answer this in more details, but I don't think that it
 works to use `eq?' on the elements:
 
   > (define (z) (cadr (continuation-mark-set->context
                        (current-continuation-marks))))
   > (list (z) (z))
   ((#f . #([...]/scheme/private/misc.ss> 74 7 2789 947))
    (#f . #([...]/scheme/private/misc.ss> 74 7 2789 947)))
   > (eq? (z) (z))
   #f
 
 and even if I change `cadr' to `cdadr' to compare just the srclocs I
 still get #f. (This is why I made the profiler use a hash table to
 intern these pairs).
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

State changed from "open" to "closed" by samth at Sat, 03 Dec 2011 11:52:55 -0500
Reason>>> drracket no longer has the described behavior


Responsible changed from "nobody" to "samth" by eli at Mon, 18 Feb 2013 23:44:39 -0500
Reason>>> samth closed

