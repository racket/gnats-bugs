From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jun 23 12:29:01 2010
Received: from mail-gy0-f172.google.com (mail-gy0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o5NGSwlb007604
	for <bugs@bugs.plt-scheme.org>; Wed, 23 Jun 2010 12:28:58 -0400
Message-Id: <201006231628.o5NGSq3e007595@champlain.ccs.neu.edu>
Date: Wed, 23 Jun 2010 12:28:52 -0400
From: cwearl@cs.utah.edu
To: bugs@plt-scheme.org
Subject: equal-hash-code returning inconsistent results for hash tables

>Number:         10985
>Category:       all
>Synopsis:       equal-hash-code returning inconsistent results for hash tables
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jun 23 12:32:01 -0400 2010
>Closed-Date:    Wed Jun 23 13:01:07 -0400 2010
>Last-Modified:  Wed Jun 23 13:12:01 -0400 2010
>Originator:     Chris Earl
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3
>Description:
This problem arose from my code to run k-CFA on an abstracted CESK machine.  The problem only seems to arise from hash tables that implement stores (mapping addresses to values).

For a class (that is difficult to define) of hash tables, say ht1 and ht2, (equal? ht1 ht2) returns true but (equal? (equal-hash-code ht1) (equal-hash-code ht2)) returns false.

From playing around with the offending hash tables, the order in which key-values pairs are added to the tables changes its hash-code.

Both immutable and mutable versions of these hash tables have this problem, although it seems that the bug appears more frequently with the mutable version.

Example interaction in DrRacket (pull-and-print-errors defines hash1 and hash2):

. . container.rkt:86:45: in container-add: Check error-ele and error-con for error.
> (pull-and-print-errors)
equal? #t
equal-hash-codes equal? #f
equal-hash-code hash1 -930607182
equal-hash-code hash2 -60956769
> (equal? hash1 hash2)
#t
> (equal-hash-code hash1)
-930607182
> (equal-hash-code hash2)
-60956769
> 

This problem is intermittent: Some executions of identical code will produce this error and other executions will not.
>How-To-Repeat:
This bug is very fragile and slight changes to the hash tables cause everything to work properly.  However, this bug comes up when my code is given a specific class of input.  The class of input does not seem enlightening to this problem.  Importantly, this class creates equivalent hash tables by adding the same key-value pairs in different orders.

Both the keys and the values for the problem hash are transparent structs.  The keys in some cases are contained in the values, but this is not necessarily the case.  The values contain nested structs as well as hash tables themselves. (These embedded hash tables represent environments and so are distinct from the hash tables that are causing problems).

Increasing the difficulty of reproducing this bug, the values contain syntax objects.  Also, the code that generates this problem is several thousand lines long.

Feel free to contact me for further information or my code.
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "mflatt" by mflatt@racket-lang.org at Wed, 23 Jun 2010 13:01:07 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/bfd769a29c
State changed from "open" to "closed" by mflatt@racket-lang.org at Wed, 23 Jun 2010 13:01:07 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/bfd769a29c
From: Matthew Flatt <mflatt@cs.utah.edu>
To: cwearl@cs.utah.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [plt-bug] all/10985: equal-hash-code returning inconsistent results for hash tables
Date: Wed, 23 Jun 2010 07:10:20 -1000

 Fix pushed to the git repo.
 
 The bug was a bad interaction between a depth-limiting feature of the
 hash-code calculation (to avoid problems with cycles) and the need for
 an order-independent result for hash tables.
 
