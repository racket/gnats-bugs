From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jun 26 22:07:01 2013
Received: from mail-oa0-f41.google.com (mail-oa0-f41.google.com [209.85.219.41])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r5R26vQa021802
	for <bugs@bugs.plt-scheme.org>; Wed, 26 Jun 2013 22:06:58 -0400
Message-Id: <201306270206.r5R26t4I021797@champlain.ccs.neu.edu>
Date: Wed, 26 Jun 2013 22:06:55 -0400
From: pnguyen@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Bypass typechecking in Typed Racket with "apply"

>Number:         13893
>Category:       all
>Synopsis:       Bypass typechecking in Typed Racket with "apply"
>Class:          sw-bug
>Responsible:    asumu
>Severity:       critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jun 26 22:08:02 -0400 2013
>Closed-Date:    Fri Jul 05 18:10:53 -0400 2013
>Last-Modified:  Fri Jul 05 18:10:53 -0400 2013
>Originator:     Phil Nguyen
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.5
>Environment:
unix "Linux ubulap 3.8.0-23-generic #34-Ubuntu SMP Wed May 29 20:22:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 568454636
Links: (links) = ("redex"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.5):
 [none]



Collections:
("/home/phil/.racket/5.3.5/collects"
 (non-existent-path))
("/home/phil/Apps/Racket/collects"
 ("scriblib" "db" "scheme" "trace" "syntax" "srfi" "scribblings" "swindle" "compatibility" "icons" "realm" "games" "data" "mrlib" "rnrs" "browser" "defaults" "plot" "gui-debugger" "mred" "web-server" "sgl" "mzlib" "datalog" "readline" "file" "plai" "openssl" "raco" "json" "planet" "compiler" "math" "mzscheme" "frtime" "typed-racket" "setup" "rackunit" "mzcom" "parser-tools" "texpict" "profile" "r5rs" "at-exp" "typed-scheme" "drscheme" "future-visualizer" "pkg" "schemeunit" "html" "test-engine" "htdp" "dynext" "algol60" "racket" "eopl" "syntax-color" "config" "drracket" "framework" "help" "wxme" "2htdp" "info-domain" "scribble" "typed" "deinprogramm" "launcher" "redex" "embedded-gui" "net" "slideshow" "macro-debugger" "graphics" "slatex" "string-constants" "preprocessor" "reader" "images" "make" "ffi" "stepper" "mysterx" "lang" "hierlist" "xrepl" "racklog" "xml" "errortrace" "teachpack" "r6rs" "picturing-programs" "s-exp" "version" "lazy" "unstable"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Applying some functions using "apply" can bypass the typechecker and delay errors to run-time.
>How-To-Repeat:
The following definition typechecks:
(: x (Listof Number))
(define x (apply + (list 1 2 "3")))

Or just to delay the error until function application:
(: x (-> (Listof Number)))
(define (x) (apply + (list 1 2 "3")))

This only happens for +, * as I've seen. - and / fail to typecheck.


And the following program defines x as 6 with type (Listof Number):

(: id ((Listof Any) -> (Listof Any)))
(define (id x) x)

(: x (Listof Number))
(define x (apply + (id (list 1 2 3))))
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: pnguyen@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13893: Bypass typechecking in Typed Racket with
 "apply"
Date: Fri, 5 Jul 2013 16:42:16 -0400

 On 2013-06-26 22:08:02 -0400, pnguyen@ccs.neu.edu wrote:
 > *** How to repeat:
 > The following definition typechecks:
 > (: x (Listof Number))
 > (define x (apply + (list 1 2 "3")))
 >
 > [...]
 >
 > This only happens for +, * as I've seen. - and / fail to typecheck.
 
 Here's an example that's "simpler" in that the operator that's being
 applied has a simpler type than +:
 
   #lang typed/racket
   (: f (case-> (Integer * -> Integer)
                (Real * -> Real)))
   (define (f . args) (+ 1 (list-ref args 2)))
   (apply f (list 1 2 "3"))
 
 If you take out one of the function types in the case-> type, it
 fails to type-check. If you replace (Integer * -> Integer) with (Integer
 -> Integer), it also type-checks.
 
 I bet any case-> type that has more than one branch and has a * domain
 is broken for `apply`. I'll look into it.
 
 Cheers,
 Asumu
Responsible changed from "nobody" to "asumu" by asumu@racket-lang.org at Fri, 05 Jul 2013 18:10:53 -0400
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/328956e8b5
State changed from "open" to "closed" by asumu@racket-lang.org at Fri, 05 Jul 2013 18:10:53 -0400
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/328956e8b5
  | Fix type error reporting for case-> with * domains
  | 
  | In the case that a case-> type included a case with a *
  | domain and had additional branches, a use of `apply` with
  | that type would fail to report a type error. This was
  | because the type of the applied list was ignored for type
  | error generation.
  | 
  | Closes PR 13893

