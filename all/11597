From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jan  6 12:10:24 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id p06HALRf003289
	for <bugs@bugs.plt-scheme.org>; Thu, 6 Jan 2011 12:10:22 -0500
Message-Id: <201101061710.p06HAHPn003278@champlain.ccs.neu.edu>
Date: Thu, 6 Jan 2011 12:10:17 -0500
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: uninformative error message for ->i contract that abuses #:pre

>Number:         11597
>Category:       all
>Synopsis:       uninformative error message for ->i contract that abuses #:pre
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jan 06 12:12:01 -0500 2011
>Closed-Date:    Thu Jan 06 20:44:08 -0500 2011
>Last-Modified:  Thu Jan 06 20:44:08 -0500 2011
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.99.6--2011-01-05(3b51c1c/g)
>Environment:
macosx "Darwin antarctica.ccs.neu.edu 10.5.0 Darwin Kernel Version 10.5.0: Fri Nov  5 23:20:39 PDT 2010; root:xnu-1504.9.17~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 198619060

Collections:
("/Users/matthias/0Unison/collects/"
 (".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/5.0.99.6/collects"
 (non-existent-path))
("/Users/matthias/plt/collects"
 (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tes!
 ts" "tex2page" "texpict" "tool" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
 ->i: expected a range expression, but found nothing in: ()
>How-To-Repeat:
run 

#lang racket

(provide/contract 
 [f (->i ([x number?][y number?])
         #:pre (> x y)
         (r number?))])

(define (f x y) x)
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: matthias@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11597: uninformative error message for ->i
 contract that abuses #:pre
Date: Thu, 6 Jan 2011 15:21:19 -0600

 On Thu, Jan 6, 2011 at 11:12 AM,  <matthias@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11597
 >
 > =C2=A0->i: expected a range expression, but found nothing in: ()
 >
 > #lang racket
 >
 > (provide/contract
 > =C2=A0[f (->i ([x number?][y number?])
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:pre (> x y)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 (r number?))])
 >
 > (define (f x y) x)
 
 I can easily drop the () from the message (and have done that), but
 I'm not seeing anything else easy to do. Any suggestions?
 
 (#:pre is already checking for a parenthesized list of identifiers to
 follow it, which you helpfully have supplied :).
 
 Robby
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Thu, 06 Jan 2011 16:24:04 -0500
Reason>>> A commit by robby@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/9a0d7b419b
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/11597: uninformative error message for ->i
 contract that abuses #:pre
Date: Thu, 6 Jan 2011 19:28:33 -0600

 How does this look? (I'll push it and close the PR, but can reopen or
 do more later if you want)
 
 > (->i ([x number?][y number?])
        #:pre (> x y)
        (r number?))
 ->i: expected #:pre to be followed by at least three subterms (a
 sequence of identifiers, the pre-condit
 ion and the range contract), but found only two at: #:pre in: (->i ((x
 number?) (y number?)) #:pre (> x y) (r number?))
 
 
 
 On Thu, Jan 6, 2011 at 5:00 PM, Matthias Felleisen <matthias@ccs.neu.edu> w=
 rote:
 >
 > On Jan 6, 2011, at 4:21 PM, Robby Findler wrote:
 >
 >> On Thu, Jan 6, 2011 at 11:12 AM, =C2=A0<matthias@ccs.neu.edu> wrote:
 >>> A new problem report is waiting at
 >>> =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11597
 >>>
 >>> =C2=A0->i: expected a range expression, but found nothing in: ()
 >>>
 >>> #lang racket
 >>>
 >>> (provide/contract
 >>> =C2=A0[f (->i ([x number?][y number?])
 >>> =C2=A0 =C2=A0 =C2=A0 =C2=A0 #:pre (> x y)
 >>> =C2=A0 =C2=A0 =C2=A0 =C2=A0 (r number?))])
 >>>
 >>> (define (f x y) x)
 >>
 >> I can easily drop the () from the message (and have done that),
 >
 >
 > Good!
 >
 >
 >> but
 >> I'm not seeing anything else easy to do. Any suggestions?
 >>
 >> (#:pre is already checking for a parenthesized list of identifiers to
 >> follow it, which you helpfully have supplied :).
 >
 > Well yeah :-)
 >
 > I kind of wish the macro showed me how it parsed the contract because I j=
 ust see a well-formed contract here.
 >
 > As you can imagine, I changed a ->d into ->i and forgot to add the depend=
 encies.
 >
 > As you can also imagine, this will happen to others
 >
 > It shows how subtle and brittle syntax design is. No wonder PL guys get h=
 ung up on that -- and we have PARENS!
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/11597: uninformative error message for ->i contract that abuses #:pre
Date: Thu, 6 Jan 2011 20:29:13 -0500

 FANTASTIC!=20
 
 On Jan 6, 2011, at 8:28 PM, Robby Findler wrote:
 
 > How does this look? (I'll push it and close the PR, but can reopen or
 > do more later if you want)
 >=20
 >> (->i ([x number?][y number?])
 >       #:pre (> x y)
 >       (r number?))
 > ->i: expected #:pre to be followed by at least three subterms (a
 > sequence of identifiers, the pre-condit
 > ion and the range contract), but found only two at: #:pre in: (->i ((x
 > number?) (y number?)) #:pre (> x y) (r number?))
 >=20
 >=20
 >=20
 > On Thu, Jan 6, 2011 at 5:00 PM, Matthias Felleisen =
 <matthias@ccs.neu.edu> wrote:
 >>=20
 >> On Jan 6, 2011, at 4:21 PM, Robby Findler wrote:
 >>=20
 >>> On Thu, Jan 6, 2011 at 11:12 AM,  <matthias@ccs.neu.edu> wrote:
 >>>> A new problem report is waiting at
 >>>>  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11597
 >>>>=20
 >>>>  ->i: expected a range expression, but found nothing in: ()
 >>>>=20
 >>>> #lang racket
 >>>>=20
 >>>> (provide/contract
 >>>>  [f (->i ([x number?][y number?])
 >>>>         #:pre (> x y)
 >>>>         (r number?))])
 >>>>=20
 >>>> (define (f x y) x)
 >>>=20
 >>> I can easily drop the () from the message (and have done that),
 >>=20
 >>=20
 >> Good!
 >>=20
 >>=20
 >>> but
 >>> I'm not seeing anything else easy to do. Any suggestions?
 >>>=20
 >>> (#:pre is already checking for a parenthesized list of identifiers =
 to
 >>> follow it, which you helpfully have supplied :).
 >>=20
 >> Well yeah :-)
 >>=20
 >> I kind of wish the macro showed me how it parsed the contract because =
 I just see a well-formed contract here.
 >>=20
 >> As you can imagine, I changed a ->d into ->i and forgot to add the =
 dependencies.
 >>=20
 >> As you can also imagine, this will happen to others
 >>=20
 >> It shows how subtle and brittle syntax design is. No wonder PL guys =
 get hung up on that -- and we have PARENS!
 >>=20
 >>=20
 

State changed from "open" to "closed" by robby at Thu, 06 Jan 2011 20:44:08 -0500
Reason>>> improved the error messages

