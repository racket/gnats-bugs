From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Mar  3 09:23:24 2013
Received: from mail-oa0-f43.google.com (mail-oa0-f43.google.com [209.85.219.43])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r23ENLLA012392
	for <bugs@bugs.plt-scheme.org>; Sun, 3 Mar 2013 09:23:21 -0500
Message-Id: <201303031423.r23ENI6i012386@champlain.ccs.neu.edu>
Date: Sun, 3 Mar 2013 09:23:18 -0500
From: jensaxel@soegaard.net
To: bugs@racket-lang.org
Subject: DrRacket Crash

>Number:         13571
>Category:       all
>Synopsis:       DrRacket Crash
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Mar 03 09:24:01 -0500 2013
>Originator:     Jens Axel SÃ¸gaard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.3.7--2013-03-03(7f67252c/d)
>Environment:
macosx "Darwin mba-3.local 12.2.0 Darwin Kernel Version 12.2.0: Sat Aug 25 00:48:52 PDT 2012; root:xnu-2050.18.24~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: danish
(current-memory-use) 269299960
Links: (links) = ("minipascal"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
Planet2 (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.3.7):
 [none]



Collections:
("/Users/soegaard/Library/Racket/5.3.3.7/collects"
 (non-existent-path))
("/Users/soegaard/release-candidate2/racket/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace" "typed" "typed-racket" "typed-!
 scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #t #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Even with a memory limit, the program below causes DrRacket to crash.
>How-To-Repeat:
#lang racket
(require racket/draw)

;;; Nodes and directions
(struct node (x y) #:transparent)
(define-syntax-rule (define-directions (name dx dy) ...)
  (begin (define (name n) (node (+ (node-x n) dx) (+ (node-y n) dy))) ...))
(define-directions (north 0 1) (south 0 -1) (west -1 0) (east 1 0))

;;; Pixels
(define (set-pixel-color x y c)
  (send dc set-pixel x y c))

(define (get-pixel-color x y)
  (define c (make-object color% 0 0 0))
  (send dc get-pixel x y c)
  c)

(define (color= c1 c2)
  (and (= (send c1 red)   (send c2 red))
       (= (send c1 green) (send c2 green))
       (= (send c1 blue)  (send c2 blue))))

;;; Fill
(define (flood-fill n target-color replacement-color)
  (define (flood n)
    (match-define (node x y) n)
    ; (display (list x y))
    (when (color= (get-pixel-color x y) target-color)
      (set-pixel-color x y replacement-color)
      (flood (north n))
      (flood (south n))
      (flood (east n))
      (flood (west n))))
  (flood n))


;;; Test
(define bm (make-bitmap 100 100))
(define dc (new bitmap-dc% [bitmap bm]))
(send dc set-pen "blue" 1 'solid)
(send dc set-brush "blue" 'solid)
(send dc draw-ellipse 0 0 100 100)
(send dc set-pen "yellow" 1 'solid)
(send dc set-brush "yellow" 'solid)
(send dc draw-ellipse 25 25 50 50)
bm

(define seed (node 50 15))
(flood-fill seed (get-pixel-color 50 15) (make-object color% "red"))
bm
>Fix:
