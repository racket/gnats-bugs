From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jan 25 20:36:24 2013
Received: from mail-ob0-f179.google.com (mail-ob0-f179.google.com [209.85.214.179])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r0Q1aJRo031848
	for <bugs@bugs.plt-scheme.org>; Fri, 25 Jan 2013 20:36:19 -0500
Message-Id: <201301260136.r0Q1aHmL031843@champlain.ccs.neu.edu>
Date: Fri, 25 Jan 2013 20:36:17 -0500
From: clements@racket-lang.org
To: bugs@racket-lang.org
Subject: right-paren causes deletion

>Number:         13454
>Category:       all
>Synopsis:       right-paren causes deletion
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jan 25 20:40:02 -0500 2013
>Closed-Date:    Sat Jan 26 08:49:33 -0500 2013
>Last-Modified:  Sat Jan 26 10:05:45 -0500 2013
>Originator:     John Clements
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.2--2013-01-21(311ad36a/d)
>Environment:
macosx "Darwin oiseau.local 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 317242436
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
Planet2 (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific:
 [none]



Collections:
("/Users/clements/clements/collects"
 (".DS_Store" ".gitignore" "badger" "file-size-checker" "gradeserver" "info-domain" "jbc-gnucash" "mboxrd-read" "midi" "mnemisis" "projector" "shelly" "template-tester" "txomp" "web-utilities"))
("/Users/clements/matthias/collects"
 (non-existent-path))
("/Users/clements/Library/Racket/5.3.2.2/collects"
 (non-existent-path))
("/Users/clements/plt/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recov!
 ery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
It looks to me like there's a bug in the
new paren-matching code. 
>How-To-Repeat:
1) in a fresh buffer, type a left paren. The buffer now looks like 
(.)
, where the dot denotes the cursor.
2) now type another left paren. The buffer now looks like 
((.))

3) now type a right paren. The inner pair of parens disappears, and we get a buffer containing 
().

I would have expected the cursor to move one space to the right, giving
(().)
  
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: "clements@racket-lang.org" <clements@racket-lang.org>,
        bugs <bugs@racket-lang.org>, Nadeem Abdul Hamid <nadeem@acm.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 20:05:40 -0600

 --e89a8fb1f2aa1279ab04d4277bbe
 Content-Type: text/plain; charset=UTF-8
 
 Nadeem: do you have time to look into this?
 
 Robby
 
 
 On Fri, Jan 25, 2013 at 7:40 PM, <clements@racket-lang.org> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13454
 >
 > Reported by John Clements for release: 5.3.2.2--2013-01-21(311ad36a/d)
 >
 > *** Description:
 > It looks to me like there's a bug in the
 > new paren-matching code.
 >
 > *** How to repeat:
 > 1) in a fresh buffer, type a left paren. The buffer now looks like
 > (.)
 > , where the dot denotes the cursor.
 > 2) now type another left paren. The buffer now looks like
 > ((.))
 >
 > 3) now type a right paren. The inner pair of parens disappears, and we get
 > a buffer containing
 > ().
 >
 > I would have expected the cursor to move one space to the right, giving
 > (().)
 >
 >
 > *** Environment:
 > macosx "Darwin oiseau.local 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug
 > 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64"
 > (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 317242436
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 > (links #:user? #f #:root? #t) = ()
 > Planet2 (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific:
 >  [none]
 >
 >
 >
 > Collections:
 > ("/Users/clements/clements/collects"
 >  (".DS_Store" ".gitignore" "badger" "file-size-checker" "gradeserver"
 > "info-domain" "jbc-gnucash" "mboxrd-read" "midi" "mnemisis" "projector"
 > "shelly" "template-tester" "txomp" "web-utilities"))
 > ("/Users/clements/matthias/collects"
 >  (non-existent-path))
 > ("/Users/clements/Library/Racket/5.3.2.2/collects"
 >  (non-existent-path))
 > ("/Users/clements/plt/collects"
 >  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser"
 > "compatibility" "compiler" "config" "data" "datalog" "db" "defaults"
 > "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl"
 > "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games"
 > "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server"
 > "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain"
 > "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta"
 > "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"
 > "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot"
 > "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco"
 > "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp"
 > "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl"
 > "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper"
 > "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 > "test-box-recov!
 >  ery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed"
 > "typed-racket" "typed-scheme" "unstable" "version" "waterworld"
 > "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 > (test))))
 >
 >
 
 --e89a8fb1f2aa1279ab04d4277bbe
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Nadeem: do you have time to look into this?<div><br></div>=
 <div>Robby</div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmai=
 l_quote">On Fri, Jan 25, 2013 at 7:40 PM,  <span dir=3D"ltr">&lt;<a href=3D=
 "mailto:clements@racket-lang.org" target=3D"_blank">clements@racket-lang.or=
 g</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 454" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13454</a><br>
 <br>
 Reported by John Clements for release: 5.3.2.2--2013-01-21(311ad36a/d)<br>
 <br>
 *** Description:<br>
 It looks to me like there&#39;s a bug in the<br>
 new paren-matching code.<br>
 <br>
 *** How to repeat:<br>
 1) in a fresh buffer, type a left paren. The buffer now looks like<br>
 (.)<br>
 , where the dot denotes the cursor.<br>
 2) now type another left paren. The buffer now looks like<br>
 ((.))<br>
 <br>
 3) now type a right paren. The inner pair of parens disappears, and we get =
 a buffer containing<br>
 ().<br>
 <br>
 I would have expected the cursor to move one space to the right, giving<br>
 (().)<br>
 <br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin oiseau.local 11.4.2 Darwin Kernel Version 11.4.2: Thu A=
 ug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64&quot; (=
 x86_64-macosx/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 317242436<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/clements/clements/collects&quot;<br>
 =C2=A0(&quot;.DS_Store&quot; &quot;.gitignore&quot; &quot;badger&quot; &quo=
 t;file-size-checker&quot; &quot;gradeserver&quot; &quot;info-domain&quot; &=
 quot;jbc-gnucash&quot; &quot;mboxrd-read&quot; &quot;midi&quot; &quot;mnemi=
 sis&quot; &quot;projector&quot; &quot;shelly&quot; &quot;template-tester&qu=
 ot; &quot;txomp&quot; &quot;web-utilities&quot;))<br>
 
 (&quot;/Users/clements/matthias/collects&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/clements/Library/Racket/<a href=3D"http://5.3.2.2/collects" t=
 arget=3D"_blank">5.3.2.2/collects</a>&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/clements/plt/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;2htdp&quot; &quot;algol60&quot; &quot;a=
 t-exp&quot; &quot;browser&quot; &quot;combinator-parser&quot; &quot;compati=
 bility&quot; &quot;compiler&quot; &quot;config&quot; &quot;data&quot; &quot=
 ;datalog&quot; &quot;db&quot; &quot;defaults&quot; &quot;deinprogramm&quot;=
  &quot;drracket&quot; &quot;drscheme&quot; &quot;dynext&quot; &quot;embedde=
 d-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &quot;ffi&quot; &quot;f=
 ile&quot; &quot;framework&quot; &quot;frtime&quot; &quot;future-visualizer&=
 quot; &quot;games&quot; &quot;graphics&quot; &quot;gui-debugger&quot; &quot=
 ;guibuilder&quot; &quot;handin-client&quot; &quot;handin-server&quot; &quot=
 ;help&quot; &quot;hierlist&quot; &quot;honu&quot; &quot;htdp&quot; &quot;ht=
 ml&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; &quot=
 ;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &quot;ma=
 cro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;meta&quot; &quot=
 ;mred&quot; &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;m=
 zlib&quot; &quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;p=
 arser-tools&quot; &quot;picturing-programs&quot; &quot;plai&quot; &quot;pla=
 net&quot; &quot;planet2&quot; &quot;plot&quot; &quot;preprocessor&quot; &qu=
 ot;profile&quot; &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot=
 ;racklog&quot; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &qu=
 ot;readline&quot; &quot;realm&quot; &quot;redex&quot; &quot;repo-time-stamp=
 &quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quot; &quot;schemeun=
 it&quot; &quot;scribble&quot; &quot;scribblings&quot; &quot;scriblib&quot; =
 &quot;setup&quot; &quot;sgl&quot; &quot;sirmail&quot; &quot;slatex&quot; &q=
 uot;slideshow&quot; &quot;srfi&quot; &quot;srpersist&quot; &quot;stepper&qu=
 ot; &quot;string-constants&quot; &quot;swindle&quot; &quot;syntax&quot; &qu=
 ot;syntax-color&quot; &quot;teachpack&quot; &quot;test-box-recov!<br>
 
 =C2=A0ery&quot; &quot;test-engine&quot; &quot;tests&quot; &quot;tex2page&qu=
 ot; &quot;texpict&quot; &quot;trace&quot; &quot;typed&quot; &quot;typed-rac=
 ket&quot; &quot;typed-scheme&quot; &quot;unstable&quot; &quot;version&quot;=
  &quot;waterworld&quot; &quot;web-server&quot; &quot;wxme&quot; &quot;xml&q=
 uot; &quot;xrepl&quot;))<br>
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 
 --e89a8fb1f2aa1279ab04d4277bbe--
From: Nadeem Abdul Hamid <nadeem@acm.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: "clements@racket-lang.org" <clements@racket-lang.org>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 21:37:00 -0500

 --90e6ba539e86e641f904d427ec1a
 Content-Type: text/plain; charset=UTF-8
 
 OK, I'll look at it right now...
 
 On Fri, Jan 25, 2013 at 9:05 PM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > Nadeem: do you have time to look into this?
 >
 > Robby
 >
 >
 > On Fri, Jan 25, 2013 at 7:40 PM, <clements@racket-lang.org> wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13454
 >>
 >> Reported by John Clements for release: 5.3.2.2--2013-01-21(311ad36a/d)
 >>
 >> *** Description:
 >> It looks to me like there's a bug in the
 >> new paren-matching code.
 >>
 >> *** How to repeat:
 >> 1) in a fresh buffer, type a left paren. The buffer now looks like
 >> (.)
 >> , where the dot denotes the cursor.
 >> 2) now type another left paren. The buffer now looks like
 >> ((.))
 >>
 >> 3) now type a right paren. The inner pair of parens disappears, and we
 >> get a buffer containing
 >> ().
 >>
 >> I would have expected the cursor to move one space to the right, giving
 >> (().)
 >>
 >>
 >> *** Environment:
 >> macosx "Darwin oiseau.local 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug
 >> 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64"
 >> (x86_64-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 317242436
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >> (links #:user? #f #:root? #t) = ()
 >> Planet2 (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  [none]
 >> User-specific, version-specific:
 >>  [none]
 >>
 >>
 >>
 >> Collections:
 >> ("/Users/clements/clements/collects"
 >>  (".DS_Store" ".gitignore" "badger" "file-size-checker" "gradeserver"
 >> "info-domain" "jbc-gnucash" "mboxrd-read" "midi" "mnemisis" "projector"
 >> "shelly" "template-tester" "txomp" "web-utilities"))
 >> ("/Users/clements/matthias/collects"
 >>  (non-existent-path))
 >> ("/Users/clements/Library/Racket/5.3.2.2/collects"
 >>  (non-existent-path))
 >> ("/Users/clements/plt/collects"
 >>  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser"
 >> "compatibility" "compiler" "config" "data" "datalog" "db" "defaults"
 >> "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl"
 >> "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games"
 >> "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server"
 >> "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain"
 >> "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta"
 >> "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"
 >> "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot"
 >> "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco"
 >> "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp"
 >> "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl"
 >> "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper"
 >> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 >> "test-box-recov!
 >>  ery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed"
 >> "typed-racket" "typed-scheme" "unstable" "version" "waterworld"
 >> "web-server" "wxme" "xml" "xrepl"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print
 >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >> (test))))
 >>
 >>
 >
 
 --90e6ba539e86e641f904d427ec1a
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 OK, I&#39;ll look at it right now...<br><br><div class=3D"gmail_quote">On F=
 ri, Jan 25, 2013 at 9:05 PM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D=
 "mailto:robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwest=
 ern.edu</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div dir=3D"ltr">Nadeem: do you have time to=
  look into this?<div><br></div><div>Robby</div></div><div class=3D"gmail_ex=
 tra">
 
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 7:40 PM,  <span =
 dir=3D"ltr">&lt;<a href=3D"mailto:clements@racket-lang.org" target=3D"_blan=
 k">clements@racket-lang.org</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 454" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13454</a><br>
 <br>
 Reported by John Clements for release: 5.3.2.2--2013-01-21(311ad36a/d)<br>
 <br>
 *** Description:<br>
 It looks to me like there&#39;s a bug in the<br>
 new paren-matching code.<br>
 <br>
 *** How to repeat:<br>
 1) in a fresh buffer, type a left paren. The buffer now looks like<br>
 (.)<br>
 , where the dot denotes the cursor.<br>
 2) now type another left paren. The buffer now looks like<br>
 ((.))<br>
 <br>
 3) now type a right paren. The inner pair of parens disappears, and we get =
 a buffer containing<br>
 ().<br>
 <br>
 I would have expected the cursor to move one space to the right, giving<br>
 (().)<br>
 <br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin oiseau.local 11.4.2 Darwin Kernel Version 11.4.2: Thu A=
 ug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64&quot; (=
 x86_64-macosx/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 317242436<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/clements/clements/collects&quot;<br>
 =C2=A0(&quot;.DS_Store&quot; &quot;.gitignore&quot; &quot;badger&quot; &quo=
 t;file-size-checker&quot; &quot;gradeserver&quot; &quot;info-domain&quot; &=
 quot;jbc-gnucash&quot; &quot;mboxrd-read&quot; &quot;midi&quot; &quot;mnemi=
 sis&quot; &quot;projector&quot; &quot;shelly&quot; &quot;template-tester&qu=
 ot; &quot;txomp&quot; &quot;web-utilities&quot;))<br>
 
 
 
 (&quot;/Users/clements/matthias/collects&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/clements/Library/Racket/<a href=3D"http://5.3.2.2/collects" t=
 arget=3D"_blank">5.3.2.2/collects</a>&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/clements/plt/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;2htdp&quot; &quot;algol60&quot; &quot;a=
 t-exp&quot; &quot;browser&quot; &quot;combinator-parser&quot; &quot;compati=
 bility&quot; &quot;compiler&quot; &quot;config&quot; &quot;data&quot; &quot=
 ;datalog&quot; &quot;db&quot; &quot;defaults&quot; &quot;deinprogramm&quot;=
  &quot;drracket&quot; &quot;drscheme&quot; &quot;dynext&quot; &quot;embedde=
 d-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &quot;ffi&quot; &quot;f=
 ile&quot; &quot;framework&quot; &quot;frtime&quot; &quot;future-visualizer&=
 quot; &quot;games&quot; &quot;graphics&quot; &quot;gui-debugger&quot; &quot=
 ;guibuilder&quot; &quot;handin-client&quot; &quot;handin-server&quot; &quot=
 ;help&quot; &quot;hierlist&quot; &quot;honu&quot; &quot;htdp&quot; &quot;ht=
 ml&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; &quot=
 ;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &quot;ma=
 cro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;meta&quot; &quot=
 ;mred&quot; &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;m=
 zlib&quot; &quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;p=
 arser-tools&quot; &quot;picturing-programs&quot; &quot;plai&quot; &quot;pla=
 net&quot; &quot;planet2&quot; &quot;plot&quot; &quot;preprocessor&quot; &qu=
 ot;profile&quot; &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot=
 ;racklog&quot; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &qu=
 ot;readline&quot; &quot;realm&quot; &quot;redex&quot; &quot;repo-time-stamp=
 &quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quot; &quot;schemeun=
 it&quot; &quot;scribble&quot; &quot;scribblings&quot; &quot;scriblib&quot; =
 &quot;setup&quot; &quot;sgl&quot; &quot;sirmail&quot; &quot;slatex&quot; &q=
 uot;slideshow&quot; &quot;srfi&quot; &quot;srpersist&quot; &quot;stepper&qu=
 ot; &quot;string-constants&quot; &quot;swindle&quot; &quot;syntax&quot; &qu=
 ot;syntax-color&quot; &quot;teachpack&quot; &quot;test-box-recov!<br>
 
 
 
 =C2=A0ery&quot; &quot;test-engine&quot; &quot;tests&quot; &quot;tex2page&qu=
 ot; &quot;texpict&quot; &quot;trace&quot; &quot;typed&quot; &quot;typed-rac=
 ket&quot; &quot;typed-scheme&quot; &quot;unstable&quot; &quot;version&quot;=
  &quot;waterworld&quot; &quot;web-server&quot; &quot;wxme&quot; &quot;xml&q=
 uot; &quot;xrepl&quot;))<br>
 
 
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 </blockquote></div><br>
 
 --90e6ba539e86e641f904d427ec1a--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Nadeem Abdul Hamid <nadeem@acm.org>, bugs <bugs@racket-lang.org>
Cc: "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 20:56:49 -0600

 --14dae9399a4dff85c804d428312a
 Content-Type: text/plain; charset=UTF-8
 
 It looks like you have to turn off a preference: Editing -> Racket ->
 Automatically adjust closing parens (disable this).
 
 It looks like this translates into the third argument to insert-close-paren.
 
 Robby
 
 
 On Fri, Jan 25, 2013 at 8:54 PM, Nadeem Abdul Hamid <nadeem@acm.org> wrote:
 
 > Should I be looking at the 'release' branch for this? I just tried this in
 > the 'master' branch but couldn't reproduce it, but I was a little behind
 > the main repository, so I've just checked out the latest from git and am
 > recompiling everything now just to make sure I'm up to date...
 >
 >
 >
 > On Fri, Jan 25, 2013 at 9:05 PM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 >
 >> Nadeem: do you have time to look into this?
 >>
 >> Robby
 >>
 >>
 >> On Fri, Jan 25, 2013 at 7:40 PM, <clements@racket-lang.org> wrote:
 >>
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=13454
 >>>
 >>> Reported by John Clements for release: 5.3.2.2--2013-01-21(311ad36a/d)
 >>>
 >>> *** Description:
 >>> It looks to me like there's a bug in the
 >>> new paren-matching code.
 >>>
 >>> *** How to repeat:
 >>> 1) in a fresh buffer, type a left paren. The buffer now looks like
 >>> (.)
 >>> , where the dot denotes the cursor.
 >>> 2) now type another left paren. The buffer now looks like
 >>> ((.))
 >>>
 >>> 3) now type a right paren. The inner pair of parens disappears, and we
 >>> get a buffer containing
 >>> ().
 >>>
 >>> I would have expected the cursor to move one space to the right, giving
 >>> (().)
 >>>
 >>>
 >>> *** Environment:
 >>> macosx "Darwin oiseau.local 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug
 >>> 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64"
 >>> (x86_64-macosx/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 317242436
 >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >>> (links #:user? #f #:root? #t) = ()
 >>> Planet2 (show):
 >>> Installation-wide:
 >>>  [none]
 >>> User-specific, all-version:
 >>>  [none]
 >>> User-specific, version-specific:
 >>>  [none]
 >>>
 >>>
 >>>
 >>> Collections:
 >>> ("/Users/clements/clements/collects"
 >>>  (".DS_Store" ".gitignore" "badger" "file-size-checker" "gradeserver"
 >>> "info-domain" "jbc-gnucash" "mboxrd-read" "midi" "mnemisis" "projector"
 >>> "shelly" "template-tester" "txomp" "web-utilities"))
 >>> ("/Users/clements/matthias/collects"
 >>>  (non-existent-path))
 >>> ("/Users/clements/Library/Racket/5.3.2.2/collects"
 >>>  (non-existent-path))
 >>> ("/Users/clements/plt/collects"
 >>>  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser"
 >>> "compatibility" "compiler" "config" "data" "datalog" "db" "defaults"
 >>> "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl"
 >>> "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games"
 >>> "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server"
 >>> "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain"
 >>> "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta"
 >>> "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"
 >>> "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot"
 >>> "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco"
 >>> "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp"
 >>> "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl"
 >>> "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper"
 >>> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 >>> "test-box-recov!
 >>>  ery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed"
 >>> "typed-racket" "typed-scheme" "unstable" "version" "waterworld"
 >>> "web-server" "wxme" "xml" "xrepl"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print
 >>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >>> (test))))
 >>>
 >>>
 >>
 >
 
 --14dae9399a4dff85c804d428312a
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">It looks like you have to turn off a preference: Editing -=
 &gt; Racket -&gt; Automatically adjust closing parens (disable this).<div><=
 br></div><div style>It looks like this translates into the third argument t=
 o insert-close-paren.</div>
 <div><br></div><div style>Robby</div></div><div class=3D"gmail_extra"><br><=
 br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 8:54 PM, Nadeem Abdul=
  Hamid <span dir=3D"ltr">&lt;<a href=3D"mailto:nadeem@acm.org" target=3D"_b=
 lank">nadeem@acm.org</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">Should I be looking at the &#39;release&#39;=
  branch for this? I just tried this in the &#39;master&#39; branch but coul=
 dn&#39;t reproduce it, but I was a little behind the main repository, so I&=
 #39;ve just checked out the latest from git and am recompiling everything n=
 ow just to make sure I&#39;m up to date...<div>
 
 
 
 <br></div><div><br><br><div class=3D"gmail_quote"><div class=3D"im">On Fri,=
  Jan 25, 2013 at 9:05 PM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D"ma=
 ilto:robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northwestern=
 .edu</a>&gt;</span> wrote:<br>
 
 
 
 </div><div><div class=3D"h5"><blockquote class=3D"gmail_quote" style=3D"mar=
 gin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr=
 ">Nadeem: do you have time to look into this?<div><br></div><div>Robby</div=
 ></div>
 <div class=3D"gmail_extra">
 
 
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 7:40 PM,  <span =
 dir=3D"ltr">&lt;<a href=3D"mailto:clements@racket-lang.org" target=3D"_blan=
 k">clements@racket-lang.org</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 454" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13454</a><br>
 <br>
 Reported by John Clements for release: 5.3.2.2--2013-01-21(311ad36a/d)<br>
 <br>
 *** Description:<br>
 It looks to me like there&#39;s a bug in the<br>
 new paren-matching code.<br>
 <br>
 *** How to repeat:<br>
 1) in a fresh buffer, type a left paren. The buffer now looks like<br>
 (.)<br>
 , where the dot denotes the cursor.<br>
 2) now type another left paren. The buffer now looks like<br>
 ((.))<br>
 <br>
 3) now type a right paren. The inner pair of parens disappears, and we get =
 a buffer containing<br>
 ().<br>
 <br>
 I would have expected the cursor to move one space to the right, giving<br>
 (().)<br>
 <br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin oiseau.local 11.4.2 Darwin Kernel Version 11.4.2: Thu A=
 ug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64&quot; (=
 x86_64-macosx/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 317242436<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/clements/clements/collects&quot;<br>
 =C2=A0(&quot;.DS_Store&quot; &quot;.gitignore&quot; &quot;badger&quot; &quo=
 t;file-size-checker&quot; &quot;gradeserver&quot; &quot;info-domain&quot; &=
 quot;jbc-gnucash&quot; &quot;mboxrd-read&quot; &quot;midi&quot; &quot;mnemi=
 sis&quot; &quot;projector&quot; &quot;shelly&quot; &quot;template-tester&qu=
 ot; &quot;txomp&quot; &quot;web-utilities&quot;))<br>
 
 
 
 
 
 (&quot;/Users/clements/matthias/collects&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/clements/Library/Racket/<a href=3D"http://5.3.2.2/collects" t=
 arget=3D"_blank">5.3.2.2/collects</a>&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/clements/plt/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;2htdp&quot; &quot;algol60&quot; &quot;a=
 t-exp&quot; &quot;browser&quot; &quot;combinator-parser&quot; &quot;compati=
 bility&quot; &quot;compiler&quot; &quot;config&quot; &quot;data&quot; &quot=
 ;datalog&quot; &quot;db&quot; &quot;defaults&quot; &quot;deinprogramm&quot;=
  &quot;drracket&quot; &quot;drscheme&quot; &quot;dynext&quot; &quot;embedde=
 d-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &quot;ffi&quot; &quot;f=
 ile&quot; &quot;framework&quot; &quot;frtime&quot; &quot;future-visualizer&=
 quot; &quot;games&quot; &quot;graphics&quot; &quot;gui-debugger&quot; &quot=
 ;guibuilder&quot; &quot;handin-client&quot; &quot;handin-server&quot; &quot=
 ;help&quot; &quot;hierlist&quot; &quot;honu&quot; &quot;htdp&quot; &quot;ht=
 ml&quot; &quot;icons&quot; &quot;images&quot; &quot;info-domain&quot; &quot=
 ;json&quot; &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &quot;ma=
 cro-debugger&quot; &quot;make&quot; &quot;math&quot; &quot;meta&quot; &quot=
 ;mred&quot; &quot;mrlib&quot; &quot;mysterx&quot; &quot;mzcom&quot; &quot;m=
 zlib&quot; &quot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;p=
 arser-tools&quot; &quot;picturing-programs&quot; &quot;plai&quot; &quot;pla=
 net&quot; &quot;planet2&quot; &quot;plot&quot; &quot;preprocessor&quot; &qu=
 ot;profile&quot; &quot;r5rs&quot; &quot;r6rs&quot; &quot;racket&quot; &quot=
 ;racklog&quot; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quot; &qu=
 ot;readline&quot; &quot;realm&quot; &quot;redex&quot; &quot;repo-time-stamp=
 &quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;scheme&quot; &quot;schemeun=
 it&quot; &quot;scribble&quot; &quot;scribblings&quot; &quot;scriblib&quot; =
 &quot;setup&quot; &quot;sgl&quot; &quot;sirmail&quot; &quot;slatex&quot; &q=
 uot;slideshow&quot; &quot;srfi&quot; &quot;srpersist&quot; &quot;stepper&qu=
 ot; &quot;string-constants&quot; &quot;swindle&quot; &quot;syntax&quot; &qu=
 ot;syntax-color&quot; &quot;teachpack&quot; &quot;test-box-recov!<br>
 
 
 
 
 
 =C2=A0ery&quot; &quot;test-engine&quot; &quot;tests&quot; &quot;tex2page&qu=
 ot; &quot;texpict&quot; &quot;trace&quot; &quot;typed&quot; &quot;typed-rac=
 ket&quot; &quot;typed-scheme&quot; &quot;unstable&quot; &quot;version&quot;=
  &quot;waterworld&quot; &quot;web-server&quot; &quot;wxme&quot; &quot;xml&q=
 uot; &quot;xrepl&quot;))<br>
 
 
 
 
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 </blockquote></div></div></div><br></div>
 </blockquote></div><br></div>
 
 --14dae9399a4dff85c804d428312a--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Nadeem Abdul Hamid <nadeem@acm.org>, bugs <bugs@racket-lang.org>
Cc: "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 21:18:26 -0600

 --e89a8fb201ac4b337704d4287fa6
 Content-Type: text/plain; charset=UTF-8
 
 I've not been able to make a small program demonstrate the problem, but it
 is the undo (in the (eq? smart-skip 'adjacent) case) that is editing the
 buffer.
 
 Robby
 
 --e89a8fb201ac4b337704d4287fa6
 Content-Type: text/html; charset=UTF-8
 
 <div dir="ltr">I&#39;ve not been able to make a small program demonstrate the problem, but it is the undo (in the (eq? smart-skip &#39;adjacent) case) that is editing the buffer.<div><br></div><div style>Robby</div></div>
 
 --e89a8fb201ac4b337704d4287fa6--
From: Nadeem Abdul Hamid <nadeem@acm.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 22:22:49 -0500

 --90e6ba1eff68d0a48b04d428906f
 Content-Type: text/plain; charset=UTF-8
 
 Yes, I figured it must be the undo... trying to trace it. Must be the
 interrupt-streak? argument of a begin-edit-sequence that is causing too
 much to be undone..
 
 
 On Fri, Jan 25, 2013 at 10:18 PM, Robby Findler <robby@eecs.northwestern.edu
 > wrote:
 
 > I've not been able to make a small program demonstrate the problem, but it
 > is the undo (in the (eq? smart-skip 'adjacent) case) that is editing the
 > buffer.
 >
 > Robby
 >
 
 --90e6ba1eff68d0a48b04d428906f
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Yes, I figured it must be the undo... trying to trace it. Must be the inter=
 rupt-streak? argument of a begin-edit-sequence that is causing too much to =
 be undone..<br>
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 10:18 PM, Robby =
 Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu=
 " target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><b=
 lockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px =
 #ccc solid;padding-left:1ex">
 
 <div dir=3D"ltr">I&#39;ve not been able to make a small program demonstrate=
  the problem, but it is the undo (in the (eq? smart-skip &#39;adjacent) cas=
 e) that is editing the buffer.<span class=3D"HOEnZb"><font color=3D"#888888=
 "><div>
 
 <br></div><div>Robby</div></font></span></div>
 </blockquote></div><br>
 
 --90e6ba1eff68d0a48b04d428906f--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Nadeem Abdul Hamid <nadeem@acm.org>
Cc: bugs <bugs@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 21:29:54 -0600

 --e89a8f839dfb519ab204d428a889
 Content-Type: text/plain; charset=UTF-8
 
 That should be related, but the code below doesn't seem to do it, tho.
 
 But maybe it doesn't matter-- perhaps the undo strategy is bad and we need
 to actually go find the paren by calling backward-containing-sexp instead.
 
 #lang racket
 (require framework)
 (define t (new racket:text%))
 (send t begin-edit-sequence #t #f)
 (send t insert "(())")
 (send t end-edit-sequence)
 (send t begin-edit-sequence #t #f)
 (send t set-position 2)
 (send t insert-close-paren 2 #\) #t #f 'adjacent)
 (send t end-edit-sequence)
 (send t get-text)
 (send t get-start-position)
 
 
 
 On Fri, Jan 25, 2013 at 9:22 PM, Nadeem Abdul Hamid <nadeem@acm.org> wrote:
 
 > Yes, I figured it must be the undo... trying to trace it. Must be the
 > interrupt-streak? argument of a begin-edit-sequence that is causing too
 > much to be undone..
 >
 >
 >
 > On Fri, Jan 25, 2013 at 10:18 PM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 >
 >> I've not been able to make a small program demonstrate the problem, but
 >> it is the undo (in the (eq? smart-skip 'adjacent) case) that is editing the
 >> buffer.
 >>
 >> Robby
 >>
 >
 >
 
 --e89a8f839dfb519ab204d428a889
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">That should be related, but the code below doesn&#39;t see=
 m to do it, tho.<div><div><br></div><div style>But maybe it doesn&#39;t mat=
 ter-- perhaps the undo strategy is bad and we need to actually go find the =
 paren by calling=C2=A0backward-containing-sexp instead.</div>
 <div><br></div><div>#lang racket</div><div>(require framework)</div><div>(d=
 efine t (new racket:text%))</div><div>(send t begin-edit-sequence #t #f)</d=
 iv><div>(send t insert &quot;(())&quot;)</div><div>(send t end-edit-sequenc=
 e)</div>
 <div>(send t begin-edit-sequence #t #f)</div><div>(send t set-position 2)</=
 div><div>(send t insert-close-paren 2 #\) #t #f &#39;adjacent)</div><div>(s=
 end t end-edit-sequence)</div><div>(send t get-text)</div><div>(send t get-=
 start-position)</div>
 </div><div><br></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Fri, Jan 25, 2013 at 9:22 PM, Nadeem Abdul Hamid <span dir=3D"lt=
 r">&lt;<a href=3D"mailto:nadeem@acm.org" target=3D"_blank">nadeem@acm.org</=
 a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex">Yes, I figured it must be the undo... trying to trace it. =
 Must be the interrupt-streak? argument of a begin-edit-sequence that is cau=
 sing too much to be undone..<div class=3D"">
 <div class=3D"h5"><br>
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 10:18 PM, Robby =
 Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu=
 " target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><b=
 lockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-le=
 ft-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;pad=
 ding-left:1ex">
 
 
 <div dir=3D"ltr">I&#39;ve not been able to make a small program demonstrate=
  the problem, but it is the undo (in the (eq? smart-skip &#39;adjacent) cas=
 e) that is editing the buffer.<span><font color=3D"#888888"><div>
 
 <br></div><div>Robby</div></font></span></div>
 </blockquote></div><br>
 </div></div></blockquote></div><br></div></div>
 
 --e89a8f839dfb519ab204d428a889--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Nadeem Abdul Hamid <nadeem@acm.org>
Cc: bugs <bugs@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 22:22:40 -0600

 --e89a8fb1f2aa0b418704d42965ce
 Content-Type: text/plain; charset=UTF-8
 
 How does this diff look to you?
 
 It fails at least one test, tho. I'm not seeing what's expected with this
 test, tho. Here's the transcript I get. Do you know what is going wrong?
 
 [robby@yanpu] ~/git/plt/collects/tests/framework$ ~/git/plt/bin/racket
 main.rkt racket.rkt
 >> admin:    saving prefs file
 /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd
 >> admin:                   to
 /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd.save
 >> admin:    saved prefs file
 >> schedule: beginning racket.rkt test suite
 >> schedule: FAILED racket:test-auto-parens-behavior
 literal-]-no-auto-parens:
   (11 11 "(list 1 #\\))")
 >> schedule: ran 75 tests
 >> admin:    restoring prefs file
 /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd.save
 >> admin:                      to
 /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd
 >> admin:    restored prefs file
 Test suites ended with exns ("racket.rkt")
 
 Thanks,
 Robby
 
 
 [robby@yanpu] ~/git/plt/collects/tests/framework$ git diff | cat
 diff --git a/collects/framework/private/color.rkt
 b/collects/framework/private/color.rkt
 index 17e83a9..51a11b9 100644
 --- a/collects/framework/private/color.rkt
 +++ b/collects/framework/private/color.rkt
 @@ -1045,19 +1045,20 @@ added get-regions
                    (flash-on to-pos (+ 1 to-pos)))))))))
 
 
 -    (inherit insert delete flash-on on-default-char set-position undo)
 +    (inherit insert delete flash-on on-default-char set-position
 get-character)
      ;; See docs
      ;; smart-skip : (or/c #f 'adjacent 'forward)
      (define/public (insert-close-paren pos char flash? fixup? [smart-skip
 #f])
        (begin-edit-sequence #t #f)  ;; to hide get-close-paren's temporary
 edits
        (define closers (map symbol->string (map cadr pairs)))
        (define closer
 -        (get-close-paren pos (if fixup? ;; Ensure preference for given
 character:
 -                                 (cons (string char) (remove (string char)
 closers))
 -                                 null)
 -                         ;; If the inserted preferred (i.e., given) paren
 doesn't parse
 -                         ;;  as a paren, then don't try to change it.
 -                         #f))
 +        (and fixup?
 +             (let ([bcs (backward-containing-sexp pos 0)])
 +               (and bcs
 +                    (> bcs 0)
 +                    (let ([a (assoc (string->symbol (string (get-character
 (- bcs 1))))
 +                                    pairs)])
 +                      (and a (symbol->string (cadr a))))))))
        (define insert-str (if closer closer (string char)))
        (define (insert)
          (for ([c (in-string insert-str)])
 @@ -1074,8 +1075,7 @@ added get-regions
               (find-next-close-paren pos closers))
             (cond
               [(eq? smart-skip 'adjacent)
 -              (end-edit-sequence)  ;; wraps up the net-zero editing
 changes done by get-close-paren etc.
 -              (undo)               ;; to avoid messing up the editor's
 modified state in case of a simple skip
 +              (end-edit-sequence)
                (if (and next-close-start next-close-adj?
                         (string=? insert-str next-close-str))
                    (skip next-close-end)
 @@ -1083,8 +1083,7 @@ added get-regions
               [(eq? smart-skip 'forward)
                (define-values (outer-close-start outer-close-end
 outer-close-str)
                  (find-next-outer-paren pos closers))
 -              (end-edit-sequence)  ;; wraps up the net-zero editing
 changes done by get-close-paren etc.
 -              (undo)               ;; to avoid messing up the editor's
 modified state in case of a simple skip
 +              (end-edit-sequence)
                (cond
                  [(and outer-close-start
                        (or fixup? (string=? insert-str outer-close-str)))
 @@ -1094,8 +1093,7 @@ added get-regions
                   (skip next-close-end)]
                  [else  (insert)])]
               [else
 -              (end-edit-sequence)  ;; wraps up the net-zero editing
 changes done by get-close-paren etc.
 -              (undo)               ;; to avoid messing up the editor's
 modified state in case of a simple skip
 +              (end-edit-sequence)
                (error 'insert-close-paren
                       (format "invalid smart-skip option: ~a"
 smart-skip))])]
            [else
 [robby@yanpu] ~/git/plt/collects/tests/framework$
 
 --e89a8fb1f2aa0b418704d42965ce
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">How does this diff look to you?<div><br></div><div style>I=
 t fails at least one test, tho. I&#39;m not seeing what&#39;s expected with=
  this test, tho. Here&#39;s the transcript I get. Do you know what is going=
  wrong?</div>
 <div style><br></div><div style><div>[robby@yanpu] ~/git/plt/collects/tests=
 /framework$ ~/git/plt/bin/racket main.rkt racket.rkt=C2=A0</div><div>&gt;&g=
 t; admin: =C2=A0 =C2=A0saving prefs file /Users/robby/Library/Preferences/o=
 rg.racket-lang.prefs.rktd</div>
 <div>&gt;&gt; admin: =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 to /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd.s=
 ave</div><div>&gt;&gt; admin: =C2=A0 =C2=A0saved prefs file</div><div>&gt;&=
 gt; schedule: beginning racket.rkt test suite</div><div>
 &gt;&gt; schedule: FAILED racket:test-auto-parens-behavior literal-]-no-aut=
 o-parens:</div><div>=C2=A0 (11 11 &quot;(list 1 #\\))&quot;)</div><div>&gt;=
 &gt; schedule: ran 75 tests</div><div>&gt;&gt; admin: =C2=A0 =C2=A0restorin=
 g prefs file /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd.sa=
 ve</div>
 <div>&gt;&gt; admin: =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0to /Users/robby/Library/Preferences/org.racket-lang=
 .prefs.rktd</div><div>&gt;&gt; admin: =C2=A0 =C2=A0restored prefs file</div=
 ><div>Test suites ended with exns (&quot;racket.rkt&quot;)</div>
 <div><br></div><div style>Thanks,</div>Robby</div><div><br></div><div><br><=
 /div><div><div>[robby@yanpu] ~/git/plt/collects/tests/framework$ git diff |=
  cat</div><div>diff --git a/collects/framework/private/color.rkt b/collects=
 /framework/private/color.rkt</div>
 <div>index 17e83a9..51a11b9 100644</div><div>--- a/collects/framework/priva=
 te/color.rkt</div><div>+++ b/collects/framework/private/color.rkt</div><div=
 >@@ -1045,19 +1045,20 @@ added get-regions</div><div>=C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(flash-on to-pos (+ 1 to-po=
 s)))))))))</div>
 <div>=C2=A0</div><div>=C2=A0</div><div>- =C2=A0 =C2=A0(inherit insert delet=
 e flash-on on-default-char set-position undo)</div><div>+ =C2=A0 =C2=A0(inh=
 erit insert delete flash-on on-default-char set-position get-character)</di=
 v><div>=C2=A0 =C2=A0 =C2=A0;; See docs</div>
 <div>=C2=A0 =C2=A0 =C2=A0;; smart-skip : (or/c #f &#39;adjacent &#39;forwar=
 d)</div><div>=C2=A0 =C2=A0 =C2=A0(define/public (insert-close-paren pos cha=
 r flash? fixup? [smart-skip #f])</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0(begi=
 n-edit-sequence #t #f) =C2=A0;; to hide get-close-paren&#39;s temporary edi=
 ts</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0(define closers (map symbol-&gt;string (map=
  cadr pairs)))</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0(define closer</div><di=
 v>- =C2=A0 =C2=A0 =C2=A0 =C2=A0(get-close-paren pos (if fixup? ;; Ensure pr=
 eference for given character:</div><div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 (cons (string char) (remove (string char) closers))</div>
 <div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 null)</div><div>- =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ;=
 ; If the inserted preferred (i.e., given) paren doesn&#39;t parse</div><div=
 >- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 ;; =C2=A0as a paren, then don&#39;t try to change it.</div>
 <div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 #f))</div><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0(and fixup?</=
 div><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (let ([bcs (backward-c=
 ontaining-sexp pos 0)])</div><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 (and bcs</div><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(&gt; bcs 0)</div>
 <div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0(let ([a (assoc (string-&gt;symbol (string (get-character (- bcs 1))))</=
 div><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0pairs)])</div=
 ><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0(and a (symbol-&gt;string (cadr a))))))))</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0(define insert-str (if closer closer (strin=
 g char)))</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0(define (insert)</div><div>=
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(for ([c (in-string insert-str)])</div><d=
 iv>@@ -1074,8 +1075,7 @@ added get-regions</div><div>=C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (find-next-close-paren pos closers))</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (cond</div><div>=C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(eq? smart-skip &#39;adjacent)</div=
 ><div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(end-edit-sequence)=
  =C2=A0;; wraps up the net-zero editing changes done by get-close-paren etc=
 .</div><div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(undo) =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ;; to avoid messing up the edito=
 r&#39;s modified state in case of a simple skip</div>
 <div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(end-edit-sequence)<=
 /div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(if (and n=
 ext-close-start next-close-adj?</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (string=3D? insert-str=
  next-close-str))</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0(skip next-close-end)</div>
 <div>@@ -1083,8 +1083,7 @@ added get-regions</div><div>=C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(eq? smart-skip &#39;forward)</div><div>=C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(define-values (outer-c=
 lose-start outer-close-end outer-close-str)</div><div>=C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(find-next-outer-paren pos closers=
 ))</div>
 <div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(end-edit-sequence) =
 =C2=A0;; wraps up the net-zero editing changes done by get-close-paren etc.=
 </div><div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(undo) =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ;; to avoid messing up the editor=
 &#39;s modified state in case of a simple skip</div>
 <div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(end-edit-sequence)<=
 /div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(cond</div=
 ><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[(and o=
 uter-close-start</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(or fixup? (string=3D? insert-str outer-=
 close-str)))</div><div>@@ -1094,8 +1093,7 @@ added get-regions</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (skip n=
 ext-close-end)]</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0[else =C2=A0(insert)])]</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 [else</div><div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0(end-edit-sequence) =C2=A0;; wraps up the net-zero editing cha=
 nges done by get-close-paren etc.</div>
 <div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(undo) =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ;; to avoid messing up the editor&#39;s=
  modified state in case of a simple skip</div><div>+ =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(end-edit-sequence)</div><div>=C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(error &#39;insert-close-paren</div>
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 (format &quot;invalid smart-skip option: ~a&quot; smart-skip))])]</d=
 iv><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[else</div><div>[robby@yan=
 pu] ~/git/plt/collects/tests/framework$=C2=A0</div></div><div><br></div></d=
 iv>
 
 --e89a8fb1f2aa0b418704d42965ce--
From: Nadeem Abdul Hamid <nadeem@acm.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 23:22:38 -0500

 --e89a8f13ec6cb7adf204d42966f7
 Content-Type: text/plain; charset=UTF-8
 
 OK, I haven't looked at how (undo) works, but I have a hypothesis that: if
 between a (begin-edit-sequence) ... (end-edit-sequence) no actual
 edits/insertions/deletions are carried out, then the (undo) actually undoes
 a prior edit sequence to this one that has no actual edits.
 
 If this hypothesis holds, then when fixup? is #f, get-close-paren doesn't
 actually do any of the insert/deletes that it does otherwise (it
 immediately produces #f). And so therefore, in the (eq? smart-skip
 'adjacent) case later on, the (undo) that follows (end-edit-sequence)
 causes a previous actual edit to be undone - which is the insertion of one
 pair of braces. So my proposed fix is:
 
 @@ -1075,7 +1075,7 @@ added get-regions
             (cond
               [(eq? smart-skip 'adjacent)
                (end-edit-sequence)  ;; wraps up the net-zero editing
 changes done by get-close-pare
 -              (undo)               ;; to avoid messing up the editor's
 modified state in case of a
 +              (when fixup? (undo)) ;; to avoid messing up the editor's
 modified state in case of a
                (if (and next-close-start next-close-adj?
 
 What do you think?
 
 (As an aside, the reason it doesn't work with your code below is probably
 because you're using insert, while in the interactive situation, actually
 what happens is that it's the insert-brace-pair function in racket.rkt
  that actually inserts the brace pairs, with a couple of (insert..)s
 wrapped up in an edit sequence. (?))
 
 
 On Fri, Jan 25, 2013 at 10:29 PM, Robby Findler <robby@eecs.northwestern.edu
 > wrote:
 
 > That should be related, but the code below doesn't seem to do it, tho.
 >
 > But maybe it doesn't matter-- perhaps the undo strategy is bad and we need
 > to actually go find the paren by calling backward-containing-sexp instead.
 >
 > #lang racket
 > (require framework)
 > (define t (new racket:text%))
 > (send t begin-edit-sequence #t #f)
 > (send t insert "(())")
 > (send t end-edit-sequence)
 > (send t begin-edit-sequence #t #f)
 > (send t set-position 2)
 > (send t insert-close-paren 2 #\) #t #f 'adjacent)
 > (send t end-edit-sequence)
 > (send t get-text)
 > (send t get-start-position)
 >
 >
 >
 > On Fri, Jan 25, 2013 at 9:22 PM, Nadeem Abdul Hamid <nadeem@acm.org>wrote:
 >
 >> Yes, I figured it must be the undo... trying to trace it. Must be the
 >> interrupt-streak? argument of a begin-edit-sequence that is causing too
 >> much to be undone..
 >>
 >>
 >>
 >> On Fri, Jan 25, 2013 at 10:18 PM, Robby Findler <
 >> robby@eecs.northwestern.edu> wrote:
 >>
 >>> I've not been able to make a small program demonstrate the problem, but
 >>> it is the undo (in the (eq? smart-skip 'adjacent) case) that is editing the
 >>> buffer.
 >>>
 >>> Robby
 >>>
 >>
 >>
 >
 
 --e89a8f13ec6cb7adf204d42966f7
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 OK, I haven&#39;t looked at how (undo) works, but I have a hypothesis that:=
  if between a (begin-edit-sequence) ... (end-edit-sequence) no actual edits=
 /insertions/deletions are carried out, then the (undo) actually undoes a pr=
 ior edit sequence to this one that has no actual edits. =C2=A0<div>
 
 <br></div><div>If this hypothesis holds, then when fixup? is #f, get-close-=
 paren doesn&#39;t actually do any of the insert/deletes that it does otherw=
 ise (it immediately produces #f). And so therefore, in the=C2=A0(eq? smart-=
 skip &#39;adjacent) case later on, the (undo) that follows (end-edit-sequen=
 ce) causes a previous actual edit to be undone - which is the insertion of =
 one pair of braces. So my proposed fix is:<div>
 
 <br></div><div><div>@@ -1075,7 +1075,7 @@ added get-regions</div><div>=C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (cond</div><div>=C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(eq? smart-skip &#39;adjacent)</div><div>=C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(end-edit-sequence) =C2=
 =A0;; wraps up the net-zero editing changes done by get-close-pare</div>
 
 <div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(undo) =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ;; to avoid messing up the editor&#39;s=
  modified state in case of a</div><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0(when fixup? (undo)) ;; to avoid messing up the editor&#39;s =
 modified state in case of a</div>
 
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(if (and next-c=
 lose-start next-close-adj?</div><div><br></div><div>What do you think?</div=
 ><div><br></div>(As an aside, the reason it doesn&#39;t work with your code=
  below is probably because you&#39;re using insert, while in the interactiv=
 e situation, actually what happens is that it&#39;s the=C2=A0insert-brace-p=
 air function in racket.rkt =C2=A0that actually inserts the brace pairs, wit=
 h a couple of (insert..)s wrapped up in an edit sequence. (?))<br>
 
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 10:29 PM, Robby =
 Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu=
 " target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><b=
 lockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px =
 #ccc solid;padding-left:1ex">
 
 <div dir=3D"ltr">That should be related, but the code below doesn&#39;t see=
 m to do it, tho.<div><div><br></div><div>But maybe it doesn&#39;t matter-- =
 perhaps the undo strategy is bad and we need to actually go find the paren =
 by calling=C2=A0backward-containing-sexp instead.</div>
 
 
 <div><br></div><div>#lang racket</div><div>(require framework)</div><div>(d=
 efine t (new racket:text%))</div><div>(send t begin-edit-sequence #t #f)</d=
 iv><div>(send t insert &quot;(())&quot;)</div><div>(send t end-edit-sequenc=
 e)</div>
 
 
 <div>(send t begin-edit-sequence #t #f)</div><div>(send t set-position 2)</=
 div><div>(send t insert-close-paren 2 #\) #t #f &#39;adjacent)</div><div>(s=
 end t end-edit-sequence)</div><div>(send t get-text)</div><div>(send t get-=
 start-position)</div>
 
 
 </div><div><div class=3D"h5"><div><br></div><div class=3D"gmail_extra"><br>=
 <br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 9:22 PM, Nadeem Abdu=
 l Hamid <span dir=3D"ltr">&lt;<a href=3D"mailto:nadeem@acm.org" target=3D"_=
 blank">nadeem@acm.org</a>&gt;</span> wrote:<br>
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex">Yes, I figured it must be the undo... trying to trace it. =
 Must be the interrupt-streak? argument of a begin-edit-sequence that is cau=
 sing too much to be undone..<div>
 
 
 <div><br>
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 10:18 PM, Robby =
 Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu=
 " target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><b=
 lockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-le=
 ft-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;pad=
 ding-left:1ex">
 
 
 
 
 <div dir=3D"ltr">I&#39;ve not been able to make a small program demonstrate=
  the problem, but it is the undo (in the (eq? smart-skip &#39;adjacent) cas=
 e) that is editing the buffer.<span><font color=3D"#888888"><div>
 
 <br></div><div>Robby</div></font></span></div>
 </blockquote></div><br>
 </div></div></blockquote></div><br></div></div></div></div>
 </blockquote></div><br></div></div>
 
 --e89a8f13ec6cb7adf204d42966f7--
From: Nadeem Abdul Hamid <nadeem@acm.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>,
        "clements@racket-lang.org" <clements@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 23:31:20 -0500

 --f46d04374b25d61ae004d4298564
 Content-Type: text/plain; charset=UTF-8
 
 Well, my hypothesis I think is invalid, based on the behavior of the
 following program, so I don't know why that tweak of mine works, although a
 test case does seem to be failing...  (I'm looking at the one that your
 code is failing.)
 
 #lang racket
 
 (require framework)
 (define t (new racket:text%))
 (send t begin-edit-sequence)
 (send t insert "(")
 (send t insert ")")
 (send t set-position 1)
 (send t end-edit-sequence)
 
 (send t begin-edit-sequence)
 (send t insert "(")
 (send t insert ")")
 (send t set-position 2)
 (send t end-edit-sequence)
 
 (send t begin-edit-sequence #t #f)
 (send t end-edit-sequence)
 (send t undo)
 (send t get-text)
 (send t get-start-position)
 
 
 
 
 
 
 On Fri, Jan 25, 2013 at 11:22 PM, Nadeem Abdul Hamid <nadeem@acm.org> wrote:
 
 > OK, I haven't looked at how (undo) works, but I have a hypothesis that: if
 > between a (begin-edit-sequence) ... (end-edit-sequence) no actual
 > edits/insertions/deletions are carried out, then the (undo) actually undoes
 > a prior edit sequence to this one that has no actual edits.
 >
 > If this hypothesis holds, then when fixup? is #f, get-close-paren doesn't
 > actually do any of the insert/deletes that it does otherwise (it
 > immediately produces #f). And so therefore, in the (eq? smart-skip
 > 'adjacent) case later on, the (undo) that follows (end-edit-sequence)
 > causes a previous actual edit to be undone - which is the insertion of one
 > pair of braces. So my proposed fix is:
 >
 > @@ -1075,7 +1075,7 @@ added get-regions
 >             (cond
 >               [(eq? smart-skip 'adjacent)
 >                (end-edit-sequence)  ;; wraps up the net-zero editing
 > changes done by get-close-pare
 > -              (undo)               ;; to avoid messing up the editor's
 > modified state in case of a
 > +              (when fixup? (undo)) ;; to avoid messing up the editor's
 > modified state in case of a
 >                (if (and next-close-start next-close-adj?
 >
 > What do you think?
 >
 > (As an aside, the reason it doesn't work with your code below is probably
 > because you're using insert, while in the interactive situation, actually
 > what happens is that it's the insert-brace-pair function in racket.rkt
 >  that actually inserts the brace pairs, with a couple of (insert..)s
 > wrapped up in an edit sequence. (?))
 >
 >
 >
 > On Fri, Jan 25, 2013 at 10:29 PM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 >
 >> That should be related, but the code below doesn't seem to do it, tho.
 >>
 >> But maybe it doesn't matter-- perhaps the undo strategy is bad and we
 >> need to actually go find the paren by calling backward-containing-sexp
 >> instead.
 >>
 >> #lang racket
 >> (require framework)
 >> (define t (new racket:text%))
 >> (send t begin-edit-sequence #t #f)
 >> (send t insert "(())")
 >> (send t end-edit-sequence)
 >> (send t begin-edit-sequence #t #f)
 >> (send t set-position 2)
 >> (send t insert-close-paren 2 #\) #t #f 'adjacent)
 >> (send t end-edit-sequence)
 >> (send t get-text)
 >> (send t get-start-position)
 >>
 >>
 >>
 >> On Fri, Jan 25, 2013 at 9:22 PM, Nadeem Abdul Hamid <nadeem@acm.org>wrote:
 >>
 >>> Yes, I figured it must be the undo... trying to trace it. Must be the
 >>> interrupt-streak? argument of a begin-edit-sequence that is causing too
 >>> much to be undone..
 >>>
 >>>
 >>>
 >>> On Fri, Jan 25, 2013 at 10:18 PM, Robby Findler <
 >>> robby@eecs.northwestern.edu> wrote:
 >>>
 >>>> I've not been able to make a small program demonstrate the problem, but
 >>>> it is the undo (in the (eq? smart-skip 'adjacent) case) that is editing the
 >>>> buffer.
 >>>>
 >>>> Robby
 >>>>
 >>>
 >>>
 >>
 >
 
 --f46d04374b25d61ae004d4298564
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Well, my hypothesis I think is invalid, based on the behavior of the follow=
 ing program, so I don&#39;t know why that tweak of mine works, although a t=
 est case does seem to be failing... =C2=A0(I&#39;m looking at the one that =
 your code is failing.)<div>
 
 <br></div><div><div>#lang racket</div><div><br></div><div>(require framewor=
 k)</div><div>(define t (new racket:text%))</div><div>(send t begin-edit-seq=
 uence)</div><div>(send t insert &quot;(&quot;)</div><div>(send t insert &qu=
 ot;)&quot;)</div>
 
 <div>(send t set-position 1)</div><div>(send t end-edit-sequence)</div><div=
 ><br></div><div>(send t begin-edit-sequence)</div><div>(send t insert &quot=
 ;(&quot;)</div><div>(send t insert &quot;)&quot;)</div><div>(send t set-pos=
 ition 2)</div>
 
 <div>(send t end-edit-sequence)</div><div><br></div><div>(send t begin-edit=
 -sequence #t #f)</div><div>(send t end-edit-sequence)</div><div>(send t und=
 o)</div><div>(send t get-text)</div><div>(send t get-start-position)</div>
 
 <div><br></div><div><br></div><div><br></div><div><br></div><div><br><br><d=
 iv class=3D"gmail_quote">On Fri, Jan 25, 2013 at 11:22 PM, Nadeem Abdul Ham=
 id <span dir=3D"ltr">&lt;<a href=3D"mailto:nadeem@acm.org" target=3D"_blank=
 ">nadeem@acm.org</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">OK, I haven&#39;t looked at how (undo) works=
 , but I have a hypothesis that: if between a (begin-edit-sequence) ... (end=
 -edit-sequence) no actual edits/insertions/deletions are carried out, then =
 the (undo) actually undoes a prior edit sequence to this one that has no ac=
 tual edits. =C2=A0<div>
 
 
 <br></div><div>If this hypothesis holds, then when fixup? is #f, get-close-=
 paren doesn&#39;t actually do any of the insert/deletes that it does otherw=
 ise (it immediately produces #f). And so therefore, in the=C2=A0(eq? smart-=
 skip &#39;adjacent) case later on, the (undo) that follows (end-edit-sequen=
 ce) causes a previous actual edit to be undone - which is the insertion of =
 one pair of braces. So my proposed fix is:<div>
 
 
 <br></div><div><div>@@ -1075,7 +1075,7 @@ added get-regions</div><div>=C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (cond</div><div>=C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(eq? smart-skip &#39;adjacent)</div><div>=C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(end-edit-sequence) =C2=
 =A0;; wraps up the net-zero editing changes done by get-close-pare</div>
 
 
 <div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(undo) =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ;; to avoid messing up the editor&#39;s=
  modified state in case of a</div><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0(when fixup? (undo)) ;; to avoid messing up the editor&#39;s =
 modified state in case of a</div>
 
 
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(if (and next-c=
 lose-start next-close-adj?</div><div><br></div><div>What do you think?</div=
 ><div><br></div>(As an aside, the reason it doesn&#39;t work with your code=
  below is probably because you&#39;re using insert, while in the interactiv=
 e situation, actually what happens is that it&#39;s the=C2=A0insert-brace-p=
 air function in racket.rkt =C2=A0that actually inserts the brace pairs, wit=
 h a couple of (insert..)s wrapped up in an edit sequence. (?))<div>
 
 <div class=3D"h5"><br>
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 10:29 PM, Robby =
 Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu=
 " target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><b=
 lockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px =
 #ccc solid;padding-left:1ex">
 
 
 <div dir=3D"ltr">That should be related, but the code below doesn&#39;t see=
 m to do it, tho.<div><div><br></div><div>But maybe it doesn&#39;t matter-- =
 perhaps the undo strategy is bad and we need to actually go find the paren =
 by calling=C2=A0backward-containing-sexp instead.</div>
 
 
 
 <div><br></div><div>#lang racket</div><div>(require framework)</div><div>(d=
 efine t (new racket:text%))</div><div>(send t begin-edit-sequence #t #f)</d=
 iv><div>(send t insert &quot;(())&quot;)</div><div>(send t end-edit-sequenc=
 e)</div>
 
 
 
 <div>(send t begin-edit-sequence #t #f)</div><div>(send t set-position 2)</=
 div><div>(send t insert-close-paren 2 #\) #t #f &#39;adjacent)</div><div>(s=
 end t end-edit-sequence)</div><div>(send t get-text)</div><div>(send t get-=
 start-position)</div>
 
 
 
 </div><div><div><div><br></div><div class=3D"gmail_extra"><br><br><div clas=
 s=3D"gmail_quote">On Fri, Jan 25, 2013 at 9:22 PM, Nadeem Abdul Hamid <span=
  dir=3D"ltr">&lt;<a href=3D"mailto:nadeem@acm.org" target=3D"_blank">nadeem=
 @acm.org</a>&gt;</span> wrote:<br>
 
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex">Yes, I figured it must be the undo... trying to trace it. =
 Must be the interrupt-streak? argument of a begin-edit-sequence that is cau=
 sing too much to be undone..<div>
 
 
 
 <div><br>
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 10:18 PM, Robby =
 Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu=
 " target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><b=
 lockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-le=
 ft-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;pad=
 ding-left:1ex">
 
 
 
 
 
 <div dir=3D"ltr">I&#39;ve not been able to make a small program demonstrate=
  the problem, but it is the undo (in the (eq? smart-skip &#39;adjacent) cas=
 e) that is editing the buffer.<span><font color=3D"#888888"><div>
 
 <br></div><div>Robby</div></font></span></div>
 </blockquote></div><br>
 </div></div></blockquote></div><br></div></div></div></div>
 </blockquote></div><br></div></div></div></div>
 </blockquote></div><br></div></div>
 
 --f46d04374b25d61ae004d4298564--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Nadeem Abdul Hamid <nadeem@acm.org>, bugs <bugs@racket-lang.org>
Cc: 
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 22:42:31 -0600

 --047d7b6774d01a284904d429aca4
 Content-Type: text/plain; charset=UTF-8
 
 Ah! Thanks! I'll look into that more tomorrow. Probably I need to do
 something like check if the insertion point is inside an atomic expression
 or not and, if it is, do something different. (Maybe.)
 
 Robby
 
 
 On Fri, Jan 25, 2013 at 10:38 PM, Nadeem Abdul Hamid <nadeem@acm.org> wrote:
 
 > This test yours is failing is, given the situation:
 >
 > (list 1 #\.)
 >
 > where the . is the cursor. Typing a ] should result in
 >
 > (list 1 #\].)
 >
 > but instead it looks like it's resulting in
 >
 > (list 1 #\).)
 >
 > So, it's changing a typed ']' into a ')' when it shouldn't be (and in this
 > test cases, the automatic parenthesis setting is off).
 >
 >
 > On Fri, Jan 25, 2013 at 11:22 PM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 >
 >> It fails at least one test, tho. I'm not seeing what's expected with this
 >> test, tho. Here's the transcript I get. Do you know what is going wrong?
 >>
 >> [robby@yanpu] ~/git/plt/collects/tests/framework$ ~/git/plt/bin/racket
 >> main.rkt racket.rkt
 >> >> admin:    saving prefs file
 >> /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd
 >> >> admin:                   to
 >> /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd.save
 >> >> admin:    saved prefs file
 >> >> schedule: beginning racket.rkt test suite
 >> >> schedule: FAILED racket:test-auto-parens-behavior
 >> literal-]-no-auto-parens:
 >>   (11 11 "(list 1 #\\))")
 >> >> schedule: ran 75 tests
 >> >> admin:    restoring prefs file
 >> /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd.save
 >> >> admin:                      to
 >> /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd
 >> >> admin:    restored prefs file
 >> Test suites ended with exns ("racket.rkt")
 >>
 >
 >
 >
 >
 > Nadeem Abdul Hamid
 > Associate Professor, Computer Science
 > Berry College, Mount Berry, GA 30149
 > http://cs.berry.edu/~nhamid/
 >
 
 --047d7b6774d01a284904d429aca4
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>Ah! Thanks! I&#39;ll look into that more tomorrow. Pr=
 obably I need to do something like check if the insertion point is inside a=
 n atomic expression or not and, if it is, do something different. (Maybe.)<=
 br>
 <br></div>Robby<br></div><div class=3D"gmail_extra"><br><br><div class=3D"g=
 mail_quote">On Fri, Jan 25, 2013 at 10:38 PM, Nadeem Abdul Hamid <span dir=
 =3D"ltr">&lt;<a href=3D"mailto:nadeem@acm.org" target=3D"_blank">nadeem@acm=
 .org</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div>This test yours is failing is, given th=
 e situation:</div><div><br></div><div>(list 1 #\.)</div><div><br></div><div=
 >
 where the . is the cursor. Typing a ] should result in=C2=A0</div><div><br>=
 </div><div>(list 1 #\].)</div><div>
 
 <br></div><div>but instead it looks like it&#39;s resulting in=C2=A0</div><=
 div><br></div><div>(list 1 #\).)</div><div><br></div><div>So, it&#39;s chan=
 ging a typed &#39;]&#39; into a &#39;)&#39; when it shouldn&#39;t be (and i=
 n this test cases, the automatic parenthesis setting is off).</div>
 <div class=3D"HOEnZb"><div class=3D"h5">
 
 <div><br></div><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 11:22=
  PM, Robby Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.north=
 western.edu" target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> w=
 rote:<br>
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div>It fails at least one test, tho. I&#39;=
 m not seeing what&#39;s expected with this test, tho. Here&#39;s the transc=
 ript I get. Do you know what is going wrong?</div>
 
 
 
 <div><br></div><div><div>[robby@yanpu] ~/git/plt/collects/tests/framework$ =
 ~/git/plt/bin/racket main.rkt racket.rkt=C2=A0</div><div>&gt;&gt; admin: =
 =C2=A0 =C2=A0saving prefs file /Users/robby/Library/Preferences/org.racket-=
 lang.prefs.rktd</div>
 
 
 
 <div>&gt;&gt; admin: =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 to /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd.s=
 ave</div><div>&gt;&gt; admin: =C2=A0 =C2=A0saved prefs file</div><div>&gt;&=
 gt; schedule: beginning racket.rkt test suite</div><div>
 
 
 
 &gt;&gt; schedule: FAILED racket:test-auto-parens-behavior literal-]-no-aut=
 o-parens:</div><div>=C2=A0 (11 11 &quot;(list 1 #\\))&quot;)</div><div>&gt;=
 &gt; schedule: ran 75 tests</div><div>&gt;&gt; admin: =C2=A0 =C2=A0restorin=
 g prefs file /Users/robby/Library/Preferences/org.racket-lang.prefs.rktd.sa=
 ve</div>
 
 
 
 <div>&gt;&gt; admin: =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0to /Users/robby/Library/Preferences/org.racket-lang=
 .prefs.rktd</div><div>&gt;&gt; admin: =C2=A0 =C2=A0restored prefs file</div=
 ><div>Test suites ended with exns (&quot;racket.rkt&quot;)</div>
 
 
 
 <div></div></div></blockquote></div><br><br><br clear=3D"all"></div></div><=
 span class=3D"HOEnZb"><font color=3D"#888888"><div><div><br></div>Nadeem Ab=
 dul Hamid<br>Associate Professor, Computer Science<br>Berry College, Mount =
 Berry, GA 30149<br>
 <a href=3D"http://cs.berry.edu/~nhamid/" target=3D"_blank">http://cs.berry.=
 edu/~nhamid/</a></div>
 
 
 </font></span></blockquote></div><br></div>
 
 --047d7b6774d01a284904d429aca4--
From: Nadeem Abdul Hamid <nadeem@acm.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Fri, 25 Jan 2013 23:54:08 -0500

 --14dae934032f5be7a904d429d721
 Content-Type: text/plain; charset=UTF-8
 
 Well, anyway with the  (when fixup? (undo)) tweak, all the test cases do
 pass. I did find one thing that you should add to the
 collects/tests/framework/racket.rkt tests, though, because I wrote them all
 assuming that the fixup-parens preference was enabled:
 
 --- a/collects/tests/framework/racket.rkt
 +++ b/collects/tests/framework/racket.rkt
 @@ -112,6 +112,7 @@
                [f (new frame% [label ""] [width 600] [height 600])]
                [ec (new editor-canvas% [parent f] [editor t])])
           (preferences:set 'framework:automatic-parens ,auto-parens?)
 +         (preferences:set 'framework:fixup-parens #t)
           (send f reflow-container)
           (send t insert ,initial-text)
 
 
 So that means, a bunch of other test cases are actually needed for the #f
 case of that preference...
 
 
 On Fri, Jan 25, 2013 at 11:31 PM, Nadeem Abdul Hamid <nadeem@acm.org> wrote:
 
 > Well, my hypothesis I think is invalid, based on the behavior of the
 > following program, so I don't know why that tweak of mine works, although a
 > test case does seem to be failing...  (I'm looking at the one that your
 > code is failing.)
 >
 > #lang racket
 >
 > (require framework)
 > (define t (new racket:text%))
 > (send t begin-edit-sequence)
 > (send t insert "(")
 > (send t insert ")")
 > (send t set-position 1)
 > (send t end-edit-sequence)
 >
 > (send t begin-edit-sequence)
 > (send t insert "(")
 > (send t insert ")")
 > (send t set-position 2)
 > (send t end-edit-sequence)
 >
 > (send t begin-edit-sequence #t #f)
 > (send t end-edit-sequence)
 > (send t undo)
 > (send t get-text)
 > (send t get-start-position)
 >
 >
 >
 >
 >
 >
 > On Fri, Jan 25, 2013 at 11:22 PM, Nadeem Abdul Hamid <nadeem@acm.org>wrote:
 >
 >> OK, I haven't looked at how (undo) works, but I have a hypothesis that:
 >> if between a (begin-edit-sequence) ... (end-edit-sequence) no actual
 >> edits/insertions/deletions are carried out, then the (undo) actually undoes
 >> a prior edit sequence to this one that has no actual edits.
 >>
 >> If this hypothesis holds, then when fixup? is #f, get-close-paren doesn't
 >> actually do any of the insert/deletes that it does otherwise (it
 >> immediately produces #f). And so therefore, in the (eq? smart-skip
 >> 'adjacent) case later on, the (undo) that follows (end-edit-sequence)
 >> causes a previous actual edit to be undone - which is the insertion of one
 >> pair of braces. So my proposed fix is:
 >>
 >> @@ -1075,7 +1075,7 @@ added get-regions
 >>             (cond
 >>               [(eq? smart-skip 'adjacent)
 >>                (end-edit-sequence)  ;; wraps up the net-zero editing
 >> changes done by get-close-pare
 >> -              (undo)               ;; to avoid messing up the editor's
 >> modified state in case of a
 >> +              (when fixup? (undo)) ;; to avoid messing up the editor's
 >> modified state in case of a
 >>                (if (and next-close-start next-close-adj?
 >>
 >> What do you think?
 >>
 >> (As an aside, the reason it doesn't work with your code below is probably
 >> because you're using insert, while in the interactive situation, actually
 >> what happens is that it's the insert-brace-pair function in racket.rkt
 >>  that actually inserts the brace pairs, with a couple of (insert..)s
 >> wrapped up in an edit sequence. (?))
 >>
 >>
 >>
 >> On Fri, Jan 25, 2013 at 10:29 PM, Robby Findler <
 >> robby@eecs.northwestern.edu> wrote:
 >>
 >>> That should be related, but the code below doesn't seem to do it, tho.
 >>>
 >>> But maybe it doesn't matter-- perhaps the undo strategy is bad and we
 >>> need to actually go find the paren by calling backward-containing-sexp
 >>> instead.
 >>>
 >>> #lang racket
 >>> (require framework)
 >>> (define t (new racket:text%))
 >>> (send t begin-edit-sequence #t #f)
 >>> (send t insert "(())")
 >>> (send t end-edit-sequence)
 >>> (send t begin-edit-sequence #t #f)
 >>> (send t set-position 2)
 >>> (send t insert-close-paren 2 #\) #t #f 'adjacent)
 >>> (send t end-edit-sequence)
 >>> (send t get-text)
 >>> (send t get-start-position)
 >>>
 >>>
 >>>
 >>> On Fri, Jan 25, 2013 at 9:22 PM, Nadeem Abdul Hamid <nadeem@acm.org>wrote:
 >>>
 >>>> Yes, I figured it must be the undo... trying to trace it. Must be the
 >>>> interrupt-streak? argument of a begin-edit-sequence that is causing too
 >>>> much to be undone..
 >>>>
 >>>>
 >>>>
 >>>> On Fri, Jan 25, 2013 at 10:18 PM, Robby Findler <
 >>>> robby@eecs.northwestern.edu> wrote:
 >>>>
 >>>>> I've not been able to make a small program demonstrate the problem,
 >>>>> but it is the undo (in the (eq? smart-skip 'adjacent) case) that is editing
 >>>>> the buffer.
 >>>>>
 >>>>> Robby
 >>>>>
 >>>>
 >>>>
 >>>
 >>
 >
 
 --14dae934032f5be7a904d429d721
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Well, anyway with the =C2=A0(when fixup? (undo)) tweak, all the test cases =
 do pass. I did find one thing that you should add to the collects/tests/fra=
 mework/racket.rkt tests, though, because I wrote them all assuming that the=
  fixup-parens preference was enabled:<div>
 
 
 <br></div><div><div><div>--- a/collects/tests/framework/racket.rkt</div><di=
 v>+++ b/collects/tests/framework/racket.rkt</div><div>@@ -112,6 +112,7 @@</=
 div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[f (new fra=
 me% [label &quot;&quot;] [width 600] [height 600])]</div>
 
 
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[ec (new editor=
 -canvas% [parent f] [editor t])])</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 (preferences:set &#39;framework:automatic-parens ,auto-parens?)</div><d=
 iv>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 (preferences:set &#39;framework:fixup-pare=
 ns #t)</div>
 
 
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (send f reflow-container)</div><div=
 >=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (send t insert ,initial-text)</div></di=
 v><div><br></div><div><br></div><div>So that means, a bunch of other test c=
 ases are actually needed for the #f case of that preference...=C2=A0</div>
 
 
 <div><br></div><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 11:31=
  PM, Nadeem Abdul Hamid <span dir=3D"ltr">&lt;<a href=3D"mailto:nadeem@acm.=
 org" target=3D"_blank">nadeem@acm.org</a>&gt;</span> wrote:<br><blockquote =
 class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid=
 ;padding-left:1ex">
 
 
 Well, my hypothesis I think is invalid, based on the behavior of the follow=
 ing program, so I don&#39;t know why that tweak of mine works, although a t=
 est case does seem to be failing... =C2=A0(I&#39;m looking at the one that =
 your code is failing.)<div>
 
 
 
 <br></div><div><div><div>#lang racket</div><div><br></div><div>(require fra=
 mework)</div><div>(define t (new racket:text%))</div></div><div>(send t beg=
 in-edit-sequence)</div><div>(send t insert &quot;(&quot;)</div>
 <div>(send t insert &quot;)&quot;)</div>
 <div>(send t set-position 1)</div><div>(send t end-edit-sequence)</div><div=
 ><br></div><div>(send t begin-edit-sequence)</div><div>(send t insert &quot=
 ;(&quot;)</div><div>(send t insert &quot;)&quot;)</div><div>
 <div>(send t set-position 2)</div>
 <div>(send t end-edit-sequence)</div><div><br></div><div>(send t begin-edit=
 -sequence #t #f)</div></div><div>(send t end-edit-sequence)</div><div>(send=
  t undo)</div><div><div>(send t get-text)</div><div>(send t get-start-posit=
 ion)</div>
 
 
 
 <div><br></div><div><br></div><div><br></div><div><br></div></div><div><div=
 ><div><br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 11:22 PM, =
 Nadeem Abdul Hamid <span dir=3D"ltr">&lt;<a href=3D"mailto:nadeem@acm.org" =
 target=3D"_blank">nadeem@acm.org</a>&gt;</span> wrote:<br>
 
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">OK, I haven&#39;t looked at how (undo) works=
 , but I have a hypothesis that: if between a (begin-edit-sequence) ... (end=
 -edit-sequence) no actual edits/insertions/deletions are carried out, then =
 the (undo) actually undoes a prior edit sequence to this one that has no ac=
 tual edits. =C2=A0<div>
 
 
 
 
 <br></div><div>If this hypothesis holds, then when fixup? is #f, get-close-=
 paren doesn&#39;t actually do any of the insert/deletes that it does otherw=
 ise (it immediately produces #f). And so therefore, in the=C2=A0(eq? smart-=
 skip &#39;adjacent) case later on, the (undo) that follows (end-edit-sequen=
 ce) causes a previous actual edit to be undone - which is the insertion of =
 one pair of braces. So my proposed fix is:<div>
 
 
 
 
 <br></div><div><div>@@ -1075,7 +1075,7 @@ added get-regions</div><div>=C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (cond</div><div>=C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(eq? smart-skip &#39;adjacent)</div><div>=C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(end-edit-sequence) =C2=
 =A0;; wraps up the net-zero editing changes done by get-close-pare</div>
 
 
 
 
 <div>- =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(undo) =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ;; to avoid messing up the editor&#39;s=
  modified state in case of a</div><div>+ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0(when fixup? (undo)) ;; to avoid messing up the editor&#39;s =
 modified state in case of a</div>
 
 
 
 
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(if (and next-c=
 lose-start next-close-adj?</div><div><br></div><div>What do you think?</div=
 ><div><br></div>(As an aside, the reason it doesn&#39;t work with your code=
  below is probably because you&#39;re using insert, while in the interactiv=
 e situation, actually what happens is that it&#39;s the=C2=A0insert-brace-p=
 air function in racket.rkt =C2=A0that actually inserts the brace pairs, wit=
 h a couple of (insert..)s wrapped up in an edit sequence. (?))<div>
 
 
 
 <div><br>
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 10:29 PM, Robby =
 Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu=
 " target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><b=
 lockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px =
 #ccc solid;padding-left:1ex">
 
 
 
 
 <div dir=3D"ltr">That should be related, but the code below doesn&#39;t see=
 m to do it, tho.<div><div><br></div><div>But maybe it doesn&#39;t matter-- =
 perhaps the undo strategy is bad and we need to actually go find the paren =
 by calling=C2=A0backward-containing-sexp instead.</div>
 
 
 
 
 
 <div><br></div><div>#lang racket</div><div>(require framework)</div><div>(d=
 efine t (new racket:text%))</div><div>(send t begin-edit-sequence #t #f)</d=
 iv><div>(send t insert &quot;(())&quot;)</div><div>(send t end-edit-sequenc=
 e)</div>
 
 
 
 
 
 <div>(send t begin-edit-sequence #t #f)</div><div>(send t set-position 2)</=
 div><div>(send t insert-close-paren 2 #\) #t #f &#39;adjacent)</div><div>(s=
 end t end-edit-sequence)</div><div>(send t get-text)</div><div>(send t get-=
 start-position)</div>
 
 
 
 
 
 </div><div><div><div><br></div><div class=3D"gmail_extra"><br><br><div clas=
 s=3D"gmail_quote">On Fri, Jan 25, 2013 at 9:22 PM, Nadeem Abdul Hamid <span=
  dir=3D"ltr">&lt;<a href=3D"mailto:nadeem@acm.org" target=3D"_blank">nadeem=
 @acm.org</a>&gt;</span> wrote:<br>
 
 
 
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex">Yes, I figured it must be the undo... trying to trace it. =
 Must be the interrupt-streak? argument of a begin-edit-sequence that is cau=
 sing too much to be undone..<div>
 
 
 
 
 
 <div><br>
 <br><br><div class=3D"gmail_quote">On Fri, Jan 25, 2013 at 10:18 PM, Robby =
 Findler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu=
 " target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><b=
 lockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-le=
 ft-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;pad=
 ding-left:1ex">
 
 
 
 
 
 
 
 <div dir=3D"ltr">I&#39;ve not been able to make a small program demonstrate=
  the problem, but it is the undo (in the (eq? smart-skip &#39;adjacent) cas=
 e) that is editing the buffer.<span><font color=3D"#888888"><div>
 
 <br></div><div>Robby</div></font></span></div>
 </blockquote></div><br>
 </div></div></blockquote></div><br></div></div></div></div>
 </blockquote></div><br></div></div></div></div>
 </blockquote></div><br></div></div></div></div>
 </blockquote></div><br></div>
 
 --14dae934032f5be7a904d429d721--
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Sat, 26 Jan 2013 08:49:33 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/f90eb33d67
State changed from "open" to "closed" by robby@racket-lang.org at Sat, 26 Jan 2013 08:49:33 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/f90eb33d67

----------
A commit by robby@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/54fad8546a
From: Robby Findler <robby@eecs.northwestern.edu>
To: Nadeem Abdul Hamid <nadeem@acm.org>
Cc: bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/13454: right-paren causes deletion
Date: Sat, 26 Jan 2013 08:14:25 -0600

 --14dae93994294cd54c04d431a900
 Content-Type: text/plain; charset=UTF-8
 
 I've just pushed a commit that changes get-close-paren so that it doesn't
 edit the buffer (basically the same one as last night, but with the tweak
 suggested by your test case). It passes all of the tests.
 
 I think it is a better strategy because there are lots of callbacks and
 things associated with editing the buffer so doing edits that are
 "unexpected" and then undoing them seems fragile to me.
 
 Anyways, if you have a chance to have a look, I'd love your opinion.
 
 Here's the url to the commit:
 
 http://git.racket-lang.org/plt/commit/54fad8546ac1045136f547fa1ec47418060e9b14
 
 Robby
 
 --14dae93994294cd54c04d431a900
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I&#39;ve just pushed a commit that changes get-close-paren=
  so that it doesn&#39;t edit the buffer (basically the same one as last nig=
 ht, but with the tweak suggested by your test case). It passes all of the t=
 ests.<div>
 <br></div><div style>I think it is a better strategy because there are lots=
  of callbacks and things associated with editing the buffer so doing edits =
 that are &quot;unexpected&quot; and then undoing them seems fragile to me.<=
 /div>
 <div style><br></div><div style>Anyways, if you have a chance to have a loo=
 k, I&#39;d love your opinion.<br></div><div style><br></div><div style>Here=
 &#39;s the url to the commit:</div><div style><br></div><div style><a href=
 =3D"http://git.racket-lang.org/plt/commit/54fad8546ac1045136f547fa1ec474180=
 60e9b14">http://git.racket-lang.org/plt/commit/54fad8546ac1045136f547fa1ec4=
 7418060e9b14</a><br>
 </div><div style><br></div><div style>Robby</div><div style><br></div></div=
 >
 
 --14dae93994294cd54c04d431a900--

----------
A commit by robby@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/aaf4a2e16d
