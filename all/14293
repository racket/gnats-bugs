From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jan 15 12:35:37 2014
Received: from mail-ob0-f179.google.com (mail-ob0-f179.google.com [209.85.214.179])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s0FHZa44025236
	for <bugs@bugs.plt-scheme.org>; Wed, 15 Jan 2014 12:35:36 -0500
Message-Id: <201401151735.s0FHZYEb025223@winooski.ccs.neu.edu>
Date: Wed, 15 Jan 2014 12:35:34 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: unconstrained-domain-> is slower than ->

>Number:         14293
>Category:       all
>Synopsis:       unconstrained-domain-> is slower than ->
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jan 15 12:36:01 -0500 2014
>Last-Modified:  Wed Jan 15 12:48:01 -0500 2014
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
>Description:
I would expect that unconstrained-domain-> to be at least as fast as ->, but that is not the case.
>How-To-Repeat:
#lang racket


(module m racket
  (provide
    (contract-out
      [foo (unconstrained-domain-> boolean?)]
      [bar 
        (() (any/c) . ->* . boolean?)]))
  (define (foo [x #f]) (not x))
  (define (bar [x #f]) (not x)))


(require 'm)

(define (rand-bool)
  (< (random) 0.5))

(define N 100000)
(for ((j 5))
  (collect-garbage)
  (collect-garbage)
  (collect-garbage)
  (time
    (for ((i (in-range N)))
      (foo (rand-bool))))
  (collect-garbage)
  (collect-garbage)
  (collect-garbage)
  (time
    (for ((i (in-range N)))
      (bar (rand-bool)))))

>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14293: unconstrained-domain-> is slower than ->
Date: Wed, 15 Jan 2014 11:39:23 -0600

 --047d7b471e5c217d2d04f005ca95
 Content-Type: text/plain; charset=UTF-8
 
 Woah: do you actually have a real use for that one? (It is slower because
 it didn't receive the same -> treatment in the last round of contract
 improvements, I believe.)
 
 Robby
 
 
 On Wed, Jan 15, 2014 at 11:36 AM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14293
 >
 > Reported by Eric Dobson for release: HEAD
 >
 > *** Description:
 > I would expect that unconstrained-domain-> to be at least as fast as ->,
 > but that is not the case.
 >
 > *** How to repeat:
 > #lang racket
 >
 >
 > (module m racket
 >   (provide
 >     (contract-out
 >       [foo (unconstrained-domain-> boolean?)]
 >       [bar
 >         (() (any/c) . ->* . boolean?)]))
 >   (define (foo [x #f]) (not x))
 >   (define (bar [x #f]) (not x)))
 >
 >
 > (require 'm)
 >
 > (define (rand-bool)
 >   (< (random) 0.5))
 >
 > (define N 100000)
 > (for ((j 5))
 >   (collect-garbage)
 >   (collect-garbage)
 >   (collect-garbage)
 >   (time
 >     (for ((i (in-range N)))
 >       (foo (rand-bool))))
 >   (collect-garbage)
 >   (collect-garbage)
 >   (collect-garbage)
 >   (time
 >     (for ((i (in-range N)))
 >       (bar (rand-bool)))))
 >
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5)
 > AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
 >
 >
 
 --047d7b471e5c217d2d04f005ca95
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Woah: do you actually have a real use for that one? (It is=
  slower because it didn&#39;t receive the same -&gt; treatment in the last =
 round of contract improvements, I believe.)<div><br></div><div>Robby</div>
 </div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Wed,=
  Jan 15, 2014 at 11:36 AM,  <span dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.=
 dobson@gmail.com" target=3D"_blank">eric.n.dobson@gmail.com</a>&gt;</span> =
 wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 293" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14293</a><br>
 <br>
 Reported by Eric Dobson for release: HEAD<br>
 <br>
 *** Description:<br>
 I would expect that unconstrained-domain-&gt; to be at least as fast as -&g=
 t;, but that is not the case.<br>
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 <br>
 (module m racket<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0 (contract-out<br>
 =C2=A0 =C2=A0 =C2=A0 [foo (unconstrained-domain-&gt; boolean?)]<br>
 =C2=A0 =C2=A0 =C2=A0 [bar<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (() (any/c) . -&gt;* . boolean?)]))<br>
 =C2=A0 (define (foo [x #f]) (not x))<br>
 =C2=A0 (define (bar [x #f]) (not x)))<br>
 <br>
 <br>
 (require &#39;m)<br>
 <br>
 (define (rand-bool)<br>
 =C2=A0 (&lt; (random) 0.5))<br>
 <br>
 (define N 100000)<br>
 (for ((j 5))<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (time<br>
 =C2=A0 =C2=A0 (for ((i (in-range N)))<br>
 =C2=A0 =C2=A0 =C2=A0 (foo (rand-bool))))<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (collect-garbage)<br>
 =C2=A0 (time<br>
 =C2=A0 =C2=A0 (for ((i (in-range N)))<br>
 =C2=A0 =C2=A0 =C2=A0 (bar (rand-bool)))))<br>
 <br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.3=
 6 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36<br>
 <br>
 </blockquote></div><br></div>
 
 --047d7b471e5c217d2d04f005ca95--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14293: unconstrained-domain-> is slower than ->
Date: Wed, 15 Jan 2014 11:47:15 -0600

 --089e011847023c9bd704f005e64a
 Content-Type: text/plain; charset=UTF-8
 
 Oh. That seems unlikely to be faster (especially if you put opt/c on it).
 
 But I'll try fixing up unconstraind-domain-> to be sure (probably not
 today).
 
 Robby
 
 
 On Wed, Jan 15, 2014 at 11:45 AM, Eric Dobson <eric.n.dobson@gmail.com>wrote:
 
 > I have a use if it is faster. The majority of functions coming in to
 > TR just need an arity check.
 >
 > Example:
 > A value with the type (-> Boolean Boolean) entering the typed world
 > currently gets the contract (-> any/c boolean?). I wanted to test if
 > (and/c (procedure-arity-includes/c 1) (unconstrained-domain->
 > boolean?)) was faster.
 >
 > On Wed, Jan 15, 2014 at 9:39 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > Woah: do you actually have a real use for that one? (It is slower
 > because it
 > > didn't receive the same -> treatment in the last round of contract
 > > improvements, I believe.)
 > >
 > > Robby
 > >
 > >
 > > On Wed, Jan 15, 2014 at 11:36 AM, <eric.n.dobson@gmail.com> wrote:
 > >>
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14293
 > >>
 > >> Reported by Eric Dobson for release: HEAD
 > >>
 > >> *** Description:
 > >> I would expect that unconstrained-domain-> to be at least as fast as ->,
 > >> but that is not the case.
 > >>
 > >> *** How to repeat:
 > >> #lang racket
 > >>
 > >>
 > >> (module m racket
 > >>   (provide
 > >>     (contract-out
 > >>       [foo (unconstrained-domain-> boolean?)]
 > >>       [bar
 > >>         (() (any/c) . ->* . boolean?)]))
 > >>   (define (foo [x #f]) (not x))
 > >>   (define (bar [x #f]) (not x)))
 > >>
 > >>
 > >> (require 'm)
 > >>
 > >> (define (rand-bool)
 > >>   (< (random) 0.5))
 > >>
 > >> (define N 100000)
 > >> (for ((j 5))
 > >>   (collect-garbage)
 > >>   (collect-garbage)
 > >>   (collect-garbage)
 > >>   (time
 > >>     (for ((i (in-range N)))
 > >>       (foo (rand-bool))))
 > >>   (collect-garbage)
 > >>   (collect-garbage)
 > >>   (collect-garbage)
 > >>   (time
 > >>     (for ((i (in-range N)))
 > >>       (bar (rand-bool)))))
 > >>
 > >>
 > >> *** Environment:
 > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5)
 > >> AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
 > >>
 > >
 >
 
 --089e011847023c9bd704f005e64a
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Oh. That seems unlikely to be faster (especially if you pu=
 t opt/c on it).<div><br></div><div>But I&#39;ll try fixing up unconstraind-=
 domain-&gt; to be sure (probably not today).<br><div><br></div><div>Robby</=
 div>
 </div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">O=
 n Wed, Jan 15, 2014 at 11:45 AM, Eric Dobson <span dir=3D"ltr">&lt;<a href=
 =3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@gmail.c=
 om</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I have a use if it is faster. The majority o=
 f functions coming in to<br>
 TR just need an arity check.<br>
 <br>
 Example:<br>
 A value with the type (-&gt; Boolean Boolean) entering the typed world<br>
 currently gets the contract (-&gt; any/c boolean?). I wanted to test if<br>
 (and/c (procedure-arity-includes/c 1) (unconstrained-domain-&gt;<br>
 boolean?)) was faster.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Wed, Jan 15, 2014 at 9:39 AM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt; Woah: do you actually have a real use for that one? (It is slower beca=
 use it<br>
 &gt; didn&#39;t receive the same -&gt; treatment in the last round of contr=
 act<br>
 &gt; improvements, I believe.)<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Wed, Jan 15, 2014 at 11:36 AM, &lt;<a href=3D"mailto:eric.n.dobson@=
 gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&am=
 p;pr=3D14293" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D14293</a><br>
 &gt;&gt;<br>
 &gt;&gt; Reported by Eric Dobson for release: HEAD<br>
 &gt;&gt;<br>
 &gt;&gt; *** Description:<br>
 &gt;&gt; I would expect that unconstrained-domain-&gt; to be at least as fa=
 st as -&gt;,<br>
 &gt;&gt; but that is not the case.<br>
 &gt;&gt;<br>
 &gt;&gt; *** How to repeat:<br>
 &gt;&gt; #lang racket<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; (module m racket<br>
 &gt;&gt; =C2=A0 (provide<br>
 &gt;&gt; =C2=A0 =C2=A0 (contract-out<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 [foo (unconstrained-domain-&gt; boolean?)]<br=
 >
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 [bar<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 (() (any/c) . -&gt;* . boolean?)]))<br=
 >
 &gt;&gt; =C2=A0 (define (foo [x #f]) (not x))<br>
 &gt;&gt; =C2=A0 (define (bar [x #f]) (not x)))<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; (require &#39;m)<br>
 &gt;&gt;<br>
 &gt;&gt; (define (rand-bool)<br>
 &gt;&gt; =C2=A0 (&lt; (random) 0.5))<br>
 &gt;&gt;<br>
 &gt;&gt; (define N 100000)<br>
 &gt;&gt; (for ((j 5))<br>
 &gt;&gt; =C2=A0 (collect-garbage)<br>
 &gt;&gt; =C2=A0 (collect-garbage)<br>
 &gt;&gt; =C2=A0 (collect-garbage)<br>
 &gt;&gt; =C2=A0 (time<br>
 &gt;&gt; =C2=A0 =C2=A0 (for ((i (in-range N)))<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (foo (rand-bool))))<br>
 &gt;&gt; =C2=A0 (collect-garbage)<br>
 &gt;&gt; =C2=A0 (collect-garbage)<br>
 &gt;&gt; =C2=A0 (collect-garbage)<br>
 &gt;&gt; =C2=A0 (time<br>
 &gt;&gt; =C2=A0 =C2=A0 (for ((i (in-range N)))<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (bar (rand-bool)))))<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; *** Environment:<br>
 &gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5)<br>
 &gt;&gt; AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/=
 537.36<br>
 &gt;&gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --089e011847023c9bd704f005e64a--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14293: unconstrained-domain-> is slower than ->
Date: Wed, 15 Jan 2014 09:45:21 -0800

 I have a use if it is faster. The majority of functions coming in to
 TR just need an arity check.
 
 Example:
 A value with the type (-> Boolean Boolean) entering the typed world
 currently gets the contract (-> any/c boolean?). I wanted to test if
 (and/c (procedure-arity-includes/c 1) (unconstrained-domain->
 boolean?)) was faster.
 
 On Wed, Jan 15, 2014 at 9:39 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Woah: do you actually have a real use for that one? (It is slower because it
 > didn't receive the same -> treatment in the last round of contract
 > improvements, I believe.)
 >
 > Robby
 >
 >
 > On Wed, Jan 15, 2014 at 11:36 AM, <eric.n.dobson@gmail.com> wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14293
 >>
 >> Reported by Eric Dobson for release: HEAD
 >>
 >> *** Description:
 >> I would expect that unconstrained-domain-> to be at least as fast as ->,
 >> but that is not the case.
 >>
 >> *** How to repeat:
 >> #lang racket
 >>
 >>
 >> (module m racket
 >>   (provide
 >>     (contract-out
 >>       [foo (unconstrained-domain-> boolean?)]
 >>       [bar
 >>         (() (any/c) . ->* . boolean?)]))
 >>   (define (foo [x #f]) (not x))
 >>   (define (bar [x #f]) (not x)))
 >>
 >>
 >> (require 'm)
 >>
 >> (define (rand-bool)
 >>   (< (random) 0.5))
 >>
 >> (define N 100000)
 >> (for ((j 5))
 >>   (collect-garbage)
 >>   (collect-garbage)
 >>   (collect-garbage)
 >>   (time
 >>     (for ((i (in-range N)))
 >>       (foo (rand-bool))))
 >>   (collect-garbage)
 >>   (collect-garbage)
 >>   (collect-garbage)
 >>   (time
 >>     (for ((i (in-range N)))
 >>       (bar (rand-bool)))))
 >>
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5)
 >> AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
 >>
 >
