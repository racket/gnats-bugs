From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Mar 13 19:30:33 2013
Received: from mail-oa0-f44.google.com (mail-oa0-f44.google.com [209.85.219.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2DNUUqI013248
	for <bugs@bugs.plt-scheme.org>; Wed, 13 Mar 2013 19:30:30 -0400
Message-Id: <201303132330.r2DNURTE013243@champlain.ccs.neu.edu>
Date: Wed, 13 Mar 2013 19:30:27 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Multiple problems in "racket/place"

>Number:         13599
>Category:       all
>Synopsis:       Multiple problems in "racket/place"
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Mar 13 19:32:01 -0400 2013
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Any
>Description:
1. In "racket/place/distributed.rkt" there is a piece of code that
   uses `regexp-split' with "#:;" -- which looks like a typo for
   #:rx";".  (Also, the other string should be a regexp; and also,
   that code is misindented to a point that I'd take points off for
   it in a homework...)

2. More importantly, the code should use `path-list-string->path-list'
   instead of using regexps.

3. In `spawn-remote-racket-node', there is code that constructs a
   command line as a list of strings.  In the second case, there is
   a single string with spaces in it:
     "-lm racket/place/distributed/launch spawn"
   It would be much better to be uniform and have that specified as
   separate strings.  It just happens that ssh treats the command
   part as something that gets sent as a string, but it looks like
   something that code should not rely on.

4. The code starts ssh naively, with no flags.  It should definitely
   include some safety flags like "-x", "-a", "-k", "-T", etc.

5. The code is broken on windows -- since it doesn't look for an
   ".exe" suffix.

6. Looking at how things run, I think 

7. There is a "racket/place/distributed/examples" directory -- and
   that's pretty much the only core piece of code with a directory
   of examples.  It's better to move it all into the documentation
   instead of a bunch of files, or maybe put them in a separate
   directory.  (Another option is to have a new convention for
   "examples" directories, but that's a global change, and in some
   cases the convention would be different -- like the directory in
   redex.)

8. As a side-comment, there is one place that uses `let-values' which
   looks questionable -- why not `define-values' the identifiers
   instead of banging them?  It seems that using simple definitions
   is better, with readable field names that would be used as the
   values for `subprocess'.  For example, replace the `i' keyword
   with `input', and have a locally defined `i' with the result of
   `subprocess'.  And there are things like the `s' keyword that seem
   unused.

   But if there is some reason to do it this way, then using
   `set!-values' is shorter.
>How-To-Repeat:

>Fix:
