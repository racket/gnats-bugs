From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Aug 24 11:19:53 2010
Received: from mail-yw0-f44.google.com (mail-yw0-f44.google.com [209.85.213.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o7OFJpe4014724
	for <bugs@bugs.plt-scheme.org>; Tue, 24 Aug 2010 11:19:51 -0400
Message-Id: <201008241519.o7OFJmkd014714@champlain.ccs.neu.edu>
Date: Tue, 24 Aug 2010 11:19:48 -0400
From: vanmeule@roadrunner.com
To: bugs@racket-lang.org
Subject: vectors with single quote causes parser to hang

>Number:         11126
>Category:       all
>Synopsis:       vectors with single quote causes parser to hang
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Aug 24 11:20:01 -0400 2010
>Closed-Date:    Tue Aug 24 21:06:52 -0400 2010
>Last-Modified:  Tue Aug 24 21:06:52 -0400 2010
>Originator:     Andre van Meulebrouck
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1
>Environment:
???
>Description:
(Submitting a bug on behalf of an email sent by Andre.  Andre: for future reference, it is much better to send bugs through DrRacket (see the help menu), or otherwise through the web interface at bugs.racket-lang.org)
>How-To-Repeat:
Welcome to DrRacket, version 5.0.1 [3m].

Language: Pretty Big [custom]; memory limit: 128 MB.

> #(1 2 3)

#(1 2 3)

; the following will cause DrRacket to seemingly hang (using a Windows 7
machine)

> #(1 2 . 3)


Note:  I just thought you might want to know about this as it might =
indicate
an unexpected token during parsing that isn't handled.


The only reason I notice such edge cases is because my F# coded lazy Scheme
parser uses pattern matching and thus F# automatically checks all
permutations and tells me about any gaps in my pattern matches.  Hence I try
to cover all the bases for everything that could possibly happen during
parsing; often I use DrRacket to find out what DrRacket would do.
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: bugs@racket-lang.org
Cc: vanmeule@roadrunner.com, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11126: vectors with single quote causes parser to hang
Date: Tue, 24 Aug 2010 09:29:13 -0600

 This is mostly the old confusion that a reader-level syntax error makes
 DrRacket treat Return as inserting a newline --- and effectively wait
 for the user to go back and fix the syntax error, which is easily
 mistaken for DrRacket being stuck.
 
 Sorry if I'm repeating an old discussion, but why doesn't DrRacket
 insert a newline only if the current expression is incomplete in the
 sense of `exn:fail:read:eof'?
 
 At Tue, 24 Aug 2010 11:20:02 -0400, vanmeule@roadrunner.com wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=11126
 > 
 > Reported by Andre van Meulebrouck for release: 5.0.1
 > 
 > *** Description:
 > (Submitting a bug on behalf of an email sent by Andre.  Andre: for future 
 > reference, it is much better to send bugs through DrRacket (see the help 
 > menu), or otherwise through the web interface at bugs.racket-lang.org)
 > 
 > *** How to repeat:
 > Welcome to DrRacket, version 5.0.1 [3m].
 > 
 > Language: Pretty Big [custom]; memory limit: 128 MB.
 > 
 > > #(1 2 3)
 > 
 > #(1 2 3)
 > 
 > ; the following will cause DrRacket to seemingly hang (using a Windows 7
 > machine)
 > 
 > > #(1 2 . 3)
 > 
 > 
 > Note:  I just thought you might want to know about this as it might =
 > indicate
 > an unexpected token during parsing that isn't handled.
 > 
 > 
 > The only reason I notice such edge cases is because my F# coded lazy Scheme
 > parser uses pattern matching and thus F# automatically checks all
 > permutations and tells me about any gaps in my pattern matches.  Hence I try
 > to cover all the bases for everything that could possibly happen during
 > parsing; often I use DrRacket to find out what DrRacket would do.
 > 
 > *** Environment:
 > ???
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org, vanmeule@roadrunner.com, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11126: vectors with single quote causes parser to hang
Date: Tue, 24 Aug 2010 11:40:17 -0400

 On Aug 24, Matthew Flatt wrote:
 > This is mostly the old confusion that a reader-level syntax error
 > makes DrRacket treat Return as inserting a newline --- and
 > effectively wait for the user to go back and fix the syntax error,
 > which is easily mistaken for DrRacket being stuck.
 > 
 > Sorry if I'm repeating an old discussion, but why doesn't DrRacket
 > insert a newline only if the current expression is incomplete in the
 > sense of `exn:fail:read:eof'?
 
 That was exactly what I suggested to do recently -- instead of the
 current behavior that silently swallows all read errors and waits for
 them to be fixed instead.  (And the funny thing is that I don't
 remember lots of related issues in the past, but since we talked about
 it there were 2-3 of them -- and I didn't even need to plant people in
 the audience...)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: =?iso-8859-1?Q?Andr=E9_van_Meulebrouck?= <vanmeule@roadrunner.com>
To: "'Eli Barzilay'" <eli@barzilay.org>,
        "'Matthew Flatt'" <mflatt@cs.utah.edu>
Cc: <bugs@racket-lang.org>, <nobody@racket-lang.org>,
        <bug-notification@racket-lang.org>
Subject: RE: [racket-bug] all/11126: vectors with single quote causes parser to hang
Date: Tue, 24 Aug 2010 12:38:19 -0700

 Two thoughts on this: 
 
 1) This one begs for typos since this is so close legal entries (see
 examples below).  Hence it might be nice to remove something that might
 cause potential confusion.
 2) When I do correct the error and insert a new carriage return (to again
 request a result); the cursor is then not positioned after the result
 (unless I first clean up any whitespace characters previously inserted).
 
 > '(1 2 . 3) ;legal and reasonable
 (1 2 . 3)
 > #(1 2 . 3) ;not legal, but perhaps a typo someone might actually make
 > #(1 2 .3) ;legal and reasonable
 #(1 2 0.3)
 > #(1 2 . 3) ;oops, a very understandable typo
 
 -----Original Message-----
 From: Eli Barzilay [mailto:eli@barzilay.org] 
 Sent: Tuesday, August 24, 2010 8:40 AM
 To: Matthew Flatt
 Cc: bugs@racket-lang.org; vanmeule@roadrunner.com; nobody@racket-lang.org;
 bug-notification@racket-lang.org
 Subject: Re: [racket-bug] all/11126: vectors with single quote causes parser
 to hang
 
 On Aug 24, Matthew Flatt wrote:
 > This is mostly the old confusion that a reader-level syntax error
 > makes DrRacket treat Return as inserting a newline --- and
 > effectively wait for the user to go back and fix the syntax error,
 > which is easily mistaken for DrRacket being stuck.
 > 
 > Sorry if I'm repeating an old discussion, but why doesn't DrRacket
 > insert a newline only if the current expression is incomplete in the
 > sense of `exn:fail:read:eof'?
 
 That was exactly what I suggested to do recently -- instead of the
 current behavior that silently swallows all read errors and waits for
 them to be fixed instead.  (And the funny thing is that I don't
 remember lots of related issues in the past, but since we talked about
 it there were 2-3 of them -- and I didn't even need to plant people in
 the audience...)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org, vanmeule@roadrunner.com, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11126: vectors with single quote causes parser
 to hang
Date: Tue, 24 Aug 2010 17:45:40 -0500

 On Tue, Aug 24, 2010 at 10:29 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > This is mostly the old confusion that a reader-level syntax error makes
 > DrRacket treat Return as inserting a newline --- and effectively wait
 > for the user to go back and fix the syntax error, which is easily
 > mistaken for DrRacket being stuck.
 >
 > Sorry if I'm repeating an old discussion, but why doesn't DrRacket
 > insert a newline only if the current expression is incomplete in the
 > sense of `exn:fail:read:eof'?
 
 Looks like there was a bug and that that was what was intended in the
 code. I've pushed a repair and hopefully this will help with some of
 the confusion.
 
 
 On Tue, Aug 24, 2010 at 10:40 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Aug 24, Matthew Flatt wrote:
 >> This is mostly the old confusion that a reader-level syntax error
 >> makes DrRacket treat Return as inserting a newline --- and
 >> effectively wait for the user to go back and fix the syntax error,
 >> which is easily mistaken for DrRacket being stuck.
 >>
 >> Sorry if I'm repeating an old discussion, but why doesn't DrRacket
 >> insert a newline only if the current expression is incomplete in the
 >> sense of `exn:fail:read:eof'?
 >
 > That was exactly what I suggested to do recently -- instead of the
 > current behavior that silently swallows all read errors and waits for
 > them to be fixed instead.  (And the funny thing is that I don't
 > remember lots of related issues in the past, but since we talked about
 > it there were 2-3 of them -- and I didn't even need to plant people in
 > the audience...)
 
 I try to read your emails carefully, but I never got this from them.
 
 This is JFYI. (I don't care to read an explanation of how it was
 there, unless you *really* want to tell me .... this is just meant to
 point out that it can be hard to communicate.)
 
 Robby
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Tue, 24 Aug 2010 21:06:52 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5de6ff2ada
State changed from "open" to "closed" by robby@racket-lang.org at Tue, 24 Aug 2010 21:06:52 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5de6ff2ada
