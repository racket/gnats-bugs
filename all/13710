From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Apr 25 09:57:22 2013
Received: from mail-oa0-f45.google.com (mail-oa0-f45.google.com [209.85.219.45])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r3PDvJvC000362
	for <bugs@bugs.plt-scheme.org>; Thu, 25 Apr 2013 09:57:19 -0400
Message-Id: <201304251357.r3PDvHSa000355@champlain.ccs.neu.edu>
Date: Thu, 25 Apr 2013 09:57:17 -0400
From: robby@racket-lang.org
To: bugs@racket-lang.org
Subject: hash? in TR

>Number:         13710
>Category:       all
>Synopsis:       hash? in TR
>Class:          sw-bug
>Responsible:    stamourv
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Apr 25 10:00:01 -0400 2013
>Closed-Date:    Thu Apr 25 17:29:17 -0400 2013
>Last-Modified:  Thu Apr 25 17:29:17 -0400 2013
>Originator:     Robby Findler
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4.5--2013-04-24(951538ab/d)
>Environment:
macosx "Darwin wireless-165-124-117-23.nuwlan.northwestern.edu 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 593927812
Links: (links) = ("mini-hdl"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.4.5):
 [none]



Collections:
("/Users/robby/Library/Racket/5.3.4.5/collects"
 (non-existent-path))
("/Users/robby/git/exp/plt/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "pkg" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace" "typed" "typed-racket" "!
 typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Sam asked me to file this as a bug report.

This program:

#lang typed/racket

(: convert-it (Any -> (HashTable Symbol Number)))
(define (convert-it a)
  (if (hash? a)
      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any Any) a)])
        (values 'x 1))
      (error 'convert-it "not a hash ~s" a)))

produces 

Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
Language: typed/racket; memory limit: 128 MB.
. Type Checker: Expected (HashTable Any Any), but got (Unknown Type: #(struct:HashtableTop 368 #(struct:combined-frees #hasheq() ()) #(struct:combined-frees #hasheq() ()) #f hash)) in: a
> 

but it seems like it should typecheck.
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: robby@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 10:20:01 -0400

 On Apr 25, 2013, at 10:00 AM, robby@racket-lang.org wrote:
 
 > #lang typed/racket
 > 
 > (: convert-it (Any -> (HashTable Symbol Number)))
 > (define (convert-it a)
 >  (if (hash? a)
 >      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any Any) a)])
 >        (values 'x 1))
 >      (error 'convert-it "not a hash ~s" a)))
 
 in-hash-keys is not used properly here. 
 
 Do you mean this: 
 
 (define (convert-it a)
  (if (hash? a)
      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys ((inst a (HashTable Any Any))))])
        (values 'x 1))
      (error 'convert-it "not a hash ~s" a)))
 
 If so, the following smaller program shows what you want to do: 
 
 (: f : Any -> Any)
 (define (f a)
   (inst a (HashTable Any Any)))
 
 (: h : (HashTable Any Any))
 (define h (make-immutable-hash '((a . 2))))
 
 (f h)
 
 But now you see that 'inst' is about instantiating polymorphic constructions. And finally, if this makes sense, perhaps you wanted to write: 
 
 (: convert-it (Any -> (HashTable Symbol Number)))
 (define (convert-it a)
  (if (hash? a)
      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys (cast a (HashTable Any Any)))])
        (values 'x 1))
      (error 'convert-it "not a hash ~s" a)))
 
 But fi I am off, let me know. 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: "robby@racket-lang.org" <robby@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 09:21:39 -0500

 --001a11c20b82022a2a04db30235e
 Content-Type: text/plain; charset=UTF-8
 
 I don't think that I used inst improperly here. It is a polymorphic
 function where I supply the "domain" and "range" type of the hash and I get
 a monomorphic version of in-hash-keys.
 
 I thought that inst should be something that accepts an argument with a
 polymorphic type and instantiates the polymorphic type by supplying
 arguments to forall. In this example
 
 (: f : Any -> Any)
 (define (f a)
   (inst a (HashTable Any Any)))
 
 you seem to be putting a non-polymorphic type into the first argument to
 'inst' and TR gives me this error, as expected:
 
 Type Checker: Cannot instantiate non-polymorphic type Any in: a
 
 pointing at the first argument to 'inst'.
 
 But the larger point is that if I ask hash? of a value then I think I
 should know that it has the type (HashTable Any Any) in the then branch.
 
 (My larger problem was properly solved with 'cast' -- this PR is just
 fallout from earlier failed attempts.)
 
 Robby
 
 
 On Thursday, April 25, 2013, Matthias Felleisen wrote:
 
 >
 > On Apr 25, 2013, at 10:00 AM, robby@racket-lang.org <javascript:;> wrote:
 >
 > > #lang typed/racket
 > >
 > > (: convert-it (Any -> (HashTable Symbol Number)))
 > > (define (convert-it a)
 > >  (if (hash? a)
 > >      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any
 > Any) a)])
 > >        (values 'x 1))
 > >      (error 'convert-it "not a hash ~s" a)))
 >
 > in-hash-keys is not used properly here.
 >
 > Do you mean this:
 >
 > (define (convert-it a)
 >  (if (hash? a)
 >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys ((inst a
 > (HashTable Any Any))))])
 >        (values 'x 1))
 >      (error 'convert-it "not a hash ~s" a)))
 >
 > If so, the following smaller program shows what you want to do:
 >
 > (: f : Any -> Any)
 > (define (f a)
 >   (inst a (HashTable Any Any)))
 >
 > (: h : (HashTable Any Any))
 > (define h (make-immutable-hash '((a . 2))))
 >
 > (f h)
 >
 > But now you see that 'inst' is about instantiating polymorphic
 > constructions. And finally, if this makes sense, perhaps you wanted to
 > write:
 >
 > (: convert-it (Any -> (HashTable Symbol Number)))
 > (define (convert-it a)
 >  (if (hash? a)
 >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys (cast a
 > (HashTable Any Any)))])
 >        (values 'x 1))
 >      (error 'convert-it "not a hash ~s" a)))
 >
 > But fi I am off, let me know.
 >
 >
 
 --001a11c20b82022a2a04db30235e
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div>I don&#39;t think that I used inst improperly here. It is a polymorphi=
 c function where I supply the &quot;domain&quot; and &quot;range&quot; type=
  of the hash and I get a monomorphic version of in-hash-keys.=C2=A0</div><d=
 iv>
 <br></div><div>I thought that inst should be something that accepts an argu=
 ment with a polymorphic type and instantiates the polymorphic type by suppl=
 ying arguments to forall. In this example<br><br>(: f : Any -&gt; Any)<br>
 (define (f a)<br>=C2=A0 (inst a (HashTable Any Any)))</div><div><br></div><=
 div>you seem to be putting a non-polymorphic type into the first argument t=
 o &#39;inst&#39; and TR gives me this error, as expected:</div><div><br></d=
 iv>
 <div><div>Type Checker: Cannot instantiate non-polymorphic type Any in: a</=
 div><div><br></div><div>pointing at the first argument to &#39;inst&#39;.</=
 div><div><br></div><div>But the larger point is that if I ask hash? of a va=
 lue then I think I should know that it has the type (HashTable Any Any) in =
 the then branch.</div>
 <div><br></div><div>(My larger problem was properly solved with &#39;cast&#=
 39; -- this PR is just fallout from earlier failed attempts.)</div><div><br=
 ></div><div>Robby</div><div><br></div><br>On Thursday, April 25, 2013, Matt=
 hias Felleisen  wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><br>
 On Apr 25, 2013, at 10:00 AM, <a href=3D"javascript:;" onclick=3D"_e(event,=
  &#39;cvml&#39;, &#39;robby@racket-lang.org&#39;)">robby@racket-lang.org</a=
 > wrote:<br>
 <br>
 &gt; #lang typed/racket<br>
 &gt;<br>
 &gt; (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 &gt; (define (convert-it a)<br>
 &gt; =C2=A0(if (hash? a)<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k ((inst =
 in-hash-keys Any Any) a)])<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&quot; a=
 )))<br>
 <br>
 in-hash-keys is not used properly here.<br>
 <br>
 Do you mean this:<br>
 <br>
 (define (convert-it a)<br>
 =C2=A0(if (hash? a)<br>
 =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k (in-hash-key=
 s ((inst a (HashTable Any Any))))])<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&quot; a)))<b=
 r>
 <br>
 If so, the following smaller program shows what you want to do:<br>
 <br>
 (: f : Any -&gt; Any)<br>
 (define (f a)<br>
 =C2=A0 (inst a (HashTable Any Any)))<br>
 <br>
 (: h : (HashTable Any Any))<br>
 (define h (make-immutable-hash &#39;((a . 2))))<br>
 <br>
 (f h)<br>
 <br>
 But now you see that &#39;inst&#39; is about instantiating polymorphic cons=
 tructions. And finally, if this makes sense, perhaps you wanted to write:<b=
 r>
 <br>
 (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 (define (convert-it a)<br>
 =C2=A0(if (hash? a)<br>
 =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k (in-hash-key=
 s (cast a (HashTable Any Any)))])<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&quot; a)))<b=
 r>
 <br>
 But fi I am off, let me know.<br>
 <br>
 </blockquote></div>
 
 --001a11c20b82022a2a04db30235e--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: "robby@racket-lang.org" <robby@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 09:23:29 -0500

 --047d7b3442e49d4d7904db3029ca
 Content-Type: text/plain; charset=UTF-8
 
 On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > I don't think that I used inst improperly here. It is a polymorphic
 > function where I supply the "domain" and "range" type of the hash and I get
 > a monomorphic version of in-hash-keys.
 >
 >
 Urgh. Editos. The "it" in the beginning of this sentence is meant to refer
 to in-hash-keys, not inst.
 
 
 > I thought that inst should be something that accepts an argument with a
 > polymorphic type and instantiates the polymorphic type by supplying
 > arguments to forall. In this example
 >
 >
 > (: f : Any -> Any)
 > (define (f a)
 >   (inst a (HashTable Any Any)))
 >
 > you seem to be putting a non-polymorphic type into the first argument to
 > 'inst' and TR gives me this error, as expected:
 >
 > Type Checker: Cannot instantiate non-polymorphic type Any in: a
 >
 > pointing at the first argument to 'inst'.
 >
 > But the larger point is that if I ask hash? of a value then I think I
 > should know that it has the type (HashTable Any Any) in the then branch.
 >
 > (My larger problem was properly solved with 'cast' -- this PR is just
 > fallout from earlier failed attempts.)
 >
 > Robby
 >
 >
 > On Thursday, April 25, 2013, Matthias Felleisen wrote:
 >
 >>
 >> On Apr 25, 2013, at 10:00 AM, robby@racket-lang.org wrote:
 >>
 >> > #lang typed/racket
 >> >
 >> > (: convert-it (Any -> (HashTable Symbol Number)))
 >> > (define (convert-it a)
 >> >  (if (hash? a)
 >> >      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any
 >> Any) a)])
 >> >        (values 'x 1))
 >> >      (error 'convert-it "not a hash ~s" a)))
 >>
 >> in-hash-keys is not used properly here.
 >>
 >> Do you mean this:
 >>
 >> (define (convert-it a)
 >>  (if (hash? a)
 >>      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys ((inst a
 >> (HashTable Any Any))))])
 >>        (values 'x 1))
 >>      (error 'convert-it "not a hash ~s" a)))
 >>
 >> If so, the following smaller program shows what you want to do:
 >>
 >> (: f : Any -> Any)
 >> (define (f a)
 >>   (inst a (HashTable Any Any)))
 >>
 >> (: h : (HashTable Any Any))
 >> (define h (make-immutable-hash '((a . 2))))
 >>
 >> (f h)
 >>
 >> But now you see that 'inst' is about instantiating polymorphic
 >> constructions. And finally, if this makes sense, perhaps you wanted to
 >> write:
 >>
 >> (: convert-it (Any -> (HashTable Symbol Number)))
 >> (define (convert-it a)
 >>  (if (hash? a)
 >>      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys (cast a
 >> (HashTable Any Any)))])
 >>        (values 'x 1))
 >>      (error 'convert-it "not a hash ~s" a)))
 >>
 >> But fi I am off, let me know.
 >>
 >>
 
 --047d7b3442e49d4d7904db3029ca
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler <span dir=3D"ltr">&l=
 t;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blank">robby@ee=
 cs.northwestern.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div>I don&#39;t think that I used inst impr=
 operly here. It is a polymorphic function where I supply the &quot;domain&q=
 uot; and &quot;range&quot; type of the hash and I get a monomorphic version=
  of in-hash-keys.=C2=A0</div>
 <div>
 <br></div></blockquote><div><br></div><div style>Urgh. Editos. The &quot;it=
 &quot; in the beginning of this sentence is meant to refer to in-hash-keys,=
  not inst.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D=
 "margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 <div></div><div>I thought that inst should be something that accepts an arg=
 ument with a polymorphic type and instantiates the polymorphic type by supp=
 lying arguments to forall. In this example<div class=3D"im"><br><br>(: f : =
 Any -&gt; Any)<br>
 
 (define (f a)<br>=C2=A0 (inst a (HashTable Any Any)))</div></div><div><br><=
 /div><div>you seem to be putting a non-polymorphic type into the first argu=
 ment to &#39;inst&#39; and TR gives me this error, as expected:</div><div><=
 br>
 </div>
 <div><div>Type Checker: Cannot instantiate non-polymorphic type Any in: a</=
 div><div><br></div><div>pointing at the first argument to &#39;inst&#39;.</=
 div><div><br></div><div>But the larger point is that if I ask hash? of a va=
 lue then I think I should know that it has the type (HashTable Any Any) in =
 the then branch.</div>
 
 <div><br></div><div>(My larger problem was properly solved with &#39;cast&#=
 39; -- this PR is just fallout from earlier failed attempts.)</div><span cl=
 ass=3D"HOEnZb"><font color=3D"#888888"><div><br></div><div>Robby</div></fon=
 t></span><div>
 <div class=3D"h5"><div><br></div><br>On Thursday, April 25, 2013, Matthias =
 Felleisen  wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><br>
 On Apr 25, 2013, at 10:00 AM, <a>robby@racket-lang.org</a> wrote:<br>
 <br>
 &gt; #lang typed/racket<br>
 &gt;<br>
 &gt; (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 &gt; (define (convert-it a)<br>
 &gt; =C2=A0(if (hash? a)<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k ((inst =
 in-hash-keys Any Any) a)])<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&quot; a=
 )))<br>
 <br>
 in-hash-keys is not used properly here.<br>
 <br>
 Do you mean this:<br>
 <br>
 (define (convert-it a)<br>
 =C2=A0(if (hash? a)<br>
 =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k (in-hash-key=
 s ((inst a (HashTable Any Any))))])<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&quot; a)))<b=
 r>
 <br>
 If so, the following smaller program shows what you want to do:<br>
 <br>
 (: f : Any -&gt; Any)<br>
 (define (f a)<br>
 =C2=A0 (inst a (HashTable Any Any)))<br>
 <br>
 (: h : (HashTable Any Any))<br>
 (define h (make-immutable-hash &#39;((a . 2))))<br>
 <br>
 (f h)<br>
 <br>
 But now you see that &#39;inst&#39; is about instantiating polymorphic cons=
 tructions. And finally, if this makes sense, perhaps you wanted to write:<b=
 r>
 <br>
 (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 (define (convert-it a)<br>
 =C2=A0(if (hash? a)<br>
 =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k (in-hash-key=
 s (cast a (HashTable Any Any)))])<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&quot; a)))<b=
 r>
 <br>
 But fi I am off, let me know.<br>
 <br>
 </blockquote></div></div></div>
 </blockquote></div><br></div></div>
 
 --047d7b3442e49d4d7904db3029ca--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: "robby@racket-lang.org" <robby@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 10:35:53 -0400

 From what I can tell, in-hash-keys is not a polymorphic function in TR but perhaps my drracket doesn't show me the right information here. 
 
 
 On Apr 25, 2013, at 10:23 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 
 > 
 > 
 > 
 > On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 > I don't think that I used inst improperly here. It is a polymorphic function where I supply the "domain" and "range" type of the hash and I get a monomorphic version of in-hash-keys. 
 > 
 > 
 > Urgh. Editos. The "it" in the beginning of this sentence is meant to refer to in-hash-keys, not inst.
 >  
 > I thought that inst should be something that accepts an argument with a polymorphic type and instantiates the polymorphic type by supplying arguments to forall. In this example
 > 
 > 
 > (: f : Any -> Any)
 > (define (f a)
 >   (inst a (HashTable Any Any)))
 > 
 > you seem to be putting a non-polymorphic type into the first argument to 'inst' and TR gives me this error, as expected:
 > 
 > Type Checker: Cannot instantiate non-polymorphic type Any in: a
 > 
 > pointing at the first argument to 'inst'.
 > 
 > But the larger point is that if I ask hash? of a value then I think I should know that it has the type (HashTable Any Any) in the then branch.
 > 
 > (My larger problem was properly solved with 'cast' -- this PR is just fallout from earlier failed attempts.)
 > 
 > Robby
 > 
 > 
 > On Thursday, April 25, 2013, Matthias Felleisen wrote:
 > 
 > On Apr 25, 2013, at 10:00 AM, robby@racket-lang.org wrote:
 > 
 > > #lang typed/racket
 > >
 > > (: convert-it (Any -> (HashTable Symbol Number)))
 > > (define (convert-it a)
 > >  (if (hash? a)
 > >      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any Any) a)])
 > >        (values 'x 1))
 > >      (error 'convert-it "not a hash ~s" a)))
 > 
 > in-hash-keys is not used properly here.
 > 
 > Do you mean this:
 > 
 > (define (convert-it a)
 >  (if (hash? a)
 >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys ((inst a (HashTable Any Any))))])
 >        (values 'x 1))
 >      (error 'convert-it "not a hash ~s" a)))
 > 
 > If so, the following smaller program shows what you want to do:
 > 
 > (: f : Any -> Any)
 > (define (f a)
 >   (inst a (HashTable Any Any)))
 > 
 > (: h : (HashTable Any Any))
 > (define h (make-immutable-hash '((a . 2))))
 > 
 > (f h)
 > 
 > But now you see that 'inst' is about instantiating polymorphic constructions. And finally, if this makes sense, perhaps you wanted to write:
 > 
 > (: convert-it (Any -> (HashTable Symbol Number)))
 > (define (convert-it a)
 >  (if (hash? a)
 >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys (cast a (HashTable Any Any)))])
 >        (values 'x 1))
 >      (error 'convert-it "not a hash ~s" a)))
 > 
 > But fi I am off, let me know.
 > 
 > 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 09:37:40 -0500

 --089e013a010a5276e304db305ce7
 Content-Type: text/plain; charset=UTF-8
 
 Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 Language: typed/racket; memory limit: 128 MB.
 > in-hash-keys
 - : (All (a b) ((HashTable a b) -> (Sequenceof a)))
 #<procedure:in-hash-keys>
 >
 
 
 On Thu, Apr 25, 2013 at 9:35 AM, Matthias Felleisen <matthias@ccs.neu.edu>wrote:
 
 >
 > From what I can tell, in-hash-keys is not a polymorphic function in TR but
 > perhaps my drracket doesn't show me the right information here.
 >
 >
 > On Apr 25, 2013, at 10:23 AM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >
 > >
 > >
 > >
 > > On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 > > I don't think that I used inst improperly here. It is a polymorphic
 > function where I supply the "domain" and "range" type of the hash and I get
 > a monomorphic version of in-hash-keys.
 > >
 > >
 > > Urgh. Editos. The "it" in the beginning of this sentence is meant to
 > refer to in-hash-keys, not inst.
 > >
 > > I thought that inst should be something that accepts an argument with a
 > polymorphic type and instantiates the polymorphic type by supplying
 > arguments to forall. In this example
 > >
 > >
 > > (: f : Any -> Any)
 > > (define (f a)
 > >   (inst a (HashTable Any Any)))
 > >
 > > you seem to be putting a non-polymorphic type into the first argument to
 > 'inst' and TR gives me this error, as expected:
 > >
 > > Type Checker: Cannot instantiate non-polymorphic type Any in: a
 > >
 > > pointing at the first argument to 'inst'.
 > >
 > > But the larger point is that if I ask hash? of a value then I think I
 > should know that it has the type (HashTable Any Any) in the then branch.
 > >
 > > (My larger problem was properly solved with 'cast' -- this PR is just
 > fallout from earlier failed attempts.)
 > >
 > > Robby
 > >
 > >
 > > On Thursday, April 25, 2013, Matthias Felleisen wrote:
 > >
 > > On Apr 25, 2013, at 10:00 AM, robby@racket-lang.org wrote:
 > >
 > > > #lang typed/racket
 > > >
 > > > (: convert-it (Any -> (HashTable Symbol Number)))
 > > > (define (convert-it a)
 > > >  (if (hash? a)
 > > >      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys
 > Any Any) a)])
 > > >        (values 'x 1))
 > > >      (error 'convert-it "not a hash ~s" a)))
 > >
 > > in-hash-keys is not used properly here.
 > >
 > > Do you mean this:
 > >
 > > (define (convert-it a)
 > >  (if (hash? a)
 > >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys ((inst a
 > (HashTable Any Any))))])
 > >        (values 'x 1))
 > >      (error 'convert-it "not a hash ~s" a)))
 > >
 > > If so, the following smaller program shows what you want to do:
 > >
 > > (: f : Any -> Any)
 > > (define (f a)
 > >   (inst a (HashTable Any Any)))
 > >
 > > (: h : (HashTable Any Any))
 > > (define h (make-immutable-hash '((a . 2))))
 > >
 > > (f h)
 > >
 > > But now you see that 'inst' is about instantiating polymorphic
 > constructions. And finally, if this makes sense, perhaps you wanted to
 > write:
 > >
 > > (: convert-it (Any -> (HashTable Symbol Number)))
 > > (define (convert-it a)
 > >  (if (hash? a)
 > >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys (cast a
 > (HashTable Any Any)))])
 > >        (values 'x 1))
 > >      (error 'convert-it "not a hash ~s" a)))
 > >
 > > But fi I am off, let me know.
 > >
 > >
 >
 >
 
 --089e013a010a5276e304db305ce7
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>Welcome to DrRacket, version 5.3.4.5--2013-04-24(9515=
 38ab/d) [3m].</div><div>Language: typed/racket; memory limit: 128 MB.</div>=
 <div>&gt; in-hash-keys</div><div>- : (All (a b) ((HashTable a b) -&gt; (Seq=
 uenceof a)))</div>
 <div>#&lt;procedure:in-hash-keys&gt;</div><div>&gt;=C2=A0</div></div><div c=
 lass=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Thu, Apr 25, 201=
 3 at 9:35 AM, Matthias Felleisen <span dir=3D"ltr">&lt;<a href=3D"mailto:ma=
 tthias@ccs.neu.edu" target=3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> w=
 rote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><br>
 From what I can tell, in-hash-keys is not a polymorphic function in TR but =
 perhaps my drracket doesn&#39;t show me the right information here.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 <br>
 On Apr 25, 2013, at 10:23 AM, Robby Findler &lt;<a href=3D"mailto:robby@eec=
 s.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 <br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler &lt;<a href=3D"mailto:r=
 obby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt; I don&#39;t think that I used inst improperly here. It is a polymorphi=
 c function where I supply the &quot;domain&quot; and &quot;range&quot; type=
  of the hash and I get a monomorphic version of in-hash-keys.<br>
 &gt;<br>
 &gt;<br>
 &gt; Urgh. Editos. The &quot;it&quot; in the beginning of this sentence is =
 meant to refer to in-hash-keys, not inst.<br>
 &gt;<br>
 &gt; I thought that inst should be something that accepts an argument with =
 a polymorphic type and instantiates the polymorphic type by supplying argum=
 ents to forall. In this example<br>
 &gt;<br>
 &gt;<br>
 &gt; (: f : Any -&gt; Any)<br>
 &gt; (define (f a)<br>
 &gt; =C2=A0 (inst a (HashTable Any Any)))<br>
 &gt;<br>
 &gt; you seem to be putting a non-polymorphic type into the first argument =
 to &#39;inst&#39; and TR gives me this error, as expected:<br>
 &gt;<br>
 &gt; Type Checker: Cannot instantiate non-polymorphic type Any in: a<br>
 &gt;<br>
 &gt; pointing at the first argument to &#39;inst&#39;.<br>
 &gt;<br>
 &gt; But the larger point is that if I ask hash? of a value then I think I =
 should know that it has the type (HashTable Any Any) in the then branch.<br=
 >
 &gt;<br>
 &gt; (My larger problem was properly solved with &#39;cast&#39; -- this PR =
 is just fallout from earlier failed attempts.)<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Thursday, April 25, 2013, Matthias Felleisen wrote:<br>
 &gt;<br>
 &gt; On Apr 25, 2013, at 10:00 AM, <a href=3D"mailto:robby@racket-lang.org"=
 >robby@racket-lang.org</a> wrote:<br>
 &gt;<br>
 &gt; &gt; #lang typed/racket<br>
 &gt; &gt;<br>
 &gt; &gt; (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 &gt; &gt; (define (convert-it a)<br>
 &gt; &gt; =C2=A0(if (hash? a)<br>
 &gt; &gt; =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k ((=
 inst in-hash-keys Any Any) a)])<br>
 &gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 &gt; &gt; =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&qu=
 ot; a)))<br>
 &gt;<br>
 &gt; in-hash-keys is not used properly here.<br>
 &gt;<br>
 &gt; Do you mean this:<br>
 &gt;<br>
 &gt; (define (convert-it a)<br>
 &gt; =C2=A0(if (hash? a)<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k (in-has=
 h-keys ((inst a (HashTable Any Any))))])<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&quot; a=
 )))<br>
 &gt;<br>
 &gt; If so, the following smaller program shows what you want to do:<br>
 &gt;<br>
 &gt; (: f : Any -&gt; Any)<br>
 &gt; (define (f a)<br>
 &gt; =C2=A0 (inst a (HashTable Any Any)))<br>
 &gt;<br>
 &gt; (: h : (HashTable Any Any))<br>
 &gt; (define h (make-immutable-hash &#39;((a . 2))))<br>
 &gt;<br>
 &gt; (f h)<br>
 &gt;<br>
 &gt; But now you see that &#39;inst&#39; is about instantiating polymorphic=
  constructions. And finally, if this makes sense, perhaps you wanted to wri=
 te:<br>
 &gt;<br>
 &gt; (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 &gt; (define (convert-it a)<br>
 &gt; =C2=A0(if (hash? a)<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([k (in-has=
 h-keys (cast a (HashTable Any Any)))])<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 &gt; =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~s&quot; a=
 )))<br>
 &gt;<br>
 &gt; But fi I am off, let me know.<br>
 &gt;<br>
 &gt;<br>
 <br>
 </div></div></blockquote></div><br></div>
 
 --089e013a010a5276e304db305ce7--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 11:01:51 -0400

 Then it should work. 
 
 
 On Apr 25, 2013, at 10:37 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 
 > Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 > Language: typed/racket; memory limit: 128 MB.
 > > in-hash-keys
 > - : (All (a b) ((HashTable a b) -> (Sequenceof a)))
 > #<procedure:in-hash-keys>
 > > 
 > 
 > 
 > On Thu, Apr 25, 2013 at 9:35 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > 
 > From what I can tell, in-hash-keys is not a polymorphic function in TR but perhaps my drracket doesn't show me the right information here.
 > 
 > 
 > On Apr 25, 2013, at 10:23 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 > 
 > >
 > >
 > >
 > > On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 > > I don't think that I used inst improperly here. It is a polymorphic function where I supply the "domain" and "range" type of the hash and I get a monomorphic version of in-hash-keys.
 > >
 > >
 > > Urgh. Editos. The "it" in the beginning of this sentence is meant to refer to in-hash-keys, not inst.
 > >
 > > I thought that inst should be something that accepts an argument with a polymorphic type and instantiates the polymorphic type by supplying arguments to forall. In this example
 > >
 > >
 > > (: f : Any -> Any)
 > > (define (f a)
 > >   (inst a (HashTable Any Any)))
 > >
 > > you seem to be putting a non-polymorphic type into the first argument to 'inst' and TR gives me this error, as expected:
 > >
 > > Type Checker: Cannot instantiate non-polymorphic type Any in: a
 > >
 > > pointing at the first argument to 'inst'.
 > >
 > > But the larger point is that if I ask hash? of a value then I think I should know that it has the type (HashTable Any Any) in the then branch.
 > >
 > > (My larger problem was properly solved with 'cast' -- this PR is just fallout from earlier failed attempts.)
 > >
 > > Robby
 > >
 > >
 > > On Thursday, April 25, 2013, Matthias Felleisen wrote:
 > >
 > > On Apr 25, 2013, at 10:00 AM, robby@racket-lang.org wrote:
 > >
 > > > #lang typed/racket
 > > >
 > > > (: convert-it (Any -> (HashTable Symbol Number)))
 > > > (define (convert-it a)
 > > >  (if (hash? a)
 > > >      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any Any) a)])
 > > >        (values 'x 1))
 > > >      (error 'convert-it "not a hash ~s" a)))
 > >
 > > in-hash-keys is not used properly here.
 > >
 > > Do you mean this:
 > >
 > > (define (convert-it a)
 > >  (if (hash? a)
 > >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys ((inst a (HashTable Any Any))))])
 > >        (values 'x 1))
 > >      (error 'convert-it "not a hash ~s" a)))
 > >
 > > If so, the following smaller program shows what you want to do:
 > >
 > > (: f : Any -> Any)
 > > (define (f a)
 > >   (inst a (HashTable Any Any)))
 > >
 > > (: h : (HashTable Any Any))
 > > (define h (make-immutable-hash '((a . 2))))
 > >
 > > (f h)
 > >
 > > But now you see that 'inst' is about instantiating polymorphic constructions. And finally, if this makes sense, perhaps you wanted to write:
 > >
 > > (: convert-it (Any -> (HashTable Symbol Number)))
 > > (define (convert-it a)
 > >  (if (hash? a)
 > >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys (cast a (HashTable Any Any)))])
 > >        (values 'x 1))
 > >      (error 'convert-it "not a hash ~s" a)))
 > >
 > > But fi I am off, let me know.
 > >
 > >
 > 
 > 
 
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 08:43:17 -0700

 Robby/Sam: is the issue that HashTop prints badly or that HashtableTop
 is not equivalent to (Hashtable Any Any? It seems that you are saying
 the second which is incorrect.
 
 (Hashtable Any Any) is a hash table which supports key/value
 lookup/setting for any values. HashtableTop is the super type of all
 hashtables. In particular (Hashtable Symbol Number) is a subtype of
 HashtableTop, but not a subtype of (Hashtable Any Any). This is one of
 the reasons that I wanted separation of immutable/mutable hashtables
 so that operations that only read a hashtable can think of it
 covariantly.
 
 On Thu, Apr 25, 2013 at 8:01 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Then it should work.
 >
 >
 > On Apr 25, 2013, at 10:37 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 >
 >> Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 >> Language: typed/racket; memory limit: 128 MB.
 >> > in-hash-keys
 >> - : (All (a b) ((HashTable a b) -> (Sequenceof a)))
 >> #<procedure:in-hash-keys>
 >> >
 >>
 >>
 >> On Thu, Apr 25, 2013 at 9:35 AM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >>
 >> From what I can tell, in-hash-keys is not a polymorphic function in TR but perhaps my drracket doesn't show me the right information here.
 >>
 >>
 >> On Apr 25, 2013, at 10:23 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 >>
 >> >
 >> >
 >> >
 >> > On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler <robby@eecs.northwestern.edu> wrote:
 >> > I don't think that I used inst improperly here. It is a polymorphic function where I supply the "domain" and "range" type of the hash and I get a monomorphic version of in-hash-keys.
 >> >
 >> >
 >> > Urgh. Editos. The "it" in the beginning of this sentence is meant to refer to in-hash-keys, not inst.
 >> >
 >> > I thought that inst should be something that accepts an argument with a polymorphic type and instantiates the polymorphic type by supplying arguments to forall. In this example
 >> >
 >> >
 >> > (: f : Any -> Any)
 >> > (define (f a)
 >> >   (inst a (HashTable Any Any)))
 >> >
 >> > you seem to be putting a non-polymorphic type into the first argument to 'inst' and TR gives me this error, as expected:
 >> >
 >> > Type Checker: Cannot instantiate non-polymorphic type Any in: a
 >> >
 >> > pointing at the first argument to 'inst'.
 >> >
 >> > But the larger point is that if I ask hash? of a value then I think I should know that it has the type (HashTable Any Any) in the then branch.
 >> >
 >> > (My larger problem was properly solved with 'cast' -- this PR is just fallout from earlier failed attempts.)
 >> >
 >> > Robby
 >> >
 >> >
 >> > On Thursday, April 25, 2013, Matthias Felleisen wrote:
 >> >
 >> > On Apr 25, 2013, at 10:00 AM, robby@racket-lang.org wrote:
 >> >
 >> > > #lang typed/racket
 >> > >
 >> > > (: convert-it (Any -> (HashTable Symbol Number)))
 >> > > (define (convert-it a)
 >> > >  (if (hash? a)
 >> > >      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any Any) a)])
 >> > >        (values 'x 1))
 >> > >      (error 'convert-it "not a hash ~s" a)))
 >> >
 >> > in-hash-keys is not used properly here.
 >> >
 >> > Do you mean this:
 >> >
 >> > (define (convert-it a)
 >> >  (if (hash? a)
 >> >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys ((inst a (HashTable Any Any))))])
 >> >        (values 'x 1))
 >> >      (error 'convert-it "not a hash ~s" a)))
 >> >
 >> > If so, the following smaller program shows what you want to do:
 >> >
 >> > (: f : Any -> Any)
 >> > (define (f a)
 >> >   (inst a (HashTable Any Any)))
 >> >
 >> > (: h : (HashTable Any Any))
 >> > (define h (make-immutable-hash '((a . 2))))
 >> >
 >> > (f h)
 >> >
 >> > But now you see that 'inst' is about instantiating polymorphic constructions. And finally, if this makes sense, perhaps you wanted to write:
 >> >
 >> > (: convert-it (Any -> (HashTable Symbol Number)))
 >> > (define (convert-it a)
 >> >  (if (hash? a)
 >> >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys (cast a (HashTable Any Any)))])
 >> >        (values 'x 1))
 >> >      (error 'convert-it "not a hash ~s" a)))
 >> >
 >> > But fi I am off, let me know.
 >> >
 >> >
 >>
 >>
 >
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: robby@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 11:51:02 -0400

 If I understand it correctly, the problem is that `hash?' is a predicate
 for the type `HashTableTop' (which doesn't print properly, that's a
 separate issue), which is the supertype of all hash tables.
 
 Due to invariance, `HashTableTop' is not equivalent to `(HashTable Any Any)',
 which causes the program to not typecheck.
 
 I think the solution would be to extend the type of `in-hash-keys' to
 accept `HashTableTop' and yield `Any'. I'll look into it.
 
 Vincent
 
 
 At Thu, 25 Apr 2013 10:00:01 -0400,
 robby@racket-lang.org wrote:
 > 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13710
 > 
 > Reported by Robby Findler for release: 5.3.4.5--2013-04-24(951538ab/d)
 > 
 > *** Description:
 > Sam asked me to file this as a bug report.
 > 
 > This program:
 > 
 > #lang typed/racket
 > 
 > (: convert-it (Any -> (HashTable Symbol Number)))
 > (define (convert-it a)
 >   (if (hash? a)
 >       (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any Any) a)])
 >         (values 'x 1))
 >       (error 'convert-it "not a hash ~s" a)))
 > 
 > produces 
 > 
 > Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 > Language: typed/racket; memory limit: 128 MB.
 > . Type Checker: Expected (HashTable Any Any), but got (Unknown Type: #(struct:HashtableTop 368 #(struct:combined-frees #hasheq() ()) #(struct:combined-frees #hasheq() ()) #f hash)) in: a
 > > 
 > 
 > but it seems like it should typecheck.
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > macosx "Darwin wireless-165-124-117-23.nuwlan.northwestern.edu 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 593927812
 > Links: (links) = ("mini-hdl"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > raco pkg (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific (5.3.4.5):
 >  [none]
 > 
 > 
 > 
 > Collections:
 > ("/Users/robby/Library/Racket/5.3.4.5/collects"
 >  (non-existent-path))
 > ("/Users/robby/git/exp/plt/collects"
 >  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "pkg" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace" "typed" "typed-racket" 
  "!
 >  typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 > 
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 > 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: endobson <eric.n.dobson@gmail.com>
Cc: bug-notification <bug-notification@racket-lang.org>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 12:00:03 -0400

 --bcaec548a493ecbb1004db31828f
 Content-Type: text/plain; charset=UTF-8
 
 Well, the printing is an issue, but the larger issue is that HashTableTop
 needs to support some of the hash operations, even though it isn't any
 particular hash, as you say. Specifically, it should support in-hash-keys.
 This is how VectorTop works as well.
 
 Sam
 On Apr 25, 2013 8:43 AM, "Eric Dobson" <eric.n.dobson@gmail.com> wrote:
 
 > Robby/Sam: is the issue that HashTop prints badly or that HashtableTop
 > is not equivalent to (Hashtable Any Any? It seems that you are saying
 > the second which is incorrect.
 >
 > (Hashtable Any Any) is a hash table which supports key/value
 > lookup/setting for any values. HashtableTop is the super type of all
 > hashtables. In particular (Hashtable Symbol Number) is a subtype of
 > HashtableTop, but not a subtype of (Hashtable Any Any). This is one of
 > the reasons that I wanted separation of immutable/mutable hashtables
 > so that operations that only read a hashtable can think of it
 > covariantly.
 >
 > On Thu, Apr 25, 2013 at 8:01 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 > >
 > > Then it should work.
 > >
 > >
 > > On Apr 25, 2013, at 10:37 AM, Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 > >
 > >> Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 > >> Language: typed/racket; memory limit: 128 MB.
 > >> > in-hash-keys
 > >> - : (All (a b) ((HashTable a b) -> (Sequenceof a)))
 > >> #<procedure:in-hash-keys>
 > >> >
 > >>
 > >>
 > >> On Thu, Apr 25, 2013 at 9:35 AM, Matthias Felleisen <
 > matthias@ccs.neu.edu> wrote:
 > >>
 > >> From what I can tell, in-hash-keys is not a polymorphic function in TR
 > but perhaps my drracket doesn't show me the right information here.
 > >>
 > >>
 > >> On Apr 25, 2013, at 10:23 AM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 > >>
 > >> >
 > >> >
 > >> >
 > >> > On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 > >> > I don't think that I used inst improperly here. It is a polymorphic
 > function where I supply the "domain" and "range" type of the hash and I get
 > a monomorphic version of in-hash-keys.
 > >> >
 > >> >
 > >> > Urgh. Editos. The "it" in the beginning of this sentence is meant to
 > refer to in-hash-keys, not inst.
 > >> >
 > >> > I thought that inst should be something that accepts an argument with
 > a polymorphic type and instantiates the polymorphic type by supplying
 > arguments to forall. In this example
 > >> >
 > >> >
 > >> > (: f : Any -> Any)
 > >> > (define (f a)
 > >> >   (inst a (HashTable Any Any)))
 > >> >
 > >> > you seem to be putting a non-polymorphic type into the first argument
 > to 'inst' and TR gives me this error, as expected:
 > >> >
 > >> > Type Checker: Cannot instantiate non-polymorphic type Any in: a
 > >> >
 > >> > pointing at the first argument to 'inst'.
 > >> >
 > >> > But the larger point is that if I ask hash? of a value then I think I
 > should know that it has the type (HashTable Any Any) in the then branch.
 > >> >
 > >> > (My larger problem was properly solved with 'cast' -- this PR is just
 > fallout from earlier failed attempts.)
 > >> >
 > >> > Robby
 > >> >
 > >> >
 > >> > On Thursday, April 25, 2013, Matthias Felleisen wrote:
 > >> >
 > >> > On Apr 25, 2013, at 10:00 AM, robby@racket-lang.org wrote:
 > >> >
 > >> > > #lang typed/racket
 > >> > >
 > >> > > (: convert-it (Any -> (HashTable Symbol Number)))
 > >> > > (define (convert-it a)
 > >> > >  (if (hash? a)
 > >> > >      (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys
 > Any Any) a)])
 > >> > >        (values 'x 1))
 > >> > >      (error 'convert-it "not a hash ~s" a)))
 > >> >
 > >> > in-hash-keys is not used properly here.
 > >> >
 > >> > Do you mean this:
 > >> >
 > >> > (define (convert-it a)
 > >> >  (if (hash? a)
 > >> >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys ((inst
 > a (HashTable Any Any))))])
 > >> >        (values 'x 1))
 > >> >      (error 'convert-it "not a hash ~s" a)))
 > >> >
 > >> > If so, the following smaller program shows what you want to do:
 > >> >
 > >> > (: f : Any -> Any)
 > >> > (define (f a)
 > >> >   (inst a (HashTable Any Any)))
 > >> >
 > >> > (: h : (HashTable Any Any))
 > >> > (define h (make-immutable-hash '((a . 2))))
 > >> >
 > >> > (f h)
 > >> >
 > >> > But now you see that 'inst' is about instantiating polymorphic
 > constructions. And finally, if this makes sense, perhaps you wanted to
 > write:
 > >> >
 > >> > (: convert-it (Any -> (HashTable Symbol Number)))
 > >> > (define (convert-it a)
 > >> >  (if (hash? a)
 > >> >      (for/hash: : (HashTable Symbol Number) ([k (in-hash-keys (cast a
 > (HashTable Any Any)))])
 > >> >        (values 'x 1))
 > >> >      (error 'convert-it "not a hash ~s" a)))
 > >> >
 > >> > But fi I am off, let me know.
 > >> >
 > >> >
 > >>
 > >>
 > >
 >
 
 --bcaec548a493ecbb1004db31828f
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">Well, the printing is an issue, but the larger issue is that=
  HashTableTop needs to support some of the hash operations, even though it =
 isn&#39;t any particular hash, as you say. Specifically, it should support =
 in-hash-keys.=C2=A0 This is how VectorTop works as well.</p>
 
 <p dir=3D"ltr">Sam</p>
 <div class=3D"gmail_quote">On Apr 25, 2013 8:43 AM, &quot;Eric Dobson&quot;=
  &lt;<a href=3D"mailto:eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>=
 &gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_quote" style=
 =3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 Robby/Sam: is the issue that HashTop prints badly or that HashtableTop<br>
 is not equivalent to (Hashtable Any Any? It seems that you are saying<br>
 the second which is incorrect.<br>
 <br>
 (Hashtable Any Any) is a hash table which supports key/value<br>
 lookup/setting for any values. HashtableTop is the super type of all<br>
 hashtables. In particular (Hashtable Symbol Number) is a subtype of<br>
 HashtableTop, but not a subtype of (Hashtable Any Any). This is one of<br>
 the reasons that I wanted separation of immutable/mutable hashtables<br>
 so that operations that only read a hashtable can think of it<br>
 covariantly.<br>
 <br>
 On Thu, Apr 25, 2013 at 8:01 AM, Matthias Felleisen<br>
 &lt;<a href=3D"mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt; wr=
 ote:<br>
 &gt;<br>
 &gt; Then it should work.<br>
 &gt;<br>
 &gt;<br>
 &gt; On Apr 25, 2013, at 10:37 AM, Robby Findler &lt;<a href=3D"mailto:robb=
 y@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt;&gt; Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].=
 <br>
 &gt;&gt; Language: typed/racket; memory limit: 128 MB.<br>
 &gt;&gt; &gt; in-hash-keys<br>
 &gt;&gt; - : (All (a b) ((HashTable a b) -&gt; (Sequenceof a)))<br>
 &gt;&gt; #&lt;procedure:in-hash-keys&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; On Thu, Apr 25, 2013 at 9:35 AM, Matthias Felleisen &lt;<a href=3D=
 "mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; From what I can tell, in-hash-keys is not a polymorphic function i=
 n TR but perhaps my drracket doesn&#39;t show me the right information here=
 .<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; On Apr 25, 2013, at 10:23 AM, Robby Findler &lt;<a href=3D"mailto:=
 robby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Thu, Apr 25, 2013 at 9:21 AM, Robby Findler &lt;<a href=3D=
 "mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wr=
 ote:<br>
 &gt;&gt; &gt; I don&#39;t think that I used inst improperly here. It is a p=
 olymorphic function where I supply the &quot;domain&quot; and &quot;range&q=
 uot; type of the hash and I get a monomorphic version of in-hash-keys.<br>
 
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Urgh. Editos. The &quot;it&quot; in the beginning of this sen=
 tence is meant to refer to in-hash-keys, not inst.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; I thought that inst should be something that accepts an argum=
 ent with a polymorphic type and instantiates the polymorphic type by supply=
 ing arguments to forall. In this example<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (: f : Any -&gt; Any)<br>
 &gt;&gt; &gt; (define (f a)<br>
 &gt;&gt; &gt; =C2=A0 (inst a (HashTable Any Any)))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; you seem to be putting a non-polymorphic type into the first =
 argument to &#39;inst&#39; and TR gives me this error, as expected:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Type Checker: Cannot instantiate non-polymorphic type Any in:=
  a<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; pointing at the first argument to &#39;inst&#39;.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; But the larger point is that if I ask hash? of a value then I=
  think I should know that it has the type (HashTable Any Any) in the then b=
 ranch.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (My larger problem was properly solved with &#39;cast&#39; --=
  this PR is just fallout from earlier failed attempts.)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Robby<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Thursday, April 25, 2013, Matthias Felleisen wrote:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Apr 25, 2013, at 10:00 AM, <a href=3D"mailto:robby@racket-=
 lang.org">robby@racket-lang.org</a> wrote:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; &gt; #lang typed/racket<br>
 &gt;&gt; &gt; &gt;<br>
 &gt;&gt; &gt; &gt; (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 &gt;&gt; &gt; &gt; (define (convert-it a)<br>
 &gt;&gt; &gt; &gt; =C2=A0(if (hash? a)<br>
 &gt;&gt; &gt; &gt; =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Numbe=
 r) ([k ((inst in-hash-keys Any Any) a)])<br>
 &gt;&gt; &gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 &gt;&gt; &gt; &gt; =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a h=
 ash ~s&quot; a)))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; in-hash-keys is not used properly here.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Do you mean this:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (define (convert-it a)<br>
 &gt;&gt; &gt; =C2=A0(if (hash? a)<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([=
 k (in-hash-keys ((inst a (HashTable Any Any))))])<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~=
 s&quot; a)))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; If so, the following smaller program shows what you want to d=
 o:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (: f : Any -&gt; Any)<br>
 &gt;&gt; &gt; (define (f a)<br>
 &gt;&gt; &gt; =C2=A0 (inst a (HashTable Any Any)))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (: h : (HashTable Any Any))<br>
 &gt;&gt; &gt; (define h (make-immutable-hash &#39;((a . 2))))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (f h)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; But now you see that &#39;inst&#39; is about instantiating po=
 lymorphic constructions. And finally, if this makes sense, perhaps you want=
 ed to write:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 &gt;&gt; &gt; (define (convert-it a)<br>
 &gt;&gt; &gt; =C2=A0(if (hash? a)<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0(for/hash: : (HashTable Symbol Number) ([=
 k (in-hash-keys (cast a (HashTable Any Any)))])<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0(values &#39;x 1))<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0 =C2=A0(error &#39;convert-it &quot;not a hash ~=
 s&quot; a)))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; But fi I am off, let me know.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;<br>
 </blockquote></div>
 
 --bcaec548a493ecbb1004db31828f--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: robby@racket-lang.org, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 09:02:03 -0700

 Vincent: all functions that take in a hashtable for reading only
 should be able to support this, which would include hash-ref,
 hash-has-key, .... And now we are also pushing that requirement on all
 users who write functions that use read only hashtables to have to use
 a case-> type.
 
 My basic proposal is to have an covariant datatype (ReadonlyHashtable
 a b) which is a supertype of (Hashtable a b) and HashtableTop is
 replaced with (ReadonlyHashtable Any Any), and have readonly functions
 use that type. This could also apply to VectorTop, as Sam points out.
 Note that I'm not tied to the Readonly name.
 
 On Thu, Apr 25, 2013 at 8:51 AM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 > If I understand it correctly, the problem is that `hash?' is a predicate
 > for the type `HashTableTop' (which doesn't print properly, that's a
 > separate issue), which is the supertype of all hash tables.
 >
 > Due to invariance, `HashTableTop' is not equivalent to `(HashTable Any Any)',
 > which causes the program to not typecheck.
 >
 > I think the solution would be to extend the type of `in-hash-keys' to
 > accept `HashTableTop' and yield `Any'. I'll look into it.
 >
 > Vincent
 >
 >
 > At Thu, 25 Apr 2013 10:00:01 -0400,
 > robby@racket-lang.org wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13710
 >>
 >> Reported by Robby Findler for release: 5.3.4.5--2013-04-24(951538ab/d)
 >>
 >> *** Description:
 >> Sam asked me to file this as a bug report.
 >>
 >> This program:
 >>
 >> #lang typed/racket
 >>
 >> (: convert-it (Any -> (HashTable Symbol Number)))
 >> (define (convert-it a)
 >>   (if (hash? a)
 >>       (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys Any Any) a)])
 >>         (values 'x 1))
 >>       (error 'convert-it "not a hash ~s" a)))
 >>
 >> produces
 >>
 >> Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 >> Language: typed/racket; memory limit: 128 MB.
 >> . Type Checker: Expected (HashTable Any Any), but got (Unknown Type: #(struct:HashtableTop 368 #(struct:combined-frees #hasheq() ()) #(struct:combined-frees #hasheq() ()) #f hash)) in: a
 >> >
 >>
 >> but it seems like it should typecheck.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> macosx "Darwin wireless-165-124-117-23.nuwlan.northwestern.edu 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 593927812
 >> Links: (links) = ("mini-hdl"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >> raco pkg (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  [none]
 >> User-specific, version-specific (5.3.4.5):
 >>  [none]
 >>
 >>
 >>
 >> Collections:
 >> ("/Users/robby/Library/Racket/5.3.4.5/collects"
 >>  (non-existent-path))
 >> ("/Users/robby/git/exp/plt/collects"
 >>  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "pkg" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace" "typed" "typed-racket"
 >  "!
 >>  typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: endobson <eric.n.dobson@gmail.com>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        robby@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 12:07:48 -0400

 --f46d043c7ca6a5a4bc04db319efc
 Content-Type: text/plain; charset=UTF-8
 
 Neil Toronto has also talked about things along these lines.  I think
 they're good ideas, although my first preference would be to have real
 separate data types.  However, we should fix this bug in the easy way now,
 and then make larger changes.
 
 Sam
 On Apr 25, 2013 9:02 AM, "Eric Dobson" <eric.n.dobson@gmail.com> wrote:
 
 > Vincent: all functions that take in a hashtable for reading only
 > should be able to support this, which would include hash-ref,
 > hash-has-key, .... And now we are also pushing that requirement on all
 > users who write functions that use read only hashtables to have to use
 > a case-> type.
 >
 > My basic proposal is to have an covariant datatype (ReadonlyHashtable
 > a b) which is a supertype of (Hashtable a b) and HashtableTop is
 > replaced with (ReadonlyHashtable Any Any), and have readonly functions
 > use that type. This could also apply to VectorTop, as Sam points out.
 > Note that I'm not tied to the Readonly name.
 >
 > On Thu, Apr 25, 2013 at 8:51 AM, Vincent St-Amour <stamourv@ccs.neu.edu>
 > wrote:
 > > If I understand it correctly, the problem is that `hash?' is a predicate
 > > for the type `HashTableTop' (which doesn't print properly, that's a
 > > separate issue), which is the supertype of all hash tables.
 > >
 > > Due to invariance, `HashTableTop' is not equivalent to `(HashTable Any
 > Any)',
 > > which causes the program to not typecheck.
 > >
 > > I think the solution would be to extend the type of `in-hash-keys' to
 > > accept `HashTableTop' and yield `Any'. I'll look into it.
 > >
 > > Vincent
 > >
 > >
 > > At Thu, 25 Apr 2013 10:00:01 -0400,
 > > robby@racket-lang.org wrote:
 > >>
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13710
 > >>
 > >> Reported by Robby Findler for release: 5.3.4.5--2013-04-24(951538ab/d)
 > >>
 > >> *** Description:
 > >> Sam asked me to file this as a bug report.
 > >>
 > >> This program:
 > >>
 > >> #lang typed/racket
 > >>
 > >> (: convert-it (Any -> (HashTable Symbol Number)))
 > >> (define (convert-it a)
 > >>   (if (hash? a)
 > >>       (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys
 > Any Any) a)])
 > >>         (values 'x 1))
 > >>       (error 'convert-it "not a hash ~s" a)))
 > >>
 > >> produces
 > >>
 > >> Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 > >> Language: typed/racket; memory limit: 128 MB.
 > >> . Type Checker: Expected (HashTable Any Any), but got (Unknown Type:
 > #(struct:HashtableTop 368 #(struct:combined-frees #hasheq() ())
 > #(struct:combined-frees #hasheq() ()) #f hash)) in: a
 > >> >
 > >>
 > >> but it seems like it should typecheck.
 > >>
 > >> *** How to repeat:
 > >>
 > >>
 > >> *** Environment:
 > >> macosx "Darwin wireless-165-124-117-23.nuwlan.northwestern.edu 11.4.2
 > Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012;
 > root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m)
 > (get-display-depth) = 32
 > >> Human Language: english
 > >> (current-memory-use) 593927812
 > >> Links: (links) = ("mini-hdl"); (links #:user? #f) = (); (links #:root?
 > #t) = (); (links #:user? #f #:root? #t) = ()
 > >> raco pkg (show):
 > >> Installation-wide:
 > >>  [none]
 > >> User-specific, all-version:
 > >>  [none]
 > >> User-specific, version-specific (5.3.4.5):
 > >>  [none]
 > >>
 > >>
 > >>
 > >> Collections:
 > >> ("/Users/robby/Library/Racket/5.3.4.5/collects"
 > >>  (non-existent-path))
 > >> ("/Users/robby/git/exp/plt/collects"
 > >>  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility"
 > "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm"
 > "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi"
 > "file" "framework" "frtime" "future-visualizer" "games" "graphics"
 > "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu"
 > "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher"
 > "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx"
 > "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 > "picturing-programs" "pkg" "plai" "planet" "planet2" "plot" "preprocessor"
 > "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader"
 > "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme"
 > "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex"
 > "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax"
 > "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace" "typed"
 > "typed-racket"
 > >  "!
 > >>  typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 > >>
 > >> Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 > (test))))
 > >>
 >
 
 --f46d043c7ca6a5a4bc04db319efc
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">Neil Toronto has also talked about things along these lines.=
 =C2=A0 I think they&#39;re good ideas, although my first preference would b=
 e to have real separate data types.=C2=A0 However, we should fix this bug i=
 n the easy way now, and then make larger changes.</p>
 
 <p dir=3D"ltr">Sam</p>
 <div class=3D"gmail_quote">On Apr 25, 2013 9:02 AM, &quot;Eric Dobson&quot;=
  &lt;<a href=3D"mailto:eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>=
 &gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_quote" style=
 =3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 Vincent: all functions that take in a hashtable for reading only<br>
 should be able to support this, which would include hash-ref,<br>
 hash-has-key, .... And now we are also pushing that requirement on all<br>
 users who write functions that use read only hashtables to have to use<br>
 a case-&gt; type.<br>
 <br>
 My basic proposal is to have an covariant datatype (ReadonlyHashtable<br>
 a b) which is a supertype of (Hashtable a b) and HashtableTop is<br>
 replaced with (ReadonlyHashtable Any Any), and have readonly functions<br>
 use that type. This could also apply to VectorTop, as Sam points out.<br>
 Note that I&#39;m not tied to the Readonly name.<br>
 <br>
 On Thu, Apr 25, 2013 at 8:51 AM, Vincent St-Amour &lt;<a href=3D"mailto:sta=
 mourv@ccs.neu.edu">stamourv@ccs.neu.edu</a>&gt; wrote:<br>
 &gt; If I understand it correctly, the problem is that `hash?&#39; is a pre=
 dicate<br>
 &gt; for the type `HashTableTop&#39; (which doesn&#39;t print properly, tha=
 t&#39;s a<br>
 &gt; separate issue), which is the supertype of all hash tables.<br>
 &gt;<br>
 &gt; Due to invariance, `HashTableTop&#39; is not equivalent to `(HashTable=
  Any Any)&#39;,<br>
 &gt; which causes the program to not typecheck.<br>
 &gt;<br>
 &gt; I think the solution would be to extend the type of `in-hash-keys&#39;=
  to<br>
 &gt; accept `HashTableTop&#39; and yield `Any&#39;. I&#39;ll look into it.<=
 br>
 &gt;<br>
 &gt; Vincent<br>
 &gt;<br>
 &gt;<br>
 &gt; At Thu, 25 Apr 2013 10:00:01 -0400,<br>
 &gt; <a href=3D"mailto:robby@racket-lang.org">robby@racket-lang.org</a> wro=
 te:<br>
 &gt;&gt;<br>
 &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&am=
 p;pr=3D13710" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D13710</a><br>
 &gt;&gt;<br>
 &gt;&gt; Reported by Robby Findler for release: 5.3.4.5--2013-04-24(951538a=
 b/d)<br>
 &gt;&gt;<br>
 &gt;&gt; *** Description:<br>
 &gt;&gt; Sam asked me to file this as a bug report.<br>
 &gt;&gt;<br>
 &gt;&gt; This program:<br>
 &gt;&gt;<br>
 &gt;&gt; #lang typed/racket<br>
 &gt;&gt;<br>
 &gt;&gt; (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 &gt;&gt; (define (convert-it a)<br>
 &gt;&gt; =C2=A0 (if (hash? a)<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (for/hash: : (HashTable Symbol Number) ([k ((=
 inst in-hash-keys Any Any) a)])<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 (values &#39;x 1))<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (error &#39;convert-it &quot;not a hash ~s&qu=
 ot; a)))<br>
 &gt;&gt;<br>
 &gt;&gt; produces<br>
 &gt;&gt;<br>
 &gt;&gt; Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].=
 <br>
 &gt;&gt; Language: typed/racket; memory limit: 128 MB.<br>
 &gt;&gt; . Type Checker: Expected (HashTable Any Any), but got (Unknown Typ=
 e: #(struct:HashtableTop 368 #(struct:combined-frees #hasheq() ()) #(struct=
 :combined-frees #hasheq() ()) #f hash)) in: a<br>
 &gt;&gt; &gt;<br>
 &gt;&gt;<br>
 &gt;&gt; but it seems like it should typecheck.<br>
 &gt;&gt;<br>
 &gt;&gt; *** How to repeat:<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; *** Environment:<br>
 &gt;&gt; macosx &quot;Darwin <a href=3D"http://wireless-165-124-117-23.nuwl=
 an.northwestern.edu" target=3D"_blank">wireless-165-124-117-23.nuwlan.north=
 western.edu</a> 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PD=
 T 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64&quot; (x86_64-macosx/3m)=
  (get-display-depth) =3D 32<br>
 
 &gt;&gt; Human Language: english<br>
 &gt;&gt; (current-memory-use) 593927812<br>
 &gt;&gt; Links: (links) =3D (&quot;mini-hdl&quot;); (links #:user? #f) =3D =
 (); (links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 &gt;&gt; raco pkg (show):<br>
 &gt;&gt; Installation-wide:<br>
 &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; User-specific, all-version:<br>
 &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; User-specific, version-specific (5.3.4.5):<br>
 &gt;&gt; =C2=A0[none]<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; Collections:<br>
 &gt;&gt; (&quot;/Users/robby/Library/Racket/<a href=3D"http://5.3.4.5/colle=
 cts" target=3D"_blank">5.3.4.5/collects</a>&quot;<br>
 &gt;&gt; =C2=A0(non-existent-path))<br>
 &gt;&gt; (&quot;/Users/robby/git/exp/plt/collects&quot;<br>
 &gt;&gt; =C2=A0(&quot;.gitignore&quot; &quot;2htdp&quot; &quot;algol60&quot=
 ; &quot;at-exp&quot; &quot;browser&quot; &quot;compatibility&quot; &quot;co=
 mpiler&quot; &quot;config&quot; &quot;data&quot; &quot;datalog&quot; &quot;=
 db&quot; &quot;defaults&quot; &quot;deinprogramm&quot; &quot;drracket&quot;=
  &quot;drscheme&quot; &quot;dynext&quot; &quot;embedded-gui&quot; &quot;eop=
 l&quot; &quot;errortrace&quot; &quot;ffi&quot; &quot;file&quot; &quot;frame=
 work&quot; &quot;frtime&quot; &quot;future-visualizer&quot; &quot;games&quo=
 t; &quot;graphics&quot; &quot;gui-debugger&quot; &quot;handin-client&quot; =
 &quot;handin-server&quot; &quot;help&quot; &quot;hierlist&quot; &quot;honu&=
 quot; &quot;htdp&quot; &quot;html&quot; &quot;icons&quot; &quot;images&quot=
 ; &quot;info-domain&quot; &quot;json&quot; &quot;lang&quot; &quot;launcher&=
 quot; &quot;lazy&quot; &quot;macro-debugger&quot; &quot;make&quot; &quot;ma=
 th&quot; &quot;meta&quot; &quot;mred&quot; &quot;mrlib&quot; &quot;mysterx&=
 quot; &quot;mzcom&quot; &quot;mzlib&quot; &quot;mzscheme&quot; &quot;net&qu=
 ot; &quot;openssl&quot; &quot;parser-tools&quot; &quot;picturing-programs&q=
 uot; &quot;pkg&quot; &quot;plai&quot; &quot;planet&quot; &quot;planet2&quot=
 ; &quot;plot&quot; &quot;preprocessor&quot; &quot;profile&quot; &quot;r5rs&=
 quot; &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quot; &quot;rackuni=
 t&quot; &quot;raco&quot; &quot;reader&quot; &quot;readline&quot; &quot;real=
 m&quot; &quot;redex&quot; &quot;repo-time-stamp&quot; &quot;rnrs&quot; &quo=
 t;s-exp&quot; &quot;scheme&quot; &quot;schemeunit&quot; &quot;scribble&quot=
 ; &quot;scribblings&quot; &quot;scriblib&quot; &quot;setup&quot; &quot;sgl&=
 quot; &quot;slatex&quot; &quot;slideshow&quot; &quot;srfi&quot; &quot;stepp=
 er&quot; &quot;string-constants&quot; &quot;swindle&quot; &quot;syntax&quot=
 ; &quot;syntax-color&quot; &quot;teachpack&quot; &quot;test-engine&quot; &q=
 uot;tests&quot; &quot;texpict&quot; &quot;trace&quot; &quot;typed&quot; &qu=
 ot;typed-racket&quot;<br>
 
 &gt; =C2=A0&quot;!<br>
 &gt;&gt; =C2=A0typed-scheme&quot; &quot;unstable&quot; &quot;version&quot; =
 &quot;web-server&quot; &quot;wxme&quot; &quot;xml&quot; &quot;xrepl&quot;))=
 <br>
 &gt;&gt;<br>
 &gt;&gt; Computer Language: ((&quot;Determine language from source&quot;) (=
 #(#t print mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n=
 &quot; #t #t ((main) (test))))<br>
 &gt;&gt;<br>
 </blockquote></div>
 
 --f46d043c7ca6a5a4bc04db319efc--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        robby@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 09:13:09 -0700

 I agree for the easy fix now, but am confused on what you mean
 seperate data types. The proposal is separate from the splitting of
 immutable and mutable hashtables, since immutable hashtables support
 hash-set while readonly ones would not. Even if we had separate
 datatypes for immutable and mutable hashtables we would want a
 datatype for readonly operations so that hash-ref would work on either
 without case-> types.
 
 On Thu, Apr 25, 2013 at 9:07 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > Neil Toronto has also talked about things along these lines.  I think
 > they're good ideas, although my first preference would be to have real
 > separate data types.  However, we should fix this bug in the easy way now,
 > and then make larger changes.
 >
 > Sam
 >
 > On Apr 25, 2013 9:02 AM, "Eric Dobson" <eric.n.dobson@gmail.com> wrote:
 >>
 >> Vincent: all functions that take in a hashtable for reading only
 >> should be able to support this, which would include hash-ref,
 >> hash-has-key, .... And now we are also pushing that requirement on all
 >> users who write functions that use read only hashtables to have to use
 >> a case-> type.
 >>
 >> My basic proposal is to have an covariant datatype (ReadonlyHashtable
 >> a b) which is a supertype of (Hashtable a b) and HashtableTop is
 >> replaced with (ReadonlyHashtable Any Any), and have readonly functions
 >> use that type. This could also apply to VectorTop, as Sam points out.
 >> Note that I'm not tied to the Readonly name.
 >>
 >> On Thu, Apr 25, 2013 at 8:51 AM, Vincent St-Amour <stamourv@ccs.neu.edu>
 >> wrote:
 >> > If I understand it correctly, the problem is that `hash?' is a predicate
 >> > for the type `HashTableTop' (which doesn't print properly, that's a
 >> > separate issue), which is the supertype of all hash tables.
 >> >
 >> > Due to invariance, `HashTableTop' is not equivalent to `(HashTable Any
 >> > Any)',
 >> > which causes the program to not typecheck.
 >> >
 >> > I think the solution would be to extend the type of `in-hash-keys' to
 >> > accept `HashTableTop' and yield `Any'. I'll look into it.
 >> >
 >> > Vincent
 >> >
 >> >
 >> > At Thu, 25 Apr 2013 10:00:01 -0400,
 >> > robby@racket-lang.org wrote:
 >> >>
 >> >> A new problem report is waiting at
 >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13710
 >> >>
 >> >> Reported by Robby Findler for release: 5.3.4.5--2013-04-24(951538ab/d)
 >> >>
 >> >> *** Description:
 >> >> Sam asked me to file this as a bug report.
 >> >>
 >> >> This program:
 >> >>
 >> >> #lang typed/racket
 >> >>
 >> >> (: convert-it (Any -> (HashTable Symbol Number)))
 >> >> (define (convert-it a)
 >> >>   (if (hash? a)
 >> >>       (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys
 >> >> Any Any) a)])
 >> >>         (values 'x 1))
 >> >>       (error 'convert-it "not a hash ~s" a)))
 >> >>
 >> >> produces
 >> >>
 >> >> Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 >> >> Language: typed/racket; memory limit: 128 MB.
 >> >> . Type Checker: Expected (HashTable Any Any), but got (Unknown Type:
 >> >> #(struct:HashtableTop 368 #(struct:combined-frees #hasheq() ())
 >> >> #(struct:combined-frees #hasheq() ()) #f hash)) in: a
 >> >> >
 >> >>
 >> >> but it seems like it should typecheck.
 >> >>
 >> >> *** How to repeat:
 >> >>
 >> >>
 >> >> *** Environment:
 >> >> macosx "Darwin wireless-165-124-117-23.nuwlan.northwestern.edu 11.4.2
 >> >> Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012;
 >> >> root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m)
 >> >> (get-display-depth) = 32
 >> >> Human Language: english
 >> >> (current-memory-use) 593927812
 >> >> Links: (links) = ("mini-hdl"); (links #:user? #f) = (); (links #:root?
 >> >> #t) = (); (links #:user? #f #:root? #t) = ()
 >> >> raco pkg (show):
 >> >> Installation-wide:
 >> >>  [none]
 >> >> User-specific, all-version:
 >> >>  [none]
 >> >> User-specific, version-specific (5.3.4.5):
 >> >>  [none]
 >> >>
 >> >>
 >> >>
 >> >> Collections:
 >> >> ("/Users/robby/Library/Racket/5.3.4.5/collects"
 >> >>  (non-existent-path))
 >> >> ("/Users/robby/git/exp/plt/collects"
 >> >>  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility"
 >> >> "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm"
 >> >> "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi"
 >> >> "file" "framework" "frtime" "future-visualizer" "games" "graphics"
 >> >> "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu"
 >> >> "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy"
 >> >> "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom"
 >> >> "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "pkg"
 >> >> "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs"
 >> >> "racket" "racklog" "rackunit" "raco" "reader" "readline" "realm" "redex"
 >> >> "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble"
 >> >> "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper"
 >> >> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 >> >> "test-engine" "tests" "texpict" "trace" "typed" "typed-racket"
 >> >  "!
 >> >>  typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 >> >>
 >> >> Computer Language: (("Determine language from source") (#(#t print
 >> >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >> >> (test))))
 >> >>
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: endobson <eric.n.dobson@gmail.com>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>, robby <robby@racket-lang.org>,
        bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13710: hash? in TR
Date: Thu, 25 Apr 2013 12:27:32 -0400

 --f46d043d64af3bde0e04db31e560
 Content-Type: text/plain; charset=UTF-8
 
 I'm referring to a not-going-to-happen split between the types the way that
 mcons and cons are different.  It's just something I wish we had done a
 long time ago, not something really relevant now.
 On Apr 25, 2013 9:13 AM, "Eric Dobson" <eric.n.dobson@gmail.com> wrote:
 
 > I agree for the easy fix now, but am confused on what you mean
 > seperate data types. The proposal is separate from the splitting of
 > immutable and mutable hashtables, since immutable hashtables support
 > hash-set while readonly ones would not. Even if we had separate
 > datatypes for immutable and mutable hashtables we would want a
 > datatype for readonly operations so that hash-ref would work on either
 > without case-> types.
 >
 > On Thu, Apr 25, 2013 at 9:07 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>
 > wrote:
 > > Neil Toronto has also talked about things along these lines.  I think
 > > they're good ideas, although my first preference would be to have real
 > > separate data types.  However, we should fix this bug in the easy way
 > now,
 > > and then make larger changes.
 > >
 > > Sam
 > >
 > > On Apr 25, 2013 9:02 AM, "Eric Dobson" <eric.n.dobson@gmail.com> wrote:
 > >>
 > >> Vincent: all functions that take in a hashtable for reading only
 > >> should be able to support this, which would include hash-ref,
 > >> hash-has-key, .... And now we are also pushing that requirement on all
 > >> users who write functions that use read only hashtables to have to use
 > >> a case-> type.
 > >>
 > >> My basic proposal is to have an covariant datatype (ReadonlyHashtable
 > >> a b) which is a supertype of (Hashtable a b) and HashtableTop is
 > >> replaced with (ReadonlyHashtable Any Any), and have readonly functions
 > >> use that type. This could also apply to VectorTop, as Sam points out.
 > >> Note that I'm not tied to the Readonly name.
 > >>
 > >> On Thu, Apr 25, 2013 at 8:51 AM, Vincent St-Amour <stamourv@ccs.neu.edu
 > >
 > >> wrote:
 > >> > If I understand it correctly, the problem is that `hash?' is a
 > predicate
 > >> > for the type `HashTableTop' (which doesn't print properly, that's a
 > >> > separate issue), which is the supertype of all hash tables.
 > >> >
 > >> > Due to invariance, `HashTableTop' is not equivalent to `(HashTable Any
 > >> > Any)',
 > >> > which causes the program to not typecheck.
 > >> >
 > >> > I think the solution would be to extend the type of `in-hash-keys' to
 > >> > accept `HashTableTop' and yield `Any'. I'll look into it.
 > >> >
 > >> > Vincent
 > >> >
 > >> >
 > >> > At Thu, 25 Apr 2013 10:00:01 -0400,
 > >> > robby@racket-lang.org wrote:
 > >> >>
 > >> >> A new problem report is waiting at
 > >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13710
 > >> >>
 > >> >> Reported by Robby Findler for release:
 > 5.3.4.5--2013-04-24(951538ab/d)
 > >> >>
 > >> >> *** Description:
 > >> >> Sam asked me to file this as a bug report.
 > >> >>
 > >> >> This program:
 > >> >>
 > >> >> #lang typed/racket
 > >> >>
 > >> >> (: convert-it (Any -> (HashTable Symbol Number)))
 > >> >> (define (convert-it a)
 > >> >>   (if (hash? a)
 > >> >>       (for/hash: : (HashTable Symbol Number) ([k ((inst in-hash-keys
 > >> >> Any Any) a)])
 > >> >>         (values 'x 1))
 > >> >>       (error 'convert-it "not a hash ~s" a)))
 > >> >>
 > >> >> produces
 > >> >>
 > >> >> Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab/d) [3m].
 > >> >> Language: typed/racket; memory limit: 128 MB.
 > >> >> . Type Checker: Expected (HashTable Any Any), but got (Unknown Type:
 > >> >> #(struct:HashtableTop 368 #(struct:combined-frees #hasheq() ())
 > >> >> #(struct:combined-frees #hasheq() ()) #f hash)) in: a
 > >> >> >
 > >> >>
 > >> >> but it seems like it should typecheck.
 > >> >>
 > >> >> *** How to repeat:
 > >> >>
 > >> >>
 > >> >> *** Environment:
 > >> >> macosx "Darwin wireless-165-124-117-23.nuwlan.northwestern.edu11.4.2
 > >> >> Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012;
 > >> >> root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m)
 > >> >> (get-display-depth) = 32
 > >> >> Human Language: english
 > >> >> (current-memory-use) 593927812
 > >> >> Links: (links) = ("mini-hdl"); (links #:user? #f) = (); (links
 > #:root?
 > >> >> #t) = (); (links #:user? #f #:root? #t) = ()
 > >> >> raco pkg (show):
 > >> >> Installation-wide:
 > >> >>  [none]
 > >> >> User-specific, all-version:
 > >> >>  [none]
 > >> >> User-specific, version-specific (5.3.4.5):
 > >> >>  [none]
 > >> >>
 > >> >>
 > >> >>
 > >> >> Collections:
 > >> >> ("/Users/robby/Library/Racket/5.3.4.5/collects"
 > >> >>  (non-existent-path))
 > >> >> ("/Users/robby/git/exp/plt/collects"
 > >> >>  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility"
 > >> >> "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm"
 > >> >> "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace"
 > "ffi"
 > >> >> "file" "framework" "frtime" "future-visualizer" "games" "graphics"
 > >> >> "gui-debugger" "handin-client" "handin-server" "help" "hierlist"
 > "honu"
 > >> >> "htdp" "html" "icons" "images" "info-domain" "json" "lang"
 > "launcher" "lazy"
 > >> >> "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx"
 > "mzcom"
 > >> >> "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 > "picturing-programs" "pkg"
 > >> >> "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs"
 > "r6rs"
 > >> >> "racket" "racklog" "rackunit" "raco" "reader" "readline" "realm"
 > "redex"
 > >> >> "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble"
 > >> >> "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi"
 > "stepper"
 > >> >> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"
 > >> >> "test-engine" "tests" "texpict" "trace" "typed" "typed-racket"
 > >> >  "!
 > >> >>  typed-scheme" "unstable" "version" "web-server" "wxme" "xml"
 > "xrepl"))
 > >> >>
 > >> >> Computer Language: (("Determine language from source") (#(#t print
 > >> >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 > ((main)
 > >> >> (test))))
 > >> >>
 >
 
 --f46d043d64af3bde0e04db31e560
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">I&#39;m referring to a not-going-to-happen split between the=
  types the way that mcons and cons are different.=C2=A0 It&#39;s just somet=
 hing I wish we had done a long time ago, not something really relevant now.=
 </p>
 
 <div class=3D"gmail_quote">On Apr 25, 2013 9:13 AM, &quot;Eric Dobson&quot;=
  &lt;<a href=3D"mailto:eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>=
 &gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_quote" style=
 =3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 I agree for the easy fix now, but am confused on what you mean<br>
 seperate data types. The proposal is separate from the splitting of<br>
 immutable and mutable hashtables, since immutable hashtables support<br>
 hash-set while readonly ones would not. Even if we had separate<br>
 datatypes for immutable and mutable hashtables we would want a<br>
 datatype for readonly operations so that hash-ref would work on either<br>
 without case-&gt; types.<br>
 <br>
 On Thu, Apr 25, 2013 at 9:07 AM, Sam Tobin-Hochstadt &lt;<a href=3D"mailto:=
 samth@ccs.neu.edu">samth@ccs.neu.edu</a>&gt; wrote:<br>
 &gt; Neil Toronto has also talked about things along these lines. =C2=A0I t=
 hink<br>
 &gt; they&#39;re good ideas, although my first preference would be to have =
 real<br>
 &gt; separate data types. =C2=A0However, we should fix this bug in the easy=
  way now,<br>
 &gt; and then make larger changes.<br>
 &gt;<br>
 &gt; Sam<br>
 &gt;<br>
 &gt; On Apr 25, 2013 9:02 AM, &quot;Eric Dobson&quot; &lt;<a href=3D"mailto=
 :eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; Vincent: all functions that take in a hashtable for reading only<b=
 r>
 &gt;&gt; should be able to support this, which would include hash-ref,<br>
 &gt;&gt; hash-has-key, .... And now we are also pushing that requirement on=
  all<br>
 &gt;&gt; users who write functions that use read only hashtables to have to=
  use<br>
 &gt;&gt; a case-&gt; type.<br>
 &gt;&gt;<br>
 &gt;&gt; My basic proposal is to have an covariant datatype (ReadonlyHashta=
 ble<br>
 &gt;&gt; a b) which is a supertype of (Hashtable a b) and HashtableTop is<b=
 r>
 &gt;&gt; replaced with (ReadonlyHashtable Any Any), and have readonly funct=
 ions<br>
 &gt;&gt; use that type. This could also apply to VectorTop, as Sam points o=
 ut.<br>
 &gt;&gt; Note that I&#39;m not tied to the Readonly name.<br>
 &gt;&gt;<br>
 &gt;&gt; On Thu, Apr 25, 2013 at 8:51 AM, Vincent St-Amour &lt;<a href=3D"m=
 ailto:stamourv@ccs.neu.edu">stamourv@ccs.neu.edu</a>&gt;<br>
 &gt;&gt; wrote:<br>
 &gt;&gt; &gt; If I understand it correctly, the problem is that `hash?&#39;=
  is a predicate<br>
 &gt;&gt; &gt; for the type `HashTableTop&#39; (which doesn&#39;t print prop=
 erly, that&#39;s a<br>
 &gt;&gt; &gt; separate issue), which is the supertype of all hash tables.<b=
 r>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Due to invariance, `HashTableTop&#39; is not equivalent to `(=
 HashTable Any<br>
 &gt;&gt; &gt; Any)&#39;,<br>
 &gt;&gt; &gt; which causes the program to not typecheck.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; I think the solution would be to extend the type of `in-hash-=
 keys&#39; to<br>
 &gt;&gt; &gt; accept `HashTableTop&#39; and yield `Any&#39;. I&#39;ll look =
 into it.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Vincent<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; At Thu, 25 Apr 2013 10:00:01 -0400,<br>
 &gt;&gt; &gt; <a href=3D"mailto:robby@racket-lang.org">robby@racket-lang.or=
 g</a> wrote:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D13710" target=3D"_blank">http://bugs.racket-lang.org/query=
 /?cmd=3Dview&amp;pr=3D13710</a><br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Reported by Robby Findler for release: 5.3.4.5--2013-04-2=
 4(951538ab/d)<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Description:<br>
 &gt;&gt; &gt;&gt; Sam asked me to file this as a bug report.<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; This program:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; #lang typed/racket<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (: convert-it (Any -&gt; (HashTable Symbol Number)))<br>
 &gt;&gt; &gt;&gt; (define (convert-it a)<br>
 &gt;&gt; &gt;&gt; =C2=A0 (if (hash? a)<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (for/hash: : (HashTable Symbol Numbe=
 r) ([k ((inst in-hash-keys<br>
 &gt;&gt; &gt;&gt; Any Any) a)])<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 (values &#39;x 1))<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (error &#39;convert-it &quot;not a h=
 ash ~s&quot; a)))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; produces<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Welcome to DrRacket, version 5.3.4.5--2013-04-24(951538ab=
 /d) [3m].<br>
 &gt;&gt; &gt;&gt; Language: typed/racket; memory limit: 128 MB.<br>
 &gt;&gt; &gt;&gt; . Type Checker: Expected (HashTable Any Any), but got (Un=
 known Type:<br>
 &gt;&gt; &gt;&gt; #(struct:HashtableTop 368 #(struct:combined-frees #hasheq=
 () ())<br>
 &gt;&gt; &gt;&gt; #(struct:combined-frees #hasheq() ()) #f hash)) in: a<br>
 &gt;&gt; &gt;&gt; &gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; but it seems like it should typecheck.<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** How to repeat:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Environment:<br>
 &gt;&gt; &gt;&gt; macosx &quot;Darwin <a href=3D"http://wireless-165-124-11=
 7-23.nuwlan.northwestern.edu" target=3D"_blank">wireless-165-124-117-23.nuw=
 lan.northwestern.edu</a> 11.4.2<br>
 &gt;&gt; &gt;&gt; Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 201=
 2;<br>
 &gt;&gt; &gt;&gt; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64&quot; (x86_64-=
 macosx/3m)<br>
 &gt;&gt; &gt;&gt; (get-display-depth) =3D 32<br>
 &gt;&gt; &gt;&gt; Human Language: english<br>
 &gt;&gt; &gt;&gt; (current-memory-use) 593927812<br>
 &gt;&gt; &gt;&gt; Links: (links) =3D (&quot;mini-hdl&quot;); (links #:user?=
  #f) =3D (); (links #:root?<br>
 &gt;&gt; &gt;&gt; #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 &gt;&gt; &gt;&gt; raco pkg (show):<br>
 &gt;&gt; &gt;&gt; Installation-wide:<br>
 &gt;&gt; &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; &gt;&gt; User-specific, all-version:<br>
 &gt;&gt; &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; &gt;&gt; User-specific, version-specific (5.3.4.5):<br>
 &gt;&gt; &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Collections:<br>
 &gt;&gt; &gt;&gt; (&quot;/Users/robby/Library/Racket/<a href=3D"http://5.3.=
 4.5/collects" target=3D"_blank">5.3.4.5/collects</a>&quot;<br>
 &gt;&gt; &gt;&gt; =C2=A0(non-existent-path))<br>
 &gt;&gt; &gt;&gt; (&quot;/Users/robby/git/exp/plt/collects&quot;<br>
 &gt;&gt; &gt;&gt; =C2=A0(&quot;.gitignore&quot; &quot;2htdp&quot; &quot;alg=
 ol60&quot; &quot;at-exp&quot; &quot;browser&quot; &quot;compatibility&quot;=
 <br>
 &gt;&gt; &gt;&gt; &quot;compiler&quot; &quot;config&quot; &quot;data&quot; =
 &quot;datalog&quot; &quot;db&quot; &quot;defaults&quot; &quot;deinprogramm&=
 quot;<br>
 &gt;&gt; &gt;&gt; &quot;drracket&quot; &quot;drscheme&quot; &quot;dynext&qu=
 ot; &quot;embedded-gui&quot; &quot;eopl&quot; &quot;errortrace&quot; &quot;=
 ffi&quot;<br>
 &gt;&gt; &gt;&gt; &quot;file&quot; &quot;framework&quot; &quot;frtime&quot;=
  &quot;future-visualizer&quot; &quot;games&quot; &quot;graphics&quot;<br>
 &gt;&gt; &gt;&gt; &quot;gui-debugger&quot; &quot;handin-client&quot; &quot;=
 handin-server&quot; &quot;help&quot; &quot;hierlist&quot; &quot;honu&quot;<=
 br>
 &gt;&gt; &gt;&gt; &quot;htdp&quot; &quot;html&quot; &quot;icons&quot; &quot=
 ;images&quot; &quot;info-domain&quot; &quot;json&quot; &quot;lang&quot; &qu=
 ot;launcher&quot; &quot;lazy&quot;<br>
 &gt;&gt; &gt;&gt; &quot;macro-debugger&quot; &quot;make&quot; &quot;math&qu=
 ot; &quot;meta&quot; &quot;mred&quot; &quot;mrlib&quot; &quot;mysterx&quot;=
  &quot;mzcom&quot;<br>
 &gt;&gt; &gt;&gt; &quot;mzlib&quot; &quot;mzscheme&quot; &quot;net&quot; &q=
 uot;openssl&quot; &quot;parser-tools&quot; &quot;picturing-programs&quot; &=
 quot;pkg&quot;<br>
 &gt;&gt; &gt;&gt; &quot;plai&quot; &quot;planet&quot; &quot;planet2&quot; &=
 quot;plot&quot; &quot;preprocessor&quot; &quot;profile&quot; &quot;r5rs&quo=
 t; &quot;r6rs&quot;<br>
 &gt;&gt; &gt;&gt; &quot;racket&quot; &quot;racklog&quot; &quot;rackunit&quo=
 t; &quot;raco&quot; &quot;reader&quot; &quot;readline&quot; &quot;realm&quo=
 t; &quot;redex&quot;<br>
 &gt;&gt; &gt;&gt; &quot;repo-time-stamp&quot; &quot;rnrs&quot; &quot;s-exp&=
 quot; &quot;scheme&quot; &quot;schemeunit&quot; &quot;scribble&quot;<br>
 &gt;&gt; &gt;&gt; &quot;scribblings&quot; &quot;scriblib&quot; &quot;setup&=
 quot; &quot;sgl&quot; &quot;slatex&quot; &quot;slideshow&quot; &quot;srfi&q=
 uot; &quot;stepper&quot;<br>
 &gt;&gt; &gt;&gt; &quot;string-constants&quot; &quot;swindle&quot; &quot;sy=
 ntax&quot; &quot;syntax-color&quot; &quot;teachpack&quot;<br>
 &gt;&gt; &gt;&gt; &quot;test-engine&quot; &quot;tests&quot; &quot;texpict&q=
 uot; &quot;trace&quot; &quot;typed&quot; &quot;typed-racket&quot;<br>
 &gt;&gt; &gt; =C2=A0&quot;!<br>
 &gt;&gt; &gt;&gt; =C2=A0typed-scheme&quot; &quot;unstable&quot; &quot;versi=
 on&quot; &quot;web-server&quot; &quot;wxme&quot; &quot;xml&quot; &quot;xrep=
 l&quot;))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Computer Language: ((&quot;Determine language from source=
 &quot;) (#(#t print<br>
 &gt;&gt; &gt;&gt; mixed-fraction-e #f #t debug) (default) #() &quot;#lang r=
 acket\n&quot; #t #t ((main)<br>
 &gt;&gt; &gt;&gt; (test))))<br>
 &gt;&gt; &gt;&gt;<br>
 </blockquote></div>
 
 --f46d043d64af3bde0e04db31e560--
Responsible changed from "nobody" to "stamourv" by stamourv@racket-lang.org at Thu, 25 Apr 2013 17:29:17 -0400
Reason>>> A commit by stamourv@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/e6ff57f3bd
State changed from "open" to "closed" by stamourv@racket-lang.org at Thu, 25 Apr 2013 17:29:17 -0400
Reason>>> A commit by stamourv@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/e6ff57f3bd
  | Allow read-only hash operations to accept HashTop.
  | 
  | Closes PR13710.

