From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Mar 10 15:52:11 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p2AKq8Tu011810
	for <bugs@bugs.plt-scheme.org>; Thu, 10 Mar 2011 15:52:08 -0500
Message-Id: <201103102052.p2AKq2s9011792@champlain.ccs.neu.edu>
Date: Thu, 10 Mar 2011 15:52:02 -0500
From: mimmottos@gmail.com
To: bugs@racket-lang.org
Subject: Corrections to the Guide document

>Number:         11790
>Category:       all
>Synopsis:       Corrections to the Guide document
>Class:          doc-bug
>Responsible:    eli
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Mar 10 15:56:02 -0500 2011
>Closed-Date:    Fri Mar 11 06:48:03 -0500 2011
>Last-Modified:  Fri Mar 11 09:41:55 -0500 2011
>Originator:     Jussi Salmela
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1
>Environment:
windows "Windows NT 6.1 (Build 7601) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 173340668

Collections:
("C:\\Users\\JussiVaan\\AppData\\Roaming\\Racket\\5.1\\collects"
 (non-existent-path))
("C:\\Program Files (x86)\\Racket\\collects"
 ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
The last sentence in section 2.3.1:

List comprehensions and related iteration forms are
described in see Iterations and Comprehensions.


====================================

I'm not a native speaker of English, but shouldn't
the first sentence of section 2.3.2 that now starts:

Although map and other iteration functions predefined,
they are not ...

be:

Although map and other iteration functions are predefined,
they are not ...


====================================

Section 3.6

Third paragraph:
    ... they serves as a convenient values to ...
==>
    ... they serve as convenient values to ...
    

The example near the end:

   > (eq? s 'g42)

misses the result


====================================

4.4.2

A argument of the form [arg-id default-expr] is optional.
==>
An argument of the form [arg-id default-expr] is optional.


====================================
4.11

The embedded quasiquote example near the end of this
section:

(quasiquote (1 2 (quasiquote (unquote (+ 1 2)
                                 (unquote (unquote (- 5 1)))))))

gives:

unquote: expects exactly one expression in:
(unquote (+ 1 2) (unquote (unquote (- 5 1)))) ...

If one r-par is inserted at the end of the first line and one
deleted at he end, the REPL gives:

'(1 2 (quasiquote ,'(+ 1 2) ,4))

which I guess is the same as:

'(1 2 (quasiquote (unquote (+ 1 2)) (unquote 4)))

that was given as the evaluation result.

But: I don't understand what good is a result like this which
has a quasiquote with 2 arguments when quasiquote only
uses one.


====================================

4.12

Multiple datums can be supplied for each clause, and the
corresponding expr is evaluated of any of the datums match.
==> .... if any .....


====================================

4.13

The lokation example near the end:

> (set! location "on a bus")
> (would-ya-could-ya?)
#f

==>

> (set! lokation "on a bus")
> (would-ya-could-ya?)
#t


====================================

6.4, last line

(require (except-in (prefix m: 'm) m:ghost))

==>

(require (except-in (prefix-in m: 'm) m:ghost))


====================================

6.6, compile-enforce-module-constants

Playing with the REPL I get the following puzzling
interaction 

> (compile-enforce-module-constants #f)
> (module m2 racket
      (provide pie)
      (define pie 3.141597))
> (require 'm2)
> pie
3.141597
> (module m2 racket
      (provide pie)
      (define pie 3))
> pie
3
> (compile-enforce-module-constants #t)
> (module m2 racket
      (provide pie)
      (define pie 3.1))
> pie
3.1
> (module m2 racket
      (provide pie)
      (define pie 3.14))
define-values: cannot re-define a constant: pie in module: 'm2

i.e. the first module redefinition after resetting
the compile-enforce-module-constants back to #t does
not cause the error msg but the next one does !?!


====================================

7.1.2

All of the contracts and module ...

==>

All of the contracts and modules ...


====================================

7.2.3

This module define an amount? function as uses it ...

==>

This module defines an amount? function and uses it ... 


====================================

7.2.3, last line

#rx"[0-9]*\\.[0-9][0-9][0-9]"))])

==>

#rx"[0-9]*\\.[0-9][0-9]"))])


====================================

7.2.4, last sentence

... and twice calls the give function on a value ...

==>

... and twice calls the given function on a value ...


====================================

7.3.5, 3rd line

... a pair or numbers ...

==>

... a pair of numbers ...


====================================

7.3.6

Going back to the back-account example, ...

==>

Going back to the bank-account example, ...


====================================

8.3

Overall, print as corresponds to ...

==>

Overall, print corresponds to ...


====================================

8.3

The examples at the end have
     (write '("alphabet" soup) out)
twice. One of them supposedly was meant to be
     (print '("alphabet" soup) out)


====================================

8.4

In neither can can the result be read back in ...

==>

In neither can the result be read back in ...


====================================

    9.4.2

[:word:] — ASCII same as \w

==>

[:word:] — ASCII word, same as \w


====================================

9.6.1

The following example corrects doubled words:
  > (regexp-replace* #px"(\\S+) \\1"
      (string-append "now is the the time for all good men to "
                     "to come to the aid of of the party")
      "\\1")
  "now is the time for all good men to come to the aid of the party"

======
So it does but it also does this:

> (regexp-replace* #px"(\\S+) \\1"
      (string-append "Too often do we err in our reasoning")
      "\\1")
"Tooften do werr in oureasoning"

I think this does the trick:

> (regexp-replace* #px"((^\\S+|\\S+ ))\\1"
      (string-append "too too often do we we err in in our reasoning")
      "\\1")
"too often do we err in our reasoning"

but since alternation is introduced only in 9.7 I don't know
how to correct this.


====================================

9.10

  > (define ip-re1
      (string-append
        "^"        ; nothing before
        n0-255     ; the first n0-255,
        "(?:"      ; then the subpattern of
        "\\."      ; a dot followed by
        n0-255     ; an n0-255,
        ")"        ; which is
        "{3}"      ; repeated exactly 3 times
        "$"        ; with nothing following))  

==>

  > (define ip-re1
     ......
     .......
        "$"        ; with nothing following
        ))  


====================================
>How-To-Repeat:

>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: mimmottos@gmail.com, bugs@racket-lang.org
Cc: bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11790: Corrections to the Guide document
Date: Fri, 11 Mar 2011 06:42:26 -0500

 I've fixed almost all of these, only two are left which are other
 bugs.
 
 
 Yesterday, mimmottos@gmail.com wrote:
 > Section 3.6
 > 
 > The example near the end:
 > 
 >    > (eq? s 'g42)
 > 
 > misses the result
 
 The problem here is more than just a typo (for later reference:
 `eval:alts' doesn't work with #f since the code strips off the syntax
 value somewhere, leading to a result of #f instead of #'#f).  I'll
 leave this for later.
 
 
 > 4.11
 > 
 > The embedded quasiquote example near the end of this
 > section:
 > 
 > (quasiquote (1 2 (quasiquote (unquote (+ 1 2)
 >                                  (unquote (unquote (- 5 1)))))))
 > 
 > gives:
 > 
 > unquote: expects exactly one expression in:
 > (unquote (+ 1 2) (unquote (unquote (- 5 1)))) ...
 
 Yeah, that's a confusing example, and more confusing to make it into the
 text source.  I "fixed" it, then realized that it's not the right fix so
 I fixed it:
 
   (quasiquote (1 2 (quasiquote ((unquote (+ 1 2))
                                 (unquote (unquote (- 5 1)))))))
 
 but then I thought that this might be too complex for the target
 audience, so I made three sample expressions instead:
 
   (quasiquote (1 2 (quasiquote (unquote (+ 1 2)))))
   (quasiquote (1 2 (quasiquote (unquote (unquote (- 5 1))))))
   (quasiquote (1 2 (quasiquote ((unquote (+ 1 2))
                                 (unquote (unquote (- 5 1)))))))
 
 I'd drop the last one completely, but further down it's used with the
 punctuations, so I left it in as a kind of glue to using both in a
 single qq.
 
 
 > But: I don't understand what good is a result like this which
 > has a quasiquote with 2 arguments when quasiquote only
 > uses one.
 
 I'm pretty sure that you're right -- there's no reason to do that at
 that point (or at any point in the guide).  If you try the above it
 should clarify what the intention was (sounds like you understand it).
 
 
 > 6.6, compile-enforce-module-constants
 > 
 > [...]
 > i.e. the first module redefinition after resetting
 > the compile-enforce-module-constants back to #t does
 > not cause the error msg but the next one does !?!
 
 This sounds reasonable -- the first module definition after you set it
 back to `#t' will compile with inlining -- overwriting the uninlined
 version, and the second one after that throws an error because it can't
 overwrite the inlined version.  But this sounds like an implementation
 detail that shouldn't be described -- doesn't sound like something that
 people should rely on.
 
 
 > 8.3
 > 
 > The examples at the end have
 >      (write '("alphabet" soup) out)
 > twice. One of them supposedly was meant to be
 >      (print '("alphabet" soup) out)
 
 That's what it looks like -- I changed it to `print', and added a
 `display' one too, to demonstrate that it's a bad idea.
 
 
 >     9.4.2
 > 
 > [:word:] — ASCII same as \w
 > 
 > ==>
 > 
 > [:word:] — ASCII word, same as \w
 
 I made this say: ASCII letters and _, same as \w
 
 
 > 9.6.1
 > 
 > The following example corrects doubled words:
 >   > (regexp-replace* #px"(\\S+) \\1"
 >       (string-append "now is the the time for all good men to "
 >                      "to come to the aid of of the party")
 >       "\\1")
 >   "now is the time for all good men to come to the aid of the party"
 > [...]
 > I think this does the trick:
 > 
 > > (regexp-replace* #px"((^\\S+|\\S+ ))\\1"
 >       (string-append "too too often do we we err in in our reasoning")
 >       "\\1")
 > "too often do we err in our reasoning"
 > 
 > but since alternation is introduced only in 9.7 I don't know
 > how to correct this.
 
 I made it use `\b' instead: #px"\\b(\\S+) \\1\\b" -- it was introduced
 earlier in the chapter.
 
 
 > 9.10
 > 
 >   > (define ip-re1
 >       (string-append
 >         "^"        ; nothing before
 >         n0-255     ; the first n0-255,
 >         "(?:"      ; then the subpattern of
 >         "\\."      ; a dot followed by
 >         n0-255     ; an n0-255,
 >         ")"        ; which is
 >         "{3}"      ; repeated exactly 3 times
 >         "$"        ; with nothing following))  
 > 
 > ==>
 > 
 >   > (define ip-re1
 >      ......
 >      .......
 >         "$"        ; with nothing following
 >         ))  
 
 This is a result of a different bug (which I filed separately:
 PR11798).  For now, I "fixed" it to:
 
   > (define ip-re1
       (string-append
        ...
        "$"))
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
 
Responsible changed from "nobody" to "eli" by eli@racket-lang.org at Fri, 11 Mar 2011 06:48:03 -0500
Reason>>> A commit by eli@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5a9d954f2a
State changed from "open" to "closed" by eli@racket-lang.org at Fri, 11 Mar 2011 06:48:03 -0500
Reason>>> A commit by eli@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5a9d954f2a

----------
A commit by mflatt@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/ae8705611b
