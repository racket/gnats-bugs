From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jan 15 15:30:07 2013
Received: from mail-oa0-f45.google.com (mail-oa0-f45.google.com [209.85.219.45])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r0FKU39I007676
	for <bugs@bugs.plt-scheme.org>; Tue, 15 Jan 2013 15:30:03 -0500
Message-Id: <201301152030.r0FKU1rE007655@champlain.ccs.neu.edu>
Date: Tue, 15 Jan 2013 15:30:01 -0500
From: asumu@ccs.neu.edu
To: bugs@racket-lang.org
Subject: 5.3.2.1--2013-01-15

>Number:         13434
>Category:       all
>Synopsis:       5.3.2.1--2013-01-15
>Class:          not-a-bug
>Responsible:    asumu
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jan 15 15:32:01 -0500 2013
>Closed-Date:    Tue Jan 15 17:17:03 -0500 2013
>Last-Modified:  Mon Feb 18 23:01:11 -0500 2013
>Originator:     Asumu Takikawa
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.1
>Environment:
linux-ubuntu
>Description:
Run the following snippet:

#lang typed/racket

(: f (All (B) ((B -> B) -> (B -> B))))
(define f (plambda: (B) ((f : (B -> B))) f))

((f identity) "Foo")

It will produce a type error. The immediate cause is that the
application gives:

> (f identity)
- : (Integer -> Integer)
#<procedure:identity>

When a polymorphic type was expected.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13434: 5.3.2.1--2013-01-15
Date: Tue, 15 Jan 2013 17:03:50 -0500

 I'm not sure why it guesses `Integer`, but it's got to guess
 something.  TR won't produce polymorphic results just because your
 type variables are under-constrainted.
 
 Sam
 
 On Tue, Jan 15, 2013 at 3:32 PM,  <asumu@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13434
 >
 > Reported by Asumu Takikawa for release: 5.3.2.1
 >
 > *** Description:
 > Run the following snippet:
 >
 > #lang typed/racket
 >
 > (: f (All (B) ((B -> B) -> (B -> B))))
 > (define f (plambda: (B) ((f : (B -> B))) f))
 >
 > ((f identity) "Foo")
 >
 > It will produce a type error. The immediate cause is that the
 > application gives:
 >
 >> (f identity)
 > - : (Integer -> Integer)
 > #<procedure:identity>
 >
 > When a polymorphic type was expected.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > linux-ubuntu
 >

Class changed from "sw-bug" to "not-a-bug" by asumu at Tue, 15 Jan 2013 17:17:03 -0500
Reason>>> Not a bug.

State changed from "open" to "closed" by asumu at Tue, 15 Jan 2013 17:17:03 -0500
Reason>>> Not a bug

From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13434: 5.3.2.1--2013-01-15
Date: Tue, 15 Jan 2013 17:16:19 -0500

 On 2013-01-15 17:03:50 -0500, Sam Tobin-Hochstadt wrote:
 > I'm not sure why it guesses `Integer`, but it's got to guess
 > something.  TR won't produce polymorphic results just because your
 > type variables are under-constrainted.
 
 You're right, I was confused about where to put the `All`s. I'll close
 the bug.
 
 Cheers,
 Asumu

Responsible changed from "nobody" to "asumu" by eli at Mon, 18 Feb 2013 23:01:11 -0500
Reason>>> asumu closed

