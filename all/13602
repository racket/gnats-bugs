From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Mar 14 16:37:48 2013
Received: from mail-ob0-f174.google.com (mail-ob0-f174.google.com [209.85.214.174])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2EKbjMw000439
	for <bugs@bugs.plt-scheme.org>; Thu, 14 Mar 2013 16:37:45 -0400
Message-Id: <201303142037.r2EKbghd000434@champlain.ccs.neu.edu>
Date: Thu, 14 Mar 2013 16:37:42 -0400
From: thwinters@gmail.com
To: bugs@racket-lang.org
Subject: null? does not properly evaluate to true

>Number:         13602
>Category:       all
>Synopsis:       null? does not properly evaluate to true
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Mar 14 16:40:01 -0400 2013
>Closed-Date:    Thu Mar 14 16:41:30 -0400 2013
>Last-Modified:  Thu Mar 14 16:44:01 -0400 2013
>Originator:     Thomas Winters
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.3
>Environment:
unix "Linux Elrond 2.6.32-5-amd64 #1 SMP Sun Sep 23 10:07:46 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 328003896
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
Planet2 (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific:
 [none]



Collections:
("/home/thomas/.racket/5.3.3/collects"
 (non-existent-path))
("/usr/local/lib/racket/collects"
 ("trace" "rackunit" "slideshow" "mred" "errortrace" "string-constants" "file" "htdp" "embedded-gui" "wxme" "browser" "planet" "scribblings" "version" "datalog" "parser-tools" "net" "test-engine" "sgl" "xml" "at-exp" "launcher" "compiler" "planet2" "algol60" "plot" "deinprogramm" "racklog" "info-domain" "scribble" "mzcom" "frtime" "drscheme" "mzscheme" "racket" "hierlist" "games" "profile" "rnrs" "lang" "drracket" "framework" "config" "reader" "html" "redex" "swindle" "raco" "setup" "gui-debugger" "mzlib" "db" "mrlib" "plai" "openssl" "dynext" "future-visualizer" "teachpack" "slatex" "stepper" "compatibility" "r5rs" "r6rs" "eopl" "help" "json" "graphics" "syntax-color" "readline" "defaults" "images" "web-server" "unstable" "mysterx" "syntax" "ffi" "typed-scheme" "macro-debugger" "preprocessor" "scriblib" "s-exp" "picturing-programs" "typed" "typed-racket" "data" "texpict" "xrepl" "lazy" "srfi" "schemeunit" "scheme" "2htdp" "make" "math" "icons"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
When a function returns 'null from a list,
null? will not match it as null.

However, if a function returns '() from a list, null? works correctly.
>How-To-Repeat:
(define (ret-null) (car '(null)))

(ret-null) -> ()
(null? (ret-null)) -> #f

However, if
(define (ret-null) null) or (define (ret-null) '())
(ret-null) -> ()
(null? (ret-null)) -> #t

or if
(define (ret-null) (car '(())))
then
(null? (ret-null)) -> #t
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by robby at Thu, 14 Mar 2013 16:41:30 -0400
Reason>>> 
not a bug

From: Robby Findler <robby@eecs.northwestern.edu>
To: thwinters@gmail.com, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13602: null? does not properly evaluate to true
Date: Thu, 14 Mar 2013 15:41:16 -0500

 --e89a8f923da257322804d7e88ba0
 Content-Type: text/plain; charset=UTF-8
 
 This is the correct behavior. 'null is a symbol, which is a different thing
 than '() or null.
 
 Robby
 
 
 On Thu, Mar 14, 2013 at 3:40 PM, <thwinters@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13602
 >
 > Reported by Thomas Winters for release: 5.3.3
 >
 > *** Description:
 > When a function returns 'null from a list,
 > null? will not match it as null.
 >
 > However, if a function returns '() from a list, null? works correctly.
 >
 > *** How to repeat:
 > (define (ret-null) (car '(null)))
 >
 > (ret-null) -> ()
 > (null? (ret-null)) -> #f
 >
 > However, if
 > (define (ret-null) null) or (define (ret-null) '())
 > (ret-null) -> ()
 > (null? (ret-null)) -> #t
 >
 > or if
 > (define (ret-null) (car '(())))
 > then
 > (null? (ret-null)) -> #t
 >
 > *** Environment:
 > unix "Linux Elrond 2.6.32-5-amd64 #1 SMP Sun Sep 23 10:07:46 UTC 2012
 > x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 328003896
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 > (links #:user? #f #:root? #t) = ()
 > Planet2 (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific:
 >  [none]
 >
 >
 >
 > Collections:
 > ("/home/thomas/.racket/5.3.3/collects"
 >  (non-existent-path))
 > ("/usr/local/lib/racket/collects"
 >  ("trace" "rackunit" "slideshow" "mred" "errortrace" "string-constants"
 > "file" "htdp" "embedded-gui" "wxme" "browser" "planet" "scribblings"
 > "version" "datalog" "parser-tools" "net" "test-engine" "sgl" "xml" "at-exp"
 > "launcher" "compiler" "planet2" "algol60" "plot" "deinprogramm" "racklog"
 > "info-domain" "scribble" "mzcom" "frtime" "drscheme" "mzscheme" "racket"
 > "hierlist" "games" "profile" "rnrs" "lang" "drracket" "framework" "config"
 > "reader" "html" "redex" "swindle" "raco" "setup" "gui-debugger" "mzlib"
 > "db" "mrlib" "plai" "openssl" "dynext" "future-visualizer" "teachpack"
 > "slatex" "stepper" "compatibility" "r5rs" "r6rs" "eopl" "help" "json"
 > "graphics" "syntax-color" "readline" "defaults" "images" "web-server"
 > "unstable" "mysterx" "syntax" "ffi" "typed-scheme" "macro-debugger"
 > "preprocessor" "scriblib" "s-exp" "picturing-programs" "typed"
 > "typed-racket" "data" "texpict" "xrepl" "lazy" "srfi" "schemeunit" "scheme"
 > "2htdp" "make" "math" "icons"))
 >
 > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 > (test))))
 >
 >
 
 --e89a8f923da257322804d7e88ba0
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">This is the correct behavior. &#39;null is a symbol, which=
  is a different thing than &#39;() or null.<div><br></div><div>Robby</div><=
 /div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Thu, =
 Mar 14, 2013 at 3:40 PM,  <span dir=3D"ltr">&lt;<a href=3D"mailto:thwinters=
 @gmail.com" target=3D"_blank">thwinters@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 602" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13602</a><br>
 <br>
 Reported by Thomas Winters for release: 5.3.3<br>
 <br>
 *** Description:<br>
 When a function returns &#39;null from a list,<br>
 null? will not match it as null.<br>
 <br>
 However, if a function returns &#39;() from a list, null? works correctly.<=
 br>
 <br>
 *** How to repeat:<br>
 (define (ret-null) (car &#39;(null)))<br>
 <br>
 (ret-null) -&gt; ()<br>
 (null? (ret-null)) -&gt; #f<br>
 <br>
 However, if<br>
 (define (ret-null) null) or (define (ret-null) &#39;())<br>
 (ret-null) -&gt; ()<br>
 (null? (ret-null)) -&gt; #t<br>
 <br>
 or if<br>
 (define (ret-null) (car &#39;(())))<br>
 then<br>
 (null? (ret-null)) -&gt; #t<br>
 <br>
 *** Environment:<br>
 unix &quot;Linux Elrond 2.6.32-5-amd64 #1 SMP Sun Sep 23 10:07:46 UTC 2012 =
 x86_64 GNU/Linux&quot; (x86_64-linux/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 328003896<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D ()<br>
 Planet2 (show):<br>
 Installation-wide:<br>
 =C2=A0[none]<br>
 User-specific, all-version:<br>
 =C2=A0[none]<br>
 User-specific, version-specific:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/home/thomas/.racket/5.3.3/collects&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/usr/local/lib/racket/collects&quot;<br>
 =C2=A0(&quot;trace&quot; &quot;rackunit&quot; &quot;slideshow&quot; &quot;m=
 red&quot; &quot;errortrace&quot; &quot;string-constants&quot; &quot;file&qu=
 ot; &quot;htdp&quot; &quot;embedded-gui&quot; &quot;wxme&quot; &quot;browse=
 r&quot; &quot;planet&quot; &quot;scribblings&quot; &quot;version&quot; &quo=
 t;datalog&quot; &quot;parser-tools&quot; &quot;net&quot; &quot;test-engine&=
 quot; &quot;sgl&quot; &quot;xml&quot; &quot;at-exp&quot; &quot;launcher&quo=
 t; &quot;compiler&quot; &quot;planet2&quot; &quot;algol60&quot; &quot;plot&=
 quot; &quot;deinprogramm&quot; &quot;racklog&quot; &quot;info-domain&quot; =
 &quot;scribble&quot; &quot;mzcom&quot; &quot;frtime&quot; &quot;drscheme&qu=
 ot; &quot;mzscheme&quot; &quot;racket&quot; &quot;hierlist&quot; &quot;game=
 s&quot; &quot;profile&quot; &quot;rnrs&quot; &quot;lang&quot; &quot;drracke=
 t&quot; &quot;framework&quot; &quot;config&quot; &quot;reader&quot; &quot;h=
 tml&quot; &quot;redex&quot; &quot;swindle&quot; &quot;raco&quot; &quot;setu=
 p&quot; &quot;gui-debugger&quot; &quot;mzlib&quot; &quot;db&quot; &quot;mrl=
 ib&quot; &quot;plai&quot; &quot;openssl&quot; &quot;dynext&quot; &quot;futu=
 re-visualizer&quot; &quot;teachpack&quot; &quot;slatex&quot; &quot;stepper&=
 quot; &quot;compatibility&quot; &quot;r5rs&quot; &quot;r6rs&quot; &quot;eop=
 l&quot; &quot;help&quot; &quot;json&quot; &quot;graphics&quot; &quot;syntax=
 -color&quot; &quot;readline&quot; &quot;defaults&quot; &quot;images&quot; &=
 quot;web-server&quot; &quot;unstable&quot; &quot;mysterx&quot; &quot;syntax=
 &quot; &quot;ffi&quot; &quot;typed-scheme&quot; &quot;macro-debugger&quot; =
 &quot;preprocessor&quot; &quot;scriblib&quot; &quot;s-exp&quot; &quot;pictu=
 ring-programs&quot; &quot;typed&quot; &quot;typed-racket&quot; &quot;data&q=
 uot; &quot;texpict&quot; &quot;xrepl&quot; &quot;lazy&quot; &quot;srfi&quot=
 ; &quot;schemeunit&quot; &quot;scheme&quot; &quot;2htdp&quot; &quot;make&qu=
 ot; &quot;math&quot; &quot;icons&quot;))<br>
 
 <br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((main) (test))))<br>
 <br>
 </blockquote></div><br></div>
 
 --e89a8f923da257322804d7e88ba0--
