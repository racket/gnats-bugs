From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jul  3 11:18:21 2008
Received: from yw-out-2324.google.com (yw-out-2324.google.com [74.125.46.30])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m63FIE6p011355
	for <bugs@bugs.plt-scheme.org>; Thu, 3 Jul 2008 11:18:14 -0400
Message-Id: <200807031517.m63FHaVo011348@champlain.ccs.neu.edu>
Date: Thu, 3 Jul 2008 11:17:36 -0400
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Strange interaction between "Open..." and "New Tab"

>Number:         9574
>Category:       all
>Synopsis:       Strange interaction between "Open..." and "New Tab"
>Class:          sw-bug
>Responsible:    samth
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jul 03 11:20:01 -0400 2008
>Closed-Date:    Fri Feb 03 18:39:44 -0500 2012
>Last-Modified:  Mon Feb 18 23:40:52 -0500 2013
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.0.1.3-svn2jul2008
>Environment:
macosx "Darwin Kauai.ccs.neu.edu 8.11.0 Darwin Kernel Version 8.11.0: Wed Oct 10 18:26:00 PDT 2007; root:xnu-792.24.17~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 67007528

Collections:
(("/Users/cce/Library/PLT Scheme/4.0.1.3/collects" non-existent-path) ("/Users/cce/plt/trunk/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "little-helper" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xm!
 l"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n"))
>Description:
If I create a new tab (command-= on Mac) and immediately attempt to open a file (command-o), before the new tab has finished loading the repl, the file opens in a new window rather than the tab.  Thereafter, that tab won't open any file (they all go to a new window), even after it has loaded completely.

If, on the other hand, I wait for the tab to finish displaying and loading a repl, I can open a file in the tab.
>How-To-Repeat:
As above.
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: cce@ccs.neu.edu, bugs@plt-scheme.org
Cc: robby@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 16:20:22 -0400

 On Jul  3, cce@ccs.neu.edu wrote:
 > If I create a new tab (command-= on Mac) and immediately attempt to
 > open a file (command-o), before the new tab has finished loading the
 > repl, the file opens in a new window rather than the tab.
 > Thereafter, that tab won't open any file (they all go to a new
 > window), even after it has loaded completely.
 > 
 > If, on the other hand, I wait for the tab to finish displaying and
 > loading a repl, I can open a file in the tab.
 
 I'm guessing that this is related to my changes, but I don't really
 know how to debug it -- I don't know where the problem could be coming
 from, and I cannot reproduce it.
 
 How about this: can you try to open collects/drscheme/private/unit.ss
 and comment out the
 
   (send (get-top-level-window) execute-callback)
 
 expression on line 695, then see if the problem persists?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: cce@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 15:24:30 -0500

 I think the problem is that the decision about whether or not to
 re-use an existing frame when opening a file is now out of date (it
 doesn't take into account the automatic insertion of the "#lang"
 line). This code is in unit.ss, I believe.
 
 Robby
 
 On Thu, Jul 3, 2008 at 3:20 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jul  3, cce@ccs.neu.edu wrote:
 >> If I create a new tab (command-= on Mac) and immediately attempt to
 >> open a file (command-o), before the new tab has finished loading the
 >> repl, the file opens in a new window rather than the tab.
 >> Thereafter, that tab won't open any file (they all go to a new
 >> window), even after it has loaded completely.
 >>
 >> If, on the other hand, I wait for the tab to finish displaying and
 >> loading a repl, I can open a file in the tab.
 >
 > I'm guessing that this is related to my changes, but I don't really
 > know how to debug it -- I don't know where the problem could be coming
 > from, and I cannot reproduce it.
 >
 > How about this: can you try to open collects/drscheme/private/unit.ss
 > and comment out the
 >
 >  (send (get-top-level-window) execute-callback)
 >
 > expression on line 695, then see if the problem persists?
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life!
 >
From: "Carl Eastlund" <cce@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 16:45:37 -0400

 I commented out the line Eli suggested, and can no longer reproduce
 the bug.  I don't know whether it's fixed, or I just can't click fast
 enough now (since the repl isn't taking time to load).  By the way,
 the two functions near that line (insert-auto-text and
 remove-auto-text) look like they ought to be private methods instead.
 
 --Carl
 
 On Thu, Jul 3, 2008 at 4:24 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > I think the problem is that the decision about whether or not to
 > re-use an existing frame when opening a file is now out of date (it
 > doesn't take into account the automatic insertion of the "#lang"
 > line). This code is in unit.ss, I believe.
 >
 > Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Carl Eastlund" <cce@ccs.neu.edu>
Cc: "Robby Findler" <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 18:30:36 -0400

 On Thu, Jul 3, 2008 at 4:24 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > I think the problem is that the decision about whether or not to
 > re-use an existing frame when opening a file is now out of date (it
 > doesn't take into account the automatic insertion of the "#lang"
 > line). This code is in unit.ss, I believe.
 
 I did update that -- that's the reason for the new `still-untouched?'
 in the definitions text object, and the frame-mixin's
 `still-untouched?' uses that.
 
 
 On Jul  3, Carl Eastlund wrote:
 > I commented out the line Eli suggested, and can no longer reproduce
 > the bug.  I don't know whether it's fixed, or I just can't click fast
 > enough now (since the repl isn't taking time to load).
 
 Robby -- is there any way that the execution can interfere with
 openning a file?
 
 
 > By the way, the two functions near that line (insert-auto-text and
 > remove-auto-text) look like they ought to be private methods
 > instead.
 
 IIRC, there's no difference between a private method and a function,
 no?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: "Carl Eastlund" <cce@ccs.neu.edu>, "Robby Findler" <robby@cs.uchicago.edu>,
        bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 18:34:13 -0400

 On Jul  3, Carl Eastlund wrote:
 > I commented out the line Eli suggested, and can no longer reproduce
 > the bug.  I don't know whether it's fixed, or I just can't click
 > fast enough now (since the repl isn't taking time to load).
 
 Here's another experiment -- what happens if you change
 
   (send (get-top-level-window) execute-callback)
 
 on that line to
 
   (queue-callback
    (lambda () (send (get-top-level-window) execute-callback)))
 
 if that doesn't work then maybe:
 
   (queue-callback
    (lambda () (send (get-top-level-window) execute-callback))
    #f)
 
 ?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Carl Eastlund" <cce@ccs.neu.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Robby Findler" <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 18:39:47 -0400

 >> By the way, the two functions near that line (insert-auto-text and
 >> remove-auto-text) look like they ought to be private methods
 >> instead.
 >
 > IIRC, there's no difference between a private method and a function,
 > no?
 
 My understanding is that define expands normally:
 
 (define (foo x) y) => (define foo (lambda (x) y))
 
 So each object would have a field foo, initialized to a new closure.
 Whereas define/private would create a single method closure with a
 this-parameter.
 
 -- 
 Carl Eastlund
From: Eli Barzilay <eli@barzilay.org>
To: "Carl Eastlund" <cce@ccs.neu.edu>
Cc: "Robby Findler" <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 20:38:05 -0400

 On Jul  3, Carl Eastlund wrote:
 > [...]
 
 Did you try the queue-callback version?  Robby -- maybe you can try it
 if you can see the problem too?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 22:33:42 -0500

 Why do you think those have any chance of making a difference?
 
 Robby
 
 On Thu, Jul 3, 2008 at 5:34 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jul  3, Carl Eastlund wrote:
 >> I commented out the line Eli suggested, and can no longer reproduce
 >> the bug.  I don't know whether it's fixed, or I just can't click
 >> fast enough now (since the repl isn't taking time to load).
 >
 > Here's another experiment -- what happens if you change
 >
 >  (send (get-top-level-window) execute-callback)
 >
 > on that line to
 >
 >  (queue-callback
 >   (lambda () (send (get-top-level-window) execute-callback)))
 >
 > if that doesn't work then maybe:
 >
 >  (queue-callback
 >   (lambda () (send (get-top-level-window) execute-callback))
 >   #f)
 >
 > ?
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life!
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 22:41:50 -0500

 A few comments about the insert-auto-text remove-auto-text code:
 
  - the fact that, when changing the language, (in the set-next-setting
 method) won't cause flickering with the "#lang scheme" text
 disappearing and then appearing seems pretty subtle (I think it is
 true, but I'm not positive). It could be obvious from the text,
 however, with a slightly different way of writing the code.
 
  - The still-untouched? method has, in fact, not been updated to work
 properly with Eli's changes and appears to be the source of the
 problem. It is another race condition, as far as I can tell. The
 on-execute callback, when it starts, erases everything in the REPL
 (except the first line). Then, in the user's thread it starts doing
 work. Concurrently with the thread handling callbacks in drscheme. The
 result of this work will be to put a prompt at the bottom of the
 window. The still-untouched? predicate only works after the user
 thread finishes (which is what Carl is seeing).
 
  - Also, the still-untouched? predicate is just broken for a language
 that, say, prints something out when it is run. It seems to me that
 that predicate needs to be completely different now.
 
 Robby
From: "Carl Eastlund" <cce@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 23:50:45 -0400

 For me, they make the difference of completely breaking DrScheme.  It
 wouldn't even load tools fully.
 
 On Thu, Jul 3, 2008 at 11:33 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > Why do you think those have any chance of making a difference?
 >
 > Robby
 >
 > On Thu, Jul 3, 2008 at 5:34 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> On Jul  3, Carl Eastlund wrote:
 >>> I commented out the line Eli suggested, and can no longer reproduce
 >>> the bug.  I don't know whether it's fixed, or I just can't click
 >>> fast enough now (since the repl isn't taking time to load).
 >>
 >> Here's another experiment -- what happens if you change
 >>
 >>  (send (get-top-level-window) execute-callback)
 >>
 >> on that line to
 >>
 >>  (queue-callback
 >>   (lambda () (send (get-top-level-window) execute-callback)))
 >>
 >> if that doesn't work then maybe:
 >>
 >>  (queue-callback
 >>   (lambda () (send (get-top-level-window) execute-callback))
 >>   #f)
 >>
 >> ?
 >>
 >> --
 >>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>                  http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Carl Eastlund" <cce@ccs.neu.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 22:59:07 -0500

 That's surprising. I would have expected those changes to not really
 have any effect. Hm.
 
 Another thing I don't understand is why line 710 is this:
 
           ;; insert the default-text
           (queue-callback insert-auto-text)
 
 and not
 
   (insert-auto-text)
 
 Robby
 
 On Thu, Jul 3, 2008 at 10:50 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 > For me, they make the difference of completely breaking DrScheme.  It
 > wouldn't even load tools fully.
 >
 > On Thu, Jul 3, 2008 at 11:33 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 >> Why do you think those have any chance of making a difference?
 >>
 >> Robby
 >>
 >> On Thu, Jul 3, 2008 at 5:34 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >>> On Jul  3, Carl Eastlund wrote:
 >>>> I commented out the line Eli suggested, and can no longer reproduce
 >>>> the bug.  I don't know whether it's fixed, or I just can't click
 >>>> fast enough now (since the repl isn't taking time to load).
 >>>
 >>> Here's another experiment -- what happens if you change
 >>>
 >>>  (send (get-top-level-window) execute-callback)
 >>>
 >>> on that line to
 >>>
 >>>  (queue-callback
 >>>   (lambda () (send (get-top-level-window) execute-callback)))
 >>>
 >>> if that doesn't work then maybe:
 >>>
 >>>  (queue-callback
 >>>   (lambda () (send (get-top-level-window) execute-callback))
 >>>   #f)
 >>>
 >>> ?
 >>>
 >>> --
 >>>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>>                  http://www.barzilay.org/                 Maze is Life!
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Thu, 3 Jul 2008 23:01:40 -0500

 Another thing. On line 2169 I see this:
 
                     (when (and module-language module-language-settings)
                       (send definitions-text set-next-settings
 
 (drscheme:language-configuration:make-language-settings
                              module-language
                              module-language-settings)))
 
 which seem strange. Calling set-next-settings like that is definitely
 not intended. I don't know if it breaks anything more than my mental
 model of how the code works, but it certainly belongs under the "ugly
 hack" category if it isn't broken in some subtle way.
 
 My mental model is that set-next-settings is only called when the
 language is changed (by the user). Not on every call to execute.
 
 If there is some work in common between what happens when the user
 changes the language and when execute is run, how about factoring that
 out into a separate method and calling it from two places?
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 00:00:41 -0400

 Because Carl said that it happens only when you try to open a file
 immediately, so maybe it makes a difference to do that on a separate
 callback.  But I *am* just guessing since I can't replicate this
 error.
 
 
 On Jul  3, Robby Findler wrote:
 > Why do you think those have any chance of making a difference?
 > 
 > Robby
 > 
 > On Thu, Jul 3, 2008 at 5:34 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > On Jul  3, Carl Eastlund wrote:
 > >> I commented out the line Eli suggested, and can no longer reproduce
 > >> the bug.  I don't know whether it's fixed, or I just can't click
 > >> fast enough now (since the repl isn't taking time to load).
 > >
 > > Here's another experiment -- what happens if you change
 > >
 > >  (send (get-top-level-window) execute-callback)
 > >
 > > on that line to
 > >
 > >  (queue-callback
 > >   (lambda () (send (get-top-level-window) execute-callback)))
 > >
 > > if that doesn't work then maybe:
 > >
 > >  (queue-callback
 > >   (lambda () (send (get-top-level-window) execute-callback))
 > >   #f)
 > >
 > > ?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 00:13:54 -0400

 On Jul  3, Robby Findler wrote:
 > That's surprising. I would have expected those changes to not really
 > have any effect. Hm.
 > 
 > Another thing I don't understand is why line 710 is this:
 > 
 >           ;; insert the default-text
 >           (queue-callback insert-auto-text)
 > 
 > and not
 > 
 >   (insert-auto-text)
 
 You mean line 714, right?  I didn't have the callback initially, but
 it complained about something that wasn't initialized.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 00:12:46 -0400

 On Jul  3, Robby Findler wrote:
 > A few comments about the insert-auto-text remove-auto-text code:
 > 
 >  - the fact that, when changing the language, (in the
 > set-next-setting method) won't cause flickering with the "#lang
 > scheme" text disappearing and then appearing seems pretty subtle (I
 > think it is true, but I'm not positive). It could be obvious from
 > the text, however, with a slightly different way of writing the
 > code.
 
 You mean that it doesn't flicker because they're both called in the
 same callback?
 
 
 >  - The still-untouched? method has, in fact, not been updated to
 > work properly with Eli's changes and appears to be the source of the
 > problem. It is another race condition, as far as I can tell. The
 > on-execute callback, when it starts, erases everything in the REPL
 > (except the first line). Then, in the user's thread it starts doing
 > work. Concurrently with the thread handling callbacks in
 > drscheme. The result of this work will be to put a prompt at the
 > bottom of the window. The still-untouched? predicate only works
 > after the user thread finishes (which is what Carl is seeing).
 > 
 >  - Also, the still-untouched? predicate is just broken for a
 > language that, say, prints something out when it is run. It seems to
 > me that that predicate needs to be completely different now.
 
 I don't follow that at all.  The code that used to be there before my
 changes is:
 
     (define frame-mixin
       (mixin
         ...
         (define/public (still-untouched?)
           (and (= (send definitions-text last-position) 0)
                (not (send definitions-text is-modified?))
                (not (send definitions-text get-filename))
                ...more stuff...))
         ...))
 
 I started my change by adding a `still-unmodified?' method to the
 definitions window class:
 
     (define (make-definitions-text%)
       (let ...
         (class* definitions-super% (definitions-text<%>)
           ...
           (define/public (still-untouched?)
             (and (= (last-position) 0)
                  (not (is-modified?))
                  (not (get-filename))))
           ...)))
 
 and changed the frame-mixin to:
 
     (define frame-mixin
       (mixin
         ...
         (define/public (still-untouched?)
           (and (send definitions-text still-untouched?)
                ...more stuff...))
         ...))
 
 And then I added a condition to the the definition's method.  How is
 this broken due to printouts on the interactions window?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 00:17:52 -0400

 On Jul  3, Robby Findler wrote:
 > Another thing. On line 2169 I see this:
 > 
 >                     (when (and module-language module-language-settings)
 >                       (send definitions-text set-next-settings
 > 
 > (drscheme:language-configuration:make-language-settings
 >                              module-language
 >                              module-language-settings)))
 
 That looks like Matthew's code, from the v3.99.0.2 commit.
 
 
 > which seem strange. Calling set-next-settings like that is definitely
 > not intended. I don't know if it breaks anything more than my mental
 > model of how the code works, but it certainly belongs under the "ugly
 > hack" category if it isn't broken in some subtle way.
 > 
 > My mental model is that set-next-settings is only called when the
 > language is changed (by the user). Not on every call to execute.
 > 
 > If there is some work in common between what happens when the user
 > changes the language and when execute is run, how about factoring that
 > out into a separate method and calling it from two places?
 
 I don't know about that, and I actually assumed just what you said --
 that `set-next-settings' is called only when the language changes.
 (If it's done on every run, it means that the text gets removed and
 readded on every run -- harmless but I certainly wasn't aware of
 that.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Carl Eastlund" <cce@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 00:22:49 -0400

 On a second try: the changes made no difference.  I don't know what
 was hanging DrScheme up before, but I can't reproduce it after
 rerunning setup-plt, so I think my sources were in a bad state.  And
 the bug with tabs still shows up with the queue-callback in place.
 
 --Carl
 
 On Thu, Jul 3, 2008 at 11:59 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > That's surprising. I would have expected those changes to not really
 > have any effect. Hm.
 >
 > Another thing I don't understand is why line 710 is this:
 >
 >          ;; insert the default-text
 >          (queue-callback insert-auto-text)
 >
 > and not
 >
 >  (insert-auto-text)
 >
 > Robby
 >
 > On Thu, Jul 3, 2008 at 10:50 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >> For me, they make the difference of completely breaking DrScheme.  It
 >> wouldn't even load tools fully.
 >>
 >> On Thu, Jul 3, 2008 at 11:33 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 >>> Why do you think those have any chance of making a difference?
 >>>
 >>> Robby
 >>>
 >>> On Thu, Jul 3, 2008 at 5:34 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >>>> On Jul  3, Carl Eastlund wrote:
 >>>>> I commented out the line Eli suggested, and can no longer reproduce
 >>>>> the bug.  I don't know whether it's fixed, or I just can't click
 >>>>> fast enough now (since the repl isn't taking time to load).
 >>>>
 >>>> Here's another experiment -- what happens if you change
 >>>>
 >>>>  (send (get-top-level-window) execute-callback)
 >>>>
 >>>> on that line to
 >>>>
 >>>>  (queue-callback
 >>>>   (lambda () (send (get-top-level-window) execute-callback)))
 >>>>
 >>>> if that doesn't work then maybe:
 >>>>
 >>>>  (queue-callback
 >>>>   (lambda () (send (get-top-level-window) execute-callback))
 >>>>   #f)
 >>>>
 >>>> ?
 >>>>
 >>>> --
 >>>>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>>>                  http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 06:28:52 -0500

 On Thu, Jul 3, 2008 at 11:12 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jul  3, Robby Findler wrote:
 >> A few comments about the insert-auto-text remove-auto-text code:
 >>
 >>  - the fact that, when changing the language, (in the
 >> set-next-setting method) won't cause flickering with the "#lang
 >> scheme" text disappearing and then appearing seems pretty subtle (I
 >> think it is true, but I'm not positive). It could be obvious from
 >> the text, however, with a slightly different way of writing the
 >> code.
 >
 > You mean that it doesn't flicker because they're both called in the
 > same callback?
 
 That alone would suggest that there could be flicker. If they were
 both wrapped in an edit-sequence then they couldn't flicker. But the
 reason they don't flicker is because I believe that it is impossible
 for it to be both added and removed. I think. (The guards will never
 both be true.)
 
 >>  - The still-untouched? method has, in fact, not been updated to
 >> work properly with Eli's changes and appears to be the source of the
 >> problem. It is another race condition, as far as I can tell. The
 >> on-execute callback, when it starts, erases everything in the REPL
 >> (except the first line). Then, in the user's thread it starts doing
 >> work. Concurrently with the thread handling callbacks in
 >> drscheme. The result of this work will be to put a prompt at the
 >> bottom of the window. The still-untouched? predicate only works
 >> after the user thread finishes (which is what Carl is seeing).
 >>
 >>  - Also, the still-untouched? predicate is just broken for a
 >> language that, say, prints something out when it is run. It seems to
 >> me that that predicate needs to be completely different now.
 >
 > I don't follow that at all.  The code that used to be there before my
 > changes is:
 >
 >    (define frame-mixin
 >      (mixin
 >        ...
 >        (define/public (still-untouched?)
 >          (and (= (send definitions-text last-position) 0)
 >               (not (send definitions-text is-modified?))
 >               (not (send definitions-text get-filename))
 >               ...more stuff...))
 >        ...))
 >
 > I started my change by adding a `still-unmodified?' method to the
 > definitions window class:
 >
 >    (define (make-definitions-text%)
 >      (let ...
 >        (class* definitions-super% (definitions-text<%>)
 >          ...
 >          (define/public (still-untouched?)
 >            (and (= (last-position) 0)
 >                 (not (is-modified?))
 >                 (not (get-filename))))
 >          ...)))
 >
 > and changed the frame-mixin to:
 >
 >    (define frame-mixin
 >      (mixin
 >        ...
 >        (define/public (still-untouched?)
 >          (and (send definitions-text still-untouched?)
 >               ...more stuff...))
 >        ...))
 >
 > And then I added a condition to the the definition's method.  How is
 > this broken due to printouts on the interactions window?
 
 I'm not sure how to say it better than the above, but it is a
 race-condition. The key thing to understand is that the condition your
 testing for (in the "...more stuff..." just above is something that's
 being established by a thread that's running in parallel.
 
 Robby
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Carl Eastlund" <cce@ccs.neu.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 06:31:46 -0500

 Ah, thanks.
 
 Robby
 
 On Thu, Jul 3, 2008 at 11:22 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 > On a second try: the changes made no difference.  I don't know what
 > was hanging DrScheme up before, but I can't reproduce it after
 > rerunning setup-plt, so I think my sources were in a bad state.  And
 > the bug with tabs still shows up with the queue-callback in place.
 >
 > --Carl
 >
 > On Thu, Jul 3, 2008 at 11:59 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 >> That's surprising. I would have expected those changes to not really
 >> have any effect. Hm.
 >>
 >> Another thing I don't understand is why line 710 is this:
 >>
 >>          ;; insert the default-text
 >>          (queue-callback insert-auto-text)
 >>
 >> and not
 >>
 >>  (insert-auto-text)
 >>
 >> Robby
 >>
 >> On Thu, Jul 3, 2008 at 10:50 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >>> For me, they make the difference of completely breaking DrScheme.  It
 >>> wouldn't even load tools fully.
 >>>
 >>> On Thu, Jul 3, 2008 at 11:33 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 >>>> Why do you think those have any chance of making a difference?
 >>>>
 >>>> Robby
 >>>>
 >>>> On Thu, Jul 3, 2008 at 5:34 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >>>>> On Jul  3, Carl Eastlund wrote:
 >>>>>> I commented out the line Eli suggested, and can no longer reproduce
 >>>>>> the bug.  I don't know whether it's fixed, or I just can't click
 >>>>>> fast enough now (since the repl isn't taking time to load).
 >>>>>
 >>>>> Here's another experiment -- what happens if you change
 >>>>>
 >>>>>  (send (get-top-level-window) execute-callback)
 >>>>>
 >>>>> on that line to
 >>>>>
 >>>>>  (queue-callback
 >>>>>   (lambda () (send (get-top-level-window) execute-callback)))
 >>>>>
 >>>>> if that doesn't work then maybe:
 >>>>>
 >>>>>  (queue-callback
 >>>>>   (lambda () (send (get-top-level-window) execute-callback))
 >>>>>   #f)
 >>>>>
 >>>>> ?
 >>>>>
 >>>>> --
 >>>>>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>>>>                  http://www.barzilay.org/                 Maze is Life!
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 06:31:24 -0500

 Matthew, why did you add a call to set-next-settings as below?
 
 Robby
 
 On Thu, Jul 3, 2008 at 11:17 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jul  3, Robby Findler wrote:
 >> Another thing. On line 2169 I see this:
 >>
 >>                     (when (and module-language module-language-settings)
 >>                       (send definitions-text set-next-settings
 >>
 >> (drscheme:language-configuration:make-language-settings
 >>                              module-language
 >>                              module-language-settings)))
 >
 > That looks like Matthew's code, from the v3.99.0.2 commit.
 >
 >
 >> which seem strange. Calling set-next-settings like that is definitely
 >> not intended. I don't know if it breaks anything more than my mental
 >> model of how the code works, but it certainly belongs under the "ugly
 >> hack" category if it isn't broken in some subtle way.
 >>
 >> My mental model is that set-next-settings is only called when the
 >> language is changed (by the user). Not on every call to execute.
 >>
 >> If there is some work in common between what happens when the user
 >> changes the language and when execute is run, how about factoring that
 >> out into a separate method and calling it from two places?
 >
 > I don't know about that, and I actually assumed just what you said --
 > that `set-next-settings' is called only when the language changes.
 > (If it's done on every run, it means that the text gets removed and
 > readded on every run -- harmless but I certainly wasn't aware of
 > that.)
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life!
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 07:49:58 -0400

 On Jul  4, Robby Findler wrote:
 > On Thu, Jul 3, 2008 at 11:12 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > On Jul  3, Robby Findler wrote:
 > >> A few comments about the insert-auto-text remove-auto-text code:
 > >>
 > >>  - the fact that, when changing the language, (in the
 > >> set-next-setting method) won't cause flickering with the "#lang
 > >> scheme" text disappearing and then appearing seems pretty subtle (I
 > >> think it is true, but I'm not positive). It could be obvious from
 > >> the text, however, with a slightly different way of writing the
 > >> code.
 > >
 > > You mean that it doesn't flicker because they're both called in the
 > > same callback?
 > 
 > That alone would suggest that there could be flicker. If they were
 > both wrapped in an edit-sequence then they couldn't flicker. But the
 > reason they don't flicker is because I believe that it is impossible
 > for it to be both added and removed. I think. (The guards will never
 > both be true.)
 
 It can happen if you change the default text.  (And I don't see a
 flicker, but I'm working through a vnc.)
 
 
 > >>  - The still-untouched? method has, in fact, not been updated to
 > >> work properly with Eli's changes and appears to be the source of the
 > >> problem. It is another race condition, as far as I can tell. The
 > >> on-execute callback, when it starts, erases everything in the REPL
 > >> (except the first line). Then, in the user's thread it starts doing
 > >> work. Concurrently with the thread handling callbacks in
 > >> drscheme. The result of this work will be to put a prompt at the
 > >> bottom of the window. The still-untouched? predicate only works
 > >> after the user thread finishes (which is what Carl is seeing).
 > >>
 > >>  - Also, the still-untouched? predicate is just broken for a
 > >> language that, say, prints something out when it is run. It seems to
 > >> me that that predicate needs to be completely different now.
 > >
 > > I don't follow that at all.  The code that used to be there before my
 > > changes is:
 > >
 > >    (define frame-mixin
 > >      (mixin
 > >        ...
 > >        (define/public (still-untouched?)
 > >          (and (= (send definitions-text last-position) 0)
 > >               (not (send definitions-text is-modified?))
 > >               (not (send definitions-text get-filename))
 > >               ...more stuff...))
 > >        ...))
 > >
 > > I started my change by adding a `still-unmodified?' method to the
 > > definitions window class:
 > >
 > >    (define (make-definitions-text%)
 > >      (let ...
 > >        (class* definitions-super% (definitions-text<%>)
 > >          ...
 > >          (define/public (still-untouched?)
 > >            (and (= (last-position) 0)
 > >                 (not (is-modified?))
 > >                 (not (get-filename))))
 > >          ...)))
 > >
 > > and changed the frame-mixin to:
 > >
 > >    (define frame-mixin
 > >      (mixin
 > >        ...
 > >        (define/public (still-untouched?)
 > >          (and (send definitions-text still-untouched?)
 > >               ...more stuff...))
 > >        ...))
 > >
 > > And then I added a condition to the the definition's method.  How is
 > > this broken due to printouts on the interactions window?
 > 
 > I'm not sure how to say it better than the above, but it is a
 > race-condition. The key thing to understand is that the condition
 > your testing for (in the "...more stuff..." just above is something
 > that's being established by a thread that's running in parallel.
 
 I think that you missed my point: I did exactly two changes -- the
 above transformation (moving part of the text to a method of the
 definitions window), then changing the new part a little (checks a
 boolean flag).  The first part of this change, AFAICT, does not change
 the way this is running in any way.
 
 But it looks like you're referring to the `...more stuff...' part,
 which is something that I never touched.  I only had a quick look over
 it, saw that it checks something in the interaction window (wondered
 why that needs to be checked in that method), and concluded that I
 shouldn't touch it.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 06:53:27 -0500

 I believe you when you say you didn't touch it that piece of code, but
 it still looks like your changes elsewhere broke it (as is to be
 expected and is fine, but now it needs to be fixed).
 
 I thought, when we started this journey, that you were willing to take
 care of problems related to it? I hope that offer is still open?
 
 Do you understand why that test is the wrong thing now?
 
 Robby
 
 On Fri, Jul 4, 2008 at 6:49 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jul  4, Robby Findler wrote:
 >> On Thu, Jul 3, 2008 at 11:12 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > On Jul  3, Robby Findler wrote:
 >> >> A few comments about the insert-auto-text remove-auto-text code:
 >> >>
 >> >>  - the fact that, when changing the language, (in the
 >> >> set-next-setting method) won't cause flickering with the "#lang
 >> >> scheme" text disappearing and then appearing seems pretty subtle (I
 >> >> think it is true, but I'm not positive). It could be obvious from
 >> >> the text, however, with a slightly different way of writing the
 >> >> code.
 >> >
 >> > You mean that it doesn't flicker because they're both called in the
 >> > same callback?
 >>
 >> That alone would suggest that there could be flicker. If they were
 >> both wrapped in an edit-sequence then they couldn't flicker. But the
 >> reason they don't flicker is because I believe that it is impossible
 >> for it to be both added and removed. I think. (The guards will never
 >> both be true.)
 >
 > It can happen if you change the default text.  (And I don't see a
 > flicker, but I'm working through a vnc.)
 >
 >
 >> >>  - The still-untouched? method has, in fact, not been updated to
 >> >> work properly with Eli's changes and appears to be the source of the
 >> >> problem. It is another race condition, as far as I can tell. The
 >> >> on-execute callback, when it starts, erases everything in the REPL
 >> >> (except the first line). Then, in the user's thread it starts doing
 >> >> work. Concurrently with the thread handling callbacks in
 >> >> drscheme. The result of this work will be to put a prompt at the
 >> >> bottom of the window. The still-untouched? predicate only works
 >> >> after the user thread finishes (which is what Carl is seeing).
 >> >>
 >> >>  - Also, the still-untouched? predicate is just broken for a
 >> >> language that, say, prints something out when it is run. It seems to
 >> >> me that that predicate needs to be completely different now.
 >> >
 >> > I don't follow that at all.  The code that used to be there before my
 >> > changes is:
 >> >
 >> >    (define frame-mixin
 >> >      (mixin
 >> >        ...
 >> >        (define/public (still-untouched?)
 >> >          (and (= (send definitions-text last-position) 0)
 >> >               (not (send definitions-text is-modified?))
 >> >               (not (send definitions-text get-filename))
 >> >               ...more stuff...))
 >> >        ...))
 >> >
 >> > I started my change by adding a `still-unmodified?' method to the
 >> > definitions window class:
 >> >
 >> >    (define (make-definitions-text%)
 >> >      (let ...
 >> >        (class* definitions-super% (definitions-text<%>)
 >> >          ...
 >> >          (define/public (still-untouched?)
 >> >            (and (= (last-position) 0)
 >> >                 (not (is-modified?))
 >> >                 (not (get-filename))))
 >> >          ...)))
 >> >
 >> > and changed the frame-mixin to:
 >> >
 >> >    (define frame-mixin
 >> >      (mixin
 >> >        ...
 >> >        (define/public (still-untouched?)
 >> >          (and (send definitions-text still-untouched?)
 >> >               ...more stuff...))
 >> >        ...))
 >> >
 >> > And then I added a condition to the the definition's method.  How is
 >> > this broken due to printouts on the interactions window?
 >>
 >> I'm not sure how to say it better than the above, but it is a
 >> race-condition. The key thing to understand is that the condition
 >> your testing for (in the "...more stuff..." just above is something
 >> that's being established by a thread that's running in parallel.
 >
 > I think that you missed my point: I did exactly two changes -- the
 > above transformation (moving part of the text to a method of the
 > definitions window), then changing the new part a little (checks a
 > boolean flag).  The first part of this change, AFAICT, does not change
 > the way this is running in any way.
 >
 > But it looks like you're referring to the `...more stuff...' part,
 > which is something that I never touched.  I only had a quick look over
 > it, saw that it checks something in the interaction window (wondered
 > why that needs to be checked in that method), and concluded that I
 > shouldn't touch it.
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life!
 >
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, "Carl Eastlund" <cce@ccs.neu.edu>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 06:11:23 -0600

 This doesn't look familiar to me. I did commit the change as part of
 3.99.02, but that was the merge of the v4 branch onto the trunk. So
 you'll probably need to look for for information in the logs of the v4
 branch.
 
 The block of code added in v4 is labeled
 
   ;; if the language is not-a-language, and the buffer looks like a module,
   ;; automatically make the switch to the module language
 
 which was indeed a change in v4. Also, I would think it is supposed to
 work like the user changing the language --- on execute, but only when
 the current language is the not-a-language language.
 
 
 At Fri, 4 Jul 2008 06:31:24 -0500, "Robby Findler" wrote:
 > Matthew, why did you add a call to set-next-settings as below?
 > 
 > Robby
 > 
 > On Thu, Jul 3, 2008 at 11:17 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > On Jul  3, Robby Findler wrote:
 > >> Another thing. On line 2169 I see this:
 > >>
 > >>                     (when (and module-language module-language-settings)
 > >>                       (send definitions-text set-next-settings
 > >>
 > >> (drscheme:language-configuration:make-language-settings
 > >>                              module-language
 > >>                              module-language-settings)))
 > >
 > > That looks like Matthew's code, from the v3.99.0.2 commit.
 > >
 > >
 > >> which seem strange. Calling set-next-settings like that is definitely
 > >> not intended. I don't know if it breaks anything more than my mental
 > >> model of how the code works, but it certainly belongs under the "ugly
 > >> hack" category if it isn't broken in some subtle way.
 > >>
 > >> My mental model is that set-next-settings is only called when the
 > >> language is changed (by the user). Not on every call to execute.
 > >>
 > >> If there is some work in common between what happens when the user
 > >> changes the language and when execute is run, how about factoring that
 > >> out into a separate method and calling it from two places?
 > >
 > > I don't know about that, and I actually assumed just what you said --
 > > that `set-next-settings' is called only when the language changes.
 > > (If it's done on every run, it means that the text gets removed and
 > > readded on every run -- harmless but I certainly wasn't aware of
 > > that.)
 > >
 > > --
 > >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 > >                  http://www.barzilay.org/                 Maze is Life!
 > >
 > >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, "Carl Eastlund" <cce@ccs.neu.edu>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 07:17:26 -0500

 Woah, I'm stupid! Thanks, Matthew. I completely missed that outer
 `when'. I probably added that myself. Sorry, Eli.
 
 Robby
 
 On Fri, Jul 4, 2008 at 7:11 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > This doesn't look familiar to me. I did commit the change as part of
 > 3.99.02, but that was the merge of the v4 branch onto the trunk. So
 > you'll probably need to look for for information in the logs of the v4
 > branch.
 >
 > The block of code added in v4 is labeled
 >
 >  ;; if the language is not-a-language, and the buffer looks like a module,
 >  ;; automatically make the switch to the module language
 >
 > which was indeed a change in v4. Also, I would think it is supposed to
 > work like the user changing the language --- on execute, but only when
 > the current language is the not-a-language language.
 >
 >
 > At Fri, 4 Jul 2008 06:31:24 -0500, "Robby Findler" wrote:
 >> Matthew, why did you add a call to set-next-settings as below?
 >>
 >> Robby
 >>
 >> On Thu, Jul 3, 2008 at 11:17 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > On Jul  3, Robby Findler wrote:
 >> >> Another thing. On line 2169 I see this:
 >> >>
 >> >>                     (when (and module-language module-language-settings)
 >> >>                       (send definitions-text set-next-settings
 >> >>
 >> >> (drscheme:language-configuration:make-language-settings
 >> >>                              module-language
 >> >>                              module-language-settings)))
 >> >
 >> > That looks like Matthew's code, from the v3.99.0.2 commit.
 >> >
 >> >
 >> >> which seem strange. Calling set-next-settings like that is definitely
 >> >> not intended. I don't know if it breaks anything more than my mental
 >> >> model of how the code works, but it certainly belongs under the "ugly
 >> >> hack" category if it isn't broken in some subtle way.
 >> >>
 >> >> My mental model is that set-next-settings is only called when the
 >> >> language is changed (by the user). Not on every call to execute.
 >> >>
 >> >> If there is some work in common between what happens when the user
 >> >> changes the language and when execute is run, how about factoring that
 >> >> out into a separate method and calling it from two places?
 >> >
 >> > I don't know about that, and I actually assumed just what you said --
 >> > that `set-next-settings' is called only when the language changes.
 >> > (If it's done on every run, it means that the text gets removed and
 >> > readded on every run -- harmless but I certainly wasn't aware of
 >> > that.)
 >> >
 >> > --
 >> >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >> >                  http://www.barzilay.org/                 Maze is Life!
 >> >
 >> >
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 08:28:51 -0400

 [No bugs.]
 
 
 On Jul  4, Robby Findler wrote:
 > I believe you when you say you didn't touch it that piece of code,
 > but it still looks like your changes elsewhere broke it (as is to be
 > expected and is fine, but now it needs to be fixed).
 
 That wasn't clear.
 
 
 > I thought, when we started this journey, that you were willing to
 > take care of problems related to it? I hope that offer is still
 > open?
 
 Yes.
 
 
 > Do you understand why that test is the wrong thing now?
 
 Not really.  All I have is:
 
 * something is broken with some code that tests things on the repl,
 
 * it's probably bad because the repl is changed with the artificial
   call to execute.
 
 My main problem is that I have no idea why the interactions need to be
 checked for the `still-untouched?' test.  My first idea for how to
 solve this would be to set some flag before that execute and clear it
 afterwards, then check the flag state in `...more stuff...' and avoid
 that stuff if it's set.
 
 But that's only because I don't know what it's testing, and in fact I
 don't know why things will not be fine if the `...more stuff...' is
 completely removed.  Can you explain that part?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: "Carl Eastlund" <cce@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 07:37:08 -0500

 On Fri, Jul 4, 2008 at 7:28 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > [No bugs.]
 >
 >
 > On Jul  4, Robby Findler wrote:
 >> I believe you when you say you didn't touch it that piece of code,
 >> but it still looks like your changes elsewhere broke it (as is to be
 >> expected and is fine, but now it needs to be fixed).
 >
 > That wasn't clear.
 >
 >
 >> I thought, when we started this journey, that you were willing to
 >> take care of problems related to it? I hope that offer is still
 >> open?
 >
 > Yes.
 >
 >
 >> Do you understand why that test is the wrong thing now?
 >
 > Not really.  All I have is:
 >
 > * something is broken with some code that tests things on the repl,
 >
 > * it's probably bad because the repl is changed with the artificial
 >  call to execute.
 >
 > My main problem is that I have no idea why the interactions need to be
 > checked for the `still-untouched?' test.  My first idea for how to
 > solve this would be to set some flag before that execute and clear it
 > afterwards, then check the flag state in `...more stuff...' and avoid
 > that stuff if it's set.
 >
 > But that's only because I don't know what it's testing, and in fact I
 > don't know why things will not be fine if the `...more stuff...' is
 > completely removed.  Can you explain that part?
 I believe it is checking to see if the REPL has been used (in which
 case, you get a new window instead opening a file into the existing
 repl).
 
 But is it clear why the test returns #f in Carl's test case?
 
 Robby
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>,
        "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Cc: 
Subject: Re: [plt-bug] all/9574: Strange interaction between "Open..." and "New Tab"
Date: Fri, 4 Jul 2008 07:41:14 -0500

 On Fri, Jul 4, 2008 at 6:50 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > I retried to see what the error was:
 >
 >  send: target is not an object: #f for method: get-breakpoints
 >
 > and grepping the tree shows that as coming from the gui-debugger tool.
 > I don't remember exactly, but I did try to search for it and see if
 > it's fixable, but I couldn't find anything that worked.  OTOH the
 > callback did work and with no bad results that I have seen.
 
 Well, the callback's "badness" could be subtle. In general running
 code "out of order" like that gets confusing. (And I mean *really*
 confusing. Not just the minor amount of confusion that caused you to
 put that callback in.)
 
 I looked into the specifics and yes it does get into the
 initialization-of-a-new-drscheme-window maze. I think the right fix is
 to avoid calling the execute callback, but instead to just create the
 right REPL initially.
 
 Robby

State changed from "open" to "closed" by samth at Fri, 03 Feb 2012 18:39:44 -0500
Reason>>> I couldn't tell from the discussion if this got fixed, but I
can't reproduce.

If anyone can reproduce, please reopen.


Responsible changed from "nobody" to "samth" by eli at Mon, 18 Feb 2013 23:40:52 -0500
Reason>>> samth closed

