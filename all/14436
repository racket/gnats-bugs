From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Apr  7 13:13:07 2014
Received: from mail-oa0-f52.google.com (mail-oa0-f52.google.com [209.85.219.52])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s37HD5u8003388
	for <bugs@bugs.plt-scheme.org>; Mon, 7 Apr 2014 13:13:05 -0400
Message-Id: <201404071713.s37HD2Bo003380@winooski.ccs.neu.edu>
Date: Mon, 7 Apr 2014 13:13:02 -0400
From: clements@racket-lang.org
To: bugs@racket-lang.org
Subject: pretty-printing of sets not like lists

>Number:         14436
>Category:       all
>Synopsis:       pretty-printing of sets not like lists
>Class:          sw-bug
>Responsible:    nobody
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Apr 07 13:16:01 -0400 2014
>Last-Modified:  Tue Apr 08 07:44:01 -0400 2014
>Originator:     John Clements
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0.0.3--2014-03-11(f3406253/d)
>Environment:
macosx "Darwin pcp079112pcs.wireless.calpoly.edu 13.1.0 Darwin Kernel Version 13.1.0: Thu Jan 16 19:40:37 PST 2014; root:xnu-2422.90.20~2/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 504780676
Links: (links) = (); (links #:user? #f) = ("drracket-solarized"); (links #:root? #t) = (); (links #:user? #f #:root? #t) = (#<path:/Users/clements/git-clements/clements/pkgs/badger> #<path:/Users/clements/git-clements/clements/pkgs/web-utilities> #<path:/Users/clements/git-clements/clements/pkgs/shelly> #<path:/Users/clements/plt/racket/share/pkgs/handin> #<path:/Users/clements/portaudio> #<path:/Users/clements/plt/racket/share/pkgs/sxml> #<path:/Users/clements/midi-readwrite> #<path:/Users/clements/rsound> #<path:/Users/clements/git-clements/clements/pkgs/gnucash> #<path:/Users/clements/plt/racket/share/pkgs/memoize> #<path:/Users/clements/git-clements/clements/pkgs/gradeserver> #<path:/Users/clements/plt/racket/share/pkgs/racket-handin-client> #<path:/Users/clements/plt/racket/share/pkgs/plai-typed-s-exp-match> #<path:/Users/clements/osc> #<path:/Users/clements/levenshtein> #<path:/tmp/rsc3> #<path:/Users/clements/plt/racket/share/pkgs/mongodb> #<path:/Users/clements/plt/r!
 acket/share/pkgs/abnf> #<path:/Users/clements/plt/racket/share/pkgs/plai-typed> #<path:/Users/clements/plt/racket/share/pkgs/dherman-struct> #<path:/Users/clements/plt/racket/share/pkgs/io> #<path:/tmp/java> #<path:/Users/clements/plt/racket/share/pkgs/c-utils> #<path:/Users/clements/plt/racket/share/pkgs/html-parsing>)
raco pkg (show):
/Users/clements/plt/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [214 auto-installed packages not shown]
Installation-wide:
 Package                   Checksum                                    Source
 abnf                      8fea8a1c8dba8e5deaa8cad4bfabf167e6623430    (catalog abnf)
 badger                    #f                                          (link ../../../../git-clements/clements/pkgs/badger)
 c-utils                   940825b9d055164ae0d53c641636c3c42c2bb436    (catalog c-utils)
 dherman-struct            4cb866492681300979d28ad96b6cab1d865eba77    (catalog dherman-struct)
 drracket-solarized        3c7ac56e3bde4f52653c08ad1058188f9bc10184    (catalog drracket-solarized)
 gnucash                   #f                                          (link ../../../../git-clements/clements/pkgs/gnucash)
 gradeserver               #f                                          (link ../../../../git-clements/clements/pkgs/gradeserver)
 handin                    0fcbca1060053a4145630d3e5dc5189200b8db32    (catalog handin)
 html-parsing              708a7edf91da3a7a7fe384d4ff14552c0eb79e65    (catalog html-parsing)
 io                        37af1435e24efdd08d09c45a2ec519b892118109    (catalog io)
 java                      #f                                          (link /tmp/java)
 levenshtein               #f                                          (link ../../../../levenshtein)
 memoize                   366c4782f280f17093abfc8dd28a5bb7cb8c8233    (catalog memoize)
 midi-readwrite            #f                                          (link ../../../../midi-readwrite)
 mongodb                   a2ec95660f86ba5bb49129c10579c61d40c0a221    (catalog mongodb)
 osc                       #f                                          (link ../../../../osc)
 plai-typed                05c97105e20b7497599bae7b5c768697ddcdb4d1    (catalog plai-typed)
 plai-typed-s-exp-match    e010d9718916394b1b3545cb2f7a49c27904e873    (catalog plai-typed-s-exp-match)
 portaudio                 #f                                          (link ../../../../portaudio)
 racket-handin-client      d9906a7430448baea2289e3b2a1291444d8ba0c1    (url github://github.com/jbclements/racket-handin-client/csc430-wi14)
 rsc3                      #f                                          (link /tmp/rsc3)
 rsound                    #f                                          (link ../../../../rsound)
 shelly                    #f                                          (link ../../../../git-clements/clements/pkgs/shelly)
 sxml                      b32608693e9ea39b873da11eabb6e2a4e7d5b600    (catalog sxml)
 web-utilities             #f                                          (link ../../../../git-clements/clements/pkgs/web-utilities)
User-specific for installation "development":
 [none]



Collections:
("/Users/clements/Library/Racket/development/collects"
 (non-existent-path))
("/Users/clements/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
The pretty-printing of lists seems "broken," by
which I mean: not like lists. Specifically, the 
pretty-printer runs all the way out to the right
edge and then suddenly goes into panic mode, 
squinching as hard as possible. It appears that 
it doesn't consider inserting newlines between
each element.

This is in 

version 6.0.0.3--2014-03-11(f3406253/d) [3m]

apologies if this has been fixed already.
>How-To-Repeat:
evaluate this program at the command line:

#lang racket

(pretty-print (list->set (for/list ([i 10]) `(a b ,i d e))))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: "clements@racket-lang.org" <clements@racket-lang.org>,
        bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14436: pretty-printing of sets not like lists
Date: Mon, 7 Apr 2014 12:17:05 -0500

 --047d7b3a7fb0615bab04f6770963
 Content-Type: text/plain; charset=UTF-8
 
 On Mon, Apr 7, 2014 at 12:16 PM, <clements@racket-lang.org> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14436
 >
 > Reported by John Clements for release: 6.0.0.3--2014-03-11(f3406253/d)
 >
 > *** Description:
 > The pretty-printing of lists seems "broken," by
 >
 
 sets in the line above, right?
 
 
 > which I mean: not like lists. Specifically, the
 > pretty-printer runs all the way out to the right
 > edge and then suddenly goes into panic mode,
 > squinching as hard as possible. It appears that
 > it doesn't consider inserting newlines between
 > each element.
 >
 > This is in
 >
 > version 6.0.0.3--2014-03-11(f3406253/d) [3m]
 >
 > apologies if this has been fixed already.
 >
 > *** How to repeat:
 > evaluate this program at the command line:
 >
 > #lang racket
 >
 > (pretty-print (list->set (for/list ([i 10]) `(a b ,i d e))))
 >
 > *** Environment:
 > macosx "Darwin pcp079112pcs.wireless.calpoly.edu 13.1.0 Darwin Kernel
 > Version 13.1.0: Thu Jan 16 19:40:37 PST 2014;
 > root:xnu-2422.90.20~2/RELEASE_X86_64 x86_64" (x86_64-macosx/3m)
 > (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 504780676
 > Links: (links) = (); (links #:user? #f) = ("drracket-solarized"); (links
 > #:root? #t) = (); (links #:user? #f #:root? #t) =
 > (#<path:/Users/clements/git-clements/clements/pkgs/badger>
 > #<path:/Users/clements/git-clements/clements/pkgs/web-utilities>
 > #<path:/Users/clements/git-clements/clements/pkgs/shelly>
 > #<path:/Users/clements/plt/racket/share/pkgs/handin>
 > #<path:/Users/clements/portaudio>
 > #<path:/Users/clements/plt/racket/share/pkgs/sxml>
 > #<path:/Users/clements/midi-readwrite> #<path:/Users/clements/rsound>
 > #<path:/Users/clements/git-clements/clements/pkgs/gnucash>
 > #<path:/Users/clements/plt/racket/share/pkgs/memoize>
 > #<path:/Users/clements/git-clements/clements/pkgs/gradeserver>
 > #<path:/Users/clements/plt/racket/share/pkgs/racket-handin-client>
 > #<path:/Users/clements/plt/racket/share/pkgs/plai-typed-s-exp-match>
 > #<path:/Users/clements/osc> #<path:/Users/clements/levenshtein>
 > #<path:/tmp/rsc3> #<path:/Users/clements/plt/racket/share/pkgs/mongodb>
 > #<path:/Users/clements/plt/r!
 >  acket/share/pkgs/abnf>
 > #<path:/Users/clements/plt/racket/share/pkgs/plai-typed>
 > #<path:/Users/clements/plt/racket/share/pkgs/dherman-struct>
 > #<path:/Users/clements/plt/racket/share/pkgs/io> #<path:/tmp/java>
 > #<path:/Users/clements/plt/racket/share/pkgs/c-utils>
 > #<path:/Users/clements/plt/racket/share/pkgs/html-parsing>)
 > raco pkg (show):
 > /Users/clements/plt/racket/share/devel-pkgs:
 >  Package              Checksum    Source
 >  main-distribution    #f          (static-link
 > ../../../pkgs/main-distribution)
 >  plt-services         #f          (static-link ../../../pkgs/plt-services)
 >  racket-lib           #f          (static-link
 > ../../../pkgs/racket-pkgs/racket-lib)
 >  [214 auto-installed packages not shown]
 > Installation-wide:
 >  Package                   Checksum
 >  Source
 >  abnf                      8fea8a1c8dba8e5deaa8cad4bfabf167e6623430
 >  (catalog abnf)
 >  badger                    #f
 >  (link ../../../../git-clements/clements/pkgs/badger)
 >  c-utils                   940825b9d055164ae0d53c641636c3c42c2bb436
 >  (catalog c-utils)
 >  dherman-struct            4cb866492681300979d28ad96b6cab1d865eba77
 >  (catalog dherman-struct)
 >  drracket-solarized        3c7ac56e3bde4f52653c08ad1058188f9bc10184
 >  (catalog drracket-solarized)
 >  gnucash                   #f
 >  (link ../../../../git-clements/clements/pkgs/gnucash)
 >  gradeserver               #f
 >  (link ../../../../git-clements/clements/pkgs/gradeserver)
 >  handin                    0fcbca1060053a4145630d3e5dc5189200b8db32
 >  (catalog handin)
 >  html-parsing              708a7edf91da3a7a7fe384d4ff14552c0eb79e65
 >  (catalog html-parsing)
 >  io                        37af1435e24efdd08d09c45a2ec519b892118109
 >  (catalog io)
 >  java                      #f
 >  (link /tmp/java)
 >  levenshtein               #f
 >  (link ../../../../levenshtein)
 >  memoize                   366c4782f280f17093abfc8dd28a5bb7cb8c8233
 >  (catalog memoize)
 >  midi-readwrite            #f
 >  (link ../../../../midi-readwrite)
 >  mongodb                   a2ec95660f86ba5bb49129c10579c61d40c0a221
 >  (catalog mongodb)
 >  osc                       #f
 >  (link ../../../../osc)
 >  plai-typed                05c97105e20b7497599bae7b5c768697ddcdb4d1
 >  (catalog plai-typed)
 >  plai-typed-s-exp-match    e010d9718916394b1b3545cb2f7a49c27904e873
 >  (catalog plai-typed-s-exp-match)
 >  portaudio                 #f
 >  (link ../../../../portaudio)
 >  racket-handin-client      d9906a7430448baea2289e3b2a1291444d8ba0c1
 >  (url github://github.com/jbclements/racket-handin-client/csc430-wi14)
 >  rsc3                      #f
 >  (link /tmp/rsc3)
 >  rsound                    #f
 >  (link ../../../../rsound)
 >  shelly                    #f
 >  (link ../../../../git-clements/clements/pkgs/shelly)
 >  sxml                      b32608693e9ea39b873da11eabb6e2a4e7d5b600
 >  (catalog sxml)
 >  web-utilities             #f
 >  (link ../../../../git-clements/clements/pkgs/web-utilities)
 > User-specific for installation "development":
 >  [none]
 >
 >
 >
 > Collections:
 > ("/Users/clements/Library/Racket/development/collects"
 >  (non-existent-path))
 > ("/Users/clements/plt/racket/collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info"
 > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket"
 > "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax"
 > "unstable" "version" "xml"))
 >
 > Recent Internal Errors:
 > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test)
 > (main)) #t))
 >
 >
 
 --047d7b3a7fb0615bab04f6770963
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Mon, Apr 7, 2014 at 12:16 PM,  <span dir=3D"ltr">&lt;<a href=3D"=
 mailto:clements@racket-lang.org" target=3D"_blank">clements@racket-lang.org=
 </a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 436" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14436</a><br>
 <br>
 Reported by John Clements for release: 6.0.0.3--2014-03-11(f3406253/d)<br>
 <br>
 *** Description:<br>
 The pretty-printing of lists seems &quot;broken,&quot; by<br></blockquote><=
 div><br></div><div>sets in the line above, right?</div><div>=C2=A0</div><bl=
 ockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #=
 ccc solid;padding-left:1ex">
 
 which I mean: not like lists. Specifically, the<br>
 pretty-printer runs all the way out to the right<br>
 edge and then suddenly goes into panic mode,<br>
 squinching as hard as possible. It appears that<br>
 it doesn&#39;t consider inserting newlines between<br>
 each element.<br>
 <br>
 This is in<br>
 <br>
 version 6.0.0.3--2014-03-11(f3406253/d) [3m]<br>
 <br>
 apologies if this has been fixed already.<br>
 <br>
 *** How to repeat:<br>
 evaluate this program at the command line:<br>
 <br>
 #lang racket<br>
 <br>
 (pretty-print (list-&gt;set (for/list ([i 10]) `(a b ,i d e))))<br>
 <br>
 *** Environment:<br>
 macosx &quot;Darwin <a href=3D"http://pcp079112pcs.wireless.calpoly.edu" ta=
 rget=3D"_blank">pcp079112pcs.wireless.calpoly.edu</a> 13.1.0 Darwin Kernel =
 Version 13.1.0: Thu Jan 16 19:40:37 PST 2014; root:xnu-2422.90.20~2/RELEASE=
 _X86_64 x86_64&quot; (x86_64-macosx/3m) (get-display-depth) =3D 32<br>
 
 Human Language: english<br>
 (current-memory-use) 504780676<br>
 Links: (links) =3D (); (links #:user? #f) =3D (&quot;drracket-solarized&quo=
 t;); (links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D (#&lt;pat=
 h:/Users/clements/git-clements/clements/pkgs/badger&gt; #&lt;path:/Users/cl=
 ements/git-clements/clements/pkgs/web-utilities&gt; #&lt;path:/Users/clemen=
 ts/git-clements/clements/pkgs/shelly&gt; #&lt;path:/Users/clements/plt/rack=
 et/share/pkgs/handin&gt; #&lt;path:/Users/clements/portaudio&gt; #&lt;path:=
 /Users/clements/plt/racket/share/pkgs/sxml&gt; #&lt;path:/Users/clements/mi=
 di-readwrite&gt; #&lt;path:/Users/clements/rsound&gt; #&lt;path:/Users/clem=
 ents/git-clements/clements/pkgs/gnucash&gt; #&lt;path:/Users/clements/plt/r=
 acket/share/pkgs/memoize&gt; #&lt;path:/Users/clements/git-clements/clement=
 s/pkgs/gradeserver&gt; #&lt;path:/Users/clements/plt/racket/share/pkgs/rack=
 et-handin-client&gt; #&lt;path:/Users/clements/plt/racket/share/pkgs/plai-t=
 yped-s-exp-match&gt; #&lt;path:/Users/clements/osc&gt; #&lt;path:/Users/cle=
 ments/levenshtein&gt; #&lt;path:/tmp/rsc3&gt; #&lt;path:/Users/clements/plt=
 /racket/share/pkgs/mongodb&gt; #&lt;path:/Users/clements/plt/r!<br>
 
 =C2=A0acket/share/pkgs/abnf&gt; #&lt;path:/Users/clements/plt/racket/share/=
 pkgs/plai-typed&gt; #&lt;path:/Users/clements/plt/racket/share/pkgs/dherman=
 -struct&gt; #&lt;path:/Users/clements/plt/racket/share/pkgs/io&gt; #&lt;pat=
 h:/tmp/java&gt; #&lt;path:/Users/clements/plt/racket/share/pkgs/c-utils&gt;=
  #&lt;path:/Users/clements/plt/racket/share/pkgs/html-parsing&gt;)<br>
 
 raco pkg (show):<br>
 /Users/clements/plt/racket/share/devel-pkgs:<br>
 =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Checksum =C2=
 =A0 =C2=A0Source<br>
 =C2=A0main-distribution =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=
 static-link ../../../pkgs/main-distribution)<br>
 =C2=A0plt-services =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0(static-link ../../../pkgs/plt-services)<br>
 =C2=A0racket-lib =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0(static-link ../../../pkgs/racket-pkgs/racket-lib)<br>
 =C2=A0[214 auto-installed packages not shown]<br>
 Installation-wide:<br>
 =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 Checksum =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Source<br>
 =C2=A0abnf =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A08fea8a1c8dba8e5deaa8cad4bfabf167e6623430 =C2=A0 =C2=A0(catalog=
  abnf)<br>
 =C2=A0badger =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0(link ../../../../git-clements/clements/pkgs/badger)<br>
 =C2=A0c-utils =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 940825b9d055164ae0d53c641636c3c42c2bb436 =C2=A0 =C2=A0(catalog c-utils)=
 <br>
 =C2=A0dherman-struct =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A04cb8664926813=
 00979d28ad96b6cab1d865eba77 =C2=A0 =C2=A0(catalog dherman-struct)<br>
 =C2=A0drracket-solarized =C2=A0 =C2=A0 =C2=A0 =C2=A03c7ac56e3bde4f52653c08a=
 d1058188f9bc10184 =C2=A0 =C2=A0(catalog drracket-solarized)<br>
 =C2=A0gnucash =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 #f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0(link ../../../../git-clements/clements/pkgs/gnucash)<br>
 =C2=A0gradeserver =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link =
 ../../../../git-clements/clements/pkgs/gradeserver)<br>
 =C2=A0handin =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A00fcbca1060053a4145630d3e5dc5189200b8db32 =C2=A0 =C2=A0(catalog handi=
 n)<br>
 =C2=A0html-parsing =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0708a7edf=
 91da3a7a7fe384d4ff14552c0eb79e65 =C2=A0 =C2=A0(catalog html-parsing)<br>
 =C2=A0io =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A037af1435e24efdd08d09c45a2ec519b892118109 =C2=A0 =C2=A0(cat=
 alog io)<br>
 =C2=A0java =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0(link /tmp/java)<br>
 =C2=A0levenshtein =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link =
 ../../../../levenshtein)<br>
 =C2=A0memoize =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 366c4782f280f17093abfc8dd28a5bb7cb8c8233 =C2=A0 =C2=A0(catalog memoize)=
 <br>
 =C2=A0midi-readwrite =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#f =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../.=
 ./../midi-readwrite)<br>
 =C2=A0mongodb =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 a2ec95660f86ba5bb49129c10579c61d40c0a221 =C2=A0 =C2=A0(catalog mongodb)=
 <br>
 =C2=A0osc =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0(link ../../../../osc)<br>
 =C2=A0plai-typed =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A005c=
 97105e20b7497599bae7b5c768697ddcdb4d1 =C2=A0 =C2=A0(catalog plai-typed)<br>
 =C2=A0plai-typed-s-exp-match =C2=A0 =C2=A0e010d9718916394b1b3545cb2f7a49c27=
 904e873 =C2=A0 =C2=A0(catalog plai-typed-s-exp-match)<br>
 =C2=A0portaudio =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(l=
 ink ../../../../portaudio)<br>
 =C2=A0racket-handin-client =C2=A0 =C2=A0 =C2=A0d9906a7430448baea2289e3b2a12=
 91444d8ba0c1 =C2=A0 =C2=A0(url github://<a href=3D"http://github.com/jbclem=
 ents/racket-handin-client/csc430-wi14" target=3D"_blank">github.com/jbcleme=
 nts/racket-handin-client/csc430-wi14</a>)<br>
 
 =C2=A0rsc3 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0(link /tmp/rsc3)<br>
 =C2=A0rsound =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0(link ../../../../rsound)<br>
 =C2=A0shelly =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0(link ../../../../git-clements/clements/pkgs/shelly)<br>
 =C2=A0sxml =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0b32608693e9ea39b873da11eabb6e2a4e7d5b600 =C2=A0 =C2=A0(catalog=
  sxml)<br>
 =C2=A0web-utilities =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../.=
 ./../git-clements/clements/pkgs/web-utilities)<br>
 User-specific for installation &quot;development&quot;:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/Users/clements/Library/Racket/development/collects&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/Users/clements/plt/racket/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler&quot; &quot;d=
 ata&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &quot;file&quot=
 ; &quot;info&quot; &quot;info-domain&quot; &quot;json&quot; &quot;launcher&=
 quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet&quot=
 ; &quot;racket&quot; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quo=
 t; &quot;realm&quot; &quot;s-exp&quot; &quot;scheme&quot; &quot;setup&quot;=
  &quot;srfi&quot; &quot;syntax&quot; &quot;unstable&quot; &quot;version&quo=
 t; &quot;xml&quot;))<br>
 
 <br>
 Recent Internal Errors:<br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quot; #t=
  #t ((test) (main)) #t))<br>
 <br>
 </blockquote></div><br></div></div>
 
 --047d7b3a7fb0615bab04f6770963--
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: clements@racket-lang.org, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14436: pretty-printing of sets not like lists
Date: Mon, 7 Apr 2014 13:48:11 -0400

 On Mon, Apr 7, 2014 at 1:16 PM,  <clements@racket-lang.org> wrote:
 >
 > The pretty-printing of lists seems "broken," by
 > which I mean: not like lists. Specifically, the
 > pretty-printer runs all the way out to the right
 > edge and then suddenly goes into panic mode,
 > squinching as hard as possible. It appears that
 > it doesn't consider inserting newlines between
 > each element.
 
 This appears to be a general issue with custom-printed data types.
 Here's a more self-contained example:
 
 #lang racket
 
 (define (tuple-print tuple port mode)
   (write-string "<" port)
   (for ([e (tuple-ref tuple)])
     (write-string ", " port)
     (print e port))
   (write-string ">" port))
 
 (struct tuple (ref)
   #:methods gen:custom-write
   [(define write-proc tuple-print)])
 
  (tuple (for/vector ([i 10]) `#(a b ,i c d)))
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>, clements@racket-lang.org,
        bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14436: pretty-printing of sets not like lists
Date: Mon, 07 Apr 2014 13:18:10 -0600

 On 04/07/2014 11:48 AM, Sam Tobin-Hochstadt wrote:
 > On Mon, Apr 7, 2014 at 1:16 PM,  <clements@racket-lang.org> wrote:
 >>
 >> The pretty-printing of lists seems "broken," by
 >> which I mean: not like lists. Specifically, the
 >> pretty-printer runs all the way out to the right
 >> edge and then suddenly goes into panic mode,
 >> squinching as hard as possible. It appears that
 >> it doesn't consider inserting newlines between
 >> each element.
 >
 > This appears to be a general issue with custom-printed data types.
 > Here's a more self-contained example:
 >
 > #lang racket
 >
 > (define (tuple-print tuple port mode)
 >    (write-string "<" port)
 >    (for ([e (tuple-ref tuple)])
 >      (write-string ", " port)
 >      (print e port))
 >    (write-string ">" port))
 >
 > (struct tuple (ref)
 >    #:methods gen:custom-write
 >    [(define write-proc tuple-print)])
 >
 >   (tuple (for/vector ([i 10]) `#(a b ,i c d)))
 
 To clarify, Sam isn't saying "we won't fix this," but that it's hard to 
 get right and we need an abstraction that makes it easier.
 
 I often use the math library's private `pretty-print-constructor' for 
 data types whose usual constructor isn't the struct name. You just pass 
 it the constructor's name and a list of arguments that would construct 
 the value. Here's Sam's example:
 
 
 #lang racket
 
 (require math/private/utils)
 
 (define (tuple-print tuple port mode)
    (pretty-print-constructor
     'tuple* (vector->list (tuple-ref tuple)) port mode))
 
 (struct tuple (ref)
    #:methods gen:custom-write
    [(define write-proc tuple-print)])
 
 (define (tuple* . xs)
    (tuple (list->vector xs)))
 
 (tuple (for/vector ([i 10]) `#(a b ,i c d)))
 
 
 It doesn't have the cute "<" and ">" delimiters, but then, neither does 
 the set constructor.
 
 Maybe we should generalize this or something like it.
 
 Neil ⊥
 
From: Ryan Culpepper <ryan@cs.utah.edu>
To: Neil Toronto <neil.toronto@gmail.com>,
        Sam Tobin-Hochstadt <samth@cs.indiana.edu>, clements@racket-lang.org,
        bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14436: pretty-printing of sets not like lists
Date: Mon, 07 Apr 2014 21:08:23 -0400

 On 04/07/2014 03:18 PM, Neil Toronto wrote:
 > On 04/07/2014 11:48 AM, Sam Tobin-Hochstadt wrote:
 >> On Mon, Apr 7, 2014 at 1:16 PM,  <clements@racket-lang.org> wrote:
 >>>
 >>> The pretty-printing of lists seems "broken," by
 >>> which I mean: not like lists. Specifically, the
 >>> pretty-printer runs all the way out to the right
 >>> edge and then suddenly goes into panic mode,
 >>> squinching as hard as possible. It appears that
 >>> it doesn't consider inserting newlines between
 >>> each element.
 >>
 >> This appears to be a general issue with custom-printed data types.
 >> Here's a more self-contained example:
 >>
 >> #lang racket
 >>
 >> (define (tuple-print tuple port mode)
 >>    (write-string "<" port)
 >>    (for ([e (tuple-ref tuple)])
 >>      (write-string ", " port)
 >>      (print e port))
 >>    (write-string ">" port))
 >>
 >> (struct tuple (ref)
 >>    #:methods gen:custom-write
 >>    [(define write-proc tuple-print)])
 >>
 >>   (tuple (for/vector ([i 10]) `#(a b ,i c d)))
 >
 > To clarify, Sam isn't saying "we won't fix this," but that it's hard to
 > get right and we need an abstraction that makes it easier.
 >
 > I often use the math library's private `pretty-print-constructor' for
 > data types whose usual constructor isn't the struct name. You just pass
 > it the constructor's name and a list of arguments that would construct
 > the value. Here's Sam's example:
 >
 >
 > #lang racket
 >
 > (require math/private/utils)
 >
 > (define (tuple-print tuple port mode)
 >    (pretty-print-constructor
 >     'tuple* (vector->list (tuple-ref tuple)) port mode))
 >
 > (struct tuple (ref)
 >    #:methods gen:custom-write
 >    [(define write-proc tuple-print)])
 >
 > (define (tuple* . xs)
 >    (tuple (list->vector xs)))
 >
 > (tuple (for/vector ([i 10]) `#(a b ,i c d)))
 >
 >
 > It doesn't have the cute "<" and ">" delimiters, but then, neither does
 > the set constructor.
 >
 > Maybe we should generalize this or something like it.
 
 See unstable/custom-write.
 
 Ryan
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Ryan Culpepper <ryan@cs.utah.edu>,
        Sam Tobin-Hochstadt <samth@cs.indiana.edu>, clements@racket-lang.org,
        bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14436: pretty-printing of sets not like lists
Date: Mon, 07 Apr 2014 20:42:07 -0600

 On 04/07/2014 07:08 PM, Ryan Culpepper wrote:
 > On 04/07/2014 03:18 PM, Neil Toronto wrote:
 >> On 04/07/2014 11:48 AM, Sam Tobin-Hochstadt wrote:
 >>> On Mon, Apr 7, 2014 at 1:16 PM,  <clements@racket-lang.org> wrote:
 >>>>
 >>>> The pretty-printing of lists seems "broken," by
 >>>> which I mean: not like lists. Specifically, the
 >>>> pretty-printer runs all the way out to the right
 >>>> edge and then suddenly goes into panic mode,
 >>>> squinching as hard as possible. It appears that
 >>>> it doesn't consider inserting newlines between
 >>>> each element.
 >>>
 >>> This appears to be a general issue with custom-printed data types.
 >>> Here's a more self-contained example:
 >>>
 >>> #lang racket
 >>>
 >>> (define (tuple-print tuple port mode)
 >>>    (write-string "<" port)
 >>>    (for ([e (tuple-ref tuple)])
 >>>      (write-string ", " port)
 >>>      (print e port))
 >>>    (write-string ">" port))
 >>>
 >>> (struct tuple (ref)
 >>>    #:methods gen:custom-write
 >>>    [(define write-proc tuple-print)])
 >>>
 >>>   (tuple (for/vector ([i 10]) `#(a b ,i c d)))
 >>
 >> To clarify, Sam isn't saying "we won't fix this," but that it's hard to
 >> get right and we need an abstraction that makes it easier.
 >>
 >> I often use the math library's private `pretty-print-constructor' for
 >> data types whose usual constructor isn't the struct name. You just pass
 >> it the constructor's name and a list of arguments that would construct
 >> the value. Here's Sam's example:
 >>
 >>
 >> #lang racket
 >>
 >> (require math/private/utils)
 >>
 >> (define (tuple-print tuple port mode)
 >>    (pretty-print-constructor
 >>     'tuple* (vector->list (tuple-ref tuple)) port mode))
 >>
 >> (struct tuple (ref)
 >>    #:methods gen:custom-write
 >>    [(define write-proc tuple-print)])
 >>
 >> (define (tuple* . xs)
 >>    (tuple (list->vector xs)))
 >>
 >> (tuple (for/vector ([i 10]) `#(a b ,i c d)))
 >>
 >>
 >> It doesn't have the cute "<" and ">" delimiters, but then, neither does
 >> the set constructor.
 >>
 >> Maybe we should generalize this or something like it.
 >
 > See unstable/custom-write.
 
 Holy awesome. How long as that been there?
 
 Neil
 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Ryan Culpepper <ryan@cs.utah.edu>
Cc: bugs <bugs@racket-lang.org>, Neil Toronto <neil.toronto@gmail.com>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>, clements@racket-lang.org
Subject: Re: [racket-bug] all/14436: pretty-printing of sets not like lists
Date: Tue, 8 Apr 2014 07:40:31 -0400

 --047d7b339db18a14b004f6867313
 Content-Type: text/plain; charset=UTF-8
 
 Is this something that should be integrated into base? Currently, it can't
 be used by sets, four example.
 
 Sam
 On Apr 7, 2014 9:08 PM, "Ryan Culpepper" <ryan@cs.utah.edu> wrote:
 
 > On 04/07/2014 03:18 PM, Neil Toronto wrote:
 >
 >> On 04/07/2014 11:48 AM, Sam Tobin-Hochstadt wrote:
 >>
 >>> On Mon, Apr 7, 2014 at 1:16 PM,  <clements@racket-lang.org> wrote:
 >>>
 >>>>
 >>>> The pretty-printing of lists seems "broken," by
 >>>> which I mean: not like lists. Specifically, the
 >>>> pretty-printer runs all the way out to the right
 >>>> edge and then suddenly goes into panic mode,
 >>>> squinching as hard as possible. It appears that
 >>>> it doesn't consider inserting newlines between
 >>>> each element.
 >>>>
 >>>
 >>> This appears to be a general issue with custom-printed data types.
 >>> Here's a more self-contained example:
 >>>
 >>> #lang racket
 >>>
 >>> (define (tuple-print tuple port mode)
 >>>    (write-string "<" port)
 >>>    (for ([e (tuple-ref tuple)])
 >>>      (write-string ", " port)
 >>>      (print e port))
 >>>    (write-string ">" port))
 >>>
 >>> (struct tuple (ref)
 >>>    #:methods gen:custom-write
 >>>    [(define write-proc tuple-print)])
 >>>
 >>>   (tuple (for/vector ([i 10]) `#(a b ,i c d)))
 >>>
 >>
 >> To clarify, Sam isn't saying "we won't fix this," but that it's hard to
 >> get right and we need an abstraction that makes it easier.
 >>
 >> I often use the math library's private `pretty-print-constructor' for
 >> data types whose usual constructor isn't the struct name. You just pass
 >> it the constructor's name and a list of arguments that would construct
 >> the value. Here's Sam's example:
 >>
 >>
 >> #lang racket
 >>
 >> (require math/private/utils)
 >>
 >> (define (tuple-print tuple port mode)
 >>    (pretty-print-constructor
 >>     'tuple* (vector->list (tuple-ref tuple)) port mode))
 >>
 >> (struct tuple (ref)
 >>    #:methods gen:custom-write
 >>    [(define write-proc tuple-print)])
 >>
 >> (define (tuple* . xs)
 >>    (tuple (list->vector xs)))
 >>
 >> (tuple (for/vector ([i 10]) `#(a b ,i c d)))
 >>
 >>
 >> It doesn't have the cute "<" and ">" delimiters, but then, neither does
 >> the set constructor.
 >>
 >> Maybe we should generalize this or something like it.
 >>
 >
 > See unstable/custom-write.
 >
 > Ryan
 >
 >
 
 --047d7b339db18a14b004f6867313
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">Is this something that should be integrated into base? Curre=
 ntly, it can&#39;t be used by sets, four example.</p>
 <p dir=3D"ltr">Sam</p>
 <div class=3D"gmail_quote">On Apr 7, 2014 9:08 PM, &quot;Ryan Culpepper&quo=
 t; &lt;<a href=3D"mailto:ryan@cs.utah.edu">ryan@cs.utah.edu</a>&gt; wrote:<=
 br type=3D"attribution"><blockquote class=3D"gmail_quote" style=3D"margin:0=
  0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 On 04/07/2014 03:18 PM, Neil Toronto wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 On 04/07/2014 11:48 AM, Sam Tobin-Hochstadt wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 On Mon, Apr 7, 2014 at 1:16 PM, =C2=A0&lt;<a href=3D"mailto:clements@racket=
 -lang.org" target=3D"_blank">clements@racket-lang.org</a>&gt; wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 <br>
 The pretty-printing of lists seems &quot;broken,&quot; by<br>
 which I mean: not like lists. Specifically, the<br>
 pretty-printer runs all the way out to the right<br>
 edge and then suddenly goes into panic mode,<br>
 squinching as hard as possible. It appears that<br>
 it doesn&#39;t consider inserting newlines between<br>
 each element.<br>
 </blockquote>
 <br>
 This appears to be a general issue with custom-printed data types.<br>
 Here&#39;s a more self-contained example:<br>
 <br>
 #lang racket<br>
 <br>
 (define (tuple-print tuple port mode)<br>
 =C2=A0 =C2=A0(write-string &quot;&lt;&quot; port)<br>
 =C2=A0 =C2=A0(for ([e (tuple-ref tuple)])<br>
 =C2=A0 =C2=A0 =C2=A0(write-string &quot;, &quot; port)<br>
 =C2=A0 =C2=A0 =C2=A0(print e port))<br>
 =C2=A0 =C2=A0(write-string &quot;&gt;&quot; port))<br>
 <br>
 (struct tuple (ref)<br>
 =C2=A0 =C2=A0#:methods gen:custom-write<br>
 =C2=A0 =C2=A0[(define write-proc tuple-print)])<br>
 <br>
 =C2=A0 (tuple (for/vector ([i 10]) `#(a b ,i c d)))<br>
 </blockquote>
 <br>
 To clarify, Sam isn&#39;t saying &quot;we won&#39;t fix this,&quot; but tha=
 t it&#39;s hard to<br>
 get right and we need an abstraction that makes it easier.<br>
 <br>
 I often use the math library&#39;s private `pretty-print-constructor&#39; f=
 or<br>
 data types whose usual constructor isn&#39;t the struct name. You just pass=
 <br>
 it the constructor&#39;s name and a list of arguments that would construct<=
 br>
 the value. Here&#39;s Sam&#39;s example:<br>
 <br>
 <br>
 #lang racket<br>
 <br>
 (require math/private/utils)<br>
 <br>
 (define (tuple-print tuple port mode)<br>
 =C2=A0 =C2=A0(pretty-print-constructor<br>
 =C2=A0 =C2=A0 &#39;tuple* (vector-&gt;list (tuple-ref tuple)) port mode))<b=
 r>
 <br>
 (struct tuple (ref)<br>
 =C2=A0 =C2=A0#:methods gen:custom-write<br>
 =C2=A0 =C2=A0[(define write-proc tuple-print)])<br>
 <br>
 (define (tuple* . xs)<br>
 =C2=A0 =C2=A0(tuple (list-&gt;vector xs)))<br>
 <br>
 (tuple (for/vector ([i 10]) `#(a b ,i c d)))<br>
 <br>
 <br>
 It doesn&#39;t have the cute &quot;&lt;&quot; and &quot;&gt;&quot; delimite=
 rs, but then, neither does<br>
 the set constructor.<br>
 <br>
 Maybe we should generalize this or something like it.<br>
 </blockquote>
 <br>
 See unstable/custom-write.<br>
 <br>
 Ryan<br>
 <br>
 </blockquote></div>
 
 --047d7b339db18a14b004f6867313--
