From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Oct 15 15:06:41 2006
Received: from nz-out-0102.google.com (nz-out-0102.google.com [64.233.162.204])
	by champlain.ccs.neu.edu (8.13.7/8.13.7) with ESMTP id k9FJ6ZsX002055
	for <bugs@bugs.plt-scheme.org>; Sun, 15 Oct 2006 15:06:35 -0400
Message-Id: <200610151906.k9FJ6Xq4002049@champlain.ccs.neu.edu>
Date: Sun, 15 Oct 2006 15:06:33 -0400
From: dougorleans@gmail.com
To: bugs@plt-scheme.org
Subject: web-server: uncaught exception from malformed UTF-8 in URL

>Number:         8328
>Category:       web-server
>Synopsis:       web-server: uncaught exception from malformed UTF-8 in URL
>Class:          sw-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          analyzed
>Confidential:   no
>Arrival-Date:   Sun Oct 15 15:10:02 -0400 2006
>Closed-Date:    
>Last-Modified:  Wed Apr 01 15:00:01 -0400 2009
>Originator:     Doug Orleans
>Organization:
plt
>Submitter-Id:   unknown
>Release:        352.7
>Environment:
unix "Linux dro 2.4.21-1-k7 #2 Mon Jun 16 22:23:16 EST 2003 i686 GNU/Linux" (i386-linux) (get-display-depth) = 24
Docs Installed:
(("/usr/local/share/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/usr/local/lib/plt/collects/doc" "help"))
Human Language: english
(current-memory-use) 45867008

Collections:
(("/home/dougo/swindle-libs" ".svn" "dom" "volity" "jabber" "svn-prop.tmp~") ("/home/dougo/collects" "socrates" "racko" "domino-puzzle" "volity" "old-socrates" "info-domain" ".cvsignore" "scratch" "hunt" "CVS" "CVSROOT" "dissertation" "homepage" "random" "mighty-mike" "release" "flyweight.ss" "palindromic-pangram" "lod-violations.txt" "old-jabber") ("/home/dougo/.plt-scheme/352.7/collects" non-existent-path) ("/usr/local/lib/plt/collects" "afm" "algol60" "browser" "compiler" "config" "cvs-time-stamp" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "finish-install" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "make" "mike-burns-spgsql" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "!
 r5rs" "r6rs" "readline" "reduction-semantics" "repos-time-stamp" "scheme-pg" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "spgsql" "spgsql.tgz" "srfi" "srpersist" "ssax" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "xelda" "xml" "lazy" "macro-debugger"))
>Description:
I saw this uncaught exception from my web-server process:

bytes->string/utf-8: string is not a well-formed UTF-8 encoding: #"/\220\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\3...

 === context ===
/usr/local/lib/plt/collects/web-server/private/request.ss:82:2: read-request-line
/usr/local/lib/plt/collects/web-server/private/request.ss:21:5
provide/contract-contract-id-read-request
/usr/local/lib/plt/collects/web-server/private/dispatch-server-unit.ss:73:10: connection-loop
>How-To-Repeat:
Here is an example that shows that I can't fix this on the web server end:

#lang scheme
(require net/url)

#|
2.2. URL Character Encoding Issues

   URLs are sequences of characters, i.e., letters, digits, and special
   characters. A URLs may be represented in a variety of ways: e.g., ink
   on paper, or a sequence of octets in a coded character set. The
   interpretation of a URL depends only on the identity of the
   characters used.

   In most URL schemes, the sequences of characters in different parts
   of a URL are used to represent sequences of octets used in Internet
   protocols. For example, in the ftp scheme, the host name, directory
   name and file names are such sequences of octets, represented by
   parts of the URL.  Within those parts, an octet may be represented by
   the chararacter which has that octet as its code within the US-ASCII
   [20] coded character set.

   In addition, octets may be encoded by a character triplet consisting
   of the character "%" followed by the two hexadecimal digits (from
   "0123456789ABCDEF") which forming the hexadecimal value of the octet.
   (The characters "abcdef" may also be used in hexadecimal encodings.)

   Octets must be encoded if they have no corresponding graphic
   character within the US-ASCII coded character set, if the use of the
   corresponding character is unsafe, or if the corresponding character
   is reserved for some other interpretation within the particular URL
   scheme.

   No corresponding graphic US-ASCII:

   URLs are written only with the graphic printable characters of the
   US-ASCII coded character set. The octets 80-FF hexadecimal are not
   used in US-ASCII, and the octets 00-1F and 7F hexadecimal represent
   control characters; these must be encoded.

   Unsafe:

   Characters can be unsafe for a number of reasons.  The space
   character is unsafe because significant spaces may disappear and
   insignificant spaces may be introduced when URLs are transcribed or
   typeset or subjected to the treatment of word-processing programs.
   The characters "<" and ">" are unsafe because they are used as the
   delimiters around URLs in free text; the quote mark (""") is used to
   delimit URLs in some systems.  The character "#" is unsafe and should
   always be encoded because it is used in World Wide Web and in other
   systems to delimit a URL from a fragment/anchor identifier that might
   follow it.  The character "%" is unsafe because it is used for
   encodings of other characters.  Other characters are unsafe because
   gateways and other transport agents are known to sometimes modify
   such characters. These characters are "{", "}", "|", "\", "^", "~",
   "[", "]", and "`".

   All unsafe characters must always be encoded within a URL. For
   example, the character "#" must be encoded within URLs even in
   systems that do not normally deal with fragment or anchor
   identifiers, so that if the URL is copied into another system that
   does use them, it will not be necessary to change the URL encoding.

   Reserved:

   Many URL schemes reserve certain characters for a special meaning:
   their appearance in the scheme-specific part of the URL has a
   designated semantics. If the character corresponding to an octet is
   reserved in a scheme, the octet must be encoded.  The characters ";",
   "/", "?", ":", "@", "=" and "&" are the characters which may be
   reserved for special meaning within a scheme. No other characters may
   be reserved within a scheme.

   Usually a URL has the same interpretation when an octet is
   represented by a character and when it encoded. However, this is not
   true for reserved characters: encoding a character reserved for a
   particular scheme may change the semantics of a URL.

   Thus, only alphanumerics, the special characters "$-_.+!*'(),", and
   reserved characters used for their reserved purposes may be used
   unencoded within a URL.

   On the other hand, characters that are not required to be encoded
   (including alphanumerics) may be encoded within the scheme-specific
   part of a URL, as long as they are not being used for a reserved
   purpose.
|#
(define (between lo v hi)
  (or (lo . <= . v)
      (v . <= . hi)))

(define (hex-num->char n)
  (case n
    [(0) #\0] [(1) #\1] [(2) #\2]
    [(3) #\3] [(4) #\4] [(5) #\5]
    [(6) #\6] [(7) #\7] [(8) #\8]
    [(9) #\9] [(10) #\a] [(11) #\b]
    [(12) #\c] [(13) #\d] [(14) #\e]
    [(15) #\f]))

(define (hex i)
  (reverse
   (let loop ([i i])
    (let* ([digit (modulo i 16)]
           [next-i (/ (- i digit) 16)])
      (if (zero? next-i)
          (list digit)
          (list* digit (loop next-i)))))))      

(define (encode c)
  (list* (char->integer #\%)
         (map (compose char->integer hex-num->char)
              (hex c))))

(define (byte->url-chars c)
  (if (or (between #x80 c #xff)
          (between #x00 c #x1f)
          (= c #x7f))
      (encode c)
      (list c)))

(define (bytes->url-string b)
  (bytes->string/utf-8
   (list->bytes
    (apply append
           (map byte->url-chars
                (bytes->list b))))))

(define b #"/\220\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311\311")
(define us (bytes->url-string b))

(url->string (string->url us))

; The error comes from inside string->url even after I've correctly encoded the url
>Fix:
>Audit-Trail:
State changed from "open" to "analyzed" by jay at Wed, 27 Jun 2007 15:10:27 -0400
Reason>>> This is really a problem with (lib "url.ss" "net"), which requires strings, which 
are utf-8 in mzscheme, rather than bytes which are arbitrary. URIs are not 
necessarily UTF-8, as far as I can tell from the RFC.


Responsible changed from "jay" to "eli" by jay at Wed, 01 Apr 2009 12:03:41 -0400
Reason>>> Problem in net/url

From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Cc: jay@plt-scheme.org, matthias@plt-scheme.org, dougorleans@gmail.com,
        Matthew Flatt <mflatt@cs.utah.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Subject: Re: [plt-bug] web-server/8328 web-server: uncaught exception from malformed UTF-8 in URL
Date: Wed, 1 Apr 2009 13:55:12 -0400

 On Apr  1, jay@plt-scheme.org wrote:
 > 
 > Responsible changed from "jay" to "eli" by jay at Wed, 01 Apr 2009 12:03:41 -0400
 > Reason>>> Problem in net/url
 > 
 > View:
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8328
 
 Itemize to make it quick:
 
 * The net/url code doesn't have a single "owner" -- both Robby &
   Matthew did stuff on it too...  (I just happened to fix some
   problems, and tried as hard as I can to not change anything...)
 
 * The problem is actually coming from net/uri-codec
 
 * A shorter way to see the problem is just:
 
     (string->url "%90")
 
   which basically does
 
     (bytes->string/utf-8 #"\220")
 
 * There's no way to fix this, since the interface uses strings (and
   that's probably because the code involved is pre-unicode).  The only
   fix will be to change the interface to work with byte strings.
 
 * The url code is very fragile in the sense of the number of things
   that break when it changes -- so I'm not going to risk trying to get
   it to work with both strings any bytes...
 
 * The right solution, which I hope to get to at some point, is to
   write a new library to replace net/url, which suffer from a number
   of other pretty-hopeless problems.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, jay@plt-scheme.org, matthias@plt-scheme.org,
        dougorleans@gmail.com, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] web-server/8328 web-server: uncaught exception from 
	malformed UTF-8 in URL
Date: Wed, 1 Apr 2009 14:03:26 -0400

 On Apr  1, Robby Findler wrote:
 > Is "%90" a valid sequence of octets that should map into a url
 > struct or not? If so, what url struct?
 
 AFAICT, when I read some of the RFC parts that looked relevant, it's
 upto the protocol to interpret the part of the URL after the scheme,
 so this should be valid.
 
 (But there should be a big pile of salt there: I remember looking for
 an answer to exactly that question, aned being surprised how
 un-obvious the whole thing is.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, jay@plt-scheme.org, matthias@plt-scheme.org,
        dougorleans@gmail.com, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] web-server/8328 web-server: uncaught exception from 
	malformed UTF-8 in URL
Date: Wed, 1 Apr 2009 12:59:55 -0500

 Is "%90" a valid sequence of octets that should map into a url struct
 or not? If so, what url struct?
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, jay@plt-scheme.org, matthias@plt-scheme.org,
        dougorleans@gmail.com, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] web-server/8328 web-server: uncaught exception from 
	malformed UTF-8 in URL
Date: Wed, 1 Apr 2009 13:18:03 -0500

 On Wed, Apr 1, 2009 at 1:03 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Apr =C2=A01, Robby Findler wrote:
 >> Is "%90" a valid sequence of octets that should map into a url
 >> struct or not? If so, what url struct?
 >
 > AFAICT, when I read some of the RFC parts that looked relevant, it's
 > upto the protocol to interpret the part of the URL after the scheme,
 > so this should be valid.
 
 Aha, I understand.
 
 According to the grammar in rfc 2396, that is a url that only consists
 of a single, relative segment with whatever "%90" maps to.
 
 The RFC, however, leaves open how to interpret bytes. As it turns out
 %90 is not a well-formed utf-8 sequnce of bytes, so string->url
 rejects it (with a bad error message ...)
 
 If we had used Latin-1 to interpret random sequences of bytes then
 this would have been a captiol Z, apparently.
 
 I believe the reason I used utf-8 to decode those bytes and not
 something else was to support Chinese language urls.
 
 But perhaps the right choice would have been for the params part of
 the url struct to be byte strings, and not strings. (Apologies if that
 was covered in one of Eli's bullet items, I didn't get it.)
 
 Jay: is that what you're saying?
 
 Robby
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs@plt-scheme.org, jay@plt-scheme.org,
        matthias@plt-scheme.org, dougorleans@gmail.com,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] web-server/8328 web-server: uncaught exception from 
	malformed UTF-8 in URL
Date: Wed, 1 Apr 2009 12:25:53 -0600

 On Wed, Apr 1, 2009 at 12:18 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > The RFC, however, leaves open how to interpret bytes. As it turns out
 > %90 is not a well-formed utf-8 sequnce of bytes, so string->url
 > rejects it (with a bad error message ...)
 >
 > If we had used Latin-1 to interpret random sequences of bytes then
 > this would have been a captiol Z, apparently.
 >
 > I believe the reason I used utf-8 to decode those bytes and not
 > something else was to support Chinese language urls.
 >
 > But perhaps the right choice would have been for the params part of
 > the url struct to be byte strings, and not strings. (Apologies if that
 > was covered in one of Eli's bullet items, I didn't get it.)
 >
 > Jay: is that what you're saying?
 
 Yes, but I don't think it applies only to params.
 
 Jay
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, jay@plt-scheme.org, matthias@plt-scheme.org,
        dougorleans@gmail.com, Matthew Flatt <mflatt@cs.utah.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Subject: Re: [plt-bug] web-server/8328 web-server: uncaught exception from 
	malformed UTF-8 in URL
Date: Wed, 1 Apr 2009 12:27:50 -0600

 On Wed, Apr 1, 2009 at 11:55 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > * The net/url code doesn't have a single "owner" -- both Robby &
 > =A0Matthew did stuff on it too... =A0(I just happened to fix some
 > =A0problems, and tried as hard as I can to not change anything...)
 
 I noticed that looking at the log, you were the last one and you had
 mentioned the rewrite, so I figured it should be in your queue. Sorry
 if I am wrong.
 
 > * There's no way to fix this, since the interface uses strings (and
 > =A0that's probably because the code involved is pre-unicode). =A0The only
 > =A0fix will be to change the interface to work with byte strings.
 
 I understand and agree with this assessment.
 
 > * The url code is very fragile in the sense of the number of things
 > =A0that break when it changes -- so I'm not going to risk trying to get
 > =A0it to work with both strings any bytes...
 >
 > * The right solution, which I hope to get to at some point, is to
 > =A0write a new library to replace net/url, which suffer from a number
 > =A0of other pretty-hopeless problems.
 
 Sounds right to me. If you'd like we could work together on it, I have
 a bit of time at the moment.
 
 Jay
 
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Eli Barzilay <eli@barzilay.org>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org,
        jay@plt-scheme.org, matthias@plt-scheme.org, dougorleans@gmail.com,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] web-server/8328 web-server: uncaught exception from 
	malformed UTF-8 in URL
Date: Wed, 1 Apr 2009 14:58:14 -0400

 On Apr  1, Jay McCarthy wrote:
 > On Wed, Apr 1, 2009 at 12:18 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > >
 > > But perhaps the right choice would have been for the params part
 > > of the url struct to be byte strings, and not strings. (Apologies
 > > if that was covered in one of Eli's bullet items, I didn't get
 > > it.)
 > >
 > > Jay: is that what you're saying=3F
 >=20
 > Yes, but I don't think it applies only to params.
 
 (And that implies even more: the separation to directories and
 parameters is just a convention, so more parts of the struct should
 also be available in some way uninterpreted.)
 
 
 On Apr  1, Jay McCarthy wrote:
 > On Wed, Apr 1, 2009 at 11:55 AM, Eli Barzilay <eli@barzilay.org> wrot=
 e:
 > >
 > > * The right solution, which I hope to get to at some point, is to
 > > =A0write a new library to replace net/url, which suffer from a
 > > =A0number of other pretty-hopeless problems.
 >=20
 > Sounds right to me. If you'd like we could work together on it, I hav=
 e
 > a bit of time at the moment.
 
 I don't have time for it now, probably start at the end of the
 semester.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                   http://www.barzilay.org/                 Maze is Life=
 !
