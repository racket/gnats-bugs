From apache@plt-scheme.org Thu Aug 25 12:38:52 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j7PGcmZS016850
	for <bugs@plt-scheme.org>; Thu, 25 Aug 2005 12:38:48 -0400
Message-Id: <200508251638.j7PGcmje016848@champlain.ccs.neu.edu>
Date: Thu, 25 Aug 2005 12:38:48 -0400
From: jacobm@cs.uchicago.edu
To: bugs@plt-scheme.org
Subject: Web server: the current-servlet-instance parameter should probably be a thread-cell instead

>Number:         7551
>Category:       web-server
>Synopsis:       Web server: the current-servlet-instance parameter should probably be a thread-cell instead
>Class:          sw-bug
>Responsible:    jay
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Aug 25 12:40:00 -0400 2005
>Last-Modified:  Thu Aug 25 13:53:00 -0400 2005
>Originator:     Jacob Matthews
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.201-svn24aug2005
>Environment:
unix "Linux prelude.cs.uchicago.edu 2.4.27-2-k6 #1 Thu Jan 20 11:18:09 JST 2005 i686 GNU/Linux" (i386-linux) (get-display-depth) = 24
Docs Installed:
(#<path:/home/jacobm/.plt-scheme/planet/300/cache/neil/tabexpand-planet.plt/1/0/doc> #<path:/home/jacobm/.plt-scheme/planet/300/cache/neil/webscraperhelper.plt/1/0/doc> #<path:/var/tmp/trunk/collects/doc/insidemz> #<path:/var/tmp/trunk/collects/doc/profj-beginner> #<path:/var/tmp/trunk/collects/doc/profj-intermediate> #<path:/var/tmp/trunk/collects/doc/advanced> #<path:/var/tmp/trunk/collects/doc/beginning> #<path:/var/tmp/trunk/collects/doc/beginning-abbr> #<path:/var/tmp/trunk/collects/doc/drscheme> #<path:/var/tmp/trunk/collects/doc/foreign> #<path:/var/tmp/trunk/collects/doc/swindle> #<path:/var/tmp/trunk/collects/doc/web-server> #<path:/var/tmp/trunk/collects/doc/misclib> #<path:/var/tmp/trunk/collects/doc/intermediate> #<path:/var/tmp/trunk/collects/doc/profj-advanced> #<path:/var/tmp/trunk/collects/doc/tex2page> #<path:/var/tmp/trunk/collects/doc/t-y-scheme> #<path:/var/tmp/trunk/collects/doc/tools> #<path:/var/tmp/trunk/collects/doc/mzlib> #<path:/var/tmp/trunk/collects/doc/mrlib> #<path:/var/tmp/trunk/collects/doc/mzscheme> #<path:/var/tmp/trunk/collects/doc/intermediate-lambda> #<path:/var/tmp/trunk/collects/doc/teachpack> #<path:/var/tmp/trunk/collects/doc/framework> #<path:/var/tmp/trunk/collects/doc/tour> #<path:/var/tmp/trunk/collects/doc/srfi> #<path:/var/tmp/trunk/collects/doc/plot> #<path:/var/tmp/trunk/collects/doc/mred> #<path:/var/tmp/trunk/collects/doc/r5rs> #<path:/var/tmp/trunk/collects/doc/help> #<path:/var/tmp/trunk/collects/doc/mzc>)
Collections:
((#<path:/home/jacobm/.plt-scheme/299.201/collects> "non-existent path") (#<path:/var/tmp/trunk/collects> (#<path:afm> #<path:doc> #<path:ffi> #<path:net> #<path:sgl> #<path:xml> #<path:.svn> #<path:eopl> #<path:help> #<path:honu> #<path:htdp> #<path:html> #<path:lang> #<path:make> #<path:r6rs> #<path:mred> #<path:plai> #<path:plot> #<path:srfi> #<path:ssax> #<path:framework> #<path:reduction-semantics> #<path:profjBoxes> #<path:handin-client> #<path:mzscheme> #<path:games> #<path:icons> #<path:htdch> #<path:mrlib> #<path:mzcom> #<path:mzlib> #<path:graphics> #<path:profj> #<path:setup> #<path:tests> #<path:trace> #<path:xelda> #<path:waterworld> #<path:preprocessor> #<path:sirmail> #<path:skipper> #<path:handin-server> #<path:tex2page> #<path:test-suite> #<path:texpict> #<path:profjWizard> #<path:stepper> #<path:web-server> #<path:compiler> #<path:swindle> #<path:dynext> #<path:hierlist> #<path:frtime> #<path:defaults> #<path:guibuilder> #<path:finish-install> #<path:drscheme> #<path:syntax-color> #<path:mrflow> #<path:srpersist> #<path:mztake> #<path:slibinit> #<path:planet> #<path:mysterx> #<path:errortrace> #<path:slatex> #<path:syntax> #<path:version> #<path:algol60> #<path:honu-module> #<path:parser-tools> #<path:openssl> #<path:embedded-gui> #<path:slideshow> #<path:repos-time-stamp> #<path:info-domain> #<path:readline> #<path:launcher> #<path:string-constants> #<path:browser>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
The current-servlet-instance parameter, defined in 
web-server/servlet-table.ss:17, probably ought to be a thread-cell
rather than a parameter (see section 7.4 of the mzscheme manual; I certainly
didn't know what they were before today). If
your servlet captures its own continuation using call/cc and saves 
it in some globally-accessible place (say a global hash table)
and then on some later web interaction using a different servlet instance
pulls that continuation out of the hash table and invokes it, that 
continuation will try to use the old, now-possibly-dead servlet instance
to interact rather than the servlet instance of the thread that threw to
the continuation.

I know that sounds academic. See `steps to reproduce' for a concrete problem
that I had because current-servlet-instance is a parameter that I fixed by
turning it into a thread-cell. Doing this is in fact how I learned what the
heck thread cells are at all :) . 

Note: I'm marking this a software bug rather than a change request because
in the past I've seen this exact same error message in a production environment
that didn't use continuations at all, though in that situation I couldn't
make the messages appear at will (I think it had something to do with server 
load). I'm not 100% sure they're caused by the same thing, though, so all 
I can say for sure is that the software as it is prevents you from sharing
continuations among servlet instances effectively. Also, I notice that the
web-server code uses parameters for a lot of things, not just the 
current-servlet-instance, but it's possible that it really means to use thread
cells instead in a lot of cases.
>How-To-Repeat:
Here's a servlet that implements "resume" functionality, by which I mean it
allows users (identified by name) to resume old sessions.

;; ---

(module resume mzscheme
  
  (require (lib "servlet.ss" "web-server"))
  (provide interface-version timeout start)
  
  (define interface-version 'v1)
  (define timeout 20)

  ;; ============================================================
  ;; RESUMING
  
  ;; *R* : string -o> continuation
  ;; Maps user names to the continuation representing the farthest
  ;; point the user has reached in this web interaction
  (define *R* (make-hash-table 'equal))
  
  ;; send-page : response, string -> request
  ;; just like send/suspend except it remembers that this response
  ;; is the last one sent to the given user
  (define (send-page page user)
    (begin 
      (let/cc k (hash-table-put! *R* user k))
      (send/suspend page)))
  
  ;; resume : string -> #f
  ;; if the user has a current session, this function
  ;; does not return and instead throws to the continuation
  ;; representing that session. Otherwise returns false.
  (define (resume user)
    (let ((k (hash-table-get *R* user (lambda () #f))))
      (if k 
          (k 'resuming) 
          #f)))
 
  ;; ============================================================
  ;; THE SERVLET
  
  ;; This servlet just logs the user in and then presents some
  ;; pages in order.
  
  ; start : request -> response
  (define (start initial-request)
    
    (let ((uname (get-uname)))
      (resume uname)
      (present "page 1" uname)
      (present "page 2" uname)
      (present "page 3" uname)
      (finish)))
  
  ;; get-uname : -> string
  ;; get a user name
  (define (get-uname)
    (let ((req
           (send/suspend
            (lambda (k)
              `(html
                (body
                 (form ((action ,k))
                       (p "What's your name?")
                       (input ((type "text") (name "name")))
                       (input ((type "submit"))))))))))
      (extract-binding/single 'name (request-bindings req))))
            
  ;; present : string, string -> void
  ;; present the given message to the given user, saving this
  ;; interaction as the most recent resume point
  (define (present str uname)
    (send-page
     (lambda (k)
       `(html 
         (head (title "a page"))
         (body
          (form ((action ,k))
                (p ,str)
                (input ((type "submit")))))))
     uname))
  
  (define (finish)
    (send/finish
     `(html
       (p "That's the end.")))))

;; ---

I run this servlet using the web server at servlets/resume.ss. I log in as User, 
and when it presents me with page 1, I click "Submit" to go to page two. 
If I now immediately go back to servlets/resume.ss stripping out the k-url
stuff and log in again as User, I'm taken directly back to page 2. 

However, if I go to page two and then wait until the timeout passes (which
I verified by clicking submit and seeing the 404 page) and then go back
to the k-url-less servlets/resume.ss and log in as User, the servlet never
responds. Checking the server's output I see the message

Servlet exception:
display: output port is closed

display: output port is closed

The offending output port turns out to be (connection-o-port conn) on 
web-server/response.ss:131, which it's getting from the current servlet
instance. But since current-servlet-instance is a parameter rather than
a thread cell and since we're resuming from a continuation captured when
this parameter was set differently, we get an old, expired servlet instance
with closed output ports rather than the servlet instance that was created
for this interaction. A thread cell, which differs from a parameter on
precisely this point, therefore seems like it would be a better choice. And
sure enough, when I change current-servlet-instance to a thread-cell by
making the following changes:

servlet-tables.ss
17:
-  (define current-servlet-instance (make-parameter #f))
+  (define current-servlet-instance (make-thread-cell #f))

servlet.ss
31:
-    (let ([ctxt (servlet-instance-context (current-servlet-instance))])
+    (let ([ctxt (servlet-instance-context (thread-cell-ref current-servlet-instance))])
37:
-    (clear-continuations! (current-servlet-instance))
+    (clear-continuations! (thread-cell-ref current-servlet-instance))
44:
-      (let* ([inst (current-servlet-instance)]
+      (let* ([inst (thread-cell-ref current-servlet-instance)]
57:
-    (clear-continuations! (current-servlet-instance))
+    (clear-continuations! (thread-cell-ref current-servlet-instance))

web-server-unit.ss
465:
-                               [current-servlet-instance inst]
467:
+                  (thread-cell-set! current-servlet-instance inst)

(that is, just the changes needed to change the parameter to a thread-cell)

When I make those changes, the resume functionality now works as I'd
expect and allows a user to resume their session even after the original
servlet instance that created it is dead.
>Fix:
>Audit-Trail:
From: Jay McCarthy <jay@kenyamountain.com>
To: jacobm@cs.uchicago.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7551: Web server: the current-servlet-instance parameter should probably be a thread-cell instead
Date: Thu, 25 Aug 2005 12:52:48 -0400

 I will look at making this change once I understand thread cells as  
 well.
 
 However, your task can also be accomplished by...
 
 > ============================================================
 >   ;; RESUMING
 >
 >   ;; *R* : string -o> continuation
 >   ;; Maps user names to the continuation representing the farthest
 >   ;; point the user has reached in this web interaction
 >   (define *R* (make-hash-table 'equal))
 >
 >   ;; send-page : response, string -> request
 >   ;; just like send/suspend except it remembers that this response
 >   ;; is the last one sent to the given user
 >   (define (send-page page user)
 >     (begin
 >       (let/cc k (hash-table-put! *R* user k))
 >       (send/suspend page)))
 
      (define (send-page page user)
          (send/suspend
              (lambda (k-url)
                  (hash-table-put! *R* user k-url)
                  (page k-url))))
 
 >   ;; resume : string -> #f
 >   ;; if the user has a current session, this function
 >   ;; does not return and instead throws to the continuation
 >   ;; representing that session. Otherwise returns false.
 >   (define (resume user)
 >     (let ((k (hash-table-get *R* user (lambda () #f))))
 >       (if k
 >           (k 'resuming)
 >           #f)))
 
      ; returns a URL to redirect to, or false
      (define (resume user)
          (hash-table-get *R* user (lambda () #f)))
 
      ; use:
      (let ([resume-url (resume user)])
          (if resume-url
              (redirect-to resume-url)
              (default)))
 
 This strategy will ensure that continuations are correctly deleting  
 by send/finish and instance timeouts. And the user will end up at  
 their last session.
 
 Jay
 
 ----
 Jay McCarthy <jay@kenyamountain.com>
 http://jay.makeoutcity.com
 
 On Aug 25, 2005, at 12:40 PM, jacobm@cs.uchicago.edu wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=7551
 >
 > Reported by Jacob Matthews for release: 299.201-svn24aug2005
 >
 > *** Description:
 > The current-servlet-instance parameter, defined in
 > web-server/servlet-table.ss:17, probably ought to be a thread-cell
 > rather than a parameter (see section 7.4 of the mzscheme manual; I  
 > certainly
 > didn't know what they were before today). If
 > your servlet captures its own continuation using call/cc and saves
 > it in some globally-accessible place (say a global hash table)
 > and then on some later web interaction using a different servlet  
 > instance
 > pulls that continuation out of the hash table and invokes it, that
 > continuation will try to use the old, now-possibly-dead servlet  
 > instance
 > to interact rather than the servlet instance of the thread that  
 > threw to
 > the continuation.
 >
 > I know that sounds academic. See `steps to reproduce' for a  
 > concrete problem
 > that I had because current-servlet-instance is a parameter that I  
 > fixed by
 > turning it into a thread-cell. Doing this is in fact how I learned  
 > what the
 > heck thread cells are at all :) .
 >
 > Note: I'm marking this a software bug rather than a change request  
 > because
 > in the past I've seen this exact same error message in a production  
 > environment
 > that didn't use continuations at all, though in that situation I  
 > couldn't
 > make the messages appear at will (I think it had something to do  
 > with server
 > load). I'm not 100% sure they're caused by the same thing, though,  
 > so all
 > I can say for sure is that the software as it is prevents you from  
 > sharing
 > continuations among servlet instances effectively. Also, I notice  
 > that the
 > web-server code uses parameters for a lot of things, not just the
 > current-servlet-instance, but it's possible that it really means to  
 > use thread
 > cells instead in a lot of cases.
 >
 > *** How to repeat:
 > Here's a servlet that implements "resume" functionality, by which I  
 > mean it
 > allows users (identified by name) to resume old sessions.
 >
 > ;; ---
 >
 > (module resume mzscheme
 >
 >   (require (lib "servlet.ss" "web-server"))
 >   (provide interface-version timeout start)
 >
 >   (define interface-version 'v1)
 >   (define timeout 20)
 >
 >   ;; ============================================================
 >   ;; RESUMING
 >
 >   ;; *R* : string -o> continuation
 >   ;; Maps user names to the continuation representing the farthest
 >   ;; point the user has reached in this web interaction
 >   (define *R* (make-hash-table 'equal))
 >
 >   ;; send-page : response, string -> request
 >   ;; just like send/suspend except it remembers that this response
 >   ;; is the last one sent to the given user
 >   (define (send-page page user)
 >     (begin
 >       (let/cc k (hash-table-put! *R* user k))
 >       (send/suspend page)))
 >
 >   ;; resume : string -> #f
 >   ;; if the user has a current session, this function
 >   ;; does not return and instead throws to the continuation
 >   ;; representing that session. Otherwise returns false.
 >   (define (resume user)
 >     (let ((k (hash-table-get *R* user (lambda () #f))))
 >       (if k
 >           (k 'resuming)
 >           #f)))
 >
 >   ;; ============================================================
 >   ;; THE SERVLET
 >
 >   ;; This servlet just logs the user in and then presents some
 >   ;; pages in order.
 >
 >   ; start : request -> response
 >   (define (start initial-request)
 >
 >     (let ((uname (get-uname)))
 >       (resume uname)
 >       (present "page 1" uname)
 >       (present "page 2" uname)
 >       (present "page 3" uname)
 >       (finish)))
 >
 >   ;; get-uname : -> string
 >   ;; get a user name
 >   (define (get-uname)
 >     (let ((req
 >            (send/suspend
 >             (lambda (k)
 >               `(html
 >                 (body
 >                  (form ((action ,k))
 >                        (p "What's your name?")
 >                        (input ((type "text") (name "name")))
 >                        (input ((type "submit"))))))))))
 >       (extract-binding/single 'name (request-bindings req))))
 >
 >   ;; present : string, string -> void
 >   ;; present the given message to the given user, saving this
 >   ;; interaction as the most recent resume point
 >   (define (present str uname)
 >     (send-page
 >      (lambda (k)
 >        `(html
 >          (head (title "a page"))
 >          (body
 >           (form ((action ,k))
 >                 (p ,str)
 >                 (input ((type "submit")))))))
 >      uname))
 >
 >   (define (finish)
 >     (send/finish
 >      `(html
 >        (p "That's the end.")))))
 >
 > ;; ---
 >
 > I run this servlet using the web server at servlets/resume.ss. I  
 > log in as User,
 > and when it presents me with page 1, I click "Submit" to go to page  
 > two.
 > If I now immediately go back to servlets/resume.ss stripping out  
 > the k-url
 > stuff and log in again as User, I'm taken directly back to page 2.
 >
 > However, if I go to page two and then wait until the timeout passes  
 > (which
 > I verified by clicking submit and seeing the 404 page) and then go  
 > back
 > to the k-url-less servlets/resume.ss and log in as User, the  
 > servlet never
 > responds. Checking the server's output I see the message
 >
 > Servlet exception:
 > display: output port is closed
 >
 > display: output port is closed
 >
 > The offending output port turns out to be (connection-o-port conn) on
 > web-server/response.ss:131, which it's getting from the current  
 > servlet
 > instance. But since current-servlet-instance is a parameter rather  
 > than
 > a thread cell and since we're resuming from a continuation captured  
 > when
 > this parameter was set differently, we get an old, expired servlet  
 > instance
 > with closed output ports rather than the servlet instance that was  
 > created
 > for this interaction. A thread cell, which differs from a parameter on
 > precisely this point, therefore seems like it would be a better  
 > choice. And
 > sure enough, when I change current-servlet-instance to a thread- 
 > cell by
 > making the following changes:
 >
 > servlet-tables.ss
 > 17:
 > -  (define current-servlet-instance (make-parameter #f))
 > +  (define current-servlet-instance (make-thread-cell #f))
 >
 > servlet.ss
 > 31:
 > -    (let ([ctxt (servlet-instance-context (current-servlet- 
 > instance))])
 > +    (let ([ctxt (servlet-instance-context (thread-cell-ref current- 
 > servlet-instance))])
 > 37:
 > -    (clear-continuations! (current-servlet-instance))
 > +    (clear-continuations! (thread-cell-ref current-servlet-instance))
 > 44:
 > -      (let* ([inst (current-servlet-instance)]
 > +      (let* ([inst (thread-cell-ref current-servlet-instance)]
 > 57:
 > -    (clear-continuations! (current-servlet-instance))
 > +    (clear-continuations! (thread-cell-ref current-servlet-instance))
 >
 > web-server-unit.ss
 > 465:
 > -                               [current-servlet-instance inst]
 > 467:
 > +                  (thread-cell-set! current-servlet-instance inst)
 >
 > (that is, just the changes needed to change the parameter to a  
 > thread-cell)
 >
 > When I make those changes, the resume functionality now works as I'd
 > expect and allows a user to resume their session even after the  
 > original
 > servlet instance that created it is dead.
 >
 > *** Environment:
 > unix "Linux prelude.cs.uchicago.edu 2.4.27-2-k6 #1 Thu Jan 20  
 > 11:18:09 JST 2005 i686 GNU/Linux" (i386-linux) (get-display-depth)  
 > = 24
 > Docs Installed:
 > (#<path:/home/jacobm/.plt-scheme/planet/300/cache/neil/tabexpand- 
 > planet.plt/1/0/doc> #<path:/home/jacobm/.plt-scheme/planet/300/ 
 > cache/neil/webscraperhelper.plt/1/0/doc> #<path:/var/tmp/trunk/ 
 > collects/doc/insidemz> #<path:/var/tmp/trunk/collects/doc/profj- 
 > beginner> #<path:/var/tmp/trunk/collects/doc/profj-intermediate>  
 > #<path:/var/tmp/trunk/collects/doc/advanced> #<path:/var/tmp/trunk/ 
 > collects/doc/beginning> #<path:/var/tmp/trunk/collects/doc/ 
 > beginning-abbr> #<path:/var/tmp/trunk/collects/doc/drscheme>  
 > #<path:/var/tmp/trunk/collects/doc/foreign> #<path:/var/tmp/trunk/ 
 > collects/doc/swindle> #<path:/var/tmp/trunk/collects/doc/web- 
 > server> #<path:/var/tmp/trunk/collects/doc/misclib> #<path:/var/tmp/ 
 > trunk/collects/doc/intermediate> #<path:/var/tmp/trunk/collects/doc/ 
 > profj-advanced> #<path:/var/tmp/trunk/collects/doc/tex2page>  
 > #<path:/var/tmp/trunk/collects/doc/t-y-scheme> #<path:/var/tmp/ 
 > trunk/collects/doc/tools> #<path:/var/tmp/trunk/collects/doc/mzlib>  
 > #<path:/var/tmp/trunk/colle!
 >  cts/doc/mrlib> #<path:/var/tmp/trunk/collects/doc/mzscheme>  
 > #<path:/var/tmp/trunk/collects/doc/intermediate-lambda> #<path:/var/ 
 > tmp/trunk/collects/doc/teachpack> #<path:/var/tmp/trunk/collects/ 
 > doc/framework> #<path:/var/tmp/trunk/collects/doc/tour> #<path:/var/ 
 > tmp/trunk/collects/doc/srfi> #<path:/var/tmp/trunk/collects/doc/ 
 > plot> #<path:/var/tmp/trunk/collects/doc/mred> #<path:/var/tmp/ 
 > trunk/collects/doc/r5rs> #<path:/var/tmp/trunk/collects/doc/help>  
 > #<path:/var/tmp/trunk/collects/doc/mzc>)
 > Collections:
 > ((#<path:/home/jacobm/.plt-scheme/299.201/collects> "non-existent  
 > path") (#<path:/var/tmp/trunk/collects> (#<path:afm> #<path:doc>  
 > #<path:ffi> #<path:net> #<path:sgl> #<path:xml> #<path:.svn>  
 > #<path:eopl> #<path:help> #<path:honu> #<path:htdp> #<path:html>  
 > #<path:lang> #<path:make> #<path:r6rs> #<path:mred> #<path:plai>  
 > #<path:plot> #<path:srfi> #<path:ssax> #<path:framework>  
 > #<path:reduction-semantics> #<path:profjBoxes> #<path:handin- 
 > client> #<path:mzscheme> #<path:games> #<path:icons> #<path:htdch>  
 > #<path:mrlib> #<path:mzcom> #<path:mzlib> #<path:graphics>  
 > #<path:profj> #<path:setup> #<path:tests> #<path:trace>  
 > #<path:xelda> #<path:waterworld> #<path:preprocessor>  
 > #<path:sirmail> #<path:skipper> #<path:handin-server>  
 > #<path:tex2page> #<path:test-suite> #<path:texpict>  
 > #<path:profjWizard> #<path:stepper> #<path:web-server>  
 > #<path:compiler> #<path:swindle> #<path:dynext> #<path:hierlist>  
 > #<path:frtime> #<path:defaults> #<path:guibuilder> #<path:finish- 
 > install> #<path:drsche!
 >  me> #<path:syntax-color> #<path:mrflow> #<path:srpersist>  
 > #<path:mztake> #<path:slibinit> #<path:planet> #<path:mysterx>  
 > #<path:errortrace> #<path:slatex> #<path:syntax> #<path:version>  
 > #<path:algol60> #<path:honu-module> #<path:parser-tools>  
 > #<path:openssl> #<path:embedded-gui> #<path:slideshow> #<path:repos- 
 > time-stamp> #<path:info-domain> #<path:readline> #<path:launcher>  
 > #<path:string-constants> #<path:browser>)))
 > Human Language: english
 > Teachpack filenames: ()
 > Computer Language: (("Professional Languages" "(module ...)") (#6 
 > (#t write mixed-fraction-e #f #t debug) (default) #0()))
 >
 >
 
From: Jacob Matthews <jacobm@cs.uchicago.edu>
To: Jay McCarthy <jay@kenyamountain.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/7551: Web server: the current-servlet-instance parameter
 should probably be a thread-cell instead
Date: Thu, 25 Aug 2005 12:30:41 -0500

 Jay McCarthy wrote:
 
 > I will look at making this change once I understand thread cells as  
 > well.
 
 I found this instructive:
 
 (define p (make-parameter #f))
 (define t (make-thread-cell #f))
 (define k #f)
 
 (begin
   (thread
    (lambda ()
      (parameterize ((p 'thread-one))
        (thread-cell-set! t 'thread-one)
        (printf "In thread 1:\n")
        (let/cc my-k (set! k my-k))
        (printf "param: ~a, tc: ~a\n" (p) (thread-cell-ref t)))))
  
   (sleep 1) ;; really there should be some semaphores or something here, 
 but this'll do
  
   (thread
    (lambda ()
      (parameterize ((p 'thread-two))
        (thread-cell-set! t 'thread-two)
        (printf "In thread 2, throwing to a continuation created by 
 thread 1:\n")
        (k 'dontcare))))
 
   (void) ;; just here to suppress printing the return value in the 
 DrScheme repl
   )
 
 This prints out:
 
 In thread 1:
 param: thread-one, tc: thread-one
 In thread 2, throwing to a continuation created by thread 1:
 param: thread-one, tc: thread-two
 
 In other words, when you throw to a continuation, the parameter shifts 
 back to the value it had when the continuation was captured, but the 
 thread-cell's value stays as it is. I believe this to be the only 
 essential difference between parameters and thread cells. (Though like I 
 said, I just found out about them at all a few hours ago, so I could 
 well be mistaken.)
 
 > However, your task can also be accomplished by...
 > [snip]
 >     (define (send-page page user)
 >         (send/suspend
 >             (lambda (k-url)
 >                 (hash-table-put! *R* user k-url)
 >                 (page k-url))))
 > [snip]
 >     ; returns a URL to redirect to, or false
 >     (define (resume user)
 >         (hash-table-get *R* user (lambda () #f)))
 >
 >     ; use:
 >     (let ([resume-url (resume user)])
 >         (if resume-url
 >             (redirect-to resume-url)
 >             (default)))
 >
 > This strategy will ensure that continuations are correctly deleting  
 > by send/finish and instance timeouts. And the user will end up at  
 > their last session.
 
 Actually I considered this strategy before I went the fancier way -- 
 believe me, hash tables full of first-class continuation objects 
 floating around inside a continuation-based web server is nobody's idea 
 of a first-draft solution :). There are a couple problems with the 
 redirecting approach:
 
 1. The urls will expire with the servlet instance, which I don't want. 
 I'd like these continuations to hang around indefinitely while allowing 
 the servlet instance to die a natural death; in other words, I want to 
 make a single distinguished resumption point that has a different 
 lifespan than the ones generated automatically by the web server do.
 
 2. Redirecting to a particular URL doesn't really work so well anyway, 
 because every k-url is creating a context that expects some particular 
 bindings. If the system might also just redirect to any k-url without 
 supplying any bindings, at the very least every send/suspend site has to 
 be able to deal with getting one of these binding-less responses, which 
 is nasty. In essence, the issue is that the continuation captured by the 
 k-url is "gather up some bindings and continue", while for resume to 
 work properly you need it to start one step back: "send out the page, 
 gather up some bindings and continue".
 
 -jacob

State changed from "open" to "closed" by jay at Thu, 25 Aug 2005 13:53:00 -0400
Reason>>> Fixed in svn.

