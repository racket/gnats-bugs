From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Feb 18 02:49:31 2009
Received: from mail-gx0-f224.google.com (mail-gx0-f224.google.com [209.85.217.224])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n1I7nLrV010591
	for <bugs@bugs.plt-scheme.org>; Wed, 18 Feb 2009 02:49:21 -0500
Message-Id: <200902180749.n1I7nI1T010585@champlain.ccs.neu.edu>
Date: Wed, 18 Feb 2009 02:49:18 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: Problems with `make-prolog' (xml)

>Number:         10081
>Category:       web-server
>Synopsis:       Problems with `make-prolog' (xml)
>Class:          sw-bug
>Responsible:    jay
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Feb 18 02:52:01 -0500 2009
>Last-Modified:  Thu Feb 19 13:20:01 -0500 2009
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.4
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 100674672

Collections:
(("/home/eli/.plt-scheme/4.1.4/collects" "CSU660" "info-domain") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "2htdp" "trace" "mrlib" "algol60" "browser" "profj" "framework" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "htdp" "lang" "rnrs" "setup" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
The documentation for `make-prolog' is messed up.  It shows
a third field, but the text below says that the actual
content of the field is taken from the arguments that follow
the first two.

In addition, making the obvious mistake and passing `null' for
the field leads to an obscure error about applying `void'.
It looks like this error comes from `display-outside-misc' in
"xml/private/writer.ss" where the result of a `cond' is
applied -- but if the `x' is not a `comment?' or a `pi?', the
cond evaluates to void, which is then applied (instead of
raising an error, or checking the arguments for
`make-prolog').
>How-To-Repeat:
(define bare-xml
  (make-document
   (make-prolog null #f null)
   (xexpr->xml '(xml ()))
   null))
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by jay at Thu, 19 Feb 2009 13:13:34 -0500
Reason>>> Fixed in SVN. I have no idea why 'make-prolog' is like this, but it is. I've 
added examples to the documentation to clarify. Soon I will put unit contracts 
on everything in the xml collection so that the error you point out will be 
caught earlier. Essentially you can think of make-prolog as being defined:

(define (ext:make-prolog misc dtd . misc2)
 (make-prolog misc dtd misc2))
(provide
 (rename-out [ext:make-prolog make-prolog]))

From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Cc: jay@plt-scheme.org, ptg@plt-scheme.org, sk@plt-scheme.org,
        matthias@plt-scheme.org
Subject: Re: [plt-bug] web-server/10081 Problems with `make-prolog' (xml)
Date: Thu, 19 Feb 2009 13:18:14 -0500

 On Feb 19, jay@plt-scheme.org wrote:
 > 
 > State changed from "open" to "closed" by jay at Thu, 19 Feb 2009 13:13:34 -0500
 > Reason>>> Fixed in SVN. I have no idea why 'make-prolog' is like
 > this, but it is. I've added examples to the documentation to
 > clarify. Soon I will put unit contracts on everything in the xml
 > collection so that the error you point out will be caught
 > earlier. Essentially you can think of make-prolog as being defined:
 
 Yeah, that was clear to me, just a bad combination of an explanation
 that was different than usual, and not checking properly the error
 that resulted.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
