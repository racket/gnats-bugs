From krentel@cs.rice.edu  Mon May 19 13:30:44 1997
Received: from new-world.cs.rice.edu (new-world.cs.rice.edu [128.42.6.103]) by cs.rice.edu (8.8.5/8.7.1) with ESMTP id NAA07329 for <plt-gnats@cs.rice.edu>; Mon, 19 May 1997 13:30:44 -0500 (CDT)
Message-Id: <199705191830.NAA02038@new-world.cs.rice.edu>
Date: Mon, 19 May 1997 13:30:43 -0500 (CDT)
From: "Mark W. Krentel" <krentel@cs.rice.edu>
Reply-To: krentel@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: language levels
X-Send-Pr-Version: 3.101

>Number:         105
>Category:       mcmicmac
>Synopsis:       language levels
>Class:          sw-bug
>Responsible:    shriram
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon May 19 14:35:02 -0400 1997
>Last-Modified:  Wed Apr 28 11:02:13 -0400 2004
>Originator:     Mark W. Krentel
>Organization:
titan
>Submitter-Id:   unknown
>Release:        unknown
>Environment:
	
Freebsd, nw, various language levels.

>Description:
	
Here's the report on language levels.  I know I've reported some of
these before.  My apologies that I don't remember the answers.

Most of these are "Check Syntax doesn't highlight these correctly,"
rather than "the vocabulary is wrong".  And for many of these, the 
true bug is that the docs (The Matrix) don't reflect reality.

1. At QR4, (cond (#f 2)) is an error.  Actually, unmatched-cond/case
is a separately configurable option, and the blanket QR4 sets it
to keep the error.  This is inconsistent with the docs.

2. letcc is not known (at Adv, QR4), only let/cc exists.
Have we done away with letcc?  (I prefer let/cc anyway).

3. define-schema is not highlighted.

4. define-struct is highlighted by Check Syntax as bound var instead 
of syntax (at Inter, Adv, QR4).

5. delay is not highlighted (at Inter +).

6. named let is not highlighted (at Adv +).

7. At Beginner and Intermediate levels, 

  (let* ((x 3) (y x)) y)

fails to highlight the second y.  This is highlighted correctly
as bound var at Adv & QR4.

8. At Intermediate, "do" is not known.
I remember "do" being bumped up to Advanced, but we need to update
the matrix.

9. ` , ,@ are allowed at all levels.

10. There are stray Check-Syntax lines running from "foo" in the 
below expressions to the top-left corner of the window.

  (define-schema foo ...)
  (let foo () 4)

Click Check-Syntax and move the cursor over "foo".

11. We need to add "local" to the Matrix.


>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Shriram Krishnamurthi <shriram@cs.rice.edu>
To: krentel@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: all/105: language levels
Date: Mon, 19 May 1997 13:45:09 -0500 (CDT)

 > 2. letcc is not known (at Adv, QR4), only let/cc exists.
 > Have we done away with letcc?  (I prefer let/cc anyway).
 
 "letcc" is actually perhaps a more accurate name than "let/cc", but
 anyway, letcc, letec and catch are gone.  (They went from M3 the same
 time as they did from MzScheme.)
 
 > 3. define-schema is not highlighted.
 > 
 > 5. delay is not highlighted (at Inter +).
 > 
 > 6. named let is not highlighted (at Adv +).
 
 These are all the same problem (to me).  I'll see if I can fix them
 quickly for this release.
 
 > 9. ` , ,@ are allowed at all levels.
 
 Why is this a problem?
 
 'shriram

From: "Mark W. Krentel" <krentel>
To: shriram@cs.rice.edu
Cc: plt-gnats
Subject: Re:  all/105: language levels
Date: Mon, 19 May 1997 13:48:19 -0500 (CDT)

 > > 9. ` , ,@ are allowed at all levels.
 > Why is this a problem?
 
 The Matrix says Adv, QR4 only.  So, I guess it's just a 
 documentation bug then.  --Mark

Responsible-Changed-From-To: krentel->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Sat May 24 14:30:14 1997
Responsible-Changed-Why:

Responsible-Changed-From-To: robby->shriram
Responsible-Changed-By: robby
Responsible-Changed-When: Sat May 24 14:48:37 1997
Responsible-Changed-Why:

> 4. define-struct is highlighted by Check Syntax as bound var instead 
> of syntax (at Inter, Adv, QR4).

this is because the `a' and `b' of (define-struct a (b)) are zodiac
symbols, and the current algortihm just does symbols as bound vars.

> 7. At Beginner and Intermediate levels, 
> 
>   (let* ((x 3) (y x)) y)
> 
> fails to highlight the second y.  This is highlighted correctly
> as bound var at Adv & QR4.

In fact this expression comes out wrong at beginner:

(let* ([x 1]) x)

I'm not sure how to run ~shriram/Z/go at beginner to see what's happening
here... Is that possible to do?

> 10. There are stray Check-Syntax lines running from "foo" in the 
> below expressions to the top-left corner of the window.
> 
>   (define-schema foo ...)
>   (let foo () 4)
> 
> Click Check-Syntax and move the cursor over "foo".

(define-schema x 1)

comes out with that `x' as a source generated bound varref, which seems
wrong.


From: Shriram Krishnamurthi <shriram@cs.rice.edu>
To: plt-gnats@cs.rice.edu
Cc:  Subject: mcmicmac/105
Date: Thu, 29 May 1997 14:23:33 -0500 (CDT)

 I have modified the expansion of define-schema to stop producing the
 bogus binding.  (It really was binding; the macro was a bit too clever
 for its own good.)
 
 'shriram

Responsible-Changed-From-To: shriram->robby
Responsible-Changed-By: shriram
Responsible-Changed-When: Thu May 29 14:56:21 1997
Responsible-Changed-Why:
I don't believe any of the remaining errors are mine.  Please change
it back to me if you believe otherwise.  I've sent a note to plt-gnats
giving the output for sub-problem 7.  Could you take a look at that?


From: Shriram Krishnamurthi <shriram@cs.rice.edu>
To: plt-gnats@cs.rice.edu
Cc:  Subject: mcmicmac/105
Date: Thu, 29 May 1997 14:55:50 -0500 (CDT)

 I investigated sub-problem 7 further.  I generated the output of M3 at
 its lowest and highest language levels ('core and 'advanced).  The
 ouptut was identical modulo alpha renaming.  Here's the textual diff:
 
 1c1
 < ; Beginner
 ---
 > ; Advanced
 25c25
 <       g1247:x
 ---
 >       g1299:x
 61c61
 <         g1248:y
 ---
 >         g1300:y
 70c70
 <        g1247:x
 ---
 >        g1299:x
 78c78
 <          g1247:x
 ---
 >          g1299:x
 95c95
 <       g1248:y
 ---
 >       g1300:y
 103c103
 <         g1248:y
 ---
 >         g1300:y
 
 Hence, I don't understand why one is colored properly and the other is
 not.  I've included the actual output from the lowest level.  (I have
 looked through this, and couldn't find anything askance.)  Can you
 look it over and see if you can find the problem?  The exact input was
 
  (let ((x 3) (y x)) y)
 
 ; Beginner
 
 #(struct:let-values-form
   #(struct:origin
     macro
     #(struct:symbol
       #(struct:origin source source)
       #(struct:location 1 2 1 nofile)
       #(struct:location 1 5 4 nofile)
       let*
       let*
       ()))
   #(struct:location 1 1 0 nofile)
   #(struct:location 1 22 21 nofile)
   #(struct:secure-box
     #(#(struct:uninitialized-back)
       #(struct:uninitialized-back)))
   ((#(struct:lexical-binding
       #(struct:origin source source)
       #(struct:location 1 9 8 nofile)
       #(struct:location 1 9 8 nofile)
       #(struct:secure-box
         #(#(struct:uninitialized-back)
           #(struct:uninitialized-back)))
       g1247:x
       x)))
   (#(struct:quote-form
      #(struct:origin source source)
      #(struct:location 1 11 10 nofile)
      #(struct:location 1 11 10 nofile)
      #(struct:secure-box
        #(#(struct:uninitialized-back)
          #(struct:uninitialized-back)))
      #(struct:number
        #(struct:origin source source)
        #(struct:location 1 11 10 nofile)
        #(struct:location 1 11 10 nofile)
        3)))
   #(struct:let-values-form
     #(struct:origin
       macro
       #(struct:symbol
         #(struct:origin non-source never-mind)
         #(struct:location 1 1 0 nofile)
         #(struct:location 1 22 21 nofile)
         let*
         let*
         (1)))
     #(struct:location 1 1 0 nofile)
     #(struct:location 1 22 21 nofile)
     #(struct:secure-box
       #(#(struct:uninitialized-back)
         #(struct:uninitialized-back)))
     ((#(struct:lexical-binding
         #(struct:origin source source)
         #(struct:location 1 15 14 nofile)
         #(struct:location 1 15 14 nofile)
         #(struct:secure-box
           #(#(struct:uninitialized-back)
             #(struct:uninitialized-back)))
         g1248:y
         y)))
     (#(struct:lexical-varref
        #(struct:origin source source)
        #(struct:location 1 17 16 nofile)
        #(struct:location 1 17 16 nofile)
        #(struct:secure-box
          #(#(struct:uninitialized-back)
            #(struct:uninitialized-back)))
        g1247:x
        #(struct:lexical-binding
          #(struct:origin source source)
          #(struct:location 1 9 8 nofile)
          #(struct:location 1 9 8 nofile)
          #(struct:secure-box
            #(#(struct:uninitialized-back)
              #(struct:uninitialized-back)))
          g1247:x
          x)))
     #(struct:lexical-varref
       #(struct:origin
         macro
         #(struct:symbol
           #(struct:origin non-source never-mind)
           #(struct:location 1 1 0 nofile)
           #(struct:location 1 22 21 nofile)
           let*
           let*
           (3)))
       #(struct:location 1 21 20 nofile)
       #(struct:location 1 21 20 nofile)
       #(struct:secure-box
         #(#(struct:uninitialized-back)
           #(struct:uninitialized-back)))
       g1248:y
       #(struct:lexical-binding
         #(struct:origin source source)
         #(struct:location 1 15 14 nofile)
         #(struct:location 1 15 14 nofile)
         #(struct:secure-box
           #(#(struct:uninitialized-back)
             #(struct:uninitialized-back)))
         g1248:y
         y))))

From: Robert Bruce Findler <robby@cs.rice.edu>
To: shriram@cs.rice.edu, plt-gnats@cs.rice.edu
Cc:  Subject: Re: mcmicmac/105: language levels
Date: Thu, 29 May 1997 15:10:26 -0500 (CDT)

 Shriram Krishnamurthi writes:
 > Your input was (let* ((x 1)) x).
 > 
 > #(struct:let-values-form
 >   #(struct:origin
 >     macro
 >     #(struct:symbol
 >       #(struct:origin source source)
 >       #(struct:location 1 2 1 nofile)
 >       #(struct:location 1 5 4 nofile)
 >       let*
 >       let*
 >       ()))
 >   #(struct:location 1 1 0 nofile)
 >   #(struct:location 1 16 15 nofile)
 >   #(struct:secure-box
 >     #(#(struct:uninitialized-back)
 >       #(struct:uninitialized-back)))
 >   ((#(struct:lexical-binding
 >       #(struct:origin source source)
 >       #(struct:location 1 9 8 nofile)
 >       #(struct:location 1 9 8 nofile)
 >       #(struct:secure-box
 >         #(#(struct:uninitialized-back)
 >           #(struct:uninitialized-back)))
 >       g1247:x
 >       x)))
 >   (#(struct:quote-form
 >      #(struct:origin source source)
 >      #(struct:location 1 11 10 nofile)
 >      #(struct:location 1 11 10 nofile)
 >      #(struct:secure-box
 >        #(#(struct:uninitialized-back)
 >          #(struct:uninitialized-back)))
 >      #(struct:number
 >        #(struct:origin source source)
 >        #(struct:location 1 11 10 nofile)
 >        #(struct:location 1 11 10 nofile)
 >        1)))
 >   #(struct:lexical-varref
 >     #(struct:origin
 >       macro
 >       #(struct:symbol
 >         #(struct:origin non-source never-mind)
 >         #(struct:location 1 1 0 nofile)
 >         #(struct:location 1 16 15 nofile)
 >         let*
 >         let*
 >         (1)))
 >     #(struct:location 1 15 14 nofile)
 >     #(struct:location 1 15 14 nofile)
 >     #(struct:secure-box
 >       #(#(struct:uninitialized-back)
 >         #(struct:uninitialized-back)))
 >     g1247:x
 >     #(struct:lexical-binding
 >       #(struct:origin source source)
 >       #(struct:location 1 9 8 nofile)
 >       #(struct:location 1 9 8 nofile)
 >       #(struct:secure-box
 >         #(#(struct:uninitialized-back)
 >           #(struct:uninitialized-back)))
 >       g1247:x
 >       x)))

Responsible-Changed-From-To: robby->krentel
Responsible-Changed-By: robby
Responsible-Changed-When: Thu May 29 15:19:16 1997
Responsible-Changed-Why:

not mine!

Responsible-Changed-From-To: krentel->shriram
Responsible-Changed-By: shriram
Responsible-Changed-When: Sat Aug 23 16:28:40 1997
Responsible-Changed-Why:
I guess this is supposed to be mine, though I don't know why.

State-Changed-From-To: open-suspended
State-Changed-By: shriram
State-Changed-When: Tue Mar 10 10:56:03 1998
State-Changed-Why:
Getting it out of active queue.

State changed from "suspended" to "closed" by eli at Wed, 28 Apr 2004 11:02:13 -0400
Reason>>> mcmicmac is dead

>Unformatted:
