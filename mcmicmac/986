From nobody@cs.rice.edu  Wed Apr 28 17:55:51 1999
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id RAA29085
	for <plt-gnats@cs.rice.edu>; Wed, 28 Apr 1999 17:55:50 -0500 (CDT)
Message-Id: <199904282255.RAA01031@web.cs.rice.edu>
Date: Wed, 28 Apr 1999 17:55:49 -0500 (CDT)
From: robby@cs.rice.edu
Reply-To: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: define-values syntax checks 

>Number:         986
>Category:       mcmicmac
>Synopsis:       define-values syntax checks
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Wed Apr 28 23:00:17 GMT 1999
>Closed-Date:    Thu Jan 15 17:11:14 EST 2004
>Last-Modified:  Thu Jan 15 17:11:14 EST 2004
>Originator:     Robert Bruce Findler
>Release:        100alpha2p1
>Organization:
titan
>Environment:
Mac PowerPC
>Description:
In all language levels, these expressions are not errors:

(define-values (x x) (values 1 2))
(define-struct make (make))

But, in all langauge levels, these expressions _are_ errors (although the beginner error is not very important):

(local [(define-struct make (make))] (make-make 'make))

In MzScheme and MrEd, you need (require-library "macro.ss") to preceed that expression. Also in Mz and Mr, the error message is puzzling -- it refers to let, instead of letrec-values.

In fact the expansion for local in MzScheme is puzzling. It appears to have an extra let wrapped around the letrec values.
>How-To-Repeat:

>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.rice.edu>
To: robby@cs.rice.edu, clements@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/986: define-values syntax checks 
Date: Thu, 13 May 1999 07:46:11 -0700 (PDT)

 Quoting robby@cs.rice.edu:
 > In fact the expansion for local in MzScheme is puzzling. It appears
 > to have an extra let wrapped around the letrec values.
 
 Now I remember what it was for.
 
 Compare
 
  (local ((define lambda 10)) lambda)
 
 to
 
  (let ()
    (define lambda 10)
    lambda)
 
 and
 
  (let ([lambda void])
    (define lambda 10)
    lambda)
 
 in DrScheme's Advanced language.
 
 There was actually a bug in MzLib's `local', as demonstrated by
  (local ((define define 10)) define)
 but I've fixed that by inserting #% forms into the expansion. I also
 put a comment in the source explaining the unusual expansion.
 
 Matthew

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Wed May 19 20:02:12 1999
Responsible-Changed-Why:

Responsible-Changed-From-To: mflatt->shriram
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Jul 25 10:23:18 2000
Responsible-Changed-Why:

Zodiac needs to be updated to check for duplicate variable names.

 
Responsible-Changed-From-To: shriram->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Thu Jan 15 17:11:14 2004
Responsible-Changed-Why:
    obs
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Thu Jan 15 17:11:14 2004
State-Changed-Why:
    Obsolet bug report
>Unformatted:

