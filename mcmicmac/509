From robby@cs.rice.edu  Sun Mar 15 16:55:32 1998
Received: from australia.cs.rice.edu (australia.cs.rice.edu [128.42.1.176])
          by cs.rice.edu (8.8.5/8.8.4) with ESMTP
	  id QAA14399 for <plt-gnats@cs.rice.edu>; Sun, 15 Mar 1998 16:55:32 -0600 (CST)
Message-Id: <199803152255.QAA10673@australia.cs.rice.edu>
Date: Sun, 15 Mar 1998 16:55:31 -0600 (CST)
From: Robert Bruce Findler <robby@cs.rice.edu>
Reply-To: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: zodiac does exponential expansions
X-Send-Pr-Version: 3.101

>Number:         509
>Category:       mcmicmac
>Synopsis:       zodiac's running time is exponential in input size
>Confidential:   no
>Severity:       serious
>Priority:       high
>Responsible:    shriram
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sun Mar 15 23:00:02 GMT 1998
>Last-Modified:  Sun May 10 13:08:49 CDT 1998
>Originator:     Robert Bruce Findler
>Organization:
titan
>Release:        unknown
>Environment:
	
>Description:

Zodiac expands some expressions more than once. In fact, it is possible to
get an exponential growth in the number of expansions as the program grows
linearly.

This may explain some sluggishness in zodiac.

>How-To-Repeat:

(define-macro show-me-macro (lambda () (display "hi!") 2))

;; two times
(begin0 (begin (show-me-macro)))
(newline)

;; four times
(begin0 1 (begin (show-me-macro)))
(newline)

;; let's compute exponentials!
(define answer 0)
(define-macro counter (lambda () (set! answer (+ answer 1)) 8))
(define (4^ n)
  (set! answer 0)
  (eval 
   (let loop ([i n])
     (cond
       [(zero? i) `(counter)]
       [else `(begin0 1 (begin ,(loop (sub1 i))))])))
  answer)

;; test it out!
(define input (list 0 1 2 3 4))
(define nums (map 4^ input))
nums

;; just to be sure.....
(map (lambda (x) (/ (log x) (log 4))) nums)

>Fix:
	
>Audit-Trail:

Responsible-Changed-From-To: steck->shriram
Responsible-Changed-By: shriram
Responsible-Changed-When: Mon Mar 16 11:03:06 1998
Responsible-Changed-Why:

State-Changed-From-To: open-feedback
State-Changed-By: shriram
State-Changed-When: Wed Mar 18 16:07:18 1998
State-Changed-Why:
Problem was caused because begin and begin0 were expanding as macros
into letrec*-values.  The first non-definition expression was expanded 
(to determine that it wasn't a definition), then had to be injected
into the first position of the body of the letrec*-values.  Since we
cannot inject parsed objects into sexp positions, that expression was
being expanded twice.  In the case of begin0, there was additional
duplication since begin0 expanded back into begin0 with the
definitions replaced with a letrec*-values.

State-Changed-From-To: feedback-closed
State-Changed-By: shriram
State-Changed-When: Sun May 10 13:08:46 1998
State-Changed-Why:


>Unformatted:
