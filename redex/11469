From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Nov 27 20:14:15 2010
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id oAS1DZ9X000446
	for <bugs@bugs.plt-scheme.org>; Sat, 27 Nov 2010 20:13:35 -0500
Message-Id: <201011280113.oAS1DWbX000437@champlain.ccs.neu.edu>
Date: Sat, 27 Nov 2010 20:13:32 -0500
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: rename for metafunctions doesn't work properly in Redex

>Number:         11469
>Category:       redex
>Synopsis:       rename for metafunctions doesn't work properly in Redex
>Class:          sw-bug
>Responsible:    clklein
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Nov 27 20:16:02 -0500 2010
>Closed-Date:    Tue Aug 16 15:54:54 -0400 2011
>Last-Modified:  Tue Aug 16 15:54:54 -0400 2011
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.99.3--2010-11-26(1d154e4/g)
>Environment:
macosx "Darwin africa.local 10.5.0 Darwin Kernel Version 10.5.0: Fri Nov  5 23:20:39 PDT 2010; root:xnu-1504.9.17~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 234297228

Collections:
(("/Users/matthias/0Unison/collects/" "._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web") ("/Users/matthias/Library/Racket/5.0.99.3/collects" non-existent-path) ("/Users/matthias/plt/collects" ".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp" "repos-time-sta!
 mp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
Say you wish to rename the function below from alloc to newloc

(define-metafunction Iswim 
  alloc : ((l any) ...) -> l
  [(alloc ((l_1 any_*) ...)) 
   ,(let ([dom (term (l_1 ...))])
      (if (empty? dom) 0 (+ (apply max dom) 1)))])

DrRacket works fine for all occurrence of 'alloc' outside of the definition but
the one in the pattern doesn't get changed. 
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Casey Klein <clklein@eecs.northwestern.edu>
To: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Sun, 28 Nov 2010 05:50:54 -0600

 On Sat, Nov 27, 2010 at 7:16 PM,  <matthias@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11469
 >
 > Reported by matthias for release: 5.0.99.3--2010-11-26(1d154e4/g)
 >
 > *** Description:
 > Say you wish to rename the function below from alloc to newloc
 >
 > (define-metafunction Iswim
 > =A0alloc : ((l any) ...) -> l
 > =A0[(alloc ((l_1 any_*) ...))
 > =A0 ,(let ([dom (term (l_1 ...))])
 > =A0 =A0 =A0(if (empty? dom) 0 (+ (apply max dom) 1)))])
 >
 > DrRacket works fine for all occurrence of 'alloc' outside of the definiti=
 on but
 > the one in the pattern doesn't get changed.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > macosx "Darwin africa.local 10.5.0 Darwin Kernel Version 10.5.0: Fri Nov =
 =A05 23:20:39 PDT 2010; root:xnu-1504.9.17~1/RELEASE_I386 i386" (i386-macos=
 x/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 234297228
 >
 > Collections:
 > (("/Users/matthias/0Unison/collects/" "._.DS_Store" ".DS_Store" "compiled=
 " "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "tes=
 ting" "tll-collects" "utils" "web") ("/Users/matthias/Library/Racket/5.0.99=
 .3/collects" non-existent-path) ("/Users/matthias/plt/collects" ".gitignore=
 " "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler"=
  "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" =
 "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtim=
 e" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-s=
 erver" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" =
 "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "=
 mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "plane=
 t" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackun=
 it" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp"=
  "repos-time-sta!
 > =A0mp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribbl=
 ings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srper=
 sist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teach=
 pack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "tool"=
  "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-serv=
 er" "wxme" "xml"))
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Begin=
 ning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >
 >
 
 Part of the problem is that we're stripping the 'disappeared-use
 property that records these occurrences:
 
 http://git.racket-lang.org/plt/blob/HEAD:/collects/redex/private/reduction-=
 semantics.rkt#l1178
 
 If we preserve this property, the Check Syntax arrows do something
 reasonable. For this definition
 
 (define-metafunction L
   f : -> ()
   [(f) (f)]
   [(f) (f)])
 
 the arrows map the contract occurrence of f to each subsequent
 occurrence. For this one
 
 (define-metafunction L
   [(f) (f)]
   [(f) (f)])
 
 the arrows map the pattern occurrence in the first clause to each
 subsequent occurrence.
 
 But renaming doesn't work right for either definition. If you rename
 by right-clicking any bound occurrence, then only that occurrence and
 the binding occurrence change. If you rename by right-clicking the
 binding occurrence, all occurrences change (as expected). Could this
 be a Check Syntax bug?
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Sun, 28 Nov 2010 07:19:31 -0600

 On Sun, Nov 28, 2010 at 5:50 AM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > On Sat, Nov 27, 2010 at 7:16 PM, =C2=A0<matthias@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >> =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11469
 >>
 >> Reported by matthias for release: 5.0.99.3--2010-11-26(1d154e4/g)
 >>
 >> *** Description:
 >> Say you wish to rename the function below from alloc to newloc
 >>
 >> (define-metafunction Iswim
 >> =C2=A0alloc : ((l any) ...) -> l
 >> =C2=A0[(alloc ((l_1 any_*) ...))
 >> =C2=A0 ,(let ([dom (term (l_1 ...))])
 >> =C2=A0 =C2=A0 =C2=A0(if (empty? dom) 0 (+ (apply max dom) 1)))])
 >>
 >> DrRacket works fine for all occurrence of 'alloc' outside of the definit=
 ion but
 >> the one in the pattern doesn't get changed.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> macosx "Darwin africa.local 10.5.0 Darwin Kernel Version 10.5.0: Fri Nov=
  =C2=A05 23:20:39 PDT 2010; root:xnu-1504.9.17~1/RELEASE_I386 i386" (i386-m=
 acosx/3m) (get-display-depth) =3D 32
 >> Human Language: english
 >> (current-memory-use) 234297228
 >>
 >> Collections:
 >> (("/Users/matthias/0Unison/collects/" "._.DS_Store" ".DS_Store" "compile=
 d" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "te=
 sting" "tll-collects" "utils" "web") ("/Users/matthias/Library/Racket/5.0.9=
 9.3/collects" non-existent-path) ("/Users/matthias/plt/collects" ".gitignor=
 e" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler=
 " "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme"=
  "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frti=
 me" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-=
 server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang"=
  "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" =
 "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "plan=
 et" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "racku=
 nit" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp=
 " "repos-time-sta!
 >> =C2=A0mp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scr=
 ibblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "s=
 rpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "t=
 eachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "t=
 ool" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-=
 server" "wxme" "xml"))
 >> Computer Language: (("Teaching Languages" "How to Design Programs" "Begi=
 nning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
 >>
 >>
 >
 > Part of the problem is that we're stripping the 'disappeared-use
 > property that records these occurrences:
 >
 > http://git.racket-lang.org/plt/blob/HEAD:/collects/redex/private/reductio=
 n-semantics.rkt#l1178
 >
 > If we preserve this property, the Check Syntax arrows do something
 > reasonable. For this definition
 >
 > (define-metafunction L
 > =C2=A0f : -> ()
 > =C2=A0[(f) (f)]
 > =C2=A0[(f) (f)])
 >
 > the arrows map the contract occurrence of f to each subsequent
 > occurrence. For this one
 >
 > (define-metafunction L
 > =C2=A0[(f) (f)]
 > =C2=A0[(f) (f)])
 >
 > the arrows map the pattern occurrence in the first clause to each
 > subsequent occurrence.
 >
 > But renaming doesn't work right for either definition. If you rename
 > by right-clicking any bound occurrence, then only that occurrence and
 > the binding occurrence change. If you rename by right-clicking the
 > binding occurrence, all occurrences change (as expected). Could this
 > be a Check Syntax bug?
 >
 
 It is possible -- can you supply a redex-less test case (ie a macro
 that sets up the properties the same way that Redex does for this
 example where you'd expect the renaming to be different than what CS
 does)?
 
 Robby
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 13:59:48 -0600

 On Sun, Nov 28, 2010 at 7:19 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 >
 > It is possible -- can you supply a redex-less test case (ie a macro
 > that sets up the properties the same way that Redex does for this
 > example where you'd expect the renaming to be different than what CS
 > does)?
 >
 
 (define-syntax (m stx)
   (syntax-case stx ()
     [(_ y)
      (syntax-property #'0 'disappeared-use (list #'y))]))
 
 (define-syntax (n stx)
   (syntax-case stx ()
     [(_ x1 x2 x3 x4)
      (syntax-property
       #`(begin
           (=EB (x1) (m x4))
           (define-syntax x1 #'3))
       'disappeared-use
       (list #'x2 #'x3))]))
 
 (n x  ; Line 1
    x  ; Line 2
    x  ; Line 3
    x) ; Line 4
 
 Here are the lines that change when you rename by right-clicking the x
 on each line.
 
 Line 1: 1, 2, 3, 4
 Line 2: 1, 2, 3
 Line 3: 1, 2, 3
 Line 4: 1, 4
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:07:52 -0600

 Of course.
 
 On Mon, Nov 29, 2010 at 2:07 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > I don't know about the example below but I do know that define-metafuncti=
 on renaming should work like define regular function renaming. No?
 >
 >
 >
 > On Nov 29, 2010, at 3:05 PM, Robby Findler wrote:
 >
 >> Oh... this is strange. I'm not really sure what the right answer is
 >> supposed to be here. Any takers?
 >>
 >> Robby
 >>
 >> 2010/11/29 Casey Klein <clklein@eecs.northwestern.edu>:
 >>> On Sun, Nov 28, 2010 at 7:19 AM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>>
 >>>> It is possible -- can you supply a redex-less test case (ie a macro
 >>>> that sets up the properties the same way that Redex does for this
 >>>> example where you'd expect the renaming to be different than what CS
 >>>> does)?
 >>>>
 >>>
 >>> (define-syntax (m stx)
 >>> =C2=A0(syntax-case stx ()
 >>> =C2=A0 =C2=A0[(_ y)
 >>> =C2=A0 =C2=A0 (syntax-property #'0 'disappeared-use (list #'y))]))
 >>>
 >>> (define-syntax (n stx)
 >>> =C2=A0(syntax-case stx ()
 >>> =C2=A0 =C2=A0[(_ x1 x2 x3 x4)
 >>> =C2=A0 =C2=A0 (syntax-property
 >>> =C2=A0 =C2=A0 =C2=A0#`(begin
 >>> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=CE=BB (x1) (m x4))
 >>> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(define-syntax x1 #'3))
 >>> =C2=A0 =C2=A0 =C2=A0'disappeared-use
 >>> =C2=A0 =C2=A0 =C2=A0(list #'x2 #'x3))]))
 >>>
 >>> (n x =C2=A0; Line 1
 >>> =C2=A0 x =C2=A0; Line 2
 >>> =C2=A0 x =C2=A0; Line 3
 >>> =C2=A0 x) ; Line 4
 >>>
 >>> Here are the lines that change when you rename by right-clicking the x
 >>> on each line.
 >>>
 >>> Line 1: 1, 2, 3, 4
 >>> Line 2: 1, 2, 3
 >>> Line 3: 1, 2, 3
 >>> Line 4: 1, 4
 >>>
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work properly in Redex
Date: Mon, 29 Nov 2010 15:07:23 -0500

 I don't know about the example below but I do know that =
 define-metafunction renaming should work like define regular function =
 renaming. No?=20
 
 
 
 On Nov 29, 2010, at 3:05 PM, Robby Findler wrote:
 
 > Oh... this is strange. I'm not really sure what the right answer is
 > supposed to be here. Any takers?
 >=20
 > Robby
 >=20
 > 2010/11/29 Casey Klein <clklein@eecs.northwestern.edu>:
 >> On Sun, Nov 28, 2010 at 7:19 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>>=20
 >>> It is possible -- can you supply a redex-less test case (ie a macro
 >>> that sets up the properties the same way that Redex does for this
 >>> example where you'd expect the renaming to be different than what CS
 >>> does)?
 >>>=20
 >>=20
 >> (define-syntax (m stx)
 >>  (syntax-case stx ()
 >>    [(_ y)
 >>     (syntax-property #'0 'disappeared-use (list #'y))]))
 >>=20
 >> (define-syntax (n stx)
 >>  (syntax-case stx ()
 >>    [(_ x1 x2 x3 x4)
 >>     (syntax-property
 >>      #`(begin
 >>          (=CE=BB (x1) (m x4))
 >>          (define-syntax x1 #'3))
 >>      'disappeared-use
 >>      (list #'x2 #'x3))]))
 >>=20
 >> (n x  ; Line 1
 >>   x  ; Line 2
 >>   x  ; Line 3
 >>   x) ; Line 4
 >>=20
 >> Here are the lines that change when you rename by right-clicking the =
 x
 >> on each line.
 >>=20
 >> Line 1: 1, 2, 3, 4
 >> Line 2: 1, 2, 3
 >> Line 3: 1, 2, 3
 >> Line 4: 1, 4
 >>=20
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:05:12 -0600

 Oh... this is strange. I'm not really sure what the right answer is
 supposed to be here. Any takers?
 
 Robby
 
 2010/11/29 Casey Klein <clklein@eecs.northwestern.edu>:
 > On Sun, Nov 28, 2010 at 7:19 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >>
 >> It is possible -- can you supply a redex-less test case (ie a macro
 >> that sets up the properties the same way that Redex does for this
 >> example where you'd expect the renaming to be different than what CS
 >> does)?
 >>
 >
 > (define-syntax (m stx)
 > =C2=A0(syntax-case stx ()
 > =C2=A0 =C2=A0[(_ y)
 > =C2=A0 =C2=A0 (syntax-property #'0 'disappeared-use (list #'y))]))
 >
 > (define-syntax (n stx)
 > =C2=A0(syntax-case stx ()
 > =C2=A0 =C2=A0[(_ x1 x2 x3 x4)
 > =C2=A0 =C2=A0 (syntax-property
 > =C2=A0 =C2=A0 =C2=A0#`(begin
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=CE=BB (x1) (m x4))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(define-syntax x1 #'3))
 > =C2=A0 =C2=A0 =C2=A0'disappeared-use
 > =C2=A0 =C2=A0 =C2=A0(list #'x2 #'x3))]))
 >
 > (n x =C2=A0; Line 1
 > =C2=A0 x =C2=A0; Line 2
 > =C2=A0 x =C2=A0; Line 3
 > =C2=A0 x) ; Line 4
 >
 > Here are the lines that change when you rename by right-clicking the x
 > on each line.
 >
 > Line 1: 1, 2, 3, 4
 > Line 2: 1, 2, 3
 > Line 3: 1, 2, 3
 > Line 4: 1, 4
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work properly in Redex
Date: Mon, 29 Nov 2010 15:11:02 -0500

 p.s. I think the example is a problem. It makes me think about what =
 renaming should happen based on the implementation rather than the =
 non-existent specification.=20
 
 Casey, I think we need an example that comes with an "obvious" =
 specification and whose implementation is analogous to the =
 define-metafunction implementation.=20
 
 
 
 On Nov 29, 2010, at 2:59 PM, Casey Klein wrote:
 
 > On Sun, Nov 28, 2010 at 7:19 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >>=20
 >> It is possible -- can you supply a redex-less test case (ie a macro
 >> that sets up the properties the same way that Redex does for this
 >> example where you'd expect the renaming to be different than what CS
 >> does)?
 >>=20
 >=20
 > (define-syntax (m stx)
 >  (syntax-case stx ()
 >    [(_ y)
 >     (syntax-property #'0 'disappeared-use (list #'y))]))
 >=20
 > (define-syntax (n stx)
 >  (syntax-case stx ()
 >    [(_ x1 x2 x3 x4)
 >     (syntax-property
 >      #`(begin
 >          (=CE=BB (x1) (m x4))
 >          (define-syntax x1 #'3))
 >      'disappeared-use
 >      (list #'x2 #'x3))]))
 >=20
 > (n x  ; Line 1
 >   x  ; Line 2
 >   x  ; Line 3
 >   x) ; Line 4
 >=20
 > Here are the lines that change when you rename by right-clicking the x
 > on each line.
 >=20
 > Line 1: 1, 2, 3, 4
 > Line 2: 1, 2, 3
 > Line 3: 1, 2, 3
 > Line 4: 1, 4
 
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:15:49 -0600

 On Mon, Nov 29, 2010 at 2:05 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Oh... this is strange. I'm not really sure what the right answer is
 > supposed to be here. Any takers?
 >
 
 Do you mean that you're not sure what the renaming should be doing?
 
 I'm not totally sure myself, but I think that renaming any of the four
 occurrences should rename all of them. I take it you're not sure
 whether x4 should be renamed, because it's captured by a binder, but
 that binder is being renamed so x4 should be too. That's my reasoning,
 anyway.
 
 Regardless, the renaming should be in sync with the arrows: if x is
 connected to y by arrows (ignoring direction), then renaming x should
 rename y (and renaming y should rename x).
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:14:54 -0600

 define-metafunction's expansion is complex. It would not surprise me
 if that is close to what it does (at least for the purposes of this
 question). What isn't clear yet is if check syntax is wrong to rename
 the way it does (that seems likely) or define-metafunction's expansion
 is not right (that also seems likely) or both (uhh... so likely too I
 guess :).
 
 Regardless, it sure seems like check syntax's answer on this input is
 weird. Shouldn't it be making equivalence classes of identifiers?
 
 Robby
 
 On Mon, Nov 29, 2010 at 2:11 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 >
 > p.s. I think the example is a problem. It makes me think about what renam=
 ing should happen based on the implementation rather than the non-existent =
 specification.
 >
 > Casey, I think we need an example that comes with an "obvious" specificat=
 ion and whose implementation is analogous to the define-metafunction implem=
 entation.
 >
 >
 >
 > On Nov 29, 2010, at 2:59 PM, Casey Klein wrote:
 >
 >> On Sun, Nov 28, 2010 at 7:19 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>>
 >>> It is possible -- can you supply a redex-less test case (ie a macro
 >>> that sets up the properties the same way that Redex does for this
 >>> example where you'd expect the renaming to be different than what CS
 >>> does)?
 >>>
 >>
 >> (define-syntax (m stx)
 >> =C2=A0(syntax-case stx ()
 >> =C2=A0 =C2=A0[(_ y)
 >> =C2=A0 =C2=A0 (syntax-property #'0 'disappeared-use (list #'y))]))
 >>
 >> (define-syntax (n stx)
 >> =C2=A0(syntax-case stx ()
 >> =C2=A0 =C2=A0[(_ x1 x2 x3 x4)
 >> =C2=A0 =C2=A0 (syntax-property
 >> =C2=A0 =C2=A0 =C2=A0#`(begin
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=CE=BB (x1) (m x4))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(define-syntax x1 #'3))
 >> =C2=A0 =C2=A0 =C2=A0'disappeared-use
 >> =C2=A0 =C2=A0 =C2=A0(list #'x2 #'x3))]))
 >>
 >> (n x =C2=A0; Line 1
 >> =C2=A0 x =C2=A0; Line 2
 >> =C2=A0 x =C2=A0; Line 3
 >> =C2=A0 x) ; Line 4
 >>
 >> Here are the lines that change when you rename by right-clicking the x
 >> on each line.
 >>
 >> Line 1: 1, 2, 3, 4
 >> Line 2: 1, 2, 3
 >> Line 3: 1, 2, 3
 >> Line 4: 1, 4
 >
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:20:47 -0600

 On Mon, Nov 29, 2010 at 2:15 PM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > On Mon, Nov 29, 2010 at 2:05 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> Oh... this is strange. I'm not really sure what the right answer is
 >> supposed to be here. Any takers?
 >>
 >
 > Do you mean that you're not sure what the renaming should be doing?
 
 Yes.
 
 > I'm not totally sure myself, but I think that renaming any of the four
 > occurrences should rename all of them. I take it you're not sure
 > whether x4 should be renamed, because it's captured by a binder, but
 > that binder is being renamed so x4 should be too. That's my reasoning,
 > anyway.
 
 That's part of it. Another part is that x2 and x3 never end up being
 bound by x1 (or any other xN) so it isn't clear why those should be
 considered the same and renamed at all. And there's probably something
 else to worry about with the fact that x1 ends up being in two
 different binding positions.
 
 > Regardless, the renaming should be in sync with the arrows: if x is
 > connected to y by arrows (ignoring direction), then renaming x should
 > rename y (and renaming y should rename x).
 
 That does happen. :)
 
 Robby
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:22:31 -0600

 On Mon, Nov 29, 2010 at 2:20 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Mon, Nov 29, 2010 at 2:15 PM, Casey Klein
 > <clklein@eecs.northwestern.edu> wrote:
 >> On Mon, Nov 29, 2010 at 2:05 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> Oh... this is strange. I'm not really sure what the right answer is
 >>> supposed to be here. Any takers?
 >>>
 >>
 >> Do you mean that you're not sure what the renaming should be doing?
 >
 > Yes.
 >
 >> I'm not totally sure myself, but I think that renaming any of the four
 >> occurrences should rename all of them. I take it you're not sure
 >> whether x4 should be renamed, because it's captured by a binder, but
 >> that binder is being renamed so x4 should be too. That's my reasoning,
 >> anyway.
 >
 > That's part of it. Another part is that x2 and x3 never end up being
 > bound by x1 (or any other xN) so it isn't clear why those should be
 > considered the same and renamed at all. And there's probably something
 > else to worry about with the fact that x1 ends up being in two
 > different binding positions.
 >
 >> Regardless, the renaming should be in sync with the arrows: if x is
 >> connected to y by arrows (ignoring direction), then renaming x should
 >> rename y (and renaming y should rename x).
 >
 > That does happen. :)
 >
 
 No, line 2 is connect to line 4 via line 1 (mouse over line 1), but
 renaming line 2 does not rename line 4.
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:21:15 -0600

 On Mon, Nov 29, 2010 at 2:11 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Casey, I think we need an example that comes with an "obvious" specification and whose implementation is analogous to the define-metafunction implementation.
 >
 
 The example mirrors what define-metafunction does. If you don't think
 the specification is obvious (I don't), then your request cannot be
 fulfilled :-)
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:25:17 -0600

 On Mon, Nov 29, 2010 at 2:22 PM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > On Mon, Nov 29, 2010 at 2:20 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Mon, Nov 29, 2010 at 2:15 PM, Casey Klein
 >> <clklein@eecs.northwestern.edu> wrote:
 >>> On Mon, Nov 29, 2010 at 2:05 PM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>> Oh... this is strange. I'm not really sure what the right answer is
 >>>> supposed to be here. Any takers?
 >>>>
 >>>
 >>> Do you mean that you're not sure what the renaming should be doing?
 >>
 >> Yes.
 >>
 >>> I'm not totally sure myself, but I think that renaming any of the four
 >>> occurrences should rename all of them. I take it you're not sure
 >>> whether x4 should be renamed, because it's captured by a binder, but
 >>> that binder is being renamed so x4 should be too. That's my reasoning,
 >>> anyway.
 >>
 >> That's part of it. Another part is that x2 and x3 never end up being
 >> bound by x1 (or any other xN) so it isn't clear why those should be
 >> considered the same and renamed at all. And there's probably something
 >> else to worry about with the fact that x1 ends up being in two
 >> different binding positions.
 >>
 >>> Regardless, the renaming should be in sync with the arrows: if x is
 >>> connected to y by arrows (ignoring direction), then renaming x should
 >>> rename y (and renaming y should rename x).
 >>
 >> That does happen. :)
 >>
 >
 > No, line 2 is connect to line 4 via line 1 (mouse over line 1), but
 > renaming line 2 does not rename line 4.
 
 You're counting some kind of transitivity in there, I think.
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:44:42 -0600

 Casey came by my office and two things came up. First, the begin
 splicing is the reason why x3 and x4 should be considered bound (by
 the x1 in the define-syntax). Subtle! Apparently, this is necessary
 for the bad behavior.
 
 Second, with a simpler example, namely this macro:
 
                (define-syntax (m stx)
                  (syntax-case stx ()
                    [(_ x y)
                     #`(let ([x 9])
                         #,(syntax-property #'7 'disappeared-use (list #'y)))]))
 
 check syntax also doesn't work, but this seems to be a problem with
 the expander (or a misunderstanding on how CS should be using its
 output). Below is an example program that I'd expect to evaluate to
 #t, but it produces #f (basically this just pulls the ids out of the
 expansion and compares them).
 
 (define e
   (parameterize ([current-namespace (make-base-namespace)])
     (expand '(module mod racket/base
                (require (for-syntax racket/base))
                (define-syntax (m stx)
                  (syntax-case stx ()
                    [(_ x y)
                     #`(let ([x 9])
                         #,(syntax-property #'7 'disappeared-use (list #'y)))]))
                (m x x)))))
 
 (define let-exp
   (syntax-case e ()
     [(_ mod lan (mod-begin req ds (app cwv (lam () exp) pv)))
      #'exp]))
 
 (syntax-case let-exp ()
   [(lv (((x1) nine)) seven)
    (let ()
      (define x1 #'x1)
      (define x2 (car (syntax-property #'seven 'disappeared-use)))
      (free-identifier=? x1 x2))])
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work properly in Redex
Date: Mon, 29 Nov 2010 15:53:19 -0500

 On Nov 29, 2010, at 3:21 PM, Casey Klein wrote:
 
 > On Mon, Nov 29, 2010 at 2:11 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>=20
 >> Casey, I think we need an example that comes with an "obvious" =
 specification and whose implementation is analogous to the =
 define-metafunction implementation.
 >>=20
 >=20
 > The example mirrors what define-metafunction does. If you don't think
 > the specification is obvious (I don't), then your request cannot be
 > fulfilled :-)
 
 
 Thanks for understanding my apparently opaque emails. Yes, I was asking =
 for a specification.=20
 
 I figured that this macro represented kind of what metafunction does.=20
 
 So my request for a different example stands.=20=
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:58:15 -0600

 On Mon, Nov 29, 2010 at 2:53 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Nov 29, 2010, at 3:21 PM, Casey Klein wrote:
 >
 >> On Mon, Nov 29, 2010 at 2:11 PM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >>>
 >>> Casey, I think we need an example that comes with an "obvious" specification and whose implementation is analogous to the define-metafunction implementation.
 >>>
 >>
 >> The example mirrors what define-metafunction does. If you don't think
 >> the specification is obvious (I don't), then your request cannot be
 >> fulfilled :-)
 >
 >
 > Thanks for understanding my apparently opaque emails. Yes, I was asking for a specification.
 >
 > I figured that this macro represented kind of what metafunction does.
 >
 > So my request for a different example stands.
 
 Happily, since you're taking an interest, I'm going to push this one
 back on you :)
 
 Can you supply a spec (keeping it in your brain is fine) and then
 consult it to tell us how this example should behave?
 
   (define-syntax-rule (m x y z)
     (list (lambda x y)
           (lambda x z)))
 
   (m x x x)
 
 In particular, what variables should get renamed when renaming any of
 the three 'x's that appear in the use of m?
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work properly in Redex
Date: Mon, 29 Nov 2010 16:10:38 -0500

 Do we know that the variable in (list #'y) is bound to the x in the =
 surrounding let? To be honest, I don't know where the value argument for =
 syntax-property 'lives'?=20
 
 
 On Nov 29, 2010, at 3:44 PM, Robby Findler wrote:
 
 > Casey came by my office and two things came up. First, the begin
 > splicing is the reason why x3 and x4 should be considered bound (by
 > the x1 in the define-syntax). Subtle! Apparently, this is necessary
 > for the bad behavior.
 >=20
 > Second, with a simpler example, namely this macro:
 >=20
 >               (define-syntax (m stx)
 >                 (syntax-case stx ()
 >                   [(_ x y)
 >                    #`(let ([x 9])
 >                        #,(syntax-property #'7 'disappeared-use (list =
 #'y)))]))
 >=20
 > check syntax also doesn't work, but this seems to be a problem with
 > the expander (or a misunderstanding on how CS should be using its
 > output). Below is an example program that I'd expect to evaluate to
 > #t, but it produces #f (basically this just pulls the ids out of the
 > expansion and compares them).
 >=20
 > (define e
 >  (parameterize ([current-namespace (make-base-namespace)])
 >    (expand '(module mod racket/base
 >               (require (for-syntax racket/base))
 >               (define-syntax (m stx)
 >                 (syntax-case stx ()
 >                   [(_ x y)
 >                    #`(let ([x 9])
 >                        #,(syntax-property #'7 'disappeared-use (list =
 #'y)))]))
 >               (m x x)))))
 >=20
 > (define let-exp
 >  (syntax-case e ()
 >    [(_ mod lan (mod-begin req ds (app cwv (lam () exp) pv)))
 >     #'exp]))
 >=20
 > (syntax-case let-exp ()
 >  [(lv (((x1) nine)) seven)
 >   (let ()
 >     (define x1 #'x1)
 >     (define x2 (car (syntax-property #'seven 'disappeared-use)))
 >     (free-identifier=3D? x1 x2))])
 >=20
 > Robby
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work properly in Redex
Date: Mon, 29 Nov 2010 16:11:20 -0500

 On Nov 29, 2010, at 3:58 PM, Robby Findler wrote:
 
 > 
 > Happily, since you're taking an interest, I'm going to push this one
 > back on you :)
 > 
 > Can you supply a spec (keeping it in your brain is fine) and then
 > consult it to tell us how this example should behave?
 > 
 >  (define-syntax-rule (m x y z)
 >    (list (lambda x y)
 >          (lambda x z)))
 > 
 >  (m x x x)
 > 
 > In particular, what variables should get renamed when renaming any of
 > the three 'x's that appear in the use of m?
 > 
 > Robby
 
 
 But this misses the point of my request. The specification should
 come first. Once the implementation is given, the mind is polluted. 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 15:14:36 -0600

 On Mon, Nov 29, 2010 at 3:11 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Nov 29, 2010, at 3:58 PM, Robby Findler wrote:
 >
 >>
 >> Happily, since you're taking an interest, I'm going to push this one
 >> back on you :)
 >>
 >> Can you supply a spec (keeping it in your brain is fine) and then
 >> consult it to tell us how this example should behave?
 >>
 >> =C2=A0(define-syntax-rule (m x y z)
 >> =C2=A0 =C2=A0(list (lambda x y)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(lambda x z)))
 >>
 >> =C2=A0(m x x x)
 >>
 >> In particular, what variables should get renamed when renaming any of
 >> the three 'x's that appear in the use of m?
 >>
 >> Robby
 >
 >
 > But this misses the point of my request. The specification should
 > come first. Once the implementation is given, the mind is polluted.
 
 I think we're speaking at different levels here. There is no
 implementation yet, as far as I understand how that word is being
 used.
 
 There should be a specification for how arrows behave, given an
 arbitrary Racket program. So, above is one Racket program. How do the
 arrows (and renaming) behave for that example, according to the
 specification?
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 15:13:09 -0600

 Yes, that's essentially the issue, I think. My take is that the #'y
 (speaking of the macro definition) in the property should count as
 being in the same place as that syntax object, ie inside the let.
 
 In other words, for identifier comparison purposes, the expression is
 
   (let ([x 9]) (begin 7 y))
 
 but for evaluation purposes, the expression is
 
   (let ([x 9]) 7)
 
 something like that.
 
 Robby
 
 On Mon, Nov 29, 2010 at 3:10 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Do we know that the variable in (list #'y) is bound to the x in the surro=
 unding let? To be honest, I don't know where the value argument for syntax-=
 property 'lives'?
 >
 >
 > On Nov 29, 2010, at 3:44 PM, Robby Findler wrote:
 >
 >> Casey came by my office and two things came up. First, the begin
 >> splicing is the reason why x3 and x4 should be considered bound (by
 >> the x1 in the define-syntax). Subtle! Apparently, this is necessary
 >> for the bad behavior.
 >>
 >> Second, with a simpler example, namely this macro:
 >>
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (define-syntax (m stx)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (syntax-case stx=
  ()
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(_ x y)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#`(=
 let ([x 9])
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0#,(syntax-property #'7 'disappeared-use (list #'y)))]))
 >>
 >> check syntax also doesn't work, but this seems to be a problem with
 >> the expander (or a misunderstanding on how CS should be using its
 >> output). Below is an example program that I'd expect to evaluate to
 >> #t, but it produces #f (basically this just pulls the ids out of the
 >> expansion and compares them).
 >>
 >> (define e
 >> =C2=A0(parameterize ([current-namespace (make-base-namespace)])
 >> =C2=A0 =C2=A0(expand '(module mod racket/base
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (require (for-syntax ra=
 cket/base))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (define-syntax (m stx)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (syntax-case stx=
  ()
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(_ x y)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#`(=
 let ([x 9])
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0#,(syntax-property #'7 'disappeared-use (list #'y)))]))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (m x x)))))
 >>
 >> (define let-exp
 >> =C2=A0(syntax-case e ()
 >> =C2=A0 =C2=A0[(_ mod lan (mod-begin req ds (app cwv (lam () exp) pv)))
 >> =C2=A0 =C2=A0 #'exp]))
 >>
 >> (syntax-case let-exp ()
 >> =C2=A0[(lv (((x1) nine)) seven)
 >> =C2=A0 (let ()
 >> =C2=A0 =C2=A0 (define x1 #'x1)
 >> =C2=A0 =C2=A0 (define x2 (car (syntax-property #'seven 'disappeared-use)=
 ))
 >> =C2=A0 =C2=A0 (free-identifier=3D? x1 x2))])
 >>
 >> Robby
 >
 >
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>,
        matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 14:53:44 -0700

 Robby Findler wrote:
 > Casey came by my office and two things came up. First, the begin
 > splicing is the reason why x3 and x4 should be considered bound (by
 > the x1 in the define-syntax). Subtle! Apparently, this is necessary
 > for the bad behavior.
 > 
 > Second, with a simpler example, namely this macro:
 > 
 >                (define-syntax (m stx)
 >                  (syntax-case stx ()
 >                    [(_ x y)
 >                     #`(let ([x 9])
 >                         #,(syntax-property #'7 'disappeared-use (list #'y)))]))
 > 
 > check syntax also doesn't work, but this seems to be a problem with
 > the expander (or a misunderstanding on how CS should be using its
 > output). Below is an example program that I'd expect to evaluate to
 > #t, but it produces #f (basically this just pulls the ids out of the
 > expansion and compares them).
 
 No, because syntax marks and renames aren't propagated into syntax 
 properties. By making #'y the value of a syntax property, you're 
 effectively freezing its binding information as it was when the macro 
 was called. So when #'x gets renamed (because it's in binding position), 
 #'y gets left behind.
 
 The simplest workaround is to do something like this:
 
 (define-syntax (m stx)
    (syntax-case stx ()
      [(_ x y)
       #'(let ([x 9]) (disappear y 7))]))
 
 (define-syntax (disappear stx)
    (syntax-case stx ()
      [(_ var expr)
       (syntax-property #'expr 'disappeared-use (list #'var))]))
 
 Ryan
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Casey Klein <clklein@eecs.northwestern.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work properly in Redex
Date: Mon, 29 Nov 2010 16:59:36 -0500

 On Nov 29, 2010, at 4:53 PM, Ryan Culpepper wrote:
 
 > Robby Findler wrote:
 >> Casey came by my office and two things came up. First, the begin
 >> splicing is the reason why x3 and x4 should be considered bound (by
 >> the x1 in the define-syntax). Subtle! Apparently, this is necessary
 >> for the bad behavior.
 >> Second, with a simpler example, namely this macro:
 >>               (define-syntax (m stx)
 >>                 (syntax-case stx ()
 >>                   [(_ x y)
 >>                    #`(let ([x 9])
 >>                        #,(syntax-property #'7 'disappeared-use (list =
 #'y)))]))
 >> check syntax also doesn't work, but this seems to be a problem with
 >> the expander (or a misunderstanding on how CS should be using its
 >> output). Below is an example program that I'd expect to evaluate to
 >> #t, but it produces #f (basically this just pulls the ids out of the
 >> expansion and compares them).
 >=20
 > No, because syntax marks and renames aren't propagated into syntax =
 properties. By making #'y the value of a syntax property, you're =
 effectively freezing its binding information as it was when the macro =
 was called. So when #'x gets renamed (because it's in binding position), =
 #'y gets left behind.
 
 That's the working hypothesis I proposed in a previous email, and Robby =
 and I came to this conclusion on the phone.=20
 
 ;; ---=20
 
 What do you think about not allowing the macro system to use the same =
 identifier in two distinct binding locations?=20
 It's a source of bugs, annoyances, and all kinds of problems.=20
 
 -- Matthias
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>,
        matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 16:11:53 -0600

 Wow, that requires a pretty low-level understand of what is going on.
 But it makes sense and suggests how to change redex, too.
 
 Robby
 
 On Mon, Nov 29, 2010 at 3:53 PM, Ryan Culpepper <ryanc@ccs.neu.edu> wrote:
 > Robby Findler wrote:
 >>
 >> Casey came by my office and two things came up. First, the begin
 >> splicing is the reason why x3 and x4 should be considered bound (by
 >> the x1 in the define-syntax). Subtle! Apparently, this is necessary
 >> for the bad behavior.
 >>
 >> Second, with a simpler example, namely this macro:
 >>
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (define-syntax (m stx)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (syntax-case stx=
  ()
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [(_ x y)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#`(=
 let ([x 9])
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0#,(syntax-property #'7 'disappeared-use (list
 >> #'y)))]))
 >>
 >> check syntax also doesn't work, but this seems to be a problem with
 >> the expander (or a misunderstanding on how CS should be using its
 >> output). Below is an example program that I'd expect to evaluate to
 >> #t, but it produces #f (basically this just pulls the ids out of the
 >> expansion and compares them).
 >
 > No, because syntax marks and renames aren't propagated into syntax
 > properties. By making #'y the value of a syntax property, you're effectiv=
 ely
 > freezing its binding information as it was when the macro was called. So
 > when #'x gets renamed (because it's in binding position), #'y gets left
 > behind.
 >
 > The simplest workaround is to do something like this:
 >
 > (define-syntax (m stx)
 > =C2=A0(syntax-case stx ()
 > =C2=A0 =C2=A0[(_ x y)
 > =C2=A0 =C2=A0 #'(let ([x 9]) (disappear y 7))]))
 >
 > (define-syntax (disappear stx)
 > =C2=A0(syntax-case stx ()
 > =C2=A0 =C2=A0[(_ var expr)
 > =C2=A0 =C2=A0 (syntax-property #'expr 'disappeared-use (list #'var))]))
 >
 > Ryan
 >
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Casey Klein <clklein@eecs.northwestern.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 15:49:50 -0700

 Matthias Felleisen wrote:
 > On Nov 29, 2010, at 4:53 PM, Ryan Culpepper wrote:
 > 
 >> Robby Findler wrote:
 >>> Casey came by my office and two things came up. First, the begin
 >>> splicing is the reason why x3 and x4 should be considered bound (by
 >>> the x1 in the define-syntax). Subtle! Apparently, this is necessary
 >>> for the bad behavior.
 >>> Second, with a simpler example, namely this macro:
 >>>               (define-syntax (m stx)
 >>>                 (syntax-case stx ()
 >>>                   [(_ x y)
 >>>                    #`(let ([x 9])
 >>>                        #,(syntax-property #'7 'disappeared-use (list #'y)))]))
 >>> check syntax also doesn't work, but this seems to be a problem with
 >>> the expander (or a misunderstanding on how CS should be using its
 >>> output). Below is an example program that I'd expect to evaluate to
 >>> #t, but it produces #f (basically this just pulls the ids out of the
 >>> expansion and compares them).
 >> No, because syntax marks and renames aren't propagated into syntax properties. By making #'y the value of a syntax property, you're effectively freezing its binding information as it was when the macro was called. So when #'x gets renamed (because it's in binding position), #'y gets left behind.
 > 
 > That's the working hypothesis I proposed in a previous email, and Robby and I came to this conclusion on the phone. 
 > 
 > ;; --- 
 > 
 > What do you think about not allowing the macro system to use the same identifier in two distinct binding locations? 
 > It's a source of bugs, annoyances, and all kinds of problems. 
 
 I think that cure would be worse than the problem, at least in our macro 
 system. A number of syntax-rules tricks would stop working. We'd have to 
 figure out how to define and dynamically track "same identifier, 
 distinct bindings". And Check Syntax would still have bigger problems, 
 such as synthesized names: Can you rename a single struct selector?
 
 I do think it would be a good constraint for a different kind of macro 
 system, such as one that also enforced the linear (or perhaps affine) 
 occurrence of expressions. But it seems like something that would be 
 better as a static check, not a dynamic one.
 
 Ryan
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Casey Klein <clklein@eecs.northwestern.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work properly in Redex
Date: Mon, 29 Nov 2010 17:56:46 -0500

 On Nov 29, 2010, at 5:49 PM, Ryan Culpepper wrote:
 
 > I think that cure would be worse than the problem, at least in our =
 macro system. A number of syntax-rules tricks would stop working. We'd =
 have to figure out how to define and dynamically track "same identifier, =
 distinct bindings".
 
 Suppose an identifier comes with a mutable property: used in binding =
 position. (Perhaps on a per phase basis) Isn't that enough=20
 
 
 > And Check Syntax would still have bigger problems, such as synthesized =
 names: Can you rename a single struct selector?
 
 You can't do this at the moment anyway.=20
 
 
 > I do think it would be a good constraint for a different kind of macro =
 system, such as one that also enforced the linear (or perhaps affine) =
 occurrence of expressions. But it seems like something that would be =
 better as a static check, not a dynamic one.
 
 Yeap, the linear/affine connection occurred to me too.=20
 
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Casey Klein <clklein@eecs.northwestern.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Mon, 29 Nov 2010 16:07:46 -0700

 Matthias Felleisen wrote:
 > On Nov 29, 2010, at 5:49 PM, Ryan Culpepper wrote:
 > 
 >> I think that cure would be worse than the problem, at least in our macro system. A number of syntax-rules tricks would stop working. We'd have to figure out how to define and dynamically track "same identifier, distinct bindings".
 > 
 > Suppose an identifier comes with a mutable property: used in binding position. (Perhaps on a per phase basis) Isn't that enough 
 
 Suppose the identifier gets a mark. Does it share the same mutable cell? 
 (Answer: certainly not, otherwise every macro must explicitly generate 
 temporary variable names.) What if it then gets another mark canceling 
 the first mark? (Probably that should share the same cell as the 
 original identifier. So it's probably not a component of the identifier 
 but a separate table.) What about renamings? Do we have to treat 
 lambda-renamings differently from internal-definition-renamings? We 
 might have to unwind the property sometimes, because we might 
 local-expand and then re-expand---or perhaps depending on whether 
 renamed identifiers get a separate cell that might get taken care of 
 automatically.
 
 Ryan
 
 
 >> And Check Syntax would still have bigger problems, such as synthesized names: Can you rename a single struct selector?
 > 
 > You can't do this at the moment anyway. 
 > 
 > 
 >> I do think it would be a good constraint for a different kind of macro system, such as one that also enforced the linear (or perhaps affine) occurrence of expressions. But it seems like something that would be better as a static check, not a dynamic one.
 > 
 > Yeap, the linear/affine connection occurred to me too. 
 > 
 
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Ryan Culpepper <ryanc@ccs.neu.edu>, matthias <matthias@ccs.neu.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Tue, 30 Nov 2010 06:47:35 -0600

 On Mon, Nov 29, 2010 at 4:11 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Wow, that requires a pretty low-level understand of what is going on.
 > But it makes sense and suggests how to change redex, too.
 >
 
 I'm looking into how to change Redex, but in the meantime, I think
 something's still fishy with Check Syntax.
 
 In the example that mirrors `define-metafunction',
 
 - the 0 syntax object ends up with a property that says (some variant
 of) x4 disappeared,
 
 - the (define-syntax x1 #'3) object ends up with a 'disappeared-use
 property that's something like (list (list x2 x3) x2 x3) (no idea how
 the extra list gets there),
 
 - free-identifier=? says the following:
 
 (free-identifier=? x1 x2): #t
 (free-identifier=? x1 x3): #t
 (free-identifier=? x1 x4): #f
 (free-identifier=? x2 x3): #t
 (free-identifier=? x2 x4): #f
 (free-identifier=? x3 x4): #f
 
 - and bound-identifier=? says the following:
 
 (bound-identifier=? x1 x2): #f
 (bound-identifier=? x1 x3): #f
 (bound-identifier=? x1 x4): #f
 (bound-identifier=? x2 x3): #t
 (bound-identifier=? x2 x4): #f
 (bound-identifier=? x3 x4): #f
 
 How does this explain the behavior of Check Syntax? In particular, why
 does renaming x1 change x4 (and vice versa)?
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Tue, 30 Nov 2010 06:49:49 -0600

 On Mon, Nov 29, 2010 at 2:25 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Mon, Nov 29, 2010 at 2:22 PM, Casey Klein
 >> No, line 2 is connect to line 4 via line 1 (mouse over line 1), but
 >> renaming line 2 does not rename line 4.
 >
 > You're counting some kind of transitivity in there, I think.
 >
 
 Yes, of course. If x  and y are both bound by z, then why shouldn't
 renaming x change z too?
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: matthias <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Tue, 30 Nov 2010 06:56:23 -0600

 On Tue, Nov 30, 2010 at 6:49 AM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > On Mon, Nov 29, 2010 at 2:25 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Mon, Nov 29, 2010 at 2:22 PM, Casey Klein
 >>> No, line 2 is connect to line 4 via line 1 (mouse over line 1), but
 >>> renaming line 2 does not rename line 4.
 >>
 >> You're counting some kind of transitivity in there, I think.
 >>
 >
 > Yes, of course. If x =A0and y are both bound by z, then why shouldn't
 > renaming x change z too?
 >
 
 Oops, I meant to ask why renaming x shouldn't rename y too?
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Ryan Culpepper <ryanc@ccs.neu.edu>, matthias <matthias@ccs.neu.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Tue, 30 Nov 2010 09:32:40 -0600

 > How does this explain the behavior of Check Syntax? In particular, why
 > does renaming x1 change x4 (and vice versa)?
 
 Renaming x1 changes x4 because of the lambda binder, I expect (plus
 the extra macro in there ala Ryan's explanation).
 
 I think I can change Check Syntax (not sure if I'm changing this to
 make CS less buggy or more, but I think less :), so that this example
 (from upthread) "works" in the sense that renaming any of the
 arguments to 'm' renames all of them.
 
 >  (define-syntax-rule (m x y z)
 >    (list (lambda x y)
 >          (lambda x z)))
 >
 >  (m x x x)
 
 So probably the right thing to do is for me to make that change and
 then for you to understand the small define-metafunction mirroring
 example and adjust it so it works (or we find another thing to change
 somewhere else in the system).
 
 ok?
 
 Robby
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Fri, 3 Dec 2010 17:00:42 -0600

 On Mon, Nov 29, 2010 at 2:58 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 >
 > =A0(define-syntax-rule (m x y z)
 > =A0 =A0(list (lambda x y)
 > =A0 =A0 =A0 =A0 =A0(lambda x z)))
 >
 > =A0(m x x x)
 >
 
 Your commit that fixes this program (along with not over-doing
 identifier-prune-lexical-context, as I mentioned up-thread) fixes
 meta-function renaming.
 
 But I'm leaving the bug open until I figure out how to write regression tes=
 ts.
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11469: rename for metafunctions doesn't work
 properly in Redex
Date: Fri, 3 Dec 2010 19:44:15 -0600

 Sounds great to me!
 
 Robby
 
 On Fri, Dec 3, 2010 at 5:00 PM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > On Mon, Nov 29, 2010 at 2:58 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >>
 >> =C2=A0(define-syntax-rule (m x y z)
 >> =C2=A0 =C2=A0(list (lambda x y)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(lambda x z)))
 >>
 >> =C2=A0(m x x x)
 >>
 >
 > Your commit that fixes this program (along with not over-doing
 > identifier-prune-lexical-context, as I mentioned up-thread) fixes
 > meta-function renaming.
 >
 > But I'm leaving the bug open until I figure out how to write regression t=
 ests.
 >

State changed from "open" to "analyzed" by clklein at Thu, 31 Mar 2011 14:49:44 -0400
Reason>>> This bug still needs regression tests.

State changed from "analyzed" to "closed" by clklein@racket-lang.org at Tue, 16 Aug 2011 15:54:54 -0400
Reason>>> A commit by clklein@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/e485e9f348
