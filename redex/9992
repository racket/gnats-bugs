From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Dec 30 17:32:09 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.232])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id mBUMW686005029
	for <bugs@bugs.plt-scheme.org>; Tue, 30 Dec 2008 17:32:06 -0500
Message-Id: <200812302232.mBUMW3A2005023@champlain.ccs.neu.edu>
Date: Tue, 30 Dec 2008 17:32:03 -0500
From: samth@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: `term-let' should use the redex pattern matcher

>Number:         9992
>Category:       redex
>Synopsis:       `term-let' should use the redex pattern matcher
>Class:          change-request
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Dec 30 17:36:01 -0500 2008
>Closed-Date:    Fri Jun 26 16:23:20 -0400 2009
>Last-Modified:  Fri Jun 26 16:23:20 -0400 2009
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.3.8-svn30dec2008
>Environment:
unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 133654068

Collections:
(("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "he!
 lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-engine" "honu"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
>Description:
Right now, `term-let' from `redex' does not use the same matching algorithm that is used in metafunctions and reduction relations.  This is quite inconvenient, esp. with regard to keywords.  
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@plt-scheme.org>
To: samth@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 16:38:28 -0600

 What do you mean by "esp. with regards to keywords"?
 
 Robby
 
 On Tue, Dec 30, 2008 at 4:36 PM,  <samth@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=9992
 >
 > Reported by Sam TH for release: 4.1.3.8-svn30dec2008
 >
 > *** Description:
 > Right now, `term-let' from `redex' does not use the same matching algorithm that is used in metafunctions and reduction relations.  This is quite inconvenient, esp. with regard to keywords.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 > Human Language: english
 > (current-memory-use) 133654068
 >
 > Collections:
 > (("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "he!
 >  lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-engine" "honu"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
 >
 >
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 17:47:41 -0500

 Say you have a form which has keywords, like (lambda (x ...) e).  Then
 if you do:
 
 (term-let ([(lambda (x ...) e) my-term]) body)
 
  it binds `lambda'.  Even worse, if you have a form like this, which
 repeats a keyword: (a : b : c), and you try to match like this:
 
 (term-let ([(a : b : c) my-term]) body)
 
 you get an error from `with-syntax'.  Another, even worse problem:
 redex pattern matching handles multiples ...s in a pattern (yay!).
 But `with-syntax' doesn't.  So you can't destructure forms that use
 multiple ...s very easily.
 
 Does that explain things?
 
 Thanks,
 sam th
 
 On Tue, Dec 30, 2008 at 5:38 PM, Robby Findler <robby@plt-scheme.org> wrote:
 > What do you mean by "esp. with regards to keywords"?
 >
 > Robby
 >
 > On Tue, Dec 30, 2008 at 4:36 PM,  <samth@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9992
 >>
 >> Reported by Sam TH for release: 4.1.3.8-svn30dec2008
 >>
 >> *** Description:
 >> Right now, `term-let' from `redex' does not use the same matching algorithm that is used in metafunctions and reduction relations.  This is quite inconvenient, esp. with regard to keywords.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 >> Human Language: english
 >> (current-memory-use) 133654068
 >>
 >> Collections:
 >> (("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "he!
 >>  lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-engine" "honu"))
 >> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
 >>
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@plt-scheme.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 16:52:45 -0600

 Oh. Sure, I see. term-let isn't really for that, tho. Are you sure you
 shouldn't be using a metafunction (or possibly redex-match, altho that
 seems unlikely) instead?
 
 Can you show a little bit more of the context?
 
 Thanks,
 Robby
 
 On Tue, Dec 30, 2008 at 4:47 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > Say you have a form which has keywords, like (lambda (x ...) e).  Then
 > if you do:
 >
 > (term-let ([(lambda (x ...) e) my-term]) body)
 >
 >  it binds `lambda'.  Even worse, if you have a form like this, which
 > repeats a keyword: (a : b : c), and you try to match like this:
 >
 > (term-let ([(a : b : c) my-term]) body)
 >
 > you get an error from `with-syntax'.  Another, even worse problem:
 > redex pattern matching handles multiples ...s in a pattern (yay!).
 > But `with-syntax' doesn't.  So you can't destructure forms that use
 > multiple ...s very easily.
 >
 > Does that explain things?
 >
 > Thanks,
 > sam th
 >
 > On Tue, Dec 30, 2008 at 5:38 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >> What do you mean by "esp. with regards to keywords"?
 >>
 >> Robby
 >>
 >> On Tue, Dec 30, 2008 at 4:36 PM,  <samth@ccs.neu.edu> wrote:
 >>> A new problem report is waiting at
 >>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9992
 >>>
 >>> Reported by Sam TH for release: 4.1.3.8-svn30dec2008
 >>>
 >>> *** Description:
 >>> Right now, `term-let' from `redex' does not use the same matching algorithm that is used in metafunctions and reduction relations.  This is quite inconvenient, esp. with regard to keywords.
 >>>
 >>> *** How to repeat:
 >>>
 >>>
 >>> *** Environment:
 >>> unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 >>> Human Language: english
 >>> (current-memory-use) 133654068
 >>>
 >>> Collections:
 >>> (("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "he!
 >>>  lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-engine" "honu"))
 >>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
 >>>
 >>>
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 18:01:29 -0500

 On Tue, Dec 30, 2008 at 5:52 PM, Robby Findler <robby@plt-scheme.org> wrote:
 > Oh. Sure, I see. term-let isn't really for that, tho. Are you sure you
 > shouldn't be using a metafunction (or possibly redex-match, altho that
 > seems unlikely) instead?
 
 I'm really quite sure.
 
 > Can you show a little bit more of the context?
 
 Here's the clause of the metafunction implementing typechecking that's
 the problem.  It's the third clause the causes the problem:
 
 ;; T-App
   [(tc G (e_op e_args ...))
    ,(*term-let occur-lang
                ([(t_op (p_op+ ...) (p_op- ...) s_op) (term (tc G e_op))]
                 [((t_a (p_a+ ...) (p_a- ...) s_a) ...) (term ((tc G
 e_args) ...))]
 
                 [(t_f ... -> t_r : ((ph_f+ ...) (ph_f- ...)) ... :
 sh_f) (term t_op)] ;; <<<< problem here
 
                 [#t (term (all (t_a . <: . t_f) ...))]
                 [((any_a ...) (any_b ...)) (term (flatten
 (apply-filter (p_a+ ...) (p_a- ...) t_a s_a) ...))]
                 [((p_r+ ...) (p_r- ...)) (term ((flatten any_a ...)
 (flatten any_b ...)))]
                 [s_r (match (term sh_f)
                        [(list pi* i)
                         (match (list-ref (term (s_a ...)) i)
                           [(list pi x) (list (append pi* pi) x)]
                           [_ 0])]
                        [_ 0])])
                (term (t_r (p_r+ ...) (p_r- ...) s_r)))]
 
 I'm just trying to destructure a piece of syntax according to its
 grammar, and that's quite inconvenient to do with `term-let' (or
 anything else in redex, really).  `*term-let' is a macro that I just
 wrote, it basically implements `term-let' via a '((metafunction'
 encoding.  Here's the implementation:
 
 (define-syntax (*term-let-one stx)
   (syntax-case stx ()
     [(_ lang ([pat rhs]) . body)
      (with-syntax ([(mf-name) (generate-temporaries '(mf))])
        #'(let ()
            (define-metafunction lang
              mf-name : any -> any
              [(mf-name pat) ,body])
            (term (mf-name ,rhs))))]))
 
 (define-syntax *term-let
   (syntax-rules ()
     [(*term-let lang () . e) (term-let () . e)]
     [(*term-let lang (cl . rest) . e) (*term-let-one lang (cl)
 (*term-let lang rest . e))]))
 
 The larger issue here is that this would be more nicely expressed with
 some sort of `where' clause that combined binding and
 `side-condition'.
 
 Thanks,
 sam th
 
 >
 > Thanks,
 > Robby
 >
 > On Tue, Dec 30, 2008 at 4:47 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> Say you have a form which has keywords, like (lambda (x ...) e).  Then
 >> if you do:
 >>
 >> (term-let ([(lambda (x ...) e) my-term]) body)
 >>
 >>  it binds `lambda'.  Even worse, if you have a form like this, which
 >> repeats a keyword: (a : b : c), and you try to match like this:
 >>
 >> (term-let ([(a : b : c) my-term]) body)
 >>
 >> you get an error from `with-syntax'.  Another, even worse problem:
 >> redex pattern matching handles multiples ...s in a pattern (yay!).
 >> But `with-syntax' doesn't.  So you can't destructure forms that use
 >> multiple ...s very easily.
 >>
 >> Does that explain things?
 >>
 >> Thanks,
 >> sam th
 >>
 >> On Tue, Dec 30, 2008 at 5:38 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>> What do you mean by "esp. with regards to keywords"?
 >>>
 >>> Robby
 >>>
 >>> On Tue, Dec 30, 2008 at 4:36 PM,  <samth@ccs.neu.edu> wrote:
 >>>> A new problem report is waiting at
 >>>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9992
 >>>>
 >>>> Reported by Sam TH for release: 4.1.3.8-svn30dec2008
 >>>>
 >>>> *** Description:
 >>>> Right now, `term-let' from `redex' does not use the same matching algorithm that is used in metafunctions and reduction relations.  This is quite inconvenient, esp. with regard to keywords.
 >>>>
 >>>> *** How to repeat:
 >>>>
 >>>>
 >>>> *** Environment:
 >>>> unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 >>>> Human Language: english
 >>>> (current-memory-use) 133654068
 >>>>
 >>>> Collections:
 >>>> (("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "he!
 >>>>  lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-engine" "honu"))
 >>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
 >>>>
 >>>>
 >>>
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@plt-scheme.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 18:07:31 -0600

 Did you consider writing this as something like:
 
 [(tc G (e_op e_args ...))
  (tc-app (tc G e_op) (tc G e_args) ...)]
 
 where tc-app is a metafunction that does the matching in the "problem
 here" line?
 
 In any case, term-let doesn't take a language argument, so it is hard
 to make it work like you'd like. I could add my own implementation of
 *term-let (presumably called something else) to Redex, I suppose.
 
 What do you mean by this:
 
 > The larger issue here is that this would be more nicely expressed with
 > some sort of `where' clause that combined binding and
 > `side-condition'.
 
 ?
 
 If side-condition could see variables bound by an earlier 'where'
 clause, would that help (I forget if it already can, actually). But I
 think 'where' uses term-let, so probably that won't help you.
 
 Robby
 
 On Tue, Dec 30, 2008 at 5:01 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > On Tue, Dec 30, 2008 at 5:52 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >> Oh. Sure, I see. term-let isn't really for that, tho. Are you sure you
 >> shouldn't be using a metafunction (or possibly redex-match, altho that
 >> seems unlikely) instead?
 >
 > I'm really quite sure.
 >
 >> Can you show a little bit more of the context?
 >
 > Here's the clause of the metafunction implementing typechecking that's
 > the problem.  It's the third clause the causes the problem:
 >
 > ;; T-App
 >  [(tc G (e_op e_args ...))
 >   ,(*term-let occur-lang
 >               ([(t_op (p_op+ ...) (p_op- ...) s_op) (term (tc G e_op))]
 >                [((t_a (p_a+ ...) (p_a- ...) s_a) ...) (term ((tc G
 > e_args) ...))]
 >
 >                [(t_f ... -> t_r : ((ph_f+ ...) (ph_f- ...)) ... :
 > sh_f) (term t_op)] ;; <<<< problem here
 >
 >                [#t (term (all (t_a . <: . t_f) ...))]
 >                [((any_a ...) (any_b ...)) (term (flatten
 > (apply-filter (p_a+ ...) (p_a- ...) t_a s_a) ...))]
 >                [((p_r+ ...) (p_r- ...)) (term ((flatten any_a ...)
 > (flatten any_b ...)))]
 >                [s_r (match (term sh_f)
 >                       [(list pi* i)
 >                        (match (list-ref (term (s_a ...)) i)
 >                          [(list pi x) (list (append pi* pi) x)]
 >                          [_ 0])]
 >                       [_ 0])])
 >               (term (t_r (p_r+ ...) (p_r- ...) s_r)))]
 >
 > I'm just trying to destructure a piece of syntax according to its
 > grammar, and that's quite inconvenient to do with `term-let' (or
 > anything else in redex, really).  `*term-let' is a macro that I just
 > wrote, it basically implements `term-let' via a '((metafunction'
 > encoding.  Here's the implementation:
 >
 > (define-syntax (*term-let-one stx)
 >  (syntax-case stx ()
 >    [(_ lang ([pat rhs]) . body)
 >     (with-syntax ([(mf-name) (generate-temporaries '(mf))])
 >       #'(let ()
 >           (define-metafunction lang
 >             mf-name : any -> any
 >             [(mf-name pat) ,body])
 >           (term (mf-name ,rhs))))]))
 >
 > (define-syntax *term-let
 >  (syntax-rules ()
 >    [(*term-let lang () . e) (term-let () . e)]
 >    [(*term-let lang (cl . rest) . e) (*term-let-one lang (cl)
 > (*term-let lang rest . e))]))
 >
 > The larger issue here is that this would be more nicely expressed with
 > some sort of `where' clause that combined binding and
 > `side-condition'.
 >
 > Thanks,
 > sam th
 >
 >>
 >> Thanks,
 >> Robby
 >>
 >> On Tue, Dec 30, 2008 at 4:47 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >>> Say you have a form which has keywords, like (lambda (x ...) e).  Then
 >>> if you do:
 >>>
 >>> (term-let ([(lambda (x ...) e) my-term]) body)
 >>>
 >>>  it binds `lambda'.  Even worse, if you have a form like this, which
 >>> repeats a keyword: (a : b : c), and you try to match like this:
 >>>
 >>> (term-let ([(a : b : c) my-term]) body)
 >>>
 >>> you get an error from `with-syntax'.  Another, even worse problem:
 >>> redex pattern matching handles multiples ...s in a pattern (yay!).
 >>> But `with-syntax' doesn't.  So you can't destructure forms that use
 >>> multiple ...s very easily.
 >>>
 >>> Does that explain things?
 >>>
 >>> Thanks,
 >>> sam th
 >>>
 >>> On Tue, Dec 30, 2008 at 5:38 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>>> What do you mean by "esp. with regards to keywords"?
 >>>>
 >>>> Robby
 >>>>
 >>>> On Tue, Dec 30, 2008 at 4:36 PM,  <samth@ccs.neu.edu> wrote:
 >>>>> A new problem report is waiting at
 >>>>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9992
 >>>>>
 >>>>> Reported by Sam TH for release: 4.1.3.8-svn30dec2008
 >>>>>
 >>>>> *** Description:
 >>>>> Right now, `term-let' from `redex' does not use the same matching algorithm that is used in metafunctions and reduction relations.  This is quite inconvenient, esp. with regard to keywords.
 >>>>>
 >>>>> *** How to repeat:
 >>>>>
 >>>>>
 >>>>> *** Environment:
 >>>>> unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 >>>>> Human Language: english
 >>>>> (current-memory-use) 133654068
 >>>>>
 >>>>> Collections:
 >>>>> (("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "he!
 >>>>>  lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-engine" "honu"))
 >>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
 >>>>>
 >>>>>
 >>>>
 >>>
 >>>
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>>
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: "Robby Findler" <robby@plt-scheme.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 18:16:20 -0600

 Also: why not term-match or term-match/single?
 
 Robby
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 20:48:10 -0500

 On Tue, Dec 30, 2008 at 7:07 PM, Robby Findler <robby@plt-scheme.org> wrote:
 > Did you consider writing this as something like:
 >
 > [(tc G (e_op e_args ...))
 >  (tc-app (tc G e_op) (tc G e_args) ...)]
 >
 > where tc-app is a metafunction that does the matching in the "problem
 > here" line?
 
 I suppose that would work, but then I'd have to do all the matching at
 once, whereas in the implementation I have, I first destructure the
 whole result, and then the type.  Also, I'm trying to keep a 1-1
 mapping between things in the latex and things in the redex
 implementation.
 
 > In any case, term-let doesn't take a language argument, so it is hard
 > to make it work like you'd like. I could add my own implementation of
 > *term-let (presumably called something else) to Redex, I suppose.
 
 I guess I don't see why you'd want the current `term-let' as opposed
 to one that understood the language.  While that would mean that it
 would have to take a language argument, that seems like a small price
 to pay for all the benefits of the redex matcher.
 
 >
 > What do you mean by this:
 >
 >> The larger issue here is that this would be more nicely expressed with
 >> some sort of `where' clause that combined binding and
 >> `side-condition'.
 >
 > ?
 >
 > If side-condition could see variables bound by an earlier 'where'
 > clause, would that help (I forget if it already can, actually). But I
 > think 'where' uses term-let, so probably that won't help you.
 
 It definitely seems like `where' should use the redex matcher, since
 the language argument is there already.  I had actually forgotten that
 `where' existed (it's not discussed much in the docs).  But yeah, if
 it used the redex matcher, and results were available to the side
 conditions, that would make me totally happy.
 
 Thanks,
 sam th
 
 > On Tue, Dec 30, 2008 at 5:01 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> On Tue, Dec 30, 2008 at 5:52 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>> Oh. Sure, I see. term-let isn't really for that, tho. Are you sure you
 >>> shouldn't be using a metafunction (or possibly redex-match, altho that
 >>> seems unlikely) instead?
 >>
 >> I'm really quite sure.
 >>
 >>> Can you show a little bit more of the context?
 >>
 >> Here's the clause of the metafunction implementing typechecking that's
 >> the problem.  It's the third clause the causes the problem:
 >>
 >> ;; T-App
 >>  [(tc G (e_op e_args ...))
 >>   ,(*term-let occur-lang
 >>               ([(t_op (p_op+ ...) (p_op- ...) s_op) (term (tc G e_op))]
 >>                [((t_a (p_a+ ...) (p_a- ...) s_a) ...) (term ((tc G
 >> e_args) ...))]
 >>
 >>                [(t_f ... -> t_r : ((ph_f+ ...) (ph_f- ...)) ... :
 >> sh_f) (term t_op)] ;; <<<< problem here
 >>
 >>                [#t (term (all (t_a . <: . t_f) ...))]
 >>                [((any_a ...) (any_b ...)) (term (flatten
 >> (apply-filter (p_a+ ...) (p_a- ...) t_a s_a) ...))]
 >>                [((p_r+ ...) (p_r- ...)) (term ((flatten any_a ...)
 >> (flatten any_b ...)))]
 >>                [s_r (match (term sh_f)
 >>                       [(list pi* i)
 >>                        (match (list-ref (term (s_a ...)) i)
 >>                          [(list pi x) (list (append pi* pi) x)]
 >>                          [_ 0])]
 >>                       [_ 0])])
 >>               (term (t_r (p_r+ ...) (p_r- ...) s_r)))]
 >>
 >> I'm just trying to destructure a piece of syntax according to its
 >> grammar, and that's quite inconvenient to do with `term-let' (or
 >> anything else in redex, really).  `*term-let' is a macro that I just
 >> wrote, it basically implements `term-let' via a '((metafunction'
 >> encoding.  Here's the implementation:
 >>
 >> (define-syntax (*term-let-one stx)
 >>  (syntax-case stx ()
 >>    [(_ lang ([pat rhs]) . body)
 >>     (with-syntax ([(mf-name) (generate-temporaries '(mf))])
 >>       #'(let ()
 >>           (define-metafunction lang
 >>             mf-name : any -> any
 >>             [(mf-name pat) ,body])
 >>           (term (mf-name ,rhs))))]))
 >>
 >> (define-syntax *term-let
 >>  (syntax-rules ()
 >>    [(*term-let lang () . e) (term-let () . e)]
 >>    [(*term-let lang (cl . rest) . e) (*term-let-one lang (cl)
 >> (*term-let lang rest . e))]))
 >>
 >> The larger issue here is that this would be more nicely expressed with
 >> some sort of `where' clause that combined binding and
 >> `side-condition'.
 >>
 >> Thanks,
 >> sam th
 >>
 >>>
 >>> Thanks,
 >>> Robby
 >>>
 >>> On Tue, Dec 30, 2008 at 4:47 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >>>> Say you have a form which has keywords, like (lambda (x ...) e).  Then
 >>>> if you do:
 >>>>
 >>>> (term-let ([(lambda (x ...) e) my-term]) body)
 >>>>
 >>>>  it binds `lambda'.  Even worse, if you have a form like this, which
 >>>> repeats a keyword: (a : b : c), and you try to match like this:
 >>>>
 >>>> (term-let ([(a : b : c) my-term]) body)
 >>>>
 >>>> you get an error from `with-syntax'.  Another, even worse problem:
 >>>> redex pattern matching handles multiples ...s in a pattern (yay!).
 >>>> But `with-syntax' doesn't.  So you can't destructure forms that use
 >>>> multiple ...s very easily.
 >>>>
 >>>> Does that explain things?
 >>>>
 >>>> Thanks,
 >>>> sam th
 >>>>
 >>>> On Tue, Dec 30, 2008 at 5:38 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>>>> What do you mean by "esp. with regards to keywords"?
 >>>>>
 >>>>> Robby
 >>>>>
 >>>>> On Tue, Dec 30, 2008 at 4:36 PM,  <samth@ccs.neu.edu> wrote:
 >>>>>> A new problem report is waiting at
 >>>>>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9992
 >>>>>>
 >>>>>> Reported by Sam TH for release: 4.1.3.8-svn30dec2008
 >>>>>>
 >>>>>> *** Description:
 >>>>>> Right now, `term-let' from `redex' does not use the same matching algorithm that is used in metafunctions and reduction relations.  This is quite inconvenient, esp. with regard to keywords.
 >>>>>>
 >>>>>> *** How to repeat:
 >>>>>>
 >>>>>>
 >>>>>> *** Environment:
 >>>>>> unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 >>>>>> Human Language: english
 >>>>>> (current-memory-use) 133654068
 >>>>>>
 >>>>>> Collections:
 >>>>>> (("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "he!
 >>>>>>  lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-engine" "honu"))
 >>>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
 >>>>>>
 >>>>>>
 >>>>>
 >>>>
 >>>>
 >>>>
 >>>> --
 >>>> sam th
 >>>> samth@ccs.neu.edu
 >>>>
 >>>
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@plt-scheme.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 19:49:40 -0600

 On Tue, Dec 30, 2008 at 7:48 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > On Tue, Dec 30, 2008 at 7:07 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >> Did you consider writing this as something like:
 >>
 >> [(tc G (e_op e_args ...))
 >>  (tc-app (tc G e_op) (tc G e_args) ...)]
 >>
 >> where tc-app is a metafunction that does the matching in the "problem
 >> here" line?
 >
 > I suppose that would work, but then I'd have to do all the matching at
 > once, whereas in the implementation I have, I first destructure the
 > whole result, and then the type.  Also, I'm trying to keep a 1-1
 > mapping between things in the latex and things in the redex
 > implementation.
 >
 >> In any case, term-let doesn't take a language argument, so it is hard
 >> to make it work like you'd like. I could add my own implementation of
 >> *term-let (presumably called something else) to Redex, I suppose.
 >
 > I guess I don't see why you'd want the current `term-let' as opposed
 > to one that understood the language.  While that would mean that it
 > would have to take a language argument, that seems like a small price
 > to pay for all the benefits of the redex matcher.
 
 "want" is the wrong word. I need that thing internally, so I just
 exposed it. I can hide it if you want.
 
 >>
 >> What do you mean by this:
 >>
 >>> The larger issue here is that this would be more nicely expressed with
 >>> some sort of `where' clause that combined binding and
 >>> `side-condition'.
 >>
 >> ?
 >>
 >> If side-condition could see variables bound by an earlier 'where'
 >> clause, would that help (I forget if it already can, actually). But I
 >> think 'where' uses term-let, so probably that won't help you.
 >
 > It definitely seems like `where' should use the redex matcher, since
 > the language argument is there already.  I had actually forgotten that
 > `where' existed (it's not discussed much in the docs).  But yeah, if
 > it used the redex matcher, and results were available to the side
 > conditions, that would make me totally happy.
 
 Okay, I'll look into that.
 
 Robby
 
 > Thanks,
 > sam th
 >
 >> On Tue, Dec 30, 2008 at 5:01 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >>> On Tue, Dec 30, 2008 at 5:52 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>>> Oh. Sure, I see. term-let isn't really for that, tho. Are you sure you
 >>>> shouldn't be using a metafunction (or possibly redex-match, altho that
 >>>> seems unlikely) instead?
 >>>
 >>> I'm really quite sure.
 >>>
 >>>> Can you show a little bit more of the context?
 >>>
 >>> Here's the clause of the metafunction implementing typechecking that's
 >>> the problem.  It's the third clause the causes the problem:
 >>>
 >>> ;; T-App
 >>>  [(tc G (e_op e_args ...))
 >>>   ,(*term-let occur-lang
 >>>               ([(t_op (p_op+ ...) (p_op- ...) s_op) (term (tc G e_op))]
 >>>                [((t_a (p_a+ ...) (p_a- ...) s_a) ...) (term ((tc G
 >>> e_args) ...))]
 >>>
 >>>                [(t_f ... -> t_r : ((ph_f+ ...) (ph_f- ...)) ... :
 >>> sh_f) (term t_op)] ;; <<<< problem here
 >>>
 >>>                [#t (term (all (t_a . <: . t_f) ...))]
 >>>                [((any_a ...) (any_b ...)) (term (flatten
 >>> (apply-filter (p_a+ ...) (p_a- ...) t_a s_a) ...))]
 >>>                [((p_r+ ...) (p_r- ...)) (term ((flatten any_a ...)
 >>> (flatten any_b ...)))]
 >>>                [s_r (match (term sh_f)
 >>>                       [(list pi* i)
 >>>                        (match (list-ref (term (s_a ...)) i)
 >>>                          [(list pi x) (list (append pi* pi) x)]
 >>>                          [_ 0])]
 >>>                       [_ 0])])
 >>>               (term (t_r (p_r+ ...) (p_r- ...) s_r)))]
 >>>
 >>> I'm just trying to destructure a piece of syntax according to its
 >>> grammar, and that's quite inconvenient to do with `term-let' (or
 >>> anything else in redex, really).  `*term-let' is a macro that I just
 >>> wrote, it basically implements `term-let' via a '((metafunction'
 >>> encoding.  Here's the implementation:
 >>>
 >>> (define-syntax (*term-let-one stx)
 >>>  (syntax-case stx ()
 >>>    [(_ lang ([pat rhs]) . body)
 >>>     (with-syntax ([(mf-name) (generate-temporaries '(mf))])
 >>>       #'(let ()
 >>>           (define-metafunction lang
 >>>             mf-name : any -> any
 >>>             [(mf-name pat) ,body])
 >>>           (term (mf-name ,rhs))))]))
 >>>
 >>> (define-syntax *term-let
 >>>  (syntax-rules ()
 >>>    [(*term-let lang () . e) (term-let () . e)]
 >>>    [(*term-let lang (cl . rest) . e) (*term-let-one lang (cl)
 >>> (*term-let lang rest . e))]))
 >>>
 >>> The larger issue here is that this would be more nicely expressed with
 >>> some sort of `where' clause that combined binding and
 >>> `side-condition'.
 >>>
 >>> Thanks,
 >>> sam th
 >>>
 >>>>
 >>>> Thanks,
 >>>> Robby
 >>>>
 >>>> On Tue, Dec 30, 2008 at 4:47 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >>>>> Say you have a form which has keywords, like (lambda (x ...) e).  Then
 >>>>> if you do:
 >>>>>
 >>>>> (term-let ([(lambda (x ...) e) my-term]) body)
 >>>>>
 >>>>>  it binds `lambda'.  Even worse, if you have a form like this, which
 >>>>> repeats a keyword: (a : b : c), and you try to match like this:
 >>>>>
 >>>>> (term-let ([(a : b : c) my-term]) body)
 >>>>>
 >>>>> you get an error from `with-syntax'.  Another, even worse problem:
 >>>>> redex pattern matching handles multiples ...s in a pattern (yay!).
 >>>>> But `with-syntax' doesn't.  So you can't destructure forms that use
 >>>>> multiple ...s very easily.
 >>>>>
 >>>>> Does that explain things?
 >>>>>
 >>>>> Thanks,
 >>>>> sam th
 >>>>>
 >>>>> On Tue, Dec 30, 2008 at 5:38 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>>>>> What do you mean by "esp. with regards to keywords"?
 >>>>>>
 >>>>>> Robby
 >>>>>>
 >>>>>> On Tue, Dec 30, 2008 at 4:36 PM,  <samth@ccs.neu.edu> wrote:
 >>>>>>> A new problem report is waiting at
 >>>>>>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9992
 >>>>>>>
 >>>>>>> Reported by Sam TH for release: 4.1.3.8-svn30dec2008
 >>>>>>>
 >>>>>>> *** Description:
 >>>>>>> Right now, `term-let' from `redex' does not use the same matching algorithm that is used in metafunctions and reduction relations.  This is quite inconvenient, esp. with regard to keywords.
 >>>>>>>
 >>>>>>> *** How to repeat:
 >>>>>>>
 >>>>>>>
 >>>>>>> *** Environment:
 >>>>>>> unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 >>>>>>> Human Language: english
 >>>>>>> (current-memory-use) 133654068
 >>>>>>>
 >>>>>>> Collections:
 >>>>>>> (("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "he!
 >>>>>>>  lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-engine" "honu"))
 >>>>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #t))
 >>>>>>>
 >>>>>>>
 >>>>>>
 >>>>>
 >>>>>
 >>>>>
 >>>>> --
 >>>>> sam th
 >>>>> samth@ccs.neu.edu
 >>>>>
 >>>>
 >>>
 >>>
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>>
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 21:02:37 -0500

 On Tue, Dec 30, 2008 at 8:49 PM, Robby Findler <robby@plt-scheme.org> wrote=
 :
 > On Tue, Dec 30, 2008 at 7:48 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> On Tue, Dec 30, 2008 at 7:07 PM, Robby Findler <robby@plt-scheme.org> wr=
 ote:
 >>> Did you consider writing this as something like:
 >>>
 >>> [(tc G (e_op e_args ...))
 >>>  (tc-app (tc G e_op) (tc G e_args) ...)]
 >>>
 >>> where tc-app is a metafunction that does the matching in the "problem
 >>> here" line?
 >>
 >> I suppose that would work, but then I'd have to do all the matching at
 >> once, whereas in the implementation I have, I first destructure the
 >> whole result, and then the type.  Also, I'm trying to keep a 1-1
 >> mapping between things in the latex and things in the redex
 >> implementation.
 >>
 >>> In any case, term-let doesn't take a language argument, so it is hard
 >>> to make it work like you'd like. I could add my own implementation of
 >>> *term-let (presumably called something else) to Redex, I suppose.
 >>
 >> I guess I don't see why you'd want the current `term-let' as opposed
 >> to one that understood the language.  While that would mean that it
 >> would have to take a language argument, that seems like a small price
 >> to pay for all the benefits of the redex matcher.
 >
 > "want" is the wrong word. I need that thing internally, so I just
 > exposed it. I can hide it if you want.
 
 It's not that I want it hidden, so much as to have the version
 presented to the user agree with all the other pattern matching in
 redex.  I might be in the minority here, so you might want to ask on
 the list.
 
 sam th
 
 >
 >>>
 >>> What do you mean by this:
 >>>
 >>>> The larger issue here is that this would be more nicely expressed with
 >>>> some sort of `where' clause that combined binding and
 >>>> `side-condition'.
 >>>
 >>> ?
 >>>
 >>> If side-condition could see variables bound by an earlier 'where'
 >>> clause, would that help (I forget if it already can, actually). But I
 >>> think 'where' uses term-let, so probably that won't help you.
 >>
 >> It definitely seems like `where' should use the redex matcher, since
 >> the language argument is there already.  I had actually forgotten that
 >> `where' existed (it's not discussed much in the docs).  But yeah, if
 >> it used the redex matcher, and results were available to the side
 >> conditions, that would make me totally happy.
 >
 > Okay, I'll look into that.
 >
 > Robby
 >
 >> Thanks,
 >> sam th
 >>
 >>> On Tue, Dec 30, 2008 at 5:01 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >>>> On Tue, Dec 30, 2008 at 5:52 PM, Robby Findler <robby@plt-scheme.org> =
 wrote:
 >>>>> Oh. Sure, I see. term-let isn't really for that, tho. Are you sure yo=
 u
 >>>>> shouldn't be using a metafunction (or possibly redex-match, altho tha=
 t
 >>>>> seems unlikely) instead?
 >>>>
 >>>> I'm really quite sure.
 >>>>
 >>>>> Can you show a little bit more of the context?
 >>>>
 >>>> Here's the clause of the metafunction implementing typechecking that's
 >>>> the problem.  It's the third clause the causes the problem:
 >>>>
 >>>> ;; T-App
 >>>>  [(tc G (e_op e_args ...))
 >>>>   ,(*term-let occur-lang
 >>>>               ([(t_op (p_op+ ...) (p_op- ...) s_op) (term (tc G e_op))=
 ]
 >>>>                [((t_a (p_a+ ...) (p_a- ...) s_a) ...) (term ((tc G
 >>>> e_args) ...))]
 >>>>
 >>>>                [(t_f ... -> t_r : ((ph_f+ ...) (ph_f- ...)) ... :
 >>>> sh_f) (term t_op)] ;; <<<< problem here
 >>>>
 >>>>                [#t (term (all (t_a . <: . t_f) ...))]
 >>>>                [((any_a ...) (any_b ...)) (term (flatten
 >>>> (apply-filter (p_a+ ...) (p_a- ...) t_a s_a) ...))]
 >>>>                [((p_r+ ...) (p_r- ...)) (term ((flatten any_a ...)
 >>>> (flatten any_b ...)))]
 >>>>                [s_r (match (term sh_f)
 >>>>                       [(list pi* i)
 >>>>                        (match (list-ref (term (s_a ...)) i)
 >>>>                          [(list pi x) (list (append pi* pi) x)]
 >>>>                          [_ 0])]
 >>>>                       [_ 0])])
 >>>>               (term (t_r (p_r+ ...) (p_r- ...) s_r)))]
 >>>>
 >>>> I'm just trying to destructure a piece of syntax according to its
 >>>> grammar, and that's quite inconvenient to do with `term-let' (or
 >>>> anything else in redex, really).  `*term-let' is a macro that I just
 >>>> wrote, it basically implements `term-let' via a '((metafunction'
 >>>> encoding.  Here's the implementation:
 >>>>
 >>>> (define-syntax (*term-let-one stx)
 >>>>  (syntax-case stx ()
 >>>>    [(_ lang ([pat rhs]) . body)
 >>>>     (with-syntax ([(mf-name) (generate-temporaries '(mf))])
 >>>>       #'(let ()
 >>>>           (define-metafunction lang
 >>>>             mf-name : any -> any
 >>>>             [(mf-name pat) ,body])
 >>>>           (term (mf-name ,rhs))))]))
 >>>>
 >>>> (define-syntax *term-let
 >>>>  (syntax-rules ()
 >>>>    [(*term-let lang () . e) (term-let () . e)]
 >>>>    [(*term-let lang (cl . rest) . e) (*term-let-one lang (cl)
 >>>> (*term-let lang rest . e))]))
 >>>>
 >>>> The larger issue here is that this would be more nicely expressed with
 >>>> some sort of `where' clause that combined binding and
 >>>> `side-condition'.
 >>>>
 >>>> Thanks,
 >>>> sam th
 >>>>
 >>>>>
 >>>>> Thanks,
 >>>>> Robby
 >>>>>
 >>>>> On Tue, Dec 30, 2008 at 4:47 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >>>>>> Say you have a form which has keywords, like (lambda (x ...) e).  Th=
 en
 >>>>>> if you do:
 >>>>>>
 >>>>>> (term-let ([(lambda (x ...) e) my-term]) body)
 >>>>>>
 >>>>>>  it binds `lambda'.  Even worse, if you have a form like this, which
 >>>>>> repeats a keyword: (a : b : c), and you try to match like this:
 >>>>>>
 >>>>>> (term-let ([(a : b : c) my-term]) body)
 >>>>>>
 >>>>>> you get an error from `with-syntax'.  Another, even worse problem:
 >>>>>> redex pattern matching handles multiples ...s in a pattern (yay!).
 >>>>>> But `with-syntax' doesn't.  So you can't destructure forms that use
 >>>>>> multiple ...s very easily.
 >>>>>>
 >>>>>> Does that explain things?
 >>>>>>
 >>>>>> Thanks,
 >>>>>> sam th
 >>>>>>
 >>>>>> On Tue, Dec 30, 2008 at 5:38 PM, Robby Findler <robby@plt-scheme.org=
 > wrote:
 >>>>>>> What do you mean by "esp. with regards to keywords"?
 >>>>>>>
 >>>>>>> Robby
 >>>>>>>
 >>>>>>> On Tue, Dec 30, 2008 at 4:36 PM,  <samth@ccs.neu.edu> wrote:
 >>>>>>>> A new problem report is waiting at
 >>>>>>>>  http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D9992
 >>>>>>>>
 >>>>>>>> Reported by Sam TH for release: 4.1.3.8-svn30dec2008
 >>>>>>>>
 >>>>>>>> *** Description:
 >>>>>>>> Right now, `term-let' from `redex' does not use the same matching =
 algorithm that is used in metafunctions and reduction relations.  This is q=
 uite inconvenient, esp. with regard to keywords.
 >>>>>>>>
 >>>>>>>> *** How to repeat:
 >>>>>>>>
 >>>>>>>>
 >>>>>>>> *** Environment:
 >>>>>>>> unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i6=
 86 GNU/Linux" (i386-linux/3m) (get-display-depth) =3D 24
 >>>>>>>> Human Language: english
 >>>>>>>> (current-memory-use) 133654068
 >>>>>>>>
 >>>>>>>> Collections:
 >>>>>>>> (("/home/samth/scheme" "infix4.diff" "info-domain" "match" "perf" =
 "foo" "ifc" "beamer") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "=
 handin-server") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-pa=
 th) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "w=
 xme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "si=
 rmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" =
 "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macr=
 o-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "ht=
 dp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger"=
  "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" =
 "rnrs" "parser-tools" "waterworld" "r5rs" "games" "redex" "eopl" "tests" "h=
 tml" "handin-server" "swindle" "repos-time-stamp" "typed" "compiler" "embed=
 ded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "preproces=
 sor" "net" "syntax" "he!
 >>>>>>>>  lp" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "erro=
 rtrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme" "test-eng=
 ine" "honu"))
 >>>>>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t =
 none) (default) #() "#lang scheme\n" #t))
 >>>>>>>>
 >>>>>>>>
 >>>>>>>
 >>>>>>
 >>>>>>
 >>>>>>
 >>>>>> --
 >>>>>> sam th
 >>>>>> samth@ccs.neu.edu
 >>>>>>
 >>>>>
 >>>>
 >>>>
 >>>>
 >>>> --
 >>>> sam th
 >>>> samth@ccs.neu.edu
 >>>>
 >>>
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@plt-scheme.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9992: `term-let' should use the redex pattern matcher
Date: Tue, 30 Dec 2008 20:19:59 -0600

 On Tue, Dec 30, 2008 at 8:02 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > It's not that I want it hidden, so much as to have the version
 > presented to the user agree with all the other pattern matching in
 > redex.  I might be in the minority here, so you might want to ask on
 > the list.
 
 The point is this: there are multiple layers within redex. term-let is
 a lower layer that you might not want to use. If that's the case,
 don't use it. Use term-match instead. Perhaps, if you find the syntax
 of that one awkward and don't want to write the convenience macro, I
 should add something to Redex. At the moment, it is set up to try to
 make the performance model clear.
 
 I've tried to improve the docs along those lines.
 
 I hope to, at some point in the future, do the compilation as part of
 the macro expansion to avoid all this -- it turns out to not be all
 that simple because of the way Redex does caching. (But I'm not sure
 that it is worth preserving that form of caching.)
 
 Robby


Class changed from "sw-bug" to "change-request" by robby at Fri, 26 Jun 2009 16:23:20 -0400
Reason>>> not a bug, per se.

State changed from "open" to "closed" by robby at Fri, 26 Jun 2009 16:23:20 -0400
Reason>>> I believe this PR has been addressed by the recent changes
to Redex.

