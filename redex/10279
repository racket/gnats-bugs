From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jun  2 18:49:40 2009
Received: from qw-out-2122.google.com (qw-out-2122.google.com [74.125.92.25])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n52MnV4m023994
	for <bugs@bugs.plt-scheme.org>; Tue, 2 Jun 2009 18:49:31 -0400
Message-Id: <200906022249.n52MnTk4023986@champlain.ccs.neu.edu>
Date: Tue, 2 Jun 2009 18:49:29 -0400
From: jay@cs.byu.edu
To: bugs@plt-scheme.org
Subject: Redex: hide-hole doesn't

>Number:         10279
>Category:       redex
>Synopsis:       Redex: hide-hole doesn't
>Class:          sw-bug
>Responsible:    clklein
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jun 02 18:52:01 -0400 2009
>Closed-Date:    Wed Mar 30 12:52:45 -0400 2011
>Last-Modified:  Wed Mar 30 12:52:45 -0400 2011
>Originator:     Jay McCarthy
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.0.2-svn27may2009
>Environment:
macosx "Darwin jay-mccarthys-mac-pro.local 9.7.0 Darwin Kernel Version 9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 213213260

Collections:
(("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) ("/Users/jay/Dev/svn/plt/collects" ".DS_Store" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2pa!
 ge" "texpict" "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
hide-hole doesn't work

[Robby has mentioned this to me. Here's a test case. I didn't find one in the repository.]
>How-To-Repeat:
#lang scheme
(require redex
         tests/eli-tester)

(define-language tl-grammar
  [v (cont (hide-hole E))]
  [E hole
     (v ... E)])

(define test-it
  (term-match/single 
   tl-grammar
   [(in-hole E_1 (explode))
    (begin (printf "E_1 is: ~S~n" (term E_1))
           (plug (term E_1) (term 1)))]))

(test
 (test-it 
  (term ((cont hole) (explode))))
 => 
 (term ((cont hole) 1)))
>Fix:
>Audit-Trail:
From: Jay McCarthy <jay@cs.byu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>,
        "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Cc: 
Subject: Re: [plt-bug] all/10279: Redex: hide-hole doesn't
Date: Wed, 3 Jun 2009 10:32:49 -0600

 So I've been working on how to fix this.
 
 To the best of my understanding, the problem is that
 true-compile-pattern in matcher.ss when matching a hide-hole pattern,
 doesn't put the hide-hole in the bindings for the context, so that
 when plug goes back in it doesn't know to ignore the hole that was
 inside of hide-hole.
 
 My other guess (looking at the plug at the top of matcher.ss) is that
 plug doesn't make any attempt to refer to the language and its use of
 hide-hole, but perhaps that's an optimization that is possible given
 the above.
 
 Perhaps a strategy is to compile a plug for each pattern that is
 referenced by plug? Do you have a solution in mind?
 
 Jay
 
 On Tue, Jun 2, 2009 at 4:52 PM,  <jay@cs.byu.edu> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10279
 >
 > Reported by Jay McCarthy for release: 4.2.0.2-svn27may2009
 >
 > *** Description:
 > hide-hole doesn't work
 >
 > [Robby has mentioned this to me. Here's a test case. I didn't find one in=
  the repository.]
 >
 > *** How to repeat:
 > #lang scheme
 > (require redex
 > =A0 =A0 =A0 =A0 tests/eli-tester)
 >
 > (define-language tl-grammar
 > =A0[v (cont (hide-hole E))]
 > =A0[E hole
 > =A0 =A0 (v ... E)])
 >
 > (define test-it
 > =A0(term-match/single
 > =A0 tl-grammar
 > =A0 [(in-hole E_1 (explode))
 > =A0 =A0(begin (printf "E_1 is: ~S~n" (term E_1))
 > =A0 =A0 =A0 =A0 =A0 (plug (term E_1) (term 1)))]))
 >
 > (test
 > =A0(test-it
 > =A0(term ((cont hole) (explode))))
 > =A0=3D>
 > =A0(term ((cont hole) 1)))
 >
 > *** Environment:
 > macosx "Darwin jay-mccarthys-mac-pro.local 9.7.0 Darwin Kernel Version 9.=
 7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i386"=
  (i386-macosx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 213213260
 >
 > Collections:
 > (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) ("/=
 Users/jay/Dev/svn/plt/collects" ".DS_Store" ".svn" "2htdp" "afm" "algol60" =
 "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "dein=
 programm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "fil=
 e" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "han=
 din-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" =
 "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mre=
 d" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-too=
 ls" "planet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "=
 r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scheme=
 unit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" =
 "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swi=
 ndle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine"=
  "tests" "tex2pa!
 > =A0ge" "texpict" "trace" "typed" "typed-scheme" "version" "waterworld" "w=
 eb-server" "wxme" "xml"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) =
 (default) #() "#lang scheme\n" #t))
 >
 >
 
 
 
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay@cs.byu.edu>
Cc: "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/10279: Redex: hide-hole doesn't
Date: Wed, 3 Jun 2009 13:27:10 -0500

 On Wed, Jun 3, 2009 at 11:32 AM, Jay McCarthy <jay@cs.byu.edu> wrote:
 > So I've been working on how to fix this.
 >
 > To the best of my understanding, the problem is that
 > true-compile-pattern in matcher.ss when matching a hide-hole pattern,
 > doesn't put the hide-hole in the bindings for the context, so that
 > when plug goes back in it doesn't know to ignore the hole that was
 > inside of hide-hole.
 
 Something like that strategy is what I had a long time ago. Holes had
 an extra boolean attribute saying if they were "the real hole" or not.
 The problem before was that these booleans weren't being reset
 properly. But maybe that is the core of the right solution: when
 binding pattern variables if a hole is the hole that was used for a
 decomposition (used for in-hole that is), it should get this extra
 attribute set to #t and other ones should not.
 
 But I think this will run into problem since there is really only one
 concrete syntax for 'hole' and that is a good property to have (things
 were cleaned up a bunch when I got rid of that property).
 
 Or maybe the other way: if a hole is matched inside a hide-hole, it
 gets a flag set saying that it is not the "real" hole and then plug
 knows to skip that one.
 
 Another thought I've had along these lines: the in-hole pattern can
 record the path it found to the hole, so if you do a substitution with
 the same pattern that was used as the argument to in-hole, then you
 just pull out the path.
 
 Put another way, imagine that each in-hole in a pattern comes with an
 identifier and the in-hole that shows up on the right-hand side also
 has to have an identifier and those identifiers are bound to paths in
 the term saying which hole was the hole used for the decomposition.
 (To keep things working for hide-hole-less reduction systems, the lack
 of an identifier on an in-hole would mean some standard identifier).
 
 > My other guess (looking at the plug at the top of matcher.ss) is that
 > plug doesn't make any attempt to refer to the language and its use of
 > hide-hole, but perhaps that's an optimization that is possible given
 > the above.
 
 Plug really can't refer to the language, I don't think.
 
 > Perhaps a strategy is to compile a plug for each pattern that is
 > referenced by plug? Do you have a solution in mind?
 
 I don't have a solution in mind. Frustratingly, I had one in mind a
 few months ago, but I can't seem to remember it anymore!
 
 Maybe that just means my old solution was broken, tho.
 
 Robby


State changed from "open" to "closed" by clklein at Wed, 30 Mar 2011 12:52:45 -0400
Reason>>> Holes are still not quite right, but this particular program
works now.

