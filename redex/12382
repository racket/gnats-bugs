From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Nov 18 02:07:39 2011
Received: from mail-gy0-f172.google.com (mail-gy0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id pAI77Y93010313
	for <bugs@bugs.plt-scheme.org>; Fri, 18 Nov 2011 02:07:34 -0500
Message-Id: <201111180707.pAI77UxT010281@champlain.ccs.neu.edu>
Date: Fri, 18 Nov 2011 02:07:30 -0500
From: dvanhorn@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Redex: relations and ... in where clause

>Number:         12382
>Category:       redex
>Synopsis:       Redex: relations and ... in where clause
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Nov 18 02:08:01 -0500 2011
>Closed-Date:    Sun Nov 20 23:51:47 -0500 2011
>Last-Modified:  Sun Nov 20 23:51:47 -0500 2011
>Originator:     David Van Horn
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.0.3--2011-11-17(b93486e/g)
>Environment:
macosx "Darwin doom.local 11.1.0 Darwin Kernel Version 11.1.0: Tue Jul 26 16:07:11 PDT 2011; root:xnu-1699.22.81~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 413853200
Links: (links) = ("var"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/dvanhorn/Library/Racket/5.2.0.3/collects"
 (non-existent-path))
("/Users/dvanhorn/Documents/git/racket/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-sch!
 eme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t))
>Description:
[This is related to PR 12378 and includes commit 755dc28e55.]

Ellipses in where patterns of relations result in a "no pattern variables 
before ellipses in template in: ..." error, but work just fine in judgment
forms.
>How-To-Repeat:
#lang racket
(require redex/reduction-semantics)
(define-language L)

;; syntax: no pattern variables before ellipses in template in: ...
#;
(define-relation L 
  r ⊆ any
  [(r any)
   (where (any_1 ...) ())])

;; OK
(define-judgment-form L
  #:mode (r I)
  [(r any)
   (where (any_1 ...) ())])
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: dvanhorn@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12382: Redex: relations and ... in where clause
Date: Fri, 18 Nov 2011 05:48:24 -0600

 On Fri, Nov 18, 2011 at 1:08 AM,  <dvanhorn@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12382
 >
 > Reported by David Van Horn for release: 5.2.0.3--2011-11-17(b93486e/g)
 >
 > *** Description:
 > [This is related to PR 12378 and includes commit 755dc28e55.]
 >
 > Ellipses in where patterns of relations result in a "no pattern variables
 > before ellipses in template in: ..." error, but work just fine in judgment
 > forms.
 >
 > *** How to repeat:
 > #lang racket
 > (require redex/reduction-semantics)
 > (define-language L)
 >
 > ;; syntax: no pattern variables before ellipses in template in: ...
 > #;
 > (define-relation L
 >  r ⊆ any
 >  [(r any)
 >   (where (any_1 ...) ())])
 >
 > ;; OK
 > (define-judgment-form L
 >  #:mode (r I)
 >  [(r any)
 >   (where (any_1 ...) ())])
 >
 
 Did something get lost in translation here?
 
 Looking at this code, this looks to me like a problem with
 define-judgment-form, not define-relation.
 
 Robby
 
From: David Van Horn <dvanhorn@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12382: Redex: relations and ... in where clause
Date: Fri, 18 Nov 2011 14:22:17 -0500

 On 11/18/11 6:48 AM, Robby Findler wrote:
 > On Fri, Nov 18, 2011 at 1:08 AM,<dvanhorn@ccs.neu.edu>  wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12382
 >>
 >> Reported by David Van Horn for release: 5.2.0.3--2011-11-17(b93486e/g)
 >>
 >> *** Description:
 >> [This is related to PR 12378 and includes commit 755dc28e55.]
 >>
 >> Ellipses in where patterns of relations result in a "no pattern variables
 >> before ellipses in template in: ..." error, but work just fine in judgment
 >> forms.
 >>
 >> *** How to repeat:
 >> #lang racket
 >> (require redex/reduction-semantics)
 >> (define-language L)
 >>
 >> ;; syntax: no pattern variables before ellipses in template in: ...
 >> #;
 >> (define-relation L
 >>   r ⊆ any
 >>   [(r any)
 >>    (where (any_1 ...) ())])
 >>
 >> ;; OK
 >> (define-judgment-form L
 >>   #:mode (r I)
 >>   [(r any)
 >>    (where (any_1 ...) ())])
 >>
 >
 > Did something get lost in translation here?
 >
 > Looking at this code, this looks to me like a problem with
 > define-judgment-form, not define-relation.
 
 I don't think so -- the judgment form works fine; the relation causes a 
 syntax error.  I currently have a judgment that follows this pattern but 
 I'd like to rewrite to a relation (for efficiency), but I can't so long 
 as pattern variables using ... cannot be bound in a relation.
 
 Are you saying the judgment form should also be a syntax error?
 
 David
From: Robby Findler <robby@eecs.northwestern.edu>
To: David Van Horn <dvanhorn@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12382: Redex: relations and ... in where clause
Date: Fri, 18 Nov 2011 13:42:27 -0600

 On Fri, Nov 18, 2011 at 1:22 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 > On 11/18/11 6:48 AM, Robby Findler wrote:
 >>
 >> On Fri, Nov 18, 2011 at 1:08 AM,<dvanhorn@ccs.neu.edu>  wrote:
 >>>
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12382
 >>>
 >>> Reported by David Van Horn for release: 5.2.0.3--2011-11-17(b93486e/g)
 >>>
 >>> *** Description:
 >>> [This is related to PR 12378 and includes commit 755dc28e55.]
 >>>
 >>> Ellipses in where patterns of relations result in a "no pattern variables
 >>> before ellipses in template in: ..." error, but work just fine in
 >>> judgment
 >>> forms.
 >>>
 >>> *** How to repeat:
 >>> #lang racket
 >>> (require redex/reduction-semantics)
 >>> (define-language L)
 >>>
 >>> ;; syntax: no pattern variables before ellipses in template in: ...
 >>> #;
 >>> (define-relation L
 >>>  r ⊆ any
 >>>  [(r any)
 >>>   (where (any_1 ...) ())])
 >>>
 >>> ;; OK
 >>> (define-judgment-form L
 >>>  #:mode (r I)
 >>>  [(r any)
 >>>   (where (any_1 ...) ())])
 >>>
 >>
 >> Did something get lost in translation here?
 >>
 >> Looking at this code, this looks to me like a problem with
 >> define-judgment-form, not define-relation.
 >
 > I don't think so -- the judgment form works fine; the relation causes a
 > syntax error.  I currently have a judgment that follows this pattern but I'd
 > like to rewrite to a relation (for efficiency), but I can't so long as
 > pattern variables using ... cannot be bound in a relation.
 >
 > Are you saying the judgment form should also be a syntax error?
 
 Yes, I think so.
 
 What do you mean by "works fine" here? Where does any_1 get its value?
 
 Maybe an example use of would clarify?
 
 Robby
 
From: David Van Horn <dvanhorn@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12382: Redex: relations and ... in where clause
Date: Fri, 18 Nov 2011 14:49:34 -0500

 On 11/18/11 2:42 PM, Robby Findler wrote:
 > On Fri, Nov 18, 2011 at 1:22 PM, David Van Horn<dvanhorn@ccs.neu.edu>  wrote:
 >> On 11/18/11 6:48 AM, Robby Findler wrote:
 >>>
 >>> On Fri, Nov 18, 2011 at 1:08 AM,<dvanhorn@ccs.neu.edu>    wrote:
 >>>>
 >>>> A new problem report is waiting at
 >>>>   http://bugs.racket-lang.org/query/?cmd=view&pr=12382
 >>>>
 >>>> Reported by David Van Horn for release: 5.2.0.3--2011-11-17(b93486e/g)
 >>>>
 >>>> *** Description:
 >>>> [This is related to PR 12378 and includes commit 755dc28e55.]
 >>>>
 >>>> Ellipses in where patterns of relations result in a "no pattern variables
 >>>> before ellipses in template in: ..." error, but work just fine in
 >>>> judgment
 >>>> forms.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang racket
 >>>> (require redex/reduction-semantics)
 >>>> (define-language L)
 >>>>
 >>>> ;; syntax: no pattern variables before ellipses in template in: ...
 >>>> #;
 >>>> (define-relation L
 >>>>   r ⊆ any
 >>>>   [(r any)
 >>>>    (where (any_1 ...) ())])
 >>>>
 >>>> ;; OK
 >>>> (define-judgment-form L
 >>>>   #:mode (r I)
 >>>>   [(r any)
 >>>>    (where (any_1 ...) ())])
 >>>>
 >>>
 >>> Did something get lost in translation here?
 >>>
 >>> Looking at this code, this looks to me like a problem with
 >>> define-judgment-form, not define-relation.
 >>
 >> I don't think so -- the judgment form works fine; the relation causes a
 >> syntax error.  I currently have a judgment that follows this pattern but I'd
 >> like to rewrite to a relation (for efficiency), but I can't so long as
 >> pattern variables using ... cannot be bound in a relation.
 >>
 >> Are you saying the judgment form should also be a syntax error?
 >
 > Yes, I think so.
 >
 > What do you mean by "works fine" here? Where does any_1 get its value?
 
 (any_1 ...) is bound to the empty list.
 
 > Maybe an example use of would clarify?
 
 Here's the original (line 308):
 
     https://github.com/dvanhorn/var/blob/master/rho/meta.rkt
 
 Look at the last clause of contract-in.
 
 David
 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: David Van Horn <dvanhorn@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12382: Redex: relations and ... in where clause
Date: Fri, 18 Nov 2011 14:29:43 -0600

 Oh, man. I'm an idiot. Yes, I'm now completely confused as to why that
 define-relation doesn't work. I'll look into it.
 
 Sorry for the noise.
 
 Robby
 
 On Fri, Nov 18, 2011 at 1:49 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 > On 11/18/11 2:42 PM, Robby Findler wrote:
 >>
 >> On Fri, Nov 18, 2011 at 1:22 PM, David Van Horn<dvanhorn@ccs.neu.edu>
 >>  wrote:
 >>>
 >>> On 11/18/11 6:48 AM, Robby Findler wrote:
 >>>>
 >>>> On Fri, Nov 18, 2011 at 1:08 AM,<dvanhorn@ccs.neu.edu>    wrote:
 >>>>>
 >>>>> A new problem report is waiting at
 >>>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12382
 >>>>>
 >>>>> Reported by David Van Horn for release: 5.2.0.3--2011-11-17(b93486e/g)
 >>>>>
 >>>>> *** Description:
 >>>>> [This is related to PR 12378 and includes commit 755dc28e55.]
 >>>>>
 >>>>> Ellipses in where patterns of relations result in a "no pattern
 >>>>> variables
 >>>>> before ellipses in template in: ..." error, but work just fine in
 >>>>> judgment
 >>>>> forms.
 >>>>>
 >>>>> *** How to repeat:
 >>>>> #lang racket
 >>>>> (require redex/reduction-semantics)
 >>>>> (define-language L)
 >>>>>
 >>>>> ;; syntax: no pattern variables before ellipses in template in: ...
 >>>>> #;
 >>>>> (define-relation L
 >>>>>  r ⊆ any
 >>>>>  [(r any)
 >>>>>   (where (any_1 ...) ())])
 >>>>>
 >>>>> ;; OK
 >>>>> (define-judgment-form L
 >>>>>  #:mode (r I)
 >>>>>  [(r any)
 >>>>>   (where (any_1 ...) ())])
 >>>>>
 >>>>
 >>>> Did something get lost in translation here?
 >>>>
 >>>> Looking at this code, this looks to me like a problem with
 >>>> define-judgment-form, not define-relation.
 >>>
 >>> I don't think so -- the judgment form works fine; the relation causes a
 >>> syntax error.  I currently have a judgment that follows this pattern but
 >>> I'd
 >>> like to rewrite to a relation (for efficiency), but I can't so long as
 >>> pattern variables using ... cannot be bound in a relation.
 >>>
 >>> Are you saying the judgment form should also be a syntax error?
 >>
 >> Yes, I think so.
 >>
 >> What do you mean by "works fine" here? Where does any_1 get its value?
 >
 > (any_1 ...) is bound to the empty list.
 >
 >> Maybe an example use of would clarify?
 >
 > Here's the original (line 308):
 >
 >   https://github.com/dvanhorn/var/blob/master/rho/meta.rkt
 >
 > Look at the last clause of contract-in.
 >
 > David
 >
 >
 >
 >
 

Responsible changed from "clklein" to "robby" by robby@racket-lang.org at Sun, 20 Nov 2011 23:51:47 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/0a75219438
State changed from "open" to "closed" by robby@racket-lang.org at Sun, 20 Nov 2011 23:51:47 -0500
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/0a75219438
