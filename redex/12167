From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Sep  3 13:17:30 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p83HHQmX013543
	for <bugs@bugs.plt-scheme.org>; Sat, 3 Sep 2011 13:17:26 -0400
Message-Id: <201109031717.p83HHNgo013524@champlain.ccs.neu.edu>
Date: Sat, 3 Sep 2011 13:17:23 -0400
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: feature request: boolean for Redex

>Number:         12167
>Category:       redex
>Synopsis:       feature request: boolean for Redex
>Class:          change-request
>Responsible:    clklein
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Sep 03 13:20:01 -0400 2011
>Last-Modified:  Sun Sep 04 20:32:01 -0400 2011
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.3.6--2011-08-30(e403966/g)
>Environment:
macosx "Darwin africa.local 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 183514692
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/matthias/0Unison/collects/"
 ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/5.1.3.6/collects"
 (non-existent-path))
("/Users/matthias/plt/collects"
 (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine"!
  "tests" "tex2page" "texpict" "tool" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
I would like an additional pattern for Redex: boolean. 

It should match #t, #f, #true, #false, and possibly true and false. 

Thanks. 
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Casey Klein <clklein@eecs.northwestern.edu>
To: matthias@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 15:40:24 -0500

 I've committed but not yet pushed a change that makes the pattern
 `boolean' match values for which the predicate `boolean?' returns
 true.
 
 I'm not sure about the "true and false" part. Do you mean that it
 should perhaps match the symbols with those names? I'm worried that
 making `boolean' intersect with the `variable' patterns will cause
 confusion. For example, a metafunction's `boolean' clause would need
 to come before its `variable' clause. We could of course change the
 meaning of the `variable' patterns, but that would cause its own
 surprises, in addition to potentially breaking existing programs.
 
 Speaking of which, just adding the `boolean' pattern will break
 programs because it prevents them from defining their own non-terminal
 with that name. The BSL model, for example, defines `boolean' to match
 'true and 'false. This definition becomes a static error, at least,
 but the obvious "fix" -- delete the definition -- is wrong if the
 built-in definition only matches values that satisfy the `boolean?'
 predicate.
 
 I'll let you decide if the convenience of a built-in definition is
 worth the risk.
 
 On Sat, Sep 3, 2011 at 12:20 PM,  <matthias@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12167
 >
 > Reported by matthias for release: 5.1.3.6--2011-08-30(e403966/g)
 >
 > *** Description:
 > I would like an additional pattern for Redex: boolean.
 >
 > It should match #t, #f, #true, #false, and possibly true and false.
 >
 > Thanks.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > macosx "Darwin africa.local 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 183514692
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/Users/matthias/0Unison/collects/"
 >  ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
 > ("/Users/matthias/Library/Racket/5.1.3.6/collects"
 >  (non-existent-path))
 > ("/Users/matthias/plt/collects"
 >  (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine"!
 >  "tests" "tex2page" "texpict" "tool" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
 >
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: "matthias@ccs.neu.edu" <matthias@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 15:46:25 -0500

 --0015174c127a24754c04ac23b063
 Content-Type: text/plain; charset=UTF-8
 
 I haven't added it for those reasons. (but I don't mind being overridden).
 
 On Sunday, September 4, 2011, Casey Klein <clklein@eecs.northwestern.edu>
 wrote:
 > I've committed but not yet pushed a change that makes the pattern
 > `boolean' match values for which the predicate `boolean?' returns
 > true.
 >
 > I'm not sure about the "true and false" part. Do you mean that it
 > should perhaps match the symbols with those names? I'm worried that
 > making `boolean' intersect with the `variable' patterns will cause
 > confusion. For example, a metafunction's `boolean' clause would need
 > to come before its `variable' clause. We could of course change the
 > meaning of the `variable' patterns, but that would cause its own
 > surprises, in addition to potentially breaking existing programs.
 >
 > Speaking of which, just adding the `boolean' pattern will break
 > programs because it prevents them from defining their own non-terminal
 > with that name. The BSL model, for example, defines `boolean' to match
 > 'true and 'false. This definition becomes a static error, at least,
 > but the obvious "fix" -- delete the definition -- is wrong if the
 > built-in definition only matches values that satisfy the `boolean?'
 > predicate.
 >
 > I'll let you decide if the convenience of a built-in definition is
 > worth the risk.
 >
 > On Sat, Sep 3, 2011 at 12:20 PM,  <matthias@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12167
 >>
 >> Reported by matthias for release: 5.1.3.6--2011-08-30(e403966/g)
 >>
 >> *** Description:
 >> I would like an additional pattern for Redex: boolean.
 >>
 >> It should match #t, #f, #true, #false, and possibly true and false.
 >>
 >> Thanks.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> macosx "Darwin africa.local 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun
  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386"
 (i386-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 183514692
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/Users/matthias/0Unison/collects/"
 >>  ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain"
 "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils"
 "web"))
 >> ("/Users/matthias/Library/Racket/5.1.3.6/collects"
 >>  (non-existent-path))
 >> ("/Users/matthias/plt/collects"
 >>  (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser"
 "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults"
 "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl"
 "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics"
 "gui-debugger" "guibuilder" "handin-client" "handin-server" "help"
 "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher"
 "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom"
 "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs"
 "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket"
 "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "redex"
 "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme"
 "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail"
 "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants"
 "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery"
 "test-engine"!
 >>  "tests" "tex2page" "texpict" "tool" "trace" "typed" "typed-scheme"
 "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
 >>
 >>
 >
 
 --0015174c127a24754c04ac23b063
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I haven&#39;t added it for those reasons. (but I don&#39;t mind being overr=
 idden).<br><br>On Sunday, September 4, 2011, Casey Klein &lt;<a href=3D"mai=
 lto:clklein@eecs.northwestern.edu">clklein@eecs.northwestern.edu</a>&gt; wr=
 ote:<br>
 &gt; I&#39;ve committed but not yet pushed a change that makes the pattern<=
 br>&gt; `boolean&#39; match values for which the predicate `boolean?&#39; r=
 eturns<br>&gt; true.<br>&gt;<br>&gt; I&#39;m not sure about the &quot;true =
 and false&quot; part. Do you mean that it<br>
 &gt; should perhaps match the symbols with those names? I&#39;m worried tha=
 t<br>&gt; making `boolean&#39; intersect with the `variable&#39; patterns w=
 ill cause<br>&gt; confusion. For example, a metafunction&#39;s `boolean&#39=
 ; clause would need<br>
 &gt; to come before its `variable&#39; clause. We could of course change th=
 e<br>&gt; meaning of the `variable&#39; patterns, but that would cause its =
 own<br>&gt; surprises, in addition to potentially breaking existing program=
 s.<br>
 &gt;<br>&gt; Speaking of which, just adding the `boolean&#39; pattern will =
 break<br>&gt; programs because it prevents them from defining their own non=
 -terminal<br>&gt; with that name. The BSL model, for example, defines `bool=
 ean&#39; to match<br>
 &gt; &#39;true and &#39;false. This definition becomes a static error, at l=
 east,<br>&gt; but the obvious &quot;fix&quot; -- delete the definition -- i=
 s wrong if the<br>&gt; built-in definition only matches values that satisfy=
  the `boolean?&#39;<br>
 &gt; predicate.<br>&gt;<br>&gt; I&#39;ll let you decide if the convenience =
 of a built-in definition is<br>&gt; worth the risk.<br>&gt;<br>&gt; On Sat,=
  Sep 3, 2011 at 12:20 PM, =C2=A0&lt;<a href=3D"mailto:matthias@ccs.neu.edu"=
 >matthias@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;&gt; A new problem report is waiting at<br>&gt;&gt; =C2=A0<a href=3D"ht=
 tp://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D12167">http://bugs.rac=
 ket-lang.org/query/?cmd=3Dview&amp;pr=3D12167</a><br>&gt;&gt;<br>&gt;&gt; R=
 eported by matthias for release: 5.1.3.6--2011-08-30(e403966/g)<br>
 &gt;&gt;<br>&gt;&gt; *** Description:<br>&gt;&gt; I would like an additiona=
 l pattern for Redex: boolean.<br>&gt;&gt;<br>&gt;&gt; It should match #t, #=
 f, #true, #false, and possibly true and false.<br>&gt;&gt;<br>&gt;&gt; Than=
 ks.<br>
 &gt;&gt;<br>&gt;&gt; *** How to repeat:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;=
  *** Environment:<br>&gt;&gt; macosx &quot;Darwin africa.local 10.8.0 Darwi=
 n Kernel Version 10.8.0: Tue Jun =C2=A07 16:33:36 PDT 2011; root:xnu-1504.1=
 5.3~1/RELEASE_I386 i386&quot; (i386-macosx/3m) (get-display-depth) =3D 32<b=
 r>
 &gt;&gt; Human Language: english<br>&gt;&gt; (current-memory-use) 183514692=
 <br>&gt;&gt; Links: (links) =3D (); (links #:user? #f) =3D (); (links #:roo=
 t? #t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>&gt;&gt;<br>&gt;&gt;=
 <br>
 &gt;&gt; Collections:<br>&gt;&gt; (&quot;/Users/matthias/0Unison/collects/&=
 quot;<br>&gt;&gt; =C2=A0(&quot;._.DS_Store&quot; &quot;.DS_Store&quot; &quo=
 t;compiled&quot; &quot;date&quot; &quot;finance&quot; &quot;info-domain&quo=
 t; &quot;info.ss&quot; &quot;pdf.ss~&quot; &quot;session&quot; &quot;short&=
 quot; &quot;testing&quot; &quot;tll-collects&quot; &quot;utils&quot; &quot;=
 web&quot;))<br>
 &gt;&gt; (&quot;/Users/matthias/Library/Racket/<a href=3D"http://5.1.3.6/co=
 llects">5.1.3.6/collects</a>&quot;<br>&gt;&gt; =C2=A0(non-existent-path))<b=
 r>&gt;&gt; (&quot;/Users/matthias/plt/collects&quot;<br>&gt;&gt; =C2=A0(&qu=
 ot;.gitignore&quot; &quot;2htdp&quot; &quot;afm&quot; &quot;algol60&quot; &=
 quot;at-exp&quot; &quot;browser&quot; &quot;combinator-parser&quot; &quot;c=
 ompiler&quot; &quot;config&quot; &quot;data&quot; &quot;datalog&quot; &quot=
 ;db&quot; &quot;defaults&quot; &quot;deinprogramm&quot; &quot;drracket&quot=
 ; &quot;drscheme&quot; &quot;dynext&quot; &quot;embedded-gui&quot; &quot;eo=
 pl&quot; &quot;errortrace&quot; &quot;ffi&quot; &quot;file&quot; &quot;fram=
 ework&quot; &quot;frtime&quot; &quot;games&quot; &quot;graphics&quot; &quot=
 ;gui-debugger&quot; &quot;guibuilder&quot; &quot;handin-client&quot; &quot;=
 handin-server&quot; &quot;help&quot; &quot;hierlist&quot; &quot;honu&quot; =
 &quot;htdp&quot; &quot;html&quot; &quot;icons&quot; &quot;info-domain&quot;=
  &quot;lang&quot; &quot;launcher&quot; &quot;lazy&quot; &quot;macro-debugge=
 r&quot; &quot;make&quot; &quot;meta&quot; &quot;mred&quot; &quot;mrlib&quot=
 ; &quot;mysterx&quot; &quot;mz&quot; &quot;mzcom&quot; &quot;mzlib&quot; &q=
 uot;mzscheme&quot; &quot;net&quot; &quot;openssl&quot; &quot;parser-tools&q=
 uot; &quot;picturing-programs&quot; &quot;plai&quot; &quot;planet&quot; &qu=
 ot;plot&quot; &quot;preprocessor&quot; &quot;profile&quot; &quot;r5rs&quot;=
  &quot;r6rs&quot; &quot;racket&quot; &quot;racklog&quot; &quot;rackunit&quo=
 t; &quot;raclog&quot; &quot;raco&quot; &quot;racunit&quot; &quot;reader&quo=
 t; &quot;readline&quot; &quot;redex&quot; &quot;repo-time-stamp&quot; &quot=
 ;repos-time-stamp&quot; &quot;rnrs&quot; &quot;s-exp&quot; &quot;schelog&qu=
 ot; &quot;scheme&quot; &quot;schemeunit&quot; &quot;scribble&quot; &quot;sc=
 ribblings&quot; &quot;scriblib&quot; &quot;setup&quot; &quot;sgl&quot; &quo=
 t;sirmail&quot; &quot;slatex&quot; &quot;slideshow&quot; &quot;srfi&quot; &=
 quot;srpersist&quot; &quot;stepper&quot; &quot;string-constants&quot; &quot=
 ;swindle&quot; &quot;syntax&quot; &quot;syntax-color&quot; &quot;teachpack&=
 quot; &quot;test-box-recovery&quot; &quot;test-engine&quot;!<br>
 &gt;&gt; =C2=A0&quot;tests&quot; &quot;tex2page&quot; &quot;texpict&quot; &=
 quot;tool&quot; &quot;trace&quot; &quot;typed&quot; &quot;typed-scheme&quot=
 ; &quot;unstable&quot; &quot;version&quot; &quot;waterworld&quot; &quot;web=
 -server&quot; &quot;wxme&quot; &quot;xml&quot; &quot;xrepl&quot;))<br>
 &gt;&gt;<br>&gt;&gt; Computer Language: ((&quot;Determine language from sou=
 rce&quot;) (#(#t print mixed-fraction-e #f #t debug) (default) #() &quot;#l=
 ang racket\n&quot; #t #t))<br>&gt;&gt;<br>&gt;&gt;<br>&gt;
 
 --0015174c127a24754c04ac23b063--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 17:50:00 -0400

 I meant what you implemented but I questioned this: 
 
 > Welcome to Racket v5.1.3.6.
 > > (boolean? true)
 > #t
 > > (boolean? false)
 > #t
 
 
 Let me provide a rationale for my request: 
 
 I am currently solving my Racket homework problems with Redex. 
 Mostly it works like a charm: you get data definitions, you get
 checked signatures, you get testing, you get everything you may
 want -- except for types perhaps. The only problem I encountered
 is that I didn't get a built-in boolean after getting a built-in
 number, string, and one thing I can't recall. 
 
 I almost requested a change to the denotation of 'symbol' but I 
 decided that this wasn't useful. 
 
 ;; --- 
 
 Even larger picture: I intend to teach 'phd-level popl' here 
 with programming in Redex and as little escape into Racket as
 possible: 
 
 syntax is bad
 abstract syntax is in: we need tree-shaped data 
 we need functions on tree-shaped data
 
 Here are S-expressions -- with term and unquote 
 Here is Redex with define-language and define-metafunction 
 
 If you'd like you could postpone the push until I have
 actual experience with this approach. But I am very hopeful. 
 
 
 
 
 
 
 
 On Sep 4, 2011, at 4:40 PM, Casey Klein wrote:
 
 > I've committed but not yet pushed a change that makes the pattern
 > `boolean' match values for which the predicate `boolean?' returns
 > true.
 > 
 > I'm not sure about the "true and false" part. Do you mean that it
 > should perhaps match the symbols with those names? I'm worried that
 > making `boolean' intersect with the `variable' patterns will cause
 > confusion. For example, a metafunction's `boolean' clause would need
 > to come before its `variable' clause. We could of course change the
 > meaning of the `variable' patterns, but that would cause its own
 > surprises, in addition to potentially breaking existing programs.
 > 
 > Speaking of which, just adding the `boolean' pattern will break
 > programs because it prevents them from defining their own non-terminal
 > with that name. The BSL model, for example, defines `boolean' to match
 > 'true and 'false. This definition becomes a static error, at least,
 > but the obvious "fix" -- delete the definition -- is wrong if the
 > built-in definition only matches values that satisfy the `boolean?'
 > predicate.
 > 
 > I'll let you decide if the convenience of a built-in definition is
 > worth the risk.
 > 
 > On Sat, Sep 3, 2011 at 12:20 PM,  <matthias@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12167
 >> 
 >> Reported by matthias for release: 5.1.3.6--2011-08-30(e403966/g)
 >> 
 >> *** Description:
 >> I would like an additional pattern for Redex: boolean.
 >> 
 >> It should match #t, #f, #true, #false, and possibly true and false.
 >> 
 >> Thanks.
 >> 
 >> *** How to repeat:
 >> 
 >> 
 >> *** Environment:
 >> macosx "Darwin africa.local 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 183514692
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >> 
 >> 
 >> Collections:
 >> ("/Users/matthias/0Unison/collects/"
 >>  ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
 >> ("/Users/matthias/Library/Racket/5.1.3.6/collects"
 >>  (non-existent-path))
 >> ("/Users/matthias/plt/collects"
 >>  (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine"!
 >>  "tests" "tex2page" "texpict" "tool" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 >> 
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
 >> 
 >> 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 17:05:44 -0500

 On Sun, Sep 4, 2011 at 4:50 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > I meant what you implemented but I questioned this:
 >
 >> Welcome to Racket v5.1.3.6.
 >> > (boolean? true)
 >> #t
 >> > (boolean? false)
 >> #t
 
 The appropriate questions are not those, but these:
 
   (boolean? 'true)
   (boolean? 'false)
 
 I believe.
 
 >
 > Let me provide a rationale for my request:
 >
 > I am currently solving my Racket homework problems with Redex.
 > Mostly it works like a charm: you get data definitions, you get
 > checked signatures, you get testing, you get everything you may
 > want -- except for types perhaps. The only problem I encountered
 > is that I didn't get a built-in boolean after getting a built-in
 > number, string, and one thing I can't recall.
 >
 > I almost requested a change to the denotation of 'symbol' but I
 > decided that this wasn't useful.
 >
 > ;; ---
 >
 > Even larger picture: I intend to teach 'phd-level popl' here
 > with programming in Redex and as little escape into Racket as
 > possible:
 >
 > syntax is bad
 > abstract syntax is in: we need tree-shaped data
 > we need functions on tree-shaped data
 >
 > Here are S-expressions -- with term and unquote
 > Here is Redex with define-language and define-metafunction
 >
 > If you'd like you could postpone the push until I have
 > actual experience with this approach. But I am very hopeful.
 
 That is enough for me. I think we just have to put it into the release
 notes in a prominent manner and adjust all of the examples we know of.
 
 Robby
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 17:25:44 -0500

 On Sun, Sep 4, 2011 at 5:05 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Sun, Sep 4, 2011 at 4:50 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >>
 >> I meant what you implemented but I questioned this:
 >>
 >>> Welcome to Racket v5.1.3.6.
 >>> > (boolean? true)
 >>> #t
 >>> > (boolean? false)
 >>> #t
 >
 > The appropriate questions are not those, but these:
 >
 >  (boolean? 'true)
 >  (boolean? 'false)
 >
 > I believe.
 >
 
 What if `term' recognized references to `true' and `false' and
 constructed terms containing #t and #f?
 
 When I'm lazy, I build terms with `quote' instead of `term'. I'm sure
 I'll eventually write '(if true 0 1) when I needed to write (term (if
 true 0 1)), but it makes Redex more like Racket for Matthias's
 students.
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 17:28:50 -0500

 Does that solve a problem we have?
 
 If not, then I'd be kind of scared of that.
 
 Robby
 
 On Sun, Sep 4, 2011 at 5:25 PM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > On Sun, Sep 4, 2011 at 5:05 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Sun, Sep 4, 2011 at 4:50 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >>>
 >>> I meant what you implemented but I questioned this:
 >>>
 >>>> Welcome to Racket v5.1.3.6.
 >>>> > (boolean? true)
 >>>> #t
 >>>> > (boolean? false)
 >>>> #t
 >>
 >> The appropriate questions are not those, but these:
 >>
 >>  (boolean? 'true)
 >>  (boolean? 'false)
 >>
 >> I believe.
 >>
 >
 > What if `term' recognized references to `true' and `false' and
 > constructed terms containing #t and #f?
 >
 > When I'm lazy, I build terms with `quote' instead of `term'. I'm sure
 > I'll eventually write '(if true 0 1) when I needed to write (term (if
 > true 0 1)), but it makes Redex more like Racket for Matthias's
 > students.
 >
 
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 18:47:06 -0500

 On Sun, Sep 4, 2011 at 5:28 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Does that solve a problem we have?
 >
 
 It solves what I took to be Matthias's problem, namely that
 
   > (boolean? true)
   #t
 
 but
 
   > (redex-match L boolean (term true))
   #f
 
 It's very possible, though, that I misunderstood.
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 19:56:19 -0400

 On Sun, Sep 4, 2011 at 7:47 PM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > On Sun, Sep 4, 2011 at 5:28 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> Does that solve a problem we have?
 >>
 >
 > It solves what I took to be Matthias's problem, namely that
 >
 >  > (boolean? true)
 >  #t
 >
 > but
 >
 >  > (redex-match L boolean (term true))
 >  #f
 
 > (number? pi)
 #t
 > (redex-match L number (term pi))
 #f
 
 Would we want to change that?
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 20:19:23 -0400

 That's what I had in mind. 
 
 From what I understand Redex treats everything that looks like a Racket var as a symbol (see Sam's message too and the docs). And that doesn't completely jive with Racket. 
 
 
 On Sep 4, 2011, at 7:47 PM, Casey Klein wrote:
 
 > On Sun, Sep 4, 2011 at 5:28 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> Does that solve a problem we have?
 >> 
 > 
 > It solves what I took to be Matthias's problem, namely that
 > 
 >> (boolean? true)
 >  #t
 > 
 > but
 > 
 >> (redex-match L boolean (term true))
 >  #f
 > 
 > It's very possible, though, that I misunderstood.
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 19:24:18 -0500

 You think that 'term' should be sensitive to the lexical environment
 for things like 'true' 'pi' .. and other things? lambda?
 
 That seems wrong -- things inside 'term' are supposed to be object
 language things, and life there is completely randomly different from
 the meta language.
 
 I can see how it makes sense to set up some kind of binding mechanism
 to span levels (there is one, in fact, but only gets used internally
 by redex tools now, I believe) but I'm having trouble with seeing how
 doing this with regular old racket identifiers is fitting into a
 coherent picture of what object langauges in redex are like.
 
 Robby
 
 On Sun, Sep 4, 2011 at 7:19 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > That's what I had in mind.
 >
 > From what I understand Redex treats everything that looks like a Racket var as a symbol (see Sam's message too and the docs). And that doesn't completely jive with Racket.
 >
 >
 > On Sep 4, 2011, at 7:47 PM, Casey Klein wrote:
 >
 >> On Sun, Sep 4, 2011 at 5:28 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> Does that solve a problem we have?
 >>>
 >>
 >> It solves what I took to be Matthias's problem, namely that
 >>
 >>> (boolean? true)
 >>  #t
 >>
 >> but
 >>
 >>> (redex-match L boolean (term true))
 >>  #f
 >>
 >> It's very possible, though, that I misunderstood.
 >
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 20:26:22 -0400

 On Sep 4, 2011, at 8:24 PM, Robby Findler wrote:
 
 > You think that 'term' should be sensitive to the lexical environment
 > for things like 'true' 'pi' .. and other things? lambda?
 > 
 > That seems wrong -- things inside 'term' are supposed to be object
 > language things, and life there is completely randomly different from
 > the meta language.
 > 
 
 Numbers are numbers. Strings are strings. One day we may 
 say variables are variables -- when you finally give in 
 to Eli's HOAS temptations. 
 
 
 > I can see how it makes sense to set up some kind of binding mechanism
 > to span levels (there is one, in fact, but only gets used internally
 > by redex tools now, I believe) but I'm having trouble with seeing how
 > doing this with regular old racket identifiers is fitting into a
 > coherent picture of what object langauges in redex are like.
 
 
 For now, I'd be happy to share #t, #f, #true, and #false. 
 We can leave true and false along but we need better docs
 than saying boolean denotes the values for which boolean? 
 holds. 
 
 
 
 
 > 
 > Robby
 > 
 > On Sun, Sep 4, 2011 at 7:19 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> 
 >> That's what I had in mind.
 >> 
 >> From what I understand Redex treats everything that looks like a Racket var as a symbol (see Sam's message too and the docs). And that doesn't completely jive with Racket.
 >> 
 >> 
 >> On Sep 4, 2011, at 7:47 PM, Casey Klein wrote:
 >> 
 >>> On Sun, Sep 4, 2011 at 5:28 PM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>> Does that solve a problem we have?
 >>>> 
 >>> 
 >>> It solves what I took to be Matthias's problem, namely that
 >>> 
 >>>> (boolean? true)
 >>>  #t
 >>> 
 >>> but
 >>> 
 >>>> (redex-match L boolean (term true))
 >>>  #f
 >>> 
 >>> It's very possible, though, that I misunderstood.
 >> 
 >> 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody@racket-lang.org,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12167: feature request: boolean for Redex
Date: Sun, 4 Sep 2011 19:28:45 -0500

 Okay. I think that's the right thing for now, too.
 
 And your point about strings & numbers is well taken. FWIW, I've
 always thought of that as kind of a trick (and during demos I have to
 kind wave my hands about it to non-LISP/Schemers) but maybe I should
 be embracing it more. I'm having a hard time getting behind that point
 of view, since I do find it confusing to people who don't live and
 breathe quasiquote, tho. But maybe the reality is that none of those
 people use Redex anyways.
 
 Robby
 
 On Sun, Sep 4, 2011 at 7:26 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > On Sep 4, 2011, at 8:24 PM, Robby Findler wrote:
 >
 >> You think that 'term' should be sensitive to the lexical environment
 >> for things like 'true' 'pi' .. and other things? lambda?
 >>
 >> That seems wrong -- things inside 'term' are supposed to be object
 >> language things, and life there is completely randomly different from
 >> the meta language.
 >>
 >
 > Numbers are numbers. Strings are strings. One day we may
 > say variables are variables -- when you finally give in
 > to Eli's HOAS temptations.
 >
 >
 >> I can see how it makes sense to set up some kind of binding mechanism
 >> to span levels (there is one, in fact, but only gets used internally
 >> by redex tools now, I believe) but I'm having trouble with seeing how
 >> doing this with regular old racket identifiers is fitting into a
 >> coherent picture of what object langauges in redex are like.
 >
 >
 > For now, I'd be happy to share #t, #f, #true, and #false.
 > We can leave true and false along but we need better docs
 > than saying boolean denotes the values for which boolean?
 > holds.
 >
 >
 >
 >
 >>
 >> Robby
 >>
 >> On Sun, Sep 4, 2011 at 7:19 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >>>
 >>> That's what I had in mind.
 >>>
 >>> From what I understand Redex treats everything that looks like a Racket var as a symbol (see Sam's message too and the docs). And that doesn't completely jive with Racket.
 >>>
 >>>
 >>> On Sep 4, 2011, at 7:47 PM, Casey Klein wrote:
 >>>
 >>>> On Sun, Sep 4, 2011 at 5:28 PM, Robby Findler
 >>>> <robby@eecs.northwestern.edu> wrote:
 >>>>> Does that solve a problem we have?
 >>>>>
 >>>>
 >>>> It solves what I took to be Matthias's problem, namely that
 >>>>
 >>>>> (boolean? true)
 >>>>  #t
 >>>>
 >>>> but
 >>>>
 >>>>> (redex-match L boolean (term true))
 >>>>  #f
 >>>>
 >>>> It's very possible, though, that I misunderstood.
 >>>
 >>>
 >
 >
 
