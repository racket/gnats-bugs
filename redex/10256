From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri May 22 12:11:21 2009
Received: from qw-out-2122.google.com (qw-out-2122.google.com [74.125.92.25])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n4MGBC09029460
	for <bugs@bugs.plt-scheme.org>; Fri, 22 May 2009 12:11:12 -0400
Message-Id: <200905221609.n4MG9ine029427@champlain.ccs.neu.edu>
Date: Fri, 22 May 2009 12:09:44 -0400
From: jay@plt-scheme.org
To: bugs@plt-scheme.org
Subject: Redex feature request: metafunctions from one language to another

>Number:         10256
>Category:       redex
>Synopsis:       Redex feature request: metafunctions from one language to another
>Class:          change-request
>Responsible:    clklein
>Severity:       serious
>Priority:       medium
>State:          analyzed
>Confidential:   no
>Arrival-Date:   Fri May 22 12:12:01 -0400 2009
>Closed-Date:    
>Last-Modified:  Wed Mar 30 12:49:43 -0400 2011
>Originator:     Jay McCarthy
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.0.2-svn19may2009
>Environment:
macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Version 9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 203039956

Collections:
(("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) ("/Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict!
 " "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
I'm making a redex model of the ICFP'05 paper and had some annoyance trying to encode the CMT translation as a metafunction. Each part looks like:

(define-metafunction sl-grammar+cmt
  CMT-x : x -> any
  ....)

The RHS of the contract must be 'any' because it produces things that are not terms of the source language, by virtue of being a compiler.

I'd like something like

(define-metatranslation 
  sl-grammar+cmt -> tl-grammar
  CMT-a : a -> a
  ....)

where the a on the left is from the first language (sl), but the a on the right is from the second language (tl).
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: jay@plt-scheme.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org,
        sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10256: Redex feature request: metafunctions from 
	one language to another
Date: Fri, 22 May 2009 11:15:03 -0500

 What I've done is just put the two languages together into a single
 language (grammar). Does that not work here?
 
 Robby
 
 On Fri, May 22, 2009 at 11:12 AM,  <jay@plt-scheme.org> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10256
 >
 > Reported by Jay McCarthy for release: 4.2.0.2-svn19may2009
 >
 > *** Description:
 > I'm making a redex model of the ICFP'05 paper and had some annoyance tryi=
 ng to encode the CMT translation as a metafunction. Each part looks like:
 >
 > (define-metafunction sl-grammar+cmt
 > =C2=A0CMT-x : x -> any
 > =C2=A0....)
 >
 > The RHS of the contract must be 'any' because it produces things that are=
  not terms of the source language, by virtue of being a compiler.
 >
 > I'd like something like
 >
 > (define-metatranslation
 > =C2=A0sl-grammar+cmt -> tl-grammar
 > =C2=A0CMT-a : a -> a
 > =C2=A0....)
 >
 > where the a on the left is from the first language (sl), but the a on the=
  right is from the second language (tl).
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Version 9.=
 7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i386"=
  (i386-macosx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 203039956
 >
 > Collections:
 > (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) ("/=
 Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "br=
 owser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "d=
 rscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framewor=
 k" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" =
 "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "inf=
 o-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "=
 mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet"=
  "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "readl=
 ine" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scrib=
 ble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" =
 "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "synta=
 x" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "te=
 x2page" "texpict!
 > =C2=A0" "trace" "typed" "typed-scheme" "version" "waterworld" "web-server=
 " "wxme" "xml"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) =
 (default) #() "#lang scheme\n" #t))
 >
 >
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: jay@plt-scheme.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10256: Redex feature request: metafunctions from 
	one language to another
Date: Fri, 22 May 2009 12:20:47 -0400

 Are you saying
 
 (define-language sl+tl
  [sl-e ...]
  [tl-e ...])
 
 ...
 
 sl-e -> tl-e
 
 ?
 
 Yes, that would work but is inelegant IMHO.
 
 I wish that one language were an extension of the other, but that's
 not the case here. That would be easy to do something similar.
 
 One solution might be more language combinators than just 'extension',
 that would automatically put in prefixes, etc.
 
 Jay
 
 On Fri, May 22, 2009 at 12:15 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > What I've done is just put the two languages together into a single
 > language (grammar). Does that not work here?
 >
 > Robby
 >
 > On Fri, May 22, 2009 at 11:12 AM, =A0<jay@plt-scheme.org> wrote:
 >> A new problem report is waiting at
 >> =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10256
 >>
 >> Reported by Jay McCarthy for release: 4.2.0.2-svn19may2009
 >>
 >> *** Description:
 >> I'm making a redex model of the ICFP'05 paper and had some annoyance try=
 ing to encode the CMT translation as a metafunction. Each part looks like:
 >>
 >> (define-metafunction sl-grammar+cmt
 >> =A0CMT-x : x -> any
 >> =A0....)
 >>
 >> The RHS of the contract must be 'any' because it produces things that ar=
 e not terms of the source language, by virtue of being a compiler.
 >>
 >> I'd like something like
 >>
 >> (define-metatranslation
 >> =A0sl-grammar+cmt -> tl-grammar
 >> =A0CMT-a : a -> a
 >> =A0....)
 >>
 >> where the a on the left is from the first language (sl), but the a on th=
 e right is from the second language (tl).
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Version 9=
 .7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i386=
 " (i386-macosx/3m) (get-display-depth) =3D 32
 >> Human Language: english
 >> (current-memory-use) 203039956
 >>
 >> Collections:
 >> (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) ("=
 /Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "b=
 rowser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "=
 drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framewo=
 rk" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client"=
  "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "in=
 fo-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" =
 "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet=
 " "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "read=
 line" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scri=
 bble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow"=
  "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "synt=
 ax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "t=
 ex2page" "texpict!
 >> =A0" "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" =
 "wxme" "xml"))
 >> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug)=
  (default) #() "#lang scheme\n" #t))
 >>
 >>
 >
 
 
 
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: jay@plt-scheme.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10256: Redex feature request: metafunctions from 
	one language to another
Date: Fri, 22 May 2009 13:22:50 -0500

 The way Redex ties patterns to non-terminals makes me think it will
 get quickly strange to try to have a single metafunction that uses two
 languages. For example, when you write, say, this case of a
 metafunction:
 
 [(f exp_1 exp_2) exp_1]
 
 we should know that exp is a non-terminal in the language. Now it
 would have to be a non-terminal in the output language too, right?
 What if the corresponding non-terminal actually has a different name?
 You can't use a different name than "exp_1" (since it won't be the
 same variable anymore).
 
 Well, that's where I'm getting stuck see how your proposal of keeping
 the language separate is going to work, anyways.
 
 Robby
 
 On Fri, May 22, 2009 at 11:20 AM, Jay McCarthy <jay.mccarthy@gmail.com> wro=
 te:
 > Are you saying
 >
 > (define-language sl+tl
 > =C2=A0[sl-e ...]
 > =C2=A0[tl-e ...])
 >
 > ...
 >
 > sl-e -> tl-e
 >
 > ?
 >
 > Yes, that would work but is inelegant IMHO.
 >
 > I wish that one language were an extension of the other, but that's
 > not the case here. That would be easy to do something similar.
 >
 > One solution might be more language combinators than just 'extension',
 > that would automatically put in prefixes, etc.
 >
 > Jay
 >
 > On Fri, May 22, 2009 at 12:15 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> What I've done is just put the two languages together into a single
 >> language (grammar). Does that not work here?
 >>
 >> Robby
 >>
 >> On Fri, May 22, 2009 at 11:12 AM, =C2=A0<jay@plt-scheme.org> wrote:
 >>> A new problem report is waiting at
 >>> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10256
 >>>
 >>> Reported by Jay McCarthy for release: 4.2.0.2-svn19may2009
 >>>
 >>> *** Description:
 >>> I'm making a redex model of the ICFP'05 paper and had some annoyance tr=
 ying to encode the CMT translation as a metafunction. Each part looks like:
 >>>
 >>> (define-metafunction sl-grammar+cmt
 >>> =C2=A0CMT-x : x -> any
 >>> =C2=A0....)
 >>>
 >>> The RHS of the contract must be 'any' because it produces things that a=
 re not terms of the source language, by virtue of being a compiler.
 >>>
 >>> I'd like something like
 >>>
 >>> (define-metatranslation
 >>> =C2=A0sl-grammar+cmt -> tl-grammar
 >>> =C2=A0CMT-a : a -> a
 >>> =C2=A0....)
 >>>
 >>> where the a on the left is from the first language (sl), but the a on t=
 he right is from the second language (tl).
 >>>
 >>> *** How to repeat:
 >>>
 >>>
 >>> *** Environment:
 >>> macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Version =
 9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i38=
 6" (i386-macosx/3m) (get-display-depth) =3D 32
 >>> Human Language: english
 >>> (current-memory-use) 203039956
 >>>
 >>> Collections:
 >>> (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) (=
 "/Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "=
 browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" =
 "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framew=
 ork" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client=
 " "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "i=
 nfo-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib"=
  "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plane=
 t" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "rea=
 dline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scr=
 ibble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow=
 " "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syn=
 tax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "=
 tex2page" "texpict!
 >>> =C2=A0" "trace" "typed" "typed-scheme" "version" "waterworld" "web-serv=
 er" "wxme" "xml"))
 >>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug=
 ) (default) #() "#lang scheme\n" #t))
 >>>
 >>>
 >>
 >
 >
 >
 > --
 > Jay McCarthy <jay@cs.byu.edu>
 > Assistant Professor / Brigham Young University
 > http://teammccarthy.org/jay
 >
 > "The glory of God is Intelligence" - D&C 93
 >
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: jay@plt-scheme.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10256: Redex feature request: metafunctions from 
	one language to another
Date: Fri, 22 May 2009 14:46:54 -0400

 That's a good point I hadn't thought of.
 
 Perhaps something in the short run is a way of having a scheme
 procedure in the contract in some position. That way I can write:
 
 (define tl:a? (redex-match tl-grammar a))
 (define-metafunction sl-grammar
  CMT-a : a -> ,tl:a?
  ...)
 
 and get the contract checking. (That's all I really want anyways and I
 can't do it myself because the metafunctions are syntax so the normal
 contract system can't be used on them, AFAICT.)
 
 Jay
 
 On Fri, May 22, 2009 at 2:22 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > The way Redex ties patterns to non-terminals makes me think it will
 > get quickly strange to try to have a single metafunction that uses two
 > languages. For example, when you write, say, this case of a
 > metafunction:
 >
 > [(f exp_1 exp_2) exp_1]
 >
 > we should know that exp is a non-terminal in the language. Now it
 > would have to be a non-terminal in the output language too, right?
 > What if the corresponding non-terminal actually has a different name?
 > You can't use a different name than "exp_1" (since it won't be the
 > same variable anymore).
 >
 > Well, that's where I'm getting stuck see how your proposal of keeping
 > the language separate is going to work, anyways.
 >
 > Robby
 >
 > On Fri, May 22, 2009 at 11:20 AM, Jay McCarthy <jay.mccarthy@gmail.com> w=
 rote:
 >> Are you saying
 >>
 >> (define-language sl+tl
 >> =A0[sl-e ...]
 >> =A0[tl-e ...])
 >>
 >> ...
 >>
 >> sl-e -> tl-e
 >>
 >> ?
 >>
 >> Yes, that would work but is inelegant IMHO.
 >>
 >> I wish that one language were an extension of the other, but that's
 >> not the case here. That would be easy to do something similar.
 >>
 >> One solution might be more language combinators than just 'extension',
 >> that would automatically put in prefixes, etc.
 >>
 >> Jay
 >>
 >> On Fri, May 22, 2009 at 12:15 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> What I've done is just put the two languages together into a single
 >>> language (grammar). Does that not work here?
 >>>
 >>> Robby
 >>>
 >>> On Fri, May 22, 2009 at 11:12 AM, =A0<jay@plt-scheme.org> wrote:
 >>>> A new problem report is waiting at
 >>>> =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10256
 >>>>
 >>>> Reported by Jay McCarthy for release: 4.2.0.2-svn19may2009
 >>>>
 >>>> *** Description:
 >>>> I'm making a redex model of the ICFP'05 paper and had some annoyance t=
 rying to encode the CMT translation as a metafunction. Each part looks like=
 :
 >>>>
 >>>> (define-metafunction sl-grammar+cmt
 >>>> =A0CMT-x : x -> any
 >>>> =A0....)
 >>>>
 >>>> The RHS of the contract must be 'any' because it produces things that =
 are not terms of the source language, by virtue of being a compiler.
 >>>>
 >>>> I'd like something like
 >>>>
 >>>> (define-metatranslation
 >>>> =A0sl-grammar+cmt -> tl-grammar
 >>>> =A0CMT-a : a -> a
 >>>> =A0....)
 >>>>
 >>>> where the a on the left is from the first language (sl), but the a on =
 the right is from the second language (tl).
 >>>>
 >>>> *** How to repeat:
 >>>>
 >>>>
 >>>> *** Environment:
 >>>> macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Version=
  9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i3=
 86" (i386-macosx/3m) (get-display-depth) =3D 32
 >>>> Human Language: english
 >>>> (current-memory-use) 203039956
 >>>>
 >>>> Collections:
 >>>> (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) =
 ("/Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" =
 "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm"=
  "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "frame=
 work" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-clien=
 t" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "=
 info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib=
 " "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plan=
 et" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "re=
 adline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "sc=
 ribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slidesho=
 w" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "sy=
 ntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" =
 "tex2page" "texpict!
 >>>> =A0" "trace" "typed" "typed-scheme" "version" "waterworld" "web-server=
 " "wxme" "xml"))
 >>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debu=
 g) (default) #() "#lang scheme\n" #t))
 >>>>
 >>>>
 >>>
 >>
 >>
 >>
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://teammccarthy.org/jay
 >>
 >> "The glory of God is Intelligence" - D&C 93
 >>
 >
 
 
 
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: jay@plt-scheme.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10256: Redex feature request: metafunctions from 
	one language to another
Date: Fri, 22 May 2009 13:48:51 -0500

 This should do it:
 
   (side-condition any_1 (tl:a? (term any_1)))
 
 In general, the contract thingies are all redex patterns (in the
 "repeated names don't have to be the same" mode).
 
 Robby
 
 On Fri, May 22, 2009 at 1:46 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrot=
 e:
 > That's a good point I hadn't thought of.
 >
 > Perhaps something in the short run is a way of having a scheme
 > procedure in the contract in some position. That way I can write:
 >
 > (define tl:a? (redex-match tl-grammar a))
 > (define-metafunction sl-grammar
 > =C2=A0CMT-a : a -> ,tl:a?
 > =C2=A0...)
 >
 > and get the contract checking. (That's all I really want anyways and I
 > can't do it myself because the metafunctions are syntax so the normal
 > contract system can't be used on them, AFAICT.)
 >
 > Jay
 >
 > On Fri, May 22, 2009 at 2:22 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> The way Redex ties patterns to non-terminals makes me think it will
 >> get quickly strange to try to have a single metafunction that uses two
 >> languages. For example, when you write, say, this case of a
 >> metafunction:
 >>
 >> [(f exp_1 exp_2) exp_1]
 >>
 >> we should know that exp is a non-terminal in the language. Now it
 >> would have to be a non-terminal in the output language too, right?
 >> What if the corresponding non-terminal actually has a different name?
 >> You can't use a different name than "exp_1" (since it won't be the
 >> same variable anymore).
 >>
 >> Well, that's where I'm getting stuck see how your proposal of keeping
 >> the language separate is going to work, anyways.
 >>
 >> Robby
 >>
 >> On Fri, May 22, 2009 at 11:20 AM, Jay McCarthy <jay.mccarthy@gmail.com> =
 wrote:
 >>> Are you saying
 >>>
 >>> (define-language sl+tl
 >>> =C2=A0[sl-e ...]
 >>> =C2=A0[tl-e ...])
 >>>
 >>> ...
 >>>
 >>> sl-e -> tl-e
 >>>
 >>> ?
 >>>
 >>> Yes, that would work but is inelegant IMHO.
 >>>
 >>> I wish that one language were an extension of the other, but that's
 >>> not the case here. That would be easy to do something similar.
 >>>
 >>> One solution might be more language combinators than just 'extension',
 >>> that would automatically put in prefixes, etc.
 >>>
 >>> Jay
 >>>
 >>> On Fri, May 22, 2009 at 12:15 PM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>> What I've done is just put the two languages together into a single
 >>>> language (grammar). Does that not work here?
 >>>>
 >>>> Robby
 >>>>
 >>>> On Fri, May 22, 2009 at 11:12 AM, =C2=A0<jay@plt-scheme.org> wrote:
 >>>>> A new problem report is waiting at
 >>>>> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10256
 >>>>>
 >>>>> Reported by Jay McCarthy for release: 4.2.0.2-svn19may2009
 >>>>>
 >>>>> *** Description:
 >>>>> I'm making a redex model of the ICFP'05 paper and had some annoyance =
 trying to encode the CMT translation as a metafunction. Each part looks lik=
 e:
 >>>>>
 >>>>> (define-metafunction sl-grammar+cmt
 >>>>> =C2=A0CMT-x : x -> any
 >>>>> =C2=A0....)
 >>>>>
 >>>>> The RHS of the contract must be 'any' because it produces things that=
  are not terms of the source language, by virtue of being a compiler.
 >>>>>
 >>>>> I'd like something like
 >>>>>
 >>>>> (define-metatranslation
 >>>>> =C2=A0sl-grammar+cmt -> tl-grammar
 >>>>> =C2=A0CMT-a : a -> a
 >>>>> =C2=A0....)
 >>>>>
 >>>>> where the a on the left is from the first language (sl), but the a on=
  the right is from the second language (tl).
 >>>>>
 >>>>> *** How to repeat:
 >>>>>
 >>>>>
 >>>>> *** Environment:
 >>>>> macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Versio=
 n 9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i=
 386" (i386-macosx/3m) (get-display-depth) =3D 32
 >>>>> Human Language: english
 >>>>> (current-memory-use) 203039956
 >>>>>
 >>>>> Collections:
 >>>>> (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path)=
  ("/Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp"=
  "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm=
 " "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "fram=
 ework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-clie=
 nt" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" =
 "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrli=
 b" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "pla=
 net" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "r=
 eadline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "s=
 cribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slidesh=
 ow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "s=
 yntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests"=
  "tex2page" "texpict!
 >>>>> =C2=A0" "trace" "typed" "typed-scheme" "version" "waterworld" "web-se=
 rver" "wxme" "xml"))
 >>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t deb=
 ug) (default) #() "#lang scheme\n" #t))
 >>>>>
 >>>>>
 >>>>
 >>>
 >>>
 >>>
 >>> --
 >>> Jay McCarthy <jay@cs.byu.edu>
 >>> Assistant Professor / Brigham Young University
 >>> http://teammccarthy.org/jay
 >>>
 >>> "The glory of God is Intelligence" - D&C 93
 >>>
 >>
 >
 >
 >
 > --
 > Jay McCarthy <jay@cs.byu.edu>
 > Assistant Professor / Brigham Young University
 > http://teammccarthy.org/jay
 >
 > "The glory of God is Intelligence" - D&C 93
 >
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: jay@plt-scheme.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10256: Redex feature request: metafunctions from 
	one language to another
Date: Fri, 22 May 2009 15:06:51 -0400

 That's cool.
 
 However, when I try it:
 
 (define tl:v? (redex-match tl-grammar v))
 (define-metafunction sl-grammar+cmt
   CMT-v : v -> (side-condition any_1 (tl:a? (term any_1)))
  ....)
 
 > (term (CMT-v (! "foo")))
 procedure application: expected procedure, given: ,(lambda (bindings)
 (term-let ((any_1 (lookup-binding bindings 'any_1))) (tl:a? (term
 any_1)))); arguments were: #(struct:bindings (#(struct:bind any_1 (!
 "foo"))))
 >
 
 It looks like rewrite-side-conditions isn't working right...
 
 Jay
 
 On Fri, May 22, 2009 at 2:48 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > This should do it:
 >
 > =A0(side-condition any_1 (tl:a? (term any_1)))
 >
 > In general, the contract thingies are all redex patterns (in the
 > "repeated names don't have to be the same" mode).
 >
 > Robby
 >
 > On Fri, May 22, 2009 at 1:46 PM, Jay McCarthy <jay.mccarthy@gmail.com> wr=
 ote:
 >> That's a good point I hadn't thought of.
 >>
 >> Perhaps something in the short run is a way of having a scheme
 >> procedure in the contract in some position. That way I can write:
 >>
 >> (define tl:a? (redex-match tl-grammar a))
 >> (define-metafunction sl-grammar
 >> =A0CMT-a : a -> ,tl:a?
 >> =A0...)
 >>
 >> and get the contract checking. (That's all I really want anyways and I
 >> can't do it myself because the metafunctions are syntax so the normal
 >> contract system can't be used on them, AFAICT.)
 >>
 >> Jay
 >>
 >> On Fri, May 22, 2009 at 2:22 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> The way Redex ties patterns to non-terminals makes me think it will
 >>> get quickly strange to try to have a single metafunction that uses two
 >>> languages. For example, when you write, say, this case of a
 >>> metafunction:
 >>>
 >>> [(f exp_1 exp_2) exp_1]
 >>>
 >>> we should know that exp is a non-terminal in the language. Now it
 >>> would have to be a non-terminal in the output language too, right?
 >>> What if the corresponding non-terminal actually has a different name?
 >>> You can't use a different name than "exp_1" (since it won't be the
 >>> same variable anymore).
 >>>
 >>> Well, that's where I'm getting stuck see how your proposal of keeping
 >>> the language separate is going to work, anyways.
 >>>
 >>> Robby
 >>>
 >>> On Fri, May 22, 2009 at 11:20 AM, Jay McCarthy <jay.mccarthy@gmail.com>=
  wrote:
 >>>> Are you saying
 >>>>
 >>>> (define-language sl+tl
 >>>> =A0[sl-e ...]
 >>>> =A0[tl-e ...])
 >>>>
 >>>> ...
 >>>>
 >>>> sl-e -> tl-e
 >>>>
 >>>> ?
 >>>>
 >>>> Yes, that would work but is inelegant IMHO.
 >>>>
 >>>> I wish that one language were an extension of the other, but that's
 >>>> not the case here. That would be easy to do something similar.
 >>>>
 >>>> One solution might be more language combinators than just 'extension',
 >>>> that would automatically put in prefixes, etc.
 >>>>
 >>>> Jay
 >>>>
 >>>> On Fri, May 22, 2009 at 12:15 PM, Robby Findler
 >>>> <robby@eecs.northwestern.edu> wrote:
 >>>>> What I've done is just put the two languages together into a single
 >>>>> language (grammar). Does that not work here?
 >>>>>
 >>>>> Robby
 >>>>>
 >>>>> On Fri, May 22, 2009 at 11:12 AM, =A0<jay@plt-scheme.org> wrote:
 >>>>>> A new problem report is waiting at
 >>>>>> =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10256
 >>>>>>
 >>>>>> Reported by Jay McCarthy for release: 4.2.0.2-svn19may2009
 >>>>>>
 >>>>>> *** Description:
 >>>>>> I'm making a redex model of the ICFP'05 paper and had some annoyance=
  trying to encode the CMT translation as a metafunction. Each part looks li=
 ke:
 >>>>>>
 >>>>>> (define-metafunction sl-grammar+cmt
 >>>>>> =A0CMT-x : x -> any
 >>>>>> =A0....)
 >>>>>>
 >>>>>> The RHS of the contract must be 'any' because it produces things tha=
 t are not terms of the source language, by virtue of being a compiler.
 >>>>>>
 >>>>>> I'd like something like
 >>>>>>
 >>>>>> (define-metatranslation
 >>>>>> =A0sl-grammar+cmt -> tl-grammar
 >>>>>> =A0CMT-a : a -> a
 >>>>>> =A0....)
 >>>>>>
 >>>>>> where the a on the left is from the first language (sl), but the a o=
 n the right is from the second language (tl).
 >>>>>>
 >>>>>> *** How to repeat:
 >>>>>>
 >>>>>>
 >>>>>> *** Environment:
 >>>>>> macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Versi=
 on 9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 =
 i386" (i386-macosx/3m) (get-display-depth) =3D 32
 >>>>>> Human Language: english
 >>>>>> (current-memory-use) 203039956
 >>>>>>
 >>>>>> Collections:
 >>>>>> (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-path=
 ) ("/Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp=
 " "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogram=
 m" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "fra=
 mework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-cli=
 ent" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons"=
  "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrl=
 ib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "pl=
 anet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "=
 readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "=
 scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slides=
 how" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "=
 syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests=
 " "tex2page" "texpict!
 >>>>>> =A0" "trace" "typed" "typed-scheme" "version" "waterworld" "web-serv=
 er" "wxme" "xml"))
 >>>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t de=
 bug) (default) #() "#lang scheme\n" #t))
 >>>>>>
 >>>>>>
 >>>>>
 >>>>
 >>>>
 >>>>
 >>>> --
 >>>> Jay McCarthy <jay@cs.byu.edu>
 >>>> Assistant Professor / Brigham Young University
 >>>> http://teammccarthy.org/jay
 >>>>
 >>>> "The glory of God is Intelligence" - D&C 93
 >>>>
 >>>
 >>
 >>
 >>
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://teammccarthy.org/jay
 >>
 >> "The glory of God is Intelligence" - D&C 93
 >>
 >
 
 
 
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/10256: Redex feature request: metafunctions from 
	one language to another
Date: Fri, 22 May 2009 14:20:38 -0500

 I've checked in a fix, thanks.
 
 Do you want this to go in to the release? (If you're not planning on
 using this code with students or whatever in the next two months, I'd
 be just as happy not messing w/ the release.)
 
 Robby
 
 On Fri, May 22, 2009 at 2:06 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrot=
 e:
 > That's cool.
 >
 > However, when I try it:
 >
 > (define tl:v? (redex-match tl-grammar v))
 > (define-metafunction sl-grammar+cmt
 > =C2=A0CMT-v : v -> (side-condition any_1 (tl:a? (term any_1)))
 > =C2=A0....)
 >
 >> (term (CMT-v (! "foo")))
 > procedure application: expected procedure, given: ,(lambda (bindings)
 > (term-let ((any_1 (lookup-binding bindings 'any_1))) (tl:a? (term
 > any_1)))); arguments were: #(struct:bindings (#(struct:bind any_1 (!
 > "foo"))))
 >>
 >
 > It looks like rewrite-side-conditions isn't working right...
 >
 > Jay
 >
 > On Fri, May 22, 2009 at 2:48 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> This should do it:
 >>
 >> =C2=A0(side-condition any_1 (tl:a? (term any_1)))
 >>
 >> In general, the contract thingies are all redex patterns (in the
 >> "repeated names don't have to be the same" mode).
 >>
 >> Robby
 >>
 >> On Fri, May 22, 2009 at 1:46 PM, Jay McCarthy <jay.mccarthy@gmail.com> w=
 rote:
 >>> That's a good point I hadn't thought of.
 >>>
 >>> Perhaps something in the short run is a way of having a scheme
 >>> procedure in the contract in some position. That way I can write:
 >>>
 >>> (define tl:a? (redex-match tl-grammar a))
 >>> (define-metafunction sl-grammar
 >>> =C2=A0CMT-a : a -> ,tl:a?
 >>> =C2=A0...)
 >>>
 >>> and get the contract checking. (That's all I really want anyways and I
 >>> can't do it myself because the metafunctions are syntax so the normal
 >>> contract system can't be used on them, AFAICT.)
 >>>
 >>> Jay
 >>>
 >>> On Fri, May 22, 2009 at 2:22 PM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>> The way Redex ties patterns to non-terminals makes me think it will
 >>>> get quickly strange to try to have a single metafunction that uses two
 >>>> languages. For example, when you write, say, this case of a
 >>>> metafunction:
 >>>>
 >>>> [(f exp_1 exp_2) exp_1]
 >>>>
 >>>> we should know that exp is a non-terminal in the language. Now it
 >>>> would have to be a non-terminal in the output language too, right?
 >>>> What if the corresponding non-terminal actually has a different name?
 >>>> You can't use a different name than "exp_1" (since it won't be the
 >>>> same variable anymore).
 >>>>
 >>>> Well, that's where I'm getting stuck see how your proposal of keeping
 >>>> the language separate is going to work, anyways.
 >>>>
 >>>> Robby
 >>>>
 >>>> On Fri, May 22, 2009 at 11:20 AM, Jay McCarthy <jay.mccarthy@gmail.com=
 > wrote:
 >>>>> Are you saying
 >>>>>
 >>>>> (define-language sl+tl
 >>>>> =C2=A0[sl-e ...]
 >>>>> =C2=A0[tl-e ...])
 >>>>>
 >>>>> ...
 >>>>>
 >>>>> sl-e -> tl-e
 >>>>>
 >>>>> ?
 >>>>>
 >>>>> Yes, that would work but is inelegant IMHO.
 >>>>>
 >>>>> I wish that one language were an extension of the other, but that's
 >>>>> not the case here. That would be easy to do something similar.
 >>>>>
 >>>>> One solution might be more language combinators than just 'extension'=
 ,
 >>>>> that would automatically put in prefixes, etc.
 >>>>>
 >>>>> Jay
 >>>>>
 >>>>> On Fri, May 22, 2009 at 12:15 PM, Robby Findler
 >>>>> <robby@eecs.northwestern.edu> wrote:
 >>>>>> What I've done is just put the two languages together into a single
 >>>>>> language (grammar). Does that not work here?
 >>>>>>
 >>>>>> Robby
 >>>>>>
 >>>>>> On Fri, May 22, 2009 at 11:12 AM, =C2=A0<jay@plt-scheme.org> wrote:
 >>>>>>> A new problem report is waiting at
 >>>>>>> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10256
 >>>>>>>
 >>>>>>> Reported by Jay McCarthy for release: 4.2.0.2-svn19may2009
 >>>>>>>
 >>>>>>> *** Description:
 >>>>>>> I'm making a redex model of the ICFP'05 paper and had some annoyanc=
 e trying to encode the CMT translation as a metafunction. Each part looks l=
 ike:
 >>>>>>>
 >>>>>>> (define-metafunction sl-grammar+cmt
 >>>>>>> =C2=A0CMT-x : x -> any
 >>>>>>> =C2=A0....)
 >>>>>>>
 >>>>>>> The RHS of the contract must be 'any' because it produces things th=
 at are not terms of the source language, by virtue of being a compiler.
 >>>>>>>
 >>>>>>> I'd like something like
 >>>>>>>
 >>>>>>> (define-metatranslation
 >>>>>>> =C2=A0sl-grammar+cmt -> tl-grammar
 >>>>>>> =C2=A0CMT-a : a -> a
 >>>>>>> =C2=A0....)
 >>>>>>>
 >>>>>>> where the a on the left is from the first language (sl), but the a =
 on the right is from the second language (tl).
 >>>>>>>
 >>>>>>> *** How to repeat:
 >>>>>>>
 >>>>>>>
 >>>>>>> *** Environment:
 >>>>>>> macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Vers=
 ion 9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386=
  i386" (i386-macosx/3m) (get-display-depth) =3D 32
 >>>>>>> Human Language: english
 >>>>>>> (current-memory-use) 203039956
 >>>>>>>
 >>>>>>> Collections:
 >>>>>>> (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-pat=
 h) ("/Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-ex=
 p" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogra=
 mm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "fr=
 amework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-cl=
 ient" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons=
 " "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mr=
 lib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "p=
 lanet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" =
 "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" =
 "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slide=
 show" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" =
 "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "test=
 s" "tex2page" "texpict!
 >>>>>>> =C2=A0" "trace" "typed" "typed-scheme" "version" "waterworld" "web-=
 server" "wxme" "xml"))
 >>>>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t d=
 ebug) (default) #() "#lang scheme\n" #t))
 >>>>>>>
 >>>>>>>
 >>>>>>
 >>>>>
 >>>>>
 >>>>>
 >>>>> --
 >>>>> Jay McCarthy <jay@cs.byu.edu>
 >>>>> Assistant Professor / Brigham Young University
 >>>>> http://teammccarthy.org/jay
 >>>>>
 >>>>> "The glory of God is Intelligence" - D&C 93
 >>>>>
 >>>>
 >>>
 >>>
 >>>
 >>> --
 >>> Jay McCarthy <jay@cs.byu.edu>
 >>> Assistant Professor / Brigham Young University
 >>> http://teammccarthy.org/jay
 >>>
 >>> "The glory of God is Intelligence" - D&C 93
 >>>
 >>
 >
 >
 >
 > --
 > Jay McCarthy <jay@cs.byu.edu>
 > Assistant Professor / Brigham Young University
 > http://teammccarthy.org/jay
 >
 > "The glory of God is Intelligence" - D&C 93
 >
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/10256: Redex feature request: metafunctions from 
	one language to another
Date: Fri, 22 May 2009 15:23:01 -0400

 I don't need it to go into the release.
 
 BTW, You can close this bug if you'd like. I vaguely like the idea of
 extending redex to explicitly map between two languages, but it's not
 as important as I thought it was earlier.
 
 Jay
 
 On Fri, May 22, 2009 at 3:20 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I've checked in a fix, thanks.
 >
 > Do you want this to go in to the release? (If you're not planning on
 > using this code with students or whatever in the next two months, I'd
 > be just as happy not messing w/ the release.)
 >
 > Robby
 >
 > On Fri, May 22, 2009 at 2:06 PM, Jay McCarthy <jay.mccarthy@gmail.com> wr=
 ote:
 >> That's cool.
 >>
 >> However, when I try it:
 >>
 >> (define tl:v? (redex-match tl-grammar v))
 >> (define-metafunction sl-grammar+cmt
 >> =A0CMT-v : v -> (side-condition any_1 (tl:a? (term any_1)))
 >> =A0....)
 >>
 >>> (term (CMT-v (! "foo")))
 >> procedure application: expected procedure, given: ,(lambda (bindings)
 >> (term-let ((any_1 (lookup-binding bindings 'any_1))) (tl:a? (term
 >> any_1)))); arguments were: #(struct:bindings (#(struct:bind any_1 (!
 >> "foo"))))
 >>>
 >>
 >> It looks like rewrite-side-conditions isn't working right...
 >>
 >> Jay
 >>
 >> On Fri, May 22, 2009 at 2:48 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> This should do it:
 >>>
 >>> =A0(side-condition any_1 (tl:a? (term any_1)))
 >>>
 >>> In general, the contract thingies are all redex patterns (in the
 >>> "repeated names don't have to be the same" mode).
 >>>
 >>> Robby
 >>>
 >>> On Fri, May 22, 2009 at 1:46 PM, Jay McCarthy <jay.mccarthy@gmail.com> =
 wrote:
 >>>> That's a good point I hadn't thought of.
 >>>>
 >>>> Perhaps something in the short run is a way of having a scheme
 >>>> procedure in the contract in some position. That way I can write:
 >>>>
 >>>> (define tl:a? (redex-match tl-grammar a))
 >>>> (define-metafunction sl-grammar
 >>>> =A0CMT-a : a -> ,tl:a?
 >>>> =A0...)
 >>>>
 >>>> and get the contract checking. (That's all I really want anyways and I
 >>>> can't do it myself because the metafunctions are syntax so the normal
 >>>> contract system can't be used on them, AFAICT.)
 >>>>
 >>>> Jay
 >>>>
 >>>> On Fri, May 22, 2009 at 2:22 PM, Robby Findler
 >>>> <robby@eecs.northwestern.edu> wrote:
 >>>>> The way Redex ties patterns to non-terminals makes me think it will
 >>>>> get quickly strange to try to have a single metafunction that uses tw=
 o
 >>>>> languages. For example, when you write, say, this case of a
 >>>>> metafunction:
 >>>>>
 >>>>> [(f exp_1 exp_2) exp_1]
 >>>>>
 >>>>> we should know that exp is a non-terminal in the language. Now it
 >>>>> would have to be a non-terminal in the output language too, right?
 >>>>> What if the corresponding non-terminal actually has a different name?
 >>>>> You can't use a different name than "exp_1" (since it won't be the
 >>>>> same variable anymore).
 >>>>>
 >>>>> Well, that's where I'm getting stuck see how your proposal of keeping
 >>>>> the language separate is going to work, anyways.
 >>>>>
 >>>>> Robby
 >>>>>
 >>>>> On Fri, May 22, 2009 at 11:20 AM, Jay McCarthy <jay.mccarthy@gmail.co=
 m> wrote:
 >>>>>> Are you saying
 >>>>>>
 >>>>>> (define-language sl+tl
 >>>>>> =A0[sl-e ...]
 >>>>>> =A0[tl-e ...])
 >>>>>>
 >>>>>> ...
 >>>>>>
 >>>>>> sl-e -> tl-e
 >>>>>>
 >>>>>> ?
 >>>>>>
 >>>>>> Yes, that would work but is inelegant IMHO.
 >>>>>>
 >>>>>> I wish that one language were an extension of the other, but that's
 >>>>>> not the case here. That would be easy to do something similar.
 >>>>>>
 >>>>>> One solution might be more language combinators than just 'extension=
 ',
 >>>>>> that would automatically put in prefixes, etc.
 >>>>>>
 >>>>>> Jay
 >>>>>>
 >>>>>> On Fri, May 22, 2009 at 12:15 PM, Robby Findler
 >>>>>> <robby@eecs.northwestern.edu> wrote:
 >>>>>>> What I've done is just put the two languages together into a single
 >>>>>>> language (grammar). Does that not work here?
 >>>>>>>
 >>>>>>> Robby
 >>>>>>>
 >>>>>>> On Fri, May 22, 2009 at 11:12 AM, =A0<jay@plt-scheme.org> wrote:
 >>>>>>>> A new problem report is waiting at
 >>>>>>>> =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10256
 >>>>>>>>
 >>>>>>>> Reported by Jay McCarthy for release: 4.2.0.2-svn19may2009
 >>>>>>>>
 >>>>>>>> *** Description:
 >>>>>>>> I'm making a redex model of the ICFP'05 paper and had some annoyan=
 ce trying to encode the CMT translation as a metafunction. Each part looks =
 like:
 >>>>>>>>
 >>>>>>>> (define-metafunction sl-grammar+cmt
 >>>>>>>> =A0CMT-x : x -> any
 >>>>>>>> =A0....)
 >>>>>>>>
 >>>>>>>> The RHS of the contract must be 'any' because it produces things t=
 hat are not terms of the source language, by virtue of being a compiler.
 >>>>>>>>
 >>>>>>>> I'd like something like
 >>>>>>>>
 >>>>>>>> (define-metatranslation
 >>>>>>>> =A0sl-grammar+cmt -> tl-grammar
 >>>>>>>> =A0CMT-a : a -> a
 >>>>>>>> =A0....)
 >>>>>>>>
 >>>>>>>> where the a on the left is from the first language (sl), but the a=
  on the right is from the second language (tl).
 >>>>>>>>
 >>>>>>>> *** How to repeat:
 >>>>>>>>
 >>>>>>>>
 >>>>>>>> *** Environment:
 >>>>>>>> macosx "Darwin jay-mccarthys-macbook.local 9.7.0 Darwin Kernel Ver=
 sion 9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I38=
 6 i386" (i386-macosx/3m) (get-display-depth) =3D 32
 >>>>>>>> Human Language: english
 >>>>>>>> (current-memory-use) 203039956
 >>>>>>>>
 >>>>>>>> Collections:
 >>>>>>>> (("/Users/jay/Library/PLT Scheme/4.2.0.2/collects" non-existent-pa=
 th) ("/Users/jay/Dev/svn/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-e=
 xp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogr=
 amm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "f=
 ramework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-c=
 lient" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icon=
 s" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "m=
 rlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "=
 planet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs"=
  "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit"=
  "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slid=
 eshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle"=
  "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tes=
 ts" "tex2page" "texpict!
 >>>>>>>> =A0" "trace" "typed" "typed-scheme" "version" "waterworld" "web-se=
 rver" "wxme" "xml"))
 >>>>>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t =
 debug) (default) #() "#lang scheme\n" #t))
 >>>>>>>>
 >>>>>>>>
 >>>>>>>
 >>>>>>
 >>>>>>
 >>>>>>
 >>>>>> --
 >>>>>> Jay McCarthy <jay@cs.byu.edu>
 >>>>>> Assistant Professor / Brigham Young University
 >>>>>> http://teammccarthy.org/jay
 >>>>>>
 >>>>>> "The glory of God is Intelligence" - D&C 93
 >>>>>>
 >>>>>
 >>>>
 >>>>
 >>>>
 >>>> --
 >>>> Jay McCarthy <jay@cs.byu.edu>
 >>>> Assistant Professor / Brigham Young University
 >>>> http://teammccarthy.org/jay
 >>>>
 >>>> "The glory of God is Intelligence" - D&C 93
 >>>>
 >>>
 >>
 >>
 >>
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://teammccarthy.org/jay
 >>
 >> "The glory of God is Intelligence" - D&C 93
 >>
 >
 
 
 
 --=20
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://teammccarthy.org/jay
 
 "The glory of God is Intelligence" - D&C 93


State changed from "open" to "analyzed" by clklein at Wed, 30 Mar 2011 12:49:43 -0400
Reason>>> We should keep this issue in mind when designing the Redex
module system.

