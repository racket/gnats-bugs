From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jan  4 12:09:41 2009
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.233])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n04H9Yl7022370
	for <bugs@bugs.plt-scheme.org>; Sun, 4 Jan 2009 12:09:34 -0500
Message-Id: <200901041709.n04H9SO1022363@champlain.ccs.neu.edu>
Date: Sun, 4 Jan 2009 12:09:28 -0500
From: samth@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: redex evalues metafunction rhs over-eagerly

>Number:         10001
>Category:       redex
>Synopsis:       redex evalues metafunction rhs over-eagerly
>Class:          doc-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jan 04 12:12:01 -0500 2009
>Last-Modified:  Sat May 09 11:48:13 -0400 2009
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.3.8-svn2jan2009
>Environment:
unix "Linux hermes 2.6.24-16-386 #1 Thu Apr 10 12:50:06 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 259582140

Collections:
(("/home/samth/scheme" "html-maker" "foo.ss" "acl-test.ss" "new-match" "sam" "beamer" "info-domain") ("/home/samth/work/csu660/collects/" ".svn" "CSU660" "handin-server" "info-domain") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "wxme" "string-constants" "test-engine" "planet" "mzcom" "typed-scheme" "drscheme" "r6rs" "s-exp" "framework" "srpersist" "sirmail" "test-box-recovery" "scribblings" "slideshow" "syntax-color" "srfi" "algol60" "redex" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "typed" "frtime" "combinator-parser" "mred" "guibuilder" "htdp" "graphics" "setup" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "honu" "icons" "handin-client" "lazy" "texpict" "teachpack" "browser" "rnrs" "waterworld" "parser-tools" "r5rs" "games" "eopl" "tests" "html" "swindle" "handin-server" "repos-time-stamp" "compiler" "embedded-gui" "profj" "stepper" "readli!
 ne" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "help" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme/base\n" #t))
>Description:
This program runs infinitely.

#lang scheme/base
(require redex)
(define-language lang)
(define p (make-parameter #t))
(define-metafunction lang
  m : any -> any
  [(m any_1) ,(parameterize ([p #f]) (term (m any_1)))
             (side-condition (p))]
  [(m any_2) #f])

(term (m 1))
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@plt-scheme.org>
To: samth@ccs.neu.edu, bugs@plt-scheme.org
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Sun, 4 Jan 2009 11:17:48 -0600

 That's not what is happening. Redex assumes that side-condition's
 results don't change when the term they are matching doesn't change.
 So redex assumes that once the first cast matches for (term (m 1)) it
 will always match.
 
 Robby
 
 On Sun, Jan 4, 2009 at 11:12 AM,  <samth@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=10001
 >
 > Reported by Sam TH for release: 4.1.3.8-svn2jan2009
 >
 > *** Description:
 > This program runs infinitely.
 >
 > #lang scheme/base
 > (require redex)
 > (define-language lang)
 > (define p (make-parameter #t))
 > (define-metafunction lang
 >  m : any -> any
 >  [(m any_1) ,(parameterize ([p #f]) (term (m any_1)))
 >             (side-condition (p))]
 >  [(m any_2) #f])
 >
 > (term (m 1))
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux hermes 2.6.24-16-386 #1 Thu Apr 10 12:50:06 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 > Human Language: english
 > (current-memory-use) 259582140
 >
 > Collections:
 > (("/home/samth/scheme" "html-maker" "foo.ss" "acl-test.ss" "new-match" "sam" "beamer" "info-domain") ("/home/samth/work/csu660/collects/" ".svn" "CSU660" "handin-server" "info-domain") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "wxme" "string-constants" "test-engine" "planet" "mzcom" "typed-scheme" "drscheme" "r6rs" "s-exp" "framework" "srpersist" "sirmail" "test-box-recovery" "scribblings" "slideshow" "syntax-color" "srfi" "algol60" "redex" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "typed" "frtime" "combinator-parser" "mred" "guibuilder" "htdp" "graphics" "setup" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "honu" "icons" "handin-client" "lazy" "texpict" "teachpack" "browser" "rnrs" "waterworld" "parser-tools" "r5rs" "games" "eopl" "tests" "html" "swindle" "handin-server" "repos-time-stamp" "compiler" "embedded-gui" "profj" "stepper" "readli!
 >  ne" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "help" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme/base\n" #t))
 >
 >
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Sun, 4 Jan 2009 12:21:15 -0500

 Ah, ok.  I assumed that only the results of the metafunction itself
 were cached, but I guess that was wrong.  You might want to mention
 that in the docs.
 
 Also, what's the best way to define this sort of function?  For me, it
 was easy to just make the RHS an `and', since the result was boolean,
 but that might not work always.
 
 Thanks,
 
 On Sun, Jan 4, 2009 at 12:17 PM, Robby Findler <robby@plt-scheme.org> wrote:
 > That's not what is happening. Redex assumes that side-condition's
 > results don't change when the term they are matching doesn't change.
 > So redex assumes that once the first cast matches for (term (m 1)) it
 > will always match.
 >
 > Robby
 >
 > On Sun, Jan 4, 2009 at 11:12 AM,  <samth@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=10001
 >>
 >> Reported by Sam TH for release: 4.1.3.8-svn2jan2009
 >>
 >> *** Description:
 >> This program runs infinitely.
 >>
 >> #lang scheme/base
 >> (require redex)
 >> (define-language lang)
 >> (define p (make-parameter #t))
 >> (define-metafunction lang
 >>  m : any -> any
 >>  [(m any_1) ,(parameterize ([p #f]) (term (m any_1)))
 >>             (side-condition (p))]
 >>  [(m any_2) #f])
 >>
 >> (term (m 1))
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux hermes 2.6.24-16-386 #1 Thu Apr 10 12:50:06 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 >> Human Language: english
 >> (current-memory-use) 259582140
 >>
 >> Collections:
 >> (("/home/samth/scheme" "html-maker" "foo.ss" "acl-test.ss" "new-match" "sam" "beamer" "info-domain") ("/home/samth/work/csu660/collects/" ".svn" "CSU660" "handin-server" "info-domain") ("/home/samth/.plt-scheme/4.1.3.8/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "wxme" "string-constants" "test-engine" "planet" "mzcom" "typed-scheme" "drscheme" "r6rs" "s-exp" "framework" "srpersist" "sirmail" "test-box-recovery" "scribblings" "slideshow" "syntax-color" "srfi" "algol60" "redex" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "typed" "frtime" "combinator-parser" "mred" "guibuilder" "htdp" "graphics" "setup" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "honu" "icons" "handin-client" "lazy" "texpict" "teachpack" "browser" "rnrs" "waterworld" "parser-tools" "r5rs" "games" "eopl" "tests" "html" "swindle" "handin-server" "repos-time-stamp" "compiler" "embedded-gui" "profj" "stepper" "readli!
 >>  ne" "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "help" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain"))
 >> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme/base\n" #t))
 >>
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@plt-scheme.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Sun, 4 Jan 2009 11:57:42 -0600

 On Sun, Jan 4, 2009 at 11:21 AM, Sam TH <samth@ccs.neu.edu> wrote:
 > Ah, ok.  I assumed that only the results of the metafunction itself
 > were cached, but I guess that was wrong.  You might want to mention
 > that in the docs.
 >
 > Also, what's the best way to define this sort of function?  For me, it
 > was easy to just make the RHS an `and', since the result was boolean,
 > but that might not work always.
 
 Redex generally works best if you make everything explicit in the
 term. Typesetting works better, caching works (at all), it is more
 easily translated to your papers (since there are no parameters
 there!)
 
 Robby

Class changed from "sw-bug" to "doc-bug" by robby at Sun, 04 Jan 2009 13:11:42 -0500
Reason>>> that's what it is designed to do, at least for now.

Responsible changed from "nobody" to "robby" by robby at Sun, 04 Jan 2009 13:11:42 -0500
Reason>>> rbf

State changed from "open" to "closed" by robby at Sun, 04 Jan 2009 13:11:42 -0500
Reason>>> I added a note to the docs.

From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Sun, 4 Jan 2009 13:57:35 -0500

 ------=_Part_49739_32897612.1231095455507
 Content-Type: text/plain; charset=ISO-8859-1
 Content-Transfer-Encoding: 7bit
 Content-Disposition: inline
 
 On Sun, Jan 4, 2009 at 12:57 PM, Robby Findler <robby@plt-scheme.org> wrote:
 > On Sun, Jan 4, 2009 at 11:21 AM, Sam TH <samth@ccs.neu.edu> wrote:
 >> Ah, ok.  I assumed that only the results of the metafunction itself
 >> were cached, but I guess that was wrong.  You might want to mention
 >> that in the docs.
 >>
 >> Also, what's the best way to define this sort of function?  For me, it
 >> was easy to just make the RHS an `and', since the result was boolean,
 >> but that might not work always.
 >
 > Redex generally works best if you make everything explicit in the
 > term. Typesetting works better, caching works (at all), it is more
 > easily translated to your papers (since there are no parameters
 > there!)
 
 So, I'm still not sure what the right choice for me is.  My paper
 version doesn't need this extra parameter (since the paper definition
 just leaves the lack of infinite loops implicit).  I've attached a
 screenshot of the paper version.  The redex definition that I
 eventually chose is this:
 
 (define-metafunction occur-lang
   no-overlap : t t -> any
   [(no-overlap N #t) #t]
   [(no-overlap N #f) #t]
   [(no-overlap N (pr t_1 t_2)) #t]
   [(no-overlap #t (pr t_1 t_2)) #t]
   [(no-overlap #f (pr t_1 t_2)) #t]
   [(no-overlap N (t ... -> u : fh ... : sh)) #t]
   [(no-overlap #t (t ... -> u : fh ... : sh)) #t]
   [(no-overlap #f (t ... -> u : fh ... : sh)) #t]
   [(no-overlap (pr t_1 t_2) (t ... -> u : fh ... : sh)) #t]
   [(no-overlap (U t ...) u) (all (no-overlap t u) ...)]
   [(no-overlap t u)
    #t
    (side-condition (and (no-overlap-recur)
                         (parameterize ([no-overlap-recur #f]) (term
 (no-overlap u t)))))]
   [(no-overlap t u) #f])
 
 As far as I see it, I have three choices: (1) using a parameter, in
 the way that I did, (2) duplicating all of the symmetric cases, or (3)
 adding an extra parameter everywhere that I wouldn't want in the paper
 version.  Which do you suggest?
 
 Thanks,
 -- 
 sam th
 samth@ccs.neu.edu
 
 ------=_Part_49739_32897612.1231095455507
 Content-Type: image/png; name=Screenshot-model-multi.pdf.png
 Content-Transfer-Encoding: base64
 X-Attachment-Id: f_fpk2cocx0
 Content-Disposition: attachment; filename=Screenshot-model-multi.pdf.png
 
 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
 ++NWx2mWdDM+XiNfedUSx0cfz7ccV3r9IElfLF2mpg8FqGr1WmrXvpP+/Osvu0ft1qpdS+GXziv2
 apSlhF86r1q1azFyFwAAAACAe5zDkrsRN6QLsdKlWCn8VrkSK0X8K/17w1FR5a3UCd4CTQYr5Pqj
 Crn26D2d2JWkTp06adq0abp69apiYmI0depUdezY0dFh5YqZs2brUni4ftn8g37etFEXLlzUu++9
 L0mW0bgZjczNzIkTJ+VTv57lfv16D+jEyZN3HrgtWZ0z9tbyc/+ckiSd++dU8m072zGk2u+Ap5/V
 s08P1MEDe3Vg7x79r1o1TXhnkqXuzJnv6t9//9Wu37Zr0w/f6/eQvVbtzZv3of78809t/G6d/tgX
 Ijc3N02aPNVmHK0eCdThw4cVcSVCMpv1e8hePdwyQCF790lmsy5duqS/jh5Vq0cC08Q98933FBkZ
 qZ2/bteP33+n33buzLwfJO3atVurv/1GRw4d0KPt2ur119+4La4M+j+7BQAAAAAA5HsOyRy6u7np
 RMAy7bt82eb60t7equ/mlsdROUbqBO95jxGSpPLlyt6ziV1Jmj17tpo3b67x48dLkipXrqydKUmw
 e8za9d9p+dLFKunlJUka92aw+vTrrzGvjc6R9q9fv65ChQpZ7nt4eCgu7nqOtJ0VFav8z+p+SiIz
 uyIjIzVp8lQFtGguSfp504+Wde5ubnrttdFq1rylZdnadeu16pvl8rrVz+PfDNbmLVss65d/vUJf
 LvlcZcuUkSSNee1VtevQUZMnTkizb1dXVz3WsaPWrFunZ58eqL179yl4zGt6Z/IUSdKqVavVuVMn
 m9NprFmzVt98/ZVKlkyO4+3x4/RwqzaZHu+kd95WsWLFJEmDBw/S+3PnZboNAAAAAACAQ7KHRYsW
 Vf16D6hGfHWb693d3FS0aNE8jspxUhK8Hh4ekiQ3N7d7NrErSQMGDNBTTz2lUaNGSZLeffdd9e/f
 X5s2bXJwZDkvMjJSlSpWtNyvVLGCIiOjcqz9QoUK6fr16/L09JQkxcXFycOjUCZbZU/8jbh01508
 eshm3dTbZLR9ipQksaenh1o89JAmjAtW/I047T9wUNNnztKRo6G6cSN5aL/BYLC0eSUiQiVLFLPc
 L+VVzGqfl8LDFdg6yGpfqbe/XdfOHfTqmHHq2b2bYmKi9UCdmoqOilLs1Wit+Gal3p81zeaxXYmI
 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
 FSxYUDNnzszWsQAAkJdI7gJALitSpIgKFSqUZvnhw4clJX8Amzp1qtU6o9Godu3a2fxQUrhwYZv7
 8fDwsLk89dQ6+/btk5T8gcmWlERNSEiIZVnRokXVp08fffHFF5o9e7ZKlCihuLg43bx5U6VKlcrW
 sRiNxnSTqClf5Uwd/7p16zRixAib9e01ZcoU1axZU507d06z7t9//5XBYJCTU+ZT0Ts7O3NBNdz3
 cut5CiBnZOf9PqvSOx9JOe/IznlOeudMKZo3b65KlSpp6dKlluRuaGio3njjDQ0cOFBXrlxRqVKl
 tG3bNkuSODOlSpXS8uXL1b9/f40ePVpScqK6V69elmsKZPecDQCAvEByFwByWXpJzJREYtOmTfX6
 66/b3d6dzOeWkJAgSenOpZ6yPKVeisGDB2vBggVasmSJRowYoeXLl1vNN5fVYylYsGCafaTnzz//
 VExMTLa/NiolH8/GjRs1bNgwm/23d+9e1a1b167kbnx8fIYfPIH7UU48TwHknOy+39uSkjC9XWbn
 I9k5z8ns2zNOTk7q06ePpk+frkuXLikmJka1atVS165dNXjwYK1YsULDhg3TmjVrNHHiRLv2KUmd
 O3fWuXPntGXLFv3+++/6+eeftWTJEl28eFE//vhjts/ZAADIC5l/igUA5IoGDRpISp4bM6/Uq1dP
 khQZGWlzfcrylHop/Pz85Ovrq/nz58tsNmv79u1WI2KyeiylS5dON4bbrV27Vo0aNbqjpPbly5d1
 8+ZNNWzYMM266Oho/fLLL+rbt69dbUVGRjI6B3e9UaNGqWTJktkqK1asyPL+cuJ5CiDnZPf93pZJ
 kyZlK4bcOs/p06ePTCaTli9fbvljc+HChdWtWzctXbpUN2/eVGJiYroji28XEhKiFStWyNPTU126
 dNGkSZO0a9cuffbZZ9q0aZNOnjzpkHM2AADsRXIXABykRo0aCgwM1LZt22x+zX///v369NNPc3Sf
 devWVdOmTbVz506bo3l27twpg8Ggp59+Os26IUOG6OjRo5o3b54aNGhglcTJ6rHUrFlTZ8+etSvm
 lKRRRvbt26dVq1alO0KpePHicnZ2tvlBb86cOSpXrpxeeOGFTGMxm806d+6catSoYVfsgKPMmjVL
 ERER2SrZmavXnucpgLyT3fd7d3d3JSUlWbZJSkqScxYu6pJabp3n1K9fX/Xr19cXX3yhixcvWubw
 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
 ypVav369XFxcZDAYJElJSUny9/fXsGHD7I4lvX3b4u7uripVqqhVq1YKDAyUk5P132z79++vsWPH
 atmyZerTp4/dMQAAAAAA8geSuwAAh6hSpYomTpyol19+Wb/88ovMZrND4tiyZYv27Nmj7777zrLM
 zc3NkuhdtGiRQkJCLOvi4uK0cOFCSwI3RZUqVeTv76+zZ89qxowZeuaZZ+Tn56fatWtnKZ709v30
 00/L39/fUs9kMunYsWOaNWuWJk2apIYNG+rrr79WjRo1rNobP368Hn74Yfn6+qpWrVpZigWwR3x8
 vNzc3BwdBgAAAHBfIrkLAHAId3d31axZUw899JA2bNjgkBgSExM1dOhQrVy50ipZ6+npqSFDhkiS
 fv31V8XHx+vPP/+UyWTSZ599ppo1a+r111+3asvPz09+fn66ceOGZsyYoREjRqhevXpZjun2fack
 d4OCgtSrV6809R977DEFBQXpwIEDCgoK0p9//ilPT0/LeldXV40dO1ZDhw7V5s2b0ySlgTv1/PPP
 a9GiRY4OAwAAALgvMecuAMChHJlsXLZsmSpXrqz69etnWO+RRx7RrFmzLPfHjBmjlStX2qyb18fT
 pk0bVatWTZJ05swZrVmzJk2dRx99VOfOndP27dvzNDbcH44fP+7oEAAAAID7FsldAMB96+OPP1bv
 3r3tqvviiy/q+eeft9zv16+ffv/999wKLUu8vLwst69cuZJmvZOTk3r27Kn58+fnZVi4D5w6dUqH
 Dh1ydBgAAADAfYvkLgDkIrPZrH///ddyPyEhQRERETKZTBluFxkZqT179ujYsWN3PBdtTraVmtls
 1unTp7V7925dunTJZh2TyaTY2FhL/ejo6EyPPbXExEQdOnRIISEhiouLyzCW1P18/fp1xcTEZNj2
 +fPntXv3bgUFBdkVi8Fg0Jw5c9S2bVtJ0s2bN9W5c2edPXvWru1zy7Vr1/TXX39JSo6xVatWNusF
 BQVp/fr1SkxMzMvwcA+Li4vToEGDMn1O2/M6YDabFRsbK6PRmGb7+Ph43bhxw2bb9rwOAQAAAPcy
 krsAkAsOHDggX19fFShQQOXKlVNCQoImT56sadOmadGiRapfv77mzp2bZrvz58+rd+/emjp1qq5c
 uaKtW7eqQ4cOWrt2bZZjsKetBQsWqHXr1mratKn8/PzUqlUrXbhwQZIUHR2tZs2aqUmTJmratKne
 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
 ERG9CrjmLhERtVhmZmYwMzNrcB1LS0t4eXnh559/xtSpUxuhs5q15jVzf/zxR5w8eRKRkZHYuHEj
 srKyMH/+fHW3JeP8+fM4dOhQres2ExERERERtRQMd4mIiACYm5vD3Nxc3W20aEZGRjh27BhEIhG+
 /PJLxMbGqrslOU5OTupugYiIiIiIqNEw3CUiIqJGMXr0aAAvXmxXVlYGGxsbNXdERERERETUujHc
 JSIiokYhCAK++OILVFRUoGPHjnjw4AH++c9/YtiwYepujYiIiIiIqFViuEtERESNIjg4GDk5Odi1
 axcAYO7cubhw4QLDXSIiIiIioibCcJeIiIgaxbVr13Dq1Cn07NkTNjY22Lx5M19cRkRERERE1IQY
 7hIREVGjcHNzwx9//IH169fj+fPnsLe3R3h4uLrbIiIiIiIiarU01N0AERERtXwxMTFITU3FTz/9
 hKKiIoSFhSE2NhZ3795Vd2tEREREREStFsNdIiIiarBly5bhv//9LwBAS0sL48aNw+DBg9GvXz81
 d0ZERERERNR6cVkGIiIiarAPP/wQBQUFOH/+PAoKChAXF4ejR4+iXbt26m6NiIiIiIio1WK4S0RE
 RA22dOlSlJSUICMjA506dcLChQvV3RIREREREVGrx3CXiIiIGkX79u1hamqq7jaIiIiIiIjaDK65
 S0RERERERERERNQCMdwlIiIiIiIiIiIiaoEY7hIRERERERERERG1QAx3iYiIiIiIiIiIiFoghrtE
 RESkFvn5+fDy8kJxcbG6WyEiIiIiImqRGO4SERFRo/P29kZlZWWtY27cuIHw8HBIJJJm6oqIiIiI
 iKh1YbhLREREjc7Y2BgnTpyodYytrS3i4+PRsWPHZuqKiIiIiIiodWG4S0RERI3O3d0dZ86cQWJi
 osL9giCgoqKimbsiIiIiIiJqXbTU3QARERG9erKyshAXF6dyAGtgYICuXbsCAD7++GO4uLjAw8MD
 Li4u0NTUBABcunQJ4eHhiI6OhpeXFyZOnNjo/RMREREREbUFDHeJiIhIzt69e3HgwAEIgqDScXp6
 ejA1NZV+zs7OhpeXF3r37o1JkyahtLQUp06dgp+fHxwdHREaGspwl4iIiIiIqJ4Y7hIREZGcLVu2
 YMuWLQ2qERoaigMHDiAwMBBGRkYAALFYDCcnJ+Tk5ODChQuIiIhojHaJiIiIiIjaJIa7RERE1OjS
 09Ph7++PkJAQ6OjoSLf37dsXffv2ha+vL/r374+xY8eqsUsiIiIiIqKWjS9UIyIiokbn4+MDPz8/
 mWC3iiAICAgIgKurKwAgMjKymbsjIiIiIiJqHThzl4iIiBqdm5sbzMzMFO5LSUnBrVu34OTkhIiI
 CDx9+rSZuyMiIiIiImodOHOXiIiIGp2NjU2N+0xMTNC3b1+EhYUhOjoajo6OzdgZERERERFR68Fw
 l4iIiOpFIpHgo48+QkpKikrHGRoa4vr167Czs4OPjw9EIlETdUhERERERNS6MdwlIiIilVVWVsLV
 1RUlJSVwcnLCnTt3VDq+ffv26NmzZxN1R0RERERE1DYw3CUiIiKVVFZWYvny5Rg5ciQOHjyIU6dO
 wd3dHffu3VN3a0RERERERG0Kw10iIiJSSUZGBqZMmQI3NzcAQN++ffHdd98hPj5ezZ0RERERERG1
 LVrqboCIiIhall69eqFXr14y24yMjDB79mw1dURERERERNQ2ceYuERERERERERERUQvEcJeIiIga
 xNfXFxKJRN1tEBERERERtTkMd4mIiKhB7t+/D01NTXW3QURERERE1OYw3CUiIqJ6e/r0KfT19dXd
 BhERERERUZvEcJeIiIjq7bfffsObb76p7jaIiIiIiIjaJIa7REREVG9RUVEYN26cutsgIiIiIiJq
 kxjuEhERUb0UFBRALBZDV1dX3a0QERERERG1SVrqboCIiIhajuzsbOzevRu5ubno0qULCgsLsXHj
 Rjx48ABr166FpaWlulskIiIiIiJqMxjuEhERkVJCQkKwYcMGHDx4ELa2tggJCYGdnR0mT56Mu3fv
 ws7ODqdPn4aNjY26WyUiIiIiImoTuCwDERER1enkyZNYvHgxgoODYWtrC+DFy9Sq1tsdMGAA5s2b
 h5UrV6qzTSIiIiIiojaF4S4RERHVKj09HS4uLvj0009hZmYm3V5cXAx9fX3pZ1NTU8TGxqKoqEgd
 bRIREREREbU5DHeJiIjakPz8fHh5eaG4uFjpY/z8/CASibBkyRKZOp07d5YZl5ub22h9EhERERER
 Ud0Y7hIREbUS3t7eqKysrHXMjRs3EB4eDolEonTdiIgIjBs3Dnp6etJtUVFRsLOzkxn366+/4o03
 3pCZzUtERERERERNh+EuERFRK2FsbIwTJ07UOsbW1hbx8fHo2LGj0nVLSkpgYmIis636ersAkJKS
 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
 RNSoGO4SERFRi1ZZWQlXV1eUlJTAyckJd+7cUfpYQ0NDXL9+HXZ2dvDx8YFIJGrCTomIiIiIiBoX
 w10iIiJqsSorK7F8+XKMHDkSBw8exKlTp+Du7o579+4pXaN9+/bo2bNnE3ZJRERERETUNBjuEhER
 UYuVkZGBKVOmwM3NDQDQt29ffPfdd4iPj1dzZ0RERERERE2PL1QjIiKiFqtXr17o1auXzDYjIyPM
 nj1bTR0RERERERE1H87cJSIiIiIiIiIiImqBGO4SERFRq+Hr6wuJRKLuNoiIiIiIiJoFw10iIiJq
 Ne7fvw9NTU11t0FERERERNQsGO4SERFRq/D06VPo6+uruw0iIiIiIqJmw3CXiIiIWoXffvsNb775
 prrbICIiIiIiajYMd4mIiKhViIqKwrhx49TdBhERERERUbNhuEtEREQtXkFBAcRiMXR1ddXdChER
 ERERUbPRUncDRERERPWRnZ2N3bt3Izc3F126dEFhYSE2btyIBw8eYO3atbC0tFR3i0RERERERE2K
 4S4RERG1OCEhIdiwYQMOHjwIW1tbhISEwM7ODpMnT8bdu3dhZ2eH06dPw8bGRt2tEhERERERNRku
 y0BEREQtysmTJ7F48WIEBwfD1tYWwIuXqVWttztgwADMmzcPK1euVGebRERERERETY7hLhEREbUY
 6enpcHFxwaeffgozMzPp9uLiYujr60s/m5qaIjY2FkVFRepok4iIiIiIqFkw3CUiIqIWw8/PDyKR
 CEuWLJFuy8/PR+fOnWXG5ebmNndrREREREREzY7hLhEREalFfn4+vLy8UFxcrPQxERERGDduHPT0
 9KTboqKiYGdnJzPu119/xRtvvCEzm5eIiIiIiKi1YbhLREREjc7b2xuVlZW1jrlx4wbCw8MhkUiU
 rltSUgITExOZbdXX2wWAlJQUXLx4EatXr1ataSIiIiIiohaG4S4RERE1OmNjY5w4caLWMba2toiP
 j0fHjh2Vrjtq1CiIxWKZbdXX2y0vL8eyZcvg6OiIRYsWqdw3ERERERFRS8Jwl4iI6P979uxZrfsr
 KipUWkKgOT158gSCIKi7DSl3d3ecOXMGiYmJCvcLgoCKigqV627YsAHx8fFISkoCILvebmFhIWbP
 no0+ffrgP//5D0QiUf2/gJq9qj9nRERERET0atFSdwNERETqJggC/vWvf8He3h4TJ06scdyXX36J
 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
 06dPsX37dgDAhAkT8NNPP7G4S0REREREjRKLu0RERNRo3Lp1C//6179gZ2cHDw8PrFu3jouSERER
 ERFRo8XiLhERETUas2bNwv/+9z98+eWXePnyJTw9PXH+/Hldh0VERERERFQnDHUdABEREVFtiIqK
 QmJiIn7++WcUFhbi3LlziImJwf3793UdGhERERERUZ1gcZeIiIgaBX9/f/znP/8BADRr1gwDBgxA
 jx490LVrVx1HRkREREREVDc4LQMRERE1Cp9//jnEYjF+/PFHiMViiEQifPvttzA2NtZ1aERERERE
 RHWCxV0iIiJqFGbMmIEXL14gLS0NrVu3xpQpU3QdEhERERERUZ1icZeIiIgajRYtWqBbt266DoOI
 iIiIiKhecM5dIiIiIiIiIiIiIj3E4i4RERERETV6gYGBqKio0HUYRERERLWKxV0iIiIiImr0bG1t
 cezYMV2HQURERFSrWNwlIiIiIqJGb/bs2Th16hTi4uJ0HQoRERFRreGCakRERETUoAiCgMTERJSW
 llbb7tGjRygrKwMAWFhYwMbGptp9xGIx2rRpo3Ysjx49gpmZWbV9a3uM+tqnob4WdePKy8tDXl6e
 7Hd1/r1f98UXX2DatGmYM2cOpk2bBiMjI432JyIiImpoWNwlIiIiogalqKgIc+fOrba4W15ejoSE
 BAiCAAAwMzNDt27dqt3n4cOHePvtt9WKRXqMFi1aVNu3tseor30a6mtRN65Hjx4hPz9f9rs6/97K
 PHnyBMuXL0enTp3wwQcfaLw/ERERUUPC4i4RERERNSitWrXCuXPndB0GNUK//PILvvnmG4SEhMDK
 ykrX4RARERHVGIu7RERERETU6D169Ag7d+7EDz/8gObNm+s6HCIiIqJawQXViIiImpjAwEBUVFTo
 Ogwionq1Zs0a7Nixg4VdIiIialRY3CUiImpibG1tcezYMV2HQURUr2bNmgUHBwddh0FERERUq1jc
 JSIi+j/FxcW10qahmz17Nk6dOoW4uDiF54qKinQQUcOLgYg011DzozSneHh46DgSIiIiotrHOXeJ
 iKjJEwQBq1atgqenJ4YNG6Z2m4CAACQnJ+M///mPxsccOXIkOnbsiH379mm8b3Z2NkQiEcrKyjTa
 z8LCAjY2NgCAL774AtOmTcOcOXMwbdo0GBkZAQAiIiLw4sULzJo1S+O4aktDiIFqJjY2FkOGDMHF
 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
 lSksLER5eTlat26Nx48fIyUlBVZWVujRo4fKhQfrMicR6TNNxgKCICApKQl5eXlwdXWt8ntUmxhq
 6/OZlJSkMEWRdC7htm3bqt0Pcw0REdUlFneJiIjUULm4q4m4uDh8/PHHSEpKqlEBXSojIwMRERGY
 N29ejftSJjc3Fz169MAff/yhcVGYiIiIiIiI6ld9FHc55y4REek9aVFX0+Kui4sLBgwYoHKeXE2F
 hoZi3LhxtdKXMkFBQfj8889Z2CUiIiIiIiIAXFCNiIj0WEZGBs6cOYOoqCgAwN69e3H16lWN+ti5
 cyeCg4MhFotrFItIJELz5s3Rrl27GvWjyp07dxAZGYmlS5fWSf9ERERERESkf1jcJSIivVVQUID0
 9HTMnz8foaGhMDY2RlpamkZ9tG3bFvv27UNAQIDcytmaMjQ0xMKFC7Xevyr5+flYvHgxwsPDa23u
 QyIiIiIiItJ/zXQdABERkbYcHBzg4OBQ43569+6N5cuX49dff8WoUaO06kPdBde08eOPP2L//v2w
 s7Ors2MQERERERGR/mFxl4iICICTkxOcnJx0HYZSkydP1nUIRERERERE1ABxWgYiIiIiIiIiIiIi
 PcTiLhEREREREREREZEeYnGXiIiIiIiIiIiISA+xuEtERERERERERESkh1jcJSIiIiIiIiIiItJD
 LO4SERERERERERER6SEWd4mIiIiIiIiIiIj0EIu7RERERERERERERHqIxV0iIiIiIiIiIiIiPcTi
 LhEREREREREREZEeYnGXiIiIiIiIiIiISA+xuEtERERERERERESkh1jcJSIiIiIiIiIiItJDLO4S
 ERERERERERER6SEWd4mIiIiIiIiIiIj0EIu7RERERERERERERHqIxV0iIiIiIiIiIiIiPcTiLhER
 EREREREREZEeYnGXiIiIiIiIiIiISA+xuEtERERERERERESkh1jcJSIiIiIiIiIiItJDLO4SERER
 ERERERER6SEWd4mIiIiIiIiIiIj0EIu7RERERERERERERHqIxV0iIiIiIiIiIiIiPcTiLhERERER
 EREREZEeYnGXiIiIiIiIiIiISA+xuEtERERERERERESkh1jcJSIiIiIiIiIiItJDLO4SERERERER
 ERER6SEWd4mIiIiIiIiIiIj0EIu7RERERERERERERHqIxV0iIiIiIiIiIiIiPcTiLhERERERERER
 EZEeYnGXiIiIiIiIiIiISA+xuEtERERERERERESkh1jcJSIiIiIiIiIiItJDLO4SERERERERERER
 6SEWd4mIiIiIiIiIiIj0EIu7RERERERERERERHqIxV0iIiIiIiIiIiL6f+3dX6jX9R3H8fevc+Y5
 gSy2mg0ZscxN0ZgaDM6iDVEjiGBQILWLCgqiG2tdLGeaczLZGJU2itBY2MaCIMLmKQqhFS1vRt40
 cJbNcrSz5SaZCMLO97uLozbzfxd+z2u/xwN+nM/v+/t+4X15ePLj/SOQuAsAAAAAEEjcBQAAAAAI
 JO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjc
 BQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsA
 AAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAA
 ACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABA
 IHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDi
 LgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0A
 AAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAA
 AACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAA
 Aom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQS
 dwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4C
 AAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAA
 AAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAA
 EEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQ
 uAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEX
 AAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAA
 AABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAA
 gEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACB
 xF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7
 AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEA
 AAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAA
 AAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAI
 JO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjc
 BQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsA
 AAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7AAAAAACBBrseAAAAAACgn23btu1zPSfuAgAA
 AAB0aMXPHqm2aapt22rbo3+PnJv2M9cn/j76i59aywAAAAAAkEjcBQAAAAAIJO4CAAAAAAQSdwEA
 AAAAAvlBNQAAAACADr2z88/Vtk1VW9VWU21bVW07cW6OnttjP7RWNfESdwEAAAAAOvT1GTOrGR+v
 pjnyGm/+5zxebdMcO09cb6qqZy0DAAAAAEAicRcAAAAAIJC4CwAAAAAQSNwFAAAAAJgkdr27p774
 pYurquqvH3xYX542vaqq9o79q6Z97fLj7hV3AQAAAAAmiauuuuoU5wUn3Dt4XiYCAAAAAOCMDh74
 dzXjTVVV7d83Vs34eFVVffThB8fOR/nmLgAAAADAJGEtAwAAAABAIGsZAAAAAAACWcsAAAAAABDI
 WgYAAAAAgEDWMgAAAAAABLKWAQAAAAAgkLUMAAAAAACBrGUAAAAAAAhkLQMAAAAAQCBrGQAAAAAA
 AlnLAAAAAAAQyFoGAAAAAIBA1jIAAAAAAASylgEAAAAAIJC1DAAAAAAA/+fEXQAAAACAQOIuAAAA
 AEAgO3cBAAAAADq05713q22bqraqrabatqraduLcHD231bYTr6qJl7gLAAAAANChb8yeW23THIm3
 zbGI27ZNtU37mevNkcDbs5YBAAAAACCRuAsAAAAAEEjcBQAAAAAIJO4CAAAAAATyg2oAAAAAAB1a
 98APP9dz4i4AAAAAQIeWLFlSg1+YUhcMDJz1My9u/b21DAAAAAAAicRdAAAAAIBA4i4AAAAAQCBx
 FwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4A
 AAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAA
 AIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAA
 gcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJ
 uwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncB
 AAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAA
 AAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAA
 CCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI
 3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgL
 AAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAA
 AAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAA
 QCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA
 4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRd
 AAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAA
 AAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAA
 AAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTuAgAAAAAE
 EncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUAAAAACCTu
 AgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAAABBI3AUA
 AAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAgkLgLAAAA
 ABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQCBxFwAAAAAg
 kLgLAAAAABBI3AUAAAAACCTuAgAAAAAEEncBAAAAAAKJuwAAAAAAgcRdAAAAAIBA4i4AAAAAQKDB
 rgcAAICuHThwoHbv3l1Tp06tmTNnVq/X63okAAA4I3EXAIC+dfDgwVqzZk31er2aPXt2jY2N1auv
 vlp333133XjjjV2PBwAApyXuAgDQl9q2rbvuuqvWrl1bM2bMOHZ92bJltWjRohoeHq7rr7++wwkB
 AOD07NwFAKAvvfnmmzU0NHRc2K2qmjp1aq1cubLWr1/f0WQAAHB2xF0AAPrS22+/XTt37qy2bU/4
 7JJLLqn9+/d3MBUAAJw9cRcAgL40ffr02r59e91xxx31ySefHPfZli1brGQAAGDSE3cBAOhL1113
 Xc2aNaueeuqpmjt3bo2OjlZV1QsvvFA7duyo5cuXdzwhAACcnrgLAEBfmjJlSo2Ojta8efNq7969
 dcMNN9TVV19dr732Wm3durUuvPDCrkcEAIDTEncBAOhbV1xxRT300EM1Z86cGhwcrO3bt9fTTz9d
 W7Zs6Xo0AAA4I3EXAIC+1LZtrV69up555pl66623aseOHTUyMlL79u2rpUuX1uOPP971iAAAcFri
 LgAAfWnTpk31+uuv18aNG2toaKiuvPLKeuONN2rDhg01NDRU9913X42NjXU9JgAAnJK4CwBAX1q3
 bl3df//9dcEFn/5LPDAwUMuWLavR0dE6fPhwvfzyyx1OCAAApyfuAgDQdw4fPlzvv/9+zZo166Sf
 L168uEZGRurQoUPneTIAADh74i4AAH1nypQpdemll9auXbtOeU/TNDUyMnIepwIAgHMj7gIA0Hd6
 vV4tX768Vq1addJv577yyit12WWX1YIFCzqYDgAAzs5g1wMAAEAX7rnnnjp06FAtXLiw7r333po/
 f359/PHH9fzzz9e+fftq8+bNXY8IAACnJe4CANCXer1erVixou6888566aWX6rnnnquLLrqobr/9
 9pozZ07X4wEAwBmJuwAA9LVp06bVbbfd1vUYAABwzuzcBQAAAAAIJO4CAAAAAAQSdwEAAAAAAom7
 AAAAAACBxF0AAAAAgEDiLgAAAABAIHEXAAAAACCQuAsAAAAAEEjcBQAAAAAIJO4CAAAAAAQSdwEA
 AAAAAg12PQAAAAAAQD/btm3b53pO3AUAAAAA6NCPVv+8mraptmmqbZtqm/bT901z5Nwe+Wzi/cZf
 PWwtAwAAAABAInEXAAAAACCQuAsAAAAAEEjcBQAAAAAI5AfVAAAAAAAmiRUrH6zf/PZ3J1z/wc1L
 6yerVhx3zTd3AQAAAAAmibVrVte1SxYfd23xooX14AM/PuFecRcAAAAAYJIYGBioxx5dXwvmz6uq
 qvnzvlUbHv5lDQwMnHCvuAsAAAAAMIkMDw/XkxufqO9995ra9MRjNTw8fNL77NwFAAAAAJhkLr74
 y7X515uqbZpq2uak9/jmLgAAAABAh8bH/3NO9zfNeFWJuwAAAAAAnfrwb3vP6f5//H2sqsRdAAAA
 AIDO3HTLrfXilmdrz+53zvgN3vFmvPZ+sKf+sO2luumWW6v37JOPtOdpTgAAAACAvnft928+7v17
 7/6l/rT9j/XRP8dqfHz8lM8NDAzUV6Z9tb79nWvq8pnfrP8Crw1rpBpIBxIAAAAASUVORK5CYII=
 
 ------=_Part_49739_32897612.1231095455507--
From: "Robby Findler" <robby@plt-scheme.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Sun, 4 Jan 2009 14:33:12 -0600

 What you've written in the paper version is not directly executable
 since your side-condition implicitly checks for termination. Redex
 requires things to be executable. You can use one of the three choices
 you've listed or you can define a helper relation that doesn't include
 the symmetric case and have the main metafunction call the other. I
 don't see any better alternatives.
 
 And I don't see why this is a Redex-specific question. This would be a
 problem for anything that was executable, no?
 
 You're welcome,
 Robby
 
 On Sun, Jan 4, 2009 at 12:57 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > On Sun, Jan 4, 2009 at 12:57 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >> On Sun, Jan 4, 2009 at 11:21 AM, Sam TH <samth@ccs.neu.edu> wrote:
 >>> Ah, ok.  I assumed that only the results of the metafunction itself
 >>> were cached, but I guess that was wrong.  You might want to mention
 >>> that in the docs.
 >>>
 >>> Also, what's the best way to define this sort of function?  For me, it
 >>> was easy to just make the RHS an `and', since the result was boolean,
 >>> but that might not work always.
 >>
 >> Redex generally works best if you make everything explicit in the
 >> term. Typesetting works better, caching works (at all), it is more
 >> easily translated to your papers (since there are no parameters
 >> there!)
 >
 > So, I'm still not sure what the right choice for me is.  My paper
 > version doesn't need this extra parameter (since the paper definition
 > just leaves the lack of infinite loops implicit).  I've attached a
 > screenshot of the paper version.  The redex definition that I
 > eventually chose is this:
 >
 > (define-metafunction occur-lang
 >  no-overlap : t t -> any
 >  [(no-overlap N #t) #t]
 >  [(no-overlap N #f) #t]
 >  [(no-overlap N (pr t_1 t_2)) #t]
 >  [(no-overlap #t (pr t_1 t_2)) #t]
 >  [(no-overlap #f (pr t_1 t_2)) #t]
 >  [(no-overlap N (t ... -> u : fh ... : sh)) #t]
 >  [(no-overlap #t (t ... -> u : fh ... : sh)) #t]
 >  [(no-overlap #f (t ... -> u : fh ... : sh)) #t]
 >  [(no-overlap (pr t_1 t_2) (t ... -> u : fh ... : sh)) #t]
 >  [(no-overlap (U t ...) u) (all (no-overlap t u) ...)]
 >  [(no-overlap t u)
 >   #t
 >   (side-condition (and (no-overlap-recur)
 >                        (parameterize ([no-overlap-recur #f]) (term
 > (no-overlap u t)))))]
 >  [(no-overlap t u) #f])
 >
 > As far as I see it, I have three choices: (1) using a parameter, in
 > the way that I did, (2) duplicating all of the symmetric cases, or (3)
 > adding an extra parameter everywhere that I wouldn't want in the paper
 > version.  Which do you suggest?
 >
 > Thanks,
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Sun, 4 Jan 2009 22:08:31 -0500

 On Sun, Jan 4, 2009 at 3:33 PM, Robby Findler <robby@plt-scheme.org> wrote:
 > What you've written in the paper version is not directly executable
 > since your side-condition implicitly checks for termination. Redex
 > requires things to be executable. You can use one of the three choices
 > you've listed or you can define a helper relation that doesn't include
 > the symmetric case and have the main metafunction call the other. I
 > don't see any better alternatives.
 >
 > And I don't see why this is a Redex-specific question. This would be a
 > problem for anything that was executable, no?
 
 Certainly, for anything that was executable, I'd have to have some way
 to stopping the infinite recursion.  Since redex metafunctions are
 limited by comparison to scheme functions (no keywords, no optional
 argument, etc), and since I wanted my redex definition to look as much
 like my paper definition as possible, I came up with my original
 solution.  That didn't work, so I looked for a solution that was
 similarly close to my paper version.
 
 If I was just implementing this for Typed Scheme, I wouldn't really
 care about how much it looked like the paper version, and I would have
 lots of additional abstraction tools available.  That's why I was
 asking for advice on how to represent this in redex.
 
 Personally, I'm not convinced that whatever benefits are being derived
 from the caching are worth this sort of strange behavior, but perhaps
 you have performance numbers that would convince me.
 
 >
 > You're welcome,
 > Robby
 
 I sign almost all of my emails with 'Thanks', so you shouldn't feel
 the need to respond as you would in conversation.
 
 Thanks,
 sam th
 
 >
 > On Sun, Jan 4, 2009 at 12:57 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> On Sun, Jan 4, 2009 at 12:57 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>> On Sun, Jan 4, 2009 at 11:21 AM, Sam TH <samth@ccs.neu.edu> wrote:
 >>>> Ah, ok.  I assumed that only the results of the metafunction itself
 >>>> were cached, but I guess that was wrong.  You might want to mention
 >>>> that in the docs.
 >>>>
 >>>> Also, what's the best way to define this sort of function?  For me, it
 >>>> was easy to just make the RHS an `and', since the result was boolean,
 >>>> but that might not work always.
 >>>
 >>> Redex generally works best if you make everything explicit in the
 >>> term. Typesetting works better, caching works (at all), it is more
 >>> easily translated to your papers (since there are no parameters
 >>> there!)
 >>
 >> So, I'm still not sure what the right choice for me is.  My paper
 >> version doesn't need this extra parameter (since the paper definition
 >> just leaves the lack of infinite loops implicit).  I've attached a
 >> screenshot of the paper version.  The redex definition that I
 >> eventually chose is this:
 >>
 >> (define-metafunction occur-lang
 >>  no-overlap : t t -> any
 >>  [(no-overlap N #t) #t]
 >>  [(no-overlap N #f) #t]
 >>  [(no-overlap N (pr t_1 t_2)) #t]
 >>  [(no-overlap #t (pr t_1 t_2)) #t]
 >>  [(no-overlap #f (pr t_1 t_2)) #t]
 >>  [(no-overlap N (t ... -> u : fh ... : sh)) #t]
 >>  [(no-overlap #t (t ... -> u : fh ... : sh)) #t]
 >>  [(no-overlap #f (t ... -> u : fh ... : sh)) #t]
 >>  [(no-overlap (pr t_1 t_2) (t ... -> u : fh ... : sh)) #t]
 >>  [(no-overlap (U t ...) u) (all (no-overlap t u) ...)]
 >>  [(no-overlap t u)
 >>   #t
 >>   (side-condition (and (no-overlap-recur)
 >>                        (parameterize ([no-overlap-recur #f]) (term
 >> (no-overlap u t)))))]
 >>  [(no-overlap t u) #f])
 >>
 >> As far as I see it, I have three choices: (1) using a parameter, in
 >> the way that I did, (2) duplicating all of the symmetric cases, or (3)
 >> adding an extra parameter everywhere that I wouldn't want in the paper
 >> version.  Which do you suggest?
 >>
 >> Thanks,
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@plt-scheme.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Sun, 4 Jan 2009 22:44:22 -0600

 On Sun, Jan 4, 2009 at 9:08 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > On Sun, Jan 4, 2009 at 3:33 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >> What you've written in the paper version is not directly executable
 >> since your side-condition implicitly checks for termination. Redex
 >> requires things to be executable. You can use one of the three choices
 >> you've listed or you can define a helper relation that doesn't include
 >> the symmetric case and have the main metafunction call the other. I
 >> don't see any better alternatives.
 >>
 >> And I don't see why this is a Redex-specific question. This would be a
 >> problem for anything that was executable, no?
 >
 > Certainly, for anything that was executable, I'd have to have some way
 > to stopping the infinite recursion.  Since redex metafunctions are
 > limited by comparison to scheme functions (no keywords, no optional
 > argument, etc), and since I wanted my redex definition to look as much
 > like my paper definition as possible, I came up with my original
 > solution.  That didn't work, so I looked for a solution that was
 > similarly close to my paper version.
 >
 > If I was just implementing this for Typed Scheme, I wouldn't really
 > care about how much it looked like the paper version, and I would have
 > lots of additional abstraction tools available.  That's why I was
 > asking for advice on how to represent this in redex.
 >
 > Personally, I'm not convinced that whatever benefits are being derived
 > from the caching are worth this sort of strange behavior, but perhaps
 > you have performance numbers that would convince me.
 
 Try disabling it and see. I think all you need to do is to change the
 definition of 'memoize' in collects/redex/private/matcher.ss.
 
 I expect the slowdown to be significant.
 
 Robby
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Sun, 4 Jan 2009 23:55:14 -0500

 On Sun, Jan 4, 2009 at 11:44 PM, Robby Findler <robby@plt-scheme.org> wrote:
 > On Sun, Jan 4, 2009 at 9:08 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> On Sun, Jan 4, 2009 at 3:33 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>> What you've written in the paper version is not directly executable
 >>> since your side-condition implicitly checks for termination. Redex
 >>> requires things to be executable. You can use one of the three choices
 >>> you've listed or you can define a helper relation that doesn't include
 >>> the symmetric case and have the main metafunction call the other. I
 >>> don't see any better alternatives.
 >>>
 >>> And I don't see why this is a Redex-specific question. This would be a
 >>> problem for anything that was executable, no?
 >>
 >> Certainly, for anything that was executable, I'd have to have some way
 >> to stopping the infinite recursion.  Since redex metafunctions are
 >> limited by comparison to scheme functions (no keywords, no optional
 >> argument, etc), and since I wanted my redex definition to look as much
 >> like my paper definition as possible, I came up with my original
 >> solution.  That didn't work, so I looked for a solution that was
 >> similarly close to my paper version.
 >>
 >> If I was just implementing this for Typed Scheme, I wouldn't really
 >> care about how much it looked like the paper version, and I would have
 >> lots of additional abstraction tools available.  That's why I was
 >> asking for advice on how to represent this in redex.
 >>
 >> Personally, I'm not convinced that whatever benefits are being derived
 >> from the caching are worth this sort of strange behavior, but perhaps
 >> you have performance numbers that would convince me.
 >
 > Try disabling it and see. I think all you need to do is to change the
 > definition of 'memoize' in collects/redex/private/matcher.ss.
 >
 > I expect the slowdown to be significant.
 
 Thanks, I'll try that and report back.
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 15:15:06 -0500

 So it turns out that this problem is worse for me that I thought.  One
 of the interesting things that I did with my redex model of Typed
 Scheme in the past was selectively enable and disable different type
 rules.  I used parameters for this.  In my new implementation of the
 redex model, I wrote just about everything as metafunctions.  But now,
 I can't use these parameters to turn type rules on and off.
 
 Would it be possible to disable the caching just of side-condition
 results?  Would that have a big performance impact? I'd be happy to do
 the performance testing.
 
 sam th
 
 On Sun, Jan 4, 2009 at 10:08 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > On Sun, Jan 4, 2009 at 3:33 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >> What you've written in the paper version is not directly executable
 >> since your side-condition implicitly checks for termination. Redex
 >> requires things to be executable. You can use one of the three choices
 >> you've listed or you can define a helper relation that doesn't include
 >> the symmetric case and have the main metafunction call the other. I
 >> don't see any better alternatives.
 >>
 >> And I don't see why this is a Redex-specific question. This would be a
 >> problem for anything that was executable, no?
 >
 > Certainly, for anything that was executable, I'd have to have some way
 > to stopping the infinite recursion.  Since redex metafunctions are
 > limited by comparison to scheme functions (no keywords, no optional
 > argument, etc), and since I wanted my redex definition to look as much
 > like my paper definition as possible, I came up with my original
 > solution.  That didn't work, so I looked for a solution that was
 > similarly close to my paper version.
 >
 > If I was just implementing this for Typed Scheme, I wouldn't really
 > care about how much it looked like the paper version, and I would have
 > lots of additional abstraction tools available.  That's why I was
 > asking for advice on how to represent this in redex.
 >
 > Personally, I'm not convinced that whatever benefits are being derived
 > from the caching are worth this sort of strange behavior, but perhaps
 > you have performance numbers that would convince me.
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@eecs.northwestern.edu>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 14:22:02 -0600

 On Tue, Jan 6, 2009 at 2:15 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > So it turns out that this problem is worse for me that I thought.  One
 > of the interesting things that I did with my redex model of Typed
 > Scheme in the past was selectively enable and disable different type
 > rules.  I used parameters for this.  In my new implementation of the
 > redex model, I wrote just about everything as metafunctions.  But now,
 > I can't use these parameters to turn type rules on and off.
 
 Anything that isn't in the term is going to cause problems for Redex.
 You could make it an explicit second argument, of course.
 
 Did you consider using a macro to abstract over the cases that appear
 in the metafunction?
 
 > Would it be possible to disable the caching just of side-condition
 > results?
 
 Not easily.
 
 > Would that have a big performance impact?
 
 I think that would effectively disable the caching (because the
 side-conditions need the bindings from the pattern).
 
 It wouldn't be too hard to provide a parameter that just disabled all
 caching and then those tricks would work, albeit slowly. But if you're
 not running big test suites, that might not matter.
 
 Would that help?
 
 Robby
 
 > I'd be happy to do
 > the performance testing.
 >
 > sam th
 >
 > On Sun, Jan 4, 2009 at 10:08 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> On Sun, Jan 4, 2009 at 3:33 PM, Robby Findler <robby@plt-scheme.org> wrote:
 >>> What you've written in the paper version is not directly executable
 >>> since your side-condition implicitly checks for termination. Redex
 >>> requires things to be executable. You can use one of the three choices
 >>> you've listed or you can define a helper relation that doesn't include
 >>> the symmetric case and have the main metafunction call the other. I
 >>> don't see any better alternatives.
 >>>
 >>> And I don't see why this is a Redex-specific question. This would be a
 >>> problem for anything that was executable, no?
 >>
 >> Certainly, for anything that was executable, I'd have to have some way
 >> to stopping the infinite recursion.  Since redex metafunctions are
 >> limited by comparison to scheme functions (no keywords, no optional
 >> argument, etc), and since I wanted my redex definition to look as much
 >> like my paper definition as possible, I came up with my original
 >> solution.  That didn't work, so I looked for a solution that was
 >> similarly close to my paper version.
 >>
 >> If I was just implementing this for Typed Scheme, I wouldn't really
 >> care about how much it looked like the paper version, and I would have
 >> lots of additional abstraction tools available.  That's why I was
 >> asking for advice on how to represent this in redex.
 >>
 >> Personally, I'm not convinced that whatever benefits are being derived
 >> from the caching are worth this sort of strange behavior, but perhaps
 >> you have performance numbers that would convince me.
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 15:53:09 -0500

 On Tue, Jan 6, 2009 at 3:22 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Tue, Jan 6, 2009 at 2:15 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> So it turns out that this problem is worse for me that I thought.  One
 >> of the interesting things that I did with my redex model of Typed
 >> Scheme in the past was selectively enable and disable different type
 >> rules.  I used parameters for this.  In my new implementation of the
 >> redex model, I wrote just about everything as metafunctions.  But now,
 >> I can't use these parameters to turn type rules on and off.
 >
 > Anything that isn't in the term is going to cause problems for Redex.
 > You could make it an explicit second argument, of course.
 >
 > Did you consider using a macro to abstract over the cases that appear
 > in the metafunction?
 
 What do you mean here?  A macro to generate the metafunction, so that
 I could create multiple versions?  That's an interesting idea, but I
 worry about the combinatorial explosion possibilities.  It already
 takes a really long time to compile the file.
 
 >> Would it be possible to disable the caching just of side-condition
 >> results?
 >
 > Not easily.
 >
 >> Would that have a big performance impact?
 >
 > I think that would effectively disable the caching (because the
 > side-conditions need the bindings from the pattern).
 
 Yeah, that makes sense.  I guess that wouldn't work.
 
 > It wouldn't be too hard to provide a parameter that just disabled all
 > caching and then those tricks would work, albeit slowly. But if you're
 > not running big test suites, that might not matter.
 >
 > Would that help?
 
 That would definitely help.  I also did the test we talked about a
 couple days ago (I just changed `memoize' to always return `f'), and
 the results are as follows:
 
 Time to run my small test suite (23 tests, all of which are calls to a
 big metafunction (roughly 500 lines of implementation, all in redex
 facilities)
 
 With caching:
 avg real: 1.685
 avg user: 1.368
 
 Without caching:
 avg real: 1.730
 avg user: 1.409
 
 So the caching provides about a 3% wall-clock speedup by either
 measurement.  I'd be interested to know the number of cache
 hits/misses, but I'm not sure where to count that.  I assume that with
 a test suite with more tests, the caching would be more valuable.
 
 Also, it seems like there's another place where memoization is done,
 in `build-metafunction' in "private/reduction-semantics.ss".  Should I
 be testing with that disabled as well?
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@eecs.northwestern.edu>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 14:56:22 -0600

 On Tue, Jan 6, 2009 at 2:53 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > On Tue, Jan 6, 2009 at 3:22 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Tue, Jan 6, 2009 at 2:15 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >>> So it turns out that this problem is worse for me that I thought.  One
 >>> of the interesting things that I did with my redex model of Typed
 >>> Scheme in the past was selectively enable and disable different type
 >>> rules.  I used parameters for this.  In my new implementation of the
 >>> redex model, I wrote just about everything as metafunctions.  But now,
 >>> I can't use these parameters to turn type rules on and off.
 >>
 >> Anything that isn't in the term is going to cause problems for Redex.
 >> You could make it an explicit second argument, of course.
 >>
 >> Did you consider using a macro to abstract over the cases that appear
 >> in the metafunction?
 >
 > What do you mean here?  A macro to generate the metafunction, so that
 > I could create multiple versions?  That's an interesting idea, but I
 > worry about the combinatorial explosion possibilities.  It already
 > takes a really long time to compile the file.
 
 I was thinking of making it a compile-time decision.
 
 >>> Would it be possible to disable the caching just of side-condition
 >>> results?
 >>
 >> Not easily.
 >>
 >>> Would that have a big performance impact?
 >>
 >> I think that would effectively disable the caching (because the
 >> side-conditions need the bindings from the pattern).
 >
 > Yeah, that makes sense.  I guess that wouldn't work.
 >
 >> It wouldn't be too hard to provide a parameter that just disabled all
 >> caching and then those tricks would work, albeit slowly. But if you're
 >> not running big test suites, that might not matter.
 >>
 >> Would that help?
 >
 > That would definitely help.  I also did the test we talked about a
 > couple days ago (I just changed `memoize' to always return `f'), and
 > the results are as follows:
 >
 > Time to run my small test suite (23 tests, all of which are calls to a
 > big metafunction (roughly 500 lines of implementation, all in redex
 > facilities)
 >
 > With caching:
 > avg real: 1.685
 > avg user: 1.368
 >
 > Without caching:
 > avg real: 1.730
 > avg user: 1.409
 
 That is surprisingly little.
 
 > So the caching provides about a 3% wall-clock speedup by either
 > measurement.  I'd be interested to know the number of cache
 > hits/misses, but I'm not sure where to count that.  I assume that with
 > a test suite with more tests, the caching would be more valuable.
 >
 > Also, it seems like there's another place where memoization is done,
 > in `build-metafunction' in "private/reduction-semantics.ss".  Should I
 > be testing with that disabled as well?
 
 Oh, right. I forgot about that caching. Yes, you'll need to disable
 that one, too.
 
 That is caching metafunction results. The other is caching pattern
 matching results.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@eecs.northwestern.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 15:57:40 -0500

 On Jan 6, 2009, at 3:56 PM, Robby Findler wrote:
 
 >>
 >> Time to run my small test suite (23 tests, all of which are calls  
 >> to a
 >> big metafunction (roughly 500 lines of implementation, all in redex
 >> facilities)
 >>
 >> With caching:
 >> avg real: 1.685
 >> avg user: 1.368
 >>
 >> Without caching:
 >> avg real: 1.730
 >> avg user: 1.409
 >
 > That is surprisingly little.
 
 
 Robby, at some point you implied that this caching was giving you a  
 solid improvement for some large test suite (RnRS?, partial conts?).  
 If you recall, perhaps it's worth re-testing the efficiency of the  
 cache. -- Matthias
 
From: "Robby Findler" <robby@eecs.northwestern.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 15:02:39 -0600

 I suspect the answer is that I gave bad advice earlier and Sam didn't
 actually completely disable the cache.
 
 I've done lots of profiling & timing testing and things with the redex
 code and, if memory serves, most of the time spent when matching is
 currently spent in the hash-table implementation (ie, the caching is
 effective).
 
 But lets see what Sam comes up with.
 
 Robby
 
 On Tue, Jan 6, 2009 at 2:57 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > On Jan 6, 2009, at 3:56 PM, Robby Findler wrote:
 >
 >>>
 >>> Time to run my small test suite (23 tests, all of which are calls to a
 >>> big metafunction (roughly 500 lines of implementation, all in redex
 >>> facilities)
 >>>
 >>> With caching:
 >>> avg real: 1.685
 >>> avg user: 1.368
 >>>
 >>> Without caching:
 >>> avg real: 1.730
 >>> avg user: 1.409
 >>
 >> That is surprisingly little.
 >
 >
 > Robby, at some point you implied that this caching was giving you a solid
 > improvement for some large test suite (RnRS?, partial conts?). If you
 > recall, perhaps it's worth re-testing the efficiency of the cache. --
 > Matthias
 >
 >
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@eecs.northwestern.edu>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 16:25:41 -0500

 On Tue, Jan 6, 2009 at 4:02 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I suspect the answer is that I gave bad advice earlier and Sam didn't
 > actually completely disable the cache.
 >
 > I've done lots of profiling & timing testing and things with the redex
 > code and, if memory serves, most of the time spent when matching is
 > currently spent in the hash-table implementation (ie, the caching is
 > effective).
 >
 > But lets see what Sam comes up with.
 
 So, I have to apologize here - the previous times I posted were
 totally useless.  They were measuring almost entirely mred startup
 time.  Timing just the redex, it's about twice as fast with caching as
 without - 100 vs 200 ms.  So caching is clearly a big win, and while
 I'd probably turn it off to be able to do my tricks, it's probably the
 right default.
 
 This does allow me to bring up a different point about redex
 performance, though.  For me, given those timings, the time in redex
 execution is pretty negligible.  By contrast, just compiling the two
 relevant files takes almost 5 seconds.   I don't have any ideas on how
 to speed that up, but for me, that's the more significant performance
 concern.
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@eecs.northwestern.edu>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 15:27:25 -0600

 When you say 'compiling' are you measuring the time that redex is
 taking to compile, or only mzscheme? (Ie, are you using mzc or
 something else?)
 
 Robby
 
 On Tue, Jan 6, 2009 at 3:25 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > On Tue, Jan 6, 2009 at 4:02 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> I suspect the answer is that I gave bad advice earlier and Sam didn't
 >> actually completely disable the cache.
 >>
 >> I've done lots of profiling & timing testing and things with the redex
 >> code and, if memory serves, most of the time spent when matching is
 >> currently spent in the hash-table implementation (ie, the caching is
 >> effective).
 >>
 >> But lets see what Sam comes up with.
 >
 > So, I have to apologize here - the previous times I posted were
 > totally useless.  They were measuring almost entirely mred startup
 > time.  Timing just the redex, it's about twice as fast with caching as
 > without - 100 vs 200 ms.  So caching is clearly a big win, and while
 > I'd probably turn it off to be able to do my tricks, it's probably the
 > right default.
 >
 > This does allow me to bring up a different point about redex
 > performance, though.  For me, given those timings, the time in redex
 > execution is pretty negligible.  By contrast, just compiling the two
 > relevant files takes almost 5 seconds.   I don't have any ideas on how
 > to speed that up, but for me, that's the more significant performance
 > concern.
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: "Sam TH" <samth@ccs.neu.edu>
To: "Robby Findler" <robby@eecs.northwestern.edu>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 16:33:29 -0500

 I'm using 'mzc -k' to get those times.  Obviously, it affects me
 similarly when I just hit run in DrScheme, but it's harder to time
 that precisely.
 
 sam th
 
 On Tue, Jan 6, 2009 at 4:27 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > When you say 'compiling' are you measuring the time that redex is
 > taking to compile, or only mzscheme? (Ie, are you using mzc or
 > something else?)
 >
 > Robby
 >
 > On Tue, Jan 6, 2009 at 3:25 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> On Tue, Jan 6, 2009 at 4:02 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> I suspect the answer is that I gave bad advice earlier and Sam didn't
 >>> actually completely disable the cache.
 >>>
 >>> I've done lots of profiling & timing testing and things with the redex
 >>> code and, if memory serves, most of the time spent when matching is
 >>> currently spent in the hash-table implementation (ie, the caching is
 >>> effective).
 >>>
 >>> But lets see what Sam comes up with.
 >>
 >> So, I have to apologize here - the previous times I posted were
 >> totally useless.  They were measuring almost entirely mred startup
 >> time.  Timing just the redex, it's about twice as fast with caching as
 >> without - 100 vs 200 ms.  So caching is clearly a big win, and while
 >> I'd probably turn it off to be able to do my tricks, it's probably the
 >> right default.
 >>
 >> This does allow me to bring up a different point about redex
 >> performance, though.  For me, given those timings, the time in redex
 >> execution is pretty negligible.  By contrast, just compiling the two
 >> relevant files takes almost 5 seconds.   I don't have any ideas on how
 >> to speed that up, but for me, that's the more significant performance
 >> concern.
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: "Robby Findler" <robby@eecs.northwestern.edu>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Tue, 6 Jan 2009 15:35:58 -0600

 I haven't looked too carefully at the time taken during expansion for
 redex, but it shouldn't be abnormal. It isn't doing anything
 particularly fancy (altho there is a lot of code).
 
 Something for another day tho, I'm afraid.
 
 Sorry,
 Robby
 
 On Tue, Jan 6, 2009 at 3:33 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > I'm using 'mzc -k' to get those times.  Obviously, it affects me
 > similarly when I just hit run in DrScheme, but it's harder to time
 > that precisely.
 >
 > sam th
 >
 > On Tue, Jan 6, 2009 at 4:27 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> When you say 'compiling' are you measuring the time that redex is
 >> taking to compile, or only mzscheme? (Ie, are you using mzc or
 >> something else?)
 >>
 >> Robby
 >>
 >> On Tue, Jan 6, 2009 at 3:25 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >>> On Tue, Jan 6, 2009 at 4:02 PM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>> I suspect the answer is that I gave bad advice earlier and Sam didn't
 >>>> actually completely disable the cache.
 >>>>
 >>>> I've done lots of profiling & timing testing and things with the redex
 >>>> code and, if memory serves, most of the time spent when matching is
 >>>> currently spent in the hash-table implementation (ie, the caching is
 >>>> effective).
 >>>>
 >>>> But lets see what Sam comes up with.
 >>>
 >>> So, I have to apologize here - the previous times I posted were
 >>> totally useless.  They were measuring almost entirely mred startup
 >>> time.  Timing just the redex, it's about twice as fast with caching as
 >>> without - 100 vs 200 ms.  So caching is clearly a big win, and while
 >>> I'd probably turn it off to be able to do my tricks, it's probably the
 >>> right default.
 >>>
 >>> This does allow me to bring up a different point about redex
 >>> performance, though.  For me, given those timings, the time in redex
 >>> execution is pretty negligible.  By contrast, just compiling the two
 >>> relevant files takes almost 5 seconds.   I don't have any ideas on how
 >>> to speed that up, but for me, that's the more significant performance
 >>> concern.
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>>
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: "Robby Findler" <robby@eecs.northwestern.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Wed, 7 Jan 2009 12:42:40 -0700

 At Tue, 6 Jan 2009 16:25:41 -0500, "Sam TH" wrote:
 > This does allow me to bring up a different point about redex
 > performance, though.  For me, given those timings, the time in redex
 > execution is pretty negligible.  By contrast, just compiling the two
 > relevant files takes almost 5 seconds.   I don't have any ideas on how
 > to speed that up, but for me, that's the more significant performance
 > concern.
 
 Are the two relevant files somewhere that I can try them?
 
 
 Thanks,
 Matthew
 
From: "Sam TH" <samth@ccs.neu.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: "Robby Findler" <robby@eecs.northwestern.edu>,
        "Matthias Felleisen" <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Wed, 7 Jan 2009 15:09:26 -0500

 On Wed, Jan 7, 2009 at 2:42 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Tue, 6 Jan 2009 16:25:41 -0500, "Sam TH" wrote:
 >> This does allow me to bring up a different point about redex
 >> performance, though.  For me, given those timings, the time in redex
 >> execution is pretty negligible.  By contrast, just compiling the two
 >> relevant files takes almost 5 seconds.   I don't have any ideas on how
 >> to speed that up, but for me, that's the more significant performance
 >> concern.
 >
 > Are the two relevant files somewhere that I can try them?
 
 http://svn.plt-scheme.org/usr/samth/work/ts-formal/redex/tests.ss and opsem.ss
 -- 
 sam th
 samth@ccs.neu.edu
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@eecs.northwestern.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, "Matthias Felleisen" <matthias@ccs.neu.edu>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Wed, 7 Jan 2009 14:57:32 -0700

 At Wed, 7 Jan 2009 15:09:26 -0500, "Sam TH" wrote:
 > On Wed, Jan 7, 2009 at 2:42 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > At Tue, 6 Jan 2009 16:25:41 -0500, "Sam TH" wrote:
 > >> This does allow me to bring up a different point about redex
 > >> performance, though.  For me, given those timings, the time in redex
 > >> execution is pretty negligible.  By contrast, just compiling the two
 > >> relevant files takes almost 5 seconds.   I don't have any ideas on how
 > >> to speed that up, but for me, that's the more significant performance
 > >> concern.
 > >
 > > Are the two relevant files somewhere that I can try them?
 > 
 > http://svn.plt-scheme.org/usr/samth/work/ts-formal/redex/tests.ss and opsem.ss
 
 The compiler seems to spend most of its time processing pattern matches
 and templates from `with-syntax' and `syntax' forms, because
 `define-metafunction' generates a lot of them. This may be inherently
 slow, but there's some duplication currently that makes it slower.
 
 The half-megabyte of bytecode for "opsem.ss" seems to be mostly
 compiled syntax pattern-matching code. For example, the metafunction
 fragment
 
   ;; and (if e1 e2 #f)
   [(comb-filter ((p_1+ ...) (p_1- ...)) 
                 ((p_2+ ...) (p_2- ...)) 
                 ((any_2 ... bot any_3 ...) any_1))
    ((p_1+ ... p_2+ ...) ())
    (side-condition (enable-T-IfAnd))]
 
 creates code that looks up `p_1+', coverts the result to a syntax list,
 matches syntax object as a list, extracts out the pieces into a list of
 `p_1+' syntax objects --- and then does all of the same work for
 `p_1-', `p_2+', `p_2-', `any_2, and `any_3', plus miscellaneous work
 for the non-repeated structure.
 
 But it generates this code three times. Two of them are because
 `side-conditions-rewritten' appears twice in the expansion of
 `internal-define-metafunction'. That duplication is easy to fix, at
 least. It seems like you also should avoid having a separate copy (and
 a redundant matching) for the rhs.
 
 Along the same lines, it looks like there may be redundant `to-lw's for
 a some of the code. For example, if you rename `p_2-' to something
 distinct, like `p_28-', then the symbol 'p_28- appears twice in the
 decompiled code as an argument to `init-loc-wrapper'. I think it's
 because `lhs-for-lw' includes every `bind-pat', so its duplicated by
 
    (list (list (to-lw lhs-for-lw)
                (list (to-lw/uq side-cond) ...)
                (list (cons (to-lw bind-id)
                            (to-lw bind-pat))
                      ...)
                (to-lw rhs))
          ...)
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Sam TH <samth@ccs.neu.edu>, Matthias Felleisen <matthias@ccs.neu.edu>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10001: redex evalues metafunction rhs over-eagerly
Date: Thu, 22 Jan 2009 09:45:10 -0600

 Exec summary: I was only able to do the most obvious fix Matthew
 mentioned, but this resulted in a 15% smaller (160K -> 136K)
 opsem_ss.zo file, so that's something (I was using yesterday's version
 of opsem.ss, which has changed since Matthew ran his experiment).
 
 Matthew: please read on .... especially the last section below.
 
 On Wed, Jan 7, 2009 at 3:57 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Wed, 7 Jan 2009 15:09:26 -0500, "Sam TH" wrote:
 >> On Wed, Jan 7, 2009 at 2:42 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote=
 :
 >> > At Tue, 6 Jan 2009 16:25:41 -0500, "Sam TH" wrote:
 >> >> This does allow me to bring up a different point about redex
 >> >> performance, though.  For me, given those timings, the time in redex
 >> >> execution is pretty negligible.  By contrast, just compiling the two
 >> >> relevant files takes almost 5 seconds.   I don't have any ideas on ho=
 w
 >> >> to speed that up, but for me, that's the more significant performance
 >> >> concern.
 >> >
 >> > Are the two relevant files somewhere that I can try them?
 >>
 >> http://svn.plt-scheme.org/usr/samth/work/ts-formal/redex/tests.ss and op=
 sem.ss
 >
 > The compiler seems to spend most of its time processing pattern matches
 > and templates from `with-syntax' and `syntax' forms, because
 > `define-metafunction' generates a lot of them. This may be inherently
 > slow, but there's some duplication currently that makes it slower.
 >
 > The half-megabyte of bytecode for "opsem.ss" seems to be mostly
 > compiled syntax pattern-matching code. For example, the metafunction
 > fragment
 >
 >  ;; and (if e1 e2 #f)
 >  [(comb-filter ((p_1+ ...) (p_1- ...))
 >                ((p_2+ ...) (p_2- ...))
 >                ((any_2 ... bot any_3 ...) any_1))
 >   ((p_1+ ... p_2+ ...) ())
 >   (side-condition (enable-T-IfAnd))]
 >
 > creates code that looks up `p_1+', coverts the result to a syntax list,
 > matches syntax object as a list, extracts out the pieces into a list of
 > `p_1+' syntax objects --- and then does all of the same work for
 > `p_1-', `p_2+', `p_2-', `any_2, and `any_3', plus miscellaneous work
 > for the non-repeated structure.
 
 See [*] below.
 
 > But it generates this code three times. Two of them are because
 > `side-conditions-rewritten' appears twice in the expansion of
 > `internal-define-metafunction'. That duplication is easy to fix, at
 > least. It seems like you also should avoid having a separate copy (and
 > a redundant matching) for the rhs.
 
 This is the easy thing that I was able to fix. It was just a brain
 fart that I wrote that.
 
 There do need to be two copies of some parts of the structure in order
 to do the typesetting (one copy that actually runs and the other copy
 that gets turned into a tree of the source locations of the code).
 
 > Along the same lines, it looks like there may be redundant `to-lw's for
 > a some of the code. For example, if you rename `p_2-' to something
 > distinct, like `p_28-', then the symbol 'p_28- appears twice in the
 > decompiled code as an argument to `init-loc-wrapper'.
 
 I don't see two copies in the output via the macro stepper. Already
 p_2- is unique in the above (but maybe you were looking at the whole
 thing)? As below.
 
 > I think it's
 > because `lhs-for-lw' includes every `bind-pat', so its duplicated by
 >
 >   (list (list (to-lw lhs-for-lw)
 >               (list (to-lw/uq side-cond) ...)
 >               (list (cons (to-lw bind-id)
 >                           (to-lw bind-pat))
 >                     ...)
 >               (to-lw rhs))
 >         ...)
 
 No, not in this case. bind-pat only contains 'name' things at the
 top-level. There seems to be a bug somewhere that leads to bind-pat
 always being empty. I didn't look into that yet, but there is
 certainly no duplication there.
 
 =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 
 In the current version of Redex, this code:
 
 #lang scheme/base
 (require redex/reduction-semantics)
 
 (define-language lang
   (p any))
 
 (define-metafunction lang
   ;; and (if e1 e2 #f)
   [(comb-filter ((p_1+ ...) (p_1- ...))
                 ((p_2+ ...) (p_2- ...))
                 ((any_2 ... bot any_3 ...) any_1))
    ((p_1+ ... p_2+ ...) ())
    (side-condition (enable-T-IfAnd))])
 
 (define (enable-T-IfAnd) #t)
 
 turns into the code below (thanks, macro stepper!).
 
 As far as I can tell, the code below only has one duplication, namely
 the big term-let expression. I think I can avoid that with some
 thunking, ie have a function that accepts the bindings and returns two
 thunks, one for the side-conditions and one for the right-hand-side,
 to be called at different times. (This is a non-trivial change to the
 structure of the code, however.)
 
 Do you think it would be worth it?
 
 I can also add an underscore pattern which means that the "any_1"
 "any_2" and "any_3" clauses in the term let could just go away (if Sam
 were to rewrite the metafunction definition, but he has already asked
 for _ patterns ...).
 
 As far as the [*] comment goes, that's because term-let expands into
 syntax-case (used to be with-syntax) and term into syntax. So you get
 patterns like
 
   (syntax-case (lookup-bindings bindings 'any_1)
     [(any_1 ...)
      (syntax-case (lookup-bindings bindings 'any_2)
       [(any_2 ...)
         ... more and more of those, one per binding in the term-let
         (enable-T-IfAnd)])])
 
 So all those syntax-case expressions are actually useless in this
 case. (I thought about adding some kind of an analysis of the term-let
 / term combination to remove unnecessary binders, but then I realized
 that you could unquote inside a term and then requote again, meaning
 that this would require traversing arbitrary Scheme code, so that
 seems like a bad idea.)
 
 Given what you see below, say in the second term-let expression, is
 there something better I can do? I have lots of control over the way
 the term-let is generated and what it expands into, but less over the
 pattern. In the fragment just above, it means that I can muck around
 quite a bit with the "(any_1 ...)" on the left-hand side of the
 syntax-case clause. Those patterns on the left are just there to put
 things into a form that the right-hand side can use (I am constructing
 them myself by making up ellipses wrappers based on calculating the
 ellipses depths somewhere else).
 
 Robby
 
 (module page scheme/base
   (#%module-begin
    (require redex/reduction-semantics)
    (begin
      (define-syntax lang
        (make-set!-transformer
         (make-language-id
          (case-lambda ((stx) (syntax-case stx (set!) ((set! x e)
 (raise-syntax-error 'define-language "cannot set! identifier" stx
 #'e)) ((x e ...) #'(define-language-name e ...)) (x (identifier? #'x)
 #'define-language-name))))
          '(p))))
      (define define-language-name (language lang (p any))))
    (begin
      (define-values (comb-filter2 comb-filter3)
        (let ((sc
               `((side-condition
                  (((p_1+ ...) (p_1- ...)) ((p_2+ ...) (p_2- ...))
 ((any_2 ... bot any_3 ...) any_1))
                  ,(lambda (bindings)
                     (term-let
                      ((any_1 (lookup-binding bindings 'any_1))
                       ((any_3 ...) (lookup-binding bindings 'any_3))
                       ((any_2 ...) (lookup-binding bindings 'any_2))
                       ((p_2- ...) (lookup-binding bindings 'p_2-))
                       ((p_2+ ...) (lookup-binding bindings 'p_2+))
                       ((p_1- ...) (lookup-binding bindings 'p_1-))
                       ((p_1+ ...) (lookup-binding bindings 'p_1+)))
                      (and (enable-T-IfAnd)))))))
              (dsc `#f))
          (build-metafunction
           lang
           sc
           (list
            (=CE=BB (comb-filter bindings)
              (term-let
               ((any_1 (lookup-binding bindings 'any_1))
                ((any_3 ...) (lookup-binding bindings 'any_3))
                ((any_2 ...) (lookup-binding bindings 'any_2))
                ((p_2- ...) (lookup-binding bindings 'p_2-))
                ((p_2+ ...) (lookup-binding bindings 'p_2+))
                ((p_1- ...) (lookup-binding bindings 'p_1-))
                ((p_1+ ...) (lookup-binding bindings 'p_1+)))
               (term-let () (term-let-fn ((comb-filter comb-filter))
 (term ((p_1+ ... p_2+ ...) ())))))))
           '()
           '()
           (=CE=BB (f/dom cps rhss)
             (make-metafunc-proc
              (let ((comb-filter (lambda (x) (f/dom x)))) comb-filter)
              (list (list (to-lw (((p_1+ ...) (p_1- ...)) ((p_2+ ...)
 (p_2- ...)) ((any_2 ... bot any_3 ...) any_1))) (list (to-lw/uq
 (enable-T-IfAnd))) (list) (to-lw ((p_1+ ... p_2+ ...) ()))))
              lang
              #t
              'comb-filter
              cps
              rhss
              (let ((comb-filter (lambda (x) (comb-filter3 x)))) comb-filter=
 )
              dsc
              sc))
           dsc
           'any
           'comb-filter)))
      (term-define-fn comb-filter comb-filter2))
    (define (enable-T-IfAnd) #t)))

