From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jun  5 18:12:25 2012
Received: from mail-vc0-f172.google.com (mail-vc0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q55MCLVL004118
	for <bugs@bugs.plt-scheme.org>; Tue, 5 Jun 2012 18:12:21 -0400
Message-Id: <201206052212.q55MCJgW004112@champlain.ccs.neu.edu>
Date: Tue, 5 Jun 2012 18:12:19 -0400
From: blake.johnson@byu.edu
To: bugs@racket-lang.org
Subject: Redex: Ability to specify output language for metafunction

>Number:         12824
>Category:       redex
>Synopsis:       Redex: Ability to specify output language for metafunction
>Class:          change-request
>Responsible:    robby
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Jun 05 18:16:01 -0400 2012
>Last-Modified:  Tue Jul 24 19:59:47 -0400 2012
>Originator:     Blake Johnson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.10--2012-05-31(c2d9f7ed/d)
>Environment:
unix "Linux zealot 3.2.0-24-generic #39-Ubuntu SMP Mon May 21 16:52:17 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 620093512
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/blake/.racket/5.3.0.10/collects"
 (non-existent-path))
("/home/blake/dist/racket/collects"
 ("plai" "lazy" "slideshow" "scribble" "version" "compiler" "plot" "trace" "openssl" "handin-server" "lang" "mzcom" "config" "icons" "typed-scheme" "meta" "html" "typed-racket" "eopl" "slatex" "games" "defaults" "json" "test-engine" "syntax" "images" "info-domain" "r5rs" "mysterx" "preprocessor" "parser-tools" "help" "data" "graphics" "setup" "schemeunit" "syntax-color" "teachpack" "stepper" "launcher" "srfi" "gui-debugger" "swindle" "typed" "texpict" "frtime" "unstable" "2htdp" "rnrs" "mrlib" "r6rs" "datalog" "mzlib" "test-box-recovery" "deinprogramm" "redex" "at-exp" "reader" "scribblings" "drracket" "racket" "xrepl" "tests" "profile" "string-constants" ".gitignore" "scheme" "embedded-gui" "honu" "errortrace" "combinator-parser" "net" "picturing-programs" "readline" "wxme" "xml" "racklog" "tex2page" "algol60" "handin-client" "sirmail" "repo-time-stamp" "db" "raco" "scriblib" "mred" "hierlist" "ffi" "make" "file" "web-server" "sgl" "macro-debugger" "dynext" "planet" "rackun!
 it" "browser" "htdp" "mzscheme" "drscheme" "framework" "s-exp"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
I would like to write compiler style metafunctions where the input language differs from the output language with a contract can specify terms from the input and output language, like:

(define-metafunction* lang compiled-lang
  compile : prog -> compiled-prog
  ...)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: blake.johnson@byu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12824: Redex: Ability to specify output language
 for metafunction
Date: Tue, 5 Jun 2012 19:03:53 -0500

 This gets a bit strange to do just literally like that (think about
 what it means for an individual case in the function when a
 metavariable is used that is the name of a non-terminal: it means
 different things on different sides!)
 
 You can, however union languages and hopefully build a single language
 where the above strangeness doesn't happen.
 
 Robby
 
 On Tue, Jun 5, 2012 at 5:16 PM,  <blake.johnson@byu.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12824
 >
 > Reported by Blake Johnson for release: 5.3.0.10--2012-05-31(c2d9f7ed/d)
 >
 > *** Description:
 > I would like to write compiler style metafunctions where the input language differs from the output language with a contract can specify terms from the input and output language, like:
 >
 > (define-metafunction* lang compiled-lang
 >  compile : prog -> compiled-prog
 >  ...)
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux zealot 3.2.0-24-generic #39-Ubuntu SMP Mon May 21 16:52:17 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 620093512
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/blake/.racket/5.3.0.10/collects"
 >  (non-existent-path))
 > ("/home/blake/dist/racket/collects"
 >  ("plai" "lazy" "slideshow" "scribble" "version" "compiler" "plot" "trace" "openssl" "handin-server" "lang" "mzcom" "config" "icons" "typed-scheme" "meta" "html" "typed-racket" "eopl" "slatex" "games" "defaults" "json" "test-engine" "syntax" "images" "info-domain" "r5rs" "mysterx" "preprocessor" "parser-tools" "help" "data" "graphics" "setup" "schemeunit" "syntax-color" "teachpack" "stepper" "launcher" "srfi" "gui-debugger" "swindle" "typed" "texpict" "frtime" "unstable" "2htdp" "rnrs" "mrlib" "r6rs" "datalog" "mzlib" "test-box-recovery" "deinprogramm" "redex" "at-exp" "reader" "scribblings" "drracket" "racket" "xrepl" "tests" "profile" "string-constants" ".gitignore" "scheme" "embedded-gui" "honu" "errortrace" "combinator-parser" "net" "picturing-programs" "readline" "wxme" "xml" "racklog" "tex2page" "algol60" "handin-client" "sirmail" "repo-time-stamp" "db" "raco" "scriblib" "mred" "hierlist" "ffi" "make" "file" "web-server" "sgl" "macro-debugger" "dynext" "planet" "rackun!
 >  it" "browser" "htdp" "mzscheme" "drscheme" "framework" "s-exp"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: blake.johnson@byu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12824: Redex: Ability to specify output language
 for metafunction
Date: Wed, 6 Jun 2012 15:45:14 -0600

 I don't understand the strange-ness.
 
 All we're asking is for the second language to have meaning in the
 output contract. It won't affect the input contract or any of the
 input patterns. And the output patterns already aren't affected by the
 language, just the matching context.
 
 Jay
 
 On Tue, Jun 5, 2012 at 6:03 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > This gets a bit strange to do just literally like that (think about
 > what it means for an individual case in the function when a
 > metavariable is used that is the name of a non-terminal: it means
 > different things on different sides!)
 >
 > You can, however union languages and hopefully build a single language
 > where the above strangeness doesn't happen.
 >
 > Robby
 >
 > On Tue, Jun 5, 2012 at 5:16 PM,  <blake.johnson@byu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12824
 >>
 >> Reported by Blake Johnson for release: 5.3.0.10--2012-05-31(c2d9f7ed/d)
 >>
 >> *** Description:
 >> I would like to write compiler style metafunctions where the input language differs from the output language with a contract can specify terms from the input and output language, like:
 >>
 >> (define-metafunction* lang compiled-lang
 >>  compile : prog -> compiled-prog
 >>  ...)
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux zealot 3.2.0-24-generic #39-Ubuntu SMP Mon May 21 16:52:17 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 620093512
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/blake/.racket/5.3.0.10/collects"
 >>  (non-existent-path))
 >> ("/home/blake/dist/racket/collects"
 >>  ("plai" "lazy" "slideshow" "scribble" "version" "compiler" "plot" "trace" "openssl" "handin-server" "lang" "mzcom" "config" "icons" "typed-scheme" "meta" "html" "typed-racket" "eopl" "slatex" "games" "defaults" "json" "test-engine" "syntax" "images" "info-domain" "r5rs" "mysterx" "preprocessor" "parser-tools" "help" "data" "graphics" "setup" "schemeunit" "syntax-color" "teachpack" "stepper" "launcher" "srfi" "gui-debugger" "swindle" "typed" "texpict" "frtime" "unstable" "2htdp" "rnrs" "mrlib" "r6rs" "datalog" "mzlib" "test-box-recovery" "deinprogramm" "redex" "at-exp" "reader" "scribblings" "drracket" "racket" "xrepl" "tests" "profile" "string-constants" ".gitignore" "scheme" "embedded-gui" "honu" "errortrace" "combinator-parser" "net" "picturing-programs" "readline" "wxme" "xml" "racklog" "tex2page" "algol60" "handin-client" "sirmail" "repo-time-stamp" "db" "raco" "scriblib" "mred" "hierlist" "ffi" "make" "file" "web-server" "sgl" "macro-debugger" "dynext" "planet" "rackun!
 >>  it" "browser" "htdp" "mzscheme" "drscheme" "framework" "s-exp"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: blake.johnson@byu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12824: Redex: Ability to specify output language
 for metafunction
Date: Wed, 6 Jun 2012 17:03:28 -0500

 Oh, and the follow up question: would you expect that readers of the
 typeset version of your semantics would understand this? (In the
 second case where 'e' is in both languages.)
 
 Robby
 
 On Wed, Jun 6, 2012 at 5:02 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Do the two languages have any non-terminals in common? If not, just
 > make a single 'language' that contains both and use that in the
 > metafunction. If they do, then lets assume that 'e' in a non-terminal
 > in both. What does this metafunction mean?
 >
 > (define-metafunction L
 >  [(f e) e])
 >
 > Does it mean to (possibly) signal an error on the variable lookup?
 >
 > Robby
 >
 > On Wed, Jun 6, 2012 at 4:45 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 >> I don't understand the strange-ness.
 >>
 >> All we're asking is for the second language to have meaning in the
 >> output contract. It won't affect the input contract or any of the
 >> input patterns. And the output patterns already aren't affected by the
 >> language, just the matching context.
 >>
 >> Jay
 >>
 >> On Tue, Jun 5, 2012 at 6:03 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> This gets a bit strange to do just literally like that (think about
 >>> what it means for an individual case in the function when a
 >>> metavariable is used that is the name of a non-terminal: it means
 >>> different things on different sides!)
 >>>
 >>> You can, however union languages and hopefully build a single language
 >>> where the above strangeness doesn't happen.
 >>>
 >>> Robby
 >>>
 >>> On Tue, Jun 5, 2012 at 5:16 PM,  <blake.johnson@byu.edu> wrote:
 >>>> A new problem report is waiting at
 >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12824
 >>>>
 >>>> Reported by Blake Johnson for release: 5.3.0.10--2012-05-31(c2d9f7ed/d)
 >>>>
 >>>> *** Description:
 >>>> I would like to write compiler style metafunctions where the input language differs from the output language with a contract can specify terms from the input and output language, like:
 >>>>
 >>>> (define-metafunction* lang compiled-lang
 >>>>  compile : prog -> compiled-prog
 >>>>  ...)
 >>>>
 >>>> *** How to repeat:
 >>>>
 >>>>
 >>>> *** Environment:
 >>>> unix "Linux zealot 3.2.0-24-generic #39-Ubuntu SMP Mon May 21 16:52:17 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>>> Human Language: english
 >>>> (current-memory-use) 620093512
 >>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>>
 >>>>
 >>>> Collections:
 >>>> ("/home/blake/.racket/5.3.0.10/collects"
 >>>>  (non-existent-path))
 >>>> ("/home/blake/dist/racket/collects"
 >>>>  ("plai" "lazy" "slideshow" "scribble" "version" "compiler" "plot" "trace" "openssl" "handin-server" "lang" "mzcom" "config" "icons" "typed-scheme" "meta" "html" "typed-racket" "eopl" "slatex" "games" "defaults" "json" "test-engine" "syntax" "images" "info-domain" "r5rs" "mysterx" "preprocessor" "parser-tools" "help" "data" "graphics" "setup" "schemeunit" "syntax-color" "teachpack" "stepper" "launcher" "srfi" "gui-debugger" "swindle" "typed" "texpict" "frtime" "unstable" "2htdp" "rnrs" "mrlib" "r6rs" "datalog" "mzlib" "test-box-recovery" "deinprogramm" "redex" "at-exp" "reader" "scribblings" "drracket" "racket" "xrepl" "tests" "profile" "string-constants" ".gitignore" "scheme" "embedded-gui" "honu" "errortrace" "combinator-parser" "net" "picturing-programs" "readline" "wxme" "xml" "racklog" "tex2page" "algol60" "handin-client" "sirmail" "repo-time-stamp" "db" "raco" "scriblib" "mred" "hierlist" "ffi" "make" "file" "web-server" "sgl" "macro-debugger" "dynext" "planet" "rackun!
 >>>>  it" "browser" "htdp" "mzscheme" "drscheme" "framework" "s-exp"))
 >>>>
 >>>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>>
 >>
 >>
 >>
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://faculty.cs.byu.edu/~jay
 >>
 >> "The glory of God is Intelligence" - D&C 93
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: blake.johnson@byu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12824: Redex: Ability to specify output language
 for metafunction
Date: Wed, 6 Jun 2012 17:02:25 -0500

 Do the two languages have any non-terminals in common? If not, just
 make a single 'language' that contains both and use that in the
 metafunction. If they do, then lets assume that 'e' in a non-terminal
 in both. What does this metafunction mean?
 
 (define-metafunction L
   [(f e) e])
 
 Does it mean to (possibly) signal an error on the variable lookup?
 
 Robby
 
 On Wed, Jun 6, 2012 at 4:45 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 > I don't understand the strange-ness.
 >
 > All we're asking is for the second language to have meaning in the
 > output contract. It won't affect the input contract or any of the
 > input patterns. And the output patterns already aren't affected by the
 > language, just the matching context.
 >
 > Jay
 >
 > On Tue, Jun 5, 2012 at 6:03 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> This gets a bit strange to do just literally like that (think about
 >> what it means for an individual case in the function when a
 >> metavariable is used that is the name of a non-terminal: it means
 >> different things on different sides!)
 >>
 >> You can, however union languages and hopefully build a single language
 >> where the above strangeness doesn't happen.
 >>
 >> Robby
 >>
 >> On Tue, Jun 5, 2012 at 5:16 PM,  <blake.johnson@byu.edu> wrote:
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12824
 >>>
 >>> Reported by Blake Johnson for release: 5.3.0.10--2012-05-31(c2d9f7ed/d)
 >>>
 >>> *** Description:
 >>> I would like to write compiler style metafunctions where the input language differs from the output language with a contract can specify terms from the input and output language, like:
 >>>
 >>> (define-metafunction* lang compiled-lang
 >>>  compile : prog -> compiled-prog
 >>>  ...)
 >>>
 >>> *** How to repeat:
 >>>
 >>>
 >>> *** Environment:
 >>> unix "Linux zealot 3.2.0-24-generic #39-Ubuntu SMP Mon May 21 16:52:17 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 620093512
 >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>
 >>>
 >>> Collections:
 >>> ("/home/blake/.racket/5.3.0.10/collects"
 >>>  (non-existent-path))
 >>> ("/home/blake/dist/racket/collects"
 >>>  ("plai" "lazy" "slideshow" "scribble" "version" "compiler" "plot" "trace" "openssl" "handin-server" "lang" "mzcom" "config" "icons" "typed-scheme" "meta" "html" "typed-racket" "eopl" "slatex" "games" "defaults" "json" "test-engine" "syntax" "images" "info-domain" "r5rs" "mysterx" "preprocessor" "parser-tools" "help" "data" "graphics" "setup" "schemeunit" "syntax-color" "teachpack" "stepper" "launcher" "srfi" "gui-debugger" "swindle" "typed" "texpict" "frtime" "unstable" "2htdp" "rnrs" "mrlib" "r6rs" "datalog" "mzlib" "test-box-recovery" "deinprogramm" "redex" "at-exp" "reader" "scribblings" "drracket" "racket" "xrepl" "tests" "profile" "string-constants" ".gitignore" "scheme" "embedded-gui" "honu" "errortrace" "combinator-parser" "net" "picturing-programs" "readline" "wxme" "xml" "racklog" "tex2page" "algol60" "handin-client" "sirmail" "repo-time-stamp" "db" "raco" "scriblib" "mred" "hierlist" "ffi" "make" "file" "web-server" "sgl" "macro-debugger" "dynext" "planet" "rackun!
 >>>  it" "browser" "htdp" "mzscheme" "drscheme" "framework" "s-exp"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>
 >
 >
 >
 > --
 > Jay McCarthy <jay@cs.byu.edu>
 > Assistant Professor / Brigham Young University
 > http://faculty.cs.byu.edu/~jay
 >
 > "The glory of God is Intelligence" - D&C 93
 
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: blake.johnson@byu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12824: Redex: Ability to specify output language
 for metafunction
Date: Wed, 6 Jun 2012 16:07:57 -0600

 On Wed, Jun 6, 2012 at 4:02 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Do the two languages have any non-terminals in common? If not, just
 > make a single 'language' that contains both and use that in the
 > metafunction. If they do, then lets assume that 'e' in a non-terminal
 > in both. What does this metafunction mean?
 >
 > (define-metafunction L
 >  [(f e) e])
 >
 > Does it mean to (possibly) signal an error on the variable lookup?
 
 I don't see the relevance of this question.
 
 (define-metafunction* In-L Out-L
   f : In-term In-term In-term -> Out-term
   [(f In-term In-term In-term) In-term]
   ...)
 
 is what I mean.
 
 The ONLY place where "Out-L" will have any relevance is for Out-term
 so that the correct contract is used.
 
 So,
 
 (define-metafunction* L1 L2
   f : e -> e
   ...)
 
 would mean it takes an e from L1 and returns an e from L2. I'm not
 sure how to typeset that, but I don't think typesetting concerns
 should prevent us from putting accurate contracts on functions.
 
 Jay
 
 
 >
 > Robby
 >
 > On Wed, Jun 6, 2012 at 4:45 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 >> I don't understand the strange-ness.
 >>
 >> All we're asking is for the second language to have meaning in the
 >> output contract. It won't affect the input contract or any of the
 >> input patterns. And the output patterns already aren't affected by the
 >> language, just the matching context.
 >>
 >> Jay
 >>
 >> On Tue, Jun 5, 2012 at 6:03 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> This gets a bit strange to do just literally like that (think about
 >>> what it means for an individual case in the function when a
 >>> metavariable is used that is the name of a non-terminal: it means
 >>> different things on different sides!)
 >>>
 >>> You can, however union languages and hopefully build a single language
 >>> where the above strangeness doesn't happen.
 >>>
 >>> Robby
 >>>
 >>> On Tue, Jun 5, 2012 at 5:16 PM,  <blake.johnson@byu.edu> wrote:
 >>>> A new problem report is waiting at
 >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12824
 >>>>
 >>>> Reported by Blake Johnson for release: 5.3.0.10--2012-05-31(c2d9f7ed/d)
 >>>>
 >>>> *** Description:
 >>>> I would like to write compiler style metafunctions where the input language differs from the output language with a contract can specify terms from the input and output language, like:
 >>>>
 >>>> (define-metafunction* lang compiled-lang
 >>>>  compile : prog -> compiled-prog
 >>>>  ...)
 >>>>
 >>>> *** How to repeat:
 >>>>
 >>>>
 >>>> *** Environment:
 >>>> unix "Linux zealot 3.2.0-24-generic #39-Ubuntu SMP Mon May 21 16:52:17 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>>> Human Language: english
 >>>> (current-memory-use) 620093512
 >>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>>
 >>>>
 >>>> Collections:
 >>>> ("/home/blake/.racket/5.3.0.10/collects"
 >>>>  (non-existent-path))
 >>>> ("/home/blake/dist/racket/collects"
 >>>>  ("plai" "lazy" "slideshow" "scribble" "version" "compiler" "plot" "trace" "openssl" "handin-server" "lang" "mzcom" "config" "icons" "typed-scheme" "meta" "html" "typed-racket" "eopl" "slatex" "games" "defaults" "json" "test-engine" "syntax" "images" "info-domain" "r5rs" "mysterx" "preprocessor" "parser-tools" "help" "data" "graphics" "setup" "schemeunit" "syntax-color" "teachpack" "stepper" "launcher" "srfi" "gui-debugger" "swindle" "typed" "texpict" "frtime" "unstable" "2htdp" "rnrs" "mrlib" "r6rs" "datalog" "mzlib" "test-box-recovery" "deinprogramm" "redex" "at-exp" "reader" "scribblings" "drracket" "racket" "xrepl" "tests" "profile" "string-constants" ".gitignore" "scheme" "embedded-gui" "honu" "errortrace" "combinator-parser" "net" "picturing-programs" "readline" "wxme" "xml" "racklog" "tex2page" "algol60" "handin-client" "sirmail" "repo-time-stamp" "db" "raco" "scriblib" "mred" "hierlist" "ffi" "make" "file" "web-server" "sgl" "macro-debugger" "dynext" "planet" "rackun!
 >>>>  it" "browser" "htdp" "mzscheme" "drscheme" "framework" "s-exp"))
 >>>>
 >>>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>>
 >>
 >>
 >>
 >> --
 >> Jay McCarthy <jay@cs.byu.edu>
 >> Assistant Professor / Brigham Young University
 >> http://faculty.cs.byu.edu/~jay
 >>
 >> "The glory of God is Intelligence" - D&C 93
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: blake.johnson@byu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12824: Redex: Ability to specify output language
 for metafunction
Date: Wed, 6 Jun 2012 17:13:19 -0500

 On Wed, Jun 6, 2012 at 5:07 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 > On Wed, Jun 6, 2012 at 4:02 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> Do the two languages have any non-terminals in common? If not, just
 >> make a single 'language' that contains both and use that in the
 >> metafunction. If they do, then lets assume that 'e' in a non-terminal
 >> in both. What does this metafunction mean?
 >>
 >> (define-metafunction L
 >>  [(f e) e])
 >>
 >> Does it mean to (possibly) signal an error on the variable lookup?
 >
 > I don't see the relevance of this question.
 >
 > (define-metafunction* In-L Out-L
 >  f : In-term In-term In-term -> Out-term
 >  [(f In-term In-term In-term) In-term]
 >  ...)
 >
 > is what I mean.
 >
 > The ONLY place where "Out-L" will have any relevance is for Out-term
 > so that the correct contract is used.
 >
 > So,
 >
 > (define-metafunction* L1 L2
 >  f : e -> e
 >  ...)
 >
 > would mean it takes an e from L1 and returns an e from L2. I'm not
 > sure how to typeset that, but I don't think typesetting concerns
 > should prevent us from putting accurate contracts on functions.
 
 Well, that's a different way of doing this than I had had in mind, and
 much simpler.
 
 I also don't agree with the sentiment that typesetting is not a
 significant concern. I think that if we allow Redex programs whose
 typeset versions are not (mostly) recognizable as the content of
 figures then we're doing something wrong in the design of Redex.
 
 Meanwhile, while you wait for somethign like define-metafunction*, you
 can simply put an 'any' in the range contract and write a second
 metafunction that just calls the first (with an 'any' on the input
 contract). You could even write a macro for this pattern and then see
 how you like it in the context of a real model you're working on.
 
 Is that okay for the meantime? And maybe in a while you can show me a
 model that you're happy with that uses this feature?
 
 Robby
 
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: blake.johnson@byu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12824: Redex: Ability to specify output language
 for metafunction
Date: Wed, 6 Jun 2012 18:38:28 -0600

 Good idea! It works:
 
 #lang racket
 (require redex
          (for-syntax syntax/parse
                      unstable/debug))
 
 (define-language L1
   [e 0
      a])
 
 (define-language L2
   [e 1])
 
 (define-syntax (define-metafunction* stx)
   (syntax-parse stx
     [(define-metafunction* L1 L2
        f (~datum :) dom ... (~datum ->) rng
        [(_ clause-arg ...) . clause-body]
        ...)
      (with-syntax
          ([(any-dom ...)
            (map (λ (x) #'any) (syntax->list #'(dom ...)))])
        (syntax/loc stx
          (begin
            (define-metafunction L1
              f-prime : dom ... -> any
              [(f-prime clause-arg ...) . clause-body]
              ...)
            (define-metafunction L2 f : any-dom ... -> rng
              [(f any-dom ...)
               (f-prime any-dom ...)]))))]))
 
 (define-metafunction* L1 L2
   f : e -> e
   [(f 0)
    1]
   [(f a)
    2])
 
 (term (f 0))
 (term (f a))
 
 As far as type-setting, I think the solution in a paper is that if you
 have two languages with the same non-terminals, you shouldn't use them
 in the same figures unless you give them slightly different notation,
 like e and \hat{e}. So maybe Redex shouldn't really do anything in
 cases like that?
 
 Jay
 
 On Wed, Jun 6, 2012 at 4:13 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Wed, Jun 6, 2012 at 5:07 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 >> On Wed, Jun 6, 2012 at 4:02 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> Do the two languages have any non-terminals in common? If not, just
 >>> make a single 'language' that contains both and use that in the
 >>> metafunction. If they do, then lets assume that 'e' in a non-terminal
 >>> in both. What does this metafunction mean?
 >>>
 >>> (define-metafunction L
 >>>  [(f e) e])
 >>>
 >>> Does it mean to (possibly) signal an error on the variable lookup?
 >>
 >> I don't see the relevance of this question.
 >>
 >> (define-metafunction* In-L Out-L
 >>  f : In-term In-term In-term -> Out-term
 >>  [(f In-term In-term In-term) In-term]
 >>  ...)
 >>
 >> is what I mean.
 >>
 >> The ONLY place where "Out-L" will have any relevance is for Out-term
 >> so that the correct contract is used.
 >>
 >> So,
 >>
 >> (define-metafunction* L1 L2
 >>  f : e -> e
 >>  ...)
 >>
 >> would mean it takes an e from L1 and returns an e from L2. I'm not
 >> sure how to typeset that, but I don't think typesetting concerns
 >> should prevent us from putting accurate contracts on functions.
 >
 > Well, that's a different way of doing this than I had had in mind, and
 > much simpler.
 >
 > I also don't agree with the sentiment that typesetting is not a
 > significant concern. I think that if we allow Redex programs whose
 > typeset versions are not (mostly) recognizable as the content of
 > figures then we're doing something wrong in the design of Redex.
 >
 > Meanwhile, while you wait for somethign like define-metafunction*, you
 > can simply put an 'any' in the range contract and write a second
 > metafunction that just calls the first (with an 'any' on the input
 > contract). You could even write a macro for this pattern and then see
 > how you like it in the context of a real model you're working on.
 >
 > Is that okay for the meantime? And maybe in a while you can show me a
 > model that you're happy with that uses this feature?
 >
 > Robby
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: blake.johnson@byu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12824: Redex: Ability to specify output language
 for metafunction
Date: Wed, 6 Jun 2012 19:43:35 -0500

 On Wed, Jun 6, 2012 at 7:38 PM, Jay McCarthy <jay.mccarthy@gmail.com> wrote:
 > Good idea! It works:
 >
 > #lang racket
 > (require redex
 >         (for-syntax syntax/parse
 >                     unstable/debug))
 >
 > (define-language L1
 >  [e 0
 >     a])
 >
 > (define-language L2
 >  [e 1])
 >
 > (define-syntax (define-metafunction* stx)
 >  (syntax-parse stx
 >    [(define-metafunction* L1 L2
 >       f (~datum :) dom ... (~datum ->) rng
 >       [(_ clause-arg ...) . clause-body]
 >       ...)
 >     (with-syntax
 >         ([(any-dom ...)
 >           (map (λ (x) #'any) (syntax->list #'(dom ...)))])
 >       (syntax/loc stx
 >         (begin
 >           (define-metafunction L1
 >             f-prime : dom ... -> any
 >             [(f-prime clause-arg ...) . clause-body]
 >             ...)
 >           (define-metafunction L2 f : any-dom ... -> rng
 >             [(f any-dom ...)
 >              (f-prime any-dom ...)]))))]))
 >
 > (define-metafunction* L1 L2
 >  f : e -> e
 >  [(f 0)
 >   1]
 >  [(f a)
 >   2])
 >
 > (term (f 0))
 > (term (f a))
 
 Glad to hear it. After you get a model you think looks good (ie it
 looks the way you'd want to present it in a paper) maybe we can look
 at it together and think about the best to fold something back in to
 Redex.
 
 I think Matthias would also want to join that discussion.
 
 > As far as type-setting, I think the solution in a paper is that if you
 > have two languages with the same non-terminals, you shouldn't use them
 > in the same figures unless you give them slightly different notation,
 > like e and \hat{e}. So maybe Redex shouldn't really do anything in
 > cases like that?
 
 
 I think I must be misinterpreting something. If you have two languages
 without overlap in the non-terminals and you want to make a
 metafunction that goes between them, can't you use
 define-union-language? Indeed, even if there are overlapping
 non-terminals-- then you can use rewriters in the typesetting to add
 the hats to things that have specific prefixes.
 
 Robby
 

