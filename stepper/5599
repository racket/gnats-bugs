From ptg@acm.org  Thu Jul 11 10:45:17 2002
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id KAA14746
	for <bugs>; Thu, 11 Jul 2002 10:45:17 -0400
Message-Id: <200207111445.KAA14746@champlain.ccs.neu.edu>
Date: Thu, 11 Jul 2002 10:45:17 -0400
From: Paul Graunke <ptg@acm.org>
To: bugs@plt-scheme.org
Subject: stepper fails on collapsed source

>Number:         5599
>Category:       stepper
>Synopsis:       stepper fails on collapsed source
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    clements
>State:          open
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Thu Jul 11 10:50:01 EDT 2002
>Closed-Date:    
>Last-Modified:  Mon May  5 11:35:01 EDT 2003
>Originator:     Paul Graunke
>Release:        200
>Organization:
plt
>Environment:
unix "SunOS subra.ccs.neu.edu 5.8 Generic_108528-15 sun4u sparc SUNW,Sun-Blade-100" (sparc-solaris)

Docs Installed:
("help" "beginning" "beginning-abbr" "advanced" "intermediate" "intermediate-lambda" "drscheme" "r5rs" "mzscheme" "mzlib" "mred" "framework" "misclib" "mzc" "insidemz" "tools" "tour" "t-y-scheme" "tex2page")

Collections:
(("/home/ptg/world/ptg/collects" ("spgsql" "cgi-compiler" "format" "schema" "net-apps" "cps-jvm" "vnc" "xwin" "pj" "tests" "util" "small-web" "pages" "file" "pgscsh-0.2" "crypt")) ("/home/ptg/plt/collects" ("CVS" "afm" "algol60" "doc" "browser" "compiler" "cvs-time-stamp" "defaults" "drjava" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrflow" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "parser-tools" "readline" "setup" "sirmail" "slatex" "slibinit" "srpersist" "stepper" "string-constants" "syntax" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))

Human Language: english
>Description:
The stepper can&apos;t un-macro expand stuff inside of (...) 
collapsed source. 
 
unwind-and/or: syntax: (string=? password blahblah) does not match and/or patterns
>How-To-Repeat:
Load /home/ptg/login.ss on neu&apos;s file system. 
This file contains an (and (string=? username "Paul") (string=? password "blahblah")) inside of a collapsed 
function body. 
 
(I don&apos;t know how to attach a file with snips to this 
 web form.) 
Click the Step button.
>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->clements
Responsible-Changed-By: clements
Responsible-Changed-When: Fri Jul 12 09:06:46 2002
Responsible-Changed-Why:
    stepper bug

From: John Clements <clements@brinckerhoff.org>
To: bugs@plt-scheme.org, laminatedwastrel@brinckerhoff.org, ptg@acm.org,
        gnats-admin@plt-scheme.org
Cc:  
Subject: Re: stepper/5599: Stepper fails on collapsed sexps
Date: Mon, 5 May 2003 11:30:33 -0400

 https://internal.plt-scheme.org/cgis-bin/gnatsweb.pl?cmd=view%20audit- 
 trail&pr=5599&database=plt
 
 Revisiting my open PR's, I came across this one from Paul Graunke.  The  
 problem is that in collapsed s-expressions, all hidden expressions are  
 assigned the same source position.  This information is the only way  
 the stepper has of distinguishing macro boundaries.
 
 Example: consider these two programs.
 
 (cond [true 3]
        [else (if test x y)])
 
 (cond [true 3]
        [test x]
        [else y])
 
 They expand to the same thing [*], but the stepper needs to treat them  
 differently.  The 'origin' fields do not suffice, because the 'cond'  
 origin tag is attached only to the outermost expression of the  
 expansion.  The stepper therefore distinguishes these by examining the  
 source position of each subexpression.
 
 Unfortunately, this breaks down when s-expressions are collapsed.  In  
 general, though, this isn't a problem with s-expression collapsing; the  
 fact is that looking at the source position isn't really a good idea at  
 all, and breaks down for more interesting (read: pathological) macros.
 
 In fact, I believe that macro invocations should tag every s-expression  
 they introduce with an entry in the 'origin' field.  Of course, that's  
 easier said than done; in the presence of higher-order syntax  
 transformers, it's not always possible to tell what macro is being  
 expanded.
 
 Perhaps the most general solution would simply be to force each macro  
 to provide an unwinder.  Of course, this unwinder has to understand the  
 reduction semantics for the language ....
 
 Okay, this message goes under "speculation" at this point, but I'll  
 send it, just so it doesn't get lost.
 
 john
   
 
>Unformatted:

