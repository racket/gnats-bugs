From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Feb 20 16:11:20 2009
Received: from mail-gx0-f176.google.com (mail-gx0-f176.google.com [209.85.217.176])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n1KLBBHl029290
	for <bugs@bugs.plt-scheme.org>; Fri, 20 Feb 2009 16:11:11 -0500
Message-Id: <200902202111.n1KLB8Mq029282@champlain.ccs.neu.edu>
Date: Fri, 20 Feb 2009 16:11:08 -0500
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: stepper signals "with-syntax: binding match failed" error on program

>Number:         10086
>Category:       stepper
>Synopsis:       stepper signals "with-syntax: binding match failed" error on program
>Class:          change-request
>Responsible:    clements
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Feb 20 16:12:01 -0500 2009
>Closed-Date:    Mon Mar 23 00:06:30 -0400 2009
>Last-Modified:  Mon Mar 23 00:06:30 -0400 2009
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.4.3-svn15feb2009
>Environment:
macosx "Darwin europe.local 8.11.1 Darwin Kernel Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 204059056

Collections:
(("/Users/matthias/0Unison/collects/" ".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "short" "testing" "tll-collects" "utils" "web") ("/Users/matthias/Library/PLT Scheme/4.1.4.3/collects" non-existent-path) ("/Users/matthias/plt/collects" ".svn" "2htdp" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syn!
 tax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
Marc Smih send me the program below. The stepper works
fine for about 10 to 20 steps and then signals the "with-syntax"
error. I have tried to narrow things down, copying and pasting
a definition at a time into some other buffer -- to no avail. 
Sorry. 

*I* noticed that the ->application button is apparently doing nothing for this program. You must use the single-step button. 
>How-To-Repeat:
;; CS101
;; Spring 2009
;; Assignment 3 
;; Aaron Linder
;; 2/20/09
;; Description: This program creates a ball and then moves it around a scene, bouncing 
;;              the ball off of each wall that it encounters.

(define RADIUS 25)
(define BALL (circle RADIUS "solid" "black"))

;; Scene dimensions
(define WIDTH 500)
(define HEIGHT 300)

;; Create the background scene image
(define BACKGROUND
  (place-image (rectangle WIDTH HEIGHT "solid" "yellow")
               (/ WIDTH 2) (/ HEIGHT 2)
               (empty-scene WIDTH HEIGHT)))

;; Data Definition of ball-world
(define-struct ball-world (posn dx dy))
;; A ball-world is a structure:  (make-ball-world p dx dy) where
;; p is a posn structure (the x-coord and y-coord of a ball in a scene),
;; dx is a number (the distance the ball moves in the x direction),
;; dy is a number (the distance the ball moves in the y direction)

;; Contracts for a ball-world:
;; make-ball-world : posn number number -> ball-world
;; ball-world-posn : ball-world -> posn 
;; ball-world-dx : ball-world -> number
;; ball-world-dy : ball-world -> number


;; Example worlds (to help test bounce conditions)
(define INITIAL-WORLD (make-ball-world (make-posn RADIUS (/ HEIGHT 4)) 2 -2))
(define RIGHT-WALL (make-ball-world (make-posn (- WIDTH RADIUS) (/ HEIGHT 2)) 2 2))
(define LEFT-WALL (make-ball-world (make-posn RADIUS (/ HEIGHT 2)) -2 -2))
(define TOP-WALL (make-ball-world (make-posn (/ WIDTH 2) RADIUS) -2 2))
(define BOTTOM-WALL (make-ball-world (make-posn (/ WIDTH 2) (- HEIGHT RADIUS)) 2 -2))

;; Contract: top-edge? : ball-world -> boolean
;; Purpose: determines whether the ball reached the top edge of scene
(define (top-edge? world)
  (<= (posn-y (ball-world-posn world)) RADIUS))

(check-expect (top-edge? INITIAL-WORLD) false)
(check-expect (top-edge? TOP-WALL) true)

;; Contract: bottom-edge? : ball-world -> boolean
;; Purpose: determines whether the ball reached the bottom edge of scene
(define (bottom-edge? world)
  (>= (posn-y (ball-world-posn world)) (- HEIGHT RADIUS)))

(check-expect (bottom-edge? INITIAL-WORLD) false)
(check-expect (bottom-edge? BOTTOM-WALL) true)

;; Contract: right-edge? : ball-world -> boolean
;; Purpose: determines whether the ball reached the right edge of scene
(define (right-edge? world)
  (>= (posn-x (ball-world-posn world)) (- WIDTH RADIUS)))

(check-expect (right-edge? INITIAL-WORLD) false)
(check-expect (right-edge? RIGHT-WALL) true)

;; Contract: left-edge? : ball-world -> boolean
;; Purpose: determines whether the ball reached the left edge of scene
(define (left-edge? world)
  (<= (posn-x (ball-world-posn world)) RADIUS))

(check-expect (left-edge? RIGHT-WALL) false)
(check-expect (left-edge? LEFT-WALL) true)

;; Contract: reverse-up-down : ball-world -> ball-world
;; Purpose: reverse ball's up-down direction   
(define (reverse-up-down world)
  (make-ball-world (ball-world-posn world) 
                   (ball-world-dx world)
                   (* -1 (ball-world-dy world))))

(check-expect (reverse-up-down INITIAL-WORLD) 
              (make-ball-world (ball-world-posn INITIAL-WORLD) 2 2))
(check-expect (reverse-up-down BOTTOM-WALL) 
              (make-ball-world (ball-world-posn BOTTOM-WALL) 2 2))

;; Contract: reverse-left-right : ball-world -> ball-world
;; Purpsose: reverse ball's left-right direction
(define (reverse-left-right world)
  (make-ball-world (ball-world-posn world)
                   (* -1 (ball-world-dx world))
                   (ball-world-dy world)))

(check-expect (reverse-left-right LEFT-WALL) 
              (make-ball-world (ball-world-posn LEFT-WALL) 2 -2))
(check-expect (reverse-left-right RIGHT-WALL)
              (make-ball-world (ball-world-posn RIGHT-WALL) -2 2))


;; Contract: move-ball-dxdy : ball-world -> ball-world
;; Purpose: move the ball by its dx and dy amounts
(define (move-ball-dxdy world)
  (make-ball-world (make-posn (+ (posn-x (ball-world-posn world))
                                 (ball-world-dx world))
                              (+ (posn-y (ball-world-posn world))
                                 (ball-world-dy world)))
                   (ball-world-dx world)
                   (ball-world-dy world)))

(check-expect (move-ball-dxdy INITIAL-WORLD)
              (make-ball-world (make-posn (+ RADIUS 2) (+ (/ HEIGHT 4) -2))
                               (ball-world-dx INITIAL-WORLD)
                               (ball-world-dy INITIAL-WORLD)))

;; Contract: move-ball : ball-world -> ball-world
;; Purpose: changes position and possibly direction of ball in scene
(define (move-ball world)
  (cond
    [(or (and (top-edge? world) (< (ball-world-dy world) 0))
         (and (bottom-edge? world) (> (ball-world-dy world) 0)))
     (move-ball-dxdy (reverse-up-down world))]
    [(or (and (right-edge? world) (> (ball-world-dx world) 0))
         (and (left-edge? world) (< (ball-world-dx world) 0)))
     (move-ball-dxdy (reverse-left-right world))]
    [else (move-ball-dxdy world)]))

(check-expect 
 (move-ball INITIAL-WORLD) 
 (make-ball-world (make-posn (+ RADIUS 2) (- (/ HEIGHT 4) 2)) 2 -2))

(check-expect 
 (move-ball RIGHT-WALL)
 (make-ball-world (make-posn (- (- WIDTH RADIUS) 2) (+ (/ HEIGHT 2) 2)) -2 2))

(check-expect 
 (move-ball LEFT-WALL)
 (make-ball-world (make-posn (+ RADIUS 2) (- (/ HEIGHT 2) 2)) 2 -2))

;; Contract: place-ball : ball-world -> image 
;; Purpose: produces image of a ball at given current position on background.
(define (place-ball world)
  (place-image BALL
               (posn-x (ball-world-posn world))
               (posn-y (ball-world-posn world))
               BACKGROUND))

(big-bang INITIAL-WORLD
          (on-tick move-ball)
          (on-draw place-ball))
>Fix:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/10086: stepper signals "with-syntax: binding match failed" error on program
Date: Fri, 20 Feb 2009 15:02:45 -0800

 On Feb 20, 2009, at 1:12 PM, matthias@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=10086
 >
 > Reported by matthias for release: 4.1.4.3-svn15feb2009
 
 
 Looks like a problem with check-expect.  I'll keep looking at it.
 
 John
 
From: John Clements <clements@brinckerhoff.org>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/10086: stepper signals "with-syntax: binding match failed" error on program
Date: Wed, 4 Mar 2009 00:35:42 -0800

 On Feb 20, 2009, at 1:12 PM, matthias@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10086
 >
 > Reported by matthias for release: 4.1.4.3-svn15feb2009
 >
 > *** Description:
 > Marc Smih send me the program below. The stepper works
 > fine for about 10 to 20 steps and then signals the "with-syntax"
 > error. I have tried to narrow things down, copying and pasting
 > a definition at a time into some other buffer -- to no avail.
 > Sorry.
 
 I was wrong, it's not check-syntax.  Here's a simple program that =20
 causes the problem:
 
 (define (z world)
    (empty-scene 100 100))
 
 (big-bang 3
            (on-tick add1)
            (on-draw z))
 
 
 ... (I was fooled by the out-of-sequence evaluation of check-expect.)
 
 And, looking harder, it seems that the underlying problem is in fact =20
 the b=EAte noire of the stepper, macros.  More specifically, it would =20=
 
 appear that the universe.ss teachpack expands uses of 'big-bang' into =20=
 
 something involving uses of class.ss macros.
 
 Just for the heck of it, I threw a couple of 'oh heck, I'll just do =20
 the best I can' clauses into the stepper, so that you can now see =20
 about sixteen steps of the evaluation.  In fact, if you click on the =20
 "next" button, you can proceed right past the error.  I conjecture =20
 that if you have a strong stomach and are willing to look at expanded =20=
 
 code, you may now be able to step through fairly large programs.
 
 I've committed these changes.
 
 So... May I change your bug report to a change request?
 
 John
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10086: stepper signals "with-syntax: binding match failed" error on program
Date: Wed, 4 Mar 2009 08:50:53 -0500

 Yes, you may.
 
 I had simply forgotten that universe's big-bang is different from =20
 world's. Sorry, this should have rung a bell in me because a few days =20=
 
 before we had discussed the horrible 'macro' issue once again. Still =20
 to be solved.
 
 In the meantime, I am beginning to think that the stepper could be =20
 specialized to universe in a way that would throw off two papers:
 
   -- a Scheme or FDPE workshop paper (next year)
   -- a SIGCSE paper on the algebraic stepping idea,
      much more refined.
 
 The key is to use the hooks to step. I am in Istanbul right now, on a =20=
 
 one-week vacation with Helga. If you're interested, please read thru =20
 the universe.ss docs and let's talk next week when I am back.
 
 -- Matthias
 
 
 
 
 
 On Mar 4, 2009, at 3:35 AM, John Clements wrote:
 
 >
 > On Feb 20, 2009, at 1:12 PM, matthias@ccs.neu.edu wrote:
 >
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10086
 >>
 >> Reported by matthias for release: 4.1.4.3-svn15feb2009
 >>
 >> *** Description:
 >> Marc Smih send me the program below. The stepper works
 >> fine for about 10 to 20 steps and then signals the "with-syntax"
 >> error. I have tried to narrow things down, copying and pasting
 >> a definition at a time into some other buffer -- to no avail.
 >> Sorry.
 >
 > I was wrong, it's not check-syntax.  Here's a simple program that =20
 > causes the problem:
 >
 > (define (z world)
 >   (empty-scene 100 100))
 >
 > (big-bang 3
 >           (on-tick add1)
 >           (on-draw z))
 >
 >
 > ... (I was fooled by the out-of-sequence evaluation of check-expect.)
 >
 > And, looking harder, it seems that the underlying problem is in =20
 > fact the b=EAte noire of the stepper, macros.  More specifically, it =20=
 
 > would appear that the universe.ss teachpack expands uses of 'big-=20
 > bang' into something involving uses of class.ss macros.
 >
 > Just for the heck of it, I threw a couple of 'oh heck, I'll just do =20=
 
 > the best I can' clauses into the stepper, so that you can now see =20
 > about sixteen steps of the evaluation.  In fact, if you click on =20
 > the "next" button, you can proceed right past the error.  I =20
 > conjecture that if you have a strong stomach and are willing to =20
 > look at expanded code, you may now be able to step through fairly =20
 > large programs.
 >
 > I've committed these changes.
 >
 > So... May I change your bug report to a change request?
 >
 > John
 >
 


Class changed from "sw-bug" to "change-request" by clements at Mon, 23 Mar 2009 00:06:30 -0400
Reason>>> stepper doesn't interact nicely with teachpack macros.

State changed from "open" to "closed" by clements at Mon, 23 Mar 2009 00:06:30 -0400
Reason>>> a known shortcoming of the stepper... also, you can actually step a lot further 
now than you could before.

