From apache@plt-scheme.org Wed Jun  7 22:56:27 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k582uJ3X028222
	for <bugs@plt-scheme.org>; Wed, 7 Jun 2006 22:56:19 -0400
Message-Id: <200606080256.k582uJHY028220@champlain.ccs.neu.edu>
Date: Wed, 7 Jun 2006 22:56:19 -0400
From: sbloch@adelphi.edu
To: bugs@plt-scheme.org
Subject: the Stepper in interactions

>Number:         8097
>Category:       stepper
>Synopsis:       the Stepper in interactions
>Class:          change-request
>Responsible:    clements
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jun 07 23:00:00 -0400 2006
>Last-Modified:  Fri Jun 16 22:41:56 -0400 2006
>Originator:     Stephen Bloch
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301
>Environment:
macosx "Darwin user-0cdflme.cable.mindspring.com 8.6.0 Darwin Kernel Version 8.6.0: Tue Mar  7 16:58:48 PST 2006; root:xnu-792.6.70.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Applications/PLT Scheme v301/collects/doc/web-server> #<path:/Applications/PLT Scheme v301/collects/doc/tour> #<path:/Applications/PLT Scheme v301/collects/doc/tools> #<path:/Applications/PLT Scheme v301/collects/doc/tex2page> #<path:/Applications/PLT Scheme v301/collects/doc/teachpack> #<path:/Applications/PLT Scheme v301/collects/doc/t-y-scheme> #<path:/Applications/PLT Scheme v301/collects/doc/swindle> #<path:/Applications/PLT Scheme v301/collects/doc/srfi> #<path:/Applications/PLT Scheme v301/collects/doc/r5rs> #<path:/Applications/PLT Scheme v301/collects/doc/profj-intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/profj-beginner> #<path:/Applications/PLT Scheme v301/collects/doc/profj-advanced> #<path:/Applications/PLT Scheme v301/collects/doc/plot> #<path:/Applications/PLT Scheme v301/collects/doc/mzscheme> #<path:/Applications/PLT Scheme v301/collects/doc/mzlib> #<path:/Applications/PLT Scheme v301/collects/doc/mzc> #<path:/Applications/PLT Scheme v301/collects/doc/mrlib> #<path:/Applications/PLT Scheme v301/collects/doc/mred> #<path:/Applications/PLT Scheme v301/collects/doc/misclib> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate-lambda> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/insidemz> #<path:/Applications/PLT Scheme v301/collects/doc/help> #<path:/Applications/PLT Scheme v301/collects/doc/framework> #<path:/Applications/PLT Scheme v301/collects/doc/foreign> #<path:/Applications/PLT Scheme v301/collects/doc/drscheme> #<path:/Applications/PLT Scheme v301/collects/doc/beginning-abbr> #<path:/Applications/PLT Scheme v301/collects/doc/beginning> #<path:/Applications/PLT Scheme v301/collects/doc/advanced>)
Collections:
((#<path:/Users/teeb/Library/PLT Scheme/301/collects> (#<path:info-domain> #<path:profj>)) (#<path:/Applications/PLT Scheme v301/collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:r5rs> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student") (#6(#t constructor repeating-decimal #f #t none) #f))
>Description:
I suggested this a year ago, and didn't get around to writing up a precise specification of the
interface.  Here's what I've come up with now:

One question, of course, is whether the "stepper on/off" state is associated with the whole APPLICATION, with an individual WINDOW,
or with a PANE (definitions or interactions) of a window.  If "stepper on/off" were controlled by a menu item,
and indicated by a checkmark next to this menu item, it would naturally be associated with the application on the Mac, and with
the window on Windows, since that's where menus appear on the respective platforms.  I don't like the idea of the Stepper
behaving significantly differently on different platforms, so...

It doesn't make sense to use an interactions pane if the definitions pane of the same window is in
mid-execution, so we don't need separate controls for both panes: either a window is single-stepping
(both definitions and interactions) or it's not.  However, as in the current implementation, it DOES
make sense for each window to have its own associated stepper window, and hence its own associated
stepper state.  To avoid violating the GUI standards of any one platform, I suggest putting the
control/display for this bit of state into the margin of each window: either an on/off pair of radio
buttons or a button that looks like a light switch, e.g.
http://home.adelphi.edu/sbloch/stepper%20switch.png

I see five possible states, for any given regular (i.e. definitions + interactions) window:

1) the stepper is off
2) the stepper is on, active, and its window is in front
3) the stepper is on, active, and its window is other than frontmost
4) the stepper is on, inactive, and its window is in front
5) the stepper is on, inactive, and its window is other than frontmost

"Inactive" means there's no evaluation currently paused for stepping.  When a given regular window is
in state 1, its control/display shows that the stepper is off; in all other states, it shows the
stepper on.  And transitioning to pseudo-state 0 means killing both the regular and the stepper window
(after whatever confirmation dialogs are currently in place).

Interesting transitions:
1->5 when the user clicks the "stepper" button
2->1 when the user closes the stepper window; bring the corresponding regular window to the front
2->3 when the user brings another window to the front, or minimizes the stepper window
2->4 when the expression (from interactions) or the whole definitions pane has been evaluated
3->0 when the user closes the associated regular window
3->2 when the user brings the stepper window to the front
3->2 when the user clicks the "Run" button, or types an expression in the interactions pane
(in either of these cases, may want a dialog box asking whether the user wants to abandon stepping
through the current expression)
4->1 when the user closes the stepper window; bring the corresponding regular window to the front
4->5 when the user brings another window to the front, or minimizes the stepper window
5->0 when the user closes the associated regular window
5->1 when the user clicks the "stepper" button
5->2 when the user clicks the "Run" button, or types an expression in the interactions pane
5->4 when the user brings the stepper window to the front

Within state 2, the stepper behaves exactly as it does now.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: sbloch@adelphi.edu, bugs@plt-scheme.org
Cc: gnats@brinckerhoff.org, eli@barzilay.org, dalev@ccs.neu.edu,
        kathyg@cs.utah.edu, goldberg@cs.utah.edu, nobody@plt-scheme.org,
        sk@cs.brown.edu, jacobm@cs.uchicago.edu, meunier@ccs.neu.edu,
        jay@kenyamountain.com, mflatt@cs.utah.edu, dskippy@ccs.neu.edu,
        robby@cs.uchicago.edu, awick@cs.utah.edu, sowens@cs.utah.edu,
        cce@ccs.neu.edu
Subject: Re: all/8097: the Stepper in interactions
Date: Wed, 7 Jun 2006 23:12:14 -0400

 The stepper should really explain how
 
    > (f 10)
    42
 
 happens and this explanation should appear in the Interactions Window. 
 Of course, if
 
    > (f 10)
 
 never stops, the stepper should still explain what's going on. In the 
 same Window.
 
 Once DrScheme allows switching in and out the buttons at the top, I 
 think this is all doable with an easy-to-use GUI, too. With that, the 
 complexities would go away and the need for this proposal, too.
 
 -- Matthias
 
 
 
 On Jun 7, 2006, at 11:00 PM, sbloch@adelphi.edu wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8097
 >
 > Reported by Stephen Bloch for release: 301
 >
 > *** Description:
 > I suggested this a year ago, and didn't get around to writing up a 
 > precise specification of the
 > interface.  Here's what I've come up with now:
 >
 > One question, of course, is whether the "stepper on/off" state is 
 > associated with the whole APPLICATION, with an individual WINDOW,
 > or with a PANE (definitions or interactions) of a window.  If "stepper 
 > on/off" were controlled by a menu item,
 > and indicated by a checkmark next to this menu item, it would 
 > naturally be associated with the application on the Mac, and with
 > the window on Windows, since that's where menus appear on the 
 > respective platforms.  I don't like the idea of the Stepper
 > behaving significantly differently on different platforms, so...
 >
 > It doesn't make sense to use an interactions pane if the definitions 
 > pane of the same window is in
 > mid-execution, so we don't need separate controls for both panes: 
 > either a window is single-stepping
 > (both definitions and interactions) or it's not.  However, as in the 
 > current implementation, it DOES
 > make sense for each window to have its own associated stepper window, 
 > and hence its own associated
 > stepper state.  To avoid violating the GUI standards of any one 
 > platform, I suggest putting the
 > control/display for this bit of state into the margin of each window: 
 > either an on/off pair of radio
 > buttons or a button that looks like a light switch, e.g.
 > http://home.adelphi.edu/sbloch/stepper%20switch.png
 >
 > I see five possible states, for any given regular (i.e. definitions + 
 > interactions) window:
 >
 > 1) the stepper is off
 > 2) the stepper is on, active, and its window is in front
 > 3) the stepper is on, active, and its window is other than frontmost
 > 4) the stepper is on, inactive, and its window is in front
 > 5) the stepper is on, inactive, and its window is other than frontmost
 >
 > "Inactive" means there's no evaluation currently paused for stepping.  
 > When a given regular window is
 > in state 1, its control/display shows that the stepper is off; in all 
 > other states, it shows the
 > stepper on.  And transitioning to pseudo-state 0 means killing both 
 > the regular and the stepper window
 > (after whatever confirmation dialogs are currently in place).
 >
 > Interesting transitions:
 > 1->5 when the user clicks the "stepper" button
 > 2->1 when the user closes the stepper window; bring the corresponding 
 > regular window to the front
 > 2->3 when the user brings another window to the front, or minimizes 
 > the stepper window
 > 2->4 when the expression (from interactions) or the whole definitions 
 > pane has been evaluated
 > 3->0 when the user closes the associated regular window
 > 3->2 when the user brings the stepper window to the front
 > 3->2 when the user clicks the "Run" button, or types an expression in 
 > the interactions pane
 > (in either of these cases, may want a dialog box asking whether the 
 > user wants to abandon stepping
 > through the current expression)
 > 4->1 when the user closes the stepper window; bring the corresponding 
 > regular window to the front
 > 4->5 when the user brings another window to the front, or minimizes 
 > the stepper window
 > 5->0 when the user closes the associated regular window
 > 5->1 when the user clicks the "stepper" button
 > 5->2 when the user clicks the "Run" button, or types an expression in 
 > the interactions pane
 > 5->4 when the user brings the stepper window to the front
 >
 > Within state 2, the stepper behaves exactly as it does now.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > macosx "Darwin user-0cdflme.cable.mindspring.com 8.6.0 Darwin Kernel 
 > Version 8.6.0: Tue Mar  7 16:58:48 PST 2006; 
 > root:xnu-792.6.70.obj~1/RELEASE_PPC Power Macintosh powerpc" 
 > (ppc-macosx) (get-display-depth) = 32
 > Docs Installed:
 > (#<path:/Applications/PLT Scheme v301/collects/doc/web-server> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/tour> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/tools> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/tex2page> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/teachpack> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/t-y-scheme> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/swindle> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/srfi> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/r5rs> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/profj-intermediate> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/profj-beginner> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/profj-advanced> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/plot> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/mzscheme> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/mzlib> 
 > #<path:/Applications/PLT Scheme v301/collects/doc/mzc> 
 > #<path:/Applications/PLT Sche!
 >  me v301/collects/doc/mrlib> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/mred> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/misclib> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/intermediate-lambda> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/intermediate> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/insidemz> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/help> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/framework> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/foreign> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/drscheme> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/beginning-abbr> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/beginning> #<path:/Applications/PLT Scheme 
 > v301/collects/doc/advanced>)
 > Collections:
 > ((#<path:/Users/teeb/Library/PLT Scheme/301/collects> 
 > (#<path:info-domain> #<path:profj>)) (#<path:/Applications/PLT Scheme 
 > v301/collects> (#<path:afm> #<path:algol60> #<path:browser> 
 > #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> 
 > #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> 
 > #<path:ffi> #<path:framework> #<path:frtime> #<path:games> 
 > #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> 
 > #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> 
 > #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> 
 > #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> 
 > #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> 
 > #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:r5rs> 
 > #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> 
 > #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> 
 > #<path:string-constants> #<path:swindle> #<path:syntax> 
 > #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<p!
 >  ath:texpict> #<path:trace> #<path:version> #<path:web-server> 
 > #<path:xml>)))
 > Human Language: english
 > Teachpack filenames: ()
 > Computer Language: (("Teaching Languages" "How to Design Programs" 
 > "Intermediate Student") (#6(#t constructor repeating-decimal #f #t 
 > none) #f))
 >
 
From: Stephen Bloch <sbloch@adelphi.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Cc: gnats@brinckerhoff.org, eli@barzilay.org, dalev@ccs.neu.edu,
        kathyg@cs.utah.edu, goldberg@cs.utah.edu, nobody@plt-scheme.org,
        sk@cs.brown.edu, jacobm@cs.uchicago.edu, meunier@ccs.neu.edu,
        jay@kenyamountain.com, mflatt@cs.utah.edu, dskippy@ccs.neu.edu,
        robby@cs.uchicago.edu, awick@cs.utah.edu, sowens@cs.utah.edu,
        cce@ccs.neu.edu
Subject: Re: all/8097: the Stepper in interactions
Date: Thu, 8 Jun 2006 07:40:57 -0400

 At 11:12 PM -0400 6/7/06, Matthias Felleisen wrote:
 >The stepper should really explain how
 >   > (f 10)
 >   42
 >happens ... Of course, if
 >   > (f 10)
 >never stops, the stepper should still explain what's going on.
 
 I figured that fell under "Within state 2, the stepper behaves 
 exactly as it does now."
 
 >and this explanation should appear in the Interactions Window.
 
 That would certainly be a different GUI.  And if the Stepper were 
 being implemented ONLY for interactions, that would be my preference: 
 do it all in the interactions pane.  But would that sort of interface 
 make sense for Stepping the definitions pane?  I suggested an 
 interface that I think would work equally well for both.
 
 >Once DrScheme allows switching in and out the buttons at the top, I 
 >think this is all doable with an easy-to-use GUI, too. With that, 
 >the complexities would go away and the need for this proposal, too.
 
 Could you elaborate on this?
 
 -- 
 					Stephen Bloch
 					sbloch@adelphi.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Stephen Bloch <sbloch@adelphi.edu>
Cc: gnats@brinckerhoff.org, eli@barzilay.org, dalev@ccs.neu.edu,
        bugs@plt-scheme.org, goldberg@cs.utah.edu, kathyg@cs.utah.edu,
        sk@cs.brown.edu, nobody@plt-scheme.org, jacobm@cs.uchicago.edu,
        meunier@ccs.neu.edu, jay@kenyamountain.com, mflatt@cs.utah.edu,
        dskippy@ccs.neu.edu, robby@cs.uchicago.edu, awick@cs.utah.edu,
        sowens@cs.utah.edu, cce@ccs.neu.edu
Subject: Re: all/8097: the Stepper in interactions
Date: Thu, 8 Jun 2006 09:00:43 -0400

 I don't think stepping through definitions is necessary until you get 
 to Intermediate. And then it becomes necessary.
 
 -- Matthias
 
 
 On Jun 8, 2006, at 7:40 AM, Stephen Bloch wrote:
 
 > At 11:12 PM -0400 6/7/06, Matthias Felleisen wrote:
 >> The stepper should really explain how
 >>   > (f 10)
 >>   42
 >> happens ... Of course, if
 >>   > (f 10)
 >> never stops, the stepper should still explain what's going on.
 >
 > I figured that fell under "Within state 2, the stepper behaves exactly 
 > as it does now."
 >
 >> and this explanation should appear in the Interactions Window.
 >
 > That would certainly be a different GUI.  And if the Stepper were 
 > being implemented ONLY for interactions, that would be my preference: 
 > do it all in the interactions pane.  But would that sort of interface 
 > make sense for Stepping the definitions pane?  I suggested an 
 > interface that I think would work equally well for both.
 >
 >> Once DrScheme allows switching in and out the buttons at the top, I 
 >> think this is all doable with an easy-to-use GUI, too. With that, the 
 >> complexities would go away and the need for this proposal, too.
 >
 > Could you elaborate on this?
 >
 > -- 
 > 					Stephen Bloch
 > 					sbloch@adelphi.edu
 
From: Stephen Bloch <sbloch@adelphi.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: gnats@brinckerhoff.org, eli@barzilay.org, dalev@ccs.neu.edu,
        bugs@plt-scheme.org, goldberg@cs.utah.edu, kathyg@cs.utah.edu,
        sk@cs.brown.edu, nobody@plt-scheme.org, jacobm@cs.uchicago.edu,
        meunier@ccs.neu.edu, jay@kenyamountain.com, mflatt@cs.utah.edu,
        dskippy@ccs.neu.edu, robby@cs.uchicago.edu, awick@cs.utah.edu,
        sowens@cs.utah.edu, cce@ccs.neu.edu
Subject: Re: all/8097: the Stepper in interactions
Date: Thu, 8 Jun 2006 09:39:33 -0400

 At 9:00 AM -0400 6/8/06, Matthias Felleisen wrote:
 >I don't think stepping through definitions is necessary until you 
 >get to Intermediate.
 
 Perhaps not technically NECESSARY, but if students are writing all 
 their test cases in the definitions pane, and a particular test case 
 produces wrong answers, isn't it easier to just single-step the 
 definitions pane than to copy each of the interesting test cases into 
 interactions, one by one, and single-step them there?
 
 -- 
 							Stephen Bloch
 							Math/CS Dept
  
 Adelphi University
  
 sbloch@adelphi.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Stephen Bloch <sbloch@adelphi.edu>
Cc: gnats@brinckerhoff.org, eli@barzilay.org, dalev@ccs.neu.edu,
        bugs@plt-scheme.org, goldberg@cs.utah.edu, kathyg@cs.utah.edu,
        sk@cs.brown.edu, nobody@plt-scheme.org, jacobm@cs.uchicago.edu,
        meunier@ccs.neu.edu, jay@kenyamountain.com, mflatt@cs.utah.edu,
        dskippy@ccs.neu.edu, robby@cs.uchicago.edu, awick@cs.utah.edu,
        sowens@cs.utah.edu, cce@ccs.neu.edu
Subject: Re: all/8097: the Stepper in interactions
Date: Thu, 8 Jun 2006 16:45:38 -0400

 On Jun 8, 2006, at 9:39 AM, Stephen Bloch wrote:
 
 > At 9:00 AM -0400 6/8/06, Matthias Felleisen wrote:
 >> I don't think stepping through definitions is necessary until you get 
 >> to Intermediate.
 >
 > Perhaps not technically NECESSARY, but if students are writing all 
 > their test cases in the definitions pane, and a particular test case 
 > produces wrong answers, isn't it easier to just single-step the 
 > definitions pane than to copy each of the interesting test cases into 
 > interactions, one by one, and single-step them there?
 
 No, I think our experience shows that.
 

