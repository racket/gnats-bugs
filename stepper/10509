From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Oct  6 09:02:11 2009
Received: from mail-gx0-f212.google.com (mail-gx0-f212.google.com [209.85.217.212])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n96D251q017733
	for <bugs@bugs.plt-scheme.org>; Tue, 6 Oct 2009 09:02:06 -0400
Message-Id: <200910061301.n96D1pLU017723@champlain.ccs.neu.edu>
Date: Tue, 6 Oct 2009 09:01:51 -0400
From: jaclay@gmail.com
To: bugs@plt-scheme.org
Subject: Stepper behavior with final rocket program in HtDP 2e?

>Number:         10509
>Category:       stepper
>Synopsis:       Stepper behavior with final rocket program in HtDP 2e?
>Class:          sw-bug
>Responsible:    clements
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Oct 06 09:04:01 -0400 2009
>Last-Modified:  Fri Sep 03 21:36:21 -0400 2010
>Originator:     Jack Clay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 3" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 121997280

Collections:
(("C:\\Documents and Settings\\jclay\\Application Data\\PLT Scheme\\4.2.1\\collects" non-existent-path) ("C:\\Program Files\\PLT\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ((lib "universe.ss" "teachpack" "2htdp"))))
>Description:
Hi,

It seems there's an anomaly or weird artifact that appears when stepping through the code shown in section 1.5 of the prologue of HtDP 2e, the final rocket program with deceleration. The value supplied for t by 'run-simulation' changes from 1 to 2 during the evaluation of the first cond line.

Here's the purple code at the point of evaluating the 1st cond line:
(cond
  ((<=
    (distance 1)
    ROCKET-CENTER-TO-BOTTOM)
   (place-image
    ROCKET
    50
    (distance 1)
    MTSCN))

(The value 1 is supplied to distance by the run-simulation, I presume.)
Now here's the purple code after clicking step:
(cond
 ((<=
   (-
    (* V 2)
    (*
     1/2
     DECELERATION
     (sqr 2)))
(Note that the value 1 has changed magically to 2!)

Now here's the purple code after clicking step again:
 (cond
  ((<=
    (-
     (* V 1)
     (*
      1/2
      DECELERATION
      (sqr 1)))
(Hey, it's back to 1 again!)

This alteration between 1 and 2 for t seems to continue through the rest of the steps.

I don't know if this is a stepper problem or there's something weird going on with run-simulation.  We have "Welcome to DrScheme, version 4.2.1 [3m]" installed and I can't easily change it for our lab machines.

Also, 
- the rocket seems to be accelerating not decelerating, 
- the rocket stops for a few ticks but then accelerates off the top of the scene,
- if the scene's HEIGHT is changed to 300, the rocket descends to 200, stops, waits for a few ticks, then accelerates off the top of the scene,
but I think these must be logic errors not bugs!

Thanks,
Jack
>How-To-Repeat:
Included in description.
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: bugs@plt-scheme.org, John Clements <clements@brinckerhoff.org>
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org,
        Jack Clay <jaclay@gmail.com>
Subject: Re: [plt-bug] all/10509: Stepper behavior with final rocket program in HtDP 2e?
Date: Tue, 6 Oct 2009 10:28:55 -0400

 John, I have investigated this a bit and it is by far the weirdest  
 stepper behavior I have ever seen.
 
 The arguments for distance truly flip back and forth between 1 and 2  
 for Jack's example AND after he counter is bumped to 3 everything  
 works normal!!!!
 
 I also 'expanded' animate and ran it like this:
 
    (big-bang 0 (on-tick add1 2) (state true) (on-draw create-rocket- 
 scene.v6))
 
 This shows that the state really just changes from 0 to 1, to 2, to 3,  
 etc. This code won't work in the stepper, however. (under construction  
 error)
 
 -- Matthias
 
 
 
 
 
 On Oct 6, 2009, at 9:04 AM, jaclay@gmail.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=10509
 >
 > Reported by Jack Clay for release: 4.2.1
 >
 > *** Description:
 > Hi,
 >
 > It seems there's an anomaly or weird artifact that appears when  
 > stepping through the code shown in section 1.5 of the prologue of  
 > HtDP 2e, the final rocket program with deceleration. The value  
 > supplied for t by 'run-simulation' changes from 1 to 2 during the  
 > evaluation of the first cond line.
 >
 > Here's the purple code at the point of evaluating the 1st cond line:
 > (cond
 >  ((<=
 >    (distance 1)
 >    ROCKET-CENTER-TO-BOTTOM)
 >   (place-image
 >    ROCKET
 >    50
 >    (distance 1)
 >    MTSCN))
 >
 > (The value 1 is supplied to distance by the run-simulation, I  
 > presume.)
 > Now here's the purple code after clicking step:
 > (cond
 > ((<=
 >   (-
 >    (* V 2)
 >    (*
 >     1/2
 >     DECELERATION
 >     (sqr 2)))
 > (Note that the value 1 has changed magically to 2!)
 >
 > Now here's the purple code after clicking step again:
 > (cond
 >  ((<=
 >    (-
 >     (* V 1)
 >     (*
 >      1/2
 >      DECELERATION
 >      (sqr 1)))
 > (Hey, it's back to 1 again!)
 >
 > This alteration between 1 and 2 for t seems to continue through the  
 > rest of the steps.
 >
 > I don't know if this is a stepper problem or there's something weird  
 > going on with run-simulation.  We have "Welcome to DrScheme, version  
 > 4.2.1 [3m]" installed and I can't easily change it for our lab  
 > machines.
 >
 > Also,
 > - the rocket seems to be accelerating not decelerating,
 > - the rocket stops for a few ticks but then accelerates off the top  
 > of the scene,
 > - if the scene's HEIGHT is changed to 300, the rocket descends to  
 > 200, stops, waits for a few ticks, then accelerates off the top of  
 > the scene,
 > but I think these must be logic errors not bugs!
 >
 > Thanks,
 > Jack
 >
 > *** How to repeat:
 > Included in description.
 >
 > *** Environment:
 > windows "Windows NT 5.1 (Build 2600) Service Pack 3" (win32\i386\3m)  
 > (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 121997280
 >
 > Collections:
 > (("C:\\Documents and Settings\\jclay\\Application Data\\PLT Scheme\ 
 > \4.2.1\\collects" non-existent-path) ("C:\\Program Files\\PLT\ 
 > \collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator- 
 > parser" "compiler" "config" "defaults" "deinprogramm" "drscheme"  
 > "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework"  
 > "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch"  
 > "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro- 
 > debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme"  
 > "net" "openssl" "parser-tools" "planet" "plot" "preprocessor"  
 > "profile" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp"  
 > "scheme" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex"  
 > "slideshow" "srfi" "stepper" "string-constants" "stxclass" "swindle"  
 > "syntax" "syntax-color" "teachpack" "test-box-recovery" "test- 
 > engine" "tex2page" "texpict" "trace" "typed" "typed-scheme"  
 > "version" "web-server" "wxme" "xml"))
 > Computer Language: (("Teaching Languages" "How to Design Programs"  
 > "Beginning Student") (#(#t constructor repeating-decimal #f #t none)  
 > #f ((lib "universe.ss" "teachpack" "2htdp"))))
 >
 
From: John Clements <clements@brinckerhoff.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org, Jack Clay <jaclay@gmail.com>
Subject: Re: [plt-bug] all/10509: Stepper behavior with final rocket program in HtDP 2e?
Date: Tue, 6 Oct 2009 09:52:28 -0700

 On Oct 6, 2009, at 7:28 AM, Matthias Felleisen wrote:
 
 >
 > John, I have investigated this a bit and it is by far the weirdest  
 > stepper behavior I have ever seen.
 >
 > The arguments for distance truly flip back and forth between 1 and 2  
 > for Jack's example AND after he counter is bumped to 3 everything  
 > works normal!!!!
 >
 
 It looks to me like the first and second steps are running in  
 parallel.  How does animate deal with world-update functions that block?
 
 John
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org, Jack Clay <jaclay@gmail.com>
Subject: Re: [plt-bug] all/10509: Stepper behavior with final rocket program in HtDP 2e?
Date: Tue, 6 Oct 2009 13:44:44 -0400

 On Oct 6, 2009, at 12:52 PM, John Clements wrote:
 
 >
 > On Oct 6, 2009, at 7:28 AM, Matthias Felleisen wrote:
 >
 >>
 >> John, I have investigated this a bit and it is by far the weirdest  
 >> stepper behavior I have ever seen.
 >>
 >> The arguments for distance truly flip back and forth between 1 and  
 >> 2 for Jack's example AND after he counter is bumped to 3 everything  
 >> works normal!!!!
 >>
 >
 > It looks to me like the first and second steps are running in  
 > parallel.  How does animate deal with world-update functions that  
 > block?
 
 Parallel?
 
 (animate f) = (big-bang 0 (on-tick add1) (on-draw f))
 
 add1 is called for every clock tick, every 1/28th of a second.
 
 Why would a world-update function (I assume you mean add1) block? On  
 what?
 
 -- Matthias
 
From: John Clements <clements@brinckerhoff.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org, Jack Clay <jaclay@gmail.com>
Subject: Re: [plt-bug] all/10509: Stepper behavior with final rocket program in HtDP 2e?
Date: Tue, 6 Oct 2009 10:52:30 -0700

 On Oct 6, 2009, at 10:44 AM, Matthias Felleisen wrote:
 
 >
 > On Oct 6, 2009, at 12:52 PM, John Clements wrote:
 >
 >>
 >> On Oct 6, 2009, at 7:28 AM, Matthias Felleisen wrote:
 >>
 >>>
 >>> John, I have investigated this a bit and it is by far the weirdest  
 >>> stepper behavior I have ever seen.
 >>>
 >>> The arguments for distance truly flip back and forth between 1 and  
 >>> 2 for Jack's example AND after he counter is bumped to 3  
 >>> everything works normal!!!!
 >>>
 >>
 >> It looks to me like the first and second steps are running in  
 >> parallel.  How does animate deal with world-update functions that  
 >> block?
 >
 > Parallel?
 >
 > (animate f) = (big-bang 0 (on-tick add1) (on-draw f))
 >
 > add1 is called for every clock tick, every 1/28th of a second.
 >
 > Why would a world-update function (I assume you mean add1) block? On  
 > what?
 >
 
 I'm not explaining myself clearly.  My guess is that this is what's  
 happening:
 
 at time zero, the universe teachpack calls create-rocket-scene.v6 with  
 1. create-rocket-scene, now annotated by the stepper, takes a step,  
 formulates it as a stepper value, sends it to the stepper, and blocks  
 for stepper instructions.
 
 Meanwhile, the universe teachpack decides to get on with it and calls  
 create-rocket-scene with the value 2.  Again, this function takes a  
 step, formulates it as a stepper value, sends it to the stepper, and  
 blocks for stepper instructions.
 
 The first time you click "next", you're releasing the semaphore that  
 allows the first one to keep running, and you immediately see the step  
 generated by the second call to create-rocket-scene.  The second time  
 you click "next", you're releasing the semaphore that allows the  
 second one to continue running.
 
 The only thing that confuses me about this scenario is that the  
 universe teachpack doesn't continue to trigger calls to create-rocket  
 scene.
 
 
 FIXES:
 
 One natural way to fix this would be to make the stepper run off-line;  
 that is, rather than blocking on each step, the stepper just continues  
 to pile up steps behind the scenes.  It might stop after, say, 1000  
 steps.
 
 John
 
 
From: John Clements <clements@brinckerhoff.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10509: Stepper behavior with final rocket program in HtDP 2e?
Date: Tue, 13 Oct 2009 13:47:37 -0700

 Curiously, the non-blocking stepper does *not* fix the strangeness in  
 the rocket example whereby multiple steps are seen to transpire  
 simultaneously.
 
 However, I have determined that turning the clock rate WAY DOWN (to 1  
 second per tick) fixes the problem.  This confirms (in my mind) the  
 belief that the problem stems from the simultaneous execution of the  
 first two steps.  I believe the problem is that big-bang starts the  
 timer before <some crucial stepper setup step> is done. This delays  
 processing of the steps associated with the first tick, and they get  
 tangled up with the second one.
 
 The question is: what the heck is this crucial stepper setup step? I  
 admit I'm at a bit of a loss; the overhead of compiling the source  
 code should happen before the call to big-bang, and the overhead of  
 rendering the output steps should be constant, and not front-loaded.	I  
 suppose the next step would be to annotate my pile of printfs with  
 millisecond timestamps to try and see where the time is going...
 
 John Clements
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10509: Stepper behavior with final rocket program in HtDP 2e?
Date: Tue, 13 Oct 2009 17:05:25 -0400

 John, take a look at
 
   2htdp/private/world.ss
 
 Look at the class world%, which is the result of mixing a last-step  
 and a clock-ticker into a base class.
 
 As far as my old eyes are concerned, the all three pieces declare  
 things (with occasional small steps of pulling structural values  
 apart). The 'constructor' then calls
 
 
 >       (define/public (start!)
 >         (when draw (show-canvas))
 >         (when register (register-with-host)))
 >
 >       (define/public (stop! w)
 >         (set! live #f)
 >         (custodian-shutdown-all *rec*))
 >
 >       ;;  
 > -------------------------------------------------------------------------
 >       ;; initialize the world and run
 >       (super-new)
 >       (start!)
 >       (when (stop (send world get)) (stop! (send world get)))))))
 
 The super-new does little. The start! calls clock ticks's start!,  
 which starts the clock, and then calls the above start!, which shows  
 the canvas. I don't see how just the first and second step could run  
 in parallel.
 
 (I can confirm the experiment with the rate. I tested this one, too,  
 as I thought I had written in one of my first responses.)
 
 
 
 
 
 On Oct 13, 2009, at 4:47 PM, John Clements wrote:
 
 > Curiously, the non-blocking stepper does *not* fix the strangeness  
 > in the rocket example whereby multiple steps are seen to transpire  
 > simultaneously.
 >
 > However, I have determined that turning the clock rate WAY DOWN (to  
 > 1 second per tick) fixes the problem.  This confirms (in my mind)  
 > the belief that the problem stems from the simultaneous execution of  
 > the first two steps.  I believe the problem is that big-bang starts  
 > the timer before <some crucial stepper setup step> is done. This  
 > delays processing of the steps associated with the first tick, and  
 > they get tangled up with the second one.
 >
 > The question is: what the heck is this crucial stepper setup step? I  
 > admit I'm at a bit of a loss; the overhead of compiling the source  
 > code should happen before the call to big-bang, and the overhead of  
 > rendering the output steps should be constant, and not front-loaded.	 
 > I suppose the next step would be to annotate my pile of printfs with  
 > millisecond timestamps to try and see where the time is going...
 >
 > John Clements
 >
 

