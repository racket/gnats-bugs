From robby@cs.uchicago.edu  Wed Dec 18 18:51:30 2002
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id SAA19410
	for <bugs>; Wed, 18 Dec 2002 18:51:29 -0500
Message-Id: <200212182351.SAA19410@champlain.ccs.neu.edu>
Date: Wed, 18 Dec 2002 18:51:29 -0500
From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: bugs@plt-scheme.org
Subject: stepper has extra (identical) steps when an error occurs

>Number:         6030
>Category:       stepper
>Synopsis:       stepper has extra (identical) steps when an error occurs
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    clements
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Wed Dec 18 18:55:01 EST 2002
>Closed-Date:    Thu Dec 19 11:51:14 EST 2002
>Last-Modified:  Mon Dec 23 11:25:00 EST 2002
>Originator:     Robert Bruce Findler
>Release:        203
>Organization:
plt
>Environment:
macosx "Darwin seesen.local. 6.2 Darwin Kernel Version 6.2: Tue Nov  5 22:00:03 PST 2002; root:xnu/xnu-344.12.2.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx/3m)

Docs installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "tex2page" "tools" "tour")

Collections:
(("/Users/robby/cvs/exp/plt/collects/mzlib/../../MrEd3m.app/Contents/MacOS/../../../collects" ("afm" "algol60" "backward" "browser" "browser2" "cogen" "compiler" "countdwn" "CVS" "cvs-time-stamp" "debug" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "parser-tools" "readline" "reduction-semantics" "setup" "sirmail" "slatex" "slibinit" "srpersist" "stepper" "string-constants" "syntax" "test-suite" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))

Human language: english
Computer language: ("How to Design Programs" "Beginning Student")

>Description:
This may be a known bug, but it comes after John said
he fixed related things, so I'm submitting it just in
case.

With this program:

  (car)

click step (in beginner). The stepper window
shows the proper error, but the next button is
still active. clicking the next button just
disables it.

I would have thought it should be disabled already.
>How-To-Repeat:

>Fix:

>Release-Note:

>Audit-Trail:

From: John Clements <clements@brinckerhoff.org>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6030: stepper has extra (identical) steps when an error occurs
Date: Thu, 19 Dec 2002 11:49:17 -0500

 That's not an extra step.  I need to document the stepper's interaction 
 model cleanly, but for the moment, here's a summary:  when you click 
 the 'next' button, it means one of two things.  If there's another step 
 after this one in the list of completed ones, it just goes to the next 
 one.  Otherwise, it releases the user's program to compute another 
 step, and enters a "waiting for the next step" state.  The 'next' 
 button is disabled when waiting for the next step.
 
 Ideally, I'd like to change the cursor to a 'waiting' cursor while 
 waiting for the next step, but I'd need to be careful to deal with 
 focus changes, because DrScheme is not blocked.  In fact, the waiting 
 cursor isn't quite the right thing either, because the 'previous' and 
 'home' buttons are still working.  Another thing I considered was 
 putting up a 'waiting for the next step' message, but the problem is 
 that this would cause more flicker between _every_ step.
 
 So, for the moment at least, that's that.  And I'm going to close this 
 PR, unless you think I shouldn't.
 
 john
   
   
 
Responsible-Changed-From-To: steck->clements
Responsible-Changed-By: clements
Responsible-Changed-When: Thu Dec 19 11:51:14 2002
Responsible-Changed-Why:
    stepper bug
State-Changed-From-To: open->closed
State-Changed-By: clements
State-Changed-When: Thu Dec 19 11:51:14 2002
State-Changed-Why:
    not a bug, but a consequence of the current model.

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6030: stepper has extra (identical) steps when an error occurs
Date: Sat, 21 Dec 2002 01:57:41 +0800 (CST)

 I think you shouldn't. The reduction semantics don't have that, so the
 stepper shouldn't either. I don't think its trivial to figure out to
 engineer that, esp. in the GUI world with different callbacks leading
 to multiple errors, but I think the current one can be improved.
 
 In short, it's a bug because the reduction semantics "model" that
 you're trying to emulate with the stepper wouldn't have two steps.
 
 Robby
 
 At Thu, 19 Dec 2002 11:49:17 -0500, John Clements wrote:
 > That's not an extra step.  I need to document the stepper's interaction 
 > model cleanly, but for the moment, here's a summary:  when you click 
 > the 'next' button, it means one of two things.  If there's another step 
 > after this one in the list of completed ones, it just goes to the next 
 > one.  Otherwise, it releases the user's program to compute another 
 > step, and enters a "waiting for the next step" state.  The 'next' 
 > button is disabled when waiting for the next step.
 > 
 > Ideally, I'd like to change the cursor to a 'waiting' cursor while 
 > waiting for the next step, but I'd need to be careful to deal with 
 > focus changes, because DrScheme is not blocked.  In fact, the waiting 
 > cursor isn't quite the right thing either, because the 'previous' and 
 > 'home' buttons are still working.  Another thing I considered was 
 > putting up a 'waiting for the next step' message, but the problem is 
 > that this would cause more flicker between _every_ step.
 > 
 > So, for the moment at least, that's that.  And I'm going to close this 
 > PR, unless you think I shouldn't.
 > 
 > john
 >   
 >   
 

From: John Clements <clements@brinckerhoff.org>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6030: stepper has extra (identical) steps when an error occurs
Date: Fri, 20 Dec 2002 13:21:18 -0500

 On Friday, December 20, 2002, at 12:57  PM, Robert Bruce Findler wrote:
 
 > I think you shouldn't. The reduction semantics don't have that, so the
 > stepper shouldn't either. I don't think its trivial to figure out to
 > engineer that, esp. in the GUI world with different callbacks leading
 > to multiple errors, but I think the current one can be improved.
 >
 > In short, it's a bug because the reduction semantics "model" that
 > you're trying to emulate with the stepper wouldn't have two steps.
 >
 
 But it's _not_ two steps.  It's just waiting for the next step.  The 
 question is one of GUI feedback.  To see this, let's try a sequence 
 that has stuff happening after the error.  Step through the following 
 program:
 
 (define (f x y) 'too-big)
 
 (guess-with-gui f)
 
 (car)
 
 After the error, click on the "next" button once more.  Now go over to 
 the GUI and click on the 'check' button.  Now see a new step in the 
 stepper (in fact, the step you see is _wrong_, because of a very small 
 that I'm going to fix right after I send this).  However, the point is 
 that you can now scan back and forth over the sequence of steps.  
 Notice that there's only one step containing the error.
 
 The question is how to visually inform the user that "yes, you clicked 
 on the 'next' button, and now we're both waiting for the next step to 
 appear. Clearly the impression that you're getting is that "I clicked 
 'next', and now this is a new step, but it's the same as the old one!"
 
 I'm not sure how to address this.
 
 john
 

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6030: stepper has extra (identical) steps when an error occurs
Date: Sun, 22 Dec 2002 17:09:59 +0800 (CST)

 Yes, I think that there should be two different GUI states to match the
 different internal stepper states. Perhaps changing the label on the
 "next" button to "waiting for next step" or something like that.
 
 A disabled "next" button seems to indicate that there aren't any more
 steps in the program, but apparently what it really means is "I'm
 waiting for someone to tell me about a new step, so don't click the
 next button".
 
 Also, once the stepper figures out that there aren't going to be any
 more steps, it should stop trying to wait for another one. that is, in
 this program: (car (+ 1 2)) I can only click previous once, but I can
 click next twice each time. This doesn't just happen the first time
 thru the steps.
 
 Just in case that last para doesn't make sense, let me try to phrase it
 another way -- once the stepper has already started waiting for another
 step and the user has gone back and fowards in the history, when the
 stepper returns to the view of the last (known) step, it should
 immedately put the GUI in the "waiting for a new step" state.
 
 One final note/question: this program (+ 1 (+ 2 3)) has the same
 problem, but with the step "evaluation of program is complete.". I get
 "two" of those. How do those states come about (and why don't I see
 them for programs that end in errors)?
 
 Robby
 
 At Fri, 20 Dec 2002 13:21:18 -0500, John Clements wrote:
 > 
 > On Friday, December 20, 2002, at 12:57  PM, Robert Bruce Findler wrote:
 > 
 > > I think you shouldn't. The reduction semantics don't have that, so the
 > > stepper shouldn't either. I don't think its trivial to figure out to
 > > engineer that, esp. in the GUI world with different callbacks leading
 > > to multiple errors, but I think the current one can be improved.
 > >
 > > In short, it's a bug because the reduction semantics "model" that
 > > you're trying to emulate with the stepper wouldn't have two steps.
 > >
 > 
 > But it's _not_ two steps.  It's just waiting for the next step.  The 
 > question is one of GUI feedback.  To see this, let's try a sequence 
 > that has stuff happening after the error.  Step through the following 
 > program:
 > 
 > (define (f x y) 'too-big)
 > 
 > (guess-with-gui f)
 > 
 > (car)
 > 
 > After the error, click on the "next" button once more.  Now go over to 
 > the GUI and click on the 'check' button.  Now see a new step in the 
 > stepper (in fact, the step you see is _wrong_, because of a very small 
 > that I'm going to fix right after I send this).  However, the point is 
 > that you can now scan back and forth over the sequence of steps.  
 > Notice that there's only one step containing the error.
 > 
 > The question is how to visually inform the user that "yes, you clicked 
 > on the 'next' button, and now we're both waiting for the next step to 
 > appear. Clearly the impression that you're getting is that "I clicked 
 > 'next', and now this is a new step, but it's the same as the old one!"
 > 
 > I'm not sure how to address this.
 > 
 > john
 

From: John Clements <clements@brinckerhoff.org>
To: Robert Bruce Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, plt-design@ccs.neu.edu
Subject: Re: all/6030: general stepper speculation
Date: Mon, 23 Dec 2002 11:22:13 -0500

 On Sunday, December 22, 2002, at 04:09 AM, Robert Bruce Findler wrote:
 
 > Yes, I think that there should be two different GUI states to match the
 > different internal stepper states. Perhaps changing the label on the
 > "next" button to "waiting for next step" or something like that.
 
 The only issue I see with something like this is that it will occur 
 between _every_ pair of steps, not just after the last one.  Or perhaps 
 you're suggesting that a flag be set when get-next-expression returns 
 an #<EOF>, and the visual indicator only happen on (all) subsequent 
 steps?
 
 > A disabled "next" button seems to indicate that there aren't any more
 > steps in the program, but apparently what it really means is "I'm
 > waiting for someone to tell me about a new step, so don't click the
 > next button".
 
 Well, disabling a button means 'you can't click on this button now.' 
 That much I'm sure we can agree on.  What I think  this comes down to 
 is that it's hard to formulate an interface for a stepper that doesn't 
 require the user to have some internal model for the stepper that's 
 more sophisticated than "the stepper shows me one element of a list of 
 steps."  In fact, the non-blocking stepper came closest to this, though 
 the model in that case was "the stepper shows me one element of a list 
 of steps (that may be getting longer)."  Unfortunately, side effects 
 pretty much scotch this model.
 
 > Also, once the stepper figures out that there aren't going to be any
 > more steps, it should stop trying to wait for another one. that is, in
 > this program: (car (+ 1 2)) I can only click previous once, but I can
 > click next twice each time. This doesn't just happen the first time
 > thru the steps.
 
 Two separate answers to this para:
 
 One way of sidestepping (part of) this issue would be to come up with 
 some conservative estimate of the programs that are guaranteed to be 
 over when the last expression has evaluated to a value.  This wouldn't 
 be that hard if I required teachpack authors to flag all primitives 
 that might set up callbacks.  How does this sound to the teachpack 
 authors?
 
 In fact, this touches on another issue, which is the icky way in which 
 the stepper currently determines names for teachpack primitives.  Maybe 
 it's time to formalize the information that the stepper requires from 
 teachpacks (and ultimately perhaps language levels as well).  What 
 about ... okay, I'm just going to make this a separate e-mail to 
 plt-design.
 
 > Just in case that last para doesn't make sense, let me try to phrase it
 > another way -- once the stepper has already started waiting for another
 > step and the user has gone back and fowards in the history, when the
 > stepper returns to the view of the last (known) step, it should
 > immedately put the GUI in the "waiting for a new step" state.
 
 I think this issue ultimately comes down to the fact that the 'next' 
 button has two different meanings. If the user is looking at the most 
 recent step, the 'next' button means 'let the user's program continue 
 running, and wait for another step to come in'.  If the user is not 
 looking at the most recent step, the 'next' button just means 'display 
 the next step in the list.'  This deliberate conflation is an effort to 
 project the illusion of the model I described above, wherein the 
 stepper is looking at a long static list of steps in a program's 
 evaluation.  One answer would be to separate these explicitly into two 
 buttons.  Actually, I think that would just confuse people.
 
 Really, the best answer would be to come up with a model for 
 side-effecting programs so that side effects could be queued like the 
 stepper's steps and then you could just run the program to completion 
 in the background (with a cap on the queue-length to deal with 
 non-converging space-consuming programs).  In fact, this is pretty 
 straightforward to do for 'internal' side effects like set!.  It's darn 
 near impossible for external interactions like the servlet stuff.  
 Okay, there's lots of interesting stuff here.
 
 Oh, one more thing (while I'm thinking about it).  Take, for instance, 
 a call to 'single-query'.   Suppose you were able to package a call to 
 single-query up so that if the user stepped back through the 
 interaction, the servlet interaction would be somehow retracted 
 (english meaning).  Now, suppose the user steps forward through this 
 again.  Would you want to solicit the user's interaction again?  
 Probably not; this would involve capturing a continuation at every step 
 of the evaluation.
 
 Actually, capturing continuations would be an interesting way of making 
 sure that the 'next' button had exactly one meaning; you could set up 
 the stepper so that stepping backward would actually throw away the 
 steps that you were backtracing over, and then a click on 'next' would 
 _always_ invoke a continuation.  Additionally, this model of stepper 
 operation would be easier to synchronize; rather than having semaphores 
 and releasing them in the right order, the 'break' call could just hand 
 off its continuation and then die. Hmmm.
 
 
 john
 
>Unformatted:

