From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Sep 17 11:02:12 2009
Received: from an-out-0708.google.com (an-out-0708.google.com [209.85.132.247])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n8HF28gR024442
	for <bugs@bugs.plt-scheme.org>; Thu, 17 Sep 2009 11:02:08 -0400
Message-Id: <200909171502.n8HF24Pi024433@champlain.ccs.neu.edu>
Date: Thu, 17 Sep 2009 11:02:04 -0400
From: dvanhorn@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Stepper: does not preserve parens vs brackets (BSL)

>Number:         10466
>Category:       stepper
>Synopsis:       Stepper: does not preserve parens vs brackets (BSL)
>Class:          change-request
>Responsible:    clements
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Sep 17 11:04:01 -0400 2009
>Last-Modified:  Thu Sep 17 18:40:01 -0400 2009
>Originator:     David Van Horn
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1.8-svn16sep2009
>Environment:
macosx "Darwin david-van-horns-computer.local 8.11.1 Darwin Kernel Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 121620340

Collections:
(("/Users/dvanhorn/Library/PLT Scheme/4.2.1.8/collects" non-existent-path) ("/sw/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "little-helper" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "reader" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "!
 tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor mixed-fraction #f #t none) #f ((lib "world.ss" "teachpack" "htdp"))))
>Description:
The stepper converts all brackets
to parens.
>How-To-Repeat:
Step the following.  Notice [] becomes ().

(cond [true 'ok])
>Fix:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: dvanhorn@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/10466: Stepper: does not preserve parens vs brackets (BSL)
Date: Thu, 17 Sep 2009 15:23:42 -0700

 On Sep 17, 2009, at 8:04 AM, dvanhorn@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=10466
 >
 > Reported by David Van Horn for release: 4.2.1.8-svn16sep2009
 >
 > *** Description:
 > The stepper converts all brackets
 > to parens.
 >
 > *** How to repeat:
 > Step the following.  Notice [] becomes ().
 >
 > (cond [true 'ok])
 
 This one is more or less a change request, and probably not a simple  
 one; the stepper doesn't actually look at the user's source code at  
 all, and thus has no idea what were square and what were round parens.
 
 Perhaps the most straightforward solution would be to just use square  
 brackets for all of the cond clauses and similar locations. Would that  
 be okay with you?  Note in particular that the stepper would then have  
 the mirror problem that (cond (true 'ok)) would be rendered as (cond  
 [true 'ok]). OTOH, it's fairly hard to type (cond (true 'ok)) in the  
 learning languages as it is.
 
 Urr... also, it's going to be a bit of a pain in the ass because the  
 actual translation to text strings happens within pretty-print, so  
 there may be some moderately evil wrangling to make this happen.
 
 
 
 John
 
 
 
Class changed from "sw-bug" to "change-request" by clements at Thu, 17 Sep 2009 18:39:06 -0400
Reason>>> stepper doesn't currently have any knowledge of source

Responsible changed from "nobody" to "clements" by clements at Thu, 17 Sep 2009 18:39:06 -0400
Reason>>> stepper issue

From: David Van Horn <dvanhorn@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10466: Stepper: does not preserve parens vs brackets
 (BSL)
Date: Thu, 17 Sep 2009 18:36:25 -0400

 John Clements wrote:
 > On Sep 17, 2009, at 8:04 AM, dvanhorn@ccs.neu.edu wrote:
 > 
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=10466
 >>
 >> Reported by David Van Horn for release: 4.2.1.8-svn16sep2009
 >>
 >> *** Description:
 >> The stepper converts all brackets
 >> to parens.
 >>
 >> *** How to repeat:
 >> Step the following.  Notice [] becomes ().
 >>
 >> (cond [true 'ok])
 > 
 > This one is more or less a change request, and probably not a simple 
 > one; the stepper doesn't actually look at the user's source code at all, 
 > and thus has no idea what were square and what were round parens.
 > 
 > Perhaps the most straightforward solution would be to just use square 
 > brackets for all of the cond clauses and similar locations. Would that 
 > be okay with you?  Note in particular that the stepper would then have 
 > the mirror problem that (cond (true 'ok)) would be rendered as (cond 
 > [true 'ok]). OTOH, it's fairly hard to type (cond (true 'ok)) in the 
 > learning languages as it is.
 > 
 > Urr... also, it's going to be a bit of a pain in the ass because the 
 > actual translation to text strings happens within pretty-print, so there 
 > may be some moderately evil wrangling to make this happen.
 
 This is not the biggest issue in the world, so resolve as you see fit; I 
 just observed two classes that immediately jumped on this.  I explained 
 the [] vs () equivalence, conventions for brackets, and that always 
 typing "[" will just do the right thing and that was that.
 
 I know DrScheme has support for tracking ( vs [ in syntax and printing 
 (right?), so it should be possible to have the stepper really follow 
 what the user typed.  But I also noticed the macro stepper does the same 
 as the stepper, and syntax errors also convert all [ to (.
 
 The 'confusability' bug is a real issue though.
 
 David
 
