From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jul 22 15:40:30 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.226])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l6MJeTBi000377
	for <bugs@bugs.plt-scheme.org>; Sun, 22 Jul 2007 15:40:29 -0400
Message-Id: <200707221940.l6MJeRHr000372@champlain.ccs.neu.edu>
Date: Sun, 22 Jul 2007 15:40:27 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: strange ProfessorJ error

>Number:         8818
>Category:       profj
>Synopsis:       strange ProfessorJ error
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jul 22 15:45:01 -0400 2007
>Closed-Date:    Tue Apr 29 11:55:23 -0400 2008
>Last-Modified:  Tue Apr 29 11:55:23 -0400 2008
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        370.6-svn22jul2007
>Environment:
macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1: Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide" "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web-server-guide" "web-server-reference" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
Human Language: english
(current-memory-use) 123866688

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/370.6/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests!
 " "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
current release, content below produces 

Welcome to DrScheme, version 370.6-svn22jul2007 [3m].
Language: ProfessorJ: Intermediate.
force: reentrant promise
> 
>How-To-Repeat:
// representing types 
interface IType {}

class IntegerType extends AType {
  String name = "int";
  IntegerType() {}
}

class StringType extends AType {
  String name = "string"; 
  StringType() {}
}

class PlainClass implements IType {
  String name;
  PlainClass(String name) {
    this. type = type; 
  }
}

class Interface implements IType {
  String name;
  Interface(String name) {
    this.name = name;
  }

class Exampes1 {
 IType intT = new IntegerType();
 IType strT = new StringType();
 IType plcl = new PlainClass("A");
 IType itfc = new Interface("I"); 
}
>Fix:
>Audit-Trail:
From: Kathy Gray <kathyg@cs.utah.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: Eli Barzilay <eli@barzilay.org>
Subject: Re: [plt-bug] all/8818: strange ProfessorJ error
Date: Mon, 23 Jul 2007 00:41:31 +0100

 I have corrected the underlying error in the ProfessorJ parser. I do  
 not know why this caused the error message from Lazy that it did...
 
 The situation arose when I was (lazily) taking the car of a (lazy)  
 procedure (which is of course a silly thing to do...)
 The first time I would run the program on a fresh DrScheme, I  
 received the car of procedure error; subsequent executions received  
 the force:reentrant promise error message.
 It was always the same procedure being treated like a non-null list,  
 and always the same function performing the car operation.
 
 -Kathy, who sometimes does regret not having a type system
 
 
 On Jul 22, 2007, at 8:45 PM, matthias@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8818
 >
 > Reported by matthias for release: 370.6-svn22jul2007
 >
 > *** Description:
 > current release, content below produces
 >
 > Welcome to DrScheme, version 370.6-svn22jul2007 [3m].
 > Language: ProfessorJ: Intermediate.
 > force: reentrant promise
 >>
 >
 > *** How to repeat:
 > // representing types
 > interface IType {}
 >
 > class IntegerType extends AType {
 >   String name = "int";
 >   IntegerType() {}
 > }
 >
 > class StringType extends AType {
 >   String name = "string";
 >   StringType() {}
 > }
 >
 > class PlainClass implements IType {
 >   String name;
 >   PlainClass(String name) {
 >     this. type = type;
 >   }
 > }
 >
 > class Interface implements IType {
 >   String name;
 >   Interface(String name) {
 >     this.name = name;
 >   }
 >
 > class Exampes1 {
 >  IType intT = new IntegerType();
 >  IType strT = new StringType();
 >  IType plcl = new PlainClass("A");
 >  IType itfc = new Interface("I");
 > }
 >
 > *** Environment:
 > macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1:  
 > Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386  
 > i386" (i386-macosx/3m) (get-display-depth) = 32
 > Docs Installed:
 > (("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour"  
 > "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign"  
 > "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide"  
 > "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web- 
 > server-guide" "web-server-reference" "tex2page" "beginning"  
 > "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 > "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate"  
 > "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
 > Human Language: english
 > (current-memory-use) 123866688
 >
 > Collections:
 > (("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance"  
 > "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/370.6/ 
 > collects" non-existent-path) ("/Users/matthias/plt/collects"  
 > ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator- 
 > parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext"  
 > "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime"  
 > "games" "graphics" "guibuilder" "handin-client" "handin-server"  
 > "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info- 
 > domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred"  
 > "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake"  
 > "net" "openssl" "parser-tools" "planet" "plot" "preprocessor"  
 > "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos- 
 > time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail"  
 > "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist"  
 > "stepper" "string-constants" "swindle" "syntax" "syntax-color"  
 > "teachpack" "test-suite" "tests!
 >  " "tex2page" "texpict" "trace" "version" "waterworld" "web-server"  
 > "wxme" "xelda" "xml"))
 > Computer Language: (("Experimental Languages" "ProfessorJ"  
 > "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org, Eli Barzilay <eli@barzilay.org>
Subject: Re: [plt-bug] all/8818: strange ProfessorJ error
Date: Sun, 22 Jul 2007 20:31:27 -0400

 On Jul 22, 2007, at 7:41 PM, Kathy Gray wrote:
 
 > I have corrected the underlying error in the ProfessorJ parser. I  
 > do not know why this caused the error message from Lazy that it did...
 >
 > The situation arose when I was (lazily) taking the car of a (lazy)  
 > procedure (which is of course a silly thing to do...)
 > The first time I would run the program on a fresh DrScheme, I  
 > received the car of procedure error; subsequent executions received  
 > the force:reentrant promise error message.
 
 Yeap, I saw this and meant to submit it. When I tried to reproduce  
 it, the "lazy error" showed up and I had to change my bug report  
 because there seemed to be no way of getting the old error back.
 
 
 > It was always the same procedure being treated like a non-null  
 > list, and always the same function performing the car operation.
 >
 > -Kathy, who sometimes does regret not having a type system
 
 
 We do have typed scheme now and it is easy to port existing Scheme to  
 the typed one. -- Matthias
 
 
 
 
 
 >
 >
 > On Jul 22, 2007, at 8:45 PM, matthias@ccs.neu.edu wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8818
 >>
 >> Reported by matthias for release: 370.6-svn22jul2007
 >>
 >> *** Description:
 >> current release, content below produces
 >>
 >> Welcome to DrScheme, version 370.6-svn22jul2007 [3m].
 >> Language: ProfessorJ: Intermediate.
 >> force: reentrant promise
 >>>
 >>
 >> *** How to repeat:
 >> // representing types
 >> interface IType {}
 >>
 >> class IntegerType extends AType {
 >>   String name = "int";
 >>   IntegerType() {}
 >> }
 >>
 >> class StringType extends AType {
 >>   String name = "string";
 >>   StringType() {}
 >> }
 >>
 >> class PlainClass implements IType {
 >>   String name;
 >>   PlainClass(String name) {
 >>     this. type = type;
 >>   }
 >> }
 >>
 >> class Interface implements IType {
 >>   String name;
 >>   Interface(String name) {
 >>     this.name = name;
 >>   }
 >>
 >> class Exampes1 {
 >>  IType intT = new IntegerType();
 >>  IType strT = new StringType();
 >>  IType plcl = new PlainClass("A");
 >>  IType itfc = new Interface("I");
 >> }
 >>
 >> *** Environment:
 >> macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1:  
 >> Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386  
 >> i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 >> Docs Installed:
 >> (("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour"  
 >> "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign"  
 >> "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide"  
 >> "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web- 
 >> server-guide" "web-server-reference" "tex2page" "beginning"  
 >> "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 >> "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate"  
 >> "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
 >> Human Language: english
 >> (current-memory-use) 123866688
 >>
 >> Collections:
 >> (("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance"  
 >> "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/ 
 >> 370.6/collects" non-existent-path) ("/Users/matthias/plt/collects"  
 >> ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator- 
 >> parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext"  
 >> "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime"  
 >> "games" "graphics" "guibuilder" "handin-client" "handin-server"  
 >> "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons"  
 >> "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make"  
 >> "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme"  
 >> "mztake" "net" "openssl" "parser-tools" "planet" "plot"  
 >> "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs"  
 >> "readline" "repos-time-stamp" "scribble" "scribblings" "setup"  
 >> "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi"  
 >> "srpersist" "stepper" "string-constants" "swindle" "syntax"  
 >> "syntax-color" "teachpack" "test-suite" "tests!
 >>  " "tex2page" "texpict" "trace" "version" "waterworld" "web- 
 >> server" "wxme" "xelda" "xml"))
 >> Computer Language: (("Experimental Languages" "ProfessorJ"  
 >> "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
 >
 
From: Eli Barzilay <eli@barzilay.org>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: matthias@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8818: strange ProfessorJ error
Date: Sun, 22 Jul 2007 22:40:05 -0400

 On Jul 23, Kathy Gray wrote:
 > I have corrected the underlying error in the ProfessorJ parser. I do  
 > not know why this caused the error message from Lazy that it did...
 
 To clarify: this is an intentional change in the interface.
 
 The explanation with plain promises: when you force a promise, the
 promise itself should not be re-forced.  This is a change from what
 R5RS shows -- it has this explanation:
 
   A promise may refer to its own value, as in the last example above.
   Forcing such a promise may cause the promise to be forced a second
   time before the value of the first force has been computed.  This
   complicates the definition of make-promise.
 
 I think that the only way you can use that is through mutating some
 global state (or you end up in a loop).
 
 Translated to Lazy Scheme, almost everything works like it worked
 before, with exceptions of infinite loops like as in:
 
   (define x (+ x 1))
 
 
 > The situation arose when I was (lazily) taking the car of a (lazy)
 > procedure (which is of course a silly thing to do...)  The first
 > time I would run the program on a fresh DrScheme, I received the car
 > of procedure error; subsequent executions received the
 > force:reentrant promise error message.  It was always the same
 > procedure being treated like a non-null list, and always the same
 > function performing the car operation.
 
 If things were different on a subsequent executes (`run' clicks), then
 maybe this is happenning in some of the tool's code, and some promises
 are kept?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Kathy Gray <kathyg@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: matthias@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8818: strange ProfessorJ error
Date: Mon, 23 Jul 2007 16:19:07 +0100

 Thanks for the clarification Eli, although I still don't quite  
 understand the full implications of the interface change.
 
 I am concerned, however, because the particular error I encountered  
 seems to rely on interactions with units, and interoperability  
 between units and Lazy is crucial to my parser (and also to a Scheme  
 workshop paper I have in submission). Now at the moment, I'm only  
 experiencing this error when there's a bug in the parser  
 specification and I have conducted my largest test yet of the  
 corrected parser without being impacted, but I'm not positive that  
 this will always be the case because I don't have a complete grasp of  
 the style of program Lazy is outlawing.
 
 I have constructed a small example program that I can repeatedly  
 cause to produce equivalent behavior to my parser. Aside from  
 complexity, it contains only one difference from the basic format of  
 my parser (I must force an application, where I don't need to do this  
 within my parser).
 
 The program appears below, should this style of program be acceptable  
 to Lazy (omitting the fact that it produces a car of procedure error,  
 and so is inherently a broken program)?
 It is acceptable to Lazy outside of units (i.e. strip off the units  
 and the error message doesn't change). I can enlist Scott's help to  
 describe what the unit linking is doing at a low level if that is  
 desired/required.
 
 -Kathy
 
 ;Run me in Lazy Scheme language level
 (require (lib "unit.ss"))
 
 (define-signature core^ (f base))
 (define-signature ex-core^ (c example))
 (define-signature exam^ (example2))
 
 (define-unit core%
    (import)
    (export core^)
 
    (define (f thunk-list)
      (lambda (input)
        ;; This sub is forced to produce the car procedure error, the  
 equivalent call in
        ;; my parser is not forced, I do not know why this one results  
 in a promise error
        (map (lambda (sub) ((!! sub) input)) thunk-list)))
 
    (define (base)
      (lambda (input)
        (car input)))
    )
 
 (define-unit ex-core%
    (import core^)
    (export ex-core^)
 
    (define c (base))
    (define example (f (list c c)))
    )
 
 (define-unit example%
    (import core^ ex-core^)
    (export exam^)
 
    ;example is called incorrectly here
    (define example2 (f (list c (example c)))))
 
 (define-compound-unit/infer all@
    (import)
    (export exam^)
    (link core% ex-core% example%))
 
 (define-values/invoke-unit all@
    (import) (export exam^))
 
 ;------
 ;In interactions first run
 ; (!! (example2 (list 1)))
 ; Then run it again and the error message changes
 
 
 
 
 On Jul 23, 2007, at 3:40 AM, Eli Barzilay wrote:
 
 > On Jul 23, Kathy Gray wrote:
 >> I have corrected the underlying error in the ProfessorJ parser. I do
 >> not know why this caused the error message from Lazy that it did...
 >
 > To clarify: this is an intentional change in the interface.
 >
 > The explanation with plain promises: when you force a promise, the
 > promise itself should not be re-forced.  This is a change from what
 > R5RS shows -- it has this explanation:
 >
 >   A promise may refer to its own value, as in the last example above.
 >   Forcing such a promise may cause the promise to be forced a second
 >   time before the value of the first force has been computed.  This
 >   complicates the definition of make-promise.
 >
 > I think that the only way you can use that is through mutating some
 > global state (or you end up in a loop).
 >
 > Translated to Lazy Scheme, almost everything works like it worked
 > before, with exceptions of infinite loops like as in:
 >
 >   (define x (+ x 1))
 >
 >
 >> The situation arose when I was (lazily) taking the car of a (lazy)
 >> procedure (which is of course a silly thing to do...)  The first
 >> time I would run the program on a fresh DrScheme, I received the car
 >> of procedure error; subsequent executions received the
 >> force:reentrant promise error message.  It was always the same
 >> procedure being treated like a non-null list, and always the same
 >> function performing the car operation.
 >
 > If things were different on a subsequent executes (`run' clicks), then
 > maybe this is happenning in some of the tool's code, and some promises
 > are kept?
 >
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli  
 > Barzilay:
 >                   http://www.barzilay.org/                 Maze is  
 > Life!
 
From: Eli Barzilay <eli@barzilay.org>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: matthias@ccs.neu.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8818: strange ProfessorJ error
Date: Mon, 23 Jul 2007 14:09:14 -0400

 On Jul 23, Kathy Gray wrote:
 > Thanks for the clarification Eli, although I still don't quite
 > understand the full implications of the interface change.  [...]
 
 Executive summary:
 
 * Some self-referencing promises (translated to self-referencing
   expressions in lazy scheme) used to diverge, these will throw an
   error now.  For example (define x (+ x 1)).  I checked Haskell: GHC
   throws a "<<loop>>" error, and Hugs gets a stack overflow.
 
 * Some self-referencing promises did not diverge -- they do that using
   some global state that allows them to refer to themselves one time,
   and return a value on the nested call, eg, the R5RS example.  These
   are not allowed now, but I don't think that these cases are useful,
   or that you can do them without global mutation.
 
 * The above "I don't think ..." implies that I believe that these two
   categories cover all self-referential promises, so they are all
   either loops-turned-to-errors, or really-ugly-example-of-mutation.
   This means that you should only see an improvement (some loops are
   caught), and that's all.  (You're a good programmer, so you never
   write the mutation thing.)
 
 * As for the current problem, it's a by-product of the new behavior.
   I have "minimized" your code to:
 
     (define foo
       (let ([x (+ car car)])
         (lambda () x)))
     (!! (foo))
     (!! (foo))
 
   The problem is that a single promise is generated, the first
   interaction will mark it as "being evaluated" and go on to throw an
   exception.  The second use throws the reentrant error because it
   sees that the promise is being marked as currently being evaluated.
 
   So the problem is that exceptions are not caught, so all such cases
   will have the (bogus) reentrant error message on the second call and
   on.  I'm not sure how to fix this (installing a with-handlers on
   each `force' is most definitely going to be too expensive).
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Kathy Gray <kathyg@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8818: strange ProfessorJ error
Date: Mon, 23 Jul 2007 17:59:39 -0400

 On Jul 23, 2007, at 2:09 PM, Eli Barzilay wrote:
 
 >   So the problem is that exceptions are not caught, so all such cases
 >   will have the (bogus) reentrant error message on the second call and
 >   on.  I'm not sure how to fix this (installing a with-handlers on
 >   each `force' is most definitely going to be too expensive).
 
 
 Why is the continuation of the first force not killed by the  
 exception that is being raised? 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Kathy Gray <kathyg@cs.utah.edu>, bugs@plt-scheme.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8818: strange ProfessorJ error
Date: Mon, 23 Jul 2007 19:41:32 -0400

 On Jul 23, Matthias Felleisen wrote:
 > 
 > On Jul 23, 2007, at 2:09 PM, Eli Barzilay wrote:
 > 
 > >   So the problem is that exceptions are not caught, so all such
 > >   cases will have the (bogus) reentrant error message on the
 > >   second call and on.  I'm not sure how to fix this (installing a
 > >   with-handlers on each `force' is most definitely going to be too
 > >   expensive).
 > 
 > Why is the continuation of the first force not killed by the
 > exception that is being raised?
 
 It is -- and that's exactly the problem.  (Matthew: this is why I
 asked you that question today, perhaps you'll have an idea if how to
 solve this...)
 
 To force a promise you do this:
 
   * mark the promise as "being executed"
   * run the thunk
     - nested forces of the promise raise the reentrant error
   * set the promise's result
 
 The problem is that if there's an error then you never set the result.
 Actually, with the fancy printer for promises the problem is very
 obvious:
 
   > (require (lib "promise.ss" "lazy"))
   > (define a (delay (+ 1 "2")))
   > (force a)
   +: expects type <number> as 2nd argument, given: "2"; other arguments were: 1
   > a
   #<promise*active>
   > (force a)
   force: reentrant promise ; <--- of course -- it's still "active"
 
 Actually, a variant of this problem already happens in mzscheme's
 `delay'/`force':
 
   > (define a (delay (list-ref (list 1 2 3) (random 6))))
   > (force a)
   list-ref: index 4 too large for list: (1 2 3)
   > (force a)
   1
 
 This is what I wanted to talk to you (Matthias) about.  The proper
 solution is obvious: catch exceptions and cache them too -- so after
 the first `force' the exception is caught, cached, and re-raised.  The
 second force just uses the previously caught exception and raises it
 again.  This has the benefit that (list-ref (list 1 2 3) (random 6))
 will cache any result -- exception or value.
 
 But the problem is that using `with-handlers' is expensive enough that
 I don't want it to happen in every `force' (it's less of a problem in
 plain Scheme, of course).  An alternative solution is that the "active
 promise" mark is a numer, and each use of force has its own number.
 This will lead to something like this:
 
   > (define a (delay (list-ref (list 1 2 3) (random 6))))
   > (force a)
   list-ref: index 4 too large for list: (1 2 3)
   > (force a)
   this promise had previously been aborted
 
 But that can also happen when there are threads involved.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Kathy Gray <kathyg@cs.utah.edu>, bugs@plt-scheme.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8818: strange ProfessorJ error
Date: Mon, 23 Jul 2007 22:49:04 -0400

 On Jul 23, 2007, at 7:41 PM, Eli Barzilay wrote:
 
 > The proper
 > solution is obvious: catch exceptions and cache them too -- so after
 > the first `force' the exception is caught, cached, and re-raised.  The
 > second force just uses the previously caught exception and raises it
 > again.  This has the benefit that (list-ref (list 1 2 3) (random 6))
 > will cache any result -- exception or value.
 >
 > But the problem is that using `with-handlers' is expensive enough that
 > I don't want it to happen in every `force' (it's less of a problem in
 > plain Scheme, of course).
 
 
 Here is what bugs me about this argument. We KNOW that the handlers
 solution (actually if you have continuations, you may need even more
 than handlers) is the RIGHT solution. BUT, because handlers are  
 expensive
 we don't do it. We just feel eekie about it.
 
 What we should do is use handlers and put pressure on the implementation
 (eh, implementor) to make this cheap or to provide an alternative cheap
 mechanism.
 
 Question: do you need to set the handler for each implicit force or
 for each explicit force?
 
 Yet another alternative: You eliminate exceptions and instead turn
 every function into a
 
   a -> b + 'EXCPETION
 
 beast. You also make all functions strict in this exception value. It's
 cheaper than exceptions for the small programs we tend to write and just
 as instructive. I am not sure this solution applies to Kathy.
 
 


State changed from "open" to "closed" by kathyg at Tue, 29 Apr 2008 11:55:23 -0400
Reason>>> Both bugs do not occur with the current parser

