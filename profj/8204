From apache@plt-scheme.org Mon Jul 31 08:14:45 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.13.7/8.13.6) with ESMTP id k6VCEjPa026713
	for <bugs@plt-scheme.org>; Mon, 31 Jul 2006 08:14:45 -0400
Message-Id: <200607311214.k6VCEj7g026712@champlain.ccs.neu.edu>
Date: Mon, 31 Jul 2006 08:14:45 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: ProfessorJ can't find local private methods

>Number:         8204
>Category:       profj
>Synopsis:       ProfessorJ can't find local private methods
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Jul 31 08:15:01 -0400 2006
>Closed-Date:    Tue Aug 01 23:57:25 -0400 2006
>Last-Modified:  Tue Aug 01 23:57:25 -0400 2006
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        351.1-svn24jul2006
>Environment:
macosx "Darwin europe.local 8.7.0 Darwin Kernel Version 8.7.0: Fri May 26 15:20:53 PDT 2006; root:xnu-792.6.76.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "help" "release-notes" "teachpack-htdc"))
Human Language: english
(current-memory-use) 98255356

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/351.1/collects" non-existent-path) ("/Users/matthias/plt/collects" ".svn" "afm" "algol60" "browser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "xelda" "xml"))
Teachpack filenames: ()
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
If you change the __protected__ in this file (there is only one) into a
__private__ specification, you get an internal error ProfessorJ error:

   reference to an identifier before its definition: move1.3

Note that the method definition of move is in the same class. The protection 
shouldn't matter. 

Sorry I haven't found time to make this example any smaller.
>How-To-Repeat:
import idraw.*;
import colors.*;
import geometry.*;

// representing the world of UFOs, AUPs, and Shots
class WorldUFO extends World {
 private UFO ufo;
 private AUP aup;
 private IShots shots;
 private Color BACKGROUND = new Blue();
 public int HEIGHT = 700;
 public int WIDTH = 400; 

 public WorldUFO(UFO ufo, AUP aup, IShots shots) {
  this.ufo = ufo;
  this.aup = aup;
  this.shots = shots;
 }

 public void go() {
  this.bigBang(this.WIDTH,this.HEIGHT,.01);
  return ;
 }

 // what happens on every tick of the clock 
 public void onTick() {
  if (this.ufo.landedP(this))
   this.endOfWorld("hello world");
  else if (this.shots.hit(this.ufo))
   this.endOfWorld(".");
  else 
   this.move();
  return ;
 }

 // what happens on a key event
 public void onKeyEvent(String k) { 
  if (k.equals("up")) 
   this.fireShot();
  else 
   this.aup.move(k);
  return ;
 }

 // move the objects in this world that move on time 
 // this ought to be PRIVATE but ProfessorJ has a bug that prevents this
 protected void move() {
  this.ufo.move(this);
  this.shots.move();
  return ;
 }

 // add a shot to the list of shots 
 private void fireShot() { 
  this. shots = new ConsShots(this.aup.fireShot(this),this.shots);
  return ;
 }

 // draw this World 
 public void draw() {
  this.ufo.draw(this.theCanvas);
  this.aup.draw(this.theCanvas,this. HEIGHT);
  this.shots.draw(this.theCanvas);
  return ; 
 }

 // erase this World
 public void erase() { 
  this.theCanvas.drawRect(new Posn(0,0),this.WIDTH,this.HEIGHT,this.BACKGROUND);
  return ;
 }
}


/*
+----------------+
| AUP            |
+----------------+
| int location   |
| Color aupColor |
+----------------+

*/

// an anti-ufo platform
class AUP {
 int location;
 Color aupColor = new Red();

 AUP(int location) {
  this.location = location;
 }

 // move this AUP to the right by three pixels
 void move(String k) {
  if (k.equals("left"))
   this.location = this.location-3;
  else if (k.equals("right"))
   this.location = this.location+3;
  else 
   return ;
  return ; 
 }

 // fire a shot (create it)
 Shot fireShot(WorldUFO w) { 
  return new Shot(new Posn(this.location+12,w.HEIGHT-22));
 }

 // draw this AUP
 void draw(Canvas w, int HEIGHT) {
  w.drawRect(new Posn(this.location,HEIGHT-10),24,6,this.aupColor);
  w.drawRect(new Posn(this.location+12,HEIGHT-20),4,10,this.aupColor);
  return; 
 }
}

/*
+----------------+
| UFO            |
+----------------+
| Posn location  |
| Color colorUFO |
+----------------+

*/

// representing a UFO
class UFO {
 Posn location;
 Color colorUFO = new Green();
 double CLOSE = 10.0;

 UFO(Posn location) {
  this.location = location;
 }

 // move this UFO down by 3 pixels 
 void move(WorldUFO w) {
  if (this.landedP(w))
   return ; // don't move anymore, it's on the ground 
  else {
   this.location = new Posn(this.location.x,this.location.y+3);
   return ; 
  }
 }

 // has the UFO landed yet?
 boolean landedP(WorldUFO w) {
  return this.location.y >= w.HEIGHT - 3;
 }

 // is this location close to this UFO 
 boolean isHit(Posn x) { 
  return this.distanceTo(x) <= this.CLOSE;
 }

 // compute distance between l and this.location
 double distanceTo(Posn l) { 
  return this.distanceToO(l.x-this.location.x,l.y-this.location.y);
 }

 // compute distance of (x,y) to origin
 double distanceToO(double x, double y) { 
  return Math.sqrt(x*x + y*y);
 }

 // draw this UFO into the WorldUFO w
 void draw(Canvas w) {
  w.drawDisk(this.location,10,this.colorUFO);
  w.drawRect(new Posn(this.location.x-30,this.location.y-2),60,4,this.colorUFO); 
  return ;
 }
}
                            
/*
+---------------+
| Shot          |
+---------------+
| Posn location |
+---------------+

*/

// a shot in flight
class Shot {
 Posn location;
 Color shotColor = new Yellow(); 

 Shot(Posn location) {
   this.location = location;
 }

 // move this shot up by 3 pixels 
 void move() {
  this.location = new Posn(this.location.x,this.location.y-3);
  return ; 
 }

 // did this shot hit the UFO
 boolean hit(UFO u) {
  return u.isHit(this.location);
 }

 // draw this shot on the canvas 
 void draw(Canvas w) { 
  w.drawRect(this.location,2,10,this.shotColor);
  return ;
 }
}

/*
            +--------+               
            | AShots |<-------------+
            +--------+              |
            +--------+              |
               / \                  |
               ---                  |
                |                   |
       ------------------           |
       |                |           |
  +---------+    +-------------+    |
  | MtShots |    | ConsShots   |    |
  +---------+    +-------------+    |
  +---------+    | Shot first  |    |
                 | AShots rest |-+  |
                 +-------------+ |  |
                                 |  |
                                 +--+

*/

// managing a number of shots
interface IShots {
 // move all these shots
 void move();

 // did any of these shots hit the UFO
 boolean hit(UFO u);

 // draw these Shots into w
 void draw(Canvas w);
}

// no shots
class MtShots implements IShots {
 MtShots() { }

 void move() { return ; }
 boolean hit(UFO u) { return false; }
 void draw(Canvas w) { return ; }
}

// add one to the bunch 
class ConsShots implements IShots {
 Shot first;
 IShots rest;

 ConsShots(Shot first, IShots rest) {
  this.first = first;
  this.rest = rest;
 }

 void move() { 
  this.first.move();
  this.rest.move();
  return ; 
 }

 boolean hit(UFO u) { 
  return this.first.hit(u) || this.rest.hit(u);
 }

 void draw(Canvas w) { 
  this.first.draw(w);
  this.rest.draw(w); 
  return ;
 }
}
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "kathyg" by kathyg at Tue, 01 Aug 2006 23:57:25 -0400
Reason>>> .

State changed from "open" to "closed" by kathyg at Tue, 01 Aug 2006 23:57:25 -0400
Reason>>> This bug was a symptom of the same problem described in pr8203. Also 
corrected in svn.

