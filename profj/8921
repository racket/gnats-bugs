From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Sep 11 09:12:45 2007
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.174])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l8BDCiW6015351
	for <bugs@bugs.plt-scheme.org>; Tue, 11 Sep 2007 09:12:45 -0400
Message-Id: <200709111312.l8BDCfip015345@champlain.ccs.neu.edu>
Date: Tue, 11 Sep 2007 09:12:41 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: semantics of fields in ProfessorJ

>Number:         8921
>Category:       profj
>Synopsis:       semantics of fields in ProfessorJ
>Class:          change-request
>Responsible:    kathyg
>Severity:       critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Sep 11 09:15:02 -0400 2007
>Closed-Date:    Tue Dec 06 14:11:24 -0500 2011
>Last-Modified:  Tue Dec 06 14:11:24 -0500 2011
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        371.2-svn10sep2007
>Environment:
macosx "Darwin america.local 8.10.0 Darwin Kernel Version 8.10.0: Wed May 23 16:50:59 PDT 2007; root:xnu-792.21.3~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "gui" "guide" "quick" "reference" "release-notes" "scribble" "web-server-guide" "web-server-reference" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-intermediate-access" "profj-advanced") ("/Users/matthias/plt/collects/doc" "help" "acl2" "teachpack"))
Human Language: english
(current-memory-use) 196458380

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/371.2/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "finish-install" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "reduction-semantics" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "ssax" "stepper" "string-constants" "swin!
 dle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
Kathy, this is an entry into the bug database just so 
we don't forget this stuff. I would like the following 
program to succeed in ADVANCED only. For all lower language
levels, it should fail with a "access to undefined field" 
syntax error or something like that. (It is of course 
more of a type error than a syntax errror.)

class StrangeExample {
 int x;
 StrangeExample() { this.x = 100; }  
 boolean test = check this.x expect 100; 
}
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@cs.uchicago.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: "Kathy Gray" <kathyg@cs.utah.edu>
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 08:35:34 -0500

 On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 > Kathy, this is an entry into the bug database just so
 > we don't forget this stuff. I would like the following
 > program to succeed in ADVANCED only. For all lower language
 > levels, it should fail with a "access to undefined field"
 > syntax error or something like that. (It is of course
 > more of a type error than a syntax errror.)
 >
 > class StrangeExample {
 >  int x;
 >  StrangeExample() { this.x = 100; }
 >  boolean test = check this.x expect 100;
 > }
 
 How is this a syntax/type error and not a runtime error? Or, for that
 matter, why is it an error at all? Shouldn't the test case run after
 the init?
 
 Robby
From: Kathy Gray <kathyg@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 15:13:36 +0100

 On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 
 > On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 >> Kathy, this is an entry into the bug database just so
 >> we don't forget this stuff. I would like the following
 >> program to succeed in ADVANCED only. For all lower language
 >> levels, it should fail with a "access to undefined field"
 >> syntax error or something like that. (It is of course
 >> more of a type error than a syntax errror.)
 >>
 >> class StrangeExample {
 >>  int x;
 >>  StrangeExample() { this.x = 100; }
 >>  boolean test = check this.x expect 100;
 >> }
 >
 
 To clarify, we want to forbid all programs (in Beginner to  
 Intermediate++) from accessing uninitialized fields in the subsequent  
 field specifications? And so the error message for this should be  
 along the lines of 'Illegal use of x before it's initialized in  
 check'? (Type error, not syntax error)
 
 
 > How is this a syntax/type error and not a runtime error? Or, for that
 > matter, why is it an error at all? Shouldn't the test case run after
 > the init?
 In Java there should be no undefined values at runtime, as everything  
 is auto initialized (often to null), so we don't want a runtime  
 error. The teaching languages (if I recalled correctly) will not be  
 relying on default initializations and be requiring students to set  
 the values of their fields (sometimes to null, when mutation is  
 introduced).
 So in the program above, the default init has evaluated before the  
 usage of x but the constructor hasn't; so the teaching languages will  
 treat this as uninitialized.
 
 -Kathy
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Kathy Gray" <kathyg@cs.utah.edu>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 09:18:37 -0500

 I misunderstood the example: I missed the "boolean test =" part and
 Matthias clarified on the phone.
 
 I'm not sure, however, how this can be a compile/type-checking time
 check, tho. Shouldn't it be a runtime test, (ie when you look up "x")?
 
 Robby
 
 On 9/11/07, Kathy Gray <kathyg@cs.utah.edu> wrote:
 >
 > On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 >
 > > On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 > >> Kathy, this is an entry into the bug database just so
 > >> we don't forget this stuff. I would like the following
 > >> program to succeed in ADVANCED only. For all lower language
 > >> levels, it should fail with a "access to undefined field"
 > >> syntax error or something like that. (It is of course
 > >> more of a type error than a syntax errror.)
 > >>
 > >> class StrangeExample {
 > >>  int x;
 > >>  StrangeExample() { this.x = 100; }
 > >>  boolean test = check this.x expect 100;
 > >> }
 > >
 >
 > To clarify, we want to forbid all programs (in Beginner to
 > Intermediate++) from accessing uninitialized fields in the subsequent
 > field specifications? And so the error message for this should be
 > along the lines of 'Illegal use of x before it's initialized in
 > check'? (Type error, not syntax error)
 >
 >
 > > How is this a syntax/type error and not a runtime error? Or, for that
 > > matter, why is it an error at all? Shouldn't the test case run after
 > > the init?
 > In Java there should be no undefined values at runtime, as everything
 > is auto initialized (often to null), so we don't want a runtime
 > error. The teaching languages (if I recalled correctly) will not be
 > relying on default initializations and be requiring students to set
 > the values of their fields (sometimes to null, when mutation is
 > introduced).
 > So in the program above, the default init has evaluated before the
 > usage of x but the constructor hasn't; so the teaching languages will
 > treat this as uninitialized.
 >
 > -Kathy
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 10:15:56 -0400

 Correct. I will continue writing chapter IV assuming this change will  
 happen.
 
 On Sep 11, 2007, at 10:13 AM, Kathy Gray wrote:
 
 >
 > On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 >
 >> On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 >>> Kathy, this is an entry into the bug database just so
 >>> we don't forget this stuff. I would like the following
 >>> program to succeed in ADVANCED only. For all lower language
 >>> levels, it should fail with a "access to undefined field"
 >>> syntax error or something like that. (It is of course
 >>> more of a type error than a syntax errror.)
 >>>
 >>> class StrangeExample {
 >>>  int x;
 >>>  StrangeExample() { this.x = 100; }
 >>>  boolean test = check this.x expect 100;
 >>> }
 >>
 >
 > To clarify, we want to forbid all programs (in Beginner to  
 > Intermediate++) from accessing uninitialized fields in the  
 > subsequent field specifications? And so the error message for this  
 > should be along the lines of 'Illegal use of x before it's  
 > initialized in check'? (Type error, not syntax error)
 >
 >
 >> How is this a syntax/type error and not a runtime error? Or, for that
 >> matter, why is it an error at all? Shouldn't the test case run after
 >> the init?
 > In Java there should be no undefined values at runtime, as  
 > everything is auto initialized (often to null), so we don't want a  
 > runtime error. The teaching languages (if I recalled correctly)  
 > will not be relying on default initializations and be requiring  
 > students to set the values of their fields (sometimes to null, when  
 > mutation is introduced).
 > So in the program above, the default init has evaluated before the  
 > usage of x but the constructor hasn't; so the teaching languages  
 > will treat this as uninitialized.
 >
 > -Kathy
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: "Kathy Gray" <kathyg@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 09:39:47 -0500

 Any expression that is in a field initializer, presumably?
 
 That won't get all of the possible errors, tho. You'll still need the
 dynamic check (or a tighter static test).
 
 Robby
 
 On 9/11/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > I think that it's safe flag any expression that contains a reference
 > to a field that is NOT initialized with a right-hand side. That's why
 > it's more like a type check than a syntax check. -- Matthias
 >
 >
 >
 >
 > On Sep 11, 2007, at 10:18 AM, Robby Findler wrote:
 >
 > > I misunderstood the example: I missed the "boolean test =" part and
 > > Matthias clarified on the phone.
 > >
 > > I'm not sure, however, how this can be a compile/type-checking time
 > > check, tho. Shouldn't it be a runtime test, (ie when you look up "x")?
 > >
 > > Robby
 > >
 > > On 9/11/07, Kathy Gray <kathyg@cs.utah.edu> wrote:
 > >>
 > >> On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 > >>
 > >>> On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 > >>>> Kathy, this is an entry into the bug database just so
 > >>>> we don't forget this stuff. I would like the following
 > >>>> program to succeed in ADVANCED only. For all lower language
 > >>>> levels, it should fail with a "access to undefined field"
 > >>>> syntax error or something like that. (It is of course
 > >>>> more of a type error than a syntax errror.)
 > >>>>
 > >>>> class StrangeExample {
 > >>>>  int x;
 > >>>>  StrangeExample() { this.x = 100; }
 > >>>>  boolean test = check this.x expect 100;
 > >>>> }
 > >>>
 > >>
 > >> To clarify, we want to forbid all programs (in Beginner to
 > >> Intermediate++) from accessing uninitialized fields in the subsequent
 > >> field specifications? And so the error message for this should be
 > >> along the lines of 'Illegal use of x before it's initialized in
 > >> check'? (Type error, not syntax error)
 > >>
 > >>
 > >>> How is this a syntax/type error and not a runtime error? Or, for
 > >>> that
 > >>> matter, why is it an error at all? Shouldn't the test case run after
 > >>> the init?
 > >> In Java there should be no undefined values at runtime, as everything
 > >> is auto initialized (often to null), so we don't want a runtime
 > >> error. The teaching languages (if I recalled correctly) will not be
 > >> relying on default initializations and be requiring students to set
 > >> the values of their fields (sometimes to null, when mutation is
 > >> introduced).
 > >> So in the program above, the default init has evaluated before the
 > >> usage of x but the constructor hasn't; so the teaching languages will
 > >> treat this as uninitialized.
 > >>
 > >> -Kathy
 > >>
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Kathy Gray" <kathyg@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 10:35:27 -0400

 I think that it's safe flag any expression that contains a reference  
 to a field that is NOT initialized with a right-hand side. That's why  
 it's more like a type check than a syntax check. -- Matthias
 
 
 
 
 On Sep 11, 2007, at 10:18 AM, Robby Findler wrote:
 
 > I misunderstood the example: I missed the "boolean test =" part and
 > Matthias clarified on the phone.
 >
 > I'm not sure, however, how this can be a compile/type-checking time
 > check, tho. Shouldn't it be a runtime test, (ie when you look up "x")?
 >
 > Robby
 >
 > On 9/11/07, Kathy Gray <kathyg@cs.utah.edu> wrote:
 >>
 >> On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 >>
 >>> On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 >>>> Kathy, this is an entry into the bug database just so
 >>>> we don't forget this stuff. I would like the following
 >>>> program to succeed in ADVANCED only. For all lower language
 >>>> levels, it should fail with a "access to undefined field"
 >>>> syntax error or something like that. (It is of course
 >>>> more of a type error than a syntax errror.)
 >>>>
 >>>> class StrangeExample {
 >>>>  int x;
 >>>>  StrangeExample() { this.x = 100; }
 >>>>  boolean test = check this.x expect 100;
 >>>> }
 >>>
 >>
 >> To clarify, we want to forbid all programs (in Beginner to
 >> Intermediate++) from accessing uninitialized fields in the subsequent
 >> field specifications? And so the error message for this should be
 >> along the lines of 'Illegal use of x before it's initialized in
 >> check'? (Type error, not syntax error)
 >>
 >>
 >>> How is this a syntax/type error and not a runtime error? Or, for  
 >>> that
 >>> matter, why is it an error at all? Shouldn't the test case run after
 >>> the init?
 >> In Java there should be no undefined values at runtime, as everything
 >> is auto initialized (often to null), so we don't want a runtime
 >> error. The teaching languages (if I recalled correctly) will not be
 >> relying on default initializations and be requiring students to set
 >> the values of their fields (sometimes to null, when mutation is
 >> introduced).
 >> So in the program above, the default init has evaluated before the
 >> usage of x but the constructor hasn't; so the teaching languages will
 >> treat this as uninitialized.
 >>
 >> -Kathy
 >>
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 15:45:51 +0100

 On Sep 11, 2007, at 3:18 PM, Robby Findler wrote:
 
 > I misunderstood the example: I missed the "boolean test =" part and
 > Matthias clarified on the phone.
 >
 > I'm not sure, however, how this can be a compile/type-checking time
 > check, tho. Shouldn't it be a runtime test, (ie when you look up "x")?
 
 Your insistence has made me recall some problems in identifying the  
 situations.
 
 In two situations, it's not a simple matter of book keeping to  
 identify the usage of uninitialized fields.
 
 The first uses this.method() within a field initialization. It's not  
 feasible to check such uses statically.
 
 The second uses 'this' on its own within the field initialization,  
 either as the argument to an external method or as the body itself.
 
 I seem to recall that we had earlier discussed removing the second  
 usage already, for reasons relating to this style of problem and  
 cyclic references that we didn't want to explain to students yet.
 
 We can avoid the first complication by forbidding this.method() calls  
 in this position; if we don't want to forbid this than I think we do  
 have to admit the possibility of the student accessing a default- 
 initialized field within their method (even if the constructor  
 initializes it, since the fields evaluate first). I don't think that  
 it's a good idea to switch to a runtime error, as that's a large  
 departure from Java semantics.
 
 -Kathy
 
 >
 > On 9/11/07, Kathy Gray <kathyg@cs.utah.edu> wrote:
 >>
 >> On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 >>
 >>> On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 >>>> Kathy, this is an entry into the bug database just so
 >>>> we don't forget this stuff. I would like the following
 >>>> program to succeed in ADVANCED only. For all lower language
 >>>> levels, it should fail with a "access to undefined field"
 >>>> syntax error or something like that. (It is of course
 >>>> more of a type error than a syntax errror.)
 >>>>
 >>>> class StrangeExample {
 >>>>  int x;
 >>>>  StrangeExample() { this.x = 100; }
 >>>>  boolean test = check this.x expect 100;
 >>>> }
 >>>
 >>
 >> To clarify, we want to forbid all programs (in Beginner to
 >> Intermediate++) from accessing uninitialized fields in the subsequent
 >> field specifications? And so the error message for this should be
 >> along the lines of 'Illegal use of x before it's initialized in
 >> check'? (Type error, not syntax error)
 >>
 >>
 >>> How is this a syntax/type error and not a runtime error? Or, for  
 >>> that
 >>> matter, why is it an error at all? Shouldn't the test case run after
 >>> the init?
 >> In Java there should be no undefined values at runtime, as everything
 >> is auto initialized (often to null), so we don't want a runtime
 >> error. The teaching languages (if I recalled correctly) will not be
 >> relying on default initializations and be requiring students to set
 >> the values of their fields (sometimes to null, when mutation is
 >> introduced).
 >> So in the program above, the default init has evaluated before the
 >> usage of x but the constructor hasn't; so the teaching languages will
 >> treat this as uninitialized.
 >>
 >> -Kathy
 >>
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: "Kathy Gray" <kathyg@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 09:47:48 -0500

 out of order in the initializer? If the initializer doesn't actually
 initialize them all, then a method could have a problem... maybe
 that's all.
 
 Robby
 
 On 9/11/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > On Sep 11, 2007, at 10:39 AM, Robby Findler wrote:
 >
 > > Any expression that is in a field initializer, presumably?
 > >
 > > That won't get all of the possible errors, tho. You'll still need the
 > > dynamic check (or a tighter static test).
 >
 > Which ones am I missing?
 >
 > >
 > > Robby
 > >
 > > On 9/11/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > >> I think that it's safe flag any expression that contains a reference
 > >> to a field that is NOT initialized with a right-hand side. That's why
 > >> it's more like a type check than a syntax check. -- Matthias
 > >>
 > >>
 > >>
 > >>
 > >> On Sep 11, 2007, at 10:18 AM, Robby Findler wrote:
 > >>
 > >>> I misunderstood the example: I missed the "boolean test =" part and
 > >>> Matthias clarified on the phone.
 > >>>
 > >>> I'm not sure, however, how this can be a compile/type-checking time
 > >>> check, tho. Shouldn't it be a runtime test, (ie when you look up
 > >>> "x")?
 > >>>
 > >>> Robby
 > >>>
 > >>> On 9/11/07, Kathy Gray <kathyg@cs.utah.edu> wrote:
 > >>>>
 > >>>> On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 > >>>>
 > >>>>> On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 > >>>>>> Kathy, this is an entry into the bug database just so
 > >>>>>> we don't forget this stuff. I would like the following
 > >>>>>> program to succeed in ADVANCED only. For all lower language
 > >>>>>> levels, it should fail with a "access to undefined field"
 > >>>>>> syntax error or something like that. (It is of course
 > >>>>>> more of a type error than a syntax errror.)
 > >>>>>>
 > >>>>>> class StrangeExample {
 > >>>>>>  int x;
 > >>>>>>  StrangeExample() { this.x = 100; }
 > >>>>>>  boolean test = check this.x expect 100;
 > >>>>>> }
 > >>>>>
 > >>>>
 > >>>> To clarify, we want to forbid all programs (in Beginner to
 > >>>> Intermediate++) from accessing uninitialized fields in the
 > >>>> subsequent
 > >>>> field specifications? And so the error message for this should be
 > >>>> along the lines of 'Illegal use of x before it's initialized in
 > >>>> check'? (Type error, not syntax error)
 > >>>>
 > >>>>
 > >>>>> How is this a syntax/type error and not a runtime error? Or, for
 > >>>>> that
 > >>>>> matter, why is it an error at all? Shouldn't the test case run
 > >>>>> after
 > >>>>> the init?
 > >>>> In Java there should be no undefined values at runtime, as
 > >>>> everything
 > >>>> is auto initialized (often to null), so we don't want a runtime
 > >>>> error. The teaching languages (if I recalled correctly) will not be
 > >>>> relying on default initializations and be requiring students to set
 > >>>> the values of their fields (sometimes to null, when mutation is
 > >>>> introduced).
 > >>>> So in the program above, the default init has evaluated before the
 > >>>> usage of x but the constructor hasn't; so the teaching languages
 > >>>> will
 > >>>> treat this as uninitialized.
 > >>>>
 > >>>> -Kathy
 > >>>>
 > >>
 > >>
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Kathy Gray" <kathyg@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 10:45:58 -0400

 On Sep 11, 2007, at 10:39 AM, Robby Findler wrote:
 
 > Any expression that is in a field initializer, presumably?
 >
 > That won't get all of the possible errors, tho. You'll still need the
 > dynamic check (or a tighter static test).
 
 Which ones am I missing?
 
 >
 > Robby
 >
 > On 9/11/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> I think that it's safe flag any expression that contains a reference
 >> to a field that is NOT initialized with a right-hand side. That's why
 >> it's more like a type check than a syntax check. -- Matthias
 >>
 >>
 >>
 >>
 >> On Sep 11, 2007, at 10:18 AM, Robby Findler wrote:
 >>
 >>> I misunderstood the example: I missed the "boolean test =" part and
 >>> Matthias clarified on the phone.
 >>>
 >>> I'm not sure, however, how this can be a compile/type-checking time
 >>> check, tho. Shouldn't it be a runtime test, (ie when you look up  
 >>> "x")?
 >>>
 >>> Robby
 >>>
 >>> On 9/11/07, Kathy Gray <kathyg@cs.utah.edu> wrote:
 >>>>
 >>>> On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 >>>>
 >>>>> On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 >>>>>> Kathy, this is an entry into the bug database just so
 >>>>>> we don't forget this stuff. I would like the following
 >>>>>> program to succeed in ADVANCED only. For all lower language
 >>>>>> levels, it should fail with a "access to undefined field"
 >>>>>> syntax error or something like that. (It is of course
 >>>>>> more of a type error than a syntax errror.)
 >>>>>>
 >>>>>> class StrangeExample {
 >>>>>>  int x;
 >>>>>>  StrangeExample() { this.x = 100; }
 >>>>>>  boolean test = check this.x expect 100;
 >>>>>> }
 >>>>>
 >>>>
 >>>> To clarify, we want to forbid all programs (in Beginner to
 >>>> Intermediate++) from accessing uninitialized fields in the  
 >>>> subsequent
 >>>> field specifications? And so the error message for this should be
 >>>> along the lines of 'Illegal use of x before it's initialized in
 >>>> check'? (Type error, not syntax error)
 >>>>
 >>>>
 >>>>> How is this a syntax/type error and not a runtime error? Or, for
 >>>>> that
 >>>>> matter, why is it an error at all? Shouldn't the test case run  
 >>>>> after
 >>>>> the init?
 >>>> In Java there should be no undefined values at runtime, as  
 >>>> everything
 >>>> is auto initialized (often to null), so we don't want a runtime
 >>>> error. The teaching languages (if I recalled correctly) will not be
 >>>> relying on default initializations and be requiring students to set
 >>>> the values of their fields (sometimes to null, when mutation is
 >>>> introduced).
 >>>> So in the program above, the default init has evaluated before the
 >>>> usage of x but the constructor hasn't; so the teaching languages  
 >>>> will
 >>>> treat this as uninitialized.
 >>>>
 >>>> -Kathy
 >>>>
 >>
 >>
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 13:50:41 -0400

 On Sep 11, 2007, at 10:45 AM, Kathy Gray wrote:
 
 >
 > On Sep 11, 2007, at 3:18 PM, Robby Findler wrote:
 >
 >> I misunderstood the example: I missed the "boolean test =" part and
 >> Matthias clarified on the phone.
 >>
 >> I'm not sure, however, how this can be a compile/type-checking time
 >> check, tho. Shouldn't it be a runtime test, (ie when you look up  
 >> "x")?
 >
 > Your insistence has made me recall some problems in identifying the  
 > situations.
 >
 > In two situations, it's not a simple matter of book keeping to  
 > identify the usage of uninitialized fields.
 >
 > The first uses this.method() within a field initialization. It's  
 > not feasible to check such uses statically.
 >
 > The second uses 'this' on its own within the field initialization,  
 > either as the argument to an external method or as the body itself.
 >
 > I seem to recall that we had earlier discussed removing the second  
 > usage already, for reasons relating to this style of problem and  
 > cyclic references that we didn't want to explain to students yet.
 >
 > We can avoid the first complication by forbidding this.method()  
 > calls in this position; if we don't want to forbid this than I  
 > think we do have to admit the possibility of the student accessing  
 > a default-initialized field within their method (even if the  
 > constructor initializes it, since the fields evaluate first). I  
 > don't think that it's a good idea to switch to a runtime error, as  
 > that's a large departure from Java semantics.
 
 
 Yes, I think we should forbid both kinds of expressions.
 No, I don't think we should add run-time checks.
 
 -- Matthias
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 >
 > -Kathy
 >
 >>
 >> On 9/11/07, Kathy Gray <kathyg@cs.utah.edu> wrote:
 >>>
 >>> On Sep 11, 2007, at 2:35 PM, Robby Findler wrote:
 >>>
 >>>> On 9/11/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 >>>>> Kathy, this is an entry into the bug database just so
 >>>>> we don't forget this stuff. I would like the following
 >>>>> program to succeed in ADVANCED only. For all lower language
 >>>>> levels, it should fail with a "access to undefined field"
 >>>>> syntax error or something like that. (It is of course
 >>>>> more of a type error than a syntax errror.)
 >>>>>
 >>>>> class StrangeExample {
 >>>>>  int x;
 >>>>>  StrangeExample() { this.x = 100; }
 >>>>>  boolean test = check this.x expect 100;
 >>>>> }
 >>>>
 >>>
 >>> To clarify, we want to forbid all programs (in Beginner to
 >>> Intermediate++) from accessing uninitialized fields in the  
 >>> subsequent
 >>> field specifications? And so the error message for this should be
 >>> along the lines of 'Illegal use of x before it's initialized in
 >>> check'? (Type error, not syntax error)
 >>>
 >>>
 >>>> How is this a syntax/type error and not a runtime error? Or, for  
 >>>> that
 >>>> matter, why is it an error at all? Shouldn't the test case run  
 >>>> after
 >>>> the init?
 >>> In Java there should be no undefined values at runtime, as  
 >>> everything
 >>> is auto initialized (often to null), so we don't want a runtime
 >>> error. The teaching languages (if I recalled correctly) will not be
 >>> relying on default initializations and be requiring students to set
 >>> the values of their fields (sometimes to null, when mutation is
 >>> introduced).
 >>> So in the program above, the default init has evaluated before the
 >>> usage of x but the constructor hasn't; so the teaching languages  
 >>> will
 >>> treat this as uninitialized.
 >>>
 >>> -Kathy
 >>>
 >
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: "Kathy Gray" <kathyg@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 13:09:16 -0500

 Well, here are some example expressions to add to the test suite, then:
 // ex 1
 class C {
   int x;
   int y;
   C() { x = y+1; y=2; }
 }
 
 // ex 2
 class C {
   int x;
   void m() { x=x+1; }
   C(){this.m();}
 }
 
 // ex 3
 class C {
   int x;
   void m() { x=x+1; }
   C(){}
 }
 new C().m();
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Kathy Gray" <kathyg@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8921: semantics of fields in ProfessorJ
Date: Tue, 11 Sep 2007 14:10:49 -0400

 Most of these are illegal in Beginner and Intermediate already but  
 thanks !
 
 On Sep 11, 2007, at 2:09 PM, Robby Findler wrote:
 
 > Well, here are some example expressions to add to the test suite,  
 > then:
 > // ex 1
 > class C {
 >   int x;
 >   int y;
 >   C() { x = y+1; y=2; }
 > }
 >
 > // ex 2
 > class C {
 >   int x;
 >   void m() { x=x+1; }
 >   C(){this.m();}
 > }
 >
 > // ex 3
 > class C {
 >   int x;
 >   void m() { x=x+1; }
 >   C(){}
 > }
 > new C().m();
 


State changed from "open" to "closed" by eli at Tue, 06 Dec 2011 14:11:24 -0500
Reason>>> ProfessorJ is no longer distributed with Racket.

