From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Oct 26 12:38:43 2007
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.168])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l9QGcgh0014421
	for <bugs@bugs.plt-scheme.org>; Fri, 26 Oct 2007 12:38:43 -0400
Message-Id: <200710261638.l9QGccxn014416@champlain.ccs.neu.edu>
Date: Fri, 26 Oct 2007 12:38:38 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: professorJ is in infinite loop for syntax error

>Number:         9021
>Category:       profj
>Synopsis:       professorJ is in infinite loop for syntax error
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Oct 26 12:40:01 -0400 2007
>Closed-Date:    Tue Dec 06 14:11:44 -0500 2011
>Last-Modified:  Tue Dec 06 14:11:44 -0500 2011
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        371.3-svn15oct2007
>Environment:
macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1: Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "gui" "guide" "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web-server-guide" "web-server-reference" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
Human Language: english
(current-memory-use) 138180184

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/371.3/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery"!
  "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
run program below in Advanced. if i find the problem, i'll follow up
>How-To-Repeat:
// QUICK SORT FOR LISTS OF ICOMP OBJECTS 

// -----------------------------------------------------------------------------
// comparable objects 

interface IComp {
  // is this object less than o? 
  boolean lessThan(Object o); 
}

// -----------------------------------------------------------------------------
// a list of IComp objects for use in several abstractions 

interface IList { 
  // sort this list 
  IList sort(); 

  // add l to the end od this list 
  IList append(IList l); 

  // filter out all elements e from this list for which e.lessThan(o) is true 
  IList partitionLess(IComp o); 

  // filter out all elements e from this list for which o.lessThan(e) is true 
  IList partitionGreater(IComp o); 

    // is this list empty? 
    boolean isEmpty();
    
    // add lst as the last object to this list (unless empty)
    // effect: modify the first rest field that contains Mt
    void addAtEnd(IComp lst); 

    // what is the first item on this list?
    IComp first(); 

    // what is the rest of this list?
    IList rest(); 

    // how long is this list? 
    int length(); 
}

class Mt implements IList { 
  Mt() {} 
  
  public IList append(IList l) {
    return l; 
  }

  public IList sort() { 
    return this; 
  }
  
  public IList partitionLess(IComp o) { 
    return this; 
  }

  public IList partitionGreater(IComp o) { 
    return this; 
  }

  public boolean isEmpty() {
    return true; 
  }

  public void addAtEnd(IComp lst) {
    String msg = "it is impossible to add an item to the end of an empty list";
    // throw new RuntimeException(msg); 
    Util.error(msg);
  }

  public IComp first() {
    String msg = "it is impossible to take the first item from an empty list";
    // throw new RuntimeException(msg);
    return Util.error(msg);
  }

  public IList rest() {
    String msg = "it is impossible to take the rest of an empty list";
    // throw new RuntimeException(msg);
    return Util.error(msg);
  }

  public int length() {
    return 0; 
  }
}

class Cons implements IList {
  IComp first; 
  IList rest; 
  
  Cons(IComp first, IList rest) { 
    this. first = first; 
    this. rest = rest; 
  }
  
  public IList append(IList l) {
    return new Cons(first,rest.append(l)); 
  }
  
  public IList sort() {
    IList firstHalf = rest.partitionLess(first); 
    IList secondHalf = rest.partitionGreater(first); 
    return firstHalf.append(new Cons(first,secondHalf));
  }
  
  public IList partitionLess(IComp o) { 
    if (first.lessThan(o)) {
      return new Cons(first,rest.partitionLess(IComp o)); }
    else {
      return new Cons(o,this); }
  }

  public IList partitionGreater(IComp o) { 
    if (o.lessThan(first)) {
      return new Cons(first,rest.partitionLess(IComp o)); }
    else {
      return new Cons(o,this); }
  }

  public boolean isEmpty() {
    return false; 
  }
  
  public void addAtEnd(IComp lst) {
    if (rest instanceof Mt) {
      rest = new Cons(lst,rest); }
      else {
        rest.addAtEnd(lst); }
  }
      
  public IComp first() {
    return first; 
  }
      
  public IList rest() {
    return rest; 
  }
      
  public int length() {
    return 1 + rest.length(); 
  }
}


//                                                        
//                                                        
//******                               **                 
// *   *                                *                 
// * *   **  **   ***  *** *  ** **     *     ***    **** 
// ***    *  *   *   *  * * *  **  *    *    *   *  *   * 
// * *     **     ****  * * *  *   *    *    *****   ***  
// *       **    *   *  * * *  *   *    *    *          * 
// *   *  *  *   *   *  * * *  *   *    *    *      *   * 
//****** **  **   ************ ****   *****   ****  ****  
//                             *                          
//                            ***                         
//                                                        
// 

class Int implements IComp {
  int value; 
  Int(int value) { 
    this.value = value; 
  }
  public boolean lessThan(Object other) {
    Int o; 
    if (!(other instanceof Int)) {
      return false; }
    o = (Int)other; 
    return value < o.value; 
  }    
}

class Examples {
  IComp zro = new Int(0); 
  IComp one = new Int(1);
  IComp two = new Int(2); 
  
  IList mt = new Mt(); 
  IList llplain  = new Cons(two,new Cons(zro,new Cons(one,mt)));
  IList llsorted = new Cons(zro,new Cons(one,new Cons(two,mt))); 
  
  boolean test1 = check mt.sort() expect mt; 
  
  boolean test = check llplain.sort() expect llsorted;
  
}
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9021: professorJ is in infinite loop for syntax error
Date: Fri, 26 Oct 2007 12:47:47 -0400

 On Oct 26, 2007, at 12:40 PM, matthias@ccs.neu.edu wrote:
 
 > class Cons implements IList {
 >   IComp first;
 >   IList rest;
 >
 >   Cons(IComp first, IList rest) {
 >     this. first = first;
 >     this. rest = rest;
 >   }
 >
 >   public IList partitionLess(IComp o) {
 >     if (first.lessThan(o)) {
 >       return new Cons(first,rest.partitionLess(IComp o)); }
 
 The problem is here. To avoid retyping p...ss I had copied and pasted  
 the method header w/o cutting the parameter type.
 
 Your parser hangs on such an error. -- Matthias
 
From: John Clements <clements@brinckerhoff.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9021: professorJ is in infinite loop for syntax error
Date: Fri, 26 Oct 2007 09:53:54 -0700

 On Oct 26, 2007, at 9:47 AM, Matthias Felleisen wrote:
 
 >
 > On Oct 26, 2007, at 12:40 PM, matthias@ccs.neu.edu wrote:
 >
 >> class Cons implements IList {
 >>   IComp first;
 >>   IList rest;
 >>
 >>   Cons(IComp first, IList rest) {
 >>     this. first = first;
 >>     this. rest = rest;
 >>   }
 >>
 >>   public IList partitionLess(IComp o) {
 >>     if (first.lessThan(o)) {
 >>       return new Cons(first,rest.partitionLess(IComp o)); }
 >
 > The problem is here. To avoid retyping p...ss I had copied and  
 > pasted the method header w/o cutting the parameter type.
 >
 > Your parser hangs on such an error. -- Matthias
 
 You got there just a minute before I did.  I've been doing this with  
 students all year, and I have lots of experience with this.  Here are  
 my handy-dandy hints for solving this category of problem:
 
 1) Mismatched parens almost always cause a hang, so check for these  
 first.
 2) The examples class is the next most likely culprit, try commenting  
 it out next.
 3) After this, you're on your own; comment out things until the error  
 goes away.
 
 An interesting addendum to this is that it appears to me that the  
 error is in reporting the bug, not in finding it; I make this guess  
 because my experience is that calling the "compile" function directly  
 from scheme code with a string does not loop.
 
 John Clements
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9021: professorJ is in infinite loop for syntax error
Date: Fri, 26 Oct 2007 13:00:32 -0400

 It saddens me to no end that I know all this ... I get suckered into  
 using ProfessorJ once in a while because I do like the Example stuff.  
 But perhaps I should just break down and use Eclipse and jUnit for good.
 
 
 On Oct 26, 2007, at 12:53 PM, John Clements wrote:
 
 >
 > On Oct 26, 2007, at 9:47 AM, Matthias Felleisen wrote:
 >
 >>
 >> On Oct 26, 2007, at 12:40 PM, matthias@ccs.neu.edu wrote:
 >>
 >>> class Cons implements IList {
 >>>   IComp first;
 >>>   IList rest;
 >>>
 >>>   Cons(IComp first, IList rest) {
 >>>     this. first = first;
 >>>     this. rest = rest;
 >>>   }
 >>>
 >>>   public IList partitionLess(IComp o) {
 >>>     if (first.lessThan(o)) {
 >>>       return new Cons(first,rest.partitionLess(IComp o)); }
 >>
 >> The problem is here. To avoid retyping p...ss I had copied and  
 >> pasted the method header w/o cutting the parameter type.
 >>
 >> Your parser hangs on such an error. -- Matthias
 >
 > You got there just a minute before I did.  I've been doing this  
 > with students all year, and I have lots of experience with this.   
 > Here are my handy-dandy hints for solving this category of problem:
 >
 > 1) Mismatched parens almost always cause a hang, so check for these  
 > first.
 > 2) The examples class is the next most likely culprit, try  
 > commenting it out next.
 > 3) After this, you're on your own; comment out things until the  
 > error goes away.
 >
 > An interesting addendum to this is that it appears to me that the  
 > error is in reporting the bug, not in finding it; I make this guess  
 > because my experience is that calling the "compile" function  
 > directly from scheme code with a string does not loop.
 >
 > John Clements
 >
 
From: John Clements <clements@brinckerhoff.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9021: professorJ is in infinite loop for syntax error
Date: Fri, 26 Oct 2007 10:25:08 -0700

 On Oct 26, 2007, at 10:00 AM, Matthias Felleisen wrote:
 
 >
 > It saddens me to no end that I know all this ... I get suckered  
 > into using ProfessorJ once in a while because I do like the Example  
 > stuff. But perhaps I should just break down and use Eclipse and  
 > jUnit for good.
 
 JUnit without extensional testing is on the other side of the "too  
 hard" hill. Asking the students to write all those darn constructors  
 is hard enough, but requiring them to write equals methods as well is  
 the straw that breaks the camel's back. I know this: I'm dragging my  
 students through the transition to eclipse right now.
 
 The hardest thing about this is that the (rational) conclusions drawn  
 by the students are this:
 1) testing is time-consuming and complex, and half the time I'm  
 finding bugs in my equals methods, rather than in the thing I'm testing.
 2) Classes are big and heavy, and I should try to design my program  
 so that it contains as few classes as possible.
 
 The other huge, huge difference/problem is the way that eclipse  
 displays failed test cases:
 
 expected <Cons:0x3243ab3a>, got <Cons:0x24af3432>
 
 
 John Clements
 
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9021: professorJ is in infinite loop for syntax error
Date: Fri, 26 Oct 2007 23:17:11 +0100

 This one isn't infinite; it's slow, but it does terminate.
 -Kathy
 
 
 On Oct 26, 2007, at 5:47 PM, Matthias Felleisen wrote:
 
 >
 > On Oct 26, 2007, at 12:40 PM, matthias@ccs.neu.edu wrote:
 >
 >> class Cons implements IList {
 >>   IComp first;
 >>   IList rest;
 >>
 >>   Cons(IComp first, IList rest) {
 >>     this. first = first;
 >>     this. rest = rest;
 >>   }
 >>
 >>   public IList partitionLess(IComp o) {
 >>     if (first.lessThan(o)) {
 >>       return new Cons(first,rest.partitionLess(IComp o)); }
 >
 > The problem is here. To avoid retyping p...ss I had copied and  
 > pasted the method header w/o cutting the parameter type.
 >
 > Your parser hangs on such an error. -- Matthias
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9021: professorJ is in infinite loop for syntax error
Date: Fri, 26 Oct 2007 18:44:58 -0400

 My 2Mb 3 month old machine takes more than a minute. For my age, this  
 infinite. I could be dead by the time it returns. -- Matthias :-) and  
 also see Daniel Leivant's work on LC
 
 
 
 On Oct 26, 2007, at 6:17 PM, Kathy Gray wrote:
 
 > This one isn't infinite; it's slow, but it does terminate.
 > -Kathy
 >
 >
 > On Oct 26, 2007, at 5:47 PM, Matthias Felleisen wrote:
 >
 >>
 >> On Oct 26, 2007, at 12:40 PM, matthias@ccs.neu.edu wrote:
 >>
 >>> class Cons implements IList {
 >>>   IComp first;
 >>>   IList rest;
 >>>
 >>>   Cons(IComp first, IList rest) {
 >>>     this. first = first;
 >>>     this. rest = rest;
 >>>   }
 >>>
 >>>   public IList partitionLess(IComp o) {
 >>>     if (first.lessThan(o)) {
 >>>       return new Cons(first,rest.partitionLess(IComp o)); }
 >>
 >> The problem is here. To avoid retyping p...ss I had copied and  
 >> pasted the method header w/o cutting the parameter type.
 >>
 >> Your parser hangs on such an error. -- Matthias
 >
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9021: professorJ is in infinite loop for syntax error
Date: Sat, 27 Oct 2007 00:12:51 +0100

 My 1Gig 2.5 year old machine takes less than a minute; I guess they  
 don't make machines like they used to.
 
 The speed issue is very likely orthogonal to whatever is making the  
 lazy parser diverge so often; however, moving to a fully strict  
 implementation may improve both, but I haven't had the opportunity to  
 do this yet.
 
 -Kathy
 
 
 On Oct 26, 2007, at 11:44 PM, Matthias Felleisen wrote:
 
 > My 2Mb 3 month old machine takes more than a minute. For my age,  
 > this infinite. I could be dead by the time it returns. --  
 > Matthias :-) and also see Daniel Leivant's work on LC
 >
 >
 >
 > On Oct 26, 2007, at 6:17 PM, Kathy Gray wrote:
 >
 >> This one isn't infinite; it's slow, but it does terminate.
 >> -Kathy
 >>
 >>
 >> On Oct 26, 2007, at 5:47 PM, Matthias Felleisen wrote:
 >>
 >>>
 >>> On Oct 26, 2007, at 12:40 PM, matthias@ccs.neu.edu wrote:
 >>>
 >>>> class Cons implements IList {
 >>>>   IComp first;
 >>>>   IList rest;
 >>>>
 >>>>   Cons(IComp first, IList rest) {
 >>>>     this. first = first;
 >>>>     this. rest = rest;
 >>>>   }
 >>>>
 >>>>   public IList partitionLess(IComp o) {
 >>>>     if (first.lessThan(o)) {
 >>>>       return new Cons(first,rest.partitionLess(IComp o)); }
 >>>
 >>> The problem is here. To avoid retyping p...ss I had copied and  
 >>> pasted the method header w/o cutting the parameter type.
 >>>
 >>> Your parser hangs on such an error. -- Matthias
 >>
 


State changed from "open" to "closed" by eli at Tue, 06 Dec 2011 14:11:44 -0500
Reason>>> ProfessorJ is no longer distributed with Racket.

