From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jul  6 22:36:50 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.237])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l672ao3K030525
	for <bugs@bugs.plt-scheme.org>; Fri, 6 Jul 2007 22:36:50 -0400
Message-Id: <200707070236.l672ajoJ030520@champlain.ccs.neu.edu>
Date: Fri, 6 Jul 2007 22:36:45 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: professorJ internal error when class used as variable name

>Number:         8795
>Category:       profj
>Synopsis:       professorJ internal error when class used as variable name
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jul 06 22:40:01 -0400 2007
>Closed-Date:    Thu Aug 02 10:59:22 -0400 2007
>Last-Modified:  Thu Aug 02 10:59:22 -0400 2007
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        370.4-svn6jul2007
>Environment:
macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1: Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide" "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web-server-guide" "web-server-reference" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
Human Language: english
(current-memory-use) 308089980

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/370.4/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests!
 " "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Beginner") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
Welcome to DrScheme, version 370.4-svn6jul2007 [3m].
Language: ProfessorJ: Beginner.
procedure application: expected procedure, given: #<struct:promise>; arguments were: (#<struct:promise> . #<struct:promise>) (229 27 6378 1)
> 
>How-To-Repeat:
I tried to produce a small example but couldn't do so in 
30 minutes of searching for the bug in the first place. 

I am attaching the whole file with a mark (see MF) where you can "turn off" the error. 

/*
                     +-------------+                     
                     | IExpression |                     
                     +-------------+                     
                     +-------------+                     
                            |                            
                           / \                           
                           ---                           
                            |                            
        ---------------------------------------          
        |                 |                   |          
  +---------------+    +-------------+    +---------------+  
  | IntegerConst  |    | Name        |    | Construction  |  
  +---------------+    +-------------+    +---------------+  
  | int value     |    | String name |    | Class cls     |  
  +---------------+    +-------------+    | IListExp args |  
                                          +---------------+  
                                                         
  also added: StringConst 

*/

// representing Java expressions in Beginner
interface IExpression {
 // what is the type of this expression in the given type context and signatures?
 IType type(IContext vl, ISignatures s);
}

// constants
class StringConst implements IExpression {
  String value;

  StringConst(String value) {
    this.value = value;
  }

  IType type(IContext vl, ISignatures s) {
    return new StringType();
  }
}

class IntegerConst implements IExpression {
  int value;

  IntegerConst(int value) {
    this.value = value;
  }

  IType type(IContext vl, ISignatures s) {
    return new IntegerType();
  }
}

// field names
class Name implements IExpression {
  String name;

  Name(String name) {
    this.name = name;
  }

  IType type(IContext vl, ISignatures s) {
    return new IntegerType() /* vl.lookup(this.name) */;
  }
}

// object construction
class Construction implements IExpression {
  Class cls;
  IListExp args;

  Construction(Class cls, IListExp args) {
    this.cls = cls;
    this.args = args;
  }

  IType type(IContext vl, ISignatures s) {
    return new IntegerType();
  }
}

/*
           +----------+               
           | IListExp |<-------------+
           +----------+              |
           +----------+              |
                 |                   |
                / \                  |
                ---                  |
                 |                   |
     -------------------             |
     |                 |             |
  +------+    +-----------------+    |
  | None |    | ConsExp         |    |
  +------+    +-----------------+    |
  +------+    | IExpression fst |    |
              | IListExp rst    |-+  |
              +-----------------+ |  |
                                  |  |
                                  +--+

*/

/* -------------------------------------------------------------------------- */

// sequence of expressions
interface IListExp {}

// none
class None implements IListExp {
  None() {}
}

// one more
class ConsExp implements IListExp {
  IExpression fst;
  IListExp rst;

  ConsExp(IExpression fst, IListExp rst) {
    this.fst = fst;
    this.rst = rst;
  }
}

// -----------------------------------------------------------------------------

/*
                                    +-------+                                     
                                    | IType |                                     
                                    +-------+                                     
                                    +-------+                                     
                                        |                                         
                                       / \                                        
                                       ---                                        
                                        |                                         
          ---------------------------------------------------------------         
          |                     |                    |                  |         
  +----------------+    +----------------+    +-------------+    +-------------+  
  | IntegerType    |    | StringType     |    | Class       |    | Interface   |  
  +----------------+    +----------------+    +-------------+    +-------------+  
  | String printAs |    | String printAs |    | String name |    | String name |  
  +----------------+    +----------------+    +-------------+    +-------------+  
                                                                                  
                                                                                  

*/

// representing types 
interface IType {
}

// type of integers
class IntegerType implements IType {
  String printAs = "int";
  IntegerType() { }
}

// String type
class StringType implements IType {
  String printAs = "String";
  StringType() {}
}

// class type
class Class implements IType {
  String name;

  Class(String name) {
    this.name = name;
  }
}

// interface type
class Interface implements IType {
  String name;

  Interface(String name) {
    this.name = name;
  }
}


/*
            +----------+                
            | IContext |<--------------+
            +----------+               |
            +----------+               |
                  |                    |
                 / \                   |
                 ---                   |
                  |                    |
        -------------------            |
        |                 |            |
  +-----------+    +--------------+    |
  | MTContext |    | ConsConx     |    |
  +-----------+    +--------------+    |
  +-----------+    | Association f|    |
                   | IContext rst |----+
                   +--------------+
*/

// representing type environments 
interface IContext {
  // what is the type of name in this type context? 
  IType lookup(String name); 
}

// no entries in type env
class MTContext implements IContext {

  MTContext() {}

  IType lookup(String name) { 
    return Util.error("");
  }
}

// one more
class ConsConx implements IContext {
  Association fst;
  IContext rst;

  ConsConx(Association fst, IContext rst) {
    this.fst = fst;
    this.rst = rst;
  }

  IType lookup(String n) { 
    if (this.fst.defines(n))
      return this.fst.type;
    else 
      return this.rst.lookup(n);
  }
}

// an association in a type context
class Association {
  String name;
  IType type;

  Association(String name, IType type) {
    this.name = name;
    this.type = type;
  }

  // is this.name the given name? 
  boolean defines(String name) { 
    return this.name.equals(name);
  }

}

/*
                           +--------------------------------------------+                              
                           | ISignatures                                |<----------------------------+
                           +--------------------------------------------+                             |
                           +--------------------------------------------+                             |
                           | Signature lookup(className x,methodName y) |                             |
                           +--------------------------------------------+                             |
                                                 |                                                    |
                                                / \                                                   |
                                                ---                                                   |
                                                 |                                                    |
                        ---------------------------------------------------                           |
                        |                                                 |                           |
  +--------------------------------------------+    +--------------------------------------------+    |
  | MTSig                                      |    | ConsSig                                    |    |
  +--------------------------------------------+    +--------------------------------------------+    |
  +--------------------------------------------+    | Signature fst                              |    |
  | Signature lookup(className x,methodName y) |    | ISignatures rst                            |-+  |
  +--------------------------------------------+    +--------------------------------------------+ |  |
                                                    | Signature lookup(className x,methodName y) | |  |
                                                    +--------------------------------------------+ |  |
                                                                                                   |  |
                                                                                                   +--+

*/

// the context of type signatures
interface ISignatures {
  // what is the signature of the given method in the given class in this 
  // list of signatures? 
//  Signature lookup(Class class, String methodName);
}

class MTSig implements ISignatures {
  MTSig() { }

  Signature lookup(Class class,String methodName) {
    return Util.error("");
  }
}

/*
class ConsSig implements ISignatures {
  Signature fst;
  ISignatures rst;

  ConsSig(Signature fst, ISignatures rst) {
    this.fst = fst;
    this.rst = rst;
  }

  Signature lookup(Class x,String methodName) {
    if (this.fst.defines(x,y)) 
	   return this.fst.signature;
    else 
 	   return this.rst.lookup(x,y);
  }
}
// a method signature, relative to a class
class Signature {
  Class class;
  String name;
  ITypes domain;

  Signature(Class class, String name, ITypes domain) {
    this.class = class;
    this.name = name;
    this.domain = domain;
  }
  // is this.name the given name? 
  boolean defines(Class className, String methodName) { 
    return this.methodName.equals(methodName) 
        && this.class.name.equals(className);
  }
}
*/

// interface ITypes {} 



/* -----------------------------------------------------------------------------
   translate this class into the date representation (as well as possible):
   class Book { 
    String author; 
    int sold; 
    Book(String author, int sold) {
     this.author = author; 
     this.sold = sold; 
    }
   }
*/

class ClassExample {
 Class book = new Class("Book");
 ClassExample() { }
}

/* -----------------------------------------------------------------------------
   translate this expression into your representation:
   new Book("Felleisen","How to Design Programs")
*/ 

class ExpressionExample {
 ClassExample ce = new ClassExample(); 
 Class book = this.ce.book;

 IExpression author = new StringConst("Felleisen");
 IExpression sold = new IntegerConst(10);
 IListExp mt = new None(); 
 IListExp one = new ConsExp(this.sold,this.mt); 
 IListExp two = new ConsExp(this.author,this.one);
 IExpression c = new Construction(this.book,this.two);

 ExpressionExample() { }
}
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: Kathy  Gray <kathyg@cs.utah.edu>, Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8795: professorJ internal error when class used as variable name
Date: Fri, 6 Jul 2007 22:45:05 -0400

 Kathy, I am getting the feeling that the new parser isn't well  
 tested. -- Matthias
 
 P.S. Here is the real program.
 
 /*
                       +-------------+
                       | IExpression |
                       +-------------+
                       +-------------+
                              |
                             / \
                             ---
                              |
          ---------------------------------------
          |                 |                   |
    +---------------+    +-------------+    +---------------+
    | IntegerConst  |    | Name        |    | Construction  |
    +---------------+    +-------------+    +---------------+
    | int value     |    | String name |    | Class cls     |
    +---------------+    +-------------+    | IListExp args |
                                            +---------------+
 
    also added: StringConst
 
 */
 
 // representing Java expressions in Beginner
 interface IExpression {
 // what is the type of this expression in the given type context and  
 signatures?
 IType type(IContext vl, ISignatures s);
 }
 
 // constants
 class StringConst implements IExpression {
    String value;
 
    StringConst(String value) {
      this.value = value;
    }
 
    IType type(IContext vl, ISignatures s) {
      return new StringType();
    }
 }
 
 class IntegerConst implements IExpression {
    int value;
 
    IntegerConst(int value) {
      this.value = value;
    }
 
    IType type(IContext vl, ISignatures s) {
      return new IntegerType();
    }
 }
 
 // field names
 class Name implements IExpression {
    String name;
 
    Name(String name) {
      this.name = name;
    }
 
    IType type(IContext vl, ISignatures s) {
      return new IntegerType() /* vl.lookup(this.name) */;
    }
 }
 
 // object construction
 class Construction implements IExpression {
    Class cls;
    IListExp args;
 
    Construction(Class cls, IListExp args) {
      this.cls = cls;
      this.args = args;
    }
 
    IType type(IContext vl, ISignatures s) {
      return new IntegerType();
    }
 }
 
 /*
             +----------+
             | IListExp |<-------------+
             +----------+              |
             +----------+              |
                   |                   |
                  / \                  |
                  ---                  |
                   |                   |
       -------------------             |
       |                 |             |
    +------+    +-----------------+    |
    | None |    | ConsExp         |    |
    +------+    +-----------------+    |
    +------+    | IExpression fst |    |
                | IListExp rst    |-+  |
                +-----------------+ |  |
                                    |  |
                                    +--+
 
 */
 
 /*  
 ------------------------------------------------------------------------ 
 -- */
 
 // sequence of expressions
 interface IListExp {}
 
 // none
 class None implements IListExp {
    None() {}
 }
 
 // one more
 class ConsExp implements IListExp {
    IExpression fst;
    IListExp rst;
 
    ConsExp(IExpression fst, IListExp rst) {
      this.fst = fst;
      this.rst = rst;
    }
 }
 
 //  
 ------------------------------------------------------------------------ 
 -----
 
 /*
                                      +-------+
                                      | IType |
                                      +-------+
                                      +-------+
                                          |
                                         / \
                                         ---
                                          |
             
 ---------------------------------------------------------------
            |                     |                     
 |                  |
    +----------------+    +----------------+    +-------------+     
 +-------------+
    | IntegerType    |    | StringType     |    | Class       |    |  
 Interface   |
    +----------------+    +----------------+    +-------------+     
 +-------------+
    | String printAs |    | String printAs |    | String name |    |  
 String name |
    +----------------+    +----------------+    +-------------+     
 +-------------+
 
 
 
 */
 
 // representing types
 interface IType {
 }
 
 // type of integers
 class IntegerType implements IType {
    String printAs = "int";
    IntegerType() { }
 }
 
 // String type
 class StringType implements IType {
    String printAs = "String";
    StringType() {}
 }
 
 // class type
 class Class implements IType {
    String name;
 
    Class(String name) {
      this.name = name;
    }
 }
 
 // interface type
 class Interface implements IType {
    String name;
 
    Interface(String name) {
      this.name = name;
    }
 }
 
 
 /*
              +----------+
              | IContext |<--------------+
              +----------+               |
              +----------+               |
                    |                    |
                   / \                   |
                   ---                   |
                    |                    |
          -------------------            |
          |                 |            |
    +-----------+    +--------------+    |
    | MTContext |    | ConsConx     |    |
    +-----------+    +--------------+    |
    +-----------+    | Association f|    |
                     | IContext rst |----+
                     +--------------+
 */
 
 // representing type environments
 interface IContext {
    // what is the type of name in this type context?
    IType lookup(String name);
 }
 
 // no entries in type env
 class MTContext implements IContext {
 
    MTContext() {}
 
    IType lookup(String name) {
      return Util.error("");
    }
 }
 
 // one more
 class ConsConx implements IContext {
    Association fst;
    IContext rst;
 
    ConsConx(Association fst, IContext rst) {
      this.fst = fst;
      this.rst = rst;
    }
 
    IType lookup(String n) {
      if (this.fst.defines(n))
        return this.fst.type;
      else
        return this.rst.lookup(n);
    }
 }
 
 // an association in a type context
 class Association {
    String name;
    IType type;
 
    Association(String name, IType type) {
      this.name = name;
      this.type = type;
    }
 
    // is this.name the given name?
    boolean defines(String name) {
      return this.name.equals(name);
    }
 
 }
 
 /*
                              
 +--------------------------------------------+
                             |  
 ISignatures                                | 
 <----------------------------+
                              
 +-------------------------------------------- 
 +                             |
                              
 +-------------------------------------------- 
 +                             |
                             | Signature lookup(className x,methodName  
 y) |                             |
                              
 +-------------------------------------------- 
 +                             |
                                                    
 |                                                    |
                                                  /  
 \                                                   |
                                                   
 ---                                                   |
                                                    
 |                                                    |
                           
 ---------------------------------------------------                      
        |
                           
 |                                                  
 |                           |
    +--------------------------------------------+     
 +--------------------------------------------+    |
    | MTSig                                      |    |  
 ConsSig                                    |    |
    +--------------------------------------------+     
 +--------------------------------------------+    |
    +--------------------------------------------+    | Signature  
 fst                              |    |
    | Signature lookup(className x,methodName y) |    | ISignatures  
 rst                            |-+  |
    +--------------------------------------------+     
 +--------------------------------------------+ |  |
                                                      | Signature  
 lookup(className x,methodName y) | |  |
                                                       
 +--------------------------------------------+ |  |
                                                                          
                              |  |
                                                                          
                              +--+
 
 */
 
 // the context of type signatures
 interface ISignatures {
    // what is the signature of the given method in the given class in  
 this
    // list of signatures?
 //  Signature lookup(Class class, String methodName);
 }
 
 class MTSig implements ISignatures {
    MTSig() { }
 
    // MF: change this class into c, and you suddently get a  
 reasonable error message
    Signature lookup(Class class,String methodName) {
      return Util.error("");
    }
 }
 
 /*
 class ConsSig implements ISignatures {
    Signature fst;
    ISignatures rst;
 
    ConsSig(Signature fst, ISignatures rst) {
      this.fst = fst;
      this.rst = rst;
    }
 
    Signature lookup(Class x,String methodName) {
      if (this.fst.defines(x,y))
 	   return this.fst.signature;
      else
 	   return this.rst.lookup(x,y);
    }
 }
 // a method signature, relative to a class
 class Signature {
    Class class;
    String name;
    ITypes domain;
 
    Signature(Class class, String name, ITypes domain) {
      this.class = class;
      this.name = name;
      this.domain = domain;
    }
    // is this.name the given name?
    boolean defines(Class className, String methodName) {
      return this.methodName.equals(methodName)
          && this.class.name.equals(className);
    }
 }
 */
 
 // interface ITypes {}
 
 
 
 /*  
 ------------------------------------------------------------------------ 
 -----
     translate this class into the date representation (as well as  
 possible):
     class Book {
      String author;
      int sold;
      Book(String author, int sold) {
       this.author = author;
       this.sold = sold;
      }
     }
 */
 
 class ClassExample {
 Class book = new Class("Book");
 ClassExample() { }
 }
 
 /*  
 ------------------------------------------------------------------------ 
 -----
     translate this expression into your representation:
     new Book("Felleisen","How to Design Programs")
 */
 
 class ExpressionExample {
 ClassExample ce = new ClassExample();
 Class book = this.ce.book;
 
 IExpression author = new StringConst("Felleisen");
 IExpression sold = new IntegerConst(10);
 IListExp mt = new None();
 IListExp one = new ConsExp(this.sold,this.mt);
 IListExp two = new ConsExp(this.author,this.one);
 IExpression c = new Construction(this.book,this.two);
 
 ExpressionExample() { }
 }
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, Kathy  Gray <kathyg@cs.utah.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8795: professorJ internal error when class used as variable name
Date: Fri, 6 Jul 2007 22:56:42 -0400

 class ConsType implements ITypes {
    IType fst;
    ITypes rst;
 
    ConsType(IType fst, ITypes rst) {
      this.fst = fst;
      this.rst = rst;
    }
    boolean below(ITypes others) {
      return this.fst.below(((ConsType)others).fst) && this.rst.below 
 (others.rst);
    }
 }
 
 The cast causes a similar error inside of the parser.
 
 
 
 
 On Jul 6, 2007, at 10:45 PM, Matthias Felleisen wrote:
 
 > Kathy, I am getting the feeling that the new parser isn't well  
 > tested. -- Matthias
 >
 > P.S. Here is the real program.
 >
 > /*
 >                      +-------------+
 >                      | IExpression |
 >                      +-------------+
 >                      +-------------+
 >                             |
 >                            / \
 >                            ---
 >                             |
 >         ---------------------------------------
 >         |                 |                   |
 >   +---------------+    +-------------+    +---------------+
 >   | IntegerConst  |    | Name        |    | Construction  |
 >   +---------------+    +-------------+    +---------------+
 >   | int value     |    | String name |    | Class cls     |
 >   +---------------+    +-------------+    | IListExp args |
 >                                           +---------------+
 >
 >   also added: StringConst
 >
 > */
 >
 > // representing Java expressions in Beginner
 > interface IExpression {
 > // what is the type of this expression in the given type context  
 > and signatures?
 > IType type(IContext vl, ISignatures s);
 > }
 >
 > // constants
 > class StringConst implements IExpression {
 >   String value;
 >
 >   StringConst(String value) {
 >     this.value = value;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new StringType();
 >   }
 > }
 >
 > class IntegerConst implements IExpression {
 >   int value;
 >
 >   IntegerConst(int value) {
 >     this.value = value;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType();
 >   }
 > }
 >
 > // field names
 > class Name implements IExpression {
 >   String name;
 >
 >   Name(String name) {
 >     this.name = name;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType() /* vl.lookup(this.name) */;
 >   }
 > }
 >
 > // object construction
 > class Construction implements IExpression {
 >   Class cls;
 >   IListExp args;
 >
 >   Construction(Class cls, IListExp args) {
 >     this.cls = cls;
 >     this.args = args;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType();
 >   }
 > }
 >
 > /*
 >            +----------+
 >            | IListExp |<-------------+
 >            +----------+              |
 >            +----------+              |
 >                  |                   |
 >                 / \                  |
 >                 ---                  |
 >                  |                   |
 >      -------------------             |
 >      |                 |             |
 >   +------+    +-----------------+    |
 >   | None |    | ConsExp         |    |
 >   +------+    +-----------------+    |
 >   +------+    | IExpression fst |    |
 >               | IListExp rst    |-+  |
 >               +-----------------+ |  |
 >                                   |  |
 >                                   +--+
 >
 > */
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > ---- */
 >
 > // sequence of expressions
 > interface IListExp {}
 >
 > // none
 > class None implements IListExp {
 >   None() {}
 > }
 >
 > // one more
 > class ConsExp implements IListExp {
 >   IExpression fst;
 >   IListExp rst;
 >
 >   ConsExp(IExpression fst, IListExp rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 > }
 >
 > //  
 > ---------------------------------------------------------------------- 
 > -------
 >
 > /*
 >                                     +-------+
 >                                     | IType |
 >                                     +-------+
 >                                     +-------+
 >                                         |
 >                                        / \
 >                                        ---
 >                                         |
 >            
 > ---------------------------------------------------------------
 >           |                     |                     
 > |                  |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >   | IntegerType    |    | StringType     |    | Class       |    |  
 > Interface   |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >   | String printAs |    | String printAs |    | String name |    |  
 > String name |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >
 >
 >
 > */
 >
 > // representing types
 > interface IType {
 > }
 >
 > // type of integers
 > class IntegerType implements IType {
 >   String printAs = "int";
 >   IntegerType() { }
 > }
 >
 > // String type
 > class StringType implements IType {
 >   String printAs = "String";
 >   StringType() {}
 > }
 >
 > // class type
 > class Class implements IType {
 >   String name;
 >
 >   Class(String name) {
 >     this.name = name;
 >   }
 > }
 >
 > // interface type
 > class Interface implements IType {
 >   String name;
 >
 >   Interface(String name) {
 >     this.name = name;
 >   }
 > }
 >
 >
 > /*
 >             +----------+
 >             | IContext |<--------------+
 >             +----------+               |
 >             +----------+               |
 >                   |                    |
 >                  / \                   |
 >                  ---                   |
 >                   |                    |
 >         -------------------            |
 >         |                 |            |
 >   +-----------+    +--------------+    |
 >   | MTContext |    | ConsConx     |    |
 >   +-----------+    +--------------+    |
 >   +-----------+    | Association f|    |
 >                    | IContext rst |----+
 >                    +--------------+
 > */
 >
 > // representing type environments
 > interface IContext {
 >   // what is the type of name in this type context?
 >   IType lookup(String name);
 > }
 >
 > // no entries in type env
 > class MTContext implements IContext {
 >
 >   MTContext() {}
 >
 >   IType lookup(String name) {
 >     return Util.error("");
 >   }
 > }
 >
 > // one more
 > class ConsConx implements IContext {
 >   Association fst;
 >   IContext rst;
 >
 >   ConsConx(Association fst, IContext rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 >
 >   IType lookup(String n) {
 >     if (this.fst.defines(n))
 >       return this.fst.type;
 >     else
 >       return this.rst.lookup(n);
 >   }
 > }
 >
 > // an association in a type context
 > class Association {
 >   String name;
 >   IType type;
 >
 >   Association(String name, IType type) {
 >     this.name = name;
 >     this.type = type;
 >   }
 >
 >   // is this.name the given name?
 >   boolean defines(String name) {
 >     return this.name.equals(name);
 >   }
 >
 > }
 >
 > /*
 >                             
 > +--------------------------------------------+
 >                            |  
 > ISignatures                                | 
 > <----------------------------+
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                            | Signature lookup(className  
 > x,methodName y) |                             |
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                                                   
 > |                                                    |
 >                                                 /  
 > \                                                   |
 >                                                  
 > ---                                                   |
 >                                                   
 > |                                                    |
 >                          
 > ---------------------------------------------------                    
 >         |
 >                          
 > |                                                  
 > |                           |
 >   +--------------------------------------------+     
 > +--------------------------------------------+    |
 >   | MTSig                                      |    |  
 > ConsSig                                    |    |
 >   +--------------------------------------------+     
 > +--------------------------------------------+    |
 >   +--------------------------------------------+    | Signature  
 > fst                              |    |
 >   | Signature lookup(className x,methodName y) |    | ISignatures  
 > rst                            |-+  |
 >   +--------------------------------------------+     
 > +--------------------------------------------+ |  |
 >                                                     | Signature  
 > lookup(className x,methodName y) | |  |
 >                                                      
 > +--------------------------------------------+ |  |
 >                                                                        
 >                              |  |
 >                                                                        
 >                              +--+
 >
 > */
 >
 > // the context of type signatures
 > interface ISignatures {
 >   // what is the signature of the given method in the given class  
 > in this
 >   // list of signatures?
 > //  Signature lookup(Class class, String methodName);
 > }
 >
 > class MTSig implements ISignatures {
 >   MTSig() { }
 >
 >   // MF: change this class into c, and you suddently get a  
 > reasonable error message
 >   Signature lookup(Class class,String methodName) {
 >     return Util.error("");
 >   }
 > }
 >
 > /*
 > class ConsSig implements ISignatures {
 >   Signature fst;
 >   ISignatures rst;
 >
 >   ConsSig(Signature fst, ISignatures rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 >
 >   Signature lookup(Class x,String methodName) {
 >     if (this.fst.defines(x,y))
 > 	   return this.fst.signature;
 >     else
 > 	   return this.rst.lookup(x,y);
 >   }
 > }
 > // a method signature, relative to a class
 > class Signature {
 >   Class class;
 >   String name;
 >   ITypes domain;
 >
 >   Signature(Class class, String name, ITypes domain) {
 >     this.class = class;
 >     this.name = name;
 >     this.domain = domain;
 >   }
 >   // is this.name the given name?
 >   boolean defines(Class className, String methodName) {
 >     return this.methodName.equals(methodName)
 >         && this.class.name.equals(className);
 >   }
 > }
 > */
 >
 > // interface ITypes {}
 >
 >
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > -------
 >    translate this class into the date representation (as well as  
 > possible):
 >    class Book {
 >     String author;
 >     int sold;
 >     Book(String author, int sold) {
 >      this.author = author;
 >      this.sold = sold;
 >     }
 >    }
 > */
 >
 > class ClassExample {
 > Class book = new Class("Book");
 > ClassExample() { }
 > }
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > -------
 >    translate this expression into your representation:
 >    new Book("Felleisen","How to Design Programs")
 > */
 >
 > class ExpressionExample {
 > ClassExample ce = new ClassExample();
 > Class book = this.ce.book;
 >
 > IExpression author = new StringConst("Felleisen");
 > IExpression sold = new IntegerConst(10);
 > IListExp mt = new None();
 > IListExp one = new ConsExp(this.sold,this.mt);
 > IListExp two = new ConsExp(this.author,this.one);
 > IExpression c = new Construction(this.book,this.two);
 >
 > ExpressionExample() { }
 > }
 >
 >
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8795: professorJ internal error when class used as variable name
Date: Sat, 7 Jul 2007 10:40:52 +0100

 I don't see the error when I run with my local parser (a slightly  
 different version from the one in svn right now).
 
 I'll be updating later today because of the setup-plt error,  
 hopefully at that point you won't have the bug anymore either.
 
 And yes, the new parser isn't fully tested yet. I am in the process  
 of testing it, but having guinea pigs (who aren't students) poking at  
 the parser also helps discover bugs. I can try to add an option to  
 turn off the new parser and use the old one (except in Intermediate +  
 access) if you need it for places where you're stuck.
 
 -Kathy
 
 
 On Jul 7, 2007, at 3:45 AM, Matthias Felleisen wrote:
 
 > Kathy, I am getting the feeling that the new parser isn't well  
 > tested. -- Matthias
 >
 > P.S. Here is the real program.
 >
 > /*
 >                      +-------------+
 >                      | IExpression |
 >                      +-------------+
 >                      +-------------+
 >                             |
 >                            / \
 >                            ---
 >                             |
 >         ---------------------------------------
 >         |                 |                   |
 >   +---------------+    +-------------+    +---------------+
 >   | IntegerConst  |    | Name        |    | Construction  |
 >   +---------------+    +-------------+    +---------------+
 >   | int value     |    | String name |    | Class cls     |
 >   +---------------+    +-------------+    | IListExp args |
 >                                           +---------------+
 >
 >   also added: StringConst
 >
 > */
 >
 > // representing Java expressions in Beginner
 > interface IExpression {
 > // what is the type of this expression in the given type context  
 > and signatures?
 > IType type(IContext vl, ISignatures s);
 > }
 >
 > // constants
 > class StringConst implements IExpression {
 >   String value;
 >
 >   StringConst(String value) {
 >     this.value = value;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new StringType();
 >   }
 > }
 >
 > class IntegerConst implements IExpression {
 >   int value;
 >
 >   IntegerConst(int value) {
 >     this.value = value;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType();
 >   }
 > }
 >
 > // field names
 > class Name implements IExpression {
 >   String name;
 >
 >   Name(String name) {
 >     this.name = name;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType() /* vl.lookup(this.name) */;
 >   }
 > }
 >
 > // object construction
 > class Construction implements IExpression {
 >   Class cls;
 >   IListExp args;
 >
 >   Construction(Class cls, IListExp args) {
 >     this.cls = cls;
 >     this.args = args;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType();
 >   }
 > }
 >
 > /*
 >            +----------+
 >            | IListExp |<-------------+
 >            +----------+              |
 >            +----------+              |
 >                  |                   |
 >                 / \                  |
 >                 ---                  |
 >                  |                   |
 >      -------------------             |
 >      |                 |             |
 >   +------+    +-----------------+    |
 >   | None |    | ConsExp         |    |
 >   +------+    +-----------------+    |
 >   +------+    | IExpression fst |    |
 >               | IListExp rst    |-+  |
 >               +-----------------+ |  |
 >                                   |  |
 >                                   +--+
 >
 > */
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > ---- */
 >
 > // sequence of expressions
 > interface IListExp {}
 >
 > // none
 > class None implements IListExp {
 >   None() {}
 > }
 >
 > // one more
 > class ConsExp implements IListExp {
 >   IExpression fst;
 >   IListExp rst;
 >
 >   ConsExp(IExpression fst, IListExp rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 > }
 >
 > //  
 > ---------------------------------------------------------------------- 
 > -------
 >
 > /*
 >                                     +-------+
 >                                     | IType |
 >                                     +-------+
 >                                     +-------+
 >                                         |
 >                                        / \
 >                                        ---
 >                                         |
 >            
 > ---------------------------------------------------------------
 >           |                     |                     
 > |                  |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >   | IntegerType    |    | StringType     |    | Class       |    |  
 > Interface   |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >   | String printAs |    | String printAs |    | String name |    |  
 > String name |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >
 >
 >
 > */
 >
 > // representing types
 > interface IType {
 > }
 >
 > // type of integers
 > class IntegerType implements IType {
 >   String printAs = "int";
 >   IntegerType() { }
 > }
 >
 > // String type
 > class StringType implements IType {
 >   String printAs = "String";
 >   StringType() {}
 > }
 >
 > // class type
 > class Class implements IType {
 >   String name;
 >
 >   Class(String name) {
 >     this.name = name;
 >   }
 > }
 >
 > // interface type
 > class Interface implements IType {
 >   String name;
 >
 >   Interface(String name) {
 >     this.name = name;
 >   }
 > }
 >
 >
 > /*
 >             +----------+
 >             | IContext |<--------------+
 >             +----------+               |
 >             +----------+               |
 >                   |                    |
 >                  / \                   |
 >                  ---                   |
 >                   |                    |
 >         -------------------            |
 >         |                 |            |
 >   +-----------+    +--------------+    |
 >   | MTContext |    | ConsConx     |    |
 >   +-----------+    +--------------+    |
 >   +-----------+    | Association f|    |
 >                    | IContext rst |----+
 >                    +--------------+
 > */
 >
 > // representing type environments
 > interface IContext {
 >   // what is the type of name in this type context?
 >   IType lookup(String name);
 > }
 >
 > // no entries in type env
 > class MTContext implements IContext {
 >
 >   MTContext() {}
 >
 >   IType lookup(String name) {
 >     return Util.error("");
 >   }
 > }
 >
 > // one more
 > class ConsConx implements IContext {
 >   Association fst;
 >   IContext rst;
 >
 >   ConsConx(Association fst, IContext rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 >
 >   IType lookup(String n) {
 >     if (this.fst.defines(n))
 >       return this.fst.type;
 >     else
 >       return this.rst.lookup(n);
 >   }
 > }
 >
 > // an association in a type context
 > class Association {
 >   String name;
 >   IType type;
 >
 >   Association(String name, IType type) {
 >     this.name = name;
 >     this.type = type;
 >   }
 >
 >   // is this.name the given name?
 >   boolean defines(String name) {
 >     return this.name.equals(name);
 >   }
 >
 > }
 >
 > /*
 >                             
 > +--------------------------------------------+
 >                            |  
 > ISignatures                                | 
 > <----------------------------+
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                            | Signature lookup(className  
 > x,methodName y) |                             |
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                                                   
 > |                                                    |
 >                                                 /  
 > \                                                   |
 >                                                  
 > ---                                                   |
 >                                                   
 > |                                                    |
 >                          
 > ---------------------------------------------------                    
 >         |
 >                          
 > |                                                  
 > |                           |
 >   +--------------------------------------------+     
 > +--------------------------------------------+    |
 >   | MTSig                                      |    |  
 > ConsSig                                    |    |
 >   +--------------------------------------------+     
 > +--------------------------------------------+    |
 >   +--------------------------------------------+    | Signature  
 > fst                              |    |
 >   | Signature lookup(className x,methodName y) |    | ISignatures  
 > rst                            |-+  |
 >   +--------------------------------------------+     
 > +--------------------------------------------+ |  |
 >                                                     | Signature  
 > lookup(className x,methodName y) | |  |
 >                                                      
 > +--------------------------------------------+ |  |
 >                                                                        
 >                              |  |
 >                                                                        
 >                              +--+
 >
 > */
 >
 > // the context of type signatures
 > interface ISignatures {
 >   // what is the signature of the given method in the given class  
 > in this
 >   // list of signatures?
 > //  Signature lookup(Class class, String methodName);
 > }
 >
 > class MTSig implements ISignatures {
 >   MTSig() { }
 >
 >   // MF: change this class into c, and you suddently get a  
 > reasonable error message
 >   Signature lookup(Class class,String methodName) {
 >     return Util.error("");
 >   }
 > }
 >
 > /*
 > class ConsSig implements ISignatures {
 >   Signature fst;
 >   ISignatures rst;
 >
 >   ConsSig(Signature fst, ISignatures rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 >
 >   Signature lookup(Class x,String methodName) {
 >     if (this.fst.defines(x,y))
 > 	   return this.fst.signature;
 >     else
 > 	   return this.rst.lookup(x,y);
 >   }
 > }
 > // a method signature, relative to a class
 > class Signature {
 >   Class class;
 >   String name;
 >   ITypes domain;
 >
 >   Signature(Class class, String name, ITypes domain) {
 >     this.class = class;
 >     this.name = name;
 >     this.domain = domain;
 >   }
 >   // is this.name the given name?
 >   boolean defines(Class className, String methodName) {
 >     return this.methodName.equals(methodName)
 >         && this.class.name.equals(className);
 >   }
 > }
 > */
 >
 > // interface ITypes {}
 >
 >
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > -------
 >    translate this class into the date representation (as well as  
 > possible):
 >    class Book {
 >     String author;
 >     int sold;
 >     Book(String author, int sold) {
 >      this.author = author;
 >      this.sold = sold;
 >     }
 >    }
 > */
 >
 > class ClassExample {
 > Class book = new Class("Book");
 > ClassExample() { }
 > }
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > -------
 >    translate this expression into your representation:
 >    new Book("Felleisen","How to Design Programs")
 > */
 >
 > class ExpressionExample {
 > ClassExample ce = new ClassExample();
 > Class book = this.ce.book;
 >
 > IExpression author = new StringConst("Felleisen");
 > IExpression sold = new IntegerConst(10);
 > IListExp mt = new None();
 > IListExp one = new ConsExp(this.sold,this.mt);
 > IListExp two = new ConsExp(this.author,this.one);
 > IExpression c = new Construction(this.book,this.two);
 >
 > ExpressionExample() { }
 > }
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8795: professorJ internal error when class used as variable name
Date: Sat, 7 Jul 2007 08:53:44 -0400

 On Jul 7, 2007, at 5:40 AM, Kathy Gray wrote:
 
 > I don't see the error when I run with my local parser (a slightly  
 > different version from the one in svn right now).
 >
 > I'll be updating later today because of the setup-plt error,  
 > hopefully at that point you won't have the bug anymore either.
 >
 > And yes, the new parser isn't fully tested yet. I am in the process  
 > of testing it, but having guinea pigs (who aren't students) poking  
 > at the parser also helps discover bugs. I can try to add an option  
 > to turn off the new parser and use the old one (except in  
 > Intermediate + access) if you need it for places where you're stuck.
 >
 
 It's just as easy to switch to javac usually.
 
 The problem is that I want to make progress on the book not the  
 parser :-)
 
 
 > -Kathy
 >
 >
 > On Jul 7, 2007, at 3:45 AM, Matthias Felleisen wrote:
 >
 >> Kathy, I am getting the feeling that the new parser isn't well  
 >> tested. -- Matthias
 >>
 >> P.S. Here is the real program.
 >>
 >> /*
 >>                      +-------------+
 >>                      | IExpression |
 >>                      +-------------+
 >>                      +-------------+
 >>                             |
 >>                            / \
 >>                            ---
 >>                             |
 >>         ---------------------------------------
 >>         |                 |                   |
 >>   +---------------+    +-------------+    +---------------+
 >>   | IntegerConst  |    | Name        |    | Construction  |
 >>   +---------------+    +-------------+    +---------------+
 >>   | int value     |    | String name |    | Class cls     |
 >>   +---------------+    +-------------+    | IListExp args |
 >>                                           +---------------+
 >>
 >>   also added: StringConst
 >>
 >> */
 >>
 >> // representing Java expressions in Beginner
 >> interface IExpression {
 >> // what is the type of this expression in the given type context  
 >> and signatures?
 >> IType type(IContext vl, ISignatures s);
 >> }
 >>
 >> // constants
 >> class StringConst implements IExpression {
 >>   String value;
 >>
 >>   StringConst(String value) {
 >>     this.value = value;
 >>   }
 >>
 >>   IType type(IContext vl, ISignatures s) {
 >>     return new StringType();
 >>   }
 >> }
 >>
 >> class IntegerConst implements IExpression {
 >>   int value;
 >>
 >>   IntegerConst(int value) {
 >>     this.value = value;
 >>   }
 >>
 >>   IType type(IContext vl, ISignatures s) {
 >>     return new IntegerType();
 >>   }
 >> }
 >>
 >> // field names
 >> class Name implements IExpression {
 >>   String name;
 >>
 >>   Name(String name) {
 >>     this.name = name;
 >>   }
 >>
 >>   IType type(IContext vl, ISignatures s) {
 >>     return new IntegerType() /* vl.lookup(this.name) */;
 >>   }
 >> }
 >>
 >> // object construction
 >> class Construction implements IExpression {
 >>   Class cls;
 >>   IListExp args;
 >>
 >>   Construction(Class cls, IListExp args) {
 >>     this.cls = cls;
 >>     this.args = args;
 >>   }
 >>
 >>   IType type(IContext vl, ISignatures s) {
 >>     return new IntegerType();
 >>   }
 >> }
 >>
 >> /*
 >>            +----------+
 >>            | IListExp |<-------------+
 >>            +----------+              |
 >>            +----------+              |
 >>                  |                   |
 >>                 / \                  |
 >>                 ---                  |
 >>                  |                   |
 >>      -------------------             |
 >>      |                 |             |
 >>   +------+    +-----------------+    |
 >>   | None |    | ConsExp         |    |
 >>   +------+    +-----------------+    |
 >>   +------+    | IExpression fst |    |
 >>               | IListExp rst    |-+  |
 >>               +-----------------+ |  |
 >>                                   |  |
 >>                                   +--+
 >>
 >> */
 >>
 >> /*  
 >> --------------------------------------------------------------------- 
 >> ----- */
 >>
 >> // sequence of expressions
 >> interface IListExp {}
 >>
 >> // none
 >> class None implements IListExp {
 >>   None() {}
 >> }
 >>
 >> // one more
 >> class ConsExp implements IListExp {
 >>   IExpression fst;
 >>   IListExp rst;
 >>
 >>   ConsExp(IExpression fst, IListExp rst) {
 >>     this.fst = fst;
 >>     this.rst = rst;
 >>   }
 >> }
 >>
 >> //  
 >> --------------------------------------------------------------------- 
 >> --------
 >>
 >> /*
 >>                                     +-------+
 >>                                     | IType |
 >>                                     +-------+
 >>                                     +-------+
 >>                                         |
 >>                                        / \
 >>                                        ---
 >>                                         |
 >>            
 >> ---------------------------------------------------------------
 >>           |                     |                     
 >> |                  |
 >>   +----------------+    +----------------+    +-------------+     
 >> +-------------+
 >>   | IntegerType    |    | StringType     |    | Class       |    |  
 >> Interface   |
 >>   +----------------+    +----------------+    +-------------+     
 >> +-------------+
 >>   | String printAs |    | String printAs |    | String name |    |  
 >> String name |
 >>   +----------------+    +----------------+    +-------------+     
 >> +-------------+
 >>
 >>
 >>
 >> */
 >>
 >> // representing types
 >> interface IType {
 >> }
 >>
 >> // type of integers
 >> class IntegerType implements IType {
 >>   String printAs = "int";
 >>   IntegerType() { }
 >> }
 >>
 >> // String type
 >> class StringType implements IType {
 >>   String printAs = "String";
 >>   StringType() {}
 >> }
 >>
 >> // class type
 >> class Class implements IType {
 >>   String name;
 >>
 >>   Class(String name) {
 >>     this.name = name;
 >>   }
 >> }
 >>
 >> // interface type
 >> class Interface implements IType {
 >>   String name;
 >>
 >>   Interface(String name) {
 >>     this.name = name;
 >>   }
 >> }
 >>
 >>
 >> /*
 >>             +----------+
 >>             | IContext |<--------------+
 >>             +----------+               |
 >>             +----------+               |
 >>                   |                    |
 >>                  / \                   |
 >>                  ---                   |
 >>                   |                    |
 >>         -------------------            |
 >>         |                 |            |
 >>   +-----------+    +--------------+    |
 >>   | MTContext |    | ConsConx     |    |
 >>   +-----------+    +--------------+    |
 >>   +-----------+    | Association f|    |
 >>                    | IContext rst |----+
 >>                    +--------------+
 >> */
 >>
 >> // representing type environments
 >> interface IContext {
 >>   // what is the type of name in this type context?
 >>   IType lookup(String name);
 >> }
 >>
 >> // no entries in type env
 >> class MTContext implements IContext {
 >>
 >>   MTContext() {}
 >>
 >>   IType lookup(String name) {
 >>     return Util.error("");
 >>   }
 >> }
 >>
 >> // one more
 >> class ConsConx implements IContext {
 >>   Association fst;
 >>   IContext rst;
 >>
 >>   ConsConx(Association fst, IContext rst) {
 >>     this.fst = fst;
 >>     this.rst = rst;
 >>   }
 >>
 >>   IType lookup(String n) {
 >>     if (this.fst.defines(n))
 >>       return this.fst.type;
 >>     else
 >>       return this.rst.lookup(n);
 >>   }
 >> }
 >>
 >> // an association in a type context
 >> class Association {
 >>   String name;
 >>   IType type;
 >>
 >>   Association(String name, IType type) {
 >>     this.name = name;
 >>     this.type = type;
 >>   }
 >>
 >>   // is this.name the given name?
 >>   boolean defines(String name) {
 >>     return this.name.equals(name);
 >>   }
 >>
 >> }
 >>
 >> /*
 >>                             
 >> +--------------------------------------------+
 >>                            |  
 >> ISignatures                                | 
 >> <----------------------------+
 >>                             
 >> +-------------------------------------------- 
 >> +                             |
 >>                             
 >> +-------------------------------------------- 
 >> +                             |
 >>                            | Signature lookup(className  
 >> x,methodName y) |                             |
 >>                             
 >> +-------------------------------------------- 
 >> +                             |
 >>                                                   
 >> |                                                    |
 >>                                                 /  
 >> \                                                   |
 >>                                                  
 >> ---                                                   |
 >>                                                   
 >> |                                                    |
 >>                          
 >> ---------------------------------------------------                   
 >>          |
 >>                          
 >> |                                                  
 >> |                           |
 >>   +--------------------------------------------+     
 >> +--------------------------------------------+    |
 >>   | MTSig                                      |    |  
 >> ConsSig                                    |    |
 >>   +--------------------------------------------+     
 >> +--------------------------------------------+    |
 >>   +--------------------------------------------+    | Signature  
 >> fst                              |    |
 >>   | Signature lookup(className x,methodName y) |    | ISignatures  
 >> rst                            |-+  |
 >>   +--------------------------------------------+     
 >> +--------------------------------------------+ |  |
 >>                                                     | Signature  
 >> lookup(className x,methodName y) | |  |
 >>                                                      
 >> +--------------------------------------------+ |  |
 >>                                                                       
 >>                               |  |
 >>                                                                       
 >>                               +--+
 >>
 >> */
 >>
 >> // the context of type signatures
 >> interface ISignatures {
 >>   // what is the signature of the given method in the given class  
 >> in this
 >>   // list of signatures?
 >> //  Signature lookup(Class class, String methodName);
 >> }
 >>
 >> class MTSig implements ISignatures {
 >>   MTSig() { }
 >>
 >>   // MF: change this class into c, and you suddently get a  
 >> reasonable error message
 >>   Signature lookup(Class class,String methodName) {
 >>     return Util.error("");
 >>   }
 >> }
 >>
 >> /*
 >> class ConsSig implements ISignatures {
 >>   Signature fst;
 >>   ISignatures rst;
 >>
 >>   ConsSig(Signature fst, ISignatures rst) {
 >>     this.fst = fst;
 >>     this.rst = rst;
 >>   }
 >>
 >>   Signature lookup(Class x,String methodName) {
 >>     if (this.fst.defines(x,y))
 >> 	   return this.fst.signature;
 >>     else
 >> 	   return this.rst.lookup(x,y);
 >>   }
 >> }
 >> // a method signature, relative to a class
 >> class Signature {
 >>   Class class;
 >>   String name;
 >>   ITypes domain;
 >>
 >>   Signature(Class class, String name, ITypes domain) {
 >>     this.class = class;
 >>     this.name = name;
 >>     this.domain = domain;
 >>   }
 >>   // is this.name the given name?
 >>   boolean defines(Class className, String methodName) {
 >>     return this.methodName.equals(methodName)
 >>         && this.class.name.equals(className);
 >>   }
 >> }
 >> */
 >>
 >> // interface ITypes {}
 >>
 >>
 >>
 >> /*  
 >> --------------------------------------------------------------------- 
 >> --------
 >>    translate this class into the date representation (as well as  
 >> possible):
 >>    class Book {
 >>     String author;
 >>     int sold;
 >>     Book(String author, int sold) {
 >>      this.author = author;
 >>      this.sold = sold;
 >>     }
 >>    }
 >> */
 >>
 >> class ClassExample {
 >> Class book = new Class("Book");
 >> ClassExample() { }
 >> }
 >>
 >> /*  
 >> --------------------------------------------------------------------- 
 >> --------
 >>    translate this expression into your representation:
 >>    new Book("Felleisen","How to Design Programs")
 >> */
 >>
 >> class ExpressionExample {
 >> ClassExample ce = new ClassExample();
 >> Class book = this.ce.book;
 >>
 >> IExpression author = new StringConst("Felleisen");
 >> IExpression sold = new IntegerConst(10);
 >> IListExp mt = new None();
 >> IListExp one = new ConsExp(this.sold,this.mt);
 >> IListExp two = new ConsExp(this.author,this.one);
 >> IExpression c = new Construction(this.book,this.two);
 >>
 >> ExpressionExample() { }
 >> }
 >>
 >
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8795: professorJ internal error when class used as variable name
Date: Sat, 7 Jul 2007 14:19:22 +0100

 On Jul 7, 2007, at 1:53 PM, Matthias Felleisen wrote:
 
 >
 >
 > On Jul 7, 2007, at 5:40 AM, Kathy Gray wrote:
 >
 >> I don't see the error when I run with my local parser (a slightly  
 >> different version from the one in svn right now).
 >>
 >> I'll be updating later today because of the setup-plt error,  
 >> hopefully at that point you won't have the bug anymore either.
 >>
 >> And yes, the new parser isn't fully tested yet. I am in the  
 >> process of testing it, but having guinea pigs (who aren't  
 >> students) poking at the parser also helps discover bugs. I can try  
 >> to add an option to turn off the new parser and use the old one  
 >> (except in Intermediate + access) if you need it for places where  
 >> you're stuck.
 >>
 >
 > It's just as easy to switch to javac usually.
 >
 > The problem is that I want to make progress on the book not the  
 > parser :-)
 >
 
 Ah but, the parser needs to progress for ProfessorJ to match the  
 book. Luckily (for now), if there are no parse errors in the program,  
 then ProfessorJ still uses the old yacc-style parsers.
 
 I'm still pushing on testing and debugging the parser, sorry you're  
 also running into bugs.
 
 -Kathy
 
 >
 >> -Kathy
 >>
 >>
 >> On Jul 7, 2007, at 3:45 AM, Matthias Felleisen wrote:
 >>
 >>> Kathy, I am getting the feeling that the new parser isn't well  
 >>> tested. -- Matthias
 >>>
 >>> P.S. Here is the real program.
 >>>
 >>> /*
 >>>                      +-------------+
 >>>                      | IExpression |
 >>>                      +-------------+
 >>>                      +-------------+
 >>>                             |
 >>>                            / \
 >>>                            ---
 >>>                             |
 >>>         ---------------------------------------
 >>>         |                 |                   |
 >>>   +---------------+    +-------------+    +---------------+
 >>>   | IntegerConst  |    | Name        |    | Construction  |
 >>>   +---------------+    +-------------+    +---------------+
 >>>   | int value     |    | String name |    | Class cls     |
 >>>   +---------------+    +-------------+    | IListExp args |
 >>>                                           +---------------+
 >>>
 >>>   also added: StringConst
 >>>
 >>> */
 >>>
 >>> // representing Java expressions in Beginner
 >>> interface IExpression {
 >>> // what is the type of this expression in the given type context  
 >>> and signatures?
 >>> IType type(IContext vl, ISignatures s);
 >>> }
 >>>
 >>> // constants
 >>> class StringConst implements IExpression {
 >>>   String value;
 >>>
 >>>   StringConst(String value) {
 >>>     this.value = value;
 >>>   }
 >>>
 >>>   IType type(IContext vl, ISignatures s) {
 >>>     return new StringType();
 >>>   }
 >>> }
 >>>
 >>> class IntegerConst implements IExpression {
 >>>   int value;
 >>>
 >>>   IntegerConst(int value) {
 >>>     this.value = value;
 >>>   }
 >>>
 >>>   IType type(IContext vl, ISignatures s) {
 >>>     return new IntegerType();
 >>>   }
 >>> }
 >>>
 >>> // field names
 >>> class Name implements IExpression {
 >>>   String name;
 >>>
 >>>   Name(String name) {
 >>>     this.name = name;
 >>>   }
 >>>
 >>>   IType type(IContext vl, ISignatures s) {
 >>>     return new IntegerType() /* vl.lookup(this.name) */;
 >>>   }
 >>> }
 >>>
 >>> // object construction
 >>> class Construction implements IExpression {
 >>>   Class cls;
 >>>   IListExp args;
 >>>
 >>>   Construction(Class cls, IListExp args) {
 >>>     this.cls = cls;
 >>>     this.args = args;
 >>>   }
 >>>
 >>>   IType type(IContext vl, ISignatures s) {
 >>>     return new IntegerType();
 >>>   }
 >>> }
 >>>
 >>> /*
 >>>            +----------+
 >>>            | IListExp |<-------------+
 >>>            +----------+              |
 >>>            +----------+              |
 >>>                  |                   |
 >>>                 / \                  |
 >>>                 ---                  |
 >>>                  |                   |
 >>>      -------------------             |
 >>>      |                 |             |
 >>>   +------+    +-----------------+    |
 >>>   | None |    | ConsExp         |    |
 >>>   +------+    +-----------------+    |
 >>>   +------+    | IExpression fst |    |
 >>>               | IListExp rst    |-+  |
 >>>               +-----------------+ |  |
 >>>                                   |  |
 >>>                                   +--+
 >>>
 >>> */
 >>>
 >>> /*  
 >>> -------------------------------------------------------------------- 
 >>> ------ */
 >>>
 >>> // sequence of expressions
 >>> interface IListExp {}
 >>>
 >>> // none
 >>> class None implements IListExp {
 >>>   None() {}
 >>> }
 >>>
 >>> // one more
 >>> class ConsExp implements IListExp {
 >>>   IExpression fst;
 >>>   IListExp rst;
 >>>
 >>>   ConsExp(IExpression fst, IListExp rst) {
 >>>     this.fst = fst;
 >>>     this.rst = rst;
 >>>   }
 >>> }
 >>>
 >>> //  
 >>> -------------------------------------------------------------------- 
 >>> ---------
 >>>
 >>> /*
 >>>                                     +-------+
 >>>                                     | IType |
 >>>                                     +-------+
 >>>                                     +-------+
 >>>                                         |
 >>>                                        / \
 >>>                                        ---
 >>>                                         |
 >>>            
 >>> ---------------------------------------------------------------
 >>>           |                     |                     
 >>> |                  |
 >>>   +----------------+    +----------------+    +-------------+     
 >>> +-------------+
 >>>   | IntegerType    |    | StringType     |    | Class       |     
 >>> | Interface   |
 >>>   +----------------+    +----------------+    +-------------+     
 >>> +-------------+
 >>>   | String printAs |    | String printAs |    | String name |     
 >>> | String name |
 >>>   +----------------+    +----------------+    +-------------+     
 >>> +-------------+
 >>>
 >>>
 >>>
 >>> */
 >>>
 >>> // representing types
 >>> interface IType {
 >>> }
 >>>
 >>> // type of integers
 >>> class IntegerType implements IType {
 >>>   String printAs = "int";
 >>>   IntegerType() { }
 >>> }
 >>>
 >>> // String type
 >>> class StringType implements IType {
 >>>   String printAs = "String";
 >>>   StringType() {}
 >>> }
 >>>
 >>> // class type
 >>> class Class implements IType {
 >>>   String name;
 >>>
 >>>   Class(String name) {
 >>>     this.name = name;
 >>>   }
 >>> }
 >>>
 >>> // interface type
 >>> class Interface implements IType {
 >>>   String name;
 >>>
 >>>   Interface(String name) {
 >>>     this.name = name;
 >>>   }
 >>> }
 >>>
 >>>
 >>> /*
 >>>             +----------+
 >>>             | IContext |<--------------+
 >>>             +----------+               |
 >>>             +----------+               |
 >>>                   |                    |
 >>>                  / \                   |
 >>>                  ---                   |
 >>>                   |                    |
 >>>         -------------------            |
 >>>         |                 |            |
 >>>   +-----------+    +--------------+    |
 >>>   | MTContext |    | ConsConx     |    |
 >>>   +-----------+    +--------------+    |
 >>>   +-----------+    | Association f|    |
 >>>                    | IContext rst |----+
 >>>                    +--------------+
 >>> */
 >>>
 >>> // representing type environments
 >>> interface IContext {
 >>>   // what is the type of name in this type context?
 >>>   IType lookup(String name);
 >>> }
 >>>
 >>> // no entries in type env
 >>> class MTContext implements IContext {
 >>>
 >>>   MTContext() {}
 >>>
 >>>   IType lookup(String name) {
 >>>     return Util.error("");
 >>>   }
 >>> }
 >>>
 >>> // one more
 >>> class ConsConx implements IContext {
 >>>   Association fst;
 >>>   IContext rst;
 >>>
 >>>   ConsConx(Association fst, IContext rst) {
 >>>     this.fst = fst;
 >>>     this.rst = rst;
 >>>   }
 >>>
 >>>   IType lookup(String n) {
 >>>     if (this.fst.defines(n))
 >>>       return this.fst.type;
 >>>     else
 >>>       return this.rst.lookup(n);
 >>>   }
 >>> }
 >>>
 >>> // an association in a type context
 >>> class Association {
 >>>   String name;
 >>>   IType type;
 >>>
 >>>   Association(String name, IType type) {
 >>>     this.name = name;
 >>>     this.type = type;
 >>>   }
 >>>
 >>>   // is this.name the given name?
 >>>   boolean defines(String name) {
 >>>     return this.name.equals(name);
 >>>   }
 >>>
 >>> }
 >>>
 >>> /*
 >>>                             
 >>> +--------------------------------------------+
 >>>                            |  
 >>> ISignatures                                | 
 >>> <----------------------------+
 >>>                             
 >>> +-------------------------------------------- 
 >>> +                             |
 >>>                             
 >>> +-------------------------------------------- 
 >>> +                             |
 >>>                            | Signature lookup(className  
 >>> x,methodName y) |                             |
 >>>                             
 >>> +-------------------------------------------- 
 >>> +                             |
 >>>                                                   
 >>> |                                                    |
 >>>                                                 /  
 >>> \                                                   |
 >>>                                                  
 >>> ---                                                   |
 >>>                                                   
 >>> |                                                    |
 >>>                          
 >>> ---------------------------------------------------                  
 >>>           |
 >>>                          
 >>> |                                                  
 >>> |                           |
 >>>   +--------------------------------------------+     
 >>> +--------------------------------------------+    |
 >>>   | MTSig                                      |    |  
 >>> ConsSig                                    |    |
 >>>   +--------------------------------------------+     
 >>> +--------------------------------------------+    |
 >>>   +--------------------------------------------+    | Signature  
 >>> fst                              |    |
 >>>   | Signature lookup(className x,methodName y) |    | ISignatures  
 >>> rst                            |-+  |
 >>>   +--------------------------------------------+     
 >>> +--------------------------------------------+ |  |
 >>>                                                     | Signature  
 >>> lookup(className x,methodName y) | |  |
 >>>                                                      
 >>> +--------------------------------------------+ |  |
 >>>                                                                      
 >>>                                |  |
 >>>                                                                      
 >>>                                +--+
 >>>
 >>> */
 >>>
 >>> // the context of type signatures
 >>> interface ISignatures {
 >>>   // what is the signature of the given method in the given class  
 >>> in this
 >>>   // list of signatures?
 >>> //  Signature lookup(Class class, String methodName);
 >>> }
 >>>
 >>> class MTSig implements ISignatures {
 >>>   MTSig() { }
 >>>
 >>>   // MF: change this class into c, and you suddently get a  
 >>> reasonable error message
 >>>   Signature lookup(Class class,String methodName) {
 >>>     return Util.error("");
 >>>   }
 >>> }
 >>>
 >>> /*
 >>> class ConsSig implements ISignatures {
 >>>   Signature fst;
 >>>   ISignatures rst;
 >>>
 >>>   ConsSig(Signature fst, ISignatures rst) {
 >>>     this.fst = fst;
 >>>     this.rst = rst;
 >>>   }
 >>>
 >>>   Signature lookup(Class x,String methodName) {
 >>>     if (this.fst.defines(x,y))
 >>> 	   return this.fst.signature;
 >>>     else
 >>> 	   return this.rst.lookup(x,y);
 >>>   }
 >>> }
 >>> // a method signature, relative to a class
 >>> class Signature {
 >>>   Class class;
 >>>   String name;
 >>>   ITypes domain;
 >>>
 >>>   Signature(Class class, String name, ITypes domain) {
 >>>     this.class = class;
 >>>     this.name = name;
 >>>     this.domain = domain;
 >>>   }
 >>>   // is this.name the given name?
 >>>   boolean defines(Class className, String methodName) {
 >>>     return this.methodName.equals(methodName)
 >>>         && this.class.name.equals(className);
 >>>   }
 >>> }
 >>> */
 >>>
 >>> // interface ITypes {}
 >>>
 >>>
 >>>
 >>> /*  
 >>> -------------------------------------------------------------------- 
 >>> ---------
 >>>    translate this class into the date representation (as well as  
 >>> possible):
 >>>    class Book {
 >>>     String author;
 >>>     int sold;
 >>>     Book(String author, int sold) {
 >>>      this.author = author;
 >>>      this.sold = sold;
 >>>     }
 >>>    }
 >>> */
 >>>
 >>> class ClassExample {
 >>> Class book = new Class("Book");
 >>> ClassExample() { }
 >>> }
 >>>
 >>> /*  
 >>> -------------------------------------------------------------------- 
 >>> ---------
 >>>    translate this expression into your representation:
 >>>    new Book("Felleisen","How to Design Programs")
 >>> */
 >>>
 >>> class ExpressionExample {
 >>> ClassExample ce = new ClassExample();
 >>> Class book = this.ce.book;
 >>>
 >>> IExpression author = new StringConst("Felleisen");
 >>> IExpression sold = new IntegerConst(10);
 >>> IListExp mt = new None();
 >>> IListExp one = new ConsExp(this.sold,this.mt);
 >>> IListExp two = new ConsExp(this.author,this.one);
 >>> IExpression c = new Construction(this.book,this.two);
 >>>
 >>> ExpressionExample() { }
 >>> }
 >>>
 >>
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/8795: professorJ internal error when class used as variable name
Date: Sat, 7 Jul 2007 16:33:54 +0100

 I have committed my local versions in svn. I was not experiencing  
 this bug locally. Could you update and run this program and let me  
 know if the promise error still arises?
 Thanks,
 -Kathy
 
 
 
 On Jul 7, 2007, at 3:40 AM, matthias@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8795
 >
 > Reported by matthias for release: 370.4-svn6jul2007
 >
 > *** Description:
 > Welcome to DrScheme, version 370.4-svn6jul2007 [3m].
 > Language: ProfessorJ: Beginner.
 > procedure application: expected procedure, given:  
 > #<struct:promise>; arguments were: (#<struct:promise> .  
 > #<struct:promise>) (229 27 6378 1)
 >>
 >
 > *** How to repeat:
 > I tried to produce a small example but couldn't do so in
 > 30 minutes of searching for the bug in the first place.
 >
 > I am attaching the whole file with a mark (see MF) where you can  
 > "turn off" the error.
 >
 > /*
 >                      +-------------+
 >                      | IExpression |
 >                      +-------------+
 >                      +-------------+
 >                             |
 >                            / \
 >                            ---
 >                             |
 >         ---------------------------------------
 >         |                 |                   |
 >   +---------------+    +-------------+    +---------------+
 >   | IntegerConst  |    | Name        |    | Construction  |
 >   +---------------+    +-------------+    +---------------+
 >   | int value     |    | String name |    | Class cls     |
 >   +---------------+    +-------------+    | IListExp args |
 >                                           +---------------+
 >
 >   also added: StringConst
 >
 > */
 >
 > // representing Java expressions in Beginner
 > interface IExpression {
 >  // what is the type of this expression in the given type context  
 > and signatures?
 >  IType type(IContext vl, ISignatures s);
 > }
 >
 > // constants
 > class StringConst implements IExpression {
 >   String value;
 >
 >   StringConst(String value) {
 >     this.value = value;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new StringType();
 >   }
 > }
 >
 > class IntegerConst implements IExpression {
 >   int value;
 >
 >   IntegerConst(int value) {
 >     this.value = value;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType();
 >   }
 > }
 >
 > // field names
 > class Name implements IExpression {
 >   String name;
 >
 >   Name(String name) {
 >     this.name = name;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType() /* vl.lookup(this.name) */;
 >   }
 > }
 >
 > // object construction
 > class Construction implements IExpression {
 >   Class cls;
 >   IListExp args;
 >
 >   Construction(Class cls, IListExp args) {
 >     this.cls = cls;
 >     this.args = args;
 >   }
 >
 >   IType type(IContext vl, ISignatures s) {
 >     return new IntegerType();
 >   }
 > }
 >
 > /*
 >            +----------+
 >            | IListExp |<-------------+
 >            +----------+              |
 >            +----------+              |
 >                  |                   |
 >                 / \                  |
 >                 ---                  |
 >                  |                   |
 >      -------------------             |
 >      |                 |             |
 >   +------+    +-----------------+    |
 >   | None |    | ConsExp         |    |
 >   +------+    +-----------------+    |
 >   +------+    | IExpression fst |    |
 >               | IListExp rst    |-+  |
 >               +-----------------+ |  |
 >                                   |  |
 >                                   +--+
 >
 > */
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > ---- */
 >
 > // sequence of expressions
 > interface IListExp {}
 >
 > // none
 > class None implements IListExp {
 >   None() {}
 > }
 >
 > // one more
 > class ConsExp implements IListExp {
 >   IExpression fst;
 >   IListExp rst;
 >
 >   ConsExp(IExpression fst, IListExp rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 > }
 >
 > //  
 > ---------------------------------------------------------------------- 
 > -------
 >
 > /*
 >                                     +-------+
 >                                     | IType |
 >                                     +-------+
 >                                     +-------+
 >                                         |
 >                                        / \
 >                                        ---
 >                                         |
 >            
 > ---------------------------------------------------------------
 >           |                     |                     
 > |                  |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >   | IntegerType    |    | StringType     |    | Class       |    |  
 > Interface   |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >   | String printAs |    | String printAs |    | String name |    |  
 > String name |
 >   +----------------+    +----------------+    +-------------+     
 > +-------------+
 >
 >
 >
 > */
 >
 > // representing types
 > interface IType {
 > }
 >
 > // type of integers
 > class IntegerType implements IType {
 >   String printAs = "int";
 >   IntegerType() { }
 > }
 >
 > // String type
 > class StringType implements IType {
 >   String printAs = "String";
 >   StringType() {}
 > }
 >
 > // class type
 > class Class implements IType {
 >   String name;
 >
 >   Class(String name) {
 >     this.name = name;
 >   }
 > }
 >
 > // interface type
 > class Interface implements IType {
 >   String name;
 >
 >   Interface(String name) {
 >     this.name = name;
 >   }
 > }
 >
 >
 > /*
 >             +----------+
 >             | IContext |<--------------+
 >             +----------+               |
 >             +----------+               |
 >                   |                    |
 >                  / \                   |
 >                  ---                   |
 >                   |                    |
 >         -------------------            |
 >         |                 |            |
 >   +-----------+    +--------------+    |
 >   | MTContext |    | ConsConx     |    |
 >   +-----------+    +--------------+    |
 >   +-----------+    | Association f|    |
 >                    | IContext rst |----+
 >                    +--------------+
 > */
 >
 > // representing type environments
 > interface IContext {
 >   // what is the type of name in this type context?
 >   IType lookup(String name);
 > }
 >
 > // no entries in type env
 > class MTContext implements IContext {
 >
 >   MTContext() {}
 >
 >   IType lookup(String name) {
 >     return Util.error("");
 >   }
 > }
 >
 > // one more
 > class ConsConx implements IContext {
 >   Association fst;
 >   IContext rst;
 >
 >   ConsConx(Association fst, IContext rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 >
 >   IType lookup(String n) {
 >     if (this.fst.defines(n))
 >       return this.fst.type;
 >     else
 >       return this.rst.lookup(n);
 >   }
 > }
 >
 > // an association in a type context
 > class Association {
 >   String name;
 >   IType type;
 >
 >   Association(String name, IType type) {
 >     this.name = name;
 >     this.type = type;
 >   }
 >
 >   // is this.name the given name?
 >   boolean defines(String name) {
 >     return this.name.equals(name);
 >   }
 >
 > }
 >
 > /*
 >                             
 > +--------------------------------------------+
 >                            |  
 > ISignatures                                | 
 > <----------------------------+
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                            | Signature lookup(className  
 > x,methodName y) |                             |
 >                             
 > +-------------------------------------------- 
 > +                             |
 >                                                   
 > |                                                    |
 >                                                 /  
 > \                                                   |
 >                                                  
 > ---                                                   |
 >                                                   
 > |                                                    |
 >                          
 > ---------------------------------------------------                    
 >         |
 >                          
 > |                                                  
 > |                           |
 >   +--------------------------------------------+     
 > +--------------------------------------------+    |
 >   | MTSig                                      |    |  
 > ConsSig                                    |    |
 >   +--------------------------------------------+     
 > +--------------------------------------------+    |
 >   +--------------------------------------------+    | Signature  
 > fst                              |    |
 >   | Signature lookup(className x,methodName y) |    | ISignatures  
 > rst                            |-+  |
 >   +--------------------------------------------+     
 > +--------------------------------------------+ |  |
 >                                                     | Signature  
 > lookup(className x,methodName y) | |  |
 >                                                      
 > +--------------------------------------------+ |  |
 >                                                                        
 >                              |  |
 >                                                                        
 >                              +--+
 >
 > */
 >
 > // the context of type signatures
 > interface ISignatures {
 >   // what is the signature of the given method in the given class  
 > in this
 >   // list of signatures?
 > //  Signature lookup(Class class, String methodName);
 > }
 >
 > class MTSig implements ISignatures {
 >   MTSig() { }
 >
 >   Signature lookup(Class class,String methodName) {
 >     return Util.error("");
 >   }
 > }
 >
 > /*
 > class ConsSig implements ISignatures {
 >   Signature fst;
 >   ISignatures rst;
 >
 >   ConsSig(Signature fst, ISignatures rst) {
 >     this.fst = fst;
 >     this.rst = rst;
 >   }
 >
 >   Signature lookup(Class x,String methodName) {
 >     if (this.fst.defines(x,y))
 > 	   return this.fst.signature;
 >     else
 >  	   return this.rst.lookup(x,y);
 >   }
 > }
 > // a method signature, relative to a class
 > class Signature {
 >   Class class;
 >   String name;
 >   ITypes domain;
 >
 >   Signature(Class class, String name, ITypes domain) {
 >     this.class = class;
 >     this.name = name;
 >     this.domain = domain;
 >   }
 >   // is this.name the given name?
 >   boolean defines(Class className, String methodName) {
 >     return this.methodName.equals(methodName)
 >         && this.class.name.equals(className);
 >   }
 > }
 > */
 >
 > // interface ITypes {}
 >
 >
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > -------
 >    translate this class into the date representation (as well as  
 > possible):
 >    class Book {
 >     String author;
 >     int sold;
 >     Book(String author, int sold) {
 >      this.author = author;
 >      this.sold = sold;
 >     }
 >    }
 > */
 >
 > class ClassExample {
 >  Class book = new Class("Book");
 >  ClassExample() { }
 > }
 >
 > /*  
 > ---------------------------------------------------------------------- 
 > -------
 >    translate this expression into your representation:
 >    new Book("Felleisen","How to Design Programs")
 > */
 >
 > class ExpressionExample {
 >  ClassExample ce = new ClassExample();
 >  Class book = this.ce.book;
 >
 >  IExpression author = new StringConst("Felleisen");
 >  IExpression sold = new IntegerConst(10);
 >  IListExp mt = new None();
 >  IListExp one = new ConsExp(this.sold,this.mt);
 >  IListExp two = new ConsExp(this.author,this.one);
 >  IExpression c = new Construction(this.book,this.two);
 >
 >  ExpressionExample() { }
 > }
 >
 > *** Environment:
 > macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1:  
 > Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386  
 > i386" (i386-macosx/3m) (get-display-depth) = 32
 > Docs Installed:
 > (("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour"  
 > "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign"  
 > "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide"  
 > "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web- 
 > server-guide" "web-server-reference" "tex2page" "beginning"  
 > "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 > "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate"  
 > "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
 > Human Language: english
 > (current-memory-use) 308089980
 >
 > Collections:
 > (("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance"  
 > "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/370.4/ 
 > collects" non-existent-path) ("/Users/matthias/plt/collects"  
 > ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator- 
 > parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext"  
 > "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime"  
 > "games" "graphics" "guibuilder" "handin-client" "handin-server"  
 > "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info- 
 > domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred"  
 > "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake"  
 > "net" "openssl" "parser-tools" "planet" "plot" "preprocessor"  
 > "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos- 
 > time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail"  
 > "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist"  
 > "stepper" "string-constants" "swindle" "syntax" "syntax-color"  
 > "teachpack" "test-suite" "tests!
 >  " "tex2page" "texpict" "trace" "version" "waterworld" "web-server"  
 > "wxme" "xelda" "xml"))
 > Computer Language: (("Experimental Languages" "ProfessorJ"  
 > "Beginner") ((field) (#f) (#t) (#f) (#t) (#t)))
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8795: professorJ internal error when class used as variable name
Date: Sat, 7 Jul 2007 11:44:18 -0400

 The error went away but the error message is awkward:
 
  > An error occured in list of parameter list.
  > Expected an identifer to continue this argument. Instead, found  
 class after 'identifer'.
 
 I don't understand the second line.
 
 
 On Jul 7, 2007, at 11:33 AM, Kathy Gray wrote:
 
 > I have committed my local versions in svn. I was not experiencing  
 > this bug locally. Could you update and run this program and let me  
 > know if the promise error still arises?
 > Thanks,
 > -Kathy
 >
 >
 >
 > On Jul 7, 2007, at 3:40 AM, matthias@ccs.neu.edu wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8795
 >>
 >> Reported by matthias for release: 370.4-svn6jul2007
 >>
 >> *** Description:
 >> Welcome to DrScheme, version 370.4-svn6jul2007 [3m].
 >> Language: ProfessorJ: Beginner.
 >> procedure application: expected procedure, given:  
 >> #<struct:promise>; arguments were: (#<struct:promise> .  
 >> #<struct:promise>) (229 27 6378 1)
 >>>
 >>
 >> *** How to repeat:
 >> I tried to produce a small example but couldn't do so in
 >> 30 minutes of searching for the bug in the first place.
 >>
 >> I am attaching the whole file with a mark (see MF) where you can  
 >> "turn off" the error.
 >>
 >> /*
 >>                      +-------------+
 >>                      | IExpression |
 >>                      +-------------+
 >>                      +-------------+
 >>                             |
 >>                            / \
 >>                            ---
 >>                             |
 >>         ---------------------------------------
 >>         |                 |                   |
 >>   +---------------+    +-------------+    +---------------+
 >>   | IntegerConst  |    | Name        |    | Construction  |
 >>   +---------------+    +-------------+    +---------------+
 >>   | int value     |    | String name |    | Class cls     |
 >>   +---------------+    +-------------+    | IListExp args |
 >>                                           +---------------+
 >>
 >>   also added: StringConst
 >>
 >> */
 >>
 >> // representing Java expressions in Beginner
 >> interface IExpression {
 >>  // what is the type of this expression in the given type context  
 >> and signatures?
 >>  IType type(IContext vl, ISignatures s);
 >> }
 >>
 >> // constants
 >> class StringConst implements IExpression {
 >>   String value;
 >>
 >>   StringConst(String value) {
 >>     this.value = value;
 >>   }
 >>
 >>   IType type(IContext vl, ISignatures s) {
 >>     return new StringType();
 >>   }
 >> }
 >>
 >> class IntegerConst implements IExpression {
 >>   int value;
 >>
 >>   IntegerConst(int value) {
 >>     this.value = value;
 >>   }
 >>
 >>   IType type(IContext vl, ISignatures s) {
 >>     return new IntegerType();
 >>   }
 >> }
 >>
 >> // field names
 >> class Name implements IExpression {
 >>   String name;
 >>
 >>   Name(String name) {
 >>     this.name = name;
 >>   }
 >>
 >>   IType type(IContext vl, ISignatures s) {
 >>     return new IntegerType() /* vl.lookup(this.name) */;
 >>   }
 >> }
 >>
 >> // object construction
 >> class Construction implements IExpression {
 >>   Class cls;
 >>   IListExp args;
 >>
 >>   Construction(Class cls, IListExp args) {
 >>     this.cls = cls;
 >>     this.args = args;
 >>   }
 >>
 >>   IType type(IContext vl, ISignatures s) {
 >>     return new IntegerType();
 >>   }
 >> }
 >>
 >> /*
 >>            +----------+
 >>            | IListExp |<-------------+
 >>            +----------+              |
 >>            +----------+              |
 >>                  |                   |
 >>                 / \                  |
 >>                 ---                  |
 >>                  |                   |
 >>      -------------------             |
 >>      |                 |             |
 >>   +------+    +-----------------+    |
 >>   | None |    | ConsExp         |    |
 >>   +------+    +-----------------+    |
 >>   +------+    | IExpression fst |    |
 >>               | IListExp rst    |-+  |
 >>               +-----------------+ |  |
 >>                                   |  |
 >>                                   +--+
 >>
 >> */
 >>
 >> /*  
 >> --------------------------------------------------------------------- 
 >> ----- */
 >>
 >> // sequence of expressions
 >> interface IListExp {}
 >>
 >> // none
 >> class None implements IListExp {
 >>   None() {}
 >> }
 >>
 >> // one more
 >> class ConsExp implements IListExp {
 >>   IExpression fst;
 >>   IListExp rst;
 >>
 >>   ConsExp(IExpression fst, IListExp rst) {
 >>     this.fst = fst;
 >>     this.rst = rst;
 >>   }
 >> }
 >>
 >> //  
 >> --------------------------------------------------------------------- 
 >> --------
 >>
 >> /*
 >>                                     +-------+
 >>                                     | IType |
 >>                                     +-------+
 >>                                     +-------+
 >>                                         |
 >>                                        / \
 >>                                        ---
 >>                                         |
 >>            
 >> ---------------------------------------------------------------
 >>           |                     |                     
 >> |                  |
 >>   +----------------+    +----------------+    +-------------+     
 >> +-------------+
 >>   | IntegerType    |    | StringType     |    | Class       |    |  
 >> Interface   |
 >>   +----------------+    +----------------+    +-------------+     
 >> +-------------+
 >>   | String printAs |    | String printAs |    | String name |    |  
 >> String name |
 >>   +----------------+    +----------------+    +-------------+     
 >> +-------------+
 >>
 >>
 >>
 >> */
 >>
 >> // representing types
 >> interface IType {
 >> }
 >>
 >> // type of integers
 >> class IntegerType implements IType {
 >>   String printAs = "int";
 >>   IntegerType() { }
 >> }
 >>
 >> // String type
 >> class StringType implements IType {
 >>   String printAs = "String";
 >>   StringType() {}
 >> }
 >>
 >> // class type
 >> class Class implements IType {
 >>   String name;
 >>
 >>   Class(String name) {
 >>     this.name = name;
 >>   }
 >> }
 >>
 >> // interface type
 >> class Interface implements IType {
 >>   String name;
 >>
 >>   Interface(String name) {
 >>     this.name = name;
 >>   }
 >> }
 >>
 >>
 >> /*
 >>             +----------+
 >>             | IContext |<--------------+
 >>             +----------+               |
 >>             +----------+               |
 >>                   |                    |
 >>                  / \                   |
 >>                  ---                   |
 >>                   |                    |
 >>         -------------------            |
 >>         |                 |            |
 >>   +-----------+    +--------------+    |
 >>   | MTContext |    | ConsConx     |    |
 >>   +-----------+    +--------------+    |
 >>   +-----------+    | Association f|    |
 >>                    | IContext rst |----+
 >>                    +--------------+
 >> */
 >>
 >> // representing type environments
 >> interface IContext {
 >>   // what is the type of name in this type context?
 >>   IType lookup(String name);
 >> }
 >>
 >> // no entries in type env
 >> class MTContext implements IContext {
 >>
 >>   MTContext() {}
 >>
 >>   IType lookup(String name) {
 >>     return Util.error("");
 >>   }
 >> }
 >>
 >> // one more
 >> class ConsConx implements IContext {
 >>   Association fst;
 >>   IContext rst;
 >>
 >>   ConsConx(Association fst, IContext rst) {
 >>     this.fst = fst;
 >>     this.rst = rst;
 >>   }
 >>
 >>   IType lookup(String n) {
 >>     if (this.fst.defines(n))
 >>       return this.fst.type;
 >>     else
 >>       return this.rst.lookup(n);
 >>   }
 >> }
 >>
 >> // an association in a type context
 >> class Association {
 >>   String name;
 >>   IType type;
 >>
 >>   Association(String name, IType type) {
 >>     this.name = name;
 >>     this.type = type;
 >>   }
 >>
 >>   // is this.name the given name?
 >>   boolean defines(String name) {
 >>     return this.name.equals(name);
 >>   }
 >>
 >> }
 >>
 >> /*
 >>                             
 >> +--------------------------------------------+
 >>                            |  
 >> ISignatures                                | 
 >> <----------------------------+
 >>                             
 >> +-------------------------------------------- 
 >> +                             |
 >>                             
 >> +-------------------------------------------- 
 >> +                             |
 >>                            | Signature lookup(className  
 >> x,methodName y) |                             |
 >>                             
 >> +-------------------------------------------- 
 >> +                             |
 >>                                                   
 >> |                                                    |
 >>                                                 /  
 >> \                                                   |
 >>                                                  
 >> ---                                                   |
 >>                                                   
 >> |                                                    |
 >>                          
 >> ---------------------------------------------------                   
 >>          |
 >>                          
 >> |                                                  
 >> |                           |
 >>   +--------------------------------------------+     
 >> +--------------------------------------------+    |
 >>   | MTSig                                      |    |  
 >> ConsSig                                    |    |
 >>   +--------------------------------------------+     
 >> +--------------------------------------------+    |
 >>   +--------------------------------------------+    | Signature  
 >> fst                              |    |
 >>   | Signature lookup(className x,methodName y) |    | ISignatures  
 >> rst                            |-+  |
 >>   +--------------------------------------------+     
 >> +--------------------------------------------+ |  |
 >>                                                     | Signature  
 >> lookup(className x,methodName y) | |  |
 >>                                                      
 >> +--------------------------------------------+ |  |
 >>                                                                       
 >>                               |  |
 >>                                                                       
 >>                               +--+
 >>
 >> */
 >>
 >> // the context of type signatures
 >> interface ISignatures {
 >>   // what is the signature of the given method in the given class  
 >> in this
 >>   // list of signatures?
 >> //  Signature lookup(Class class, String methodName);
 >> }
 >>
 >> class MTSig implements ISignatures {
 >>   MTSig() { }
 >>
 >>   Signature lookup(Class class,String methodName) {
 >>     return Util.error("");
 >>   }
 >> }
 >>
 >> /*
 >> class ConsSig implements ISignatures {
 >>   Signature fst;
 >>   ISignatures rst;
 >>
 >>   ConsSig(Signature fst, ISignatures rst) {
 >>     this.fst = fst;
 >>     this.rst = rst;
 >>   }
 >>
 >>   Signature lookup(Class x,String methodName) {
 >>     if (this.fst.defines(x,y))
 >> 	   return this.fst.signature;
 >>     else
 >>  	   return this.rst.lookup(x,y);
 >>   }
 >> }
 >> // a method signature, relative to a class
 >> class Signature {
 >>   Class class;
 >>   String name;
 >>   ITypes domain;
 >>
 >>   Signature(Class class, String name, ITypes domain) {
 >>     this.class = class;
 >>     this.name = name;
 >>     this.domain = domain;
 >>   }
 >>   // is this.name the given name?
 >>   boolean defines(Class className, String methodName) {
 >>     return this.methodName.equals(methodName)
 >>         && this.class.name.equals(className);
 >>   }
 >> }
 >> */
 >>
 >> // interface ITypes {}
 >>
 >>
 >>
 >> /*  
 >> --------------------------------------------------------------------- 
 >> --------
 >>    translate this class into the date representation (as well as  
 >> possible):
 >>    class Book {
 >>     String author;
 >>     int sold;
 >>     Book(String author, int sold) {
 >>      this.author = author;
 >>      this.sold = sold;
 >>     }
 >>    }
 >> */
 >>
 >> class ClassExample {
 >>  Class book = new Class("Book");
 >>  ClassExample() { }
 >> }
 >>
 >> /*  
 >> --------------------------------------------------------------------- 
 >> --------
 >>    translate this expression into your representation:
 >>    new Book("Felleisen","How to Design Programs")
 >> */
 >>
 >> class ExpressionExample {
 >>  ClassExample ce = new ClassExample();
 >>  Class book = this.ce.book;
 >>
 >>  IExpression author = new StringConst("Felleisen");
 >>  IExpression sold = new IntegerConst(10);
 >>  IListExp mt = new None();
 >>  IListExp one = new ConsExp(this.sold,this.mt);
 >>  IListExp two = new ConsExp(this.author,this.one);
 >>  IExpression c = new Construction(this.book,this.two);
 >>
 >>  ExpressionExample() { }
 >> }
 >>
 >> *** Environment:
 >> macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1:  
 >> Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386  
 >> i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 >> Docs Installed:
 >> (("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour"  
 >> "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign"  
 >> "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide"  
 >> "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web- 
 >> server-guide" "web-server-reference" "tex2page" "beginning"  
 >> "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 >> "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate"  
 >> "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
 >> Human Language: english
 >> (current-memory-use) 308089980
 >>
 >> Collections:
 >> (("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance"  
 >> "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/ 
 >> 370.4/collects" non-existent-path) ("/Users/matthias/plt/collects"  
 >> ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator- 
 >> parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext"  
 >> "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime"  
 >> "games" "graphics" "guibuilder" "handin-client" "handin-server"  
 >> "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons"  
 >> "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make"  
 >> "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme"  
 >> "mztake" "net" "openssl" "parser-tools" "planet" "plot"  
 >> "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs"  
 >> "readline" "repos-time-stamp" "scribble" "scribblings" "setup"  
 >> "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi"  
 >> "srpersist" "stepper" "string-constants" "swindle" "syntax"  
 >> "syntax-color" "teachpack" "test-suite" "tests!
 >>  " "tex2page" "texpict" "trace" "version" "waterworld" "web- 
 >> server" "wxme" "xelda" "xml"))
 >> Computer Language: (("Experimental Languages" "ProfessorJ"  
 >> "Beginner") ((field) (#f) (#t) (#f) (#t) (#t)))
 >
 

State changed from "open" to "closed" by kathyg at Thu, 02 Aug 2007 10:59:22 -0400
Reason>>> Corrected in svn

