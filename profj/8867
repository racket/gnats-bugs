From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Aug 13 19:09:50 2007
Received: from wr-out-0506.google.com (wr-out-0506.google.com [64.233.184.231])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l7DN9oor021875
	for <bugs@bugs.plt-scheme.org>; Mon, 13 Aug 2007 19:09:50 -0400
Message-Id: <200708132309.l7DN9fJD021869@champlain.ccs.neu.edu>
Date: Mon, 13 Aug 2007 19:09:41 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: professorJ gives me a RANDOM error on interaction 

>Number:         8867
>Category:       profj
>Synopsis:       professorJ gives me a RANDOM error on interaction
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Aug 13 19:10:01 -0400 2007
>Closed-Date:    Mon Aug 13 19:36:04 -0400 2007
>Last-Modified:  Mon Aug 13 19:45:01 -0400 2007
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        371-svn11aug2007
>Environment:
macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1: Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide" "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web-server-guide" "web-server-reference" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
Human Language: english
(current-memory-use) 320175660

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/371/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "!
 test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
Welcome to DrScheme, version 371-svn11aug2007 [3m].
Language: ProfessorJ: Intermediate.
> new Game().run()
true
> new Game().run()
true
> Game g = new Game()
Syntax error detected
Found a repitition of identifer; the required number are present. Expected a ( next.
> 
>How-To-Repeat:
FILE ATTACHED: 

import draw.*; 
import geometry.*; 
import colors.*; 

import java.util.Random;

// the world of worm games 
class WormWorld extends World {
  Posn ORIGIN = new Posn(0,0);
  int WIDTH = 600; 
  int HEIGHT = 600; 

  Food f; 
  Worm w; 
  AColor BGD = new Yellow(); 
  
  WormWorld(Food f, Worm w) {
    this.f = f; 
    this.w = w; 
  }

  boolean run() { 
    return this.bigBang(this.WIDTH,this.HEIGHT,.05) && this.theCanvas.show();
  }
  
  boolean show() {
    return this.theCanvas.show() && this.draw(); 
  }

  boolean draw() { 
    return this.drawBackground() 
        && this.w.draw(theCanvas)
        && this.f.draw(theCanvas);
  }
  
  // draw the background (a big yellow rectangle)
  boolean drawBackground() {
    return this.theCanvas.drawRect(this.ORIGIN,this.WIDTH,this.HEIGHT,this.BGD);
  }
  
  World onTick() { 
    Worm candidate = this.w.move();
    if (this.f.eatable(this.w.toLocation())) {
      return new WormWorld(this.f.next(this),this.w.eat()); }
    else {
      if (candidate.overlapSelf()) {
        return this.endOfWorld("good bye"); }
      else {
        if (candidate.inside(this)) {
          return new WormWorld(this.f,candidate); }
        else {
          return this.endOfWorld("good bye"); 
        }
      }
    }
  }
  
  World onKeyEvent(String s) { 
    if (s.equals("left")) {
      return new WormWorld(this.f,this.w.steer(s));
    } else {
      if (s.equals("right")) {
        return new WormWorld(this.f,this.w.steer(s));
        } else {
          if (s.equals("up")) {
            return new WormWorld(this.f,this.w.steer(s));
          } else {
            if (s.equals("down")) {
              return new WormWorld(this.f,this.w.steer(s));
            } else {
              return this; 
            }
          }
        }
     }
  }
}  

// a piece of food in the worm world 
class Food {
  int x; 
  int y;
  
  int SIZE = 10;
  AColor COLOR = new Red(); 
  Random r = new Random();
  
  Food(int x, int y) {
    this.x = x; 
    this.y = y; 
  }

  Food next(WormWorld ww) { 
    return this.okay(ww,this.r.nextInt(ww.WIDTH),this.r.nextInt(ww.HEIGHT));
  }
  
  Food okay(WormWorld ww, int x, int y) {
    if ((this.x != x) || (this.y != y)) {
      return new Food(x,y); }
    else {
      return this.next(ww); }
  }
      
  boolean eatable(Location p) { 
    return p.distance(this.x,this.y) <= this.SIZE;
  }
  
  boolean draw(Canvas c) { 
    return c.drawRect(new Posn(this.x,this.y),this.SIZE,this.SIZE,this.COLOR);
  }
}    

// a moving worm: represented as a single segment
class Worm {
  Segment head; 
  ISegments tail; 
  Worm(Segment head, ISegments tail) { 
    this.head = head; 
    this.tail = tail; 
  }

  // draw this worm
  boolean draw(Canvas c) { 
    return this.head.draw(c) && this.tail.draw(c); 
  }
 
  // move this worm 
  Worm move() { 
    return new Worm(this.head.move(),this.tail.move(this.head)); 
  }

  // change this worm's direction to s
  Worm steer(String s) { 
    return new Worm(this.head.steer(s),this.tail); 
  }
  
  // move up head of this worm, replace old head with new tail segment
  Worm eat() {
    return new Worm(this.head.move(),new Cons(this.head,this.tail));
  }
 
  // is this worm inside the walls of ww?
  boolean inside(WormWorld ww) { 
    return this.head.inside(ww); 
  }
  
  // is this worm's head at the same place as any of its segments?
  boolean overlapSelf() {
    return this.tail.sameLocation(this.head.x,this.head.y); 
  }   
  
  // where is the worm 
  Location toLocation() { 
    return this.head.toLocation(); 
  }
}

// a worm's tail: a sequence of segments 
interface ISegments {
  // draw this tail
  boolean draw(Canvas x);

  // move this tail 
  // [accumulator: x is where the preceding element was]
  ISegments move(Segment x);

  // is any of this worm's segments occupying the location x and y? 
  boolean sameLocation(int x, int y);   
}

class Mt implements ISegments {
  Mt() { }

  boolean draw(Canvas x) { return true; }
  
  ISegments move(Segment x) { return this; }
  
  boolean sameLocation(int x, int y) { return false; }   
}

class Cons implements ISegments {
  Segment first;
  ISegments rest;

  Cons(Segment first, ISegments rest) {
    this.first = first;
    this.rest = rest;
  }
  
  boolean draw(Canvas x) { 
    return this.first.draw(x) && this.rest.draw(x); 
  }
  
  ISegments move(Segment x) { 
    return new Cons(this.first.moveUp(x),this.rest.move(this.first)); 
  }
  
  boolean sameLocation(int x, int y) { 
    return this.first.sameLocation(x,y) || this.rest.sameLocation(x,y);
  }   
}

class Segment {       
  AColor COLOR = new Blue(); 
  int SIZE = 6; // <---- is this independent of the world SIZE???
  int RADIUS = this.SIZE / 2; 

  int x; 
  int y; 
  String dir; 
  
  Segment(int x, int y, String dir) {
    this.x = x;
    this.y = y;
    this.dir = dir; 
  }
  
  boolean draw(Canvas can) { 
    return can.drawDisk(new Posn(this.x,this.y),this.RADIUS,this.COLOR);
  }
  
  // change this worms direction (assume: d is a direction)
  Segment steer(String d) {
    return new Segment(this.x,this.y,d);
  }

  // is this worm inside of the given world? 
  boolean inside(WormWorld ww) { 
    return (0 <= this.x && this.x <= ww.WIDTH) 
        && (0 <= this.y && this.y <= ww.HEIGHT);
  }
  
  // move this worm one step 
  Segment move() {
    if (this.dir.equals("left")) {
      return new Segment(this.x - this.SIZE,this.y,this.dir); }
    else { 
      if (this.dir.equals("right")) {
        return new Segment(this.x + this.SIZE,this.y,this.dir); }
      else {
        if (this.dir.equals("up")) {
          return new Segment(this.x,this.y-this.SIZE,this.dir); }
        else {
          if (this.dir.equals("down")) {
            return new Segment(this.x,this.y+this.SIZE,this.dir); }
          else {
            return Util.error("bad direction: ".concat(this.dir)); }
        }
      }
    }
  }
  
  // move this segment to where the given one was 
  Segment moveUp(Segment other) {
    return new Segment(other.x,other.y,this.dir);
  }  

  // is this segment in the same location as x and y? 
  boolean sameLocation(int x, int y) { 
    return this.x == x && this.y == y;
  } 
  
  // where is this segment
  Location toLocation() { 
    return new Location(this.x,this.y); 
  }
}

class Location extends Posn {
  Location(int x, int y) { super(x,y); }
  
  double distance(int x, int y) {
    int deltax = this.x - x; 
    int deltay = this.y - y; 
    return Math.sqrt( deltax * deltax + deltay * deltay );
  }
} 


// -----------------------------------------------------------------------------

class Game {
  Random r = new Random();
  Food f = new Food(100 + this.r.nextInt(400),100 + this.r.nextInt(400));
  int wx = 100 + this.r.nextInt(400);
  int wy = 100 + this.r.nextInt(400);
  Segment head = new Segment(this.wx,this.wy,"left");
  Worm w = new Worm(this.head,
                    new Cons(
                      new Segment(this.head.x+this.head.SIZE,this.head.y,"-"),
                      new Mt()));
             
  WormWorld ww = new WormWorld(this.f,this.w);
  
  Game() { }

  boolean run() { return this.ww.run(); }
}
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8867: professorJ gives me a RANDOM error on interaction 
Date: Mon, 13 Aug 2007 19:19:25 -0400

 I submitted a bug report, also about professorJ, 10 minutes earlier  
 than this one. Has anyone seen it? ARGH!
 
 
 On Aug 13, 2007, at 7:10 PM, matthias@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8867
 >
 > Reported by matthias for release: 371-svn11aug2007
 >
 > *** Description:
 > Welcome to DrScheme, version 371-svn11aug2007 [3m].
 > Language: ProfessorJ: Intermediate.
 >> new Game().run()
 > true
 >> new Game().run()
 > true
 >> Game g = new Game()
 > Syntax error detected
 > Found a repitition of identifer; the required number are present.  
 > Expected a ( next.
 >>
 >
 > *** How to repeat:
 > FILE ATTACHED:
 >
 > import draw.*;
 > import geometry.*;
 > import colors.*;
 >
 > import java.util.Random;
 >
 > // the world of worm games
 > class WormWorld extends World {
 >   Posn ORIGIN = new Posn(0,0);
 >   int WIDTH = 600;
 >   int HEIGHT = 600;
 >
 >   Food f;
 >   Worm w;
 >   AColor BGD = new Yellow();
 >
 >   WormWorld(Food f, Worm w) {
 >     this.f = f;
 >     this.w = w;
 >   }
 >
 >   boolean run() {
 >     return this.bigBang(this.WIDTH,this.HEIGHT,.05) &&  
 > this.theCanvas.show();
 >   }
 >
 >   boolean show() {
 >     return this.theCanvas.show() && this.draw();
 >   }
 >
 >   boolean draw() {
 >     return this.drawBackground()
 >         && this.w.draw(theCanvas)
 >         && this.f.draw(theCanvas);
 >   }
 >
 >   // draw the background (a big yellow rectangle)
 >   boolean drawBackground() {
 >     return this.theCanvas.drawRect 
 > (this.ORIGIN,this.WIDTH,this.HEIGHT,this.BGD);
 >   }
 >
 >   World onTick() {
 >     Worm candidate = this.w.move();
 >     if (this.f.eatable(this.w.toLocation())) {
 >       return new WormWorld(this.f.next(this),this.w.eat()); }
 >     else {
 >       if (candidate.overlapSelf()) {
 >         return this.endOfWorld("good bye"); }
 >       else {
 >         if (candidate.inside(this)) {
 >           return new WormWorld(this.f,candidate); }
 >         else {
 >           return this.endOfWorld("good bye");
 >         }
 >       }
 >     }
 >   }
 >
 >   World onKeyEvent(String s) {
 >     if (s.equals("left")) {
 >       return new WormWorld(this.f,this.w.steer(s));
 >     } else {
 >       if (s.equals("right")) {
 >         return new WormWorld(this.f,this.w.steer(s));
 >         } else {
 >           if (s.equals("up")) {
 >             return new WormWorld(this.f,this.w.steer(s));
 >           } else {
 >             if (s.equals("down")) {
 >               return new WormWorld(this.f,this.w.steer(s));
 >             } else {
 >               return this;
 >             }
 >           }
 >         }
 >      }
 >   }
 > }
 >
 > // a piece of food in the worm world
 > class Food {
 >   int x;
 >   int y;
 >
 >   int SIZE = 10;
 >   AColor COLOR = new Red();
 >   Random r = new Random();
 >
 >   Food(int x, int y) {
 >     this.x = x;
 >     this.y = y;
 >   }
 >
 >   Food next(WormWorld ww) {
 >     return this.okay(ww,this.r.nextInt(ww.WIDTH),this.r.nextInt 
 > (ww.HEIGHT));
 >   }
 >
 >   Food okay(WormWorld ww, int x, int y) {
 >     if ((this.x != x) || (this.y != y)) {
 >       return new Food(x,y); }
 >     else {
 >       return this.next(ww); }
 >   }
 >
 >   boolean eatable(Location p) {
 >     return p.distance(this.x,this.y) <= this.SIZE;
 >   }
 >
 >   boolean draw(Canvas c) {
 >     return c.drawRect(new Posn 
 > (this.x,this.y),this.SIZE,this.SIZE,this.COLOR);
 >   }
 > }
 >
 > // a moving worm: represented as a single segment
 > class Worm {
 >   Segment head;
 >   ISegments tail;
 >   Worm(Segment head, ISegments tail) {
 >     this.head = head;
 >     this.tail = tail;
 >   }
 >
 >   // draw this worm
 >   boolean draw(Canvas c) {
 >     return this.head.draw(c) && this.tail.draw(c);
 >   }
 >
 >   // move this worm
 >   Worm move() {
 >     return new Worm(this.head.move(),this.tail.move(this.head));
 >   }
 >
 >   // change this worm's direction to s
 >   Worm steer(String s) {
 >     return new Worm(this.head.steer(s),this.tail);
 >   }
 >
 >   // move up head of this worm, replace old head with new tail segment
 >   Worm eat() {
 >     return new Worm(this.head.move(),new Cons(this.head,this.tail));
 >   }
 >
 >   // is this worm inside the walls of ww?
 >   boolean inside(WormWorld ww) {
 >     return this.head.inside(ww);
 >   }
 >
 >   // is this worm's head at the same place as any of its segments?
 >   boolean overlapSelf() {
 >     return this.tail.sameLocation(this.head.x,this.head.y);
 >   }
 >
 >   // where is the worm
 >   Location toLocation() {
 >     return this.head.toLocation();
 >   }
 > }
 >
 > // a worm's tail: a sequence of segments
 > interface ISegments {
 >   // draw this tail
 >   boolean draw(Canvas x);
 >
 >   // move this tail
 >   // [accumulator: x is where the preceding element was]
 >   ISegments move(Segment x);
 >
 >   // is any of this worm's segments occupying the location x and y?
 >   boolean sameLocation(int x, int y);
 > }
 >
 > class Mt implements ISegments {
 >   Mt() { }
 >
 >   boolean draw(Canvas x) { return true; }
 >
 >   ISegments move(Segment x) { return this; }
 >
 >   boolean sameLocation(int x, int y) { return false; }
 > }
 >
 > class Cons implements ISegments {
 >   Segment first;
 >   ISegments rest;
 >
 >   Cons(Segment first, ISegments rest) {
 >     this.first = first;
 >     this.rest = rest;
 >   }
 >
 >   boolean draw(Canvas x) {
 >     return this.first.draw(x) && this.rest.draw(x);
 >   }
 >
 >   ISegments move(Segment x) {
 >     return new Cons(this.first.moveUp(x),this.rest.move(this.first));
 >   }
 >
 >   boolean sameLocation(int x, int y) {
 >     return this.first.sameLocation(x,y) || this.rest.sameLocation 
 > (x,y);
 >   }
 > }
 >
 > class Segment {
 >   AColor COLOR = new Blue();
 >   int SIZE = 6; // <---- is this independent of the world SIZE???
 >   int RADIUS = this.SIZE / 2;
 >
 >   int x;
 >   int y;
 >   String dir;
 >
 >   Segment(int x, int y, String dir) {
 >     this.x = x;
 >     this.y = y;
 >     this.dir = dir;
 >   }
 >
 >   boolean draw(Canvas can) {
 >     return can.drawDisk(new Posn 
 > (this.x,this.y),this.RADIUS,this.COLOR);
 >   }
 >
 >   // change this worms direction (assume: d is a direction)
 >   Segment steer(String d) {
 >     return new Segment(this.x,this.y,d);
 >   }
 >
 >   // is this worm inside of the given world?
 >   boolean inside(WormWorld ww) {
 >     return (0 <= this.x && this.x <= ww.WIDTH)
 >         && (0 <= this.y && this.y <= ww.HEIGHT);
 >   }
 >
 >   // move this worm one step
 >   Segment move() {
 >     if (this.dir.equals("left")) {
 >       return new Segment(this.x - this.SIZE,this.y,this.dir); }
 >     else {
 >       if (this.dir.equals("right")) {
 >         return new Segment(this.x + this.SIZE,this.y,this.dir); }
 >       else {
 >         if (this.dir.equals("up")) {
 >           return new Segment(this.x,this.y-this.SIZE,this.dir); }
 >         else {
 >           if (this.dir.equals("down")) {
 >             return new Segment(this.x,this.y+this.SIZE,this.dir); }
 >           else {
 >             return Util.error("bad direction: ".concat(this.dir)); }
 >         }
 >       }
 >     }
 >   }
 >
 >   // move this segment to where the given one was
 >   Segment moveUp(Segment other) {
 >     return new Segment(other.x,other.y,this.dir);
 >   }
 >
 >   // is this segment in the same location as x and y?
 >   boolean sameLocation(int x, int y) {
 >     return this.x == x && this.y == y;
 >   }
 >
 >   // where is this segment
 >   Location toLocation() {
 >     return new Location(this.x,this.y);
 >   }
 > }
 >
 > class Location extends Posn {
 >   Location(int x, int y) { super(x,y); }
 >
 >   double distance(int x, int y) {
 >     int deltax = this.x - x;
 >     int deltay = this.y - y;
 >     return Math.sqrt( deltax * deltax + deltay * deltay );
 >   }
 > }
 >
 >
 > //  
 > ---------------------------------------------------------------------- 
 > -------
 >
 > class Game {
 >   Random r = new Random();
 >   Food f = new Food(100 + this.r.nextInt(400),100 + this.r.nextInt 
 > (400));
 >   int wx = 100 + this.r.nextInt(400);
 >   int wy = 100 + this.r.nextInt(400);
 >   Segment head = new Segment(this.wx,this.wy,"left");
 >   Worm w = new Worm(this.head,
 >                     new Cons(
 >                       new Segment(this.head.x 
 > +this.head.SIZE,this.head.y,"-"),
 >                       new Mt()));
 >
 >   WormWorld ww = new WormWorld(this.f,this.w);
 >
 >   Game() { }
 >
 >   boolean run() { return this.ww.run(); }
 > }
 >
 > *** Environment:
 > macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1:  
 > Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386  
 > i386" (i386-macosx/3m) (get-display-depth) = 32
 > Docs Installed:
 > (("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour"  
 > "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign"  
 > "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide"  
 > "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web- 
 > server-guide" "web-server-reference" "tex2page" "beginning"  
 > "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 > "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate"  
 > "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
 > Human Language: english
 > (current-memory-use) 320175660
 >
 > Collections:
 > (("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance"  
 > "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/371/ 
 > collects" non-existent-path) ("/Users/matthias/plt/collects"  
 > ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator- 
 > parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext"  
 > "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime"  
 > "games" "graphics" "guibuilder" "handin-client" "handin-server"  
 > "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info- 
 > domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred"  
 > "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake"  
 > "net" "openssl" "parser-tools" "planet" "plot" "preprocessor"  
 > "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos- 
 > time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail"  
 > "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist"  
 > "stepper" "string-constants" "swindle" "syntax" "syntax-color"  
 > "teachpack" "test-box-recovery" "!
 >  test-suite" "tests" "tex2page" "texpict" "trace" "version"  
 > "waterworld" "web-server" "wxme" "xelda" "xml"))
 > Computer Language: (("Experimental Languages" "ProfessorJ"  
 > "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
 >
 

State changed from "open" to "closed" by kathyg at Mon, 13 Aug 2007 19:36:04 -0400
Reason>>> Corrected in svn.

From: Kathy Gray <kathyg@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8867: professorJ gives me a RANDOM error on interaction 
Date: Tue, 14 Aug 2007 00:40:43 +0100

 There doesn't seem to be an appropriately timed one in gnats.
 -Kathy
 
 
 On Aug 14, 2007, at 12:19 AM, Matthias Felleisen wrote:
 
 > I submitted a bug report, also about professorJ, 10 minutes earlier  
 > than this one. Has anyone seen it? ARGH!
 >
 >
 > On Aug 13, 2007, at 7:10 PM, matthias@ccs.neu.edu wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8867
 >>
 >> Reported by matthias for release: 371-svn11aug2007
 >>
 >> *** Description:
 >> Welcome to DrScheme, version 371-svn11aug2007 [3m].
 >> Language: ProfessorJ: Intermediate.
 >>> new Game().run()
 >> true
 >>> new Game().run()
 >> true
 >>> Game g = new Game()
 >> Syntax error detected
 >> Found a repitition of identifer; the required number are present.  
 >> Expected a ( next.
 >>>
 >>
 >> *** How to repeat:
 >> FILE ATTACHED:
 >>
 >> import draw.*;
 >> import geometry.*;
 >> import colors.*;
 >>
 >> import java.util.Random;
 >>
 >> // the world of worm games
 >> class WormWorld extends World {
 >>   Posn ORIGIN = new Posn(0,0);
 >>   int WIDTH = 600;
 >>   int HEIGHT = 600;
 >>
 >>   Food f;
 >>   Worm w;
 >>   AColor BGD = new Yellow();
 >>
 >>   WormWorld(Food f, Worm w) {
 >>     this.f = f;
 >>     this.w = w;
 >>   }
 >>
 >>   boolean run() {
 >>     return this.bigBang(this.WIDTH,this.HEIGHT,.05) &&  
 >> this.theCanvas.show();
 >>   }
 >>
 >>   boolean show() {
 >>     return this.theCanvas.show() && this.draw();
 >>   }
 >>
 >>   boolean draw() {
 >>     return this.drawBackground()
 >>         && this.w.draw(theCanvas)
 >>         && this.f.draw(theCanvas);
 >>   }
 >>
 >>   // draw the background (a big yellow rectangle)
 >>   boolean drawBackground() {
 >>     return this.theCanvas.drawRect 
 >> (this.ORIGIN,this.WIDTH,this.HEIGHT,this.BGD);
 >>   }
 >>
 >>   World onTick() {
 >>     Worm candidate = this.w.move();
 >>     if (this.f.eatable(this.w.toLocation())) {
 >>       return new WormWorld(this.f.next(this),this.w.eat()); }
 >>     else {
 >>       if (candidate.overlapSelf()) {
 >>         return this.endOfWorld("good bye"); }
 >>       else {
 >>         if (candidate.inside(this)) {
 >>           return new WormWorld(this.f,candidate); }
 >>         else {
 >>           return this.endOfWorld("good bye");
 >>         }
 >>       }
 >>     }
 >>   }
 >>
 >>   World onKeyEvent(String s) {
 >>     if (s.equals("left")) {
 >>       return new WormWorld(this.f,this.w.steer(s));
 >>     } else {
 >>       if (s.equals("right")) {
 >>         return new WormWorld(this.f,this.w.steer(s));
 >>         } else {
 >>           if (s.equals("up")) {
 >>             return new WormWorld(this.f,this.w.steer(s));
 >>           } else {
 >>             if (s.equals("down")) {
 >>               return new WormWorld(this.f,this.w.steer(s));
 >>             } else {
 >>               return this;
 >>             }
 >>           }
 >>         }
 >>      }
 >>   }
 >> }
 >>
 >> // a piece of food in the worm world
 >> class Food {
 >>   int x;
 >>   int y;
 >>
 >>   int SIZE = 10;
 >>   AColor COLOR = new Red();
 >>   Random r = new Random();
 >>
 >>   Food(int x, int y) {
 >>     this.x = x;
 >>     this.y = y;
 >>   }
 >>
 >>   Food next(WormWorld ww) {
 >>     return this.okay(ww,this.r.nextInt(ww.WIDTH),this.r.nextInt 
 >> (ww.HEIGHT));
 >>   }
 >>
 >>   Food okay(WormWorld ww, int x, int y) {
 >>     if ((this.x != x) || (this.y != y)) {
 >>       return new Food(x,y); }
 >>     else {
 >>       return this.next(ww); }
 >>   }
 >>
 >>   boolean eatable(Location p) {
 >>     return p.distance(this.x,this.y) <= this.SIZE;
 >>   }
 >>
 >>   boolean draw(Canvas c) {
 >>     return c.drawRect(new Posn 
 >> (this.x,this.y),this.SIZE,this.SIZE,this.COLOR);
 >>   }
 >> }
 >>
 >> // a moving worm: represented as a single segment
 >> class Worm {
 >>   Segment head;
 >>   ISegments tail;
 >>   Worm(Segment head, ISegments tail) {
 >>     this.head = head;
 >>     this.tail = tail;
 >>   }
 >>
 >>   // draw this worm
 >>   boolean draw(Canvas c) {
 >>     return this.head.draw(c) && this.tail.draw(c);
 >>   }
 >>
 >>   // move this worm
 >>   Worm move() {
 >>     return new Worm(this.head.move(),this.tail.move(this.head));
 >>   }
 >>
 >>   // change this worm's direction to s
 >>   Worm steer(String s) {
 >>     return new Worm(this.head.steer(s),this.tail);
 >>   }
 >>
 >>   // move up head of this worm, replace old head with new tail  
 >> segment
 >>   Worm eat() {
 >>     return new Worm(this.head.move(),new Cons(this.head,this.tail));
 >>   }
 >>
 >>   // is this worm inside the walls of ww?
 >>   boolean inside(WormWorld ww) {
 >>     return this.head.inside(ww);
 >>   }
 >>
 >>   // is this worm's head at the same place as any of its segments?
 >>   boolean overlapSelf() {
 >>     return this.tail.sameLocation(this.head.x,this.head.y);
 >>   }
 >>
 >>   // where is the worm
 >>   Location toLocation() {
 >>     return this.head.toLocation();
 >>   }
 >> }
 >>
 >> // a worm's tail: a sequence of segments
 >> interface ISegments {
 >>   // draw this tail
 >>   boolean draw(Canvas x);
 >>
 >>   // move this tail
 >>   // [accumulator: x is where the preceding element was]
 >>   ISegments move(Segment x);
 >>
 >>   // is any of this worm's segments occupying the location x and y?
 >>   boolean sameLocation(int x, int y);
 >> }
 >>
 >> class Mt implements ISegments {
 >>   Mt() { }
 >>
 >>   boolean draw(Canvas x) { return true; }
 >>
 >>   ISegments move(Segment x) { return this; }
 >>
 >>   boolean sameLocation(int x, int y) { return false; }
 >> }
 >>
 >> class Cons implements ISegments {
 >>   Segment first;
 >>   ISegments rest;
 >>
 >>   Cons(Segment first, ISegments rest) {
 >>     this.first = first;
 >>     this.rest = rest;
 >>   }
 >>
 >>   boolean draw(Canvas x) {
 >>     return this.first.draw(x) && this.rest.draw(x);
 >>   }
 >>
 >>   ISegments move(Segment x) {
 >>     return new Cons(this.first.moveUp(x),this.rest.move(this.first));
 >>   }
 >>
 >>   boolean sameLocation(int x, int y) {
 >>     return this.first.sameLocation(x,y) || this.rest.sameLocation 
 >> (x,y);
 >>   }
 >> }
 >>
 >> class Segment {
 >>   AColor COLOR = new Blue();
 >>   int SIZE = 6; // <---- is this independent of the world SIZE???
 >>   int RADIUS = this.SIZE / 2;
 >>
 >>   int x;
 >>   int y;
 >>   String dir;
 >>
 >>   Segment(int x, int y, String dir) {
 >>     this.x = x;
 >>     this.y = y;
 >>     this.dir = dir;
 >>   }
 >>
 >>   boolean draw(Canvas can) {
 >>     return can.drawDisk(new Posn 
 >> (this.x,this.y),this.RADIUS,this.COLOR);
 >>   }
 >>
 >>   // change this worms direction (assume: d is a direction)
 >>   Segment steer(String d) {
 >>     return new Segment(this.x,this.y,d);
 >>   }
 >>
 >>   // is this worm inside of the given world?
 >>   boolean inside(WormWorld ww) {
 >>     return (0 <= this.x && this.x <= ww.WIDTH)
 >>         && (0 <= this.y && this.y <= ww.HEIGHT);
 >>   }
 >>
 >>   // move this worm one step
 >>   Segment move() {
 >>     if (this.dir.equals("left")) {
 >>       return new Segment(this.x - this.SIZE,this.y,this.dir); }
 >>     else {
 >>       if (this.dir.equals("right")) {
 >>         return new Segment(this.x + this.SIZE,this.y,this.dir); }
 >>       else {
 >>         if (this.dir.equals("up")) {
 >>           return new Segment(this.x,this.y-this.SIZE,this.dir); }
 >>         else {
 >>           if (this.dir.equals("down")) {
 >>             return new Segment(this.x,this.y+this.SIZE,this.dir); }
 >>           else {
 >>             return Util.error("bad direction: ".concat(this.dir)); }
 >>         }
 >>       }
 >>     }
 >>   }
 >>
 >>   // move this segment to where the given one was
 >>   Segment moveUp(Segment other) {
 >>     return new Segment(other.x,other.y,this.dir);
 >>   }
 >>
 >>   // is this segment in the same location as x and y?
 >>   boolean sameLocation(int x, int y) {
 >>     return this.x == x && this.y == y;
 >>   }
 >>
 >>   // where is this segment
 >>   Location toLocation() {
 >>     return new Location(this.x,this.y);
 >>   }
 >> }
 >>
 >> class Location extends Posn {
 >>   Location(int x, int y) { super(x,y); }
 >>
 >>   double distance(int x, int y) {
 >>     int deltax = this.x - x;
 >>     int deltay = this.y - y;
 >>     return Math.sqrt( deltax * deltax + deltay * deltay );
 >>   }
 >> }
 >>
 >>
 >> //  
 >> --------------------------------------------------------------------- 
 >> --------
 >>
 >> class Game {
 >>   Random r = new Random();
 >>   Food f = new Food(100 + this.r.nextInt(400),100 + this.r.nextInt 
 >> (400));
 >>   int wx = 100 + this.r.nextInt(400);
 >>   int wy = 100 + this.r.nextInt(400);
 >>   Segment head = new Segment(this.wx,this.wy,"left");
 >>   Worm w = new Worm(this.head,
 >>                     new Cons(
 >>                       new Segment(this.head.x 
 >> +this.head.SIZE,this.head.y,"-"),
 >>                       new Mt()));
 >>
 >>   WormWorld ww = new WormWorld(this.f,this.w);
 >>
 >>   Game() { }
 >>
 >>   boolean run() { return this.ww.run(); }
 >> }
 >>
 >> *** Environment:
 >> macosx "Darwin europe.local 8.10.1 Darwin Kernel Version 8.10.1:  
 >> Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386  
 >> i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 >> Docs Installed:
 >> (("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour"  
 >> "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign"  
 >> "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "guide"  
 >> "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web- 
 >> server-guide" "web-server-reference" "tex2page" "beginning"  
 >> "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 >> "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate"  
 >> "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack"))
 >> Human Language: english
 >> (current-memory-use) 320175660
 >>
 >> Collections:
 >> (("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance"  
 >> "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/371/ 
 >> collects" non-existent-path) ("/Users/matthias/plt/collects"  
 >> ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator- 
 >> parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext"  
 >> "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime"  
 >> "games" "graphics" "guibuilder" "handin-client" "handin-server"  
 >> "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons"  
 >> "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make"  
 >> "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme"  
 >> "mztake" "net" "openssl" "parser-tools" "planet" "plot"  
 >> "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs"  
 >> "readline" "repos-time-stamp" "scribble" "scribblings" "setup"  
 >> "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi"  
 >> "srpersist" "stepper" "string-constants" "swindle" "syntax"  
 >> "syntax-color" "teachpack" "test-box-recovery" "!
 >>  test-suite" "tests" "tex2page" "texpict" "trace" "version"  
 >> "waterworld" "web-server" "wxme" "xelda" "xml"))
 >> Computer Language: (("Experimental Languages" "ProfessorJ"  
 >> "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
 >>
 
