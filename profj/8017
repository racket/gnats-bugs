From apache@plt-scheme.org Sun Apr 23 22:07:06 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k3O274Z4003620
	for <bugs@plt-scheme.org>; Sun, 23 Apr 2006 22:07:04 -0400
Message-Id: <200604240207.k3O2743a003617@champlain.ccs.neu.edu>
Date: Sun, 23 Apr 2006 22:07:04 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: ProfessorJ can't cope with calls from native methods to inherited methods

>Number:         8017
>Category:       profj
>Synopsis:       ProfessorJ can't cope with calls from native methods to inherited methods
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Apr 23 22:10:00 -0400 2006
>Last-Modified:  Mon Apr 24 15:08:54 -0400 2006
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301.12-svn21apr2006
>Environment:
macosx "Darwin europe.local 7.9.0 Darwin Kernel Version 7.9.0: Wed Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Users/matthias/plt/collects/doc/r5rs> #<path:/Users/matthias/plt/collects/doc/mzscheme> #<path:/Users/matthias/plt/collects/doc/mred> #<path:/Users/matthias/plt/collects/doc/help> #<path:/Users/matthias/plt/collects/doc/tour> #<path:/Users/matthias/plt/collects/doc/drscheme> #<path:/Users/matthias/plt/collects/doc/srfi> #<path:/Users/matthias/plt/collects/doc/mzlib> #<path:/Users/matthias/plt/collects/doc/misclib> #<path:/Users/matthias/plt/collects/doc/mrlib> #<path:/Users/matthias/plt/collects/doc/framework> #<path:/Users/matthias/plt/collects/doc/mzc> #<path:/Users/matthias/plt/collects/doc/foreign> #<path:/Users/matthias/plt/collects/doc/tools> #<path:/Users/matthias/plt/collects/doc/insidemz> #<path:/Users/matthias/plt/collects/doc/web-server> #<path:/Users/matthias/plt/collects/doc/swindle> #<path:/Users/matthias/plt/collects/doc/plot> #<path:/Users/matthias/plt/collects/doc/teachpack-htdc> #<path:/Users/matthias/plt/collects/doc/t-y-scheme> #<path:/Users/matthias/plt/collects/doc/tex2page> #<path:/Users/matthias/plt/collects/doc/beginning> #<path:/Users/matthias/plt/collects/doc/beginning-abbr> #<path:/Users/matthias/plt/collects/doc/intermediate> #<path:/Users/matthias/plt/collects/doc/intermediate-lambda> #<path:/Users/matthias/plt/collects/doc/advanced> #<path:/Users/matthias/plt/collects/doc/teachpack> #<path:/Users/matthias/plt/collects/doc/profj-beginner> #<path:/Users/matthias/plt/collects/doc/profj-intermediate> #<path:/Users/matthias/plt/collects/doc/profj-advanced>)
Collections:
((#<path:/Users/matthias/Unison/collects/> (#<path:.DS_Store> #<path:date> #<path:finance> #<path:testing> #<path:utils> #<path:web>)) (#<path:/Users/matthias/Library/PLT Scheme/301.12/collects> "non-existent path") (#<path:/Users/matthias/plt/collects> (#<path:.svn> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:CVS> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:plai> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs> #<path:readline> #<path:reduction-semantics> #<path:repos-time-stamp> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f)))
>Description:
declare a class C, with one abstract method A that produces an instance of C; plus one native method N, assume N calls back some n-ary method (for n > 0) in the class; 

derive a class D that implements A (with the creation of a D) and calls N

N will signal an error (method unknown)

If the method is 0-ary, things work out. 
  
>How-To-Repeat:
// file World (this is C from above)
package tmp;

public abstract class World {
    public String done(String s) { return s+"world"; };
    public native boolean bigBang(double s);
    abstract World next(); 
}    

;; file World-native-methods.ss (this implements the native method)
#cs
(module World-native-methods mzscheme
  (require
    (lib "class.ss")
    (lib "String.ss" "profj" "libs" "java" "lang"))
  
  (provide bigBang-double-native)

  (define (bigBang-double-native this accs gets privates s)
    (define nxt (send this next))
    (printf "this is it: ~s\n" (send nxt done (make-java-string "world")))))

// professorJ file (run in drscheme) that
import tmp.*; 

class Down extends World { 
  Down() { }
  public World next() { return new Down(); }
}

----------------------------------------------------------------------

The result in the REPL: 

Welcome to DrScheme, version 301.12-svn21apr2006.
Language: ProfessorJ: Advanced.
> new Down().bigBang(10)
. send: no such method: done for class: Down
> 
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: Kathy Gray <kathyg@cs.utah.edu>
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Sun, 23 Apr 2006 22:22:20 -0400

 BTW, I had the tmp package in the htdch directory and used the 
 following info and installer files:
 
 (module info (lib "infotab.ss" "setup")
    (define name "Tmp Teachpack")
    (define install-collection "installer.ss")
    #;(define pre-install-collection "pre-installer.ss"))
 
 
 (module installer mzscheme
    (require (lib "compile.ss" "profj"))
    (provide installer)
 
    (define (mprintf . a)
      (fprintf a (current-error-port)))
 
    (define (installer plthome)
      (let ((draw-path (build-path (collection-path "htdch" "tmp"))))
        (let ((javac
               (lambda (file)
                 (parameterize ([current-load-relative-directory 
 draw-path]
                                [current-directory draw-path] )
                   (compile-java 'file 'file 'full
                                 (build-path draw-path file)
                                 #f #f)))))
          (javac "World.java")))))
 
 And yes, I had added the directory to the info file for htdch before I 
 ran setup. -- Matthias
 
 (module info (lib "infotab.ss" "setup")
    (define name "htdch")
    (define compile-subcollections (list (list "htdch" "draw")
 				       (list "htdch" "graphics")
                                         (list "htdch" "idraw")
                                         (list "htdch" "tmp")
 				       ))
    )
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Sun, 23 Apr 2006 21:05:52 -0600

 Well, at a first glance through your code, I think this is a  
 misunderstanding, not a bug.
 Your scheme code tries to use a method 'done'. From the Scheme  
 perspective there is no method 'done'. There is a method done- 
 java.lang.String. When using the 'native' interface, the programmer  
 has to follow the name mangling conventions of the compiler.
 Do you have any problems when you change the code to the mangled  
 method name instead? (with no arity methods the mangled name is the  
 same as the method name)
 
 -Kathy
 
 p.s. I predict this problem would not have arisen if you were using  
 'dynamic' instead.
 
 On Apr 23, 2006, at 8:10 PM, matthias@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8017
 >
 > Reported by matthias for release: 301.12-svn21apr2006
 >
 > *** Description:
 > declare a class C, with one abstract method A that produces an  
 > instance of C; plus one native method N, assume N calls back some n- 
 > ary method (for n > 0) in the class;
 >
 > derive a class D that implements A (with the creation of a D) and  
 > calls N
 >
 > N will signal an error (method unknown)
 >
 > If the method is 0-ary, things work out.
 >
 >
 > *** How to repeat:
 > // file World (this is C from above)
 > package tmp;
 >
 > public abstract class World {
 >     public String done(String s) { return s+"world"; };
 >     public native boolean bigBang(double s);
 >     abstract World next();
 > }
 >
 > ;; file World-native-methods.ss (this implements the native method)
 > #cs
 > (module World-native-methods mzscheme
 >   (require
 >     (lib "class.ss")
 >     (lib "String.ss" "profj" "libs" "java" "lang"))
 >
 >   (provide bigBang-double-native)
 >
 >   (define (bigBang-double-native this accs gets privates s)
 >     (define nxt (send this next))
 >     (printf "this is it: ~s\n" (send nxt done (make-java-string  
 > "world")))))
 >
 > // professorJ file (run in drscheme) that
 > import tmp.*;
 >
 > class Down extends World {
 >   Down() { }
 >   public World next() { return new Down(); }
 > }
 >
 > ----------------------------------------------------------------------
 >
 > The result in the REPL:
 >
 > Welcome to DrScheme, version 301.12-svn21apr2006.
 > Language: ProfessorJ: Advanced.
 >> new Down().bigBang(10)
 > . send: no such method: done for class: Down
 >>
 >
 > *** Environment:
 > macosx "Darwin europe.local 7.9.0 Darwin Kernel Version 7.9.0: Wed  
 > Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/RELEASE_PPC   
 > Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
 > Docs Installed:
 > (#<path:/Users/matthias/plt/collects/doc/r5rs> #<path:/Users/ 
 > matthias/plt/collects/doc/mzscheme> #<path:/Users/matthias/plt/ 
 > collects/doc/mred> #<path:/Users/matthias/plt/collects/doc/help>  
 > #<path:/Users/matthias/plt/collects/doc/tour> #<path:/Users/ 
 > matthias/plt/collects/doc/drscheme> #<path:/Users/matthias/plt/ 
 > collects/doc/srfi> #<path:/Users/matthias/plt/collects/doc/mzlib>  
 > #<path:/Users/matthias/plt/collects/doc/misclib> #<path:/Users/ 
 > matthias/plt/collects/doc/mrlib> #<path:/Users/matthias/plt/ 
 > collects/doc/framework> #<path:/Users/matthias/plt/collects/doc/ 
 > mzc> #<path:/Users/matthias/plt/collects/doc/foreign> #<path:/Users/ 
 > matthias/plt/collects/doc/tools> #<path:/Users/matthias/plt/ 
 > collects/doc/insidemz> #<path:/Users/matthias/plt/collects/doc/web- 
 > server> #<path:/Users/matthias/plt/collects/doc/swindle> #<path:/ 
 > Users/matthias/plt/collects/doc/plot> #<path:/Users/matthias/plt/ 
 > collects/doc/teachpack-htdc> #<path:/Users/matthias/plt/collects/ 
 > doc/t-y-scheme> #<path:/Users/matt!
 >  hias/plt/collects/doc/tex2page> #<path:/Users/matthias/plt/ 
 > collects/doc/beginning> #<path:/Users/matthias/plt/collects/doc/ 
 > beginning-abbr> #<path:/Users/matthias/plt/collects/doc/ 
 > intermediate> #<path:/Users/matthias/plt/collects/doc/intermediate- 
 > lambda> #<path:/Users/matthias/plt/collects/doc/advanced> #<path:/ 
 > Users/matthias/plt/collects/doc/teachpack> #<path:/Users/matthias/ 
 > plt/collects/doc/profj-beginner> #<path:/Users/matthias/plt/ 
 > collects/doc/profj-intermediate> #<path:/Users/matthias/plt/ 
 > collects/doc/profj-advanced>)
 > Collections:
 > ((#<path:/Users/matthias/Unison/collects/> (#<path:.DS_Store>  
 > #<path:date> #<path:finance> #<path:testing> #<path:utils>  
 > #<path:web>)) (#<path:/Users/matthias/Library/PLT Scheme/301.12/ 
 > collects> "non-existent path") (#<path:/Users/matthias/plt/ 
 > collects> (#<path:.svn> #<path:afm> #<path:algol60> #<path:browser>  
 > #<path:compiler> #<path:CVS> #<path:defaults> #<path:doc>  
 > #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl>  
 > #<path:errortrace> #<path:ffi> #<path:finish-install>  
 > #<path:framework> #<path:frtime> #<path:games> #<path:graphics>  
 > #<path:guibuilder> #<path:handin-client> #<path:handin-server>  
 > #<path:help> #<path:hierlist> #<path:honu> #<path:honu-module>  
 > #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info- 
 > domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred>  
 > #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom>  
 > #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net>  
 > #<path:openssl> #<path:parser-tools> #<path:plai> #<path:plane!
 >  t> #<path:plot> #<path:preprocessor> #<path:profj>  
 > #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs>  
 > #<path:readline> #<path:reduction-semantics> #<path:repos-time- 
 > stamp> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper>  
 > #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi>  
 > #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string- 
 > constants> #<path:swindle> #<path:syntax> #<path:syntax-color>  
 > #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict>  
 > #<path:trace> #<path:version> #<path:waterworld> #<path:web-server>  
 > #<path:xelda> #<path:xml>)))
 > Human Language: english
 > Teachpack filenames: ()
 > Computer Language: (("Experimental Languages" "ProfessorJ"  
 > "Advanced") ((field) (#f)))
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 07:28:45 -0400

 On Apr 23, 2006, at 11:05 PM, Kathy Gray wrote:
 
 > Well, at a first glance through your code, I think this is a 
 > misunderstanding, not a bug.
 > Your scheme code tries to use a method 'done'. From the Scheme 
 > perspective there is no method 'done'. There is a method 
 > done-java.lang.String. When using the 'native' interface, the 
 > programmer has to follow the name mangling conventions of the 
 > compiler.
 > Do you have any problems when you change the code to the mangled 
 > method name instead? (with no arity methods the mangled name is the 
 > same as the method name)
 >
 
 ARGH.
 
 Why is the method Class-field-set! also inaccessible from the Scheme 
 code?
 
 -- Matthias
 
 
 > -Kathy
 >
 > p.s. I predict this problem would not have arisen if you were using 
 > 'dynamic' instead.
 >
 > On Apr 23, 2006, at 8:10 PM, matthias@ccs.neu.edu wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8017
 >>
 >> Reported by matthias for release: 301.12-svn21apr2006
 >>
 >> *** Description:
 >> declare a class C, with one abstract method A that produces an 
 >> instance of C; plus one native method N, assume N calls back some 
 >> n-ary method (for n > 0) in the class;
 >>
 >> derive a class D that implements A (with the creation of a D) and 
 >> calls N
 >>
 >> N will signal an error (method unknown)
 >>
 >> If the method is 0-ary, things work out.
 >>
 >>
 >> *** How to repeat:
 >> // file World (this is C from above)
 >> package tmp;
 >>
 >> public abstract class World {
 >>     public String done(String s) { return s+"world"; };
 >>     public native boolean bigBang(double s);
 >>     abstract World next();
 >> }
 >>
 >> ;; file World-native-methods.ss (this implements the native method)
 >> #cs
 >> (module World-native-methods mzscheme
 >>   (require
 >>     (lib "class.ss")
 >>     (lib "String.ss" "profj" "libs" "java" "lang"))
 >>
 >>   (provide bigBang-double-native)
 >>
 >>   (define (bigBang-double-native this accs gets privates s)
 >>     (define nxt (send this next))
 >>     (printf "this is it: ~s\n" (send nxt done (make-java-string 
 >> "world")))))
 >>
 >> // professorJ file (run in drscheme) that
 >> import tmp.*;
 >>
 >> class Down extends World {
 >>   Down() { }
 >>   public World next() { return new Down(); }
 >> }
 >>
 >> ----------------------------------------------------------------------
 >>
 >> The result in the REPL:
 >>
 >> Welcome to DrScheme, version 301.12-svn21apr2006.
 >> Language: ProfessorJ: Advanced.
 >>> new Down().bigBang(10)
 >> . send: no such method: done for class: Down
 >>>
 >>
 >> *** Environment:
 >> macosx "Darwin europe.local 7.9.0 Darwin Kernel Version 7.9.0: Wed 
 >> Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/RELEASE_PPC  
 >> Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
 >> Docs Installed:
 >> (#<path:/Users/matthias/plt/collects/doc/r5rs> 
 >> #<path:/Users/matthias/plt/collects/doc/mzscheme> 
 >> #<path:/Users/matthias/plt/collects/doc/mred> 
 >> #<path:/Users/matthias/plt/collects/doc/help> 
 >> #<path:/Users/matthias/plt/collects/doc/tour> 
 >> #<path:/Users/matthias/plt/collects/doc/drscheme> 
 >> #<path:/Users/matthias/plt/collects/doc/srfi> 
 >> #<path:/Users/matthias/plt/collects/doc/mzlib> 
 >> #<path:/Users/matthias/plt/collects/doc/misclib> 
 >> #<path:/Users/matthias/plt/collects/doc/mrlib> 
 >> #<path:/Users/matthias/plt/collects/doc/framework> 
 >> #<path:/Users/matthias/plt/collects/doc/mzc> 
 >> #<path:/Users/matthias/plt/collects/doc/foreign> 
 >> #<path:/Users/matthias/plt/collects/doc/tools> 
 >> #<path:/Users/matthias/plt/collects/doc/insidemz> 
 >> #<path:/Users/matthias/plt/collects/doc/web-server> 
 >> #<path:/Users/matthias/plt/collects/doc/swindle> 
 >> #<path:/Users/matthias/plt/collects/doc/plot> 
 >> #<path:/Users/matthias/plt/collects/doc/teachpack-htdc> 
 >> #<path:/Users/matthias/plt/collects/doc/t-y-scheme> 
 >> #<path:/Users/matt!
 >>  hias/plt/collects/doc/tex2page> 
 >> #<path:/Users/matthias/plt/collects/doc/beginning> 
 >> #<path:/Users/matthias/plt/collects/doc/beginning-abbr> 
 >> #<path:/Users/matthias/plt/collects/doc/intermediate> 
 >> #<path:/Users/matthias/plt/collects/doc/intermediate-lambda> 
 >> #<path:/Users/matthias/plt/collects/doc/advanced> 
 >> #<path:/Users/matthias/plt/collects/doc/teachpack> 
 >> #<path:/Users/matthias/plt/collects/doc/profj-beginner> 
 >> #<path:/Users/matthias/plt/collects/doc/profj-intermediate> 
 >> #<path:/Users/matthias/plt/collects/doc/profj-advanced>)
 >> Collections:
 >> ((#<path:/Users/matthias/Unison/collects/> (#<path:.DS_Store> 
 >> #<path:date> #<path:finance> #<path:testing> #<path:utils> 
 >> #<path:web>)) (#<path:/Users/matthias/Library/PLT 
 >> Scheme/301.12/collects> "non-existent path") 
 >> (#<path:/Users/matthias/plt/collects> (#<path:.svn> #<path:afm> 
 >> #<path:algol60> #<path:browser> #<path:compiler> #<path:CVS> 
 >> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> 
 >> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> 
 >> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> 
 >> #<path:graphics> #<path:guibuilder> #<path:handin-client> 
 >> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> 
 >> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> 
 >> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> 
 >> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> 
 >> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> 
 >> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> 
 >> #<path:plai> #<path:plane!
 >>  t> #<path:plot> #<path:preprocessor> #<path:profj> 
 >> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs> 
 >> #<path:readline> #<path:reduction-semantics> #<path:repos-time-stamp> 
 >> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> 
 >> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> 
 >> #<path:srpersist> #<path:ssax> #<path:stepper> 
 >> #<path:string-constants> #<path:swindle> #<path:syntax> 
 >> #<path:syntax-color> #<path:test-suite> #<path:tests> 
 >> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> 
 >> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
 >> Human Language: english
 >> Teachpack filenames: ()
 >> Computer Language: (("Experimental Languages" "ProfessorJ" 
 >> "Advanced") ((field) (#f)))
 >
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 05:36:06 -0600

 On Apr 24, 2006, at 5:28 AM, Matthias Felleisen wrote:
 
 >
 > On Apr 23, 2006, at 11:05 PM, Kathy Gray wrote:
 >
 >> Well, at a first glance through your code, I think this is a  
 >> misunderstanding, not a bug.
 >> Your scheme code tries to use a method 'done'. From the Scheme  
 >> perspective there is no method 'done'. There is a method done- 
 >> java.lang.String. When using the 'native' interface, the  
 >> programmer has to follow the name mangling conventions of the  
 >> compiler.
 >> Do you have any problems when you change the code to the mangled  
 >> method name instead? (with no arity methods the mangled name is  
 >> the same as the method name)
 >>
 >
 > ARGH.
 >
 > Why is the method Class-field-set! also inaccessible from the  
 > Scheme code?
 >
 
 Because, except for private fields, Class-field-set! is a function  
 provided by the Class module, which in turn requires the Class-native- 
 methods module.
 For private fields, there is a Class-field-set! method, but it is  
 hidden so that non-native Scheme code cannot violate Java's privacy  
 restrictions.
 
 All of the mutators for the class should be accessible from the  
 appropriate hashtable, is there one that is not?
 
 -Kathy
 
 > -- Matthias
 >
 >
 >> -Kathy
 >>
 >> p.s. I predict this problem would not have arisen if you were  
 >> using 'dynamic' instead.
 >>
 >> On Apr 23, 2006, at 8:10 PM, matthias@ccs.neu.edu wrote:
 >>
 >>> A new problem report is waiting at
 >>>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8017
 >>>
 >>> Reported by matthias for release: 301.12-svn21apr2006
 >>>
 >>> *** Description:
 >>> declare a class C, with one abstract method A that produces an  
 >>> instance of C; plus one native method N, assume N calls back some  
 >>> n-ary method (for n > 0) in the class;
 >>>
 >>> derive a class D that implements A (with the creation of a D) and  
 >>> calls N
 >>>
 >>> N will signal an error (method unknown)
 >>>
 >>> If the method is 0-ary, things work out.
 >>>
 >>>
 >>> *** How to repeat:
 >>> // file World (this is C from above)
 >>> package tmp;
 >>>
 >>> public abstract class World {
 >>>     public String done(String s) { return s+"world"; };
 >>>     public native boolean bigBang(double s);
 >>>     abstract World next();
 >>> }
 >>>
 >>> ;; file World-native-methods.ss (this implements the native method)
 >>> #cs
 >>> (module World-native-methods mzscheme
 >>>   (require
 >>>     (lib "class.ss")
 >>>     (lib "String.ss" "profj" "libs" "java" "lang"))
 >>>
 >>>   (provide bigBang-double-native)
 >>>
 >>>   (define (bigBang-double-native this accs gets privates s)
 >>>     (define nxt (send this next))
 >>>     (printf "this is it: ~s\n" (send nxt done (make-java-string  
 >>> "world")))))
 >>>
 >>> // professorJ file (run in drscheme) that
 >>> import tmp.*;
 >>>
 >>> class Down extends World {
 >>>   Down() { }
 >>>   public World next() { return new Down(); }
 >>> }
 >>>
 >>> -------------------------------------------------------------------- 
 >>> --
 >>>
 >>> The result in the REPL:
 >>>
 >>> Welcome to DrScheme, version 301.12-svn21apr2006.
 >>> Language: ProfessorJ: Advanced.
 >>>> new Down().bigBang(10)
 >>> . send: no such method: done for class: Down
 >>>>
 >>>
 >>> *** Environment:
 >>> macosx "Darwin europe.local 7.9.0 Darwin Kernel Version 7.9.0:  
 >>> Wed Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/ 
 >>> RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display- 
 >>> depth) = 32
 >>> Docs Installed:
 >>> (#<path:/Users/matthias/plt/collects/doc/r5rs> #<path:/Users/ 
 >>> matthias/plt/collects/doc/mzscheme> #<path:/Users/matthias/plt/ 
 >>> collects/doc/mred> #<path:/Users/matthias/plt/collects/doc/help>  
 >>> #<path:/Users/matthias/plt/collects/doc/tour> #<path:/Users/ 
 >>> matthias/plt/collects/doc/drscheme> #<path:/Users/matthias/plt/ 
 >>> collects/doc/srfi> #<path:/Users/matthias/plt/collects/doc/mzlib>  
 >>> #<path:/Users/matthias/plt/collects/doc/misclib> #<path:/Users/ 
 >>> matthias/plt/collects/doc/mrlib> #<path:/Users/matthias/plt/ 
 >>> collects/doc/framework> #<path:/Users/matthias/plt/collects/doc/ 
 >>> mzc> #<path:/Users/matthias/plt/collects/doc/foreign> #<path:/ 
 >>> Users/matthias/plt/collects/doc/tools> #<path:/Users/matthias/plt/ 
 >>> collects/doc/insidemz> #<path:/Users/matthias/plt/collects/doc/ 
 >>> web-server> #<path:/Users/matthias/plt/collects/doc/swindle>  
 >>> #<path:/Users/matthias/plt/collects/doc/plot> #<path:/Users/ 
 >>> matthias/plt/collects/doc/teachpack-htdc> #<path:/Users/matthias/ 
 >>> plt/collects/doc/t-y-scheme> #<path:/Users/matt!
 >>>  hias/plt/collects/doc/tex2page> #<path:/Users/matthias/plt/ 
 >>> collects/doc/beginning> #<path:/Users/matthias/plt/collects/doc/ 
 >>> beginning-abbr> #<path:/Users/matthias/plt/collects/doc/ 
 >>> intermediate> #<path:/Users/matthias/plt/collects/doc/ 
 >>> intermediate-lambda> #<path:/Users/matthias/plt/collects/doc/ 
 >>> advanced> #<path:/Users/matthias/plt/collects/doc/teachpack>  
 >>> #<path:/Users/matthias/plt/collects/doc/profj-beginner> #<path:/ 
 >>> Users/matthias/plt/collects/doc/profj-intermediate> #<path:/Users/ 
 >>> matthias/plt/collects/doc/profj-advanced>)
 >>> Collections:
 >>> ((#<path:/Users/matthias/Unison/collects/> (#<path:.DS_Store>  
 >>> #<path:date> #<path:finance> #<path:testing> #<path:utils>  
 >>> #<path:web>)) (#<path:/Users/matthias/Library/PLT Scheme/301.12/ 
 >>> collects> "non-existent path") (#<path:/Users/matthias/plt/ 
 >>> collects> (#<path:.svn> #<path:afm> #<path:algol60>  
 >>> #<path:browser> #<path:compiler> #<path:CVS> #<path:defaults>  
 >>> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui>  
 >>> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish- 
 >>> install> #<path:framework> #<path:frtime> #<path:games>  
 >>> #<path:graphics> #<path:guibuilder> #<path:handin-client>  
 >>> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu>  
 >>> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html>  
 >>> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher>  
 >>> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib>  
 >>> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme>  
 >>> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools>  
 >>> #<path:plai> #<path:plane!
 >>>  t> #<path:plot> #<path:preprocessor> #<path:profj>  
 >>> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs>  
 >>> #<path:readline> #<path:reduction-semantics> #<path:repos-time- 
 >>> stamp> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper>  
 >>> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi>  
 >>> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string- 
 >>> constants> #<path:swindle> #<path:syntax> #<path:syntax-color>  
 >>> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict>  
 >>> #<path:trace> #<path:version> #<path:waterworld> #<path:web- 
 >>> server> #<path:xelda> #<path:xml>)))
 >>> Human Language: english
 >>> Teachpack filenames: ()
 >>> Computer Language: (("Experimental Languages" "ProfessorJ"  
 >>> "Advanced") ((field) (#f)))
 >>
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 08:12:29 -0400

 On Apr 24, 2006, at 7:36 AM, Kathy Gray wrote:
 
 >
 > On Apr 24, 2006, at 5:28 AM, Matthias Felleisen wrote:
 >
 >>
 >> On Apr 23, 2006, at 11:05 PM, Kathy Gray wrote:
 >>
 >>> Well, at a first glance through your code, I think this is a  
 >>> misunderstanding, not a bug.
 >>> Your scheme code tries to use a method 'done'. From the Scheme  
 >>> perspective there is no method 'done'. There is a method  
 >>> done-java.lang.String. When using the 'native' interface, the  
 >>> programmer has to follow the name mangling conventions of the  
 >>> compiler.
 >>> Do you have any problems when you change the code to the mangled  
 >>> method name instead? (with no arity methods the mangled name is the  
 >>> same as the method name)
 >>>
 >>
 >> ARGH.
 >>
 >> Why is the method Class-field-set! also inaccessible from the Scheme  
 >> code?
 >>
 >
 > Because, except for private fields, Class-field-set! is a function  
 > provided by the Class module, which in turn requires the  
 > Class-native-methods module.
 > For private fields, there is a Class-field-set! method, but it is  
 > hidden so that non-native Scheme code cannot violate Java's privacy  
 > restrictions.
 >
 > All of the mutators for the class should be accessible from the  
 > appropriate hashtable, is there one that is not?
 >
 > -Kathy
 
 I don't have the hashtable. I have the object only. Here is the  
 situation:
 
   (define (method-... this accs gets privates ...)
     (define theC ((hash-table-get privates 'theCanvas) this))
     ...
     (define next (send this generate-next))
     (World-theCanvas-set! next theC) ;; <--- I can't seem to do this
 
 so I came up with the idea of a method that I call back from Scheme but  
 I got the name-mangling wrong.
 
 -- Matthias
 
 
 
 
 
 >
 >> -- Matthias
 >>
 >>
 >>> -Kathy
 >>>
 >>> p.s. I predict this problem would not have arisen if you were using  
 >>> 'dynamic' instead.
 >>>
 >>> On Apr 23, 2006, at 8:10 PM, matthias@ccs.neu.edu wrote:
 >>>
 >>>> A new problem report is waiting at
 >>>>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8017
 >>>>
 >>>> Reported by matthias for release: 301.12-svn21apr2006
 >>>>
 >>>> *** Description:
 >>>> declare a class C, with one abstract method A that produces an  
 >>>> instance of C; plus one native method N, assume N calls back some  
 >>>> n-ary method (for n > 0) in the class;
 >>>>
 >>>> derive a class D that implements A (with the creation of a D) and  
 >>>> calls N
 >>>>
 >>>> N will signal an error (method unknown)
 >>>>
 >>>> If the method is 0-ary, things work out.
 >>>>
 >>>>
 >>>> *** How to repeat:
 >>>> // file World (this is C from above)
 >>>> package tmp;
 >>>>
 >>>> public abstract class World {
 >>>>     public String done(String s) { return s+"world"; };
 >>>>     public native boolean bigBang(double s);
 >>>>     abstract World next();
 >>>> }
 >>>>
 >>>> ;; file World-native-methods.ss (this implements the native method)
 >>>> #cs
 >>>> (module World-native-methods mzscheme
 >>>>   (require
 >>>>     (lib "class.ss")
 >>>>     (lib "String.ss" "profj" "libs" "java" "lang"))
 >>>>
 >>>>   (provide bigBang-double-native)
 >>>>
 >>>>   (define (bigBang-double-native this accs gets privates s)
 >>>>     (define nxt (send this next))
 >>>>     (printf "this is it: ~s\n" (send nxt done (make-java-string  
 >>>> "world")))))
 >>>>
 >>>> // professorJ file (run in drscheme) that
 >>>> import tmp.*;
 >>>>
 >>>> class Down extends World {
 >>>>   Down() { }
 >>>>   public World next() { return new Down(); }
 >>>> }
 >>>>
 >>>> -------------------------------------------------------------------- 
 >>>> --
 >>>>
 >>>> The result in the REPL:
 >>>>
 >>>> Welcome to DrScheme, version 301.12-svn21apr2006.
 >>>> Language: ProfessorJ: Advanced.
 >>>>> new Down().bigBang(10)
 >>>> . send: no such method: done for class: Down
 >>>>>
 >>>>
 >>>> *** Environment:
 >>>> macosx "Darwin europe.local 7.9.0 Darwin Kernel Version 7.9.0: Wed  
 >>>> Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/RELEASE_PPC   
 >>>> Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
 >>>> Docs Installed:
 >>>> (#<path:/Users/matthias/plt/collects/doc/r5rs>  
 >>>> #<path:/Users/matthias/plt/collects/doc/mzscheme>  
 >>>> #<path:/Users/matthias/plt/collects/doc/mred>  
 >>>> #<path:/Users/matthias/plt/collects/doc/help>  
 >>>> #<path:/Users/matthias/plt/collects/doc/tour>  
 >>>> #<path:/Users/matthias/plt/collects/doc/drscheme>  
 >>>> #<path:/Users/matthias/plt/collects/doc/srfi>  
 >>>> #<path:/Users/matthias/plt/collects/doc/mzlib>  
 >>>> #<path:/Users/matthias/plt/collects/doc/misclib>  
 >>>> #<path:/Users/matthias/plt/collects/doc/mrlib>  
 >>>> #<path:/Users/matthias/plt/collects/doc/framework>  
 >>>> #<path:/Users/matthias/plt/collects/doc/mzc>  
 >>>> #<path:/Users/matthias/plt/collects/doc/foreign>  
 >>>> #<path:/Users/matthias/plt/collects/doc/tools>  
 >>>> #<path:/Users/matthias/plt/collects/doc/insidemz>  
 >>>> #<path:/Users/matthias/plt/collects/doc/web-server>  
 >>>> #<path:/Users/matthias/plt/collects/doc/swindle>  
 >>>> #<path:/Users/matthias/plt/collects/doc/plot>  
 >>>> #<path:/Users/matthias/plt/collects/doc/teachpack-htdc>  
 >>>> #<path:/Users/matthias/plt/collects/doc/t-y-scheme>  
 >>>> #<path:/Users/matt!
 >>>>  hias/plt/collects/doc/tex2page>  
 >>>> #<path:/Users/matthias/plt/collects/doc/beginning>  
 >>>> #<path:/Users/matthias/plt/collects/doc/beginning-abbr>  
 >>>> #<path:/Users/matthias/plt/collects/doc/intermediate>  
 >>>> #<path:/Users/matthias/plt/collects/doc/intermediate-lambda>  
 >>>> #<path:/Users/matthias/plt/collects/doc/advanced>  
 >>>> #<path:/Users/matthias/plt/collects/doc/teachpack>  
 >>>> #<path:/Users/matthias/plt/collects/doc/profj-beginner>  
 >>>> #<path:/Users/matthias/plt/collects/doc/profj-intermediate>  
 >>>> #<path:/Users/matthias/plt/collects/doc/profj-advanced>)
 >>>> Collections:
 >>>> ((#<path:/Users/matthias/Unison/collects/> (#<path:.DS_Store>  
 >>>> #<path:date> #<path:finance> #<path:testing> #<path:utils>  
 >>>> #<path:web>)) (#<path:/Users/matthias/Library/PLT  
 >>>> Scheme/301.12/collects> "non-existent path")  
 >>>> (#<path:/Users/matthias/plt/collects> (#<path:.svn> #<path:afm>  
 >>>> #<path:algol60> #<path:browser> #<path:compiler> #<path:CVS>  
 >>>> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext>  
 >>>> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi>  
 >>>> #<path:finish-install> #<path:framework> #<path:frtime>  
 >>>> #<path:games> #<path:graphics> #<path:guibuilder>  
 >>>> #<path:handin-client> #<path:handin-server> #<path:help>  
 >>>> #<path:hierlist> #<path:honu> #<path:honu-module> #<path:htdch>  
 >>>> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain>  
 >>>> #<path:lang> #<path:launcher> #<path:make> #<path:mred>  
 >>>> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom>  
 >>>> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net>  
 >>>> #<path:openssl> #<path:parser-tools> #<path:plai> #<path:plane!
 >>>>  t> #<path:plot> #<path:preprocessor> #<path:profj>  
 >>>> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs>  
 >>>> #<path:readline> #<path:reduction-semantics>  
 >>>> #<path:repos-time-stamp> #<path:setup> #<path:sgl> #<path:sirmail>  
 >>>> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow>  
 >>>> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper>  
 >>>> #<path:string-constants> #<path:swindle> #<path:syntax>  
 >>>> #<path:syntax-color> #<path:test-suite> #<path:tests>  
 >>>> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version>  
 >>>> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
 >>>> Human Language: english
 >>>> Teachpack filenames: ()
 >>>> Computer Language: (("Experimental Languages" "ProfessorJ"  
 >>>> "Advanced") ((field) (#f)))
 >>>
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 08:23:07 -0400

 On Apr 23, 2006, at 11:05 PM, Kathy Gray wrote:
 
 > p.s. I predict this problem would not have arisen if you were using 
 > 'dynamic' instead.
 
 I am trying to fix existing code -- htdch/draw, still nothing new :-(
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 06:29:53 -0600

 On Apr 24, 2006, at 6:12 AM, Matthias Felleisen wrote:
 
 >
 > On Apr 24, 2006, at 7:36 AM, Kathy Gray wrote:
 >
 >>
 >> On Apr 24, 2006, at 5:28 AM, Matthias Felleisen wrote:
 >>
 >>>
 >>> On Apr 23, 2006, at 11:05 PM, Kathy Gray wrote:
 >>>
 >>>> Well, at a first glance through your code, I think this is a  
 >>>> misunderstanding, not a bug.
 >>>> Your scheme code tries to use a method 'done'. From the Scheme  
 >>>> perspective there is no method 'done'. There is a method done- 
 >>>> java.lang.String. When using the 'native' interface, the  
 >>>> programmer has to follow the name mangling conventions of the  
 >>>> compiler.
 >>>> Do you have any problems when you change the code to the mangled  
 >>>> method name instead? (with no arity methods the mangled name is  
 >>>> the same as the method name)
 >>>>
 >>>
 >>> ARGH.
 >>>
 >>> Why is the method Class-field-set! also inaccessible from the  
 >>> Scheme code?
 >>>
 >>
 >> Because, except for private fields, Class-field-set! is a function  
 >> provided by the Class module, which in turn requires the Class- 
 >> native-methods module.
 >> For private fields, there is a Class-field-set! method, but it is  
 >> hidden so that non-native Scheme code cannot violate Java's  
 >> privacy restrictions.
 >>
 >> All of the mutators for the class should be accessible from the  
 >> appropriate hashtable, is there one that is not?
 >>
 >> -Kathy
 >
 > I don't have the hashtable. I have the object only. Here is the  
 > situation:
 >
 >  (define (method-... this accs gets privates ...)
 >    (define theC ((hash-table-get privates 'theCanvas) this))
 >    ...
 >    (define next (send this generate-next))
 >    (World-theCanvas-set! next theC) ;; <--- I can't seem to do this
 >
 > so I came up with the idea of a method that I call back from Scheme  
 > but I got the name-mangling wrong.
 >
 > -- Matthias
 >
 
 Ok, so Kathy's very tired (I'm only awake because the neighbors  
 decided they had to have a big windchime), and I'm not 100% certain  
 what's what in your code.
 
 So, is method inside Canvas or the World?
 In either case, the privates hashtable extracts private methods. accs  
 extracts the gettters and gets extracts the setters (there was a typo  
 in the original that has been propogated a lot)/
 
 -Kathy (might as well be productive since I'm up anyway)
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 08:31:23 -0400

 With the renaming things work like a charm.
 
 Question:
 
   A = { m, private k}
   |
 / \
 ___
   |
   B = { n }
 
 Why can n call m but m cannot call k anymore? I would have thought a 
 call from an inherited method to a private method (in the same class is 
 okay).
 
 I will have to work thru this once I get to the office (leaving home 
 now). The new htdch code is about to get checked in.
 
 -- Matthias
 
 
 On Apr 23, 2006, at 11:05 PM, Kathy Gray wrote:
 
 > Well, at a first glance through your code, I think this is a 
 > misunderstanding, not a bug.
 > Your scheme code tries to use a method 'done'. From the Scheme 
 > perspective there is no method 'done'. There is a method 
 > done-java.lang.String. When using the 'native' interface, the 
 > programmer has to follow the name mangling conventions of the 
 > compiler.
 > Do you have any problems when you change the code to the mangled 
 > method name instead? (with no arity methods the mangled name is the 
 > same as the method name)
 >
 > -Kathy
 >
 > p.s. I predict this problem would not have arisen if you were using 
 > 'dynamic' instead.
 >
 > On Apr 23, 2006, at 8:10 PM, matthias@ccs.neu.edu wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8017
 >>
 >> Reported by matthias for release: 301.12-svn21apr2006
 >>
 >> *** Description:
 >> declare a class C, with one abstract method A that produces an 
 >> instance of C; plus one native method N, assume N calls back some 
 >> n-ary method (for n > 0) in the class;
 >>
 >> derive a class D that implements A (with the creation of a D) and 
 >> calls N
 >>
 >> N will signal an error (method unknown)
 >>
 >> If the method is 0-ary, things work out.
 >>
 >>
 >> *** How to repeat:
 >> // file World (this is C from above)
 >> package tmp;
 >>
 >> public abstract class World {
 >>     public String done(String s) { return s+"world"; };
 >>     public native boolean bigBang(double s);
 >>     abstract World next();
 >> }
 >>
 >> ;; file World-native-methods.ss (this implements the native method)
 >> #cs
 >> (module World-native-methods mzscheme
 >>   (require
 >>     (lib "class.ss")
 >>     (lib "String.ss" "profj" "libs" "java" "lang"))
 >>
 >>   (provide bigBang-double-native)
 >>
 >>   (define (bigBang-double-native this accs gets privates s)
 >>     (define nxt (send this next))
 >>     (printf "this is it: ~s\n" (send nxt done (make-java-string 
 >> "world")))))
 >>
 >> // professorJ file (run in drscheme) that
 >> import tmp.*;
 >>
 >> class Down extends World {
 >>   Down() { }
 >>   public World next() { return new Down(); }
 >> }
 >>
 >> ----------------------------------------------------------------------
 >>
 >> The result in the REPL:
 >>
 >> Welcome to DrScheme, version 301.12-svn21apr2006.
 >> Language: ProfessorJ: Advanced.
 >>> new Down().bigBang(10)
 >> . send: no such method: done for class: Down
 >>>
 >>
 >> *** Environment:
 >> macosx "Darwin europe.local 7.9.0 Darwin Kernel Version 7.9.0: Wed 
 >> Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/RELEASE_PPC  
 >> Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
 >> Docs Installed:
 >> (#<path:/Users/matthias/plt/collects/doc/r5rs> 
 >> #<path:/Users/matthias/plt/collects/doc/mzscheme> 
 >> #<path:/Users/matthias/plt/collects/doc/mred> 
 >> #<path:/Users/matthias/plt/collects/doc/help> 
 >> #<path:/Users/matthias/plt/collects/doc/tour> 
 >> #<path:/Users/matthias/plt/collects/doc/drscheme> 
 >> #<path:/Users/matthias/plt/collects/doc/srfi> 
 >> #<path:/Users/matthias/plt/collects/doc/mzlib> 
 >> #<path:/Users/matthias/plt/collects/doc/misclib> 
 >> #<path:/Users/matthias/plt/collects/doc/mrlib> 
 >> #<path:/Users/matthias/plt/collects/doc/framework> 
 >> #<path:/Users/matthias/plt/collects/doc/mzc> 
 >> #<path:/Users/matthias/plt/collects/doc/foreign> 
 >> #<path:/Users/matthias/plt/collects/doc/tools> 
 >> #<path:/Users/matthias/plt/collects/doc/insidemz> 
 >> #<path:/Users/matthias/plt/collects/doc/web-server> 
 >> #<path:/Users/matthias/plt/collects/doc/swindle> 
 >> #<path:/Users/matthias/plt/collects/doc/plot> 
 >> #<path:/Users/matthias/plt/collects/doc/teachpack-htdc> 
 >> #<path:/Users/matthias/plt/collects/doc/t-y-scheme> 
 >> #<path:/Users/matt!
 >>  hias/plt/collects/doc/tex2page> 
 >> #<path:/Users/matthias/plt/collects/doc/beginning> 
 >> #<path:/Users/matthias/plt/collects/doc/beginning-abbr> 
 >> #<path:/Users/matthias/plt/collects/doc/intermediate> 
 >> #<path:/Users/matthias/plt/collects/doc/intermediate-lambda> 
 >> #<path:/Users/matthias/plt/collects/doc/advanced> 
 >> #<path:/Users/matthias/plt/collects/doc/teachpack> 
 >> #<path:/Users/matthias/plt/collects/doc/profj-beginner> 
 >> #<path:/Users/matthias/plt/collects/doc/profj-intermediate> 
 >> #<path:/Users/matthias/plt/collects/doc/profj-advanced>)
 >> Collections:
 >> ((#<path:/Users/matthias/Unison/collects/> (#<path:.DS_Store> 
 >> #<path:date> #<path:finance> #<path:testing> #<path:utils> 
 >> #<path:web>)) (#<path:/Users/matthias/Library/PLT 
 >> Scheme/301.12/collects> "non-existent path") 
 >> (#<path:/Users/matthias/plt/collects> (#<path:.svn> #<path:afm> 
 >> #<path:algol60> #<path:browser> #<path:compiler> #<path:CVS> 
 >> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> 
 >> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> 
 >> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> 
 >> #<path:graphics> #<path:guibuilder> #<path:handin-client> 
 >> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> 
 >> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> 
 >> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> 
 >> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> 
 >> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> 
 >> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> 
 >> #<path:plai> #<path:plane!
 >>  t> #<path:plot> #<path:preprocessor> #<path:profj> 
 >> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs> 
 >> #<path:readline> #<path:reduction-semantics> #<path:repos-time-stamp> 
 >> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> 
 >> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> 
 >> #<path:srpersist> #<path:ssax> #<path:stepper> 
 >> #<path:string-constants> #<path:swindle> #<path:syntax> 
 >> #<path:syntax-color> #<path:test-suite> #<path:tests> 
 >> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> 
 >> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
 >> Human Language: english
 >> Teachpack filenames: ()
 >> Computer Language: (("Experimental Languages" "ProfessorJ" 
 >> "Advanced") ((field) (#f)))
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 08:34:38 -0400

 On Apr 24, 2006, at 8:29 AM, Kathy Gray wrote:
 
 >> I don't have the hashtable. I have the object only. Here is the 
 >> situation:
 >>
 >>  (define (method-... this accs gets privates ...)
 
 This is a World method.
 
 >>    (define theC ((hash-table-get privates 'theCanvas) this))
 
 This extracts the canvas value from the field in world. (i got this 
 right)
 
 >>    ...
 >>    (define next (send this generate-next))
 
 This sends the next message to this World object, which generates 
 another World object.
 
 >>    (World-theCanvas-set! next theC) ;; <--- I can't seem to do this
 
 Now I'd like to propagate the Canvas value from the old world object to 
 the new one.
 
 >> so I came up with the idea of a method that I call back from Scheme 
 >> but I got the name-mangling wrong.
 >>
 >> -- Matthias
 >
 > Ok, so Kathy's very tired (I'm only awake because the neighbors 
 > decided they had to have a big windchime), and I'm not 100% certain 
 > what's what in your code.
 >
 > So, is method inside Canvas or the World?
 > In either case, the privates hashtable extracts private methods. accs 
 > extracts the gettters and gets extracts the setters (there was a typo 
 > in the original that has been propogated a lot)/
 
 I figured this out one day thru lots of debugging :-(
 
From: Kathy Gray <kathyg@cs.utah.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 06:48:46 -0600

 (Thanks for the line-by-line breakdown -- helps)
 
 On Apr 24, 2006, at 6:34 AM, Matthias Felleisen wrote:
 
 >
 > On Apr 24, 2006, at 8:29 AM, Kathy Gray wrote:
 >
 >>> I don't have the hashtable. I have the object only. Here is the  
 >>> situation:
 >>>
 >>>  (define (method-... this accs gets privates ...)
 >
 > This is a World method.
 >
 >>>    (define theC ((hash-table-get privates 'theCanvas) this))
 >
 > This extracts the canvas value from the field in world. (i got this  
 > right)
 >
 
 If this call is getting you the field value, something is very wrong.  
 Is this call committed in?
 
 >>>    ...
 >>>    (define next (send this generate-next))
 >
 > This sends the next message to this World object, which generates  
 > another World object.
 >
 >>>    (World-theCanvas-set! next theC) ;; <--- I can't seem to do this
 >
 > Now I'd like to propagate the Canvas value from the old world  
 > object to the new one.
 >
 
 The call (hashtable-get gets 'theCanvas) should get you the setter  
 for theCanvas for next
 
 -Kathy
 
 >>> so I came up with the idea of a method that I call back from  
 >>> Scheme but I got the name-mangling wrong.
 >>>
 >>> -- Matthias
 >>
 >> Ok, so Kathy's very tired (I'm only awake because the neighbors  
 >> decided they had to have a big windchime), and I'm not 100%  
 >> certain what's what in your code.
 >>
 >> So, is method inside Canvas or the World?
 >> In either case, the privates hashtable extracts private methods.  
 >> accs extracts the gettters and gets extracts the setters (there  
 >> was a typo in the original that has been propogated a lot)/
 >
 > I figured this out one day thru lots of debugging :-(
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 09:05:41 -0400

 On Apr 24, 2006, at 8:48 AM, Kathy Gray wrote:
 
 > (Thanks for the line-by-line breakdown -- helps)
 >
 > On Apr 24, 2006, at 6:34 AM, Matthias Felleisen wrote:
 >
 >>
 >> On Apr 24, 2006, at 8:29 AM, Kathy Gray wrote:
 >>
 >>>> I don't have the hashtable. I have the object only. Here is the 
 >>>> situation:
 >>>>
 >>>>  (define (method-... this accs gets privates ...)
 >>
 >> This is a World method.
 >>
 >>>>    (define theC ((hash-table-get privates 'theCanvas) this))
 >>
 >> This extracts the canvas value from the field in world. (i got this 
 >> right)
 >>
 >
 > If this call is getting you the field value, something is very wrong. 
 > Is this call committed in?
 
 Yes it is:
 
        (define (bigBangO-double-native this accs gets privates i)
          (define theCanvas ((hash-table-get accs 'theCanvas) this))
          ...
 
 (sorry I meant accs)
 
 >>>>    ...
 >>>>    (define next (send this generate-next))
 >>
 >> This sends the next message to this World object, which generates 
 >> another World object.
 >>
 >>>>    (World-theCanvas-set! next theC) ;; <--- I can't seem to do this
 >>
 >> Now I'd like to propagate the Canvas value from the old world object 
 >> to the new one.
 >>
 >
 > The call (hashtable-get gets 'theCanvas) should get you the setter for 
 > theCanvas for next
 
 For next as well as the current object? That would be great. I'll try 
 it out.
 
 >
 > -Kathy
 >
 >>>> so I came up with the idea of a method that I call back from Scheme 
 >>>> but I got the name-mangling wrong.
 >>>>
 >>>> -- Matthias
 >>>
 >>> Ok, so Kathy's very tired (I'm only awake because the neighbors 
 >>> decided they had to have a big windchime), and I'm not 100% certain 
 >>> what's what in your code.
 >>>
 >>> So, is method inside Canvas or the World?
 >>> In either case, the privates hashtable extracts private methods. 
 >>> accs extracts the gettters and gets extracts the setters (there was 
 >>> a typo in the original that has been propogated a lot)/
 >>
 >> I figured this out one day thru lots of debugging :-(
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8017: ProfessorJ can't cope with calls from native methods to inherited methods
Date: Mon, 24 Apr 2006 10:36:42 -0400

 On Apr 24, 2006, at 8:48 AM, Kathy Gray wrote:
 
 >>
 >> Now I'd like to propagate the Canvas value from the old world object 
 >> to the new one.
 >>
 >
 > The call (hashtable-get gets 'theCanvas) should get you the setter for 
 > theCanvas for next
 
 It does. I take it that the identity of the object doesn't matter, it's 
 a generic setter function. Good. The code is clean, it's checked in, 
 and as properly abstracted as possible. -- Matthias
 

Responsible changed from "nobody" to "kathyg" by kathyg at Mon, 24 Apr 2006 15:08:54 -0400
Reason>>> .

State changed from "open" to "closed" by kathyg at Mon, 24 Apr 2006 15:08:54 -0400
Reason>>> Not a bug.

