From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon May  5 12:17:56 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.236])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m45GHtE5018239
	for <bugs@bugs.plt-scheme.org>; Mon, 5 May 2008 12:17:55 -0400
Message-Id: <200805051617.m45GHr1f018233@champlain.ccs.neu.edu>
Date: Mon, 5 May 2008 12:17:53 -0400
From: vkp@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: ProfessorJ - syntax error

>Number:         9348
>Category:       profj
>Synopsis:       ProfessorJ - syntax error
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon May 05 12:20:02 -0400 2008
>Closed-Date:    Tue Dec 06 14:12:19 -0500 2011
>Last-Modified:  Tue Dec 06 14:12:19 -0500 2011
>Originator:     Viera Proulx
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.19-svn18mar2008
>Environment:
macosx "Darwin viera-proulxs-computer.local 8.11.1 Darwin Kernel Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 192397320

Collections:
(("/Users/vkp/Library/PLT Scheme/3.99.0.19/collects" non-existent-path) ("/Users/vkp/PLT Scheme v.3.99.0.19/collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "tex2page" "texpict" "trace" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
The program runs fine in 372.
There is no way I can find what is wrong when running it in 399.

Welcome to DrScheme, version 3.99.0.19-svn18mar2008 [3m].
Language: ProfessorJ: Intermediate.
Syntax error detected
procedure application: expected procedure, given: #<undefined>; arguments were: (#<position-token> #<position-token> #<position-token> #<position-token> #<position-token> #<position-token> #<position-to... (29 27 650 1)
> 
>How-To-Repeat:
import java.util.Random;

import idraw.*;
import geometry.*;
import colors.*;

/** Class that represents a colored disk that moves around the Canvas */
class Blob{

  Posn center;
  int radius;
  IColor col;

  /** The constructor */
  Blob(Posn center, int radius, IColor col) {
    this.center = center;
    this.radius = radius;
    this.col = col;
  }

  /** draw this blob in the given World */
  void draw(Canvas c) {
    c.drawDisk(this.center, this.radius, col);
  } 

  /** move this blob 20 pixels in the direction given by the ke
      or change its color to Green, Red or Yellow */
  void moveBlob(String ke){
    if (ke.equals("right")){
      this.center = new Posn(this.center.x + 5, this.center.y);
    }
    else if (ke.equals("left")){
      this.center = new Posn(this.center.x - 5, this.center.y);
    }
    else if (ke.equals("up")){
      this.center = new Posn(this.center.x, this.center.y - 5);
    }
    else if (ke.equals("down")){
      this.center = new Posn(this.center.x, this.center.y + 5);
    }
    // change the color to Y, G, R
    else if (ke.equals("Y")){
      this.col = new Yellow();
    }    
    else if (ke.equals("G")){
      this.col = new Green();
    }    
    else if (ke.equals("R")){
      this.col = new Red();
    }
    else{}
  }

  /** produce a new blob moved by a random distance < n pixels */
  void randomMove(int n){
    this.center = new Posn(this.center.x + this.randomInt(n),
                           this.center.y + this.randomInt(n));
  }

  /** helper method to generate a random number in the range -n to n */
  int randomInt(int n){
    return -n + (new Random().nextInt(2 * n + 1));
  }

  /** is the blob outside the bounds given by the width and height */
  boolean outsideBounds(int width, int height) {
    return this.center.x < 0
    || this.center.x > width
    || this.center.y < 0 
    || this.center.y > height;
  }
  
  /** is the blob near the center of area given by the width and height */
  boolean nearCenter(int width, int height) {
    return this.center.x > width / 2 - 10
    && this.center.x < width / 2 + 10
    && this.center.y > height / 2 - 10
    && this.center.y < height / 2 + 10;
  }
}

/** Represent the world of a Blob */
class BlobWorld extends World {

  int width = 200;
  int height = 300;
  Blob blob;

  /** The constructor */
  BlobWorld(Blob blob) {
    super();
    this.blob = blob;
  }

  /** Move the Blob when the player presses a key */
  void onKeyEvent(String ke) {
    this.blob.moveBlob(ke);
  }

  /** On tick check whether the Blob is out of bounds,
   * or fell into the black hole in the middle.
   * If all is well, move the Blob in a random direction.
   */
  void onTick() {
    // if the blob is outside the canvas, stop
    if (this.blob.outsideBounds(this.width, this.height)){
      this.endOfWorld("Blob is outside the bounds");
    }

    // time ends is the blob falls into the black hole in the middle
    else if (this.blob.nearCenter(this.width, this.height)){
      this.endOfTime("Black hole ate the blob");
    }

    // else move the blob randomly at most 5 pixels in any direction
    else
      this.blob.randomMove(5);
  }

  /** draw this world with a blue background */
  void draw() {
    this.theCanvas.drawRect(new Posn(0, 0), 
        this.width, this.height, new Blue());
    this.blob.draw(this.theCanvas);
    this.theCanvas.drawDisk(new Posn(100, 150), 10, new Black());
  }
}

class BlobExamples{
  
  // examples of data for the Blob class:
  Blob b1 = new Blob(new Posn(100, 100), 50, new Red());
  Blob b1left = new Blob(new Posn(95, 100), 50, new Red());
  Blob b1right = new Blob(new Posn(105, 100), 50, new Red());
  Blob b1up = new Blob(new Posn(100, 95), 50, new Red());
  Blob b1down = new Blob(new Posn(100, 105), 50, new Red());
  Blob b1G = new Blob(new Posn(100, 100), 50, new Green());
  Blob b1Y = new Blob(new Posn(100, 100), 50, new Yellow());
  
  /** reset the Blob */
  void reset(){
    b1 = new Blob(new Posn(100, 100), 50, new Red());
  }


  /** test the method moveBlob in the Blob class */
  boolean testMoveBlobLeft(){ 
    b1.moveBlob("left");
    return (check b1 expect b1left);
  }
  boolean testMoveBlobRight(){ 
    reset();
    b1.moveBlob("right");
    return (check b1 expect b1right);
  }
  boolean testMoveBlobUp(){
    reset();
    b1.moveBlob("up");
    return (check b1 expect b1up);
  }
  boolean testMoveBlobDown(){
    reset();
    b1.moveBlob("down");
    return (check b1 expect b1down);  
  }
  boolean testMoveBlobGreen(){
    reset();
    b1.moveBlob("G");
    return (check b1 expect b1G);
  }  
  boolean testMoveBlobYellow(){
    reset();
    b1.moveBlob("Y");
    return (check b1 expect b1Y);  
  }
  boolean testMoveRed(){
    reset();
    b1G.moveBlob("R");
    return (check b1G expect b1);  
  }

  /** test the method outsideBounds in the Blob class */
  boolean testOutsideBoundsRight(){
    reset();
    return check b1.outsideBounds(60, 200) expect true;
  }
  boolean testOutsideBoundsBelow(){
    reset();
    return check b1.outsideBounds(100, 90) expect true;
  }
  boolean testOutsideBoundsAbove(){
    reset();
    return check new Blob(new Posn(-5, 100), 50, new Red()).outsideBounds(100, 110) expect true;
  }
  boolean testOutsideBoundsLeft(){
    reset();
    return check new Blob(new Posn(80, -5), 50, new Blue()).outsideBounds(100, 90) expect true;
  }
  boolean testOutsideBoundsNot(){
    reset();
    return check b1.outsideBounds(200, 400) expect false;
  }

  /** test the method nearCenter in the Blob class */
  boolean testNearCenter(){
    reset();
    return (check b1.nearCenter(200, 200) expect true) 
        && (check b1.nearCenter(200, 100) expect false);
  }

  /** the method randomInt in the Blob class *//*
  boolean testRandomInt(){
    return checkOneOf(b1.randomInt(3),
                      new Integer[]{-3, -2, -1, 0, 1, 2, 3});
  }  */

  /** the method randomMove in the Blob class *//*
  boolean testRandomMove(){
    b1.randomMove(1);
    return checkOneOf(b1,
                 new Blob[]{new Blob(new Posn(100, 100), 50, new Red()),
                            new Blob(new Posn(101, 100), 50, new Red()),
                            new Blob(new Posn( 99, 100), 50, new Red()),
                            new Blob(new Posn(100, 101), 50, new Red()),
                            new Blob(new Posn(100,  99), 50, new Red())});       
  }  */

  /** Combine all tests */
  /*
  public void tests(Tester t){ 
    testMoveBlob(t);
    testOutsideBounds(t);
    testNearCenter(t);
    testRandomInt(t);
    testRandomMove(t);
    testOutsideBounds(t);
    testOutsideBounds(t);
    // go();
  }
 */

  // start the world 
  void go(){
    // construct an instance of a TimerWorld
    BlobWorld w = new BlobWorld(new Blob(new Posn(100, 200), 20, new Red()));
    // and run the TimerWorld
    w.bigBang(200, 300, 0.3);
  }
}
>Fix:
>Audit-Trail:
From: Kathy Gray <kathryn.gray@cl.cam.ac.uk>
To: vkp@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9348: ProfessorJ - syntax error
Date: Mon, 5 May 2008 19:00:04 +0100

 Can you update your svn version and try again? I see the expected  
 error that { } are required around if and else branches when I run  
 this in 3.99.0.23-svn2may2008.
 
 -Kathy
 
 
 
 
 On 5 May 2008, at 5:20:02, vkp@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=9348
 >
 > Reported by Viera Proulx for release: 3.99.0.19-svn18mar2008
 >
 > *** Description:
 > The program runs fine in 372.
 > There is no way I can find what is wrong when running it in 399.
 >
 > Welcome to DrScheme, version 3.99.0.19-svn18mar2008 [3m].
 > Language: ProfessorJ: Intermediate.
 > Syntax error detected
 > procedure application: expected procedure, given: #<undefined>;  
 > arguments were: (#<position-token> #<position-token> #<position- 
 > token> #<position-token> #<position-token> #<position-token>  
 > #<position-to... (29 27 650 1)
 >>
 >
 > *** How to repeat:
 > import java.util.Random;
 >
 > import idraw.*;
 > import geometry.*;
 > import colors.*;
 >
 > /** Class that represents a colored disk that moves around the  
 > Canvas */
 > class Blob{
 >
 >  Posn center;
 >  int radius;
 >  IColor col;
 >
 >  /** The constructor */
 >  Blob(Posn center, int radius, IColor col) {
 >    this.center = center;
 >    this.radius = radius;
 >    this.col = col;
 >  }
 >
 >  /** draw this blob in the given World */
 >  void draw(Canvas c) {
 >    c.drawDisk(this.center, this.radius, col);
 >  }
 >
 >  /** move this blob 20 pixels in the direction given by the ke
 >      or change its color to Green, Red or Yellow */
 >  void moveBlob(String ke){
 >    if (ke.equals("right")){
 >      this.center = new Posn(this.center.x + 5, this.center.y);
 >    }
 >    else if (ke.equals("left")){
 >      this.center = new Posn(this.center.x - 5, this.center.y);
 >    }
 >    else if (ke.equals("up")){
 >      this.center = new Posn(this.center.x, this.center.y - 5);
 >    }
 >    else if (ke.equals("down")){
 >      this.center = new Posn(this.center.x, this.center.y + 5);
 >    }
 >    // change the color to Y, G, R
 >    else if (ke.equals("Y")){
 >      this.col = new Yellow();
 >    }
 >    else if (ke.equals("G")){
 >      this.col = new Green();
 >    }
 >    else if (ke.equals("R")){
 >      this.col = new Red();
 >    }
 >    else{}
 >  }
 >
 >  /** produce a new blob moved by a random distance < n pixels */
 >  void randomMove(int n){
 >    this.center = new Posn(this.center.x + this.randomInt(n),
 >                           this.center.y + this.randomInt(n));
 >  }
 >
 >  /** helper method to generate a random number in the range -n to n */
 >  int randomInt(int n){
 >    return -n + (new Random().nextInt(2 * n + 1));
 >  }
 >
 >  /** is the blob outside the bounds given by the width and height */
 >  boolean outsideBounds(int width, int height) {
 >    return this.center.x < 0
 >    || this.center.x > width
 >    || this.center.y < 0
 >    || this.center.y > height;
 >  }
 >
 >  /** is the blob near the center of area given by the width and  
 > height */
 >  boolean nearCenter(int width, int height) {
 >    return this.center.x > width / 2 - 10
 >    && this.center.x < width / 2 + 10
 >    && this.center.y > height / 2 - 10
 >    && this.center.y < height / 2 + 10;
 >  }
 > }
 >
 > /** Represent the world of a Blob */
 > class BlobWorld extends World {
 >
 >  int width = 200;
 >  int height = 300;
 >  Blob blob;
 >
 >  /** The constructor */
 >  BlobWorld(Blob blob) {
 >    super();
 >    this.blob = blob;
 >  }
 >
 >  /** Move the Blob when the player presses a key */
 >  void onKeyEvent(String ke) {
 >    this.blob.moveBlob(ke);
 >  }
 >
 >  /** On tick check whether the Blob is out of bounds,
 >   * or fell into the black hole in the middle.
 >   * If all is well, move the Blob in a random direction.
 >   */
 >  void onTick() {
 >    // if the blob is outside the canvas, stop
 >    if (this.blob.outsideBounds(this.width, this.height)){
 >      this.endOfWorld("Blob is outside the bounds");
 >    }
 >
 >    // time ends is the blob falls into the black hole in the middle
 >    else if (this.blob.nearCenter(this.width, this.height)){
 >      this.endOfTime("Black hole ate the blob");
 >    }
 >
 >    // else move the blob randomly at most 5 pixels in any direction
 >    else
 >      this.blob.randomMove(5);
 >  }
 >
 >  /** draw this world with a blue background */
 >  void draw() {
 >    this.theCanvas.drawRect(new Posn(0, 0),
 >        this.width, this.height, new Blue());
 >    this.blob.draw(this.theCanvas);
 >    this.theCanvas.drawDisk(new Posn(100, 150), 10, new Black());
 >  }
 > }
 >
 > class BlobExamples{
 >
 >  // examples of data for the Blob class:
 >  Blob b1 = new Blob(new Posn(100, 100), 50, new Red());
 >  Blob b1left = new Blob(new Posn(95, 100), 50, new Red());
 >  Blob b1right = new Blob(new Posn(105, 100), 50, new Red());
 >  Blob b1up = new Blob(new Posn(100, 95), 50, new Red());
 >  Blob b1down = new Blob(new Posn(100, 105), 50, new Red());
 >  Blob b1G = new Blob(new Posn(100, 100), 50, new Green());
 >  Blob b1Y = new Blob(new Posn(100, 100), 50, new Yellow());
 >
 >  /** reset the Blob */
 >  void reset(){
 >    b1 = new Blob(new Posn(100, 100), 50, new Red());
 >  }
 >
 >
 >  /** test the method moveBlob in the Blob class */
 >  boolean testMoveBlobLeft(){
 >    b1.moveBlob("left");
 >    return (check b1 expect b1left);
 >  }
 >  boolean testMoveBlobRight(){
 >    reset();
 >    b1.moveBlob("right");
 >    return (check b1 expect b1right);
 >  }
 >  boolean testMoveBlobUp(){
 >    reset();
 >    b1.moveBlob("up");
 >    return (check b1 expect b1up);
 >  }
 >  boolean testMoveBlobDown(){
 >    reset();
 >    b1.moveBlob("down");
 >    return (check b1 expect b1down);
 >  }
 >  boolean testMoveBlobGreen(){
 >    reset();
 >    b1.moveBlob("G");
 >    return (check b1 expect b1G);
 >  }
 >  boolean testMoveBlobYellow(){
 >    reset();
 >    b1.moveBlob("Y");
 >    return (check b1 expect b1Y);
 >  }
 >  boolean testMoveRed(){
 >    reset();
 >    b1G.moveBlob("R");
 >    return (check b1G expect b1);
 >  }
 >
 >  /** test the method outsideBounds in the Blob class */
 >  boolean testOutsideBoundsRight(){
 >    reset();
 >    return check b1.outsideBounds(60, 200) expect true;
 >  }
 >  boolean testOutsideBoundsBelow(){
 >    reset();
 >    return check b1.outsideBounds(100, 90) expect true;
 >  }
 >  boolean testOutsideBoundsAbove(){
 >    reset();
 >    return check new Blob(new Posn(-5, 100), 50, new  
 > Red()).outsideBounds(100, 110) expect true;
 >  }
 >  boolean testOutsideBoundsLeft(){
 >    reset();
 >    return check new Blob(new Posn(80, -5), 50, new  
 > Blue()).outsideBounds(100, 90) expect true;
 >  }
 >  boolean testOutsideBoundsNot(){
 >    reset();
 >    return check b1.outsideBounds(200, 400) expect false;
 >  }
 >
 >  /** test the method nearCenter in the Blob class */
 >  boolean testNearCenter(){
 >    reset();
 >    return (check b1.nearCenter(200, 200) expect true)
 >        && (check b1.nearCenter(200, 100) expect false);
 >  }
 >
 >  /** the method randomInt in the Blob class *//*
 >  boolean testRandomInt(){
 >    return checkOneOf(b1.randomInt(3),
 >                      new Integer[]{-3, -2, -1, 0, 1, 2, 3});
 >  }  */
 >
 >  /** the method randomMove in the Blob class *//*
 >  boolean testRandomMove(){
 >    b1.randomMove(1);
 >    return checkOneOf(b1,
 >                 new Blob[]{new Blob(new Posn(100, 100), 50, new  
 > Red()),
 >                            new Blob(new Posn(101, 100), 50, new  
 > Red()),
 >                            new Blob(new Posn( 99, 100), 50, new  
 > Red()),
 >                            new Blob(new Posn(100, 101), 50, new  
 > Red()),
 >                            new Blob(new Posn(100,  99), 50, new  
 > Red())});
 >  }  */
 >
 >  /** Combine all tests */
 >  /*
 >  public void tests(Tester t){
 >    testMoveBlob(t);
 >    testOutsideBounds(t);
 >    testNearCenter(t);
 >    testRandomInt(t);
 >    testRandomMove(t);
 >    testOutsideBounds(t);
 >    testOutsideBounds(t);
 >    // go();
 >  }
 > */
 >
 >  // start the world
 >  void go(){
 >    // construct an instance of a TimerWorld
 >    BlobWorld w = new BlobWorld(new Blob(new Posn(100, 200), 20, new  
 > Red()));
 >    // and run the TimerWorld
 >    w.bigBang(200, 300, 0.3);
 >  }
 > }
 >
 > *** Environment:
 > macosx "Darwin viera-proulxs-computer.local 8.11.1 Darwin Kernel  
 > Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/ 
 > RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 192397320
 >
 > Collections:
 > (("/Users/vkp/Library/PLT Scheme/3.99.0.19/collects" non-existent- 
 > path) ("/Users/vkp/PLT Scheme v.3.99.0.19/collects" "afm" "algol60"  
 > "browser" "combinator-parser" "compiler" "config" "defaults"  
 > "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"  
 > "framework" "frtime" "games" "graphics" "gui-debugger" "help"  
 > "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang"  
 > "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mzlib"  
 > "mzscheme" "net" "openssl" "parser-tools" "planet" "plot"  
 > "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "repos- 
 > time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup"  
 > "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants"  
 > "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery"  
 > "tex2page" "texpict" "trace" "typed-scheme" "version" "web-server"  
 > "wxme" "xml"))
 > Computer Language: (("Experimental Languages" "ProfessorJ"  
 > "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
 


State changed from "open" to "closed" by eli at Tue, 06 Dec 2011 14:12:19 -0500
Reason>>> ProfessorJ is no longer distributed with Racket.

