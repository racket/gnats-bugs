From apache@plt-scheme.org Wed May 24 13:25:37 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k4OHPY3X030022
	for <bugs@plt-scheme.org>; Wed, 24 May 2006 13:25:34 -0400
Message-Id: <200605241725.k4OHPYIc030020@champlain.ccs.neu.edu>
Date: Wed, 24 May 2006 13:25:34 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: professorJ diverges for test coverage

>Number:         8066
>Category:       profj
>Synopsis:       professorJ diverges for test coverage
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed May 24 13:30:00 -0400 2006
>Last-Modified:  Thu Jun 01 22:39:54 -0400 2006
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301.15-svn18may2006
>Environment:
macosx "Darwin america.local 7.9.0 Darwin Kernel Version 7.9.0: Wed Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Users/matthias/plt/collects/doc/r5rs> #<path:/Users/matthias/plt/collects/doc/mzscheme> #<path:/Users/matthias/plt/collects/doc/mred> #<path:/Users/matthias/plt/collects/doc/help> #<path:/Users/matthias/plt/doc/help> #<path:/Users/matthias/plt/collects/doc/tour> #<path:/Users/matthias/plt/collects/doc/drscheme> #<path:/Users/matthias/plt/collects/doc/srfi> #<path:/Users/matthias/plt/collects/doc/mzlib> #<path:/Users/matthias/plt/collects/doc/misclib> #<path:/Users/matthias/plt/collects/doc/mrlib> #<path:/Users/matthias/plt/collects/doc/framework> #<path:/Users/matthias/plt/collects/doc/mzc> #<path:/Users/matthias/plt/collects/doc/foreign> #<path:/Users/matthias/plt/collects/doc/tools> #<path:/Users/matthias/plt/collects/doc/insidemz> #<path:/Users/matthias/plt/collects/doc/web-server> #<path:/Users/matthias/plt/collects/doc/swindle> #<path:/Users/matthias/plt/collects/doc/plot> #<path:/Users/matthias/plt/collects/doc/teachpack-htdc> #<path:/Users/matthias/plt/collects/doc/t-y-scheme> #<path:/Users/matthias/plt/collects/doc/acl2> #<path:/Users/matthias/plt/doc/release-notes> #<path:/Users/matthias/plt/doc/.svn> #<path:/Users/matthias/plt/collects/doc/tex2page> #<path:/Users/matthias/plt/collects/doc/beginning> #<path:/Users/matthias/plt/collects/doc/beginning-abbr> #<path:/Users/matthias/plt/collects/doc/intermediate> #<path:/Users/matthias/plt/collects/doc/intermediate-lambda> #<path:/Users/matthias/plt/collects/doc/advanced> #<path:/Users/matthias/plt/collects/doc/teachpack> #<path:/Users/matthias/plt/collects/doc/profj-beginner> #<path:/Users/matthias/plt/collects/doc/profj-intermediate> #<path:/Users/matthias/plt/collects/doc/profj-advanced>)
Collections:
((#<path:/Users/matthias/Unison/collects/> (#<path:.DS_Store> #<path:date> #<path:finance> #<path:testing> #<path:utils> #<path:web>)) (#<path:/Users/matthias/Library/PLT Scheme/301.15/collects> "non-existent path") (#<path:/Users/matthias/plt/collects> (#<path:.DS_Store> #<path:.svn> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:config> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:plai> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs> #<path:readline> #<path:reduction-semantics> #<path:repos-time-stamp> #<path:scribble> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:teachpack> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#t) (#t)))
>Description:
Run a program with Examples class and tests. Then request test coverage by clicking on the areas in the check window, twice. DrScheme goes into an infinite loop and becomes completely unresponsive. On one occasion, drscheme crashed on me when I clicked some combination of STOP and RUN. Repeated: thrice. 
>How-To-Repeat:
I will attach a file next. 
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/8066: professorJ diverges for test coverage
Date: Wed, 24 May 2006 13:34:31 -0400

 --Apple-Mail-2-533663273
 Content-Transfer-Encoding: 7bit
 Content-Type: application/text;
 	x-mac-type=54455854;
 	x-unix-mode=0644;
 	x-mac-creator=44725363;
 	name="modularity-imp.ss"
 Content-Disposition: attachment;
 	filename=modularity-imp.ss
 
 import draw.Posn;
 
 class CPosn extends Posn {
  CPosn(int x,int y) { super(x,y); }
 
  // is this CPosn close to p?
  boolean closeTo(Posn p) { 
   return this.distanceTo(p) < 3.0;
  }
 
  // how far is this posn from p? 
  double distanceTo(Posn p) {
   int deltax = this.x-p.x;
   int deltay = this.y-p.y;
   return Math.sqrt(deltax*deltax+deltay*deltay);
  }
 }
 
 class UFOWorld {
  IBombs il; 
  IShots is; 
  UFOWorld(IBombs il, IShots is) { 
   this.il = il; 
   this.is = is; 
  }
 
  /* change the status of 
  // those bombs that have been hit by a shot 
  // and those shots that have hit a bomb 
  UFOWorld changeBombsAndShots() {
   new UFOWorld(il.collide(is),is.collide(il));
  }
  */
 }
 
 /*
             +--------+               
             | IBombs |<-------------+
             +--------+              |
             +--------+              |
                 |                   |
                / \                  |
                ---                  |
                 |                   |
        ------------------           |
        |                |           |
   +---------+    +-------------+    |
   | NoBombs |    | ConsBomb    |    |
   +---------+    +-------------+    |
   +---------+    | Bomb first  |    |
                  | IBombs rest |----+
                  +-------------+ 
 */
 
 // the list of bombs dropped by a UFO
 interface IBombs {
  // change the status of all the bombs on \scheme{this} list 
  // that collided with any of the shots on \scheme{is}
  // and vice versa for shots 
  void collide(IShots is);
 }
 
 class NoBombs implements IBombs {
  NoBombs() { }
 
  public void collide(IShots is) { }
 }
 
 class ConsBomb implements IBombs {
  Bomb first;
  IBombs rest;
 
  ConsBomb(Bomb first, IBombs rest) {
   this.first = first;
   this.rest = rest;
  }
 
  public void collide(IShots is) {
   if (is.hits(this.first)) {
    this.first = this.first.collide();
   }
   this.rest.collide(is);
  }
 }
 
 /*
 +------+
 | Bomb |
 +------+
 +------+
 
 */
 
 // a bomb dropped by the UFO
 class Bomb extends CPosn {
  private boolean hit = false; 
 
  public Bomb(int x, int y) { 
   super(x,y);
  }
 
  private Bomb(int x, int y, boolean hit) { 
   super(x,y); 
   this.hit = hit;
  }
 
  // the bomb has been hit by a shot 
  public Bomb collide() { 
   return new Bomb(this.x,this.y,true);
  }
 }
 
 
 /*
             +--------+               
             | IShots |<-------------+
             +--------+              |
             +--------+              |
                 |                   |
                / \                  |
                ---                  |
                 |                   |
        ------------------           |
        |                |           |
   +---------+    +-------------+    |
   | NoShots |    | ConsShot    |    |
   +---------+    +-------------+    |
   +---------+    | Shot first  |    |
                  | IShots rest |----+
                  +-------------+ 
 */
 
 // the list of shots fired by the AUP
 interface IShots {
  // is any of the shots on \scheme{this} list close to the bomb \scheme{b}?
  // effect: for shots that hit b, call collide
  boolean hits(Bomb b);
 }
 
 class NoShots implements IShots {
  NoShots() { }
 
  public boolean hits(Bomb b) { 
   return false; 
  }
 }
 
 class ConsShot implements IShots {
   Shot first;
   IShots rest;
 
   ConsShot(Shot first, IShots rest) {
     this.first = first;
     this.rest = rest;
   }
 
  public boolean hits(Bomb b) { 
   if (this.first.closeTo(b)) {
    this.first = this.first.collide();
    this.rest.hits(b);
    return true;
   }
   else
    return this.rest.hits(b);
  }
 }
 
 /*
 +------+
 | Shot |
 +------+
 +------+
 
 */
 
 // a shot fired by the AUP
 class Shot extends CPosn {
  private boolean hit = false; 
 
  public Shot(int x, int y) { 
   super(x,y);
  }
 
  private Shot(int x, int y, boolean hit) { 
   super(x,y); 
   this.hit = hit;
  }
  
  // the shot has hit a bomb 
  public Shot collide() { 
   return new Shot(this.x,this.y,true);
  }
 }
 
 
 class Examples {
  CPosn p = new CPosn(3,4);
  CPosn q = new CPosn(3,3);
  CPosn r = new CPosn(12,5);
  boolean testPQ = check p.closeTo(q) expect true;
  boolean testPR = check p.closeTo(r) expect false;
 
  Shot s1 = new Shot(10,20);
  Shot s2 = new Shot(100,20);
  Bomb b1 = new Bomb(10,19);
 
  boolean test1() {
   IShots ls = new ConsShot(s1,new ConsShot(s2,new NoShots()));
   IBombs lb = new ConsBomb(b1,new NoBombs());
   lb.collide(ls);
   return (check lb expect new ConsBomb(b1.collide(),new NoBombs()))
 	   && (check ls expect new ConsShot(s1.collide(),new ConsShot(s2,new NoShots())));
  }
 
  boolean test2() {
   IShots ls = new ConsShot(s1,new ConsShot(s2,new NoShots()));
   IBombs lb = new ConsBomb(b1,new NoBombs());
   boolean x = check ls.hits(b1) expect true; 
   boolean y = check ls expect new ConsShot(s1.collide(),new ConsShot(s2,new NoShots()));
   return x && y;
  }
  
 }
 --Apple-Mail-2-533663273--
 

State changed from "open" to "closed" by kathyg at Thu, 01 Jun 2006 22:39:54 -0400
Reason>>> corrected in svn

