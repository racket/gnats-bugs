From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Oct 16 11:45:00 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.228])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m9GFipcO024125
	for <bugs@bugs.plt-scheme.org>; Thu, 16 Oct 2008 11:44:51 -0400
Message-Id: <200810161544.m9GFimZg024119@champlain.ccs.neu.edu>
Date: Thu, 16 Oct 2008 11:44:48 -0400
From: fournier.b@neu.edu
To: bugs@plt-scheme.org
Subject: I do not understand this error message in Professor J Intermediate

>Number:         9839
>Category:       profj
>Synopsis:       I do not understand this error message in Professor J Intermediate
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Oct 16 11:48:01 -0400 2008
>Closed-Date:    Tue Dec 06 14:12:55 -0500 2011
>Last-Modified:  Tue Dec 06 14:12:55 -0500 2011
>Originator:     Brad Fournier
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.1
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 3" (win32\i386\3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 101275736

Collections:
(("\\\\ccis-windows\\ccis\\MyHome\\.WIN_PROFILE\\Application Data\\PLT Scheme\\4.1.1\\collects" non-existent-path) ("V:\\drscheme.40x\\collects" "drscheme" "mzscheme" "scheme" "mred" "mzlib" "setup" "syntax" "config" "compiler" "framework" "srfi" "afm" "icons" "scribble" "string-constants" "syntax-color" "parser-tools" "mrlib" "planet" "net" "xml" "errortrace" "stepper" "launcher" "dynext" "make" "version" "help" "browser" "html" "info-domain" "algol60" "eopl" "frtime" "gui-debugger" "lang" "macro-debugger" "profj" "slideshow" "swindle" "test-box-recovery" "test-engine" "trace" "wxme" "combinator-parser" "texpict" "lazy" "htdch" "htdp" "graphics" "typed-scheme" "rnrs" "r6rs" "r5rs" "web-server" "tex2page" "teachpack" "slatex" "sgl" "scribblings" "s-exp" "redex" "readline" "preprocessor" "plot" "openssl" "mzcom" "mysterx" "hierlist" "games" "file" "ffi" "embedded-gui" "defaults"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Intermediate") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
Welcome to DrScheme, version 4.1.1 [3m].
Language: ProfessorJ: Intermediate; memory limit: 128 megabytes.
translate-require: Internal Error: (make-req IColor (colors)) not found
> 
>How-To-Repeat:
// Homework 4
// Brad Fournier
// Joe Montouro

// 4.1
// mobile-methods.java
/*
  Sample mobiles:
  ---------------
  
  Simple mobile      |
                     |
                     10
                    blue
  
  Complex mobile         |
                         |
                         |
             ------------+-----
             |                |
       ------+------          |
       |           |          | 
       10          |          40    
      red          10        green
                  blue
*/

import draw.*;
import geometry.*;
import colors.*;

/*
               +---------+                  
               | IMobile |<---------------+
               +---------+                |
               +---------+                |
                   |                      |
                  / \                     |
                  ---                     |
                   |                      |
         ---------------------            |
         |                   |            |
  +--------------+   +---------------+    |
  | Simple       |   | Complex       |    |
  +--------------+   +---------------+    |
  | int length   |   | int length    |    |
  | int weight   |   | int leftside  |    |
  | IColor color |   | int rightside |    |
  +--------------+   | IMobile left  |----+ 
                     | IMobile right |----+  
                     +---------------+ 
*/


//                                                        
//                                                        
//                                                        
//                                                        
//  *****  *** ***        **          *      **           
//    *     ** **          *                  *           
//    *     ** **   ****   * ***    ***       *     ****  
//    *     * * *  *    *  **   *     *       *    *    * 
//    *     * * *  *    *  *    *     *       *    ****** 
//    *     *   *  *    *  *    *     *       *    *      
//    *     *   *  *    *  **   *     *       *    *      
//  *****  *** ***  ****  ** ***    *****   *****   ***** 
//                                                        
//                                                        
//                                                        
//                                                        


// to represent a mobile
interface IMobile {

  // compute the total weight of this mobile
  int totalWeight();
  
  // compute the total length of this mobile
  int totalLength();
  
  // is this mobile is balanced?
  boolean isBalanced();
  
  // draws this mobile on the given canvas at the given posn
  boolean draw(Canvas c, Posn p);

}


//                                                
//                                                
//                                                
//                                                
//  *** *     *                      **           
// *   **                             *           
// *        ***   ** *  *  ** **      *     ****  
//  ****      *    ** ** *  **  *     *    *    * 
//      *     *    *  *  *  *   *     *    ****** 
//      *     *    *  *  *  *   *     *    *      
// **   *     *    *  *  *  *   *     *    *      
// * ***    ***** *** ** *  ****    *****   ***** 
//                          *                     
//                         ***                    
//                                                
//                                                


// to represent an item hanging at the end of a mobile
class Simple implements IMobile {
  int length;
  int weight;
  IColor color;

  Simple(int length, int weight, IColor color) {
    this.length = length;
    this.weight = weight;
    this.color = color;
  }

/* TEMPLATE:
   FIELDS:
    ... this.length ...         -- int
    ... this.weight ...         -- int
    ... this.color ...          -- IColor

    METHODS:
    ... this.totalWeight() ...      -- int
    ... this.totalLength() ...      -- int
    ... this.isBalanced() ...       -- boolean
    ... this.draw(c, p) ...         -- boolean
*/

  // compute the total weight of this simple mobile
  int totalWeight(){
    return this.weight;
  }
  
  // computes the total height of this simple mobile
  // totalLength: IMobile -> int
  int totalLength(){
    return this.length;
  }
  
  // determines whether or not this simple mobile is balanced
  // isBalanced: IMobile -> boolean
  boolean isBalanced(){
    return true;
  }
  
  // draws this simple mobile on the given canvas at the given posn
  // draw: IMobile Canvas Posn -> boolean
  boolean draw(Canvas c, Posn p){
    return (c.show()) &&
           (c.drawLine(p, new Posn(p.x, (p.y + this.length)), new Black())) &&
           (c.drawDisk(new Posn(p.x, (p.y + this.length)), 
                       this.weight, this.color));
  }
  
}


//                                                        
//                                                        
//                                                        
//                                                        
//   ****                            **                   
//  *   *                             *                   
// *        ****  ** *  *  ** **      *     ****   **  ** 
// *       *    *  ** ** *  **  *     *    *    *   *  *  
// *       *    *  *  *  *  *   *     *    ******    **   
// *       *    *  *  *  *  *   *     *    *         **   
//  *   *  *    *  *  *  *  *   *     *    *        *  *  
//   ***    ****  *** ** *  ****    *****   *****  **  ** 
//                          *                             
//                         ***                            
//                                                        
//                                                        


// to represent a part of support structure for a mobile
class Complex implements IMobile {
  int length;
  int leftSide;
  int rightSide;
  IMobile left;
  IMobile right;

  Complex(int length, int leftSide, int rightSide, 
          IMobile left, IMobile right) {
    this.length = length;
    this.leftSide = leftSide;
    this.rightSide = rightSide;
    this.left = left;
    this.right = right;
  }

/* TEMPLATE:
   FIELDS:
    ... this.length ...           -- int
    ... this.leftside ...         -- int
    ... this.rightside ...        -- int
    ... this.left ...             -- IMobile
    ... this.right ...            -- IMobile

    METHODS:
    ... this.totalWeight() ...      -- int
    ... this.totalLength() ...      -- int
    ... this.isBalanced) ...        -- boolean
    ... this.draw(c, p) ...         -- boolean
  
    METHODS FOR FIELDS:
    ... this.left.totalWeight() ...      -- int
    ... this.left.totalLength() ...      -- int
    ... this.left.isBalanced) ...        -- boolean
    ... this.left.draw(c, p) ...         -- boolean

    ... this.right.totalWeight() ...      -- int
    ... this.right.totalLength() ...      -- int
    ... this.right.isBalanced() ...       -- boolean
    ... this.right.draw(c, p) ...         -- boolean
*/

  // compute the total weight of this complex mobile
  int totalWeight(){
    return this.left.totalWeight() +
           this.right.totalWeight();
  }
  
  // computes the total length of this complex mobile
  // totalLength: IMobile -> int
  int totalLength(){
    if (this.left.totalLength() > this.right.totalLength()){
      return this.length + this.left.totalLength();
    }
    else {return this.length + this.right.totalLength();}
  }
  
  // determines whether or not this complex mobile is balanced
  // isBalanced: IMobile -> boolean
  boolean isBalanced(){
    if ((this.left.totalWeight() * this.leftSide) == 
        (this.right.totalWeight() * this.rightSide)){
      return true;
    }
    else {return false;}
  }
  
  // draws this complex mobile on teh given canvas at the given posn
  // draw: IMobile Canvas Posn: -> boolean
  boolean draw(Canvas c, Posn p){
    return c.show() &&
           c.drawLine(p, new Posn(p.x, p.y + this.length), new Black()) &&
           c.drawLine(new Posn(p.x, p.y + this.length), 
                      new Posn(p.x - this.leftSide, p.y + this.length), 
                      new Black()) &&
           c.drawLine(new Posn(p.x, p.y + this.length), 
                      new Posn(p.x + this.rightSide, p.y + this.length), 
                      new Black()) &&
           this.left.draw(c, 
                          new Posn(p.x - this.leftSide, p.y + this.length)) &&
           this.right.draw(c, 
                           new Posn(p.x + this.rightSide, p.y + this.length));
  }

}


/*
  Sample mobiles:
  ---------------
  
  simple1:
                     |
                     |
                     10
                    blue
  
  complex2 (with complex1 on the left and simple2 on the right)
                 complex1 (with simple3 on the left, simple1 on the right)
  
                         |
                         |
                         |
             ------------+------
             |                 |
       ------+------           |
       |           |           | 
       10          |           40    
      red          10         green
                  blue
*/

//----------------------------------------------------------------
// 4.2
// 4.2.a in Examples class

// files-directories.java

/*
             +-----------------------+
             |  +-----------------+  |
             |  |                 |  |
             v  v                 |  |
         +-------+                |  |
         | ILoFD |                |  |
         +-------+                |  |
            / \                   |  | 
            ---                   |  |
             |                    |  |
      ---------------             |  |
      |             |             |  |
  +--------+  +------------+      |  |
  | MtLoFD |  | ConsLoFD   |      |  |
  +--------+  +------------+      |  |
            +-| IFD first  |      |  |
            | | ILoFD rest |------+  |
            | +------------+         |
            |                        |
            v                        |
           +-------+                 |
           | IFD   |                 |
           +-------+                 |
               / \                   |
               ---                   |
                |                    |
        -------------------          |
        |                 |          |
  +-------------+  +--------------+  |
  | File        |  | Directory    |  |
  +-------------+  +--------------+  |
  | String name |  | String name  |  |
  | int size    |  | ILoFD fdlist |--+
  | String kind |  +--------------+  
  +-------------+ 
*/


//                                        
//                                        
//                                        
//                                        
//  *****  ***             ******  ****   
//    *     *               *   *   *  *  
//    *     *       ****    * *     *   * 
//    *     *      *    *   ***     *   * 
//    *     *      *    *   * *     *   * 
//    *     *   *  *    *   *       *   * 
//    *     *   *  *    *   *       *  *  
//  *****  ******   ****   ***     ****   
//                                        
//                                        
//                                        
//                                        


// to represent a list of files and directories 
// in a computer file system
interface ILoFD{
  
  boolean isEmpty();
  
   int listSize();
  
}


//                                                
//                                                
//                                                
//                                                
// *** ***         ***             ******  ****   
//  ** **   *       *               *   *   *  *  
//  ** **  *****    *       ****    * *     *   * 
//  * * *   *       *      *    *   ***     *   * 
//  * * *   *       *      *    *   * *     *   * 
//  *   *   *       *   *  *    *   *       *   * 
//  *   *   *   *   *   *  *    *   *       *  *  
// *** ***   ***   ******   ****   ***     ****   
//                                                
//                                                
//                                                
//                                                


// to represent an empty list of files and directories 
// in a computer file system
class MtLoFD implements ILoFD{
  MtLoFD(){}
  
  // checks to see if this MtLoFD is empty
  // isEmpty: ILoFD -> boolean
  boolean isEmpty(){
    return true;
  }
 
  
  // calculates the total size of this empty list
  // totalSize: ILoFD -> int
  int listSize(){
    return 0;
  }
  
}


//                                                                
//                                                                
//                                                                
//                                                                
//   ****                          ***             ******  ****   
//  *   *                           *               *   *   *  *  
// *        ****   ** **    *****   *       ****    * *     *   * 
// *       *    *   **  *  *    *   *      *    *   ***     *   * 
// *       *    *   *   *   ****    *      *    *   * *     *   * 
// *       *    *   *   *       *   *   *  *    *   *       *   * 
//  *   *  *    *   *   *  *    *   *   *  *    *   *       *  *  
//   ***    ****   *** *** *****   ******   ****   ***     ****   
//                                                                
//                                                                
//                                                                
//                                                                


// to represent a nonempty list of files and directories 
// in a computer file system
class ConsLoFD implements ILoFD{
  IFD first;
  ILoFD rest;
  
  ConsLoFD(IFD first, ILoFD rest){
    this.first = first;
    this.rest = rest;
  }
  
  /* TEMPLATE:
   FIELDS:
    ... this.first ...            -- IFD
    ... this.rest ...             -- ILoFD

    METHODS:
    ... this.isEmpty() ...        -- boolean
    ... this.listSize() ...       -- int
  
    METHODS FOR FIELDS:
    ... this.first.totalSize() ...    -- int
    ... this.rest.listSize() ...      -- int

  */
  
  // checks to see if this ConsLoFD is empty
  // isEmpty: ILoFD -> boolean
  boolean isEmpty(){
    return false;
  }
  
  
  // calculates the total size of this nonempty list
  // totalSize: ILoFD -> int
  int listSize(){
    return this.first.totalSize() + this.rest.listSize();
  }
  
}


//                        
//                        
//                        
//                        
//  *****  ******  ****   
//    *     *   *   *  *  
//    *     * *     *   * 
//    *     ***     *   * 
//    *     * *     *   * 
//    *     *       *   * 
//    *     *       *  *  
//  *****  ***     ****   
//                        
//                        
//                        
//                        


// to represent files and directories in a computer file system
interface IFD{
  
   int totalSize();
  
  //ILoFD allFiles(String type);
}


//                                
//                                
//                                
//                                
// ******     *      **           
//  *   *             *           
//  * *     ***       *     ****  
//  ***       *       *    *    * 
//  * *       *       *    ****** 
//  *         *       *    *      
//  *         *       *    *      
// ***      *****   *****   ***** 
//                                
//                                
//                                
//                                


// to represent files in a computer file system
class File implements IFD{
  String name;
  int size;
  String kind;
  
  File(String name, int size, String kind){
    this.name = name;
    this.size = size;
    this.kind = kind;
  }
  
    /* TEMPLATE:
   FIELDS:
    ... this.name ...            -- String
    ... this.size ...            -- int
    ... this.kind ...            -- String

    METHODS:
    ... this.totalSize() ...        -- int
    ... this.allFiles() ...         -- ConsLoFD

  */
  

  // counts the number of files in this File
  // count: IFD -> int
  int totalSize(){
    return this.size;
  }

  /*
  // returns a list of all the files in this File with the given type
  // allFiles: IFD -> ILoFD
  ILoFD allFiles(String type){
    if (this.kind == type) {
      return new ConsLoFD(this, new MtLoFD());
    }
    else {
      return new MtLoFD();
    }
  }
  */
}


//                                                                        
//                                                                        
//                                                                        
//                                                                        
// ****       *                                                           
//  *  *                                    *                             
//  *   *   ***    ** ***   ****    *** *  *****    ****   ** ***  *** ***
//  *   *     *     **     *    *  *   **   *      *    *   **      *   * 
//  *   *     *     *      ******  *        *      *    *   *       *   * 
//  *   *     *     *      *       *        *      *    *   *        * *  
//  *  *      *     *      *       *    *   *   *  *    *   *        * *  
// ****     *****  *****    *****   ****     ***    ****   *****      *   
//                                                                    *   
//                                                                  ***   
//                                                                        
//                                                                        


// to represent a directory in a computer file system
class Directory implements IFD{
  String name;
  ILoFD fdlist;
  
  Directory(String name, ILoFD fdlist){
    this.name = name;
    this.fdlist = fdlist;
  }
  
  /* TEMPLATE:
   FIELDS:
    ... this.name ...            -- String
    ... this.fdlist ...          -- ILoFD

    METHODS:
    ... this.totalSize() ...        -- int
    ... this.allFiles() ...         -- ConsLoFD
    
    METHODS FOR FIELDS:
    ... this.fdlist.listSize() ...   -- int
  */
  
  // counts the number of files in this Directory
  // count: IFD -> int
  int totalSize(){
      return this.fdlist.listSize() + 4;
  }

 /* 
  // returns a list of all the files in this File with the given type
  // allFiles: IFD -> ILoFD
  ILoFD allFiles(String type){
    if (this.fdlist.first.kind == type) {
      return new ConsLoFD(this.fdlist.first, this.fdlist.rest.allFiles(type));
    }
    else {
      return this.fdlist.rest.sllFiles(type);
    }
  }
*/
}




//                                                                
//                                                                
//                                                                
//                                                                
// ******                                    **                   
//  *   *                                     *                   
//  * *    **  **   ****  ** *  *  ** **      *     ****    ***** 
//  ***     *  *   *    *  ** ** *  **  *     *    *    *  *    * 
//  * *      **     *****  *  *  *  *   *     *    ******   ****  
//  *        **    *    *  *  *  *  *   *     *    *            * 
//  *   *   *  *   *   **  *  *  *  *   *     *    *       *    * 
// ******  **  **   *** ***** ** *  ****    *****   *****  *****  
//                                  *                             
//                                 ***                            
//                                                                
//                                                                


class Examples {
  Examples(){}

  IMobile simple1 = new Simple(20, 10, new Blue());
  IMobile simple2 = new Simple(30, 40, new Green());
  IMobile simple3 = new Simple(10, 10, new Red());
  IMobile simple4 = new Simple(70, 15, new Blue());
  IMobile simple5 = new Simple(100, 10, new Green());

  IMobile complex1 = new Complex(10, 5, 5, this.simple3, this.simple1);
  IMobile complex2 = new Complex(30, 10, 5, this.complex1, this.simple2);
  IMobile complex3 = new Complex(20, 5, 10, this.complex1, this.complex2);
  IMobile complex4 = new Complex(30, 10, 20, this.simple1, this.simple2);
  IMobile complex5 = new Complex(70, 50, 60, this.simple4, this.simple5);
  IMobile drawTest = new Complex(60, 30, 60, this.complex5, this.simple4);
  
  Canvas c = new Canvas(400, 400);
  
  // test the method totalWeight for the IMobile class hierarchy
  boolean testTotalWeight =
    (check this.simple1.totalWeight() expect 10) &&
    (check this.complex1.totalWeight() expect 20) &&
    (check this.complex2.totalWeight() expect 60);
    
    
  // test the method totalLength for the IMobile class hierarchy
  boolean testTotalLength = 
    (check this.simple1.totalLength() expect 20) &&
    (check this.complex1.totalLength() expect 30) &&
    (check this.complex2.totalLength() expect 60);
    
    
  // test the method isBalanced for the IMobile class hierarchy
  boolean testIsBalanced = 
    (check this.simple1.isBalanced() expect true) &&
    (check this.complex1.isBalanced() expect true) &&
    (check this.complex2.isBalanced() expect true) &&
    (check this.complex3.isBalanced() expect false) &&
    (check this.complex4.isBalanced() expect false);
    
  // test the method draw for the IMobile class hierarchy
  boolean testDraw1 = 
    (check this.drawTest.draw(this.c, new Posn(200, 50)) expect true);
    
  //---------------------------------------------------------  
  // Examples and tests for the class hierarchy for a computer file system
  /*
    Home:  
          Docs: 
                      text1
                      text2
          Pictures: 
                      pic1
                      Archives:   
                                  pic2
                                  pic3
  */
    
  IFD pic1 = new File("party", 6000, "jpeg");
  IFD pic2 = new File("beach", 3500, "jpeg");
  IFD pic3 = new File("river", 2900, "jpeg");
  
  IFD text1 = new File("letter", 600, "txt");
  IFD text2 = new File("memo", 500, "txt");
  
  ILoFD mtlofd = new MtLoFD();
  
  ILoFD archList = 
    new ConsLoFD(this.pic2, new ConsLoFD(this.pic3, this.mtlofd));    
  IFD archives = new Directory("Archives", this.archList);
  
  ILoFD picList = new ConsLoFD(this.pic1,
                    new ConsLoFD(this.archives, this.mtlofd)); 
  IFD pictures = new Directory("Pictures", this.picList);
                   
  ILoFD docList = new ConsLoFD(this.text1, 
                               new ConsLoFD(this.text2, this.mtlofd));
  IFD docs = new Directory("Docs", this.docList);
  
  ILoFD homeList = new ConsLoFD(this.docs, 
                                new ConsLoFD(this.pictures, this.mtlofd));
  IFD home = new Directory("Home", this.homeList);

  // 4.2.a
  IFD picturepage = new File("pictures", 2500, "html");
  IFD quotationspage = new File("quotations", 3000, "html");
  IFD home2 = new File("home", 1500, "jpeg");
  IFD friend = new File("friend", 3600, "jpeg");
  IFD brother = new File("brother", 3200, "jpeg");
  IFD twain = new File("twain", 750, "txt");
  IFD cervantes = new File("cervantes", 640, "txt");
  
  ILoFD pictureList = new ConsLoFD(this.home2, 
                                   new ConsLoFD(this.friend, 
                                                new ConsLoFD(this.brother, 
                                                             this.mtlofd)));
  IFD pictures2 = new Directory("Pictures", this.pictureList);
  
  ILoFD txtList = new ConsLoFD(this.twain, 
                               new ConsLoFD(this.cervantes, this.mtlofd));
  IFD quotations = new Directory("quotations", this.txtList);
  
  IFD pages = 
  new Directory("Pages", new ConsLoFD(this.picturepage, 
                           new ConsLoFD(this.quotationspage, 
                              new ConsLoFD(this.pictures2, 
                                new ConsLoFD(this.quotations, this.mtlofd)))));

  // test method isEmpty for LoFD class hierarchy
  boolean testIsEmpty = 
  (check this.mtlofd.isEmpty() expect true) &&
  (check this.archList.isEmpty() expect false) &&
  (check this.picList.isEmpty() expect false);
  
  /*
  // test method listSize for the LoFD class hierarchy
  boolean testListSize = 
  (check this.mtlofd.listSize() expect 0) &&
  (check this.archList.listSize() expect 6400);
  
  // test method totalSize for the IFD class hierarchy
  boolean testTotalSize = 
  (check this.picturepage.totalSize() expect 2500); //&&
  (check this.quotations.totalSize() expect 8304);
*/
}
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by eli at Tue, 06 Dec 2011 14:12:55 -0500
Reason>>> ProfessorJ is no longer distributed with Racket.

