From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Sep 27 14:50:45 2006
Received: from wr-out-f131.google.com (wr-out-0708.google.com [64.233.184.131])
	by champlain.ccs.neu.edu (8.13.7/8.13.7) with ESMTP id k8RIocFp000454
	for <bugs@bugs.plt-scheme.org>; Wed, 27 Sep 2006 14:50:39 -0400
Message-Id: <200609271850.k8RIobG3000448@champlain.ccs.neu.edu>
Date: Wed, 27 Sep 2006 14:50:37 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: check ... expects ... blows up in Advanced 

>Number:         8300
>Category:       profj
>Synopsis:       check ... expects ... blows up in Advanced
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Sep 27 14:55:02 -0400 2006
>Closed-Date:    Mon Oct 02 16:19:36 -0400 2006
>Last-Modified:  Mon Oct 02 16:19:36 -0400 2006
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        352.6-svn22sep2006
>Environment:
macosx "Darwin america.local 8.7.0 Darwin Kernel Version 8.7.0: Fri May 26 15:20:53 PDT 2006; root:xnu-792.6.76.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "help" "acl2" "teachpack"))
Human Language: english
(current-memory-use) 88506076

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/352.6/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "browser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "finish-install" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "reduction-semantics" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "ssax" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack"!
  "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "xelda" "xml"))
Teachpack filenames: (#<path:/Users/matthias/plt/collects/teachpack/htdp/world.ss>)
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
. insert in text% (character without position case): expected argument of type <character>; given #<struct:java:exception>
> 
>How-To-Repeat:
run this program: 

/* TODO: 
create new file for rest 
   -- abstract over Shot and Charge (HOW?)
   -- abstract over Listof Shots and Bombs with IMoving 
   -- abstract over Listof ... with Parametric Polymorphism 
*/

/* UFO WORLD: the imperative version

   -- the UFO moves continuously and somewhat randomly to the right 
   --  ... drops charges on a random basis
   -- the Charges move continously
   -- the AUP moves in reaction to keystrokes only, 
   --  ... first shots at the UFO 
   -- the Shots move continously
   -- NO ABSTRACTION:  
*/

import idraw.*;
import colors.*;
import geometry.*;
import java.util.Random;
^L
// -----------------------------------------------------------------------------
// representing the world of UFOs, AUPs, and Shots
class WorldUFO extends World {
 private int WIDTH; 
 private int HEIGHT;

 private UFO ufo;
 private AUP aup;
 private IMovables shots = new MtMovables();
 private IMovables charges = new MtMovables();
 private Color BACKGROUND = new Blue();

 public WorldUFO(int w, int h) { 
  WIDTH  = w; 
  HEIGHT = h; 

  ufo = new UFO(new Location(88,20),WIDTH,HEIGHT);
  aup = new AUP(10,WIDTH,HEIGHT);
 }

 public void go() { 
  bigBang(WIDTH,HEIGHT,.1);
  return ; 
 }

 private Random r = new Random();

 // what happens to this world on every tick of the clock 
 public void onTick() {
  if (0 == (r.nextInt() % 2))
   dropCharge();

  if (ufo.landedP())
   endOfWorld("The UFO has landed. You lost.");
  else if (shots.hit(ufo))
   endOfWorld("You have shot down the UFO. You won.");
  else if (charges.hit(aup))
   endOfWorld("Ouch. Some charge hit the AUP. You lost.");
  else 
   move();
  return ;
 }

 // what happens this world on every key event
 public void onKeyEvent(String k) { 
  if (k.equals("up")) 
   fireShot();
  else 
   aup.move(k);
  return ;
 }

 // move the objects in this world that move on time 
 // this ought to be PRIVATE but ProfessorJ has a bug that prevents this
 public void move() {
  ufo.move();
  shots.move();
  charges.move();
  return ;
 }

 // add a shot to this world 
 // effect: change the list of shots 
 protected void fireShot() { 
  shots = new ConsMovables(aup.fireShot(),shots);
  return ;
 }

 // add new charge to this world 
 // effect: change the list of charges 
 protected void dropCharge() { 
   charges = new ConsMovables(ufo.dropCharge(),charges); 
 } 

 // draw this World 
 public void draw() {
  ufo.draw(theCanvas);
  aup.draw(theCanvas);
  shots.draw(theCanvas);
  charges.draw(theCanvas);
  return ; 
 }

 // erase this World
 public void erase() { 
  theCanvas.drawRect(new Location(0,0),WIDTH,HEIGHT,BACKGROUND);
  return ;
 }
}

^L
// -----------------------------------------------------------------------------

/*
+----------------+
| AUP            |
+----------------+
| int location   |
| Color aupColor |
+----------------+

*/

// an anti-ufo platform
class AUP implements IHittable {
 private int WIDTH; 
 private int HEIGHT;
 private int location;
 private Color aupColor = new Red();
 private double CLOSE = 10.0;

 AUP(int l, int w, int h) {
  WIDTH = w; 
  HEIGHT = h; 
  location = l;
 }

 // move this AUP to the right by three pixels
 void move(String k) {
  if (k.equals("left"))
   location = location-3;
  else if (k.equals("right"))
   location = location+3;
  else 
   return ;
  return ; 
 }

 // is this location close to this AUP
 public boolean isHit(Location x) { 
  return new Location(location,HEIGHT).distanceTo(x) <= CLOSE;
 }

 // fire a shot (create it)
 public Shot fireShot() { 
  return new Shot(new Location(location+12,HEIGHT-22));
 }

 // draw this AUP
 void draw(Canvas w) {
  w.drawRect(new Location(location,HEIGHT-10),24,6,aupColor);
  w.drawRect(new Location(location+12,HEIGHT-20),4,10,aupColor);
  return; 
 }
}
^L
// -----------------------------------------------------------------------------

/*
+--------------------+
| UFO                |
+--------------------+
| Location location  |
| Color colorUFO     |
+--------------------+
*/

// representing a UFO
class UFO implements IHittable {
 private int WIDTH; 
 private int HEIGHT;
 private Location location;
 private Color colorUFO = new Green();
 private double CLOSE = 10.0;

 UFO(Location l, int w, int h) {
  WIDTH  = w; 
  HEIGHT = h; 
  location = l;
 }

 private Random r = new Random(); 

 // move this UFO down by 3 pixels 
 public void move() {
  int c = r.nextInt(); 
  if (landedP())
   return ; // don't move anymore, it's on the ground 
  else {
   if (0 == (c % 3))
    location = location.translate(0,3);
   else if (1 == (c % 3))
    location = location.translate(-3,3);
   else 
    location = location.translate(6,3); 
   return ; 
  }
 }

 // has the UFO landed yet?
 public boolean landedP() {
  return location.y >= HEIGHT - 3;
 }

 // is this location close to this UFO 
 public boolean isHit(Location x) { 
  return location.distanceTo(x) <= CLOSE;
 }

 public Charge dropCharge() { 
  return new Charge(new Location(location.x,location.y+2));
 }

 // draw this UFO into the world's canvas
 public void draw(Canvas w) {
  w.drawDisk(location,10,colorUFO);
  w.drawRect(new Location(location.x-30,location.y-2),60,4,colorUFO); 
  return ;
 }
}
                            
^L
// -----------------------------------------------------------------------------

/*
+-------------------+
| Shot              |
+-------------------+
| Location location |
+-------------------+

*/

// a shot in flight
class Shot implements IMovable {
 Location location;
 Color shotColor = new Yellow(); 

 Shot(Location l) {
   location = l;
 }

 // move this shot up by 3 pixels 
 public void move() {
  location = location.translate(0,-3);
  return ; 
 }

 // did this shot hit the UFO
 public boolean hit(IHittable u) {
  return u.isHit(location);
 }

 // draw this shot on the canvas 
 public void draw(Canvas w) { 
  w.drawRect(location,2,10,shotColor);
  return ;
 }
}

^L
// -----------------------------------------------------------------------------

/*
+-------------------+
| Charge            |
+-------------------+
| Location location |
+-------------------+

*/

// a charge dropped from UFO, in flight
class Charge implements IMovable {
 Location location;
 Color chargeColor = new White(); 

 Charge(Location location) {
   this.location = location;
 }

 // move this charge up by 8 pixels 
 public void move() {
  location = location.translate(0,8);
  return ; 
 }

 // did this charge hit the AUP
 public boolean hit(IHittable u) {
  return u.isHit(location);
 }

 // draw this charge on the canvas 
 public void draw(Canvas w) { 
  w.drawRect(location,10,2,chargeColor);
  return ;
 }
}

^L
// -----------------------------------------------------------------------------
class Location extends Posn {
 Location(int x,int y) { 
  super(x,y);
 }

 // "move" this Location by deltaX and deltaY 
 public Location translate(int deltaX, int deltaY) { 
  return new Location(this.x+deltaX,this.y+deltaY);
 }

 // compute distance between this location and other 
 public double distanceTo(Location other) { 
  return new Location(other.x-this.x,other.y-this.y).distanceToO();
 }

 // compute distance of this location to origin 
 // should be PRIVATE but ProfessorJ has a bug 
 protected double distanceToO() { 
  return Math.sqrt(x*x + y*y);
 }
}

^L
// -----------------------------------------------------------------------------

// a weapon 
interface IMovable {
 // move this object 
 void move(); 

 // did this object get close to some destructible object? 
 boolean hit(IHittable l);

 // draw this object 
 void draw(Canvas c); 
}

// -----------------------------------------------------------------------------
interface IHittable {
 // can this object be hit? 
 boolean isHit(Location l); 
}

^L
// -----------------------------------------------------------------------------

/*
            +----------+               
            | IMovables |<----------------+
            +----------+                  |
               / \                        |
               ---                        |
                |                         |
       ------------------                 |
       |                |                 |
  +------------+    +----------------+    |
  | MtMovables |    | ConsMovables   |    |
  +------------+    +----------------+    |       +-------------+
  +------------+    | IMovable first |----------->| IMovable    |
                    | IMovables rest |----+       +-------------+
                    +----------------+            | void move() | 
                                                  +-------------+ 
*/

// managing a number of moving objects that may hit something 
interface IMovables {
 // move all these charges
 void move();

 // did any of these charges hit the AUP
 boolean hit(IHittable u);

 // draw these Shots into w
 void draw(Canvas w);
}

// -----------------------------------------------------------------------------
// no charges
class MtMovables implements IMovables {
 MtMovables() { }

 public void move() { return ; }
 public boolean hit(IHittable u) { return false; }
 public void draw(Canvas w) { return ; }
}

// -----------------------------------------------------------------------------
// add one to the bunch 
class ConsMovables implements IMovables {
 IMovable first;
 IMovables rest;

 public ConsMovables(IMovable first, IMovables rest) {
  this.first = first;
  this.rest = rest;
 }

 public void move() { 
  first.move();
  rest.move();
  return ; 
 }

 public boolean hit(IHittable u) { 
  if (((first instanceof Charge) && (u instanceof AUP)) ||
         ((first instanceof Shot) && (u instanceof UFO)))      
   return first.hit(u) || rest.hit(u);
  else 
   return Util.error("ouch");
 }

 public void draw(Canvas w) { 
  first.draw(w);
  rest.draw(w); 
  return ;
 }
}

^L
// -----------------------------------------------------------------------------
class Go {
  
  WorldUFO ufow = new WorldUFO(400,700);
  Go() { ufow.go(); }
}

// -----------------------------------------------------------------------------
class ExampleShots {
 boolean testShotsMove() { 
  Shot s1 = new Shot(new Location(10,20));
  Shot s2 = new Shot(new Location(15,30));
  IMovables los = new ConsMovables(s1,new ConsMovables(s2,new MtMovables()));
  IMovables move_los = new ConsMovables(new Shot(new Location(10,17)),
			new ConsMovables(new Shot(new Location(15,27)),
			    new MtMovables()));

  los.move();

  return (check s1.location expect new Location(10,17))
	   && (check s2.location expect new Location(15,27))
 	   && (check los expect move_los);
 }
}

class ExampleCharges {
 boolean testChargesMove() { 
  Charge s1 = new Charge(new Location(10,20));
  Location s1Moved = new Location(10,28);
  Charge s2 = new Charge(new Location(15,30));
  Location s2Moved = new Location(15,38);
  IMovables los = new ConsMovables(s1,new ConsMovables(s2,new MtMovables()));
  IMovables move_los = new ConsMovables(new Charge(s1Moved),
			new ConsMovables(new Charge(s2Moved),
			    new MtMovables()));

  los.move();

  return (check s1.location expect s1Moved)
      && (check s2.location expect s2Moved)
      && (check los expect move_los);
 }
}

class ExampleHitAUP {
 AUP a = new AUP(10,100,200);
 Charge c = new Charge(new Location(11,199));
 boolean test1 = check c.hit(a) expect true; 
}

class ExampleBad {
 AUP a = new AUP(10,100,200); 
 Shot s1 = new Shot(new Location(10,20));
 Shot s2 = new Shot(new Location(15,30));
 IMovables los = new ConsMovables(s1,new ConsMovables(s2,new MtMovables()));
 boolean testBad = check los.hit(a) expect true; // I really expect this to blow up with failure 
}
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "kathyg" by kathyg at Mon, 02 Oct 2006 16:19:36 -0400
Reason>>> .

State changed from "open" to "closed" by kathyg at Mon, 02 Oct 2006 16:19:36 -0400
Reason>>> I have now committed a fix that causes exceptions to print properly within ProfJ

