From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Oct 19 15:19:43 2007
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.175])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l9JJJgTT012087
	for <bugs@bugs.plt-scheme.org>; Fri, 19 Oct 2007 15:19:43 -0400
Message-Id: <200710191919.l9JJJZYf012082@champlain.ccs.neu.edu>
Date: Fri, 19 Oct 2007 15:19:35 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: throw new RuntimeException(msg); triggers unbelievably strange syntax error

>Number:         9011
>Category:       profj
>Synopsis:       throw new RuntimeException(msg); triggers unbelievably strange syntax error
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Oct 19 15:20:01 -0400 2007
>Closed-Date:    Tue Dec 06 14:11:38 -0500 2011
>Last-Modified:  Tue Dec 06 14:11:38 -0500 2011
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        371.3-svn15oct2007
>Environment:
macosx "Darwin antarctica.local 8.10.2 Darwin Kernel Version 8.10.2: Wed Jun 20 21:49:49 PDT 2007; root:xnu-792.22.6~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "gui" "guide" "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web-server-guide" "web-server-reference" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack") (* "/Users/matthias/Library/PLT Scheme/planet/300/371.3/cache/plt/typed-scheme.plt/1/5/doc"))
Human Language: english
(current-memory-use) 178186516

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/371.3/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery"!
  "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
run the below, then look for ---> and follow instruction; watch error show up
>How-To-Repeat:
/* compile:
   javac -Xlint list-objects-general.java
   javac -Xlint stack-object.java
*/

import idraw.*;
import geometry.*;
import colors.*;

class W extends World { 
  private int WIDTH = 600;
  private int HEIGHT = 200; 
  
  private DrawableStack left  = new DrawableStack(); 
  private DrawableStack mid   = new DrawableStack(); 
  private DrawableStack right = new DrawableStack(); 
  
  W() { 
    left.push(new Disk(1,100));
    left.push(new Disk(2,60));
    left.push(new Disk(3,30));
  }
  
  public void go() { 
    // theCanvas.show(WIDTH,HEIGHT);
    bigBang(WIDTH,HEIGHT,.1);
    return ;
  }

  public void draw() {
    left.draw(theCanvas,150);
    mid.draw(theCanvas,300); 
    right.draw(theCanvas,450);
    theCanvas.drawString(new Posn(10,10),movingFromTo);
    return ; 
  }
  
  public void onTick() { 
    return ; 
  }
  
  // has the player started a move?
  private boolean inMove = false;
  // from where is the disk to be moved 
  private String from = ""; 
  // for informative messages to the player 
  private String movingFromTo = ""; 

  // for every pair of pole labels, initiate a move of a disk 
  public void onKeyEvent(String ke) {
    if (!inMove) {
      if (isPole(ke)) {
        inMove = true; 
        movingFromTo = "from ".concat(ke); 
        from = ke; }
      else { 
        return ; }
      }
    else {
      if (isPole(ke)) {
        movingFromTo = movingFromTo.concat(" to ").concat(ke);
        move(from,ke);
        movingFromTo = ""; 
        from = "";
        inMove = false;
        }
      else {
        return ; }
      }
  }
  
  // is ke a label for a pole? [L, M, or R]
  private boolean isPole(String ke) { 
    return ke.equals("L") || ke.equals("M") || ke.equals("R"); 
  }
  
  // move a disk from the stack labeled 'from' to the one labeled 'to'
  // MISSING: error checks!!!
  private void move(String from, String to) { 
    Disk moving; 
   // pop disk from ...
    if (from.equals("L")) {
      moving = (Disk)(left.top()); 
      left.pop(); }
    else if (from.equals("M")) {
      moving = (Disk)(mid.top());
      mid.pop(); }
    else {
      moving = (Disk)(right.top()); 
      right.pop(); }
    // and push onto to 
    if (to.equals("L")) {
      left.push(moving); }
    else if (to.equals("M")) {
      mid.push(moving); }
    else {
      right.push(moving); }
    return ; 
  }
}

interface IDrawable {
  void draw(Canvas c, int x, int y); 
}

// -----------------------------------------------------------------------------
// disks

class Disk implements IDrawable { // <--- omit the s in implements and you loop
  private int width; 
  private int height = 10; 
  private int label; 
  private AColor RED = new Red(); 

  public Disk(int l, int w) {
    width = w; 
    label = l;
  }
  
  public void draw(Canvas c, int x, int y) { 
    c.drawRect(new Posn(x-width/2+5 /* the width of the pole */,
                        y-height),
               width,height,RED);
    return ;
  }
}
    
// -----------------------------------------------------------------------------
// stack of Objects

class Stack { 
    protected IList content = new Mt(); 
    public Stack() { }

    // is the stack empty? 
    public boolean isEmpty() { 
      return this.content.isEmpty(); 
    }

    // add x to the top of the stack 
    public void push(Object x) { 
      this.content = new Cons(x,this.content); 
	   return ; 
    }

    // remove the first item, if the stack is non-empty 
    public void pop() {
	this.content = this.content.rest(); 
	return ; 
    }

    // what is the first item on the stack? 
    public Object top() { 
	return this.content.first(); 
    }

    // how deep is the stack? 
    public int depth() { 
       return this.content.length();
    }
}

class DrawableStack extends Stack { 
    private int HEIGHT = 200; 
    private int numberDisks = 3; 
    private int diskHeight = 10; 
    private int maxDiskWidth = 100;
    
    private int poleHeight = 2 * numberDisks * diskHeight; 
    private int poleWidth = 10; 
    private int baseHeight = 10; 
    private int baseWidth = maxDiskWidth + poleWidth + 2 * 10; 
    
    private int poleY = HEIGHT - poleHeight; 
    private int baseY = HEIGHT - baseHeight; // both rest on the ground
    private int baseXoffset = (baseWidth - poleWidth)/2;

    private AColor BLACK = new Black(); 
    
    public void draw(Canvas c, int x) { 
      int stackY = HEIGHT-baseHeight-diskHeight*(this.depth()-1);
      // draw pole 
      c.drawRect(new Posn(x,poleY),poleWidth,poleHeight,BLACK);
      // draw base of pole 
      c.drawRect(new Posn(x - baseXoffset,baseY),baseWidth,baseHeight,BLACK);
      // draw the stack of disks
      content.drawVertical(c,x,stackY,diskHeight);
      return ; 
    }
}  

// a list of objects for use in several abstractions 

// -----------------------------------------------------------------------------
// list of sortable objects

interface IList { 
    // is this list empty? 
    boolean isEmpty();
    
    // add lst as the last object to this list (unless empty)
    // effect: modify the first rest field that contains Mt
    void addAtEnd(Object lst); 

    // what is the first item on this list?
    Object first(); 

    // what is the rest of this list?
    IList rest(); 

    // how long is this list? 
    int length(); 

    // drawVertical all items on this list, offset by -delta 
    void drawVertical(Canvas c, int x, int y, int delta); 
}

class Mt implements IList { 
  Mt() {} 
  
  public boolean isEmpty() {
    return true; 
  }

  public void addAtEnd(Object lst) {
    String msg = "it is impossible to add an item to the end of an empty list";
    // throw new RuntimeException(msg); // <----------- turn on this line, and watch stupid syntax error
    return ;  
  }

  public Object first() {
    String msg = "it is impossible to take the first item from an empty list";
    // throw new RuntimeException(msg);
    return this;
  }

  public IList rest() {
    String msg = "it is impossible to take the rest of an empty list";
    // throw new RuntimeException(msg);
    return this;
  }

  public int length() {
    return 0; 
  }
    
  public void drawVertical(Canvas c, int x, int y, int delta) {
    return ; 
  }
}

class Cons implements IList {
  Object first; 
  IList rest; 
  
  Cons(Object first, IList rest) { 
    this. first = first; 
    this. rest = rest; 
  }
  
  public boolean isEmpty() {
    return false; 
  }
  
  public void addAtEnd(Object lst) {
    if (rest instanceof Mt) {
      rest = new Cons(lst,rest); }
      else {
        rest.addAtEnd(lst); }
  }
      
  public Object first() {
    return first; 
  }
      
  public IList rest() {
    return rest; 
  }
      
  public int length() {
    return 1 + rest.length(); 
  }
      
  public void drawVertical(Canvas c, int x, int y, int delta) {
    IDrawable d = (IDrawable)first;
    d.draw(c,x,y);
    rest.drawVertical(c,x,y+delta,delta);
    return ; 
  }
}

// -----------------------------------------------------------------------------

class Example {
  W w = new W(); 
  Example() {
    w.go();
  }
}
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by eli at Tue, 06 Dec 2011 14:11:38 -0500
Reason>>> ProfessorJ is no longer distributed with Racket.

