From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon May 14 00:58:06 2007
Received: from wr-out-0506.google.com (wr-out-0506.google.com [64.233.184.233])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l4E4w6pH008198
	for <bugs@bugs.plt-scheme.org>; Mon, 14 May 2007 00:58:06 -0400
Message-Id: <200705140458.l4E4w4g0008193@champlain.ccs.neu.edu>
Date: Mon, 14 May 2007 00:58:04 -0400
From: clements@brinckerhoff.org
To: bugs@plt-scheme.org
Subject: big space leak associated with function calls in ProfJ

>Number:         8668
>Category:       profj
>Synopsis:       big space leak associated with function calls in ProfJ
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon May 14 01:00:01 -0400 2007
>Closed-Date:    Tue Dec 06 14:11:02 -0500 2011
>Last-Modified:  Tue Dec 06 14:11:02 -0500 2011
>Originator:     John Clements
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.100-svn12may2007
>Environment:
macosx "Darwin john-clements-computer.local 8.9.1 Darwin Kernel Version 8.9.1: Thu Feb 22 20:55:00 PST 2007; root:xnu-792.18.15~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/clements/plt/doc" "mzscheme" "mred" "help" "srfi" "mzlib" "framework" "tools" "plot" "release-notes" "teachpack-htdc" "profj-advanced"))
Human Language: english
(current-memory-use) 299848316

Collections:
(("/Users/clements/clements/collects" ".svn" "badger" "biff" "big-step-explorer" "clements-lib" "contour-letters" "gnucash" "info-domain" "iTunes-helper" "java-helpers" "matrix-arithmetic" "mnemisis" "no-brainer" "projector" "shelly" "single-stepper" "template-tester" "web-utilities") ("/Users/clements/matthias/collects" non-existent-path) ("/Users/clements/Library/PLT Scheme/369.100/collects" non-existent-path) ("/Users/clements/plt/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "read!
 line" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
There seems to be a constant space leak associated with function
calls in ProfJ.  The program below (choose from the tail-calling
one or the while loop one) chows memory at a rate of ~50 Meg /
second for what should be a space-constant computation. Urg.
>How-To-Repeat:
In ProfJ:advanced, run this code:

class Examples{
  boolean testLotsOfCalls(){
    bogusCall();
    return testLotsOfCalls();
/*    while(true){
      bogusCall();
    }
    return true;*/
  }

  int bogusCall(){
    return 1;
  }
}
>Fix:
>Audit-Trail:
From: Kathy Gray <kathyg@cs.utah.edu>
To: clements@brinckerhoff.org, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/8668: big space leak associated with function calls in ProfJ
Date: Mon, 14 May 2007 09:14:52 +0100

 --Apple-Mail-25--1040170090
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=US-ASCII;
 	delsp=yes;
 	format=flowed
 
 Hi John,
 
 This does seem like a lot of consumption and worth looking into. Your  
 follow up message seems to indicate a different bug in my code  
 generation.
 
 However, the method shouldn't be space constant because of the return  
 statement. An example method
 
 boolean consume() {
    return consume();
 }
 
 Stepping through a few iterations of calls
 consume() --> return consume() --> return [ return consume() ] -->
 return [return [return consume() ] ]
 
 (In ProfJ, return behavior uses let/ec )
 
 Thanks,
 -Kathy
 
 On May 14, 2007, at 6:00 AM, clements@brinckerhoff.org wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8668
 >
 > Reported by John Clements for release: 369.100-svn12may2007
 >
 > *** Description:
 > There seems to be a constant space leak associated with function
 > calls in ProfJ.  The program below (choose from the tail-calling
 > one or the while loop one) chows memory at a rate of ~50 Meg /
 > second for what should be a space-constant computation. Urg.
 
 
 >
 > *** How to repeat:
 > In ProfJ:advanced, run this code:
 >
 > class Examples{
 >   boolean testLotsOfCalls(){
 >     bogusCall();
 >     return testLotsOfCalls();
 > /*    while(true){
 >       bogusCall();
 >     }
 >     return true;*/
 >   }
 >
 >   int bogusCall(){
 >     return 1;
 >   }
 > }
 >
 > *** Environment:
 > macosx "Darwin john-clements-computer.local 8.9.1 Darwin Kernel  
 > Version 8.9.1: Thu Feb 22 20:55:00 PST 2007; root:xnu-792.18.15~1/ 
 > RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 > Docs Installed:
 > (("/Users/clements/plt/doc" "mzscheme" "mred" "help" "srfi" "mzlib"  
 > "framework" "tools" "plot" "release-notes" "teachpack-htdc" "profj- 
 > advanced"))
 > Human Language: english
 > (current-memory-use) 299848316
 >
 > Collections:
 > (("/Users/clements/clements/collects" ".svn" "badger" "biff" "big- 
 > step-explorer" "clements-lib" "contour-letters" "gnucash" "info- 
 > domain" "iTunes-helper" "java-helpers" "matrix-arithmetic"  
 > "mnemisis" "no-brainer" "projector" "shelly" "single-stepper"  
 > "template-tester" "web-utilities") ("/Users/clements/matthias/ 
 > collects" non-existent-path) ("/Users/clements/Library/PLT Scheme/ 
 > 369.100/collects" non-existent-path) ("/Users/clements/plt/ 
 > collects" ".svn" "afm" "algol60" "browser" "combinator-parser"  
 > "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui"  
 > "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics"  
 > "guibuilder" "handin-client" "handin-server" "help" "hierlist"  
 > "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang"  
 > "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib"  
 > "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl"  
 > "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes"  
 > "profjWizard" "r5rs" "r6rs" "read!
 >  line" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail"  
 > "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist"  
 > "stepper" "string-constants" "swindle" "syntax" "syntax-color"  
 > "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace"  
 > "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
 > Computer Language: (("Experimental Languages" "ProfessorJ"  
 > "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
 
 
 --Apple-Mail-25--1040170090
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=ISO-8859-1
 
 <HTML><BODY style=3D"word-wrap: break-word; -khtml-nbsp-mode: space; =
 -khtml-line-break: after-white-space; "><DIV><SPAN =
 class=3D"Apple-style-span" style=3D"border-collapse: separate; =
 border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; =
 font-size: 14px; font-style: normal; font-variant: normal; font-weight: =
 normal; letter-spacing: normal; line-height: normal; text-align: auto; =
 -khtml-text-decorations-in-effect: none; text-indent: 0px; =
 -apple-text-size-adjust: auto; text-transform: none; orphans: 2; =
 white-space: normal; widows: 2; word-spacing: 0px; ">Hi John,<BR =
 class=3D"Apple-interchange-newline"></SPAN> </DIV><DIV><BR =
 class=3D"khtml-block-placeholder"></DIV><DIV>This does seem like a lot =
 of consumption and worth looking into. Your follow up message seems to =
 indicate a different bug in my code generation.</DIV><DIV><BR =
 class=3D"khtml-block-placeholder"></DIV><DIV>However, the method =
 shouldn't be space constant because of the return statement. An example =
 method</DIV><DIV><BR class=3D"khtml-block-placeholder"></DIV><DIV>boolean =
 consume() {</DIV><DIV>=A0 return consume();</DIV><DIV>}</DIV><DIV><BR =
 class=3D"khtml-block-placeholder"></DIV><DIV>Stepping through a few =
 iterations of calls</DIV><DIV>consume() --&gt; return consume() --&gt; =
 return [ return consume() ] --&gt;</DIV><DIV>return [return [return =
 consume() ] ]</DIV><DIV><BR =
 class=3D"khtml-block-placeholder"></DIV><DIV>(In ProfJ, return behavior =
 uses let/ec )</DIV><DIV><BR =
 class=3D"khtml-block-placeholder"></DIV><DIV>Thanks,</DIV><DIV>-Kathy</DIV=
 ><BR><DIV><DIV>On May 14, 2007, at 6:00 AM, <A =
 href=3D"mailto:clements@brinckerhoff.org">clements@brinckerhoff.org</A> =
 wrote:</DIV><BR class=3D"Apple-interchange-newline"><BLOCKQUOTE =
 type=3D"cite"><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; ">A new problem report is waiting =
 at</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: =
 0px; margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =
 </SPAN><A =
 href=3D"http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D8668">http://bug=
 s.plt-scheme.org/query/?cmd=3Dview&amp;pr=3D8668</A></DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Reported =
 by John Clements for release: 369.100-svn12may2007</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">*** =
 Description:</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; ">There seems to be a constant =
 space leak associated with function</DIV><DIV style=3D"margin-top: 0px; =
 margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">calls in =
 ProfJ.<SPAN class=3D"Apple-converted-space">=A0 </SPAN>The program below =
 (choose from the tail-calling</DIV><DIV style=3D"margin-top: 0px; =
 margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">one or the =
 while loop one) chows memory at a rate of ~50 Meg /</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; ">second for what should be a space-constant =
 computation. Urg.</DIV></BLOCKQUOTE><DIV><BR =
 class=3D"khtml-block-placeholder"></DIV><BR><BLOCKQUOTE type=3D"cite"><DIV=
  style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">*** How =
 to repeat:</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; ">In ProfJ:advanced, run this =
 code:</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; min-height: 14px; "><BR></DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; ">class Examples{</DIV><DIV style=3D"margin-top: 0px; =
 margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
 class=3D"Apple-converted-space">=A0 </SPAN>boolean =
 testLotsOfCalls(){</DIV><DIV style=3D"margin-top: 0px; margin-right: =
 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
 class=3D"Apple-converted-space">=A0 =A0 </SPAN>bogusCall();</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =A0 =
 </SPAN>return testLotsOfCalls();</DIV><DIV style=3D"margin-top: 0px; =
 margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">/*<SPAN =
 class=3D"Apple-converted-space">=A0 =A0 </SPAN>while(true){</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =A0 =A0 =
 </SPAN>bogusCall();</DIV><DIV style=3D"margin-top: 0px; margin-right: =
 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
 class=3D"Apple-converted-space">=A0 =A0 </SPAN>}</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =A0 =
 </SPAN>return true;*/</DIV><DIV style=3D"margin-top: 0px; margin-right: =
 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
 class=3D"Apple-converted-space">=A0 </SPAN>}</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; min-height: 14px; "><BR></DIV><DIV style=3D"margin-top: =
 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; "><SPAN =
 class=3D"Apple-converted-space">=A0 </SPAN>int bogusCall(){</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0 =A0 =
 </SPAN>return 1;</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; "><SPAN =
 class=3D"Apple-converted-space">=A0 </SPAN>}</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; ">}</DIV><DIV style=3D"margin-top: 0px; margin-right: =
 0px; margin-bottom: 0px; margin-left: 0px; min-height: 14px; =
 "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; ">*** Environment:</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; ">macosx "Darwin john-clements-computer.local 8.9.1 =
 Darwin Kernel Version 8.9.1: Thu Feb 22 20:55:00 PST 2007; =
 root:xnu-792.18.15~1/RELEASE_I386 i386 i386" (i386-macosx/3m) =
 (get-display-depth) =3D 32</DIV><DIV style=3D"margin-top: 0px; =
 margin-right: 0px; margin-bottom: 0px; margin-left: 0px; ">Docs =
 Installed:</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; ">(("/Users/clements/plt/doc" =
 "mzscheme" "mred" "help" "srfi" "mzlib" "framework" "tools" "plot" =
 "release-notes" "teachpack-htdc" "profj-advanced"))</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; ">Human Language: english</DIV><DIV style=3D"margin-top:=
  0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; =
 ">(current-memory-use) 299848316</DIV><DIV style=3D"margin-top: 0px; =
 margin-right: 0px; margin-bottom: 0px; margin-left: 0px; min-height: =
 14px; "><BR></DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; ">Collections:</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; ">(("/Users/clements/clements/collects" ".svn" =
 "badger" "biff" "big-step-explorer" "clements-lib" "contour-letters" =
 "gnucash" "info-domain" "iTunes-helper" "java-helpers" =
 "matrix-arithmetic" "mnemisis" "no-brainer" "projector" "shelly" =
 "single-stepper" "template-tester" "web-utilities") =
 ("/Users/clements/matthias/collects" non-existent-path) =
 ("/Users/clements/Library/PLT Scheme/369.100/collects" =
 non-existent-path) ("/Users/clements/plt/collects" ".svn" "afm" =
 "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" =
 "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" =
 "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" =
 "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" =
 "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" =
 "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" =
 "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" =
 "profjBoxes" "profjWizard" "r5rs" "r6rs" "read!</DIV><DIV =
 style=3D"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; =
 margin-left: 0px; "><SPAN class=3D"Apple-converted-space">=A0</SPAN>line" =
 "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" =
 "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" =
 "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" =
 "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" =
 "xelda" "xml"))</DIV><DIV style=3D"margin-top: 0px; margin-right: 0px; =
 margin-bottom: 0px; margin-left: 0px; ">Computer Language: =
 (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) =
 (#f) (#t) (#t)))</DIV> </BLOCKQUOTE></DIV><BR></BODY></HTML>=
 
 --Apple-Mail-25--1040170090--
From: John Clements <clements@brinckerhoff.org>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org, Dave Herman <dherman@ccs.neu.edu>,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8668: big space leak associated with function calls in ProfJ
Date: Mon, 14 May 2007 10:22:06 -0700

 On May 14, 2007, at 1:14 AM, Kathy Gray wrote:
 
 > Hi John,
 >
 > This does seem like a lot of consumption and worth looking into.  
 > Your follow up message seems to indicate a different bug in my code  
 > generation.
 >
 > However, the method shouldn't be space constant because of the  
 > return statement. An example method
 >
 > boolean consume() {
 >   return consume();
 > }
 >
 > Stepping through a few iterations of calls
 > consume() --> return consume() --> return [ return consume() ] -->
 > return [return [return consume() ] ]
 >
 > (In ProfJ, return behavior uses let/ec )
 
 Okay, this goes back to discussions I've had with Dave Herman and  
 others; should calls like this be evaluated in the context of the  
 calling procedure?
 
 It appears to me that your choice makes it impossible to write loops  
 as tail-calling procedures and get bounded space use, right?
 
 I think that the right choice is to implement return as a macro that  
 special-cases uses of the form
 
 return object.method(...);
 
 and invoke the continuation before calling the method.  Of course,  
 this means setting up the context so that it's waiting to invoke a  
 procedure.
 
 Does this make sense?
 
 John
 
 cc: dh, mr?f
 
 
 
From: Dave Herman <dherman@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: Kathy Gray <kathyg@cs.utah.edu>, bugs@plt-scheme.org,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8668: big space leak associated with function calls
 in ProfJ
Date: Mon, 14 May 2007 14:19:14 -0400

 > I think that the right choice is to implement return as a macro that 
 > special-cases uses of the form
 > 
 > return object.method(...);
 > 
 > and invoke the continuation before calling the method.  Of course, this 
 > means setting up the context so that it's waiting to invoke a procedure.
 > 
 > Does this make sense?
 
 Well, as John and I have discussed before, this is only correct if the 
 return does not occur inside of a `try' block in the method body. 
 Otherwise you end up unsafely leaving the context of the exception 
 handler(s) installed within the method body before performing the "tail 
 call".
 
 In fact, "tail calls" from within exception handlers in return-oriented 
 languages are not tail calls at all. [1]
 
 So if you do want to allow tail recursion in ProfJ, you'll have to be 
 careful in your macro-expansion to keep track of whether you're in the 
 static context of a try-block while expanding method bodies, so you can 
 determine whether `return' statements are really tail calls at all.
 
 Incidentally, your code generation would either have to use some kind of 
 a trampoline where you can return a thunk and your caller knows to 
 invoke it (as in my tail.plt planet package), or something like 
 Matthew's basic-block translation (as in the Algol language level).
 
 Dave
 
 [1] In fact, "tail calls" inside of exception handlers in *any* language 
 are most likely not tail calls. Even though exception handlers are 
 installed with continuation marks in mzscheme, they still accumulate 
 space by stacking up another exception handlers. It's hard to imagine 
 how you could avoid this.


State changed from "open" to "closed" by eli at Tue, 06 Dec 2011 14:11:02 -0500
Reason>>> ProfessorJ is no longer distributed with Racket.

