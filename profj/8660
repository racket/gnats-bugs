From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu May 10 19:10:42 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.239])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l4ANAgMm003078
	for <bugs@bugs.plt-scheme.org>; Thu, 10 May 2007 19:10:42 -0400
Message-Id: <200705102310.l4ANAcla003073@champlain.ccs.neu.edu>
Date: Thu, 10 May 2007 19:10:38 -0400
From: clements@brinckerhoff.org
To: bugs@plt-scheme.org
Subject: ProfJ type checking broken for ( ... ? ... : ...) expression

>Number:         8660
>Category:       profj
>Synopsis:       ProfJ type checking broken for ( ... ? ... : ...) expression
>Class:          change-request
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu May 10 19:15:01 -0400 2007
>Closed-Date:    Tue Dec 06 14:10:59 -0500 2011
>Last-Modified:  Tue Dec 06 14:10:59 -0500 2011
>Originator:     John Clements The Magnificent Professor
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.100-svn8may2007
>Environment:
macosx "Darwin computer.csc.calpoly.edu 8.9.0 Darwin Kernel Version 8.9.0: Thu Feb 22 20:54:07 PST 2007; root:xnu-792.17.14~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/clements/plt/doc" "mzscheme" "mred" "help" "mzlib" "release-notes" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/clements/plt/collects/doc" "r5rs" "help" "tour" "drscheme" "srfi" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "acl2" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack"))
Human Language: english
(current-memory-use) 210012176

Collections:
(("/Users/clements/Library/PLT Scheme/369.100/collects" non-existent-path) ("/Users/clements/plt/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
The following program does not type check.  JavaC likes it fine, and it's
not doing anything surprising.  Looks like a bug in the ProfJ typechecker
related to some kind of LUB-like computation for two expressions.
>How-To-Repeat:
In ProfJ advanced, run this code:

interface MyInterface {}

class A implements MyInterface { 
  A() {}
}

class B implements MyInterface {
  B(){}
}

class Examples {
  Examples(){}

  static MyInterface makeRandomRow(int width){
    return (true ? new A() : new B());
  }  
}


See this error:

Welcome to DrScheme, version 369.100-svn8may2007 [3m].
Language: ProfessorJ: Advanced.
The return expression's type must be equal to or a subclass of the method's return MyInterface.
The given expression has type #<void> which is not equivalent to the declared return. in: return
>Fix:
>Audit-Trail:
From: Kathy Gray <kathyg@cs.utah.edu>
To: clements@brinckerhoff.org, bugs@plt-scheme.org
Cc: Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/8660: ProfJ type checking broken for ( ... ? ... : ...) expression
Date: Sun, 13 May 2007 10:29:39 +0100

 ProfessorJ follows the correct behavior on this for Java pre 1.5; the  
 third addition specification language added least upper bound  
 analysis in supporting parameterized types, so that assignment  
 conversion in general will not completely mesh with tests in modern  
 javac
 
 That being said, I'm not 100% certain when we would want to explain  
 least upper bounds in types to students; making the modification in  
 the entire system would expose students to least-upper bound type  
 issues in Intermediate.
 
 -Kathy
 
 
 On May 11, 2007, at 12:15 AM, clements@brinckerhoff.org wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8660
 >
 > Reported by John Clements The Magnificent Professor for release:  
 > 369.100-svn8may2007
 >
 > *** Description:
 > The following program does not type check.  JavaC likes it fine,  
 > and it's
 > not doing anything surprising.  Looks like a bug in the ProfJ  
 > typechecker
 > related to some kind of LUB-like computation for two expressions.
 >
 > *** How to repeat:
 > In ProfJ advanced, run this code:
 >
 > interface MyInterface {}
 >
 > class A implements MyInterface {
 >   A() {}
 > }
 >
 > class B implements MyInterface {
 >   B(){}
 > }
 >
 > class Examples {
 >   Examples(){}
 >
 >   static MyInterface makeRandomRow(int width){
 >     return (true ? new A() : new B());
 >   }
 > }
 >
 >
 > See this error:
 >
 > Welcome to DrScheme, version 369.100-svn8may2007 [3m].
 > Language: ProfessorJ: Advanced.
 > The return expression's type must be equal to or a subclass of the  
 > method's return MyInterface.
 > The given expression has type #<void> which is not equivalent to  
 > the declared return. in: return
 >
 > *** Environment:
 > macosx "Darwin computer.csc.calpoly.edu 8.9.0 Darwin Kernel Version  
 > 8.9.0: Thu Feb 22 20:54:07 PST 2007; root:xnu-792.17.14~1/ 
 > RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display- 
 > depth) = 32
 > Docs Installed:
 > (("/Users/clements/plt/doc" "mzscheme" "mred" "help" "mzlib"  
 > "release-notes" "teachpack-htdc" "profj-beginner" "profj- 
 > intermediate" "profj-advanced") ("/Users/clements/plt/collects/doc"  
 > "r5rs" "help" "tour" "drscheme" "srfi" "misclib" "mrlib"  
 > "framework" "foreign" "mzc" "tools" "insidemz" "web-server"  
 > "swindle" "plot" "acl2" "t-y-scheme" "tex2page" "beginning"  
 > "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 > "teachpack"))
 > Human Language: english
 > (current-memory-use) 210012176
 >
 > Collections:
 > (("/Users/clements/Library/PLT Scheme/369.100/collects" non- 
 > existent-path) ("/Users/clements/plt/collects" ".svn" "afm"  
 > "algol60" "browser" "combinator-parser" "compiler" "config"  
 > "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl"  
 > "errortrace" "ffi" "framework" "frtime" "games" "graphics"  
 > "guibuilder" "handin-client" "handin-server" "help" "hierlist"  
 > "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang"  
 > "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib"  
 > "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl"  
 > "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes"  
 > "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp"  
 > "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit"  
 > "slideshow" "srfi" "srpersist" "stepper" "string-constants"  
 > "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests"  
 > "tex2page" "texpict" "trace" "version" "waterworld" "web-server"  
 > "wxme" "xelda" "xml"))
 > Computer Language: (("Experimental Languages" "ProfessorJ"  
 > "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
 
 
From: John Clements <clements@brinckerhoff.org>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: bugs@plt-scheme.org, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/8660: ProfJ type checking broken for ( ... ? ... : ...) expression
Date: Sun, 13 May 2007 14:58:14 -0700

 On May 13, 2007, at 2:29 AM, Kathy Gray wrote:
 
 > ProfessorJ follows the correct behavior on this for Java pre 1.5;  
 > the third addition specification language added least upper bound  
 > analysis in supporting parameterized types, so that assignment  
 > conversion in general will not completely mesh with tests in modern  
 > javac
 >
 > That being said, I'm not 100% certain when we would want to explain  
 > least upper bounds in types to students; making the modification in  
 > the entire system would expose students to least-upper bound type  
 > issues in Intermediate.
 
 Fair enough; feel free to close this or reclassify as a change request.
 
 Thanks,
 
 John
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8660: ProfJ type checking broken for ( ... ? ... : ...) expression
Date: Mon, 14 May 2007 15:34:24 -0400

 The error message is horrible. I don't see the VOID part in the code.
 
 -- Matthias
 
 
 
 
 On May 13, 2007, at 5:29 AM, Kathy Gray wrote:
 
 > ProfessorJ follows the correct behavior on this for Java pre 1.5;  
 > the third addition specification language added least upper bound  
 > analysis in supporting parameterized types, so that assignment  
 > conversion in general will not completely mesh with tests in modern  
 > javac
 >
 > That being said, I'm not 100% certain when we would want to explain  
 > least upper bounds in types to students; making the modification in  
 > the entire system would expose students to least-upper bound type  
 > issues in Intermediate.
 >
 > -Kathy
 >
 >
 > On May 11, 2007, at 12:15 AM, clements@brinckerhoff.org wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8660
 >>
 >> Reported by John Clements The Magnificent Professor for release:  
 >> 369.100-svn8may2007
 >>
 >> *** Description:
 >> The following program does not type check.  JavaC likes it fine,  
 >> and it's
 >> not doing anything surprising.  Looks like a bug in the ProfJ  
 >> typechecker
 >> related to some kind of LUB-like computation for two expressions.
 >>
 >> *** How to repeat:
 >> In ProfJ advanced, run this code:
 >>
 >> interface MyInterface {}
 >>
 >> class A implements MyInterface {
 >>   A() {}
 >> }
 >>
 >> class B implements MyInterface {
 >>   B(){}
 >> }
 >>
 >> class Examples {
 >>   Examples(){}
 >>
 >>   static MyInterface makeRandomRow(int width){
 >>     return (true ? new A() : new B());
 >>   }
 >> }
 >>
 >>
 >> See this error:
 >>
 >> Welcome to DrScheme, version 369.100-svn8may2007 [3m].
 >> Language: ProfessorJ: Advanced.
 >> The return expression's type must be equal to or a subclass of the  
 >> method's return MyInterface.
 >> The given expression has type #<void> which is not equivalent to  
 >> the declared return. in: return
 >>
 >> *** Environment:
 >> macosx "Darwin computer.csc.calpoly.edu 8.9.0 Darwin Kernel  
 >> Version 8.9.0: Thu Feb 22 20:54:07 PST 2007; root:xnu-792.17.14~1/ 
 >> RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display- 
 >> depth) = 32
 >> Docs Installed:
 >> (("/Users/clements/plt/doc" "mzscheme" "mred" "help" "mzlib"  
 >> "release-notes" "teachpack-htdc" "profj-beginner" "profj- 
 >> intermediate" "profj-advanced") ("/Users/clements/plt/collects/ 
 >> doc" "r5rs" "help" "tour" "drscheme" "srfi" "misclib" "mrlib"  
 >> "framework" "foreign" "mzc" "tools" "insidemz" "web-server"  
 >> "swindle" "plot" "acl2" "t-y-scheme" "tex2page" "beginning"  
 >> "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 >> "teachpack"))
 >> Human Language: english
 >> (current-memory-use) 210012176
 >>
 >> Collections:
 >> (("/Users/clements/Library/PLT Scheme/369.100/collects" non- 
 >> existent-path) ("/Users/clements/plt/collects" ".svn" "afm"  
 >> "algol60" "browser" "combinator-parser" "compiler" "config"  
 >> "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl"  
 >> "errortrace" "ffi" "framework" "frtime" "games" "graphics"  
 >> "guibuilder" "handin-client" "handin-server" "help" "hierlist"  
 >> "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang"  
 >> "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib"  
 >> "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl"  
 >> "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes"  
 >> "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp"  
 >> "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit"  
 >> "slideshow" "srfi" "srpersist" "stepper" "string-constants"  
 >> "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests"  
 >> "tex2page" "texpict" "trace" "version" "waterworld" "web-server"  
 >> "wxme" "xelda" "xml"))
 >> Computer Language: (("Experimental Languages" "ProfessorJ"  
 >> "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathy Gray <kathyg@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8660: ProfJ type checking broken for ( ... ? ... : ...) expression
Date: Mon, 14 May 2007 15:34:56 -0400

 P.S. LUBs are probably acceptable for students. So I favor their  
 inclusion.
 
 
 On May 13, 2007, at 5:29 AM, Kathy Gray wrote:
 
 > ProfessorJ follows the correct behavior on this for Java pre 1.5;  
 > the third addition specification language added least upper bound  
 > analysis in supporting parameterized types, so that assignment  
 > conversion in general will not completely mesh with tests in modern  
 > javac
 >
 > That being said, I'm not 100% certain when we would want to explain  
 > least upper bounds in types to students; making the modification in  
 > the entire system would expose students to least-upper bound type  
 > issues in Intermediate.
 >
 > -Kathy
 >
 >
 > On May 11, 2007, at 12:15 AM, clements@brinckerhoff.org wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=8660
 >>
 >> Reported by John Clements The Magnificent Professor for release:  
 >> 369.100-svn8may2007
 >>
 >> *** Description:
 >> The following program does not type check.  JavaC likes it fine,  
 >> and it's
 >> not doing anything surprising.  Looks like a bug in the ProfJ  
 >> typechecker
 >> related to some kind of LUB-like computation for two expressions.
 >>
 >> *** How to repeat:
 >> In ProfJ advanced, run this code:
 >>
 >> interface MyInterface {}
 >>
 >> class A implements MyInterface {
 >>   A() {}
 >> }
 >>
 >> class B implements MyInterface {
 >>   B(){}
 >> }
 >>
 >> class Examples {
 >>   Examples(){}
 >>
 >>   static MyInterface makeRandomRow(int width){
 >>     return (true ? new A() : new B());
 >>   }
 >> }
 >>
 >>
 >> See this error:
 >>
 >> Welcome to DrScheme, version 369.100-svn8may2007 [3m].
 >> Language: ProfessorJ: Advanced.
 >> The return expression's type must be equal to or a subclass of the  
 >> method's return MyInterface.
 >> The given expression has type #<void> which is not equivalent to  
 >> the declared return. in: return
 >>
 >> *** Environment:
 >> macosx "Darwin computer.csc.calpoly.edu 8.9.0 Darwin Kernel  
 >> Version 8.9.0: Thu Feb 22 20:54:07 PST 2007; root:xnu-792.17.14~1/ 
 >> RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display- 
 >> depth) = 32
 >> Docs Installed:
 >> (("/Users/clements/plt/doc" "mzscheme" "mred" "help" "mzlib"  
 >> "release-notes" "teachpack-htdc" "profj-beginner" "profj- 
 >> intermediate" "profj-advanced") ("/Users/clements/plt/collects/ 
 >> doc" "r5rs" "help" "tour" "drscheme" "srfi" "misclib" "mrlib"  
 >> "framework" "foreign" "mzc" "tools" "insidemz" "web-server"  
 >> "swindle" "plot" "acl2" "t-y-scheme" "tex2page" "beginning"  
 >> "beginning-abbr" "intermediate" "intermediate-lambda" "advanced"  
 >> "teachpack"))
 >> Human Language: english
 >> (current-memory-use) 210012176
 >>
 >> Collections:
 >> (("/Users/clements/Library/PLT Scheme/369.100/collects" non- 
 >> existent-path) ("/Users/clements/plt/collects" ".svn" "afm"  
 >> "algol60" "browser" "combinator-parser" "compiler" "config"  
 >> "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl"  
 >> "errortrace" "ffi" "framework" "frtime" "games" "graphics"  
 >> "guibuilder" "handin-client" "handin-server" "help" "hierlist"  
 >> "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang"  
 >> "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib"  
 >> "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl"  
 >> "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes"  
 >> "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp"  
 >> "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit"  
 >> "slideshow" "srfi" "srpersist" "stepper" "string-constants"  
 >> "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests"  
 >> "tex2page" "texpict" "trace" "version" "waterworld" "web-server"  
 >> "wxme" "xelda" "xml"))
 >> Computer Language: (("Experimental Languages" "ProfessorJ"  
 >> "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
 >
 

Class changed from "sw-bug" to "change-request" by kathyg at Mon, 14 May 2007 17:26:17 -0400
Reason>>> ProfJ presently only intends to implement the 1.4 type system, this behavior is 
only allowed in 1.5

State changed from "open" to "analyzed" by kathyg at Mon, 14 May 2007 17:26:17 -0400
Reason>>> To comply with this 1.5 feature, ProfJ must support LUBs, which will be done in 
the future. 
The horrible error message portion of the bug has been corrected.


State changed from "analyzed" to "closed" by eli at Tue, 06 Dec 2011 14:10:59 -0500
Reason>>> ProfessorJ is no longer distributed with Racket.

