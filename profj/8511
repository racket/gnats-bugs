From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jan 30 14:11:12 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.225])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l0UJBCrj031083
	for <bugs@bugs.plt-scheme.org>; Tue, 30 Jan 2007 14:11:12 -0500
Message-Id: <200701301911.l0UJBBr2031078@champlain.ccs.neu.edu>
Date: Tue, 30 Jan 2007 14:11:11 -0500
From: skotthe@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: compareToIgnoreCase gives an error message about length method in String

>Number:         8511
>Category:       profj
>Synopsis:       compareToIgnoreCase gives an error message about length method in String
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jan 30 14:15:02 -0500 2007
>Closed-Date:    Sun Jul 01 10:36:49 -0400 2007
>Last-Modified:  Sun Jul 01 10:36:49 -0400 2007
>Originator:     Theo
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.1-svn6dec2006
>Environment:
unix "Linux arkham 2.6.16.3103 #2 Fri Apr 7 19:36:05 EDT 2006 i686 GNU/Linux" (i386-linux) (get-display-depth) = 24
Docs Installed:
(("/usr/local/plt/doc" "help" "release-notes") ("/usr/local/plt/collects/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 103358464

Collections:
(("/home/skotthe/.plt-scheme/369.1/collects" non-existent-path) ("/usr/local/plt/collects" ".svn" "tex2page" "string-constants" "planet" "mzcom" "drscheme" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "syntax-color" "srfi" "algol60" "dynext" "slibinit" "make" "plot" "lang" "web-server" "openssl" "frtime" "mred" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "defaults" "honu" "icons" "skipper" "handin-client" "ssax" "texpict" "profjBoxes" "browser" "plai" "parser-tools" "waterworld" "r5rs" "mztake" "games" "honu-module" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "mrflow" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "finish-install" "sgl" "version" "preprocessor" "net" "syntax" "help" "htdch" "xelda" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "test-suite" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "doc" "macro-debugger" "scribble" "config" "lazy" "teachpack"))
Teachpack filenames: ()
Computer Language: (("Experimental Languages" "ProfessorJ" "Beginner") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
The program uses insertion sort to sort a list of Objects. The objects contain a string field. Ordering is lexicographical on this string field. 

Using the method compareToIgnoreCase() gives the following error: 

Welcome to DrScheme, version 369.1-svn6dec2006.
Language: ProfessorJ: Beginner.
. procedure length method in String: expects 0 arguments, given 1: "River"
> 

changing to compareTo() works fine. 

I am attaching the code below. Look in class Photo, for 

  boolean before(Photo that) { 
      // Return true for either negative or 0.
    return (that.name.compareToIgnoreCase(this.name) <= 0);
  }

We came across this behavior in both v360 and 369.1.
>How-To-Repeat:
// A List of photos is either a photo or empty
interface ListOfPhotos {
 
  /**
   * Counts the list of photos.
   */
	int count();

  /**
   * Counts the total size.
   */
	int totalSize();

  /**
   * Gets only photos of given format.
   */
	ListOfPhotos filterFormat(String format);

  /**
   * Inserts a photo into a list at the proper place.
   */
   ListOfPhotos insert(Photo pe);

  /**
   * Sorts a list of photos with insertion sort.
   */
   ListOfPhotos insertionSort();
}

// An empty photo
class EmptyPhoto implements ListOfPhotos {
	EmptyPhoto() {}

  /**
   * Counts the list of photos.
   */
	int count() {
    return 0;
   }

  /**
   * Counts the total size.
   */
	int totalSize() {
     return 0;
   }

  /**
   * Gets only photos of given format.
   */
	ListOfPhotos filterFormat(String format) {
     return this;
  }

  /**
   * Inserts a photo into a list at the proper place.
   */
   ListOfPhotos insert(Photo pe) {
     return new PhotoElement(pe,this);
   }

  /**
   * Sorts a list of photos with insertion sort.
   */
   ListOfPhotos insertionSort() {
      return this;
   }
}

// An element in the list 
class PhotoElement implements ListOfPhotos {
	Photo first;
	ListOfPhotos next;
	
	PhotoElement(Photo first, ListOfPhotos next) {
		this.first = first;
     this.next = next;
	}

  /**
   * Counts the list of photos.
   */
	int count() {
    return 1 + this.next.count();
   }
 
  /**
   * Counts the total size.
   */
	int totalSize() {
     return this.first.getSize() + this.next.totalSize();
   }

  /**
   * Gets only photos of given format.
   */
	ListOfPhotos filterFormat(String format) {
     if (this.first.isFormat(format))
        return new PhotoElement(this.first,this.next.filterFormat(format));
     else return this.next.filterFormat(format);
  }

   /**
   * Inserts a photo into a list at the proper place.
   */
   ListOfPhotos insert(Photo pe) {
     if (pe.before(this.first))
         return new PhotoElement(pe,this);
     else
         return new PhotoElement(this.first,this.next.insert(pe));
   }

  /**
   * Sorts a list of photos with insertion sort.
   */
   ListOfPhotos insertionSort() {
      return this.next.insertionSort().insert(this.first);
   }
}

// A Photo
class Photo {
	String name;
	String type;
	int width;
	int height;
	int size;

	Photo(	String name,	String type,	int width,int height,
				int size) {
		this.name = name;
		this.type = type;
		this.width = width;
		this.height = height;
		this.size = size;
	}

	//Compute the number of pixels
	int pixels() {
		return this.width * this.height;
	}

	//Computes how many seconds it will take to download this image
	// where speed is b/s
	long downloadTime(int speed) {
		return (this.size / speed) + 1;
	}

  /**
   * Gets the file size.
   */
	int getSize() {
     return this.size;
   }

  /**
   * Tests if this photo is of a given format.
   */
	boolean isFormat(String format) {
     return this.type.equals(format);
   }

  /**
   * Tests if this photo is before a given photo.
   */
   boolean before(Photo that) {
    // Return true for either negative or 0.
    return (that.name.compareToIgnoreCase(this.name) <= 0);
  }
}

class Examples {
  Examples() {}
 // Examples for the class Photo
  Photo river = new Photo("River", "jpeg", 3456, 2304, 3614571);
  Photo mountain = new Photo("Mountain", "jpeg", 2448, 3264, 1276114);
  Photo people = new Photo("People", "gif", 545, 641, 13760);
  Photo icon = new Photo("PLTicon", "bmp", 16, 16, 1334);
  Photo arbre = new Photo("Arbre","bmp",90,80,151232);

  ListOfPhotos mtlist = new EmptyPhoto();
  ListOfPhotos list1 = new PhotoElement(this.river, this.mtlist);
  ListOfPhotos list2 = new PhotoElement(this.mountain,
                       new PhotoElement(this.people,
                       new PhotoElement(this.icon, this.mtlist)));
  ListOfPhotos list3 = new PhotoElement(this.river,this.list2);
  ListOfPhotos list4 = new PhotoElement(this.arbre,this.list1);

  // Tests for the method count:
  boolean testCount = (check this.mtlist.count() expect 0) &&
                       (check this.list1.count() expect 1) &&
                       (check this.list2.count() expect 3);

  // Tests for total size
  boolean testSize = (check this.mtlist.totalSize() expect 0) &&
                      (check this.list1.totalSize() expect 3614571) &&
                      (check this.list2.totalSize() expect 1291208);

  // Tests for filterFormat()
  boolean testFormat = (check this.mtlist.filterFormat("jpeg").count() expect 0) &&
                         (check this.list2.filterFormat("jpeg").count() expect 1) &&
                         (check this.list3.filterFormat("jpeg").count() expect 2);
  
  // Test for sort.
  ListOfPhotos sorted = this.list4.insertionSort();
}
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by kathyg at Sun, 01 Jul 2007 10:36:49 -0400
Reason>>> Corrected in svn

