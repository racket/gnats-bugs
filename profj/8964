From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Sep 24 17:17:55 2007
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.168])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l8OLHtv9012090
	for <bugs@bugs.plt-scheme.org>; Mon, 24 Sep 2007 17:17:55 -0400
Message-Id: <200709242117.l8OLHmsF012085@champlain.ccs.neu.edu>
Date: Mon, 24 Sep 2007 17:17:48 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: missing brace in method definition for Example class sends ProfessorJ into infinite loop

>Number:         8964
>Category:       profj
>Synopsis:       missing brace in method definition for Example class sends ProfessorJ into infinite loop
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Sep 24 17:20:01 -0400 2007
>Closed-Date:    Tue Apr 29 11:23:04 -0400 2008
>Last-Modified:  Tue Apr 29 11:23:04 -0400 2008
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        371.3-svn18sep2007
>Environment:
macosx "Darwin antarctica.local 8.10.2 Darwin Kernel Version 8.10.2: Wed Jun 20 21:49:49 PDT 2007; root:xnu-792.22.6~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "gui" "guide" "quick" "reference" "release-notes" "scribble" "t-y-scheme" "web-server-guide" "web-server-reference" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "teachpack") (* "/Users/matthias/Library/PLT Scheme/planet/300/371.3/cache/plt/typed-scheme.plt/1/5/doc"))
Human Language: english
(current-memory-use) 145646828

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/371.3/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery"!
  "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Experimental Languages" "ProfessorJ" "Advanced") ((field) (#f) (#t) (#f) (#t) (#t)))
>Description:
subject says it all 

svn updated some 2 minutes ago
>How-To-Repeat:
//                                                        
//                                                        
// ***      *                         *****               
//  *                    *              *            *    
//  *     ***     ****  *****           *   ** **   ***** 
//  *       *    *   *   *              *    **  *   *    
//  *       *     ***    *              *    *   *   *    
//  *  *    *        *   *              *    *   *   *    
//  *  *    *    *   *   *   *          *    *   *   *   *
// *****  *****  ****     ***         ***** *** ***   *** 
//                                                        
//                                                        
//                                                        
//                                                        

interface List {
  // effect: change the rest of this list
  void setRest(List rst); 

  // is this list the same as the other? 
  boolean same(List other); 

  // is this list the same as the other, accounting for cycles? 
  // accumulator: seenThis -- the nodes encountered on this list
  // accumulator: seenOther -- the nodes encountered on other 
  boolean same(List other, ListC seenThis, ListC seenOther); 

  // the first int of this [non-empty] list
  int first(); 

  // the rest of this [non-empty] list 
  List rest(); 
}

class MT implements List {
  MT() { }

  public void setRest(List rst) { 
    Util.error("empty has no first");
  }

  public boolean same(List other) { 
    return other instanceof MT; 
  }

  public boolean same(List other, ListC seenThis, ListC seenOther) { 
    return other instanceof MT; 
  }

  public int first() { 
    return Util.error("empty has no first"); 
  }
  
  public List rest() { 
    return Util.error("empty has no rest"); 
  }  
}

class Cons implements List {
  private int fst; 
  private List rst;

 Cons(int fst, List rst) { 
  this.fst = fst; 
  this.rst = rst; 
 }
 
 public void setRest(List rst) { 
   this. rst = rst; 
 }
 
 public boolean same(List other) { 
   return this.same(other,new MTC(),new MTC()); 
 }
 
 public boolean same(List other, ListC seenThis, ListC seenOther) { 
   if (seenThis.in(this)) {
     return (other instanceof Cons) && seenOther.in((Cons)other); }                
   else { 
     if ((other instanceof Cons) && seenOther.in((Cons)other)) {
       return false; }
     else {
       return other instanceof Cons
          && this.fst == other.first() 
          && this.rest().same(other.rest(), 
                              new ConsC(this,seenThis), 
                              new ConsC((Cons)other,seenOther)); 
          }
        }
      }
        
 public int first() { 
   return this.fst; 
 }
 
 public List rest() { 
   return this.rst; 
 }
}

//                                                               
//                                                               
// ***      *                          ****                      
//  *                    *            *   *                      
//  *     ***     ****  *****         *       ***  ** **    **** 
//  *       *    *   *   *            *      *   *  **  *  *   * 
//  *       *     ***    *            *      *   *  *   *   ***  
//  *  *    *        *   *            *      *   *  *   *      * 
//  *  *    *    *   *   *   *        *   *  *   *  *   *  *   * 
// *****  *****  ****     ***          ***    ***  *** *** ****  
//                                                               
//                                                               
//                                                               
//                                                               

interface ListC {
  boolean in(Cons x);
}

class MTC implements ListC {

  MTC() { }
  
  public boolean in(Cons x) { 
    return false; 
  }
}

class ConsC implements ListC {
  Cons first;
  ListC rest;

  ConsC(Cons first, ListC rest) {
    this.first = first;
    this.rest = rest;
  }
  
  public boolean in(Cons x) { 
    return this.first == x || this.rest.in(x); 
  }
}

//                                                        
//                                                        
//******                               **                 
// *   *                                *                 
// * *   **  **   ***  *** *  ** **     *     ***    **** 
// ***    *  *   *   *  * * *  **  *    *    *   *  *   * 
// * *     **     ****  * * *  *   *    *    *****   ***  
// *       **    *   *  * * *  *   *    *    *          * 
// *   *  *  *   *   *  * * *  *   *    *    *      *   * 
//****** **  **   ************ ****   *****   ****  ****  
//                             *                          
//                            ***                         
//                                                        
//                                                        

class Example {
  
 ListC mt = new MTC();

 List alist = new Cons(1,new MT()); 
 List list2 = new Cons(1,new MT()); 

 boolean test1 = check alist.same(list2) expect true; 
 boolean test2 = check alist.same(new MT()) expect false; 
 boolean test3 = check new MT().same(alist) expect false; 

 boolean testI = check new ConsC((Cons)alist,mt).in((Cons)list2) expect false; 
 boolean testJ = check new ConsC((Cons)alist,mt).in((Cons)alist) expect true; 
 
 List makeCyclic(int x) { 
   Cons tmp = new Cons(x,new MT()); 
   tmp.setRest(tmp);
   return tmp;
 }

 boolean test4() { 
   List clist1 = makeCyclic(1); 
   List clist2 = makeCyclic(1); 
   
   return check clist1.same(clist2) expect true; 
 }
 
 boolean test5() {
   List clist1 = new Cons(1,new MT());
   List clist2 = new Cons(1,new MT()); 
   
   clist1.setRest(clist2); 
   clist2.setRest(clist1);
   
   return check clist1.same(clist2) expect true; 
 }
 
 boolean test6() { 
   List clist0 = new Cons(1,new MT()); 
   List clist1 = new Cons(1,clist0); 
   
   clist0.setRest(clist1); 
   
   return check clist0.same(clist1) expect true; 
  // } <---- I had forgotten this brace 
}
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by kathyg at Tue, 29 Apr 2008 11:23:04 -0400
Reason>>> parser terminates snappily

