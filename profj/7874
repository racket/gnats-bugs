From apache@plt-scheme.org Mon Feb  6 18:36:26 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k16NaNip008227
	for <bugs@plt-scheme.org>; Mon, 6 Feb 2006 18:36:23 -0500
Message-Id: <200602062336.k16NaNb8008225@champlain.ccs.neu.edu>
Date: Mon, 6 Feb 2006 18:36:23 -0500
From: perreault.s@neu.edu
To: bugs@plt-scheme.org
Subject: A bug with variable types

>Number:         7874
>Category:       profj
>Synopsis:       A bug with variable types
>Class:          sw-bug
>Responsible:    kathyg
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Feb 06 18:40:00 -0500 2006
>Last-Modified:  Mon Feb 06 23:58:54 -0500 2006
>Originator:     Scott Perreault
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
(#<path:V:\pltschem.3r2\PLT\collects\doc\advanced> #<path:V:\pltschem.3r2\PLT\collects\doc\beginning> #<path:V:\pltschem.3r2\PLT\collects\doc\beginning-abbr> #<path:V:\pltschem.3r2\PLT\collects\doc\drscheme> #<path:V:\pltschem.3r2\PLT\collects\doc\foreign> #<path:V:\pltschem.3r2\PLT\collects\doc\framework> #<path:V:\pltschem.3r2\PLT\collects\doc\help> #<path:V:\pltschem.3r2\PLT\collects\doc\insidemz> #<path:V:\pltschem.3r2\PLT\collects\doc\intermediate> #<path:V:\pltschem.3r2\PLT\collects\doc\intermediate-lambda> #<path:V:\pltschem.3r2\PLT\collects\doc\misclib> #<path:V:\pltschem.3r2\PLT\collects\doc\mred> #<path:V:\pltschem.3r2\PLT\collects\doc\mrlib> #<path:V:\pltschem.3r2\PLT\collects\doc\mzc> #<path:V:\pltschem.3r2\PLT\collects\doc\mzlib> #<path:V:\pltschem.3r2\PLT\collects\doc\mzscheme> #<path:V:\pltschem.3r2\PLT\collects\doc\plot> #<path:V:\pltschem.3r2\PLT\collects\doc\profj-advanced> #<path:V:\pltschem.3r2\PLT\collects\doc\profj-beginner> #<path:V:\pltschem.3r2\PLT\collects\doc\profj-intermediate> #<path:V:\pltschem.3r2\PLT\collects\doc\r5rs> #<path:V:\pltschem.3r2\PLT\collects\doc\srfi> #<path:V:\pltschem.3r2\PLT\collects\doc\swindle> #<path:V:\pltschem.3r2\PLT\collects\doc\t-y-scheme> #<path:V:\pltschem.3r2\PLT\collects\doc\teachpack> #<path:V:\pltschem.3r2\PLT\collects\doc\tex2page> #<path:V:\pltschem.3r2\PLT\collects\doc\tools> #<path:V:\pltschem.3r2\PLT\collects\doc\tour> #<path:V:\pltschem.3r2\PLT\collects\doc\web-server>)
Collections:
((#<path:\\ccis-windows\ccis\MyHome\.WIN_PROFILE\Application Data\PLT Scheme\301\collects> (#<path:CSU213> #<path:info-domain>)) (#<path:V:\pltschem.3r2\PLT\collects> (#<path:xml> #<path:web-server> #<path:version> #<path:trace> #<path:texpict> #<path:tex2page> #<path:test-suite> #<path:syntax-color> #<path:syntax> #<path:swindle> #<path:string-constants> #<path:stepper> #<path:ssax> #<path:srfi> #<path:slideshow> #<path:slibinit> #<path:slatex> #<path:sgl> #<path:setup> #<path:r5rs> #<path:profjBoxes> #<path:profj> #<path:preprocessor> #<path:plot> #<path:planet> #<path:parser-tools> #<path:openssl> #<path:net> #<path:mztake> #<path:mzscheme> #<path:mzlib> #<path:mzcom> #<path:mysterx> #<path:mrlib> #<path:mred> #<path:make> #<path:launcher> #<path:lang> #<path:info-domain> #<path:icons> #<path:html> #<path:htdp> #<path:htdch> #<path:hierlist> #<path:help> #<path:graphics> #<path:games> #<path:frtime> #<path:framework> #<path:ffi> #<path:errortrace> #<path:eopl> #<path:embedded-gui> #<path:dynext> #<path:drscheme> #<path:doc> #<path:defaults> #<path:compiler> #<path:browser> #<path:algol60> #<path:afm>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Experimental Languages" "ProfessorJ" "Intermediate") ((field) (#f)))
>Description:
When we try to compare 2 strings, we get this error.

object:convert-assert-ClassDef-field0: expects argument of type <struct:object:convert-assert-ClassDef>; given #<undefined>

to reproduce this error i have pasted our coding into the steps to reproduce box. once you have run the coding in Dr. Scheme
run the Examples class ( new Examples() ) and you will see the error given above.
>How-To-Repeat:
/********************************\
| Assignment 4.9                 |
| Kir Birger      ID: 2662       |
| Scott Perreault ID: 1965       |
| Instructor: Barzilay           |
| Head Lab TA: Dale Vaillancourt |
| Lab Time: 9:50 am              |
\********************************/

//Represents a program
class Program
{
		ILoIntfDef interfaces;
		ILoClassDef classes;

		Program(ILoIntfDef interfaces, ILoClassDef classes)
		{
			this.interfaces = interfaces;
			this.classes = classes;
		}

     //determines if the given type name is a valid type
		boolean isTypeValid(String sType)
		{
				return (sType.equals("String")       ||
                  sType.equals("int")          ||
                  sType.equals("double")       ||
                  sType.equals("boolean")      ||
                  this.interfaces.isTypeValid(sType)||
                  this.classes.isTypeValid(sType));
		}
}

//Represents  List of interface definitions
interface ILoIntfDef
{
	boolean isTypeValid(String sType);
	boolean areInterfacesValid(ILoIntfDef loi);
}

//Represents a class definition
class ClassDef
{
		String name;
		ILoIntfDef interfaces;
		ILoField fields;

		ClassDef(String name,	ILoIntfDef interfaces, ILoField fields)
		{
			this.name = name;
			this.interfaces = interfaces;
			this.fields = fields;
		}

     //determines if all interfaces are valid in the given program
     boolean areInterfacesValid(Program prog)
     {
       return this.interfaces.areInterfacesValid(prog.interfaces);
     }

     //determines if all the field types represent 
     //a valid type in the given program
     boolean areFieldsValid(Program prog)
     {
       return this.fields.areFieldsValid(prog, this.name);
     }
     
     //determines if this class is valid in the given program
     boolean isClassValid(Program prog)
     {
       return this.areInterfacesValid(prog) &&
              this.areFieldsValid(prog);
     }
}

//Represents an empty list of interface defs
class MTLoIntfDef implements ILoIntfDef
{
		MTLoIntfDef(){}

     //returns false
		boolean isTypeValid(String sType) { return false; }
     
     //returns true
     boolean areInterfacesValid(ILoIntfDef loi) { return true; }
}

//represents a list of interface defs
class ConsLoIntfDef implements ILoIntfDef
{
		IntfDef first;
		ILoIntfDef rest;

		ConsLoIntfDef(IntfDef first, 	ILoIntfDef rest)
		{
				this.first = first;
				this.rest = rest;
		}

     //determines whether a given type is contained in a list of interfaces
		boolean isTypeValid(String sType)
		{
			if(sType.equals(this.first.name))
             return true;
        else
             return this.rest.isTypeValid(sType);
		}

     //determines if all the interface names are 
     //valid in the given list of interfaces
     boolean areInterfacesValid(ILoIntfDef loi)
     {
       return loi.isTypeValid(this.first.name) &&
              this.rest.areInterfacesValid(loi);
     }
}

//represetns a list of fields
interface ILoField
{
  boolean areFieldsValid(Program prog, String className);
}

//represents an interface def
class IntfDef
{
		String name;
		
		IntfDef(String name)
		{
			this.name = name;
		}
}

//represents an empty list of fields
class MTLoField implements ILoField
{
		MTLoField(){}
     
     //determines if the fields are valid
     boolean areFieldsValid(Program prog, String className)
     {
       return true;
     }
}

//represents a list of fields
class ConsLoField implements ILoField
{
		Field first;
		ILoField rest;
		ConsLoField(Field first, ILoField rest)
		{
			this.first = first;
			this.rest = rest;
		}
     
     //determines if the fields are valid in the given program
     boolean areFieldsValid(Program prog, String className)
     {
       return !(this.first.name.equals(className)) &&
              prog.isTypeValid(this.first.name)    &&
              rest.areFieldsValid(prog, className);
     }
}

//represents a field
class Field
{
		String type;
		String name;
		
		Field(String type, String name)
		{
			this.type = type;	
			this.name = name;
		}
}

//represents the list of class defs interface
interface ILoClassDef
{
     boolean isTypeValid(String sType);
}

//represents an empty list of class defs
class MTLoClassDef implements ILoClassDef
{
		MTLoClassDef(){}

		//returns false :-O
		boolean isTypeValid(String sType)
		{
				return false;
		}
}

//represents a list of class defs
class ConsLoClassDef implements ILoClassDef
{
		ClassDef first;
		ILoClassDef rest;

		ConsLoClassDef(ClassDef first, ILoClassDef rest)
		{
			this.first = first;
			this.rest = rest;
		}

    	//determines whether a given type is contained in a list of classes
		boolean isTypeValid(String sType)
		{
			if(this.first.name.equals(sType))
             return true;
        else
             return this.rest.isTypeValid(sType);
		}
}


//The Hard part... Examples
class Examples
{
	//Empties
	MTLoField mtLoField = new MTLoField();
	MTLoClassDef mtLoClassDef = new MTLoClassDef();
	MTLoIntfDef mtLoIntfDef = new MTLoIntfDef();

	//ILoClassDefs
	ConsLoClassDef clcd = new ConsLoClassDef(
												this.cd, this.mtLoClassDef);
	ConsLoField clf = new ConsLoField(new Field("String", 
																			"strKir"),
														 this.mtLoField);

	ConsLoIntfDef clid = new ConsLoIntfDef(
																			new IntfDef("ID"),
																			this.mtLoIntfDef);
	ClassDef cd = new ClassDef("Examples",
																	this.clid,
												this.clf);
	Program prg = new Program(this.clid, this.clcd);

//The following tests generate errors. tst1, tst3, tst5 and tst6.
  
  boolean tst1 = (this.prg.isTypeValid(new String("something")) == false);
  boolean tst2 = this.prg.isTypeValid("String") == true;
  boolean tst3 = (this.prg.isTypeValid("Examples") == true);

  boolean tst4 = this.cd.areInterfacesValid(prg);

  boolean tst5 = this.cd.areFieldsValid(prg);

  boolean tst6 = this.cd.isClassValid(prg);

	Examples(){}
}
>Fix:
>Audit-Trail:
From: Kathy Gray <kathyg@cs.utah.edu>
To: perreault.s@neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7874: A bug with variable types
Date: Mon, 6 Feb 2006 17:11:11 -0700

 Quick fix while I work on a solution that produces a reasonable error  
 message:
 
 Move the definition of ConsLoClassDef clcd to after the definition of  
 ClassDef cd
 
 -Kathy
 
 
 On Feb 6, 2006, at 4:40 PM, perreault.s@neu.edu wrote:
 
 > /********************************\
 > | Assignment 4.9                 |
 > | Kir Birger      ID: 2662       |
 > | Scott Perreault ID: 1965       |
 > | Instructor: Barzilay           |
 > | Head Lab TA: Dale Vaillancourt |
 > | Lab Time: 9:50 am              |
 > \********************************/
 >
 > //Represents a program
 > class Program
 > {
 > 		ILoIntfDef interfaces;
 > 		ILoClassDef classes;
 >
 > 		Program(ILoIntfDef interfaces, ILoClassDef classes)
 > 		{
 > 			this.interfaces = interfaces;
 > 			this.classes = classes;
 > 		}
 >
 >      //determines if the given type name is a valid type
 > 		boolean isTypeValid(String sType)
 > 		{
 > 				return (sType.equals("String")       ||
 >                   sType.equals("int")          ||
 >                   sType.equals("double")       ||
 >                   sType.equals("boolean")      ||
 >                   this.interfaces.isTypeValid(sType)||
 >                   this.classes.isTypeValid(sType));
 > 		}
 > }
 >
 > //Represents  List of interface definitions
 > interface ILoIntfDef
 > {
 > 	boolean isTypeValid(String sType);
 > 	boolean areInterfacesValid(ILoIntfDef loi);
 > }
 >
 > //Represents a class definition
 > class ClassDef
 > {
 > 		String name;
 > 		ILoIntfDef interfaces;
 > 		ILoField fields;
 >
 > 		ClassDef(String name,	ILoIntfDef interfaces, ILoField fields)
 > 		{
 > 			this.name = name;
 > 			this.interfaces = interfaces;
 > 			this.fields = fields;
 > 		}
 >
 >      //determines if all interfaces are valid in the given program
 >      boolean areInterfacesValid(Program prog)
 >      {
 >        return this.interfaces.areInterfacesValid(prog.interfaces);
 >      }
 >
 >      //determines if all the field types represent
 >      //a valid type in the given program
 >      boolean areFieldsValid(Program prog)
 >      {
 >        return this.fields.areFieldsValid(prog, this.name);
 >      }
 >
 >      //determines if this class is valid in the given program
 >      boolean isClassValid(Program prog)
 >      {
 >        return this.areInterfacesValid(prog) &&
 >               this.areFieldsValid(prog);
 >      }
 > }
 >
 > //Represents an empty list of interface defs
 > class MTLoIntfDef implements ILoIntfDef
 > {
 > 		MTLoIntfDef(){}
 >
 >      //returns false
 > 		boolean isTypeValid(String sType) { return false; }
 >
 >      //returns true
 >      boolean areInterfacesValid(ILoIntfDef loi) { return true; }
 > }
 >
 > //represents a list of interface defs
 > class ConsLoIntfDef implements ILoIntfDef
 > {
 > 		IntfDef first;
 > 		ILoIntfDef rest;
 >
 > 		ConsLoIntfDef(IntfDef first, 	ILoIntfDef rest)
 > 		{
 > 				this.first = first;
 > 				this.rest = rest;
 > 		}
 >
 >      //determines whether a given type is contained in a list of  
 > interfaces
 > 		boolean isTypeValid(String sType)
 > 		{
 > 			if(sType.equals(this.first.name))
 >              return true;
 >         else
 >              return this.rest.isTypeValid(sType);
 > 		}
 >
 >      //determines if all the interface names are
 >      //valid in the given list of interfaces
 >      boolean areInterfacesValid(ILoIntfDef loi)
 >      {
 >        return loi.isTypeValid(this.first.name) &&
 >               this.rest.areInterfacesValid(loi);
 >      }
 > }
 >
 > //represetns a list of fields
 > interface ILoField
 > {
 >   boolean areFieldsValid(Program prog, String className);
 > }
 >
 > //represents an interface def
 > class IntfDef
 > {
 > 		String name;
 > 		
 > 		IntfDef(String name)
 > 		{
 > 			this.name = name;
 > 		}
 > }
 >
 > //represents an empty list of fields
 > class MTLoField implements ILoField
 > {
 > 		MTLoField(){}
 >
 >      //determines if the fields are valid
 >      boolean areFieldsValid(Program prog, String className)
 >      {
 >        return true;
 >      }
 > }
 >
 > //represents a list of fields
 > class ConsLoField implements ILoField
 > {
 > 		Field first;
 > 		ILoField rest;
 > 		ConsLoField(Field first, ILoField rest)
 > 		{
 > 			this.first = first;
 > 			this.rest = rest;
 > 		}
 >
 >      //determines if the fields are valid in the given program
 >      boolean areFieldsValid(Program prog, String className)
 >      {
 >        return !(this.first.name.equals(className)) &&
 >               prog.isTypeValid(this.first.name)    &&
 >               rest.areFieldsValid(prog, className);
 >      }
 > }
 >
 > //represents a field
 > class Field
 > {
 > 		String type;
 > 		String name;
 > 		
 > 		Field(String type, String name)
 > 		{
 > 			this.type = type;	
 > 			this.name = name;
 > 		}
 > }
 >
 > //represents the list of class defs interface
 > interface ILoClassDef
 > {
 >      boolean isTypeValid(String sType);
 > }
 >
 > //represents an empty list of class defs
 > class MTLoClassDef implements ILoClassDef
 > {
 > 		MTLoClassDef(){}
 >
 > 		//returns false :-O
 > 		boolean isTypeValid(String sType)
 > 		{
 > 				return false;
 > 		}
 > }
 >
 > //represents a list of class defs
 > class ConsLoClassDef implements ILoClassDef
 > {
 > 		ClassDef first;
 > 		ILoClassDef rest;
 >
 > 		ConsLoClassDef(ClassDef first, ILoClassDef rest)
 > 		{
 > 			this.first = first;
 > 			this.rest = rest;
 > 		}
 >
 >     	//determines whether a given type is contained in a list of  
 > classes
 > 		boolean isTypeValid(String sType)
 > 		{
 > 			if(this.first.name.equals(sType))
 >              return true;
 >         else
 >              return this.rest.isTypeValid(sType);
 > 		}
 > }
 >
 >
 > //The Hard part... Examples
 > class Examples
 > {
 > 	//Empties
 > 	MTLoField mtLoField = new MTLoField();
 > 	MTLoClassDef mtLoClassDef = new MTLoClassDef();
 > 	MTLoIntfDef mtLoIntfDef = new MTLoIntfDef();
 >
 > 	//ILoClassDefs
 > 	ConsLoClassDef clcd = new ConsLoClassDef(
 > 												this.cd, this.mtLoClassDef);
 > 	ConsLoField clf = new ConsLoField(new Field("String",
 > 																			"strKir"),
 > 														 this.mtLoField);
 >
 > 	ConsLoIntfDef clid = new ConsLoIntfDef(
 > 																			new IntfDef("ID"),
 > 																			this.mtLoIntfDef);
 > 	ClassDef cd = new ClassDef("Examples",
 > 																	this.clid,
 > 												this.clf);
 > 	Program prg = new Program(this.clid, this.clcd);
 >
 > //The following tests generate errors. tst1, tst3, tst5 and tst6.
 >
 >   boolean tst1 = (this.prg.isTypeValid(new String("something")) ==  
 > false);
 >   boolean tst2 = this.prg.isTypeValid("String") == true;
 >   boolean tst3 = (this.prg.isTypeValid("Examples") == true);
 >
 >   boolean tst4 = this.cd.areInterfacesValid(prg);
 >
 >   boolean tst5 = this.cd.areFieldsValid(prg);
 >
 >   boolean tst6 = this.cd.isClassValid(prg);
 >
 > 	Examples(){}
 > }
 
From: Eli Barzilay <eli@barzilay.org>
To: Kathy Gray <kathyg@cs.utah.edu>, bugs@plt-scheme.org
Cc: perreault.s@neu.edu
Subject: Re: all/7874: A bug with variable types
Date: Mon, 6 Feb 2006 19:19:51 -0500

 On Feb  6, Kathy Gray wrote:
 >  Quick fix while I work on a solution that produces a reasonable
 >  error message:
 >  
 >  Move the definition of ConsLoClassDef clcd to after the definition
 >  of ClassDef cd
 
 I just saw the same problem -- an easier way to see it is:
 
   class Examples {
     int x = this.y + 1;
     int y = 1;
     Examples() { }
   }
 
 (Except that the error message from the full code leaked out much more
 than just "#<undefined>")
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Responsible changed from "nobody" to "kathyg" by kathyg at Mon, 06 Feb 2006 23:58:54 -0500
Reason>>> .

State changed from "open" to "closed" by kathyg at Mon, 06 Feb 2006 23:58:54 -0500
Reason>>> This situation will now result in an error indicating that a field is being accessed 
before it is declared. Committed in SVN

