From wmitchen@princeton.edu  Thu Aug  8 20:06:14 2002
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id UAA09908
	for <bugs>; Thu, 8 Aug 2002 20:06:14 -0400
Message-Id: <200208090006.UAA09908@champlain.ccs.neu.edu>
Date: Thu, 8 Aug 2002 20:06:14 -0400
From: Garrett Mitchener <wmitchen@princeton.edu>
To: bugs@plt-scheme.org
Subject: problem in help desk forming manual page

>Number:         5719
>Category:       help-desk
>Synopsis:       problem in help desk forming manual page
>Class:          sw-bug
>Responsible:    steck
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Aug 08 20:10:00 -0400 2002
>Closed-Date:    Fri Aug 09 14:41:39 -0400 2002
>Last-Modified:  Mon May 05 14:30:37 -0400 2008
>Originator:     Garrett Mitchener
>Organization:
plt
>Submitter-Id:   unknown
>Release:        201
>Environment:
unix "Linux omnicron.princeton.edu 2.4.18-5 #1 Mon Jun 10 15:31:48 EDT 2002 i686 unknown" (i386-linux)

Docs Installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "icons" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour" "insidemz" "schemeunit")

Collections:
(("/usr/local/lib/plt-201/collects" ("afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mzlib" "mzscheme" "net" "parser-tools" "setup" "slibinit" "stepper" "string-constants" "syntax" "tex2page" "version" "web-server" "xml" "schemeunit" "srfi" "ssax")))

Human Language: english
>Description:
I installed a number of .plt packages, including the schemeunit and srfi packages from schematics.sourceforge.net.  Then when I called up the help desk and clicked on the manuals link, it gave me an error message about a servelet exiting abnormally.

The fix is simple enough.  You were improperly creating a file name in find-manuals, at the definition of doc-paths.  I've fixed one line in the file /usr/local/lib/plt/collects/help/private/manuals.ss and included it below.

Thanks for a great program, and I hope you can use my patch.

-wgm

(module manuals mzscheme
  (require (lib "list.ss")
           (lib "file.ss")
           (lib "date.ss")
           (lib "string-constant.ss" "string-constants")
	   (lib "pregexp.ss")
           "colldocs.ss"
           "docpos.ss"
	   (lib "util.ss" "help" "servlets" "private")
	   (lib "external.ss" "help" "servlets" "private"))

  ; to get CSS style spec
  (require (lib "xml.ss" "xml"))
  (require (lib "hd-css.ss" "help" "servlets" "private"))  

  (provide find-manuals)
 
  (define re:title (regexp "<[tT][iI][tT][lL][eE]>(.*)</[tT][iI][tT][lL][eE]>"))

  (define external-connections? (unbox external-box))

  (define (find-manuals)
    (let* ([sys-type (system-type)]
	   [cvs-user? (cvs?)]
           [doc-collection-path (with-handlers ([void (lambda (x) #f)])
                                  (collection-path "doc"))]
           [docs (let loop ([l (if doc-collection-path
                                   (directory-list doc-collection-path)
                                   null)])
                   (cond
                     [(null? l) null]
                     [(file-exists? (build-path doc-collection-path (car l) "index.htm"))
                      (cons (car l) (loop (cdr l)))]
                     [else (loop (cdr l))]))]
	   [compare-docs (lambda (a b)
			   (let ([ap (standard-html-doc-position a)]
				 [bp (standard-html-doc-position b)])
			     (cond
			      [(= ap bp) (string<? a b)]
			      [else (< ap bp)])))]
           [docs (quicksort docs compare-docs)]
           [doc-paths (map (lambda (doc) 
                             (build-path doc-collection-path doc)) docs)]
           [get-name
	    (lambda (d)
	      (let-values ([(_1 short-path _2) (split-path d)])
		(let ([ass (assoc short-path known-docs)])
		  (if ass
		      (cdr ass)
		      (with-input-from-file (build-path d "index.htm")
			(lambda ()
			  (let loop ()
			    (let ([r (read-line)])
			      (cond
			       [(eof-object? r) "(Unknown title)"]
			       [(regexp-match re:title r) => cadr]
			       [(regexp-match "<[tT][iI][tT][lL][eE]>(.*)$" r)
				;; Append lines until we find it 
				(let aloop ([r r])
				  (let ([a (read-line)])
				    (cond
				     [(eof-object? a) (loop)] ; give up
				     [else (let ([r (string-append r a)])
					     (cond
					      [(regexp-match re:title r) => cadr]
					      [else (aloop r)]))])))]
			       [else (loop)])))))))))]
	   [names (map get-name doc-paths)]
	   [names+paths (map cons names doc-paths)]
	   [is-lang? (lambda (name+path)
		       (or (regexp-match "Language" (car name+path))
			   (regexp-match "MrEd" (car name+path))))] ;; hack
	   [lang-names+paths (filter is-lang? names+paths)]
	   [tool-names+paths (filter (lambda (x) (not (is-lang? x))) names+paths)]
	   [lang-names (map car lang-names+paths)]
	   [lang-doc-paths (map cdr lang-names+paths)]
	   [tool-names (map car tool-names+paths)]
	   [tool-doc-paths (map cdr tool-names+paths)]
	   [mk-link (lambda (doc name)
                      (let ([index-file (build-path 
					 (collection-path "doc")
					 (car (last-pair (explode-path doc)))
					 "index.htm")])
                        (format "<LI> <A HREF=\"~a\">~a</A>~a"
			        doc
                                name
                                (if (and cvs-user?
                                         (file-exists? index-file))
                                    (string-append 
                                     "<br>"
                                     (format (string-constant manual-installed-date)
                                             (date->string
                                              (seconds->date
                                               (file-or-directory-modify-seconds
                                                index-file)))))
                                    ""))))]
	   [break-between (lambda (re l)
			    (if (null? l)
				l
				(if (regexp-match re (car l))
				    (let loop ([l l])
				      (cond 
				       [(null? l) null]
				       [(regexp-match re (car l))
					(cons (car l) (loop (cdr l)))]
				       [else (cons "<P>" l)]))
				    l)))])
      (let-values ([(collections-doc-files collection-names) (colldocs)])
        (apply
	 string-append
	 "<html><head>"
	 "<TITLE>Installed Manuals</TITLE>"
	(xexpr->string hd-css)
	 "</head>"
	 "<body>"
	 (append 
	  
	  (list "<H1>Installed Manuals</H1>")
	  
	  (if (and cvs-user? (not external-connections?))
	      (list "<b>CVS:</b> <a href=\"/servlets/refresh-manuals.ss\" target=\"outer\">refresh all manuals</a>")
	      '())
	  
	  (list "<H3>Languages</H3>"
		"<UL>")
	  (break-between "Student" (map mk-link lang-doc-paths lang-names))
	  (list "</UL>"
		"<H3>Tools, Libraries, and Extensions</H3>"
		"<UL>")
	  (break-between "DrScheme" (map mk-link tool-doc-paths tool-names))
	  (list "</UL><P><UL>")
	  (map
	   (lambda (collection-doc-file name)
	     (format "<LI> <A HREF=\"/servlets/doc-anchor.ss?file=~a&name=~a&caption=Documentation for the ~a collection\">~a collection</A>"
					; escape colons and other junk
		     (hexify-string
		      (build-path (car collection-doc-file) 
				  (cadr collection-doc-file)))
	             name
		     name
		     name))
	   collections-doc-files
	   collection-names)
	  (list "</UL>")
	  (let ([uninstalled (let loop ([l known-docs])
			       (cond
				[(null? l) null]
				[(member (caar l) docs) (loop (cdr l))]
				[else (cons (car l) (loop (cdr l)))]))])
	    (cond
	     [(null? uninstalled)
	      (list "")]
	     [(not doc-collection-path)
	      (list "<font color=\"red\">"
		    "Please create a doc collection."
		    "You will not be able to install any manuals until you do."
		    "Installing help-doc.plt will create doc collection automaically."
		    "</font>")]
	     [else
	      (list*
	       "<H3>Uninstalled Manuals</H3>"
	       "<UL>"
	       (append
		(map
		 (lambda (doc-pair)
		   (let ([manual (car doc-pair)]
			 [name (cdr doc-pair)])
		     (format "<LI> <A HREF=\"/servlets/missing-manual.ss?manual=~a&name=~a\">~a</A>~a"
			     manual
			     (hexify-string name)
			     name
			     (if (file-exists? 
				  (build-path doc-collection-path manual "hdindex"))
				 " (index installed)"
				 ""))))
		 uninstalled)
		(list "</UL>")))]))
	  (list "</body></html>")))))))
(module manuals mzscheme
  (require (lib "list.ss")
           (lib "file.ss")
           (lib "date.ss")
           (lib "string-constant.ss" "string-constants")
	   (lib "pregexp.ss")
           "colldocs.ss"
           "docpos.ss"
	   (lib "util.ss" "help" "servlets" "private")
	   (lib "external.ss" "help" "servlets" "private"))

  ; to get CSS style spec
  (require (lib "xml.ss" "xml"))
  (require (lib "hd-css.ss" "help" "servlets" "private"))  

  (provide find-manuals)
 
  (define re:title (regexp "<[tT][iI][tT][lL][eE]>(.*)</[tT][iI][tT][lL][eE]>"))

  (define external-connections? (unbox external-box))

  (define (find-manuals)
    (let* ([sys-type (system-type)]
	   [cvs-user? (cvs?)]
           [doc-collection-path (with-handlers ([void (lambda (x) #f)])
                                  (collection-path "doc"))]
           [docs (let loop ([l (if doc-collection-path
                                   (directory-list doc-collection-path)
                                   null)])
                   (cond
                     [(null? l) null]
                     [(file-exists? (build-path doc-collection-path (car l) "index.htm"))
                      (cons (car l) (loop (cdr l)))]
                     [else (loop (cdr l))]))]
	   [compare-docs (lambda (a b)
			   (let ([ap (standard-html-doc-position a)]
				 [bp (standard-html-doc-position b)])
			     (cond
			      [(= ap bp) (string<? a b)]
			      [else (< ap bp)])))]
           [docs (quicksort docs compare-docs)]
           [doc-paths (map (lambda (doc) 
                             (build-path doc-collection-path doc)) docs)]
           [get-name
	    (lambda (d)
	      (let-values ([(_1 short-path _2) (split-path d)])
		(let ([ass (assoc short-path known-docs)])
		  (if ass
		      (cdr ass)
		      (with-input-from-file (build-path d "index.htm")
			(lambda ()
			  (let loop ()
			    (let ([r (read-line)])
			      (cond
			       [(eof-object? r) "(Unknown title)"]
			       [(regexp-match re:title r) => cadr]
			       [(regexp-match "<[tT][iI][tT][lL][eE]>(.*)$" r)
				;; Append lines until we find it 
				(let aloop ([r r])
				  (let ([a (read-line)])
				    (cond
				     [(eof-object? a) (loop)] ; give up
				     [else (let ([r (string-append r a)])
					     (cond
					      [(regexp-match re:title r) => cadr]
					      [else (aloop r)]))])))]
			       [else (loop)])))))))))]
	   [names (map get-name doc-paths)]
	   [names+paths (map cons names doc-paths)]
	   [is-lang? (lambda (name+path)
		       (or (regexp-match "Language" (car name+path))
			   (regexp-match "MrEd" (car name+path))))] ;; hack
	   [lang-names+paths (filter is-lang? names+paths)]
	   [tool-names+paths (filter (lambda (x) (not (is-lang? x))) names+paths)]
	   [lang-names (map car lang-names+paths)]
	   [lang-doc-paths (map cdr lang-names+paths)]
	   [tool-names (map car tool-names+paths)]
	   [tool-doc-paths (map cdr tool-names+paths)]
	   [mk-link (lambda (doc name)
                      (let ([index-file (build-path 
					 (collection-path "doc")
					 (car (last-pair (explode-path doc)))
					 "index.htm")])
                        (format "<LI> <A HREF=\"~a\">~a</A>~a"
			        doc
                                name
                                (if (and cvs-user?
                                         (file-exists? index-file))
                                    (string-append 
                                     "<br>"
                                     (format (string-constant manual-installed-date)
                                             (date->string
                                              (seconds->date
                                               (file-or-directory-modify-seconds
                                                index-file)))))
                                    ""))))]
	   [break-between (lambda (re l)
			    (if (null? l)
				l
				(if (regexp-match re (car l))
				    (let loop ([l l])
				      (cond 
				       [(null? l) null]
				       [(regexp-match re (car l))
					(cons (car l) (loop (cdr l)))]
				       [else (cons "<P>" l)]))
				    l)))])
      (let-values ([(collections-doc-files collection-names) (colldocs)])
        (apply
	 string-append
	 "<html><head>"
	 "<TITLE>Installed Manuals</TITLE>"
	(xexpr->string hd-css)
	 "</head>"
	 "<body>"
	 (append 
	  
	  (list "<H1>Installed Manuals</H1>")
	  
	  (if (and cvs-user? (not external-connections?))
	      (list "<b>CVS:</b> <a href=\"/servlets/refresh-manuals.ss\" target=\"outer\">refresh all manuals</a>")
	      '())
	  
	  (list "<H3>Languages</H3>"
		"<UL>")
	  (break-between "Student" (map mk-link lang-doc-paths lang-names))
	  (list "</UL>"
		"<H3>Tools, Libraries, and Extensions</H3>"
		"<UL>")
	  (break-between "DrScheme" (map mk-link tool-doc-paths tool-names))
	  (list "</UL><P><UL>")
	  (map
	   (lambda (collection-doc-file name)
	     (format "<LI> <A HREF=\"/servlets/doc-anchor.ss?file=~a&name=~a&caption=Documentation for the ~a collection\">~a collection</A>"
					; escape colons and other junk
		     (hexify-string
		      (build-path (car collection-doc-file) 
				  (cadr collection-doc-file)))
	             name
		     name
		     name))
	   collections-doc-files
	   collection-names)
	  (list "</UL>")
	  (let ([uninstalled (let loop ([l known-docs])
			       (cond
				[(null? l) null]
				[(member (caar l) docs) (loop (cdr l))]
				[else (cons (car l) (loop (cdr l)))]))])
	    (cond
	     [(null? uninstalled)
	      (list "")]
	     [(not doc-collection-path)
	      (list "<font color=\"red\">"
		    "Please create a doc collection."
		    "You will not be able to install any manuals until you do."
		    "Installing help-doc.plt will create doc collection automaically."
		    "</font>")]
	     [else
	      (list*
	       "<H3>Uninstalled Manuals</H3>"
	       "<UL>"
	       (append
		(map
		 (lambda (doc-pair)
		   (let ([manual (car doc-pair)]
			 [name (cdr doc-pair)])
		     (format "<LI> <A HREF=\"/servlets/missing-manual.ss?manual=~a&name=~a\">~a</A>~a"
			     manual
			     (hexify-string name)
			     name
			     (if (file-exists? 
				  (build-path doc-collection-path manual "hdindex"))
				 " (index installed)"
				 ""))))
		 uninstalled)
		(list "</UL>")))]))
	  (list "</body></html>")))))))

>How-To-Repeat:
Get the schemeunit package from schematics.sourceforge.net, install it, call up the help desk, and click on manuals.

This is DrScheme 201 on Red Hat 7.3, installed from your RPM by the way.
>Fix:
>Release-Note:
>Audit-Trail:
From: "Paul Steckler" <steck@ccs.neu.edu>
To: "'Garrett Mitchener'" <wmitchen@princeton.edu>, <bugs@plt-scheme.org>
Cc:  
Subject: RE: all/5719: problem in help desk forming manual page
Date: Fri, 9 Aug 2002 11:28:53 -0400

 Garrett,
 
 > The fix is simple enough.  You were improperly creating a file name in
 > find-manuals, at the definition of doc-paths.  I've fixed one line in
 > the file /usr/local/lib/plt/collects/help/private/manuals.ss and
 > included it below.
 
 Thanks for the report.
 
 I'm not sure I follow what's happening here.
 
 When you install the Schematics code, does that change the location of
 the `doc' collection?  Does it install its own manuals in another
 collection directory named `doc'?  That's a problem, because Help Desk
 (reasonably) assumes there's just one `doc' collection.
 
 I don't think the patch you give will work on all platforms, because the
 Web server requires forward slashes for URLs, and build-path will put in
 other separators on some platforms (backslash on Windows, for example).
 
 -- Paul
 
 
State-Changed-From-To: open->closed
State-Changed-By: steck
State-Changed-When: Fri Aug  9 14:41:39 2002
State-Changed-Why:
    Fixed.
>Unformatted:
