From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Nov 15 01:30:38 2007
Received: from nf-out-0910.google.com (nf-out-0910.google.com [64.233.182.185])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id lAF6Ucsn029883
	for <bugs@bugs.plt-scheme.org>; Thu, 15 Nov 2007 01:30:38 -0500
Message-Id: <200711150630.lAF6UXw4029878@champlain.ccs.neu.edu>
Date: Thu, 15 Nov 2007 01:30:33 -0500
From: clements@brinckerhoff.org
To: bugs@plt-scheme.org
Subject: problem refreshing manuals

>Number:         9065
>Category:       help-desk
>Synopsis:       problem refreshing manuals
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Nov 15 01:35:01 -0500 2007
>Closed-Date:    Tue May 06 12:02:16 -0400 2008
>Last-Modified:  Tue May 06 14:14:08 -0400 2008
>Originator:     John Clements
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.2-svn14nov2007
>Environment:
macosx "Darwin uccello.local 8.10.1 Darwin Kernel Version 8.10.1: Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Docs Installed:
()
Human Language: english
(current-memory-use) 114624652

Collections:
(("/Users/clements/clements/collects" ".svn" "badger" "biff" "big-step-explorer" "clements-lib" "contour-letters" "gnucash" "info-domain" "iTunes-helper" "java-helpers" "jbc-gnucash" "matrix-arithmetic" "mboxrd-read" "mnemisis" "no-brainer" "profj-auto-runner" "projector" "shelly" "single-stepper" "smootxes" "template-tester" "txomp" "web-utilities") ("/Users/clements/matthias/collects" non-existent-path) ("/Users/clements/Library/PLT Scheme/3.99.0.2/collects" non-existent-path) ("/Users/clements/plt/collects" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "p!
 lot" "preprocessor" "profj" "profjWizard" "r5rs" "readline" "repos-time-stamp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#6(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
I reported this before and it was promptly fixed; seeing a similar bug suggests that I need to update something or other, but this is a freshly updated svn tree.  

Anyhow: clicking on the "refresh" link of the "MzScheme: language manual" manual entry causes the following error:

Error Evaluating Scheme Code

((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote refresh-manuals)) (list (cons ((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote bytes-to-path)) #"mzscheme") "PLT MzScheme: Language Manual")))

compile: bad syntax; function application is not allowed, because no #%app syntax transformer is bound in: ((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote refresh-manuals)) (list (cons ((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote bytes-to-path)) #"mzscheme") "PLT MzScheme: Language Manual")))
>How-To-Repeat:
Open Help Desk, click on Manuals, click on "refresh" link for PLT MzScheme: Language Manual.
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@cs.uchicago.edu>
To: clements@brinckerhoff.org, bugs@plt-scheme.org
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 07:21:01 -0600

 Should I be fixing this, or perhaps it is time to make help desk point
 to the new docs?
 
 Robby
 
 On Nov 15, 2007 12:35 AM,  <clements@brinckerhoff.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9065
 >
 > Reported by John Clements for release: 3.99.0.2-svn14nov2007
 >
 > *** Description:
 > I reported this before and it was promptly fixed; seeing a similar bug suggests that I need to update something or other, but this is a freshly updated svn tree.
 >
 > Anyhow: clicking on the "refresh" link of the "MzScheme: language manual" manual entry causes the following error:
 >
 > Error Evaluating Scheme Code
 >
 > ((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote refresh-manuals)) (list (cons ((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote bytes-to-path)) #"mzscheme") "PLT MzScheme: Language Manual")))
 >
 > compile: bad syntax; function application is not allowed, because no #%app syntax transformer is bound in: ((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote refresh-manuals)) (list (cons ((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote bytes-to-path)) #"mzscheme") "PLT MzScheme: Language Manual")))
 >
 > *** How to repeat:
 > Open Help Desk, click on Manuals, click on "refresh" link for PLT MzScheme: Language Manual.
 >
 > *** Environment:
 > macosx "Darwin uccello.local 8.10.1 Darwin Kernel Version 8.10.1: Wed May 23 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
 > Docs Installed:
 > ()
 > Human Language: english
 > (current-memory-use) 114624652
 >
 > Collections:
 > (("/Users/clements/clements/collects" ".svn" "badger" "biff" "big-step-explorer" "clements-lib" "contour-letters" "gnucash" "info-domain" "iTunes-helper" "java-helpers" "jbc-gnucash" "matrix-arithmetic" "mboxrd-read" "mnemisis" "no-brainer" "profj-auto-runner" "projector" "shelly" "single-stepper" "smootxes" "template-tester" "txomp" "web-utilities") ("/Users/clements/matthias/collects" non-existent-path) ("/Users/clements/Library/PLT Scheme/3.99.0.2/collects" non-existent-path) ("/Users/clements/plt/collects" ".svn" "afm" "algol60" "big" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "p!
 >  lot" "preprocessor" "profj" "profjWizard" "r5rs" "readline" "repos-time-stamp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#6(#t constructor repeating-decimal #f #t none) #f ()))
 >
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 06:23:26 -0700

 I think we should forget about "Refresh" and spend the energy on the
 new docs.
 
 Matthew
 
 At Thu, 15 Nov 2007 07:21:01 -0600, "Robby Findler" wrote:
 > Should I be fixing this, or perhaps it is time to make help desk point
 > to the new docs?
 > 
 > Robby
 > 
 > On Nov 15, 2007 12:35 AM,  <clements@brinckerhoff.org> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9065
 > >
 > > Reported by John Clements for release: 3.99.0.2-svn14nov2007
 > >
 > > *** Description:
 > > I reported this before and it was promptly fixed; seeing a similar bug 
 > suggests that I need to update something or other, but this is a freshly 
 > updated svn tree.
 > >
 > > Anyhow: clicking on the "refresh" link of the "MzScheme: language manual" 
 > manual entry causes the following error:
 > >
 > > Error Evaluating Scheme Code
 > >
 > > ((dynamic-require (quote (lib "refresh-manuals.ss" "help")) (quote refresh-
 > manuals)) (list (cons ((dynamic-require (quote (lib "refresh-manuals.ss" 
 > "help")) (quote bytes-to-path)) #"mzscheme") "PLT MzScheme: Language Manual")))
 > >
 > > compile: bad syntax; function application is not allowed, because no #%app 
 > syntax transformer is bound in: ((dynamic-require (quote (lib "refresh-
 > manuals.ss" "help")) (quote refresh-manuals)) (list (cons ((dynamic-require 
 > (quote (lib "refresh-manuals.ss" "help")) (quote bytes-to-path)) #"mzscheme") 
 > "PLT MzScheme: Language Manual")))
 > >
 > > *** How to repeat:
 > > Open Help Desk, click on Manuals, click on "refresh" link for PLT MzScheme: 
 > Language Manual.
 > >
 > > *** Environment:
 > > macosx "Darwin uccello.local 8.10.1 Darwin Kernel Version 8.10.1: Wed May 23 
 > 16:33:00 PDT 2007; root:xnu-792.22.5~1/RELEASE_I386 i386 i386" (i386-
 > macosx/3m) (get-display-depth) = 32
 > > Docs Installed:
 > > ()
 > > Human Language: english
 > > (current-memory-use) 114624652
 > >
 > > Collections:
 > > (("/Users/clements/clements/collects" ".svn" "badger" "biff" "big-step-
 > explorer" "clements-lib" "contour-letters" "gnucash" "info-domain" "iTunes-
 > helper" "java-helpers" "jbc-gnucash" "matrix-arithmetic" "mboxrd-read" 
 > "mnemisis" "no-brainer" "profj-auto-runner" "projector" "shelly" "single-
 > stepper" "smootxes" "template-tester" "txomp" "web-utilities") 
 > ("/Users/clements/matthias/collects" non-existent-path) 
 > ("/Users/clements/Library/PLT Scheme/3.99.0.2/collects" non-existent-path) 
 > ("/Users/clements/plt/collects" ".svn" "afm" "algol60" "big" "browser" 
 > "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" 
 > "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" 
 > "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" 
 > "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" 
 > "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" 
 > "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "p!
 > >  lot" "preprocessor" "profj" "profjWizard" "r5rs" "readline" "repos-time-
 > stamp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" 
 > "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" 
 > "syntax" "syntax-color" "teachpack" "test-box-recovery" "tests" "tex2page" 
 > "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
 > > Computer Language: (("Teaching Languages" "How to Design Programs" 
 > "Beginning Student") (#6(#t constructor repeating-decimal #f #t none) #f ()))
 > >
 > >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 07:26:35 -0600

 I believe that Help Desk just goes away, right? So, searching should
 perhaps build an html page in, say, /tmp with pointers into the new
 docs? Also, where do I find information on the format of the indicies
 and what they mean?
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 06:37:47 -0700

 At Thu, 15 Nov 2007 07:26:35 -0600, "Robby Findler" wrote:
 > I believe that Help Desk just goes away, right? So, searching should
 > perhaps build an html page in, say, /tmp with pointers into the new
 > docs?
 
 I don't know whether it's better to do that or have searching pop up a
 window with links that open in a browser.
 
 > Also, where do I find information on the format of the indicies
 > and what they mean?
 
 It's not written down, yet, and more support is needed from Scribble.
 I'll work on that.
 
 The answer is that the output directory for each document has an
 "xef-out.ss" file containing a list in S-expression form. You can
 `deserialize' the second element of that list to get a `resolve-info'
 struct as exported by `scribble/struct'. But the only function on
 `resolve-info' is `resolve-get'; Help desk needs more functions to
 inspect and search the information.
 
 Matthew
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 07:40:40 -0600

 On Nov 15, 2007 7:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Thu, 15 Nov 2007 07:26:35 -0600, "Robby Findler" wrote:
 > > I believe that Help Desk just goes away, right? So, searching should
 > > perhaps build an html page in, say, /tmp with pointers into the new
 > > docs?
 >
 > I don't know whether it's better to do that or have searching pop up a
 > window with links that open in a browser.
 
 Lets start with the web page, so that it can be made to work from the
 commandline for all the Emacs nazi's out there. :(
 
 > > Also, where do I find information on the format of the indicies
 > > and what they mean?
 >
 > It's not written down, yet, and more support is needed from Scribble.
 > I'll work on that.
 >
 > The answer is that the output directory for each document has an
 > "xef-out.ss" file containing a list in S-expression form. You can
 > `deserialize' the second element of that list to get a `resolve-info'
 > struct as exported by `scribble/struct'. But the only function on
 > `resolve-info' is `resolve-get'; Help desk needs more functions to
 > inspect and search the information.
 
 Does it make sense to have scribble publish a search-based API instead
 of having that be in help desk?
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 07:00:23 -0700

 At Thu, 15 Nov 2007 07:40:40 -0600, "Robby Findler" wrote:
 > > The answer is that the output directory for each document has an
 > > "xef-out.ss" file containing a list in S-expression form. You can
 > > `deserialize' the second element of that list to get a `resolve-info'
 > > struct as exported by `scribble/struct'. But the only function on
 > > `resolve-info' is `resolve-get'; Help desk needs more functions to
 > > inspect and search the information.
 > 
 > Does it make sense to have scribble publish a search-based API instead
 > of having that be in help desk?
 
 Not exactly, I think.
 
 Scribble should provide information in a rawer form, so that a separate
 search engine can suitably account for different spellings, filter
 based on bindings versus section titles, etc.
 
 The again, it depends on what you call "Scribble". The part that builds
 docs based on "info.ss" entries and sets up "xref-out.ss" files is
 already more part of Setup PLT than Scribble.
 
 Matthew
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 08:07:35 -0600

 On Nov 15, 2007 8:00 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Thu, 15 Nov 2007 07:40:40 -0600, "Robby Findler" wrote:
 > > > The answer is that the output directory for each document has an
 > > > "xef-out.ss" file containing a list in S-expression form. You can
 > > > `deserialize' the second element of that list to get a `resolve-info'
 > > > struct as exported by `scribble/struct'. But the only function on
 > > > `resolve-info' is `resolve-get'; Help desk needs more functions to
 > > > inspect and search the information.
 > >
 > > Does it make sense to have scribble publish a search-based API instead
 > > of having that be in help desk?
 >
 > Not exactly, I think.
 >
 > Scribble should provide information in a rawer form, so that a separate
 > search engine can suitably account for different spellings, filter
 > based on bindings versus section titles, etc.
 >
 > The again, it depends on what you call "Scribble". The part that builds
 > docs based on "info.ss" entries and sets up "xref-out.ss" files is
 > already more part of Setup PLT than Scribble.
 
 Oh, okay.
 
 Well, the important thing is that there is a defined interface
 somewhere. I think you're right that we want a well-defined interface
 to a lower-level -- but perhaps not as low-level as the actual file
 format on the disk. Lets leave a little wiggle room behind this
 interface for things to change and it to grow without affecting help
 desk.
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 07:10:58 -0700

 At Thu, 15 Nov 2007 08:07:35 -0600, "Robby Findler" wrote:
 > I think you're right that we want a well-defined interface
 > to a lower-level -- but perhaps not as low-level as the actual file
 > format on the disk.
 
 Right.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Thu, 15 Nov 2007 11:20:15 -0700

 At Thu, 15 Nov 2007 07:40:40 -0600, "Robby Findler" wrote:
 > On Nov 15, 2007 7:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > At Thu, 15 Nov 2007 07:26:35 -0600, "Robby Findler" wrote:
 > > > I believe that Help Desk just goes away, right? So, searching should
 > > > perhaps build an html page in, say, /tmp with pointers into the new
 > > > docs?
 > >
 > > I don't know whether it's better to do that or have searching pop up a
 > > window with links that open in a browser.
 > 
 > Lets start with the web page
 
 That turns out to be the simplest API for typesetting search results,
 since index-entry text is represented as a Scribble element.
 
 Below is an example using `setup/scribble-index'. While there are still
 some pieces to clean up and pieces to add, this should be enough to get
 Help Desk going.
 
 Also, there are no docs for `setup/scribble-indx', yet, but if you're
 eager to start, then I'll bet you can guess how it works.
 
 Matthew
 
 ----------------------------------------
 
 #lang scheme/base
 
 (require setup/scribble-index
          scribble/struct
          scribble/manual-struct
          scribble/decode
          scribble/basic
          scribble/manual
          (prefix-in scheme: scribble/scheme))
 
 (define (make-extra-content desc)
   ;; Use `desc' to provide more details on the link:
   (append
    (cond
     [(method-index-desc? desc) 
      (list " method of " 
            ;; This is bad. We need a more abstract way to take a
            ;; binding name and tag/source to create a Scheme link.
            (make-element
             "schemesymbol"
             (list (make-link-element
                    "schemevaluelink"
                    (list (symbol->string (exported-index-desc-name desc)))
                    (method-index-desc-class-tag desc)))))]
     [else null])
    (cond
     [(and (exported-index-desc? desc)
           (not (null? (exported-index-desc-from-libs desc))))
      (cons ", provided from "
            (cdr (apply append
                        (map (lambda (lib)
                               (list ", "
                                     (scheme:to-element lib)))
                             (exported-index-desc-from-libs desc)))))]
     [else null])))
            
 
 (let ([x (load-xref)])
   (xref-render
    x
    (decode `(,(title "Random Entries")
              ,(let* ([index (xref-index x)]
                      [len (length index)])
                 (apply itemize 
                        (build-list
                         10
                         (lambda (i)
                           (let ([entry (list-ref index (random len))])
                             (apply item 
                                    (make-link-element
                                     "indexlink"
                                     (entry-content entry)
                                     (entry-link-key entry))
                                    (make-extra-content 
                                     (entry-desc entry))))))))))
    "/tmp/random.html"))
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Mon, 19 Nov 2007 17:41:19 -0600

 How do we garbage collect the search result temporary html files?
 
 Robby
 
 On Nov 15, 2007 12:20 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Thu, 15 Nov 2007 07:40:40 -0600, "Robby Findler" wrote:
 > > On Nov 15, 2007 7:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > > At Thu, 15 Nov 2007 07:26:35 -0600, "Robby Findler" wrote:
 > > > > I believe that Help Desk just goes away, right? So, searching should
 > > > > perhaps build an html page in, say, /tmp with pointers into the new
 > > > > docs?
 > > >
 > > > I don't know whether it's better to do that or have searching pop up a
 > > > window with links that open in a browser.
 > >
 > > Lets start with the web page
 >
 > That turns out to be the simplest API for typesetting search results,
 > since index-entry text is represented as a Scribble element.
 >
 > Below is an example using `setup/scribble-index'. While there are still
 > some pieces to clean up and pieces to add, this should be enough to get
 > Help Desk going.
 >
 > Also, there are no docs for `setup/scribble-indx', yet, but if you're
 > eager to start, then I'll bet you can guess how it works.
 >
 > Matthew
 >
 > ----------------------------------------
 >
 > #lang scheme/base
 >
 > (require setup/scribble-index
 >          scribble/struct
 >          scribble/manual-struct
 >          scribble/decode
 >          scribble/basic
 >          scribble/manual
 >          (prefix-in scheme: scribble/scheme))
 >
 > (define (make-extra-content desc)
 >   ;; Use `desc' to provide more details on the link:
 >   (append
 >    (cond
 >     [(method-index-desc? desc)
 >      (list " method of "
 >            ;; This is bad. We need a more abstract way to take a
 >            ;; binding name and tag/source to create a Scheme link.
 >            (make-element
 >             "schemesymbol"
 >             (list (make-link-element
 >                    "schemevaluelink"
 >                    (list (symbol->string (exported-index-desc-name desc)))
 >                    (method-index-desc-class-tag desc)))))]
 >     [else null])
 >    (cond
 >     [(and (exported-index-desc? desc)
 >           (not (null? (exported-index-desc-from-libs desc))))
 >      (cons ", provided from "
 >            (cdr (apply append
 >                        (map (lambda (lib)
 >                               (list ", "
 >                                     (scheme:to-element lib)))
 >                             (exported-index-desc-from-libs desc)))))]
 >     [else null])))
 >
 >
 > (let ([x (load-xref)])
 >   (xref-render
 >    x
 >    (decode `(,(title "Random Entries")
 >              ,(let* ([index (xref-index x)]
 >                      [len (length index)])
 >                 (apply itemize
 >                        (build-list
 >                         10
 >                         (lambda (i)
 >                           (let ([entry (list-ref index (random len))])
 >                             (apply item
 >                                    (make-link-element
 >                                     "indexlink"
 >                                     (entry-content entry)
 >                                     (entry-link-key entry))
 >                                    (make-extra-content
 >                                     (entry-desc entry))))))))))
 >    "/tmp/random.html"))
 >
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Mon, 19 Nov 2007 16:46:41 -0700

 I suggest just cycling through N file names for a smallish N.
 
 Matthew
 
 At Mon, 19 Nov 2007 17:41:19 -0600, "Robby Findler" wrote:
 > How do we garbage collect the search result temporary html files?
 > 
 > Robby
 > 
 > On Nov 15, 2007 12:20 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > At Thu, 15 Nov 2007 07:40:40 -0600, "Robby Findler" wrote:
 > > > On Nov 15, 2007 7:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > > > At Thu, 15 Nov 2007 07:26:35 -0600, "Robby Findler" wrote:
 > > > > > I believe that Help Desk just goes away, right? So, searching should
 > > > > > perhaps build an html page in, say, /tmp with pointers into the new
 > > > > > docs?
 > > > >
 > > > > I don't know whether it's better to do that or have searching pop up a
 > > > > window with links that open in a browser.
 > > >
 > > > Lets start with the web page
 > >
 > > That turns out to be the simplest API for typesetting search results,
 > > since index-entry text is represented as a Scribble element.
 > >
 > > Below is an example using `setup/scribble-index'. While there are still
 > > some pieces to clean up and pieces to add, this should be enough to get
 > > Help Desk going.
 > >
 > > Also, there are no docs for `setup/scribble-indx', yet, but if you're
 > > eager to start, then I'll bet you can guess how it works.
 > >
 > > Matthew
 > >
 > > ----------------------------------------
 > >
 > > #lang scheme/base
 > >
 > > (require setup/scribble-index
 > >          scribble/struct
 > >          scribble/manual-struct
 > >          scribble/decode
 > >          scribble/basic
 > >          scribble/manual
 > >          (prefix-in scheme: scribble/scheme))
 > >
 > > (define (make-extra-content desc)
 > >   ;; Use `desc' to provide more details on the link:
 > >   (append
 > >    (cond
 > >     [(method-index-desc? desc)
 > >      (list " method of "
 > >            ;; This is bad. We need a more abstract way to take a
 > >            ;; binding name and tag/source to create a Scheme link.
 > >            (make-element
 > >             "schemesymbol"
 > >             (list (make-link-element
 > >                    "schemevaluelink"
 > >                    (list (symbol->string (exported-index-desc-name desc)))
 > >                    (method-index-desc-class-tag desc)))))]
 > >     [else null])
 > >    (cond
 > >     [(and (exported-index-desc? desc)
 > >           (not (null? (exported-index-desc-from-libs desc))))
 > >      (cons ", provided from "
 > >            (cdr (apply append
 > >                        (map (lambda (lib)
 > >                               (list ", "
 > >                                     (scheme:to-element lib)))
 > >                             (exported-index-desc-from-libs desc)))))]
 > >     [else null])))
 > >
 > >
 > > (let ([x (load-xref)])
 > >   (xref-render
 > >    x
 > >    (decode `(,(title "Random Entries")
 > >              ,(let* ([index (xref-index x)]
 > >                      [len (length index)])
 > >                 (apply itemize
 > >                        (build-list
 > >                         10
 > >                         (lambda (i)
 > >                           (let ([entry (list-ref index (random len))])
 > >                             (apply item
 > >                                    (make-link-element
 > >                                     "indexlink"
 > >                                     (entry-content entry)
 > >                                     (entry-link-key entry))
 > >                                    (make-extra-content
 > >                                     (entry-desc entry))))))))))
 > >    "/tmp/random.html"))
 > >
 > >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Mon, 19 Nov 2007 17:51:27 -0600

 Well, I started playing, but can't quite figure out how to match a
 search phrase against an entry. I guess that I want to use the
 link-key field, but then I get stuck.
 
 Any hints?
 
 Robby
 
 On Nov 15, 2007 12:20 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Thu, 15 Nov 2007 07:40:40 -0600, "Robby Findler" wrote:
 > > On Nov 15, 2007 7:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > > At Thu, 15 Nov 2007 07:26:35 -0600, "Robby Findler" wrote:
 > > > > I believe that Help Desk just goes away, right? So, searching should
 > > > > perhaps build an html page in, say, /tmp with pointers into the new
 > > > > docs?
 > > >
 > > > I don't know whether it's better to do that or have searching pop up a
 > > > window with links that open in a browser.
 > >
 > > Lets start with the web page
 >
 > That turns out to be the simplest API for typesetting search results,
 > since index-entry text is represented as a Scribble element.
 >
 > Below is an example using `setup/scribble-index'. While there are still
 > some pieces to clean up and pieces to add, this should be enough to get
 > Help Desk going.
 >
 > Also, there are no docs for `setup/scribble-indx', yet, but if you're
 > eager to start, then I'll bet you can guess how it works.
 >
 > Matthew
 >
 > ----------------------------------------
 >
 > #lang scheme/base
 >
 > (require setup/scribble-index
 >          scribble/struct
 >          scribble/manual-struct
 >          scribble/decode
 >          scribble/basic
 >          scribble/manual
 >          (prefix-in scheme: scribble/scheme))
 >
 > (define (make-extra-content desc)
 >   ;; Use `desc' to provide more details on the link:
 >   (append
 >    (cond
 >     [(method-index-desc? desc)
 >      (list " method of "
 >            ;; This is bad. We need a more abstract way to take a
 >            ;; binding name and tag/source to create a Scheme link.
 >            (make-element
 >             "schemesymbol"
 >             (list (make-link-element
 >                    "schemevaluelink"
 >                    (list (symbol->string (exported-index-desc-name desc)))
 >                    (method-index-desc-class-tag desc)))))]
 >     [else null])
 >    (cond
 >     [(and (exported-index-desc? desc)
 >           (not (null? (exported-index-desc-from-libs desc))))
 >      (cons ", provided from "
 >            (cdr (apply append
 >                        (map (lambda (lib)
 >                               (list ", "
 >                                     (scheme:to-element lib)))
 >                             (exported-index-desc-from-libs desc)))))]
 >     [else null])))
 >
 >
 > (let ([x (load-xref)])
 >   (xref-render
 >    x
 >    (decode `(,(title "Random Entries")
 >              ,(let* ([index (xref-index x)]
 >                      [len (length index)])
 >                 (apply itemize
 >                        (build-list
 >                         10
 >                         (lambda (i)
 >                           (let ([entry (list-ref index (random len))])
 >                             (apply item
 >                                    (make-link-element
 >                                     "indexlink"
 >                                     (entry-content entry)
 >                                     (entry-link-key entry))
 >                                    (make-extra-content
 >                                     (entry-desc entry))))))))))
 >    "/tmp/random.html"))
 >
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Mon, 19 Nov 2007 16:54:43 -0700

 The `words' field is the one with strings that you could match againt.
 The `key' is for building a hyperlink.
 
 Matthew
 
 At Mon, 19 Nov 2007 17:51:27 -0600, "Robby Findler" wrote:
 > Well, I started playing, but can't quite figure out how to match a
 > search phrase against an entry. I guess that I want to use the
 > link-key field, but then I get stuck.
 > 
 > Any hints?
 > 
 > Robby
 > 
 > On Nov 15, 2007 12:20 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > At Thu, 15 Nov 2007 07:40:40 -0600, "Robby Findler" wrote:
 > > > On Nov 15, 2007 7:37 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > > > At Thu, 15 Nov 2007 07:26:35 -0600, "Robby Findler" wrote:
 > > > > > I believe that Help Desk just goes away, right? So, searching should
 > > > > > perhaps build an html page in, say, /tmp with pointers into the new
 > > > > > docs?
 > > > >
 > > > > I don't know whether it's better to do that or have searching pop up a
 > > > > window with links that open in a browser.
 > > >
 > > > Lets start with the web page
 > >
 > > That turns out to be the simplest API for typesetting search results,
 > > since index-entry text is represented as a Scribble element.
 > >
 > > Below is an example using `setup/scribble-index'. While there are still
 > > some pieces to clean up and pieces to add, this should be enough to get
 > > Help Desk going.
 > >
 > > Also, there are no docs for `setup/scribble-indx', yet, but if you're
 > > eager to start, then I'll bet you can guess how it works.
 > >
 > > Matthew
 > >
 > > ----------------------------------------
 > >
 > > #lang scheme/base
 > >
 > > (require setup/scribble-index
 > >          scribble/struct
 > >          scribble/manual-struct
 > >          scribble/decode
 > >          scribble/basic
 > >          scribble/manual
 > >          (prefix-in scheme: scribble/scheme))
 > >
 > > (define (make-extra-content desc)
 > >   ;; Use `desc' to provide more details on the link:
 > >   (append
 > >    (cond
 > >     [(method-index-desc? desc)
 > >      (list " method of "
 > >            ;; This is bad. We need a more abstract way to take a
 > >            ;; binding name and tag/source to create a Scheme link.
 > >            (make-element
 > >             "schemesymbol"
 > >             (list (make-link-element
 > >                    "schemevaluelink"
 > >                    (list (symbol->string (exported-index-desc-name desc)))
 > >                    (method-index-desc-class-tag desc)))))]
 > >     [else null])
 > >    (cond
 > >     [(and (exported-index-desc? desc)
 > >           (not (null? (exported-index-desc-from-libs desc))))
 > >      (cons ", provided from "
 > >            (cdr (apply append
 > >                        (map (lambda (lib)
 > >                               (list ", "
 > >                                     (scheme:to-element lib)))
 > >                             (exported-index-desc-from-libs desc)))))]
 > >     [else null])))
 > >
 > >
 > > (let ([x (load-xref)])
 > >   (xref-render
 > >    x
 > >    (decode `(,(title "Random Entries")
 > >              ,(let* ([index (xref-index x)]
 > >                      [len (length index)])
 > >                 (apply itemize
 > >                        (build-list
 > >                         10
 > >                         (lambda (i)
 > >                           (let ([entry (list-ref index (random len))])
 > >                             (apply item
 > >                                    (make-link-element
 > >                                     "indexlink"
 > >                                     (entry-content entry)
 > >                                     (entry-link-key entry))
 > >                                    (make-extra-content
 > >                                     (entry-desc entry))))))))))
 > >    "/tmp/random.html"))
 > >
 > >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org,
        "Eli Barzilay" <eli@barzilay.org>
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Mon, 19 Nov 2007 18:13:37 -0600

 Okay, help-desk is now a command-line app that searches. I'll do
 better drs integration later.
 
 Robby
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Mon, 19 Nov 2007 18:10:29 -0600

 Looks like the code you sent depends on mred. Would it be possible to
 lift that dependency at some point?
 
 Robby
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Mon, 19 Nov 2007 17:13:27 -0700

 This is a multi-part message in MIME format.
 -----469877692393-----
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: 7bit
 
 At Mon, 19 Nov 2007 18:10:29 -0600, "Robby Findler" wrote:
 > Looks like the code you sent depends on mred.
 
 I don't think so. Double-checking, it seems to run fine in MzScheme.
 
 I've enclosed my current version, in case I sent the wrong thing
 before.
 
 Matthew
 
 -----469877692393-----
 Content-Type: text/plain;
 	name="random.ss"
 Content-Transfer-Encoding: quoted-printable
 Content-Disposition: attachment; 
 	filename="random.ss"
 
 #lang scheme/base
 
 (require setup/scribble-index
          scribble/struct
          scribble/manual-struct
          scribble/decode
          scribble/basic
          scribble/manual
          (prefix-in scheme: scribble/scheme))
 
 (define (make-extra-content desc)
   ;; Use `desc' to provide more details on the link:
   (append
    (cond
     [(method-index-desc? desc)=20
      (list " method of "=20
            ;; This is bad. We need a more abstract way to take a
            ;; binding name and tag/source to create a Scheme link.
            (make-element
             "schemesymbol"
             (list (make-link-element
                    "schemevaluelink"
                    (list (symbol->string (exported-index-desc-name desc)))
                    (method-index-desc-class-tag desc)))))]
     [else null])
    (cond
     [(and (exported-index-desc? desc)
           (not (null? (exported-index-desc-from-libs desc))))
      (cons ", provided from "
            (cdr (apply append
                        (map (lambda (lib)
                               (list ", "
                                     (scheme:to-element lib)))
                             (exported-index-desc-from-libs desc)))))]
     [else null])))
           =20
 
 (let ([x (load-xref)])
   (xref-render
    x
    (decode `(,(title "Random Entries")
              ,(let* ([index (xref-index x)]
                      [len (length index)])
                 (apply itemize=20
                        (build-list
                         10
                         (lambda (i)
                           (let ([entry (list-ref index (random len))])
                             (apply item=20
                                    (make-link-element
                                     "indexlink"
                                     (entry-content entry)
                                     (entry-link-key entry))
                                    (make-extra-content=20
                                     (entry-desc entry))))))))))
    "/tmp/random.html"))
 -----469877692393-------
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: clements@brinckerhoff.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9065: problem refreshing manuals
Date: Mon, 19 Nov 2007 22:44:30 -0600

 Whoops -- it is browser/external that depends on mred.
 
 Thanks,
 Robby
 
 On Nov 19, 2007 6:13 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Mon, 19 Nov 2007 18:10:29 -0600, "Robby Findler" wrote:
 > > Looks like the code you sent depends on mred.
 >
 > I don't think so. Double-checking, it seems to run fine in MzScheme.
 >
 > I've enclosed my current version, in case I sent the wrong thing
 > before.
 >
 > Matthew
 >

State changed from "open" to "closed" by samth at Tue, 06 May 2008 12:02:16 -0400
Reason>>> new doc system


