From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Aug 24 12:22:53 2012
Received: from mail-iy0-f172.google.com (mail-iy0-f172.google.com [209.85.210.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q7OGMp5E026353
	for <bugs@bugs.plt-scheme.org>; Fri, 24 Aug 2012 12:22:51 -0400
Message-Id: <201208241622.q7OGMkeC026347@champlain.ccs.neu.edu>
Date: Fri, 24 Aug 2012 12:22:46 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Refinement types allow contract system to blame typed module

>Number:         13059
>Category:       typed-scheme
>Synopsis:       Refinement types allow contract system to blame typed module
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Aug 24 12:24:01 -0400 2012
>Last-Modified:  Sat Jul 20 16:46:52 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
The following program shouldn't blame the typed module but it does.
>How-To-Repeat:
#lang racket/load

(module foo typed/racket

 (define (as? str)
   (and (string? str)
     (andmap (λ (x) (eq? #\a x)) (string->list str))))

 (declare-refinement as?)
 
 (: b (Refinement as?))
 (define b (let ((v (make-string 10 #\a))) (if (as? v) v (error 'bad))))

 (: c Any)
 (define c b)
 (provide b c))


(module bar racket
  (require 'foo)
  (string-set! c 4 #\c)
  (displayln b))

(require 'bar)
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: bugs <bugs@racket-lang.org>, endobson <eric.n.dobson@gmail.com>
Cc: bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13059: Refinement types allow contract system to
 blame typed module
Date: Fri, 24 Aug 2012 12:44:15 -0400

 --20cf3005dee0baca3f04c805af83
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I think the problem is that providing a mutable string as Any should not be
 allowed.
 
 Well, really the problem is the existence of mutable strings in the first
 place, but that's a separate issue.
 
 Sam
 On Aug 24, 2012 12:24 PM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13059
 >
 > Reported by Eric Dobson for release: 5.3
 >
 > *** Description:
 > The following program shouldn't blame the typed module but it does.
 >
 > *** How to repeat:
 > #lang racket/load
 >
 > (module foo typed/racket
 >
 >  (define (as? str)
 >    (and (string? str)
 >      (andmap (=CE=BB (x) (eq? #\a x)) (string->list str))))
 >
 >  (declare-refinement as?)
 >
 >  (: b (Refinement as?))
 >  (define b (let ((v (make-string 10 #\a))) (if (as? v) v (error 'bad))))
 >
 >  (: c Any)
 >  (define c b)
 >  (provide b c))
 >
 >
 > (module bar racket
 >   (require 'foo)
 >   (string-set! c 4 #\c)
 >   (displayln b))
 >
 > (require 'bar)
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0)
 > AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
 >
 >
 
 --20cf3005dee0baca3f04c805af83
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">I think the problem is that providing a mutable string as An=
 y should not be allowed.=C2=A0 </p>
 <p dir=3D"ltr">Well, really the problem is the existence of mutable strings=
  in the first place, but that&#39;s a separate issue.</p>
 <p dir=3D"ltr"> Sam</p>
 <div class=3D"gmail_quote">On Aug 24, 2012 12:24 PM,  &lt;<a href=3D"mailto=
 :eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br type=3D=
 "attribution"><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;=
 border-left:1px #ccc solid;padding-left:1ex">
 A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 059" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13059</a><br>
 <br>
 Reported by Eric Dobson for release: 5.3<br>
 <br>
 *** Description:<br>
 The following program shouldn&#39;t blame the typed module but it does.<br>
 <br>
 *** How to repeat:<br>
 #lang racket/load<br>
 <br>
 (module foo typed/racket<br>
 <br>
 =C2=A0(define (as? str)<br>
 =C2=A0 =C2=A0(and (string? str)<br>
 =C2=A0 =C2=A0 =C2=A0(andmap (=CE=BB (x) (eq? #\a x)) (string-&gt;list str))=
 ))<br>
 <br>
 =C2=A0(declare-refinement as?)<br>
 <br>
 =C2=A0(: b (Refinement as?))<br>
 =C2=A0(define b (let ((v (make-string 10 #\a))) (if (as? v) v (error &#39;b=
 ad))))<br>
 <br>
 =C2=A0(: c Any)<br>
 =C2=A0(define c b)<br>
 =C2=A0(provide b c))<br>
 <br>
 <br>
 (module bar racket<br>
 =C2=A0 (require &#39;foo)<br>
 =C2=A0 (string-set! c 4 #\c)<br>
 =C2=A0 (displayln b))<br>
 <br>
 (require &#39;bar)<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2=
  (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2<br>
 <br>
 </blockquote></div>
 
 --20cf3005dee0baca3f04c805af83--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13059: Refinement types allow contract system to
 blame typed module
Date: Fri, 24 Aug 2012 09:51:23 -0700

 It's not the Any, this also fails.
 
 #lang racket/load
 
 (module foo typed/racket
 
  (define (as? str)
    (and (string? str)
      (andmap (λ (x) (eq? #\a x)) (string->list str))))
 
  (declare-refinement as?)
 
  (: b (Refinement as?))
  (define b (let ((v (make-string 10 #\a))) (if (as? v) v (error 'bad))))
 
  (: c String)
  (define c (if (string? b) b (error 'bad)))
  (provide b c))
 
 
 (module bar racket
   (require 'foo)
   (string-set! c 4 #\c)
   (displayln b))
 
 (require 'bar)
 
 The issue is that refinement types on mutable values should not be
 protected by a flat contract, even within the typed world.
 
 Actually the entire concept of refinement types has issues, as any
 arbitrary function can be put as the predicate including (lambda (x)
 (< .5 (random))). I'm not sure what TR should do in that case.
 
 
 
 On Fri, Aug 24, 2012 at 9:44 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > I think the problem is that providing a mutable string as Any should not be
 > allowed.
 >
 > Well, really the problem is the existence of mutable strings in the first
 > place, but that's a separate issue.
 >
 > Sam
 >
 > On Aug 24, 2012 12:24 PM, <eric.n.dobson@gmail.com> wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13059
 >>
 >> Reported by Eric Dobson for release: 5.3
 >>
 >> *** Description:
 >> The following program shouldn't blame the typed module but it does.
 >>
 >> *** How to repeat:
 >> #lang racket/load
 >>
 >> (module foo typed/racket
 >>
 >>  (define (as? str)
 >>    (and (string? str)
 >>      (andmap (λ (x) (eq? #\a x)) (string->list str))))
 >>
 >>  (declare-refinement as?)
 >>
 >>  (: b (Refinement as?))
 >>  (define b (let ((v (make-string 10 #\a))) (if (as? v) v (error 'bad))))
 >>
 >>  (: c Any)
 >>  (define c b)
 >>  (provide b c))
 >>
 >>
 >> (module bar racket
 >>   (require 'foo)
 >>   (string-set! c 4 #\c)
 >>   (displayln b))
 >>
 >> (require 'bar)
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0)
 >> AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
 >>
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13059: Refinement types allow contract system to blame typed module
Date: Fri, 24 Aug 2012 13:22:45 -0400

 --Apple-Mail=_10222E2C-B534-480E-9908-19B403C94B83
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=utf-8
 
 
 As Sam said, mutable strings are the real problem so the "String" type =
 problem isn't a surprise.=20
 
 Your second point is more troubling. The idea is  to have a pure, total =
 predicate in a refinement type but we don't require proof for that =
 property. One possibility is to introduce a sub-type-system for pure =
 total functions (this is not subtyping but type constructors such as =
 -o-> for total function etc.)=20
 
 
 
 On Aug 24, 2012, at 12:51 PM, Eric Dobson wrote:
 
 > It's not the Any, this also fails.
 >=20
 > #lang racket/load
 >=20
 > (module foo typed/racket
 >=20
 > (define (as? str)
 >   (and (string? str)
 >     (andmap (=CE=BB (x) (eq? #\a x)) (string->list str))))
 >=20
 > (declare-refinement as?)
 >=20
 > (: b (Refinement as?))
 > (define b (let ((v (make-string 10 #\a))) (if (as? v) v (error =
 'bad))))
 >=20
 > (: c String)
 > (define c (if (string? b) b (error 'bad)))
 > (provide b c))
 >=20
 >=20
 > (module bar racket
 >  (require 'foo)
 >  (string-set! c 4 #\c)
 >  (displayln b))
 >=20
 > (require 'bar)
 >=20
 > The issue is that refinement types on mutable values should not be
 > protected by a flat contract, even within the typed world.
 >=20
 > Actually the entire concept of refinement types has issues, as any
 > arbitrary function can be put as the predicate including (lambda (x)
 > (< .5 (random))). I'm not sure what TR should do in that case.
 >=20
 >=20
 >=20
 > On Fri, Aug 24, 2012 at 9:44 AM, Sam Tobin-Hochstadt =
 <samth@ccs.neu.edu> wrote:
 >> I think the problem is that providing a mutable string as Any should =
 not be
 >> allowed.
 >>=20
 >> Well, really the problem is the existence of mutable strings in the =
 first
 >> place, but that's a separate issue.
 >>=20
 >> Sam
 >>=20
 >> On Aug 24, 2012 12:24 PM, <eric.n.dobson@gmail.com> wrote:
 >>>=20
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13059
 >>>=20
 >>> Reported by Eric Dobson for release: 5.3
 >>>=20
 >>> *** Description:
 >>> The following program shouldn't blame the typed module but it does.
 >>>=20
 >>> *** How to repeat:
 >>> #lang racket/load
 >>>=20
 >>> (module foo typed/racket
 >>>=20
 >>> (define (as? str)
 >>>   (and (string? str)
 >>>     (andmap (=CE=BB (x) (eq? #\a x)) (string->list str))))
 >>>=20
 >>> (declare-refinement as?)
 >>>=20
 >>> (: b (Refinement as?))
 >>> (define b (let ((v (make-string 10 #\a))) (if (as? v) v (error =
 'bad))))
 >>>=20
 >>> (: c Any)
 >>> (define c b)
 >>> (provide b c))
 >>>=20
 >>>=20
 >>> (module bar racket
 >>>  (require 'foo)
 >>>  (string-set! c 4 #\c)
 >>>  (displayln b))
 >>>=20
 >>> (require 'bar)
 >>>=20
 >>> *** Environment:
 >>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0)
 >>> AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 =
 Safari/537.2
 >>>=20
 >>=20
 
 
 --Apple-Mail=_10222E2C-B534-480E-9908-19B403C94B83
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgyNDE3MjI0NlowIwYJKoZI
 hvcNAQkEMRYEFHd6xY8BAXX5B2b/3AHC0Ij6fHpMMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAEpScdjIqwKNAxTByo0zy9OM7th2nOhIKCCIQjnhLnoXU6qtFTPYZZgpZjNpmE19+AB6
 LTX9d1WFsUX+H9E6zc96hZWlvF85MY4FQARGpq3B48Yk/JCv3YdI6ZEXDzDlcuIdPloxdUz448Ra
 EikbLq10GJflYNa0/fzJW0JBrey+7F/wA87c5nYNblIepPehQ5RejDNF+aksmWtaPjIQ87BFVOug
 A4TuMMdKSGMwZ38VHnTgISH9XtpaAjIMhg1CCKz9s7ZaqLLaVgO7ue9C6VkummUD9uApjEQ1Px1X
 3FxX+CBuwzI/eKMRHzP4jhC9dZFnO94uXnFoJMbFi00RsRwAAAAAAAA=
 
 --Apple-Mail=_10222E2C-B534-480E-9908-19B403C94B83--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13059: Refinement types allow contract system to
 blame typed module
Date: Fri, 24 Aug 2012 14:05:12 -0400

 On Fri, Aug 24, 2012 at 1:22 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > As Sam said, mutable strings are the real problem so the "String" type problem isn't a surprise.
 
 Right.  Maybe mutable strings should be coerced to immutable at
 contract boundaries, just to punish people who use mutable strings. :)
 
 > Your second point is more troubling. The idea is  to have a pure, total predicate in a refinement type but we don't require proof for that property. One possibility is to introduce a sub-type-system for pure total functions (this is not subtyping but type constructors such as -o-> for total function etc.)
 
 Yes, this is a "known" problem with the refinement system.  The lack
 of solution for it is one reason I haven't pushed more on refinement
 types.  Matthias' solution is probably the right one, and there are
 other places in TR where purity analysis would be useful.  Note that
 totality isn't required; TR is only ever about partial correctness.
 
 >
 >
 >
 > On Aug 24, 2012, at 12:51 PM, Eric Dobson wrote:
 >
 >> It's not the Any, this also fails.
 >>
 >> #lang racket/load
 >>
 >> (module foo typed/racket
 >>
 >> (define (as? str)
 >>   (and (string? str)
 >>     (andmap (λ (x) (eq? #\a x)) (string->list str))))
 >>
 >> (declare-refinement as?)
 >>
 >> (: b (Refinement as?))
 >> (define b (let ((v (make-string 10 #\a))) (if (as? v) v (error 'bad))))
 >>
 >> (: c String)
 >> (define c (if (string? b) b (error 'bad)))
 >> (provide b c))
 >>
 >>
 >> (module bar racket
 >>  (require 'foo)
 >>  (string-set! c 4 #\c)
 >>  (displayln b))
 >>
 >> (require 'bar)
 >>
 >> The issue is that refinement types on mutable values should not be
 >> protected by a flat contract, even within the typed world.
 >>
 >> Actually the entire concept of refinement types has issues, as any
 >> arbitrary function can be put as the predicate including (lambda (x)
 >> (< .5 (random))). I'm not sure what TR should do in that case.
 >>
 >>
 >>
 >> On Fri, Aug 24, 2012 at 9:44 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>> I think the problem is that providing a mutable string as Any should not be
 >>> allowed.
 >>>
 >>> Well, really the problem is the existence of mutable strings in the first
 >>> place, but that's a separate issue.
 >>>
 >>> Sam
 >>>
 >>> On Aug 24, 2012 12:24 PM, <eric.n.dobson@gmail.com> wrote:
 >>>>
 >>>> A new problem report is waiting at
 >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13059
 >>>>
 >>>> Reported by Eric Dobson for release: 5.3
 >>>>
 >>>> *** Description:
 >>>> The following program shouldn't blame the typed module but it does.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang racket/load
 >>>>
 >>>> (module foo typed/racket
 >>>>
 >>>> (define (as? str)
 >>>>   (and (string? str)
 >>>>     (andmap (λ (x) (eq? #\a x)) (string->list str))))
 >>>>
 >>>> (declare-refinement as?)
 >>>>
 >>>> (: b (Refinement as?))
 >>>> (define b (let ((v (make-string 10 #\a))) (if (as? v) v (error 'bad))))
 >>>>
 >>>> (: c Any)
 >>>> (define c b)
 >>>> (provide b c))
 >>>>
 >>>>
 >>>> (module bar racket
 >>>>  (require 'foo)
 >>>>  (string-set! c 4 #\c)
 >>>>  (displayln b))
 >>>>
 >>>> (require 'bar)
 >>>>
 >>>> *** Environment:
 >>>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0)
 >>>> AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
 >>>>
 >>>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 

