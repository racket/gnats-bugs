From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Oct 16 17:36:27 2012
Received: from mail-ie0-f172.google.com (mail-ie0-f172.google.com [209.85.223.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q9GLaOcN025344
	for <bugs@bugs.plt-scheme.org>; Tue, 16 Oct 2012 17:36:24 -0400
Message-Id: <201210162136.q9GLaK3K025333@champlain.ccs.neu.edu>
Date: Tue, 16 Oct 2012 17:36:20 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: The type of `map' can't be converted to a contract

>Number:         13192
>Category:       typed-scheme
>Synopsis:       The type of `map' can't be converted to a contract
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Oct 16 17:40:01 -0400 2012
>Last-Modified:  Tue Mar 26 01:28:52 -0400 2013
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1.1--2012-10-14(d9241d73/d)
>Environment:
unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 566597912
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/neil/.racket/5.3.1.1/collects"
 (non-existent-path))
("/home/neil/plt-math/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
One of the most basic array operations is `array-map', whose type is very similar to that of `map', which also can't be converted to a contract.
>How-To-Repeat:
#lang racket

(module defs typed/racket
  (provide my-map)
  (define my-map map))

(require 'defs)
my-map


Type Checker: The type of my-map cannot be converted to a contract in: my-map
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13192: The type of `map' can't be converted to a contract
Date: Tue, 16 Oct 2012 17:41:47 -0400

 This isn't a bug, I don't think.  I don't know how to write an
 appropriate contract for `map`, or polydots functions in general.
 
 On Tue, Oct 16, 2012 at 5:40 PM,  <neil.toronto@gmail.com> wrote:
 >
 > *** Description:
 > One of the most basic array operations is `array-map', whose type is very similar to that of `map', which also can't be converted to a contract.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (module defs typed/racket
 >   (provide my-map)
 >   (define my-map map))
 >
 > (require 'defs)
 > my-map
 >
 >
 > Type Checker: The type of my-map cannot be converted to a contract in: my-map
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13192: The type of `map' can't be converted
 to a contract
Date: Wed, 17 Oct 2012 17:31:50 -0600

 On 10/16/2012 03:41 PM, Sam Tobin-Hochstadt wrote:
 > This isn't a bug, I don't think.  I don't know how to write an
 > appropriate contract for `map`, or polydots functions in general.
 
 Next best thing would be if I could export a different map-like thing, 
 that has no polydots, to untyped code. I'm trying to do that with 
 `array-map', and failing. Here's how.
 
 Continue the analogy with `map'. Say I'm trying to define
 
    (: exportable-map
       (All (c a b) (case-> ((a -> c) (Pairof a (Listof a))
                                      -> (Pairof c (Listof c)))
                            ((a b * -> c) (Listof a) (Listof b) *
                                          -> (Listof c)))))
 
 It has the type of `map', but with "b ..." replaced by "b *". So of 
 course I try
 
    (define exportable-map map)
 
 which seems like it should work, but TR doesn't think there's a solution 
 to "t ..." = "b *".
 
 (This definition would be ideal. In the array situation, it would mean 
 the `array-map' used in typed code and the `array-map' used in untyped 
 code are identical. It's unlikely to matter, but I care anyway.)
 
 Next, I try
 
    (define exportable-map
      (case-lambda
        [(f lst)  (map f lst)]
        [(f lst . lsts)  (apply map f lst lsts)]))
 
 and get
 
    Type Checker: Bad arguments to polymorphic function in apply:
    Domains: (a b ... b -> c) (Listof a) (Listof b) ... b
             (a -> c) (Pairof a (Listof a))
    Arguments: (a b * -> c) (Listof a) (Listof (Listof b)) *
     in: (apply map f lst lsts)
 
 I can't find any way to say something like (inst map c a b *), though.
 
 Am I doomed to reimplement `array-map'?
 
 Neil ⊥
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13192: The type of `map' can't be converted to a contract
Date: Wed, 17 Oct 2012 20:53:12 -0400

 On Wed, Oct 17, 2012 at 7:31 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > On 10/16/2012 03:41 PM, Sam Tobin-Hochstadt wrote:
 >>
 >> This isn't a bug, I don't think.  I don't know how to write an
 >> appropriate contract for `map`, or polydots functions in general.
 >
 >
 > Next best thing would be if I could export a different map-like thing, that
 > has no polydots, to untyped code. I'm trying to do that with `array-map',
 > and failing. Here's how.
 
 The type of `map` enforces that the number of arguments expected by
 the procedure and the number of lists (or arrays) provided match up.
 None of the types/functions you've written below ensure that, so
 they're correctly rejected by the typechecker.
 
 > Continue the analogy with `map'. Say I'm trying to define
 >
 >   (: exportable-map
 >      (All (c a b) (case-> ((a -> c) (Pairof a (Listof a))
 >                                     -> (Pairof c (Listof c)))
 >                           ((a b * -> c) (Listof a) (Listof b) *
 >                                         -> (Listof c)))))
 >
 > It has the type of `map', but with "b ..." replaced by "b *". So of course I
 > try
 >
 >   (define exportable-map map)
 >
 > which seems like it should work, but TR doesn't think there's a solution to
 > "t ..." = "b *".
 >
 > (This definition would be ideal. In the array situation, it would mean the
 > `array-map' used in typed code and the `array-map' used in untyped code are
 > identical. It's unlikely to matter, but I care anyway.)
 >
 > Next, I try
 >
 >   (define exportable-map
 >     (case-lambda
 >       [(f lst)  (map f lst)]
 >       [(f lst . lsts)  (apply map f lst lsts)]))
 >
 > and get
 >
 >   Type Checker: Bad arguments to polymorphic function in apply:
 >   Domains: (a b ... b -> c) (Listof a) (Listof b) ... b
 >            (a -> c) (Pairof a (Listof a))
 >   Arguments: (a b * -> c) (Listof a) (Listof (Listof b)) *
 >    in: (apply map f lst lsts)
 >
 > I can't find any way to say something like (inst map c a b *), though.
 >
 > Am I doomed to reimplement `array-map'?
 >
 > Neil ⊥
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 

