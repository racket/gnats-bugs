From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Feb  8 03:28:01 2010
Received: from mail-yw0-f182.google.com (mail-yw0-f182.google.com [209.85.211.182])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o188Rxh0018793
	for <bugs@bugs.plt-scheme.org>; Mon, 8 Feb 2010 03:27:59 -0500
Message-Id: <201002080827.o188RvOp018785@champlain.ccs.neu.edu>
Date: Mon, 8 Feb 2010 03:27:57 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: TS: type names

>Number:         10745
>Category:       typed-scheme
>Synopsis:       TS: type names
>Class:          change-request
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Feb 08 03:32:01 -0500 2010
>Closed-Date:    Thu Aug 25 12:26:38 -0400 2011
>Last-Modified:  Thu Aug 25 12:26:38 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.4
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 144067776

Collections:
(("/home/eli/.plt-scheme/4.2.4/collects" "info-domain" "pl") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "framework" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "unstable" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
1. (U) should be `None' (in case it slips away).
2. `Pair' should be `Pairof'.
3. `Param' should be `Paramof'.
4. `Boxof' types should not be printed as `Box'.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Carl Eastlund <cce@plt-scheme.org>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10745: TS: type names
Date: Tue, 9 Feb 2010 12:22:21 -0500

 On Mon, Feb 8, 2010 at 3:32 AM,  <eli@barzilay.org> wrote:
 > Reported by Eli Barzilay for release: 4.2.4
 >
 > *** Description:
 > 1. (U) should be `None' (in case it slips away).
 > 2. `Pair' should be `Pairof'.
 > 3. `Param' should be `Paramof'.
 > 4. `Boxof' types should not be printed as `Box'.
 
 I can understand where this convention comes from (List vs Listof,
 Vector vs Vectorof), but I'm not sure every type constructor name
 should be slave to the heterogeneous vs homogeneous names of
 multiple-element collection types.  I don't see why every type needs
 an "of".  If there's no separate "Pair", "Param", or "Box", why do I
 need to type an "of" as if to distinguish them?  It seems like
 two-character boilerplate added to every type constructor.
 
 --Carl
From: Eli Barzilay <eli@barzilay.org>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10745: TS: type names
Date: Wed, 10 Feb 2010 01:31:13 -0500

 On Feb  9, Carl Eastlund wrote:
 > On Mon, Feb 8, 2010 at 3:32 AM,  <eli@barzilay.org> wrote:
 > > Reported by Eli Barzilay for release: 4.2.4
 > >
 > > *** Description:
 > > 1. (U) should be `None' (in case it slips away).
 > > 2. `Pair' should be `Pairof'.
 > > 3. `Param' should be `Paramof'.
 > > 4. `Boxof' types should not be printed as `Box'.
 > 
 > I can understand where this convention comes from (List vs Listof,
 > Vector vs Vectorof), but I'm not sure every type constructor name
 > should be slave to the heterogeneous vs homogeneous names of
 > multiple-element collection types.  I don't see why every type needs
 > an "of".  If there's no separate "Pair", "Param", or "Box", why do I
 > need to type an "of" as if to distinguish them?  It seems like
 > two-character boilerplate added to every type constructor.
 
 1. This is unrelated to points #1 and #4 above (the first was agreed
    on, the last is a mismatch between the binding and the way it
    prints).
 
 2. It's not *every* type, of course.
 
 3. The `*of' convention is not mine, and I'm not attached to it in any
    strong way.  (But it made sense to me, since it looks like ocaml,
    with `List' as something that doesn't exist there.)
 
 4. One minor point for it is the reduced chance of colliding with user
    code, which makes it in-line with things like `*-in', `*-out',
    `for/*', `in-*', and even `*?' and `*!'.
 
 5. A stronger point for it is that given that there are both `List'
    and `Listof', then there should be some consistent convention to
    distinguish them in the same way others are.
 
 6. And the bottom line is that what I'm complaining about in this bug
    is the inconsistency.  I don't really care if the convention
    changes to whatever.  I won't even mind if the syntax changes to
      (List X Y) -> (List X Y)
      (Listof X) -> (List X ..)
 
 7. So your reply looks like it should be filed separately, as a change
    request.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Carl Eastlund <cce@plt-scheme.org>, bugs@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10745: TS: type names
Date: Wed, 10 Feb 2010 06:11:40 -0600

 FWIW, the convention I know (and the one that the contract library
 follows) is that you treat the constructor as a mirror of the type. So
 (list 'a 'b 'c) creates a three element list, (List 'a 'b 'c) is the
 type of three element lists. Similarly, (Pair X Y) is the type of
 pairs of Xs and Ys. There is no need for Pairof unless you wanted to
 write (Pairof X) ot mean (Pairof X X) or something. There is no need
 for Boxof.
 
 At some point, we were going to try to make the names in the contract
 library and the names in TS match. Is there still no interest in that?
 
 Robby
 
 On Wed, Feb 10, 2010 at 12:31 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Feb =C2=A09, Carl Eastlund wrote:
 >> On Mon, Feb 8, 2010 at 3:32 AM, =C2=A0<eli@barzilay.org> wrote:
 >> > Reported by Eli Barzilay for release: 4.2.4
 >> >
 >> > *** Description:
 >> > 1. (U) should be `None' (in case it slips away).
 >> > 2. `Pair' should be `Pairof'.
 >> > 3. `Param' should be `Paramof'.
 >> > 4. `Boxof' types should not be printed as `Box'.
 >>
 >> I can understand where this convention comes from (List vs Listof,
 >> Vector vs Vectorof), but I'm not sure every type constructor name
 >> should be slave to the heterogeneous vs homogeneous names of
 >> multiple-element collection types. =C2=A0I don't see why every type need=
 s
 >> an "of". =C2=A0If there's no separate "Pair", "Param", or "Box", why do =
 I
 >> need to type an "of" as if to distinguish them? =C2=A0It seems like
 >> two-character boilerplate added to every type constructor.
 >
 > 1. This is unrelated to points #1 and #4 above (the first was agreed
 > =C2=A0 on, the last is a mismatch between the binding and the way it
 > =C2=A0 prints).
 >
 > 2. It's not *every* type, of course.
 >
 > 3. The `*of' convention is not mine, and I'm not attached to it in any
 > =C2=A0 strong way. =C2=A0(But it made sense to me, since it looks like oc=
 aml,
 > =C2=A0 with `List' as something that doesn't exist there.)
 >
 > 4. One minor point for it is the reduced chance of colliding with user
 > =C2=A0 code, which makes it in-line with things like `*-in', `*-out',
 > =C2=A0 `for/*', `in-*', and even `*?' and `*!'.
 >
 > 5. A stronger point for it is that given that there are both `List'
 > =C2=A0 and `Listof', then there should be some consistent convention to
 > =C2=A0 distinguish them in the same way others are.
 >
 > 6. And the bottom line is that what I'm complaining about in this bug
 > =C2=A0 is the inconsistency. =C2=A0I don't really care if the convention
 > =C2=A0 changes to whatever. =C2=A0I won't even mind if the syntax changes=
  to
 > =C2=A0 =C2=A0 (List X Y) -> (List X Y)
 > =C2=A0 =C2=A0 (Listof X) -> (List X ..)
 >
 > 7. So your reply looks like it should be filed separately, as a change
 > =C2=A0 request.
 >
 > --
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0((lambda (x) (x x)) (lambda (x) (x x)))=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0http=
 ://barzilay.org/ =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 Maze is Life!
 >
From: Carl Eastlund <cce@plt-scheme.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10745: TS: type names
Date: Wed, 10 Feb 2010 07:50:38 -0500

 On Wed, Feb 10, 2010 at 7:11 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > FWIW, the convention I know (and the one that the contract library
 > follows) is that you treat the constructor as a mirror of the type. So
 > (list 'a 'b 'c) creates a three element list, (List 'a 'b 'c) is the
 > type of three element lists. Similarly, (Pair X Y) is the type of
 > pairs of Xs and Ys. There is no need for Pairof unless you wanted to
 > write (Pairof X) ot mean (Pairof X X) or something. There is no need
 > for Boxof.
 >
 > At some point, we were going to try to make the names in the contract
 > library and the names in TS match. Is there still no interest in that?
 
 I would definitely prefer that types and contracts share a set of conventions.
 
 --Carl
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eli Barzilay <eli@barzilay.org>, Carl Eastlund <cce@plt-scheme.org>,
        bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10745: TS: type names
Date: Wed, 10 Feb 2010 08:01:50 -0500

 On Wed, Feb 10, 2010 at 7:11 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 >
 > At some point, we were going to try to make the names in the contract
 > library and the names in TS match. Is there still no interest in that?
 
 I took the use of 'of' originally from the contract library.  I'm
 definitely interested in sharing a convention with the contract
 library, although '/c' probably isn't right for Typed Scheme.  :)
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Eli Barzilay <eli@barzilay.org>, Carl Eastlund <cce@plt-scheme.org>,
        bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10745: TS: type names
Date: Wed, 10 Feb 2010 07:38:48 -0600

 IMO, the right starting point is this mapping:
 
   x*/c =3D> X*
   x* =3D> X*
 
 where the * means any chars, the x matches a character and the rules
 apply in order (so drop the /c if there is one).
 
 How far does that get us?
 
 Robby
 
 On Wednesday, February 10, 2010, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wr=
 ote:
 > On Wed, Feb 10, 2010 at 7:11 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >>
 >> At some point, we were going to try to make the names in the contract
 >> library and the names in TS match. Is there still no interest in that?
 >
 > I took the use of 'of' originally from the contract library. =C2=A0I'm
 > definitely interested in sharing a convention with the contract
 > library, although '/c' probably isn't right for Typed Scheme. =C2=A0:)
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eli Barzilay <eli@barzilay.org>, Carl Eastlund <cce@plt-scheme.org>,
        bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10745: TS: type names
Date: Wed, 10 Feb 2010 08:48:16 -0500

 On Wed, Feb 10, 2010 at 8:38 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > IMO, the right starting point is this mapping:
 >
 > =A0x*/c =3D> X*
 > =A0x* =3D> X*
 >
 > where the * means any chars, the x matches a character and the rules
 > apply in order (so drop the /c if there is one).
 
 I think that's the right mapping. But it doesn't answer the question
 of whether it should be `boxof/c' and `Boxof' (as Eli seems to prefer)
 or `box/c' and `Box' as the contract library currently has it, and
 Carl prefers.
 
 >
 > How far does that get us?
 >
 > Robby
 >
 > On Wednesday, February 10, 2010, Sam Tobin-Hochstadt <samth@ccs.neu.edu> =
 wrote:
 >> On Wed, Feb 10, 2010 at 7:11 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>>
 >>> At some point, we were going to try to make the names in the contract
 >>> library and the names in TS match. Is there still no interest in that?
 >>
 >> I took the use of 'of' originally from the contract library. =A0I'm
 >> definitely interested in sharing a convention with the contract
 >> library, although '/c' probably isn't right for Typed Scheme. =A0:)
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Eli Barzilay <eli@barzilay.org>, Carl Eastlund <cce@plt-scheme.org>,
        bugs@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10745: TS: type names
Date: Wed, 10 Feb 2010 08:34:07 -0600

 I happen to think the contract language has done the right thing
 onthis instance so it should be Box not Boxof.
 
 Robby
 
 On Wednesday, February 10, 2010, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wr=
 ote:
 > On Wed, Feb 10, 2010 at 8:38 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> IMO, the right starting point is this mapping:
 >>
 >> =C2=A0x*/c =3D> X*
 >> =C2=A0x* =3D> X*
 >>
 >> where the * means any chars, the x matches a character and the rules
 >> apply in order (so drop the /c if there is one).
 >
 > I think that's the right mapping. But it doesn't answer the question
 > of whether it should be `boxof/c' and `Boxof' (as Eli seems to prefer)
 > or `box/c' and `Box' as the contract library currently has it, and
 > Carl prefers.
 >
 >>
 >> How far does that get us?
 >>
 >> Robby
 >>
 >> On Wednesday, February 10, 2010, Sam Tobin-Hochstadt <samth@ccs.neu.edu>=
  wrote:
 >>> On Wed, Feb 10, 2010 at 7:11 AM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>>
 >>>> At some point, we were going to try to make the names in the contract
 >>>> library and the names in TS match. Is there still no interest in that?
 >>>
 >>> I took the use of 'of' originally from the contract library. =C2=A0I'm
 >>> definitely interested in sharing a convention with the contract
 >>> library, although '/c' probably isn't right for Typed Scheme. =C2=A0:)
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>>
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >


State changed from "open" to "closed" by samth at Thu, 25 Aug 2011 12:26:38 -0400
Reason>>> all fixed

