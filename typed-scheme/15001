From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Mar  8 15:59:53 2015
Received: from mail-ig0-f175.google.com (mail-ig0-f175.google.com [209.85.213.175])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t28JxqFn023778
	for <bugs@bugs.plt-scheme.org>; Sun, 8 Mar 2015 15:59:52 -0400
Message-Id: <201503081959.t28Jxl1x023770@winooski.ccs.neu.edu>
Date: Sun, 8 Mar 2015 15:59:47 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Unsound struct with polymorphic subtype

>Number:         15001
>Category:       typed-scheme
>Synopsis:       Unsound struct with polymorphic subtype
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Mar 08 16:00:01 -0400 2015
>Last-Modified:  Thu Jul 30 16:00:30 -0400 2015
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2251.0 Safari/537.36
>Description:
I thought I had filed this a while ago, but couldn't find it.

This should be a contract error and is not.
>How-To-Repeat:
#lang racket/load
 
(module a typed/racket
  (provide (all-defined-out))
  (struct foo ())
  (struct (A) bar foo ([v : (Boxof A)]))
 
  (: b (bar False))
  (define b (bar (box #f)))
 
  (: f (-> foo))
  (define (f) b)
 
  (: g (-> False))
  (define (g) (unbox (bar-v b))))
 
(require 'a)
(displayln (f))
(displayln (bar-v (f)))
(set-box! (bar-v (f)) #t)
(displayln (g))
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/15001: Unsound struct with polymorphic subtype
Date: Sun, 08 Mar 2015 21:43:35 +0000

 --001a11397e5e52c8560510cdcf5a
 Content-Type: text/plain; charset=UTF-8
 
 As I said on IRC, I think we generate the wrong contract for bar-v here.
 
 On Sun, Mar 8, 2015, 4:00 PM null <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=15001
 >
 > Reported by Eric Dobson for release: HEAD
 >
 > *** Description:
 > I thought I had filed this a while ago, but couldn't find it.
 >
 > This should be a contract error and is not.
 >
 > *** How to repeat:
 > #lang racket/load
 >
 > (module a typed/racket
 >   (provide (all-defined-out))
 >   (struct foo ())
 >   (struct (A) bar foo ([v : (Boxof A)]))
 >
 >   (: b (bar False))
 >   (define b (bar (box #f)))
 >
 >   (: f (-> foo))
 >   (define (f) b)
 >
 >   (: g (-> False))
 >   (define (g) (unbox (bar-v b))))
 >
 > (require 'a)
 > (displayln (f))
 > (displayln (bar-v (f)))
 > (set-box! (bar-v (f)) #t)
 > (displayln (g))
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5)
 > AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2251.0 Safari/537.36
 >
 >
 
 --001a11397e5e52c8560510cdcf5a
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">As I said on IRC, I think we generate the wrong contract for=
  bar-v here.</p>
 <br><div class=3D"gmail_quote">On Sun, Mar 8, 2015, 4:00 PM=C2=A0null &lt;<=
 a href=3D"mailto:eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; w=
 rote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;borde=
 r-left:1px #ccc solid;padding-left:1ex">A new problem report is waiting at<=
 br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D15=
 001" target=3D"_blank">http://bugs.racket-lang.org/<u></u>query/?cmd=3Dview=
 &amp;pr=3D15001</a><br>
 <br>
 Reported by Eric Dobson for release: HEAD<br>
 <br>
 *** Description:<br>
 I thought I had filed this a while ago, but couldn&#39;t find it.<br>
 <br>
 This should be a contract error and is not.<br>
 <br>
 *** How to repeat:<br>
 #lang racket/load<br>
 <br>
 (module a typed/racket<br>
 =C2=A0 (provide (all-defined-out))<br>
 =C2=A0 (struct foo ())<br>
 =C2=A0 (struct (A) bar foo ([v : (Boxof A)]))<br>
 <br>
 =C2=A0 (: b (bar False))<br>
 =C2=A0 (define b (bar (box #f)))<br>
 <br>
 =C2=A0 (: f (-&gt; foo))<br>
 =C2=A0 (define (f) b)<br>
 <br>
 =C2=A0 (: g (-&gt; False))<br>
 =C2=A0 (define (g) (unbox (bar-v b))))<br>
 <br>
 (require &#39;a)<br>
 (displayln (f))<br>
 (displayln (bar-v (f)))<br>
 (set-box! (bar-v (f)) #t)<br>
 (displayln (g))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.3=
 6 (KHTML, like Gecko) Chrome/41.0.2251.0 Safari/537.36<br>
 <br>
 </blockquote></div>
 
 --001a11397e5e52c8560510cdcf5a--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15001: Unsound struct with polymorphic subtype
Date: Sun, 8 Mar 2015 19:58:00 -0700

 --001a1147ad96b6ebe40510d233a7
 Content-Type: text/plain; charset=UTF-8
 
 Can you say what the contract on bar-v should be? The type is (All (A) (bar
 A) -> (Box A)). We could translate that to (parametric->/c (x) (-> bar?
 (boxof x)), but that prevents almost all useful uses of it. I don't see any
 valid contract that protects the values otherwise. I think the contract
 needs to be on the export from the typed world in the first place, and that
 would be something to the effect of we export this as a foo, so all the bar
 methods are protected like the parametric contract. This would be very
 similar to how we handle any/c.
 
 On Sun, Mar 8, 2015 at 2:43 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>
 wrote:
 
 > As I said on IRC, I think we generate the wrong contract for bar-v here.
 >
 > On Sun, Mar 8, 2015, 4:00 PM null <eric.n.dobson@gmail.com> wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=15001
 >>
 >> Reported by Eric Dobson for release: HEAD
 >>
 >> *** Description:
 >> I thought I had filed this a while ago, but couldn't find it.
 >>
 >> This should be a contract error and is not.
 >>
 >> *** How to repeat:
 >> #lang racket/load
 >>
 >> (module a typed/racket
 >>   (provide (all-defined-out))
 >>   (struct foo ())
 >>   (struct (A) bar foo ([v : (Boxof A)]))
 >>
 >>   (: b (bar False))
 >>   (define b (bar (box #f)))
 >>
 >>   (: f (-> foo))
 >>   (define (f) b)
 >>
 >>   (: g (-> False))
 >>   (define (g) (unbox (bar-v b))))
 >>
 >> (require 'a)
 >> (displayln (f))
 >> (displayln (bar-v (f)))
 >> (set-box! (bar-v (f)) #t)
 >> (displayln (g))
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5)
 >> AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2251.0 Safari/537.36
 >>
 >>
 
 --001a1147ad96b6ebe40510d233a7
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Can you say what the contract on bar-v should be? The type=
  is (All (A) (bar A) -&gt; (Box A)). We could translate that to (parametric=
 -&gt;/c (x) (-&gt; bar? (boxof x)), but that prevents almost all useful use=
 s of it. I don&#39;t see any valid contract that protects the values otherw=
 ise. I think the contract needs to be on the export from the typed world in=
  the first place, and that would be something to the effect of we export th=
 is as a foo, so all the bar methods are protected like the parametric contr=
 act. This would be very similar to how we handle any/c.</div><div class=3D"=
 gmail_extra"><br><div class=3D"gmail_quote">On Sun, Mar 8, 2015 at 2:43 PM,=
  Sam Tobin-Hochstadt <span dir=3D"ltr">&lt;<a href=3D"mailto:samth@cs.india=
 na.edu" target=3D"_blank">samth@cs.indiana.edu</a>&gt;</span> wrote:<br><bl=
 ockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #=
 ccc solid;padding-left:1ex"><p dir=3D"ltr">As I said on IRC, I think we gen=
 erate the wrong contract for bar-v here.</p><div class=3D"HOEnZb"><div clas=
 s=3D"h5">
 <br><div class=3D"gmail_quote">On Sun, Mar 8, 2015, 4:00 PM=C2=A0null &lt;<=
 a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@g=
 mail.com</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"margi=
 n:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">A new problem rep=
 ort is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D15=
 001" target=3D"_blank">http://bugs.racket-lang.org/<u></u>query/?cmd=3Dview=
 &amp;pr=3D15001</a><br>
 <br>
 Reported by Eric Dobson for release: HEAD<br>
 <br>
 *** Description:<br>
 I thought I had filed this a while ago, but couldn&#39;t find it.<br>
 <br>
 This should be a contract error and is not.<br>
 <br>
 *** How to repeat:<br>
 #lang racket/load<br>
 <br>
 (module a typed/racket<br>
 =C2=A0 (provide (all-defined-out))<br>
 =C2=A0 (struct foo ())<br>
 =C2=A0 (struct (A) bar foo ([v : (Boxof A)]))<br>
 <br>
 =C2=A0 (: b (bar False))<br>
 =C2=A0 (define b (bar (box #f)))<br>
 <br>
 =C2=A0 (: f (-&gt; foo))<br>
 =C2=A0 (define (f) b)<br>
 <br>
 =C2=A0 (: g (-&gt; False))<br>
 =C2=A0 (define (g) (unbox (bar-v b))))<br>
 <br>
 (require &#39;a)<br>
 (displayln (f))<br>
 (displayln (bar-v (f)))<br>
 (set-box! (bar-v (f)) #t)<br>
 (displayln (g))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.3=
 6 (KHTML, like Gecko) Chrome/41.0.2251.0 Safari/537.36<br>
 <br>
 </blockquote></div>
 </div></div></blockquote></div><br></div>
 
 --001a1147ad96b6ebe40510d233a7--
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15001: Unsound struct with polymorphic subtype
Date: Mon, 09 Mar 2015 21:49:59 +0000

 --001a11c1e31a0dc4d60510e20411
 Content-Type: text/plain; charset=UTF-8
 
 One thought would be that we should translate it to a contract that checks
 that the box only gets values it previously contained. That would fix this
 bug, while being more useful than the contract you mention.
 
 Sam
 
 On Sun, Mar 8, 2015 at 10:58 PM Eric Dobson <eric.n.dobson@gmail.com> wrote:
 
 > Can you say what the contract on bar-v should be? The type is (All (A)
 > (bar A) -> (Box A)). We could translate that to (parametric->/c (x) (->
 > bar? (boxof x)), but that prevents almost all useful uses of it. I don't
 > see any valid contract that protects the values otherwise. I think the
 > contract needs to be on the export from the typed world in the first place,
 > and that would be something to the effect of we export this as a foo, so
 > all the bar methods are protected like the parametric contract. This would
 > be very similar to how we handle any/c.
 >
 > On Sun, Mar 8, 2015 at 2:43 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>
 > wrote:
 >
 >> As I said on IRC, I think we generate the wrong contract for bar-v here.
 >>
 >> On Sun, Mar 8, 2015, 4:00 PM null <eric.n.dobson@gmail.com> wrote:
 >>
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=15001
 >>>
 >>> Reported by Eric Dobson for release: HEAD
 >>>
 >>> *** Description:
 >>> I thought I had filed this a while ago, but couldn't find it.
 >>>
 >>> This should be a contract error and is not.
 >>>
 >>> *** How to repeat:
 >>> #lang racket/load
 >>>
 >>> (module a typed/racket
 >>>   (provide (all-defined-out))
 >>>   (struct foo ())
 >>>   (struct (A) bar foo ([v : (Boxof A)]))
 >>>
 >>>   (: b (bar False))
 >>>   (define b (bar (box #f)))
 >>>
 >>>   (: f (-> foo))
 >>>   (define (f) b)
 >>>
 >>>   (: g (-> False))
 >>>   (define (g) (unbox (bar-v b))))
 >>>
 >>> (require 'a)
 >>> (displayln (f))
 >>> (displayln (bar-v (f)))
 >>> (set-box! (bar-v (f)) #t)
 >>> (displayln (g))
 >>>
 >>> *** Environment:
 >>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5)
 >>> AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2251.0 Safari/537.36
 >>>
 >>>
 >
 
 --001a11c1e31a0dc4d60510e20411
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">One thought would be that we should translate it to a cont=
 ract that checks that the box only gets values it previously contained. Tha=
 t would fix this bug, while being more useful than the contract you mention=
 .<div><br></div><div>Sam<br><br><div class=3D"gmail_quote">On Sun, Mar 8, 2=
 015 at 10:58 PM Eric Dobson &lt;<a href=3D"mailto:eric.n.dobson@gmail.com">=
 eric.n.dobson@gmail.com</a>&gt; wrote:<br><blockquote class=3D"gmail_quote"=
  style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><d=
 iv dir=3D"ltr">Can you say what the contract on bar-v should be? The type i=
 s (All (A) (bar A) -&gt; (Box A)). We could translate that to (parametric-&=
 gt;/c (x) (-&gt; bar? (boxof x)), but that prevents almost all useful uses =
 of it. I don&#39;t see any valid contract that protects the values otherwis=
 e. I think the contract needs to be on the export from the typed world in t=
 he first place, and that would be something to the effect of we export this=
  as a foo, so all the bar methods are protected like the parametric contrac=
 t. This would be very similar to how we handle any/c.</div><div class=3D"gm=
 ail_extra"><br><div class=3D"gmail_quote">On Sun, Mar 8, 2015 at 2:43 PM, S=
 am Tobin-Hochstadt <span dir=3D"ltr">&lt;<a href=3D"mailto:samth@cs.indiana=
 .edu" target=3D"_blank">samth@cs.indiana.edu</a>&gt;</span> wrote:<br><bloc=
 kquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #cc=
 c solid;padding-left:1ex"><p dir=3D"ltr">As I said on IRC, I think we gener=
 ate the wrong contract for bar-v here.</p><div><div>
 <br><div class=3D"gmail_quote">On Sun, Mar 8, 2015, 4:00 PM=C2=A0null &lt;<=
 a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@g=
 mail.com</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"margi=
 n:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">A new problem rep=
 ort is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D15=
 001" target=3D"_blank">http://bugs.racket-lang.org/<u></u>query/?cmd=3Dview=
 &amp;pr=3D15001</a><br>
 <br>
 Reported by Eric Dobson for release: HEAD<br>
 <br>
 *** Description:<br>
 I thought I had filed this a while ago, but couldn&#39;t find it.<br>
 <br>
 This should be a contract error and is not.<br>
 <br>
 *** How to repeat:<br>
 #lang racket/load<br>
 <br>
 (module a typed/racket<br>
 =C2=A0 (provide (all-defined-out))<br>
 =C2=A0 (struct foo ())<br>
 =C2=A0 (struct (A) bar foo ([v : (Boxof A)]))<br>
 <br>
 =C2=A0 (: b (bar False))<br>
 =C2=A0 (define b (bar (box #f)))<br>
 <br>
 =C2=A0 (: f (-&gt; foo))<br>
 =C2=A0 (define (f) b)<br>
 <br>
 =C2=A0 (: g (-&gt; False))<br>
 =C2=A0 (define (g) (unbox (bar-v b))))<br>
 <br>
 (require &#39;a)<br>
 (displayln (f))<br>
 (displayln (bar-v (f)))<br>
 (set-box! (bar-v (f)) #t)<br>
 (displayln (g))<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.3=
 6 (KHTML, like Gecko) Chrome/41.0.2251.0 Safari/537.36<br>
 <br>
 </blockquote></div>
 </div></div></blockquote></div><br></div>
 </blockquote></div></div></div>
 
 --001a11c1e31a0dc4d60510e20411--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15001: Unsound struct with polymorphic subtype
Date: Mon, 9 Mar 2015 16:52:50 -0500

 Would that leak?
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15001: Unsound struct with polymorphic subtype
Date: Mon, 09 Mar 2015 21:55:44 +0000

 --089e013d0c94a03e8c0510e21881
 Content-Type: text/plain; charset=UTF-8
 
 No, you'd use a weak table.
 
 On Mon, Mar 9, 2015, 5:52 PM Robby Findler <robby@eecs.northwestern.edu>
 wrote:
 
 > Would that leak?
 >
 
 --089e013d0c94a03e8c0510e21881
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">No, you&#39;d use a weak table.</p>
 <br><div class=3D"gmail_quote">On Mon, Mar 9, 2015, 5:52 PM=C2=A0Robby Find=
 ler &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwest=
 ern.edu</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin=
 :0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Would that leak?<b=
 r>
 </blockquote></div>
 
 --089e013d0c94a03e8c0510e21881--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15001: Unsound struct with polymorphic subtype
Date: Mon, 9 Mar 2015 16:58:45 -0500

 What if I try to put a chaperone of a previous value back into the box?
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15001: Unsound struct with polymorphic subtype
Date: Mon, 09 Mar 2015 22:03:36 +0000

 --089e01183882bc455b0510e234a6
 Content-Type: text/plain; charset=UTF-8
 
 That would depend on the key comparison used, but in some cases it might be
 rejected. That would be the case in Eric's proposed sound contract as well.
 
 On Mon, Mar 9, 2015, 5:58 PM Robby Findler <robby@eecs.northwestern.edu>
 wrote:
 
 > What if I try to put a chaperone of a previous value back into the box?
 >
 
 --089e01183882bc455b0510e234a6
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">That would depend on the key comparison used, but in some ca=
 ses it might be rejected. That would be the case in Eric&#39;s proposed sou=
 nd contract as well.<br>
 </p>
 <br><div class=3D"gmail_quote">On Mon, Mar 9, 2015, 5:58 PM=C2=A0Robby Find=
 ler &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwest=
 ern.edu</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin=
 :0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">What if I try to p=
 ut a chaperone of a previous value back into the box?<br>
 </blockquote></div>
 
 --089e01183882bc455b0510e234a6--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/15001: Unsound struct with polymorphic subtype
Date: Mon, 9 Mar 2015 22:47:10 -0700

 --001a113a62548fb96d0510e8aee7
 Content-Type: text/plain; charset=UTF-8
 
 Sam: I don't think that a contract that only allows the values that were in
 the box back in is the right thing.
 
 Imagine the following function
 (: new-box (All (A) A -> (Boxof A)))
 (define (new-box a) (box a))
 
 I believe that your change to the contract generation would generate a
 similar contract on this function. Which would make this (or any other
 typed mutable datastructure) unusable from untyped racket, as new values
 couldn't be inserted into the datastructure
 
 Also for another reason, imagine that the typed module also exported
 (: f2 (-> (bar Any)))
 (define (f2) (bar (box #f)))
 
 I believe that the contracts generated by TR should allow
 (set-box! (bar-v (f2)) #t)
 while disallowing
 (set-box! (bar-v (f)) #t)
 
 But the only difference between these two expressions is that the value
 went through the TR->R boundary at a different type 'foo' vs '(bar Any)'.
 Thus the difference has to be in how that type is converted into a contract.
 
 
 On Mon, Mar 9, 2015 at 3:03 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>
 wrote:
 
 > That would depend on the key comparison used, but in some cases it might
 > be rejected. That would be the case in Eric's proposed sound contract as
 > well.
 >
 > On Mon, Mar 9, 2015, 5:58 PM Robby Findler <robby@eecs.northwestern.edu>
 > wrote:
 >
 >> What if I try to put a chaperone of a previous value back into the box?
 >>
 >
 
 --001a113a62548fb96d0510e8aee7
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Sam: I don&#39;t think that a contract that only allows th=
 e values that were in the box back in is the right thing.<div><div><br clas=
 s=3D"">Imagine the following function</div><div>(: new-box (All (A) A -&gt;=
  (Boxof A)))</div><div>(define (new-box a) (box a))</div><div><br></div><di=
 v>I believe that your change to the contract generation would generate a si=
 milar contract on this function. Which would make this (or any other typed =
 mutable datastructure) unusable from untyped racket, as new values couldn&#=
 39;t be inserted into the datastructure</div></div><div><br></div><div>Also=
  for another reason, imagine that the typed module also exported</div><div>=
 (: f2 (-&gt; (bar Any)))</div><div>(define (f2) (bar (box #f)))</div><div><=
 br></div><div>I believe that the contracts generated by TR should allow</di=
 v><div><span style=3D"font-size:12.8000001907349px">(set-box! (bar-v (f2)) =
 #t)</span></div><div><span style=3D"font-size:12.8000001907349px">while dis=
 allowing</span></div><div><span style=3D"font-size:12.8000001907349px">(set=
 -box! (bar-v (f)) #t)</span></div><div><div><br></div><div>But the only dif=
 ference between these two expressions is that the value went through the TR=
 -&gt;R boundary at a different type &#39;foo&#39; vs &#39;(bar Any)&#39;. T=
 hus the difference has to be in how that type is converted into a contract.=
 </div><div><br></div></div></div><div class=3D"gmail_extra"><br><div class=
 =3D"gmail_quote">On Mon, Mar 9, 2015 at 3:03 PM, Sam Tobin-Hochstadt <span =
 dir=3D"ltr">&lt;<a href=3D"mailto:samth@cs.indiana.edu" target=3D"_blank">s=
 amth@cs.indiana.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quo=
 te" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"=
 ><p dir=3D"ltr">That would depend on the key comparison used, but in some c=
 ases it might be rejected. That would be the case in Eric&#39;s proposed so=
 und contract as well.<br>
 </p><div class=3D"HOEnZb"><div class=3D"h5">
 <br><div class=3D"gmail_quote">On Mon, Mar 9, 2015, 5:58 PM=C2=A0Robby Find=
 ler &lt;<a href=3D"mailto:robby@eecs.northwestern.edu" target=3D"_blank">ro=
 bby@eecs.northwestern.edu</a>&gt; wrote:<br><blockquote class=3D"gmail_quot=
 e" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">=
 What if I try to put a chaperone of a previous value back into the box?<br>
 </blockquote></div>
 </div></div></blockquote></div><br></div>
 
 --001a113a62548fb96d0510e8aee7--

