From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Aug  6 04:14:09 2012
Received: from mail-gg0-f172.google.com (mail-gg0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q768E1cK030759
	for <bugs@bugs.plt-scheme.org>; Mon, 6 Aug 2012 04:14:02 -0400
Message-Id: <201208060813.q768Dvm4030741@champlain.ccs.neu.edu>
Date: Mon, 6 Aug 2012 04:13:57 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR's tc-exprs enforces too strict of a type on expressions

>Number:         12974
>Category:       typed-scheme
>Synopsis:       TR's tc-exprs enforces too strict of a type on expressions
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Aug 06 04:16:01 -0400 2012
>Closed-Date:    Wed Jan 23 18:19:55 -0500 2013
>Last-Modified:  Wed Jan 23 18:19:55 -0500 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
Typed Racket enforces too strong of a type on expressions that are typechecked by tc-exprs and tc-exprs/check. These forms enforce that the no terminal expressions only return one value, the problem with this is that some expressions should be able to return more than one value there, because they will be ignored.

The other more subtle issue is that code has been built up around this fact. (let loop (...) ...) forms do not work so well when there is no expected type but they do work if there is. So the trivial solution to not set the expected type does not work, as it breaks existing code that looks good. This is especially true when the loop is just done for side effects, and so the fact that TR cannot infer the return type is uninmportant to the user.
>How-To-Repeat:
#lang typed/racket

; Expression 1 typechecks but shouldn't
#;
(define (f)
  (let loop ((i 5))
    (if (zero? i)
        (void)
        (loop (sub1 i))))
  2)

; Expression 2: doesn't typecheck shows why expression 1 shouldn't
#;
(let loop ((i 5))
  (if (zero? i)
      (void)
      (loop (sub1 i))))


; Expression 3: doesn't typecheck but should
#;
(define (g)
  (values 1 2)
  2)
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by samth@racket-lang.org at Wed, 23 Jan 2013 18:19:55 -0500
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5a43a5c730
