From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Mar 28 16:34:49 2013
Received: from mail-ob0-f172.google.com (mail-ob0-f172.google.com [209.85.214.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2SKYkft008523
	for <bugs@bugs.plt-scheme.org>; Thu, 28 Mar 2013 16:34:46 -0400
Message-Id: <201303282034.r2SKYhZR008517@champlain.ccs.neu.edu>
Date: Thu, 28 Mar 2013 16:34:43 -0400
From: norman@astro.gla.ac.uk
To: bugs@racket-lang.org
Subject: define-predicate produces unhelpful procedure in typed/racket/no-check

>Number:         13638
>Category:       typed-scheme
>Synopsis:       define-predicate produces unhelpful procedure in typed/racket/no-check
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Mar 28 16:36:01 -0400 2013
>Last-Modified:  Sun Mar 31 15:33:25 -0400 2013
>Originator:     Norman Gray
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.3
>Environment:
macosx "Darwin coricopat.home 12.3.0 Darwin Kernel Version 12.3.0: Sun Jan  6 22:37:10 PST 2013; root:xnu-2050.22.13~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 496321696
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (#<path:/tmp/audiotag/testing/templib> #<path:/checkouts/me/code/der-codec-typed-racket>); (links #:user? #f #:root? #t) = ()
Planet2 (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific:
 Package[*=auto]           Checksum    Source
 der-codec-typed-racket    #f          (link /checkouts/me/code/der-codec-typed-racket)



Collections:
("/Users/norman/Library/Racket/5.3.3/collects"
 (non-existent-path))
("/Data/LocalApplications/Racket/5.3.3/collects"
 ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Consider the attached program.  This works fine in typed/racket, but in typed/racket/no-check, the is-N? which results from the define-predicate call is defined as #f.  This of course fails when the predicate is called, and not all of these failures are as easy to locate as this one is.

If it's not possible to make the predicate meaningful, then defining it as (lambda (x) #t) would at least let programs work with /no-check.  Even defining the predicate as (lambda (x) (error "nope!")) would help locate the problem.
>How-To-Repeat:
#lang typed/racket

(define-type N Integer)
(define-predicate is-N? N)

(: f (N -> N))
(define (f n)
  (eprintf "it's a number? ~a~%" (if (is-N? n) "yes" "no"))
  (+ n 1))

(f 1)
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Norman Gray <norman@astro.gla.ac.uk>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13638: define-predicate produces unhelpful
 procedure in typed/racket/no-check
Date: Thu, 28 Mar 2013 16:40:22 -0400

 On Thu, Mar 28, 2013 at 4:36 PM,  <norman@astro.gla.ac.uk> wrote:
 >
 > If it's not possible to make the predicate meaningful, then defining it as (lambda (x) #t) would at least let programs work with /no-check.  Even defining the predicate as (lambda (x) (error "nope!")) would help locate the problem.
 
 It is indeed not possible to make the predicate meaningful -- there
 are no types in `/no-check`, so no way to tell what the type `N`
 means.
 
 Probably, `define-predicate` should just produce a function that
 always errors, as you suggest.  Making it into `(lambda (x) #t)` would
 just be wrong -- that's not the correct semantics for the predicate.
 
 Sam

