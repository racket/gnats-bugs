From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Sep 20 18:07:13 2012
Received: from mail-ie0-f172.google.com (mail-ie0-f172.google.com [209.85.223.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q8KM78QQ022810
	for <bugs@bugs.plt-scheme.org>; Thu, 20 Sep 2012 18:07:08 -0400
Message-Id: <201209202207.q8KM75oS022791@champlain.ccs.neu.edu>
Date: Thu, 20 Sep 2012 18:07:05 -0400
From: clements@racket-lang.org
To: bugs@racket-lang.org
Subject: missing type name in repl Positive-Integer-Not-Fixnum ?

>Number:         13131
>Category:       typed-scheme
>Synopsis:       missing type name in repl Positive-Integer-Not-Fixnum ?
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Sep 20 18:08:01 -0400 2012
>Last-Modified:  Tue Mar 26 01:08:04 -0400 2013
>Originator:     John Clements
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.23--2012-09-07(9a884c84/d)
>Environment:
macosx "Darwin pcp069280pcs.wireless.calpoly.edu 11.4.0 Darwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 562767992
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/clements/clements/collects"
 (".gitignore" "badger" "file-size-checker" "gradeserver" "info-domain" "jbc-gnucash" "mboxrd-read" "midi" "mnemisis" "projector" "shelly" "template-tester" "txomp" "web-utilities"))
("/Users/clements/clements/matthias/collects"
 ("info-domain" "web"))
("/Users/clements/Library/Racket/5.3.0.23/collects"
 (non-existent-path))
("/Users/clements/plt/collects"
 (".DS_Store" ".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests!
 " "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #f #t ((main) (test))))
>Description:
It appears that the type Positive-Integer-Not-Fixnum is not bound as a type name, though it appears as part of the Integer union.
>How-To-Repeat:
Evaluate this program:

#lang typed/racket

(: x Positive-Integer-Not-Fixnum)
(define x 3.0)

... see this error: Type Checker: Unbound type name Positive-Integer-Not-Fixnum in: Positive-Integer-Not-Fixnum

Then, evaluate 

34

just to get the REPL in shape, per some other bug, then evaluate

(:type Integer)

and see:

(U 0 1 Byte-Larger-Than-One Positive-Index-Not-Byte Positive-Fixnum-Not-Index Negative-Fixnum Positive-Integer-Not-Fixnum Negative-Integer-Not-Fixnum)
>Fix:
>Audit-Trail:
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: clements@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13131: missing type name in repl Positive-Integer-Not-Fixnum ?
Date: Fri, 21 Sep 2012 15:32:49 -0400

 This is intentional.
 
 Types like `Positive-Integer-Not-Fixnum' are used internally as building
 blocks for numeric types, but are not exported.
 
 IMO, these types wouldn't be very useful to users because
   - They're not used directly in the standard library (so using them
     wouldn't make types any more precise).
   - They don't correspond to very useful sets.
   - The set of numeric types TR provides is already somewhat overwhelming.
 
 These types aren't shown by TR's regular printer, so they're not usually
 a problem.
 
 However, as you point out, they still show up in some places, which is a
 problem. TR's printer is smart about unions that have names (such as
 `Integer') and displays them opaquely. `:type' exists specifically to
 peer inside these unions. Special-casing these internal types in `:type'
 (to avoid displaying them) could work, but it's not clear whether it's
 the right thing to do or not.
 
 Vincent
 
 
 At Thu, 20 Sep 2012 18:08:01 -0400,
 clements@racket-lang.org wrote:
 > 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13131
 > 
 > Reported by John Clements for release: 5.3.0.23--2012-09-07(9a884c84/d)
 > 
 > *** Description:
 > It appears that the type Positive-Integer-Not-Fixnum is not bound as a type name, though it appears as part of the Integer union.
 > 
 > *** How to repeat:
 > Evaluate this program:
 > 
 > #lang typed/racket
 > 
 > (: x Positive-Integer-Not-Fixnum)
 > (define x 3.0)
 > 
 > ... see this error: Type Checker: Unbound type name Positive-Integer-Not-Fixnum in: Positive-Integer-Not-Fixnum
 > 
 > Then, evaluate 
 > 
 > 34
 > 
 > just to get the REPL in shape, per some other bug, then evaluate
 > 
 > (:type Integer)
 > 
 > and see:
 > 
 > (U 0 1 Byte-Larger-Than-One Positive-Index-Not-Byte Positive-Fixnum-Not-Index Negative-Fixnum Positive-Integer-Not-Fixnum Negative-Integer-Not-Fixnum)
 > 
 > *** Environment:
 > macosx "Darwin pcp069280pcs.wireless.calpoly.edu 11.4.0 Darwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 562767992
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > 
 > 
 > Collections:
 > ("/Users/clements/clements/collects"
 >  (".gitignore" "badger" "file-size-checker" "gradeserver" "info-domain" "jbc-gnucash" "mboxrd-read" "midi" "mnemisis" "projector" "shelly" "template-tester" "txomp" "web-utilities"))
 > ("/Users/clements/clements/matthias/collects"
 >  ("info-domain" "web"))
 > ("/Users/clements/Library/Racket/5.3.0.23/collects"
 >  (non-existent-path))
 > ("/Users/clements/plt/collects"
 >  (".DS_Store" ".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "test
  s!
 >  " "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))
 > 
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #f #t ((main) (test))))
 > 
From: John Clements <clements@brinckerhoff.org>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: clements@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13131: missing type name in repl Positive-Integer-Not-Fixnum ?
Date: Fri, 21 Sep 2012 17:19:02 -0700

 --Apple-Mail=_A34C6722-0A59-4DB5-8F6F-DB974865E8ED
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=windows-1252
 
 
 On Sep 21, 2012, at 12:32 PM, Vincent St-Amour wrote:
 
 > This is intentional.
 >=20
 > Types like `Positive-Integer-Not-Fixnum' are used internally as =
 building
 > blocks for numeric types, but are not exported.
 >=20
 > IMO, these types wouldn't be very useful to users because
 >  - They're not used directly in the standard library (so using them
 >    wouldn't make types any more precise).
 >  - They don't correspond to very useful sets.
 >  - The set of numeric types TR provides is already somewhat =
 overwhelming.
 >=20
 > These types aren't shown by TR's regular printer, so they're not =
 usually
 > a problem.
 >=20
 > However, as you point out, they still show up in some places, which is =
 a
 > problem. TR's printer is smart about unions that have names (such as
 > `Integer') and displays them opaquely. `:type' exists specifically to
 > peer inside these unions. Special-casing these internal types in =
 `:type'
 > (to avoid displaying them) could work, but it's not clear whether it's
 > the right thing to do or not.
 
 Perhaps I should explain why I was referring to them explicitly; I was =
 trying to figure out whether Natural included inexact integers, so I =
 looked at (:type Natural). The only part I wasn't sure about was this =
 "Positive-Integer-Not-Fixnum", so I decided to check it directly by =
 evaluating
 
 (: 3.0 Positive-Integer-Not-Fixnum)
 
 =85 and got the given error.
 
 Basically, using TR involves a lot of exploration on my part, and I'm =
 frustrated when it appears to me that TR is making it harder to perform =
 that exploration. Your points all make a lot of sense, and I guess I =
 would say that if a type appears in the result of (:type ), then it =
 should be possible to figure out what's in that type.
 
 John
 
 
 --Apple-Mail=_A34C6722-0A59-4DB5-8F6F-DB974865E8ED
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIPEzCCBykw
 ggYRoAMCAQICAwPcUTANBgkqhkiG9w0BAQUFADCBjDELMAkGA1UEBhMCSUwxFjAUBgNVBAoTDVN0
 YXJ0Q29tIEx0ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFsIENlcnRpZmljYXRlIFNpZ25pbmcx
 ODA2BgNVBAMTL1N0YXJ0Q29tIENsYXNzIDEgUHJpbWFyeSBJbnRlcm1lZGlhdGUgQ2xpZW50IENB
 MB4XDTEyMDMwNzIxMjUzMVoXDTEzMDMwOTE2MTMxM1owaTEZMBcGA1UEDRMQRnZ2UldwVTBBWmJh
 N0xOdzEiMCAGA1UEAwwZY2xlbWVudHNAYnJpbmNrZXJob2ZmLm9yZzEoMCYGCSqGSIb3DQEJARYZ
 Y2xlbWVudHNAYnJpbmNrZXJob2ZmLm9yZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
 ANzG4UTqtJ5RQ05+IUzR2ozbby7hPkg/r7PJ9fho/kJFcb8AVlosUcczERcXgICBxNWi6m/4Ap8d
 TlRb986B5fFraMQnF7uFXsBuXMN8wqOIjNPhHW+Mxf9PRNparYjZMCT88hT5Rf+eXG3yUi2a+DC2
 rHClhtt4n9gt4K8vm8pSJRSmZZtuleXQKl0rnRpUHVemO8xDHr6cpn3d+npx/wFwjnGIAaCUSZqZ
 2FdjkrPOf24JbEWbzwq5XRms0nTmUTZFCdbgj0nyAQp2XFqgSVO3IFRvUtsxHO35958voZVjxPaK
 +nYnIs+jmvgVO5AuBvgXmr4QXUVmX+htehsZmCMCAwEAAaOCA7QwggOwMAkGA1UdEwQCMAAwCwYD
 VR0PBAQDAgSwMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDAdBgNVHQ4EFgQUu+N1Sv+R
 1NlG9RLqKsa0yT9tWyIwHwYDVR0jBBgwFoAUU3Ltkpzg2ssBXHx+ljVO8tS4UYIwJAYDVR0RBB0w
 G4EZY2xlbWVudHNAYnJpbmNrZXJob2ZmLm9yZzCCAiEGA1UdIASCAhgwggIUMIICEAYLKwYBBAGB
 tTcBAgIwggH/MC4GCCsGAQUFBwIBFiJodHRwOi8vd3d3LnN0YXJ0c3NsLmNvbS9wb2xpY3kucGRm
 MDQGCCsGAQUFBwIBFihodHRwOi8vd3d3LnN0YXJ0c3NsLmNvbS9pbnRlcm1lZGlhdGUucGRmMIH3
 BggrBgEFBQcCAjCB6jAnFiBTdGFydENvbSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTADAgEBGoG+
 VGhpcyBjZXJ0aWZpY2F0ZSB3YXMgaXNzdWVkIGFjY29yZGluZyB0byB0aGUgQ2xhc3MgMSBWYWxp
 ZGF0aW9uIHJlcXVpcmVtZW50cyBvZiB0aGUgU3RhcnRDb20gQ0EgcG9saWN5LCByZWxpYW5jZSBv
 bmx5IGZvciB0aGUgaW50ZW5kZWQgcHVycG9zZSBpbiBjb21wbGlhbmNlIG9mIHRoZSByZWx5aW5n
 IHBhcnR5IG9ibGlnYXRpb25zLjCBnAYIKwYBBQUHAgIwgY8wJxYgU3RhcnRDb20gQ2VydGlmaWNh
 dGlvbiBBdXRob3JpdHkwAwIBAhpkTGlhYmlsaXR5IGFuZCB3YXJyYW50aWVzIGFyZSBsaW1pdGVk
 ISBTZWUgc2VjdGlvbiAiTGVnYWwgYW5kIExpbWl0YXRpb25zIiBvZiB0aGUgU3RhcnRDb20gQ0Eg
 cG9saWN5LjA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vY3JsLnN0YXJ0c3NsLmNvbS9jcnR1MS1j
 cmwuY3JsMIGOBggrBgEFBQcBAQSBgTB/MDkGCCsGAQUFBzABhi1odHRwOi8vb2NzcC5zdGFydHNz
 bC5jb20vc3ViL2NsYXNzMS9jbGllbnQvY2EwQgYIKwYBBQUHMAKGNmh0dHA6Ly9haWEuc3RhcnRz
 c2wuY29tL2NlcnRzL3N1Yi5jbGFzczEuY2xpZW50LmNhLmNydDAjBgNVHRIEHDAahhhodHRwOi8v
 d3d3LnN0YXJ0c3NsLmNvbS8wDQYJKoZIhvcNAQEFBQADggEBAHQX1t8P9NCkIlYtpVIyMONdoKu9
 nQLEMyAQH4/c40i1Ke063TJFAd6LxJfK5VbVh9arJ8oE+it8IwGcp0hTjDUjpyZ4fFI04VOsQadY
 oq1sHVZDw4++WlQSq2LoSYicsGaZZI71O13Vas1ldQwrVyfiXNZt9leXitAK24s5wleXk1PAE1lt
 N9QzK8+g1VjGoagqC5ON3+u0szrlZEZKXd0Br5bYLNrIgKJZMR1tn2F+VhljPDRkSc8kxnEGPotB
 bNKjLfP1AuoCWCyjk9fbROIS0gcplPo3sa1jyJZ4Rh6UfIyy5ejNy2m9JBOnEwuMZjqatGSamwzY
 Tgop8qH6RScwggfiMIIFyqADAgECAgENMA0GCSqGSIb3DQEBBQUAMH0xCzAJBgNVBAYTAklMMRYw
 FAYDVQQKEw1TdGFydENvbSBMdGQuMSswKQYDVQQLEyJTZWN1cmUgRGlnaXRhbCBDZXJ0aWZpY2F0
 ZSBTaWduaW5nMSkwJwYDVQQDEyBTdGFydENvbSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0w
 NzEwMjQyMTAxNTRaFw0xMjEwMjIyMTAxNTRaMIGMMQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3Rh
 cnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzE4
 MDYGA1UEAxMvU3RhcnRDb20gQ2xhc3MgMSBQcmltYXJ5IEludGVybWVkaWF0ZSBDbGllbnQgQ0Ew
 ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDHCYPMzi3YGrEppC4Tq5a+ijKDjKaIQZZV
 R63UbxIP6uq/I0fhCu+cQhoUfE6ERKKnu8zPf1Jwuk0tsvVCk6U9b+0UjM0dLep3ZdE1gblK/1Fw
 YT5Pipsu2yOMluLqwvsuz9/9f1+1PKHG/FaR/wpbfuIqu54qzHDYeqiUfsYzoVflR80DAC7hmJ+S
 mZnNTWyUGHJbBpA8Q89lGxahNvuryGaC/o2/ceD2uYDX9U8Eg5DpIpGQdcbQeGarV04WgAUjjXX5
 r/2dabmtxWMZwhZna//jdiSyrrSMTGKkDiXm6/3/4ebfeZuCYKzN2P8O2F/Xe2AC/Y7zeEsnR7FO
 p+uXAgMBAAGjggNbMIIDVzAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBpjAdBgNVHQ4EFgQUU3Lt
 kpzg2ssBXHx+ljVO8tS4UYIwgagGA1UdIwSBoDCBnYAUTgvvGqRAW6UXaYcwyjRoQ9BBrvKhgYGk
 fzB9MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJl
 IERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
 dGlvbiBBdXRob3JpdHmCAQEwCQYDVR0SBAIwADA9BggrBgEFBQcBAQQxMC8wLQYIKwYBBQUHMAKG
 IWh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3Nmc2NhLmNydDBgBgNVHR8EWTBXMCygKqAohiZodHRw
 Oi8vY2VydC5zdGFydGNvbS5vcmcvc2ZzY2EtY3JsLmNybDAnoCWgI4YhaHR0cDovL2NybC5zdGFy
 dHNzbC5jb20vc2ZzY2EuY3JsMIIBXQYDVR0gBIIBVDCCAVAwggFMBgsrBgEEAYG1NwEBBDCCATsw
 LwYIKwYBBQUHAgEWI2h0dHA6Ly9jZXJ0LnN0YXJ0Y29tLm9yZy9wb2xpY3kucGRmMDUGCCsGAQUF
 BwIBFilodHRwOi8vY2VydC5zdGFydGNvbS5vcmcvaW50ZXJtZWRpYXRlLnBkZjCB0AYIKwYBBQUH
 AgIwgcMwJxYgU3RhcnQgQ29tbWVyY2lhbCAoU3RhcnRDb20pIEx0ZC4wAwIBARqBl0xpbWl0ZWQg
 TGlhYmlsaXR5LCByZWFkIHRoZSBzZWN0aW9uICpMZWdhbCBMaW1pdGF0aW9ucyogb2YgdGhlIFN0
 YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IFBvbGljeSBhdmFpbGFibGUgYXQgaHR0cDov
 L2NlcnQuc3RhcnRjb20ub3JnL3BvbGljeS5wZGYwEQYJYIZIAYb4QgEBBAQDAgAHMFAGCWCGSAGG
 +EIBDQRDFkFTdGFydENvbSBDbGFzcyAxIFByaW1hcnkgSW50ZXJtZWRpYXRlIEZyZWUgU1NMIEVt
 YWlsIENlcnRpZmljYXRlczANBgkqhkiG9w0BAQUFAAOCAgEAqprh4FuMzh0b/B3GLDAgoLeTJv3x
 ArbNESi/Kf/HMM//gf8FzwUUNOCglH6dfYuLQQ/dTtOyMb4JoiL3T7xiVKEAOmQ+t+b/xLOMa0m1
 8zoRqW4k6Glyoyvc7LMrdpgYk/lEh5nq8tPd9BoNmwiiheXphIVH/QelTgUkNzTC7IVpmYVsKuNO
 nxE1jJFZNNfqZZK/5Oto7C6PfOut11KmBQSLZarAz0b/mjghdBsYfHuhdO8vrOvD0g5g7dA4pkOA
 U2Ed4pSCowBSItyD/5aFwZ75ji6Yq7GCG3BpiyAP9st8h+inc0L+7kmrAMJaLMAmu6GZs5Xgsbzn
 0wUJvbD9h5jnnMM9UaZDcxl2uLB04quGUWM6NiKGabbxQc680PYbeQrQu+e6J4uqNAxzoa5RxkBA
 5a/3qlbgF9uJBekCqJswx5vQ9khJrs8UTMaIFzbEC5VGQziQH3/6KJ4DUP85OJEnCx/quShWA6w3
 18LDnba3M6a5V+KoNLhsVi/TSxf90UbBqwdRR/cOwuGkNJh16NvvhIqO26osMg64CbZsDVrEDr7u
 SMV40ieBJTo49Iyt77ECOhz/pyhowa2EUP6aKav+L/wXzAPB3LNqzujGR0K1pbyFWKvyYmdungJt
 ySWUMw+R5DqpA2bFIOE56pfWPLHZxOL+8+r79PLFX+y2V6ExggNvMIIDawIBATCBlDCBjDELMAkG
 A1UEBhMCSUwxFjAUBgNVBAoTDVN0YXJ0Q29tIEx0ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFs
 IENlcnRpZmljYXRlIFNpZ25pbmcxODA2BgNVBAMTL1N0YXJ0Q29tIENsYXNzIDEgUHJpbWFyeSBJ
 bnRlcm1lZGlhdGUgQ2xpZW50IENBAgMD3FEwCQYFKw4DAhoFAKCCAa8wGAYJKoZIhvcNAQkDMQsG
 CSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTIwOTIyMDAxOTAzWjAjBgkqhkiG9w0BCQQxFgQU
 F/RscxVi6jtllaCEJGTugGCzjoswgaUGCSsGAQQBgjcQBDGBlzCBlDCBjDELMAkGA1UEBhMCSUwx
 FjAUBgNVBAoTDVN0YXJ0Q29tIEx0ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFsIENlcnRpZmlj
 YXRlIFNpZ25pbmcxODA2BgNVBAMTL1N0YXJ0Q29tIENsYXNzIDEgUHJpbWFyeSBJbnRlcm1lZGlh
 dGUgQ2xpZW50IENBAgMD3FEwgacGCyqGSIb3DQEJEAILMYGXoIGUMIGMMQswCQYDVQQGEwJJTDEW
 MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNh
 dGUgU2lnbmluZzE4MDYGA1UEAxMvU3RhcnRDb20gQ2xhc3MgMSBQcmltYXJ5IEludGVybWVkaWF0
 ZSBDbGllbnQgQ0ECAwPcUTANBgkqhkiG9w0BAQEFAASCAQBn8UtAdnIEwPTbaDbwZjWJRAwOgTjn
 O/0s0CmnRT+Qz6R+6UgP/jHph+tkl0FuUT3RUFAvXKl194u4tM1QtkaTWacLWgCAldWOih0VnIoq
 GVwA5NL+KBZ6s7w4WxLDNLNH88gz5yTLCDPWs/fLBgIxHnLUHw4RBQKr63u8jsgPwnAsHLsOpm84
 vVcAThdIYvOY40W1dcHMn34zgyQFExRsgWevRLVYWFrO6nDCmyiZl8pj9bfQZQcCi6ci8FOvusve
 fJh32aL5qAty3JmfPPqAiL6VT7I+oh1Xd3kIHuRoXapwl+bm54dgcFPbPs+cVNhXQnV4gss2SzNI
 vcRsw2y6AAAAAAAA
 
 --Apple-Mail=_A34C6722-0A59-4DB5-8F6F-DB974865E8ED--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>, clements@racket-lang.org,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13131: missing type name in repl Positive-Integer-Not-Fixnum ?
Date: Sat, 22 Sep 2012 10:28:33 -0400

 I agree. Many others besides John will explore TR in this way and will be equally stumped. 
 
 John also re-states a principle of programming languages, from the time before we emphasized mathematical thinking and symmetries. See Tennet's book. 
 
 The fix isn't necessarily to expose this type w/o set equivalent but to think harder about the gap. 
 
 Thanks -- Matthias
 
 
 
 
 
 
 On Sep 21, 2012, at 8:19 PM, John Clements wrote:
 
 > 
 > On Sep 21, 2012, at 12:32 PM, Vincent St-Amour wrote:
 > 
 >> This is intentional.
 >> 
 >> Types like `Positive-Integer-Not-Fixnum' are used internally as building
 >> blocks for numeric types, but are not exported.
 >> 
 >> IMO, these types wouldn't be very useful to users because
 >> - They're not used directly in the standard library (so using them
 >>   wouldn't make types any more precise).
 >> - They don't correspond to very useful sets.
 >> - The set of numeric types TR provides is already somewhat overwhelming.
 >> 
 >> These types aren't shown by TR's regular printer, so they're not usually
 >> a problem.
 >> 
 >> However, as you point out, they still show up in some places, which is a
 >> problem. TR's printer is smart about unions that have names (such as
 >> `Integer') and displays them opaquely. `:type' exists specifically to
 >> peer inside these unions. Special-casing these internal types in `:type'
 >> (to avoid displaying them) could work, but it's not clear whether it's
 >> the right thing to do or not.
 > 
 > Perhaps I should explain why I was referring to them explicitly; I was trying to figure out whether Natural included inexact integers, so I looked at (:type Natural). The only part I wasn't sure about was this "Positive-Integer-Not-Fixnum", so I decided to check it directly by evaluating
 > 
 > (: 3.0 Positive-Integer-Not-Fixnum)
 > 
 > � and got the given error.
 > 
 > Basically, using TR involves a lot of exploration on my part, and I'm frustrated when it appears to me that TR is making it harder to perform that exploration. Your points all make a lot of sense, and I guess I would say that if a type appears in the result of (:type ), then it should be possible to figure out what's in that type.
 > 
 > John
 > 
 
 
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>, clements@racket-lang.org,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13131: missing type name in repl Positive-Integer-Not-Fixnum ?
Date: Sat, 22 Sep 2012 11:18:00 -0400

 At Fri, 21 Sep 2012 17:19:02 -0700,
 John Clements wrote:
 > Perhaps I should explain why I was referring to them explicitly; I was
 > trying to figure out whether Natural included inexact integers, so I
 > looked at (:type Natural). The only part I wasn't sure about was this
 > "Positive-Integer-Not-Fixnum", so I decided to check it directly by
 > evaluating
 > 
 > (: 3.0 Positive-Integer-Not-Fixnum)
 
 If `:type' had considered `Natural' to be opaque, and just printed it
 back, would you have tried this?
 
    (: x Natural)
    (define x 3.0)
 
 I believe this would have answered your question.
 
 This opaqueness would limit exploration, but if it leads you faster to
 the goal of that exploration, it's worth considering.
 
 Was there anything in the output of `(:type Natural)' that you found
 useful and would be lost by making some of the numeric types opaque?
 
 Vincent
From: John Clements <clements@brinckerhoff.org>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: clements@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13131: missing type name in repl Positive-Integer-Not-Fixnum ?
Date: Sun, 23 Sep 2012 23:47:48 -0700

 --Apple-Mail=_9DBD76F6-C378-47F2-93A9-D0E7C6E6554E
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Sep 22, 2012, at 8:18 AM, Vincent St-Amour wrote:
 
 > At Fri, 21 Sep 2012 17:19:02 -0700,
 > John Clements wrote:
 >> Perhaps I should explain why I was referring to them explicitly; I =
 was
 >> trying to figure out whether Natural included inexact integers, so I
 >> looked at (:type Natural). The only part I wasn't sure about was this
 >> "Positive-Integer-Not-Fixnum", so I decided to check it directly by
 >> evaluating
 >>=20
 >> (: 3.0 Positive-Integer-Not-Fixnum)
 >=20
 > If `:type' had considered `Natural' to be opaque, and just printed it
 > back, would you have tried this?
 >=20
 >   (: x Natural)
 >   (define x 3.0)
 >=20
 > I believe this would have answered your question.
 >=20
 > This opaqueness would limit exploration, but if it leads you faster to
 > the goal of that exploration, it's worth considering.
 >=20
 > Was there anything in the output of `(:type Natural)' that you found
 > useful and would be lost by making some of the numeric types opaque?
 
 Yes; I like the fact that the expansions show me the difference between =
 the types. I can implicitly determine the difference between Natural and =
 Index by looking at the differences in their expanded forms.  I realize =
 that the type system doesn't make guarantees that this sort of thing =
 works, but in the case of the numeric tower, it works and it's a bit of =
 a lifesaver.=20
 
 To take an example from another thread I started yesterday, I was trying =
 to figure out why exact->inexact didn't produce a Flonum, and discovered =
 the stray single-flonums in the expansion, and inferred that these were =
 caused by applying exact->inexact to single-flonums.  I don't think this =
 is an isolated example.
 
 I do see a lot of appeal in a system that hides its complexity in a =
 seamless and principled way, but it doesn't sound like the abbreviation =
 you're suggesting constitutes such a system.
 
 I don't mean to be a sourpuss: I think the idea is a good one. I just =
 don't think that we have the solution to this particular problem, yet.=20=
 
 
 John
 
 
 --Apple-Mail=_9DBD76F6-C378-47F2-93A9-D0E7C6E6554E
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIPEzCCBykw
 ggYRoAMCAQICAwPcUTANBgkqhkiG9w0BAQUFADCBjDELMAkGA1UEBhMCSUwxFjAUBgNVBAoTDVN0
 YXJ0Q29tIEx0ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFsIENlcnRpZmljYXRlIFNpZ25pbmcx
 ODA2BgNVBAMTL1N0YXJ0Q29tIENsYXNzIDEgUHJpbWFyeSBJbnRlcm1lZGlhdGUgQ2xpZW50IENB
 MB4XDTEyMDMwNzIxMjUzMVoXDTEzMDMwOTE2MTMxM1owaTEZMBcGA1UEDRMQRnZ2UldwVTBBWmJh
 N0xOdzEiMCAGA1UEAwwZY2xlbWVudHNAYnJpbmNrZXJob2ZmLm9yZzEoMCYGCSqGSIb3DQEJARYZ
 Y2xlbWVudHNAYnJpbmNrZXJob2ZmLm9yZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
 ANzG4UTqtJ5RQ05+IUzR2ozbby7hPkg/r7PJ9fho/kJFcb8AVlosUcczERcXgICBxNWi6m/4Ap8d
 TlRb986B5fFraMQnF7uFXsBuXMN8wqOIjNPhHW+Mxf9PRNparYjZMCT88hT5Rf+eXG3yUi2a+DC2
 rHClhtt4n9gt4K8vm8pSJRSmZZtuleXQKl0rnRpUHVemO8xDHr6cpn3d+npx/wFwjnGIAaCUSZqZ
 2FdjkrPOf24JbEWbzwq5XRms0nTmUTZFCdbgj0nyAQp2XFqgSVO3IFRvUtsxHO35958voZVjxPaK
 +nYnIs+jmvgVO5AuBvgXmr4QXUVmX+htehsZmCMCAwEAAaOCA7QwggOwMAkGA1UdEwQCMAAwCwYD
 VR0PBAQDAgSwMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDAdBgNVHQ4EFgQUu+N1Sv+R
 1NlG9RLqKsa0yT9tWyIwHwYDVR0jBBgwFoAUU3Ltkpzg2ssBXHx+ljVO8tS4UYIwJAYDVR0RBB0w
 G4EZY2xlbWVudHNAYnJpbmNrZXJob2ZmLm9yZzCCAiEGA1UdIASCAhgwggIUMIICEAYLKwYBBAGB
 tTcBAgIwggH/MC4GCCsGAQUFBwIBFiJodHRwOi8vd3d3LnN0YXJ0c3NsLmNvbS9wb2xpY3kucGRm
 MDQGCCsGAQUFBwIBFihodHRwOi8vd3d3LnN0YXJ0c3NsLmNvbS9pbnRlcm1lZGlhdGUucGRmMIH3
 BggrBgEFBQcCAjCB6jAnFiBTdGFydENvbSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTADAgEBGoG+
 VGhpcyBjZXJ0aWZpY2F0ZSB3YXMgaXNzdWVkIGFjY29yZGluZyB0byB0aGUgQ2xhc3MgMSBWYWxp
 ZGF0aW9uIHJlcXVpcmVtZW50cyBvZiB0aGUgU3RhcnRDb20gQ0EgcG9saWN5LCByZWxpYW5jZSBv
 bmx5IGZvciB0aGUgaW50ZW5kZWQgcHVycG9zZSBpbiBjb21wbGlhbmNlIG9mIHRoZSByZWx5aW5n
 IHBhcnR5IG9ibGlnYXRpb25zLjCBnAYIKwYBBQUHAgIwgY8wJxYgU3RhcnRDb20gQ2VydGlmaWNh
 dGlvbiBBdXRob3JpdHkwAwIBAhpkTGlhYmlsaXR5IGFuZCB3YXJyYW50aWVzIGFyZSBsaW1pdGVk
 ISBTZWUgc2VjdGlvbiAiTGVnYWwgYW5kIExpbWl0YXRpb25zIiBvZiB0aGUgU3RhcnRDb20gQ0Eg
 cG9saWN5LjA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vY3JsLnN0YXJ0c3NsLmNvbS9jcnR1MS1j
 cmwuY3JsMIGOBggrBgEFBQcBAQSBgTB/MDkGCCsGAQUFBzABhi1odHRwOi8vb2NzcC5zdGFydHNz
 bC5jb20vc3ViL2NsYXNzMS9jbGllbnQvY2EwQgYIKwYBBQUHMAKGNmh0dHA6Ly9haWEuc3RhcnRz
 c2wuY29tL2NlcnRzL3N1Yi5jbGFzczEuY2xpZW50LmNhLmNydDAjBgNVHRIEHDAahhhodHRwOi8v
 d3d3LnN0YXJ0c3NsLmNvbS8wDQYJKoZIhvcNAQEFBQADggEBAHQX1t8P9NCkIlYtpVIyMONdoKu9
 nQLEMyAQH4/c40i1Ke063TJFAd6LxJfK5VbVh9arJ8oE+it8IwGcp0hTjDUjpyZ4fFI04VOsQadY
 oq1sHVZDw4++WlQSq2LoSYicsGaZZI71O13Vas1ldQwrVyfiXNZt9leXitAK24s5wleXk1PAE1lt
 N9QzK8+g1VjGoagqC5ON3+u0szrlZEZKXd0Br5bYLNrIgKJZMR1tn2F+VhljPDRkSc8kxnEGPotB
 bNKjLfP1AuoCWCyjk9fbROIS0gcplPo3sa1jyJZ4Rh6UfIyy5ejNy2m9JBOnEwuMZjqatGSamwzY
 Tgop8qH6RScwggfiMIIFyqADAgECAgENMA0GCSqGSIb3DQEBBQUAMH0xCzAJBgNVBAYTAklMMRYw
 FAYDVQQKEw1TdGFydENvbSBMdGQuMSswKQYDVQQLEyJTZWN1cmUgRGlnaXRhbCBDZXJ0aWZpY2F0
 ZSBTaWduaW5nMSkwJwYDVQQDEyBTdGFydENvbSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0w
 NzEwMjQyMTAxNTRaFw0xMjEwMjIyMTAxNTRaMIGMMQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3Rh
 cnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzE4
 MDYGA1UEAxMvU3RhcnRDb20gQ2xhc3MgMSBQcmltYXJ5IEludGVybWVkaWF0ZSBDbGllbnQgQ0Ew
 ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDHCYPMzi3YGrEppC4Tq5a+ijKDjKaIQZZV
 R63UbxIP6uq/I0fhCu+cQhoUfE6ERKKnu8zPf1Jwuk0tsvVCk6U9b+0UjM0dLep3ZdE1gblK/1Fw
 YT5Pipsu2yOMluLqwvsuz9/9f1+1PKHG/FaR/wpbfuIqu54qzHDYeqiUfsYzoVflR80DAC7hmJ+S
 mZnNTWyUGHJbBpA8Q89lGxahNvuryGaC/o2/ceD2uYDX9U8Eg5DpIpGQdcbQeGarV04WgAUjjXX5
 r/2dabmtxWMZwhZna//jdiSyrrSMTGKkDiXm6/3/4ebfeZuCYKzN2P8O2F/Xe2AC/Y7zeEsnR7FO
 p+uXAgMBAAGjggNbMIIDVzAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBpjAdBgNVHQ4EFgQUU3Lt
 kpzg2ssBXHx+ljVO8tS4UYIwgagGA1UdIwSBoDCBnYAUTgvvGqRAW6UXaYcwyjRoQ9BBrvKhgYGk
 fzB9MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJl
 IERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
 dGlvbiBBdXRob3JpdHmCAQEwCQYDVR0SBAIwADA9BggrBgEFBQcBAQQxMC8wLQYIKwYBBQUHMAKG
 IWh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3Nmc2NhLmNydDBgBgNVHR8EWTBXMCygKqAohiZodHRw
 Oi8vY2VydC5zdGFydGNvbS5vcmcvc2ZzY2EtY3JsLmNybDAnoCWgI4YhaHR0cDovL2NybC5zdGFy
 dHNzbC5jb20vc2ZzY2EuY3JsMIIBXQYDVR0gBIIBVDCCAVAwggFMBgsrBgEEAYG1NwEBBDCCATsw
 LwYIKwYBBQUHAgEWI2h0dHA6Ly9jZXJ0LnN0YXJ0Y29tLm9yZy9wb2xpY3kucGRmMDUGCCsGAQUF
 BwIBFilodHRwOi8vY2VydC5zdGFydGNvbS5vcmcvaW50ZXJtZWRpYXRlLnBkZjCB0AYIKwYBBQUH
 AgIwgcMwJxYgU3RhcnQgQ29tbWVyY2lhbCAoU3RhcnRDb20pIEx0ZC4wAwIBARqBl0xpbWl0ZWQg
 TGlhYmlsaXR5LCByZWFkIHRoZSBzZWN0aW9uICpMZWdhbCBMaW1pdGF0aW9ucyogb2YgdGhlIFN0
 YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IFBvbGljeSBhdmFpbGFibGUgYXQgaHR0cDov
 L2NlcnQuc3RhcnRjb20ub3JnL3BvbGljeS5wZGYwEQYJYIZIAYb4QgEBBAQDAgAHMFAGCWCGSAGG
 +EIBDQRDFkFTdGFydENvbSBDbGFzcyAxIFByaW1hcnkgSW50ZXJtZWRpYXRlIEZyZWUgU1NMIEVt
 YWlsIENlcnRpZmljYXRlczANBgkqhkiG9w0BAQUFAAOCAgEAqprh4FuMzh0b/B3GLDAgoLeTJv3x
 ArbNESi/Kf/HMM//gf8FzwUUNOCglH6dfYuLQQ/dTtOyMb4JoiL3T7xiVKEAOmQ+t+b/xLOMa0m1
 8zoRqW4k6Glyoyvc7LMrdpgYk/lEh5nq8tPd9BoNmwiiheXphIVH/QelTgUkNzTC7IVpmYVsKuNO
 nxE1jJFZNNfqZZK/5Oto7C6PfOut11KmBQSLZarAz0b/mjghdBsYfHuhdO8vrOvD0g5g7dA4pkOA
 U2Ed4pSCowBSItyD/5aFwZ75ji6Yq7GCG3BpiyAP9st8h+inc0L+7kmrAMJaLMAmu6GZs5Xgsbzn
 0wUJvbD9h5jnnMM9UaZDcxl2uLB04quGUWM6NiKGabbxQc680PYbeQrQu+e6J4uqNAxzoa5RxkBA
 5a/3qlbgF9uJBekCqJswx5vQ9khJrs8UTMaIFzbEC5VGQziQH3/6KJ4DUP85OJEnCx/quShWA6w3
 18LDnba3M6a5V+KoNLhsVi/TSxf90UbBqwdRR/cOwuGkNJh16NvvhIqO26osMg64CbZsDVrEDr7u
 SMV40ieBJTo49Iyt77ECOhz/pyhowa2EUP6aKav+L/wXzAPB3LNqzujGR0K1pbyFWKvyYmdungJt
 ySWUMw+R5DqpA2bFIOE56pfWPLHZxOL+8+r79PLFX+y2V6ExggNvMIIDawIBATCBlDCBjDELMAkG
 A1UEBhMCSUwxFjAUBgNVBAoTDVN0YXJ0Q29tIEx0ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFs
 IENlcnRpZmljYXRlIFNpZ25pbmcxODA2BgNVBAMTL1N0YXJ0Q29tIENsYXNzIDEgUHJpbWFyeSBJ
 bnRlcm1lZGlhdGUgQ2xpZW50IENBAgMD3FEwCQYFKw4DAhoFAKCCAa8wGAYJKoZIhvcNAQkDMQsG
 CSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTIwOTI0MDY0NzQ5WjAjBgkqhkiG9w0BCQQxFgQU
 stAdcHQvWPnzQXNp+xinXPZG8p8wgaUGCSsGAQQBgjcQBDGBlzCBlDCBjDELMAkGA1UEBhMCSUwx
 FjAUBgNVBAoTDVN0YXJ0Q29tIEx0ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFsIENlcnRpZmlj
 YXRlIFNpZ25pbmcxODA2BgNVBAMTL1N0YXJ0Q29tIENsYXNzIDEgUHJpbWFyeSBJbnRlcm1lZGlh
 dGUgQ2xpZW50IENBAgMD3FEwgacGCyqGSIb3DQEJEAILMYGXoIGUMIGMMQswCQYDVQQGEwJJTDEW
 MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNh
 dGUgU2lnbmluZzE4MDYGA1UEAxMvU3RhcnRDb20gQ2xhc3MgMSBQcmltYXJ5IEludGVybWVkaWF0
 ZSBDbGllbnQgQ0ECAwPcUTANBgkqhkiG9w0BAQEFAASCAQCCgaEz0vdclIPjhqWc0kJ0lKjWzVPe
 QH/SXLRGgDFPFyh7SWEXR8cGPFMOmtPK3lonUU23NGn0+py2vyeDXtkNfk86N+tDE4ZmoNMv/ZZL
 +6FQ7/j4jaWGNsTta878lJcCNyqq/neB/F6N7aVslNZcqVF8gjN3ZEJzetNOEN5wal5ol7pgrjC+
 p/0G1ztyW2VcSamNrLcuzEGhxbqr0/RvqkXvVjrrryLiF0zluZXaDSEA91tzcsQ2lcORuZ5JDJgg
 2ujWiotjsQYIqa8vc58mbB2CJrPmPKz3YRQxq4h6z2Pg6pheciWpncbXBDjPzPT6V5QI4czX+zAP
 MqudtbbqAAAAAAAA
 
 --Apple-Mail=_9DBD76F6-C378-47F2-93A9-D0E7C6E6554E--

