From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Sep 18 22:58:29 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.237])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m8J2wJDZ002956
	for <bugs@bugs.plt-scheme.org>; Thu, 18 Sep 2008 22:58:19 -0400
Message-Id: <200809190258.m8J2wGhe002949@champlain.ccs.neu.edu>
Date: Thu, 18 Sep 2008 22:58:16 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: Types syntax

>Number:         9772
>Category:       typed-scheme
>Synopsis:       Types syntax
>Class:          change-request
>Responsible:    samth
>Notify-List:    matthias@ccs.neu.edu,eli@barzilay.org
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Sep 18 23:00:01 -0400 2008
>Closed-Date:    Wed Jan 06 12:00:10 -0500 2010
>Last-Modified:  Wed Jan 06 12:00:10 -0500 2010
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.0.3-svn18sep2008
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 253673120

Collections:
(("/home/eli/.plt-scheme/4.1.0.3/collects" non-existent-path) ("/home/scheme/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "honu" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n"))
>Description:
`...' makes more sense as a token for zero-or-more args
than `*'.  The former is usually related to syntax
specification, and the latter as a kleene-star in regexps.
Since type checking is syntactic, I'd rather see `...'
there.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: "Sam TH" <samth@plt-scheme.org>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9772: Types syntax
Date: Sat, 20 Sep 2008 08:09:17 -0400

 ... is used for non-uniform varargs, * is for uniform.
 
 sam th
 
 On Thu, Sep 18, 2008 at 11:00 PM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=9772
 >
 > Reported by Eli Barzilay for release: 4.1.0.3-svn18sep2008
 >
 > *** Description:
 > `...' makes more sense as a token for zero-or-more args
 > than `*'.  The former is usually related to syntax
 > specification, and the latter as a kleene-star in regexps.
 > Since type checking is syntactic, I'd rather see `...'
 > there.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
 > Human Language: english
 > (current-memory-use) 253673120
 >
 > Collections:
 > (("/home/eli/.plt-scheme/4.1.0.3/collects" non-existent-path) ("/home/scheme/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "honu" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n"))
 >
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: "Sam TH" <samth@plt-scheme.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9772: Types syntax
Date: Sat, 20 Sep 2008 09:39:41 -0400

 What I hoped for is that it possible to use `...' for both, so if you
 use `...' after a type variable that is specified in the `All' with
 `...' then it does the same thing it does now, and otherwise it does
 what `*' is doing.
 
 
 On Sep 20, Sam TH wrote:
 > ... is used for non-uniform varargs, * is for uniform.
 > 
 > sam th
 > 
 > On Thu, Sep 18, 2008 at 11:00 PM,  <eli@barzilay.org> wrote:
 > > A new problem report is waiting at
 > >  http://bugs.plt-scheme.org/query/?cmd=view&pr=9772
 > >
 > > Reported by Eli Barzilay for release: 4.1.0.3-svn18sep2008
 > >
 > > *** Description:
 > > `...' makes more sense as a token for zero-or-more args
 > > than `*'.  The former is usually related to syntax
 > > specification, and the latter as a kleene-star in regexps.
 > > Since type checking is syntactic, I'd rather see `...'
 > > there.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "Sam TH" <samth@plt-scheme.org>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9772: Types syntax
Date: Sat, 20 Sep 2008 10:12:59 -0400

 Why do you love syntactic overloading?
 
 On Sep 20, 2008, at 9:39 AM, Eli Barzilay wrote:
 
 > What I hoped for is that it possible to use `...' for both, so if you
 > use `...' after a type variable that is specified in the `All' with
 > `...' then it does the same thing it does now, and otherwise it does
 > what `*' is doing.
 >
 >
 > On Sep 20, Sam TH wrote:
 >> ... is used for non-uniform varargs, * is for uniform.
 >>
 >> sam th
 >>
 >> On Thu, Sep 18, 2008 at 11:00 PM,  <eli@barzilay.org> wrote:
 >>> A new problem report is waiting at
 >>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9772
 >>>
 >>> Reported by Eli Barzilay for release: 4.1.0.3-svn18sep2008
 >>>
 >>> *** Description:
 >>> `...' makes more sense as a token for zero-or-more args
 >>> than `*'.  The former is usually related to syntax
 >>> specification, and the latter as a kleene-star in regexps.
 >>> Since type checking is syntactic, I'd rather see `...'
 >>> there.
 >
 > --  
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli  
 > Barzilay:
 >                   http://www.barzilay.org/                 Maze is  
 > Life!
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: "Sam TH" <samth@plt-scheme.org>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9772: Types syntax
Date: Sat, 20 Sep 2008 10:18:21 -0400

 On Sep 20, Matthias Felleisen wrote:
 > 
 > Why do you love syntactic overloading?
 
 I don't.  My reason below: `...' is much more common in Scheme to
 represent zero or more.  More concretely, if you write htdp-style type
 contracts then my bet is that you did use `...' but never `*'.  For
 example, the htdp-langs docs have:
 
   string=? : (string string ... -> boolean)
 
 In other words, the overloading that I want in this case is one that
 is already in use.
 
 
 
 > On Sep 20, 2008, at 9:39 AM, Eli Barzilay wrote:
 > 
 > > What I hoped for is that it possible to use `...' for both, so if you
 > > use `...' after a type variable that is specified in the `All' with
 > > `...' then it does the same thing it does now, and otherwise it does
 > > what `*' is doing.
 > >
 > >
 > > On Sep 20, Sam TH wrote:
 > >> ... is used for non-uniform varargs, * is for uniform.
 > >>
 > >> sam th
 > >>
 > >> On Thu, Sep 18, 2008 at 11:00 PM,  <eli@barzilay.org> wrote:
 > >>> A new problem report is waiting at
 > >>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9772
 > >>>
 > >>> Reported by Eli Barzilay for release: 4.1.0.3-svn18sep2008
 > >>>
 > >>> *** Description:
 > >>> `...' makes more sense as a token for zero-or-more args
 > >>> than `*'.  The former is usually related to syntax
 > >>> specification, and the latter as a kleene-star in regexps.
 > >>> Since type checking is syntactic, I'd rather see `...'
 > >>> there.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>, "Sam TH" <samth@plt-scheme.org>,
        bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9772: Types syntax
Date: Sat, 20 Sep 2008 10:20:43 -0400

 On Sep 20, Eli Barzilay wrote:
 > On Sep 20, Matthias Felleisen wrote:
 > > 
 > > Why do you love syntactic overloading?
 > 
 > I don't.  [...]
 
 And one more comment: if my choice is between overloading `*' for
 types and multiplication or overloading `...' for "syntax stuff", then
 I strongly prefer the latter.
 
 (And yes, I know that they're in different `namespaces' -- I consider
 this a minor wart, and one that is likely to go away in the future
 with some kind of type reflection.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "Sam TH" <samth@plt-scheme.org>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9772: Types syntax
Date: Sat, 20 Sep 2008 10:21:18 -0400

 You're right. Sam, if it's easy let's do it.
 
 On Sep 20, 2008, at 10:18 AM, Eli Barzilay wrote:
 
 > On Sep 20, Matthias Felleisen wrote:
 >>
 >> Why do you love syntactic overloading?
 >
 > I don't.  My reason below: `...' is much more common in Scheme to
 > represent zero or more.  More concretely, if you write htdp-style type
 > contracts then my bet is that you did use `...' but never `*'.  For
 > example, the htdp-langs docs have:
 >
 >   string=? : (string string ... -> boolean)
 >
 > In other words, the overloading that I want in this case is one that
 > is already in use.
 >
 >
 >
 >> On Sep 20, 2008, at 9:39 AM, Eli Barzilay wrote:
 >>
 >>> What I hoped for is that it possible to use `...' for both, so if  
 >>> you
 >>> use `...' after a type variable that is specified in the `All' with
 >>> `...' then it does the same thing it does now, and otherwise it does
 >>> what `*' is doing.
 >>>
 >>>
 >>> On Sep 20, Sam TH wrote:
 >>>> ... is used for non-uniform varargs, * is for uniform.
 >>>>
 >>>> sam th
 >>>>
 >>>> On Thu, Sep 18, 2008 at 11:00 PM,  <eli@barzilay.org> wrote:
 >>>>> A new problem report is waiting at
 >>>>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9772
 >>>>>
 >>>>> Reported by Eli Barzilay for release: 4.1.0.3-svn18sep2008
 >>>>>
 >>>>> *** Description:
 >>>>> `...' makes more sense as a token for zero-or-more args
 >>>>> than `*'.  The former is usually related to syntax
 >>>>> specification, and the latter as a kleene-star in regexps.
 >>>>> Since type checking is syntactic, I'd rather see `...'
 >>>>> there.
 >
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli  
 > Barzilay:
 >                   http://www.barzilay.org/                 Maze is  
 > Life!
 


State changed from "open" to "closed" by samth at Wed, 12 Aug 2009 16:46:01 -0400
Reason>>> This is a bad idea

From: Eli Barzilay <eli@barzilay.org>
To: samth@plt-scheme.org, Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Wed, 12 Aug 2009 17:25:50 -0400

 Huh?  If anything, the discussion thread reached a point that it is a
 *good* idea to do this.
 
 
 On Aug 12, samth@plt-scheme.org wrote:
 > 
 > State changed from "open" to "closed" by samth at Wed, 12 Aug 2009
 > 16:46:01 -0400
 > Reason>>> This is a bad idea
 > 
 > 
 > View:
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9772
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: samth@plt-scheme.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Wed, 12 Aug 2009 17:37:00 -0400

 That's what I thought too.
 
 On Aug 12, 2009, at 5:25 PM, Eli Barzilay wrote:
 
 > Huh?  If anything, the discussion thread reached a point that it is a
 > *good* idea to do this.
 >
 >
 > On Aug 12, samth@plt-scheme.org wrote:
 >>
 >> State changed from "open" to "closed" by samth at Wed, 12 Aug 2009
 >> 16:46:01 -0400
 >> Reason>>> This is a bad idea
 >>
 >>
 >> View:
 >>   http://bugs.plt-scheme.org/query/?cmd=view&pr=9772
 >
 > --  
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli  
 > Barzilay:
 >                     http://barzilay.org/                   Maze is  
 > Life!
 
From: Sam TH <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Wed, 12 Aug 2009 17:47:20 -0400

 On Wed, Aug 12, 2009 at 5:25 PM, Eli Barzilay<eli@barzilay.org> wrote:
 > Huh? =A0If anything, the discussion thread reached a point that it is a
 > *good* idea to do this.
 
 Well, I disagree.  I have much more experience with this now, I don't
 think it's confusing, and the presented alternative is *very*
 confusing.
 
 Under your proposed solution, these types:
 
 (All (a ...) (Number ... -> Any))
 (All (a ...) (Number ... a -> Any))
 (All (a ...) (a ... -> Any)
 
 The first would be regular varargs, the second and third would be
 variable-arity polymorphism.
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam TH <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Wed, 12 Aug 2009 17:58:05 -0400

 On Aug 12, Sam TH wrote:
 > On Wed, Aug 12, 2009 at 5:25 PM, Eli Barzilay<eli@barzilay.org> wrote=
 :
 > > Huh=3F =A0If anything, the discussion thread reached a point that i=
 t
 > > is a *good* idea to do this.
 >=20
 > Well, I disagree.  I have much more experience with this now, I
 > don't think it's confusing,
 
 (That doesn't say much more than "I am much more used to it now".)
 
 
 > and the presented alternative is *very* confusing.
 >=20
 > Under your proposed solution, these types:
 >=20
 > (All (a ...) (Number ... -> Any))
 > (All (a ...) (Number ... a -> Any))
 > (All (a ...) (a ... -> Any)
 >=20
 > The first would be regular varargs, the second and third would be
 > variable-arity polymorphism.
 
 The first and the third look perfectly fine to me -- they correspond
 directly to the use of `...' in macros, and the fact that in
 
   (syntax-rules ()
     [(x ...) (+ y ...)])
 
 there is no connection between the two `...'s.
 
 The second one seems confusing -- but the confusion is in the `... a'
 syntax, which is (to me, at least) *very* awkward and nearly
 impossible to remember.
 
 [I'd even go as far as making it `...a' instead (=3D> have the `a ...'
 on the LHS bind `a...' on the RHS, I'm not talking about arc-like
 symbol games).  But that's a different discussion.]
 
 The main point here is that in the Scheme syntax world, `...' has a
 very conventional use, and typed-scheme ignores that and uses `*' for
 some cases instead.  In my course, using `...' consistently is very
 important (`...' is confusing in itself, so being consistent is a huge
 win) -- to the point that I will try anything to avoid having the
 students ever see the `*'.  (I can do that as an experiment in some
 semester, then count the number of people who start using `*' in
 `match', and in BNF specs.)
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam TH <samth@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Wed, 12 Aug 2009 17:58:50 -0400

 On Aug 12, 2009, at 5:47 PM, Sam TH wrote:
 
 > On Wed, Aug 12, 2009 at 5:25 PM, Eli Barzilay<eli@barzilay.org> wrote:
 >> Huh?  If anything, the discussion thread reached a point that it is a
 >> *good* idea to do this.
 >
 > Well, I disagree.  I have much more experience with this now, I don't
 > think it's confusing, and the presented alternative is *very*
 > confusing.
 >
 
 The second part of your message does not support the first part of  
 your message. But I am willing to live with your syntax for a while  
 longer and suggest you re-open the bug report and suspend it.
 
 
 > Under your proposed solution, these types:
 >
 > (All (a ...) (Number ... -> Any))
 > (All (a ...) (Number ... a -> Any))
 > (All (a ...) (a ... -> Any)
 >
 > The first would be regular varargs, the second and third would be
 > variable-arity polymorphism.
From: Sam TH <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Wed, 12 Aug 2009 18:42:23 -0400

 On Wed, Aug 12, 2009 at 5:58 PM, Eli Barzilay<eli@barzilay.org> wrote:
 > On Aug 12, Sam TH wrote:
 >> On Wed, Aug 12, 2009 at 5:25 PM, Eli Barzilay<eli@barzilay.org> wrote:
 >> > Huh? =A0If anything, the discussion thread reached a point that it
 >> > is a *good* idea to do this.
 >>
 >> Well, I disagree. =A0I have much more experience with this now, I
 >> don't think it's confusing,
 >
 > (That doesn't say much more than "I am much more used to it now".)
 >
 >
 >> and the presented alternative is *very* confusing.
 >>
 >> Under your proposed solution, these types:
 >>
 >> (All (a ...) (Number ... -> Any))
 >> (All (a ...) (Number ... a -> Any))
 >> (All (a ...) (a ... -> Any)
 >>
 >> The first would be regular varargs, the second and third would be
 >> variable-arity polymorphism.
 >
 > The first and the third look perfectly fine to me -- they correspond
 > directly to the use of `...' in macros, and the fact that in
 >
 > =A0(syntax-rules ()
 > =A0 =A0[(x ...) (+ y ...)])
 >
 > there is no connection between the two `...'s.
 
 I think this is a sign of the confusion your suggestion would cause.
 The first and third, under your proposal, would mean *totally
 different* things.  The ... is a different type constructor between
 the first and third.
 
 > The second one seems confusing -- but the confusion is in the `... a'
 > syntax, which is (to me, at least) *very* awkward and nearly
 > impossible to remember.
 >
 > [I'd even go as far as making it `...a' instead (=3D> have the `a ...'
 > on the LHS bind `a...' on the RHS, I'm not talking about arc-like
 > symbol games). =A0But that's a different discussion.]
 
 I don't think that's a good idea, and these are not scheme-bound
 identifiers anyway.
 
 > The main point here is that in the Scheme syntax world, `...' has a
 > very conventional use, and typed-scheme ignores that and uses `*' for
 > some cases instead. =A0In my course, using `...' consistently is very
 > important (`...' is confusing in itself, so being consistent is a huge
 > win) -- to the point that I will try anything to avoid having the
 > students ever see the `*'. =A0(I can do that as an experiment in some
 > semester, then count the number of people who start using `*' in
 > `match', and in BNF specs.)
 
 No, the problem is that there are two distinct concepts, both related
 to variable arity, that you would like to run together.  I think it's
 more important to be clear about what we mean that to overload ... to
 mean yet another thing.
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam TH <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Wed, 12 Aug 2009 18:56:20 -0400

 On Aug 12, Sam TH wrote:
 > On Wed, Aug 12, 2009 at 5:58 PM, Eli Barzilay<eli@barzilay.org> wrote=
 :
 > > On Aug 12, Sam TH wrote:
 > >> On Wed, Aug 12, 2009 at 5:25 PM, Eli Barzilay<eli@barzilay.org> wr=
 ote:
 > >> > Huh=3F =A0If anything, the discussion thread reached a point tha=
 t it
 > >> > is a *good* idea to do this.
 > >>
 > >> Well, I disagree. =A0I have much more experience with this now, I
 > >> don't think it's confusing,
 > >
 > > (That doesn't say much more than "I am much more used to it now".)
 > >
 > >
 > >> and the presented alternative is *very* confusing.
 > >>
 > >> Under your proposed solution, these types:
 > >>
 > >> (All (a ...) (Number ... -> Any))
 > >> (All (a ...) (Number ... a -> Any))
 > >> (All (a ...) (a ... -> Any)
 > >>
 > >> The first would be regular varargs, the second and third would be
 > >> variable-arity polymorphism.
 > >
 > > The first and the third look perfectly fine to me -- they correspon=
 d
 > > directly to the use of `...' in macros, and the fact that in
 > >
 > > =A0(syntax-rules ()
 > > =A0 =A0[(x ...) (+ y ...)])
 > >
 > > there is no connection between the two `...'s.
 >=20
 > I think this is a sign of the confusion your suggestion would cause.
 > The first and third, under your proposal, would mean *totally
 > different* things.  The ... is a different type constructor between
 > the first and third.
 
 I have no idea how you reach this conclusion.  My point is that the
 two `...'s in the above *are* not connected, they're not standing for
 different sequences -- the second one is an error.
 
 
 > > The second one seems confusing -- but the confusion is in the `... =
 a'
 > > syntax, which is (to me, at least) *very* awkward and nearly
 > > impossible to remember.
 > >
 > > [I'd even go as far as making it `...a' instead (=3D> have the `a .=
 ..'
 > > on the LHS bind `a...' on the RHS, I'm not talking about arc-like
 > > symbol games). =A0But that's a different discussion.]
 >=20
 > I don't think that's a good idea, and these are not scheme-bound
 > identifiers anyway.
 
 Regardless of being good or bad -- `... a' *is* confusing (IMO much
 more than the `*' vs `...' confusion).
 
 
 > > The main point here is that in the Scheme syntax world, `...' has
 > > a very conventional use, and typed-scheme ignores that and uses
 > > `*' for some cases instead. =A0In my course, using `...'
 > > consistently is very important (`...' is confusing in itself, so
 > > being consistent is a huge win) -- to the point that I will try
 > > anything to avoid having the students ever see the `*'. =A0(I can d=
 o
 > > that as an experiment in some semester, then count the number of
 > > people who start using `*' in `match', and in BNF specs.)
 >=20
 > No, the problem is that there are two distinct concepts, both
 > related to variable arity, that you would like to run together.  I
 > think it's more important to be clear about what we mean that to
 > overload ... to mean yet another thing.
 
 I fail to see the line of reasoning that makes you determine "No".  If
 I would follow what you're saying, I would need to use a *different*
 marker for use in `match', in BNF specs, and in macros, since they're
 all distinct concepts -- *much* more distinct than your `...' and `*'.
 In addition, I would then complain about `...' in TS because it is
 something that is used for one of these other things and therefore
 leading to the same kind of confusion.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !

State changed from "closed" to "open" by eli at Tue, 29 Sep 2009 16:12:44 -0400
Reason>>> This is still far from being closed.

From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Cc: samth@plt-scheme.org, matthias@ccs.neu.edu
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Tue, 29 Sep 2009 16:16:00 -0400

 On Sep 29, eli@plt-scheme.org wrote:
 > 
 > State changed from "closed" to "open" by eli at Tue, 29 Sep 2009
 > 16:12:44 -0400
 > Reason>>> This is still far from being closed.
 
 The reason I'm re-opening this now is that I had the "plasure" of
 spending about 15 minutes in class, with several students that were very
 confused about the whole `...' vs `*' thing.  We use `...' for BNFs, and
 since they've seen `*' from typed scheme (when they enter random
 functions at the repl), they asked what that is.  I tried to explain it
 away quickly, but that didn't work since they have *also* seen some
 `...'s in types.
 
 So I gave a more precise explanation of the difference, I only omitted
 the "X ... X" thing.  There was some groaning, so I did a quick poll: I
 asked who finds it confusing.  At this point I did not say anything
 about what I think about this, or about the fact that it could be
 different -- just an explanation of the two syntaxes.
 
 There were 39 students in the class, and exactly 3.5 people found it not
 confusing.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Sam TH <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, matthias@ccs.neu.edu
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Tue, 29 Sep 2009 16:22:29 -0400

 On Tue, Sep 29, 2009 at 4:16 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Sep 29, eli@plt-scheme.org wrote:
 >>
 >> State changed from "closed" to "open" by eli at Tue, 29 Sep 2009
 >> 16:12:44 -0400
 >> Reason>>> This is still far from being closed.
 >
 > The reason I'm re-opening this now is that I had the "plasure" of
 > spending about 15 minutes in class, with several students that were very
 > confused about the whole `...' vs `*' thing. =A0We use `...' for BNFs, an=
 d
 > since they've seen `*' from typed scheme (when they enter random
 > functions at the repl), they asked what that is. =A0I tried to explain it
 > away quickly, but that didn't work since they have *also* seen some
 > `...'s in types.
 >
 > So I gave a more precise explanation of the difference, I only omitted
 > the "X ... X" thing. =A0There was some groaning, so I did a quick poll: I
 > asked who finds it confusing. =A0At this point I did not say anything
 > about what I think about this, or about the fact that it could be
 > different -- just an explanation of the two syntaxes.
 >
 > There were 39 students in the class, and exactly 3.5 people found it not
 > confusing.
 
 Look, the students find higher-order functions and types confusing,
 too.  These are two distinct concepts, and they need different names.
 The distinction between calling a function on a list of arguments, and
 `apply'ing that function is also subtle, but meaningful and has a name
 distinction reflecting that.
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam TH <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, matthias@ccs.neu.edu
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Tue, 29 Sep 2009 16:45:38 -0400

 On Sep 29, Sam TH wrote:
 > On Tue, Sep 29, 2009 at 4:16 PM, Eli Barzilay <eli@barzilay.org> wrot=
 e:
 > > On Sep 29, eli@plt-scheme.org wrote:
 > >>
 > >> State changed from "closed" to "open" by eli at Tue, 29 Sep 2009
 > >> 16:12:44 -0400
 > >> Reason>>> This is still far from being closed.
 > >
 > > The reason I'm re-opening this now is that I had the "plasure" of
 > > spending about 15 minutes in class, with several students that
 > > were very confused about the whole `...' vs `*' thing. =C2=A0We use=
 
 > > `...' for BNFs, and since they've seen `*' from typed scheme (when
 > > they enter random functions at the repl), they asked what that
 > > is. =C2=A0I tried to explain it away quickly, but that didn't work
 > > since they have *also* seen some `...'s in types.
 > >
 > > So I gave a more precise explanation of the difference, I only
 > > omitted the "X ... X" thing. =C2=A0There was some groaning, so I di=
 d a
 > > quick poll: I asked who finds it confusing. =C2=A0At this point I d=
 id
 > > not say anything about what I think about this, or about the fact
 > > that it could be different -- just an explanation of the two
 > > syntaxes.
 > >
 > > There were 39 students in the class, and exactly 3.5 people found
 > > it not confusing.
 >=20
 > Look, the students find higher-order functions and types confusing,
 > too.
 
 Exactly -- so any additional baggage, like `...' vs `*' is only going
 to get them deeper into being confused.  Terminology can be very
 confusing at this point.
 
 
 > These are two distinct concepts, and they need different names.  The
 > distinction between calling a function on a list of arguments, and
 > `apply'ing that function is also subtle, but meaningful and has a
 > name distinction reflecting that.
 
 You keep making this kind of argument which I don't follow.  The call
 vs apply is something different: (a) you need a different name there
 since you can't "guess" which one the user means, (b) this distinction
 is still confusing for students at this level, which is why I talk
 about it once -- very late into the semester, and in the single place
 where it's used.
 
 In addition, the concept of `...' and `*' being overridden is nothing
 new, and I don't even mean that in some advanced way with code that
 students don't see.  They *do* run into the first it in my course
 (`...' is used in BNFs, in `match', and finally in macros) and even
 `*' is overridden (the `*' in types is not the multiplication
 function).
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Sam TH <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, matthias@ccs.neu.edu
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Tue, 29 Sep 2009 16:55:55 -0400

 On Tue, Sep 29, 2009 at 4:45 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >
 >> These are two distinct concepts, and they need different names. =A0The
 >> distinction between calling a function on a list of arguments, and
 >> `apply'ing that function is also subtle, but meaningful and has a
 >> name distinction reflecting that.
 >
 > You keep making this kind of argument which I don't follow. =A0The call
 > vs apply is something different: (a) you need a different name there
 > since you can't "guess" which one the user means, (b) this distinction
 > is still confusing for students at this level, which is why I talk
 > about it once -- very late into the semester, and in the single place
 > where it's used.
 
 I keep making this argument because it directly applies.  Consider:
 
 (All (A ...) ((A ... -> String) (Integer ... -> String) -> String))
 (All (A ...) ((A ... -> String) (Integer * -> String) -> String))
 
 These are two totally different function types, which you are
 proposing to conflate.
 --=20
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam TH <samth@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax
Date: Tue, 29 Sep 2009 21:00:59 -0400

 This would have been a nice discussion to have at lunch. Let's have a  
 brief conversation with Stevie and the two of you tomorrow.
 
 Eli: do you have a solution for the problem below?
 
 
 
 
 
 On Sep 29, 2009, at 4:55 PM, Sam TH wrote:
 
 > On Tue, Sep 29, 2009 at 4:45 PM, Eli Barzilay <eli@barzilay.org>  
 > wrote:
 >>
 >>> These are two distinct concepts, and they need different names.  The
 >>> distinction between calling a function on a list of arguments, and
 >>> `apply'ing that function is also subtle, but meaningful and has a
 >>> name distinction reflecting that.
 >>
 >> You keep making this kind of argument which I don't follow.  The call
 >> vs apply is something different: (a) you need a different name there
 >> since you can't "guess" which one the user means, (b) this  
 >> distinction
 >> is still confusing for students at this level, which is why I talk
 >> about it once -- very late into the semester, and in the single place
 >> where it's used.
 >
 > I keep making this argument because it directly applies.  Consider:
 >
 > (All (A ...) ((A ... -> String) (Integer ... -> String) -> String))
 > (All (A ...) ((A ... -> String) (Integer * -> String) -> String))
 >
 > These are two totally different function types, which you are
 > proposing to conflate.
 > -- 
 > sam th
 > samth@ccs.neu.edu
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>, Sam TH <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] typed-scheme/9772 Types syntax [and 1 more messages]
Date: Wed, 30 Sep 2009 02:10:17 -0400

 On Sep 29, Matthias Felleisen wrote:
 > This would have been a nice discussion to have at lunch.
 
 Yes -- but these lunches seem to always fall on my classes..
 
 
 > Let's have a brief conversation with Stevie and the two of you
 > tomorrow.
 
 OK.  (It's only 1:30am, and I'm very tired, so maybe I'll even sleep
 tonight and be awake in time.)
 
 
 > Eli: do you have a solution for the problem below?
 
 I think so.
 
 And BTW, I *did* try to think about all kinds of alternatives.  I got
 some very crappy ones (use a parenthesized (T ...) for
 zero-or-more-Ts), and some potentially disastrous ones (use `..').
 Eventually I gave up on this direction.
 
 
 On Sep 29, Sam TH wrote:
 > 
 > I keep making this argument because it directly applies.  Consider:
 > 
 > (All (A ...) ((A ... -> String) (Integer ... -> String) -> String))
 > (All (A ...) ((A ... -> String) (Integer * -> String) -> String))
 > 
 > These are two totally different function types, which you are
 > proposing to conflate.
 
 Isn't the first of these an error?  Oh, it's not -- it's inferring
 that it should have the same number of `Integer's as `A's.  Yes, I
 didn't have to leave my question in -- but that *was* my first
 reaction, and I needed to try it for myself to remember what it's
 doing.
 
 This "inference" seems like a useless feature -- it allows you to use
 "..." instead of "... A" in a place where I would *much* rather see
 that A.  In addition to that, the inference is not done when there are
 more than two `...'-ed type variables in scope, even when it's
 obvious (note: better to use " `...' " in these error messages):
 
    (All (A ...)
      (All (B ...)
        ((A ... -> String) ; <-- cannot infer bound for ... type
         (Integer ... B -> String)
         -> String)))
 
    (All (A ...)
      (All (B ...)
        ((A ... B -> String) ; <-- type variable A must be used with ...
         (Integer ... B -> String)
         -> String)))
 
 My first suggestion for a solution is:
 
   A *      -->  A ...
   A ... B  -->  A ... B
   A ...    -->  nothing: this form is eliminated
 
 AFAICT, there is no ambiguity here.  For example `A ... B ... C' can
 only be parsed as the current `A* B ... C' (which is still ambiguous
 now).  But the thing is that (a) I agree that this can be confusing,
 (b) existing `A ...' code that is left with no change will cause
 errors.
 
 So, my second suggestion is:
 
   A *      -->  A ...
   A ... B  -->  A ...B
   A ...    -->  still nothing
 
 Now I'm sure that your first reaction would be "hack".  But if you
 consider the `...B' as a *bound* token, things work out fine.  It
 basically means that in:
 
   (All (A ...) ---)
 
 the `---' has two tokens that got bound there: `A' as usual, and
 `...A' indicating an A-repetition.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

State changed from "open" to "closed" by samth at Wed, 06 Jan 2010 12:00:10 -0500
Reason>>> We came to a resolution on this, which has been implemented.

