From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Nov  1 22:01:11 2013
Received: from mail-ob0-f176.google.com (mail-ob0-f176.google.com [209.85.214.176])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rA2218Bw010248
	for <bugs@bugs.plt-scheme.org>; Fri, 1 Nov 2013 22:01:08 -0400
Message-Id: <201311020201.rA2215vB010241@winooski.ccs.neu.edu>
Date: Fri, 1 Nov 2013 22:01:05 -0400
From: asumu@ccs.neu.edu
To: bugs@racket-lang.org
Subject: TR: wrong arity error turns into something else

>Number:         14138
>Category:       typed-scheme
>Synopsis:       TR: wrong arity error turns into something else
>Class:          sw-bug
>Responsible:    endobson
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Nov 01 22:04:01 -0400 2013
>Closed-Date:    Mon Nov 11 11:20:26 -0500 2013
>Last-Modified:  Mon Nov 11 11:20:26 -0500 2013
>Originator:     Asumu Takikawa
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.90.0.9--2013-10-26(cf7b5b79/d/tr-define-repl)
>Environment:
unix "Linux porco 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10) x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 475280116
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = (#<path:/home/asumu/code/racket-rsvg> #<path:/home/asumu/code/find-collection> #<path:/home/asumu/plt/racket-git/racket/share/pkgs/taglib> #<path:/home/asumu/code/racket-gstreamer>)
raco pkg (show):
/home/asumu/plt/racket-git/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [200 auto-installed packages not shown]
Installation-wide:
 Package            Checksum                                    Source
 find-collection    #f                                          (link ../../../../../code/find-collection)
 gstreamer          #f                                          (link ../../../../../code/racket-gstreamer)
 racket-rsvg        #f                                          (link ../../../../../code/racket-rsvg)
 taglib             d1ac7d35c58592f2674d817c8d9e59344dd16939    (url github://github.com/takikawa/taglib-racket/master)
User-specific for installation "development":
 [none]



Collections:
("/home/asumu/plt/racket-git/add-on/development/collects"
 (non-existent-path))
("/home/asumu/plt/racket-git/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default "/home/asumu") #() "#lang racket\n" #f #t ((main) (test)) #t))
>Description:
This is a TR regression found by Dan Feltey. A git bisect appears
to pinpoint the regression at commit e26bbffbc939b77fc04839d93cf53b99539b6860.

The following code demonstrates the bug:

  #lang typed/racket
  (: f (Number Number -> Number))
  (define (f x) 0)

produces:
  Type Checker: Expected (Number Number -> Number), but got (case->) in: (define (f x) 0)

In 5.3.6 it produces:
  Type Checker: Expected a function of type (Number Number -> Number), but got a function with the wrong arity
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: nobody@racket-lang.org, bug-notification@racket-lang.org
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/14138: TR: wrong arity error turns into
 something else
Date: Tue, 5 Nov 2013 01:30:32 -0500

 On 2013-11-01 22:04:01 -0400, asumu@ccs.neu.edu wrote:
 > The following code demonstrates the bug:
 >
 >   #lang typed/racket
 >   (: f (Number Number -> Number))
 >   (define (f x) 0)
 >
 > produces:
 >   Type Checker: Expected (Number Number -> Number), but got (case->) in: (define (f x) 0)
 
 I see what's happening now and in some ways it's the intended behavior.
 
 TR is considering the function body as unreachable code, since callers
 can only ever call the function with two arguments due to the type
 annotation.
 
 However, I think the error message is still incomprehensible.
 
 Also, the same code introduces another regression which is more
 problematic:
 
   #lang typed/racket
   (: f (case->))
   (define (f x) (add1 "foo"))
 
 Results in:
   Internal Typechecker Error: no type for (quote 3) at: /home/asumu/plt/racket-git/test.rkt line 5 col 20
   while typechecking:
   here
   originally:
   here
 
 Cheers,
 Asumu
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: nobody@racket-lang.org, bug-notification@racket-lang.org
Cc: bugs@racket-lang.org, Eric Dobson <eric.n.dobson@gmail.com>
Subject: Re: [racket-bug] all/14138: TR: wrong arity error turns into
 something else
Date: Tue, 5 Nov 2013 11:46:22 -0500

 On 2013-11-05 01:30:32 -0500, Asumu Takikawa wrote:
 > However, I think the error message is still incomprehensible.
 > 
 > Also, the same code introduces another regression which is more
 > problematic:
 > 
 >   #lang typed/racket
 >   (: f (case->))
 >   (define (f x) (add1 "foo"))
 > 
 > Results in:
 >   Internal Typechecker Error: no type for (quote 3) at: /home/asumu/plt/racket-git/test.rkt line 5 col 20
 >   while typechecking:
 >   here
 >   originally:
 >   here
 
 I think a potential solution to both of these issues is to change the
 conditional at line 334 of tc-lambda-unit.rkt from
 
   (or (arities-seen-seen-before? arities-seen arity)
       (and expected-type (null? (find-matching-arities formal))))
 
 to
 
   (or (arities-seen-seen-before? arities-seen arity)
       (and expected-type
            (null? (find-matching-arities formal))
            (> (length formals+bodies) 1)))
 
 i.e., only make clauses dead when there is more than one arity. This
 seems to pass all the tests.
 
 Eric, does this seem reasonable?
 
 Cheers,
 Asumu
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>, Eric Dobson <eric.n.dobson@gmail.com>
Subject: Re: [racket-bug] all/14138: TR: wrong arity error turns into
 something else
Date: Tue, 5 Nov 2013 21:22:46 -0500

 On Tue, Nov 5, 2013 at 11:46 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2013-11-05 01:30:32 -0500, Asumu Takikawa wrote:
 >> However, I think the error message is still incomprehensible.
 >>
 >> Also, the same code introduces another regression which is more
 >> problematic:
 >>
 >>   #lang typed/racket
 >>   (: f (case->))
 >>   (define (f x) (add1 "foo"))
 >>
 >> Results in:
 >>   Internal Typechecker Error: no type for (quote 3) at: /home/asumu/plt/racket-git/test.rkt line 5 col 20
 >>   while typechecking:
 >>   here
 >>   originally:
 >>   here
 >
 > I think a potential solution to both of these issues is to change the
 > conditional at line 334 of tc-lambda-unit.rkt from
 >
 >   (or (arities-seen-seen-before? arities-seen arity)
 >       (and expected-type (null? (find-matching-arities formal))))
 >
 > to
 >
 >   (or (arities-seen-seen-before? arities-seen arity)
 >       (and expected-type
 >            (null? (find-matching-arities formal))
 >            (> (length formals+bodies) 1)))
 >
 > i.e., only make clauses dead when there is more than one arity. This
 > seems to pass all the tests.
 
 But the clauses _are_ all dead.  Why do we need to make them live?
 
 > Eric, does this seem reasonable?
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14138: TR: wrong arity error turns into
 something else
Date: Wed, 6 Nov 2013 00:00:30 -0800

 I'm with Sam, why do we need to make the clause live to get a good
 error message? I'll take a look when I have time, which may be
 tomorrow night or early next week.
 
 On Tue, Nov 5, 2013 at 6:22 PM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > On Tue, Nov 5, 2013 at 11:46 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >> On 2013-11-05 01:30:32 -0500, Asumu Takikawa wrote:
 >>> However, I think the error message is still incomprehensible.
 >>>
 >>> Also, the same code introduces another regression which is more
 >>> problematic:
 >>>
 >>>   #lang typed/racket
 >>>   (: f (case->))
 >>>   (define (f x) (add1 "foo"))
 >>>
 >>> Results in:
 >>>   Internal Typechecker Error: no type for (quote 3) at: /home/asumu/plt/racket-git/test.rkt line 5 col 20
 >>>   while typechecking:
 >>>   here
 >>>   originally:
 >>>   here
 >>
 >> I think a potential solution to both of these issues is to change the
 >> conditional at line 334 of tc-lambda-unit.rkt from
 >>
 >>   (or (arities-seen-seen-before? arities-seen arity)
 >>       (and expected-type (null? (find-matching-arities formal))))
 >>
 >> to
 >>
 >>   (or (arities-seen-seen-before? arities-seen arity)
 >>       (and expected-type
 >>            (null? (find-matching-arities formal))
 >>            (> (length formals+bodies) 1)))
 >>
 >> i.e., only make clauses dead when there is more than one arity. This
 >> seems to pass all the tests.
 >
 > But the clauses _are_ all dead.  Why do we need to make them live?
 >
 >> Eric, does this seem reasonable?
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14138: TR: wrong arity error turns into
 something else
Date: Wed, 6 Nov 2013 21:11:14 -0800

 I have a fix for the internal error which I'll be cleaning up and
 sending out for review shortly.
 
 On Wed, Nov 6, 2013 at 12:00 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > I'm with Sam, why do we need to make the clause live to get a good
 > error message? I'll take a look when I have time, which may be
 > tomorrow night or early next week.
 >
 > On Tue, Nov 5, 2013 at 6:22 PM, Sam Tobin-Hochstadt
 > <samth@cs.indiana.edu> wrote:
 >> On Tue, Nov 5, 2013 at 11:46 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >>> On 2013-11-05 01:30:32 -0500, Asumu Takikawa wrote:
 >>>> However, I think the error message is still incomprehensible.
 >>>>
 >>>> Also, the same code introduces another regression which is more
 >>>> problematic:
 >>>>
 >>>>   #lang typed/racket
 >>>>   (: f (case->))
 >>>>   (define (f x) (add1 "foo"))
 >>>>
 >>>> Results in:
 >>>>   Internal Typechecker Error: no type for (quote 3) at: /home/asumu/plt/racket-git/test.rkt line 5 col 20
 >>>>   while typechecking:
 >>>>   here
 >>>>   originally:
 >>>>   here
 >>>
 >>> I think a potential solution to both of these issues is to change the
 >>> conditional at line 334 of tc-lambda-unit.rkt from
 >>>
 >>>   (or (arities-seen-seen-before? arities-seen arity)
 >>>       (and expected-type (null? (find-matching-arities formal))))
 >>>
 >>> to
 >>>
 >>>   (or (arities-seen-seen-before? arities-seen arity)
 >>>       (and expected-type
 >>>            (null? (find-matching-arities formal))
 >>>            (> (length formals+bodies) 1)))
 >>>
 >>> i.e., only make clauses dead when there is more than one arity. This
 >>> seems to pass all the tests.
 >>
 >> But the clauses _are_ all dead.  Why do we need to make them live?
 >>
 >>> Eric, does this seem reasonable?
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/14138: TR: wrong arity error turns into
 something else
Date: Wed, 6 Nov 2013 21:47:46 -0800

 Actually also figured out a solution to the full bug,
 https://github.com/plt/racket/pull/485.
 
 On Wed, Nov 6, 2013 at 9:11 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > I have a fix for the internal error which I'll be cleaning up and
 > sending out for review shortly.
 >
 > On Wed, Nov 6, 2013 at 12:00 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> I'm with Sam, why do we need to make the clause live to get a good
 >> error message? I'll take a look when I have time, which may be
 >> tomorrow night or early next week.
 >>
 >> On Tue, Nov 5, 2013 at 6:22 PM, Sam Tobin-Hochstadt
 >> <samth@cs.indiana.edu> wrote:
 >>> On Tue, Nov 5, 2013 at 11:46 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >>>> On 2013-11-05 01:30:32 -0500, Asumu Takikawa wrote:
 >>>>> However, I think the error message is still incomprehensible.
 >>>>>
 >>>>> Also, the same code introduces another regression which is more
 >>>>> problematic:
 >>>>>
 >>>>>   #lang typed/racket
 >>>>>   (: f (case->))
 >>>>>   (define (f x) (add1 "foo"))
 >>>>>
 >>>>> Results in:
 >>>>>   Internal Typechecker Error: no type for (quote 3) at: /home/asumu/plt/racket-git/test.rkt line 5 col 20
 >>>>>   while typechecking:
 >>>>>   here
 >>>>>   originally:
 >>>>>   here
 >>>>
 >>>> I think a potential solution to both of these issues is to change the
 >>>> conditional at line 334 of tc-lambda-unit.rkt from
 >>>>
 >>>>   (or (arities-seen-seen-before? arities-seen arity)
 >>>>       (and expected-type (null? (find-matching-arities formal))))
 >>>>
 >>>> to
 >>>>
 >>>>   (or (arities-seen-seen-before? arities-seen arity)
 >>>>       (and expected-type
 >>>>            (null? (find-matching-arities formal))
 >>>>            (> (length formals+bodies) 1)))
 >>>>
 >>>> i.e., only make clauses dead when there is more than one arity. This
 >>>> seems to pass all the tests.
 >>>
 >>> But the clauses _are_ all dead.  Why do we need to make them live?
 >>>
 >>>> Eric, does this seem reasonable?
Responsible changed from "samth" to "endobson" by endobson@racket-lang.org at Mon, 11 Nov 2013 11:20:26 -0500
Reason>>> A commit by endobson@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/520c33906e
State changed from "open" to "closed" by endobson@racket-lang.org at Mon, 11 Nov 2013 11:20:26 -0500
Reason>>> A commit by endobson@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/520c33906e
  | Make wrong arity messages work again.
  | 
  | Closes PR14138.


----------
A commit by endobson@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/dd01d9932d
  | Make dead code elimination work for non case lambdas.
  | 
  | Related to PR14138.

