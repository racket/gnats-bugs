From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Sep  9 15:21:58 2009
Received: from mail-yw0-f186.google.com (mail-yw0-f186.google.com [209.85.211.186])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n89JLqWn001481
	for <bugs@bugs.plt-scheme.org>; Wed, 9 Sep 2009 15:21:52 -0400
Message-Id: <200909091921.n89JLndu001444@champlain.ccs.neu.edu>
Date: Wed, 9 Sep 2009 15:21:49 -0400
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Typed Scheme no longer allows ascribing even correct predicate types

>Number:         10439
>Category:       typed-scheme
>Synopsis:       Typed Scheme no longer allows ascribing even correct predicate types
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Sep 09 15:24:01 -0400 2009
>Closed-Date:    Wed May 19 12:26:20 -0400 2010
>Last-Modified:  Wed May 19 12:26:20 -0400 2010
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1.8-svn9sep2009
>Environment:
macosx "Darwin Moya 9.7.0 Darwin Kernel Version 9.7.0: Tue Mar 31 22:52:17 PDT 2009; root:xnu-1228.12.14~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 120304520

Collections:
(("/Users/cce/Library/PLT Scheme/4.2.1.8/collects" non-existent-path) ("/Users/cce/plt/trunk/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "reader" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "!
 texpict" "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
I copied the code exactly as it was, there are a couple obsolete lines in the middle I forgot to remove but they don't confuse the example in any way that should interfere with debugging this report.

Anyway -- I tried to make an alias for Integer, then export a copy of exact-integer? as a predicate for that type, and Typed Scheme will no longer even parse the type for this correctly.

I get these errors:

Welcome to DrScheme, version 4.2.1.8-svn9sep2009 [3m].
Language: Module.
. typecheck: Unbound type name -> in: ->
. typecheck: Unbound type name : in: :
. typecheck: Type Any cannot be applied, arguments were: (Error Boolean Error Timestamp) in: (Any -> Boolean : Timestamp)
. typecheck: Summary: 3 errors encountered in:
  ->
  :
  (Any -> Boolean : Timestamp)
> 
>How-To-Repeat:
#lang typed-scheme

;; For typed code
(define-type-alias Timestamp Integer)

(provide Timestamp)

;; For untyped code
(require scheme/contract)

(: timestamp/c (Any -> Boolean : Timestamp))
(define timestamp/c exact-integer?)

(provide timestamp/c)
>Fix:
>Audit-Trail:
From: Carl Eastlund <cce@ccs.neu.edu>
To: Sam TH <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10439: Typed Scheme no longer allows ascribing even 
	correct predicate types
Date: Wed, 9 Sep 2009 23:47:03 +0100

 On Wed, Sep 9, 2009 at 10:01 PM, Sam TH <samth@ccs.neu.edu> wrote:
 > The problem is that `->' from the contract library shadows the binding
 > for `->' from Typed Scheme, which just changed to using the binding,
 > instead of the symbol, to parse the type. =A0So this isn't a bug in
 > Typed Scheme, although the error message could be improved.
 >
 > Would you prefer it if importing the contract library errored instead
 > of shadowing?
 >
 > sam th
 
 Hmm.  I see the problem...  So there is no way to export something
 both with a type and with a contract?  That seems like a problem that
 should be solved, because while I don't need it in this file now I did
 want it at an earlier incarnation.  That is, I wanted to export
 something with a contract the type system would not infer.
 
 --Carl
From: Sam TH <samth@ccs.neu.edu>
To: Carl Eastlund <cce@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10439: Typed Scheme no longer allows ascribing even 
	correct predicate types
Date: Wed, 9 Sep 2009 23:18:02 -0400

 On Wed, Sep 9, 2009 at 6:47 PM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 > On Wed, Sep 9, 2009 at 10:01 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> The problem is that `->' from the contract library shadows the binding
 >> for `->' from Typed Scheme, which just changed to using the binding,
 >> instead of the symbol, to parse the type. =A0So this isn't a bug in
 >> Typed Scheme, although the error message could be improved.
 >>
 >> Would you prefer it if importing the contract library errored instead
 >> of shadowing?
 >>
 >> sam th
 >
 > Hmm. =A0I see the problem... =A0So there is no way to export something
 > both with a type and with a contract? =A0That seems like a problem that
 > should be solved, because while I don't need it in this file now I did
 > want it at an earlier incarnation. =A0That is, I wanted to export
 > something with a contract the type system would not infer.
 
 Now you're describing a different problem.  There isn't a way to do
 what you want at the moment, but if there was you'd just have to
 require the contract library (or Typed Scheme) with a prefix.
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Carl Eastlund <cce@ccs.neu.edu>
Cc: Sam TH <samth@ccs.neu.edu>, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10439: Typed Scheme no longer allows ascribing even  correct predicate types
Date: Thu, 10 Sep 2009 13:54:39 -0400

 Yeap, that's another paper waiting in the wings ...
 
 
 
 On Sep 9, 2009, at 6:47 PM, Carl Eastlund wrote:
 
 > On Wed, Sep 9, 2009 at 10:01 PM, Sam TH <samth@ccs.neu.edu> wrote:
 >> The problem is that `->' from the contract library shadows the  
 >> binding
 >> for `->' from Typed Scheme, which just changed to using the binding,
 >> instead of the symbol, to parse the type.  So this isn't a bug in
 >> Typed Scheme, although the error message could be improved.
 >>
 >> Would you prefer it if importing the contract library errored instead
 >> of shadowing?
 >>
 >> sam th
 >
 > Hmm.  I see the problem...  So there is no way to export something
 > both with a type and with a contract?  That seems like a problem that
 > should be solved, because while I don't need it in this file now I did
 > want it at an earlier incarnation.  That is, I wanted to export
 > something with a contract the type system would not infer.
 >
 > --Carl
 


State changed from "open" to "closed" by samth at Wed, 19 May 2010 12:26:20 -0400
Reason>>> use a prefix

