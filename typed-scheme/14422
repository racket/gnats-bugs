From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Mar 25 02:45:12 2014
Received: from mail-oa0-f41.google.com (mail-oa0-f41.google.com [209.85.219.41])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s2P6jBrE018457
	for <bugs@bugs.plt-scheme.org>; Tue, 25 Mar 2014 02:45:11 -0400
Message-Id: <201403250645.s2P6j8IG018443@winooski.ccs.neu.edu>
Date: Tue, 25 Mar 2014 02:45:08 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR allows for filters of mutated variables which leads to accepting bad programs

>Number:         14422
>Category:       typed-scheme
>Synopsis:       TR allows for filters of mutated variables which leads to accepting bad programs
>Class:          sw-bug
>Responsible:    endobson
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Mar 25 02:48:01 -0400 2014
>Closed-Date:    Mon Jul 07 12:24:26 -0400 2014
>Last-Modified:  Mon Jul 07 12:24:26 -0400 2014
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
>Description:
I expect TR to fail at typechecking this program but it doesn't. The argument to g should not be able to return a true value since it has a filter equivalent to Bot.
>How-To-Repeat:
#lang typed/racket



(: f (-> Boolean))
(define (f)
  (let*: ([x : Any 'x])
    (: g ((-> Boolean : #:+ (implies (Symbol @ x) (! Symbol @ x)))  -> Boolean))
    (define (g h)
      (h))
    (set! x 'foo)
    (g (lambda () #t))))
(f)
>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>
Cc: 
Subject: Re: [racket-bug] all/14422: TR allows for filters of mutated
 variables which leads to accepting bad programs
Date: Tue, 25 Mar 2014 00:18:02 -0700

 +bugs, some how gmail missed that on the cc.
 
 On Mon, Mar 24, 2014 at 11:50 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > I think the solution should be that filters of mutated variables (in a
 > user written type) should be an error.
 >
 > On Mon, Mar 24, 2014 at 11:48 PM,  <eric.n.dobson@gmail.com> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14422
 >>
 >> Reported by Eric Dobson for release: HEAD
 >>
 >> *** Description:
 >> I expect TR to fail at typechecking this program but it doesn't. The argument to g should not be able to return a true value since it has a filter equivalent to Bot.
 >>
 >> *** How to repeat:
 >> #lang typed/racket
 >>
 >>
 >>
 >> (: f (-> Boolean))
 >> (define (f)
 >>   (let*: ([x : Any 'x])
 >>     (: g ((-> Boolean : #:+ (implies (Symbol @ x) (! Symbol @ x)))  -> Boolean))
 >>     (define (g h)
 >>       (h))
 >>     (set! x 'foo)
 >>     (g (lambda () #t))))
 >> (f)
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
 >>

Responsible changed from "samth" to "endobson" by endobson@racket-lang.org at Mon, 07 Jul 2014 12:24:26 -0400
Reason>>> A commit by endobson@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/fdd7679426
State changed from "open" to "closed" by endobson@racket-lang.org at Mon, 07 Jul 2014 12:24:26 -0400
Reason>>> A commit by endobson@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/fdd7679426
  | Make filters on mutated/undefined vars an error.
  | 
  | Closes PR 14422.
  | Closes PR 14495.

