From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jan 26 22:21:03 2014
Received: from mail-ob0-f170.google.com (mail-ob0-f170.google.com [209.85.214.170])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s0R3L2Js018481
	for <bugs@bugs.plt-scheme.org>; Sun, 26 Jan 2014 22:21:03 -0500
Message-Id: <201401270320.s0R3KxlL018473@winooski.ccs.neu.edu>
Date: Sun, 26 Jan 2014 22:20:59 -0500
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: Non-transparent structs widened to Any type in immutable polymorphic types can't be provided

>Number:         14316
>Category:       typed-scheme
>Synopsis:       Non-transparent structs widened to Any type in immutable polymorphic types can't be provided
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Jan 26 22:24:01 -0500 2014
>Last-Modified:  Wed Apr 09 00:35:48 -0400 2014
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0.0.1--2014-01-15(a391556f/d)
>Environment:
unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 651899904
Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links #:root? #t) = (); (links #:user? #f #:root? #t) = (#<path:/home/neil/plt/racket/share/pkgs/rsound> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
raco pkg (show):
/home/neil/plt/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [204 auto-installed packages not shown]
Installation-wide:
 Package       Checksum                                    Source
 nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url git://github.com/ntoronto/nonplussed)
 rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog rsound)
 [1 auto-installed package not shown]
User-specific for installation "development":
 [none]



Collections:
("/home/neil/.racket/development/collects"
 (non-existent-path))
("/home/neil/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
The program in reproduction steps fails with a runtime error on any of the three definitions. It works if:

 * (provide (all-defined-out)) is commented out
 * The struct is made #:transparent

Similar tests with vectors, boxes, and mutable hash tables do not raise runtime errors.
>How-To-Repeat:
#lang typed/racket

(provide (all-defined-out))

(struct: Foo ())

(define hashof-foo
  ((inst make-immutable-hasheq Symbol Any)
   (list (cons 'key (list (Foo))))))

;; Runtime error from above:
;; default-blame-format: contract violation
;;   expected: a blame object with a non-#f positive field
;;   given: #<blame>

(define listof-foo ((inst list Any) (Foo)))

;; Runtime error from above:
;; Attempted to use a higher-order value passed as `Any` in untyped code: #<Foo>
;;   in: an element of
;;       (listof Any)
;;   contract from: anonymous-module
;;   blaming: incomplete-blame-from-provide.rkt
;;   at: unsaved-editor755214:11.8

(define consof-foo ((inst cons Symbol Any) 'key (Foo)))

;; Runtime error from above is similar to that for `listof-foo'
>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 09:10:22 -0800

 The first part looks like a bug in the contract library, so I'll let
 Robby take a look at that.
 
 For the second part I agree those error messages are bad, but I want
 to make sure we agree on why.
 
 The issue that I think is problematic is that these values are not yet
 used in untyped code so there shouldn't be a problem with the module
 definition, and those errors should only come up once they are used in
 an untyped context. Is that the problem you see?
 
 On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >
 > Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >
 > *** Description:
 > The program in reproduction steps fails with a runtime error on any of the three definitions. It works if:
 >
 >  * (provide (all-defined-out)) is commented out
 >  * The struct is made #:transparent
 >
 > Similar tests with vectors, boxes, and mutable hash tables do not raise runtime errors.
 >
 > *** How to repeat:
 > #lang typed/racket
 >
 > (provide (all-defined-out))
 >
 > (struct: Foo ())
 >
 > (define hashof-foo
 >   ((inst make-immutable-hasheq Symbol Any)
 >    (list (cons 'key (list (Foo))))))
 >
 > ;; Runtime error from above:
 > ;; default-blame-format: contract violation
 > ;;   expected: a blame object with a non-#f positive field
 > ;;   given: #<blame>
 >
 > (define listof-foo ((inst list Any) (Foo)))
 >
 > ;; Runtime error from above:
 > ;; Attempted to use a higher-order value passed as `Any` in untyped code: #<Foo>
 > ;;   in: an element of
 > ;;       (listof Any)
 > ;;   contract from: anonymous-module
 > ;;   blaming: incomplete-blame-from-provide.rkt
 > ;;   at: unsaved-editor755214:11.8
 >
 > (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >
 > ;; Runtime error from above is similar to that for `listof-foo'
 >
 > *** Environment:
 > unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 651899904
 > Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links #:root? #t) = (); (links #:user? #f #:root? #t) = (#<path:/home/neil/plt/racket/share/pkgs/rsound> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 > raco pkg (show):
 > /home/neil/plt/racket/share/devel-pkgs:
 >  Package              Checksum    Source
 >  main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 >  plt-services         #f          (static-link ../../../pkgs/plt-services)
 >  racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 >  [204 auto-installed packages not shown]
 > Installation-wide:
 >  Package       Checksum                                    Source
 >  nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url git://github.com/ntoronto/nonplussed)
 >  rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog rsound)
 >  [1 auto-installed package not shown]
 > User-specific for installation "development":
 >  [none]
 >
 >
 >
 > Collections:
 > ("/home/neil/.racket/development/collects"
 >  (non-existent-path))
 > ("/home/neil/plt/racket/collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 >
 > Recent Internal Errors:
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
 >
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 12:11:38 -0500

 On Mon, Jan 27, 2014 at 12:10 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > The first part looks like a bug in the contract library, so I'll let
 > Robby take a look at that.
 
 
 On this, can you test on 5.92, which doesn't have Robby's recent
 changes to the contract library?
 
 Sam
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 09:21:49 -0800

 5.92 has the right behavior in both regards. There is no issue from
 default-blame-format and the error for exporting isn't triggered until
 the use of the contracted identifier.
 
 My (untested) guess for the second issue is
 c321f6dd0c4e2444d44b6c79a3ac49acfb9041bf, which is Robby's big change
 to first order contracts.
 
 On Mon, Jan 27, 2014 at 9:11 AM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > On Mon, Jan 27, 2014 at 12:10 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> The first part looks like a bug in the contract library, so I'll let
 >> Robby take a look at that.
 >
 >
 > On this, can you test on 5.92, which doesn't have Robby's recent
 > changes to the contract library?
 >
 > Sam
From: Neil Toronto <neil.toronto@gmail.com>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 10:50:15 -0700

 For my current code, I wouldn't mind if there was a fundamental 
 limitation that precluded exporting a (Listof Any) if the value contains 
 a non-transparent struct, as long as I could import it in another typed 
 module.
 
 I do wonder why #:transparent makes any difference, though. Why would 
 not having it make TR think the value is higher-order?
 
 Neil ⊥
 
 On 01/27/2014 10:10 AM, Eric Dobson wrote:
 > The first part looks like a bug in the contract library, so I'll let
 > Robby take a look at that.
 >
 > For the second part I agree those error messages are bad, but I want
 > to make sure we agree on why.
 >
 > The issue that I think is problematic is that these values are not yet
 > used in untyped code so there shouldn't be a problem with the module
 > definition, and those errors should only come up once they are used in
 > an untyped context. Is that the problem you see?
 >
 > On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 >> A new problem report is waiting at
 >>    http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >>
 >> Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >>
 >> *** Description:
 >> The program in reproduction steps fails with a runtime error on any of the three definitions. It works if:
 >>
 >>   * (provide (all-defined-out)) is commented out
 >>   * The struct is made #:transparent
 >>
 >> Similar tests with vectors, boxes, and mutable hash tables do not raise runtime errors.
 >>
 >> *** How to repeat:
 >> #lang typed/racket
 >>
 >> (provide (all-defined-out))
 >>
 >> (struct: Foo ())
 >>
 >> (define hashof-foo
 >>    ((inst make-immutable-hasheq Symbol Any)
 >>     (list (cons 'key (list (Foo))))))
 >>
 >> ;; Runtime error from above:
 >> ;; default-blame-format: contract violation
 >> ;;   expected: a blame object with a non-#f positive field
 >> ;;   given: #<blame>
 >>
 >> (define listof-foo ((inst list Any) (Foo)))
 >>
 >> ;; Runtime error from above:
 >> ;; Attempted to use a higher-order value passed as `Any` in untyped code: #<Foo>
 >> ;;   in: an element of
 >> ;;       (listof Any)
 >> ;;   contract from: anonymous-module
 >> ;;   blaming: incomplete-blame-from-provide.rkt
 >> ;;   at: unsaved-editor755214:11.8
 >>
 >> (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >>
 >> ;; Runtime error from above is similar to that for `listof-foo'
 >>
 >> *** Environment:
 >> unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 651899904
 >> Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links #:root? #t) = (); (links #:user? #f #:root? #t) = (#<path:/home/neil/plt/racket/share/pkgs/rsound> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 >> raco pkg (show):
 >> /home/neil/plt/racket/share/devel-pkgs:
 >>   Package              Checksum    Source
 >>   main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 >>   plt-services         #f          (static-link ../../../pkgs/plt-services)
 >>   racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 >>   [204 auto-installed packages not shown]
 >> Installation-wide:
 >>   Package       Checksum                                    Source
 >>   nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url git://github.com/ntoronto/nonplussed)
 >>   rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog rsound)
 >>   [1 auto-installed package not shown]
 >> User-specific for installation "development":
 >>   [none]
 >>
 >>
 >>
 >> Collections:
 >> ("/home/neil/.racket/development/collects"
 >>   (non-existent-path))
 >> ("/home/neil/plt/racket/collects"
 >>   (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 >>
 >> Recent Internal Errors:
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
 >>
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 09:55:26 -0800

 #:transparent means that it responds to struct?, and that we can then
 go inside and inspect it and correctly protect the value from being
 misused by the untyped world.
 
 Note that currently #:transparent opens up a soundness gap in TR and I
 am working on a fix. I haven't finished and done the profiling but I
 expect there will be a performance penalty for using #:transparent.
 
 On Mon, Jan 27, 2014 at 9:50 AM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > For my current code, I wouldn't mind if there was a fundamental limitation
 > that precluded exporting a (Listof Any) if the value contains a
 > non-transparent struct, as long as I could import it in another typed
 > module.
 >
 > I do wonder why #:transparent makes any difference, though. Why would not
 > having it make TR think the value is higher-order?
 >
 > Neil ⊥
 >
 >
 > On 01/27/2014 10:10 AM, Eric Dobson wrote:
 >>
 >> The first part looks like a bug in the contract library, so I'll let
 >> Robby take a look at that.
 >>
 >> For the second part I agree those error messages are bad, but I want
 >> to make sure we agree on why.
 >>
 >> The issue that I think is problematic is that these values are not yet
 >> used in untyped code so there shouldn't be a problem with the module
 >> definition, and those errors should only come up once they are used in
 >> an untyped context. Is that the problem you see?
 >>
 >> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 >>>
 >>> A new problem report is waiting at
 >>>    http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >>>
 >>> Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >>>
 >>> *** Description:
 >>> The program in reproduction steps fails with a runtime error on any of
 >>> the three definitions. It works if:
 >>>
 >>>   * (provide (all-defined-out)) is commented out
 >>>   * The struct is made #:transparent
 >>>
 >>> Similar tests with vectors, boxes, and mutable hash tables do not raise
 >>> runtime errors.
 >>>
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>>
 >>> (provide (all-defined-out))
 >>>
 >>> (struct: Foo ())
 >>>
 >>> (define hashof-foo
 >>>    ((inst make-immutable-hasheq Symbol Any)
 >>>     (list (cons 'key (list (Foo))))))
 >>>
 >>> ;; Runtime error from above:
 >>> ;; default-blame-format: contract violation
 >>> ;;   expected: a blame object with a non-#f positive field
 >>> ;;   given: #<blame>
 >>>
 >>> (define listof-foo ((inst list Any) (Foo)))
 >>>
 >>> ;; Runtime error from above:
 >>> ;; Attempted to use a higher-order value passed as `Any` in untyped code:
 >>> #<Foo>
 >>> ;;   in: an element of
 >>> ;;       (listof Any)
 >>> ;;   contract from: anonymous-module
 >>> ;;   blaming: incomplete-blame-from-provide.rkt
 >>> ;;   at: unsaved-editor755214:11.8
 >>>
 >>> (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >>>
 >>> ;; Runtime error from above is similar to that for `listof-foo'
 >>>
 >>> *** Environment:
 >>> unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 >>> 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>> (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 651899904
 >>> Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links #:root?
 >>> #t) = (); (links #:user? #f #:root? #t) =
 >>> (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 >>> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 >>> raco pkg (show):
 >>> /home/neil/plt/racket/share/devel-pkgs:
 >>>   Package              Checksum    Source
 >>>   main-distribution    #f          (static-link
 >>> ../../../pkgs/main-distribution)
 >>>   plt-services         #f          (static-link
 >>> ../../../pkgs/plt-services)
 >>>   racket-lib           #f          (static-link
 >>> ../../../pkgs/racket-pkgs/racket-lib)
 >>>   [204 auto-installed packages not shown]
 >>> Installation-wide:
 >>>   Package       Checksum                                    Source
 >>>   nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 >>> git://github.com/ntoronto/nonplussed)
 >>>   rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 >>> rsound)
 >>>   [1 auto-installed package not shown]
 >>> User-specific for installation "development":
 >>>   [none]
 >>>
 >>>
 >>>
 >>> Collections:
 >>> ("/home/neil/.racket/development/collects"
 >>>   (non-existent-path))
 >>> ("/home/neil/plt/racket/collects"
 >>>   (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >>> "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >>> "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 >>> "version" "xml"))
 >>>
 >>> Recent Internal Errors:
 >>> Computer Language: (("Determine language from source") (#(#t print
 >>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test)
 >>> (main)) #t))
 >>>
 >
 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 12:55:03 -0500

 On Mon, Jan 27, 2014 at 12:50 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > For my current code, I wouldn't mind if there was a fundamental limitation
 > that precluded exporting a (Listof Any) if the value contains a
 > non-transparent struct, as long as I could import it in another typed
 > module.
 
 There shouldn't be a restriction on _exporting_ it to untyped code,
 the untyped code just isn't allowed to _do_ anything with it.
 
 > I do wonder why #:transparent makes any difference, though. Why would not
 > having it make TR think the value is higher-order?
 
 Because there might be some other way that the untyped code could
 extract a value from the object of type `Any`, and because it's
 opaque, the contract for `Any` can't put contracts on it.  With
 `#:transparent` (or anything else that reduces the inspector needed to
 inspect the value) the contract can see the fields and put contracts
 on them.
 
 Sam
 
 >
 > Neil ⊥
 >
 >
 > On 01/27/2014 10:10 AM, Eric Dobson wrote:
 >>
 >> The first part looks like a bug in the contract library, so I'll let
 >> Robby take a look at that.
 >>
 >> For the second part I agree those error messages are bad, but I want
 >> to make sure we agree on why.
 >>
 >> The issue that I think is problematic is that these values are not yet
 >> used in untyped code so there shouldn't be a problem with the module
 >> definition, and those errors should only come up once they are used in
 >> an untyped context. Is that the problem you see?
 >>
 >> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 >>>
 >>> A new problem report is waiting at
 >>>    http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >>>
 >>> Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >>>
 >>> *** Description:
 >>> The program in reproduction steps fails with a runtime error on any of
 >>> the three definitions. It works if:
 >>>
 >>>   * (provide (all-defined-out)) is commented out
 >>>   * The struct is made #:transparent
 >>>
 >>> Similar tests with vectors, boxes, and mutable hash tables do not raise
 >>> runtime errors.
 >>>
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>>
 >>> (provide (all-defined-out))
 >>>
 >>> (struct: Foo ())
 >>>
 >>> (define hashof-foo
 >>>    ((inst make-immutable-hasheq Symbol Any)
 >>>     (list (cons 'key (list (Foo))))))
 >>>
 >>> ;; Runtime error from above:
 >>> ;; default-blame-format: contract violation
 >>> ;;   expected: a blame object with a non-#f positive field
 >>> ;;   given: #<blame>
 >>>
 >>> (define listof-foo ((inst list Any) (Foo)))
 >>>
 >>> ;; Runtime error from above:
 >>> ;; Attempted to use a higher-order value passed as `Any` in untyped code:
 >>> #<Foo>
 >>> ;;   in: an element of
 >>> ;;       (listof Any)
 >>> ;;   contract from: anonymous-module
 >>> ;;   blaming: incomplete-blame-from-provide.rkt
 >>> ;;   at: unsaved-editor755214:11.8
 >>>
 >>> (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >>>
 >>> ;; Runtime error from above is similar to that for `listof-foo'
 >>>
 >>> *** Environment:
 >>> unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 >>> 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>> (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 651899904
 >>> Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links #:root?
 >>> #t) = (); (links #:user? #f #:root? #t) =
 >>> (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 >>> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 >>> raco pkg (show):
 >>> /home/neil/plt/racket/share/devel-pkgs:
 >>>   Package              Checksum    Source
 >>>   main-distribution    #f          (static-link
 >>> ../../../pkgs/main-distribution)
 >>>   plt-services         #f          (static-link
 >>> ../../../pkgs/plt-services)
 >>>   racket-lib           #f          (static-link
 >>> ../../../pkgs/racket-pkgs/racket-lib)
 >>>   [204 auto-installed packages not shown]
 >>> Installation-wide:
 >>>   Package       Checksum                                    Source
 >>>   nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 >>> git://github.com/ntoronto/nonplussed)
 >>>   rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 >>> rsound)
 >>>   [1 auto-installed package not shown]
 >>> User-specific for installation "development":
 >>>   [none]
 >>>
 >>>
 >>>
 >>> Collections:
 >>> ("/home/neil/.racket/development/collects"
 >>>   (non-existent-path))
 >>> ("/home/neil/plt/racket/collects"
 >>>   (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >>> "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >>> "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 >>> "version" "xml"))
 >>>
 >>> Recent Internal Errors:
 >>> Computer Language: (("Determine language from source") (#(#t print
 >>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test)
 >>> (main)) #t))
 >>>
 >
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 11:04:55 -0700

 I don't know much about inspectors (as this next question will probably 
 demonstrate), but why aren't TR or the contracts it produces privileged 
 in this regard? (This question is also my response to Sam.)
 
 Is the expected performance penalty from using transparent structs in 
 untyped code only?
 
 Neil ⊥
 
 On 01/27/2014 10:55 AM, Eric Dobson wrote:
 > #:transparent means that it responds to struct?, and that we can then
 > go inside and inspect it and correctly protect the value from being
 > misused by the untyped world.
 >
 > Note that currently #:transparent opens up a soundness gap in TR and I
 > am working on a fix. I haven't finished and done the profiling but I
 > expect there will be a performance penalty for using #:transparent.
 >
 > On Mon, Jan 27, 2014 at 9:50 AM, Neil Toronto <neil.toronto@gmail.com> wrote:
 >> For my current code, I wouldn't mind if there was a fundamental limitation
 >> that precluded exporting a (Listof Any) if the value contains a
 >> non-transparent struct, as long as I could import it in another typed
 >> module.
 >>
 >> I do wonder why #:transparent makes any difference, though. Why would not
 >> having it make TR think the value is higher-order?
 >>
 >> Neil ⊥
 >>
 >>
 >> On 01/27/2014 10:10 AM, Eric Dobson wrote:
 >>>
 >>> The first part looks like a bug in the contract library, so I'll let
 >>> Robby take a look at that.
 >>>
 >>> For the second part I agree those error messages are bad, but I want
 >>> to make sure we agree on why.
 >>>
 >>> The issue that I think is problematic is that these values are not yet
 >>> used in untyped code so there shouldn't be a problem with the module
 >>> definition, and those errors should only come up once they are used in
 >>> an untyped context. Is that the problem you see?
 >>>
 >>> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 >>>>
 >>>> A new problem report is waiting at
 >>>>     http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >>>>
 >>>> Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >>>>
 >>>> *** Description:
 >>>> The program in reproduction steps fails with a runtime error on any of
 >>>> the three definitions. It works if:
 >>>>
 >>>>    * (provide (all-defined-out)) is commented out
 >>>>    * The struct is made #:transparent
 >>>>
 >>>> Similar tests with vectors, boxes, and mutable hash tables do not raise
 >>>> runtime errors.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang typed/racket
 >>>>
 >>>> (provide (all-defined-out))
 >>>>
 >>>> (struct: Foo ())
 >>>>
 >>>> (define hashof-foo
 >>>>     ((inst make-immutable-hasheq Symbol Any)
 >>>>      (list (cons 'key (list (Foo))))))
 >>>>
 >>>> ;; Runtime error from above:
 >>>> ;; default-blame-format: contract violation
 >>>> ;;   expected: a blame object with a non-#f positive field
 >>>> ;;   given: #<blame>
 >>>>
 >>>> (define listof-foo ((inst list Any) (Foo)))
 >>>>
 >>>> ;; Runtime error from above:
 >>>> ;; Attempted to use a higher-order value passed as `Any` in untyped code:
 >>>> #<Foo>
 >>>> ;;   in: an element of
 >>>> ;;       (listof Any)
 >>>> ;;   contract from: anonymous-module
 >>>> ;;   blaming: incomplete-blame-from-provide.rkt
 >>>> ;;   at: unsaved-editor755214:11.8
 >>>>
 >>>> (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >>>>
 >>>> ;; Runtime error from above is similar to that for `listof-foo'
 >>>>
 >>>> *** Environment:
 >>>> unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 >>>> 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>>> (get-display-depth) = 32
 >>>> Human Language: english
 >>>> (current-memory-use) 651899904
 >>>> Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links #:root?
 >>>> #t) = (); (links #:user? #f #:root? #t) =
 >>>> (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 >>>> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 >>>> raco pkg (show):
 >>>> /home/neil/plt/racket/share/devel-pkgs:
 >>>>    Package              Checksum    Source
 >>>>    main-distribution    #f          (static-link
 >>>> ../../../pkgs/main-distribution)
 >>>>    plt-services         #f          (static-link
 >>>> ../../../pkgs/plt-services)
 >>>>    racket-lib           #f          (static-link
 >>>> ../../../pkgs/racket-pkgs/racket-lib)
 >>>>    [204 auto-installed packages not shown]
 >>>> Installation-wide:
 >>>>    Package       Checksum                                    Source
 >>>>    nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 >>>> git://github.com/ntoronto/nonplussed)
 >>>>    rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 >>>> rsound)
 >>>>    [1 auto-installed package not shown]
 >>>> User-specific for installation "development":
 >>>>    [none]
 >>>>
 >>>>
 >>>>
 >>>> Collections:
 >>>> ("/home/neil/.racket/development/collects"
 >>>>    (non-existent-path))
 >>>> ("/home/neil/plt/racket/collects"
 >>>>    (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >>>> "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >>>> "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 >>>> "version" "xml"))
 >>>>
 >>>> Recent Internal Errors:
 >>>> Computer Language: (("Determine language from source") (#(#t print
 >>>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test)
 >>>> (main)) #t))
 >>>>
 >>
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 12:14:20 -0600

 --001a11c30fac37f80904f0f7adfe
 Content-Type: text/plain; charset=UTF-8
 
 On Mon, Jan 27, 2014 at 11:10 AM, Eric Dobson <eric.n.dobson@gmail.com>wrote:
 
 > The first part looks like a bug in the contract library, so I'll let
 > Robby take a look at that.
 >
 >
 That may or may not be the case. It would be easy to tell, I expect, if
 someone were to eliminate the TR parts of the program.
 
 Can someone help me with that?
 
 Robby
 
 
 > For the second part I agree those error messages are bad, but I want
 > to make sure we agree on why.
 >
 > The issue that I think is problematic is that these values are not yet
 > used in untyped code so there shouldn't be a problem with the module
 > definition, and those errors should only come up once they are used in
 > an untyped context. Is that the problem you see?
 >
 > On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 > >
 > > Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 > >
 > > *** Description:
 > > The program in reproduction steps fails with a runtime error on any of
 > the three definitions. It works if:
 > >
 > >  * (provide (all-defined-out)) is commented out
 > >  * The struct is made #:transparent
 > >
 > > Similar tests with vectors, boxes, and mutable hash tables do not raise
 > runtime errors.
 > >
 > > *** How to repeat:
 > > #lang typed/racket
 > >
 > > (provide (all-defined-out))
 > >
 > > (struct: Foo ())
 > >
 > > (define hashof-foo
 > >   ((inst make-immutable-hasheq Symbol Any)
 > >    (list (cons 'key (list (Foo))))))
 > >
 > > ;; Runtime error from above:
 > > ;; default-blame-format: contract violation
 > > ;;   expected: a blame object with a non-#f positive field
 > > ;;   given: #<blame>
 > >
 > > (define listof-foo ((inst list Any) (Foo)))
 > >
 > > ;; Runtime error from above:
 > > ;; Attempted to use a higher-order value passed as `Any` in untyped
 > code: #<Foo>
 > > ;;   in: an element of
 > > ;;       (listof Any)
 > > ;;   contract from: anonymous-module
 > > ;;   blaming: incomplete-blame-from-provide.rkt
 > > ;;   at: unsaved-editor755214:11.8
 > >
 > > (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 > >
 > > ;; Runtime error from above is similar to that for `listof-foo'
 > >
 > > *** Environment:
 > > unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 > 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > (get-display-depth) = 32
 > > Human Language: english
 > > (current-memory-use) 651899904
 > > Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links #:root?
 > #t) = (); (links #:user? #f #:root? #t) =
 > (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 > #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 > > raco pkg (show):
 > > /home/neil/plt/racket/share/devel-pkgs:
 > >  Package              Checksum    Source
 > >  main-distribution    #f          (static-link
 > ../../../pkgs/main-distribution)
 > >  plt-services         #f          (static-link
 > ../../../pkgs/plt-services)
 > >  racket-lib           #f          (static-link
 > ../../../pkgs/racket-pkgs/racket-lib)
 > >  [204 auto-installed packages not shown]
 > > Installation-wide:
 > >  Package       Checksum                                    Source
 > >  nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url git://
 > github.com/ntoronto/nonplussed)
 > >  rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 > rsound)
 > >  [1 auto-installed package not shown]
 > > User-specific for installation "development":
 > >  [none]
 > >
 > >
 > >
 > > Collections:
 > > ("/home/neil/.racket/development/collects"
 > >  (non-existent-path))
 > > ("/home/neil/plt/racket/collects"
 > >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 > "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 > "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 > "version" "xml"))
 > >
 > > Recent Internal Errors:
 > > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test)
 > (main)) #t))
 > >
 >
 
 --001a11c30fac37f80904f0f7adfe
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Mon, Jan 27, 2014 at 11:10 AM, Eric Dobson <span dir=3D"ltr">&lt=
 ;<a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson=
 @gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">The first part looks like a bug in the contr=
 act library, so I&#39;ll let<br>
 Robby take a look at that.<br>
 <br></blockquote><div><br></div><div>That may or may not be the case. It wo=
 uld be easy to tell, I expect, if someone were to eliminate the TR parts of=
  the program.</div><div><br></div><div>Can someone help me with that?</div>
 <div><br></div><div>Robby</div><div>=C2=A0</div><blockquote class=3D"gmail_=
 quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=
 ex">
 For the second part I agree those error messages are bad, but I want<br>
 to make sure we agree on why.<br>
 <br>
 The issue that I think is problematic is that these values are not yet<br>
 used in untyped code so there shouldn&#39;t be a problem with the module<br=
 >
 definition, and those errors should only come up once they are used in<br>
 an untyped context. Is that the problem you see?<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Sun, Jan 26, 2014 at 7:24 PM, =C2=A0&lt;<a href=3D"mailto:neil.toronto@g=
 mail.com">neil.toronto@gmail.com</a>&gt; wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14316" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D14316</a><br>
 &gt;<br>
 &gt; Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)<=
 br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; The program in reproduction steps fails with a runtime error on any of=
  the three definitions. It works if:<br>
 &gt;<br>
 &gt; =C2=A0* (provide (all-defined-out)) is commented out<br>
 &gt; =C2=A0* The struct is made #:transparent<br>
 &gt;<br>
 &gt; Similar tests with vectors, boxes, and mutable hash tables do not rais=
 e runtime errors.<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt; #lang typed/racket<br>
 &gt;<br>
 &gt; (provide (all-defined-out))<br>
 &gt;<br>
 &gt; (struct: Foo ())<br>
 &gt;<br>
 &gt; (define hashof-foo<br>
 &gt; =C2=A0 ((inst make-immutable-hasheq Symbol Any)<br>
 &gt; =C2=A0 =C2=A0(list (cons &#39;key (list (Foo))))))<br>
 &gt;<br>
 &gt; ;; Runtime error from above:<br>
 &gt; ;; default-blame-format: contract violation<br>
 &gt; ;; =C2=A0 expected: a blame object with a non-#f positive field<br>
 &gt; ;; =C2=A0 given: #&lt;blame&gt;<br>
 &gt;<br>
 &gt; (define listof-foo ((inst list Any) (Foo)))<br>
 &gt;<br>
 &gt; ;; Runtime error from above:<br>
 &gt; ;; Attempted to use a higher-order value passed as `Any` in untyped co=
 de: #&lt;Foo&gt;<br>
 &gt; ;; =C2=A0 in: an element of<br>
 &gt; ;; =C2=A0 =C2=A0 =C2=A0 (listof Any)<br>
 &gt; ;; =C2=A0 contract from: anonymous-module<br>
 &gt; ;; =C2=A0 blaming: incomplete-blame-from-provide.rkt<br>
 &gt; ;; =C2=A0 at: unsaved-editor755214:11.8<br>
 &gt;<br>
 &gt; (define consof-foo ((inst cons Symbol Any) &#39;key (Foo)))<br>
 &gt;<br>
 &gt; ;; Runtime error from above is similar to that for `listof-foo&#39;<br=
 >
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; unix &quot;Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12=
  17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-linux/3m) (=
 get-display-depth) =3D 32<br>
 &gt; Human Language: english<br>
 &gt; (current-memory-use) 651899904<br>
 &gt; Links: (links) =3D (); (links #:user? #f) =3D (&quot;nonplussed&quot;)=
 ; (links #:root? #t) =3D (); (links #:user? #f #:root? #t) =3D (#&lt;path:/=
 home/neil/plt/racket/share/pkgs/rsound&gt; #&lt;path:/home/neil/plt/racket/=
 share/pkgs/portaudio&gt;)<br>
 
 &gt; raco pkg (show):<br>
 &gt; /home/neil/plt/racket/share/devel-pkgs:<br>
 &gt; =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Checksum=
  =C2=A0 =C2=A0Source<br>
 &gt; =C2=A0main-distribution =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0(static-link ../../../pkgs/main-distribution)<br>
 &gt; =C2=A0plt-services =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0(static-link ../../../pkgs/plt-services)<br>
 &gt; =C2=A0racket-lib =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0(static-link ../../../pkgs/racket-pkgs/racket-lib)<br>
 &gt; =C2=A0[204 auto-installed packages not shown]<br>
 &gt; Installation-wide:<br>
 &gt; =C2=A0Package =C2=A0 =C2=A0 =C2=A0 Checksum =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0Source<br>
 &gt; =C2=A0nonplussed =C2=A0 =C2=A0f6c069990eb6b0b3356f872fcce82a3fb2fe805a=
  =C2=A0 =C2=A0(url git://<a href=3D"http://github.com/ntoronto/nonplussed" =
 target=3D"_blank">github.com/ntoronto/nonplussed</a>)<br>
 &gt; =C2=A0rsound =C2=A0 =C2=A0 =C2=A0 =C2=A04f5d4d154eb7585b96b24298b79e33=
 81bab8f1a5 =C2=A0 =C2=A0(catalog rsound)<br>
 &gt; =C2=A0[1 auto-installed package not shown]<br>
 &gt; User-specific for installation &quot;development&quot;:<br>
 &gt; =C2=A0[none]<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; Collections:<br>
 &gt; (&quot;/home/neil/.racket/development/collects&quot;<br>
 &gt; =C2=A0(non-existent-path))<br>
 &gt; (&quot;/home/neil/plt/racket/collects&quot;<br>
 &gt; =C2=A0(&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler&quot; &q=
 uot;data&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &quot;file=
 &quot; &quot;info&quot; &quot;info-domain&quot; &quot;json&quot; &quot;laun=
 cher&quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet=
 &quot; &quot;racket&quot; &quot;raco&quot; &quot;reader&quot; &quot;realm&q=
 uot; &quot;s-exp&quot; &quot;setup&quot; &quot;syntax&quot; &quot;unstable&=
 quot; &quot;version&quot; &quot;xml&quot;))<br>
 
 &gt;<br>
 &gt; Recent Internal Errors:<br>
 &gt; Computer Language: ((&quot;Determine language from source&quot;) (#(#t=
  print mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quo=
 t; #t #t ((test) (main)) #t))<br>
 &gt;<br>
 </div></div></blockquote></div><br></div></div>
 
 --001a11c30fac37f80904f0f7adfe--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 12:18:30 -0600

 --001a11c2e60a1e50db04f0f7bc53
 Content-Type: text/plain; charset=UTF-8
 
 I get this error, which looks different.
 
 Welcome to DrRacket, version 6.0.0.1--2014-01-25(b020b8ae/d) [3m].
 Language: racket; memory limit: 256 MB.
 . . git/exp/plt/racket/collects/racket/contract/private/blame.rkt:143:0: x:
 contract violation
   Attempted to use a higher-order value passed as `Any` in untyped code:
 #<f>
   in: Any
   contract from: anonymous-module
   blaming: incomplete-blame-from-provide.rkt
   at: unsaved-editor149059:5.19
 >
 
 
 On Mon, Jan 27, 2014 at 12:16 PM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu>wrote:
 
 > Here's the relevant program:
 >
 > #lang racket
 > (require typed-racket/utils/any-wrap)
 > (struct f ())
 > (define x (list (f)))
 > (provide/contract [x any-wrap/c])
 >
 > Hitting "run" in DrR produces the same error.
 >
 > Sam
 >
 > On Mon, Jan 27, 2014 at 1:14 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > >
 > >
 > >
 > > On Mon, Jan 27, 2014 at 11:10 AM, Eric Dobson <eric.n.dobson@gmail.com>
 > > wrote:
 > >>
 > >> The first part looks like a bug in the contract library, so I'll let
 > >> Robby take a look at that.
 > >>
 > >
 > > That may or may not be the case. It would be easy to tell, I expect, if
 > > someone were to eliminate the TR parts of the program.
 > >
 > > Can someone help me with that?
 > >
 > > Robby
 > >
 > >>
 > >> For the second part I agree those error messages are bad, but I want
 > >> to make sure we agree on why.
 > >>
 > >> The issue that I think is problematic is that these values are not yet
 > >> used in untyped code so there shouldn't be a problem with the module
 > >> definition, and those errors should only come up once they are used in
 > >> an untyped context. Is that the problem you see?
 > >>
 > >> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 > >> > A new problem report is waiting at
 > >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 > >> >
 > >> > Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 > >> >
 > >> > *** Description:
 > >> > The program in reproduction steps fails with a runtime error on any of
 > >> > the three definitions. It works if:
 > >> >
 > >> >  * (provide (all-defined-out)) is commented out
 > >> >  * The struct is made #:transparent
 > >> >
 > >> > Similar tests with vectors, boxes, and mutable hash tables do not
 > raise
 > >> > runtime errors.
 > >> >
 > >> > *** How to repeat:
 > >> > #lang typed/racket
 > >> >
 > >> > (provide (all-defined-out))
 > >> >
 > >> > (struct: Foo ())
 > >> >
 > >> > (define hashof-foo
 > >> >   ((inst make-immutable-hasheq Symbol Any)
 > >> >    (list (cons 'key (list (Foo))))))
 > >> >
 > >> > ;; Runtime error from above:
 > >> > ;; default-blame-format: contract violation
 > >> > ;;   expected: a blame object with a non-#f positive field
 > >> > ;;   given: #<blame>
 > >> >
 > >> > (define listof-foo ((inst list Any) (Foo)))
 > >> >
 > >> > ;; Runtime error from above:
 > >> > ;; Attempted to use a higher-order value passed as `Any` in untyped
 > >> > code: #<Foo>
 > >> > ;;   in: an element of
 > >> > ;;       (listof Any)
 > >> > ;;   contract from: anonymous-module
 > >> > ;;   blaming: incomplete-blame-from-provide.rkt
 > >> > ;;   at: unsaved-editor755214:11.8
 > >> >
 > >> > (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 > >> >
 > >> > ;; Runtime error from above is similar to that for `listof-foo'
 > >> >
 > >> > *** Environment:
 > >> > unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 > >> > 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > >> > (get-display-depth) = 32
 > >> > Human Language: english
 > >> > (current-memory-use) 651899904
 > >> > Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links
 > #:root?
 > >> > #t) = (); (links #:user? #f #:root? #t) =
 > >> > (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 > >> > #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 > >> > raco pkg (show):
 > >> > /home/neil/plt/racket/share/devel-pkgs:
 > >> >  Package              Checksum    Source
 > >> >  main-distribution    #f          (static-link
 > >> > ../../../pkgs/main-distribution)
 > >> >  plt-services         #f          (static-link
 > >> > ../../../pkgs/plt-services)
 > >> >  racket-lib           #f          (static-link
 > >> > ../../../pkgs/racket-pkgs/racket-lib)
 > >> >  [204 auto-installed packages not shown]
 > >> > Installation-wide:
 > >> >  Package       Checksum                                    Source
 > >> >  nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 > >> > git://github.com/ntoronto/nonplussed)
 > >> >  rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 > >> > rsound)
 > >> >  [1 auto-installed package not shown]
 > >> > User-specific for installation "development":
 > >> >  [none]
 > >> >
 > >> >
 > >> >
 > >> > Collections:
 > >> > ("/home/neil/.racket/development/collects"
 > >> >  (non-existent-path))
 > >> > ("/home/neil/plt/racket/collects"
 > >> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 > >> > "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 > >> > "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 > >> > "version" "xml"))
 > >> >
 > >> > Recent Internal Errors:
 > >> > Computer Language: (("Determine language from source") (#(#t print
 > >> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 > ((test)
 > >> > (main)) #t))
 > >> >
 > >
 > >
 >
 
 --001a11c2e60a1e50db04f0f7bc53
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I get this error, which looks different.<div><br></div><di=
 v><div>Welcome to DrRacket, version 6.0.0.1--2014-01-25(b020b8ae/d) [3m].</=
 div><div>Language: racket; memory limit: 256 MB.</div><div>. . git/exp/plt/=
 racket/collects/racket/contract/private/blame.rkt:143:0: x: contract violat=
 ion</div>
 <div>=C2=A0 Attempted to use a higher-order value passed as `Any` in untype=
 d code: #&lt;f&gt;</div><div>=C2=A0 in: Any</div><div>=C2=A0 contract from:=
  anonymous-module</div><div>=C2=A0 blaming: incomplete-blame-from-provide.r=
 kt</div><div>=C2=A0 at: unsaved-editor149059:5.19</div>
 <div>&gt;=C2=A0</div></div></div><div class=3D"gmail_extra"><br><br><div cl=
 ass=3D"gmail_quote">On Mon, Jan 27, 2014 at 12:16 PM, Sam Tobin-Hochstadt <=
 span dir=3D"ltr">&lt;<a href=3D"mailto:samth@cs.indiana.edu" target=3D"_bla=
 nk">samth@cs.indiana.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">Here&#39;s the relevant program:<br>
 <br>
 #lang racket<br>
 (require typed-racket/utils/any-wrap)<br>
 (struct f ())<br>
 (define x (list (f)))<br>
 (provide/contract [x any-wrap/c])<br>
 <br>
 Hitting &quot;run&quot; in DrR produces the same error.<br>
 <span class=3D"HOEnZb"><font color=3D"#888888"><br>
 Sam<br>
 </font></span><div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Mon, Jan 27, 2014 at 1:14 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; On Mon, Jan 27, 2014 at 11:10 AM, Eric Dobson &lt;<a href=3D"mailto:er=
 ic.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; The first part looks like a bug in the contract library, so I&#39;=
 ll let<br>
 &gt;&gt; Robby take a look at that.<br>
 &gt;&gt;<br>
 &gt;<br>
 &gt; That may or may not be the case. It would be easy to tell, I expect, i=
 f<br>
 &gt; someone were to eliminate the TR parts of the program.<br>
 &gt;<br>
 &gt; Can someone help me with that?<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;&gt;<br>
 &gt;&gt; For the second part I agree those error messages are bad, but I wa=
 nt<br>
 &gt;&gt; to make sure we agree on why.<br>
 &gt;&gt;<br>
 &gt;&gt; The issue that I think is problematic is that these values are not=
  yet<br>
 &gt;&gt; used in untyped code so there shouldn&#39;t be a problem with the =
 module<br>
 &gt;&gt; definition, and those errors should only come up once they are use=
 d in<br>
 &gt;&gt; an untyped context. Is that the problem you see?<br>
 &gt;&gt;<br>
 &gt;&gt; On Sun, Jan 26, 2014 at 7:24 PM, =C2=A0&lt;<a href=3D"mailto:neil.=
 toronto@gmail.com">neil.toronto@gmail.com</a>&gt; wrote:<br>
 &gt;&gt; &gt; A new problem report is waiting at<br>
 &gt;&gt; &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D14316" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D14316</a><br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a39=
 1556f/d)<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** Description:<br>
 &gt;&gt; &gt; The program in reproduction steps fails with a runtime error =
 on any of<br>
 &gt;&gt; &gt; the three definitions. It works if:<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; =C2=A0* (provide (all-defined-out)) is commented out<br>
 &gt;&gt; &gt; =C2=A0* The struct is made #:transparent<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Similar tests with vectors, boxes, and mutable hash tables do=
  not raise<br>
 &gt;&gt; &gt; runtime errors.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** How to repeat:<br>
 &gt;&gt; &gt; #lang typed/racket<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (provide (all-defined-out))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (struct: Foo ())<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (define hashof-foo<br>
 &gt;&gt; &gt; =C2=A0 ((inst make-immutable-hasheq Symbol Any)<br>
 &gt;&gt; &gt; =C2=A0 =C2=A0(list (cons &#39;key (list (Foo))))))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; ;; Runtime error from above:<br>
 &gt;&gt; &gt; ;; default-blame-format: contract violation<br>
 &gt;&gt; &gt; ;; =C2=A0 expected: a blame object with a non-#f positive fie=
 ld<br>
 &gt;&gt; &gt; ;; =C2=A0 given: #&lt;blame&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (define listof-foo ((inst list Any) (Foo)))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; ;; Runtime error from above:<br>
 &gt;&gt; &gt; ;; Attempted to use a higher-order value passed as `Any` in u=
 ntyped<br>
 &gt;&gt; &gt; code: #&lt;Foo&gt;<br>
 &gt;&gt; &gt; ;; =C2=A0 in: an element of<br>
 &gt;&gt; &gt; ;; =C2=A0 =C2=A0 =C2=A0 (listof Any)<br>
 &gt;&gt; &gt; ;; =C2=A0 contract from: anonymous-module<br>
 &gt;&gt; &gt; ;; =C2=A0 blaming: incomplete-blame-from-provide.rkt<br>
 &gt;&gt; &gt; ;; =C2=A0 at: unsaved-editor755214:11.8<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; (define consof-foo ((inst cons Symbol Any) &#39;key (Foo)))<b=
 r>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; ;; Runtime error from above is similar to that for `listof-fo=
 o&#39;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; *** Environment:<br>
 &gt;&gt; &gt; unix &quot;Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP T=
 ue Nov 12<br>
 &gt;&gt; &gt; 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_6=
 4-linux/3m)<br>
 &gt;&gt; &gt; (get-display-depth) =3D 32<br>
 &gt;&gt; &gt; Human Language: english<br>
 &gt;&gt; &gt; (current-memory-use) 651899904<br>
 &gt;&gt; &gt; Links: (links) =3D (); (links #:user? #f) =3D (&quot;nonpluss=
 ed&quot;); (links #:root?<br>
 &gt;&gt; &gt; #t) =3D (); (links #:user? #f #:root? #t) =3D<br>
 &gt;&gt; &gt; (#&lt;path:/home/neil/plt/racket/share/pkgs/rsound&gt;<br>
 &gt;&gt; &gt; #&lt;path:/home/neil/plt/racket/share/pkgs/portaudio&gt;)<br>
 &gt;&gt; &gt; raco pkg (show):<br>
 &gt;&gt; &gt; /home/neil/plt/racket/share/devel-pkgs:<br>
 &gt;&gt; &gt; =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0Checksum =C2=A0 =C2=A0Source<br>
 &gt;&gt; &gt; =C2=A0main-distribution =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0(static-link<br>
 &gt;&gt; &gt; ../../../pkgs/main-distribution)<br>
 &gt;&gt; &gt; =C2=A0plt-services =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0(static-link<br>
 &gt;&gt; &gt; ../../../pkgs/plt-services)<br>
 &gt;&gt; &gt; =C2=A0racket-lib =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0(static-link<br>
 &gt;&gt; &gt; ../../../pkgs/racket-pkgs/racket-lib)<br>
 &gt;&gt; &gt; =C2=A0[204 auto-installed packages not shown]<br>
 &gt;&gt; &gt; Installation-wide:<br>
 &gt;&gt; &gt; =C2=A0Package =C2=A0 =C2=A0 =C2=A0 Checksum =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Source<br>
 &gt;&gt; &gt; =C2=A0nonplussed =C2=A0 =C2=A0f6c069990eb6b0b3356f872fcce82a3=
 fb2fe805a =C2=A0 =C2=A0(url<br>
 &gt;&gt; &gt; git://<a href=3D"http://github.com/ntoronto/nonplussed" targe=
 t=3D"_blank">github.com/ntoronto/nonplussed</a>)<br>
 &gt;&gt; &gt; =C2=A0rsound =C2=A0 =C2=A0 =C2=A0 =C2=A04f5d4d154eb7585b96b24=
 298b79e3381bab8f1a5 =C2=A0 =C2=A0(catalog<br>
 &gt;&gt; &gt; rsound)<br>
 &gt;&gt; &gt; =C2=A0[1 auto-installed package not shown]<br>
 &gt;&gt; &gt; User-specific for installation &quot;development&quot;:<br>
 &gt;&gt; &gt; =C2=A0[none]<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Collections:<br>
 &gt;&gt; &gt; (&quot;/home/neil/.racket/development/collects&quot;<br>
 &gt;&gt; &gt; =C2=A0(non-existent-path))<br>
 &gt;&gt; &gt; (&quot;/home/neil/plt/racket/collects&quot;<br>
 &gt;&gt; &gt; =C2=A0(&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler=
 &quot; &quot;data&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &=
 quot;file&quot;<br>
 &gt;&gt; &gt; &quot;info&quot; &quot;info-domain&quot; &quot;json&quot; &qu=
 ot;launcher&quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&quot; &quot=
 ;planet&quot;<br>
 &gt;&gt; &gt; &quot;racket&quot; &quot;raco&quot; &quot;reader&quot; &quot;=
 realm&quot; &quot;s-exp&quot; &quot;setup&quot; &quot;syntax&quot; &quot;un=
 stable&quot;<br>
 &gt;&gt; &gt; &quot;version&quot; &quot;xml&quot;))<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Recent Internal Errors:<br>
 &gt;&gt; &gt; Computer Language: ((&quot;Determine language from source&quo=
 t;) (#(#t print<br>
 &gt;&gt; &gt; mixed-fraction-e #f #t debug) (default) #() &quot;#lang racke=
 t\n&quot; #t #t ((test)<br>
 &gt;&gt; &gt; (main)) #t))<br>
 &gt;&gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --001a11c2e60a1e50db04f0f7bc53--
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 13:16:20 -0500

 Here's the relevant program:
 
 #lang racket
 (require typed-racket/utils/any-wrap)
 (struct f ())
 (define x (list (f)))
 (provide/contract [x any-wrap/c])
 
 Hitting "run" in DrR produces the same error.
 
 Sam
 
 On Mon, Jan 27, 2014 at 1:14 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 >
 >
 >
 > On Mon, Jan 27, 2014 at 11:10 AM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 >>
 >> The first part looks like a bug in the contract library, so I'll let
 >> Robby take a look at that.
 >>
 >
 > That may or may not be the case. It would be easy to tell, I expect, if
 > someone were to eliminate the TR parts of the program.
 >
 > Can someone help me with that?
 >
 > Robby
 >
 >>
 >> For the second part I agree those error messages are bad, but I want
 >> to make sure we agree on why.
 >>
 >> The issue that I think is problematic is that these values are not yet
 >> used in untyped code so there shouldn't be a problem with the module
 >> definition, and those errors should only come up once they are used in
 >> an untyped context. Is that the problem you see?
 >>
 >> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >> >
 >> > Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >> >
 >> > *** Description:
 >> > The program in reproduction steps fails with a runtime error on any of
 >> > the three definitions. It works if:
 >> >
 >> >  * (provide (all-defined-out)) is commented out
 >> >  * The struct is made #:transparent
 >> >
 >> > Similar tests with vectors, boxes, and mutable hash tables do not raise
 >> > runtime errors.
 >> >
 >> > *** How to repeat:
 >> > #lang typed/racket
 >> >
 >> > (provide (all-defined-out))
 >> >
 >> > (struct: Foo ())
 >> >
 >> > (define hashof-foo
 >> >   ((inst make-immutable-hasheq Symbol Any)
 >> >    (list (cons 'key (list (Foo))))))
 >> >
 >> > ;; Runtime error from above:
 >> > ;; default-blame-format: contract violation
 >> > ;;   expected: a blame object with a non-#f positive field
 >> > ;;   given: #<blame>
 >> >
 >> > (define listof-foo ((inst list Any) (Foo)))
 >> >
 >> > ;; Runtime error from above:
 >> > ;; Attempted to use a higher-order value passed as `Any` in untyped
 >> > code: #<Foo>
 >> > ;;   in: an element of
 >> > ;;       (listof Any)
 >> > ;;   contract from: anonymous-module
 >> > ;;   blaming: incomplete-blame-from-provide.rkt
 >> > ;;   at: unsaved-editor755214:11.8
 >> >
 >> > (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >> >
 >> > ;; Runtime error from above is similar to that for `listof-foo'
 >> >
 >> > *** Environment:
 >> > unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 >> > 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >> > (get-display-depth) = 32
 >> > Human Language: english
 >> > (current-memory-use) 651899904
 >> > Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links #:root?
 >> > #t) = (); (links #:user? #f #:root? #t) =
 >> > (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 >> > #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 >> > raco pkg (show):
 >> > /home/neil/plt/racket/share/devel-pkgs:
 >> >  Package              Checksum    Source
 >> >  main-distribution    #f          (static-link
 >> > ../../../pkgs/main-distribution)
 >> >  plt-services         #f          (static-link
 >> > ../../../pkgs/plt-services)
 >> >  racket-lib           #f          (static-link
 >> > ../../../pkgs/racket-pkgs/racket-lib)
 >> >  [204 auto-installed packages not shown]
 >> > Installation-wide:
 >> >  Package       Checksum                                    Source
 >> >  nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 >> > git://github.com/ntoronto/nonplussed)
 >> >  rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 >> > rsound)
 >> >  [1 auto-installed package not shown]
 >> > User-specific for installation "development":
 >> >  [none]
 >> >
 >> >
 >> >
 >> > Collections:
 >> > ("/home/neil/.racket/development/collects"
 >> >  (non-existent-path))
 >> > ("/home/neil/plt/racket/collects"
 >> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >> > "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >> > "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 >> > "version" "xml"))
 >> >
 >> > Recent Internal Errors:
 >> > Computer Language: (("Determine language from source") (#(#t print
 >> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test)
 >> > (main)) #t))
 >> >
 >
 >
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 13:20:25 -0500

 On Mon, Jan 27, 2014 at 1:04 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > I don't know much about inspectors (as this next question will probably
 > demonstrate), but why aren't TR or the contracts it produces privileged in
 > this regard? (This question is also my response to Sam.)
 
 Typed Racket is "privileged" in the sense that it's the compiler for
 your code, and can thus re-write it to do whatever it wants.  However,
 that doesn't extend to producing code that violates the invariants of
 the underlying system, one of which is that opaque structures are
 truly opaque. The right perspective is that _everything_ in Racket is
 a struct in some sense, even pairs and syntax objects, and inspectors
 are how we distinguish who controls that level of abstraction.  So if
 you create an abstraction, Typed Racket can't possibly generate code
 that can violate it, any more than it can violate a closure's
 abstraction.
 
 Typed Racket could just re-write your struct definition to be one that
 it could inspect, but that wouldn't help if the struct was in another,
 untyped module.
 
 > Is the expected performance penalty from using transparent structs in
 > untyped code only?
 
 Yes (although I'm not sure exactly what strategy Eric is planning).
 
 >
 > Neil ⊥
 >
 >
 > On 01/27/2014 10:55 AM, Eric Dobson wrote:
 >>
 >> #:transparent means that it responds to struct?, and that we can then
 >> go inside and inspect it and correctly protect the value from being
 >> misused by the untyped world.
 >>
 >> Note that currently #:transparent opens up a soundness gap in TR and I
 >> am working on a fix. I haven't finished and done the profiling but I
 >> expect there will be a performance penalty for using #:transparent.
 >>
 >> On Mon, Jan 27, 2014 at 9:50 AM, Neil Toronto <neil.toronto@gmail.com>
 >> wrote:
 >>>
 >>> For my current code, I wouldn't mind if there was a fundamental
 >>> limitation
 >>> that precluded exporting a (Listof Any) if the value contains a
 >>> non-transparent struct, as long as I could import it in another typed
 >>> module.
 >>>
 >>> I do wonder why #:transparent makes any difference, though. Why would not
 >>> having it make TR think the value is higher-order?
 >>>
 >>> Neil ⊥
 >>>
 >>>
 >>> On 01/27/2014 10:10 AM, Eric Dobson wrote:
 >>>>
 >>>>
 >>>> The first part looks like a bug in the contract library, so I'll let
 >>>> Robby take a look at that.
 >>>>
 >>>> For the second part I agree those error messages are bad, but I want
 >>>> to make sure we agree on why.
 >>>>
 >>>> The issue that I think is problematic is that these values are not yet
 >>>> used in untyped code so there shouldn't be a problem with the module
 >>>> definition, and those errors should only come up once they are used in
 >>>> an untyped context. Is that the problem you see?
 >>>>
 >>>> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 >>>>>
 >>>>>
 >>>>> A new problem report is waiting at
 >>>>>     http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >>>>>
 >>>>> Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >>>>>
 >>>>> *** Description:
 >>>>> The program in reproduction steps fails with a runtime error on any of
 >>>>> the three definitions. It works if:
 >>>>>
 >>>>>    * (provide (all-defined-out)) is commented out
 >>>>>    * The struct is made #:transparent
 >>>>>
 >>>>> Similar tests with vectors, boxes, and mutable hash tables do not raise
 >>>>> runtime errors.
 >>>>>
 >>>>> *** How to repeat:
 >>>>> #lang typed/racket
 >>>>>
 >>>>> (provide (all-defined-out))
 >>>>>
 >>>>> (struct: Foo ())
 >>>>>
 >>>>> (define hashof-foo
 >>>>>     ((inst make-immutable-hasheq Symbol Any)
 >>>>>      (list (cons 'key (list (Foo))))))
 >>>>>
 >>>>> ;; Runtime error from above:
 >>>>> ;; default-blame-format: contract violation
 >>>>> ;;   expected: a blame object with a non-#f positive field
 >>>>> ;;   given: #<blame>
 >>>>>
 >>>>> (define listof-foo ((inst list Any) (Foo)))
 >>>>>
 >>>>> ;; Runtime error from above:
 >>>>> ;; Attempted to use a higher-order value passed as `Any` in untyped
 >>>>> code:
 >>>>> #<Foo>
 >>>>> ;;   in: an element of
 >>>>> ;;       (listof Any)
 >>>>> ;;   contract from: anonymous-module
 >>>>> ;;   blaming: incomplete-blame-from-provide.rkt
 >>>>> ;;   at: unsaved-editor755214:11.8
 >>>>>
 >>>>> (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >>>>>
 >>>>> ;; Runtime error from above is similar to that for `listof-foo'
 >>>>>
 >>>>> *** Environment:
 >>>>> unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 >>>>> 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>>>> (get-display-depth) = 32
 >>>>> Human Language: english
 >>>>> (current-memory-use) 651899904
 >>>>> Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links
 >>>>> #:root?
 >>>>> #t) = (); (links #:user? #f #:root? #t) =
 >>>>> (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 >>>>> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 >>>>> raco pkg (show):
 >>>>> /home/neil/plt/racket/share/devel-pkgs:
 >>>>>    Package              Checksum    Source
 >>>>>    main-distribution    #f          (static-link
 >>>>> ../../../pkgs/main-distribution)
 >>>>>    plt-services         #f          (static-link
 >>>>> ../../../pkgs/plt-services)
 >>>>>    racket-lib           #f          (static-link
 >>>>> ../../../pkgs/racket-pkgs/racket-lib)
 >>>>>    [204 auto-installed packages not shown]
 >>>>> Installation-wide:
 >>>>>    Package       Checksum                                    Source
 >>>>>    nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 >>>>> git://github.com/ntoronto/nonplussed)
 >>>>>    rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 >>>>> rsound)
 >>>>>    [1 auto-installed package not shown]
 >>>>> User-specific for installation "development":
 >>>>>    [none]
 >>>>>
 >>>>>
 >>>>>
 >>>>> Collections:
 >>>>> ("/home/neil/.racket/development/collects"
 >>>>>    (non-existent-path))
 >>>>> ("/home/neil/plt/racket/collects"
 >>>>>    (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >>>>> "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >>>>> "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 >>>>> "version" "xml"))
 >>>>>
 >>>>> Recent Internal Errors:
 >>>>> Computer Language: (("Determine language from source") (#(#t print
 >>>>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 >>>>> ((test)
 >>>>> (main)) #t))
 >>>>>
 >>>
 >
 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 13:22:52 -0500

 That's the same error Neil got from the `list` version of his example.
 To get the internal error in the contract library, try:
 
 #lang racket
 
 (require typed-racket/utils/any-wrap)
 (struct f ())
 (define x (make-immutable-hasheq (list (cons 1 (f)))))
 (provide/contract [x (hash/c any/c any-wrap/c)])
 
 On Mon, Jan 27, 2014 at 1:18 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I get this error, which looks different.
 >
 > Welcome to DrRacket, version 6.0.0.1--2014-01-25(b020b8ae/d) [3m].
 > Language: racket; memory limit: 256 MB.
 > . . git/exp/plt/racket/collects/racket/contract/private/blame.rkt:143:0: x:
 > contract violation
 >   Attempted to use a higher-order value passed as `Any` in untyped code:
 > #<f>
 >   in: Any
 >   contract from: anonymous-module
 >   blaming: incomplete-blame-from-provide.rkt
 >   at: unsaved-editor149059:5.19
 >>
 >
 >
 > On Mon, Jan 27, 2014 at 12:16 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu>
 > wrote:
 >>
 >> Here's the relevant program:
 >>
 >> #lang racket
 >> (require typed-racket/utils/any-wrap)
 >> (struct f ())
 >> (define x (list (f)))
 >> (provide/contract [x any-wrap/c])
 >>
 >> Hitting "run" in DrR produces the same error.
 >>
 >> Sam
 >>
 >> On Mon, Jan 27, 2014 at 1:14 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> >
 >> >
 >> >
 >> > On Mon, Jan 27, 2014 at 11:10 AM, Eric Dobson <eric.n.dobson@gmail.com>
 >> > wrote:
 >> >>
 >> >> The first part looks like a bug in the contract library, so I'll let
 >> >> Robby take a look at that.
 >> >>
 >> >
 >> > That may or may not be the case. It would be easy to tell, I expect, if
 >> > someone were to eliminate the TR parts of the program.
 >> >
 >> > Can someone help me with that?
 >> >
 >> > Robby
 >> >
 >> >>
 >> >> For the second part I agree those error messages are bad, but I want
 >> >> to make sure we agree on why.
 >> >>
 >> >> The issue that I think is problematic is that these values are not yet
 >> >> used in untyped code so there shouldn't be a problem with the module
 >> >> definition, and those errors should only come up once they are used in
 >> >> an untyped context. Is that the problem you see?
 >> >>
 >> >> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 >> >> > A new problem report is waiting at
 >> >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >> >> >
 >> >> > Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >> >> >
 >> >> > *** Description:
 >> >> > The program in reproduction steps fails with a runtime error on any
 >> >> > of
 >> >> > the three definitions. It works if:
 >> >> >
 >> >> >  * (provide (all-defined-out)) is commented out
 >> >> >  * The struct is made #:transparent
 >> >> >
 >> >> > Similar tests with vectors, boxes, and mutable hash tables do not
 >> >> > raise
 >> >> > runtime errors.
 >> >> >
 >> >> > *** How to repeat:
 >> >> > #lang typed/racket
 >> >> >
 >> >> > (provide (all-defined-out))
 >> >> >
 >> >> > (struct: Foo ())
 >> >> >
 >> >> > (define hashof-foo
 >> >> >   ((inst make-immutable-hasheq Symbol Any)
 >> >> >    (list (cons 'key (list (Foo))))))
 >> >> >
 >> >> > ;; Runtime error from above:
 >> >> > ;; default-blame-format: contract violation
 >> >> > ;;   expected: a blame object with a non-#f positive field
 >> >> > ;;   given: #<blame>
 >> >> >
 >> >> > (define listof-foo ((inst list Any) (Foo)))
 >> >> >
 >> >> > ;; Runtime error from above:
 >> >> > ;; Attempted to use a higher-order value passed as `Any` in untyped
 >> >> > code: #<Foo>
 >> >> > ;;   in: an element of
 >> >> > ;;       (listof Any)
 >> >> > ;;   contract from: anonymous-module
 >> >> > ;;   blaming: incomplete-blame-from-provide.rkt
 >> >> > ;;   at: unsaved-editor755214:11.8
 >> >> >
 >> >> > (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >> >> >
 >> >> > ;; Runtime error from above is similar to that for `listof-foo'
 >> >> >
 >> >> > *** Environment:
 >> >> > unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 >> >> > 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >> >> > (get-display-depth) = 32
 >> >> > Human Language: english
 >> >> > (current-memory-use) 651899904
 >> >> > Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links
 >> >> > #:root?
 >> >> > #t) = (); (links #:user? #f #:root? #t) =
 >> >> > (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 >> >> > #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 >> >> > raco pkg (show):
 >> >> > /home/neil/plt/racket/share/devel-pkgs:
 >> >> >  Package              Checksum    Source
 >> >> >  main-distribution    #f          (static-link
 >> >> > ../../../pkgs/main-distribution)
 >> >> >  plt-services         #f          (static-link
 >> >> > ../../../pkgs/plt-services)
 >> >> >  racket-lib           #f          (static-link
 >> >> > ../../../pkgs/racket-pkgs/racket-lib)
 >> >> >  [204 auto-installed packages not shown]
 >> >> > Installation-wide:
 >> >> >  Package       Checksum                                    Source
 >> >> >  nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 >> >> > git://github.com/ntoronto/nonplussed)
 >> >> >  rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 >> >> > rsound)
 >> >> >  [1 auto-installed package not shown]
 >> >> > User-specific for installation "development":
 >> >> >  [none]
 >> >> >
 >> >> >
 >> >> >
 >> >> > Collections:
 >> >> > ("/home/neil/.racket/development/collects"
 >> >> >  (non-existent-path))
 >> >> > ("/home/neil/plt/racket/collects"
 >> >> >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >> >> > "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >> >> > "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 >> >> > "version" "xml"))
 >> >> >
 >> >> > Recent Internal Errors:
 >> >> > Computer Language: (("Determine language from source") (#(#t print
 >> >> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 >> >> > ((test)
 >> >> > (main)) #t))
 >> >> >
 >> >
 >> >
 >
 >
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Mon, 27 Jan 2014 10:33:07 -0800

 On Mon, Jan 27, 2014 at 10:20 AM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > On Mon, Jan 27, 2014 at 1:04 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 >> I don't know much about inspectors (as this next question will probably
 >> demonstrate), but why aren't TR or the contracts it produces privileged in
 >> this regard? (This question is also my response to Sam.)
 >
 > Typed Racket is "privileged" in the sense that it's the compiler for
 > your code, and can thus re-write it to do whatever it wants.  However,
 > that doesn't extend to producing code that violates the invariants of
 > the underlying system, one of which is that opaque structures are
 > truly opaque. The right perspective is that _everything_ in Racket is
 > a struct in some sense, even pairs and syntax objects, and inspectors
 > are how we distinguish who controls that level of abstraction.  So if
 > you create an abstraction, Typed Racket can't possibly generate code
 > that can violate it, any more than it can violate a closure's
 > abstraction.
 >
 > Typed Racket could just re-write your struct definition to be one that
 > it could inspect, but that wouldn't help if the struct was in another,
 > untyped module.
 >
 >> Is the expected performance penalty from using transparent structs in
 >> untyped code only?
 >
 > Yes (although I'm not sure exactly what strategy Eric is planning).
 No, transparent structs will be 'expensive' in TR as well. The issue
 is pr/14266 (http://bugs.racket-lang.org/query/?cmd=view&pr=14266). If
 we don't make transparent structs 'expensive' in TR then we make every
 TR function which could return a transparent struct expensive. And
 since we cannot tell if structs are final, this means that every
 function returning a struct would be expensive. Note that immutable
 transparent structs of simple data (i.e. only need flat contracts)
 should not have this performance penalty. Also depending on how struct
 chaperones are implemented/optimized it may not be expensive since
 only the reflective operations need to be protected.
 
 
 
 >
 >>
 >> Neil ⊥
 >>
 >>
 >> On 01/27/2014 10:55 AM, Eric Dobson wrote:
 >>>
 >>> #:transparent means that it responds to struct?, and that we can then
 >>> go inside and inspect it and correctly protect the value from being
 >>> misused by the untyped world.
 >>>
 >>> Note that currently #:transparent opens up a soundness gap in TR and I
 >>> am working on a fix. I haven't finished and done the profiling but I
 >>> expect there will be a performance penalty for using #:transparent.
 >>>
 >>> On Mon, Jan 27, 2014 at 9:50 AM, Neil Toronto <neil.toronto@gmail.com>
 >>> wrote:
 >>>>
 >>>> For my current code, I wouldn't mind if there was a fundamental
 >>>> limitation
 >>>> that precluded exporting a (Listof Any) if the value contains a
 >>>> non-transparent struct, as long as I could import it in another typed
 >>>> module.
 >>>>
 >>>> I do wonder why #:transparent makes any difference, though. Why would not
 >>>> having it make TR think the value is higher-order?
 >>>>
 >>>> Neil ⊥
 >>>>
 >>>>
 >>>> On 01/27/2014 10:10 AM, Eric Dobson wrote:
 >>>>>
 >>>>>
 >>>>> The first part looks like a bug in the contract library, so I'll let
 >>>>> Robby take a look at that.
 >>>>>
 >>>>> For the second part I agree those error messages are bad, but I want
 >>>>> to make sure we agree on why.
 >>>>>
 >>>>> The issue that I think is problematic is that these values are not yet
 >>>>> used in untyped code so there shouldn't be a problem with the module
 >>>>> definition, and those errors should only come up once they are used in
 >>>>> an untyped context. Is that the problem you see?
 >>>>>
 >>>>> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 >>>>>>
 >>>>>>
 >>>>>> A new problem report is waiting at
 >>>>>>     http://bugs.racket-lang.org/query/?cmd=view&pr=14316
 >>>>>>
 >>>>>> Reported by Neil Toronto for release: 6.0.0.1--2014-01-15(a391556f/d)
 >>>>>>
 >>>>>> *** Description:
 >>>>>> The program in reproduction steps fails with a runtime error on any of
 >>>>>> the three definitions. It works if:
 >>>>>>
 >>>>>>    * (provide (all-defined-out)) is commented out
 >>>>>>    * The struct is made #:transparent
 >>>>>>
 >>>>>> Similar tests with vectors, boxes, and mutable hash tables do not raise
 >>>>>> runtime errors.
 >>>>>>
 >>>>>> *** How to repeat:
 >>>>>> #lang typed/racket
 >>>>>>
 >>>>>> (provide (all-defined-out))
 >>>>>>
 >>>>>> (struct: Foo ())
 >>>>>>
 >>>>>> (define hashof-foo
 >>>>>>     ((inst make-immutable-hasheq Symbol Any)
 >>>>>>      (list (cons 'key (list (Foo))))))
 >>>>>>
 >>>>>> ;; Runtime error from above:
 >>>>>> ;; default-blame-format: contract violation
 >>>>>> ;;   expected: a blame object with a non-#f positive field
 >>>>>> ;;   given: #<blame>
 >>>>>>
 >>>>>> (define listof-foo ((inst list Any) (Foo)))
 >>>>>>
 >>>>>> ;; Runtime error from above:
 >>>>>> ;; Attempted to use a higher-order value passed as `Any` in untyped
 >>>>>> code:
 >>>>>> #<Foo>
 >>>>>> ;;   in: an element of
 >>>>>> ;;       (listof Any)
 >>>>>> ;;   contract from: anonymous-module
 >>>>>> ;;   blaming: incomplete-blame-from-provide.rkt
 >>>>>> ;;   at: unsaved-editor755214:11.8
 >>>>>>
 >>>>>> (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 >>>>>>
 >>>>>> ;; Runtime error from above is similar to that for `listof-foo'
 >>>>>>
 >>>>>> *** Environment:
 >>>>>> unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 >>>>>> 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>>>>> (get-display-depth) = 32
 >>>>>> Human Language: english
 >>>>>> (current-memory-use) 651899904
 >>>>>> Links: (links) = (); (links #:user? #f) = ("nonplussed"); (links
 >>>>>> #:root?
 >>>>>> #t) = (); (links #:user? #f #:root? #t) =
 >>>>>> (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 >>>>>> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 >>>>>> raco pkg (show):
 >>>>>> /home/neil/plt/racket/share/devel-pkgs:
 >>>>>>    Package              Checksum    Source
 >>>>>>    main-distribution    #f          (static-link
 >>>>>> ../../../pkgs/main-distribution)
 >>>>>>    plt-services         #f          (static-link
 >>>>>> ../../../pkgs/plt-services)
 >>>>>>    racket-lib           #f          (static-link
 >>>>>> ../../../pkgs/racket-pkgs/racket-lib)
 >>>>>>    [204 auto-installed packages not shown]
 >>>>>> Installation-wide:
 >>>>>>    Package       Checksum                                    Source
 >>>>>>    nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 >>>>>> git://github.com/ntoronto/nonplussed)
 >>>>>>    rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog
 >>>>>> rsound)
 >>>>>>    [1 auto-installed package not shown]
 >>>>>> User-specific for installation "development":
 >>>>>>    [none]
 >>>>>>
 >>>>>>
 >>>>>>
 >>>>>> Collections:
 >>>>>> ("/home/neil/.racket/development/collects"
 >>>>>>    (non-existent-path))
 >>>>>> ("/home/neil/plt/racket/collects"
 >>>>>>    (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file"
 >>>>>> "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet"
 >>>>>> "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable"
 >>>>>> "version" "xml"))
 >>>>>>
 >>>>>> Recent Internal Errors:
 >>>>>> Computer Language: (("Determine language from source") (#(#t print
 >>>>>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 >>>>>> ((test)
 >>>>>> (main)) #t))
 >>>>>>
 >>>>
 >>
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>,
        Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14316: Non-transparent structs widened to Any
 type in immutable polymorphic types can't be provided
Date: Sat, 5 Apr 2014 07:36:34 -0500

 --089e012940d880821704f64ae22b
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I'll push something shortly that fixes a bug with the
 "default-blame-format...." symptom. It would be relevant to this if this is
 generating or/c contracts and those contracts are supposed to fail because
 multiple (or zero) branches matched (but we were instead getting this
 error).
 
 Robby
 
 
 
 On Mon, Jan 27, 2014 at 12:33 PM, Eric Dobson <eric.n.dobson@gmail.com>wrot=
 e:
 
 > On Mon, Jan 27, 2014 at 10:20 AM, Sam Tobin-Hochstadt
 > <samth@cs.indiana.edu> wrote:
 > > On Mon, Jan 27, 2014 at 1:04 PM, Neil Toronto <neil.toronto@gmail.com>
 > wrote:
 > >> I don't know much about inspectors (as this next question will probabl=
 y
 > >> demonstrate), but why aren't TR or the contracts it produces privilege=
 d
 > in
 > >> this regard? (This question is also my response to Sam.)
 > >
 > > Typed Racket is "privileged" in the sense that it's the compiler for
 > > your code, and can thus re-write it to do whatever it wants.  However,
 > > that doesn't extend to producing code that violates the invariants of
 > > the underlying system, one of which is that opaque structures are
 > > truly opaque. The right perspective is that _everything_ in Racket is
 > > a struct in some sense, even pairs and syntax objects, and inspectors
 > > are how we distinguish who controls that level of abstraction.  So if
 > > you create an abstraction, Typed Racket can't possibly generate code
 > > that can violate it, any more than it can violate a closure's
 > > abstraction.
 > >
 > > Typed Racket could just re-write your struct definition to be one that
 > > it could inspect, but that wouldn't help if the struct was in another,
 > > untyped module.
 > >
 > >> Is the expected performance penalty from using transparent structs in
 > >> untyped code only?
 > >
 > > Yes (although I'm not sure exactly what strategy Eric is planning).
 > No, transparent structs will be 'expensive' in TR as well. The issue
 > is pr/14266 (http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D14266). I=
 f
 > we don't make transparent structs 'expensive' in TR then we make every
 > TR function which could return a transparent struct expensive. And
 > since we cannot tell if structs are final, this means that every
 > function returning a struct would be expensive. Note that immutable
 > transparent structs of simple data (i.e. only need flat contracts)
 > should not have this performance penalty. Also depending on how struct
 > chaperones are implemented/optimized it may not be expensive since
 > only the reflective operations need to be protected.
 >
 >
 >
 > >
 > >>
 > >> Neil =E2=8A=A5
 > >>
 > >>
 > >> On 01/27/2014 10:55 AM, Eric Dobson wrote:
 > >>>
 > >>> #:transparent means that it responds to struct?, and that we can then
 > >>> go inside and inspect it and correctly protect the value from being
 > >>> misused by the untyped world.
 > >>>
 > >>> Note that currently #:transparent opens up a soundness gap in TR and =
 I
 > >>> am working on a fix. I haven't finished and done the profiling but I
 > >>> expect there will be a performance penalty for using #:transparent.
 > >>>
 > >>> On Mon, Jan 27, 2014 at 9:50 AM, Neil Toronto <neil.toronto@gmail.com=
 >
 > >>> wrote:
 > >>>>
 > >>>> For my current code, I wouldn't mind if there was a fundamental
 > >>>> limitation
 > >>>> that precluded exporting a (Listof Any) if the value contains a
 > >>>> non-transparent struct, as long as I could import it in another type=
 d
 > >>>> module.
 > >>>>
 > >>>> I do wonder why #:transparent makes any difference, though. Why woul=
 d
 > not
 > >>>> having it make TR think the value is higher-order?
 > >>>>
 > >>>> Neil =E2=8A=A5
 > >>>>
 > >>>>
 > >>>> On 01/27/2014 10:10 AM, Eric Dobson wrote:
 > >>>>>
 > >>>>>
 > >>>>> The first part looks like a bug in the contract library, so I'll le=
 t
 > >>>>> Robby take a look at that.
 > >>>>>
 > >>>>> For the second part I agree those error messages are bad, but I wan=
 t
 > >>>>> to make sure we agree on why.
 > >>>>>
 > >>>>> The issue that I think is problematic is that these values are not
 > yet
 > >>>>> used in untyped code so there shouldn't be a problem with the modul=
 e
 > >>>>> definition, and those errors should only come up once they are used
 > in
 > >>>>> an untyped context. Is that the problem you see?
 > >>>>>
 > >>>>> On Sun, Jan 26, 2014 at 7:24 PM,  <neil.toronto@gmail.com> wrote:
 > >>>>>>
 > >>>>>>
 > >>>>>> A new problem report is waiting at
 > >>>>>>     http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D14316
 > >>>>>>
 > >>>>>> Reported by Neil Toronto for release:
 > 6.0.0.1--2014-01-15(a391556f/d)
 > >>>>>>
 > >>>>>> *** Description:
 > >>>>>> The program in reproduction steps fails with a runtime error on an=
 y
 > of
 > >>>>>> the three definitions. It works if:
 > >>>>>>
 > >>>>>>    * (provide (all-defined-out)) is commented out
 > >>>>>>    * The struct is made #:transparent
 > >>>>>>
 > >>>>>> Similar tests with vectors, boxes, and mutable hash tables do not
 > raise
 > >>>>>> runtime errors.
 > >>>>>>
 > >>>>>> *** How to repeat:
 > >>>>>> #lang typed/racket
 > >>>>>>
 > >>>>>> (provide (all-defined-out))
 > >>>>>>
 > >>>>>> (struct: Foo ())
 > >>>>>>
 > >>>>>> (define hashof-foo
 > >>>>>>     ((inst make-immutable-hasheq Symbol Any)
 > >>>>>>      (list (cons 'key (list (Foo))))))
 > >>>>>>
 > >>>>>> ;; Runtime error from above:
 > >>>>>> ;; default-blame-format: contract violation
 > >>>>>> ;;   expected: a blame object with a non-#f positive field
 > >>>>>> ;;   given: #<blame>
 > >>>>>>
 > >>>>>> (define listof-foo ((inst list Any) (Foo)))
 > >>>>>>
 > >>>>>> ;; Runtime error from above:
 > >>>>>> ;; Attempted to use a higher-order value passed as `Any` in untype=
 d
 > >>>>>> code:
 > >>>>>> #<Foo>
 > >>>>>> ;;   in: an element of
 > >>>>>> ;;       (listof Any)
 > >>>>>> ;;   contract from: anonymous-module
 > >>>>>> ;;   blaming: incomplete-blame-from-provide.rkt
 > >>>>>> ;;   at: unsaved-editor755214:11.8
 > >>>>>>
 > >>>>>> (define consof-foo ((inst cons Symbol Any) 'key (Foo)))
 > >>>>>>
 > >>>>>> ;; Runtime error from above is similar to that for `listof-foo'
 > >>>>>>
 > >>>>>> *** Environment:
 > >>>>>> unix "Linux woodstock 3.11.0-14-generic #21-Ubuntu SMP Tue Nov 12
 > >>>>>> 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m=
 )
 > >>>>>> (get-display-depth) =3D 32
 > >>>>>> Human Language: english
 > >>>>>> (current-memory-use) 651899904
 > >>>>>> Links: (links) =3D (); (links #:user? #f) =3D ("nonplussed"); (lin=
 ks
 > >>>>>> #:root?
 > >>>>>> #t) =3D (); (links #:user? #f #:root? #t) =3D
 > >>>>>> (#<path:/home/neil/plt/racket/share/pkgs/rsound>
 > >>>>>> #<path:/home/neil/plt/racket/share/pkgs/portaudio>)
 > >>>>>> raco pkg (show):
 > >>>>>> /home/neil/plt/racket/share/devel-pkgs:
 > >>>>>>    Package              Checksum    Source
 > >>>>>>    main-distribution    #f          (static-link
 > >>>>>> ../../../pkgs/main-distribution)
 > >>>>>>    plt-services         #f          (static-link
 > >>>>>> ../../../pkgs/plt-services)
 > >>>>>>    racket-lib           #f          (static-link
 > >>>>>> ../../../pkgs/racket-pkgs/racket-lib)
 > >>>>>>    [204 auto-installed packages not shown]
 > >>>>>> Installation-wide:
 > >>>>>>    Package       Checksum                                    Sourc=
 e
 > >>>>>>    nonplussed    f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url
 > >>>>>> git://github.com/ntoronto/nonplussed)
 > >>>>>>    rsound        4f5d4d154eb7585b96b24298b79e3381bab8f1a5
 >  (catalog
 > >>>>>> rsound)
 > >>>>>>    [1 auto-installed package not shown]
 > >>>>>> User-specific for installation "development":
 > >>>>>>    [none]
 > >>>>>>
 > >>>>>>
 > >>>>>>
 > >>>>>> Collections:
 > >>>>>> ("/home/neil/.racket/development/collects"
 > >>>>>>    (non-existent-path))
 > >>>>>> ("/home/neil/plt/racket/collects"
 > >>>>>>    (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "fil=
 e"
 > >>>>>> "info" "info-domain" "json" "launcher" "net" "openssl" "pkg"
 > "planet"
 > >>>>>> "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstabl=
 e"
 > >>>>>> "version" "xml"))
 > >>>>>>
 > >>>>>> Recent Internal Errors:
 > >>>>>> Computer Language: (("Determine language from source") (#(#t print
 > >>>>>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 > >>>>>> ((test)
 > >>>>>> (main)) #t))
 > >>>>>>
 > >>>>
 > >>
 >
 
 --089e012940d880821704f64ae22b
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I&#39;ll push something shortly that fixes a bug with the =
 &quot;default-blame-format....&quot; symptom. It would be relevant to this =
 if this is generating or/c contracts and those contracts are supposed to fa=
 il because multiple (or zero) branches matched (but we were instead getting=
  this error).<div>
 <br></div><div>Robby</div><div><br></div></div><div class=3D"gmail_extra"><=
 br><br><div class=3D"gmail_quote">On Mon, Jan 27, 2014 at 12:33 PM, Eric Do=
 bson <span dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" targe=
 t=3D"_blank">eric.n.dobson@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div class=3D"">On Mon, Jan 27, 2014 at 10:2=
 0 AM, Sam Tobin-Hochstadt<br>
 &lt;<a href=3D"mailto:samth@cs.indiana.edu">samth@cs.indiana.edu</a>&gt; wr=
 ote:<br>
 &gt; On Mon, Jan 27, 2014 at 1:04 PM, Neil Toronto &lt;<a href=3D"mailto:ne=
 il.toronto@gmail.com">neil.toronto@gmail.com</a>&gt; wrote:<br>
 &gt;&gt; I don&#39;t know much about inspectors (as this next question will=
  probably<br>
 &gt;&gt; demonstrate), but why aren&#39;t TR or the contracts it produces p=
 rivileged in<br>
 &gt;&gt; this regard? (This question is also my response to Sam.)<br>
 &gt;<br>
 &gt; Typed Racket is &quot;privileged&quot; in the sense that it&#39;s the =
 compiler for<br>
 &gt; your code, and can thus re-write it to do whatever it wants. =C2=A0How=
 ever,<br>
 &gt; that doesn&#39;t extend to producing code that violates the invariants=
  of<br>
 &gt; the underlying system, one of which is that opaque structures are<br>
 &gt; truly opaque. The right perspective is that _everything_ in Racket is<=
 br>
 &gt; a struct in some sense, even pairs and syntax objects, and inspectors<=
 br>
 &gt; are how we distinguish who controls that level of abstraction. =C2=A0S=
 o if<br>
 &gt; you create an abstraction, Typed Racket can&#39;t possibly generate co=
 de<br>
 &gt; that can violate it, any more than it can violate a closure&#39;s<br>
 &gt; abstraction.<br>
 &gt;<br>
 &gt; Typed Racket could just re-write your struct definition to be one that=
 <br>
 &gt; it could inspect, but that wouldn&#39;t help if the struct was in anot=
 her,<br>
 &gt; untyped module.<br>
 &gt;<br>
 &gt;&gt; Is the expected performance penalty from using transparent structs=
  in<br>
 &gt;&gt; untyped code only?<br>
 &gt;<br>
 &gt; Yes (although I&#39;m not sure exactly what strategy Eric is planning)=
 .<br>
 </div>No, transparent structs will be &#39;expensive&#39; in TR as well. Th=
 e issue<br>
 is pr/14266 (<a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;p=
 r=3D14266" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&=
 amp;pr=3D14266</a>). If<br>
 we don&#39;t make transparent structs &#39;expensive&#39; in TR then we mak=
 e every<br>
 TR function which could return a transparent struct expensive. And<br>
 since we cannot tell if structs are final, this means that every<br>
 function returning a struct would be expensive. Note that immutable<br>
 transparent structs of simple data (i.e. only need flat contracts)<br>
 should not have this performance penalty. Also depending on how struct<br>
 chaperones are implemented/optimized it may not be expensive since<br>
 only the reflective operations need to be protected.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 <br>
 <br>
 &gt;<br>
 &gt;&gt;<br>
 &gt;&gt; Neil =E2=8A=A5<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; On 01/27/2014 10:55 AM, Eric Dobson wrote:<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; #:transparent means that it responds to struct?, and that we c=
 an then<br>
 &gt;&gt;&gt; go inside and inspect it and correctly protect the value from =
 being<br>
 &gt;&gt;&gt; misused by the untyped world.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; Note that currently #:transparent opens up a soundness gap in =
 TR and I<br>
 &gt;&gt;&gt; am working on a fix. I haven&#39;t finished and done the profi=
 ling but I<br>
 &gt;&gt;&gt; expect there will be a performance penalty for using #:transpa=
 rent.<br>
 &gt;&gt;&gt;<br>
 &gt;&gt;&gt; On Mon, Jan 27, 2014 at 9:50 AM, Neil Toronto &lt;<a href=3D"m=
 ailto:neil.toronto@gmail.com">neil.toronto@gmail.com</a>&gt;<br>
 &gt;&gt;&gt; wrote:<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; For my current code, I wouldn&#39;t mind if there was a fu=
 ndamental<br>
 &gt;&gt;&gt;&gt; limitation<br>
 &gt;&gt;&gt;&gt; that precluded exporting a (Listof Any) if the value conta=
 ins a<br>
 &gt;&gt;&gt;&gt; non-transparent struct, as long as I could import it in an=
 other typed<br>
 &gt;&gt;&gt;&gt; module.<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; I do wonder why #:transparent makes any difference, though=
 . Why would not<br>
 &gt;&gt;&gt;&gt; having it make TR think the value is higher-order?<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; Neil =E2=8A=A5<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt; On 01/27/2014 10:10 AM, Eric Dobson wrote:<br>
 &gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt; The first part looks like a bug in the contract librar=
 y, so I&#39;ll let<br>
 &gt;&gt;&gt;&gt;&gt; Robby take a look at that.<br>
 &gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt; For the second part I agree those error messages are b=
 ad, but I want<br>
 &gt;&gt;&gt;&gt;&gt; to make sure we agree on why.<br>
 &gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt; The issue that I think is problematic is that these va=
 lues are not yet<br>
 &gt;&gt;&gt;&gt;&gt; used in untyped code so there shouldn&#39;t be a probl=
 em with the module<br>
 &gt;&gt;&gt;&gt;&gt; definition, and those errors should only come up once =
 they are used in<br>
 &gt;&gt;&gt;&gt;&gt; an untyped context. Is that the problem you see?<br>
 &gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt; On Sun, Jan 26, 2014 at 7:24 PM, =C2=A0&lt;<a href=3D"=
 mailto:neil.toronto@gmail.com">neil.toronto@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; A new problem report is waiting at<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0 <a href=3D"http://bugs.racket-lang.o=
 rg/query/?cmd=3Dview&amp;pr=3D14316" target=3D"_blank">http://bugs.racket-l=
 ang.org/query/?cmd=3Dview&amp;pr=3D14316</a><br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; Reported by Neil Toronto for release: 6.0.0.1--201=
 4-01-15(a391556f/d)<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; *** Description:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; The program in reproduction steps fails with a run=
 time error on any of<br>
 &gt;&gt;&gt;&gt;&gt;&gt; the three definitions. It works if:<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0* (provide (all-defined-out)) is comm=
 ented out<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0* The struct is made #:transparent<br=
 >
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; Similar tests with vectors, boxes, and mutable has=
 h tables do not raise<br>
 &gt;&gt;&gt;&gt;&gt;&gt; runtime errors.<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; *** How to repeat:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; #lang typed/racket<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (provide (all-defined-out))<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (struct: Foo ())<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (define hashof-foo<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0 ((inst make-immutable-hasheq Symbol =
 Any)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0 =C2=A0(list (cons &#39;key (list (Fo=
 o))))))<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; Runtime error from above:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; default-blame-format: contract violation<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; =C2=A0 expected: a blame object with a non-#f p=
 ositive field<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; =C2=A0 given: #&lt;blame&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (define listof-foo ((inst list Any) (Foo)))<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; Runtime error from above:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; Attempted to use a higher-order value passed as=
  `Any` in untyped<br>
 &gt;&gt;&gt;&gt;&gt;&gt; code:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; #&lt;Foo&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; =C2=A0 in: an element of<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; =C2=A0 =C2=A0 =C2=A0 (listof Any)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; =C2=A0 contract from: anonymous-module<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; =C2=A0 blaming: incomplete-blame-from-provide.r=
 kt<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; =C2=A0 at: unsaved-editor755214:11.8<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (define consof-foo ((inst cons Symbol Any) &#39;ke=
 y (Foo)))<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ;; Runtime error from above is similar to that for=
  `listof-foo&#39;<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; *** Environment:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; unix &quot;Linux woodstock 3.11.0-14-generic #21-U=
 buntu SMP Tue Nov 12<br>
 &gt;&gt;&gt;&gt;&gt;&gt; 17:04:55 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&q=
 uot; (x86_64-linux/3m)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (get-display-depth) =3D 32<br>
 &gt;&gt;&gt;&gt;&gt;&gt; Human Language: english<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (current-memory-use) 651899904<br>
 &gt;&gt;&gt;&gt;&gt;&gt; Links: (links) =3D (); (links #:user? #f) =3D (&qu=
 ot;nonplussed&quot;); (links<br>
 &gt;&gt;&gt;&gt;&gt;&gt; #:root?<br>
 &gt;&gt;&gt;&gt;&gt;&gt; #t) =3D (); (links #:user? #f #:root? #t) =3D<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (#&lt;path:/home/neil/plt/racket/share/pkgs/rsound=
 &gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; #&lt;path:/home/neil/plt/racket/share/pkgs/portaud=
 io&gt;)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; raco pkg (show):<br>
 &gt;&gt;&gt;&gt;&gt;&gt; /home/neil/plt/racket/share/devel-pkgs:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0Checksum =C2=A0 =C2=A0Source<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0main-distribution =C2=A0 =C2=A0#f =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(static-link<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ../../../pkgs/main-distribution)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0plt-services =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 #f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(static-link<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ../../../pkgs/plt-services)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0racket-lib =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(static-link<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ../../../pkgs/racket-pkgs/racket-lib)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0[204 auto-installed packages not show=
 n]<br>
 &gt;&gt;&gt;&gt;&gt;&gt; Installation-wide:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0Package =C2=A0 =C2=A0 =C2=A0 Checksum=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Source<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0nonplussed =C2=A0 =C2=A0f6c069990eb6b=
 0b3356f872fcce82a3fb2fe805a =C2=A0 =C2=A0(url<br>
 &gt;&gt;&gt;&gt;&gt;&gt; git://<a href=3D"http://github.com/ntoronto/nonplu=
 ssed" target=3D"_blank">github.com/ntoronto/nonplussed</a>)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0rsound =C2=A0 =C2=A0 =C2=A0 =C2=A04f5=
 d4d154eb7585b96b24298b79e3381bab8f1a5 =C2=A0 =C2=A0(catalog<br>
 &gt;&gt;&gt;&gt;&gt;&gt; rsound)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0[1 auto-installed package not shown]<=
 br>
 &gt;&gt;&gt;&gt;&gt;&gt; User-specific for installation &quot;development&q=
 uot;:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0[none]<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; Collections:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (&quot;/home/neil/.racket/development/collects&quo=
 t;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0(non-existent-path))<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (&quot;/home/neil/plt/racket/collects&quot;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; =C2=A0 =C2=A0(&quot;.gitignore&quot; &quot;acks&qu=
 ot; &quot;compiler&quot; &quot;data&quot; &quot;db&quot; &quot;dynext&quot;=
  &quot;ffi&quot; &quot;file&quot;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; &quot;info&quot; &quot;info-domain&quot; &quot;jso=
 n&quot; &quot;launcher&quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&=
 quot; &quot;planet&quot;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; &quot;racket&quot; &quot;raco&quot; &quot;reader&q=
 uot; &quot;realm&quot; &quot;s-exp&quot; &quot;setup&quot; &quot;syntax&quo=
 t; &quot;unstable&quot;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; &quot;version&quot; &quot;xml&quot;))<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;&gt;&gt; Recent Internal Errors:<br>
 &gt;&gt;&gt;&gt;&gt;&gt; Computer Language: ((&quot;Determine language from=
  source&quot;) (#(#t print<br>
 &gt;&gt;&gt;&gt;&gt;&gt; mixed-fraction-e #f #t debug) (default) #() &quot;=
 #lang racket\n&quot; #t #t<br>
 &gt;&gt;&gt;&gt;&gt;&gt; ((test)<br>
 &gt;&gt;&gt;&gt;&gt;&gt; (main)) #t))<br>
 &gt;&gt;&gt;&gt;&gt;&gt;<br>
 &gt;&gt;&gt;&gt;<br>
 &gt;&gt;<br>
 </div></div></blockquote></div><br></div>
 
 --089e012940d880821704f64ae22b--

