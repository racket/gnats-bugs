From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Dec 26 14:51:55 2014
Received: from mail-ig0-f182.google.com (mail-ig0-f182.google.com [209.85.213.182])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id sBQJprAS016622
	for <bugs@bugs.plt-scheme.org>; Fri, 26 Dec 2014 14:51:54 -0500
Message-Id: <201412261951.sBQJppcE016615@winooski.ccs.neu.edu>
Date: Fri, 26 Dec 2014 14:51:51 -0500
From: luke.whittlesey@gmail.com
To: bugs@racket-lang.org
Subject: typed/racket :: Error providing a typed polymorphic function.

>Number:         14894
>Category:       typed-scheme
>Synopsis:       typed/racket :: Error providing a typed polymorphic function.
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Dec 26 14:52:01 -0500 2014
>Last-Modified:  Sat Jan 31 18:27:09 -0500 2015
>Originator:     Luke Whittlesey
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1
>Environment:
unix "Linux mycluster 3.17.6-1-ARCH #1 SMP PREEMPT Sun Dec 7 23:43:32 UTC 2014 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 263719444
raco pkg (show):
Installation-wide:
 Package              Checksum                                    Source
 main-distribution    84a366a8c2b2908babe6c2811b0ada036bb159df    (catalog main-distribution)
 racket-lib           436f0928598fc1a8abf27422e8e6588bef45f652    (catalog racket-lib)
 [181 auto-installed packages not shown]
User-specific for installation "6.1.1":
 Package         Checksum                                    Source
 graph           26df683cd610b750797986dc3ac00b65c36f1df2    (catalog graph)
 lux             9ca19d016aeb292dc29ebc623292d72e8e4cb409    (catalog lux)
 lux-charterm    af7b76ebb7882bef00d1c1b9da91da937f011e4c    (catalog lux-charterm)
 metapict        #f                                          (link ../../../Downloads/git/metapict)
 python          3103fc20ad6031840ccf6f1c74affa3ca1d61717    (url git://github.com/pedropramos/PyonR)



Collections:
("/home/bob/.racket/6.1.1/collects"
 (non-existent-path))
("/usr/share/racket/collects"
 ("acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #f #t ((test) (main)) #t))
>Description:
I'm seeing an error when I try to export a typed polymorphic function. The function works as expected when run within typed/racket, but produces an error once I try to export the function with (provide list->values).

The error produced is:
../../../../usr/share/racket/pkgs/typed-racket-lib/typed-racket/private/type-contract.rkt:533:9: match: no matching clause for (arr (-> (Pairof g8778 (List g8779 ... g8779)) (values g8778 g8779 ... g8779)))
>How-To-Repeat:
#lang typed/racket
(provide list->values)   ;; <- this causes an error

;;;;;;;;
;; Create a typed polymorphic function that converts a list into multiple values.
;;;;;;;;
;(: list->values (All (a b ...) ((Pairof a (List b ...)) -> (Values a b ...))))  ;<- this should also work
(: list->values (All (a b ...) ((List a b ...) -> (Values a b ...))))
(define (list->values lof-vals)
  (apply values lof-vals))

;; test
(list->values (list 3 'a "b"))
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: luke.whittlesey@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14894: typed/racket :: Error providing a typed
 polymorphic function.
Date: Sat, 27 Dec 2014 05:33:55 -0500

 On 2014-12-26 14:52:02 -0500, luke.whittlesey@gmail.com wrote:
 > *** Description:
 > I'm seeing an error when I try to export a typed polymorphic function.
 > The function works as expected when run within typed/racket, but
 > produces an error once I try to export the function with (provide
 > list->values).
 
 Thanks for the report! I've pushed a short-term fix for this which
 produces a real error message instead of an internal error.
 
 I think a long-term fix is trickier since in the general case we need to
 support return types like (Values ConcreteType a ... a) which needs to
 translate into a contract that checks that a function returns at least
 one value matching ConcreteType but possibly arbitrarily more.
 
 I'm not sure if that's possible to encode in the current contract
 system.
 
 Cheers,
 Asumu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: "luke.whittlesey@gmail.com" <luke.whittlesey@gmail.com>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14894: typed/racket :: Error providing a typed
 polymorphic function.
Date: Sat, 27 Dec 2014 07:43:25 -0600

 --001a113d094452387d050b32d3cc
 Content-Type: text/plain; charset=UTF-8
 
 Right: there is not a contract that does that. It also doesn't seem like a
 very common idiom in Racket!
 
 Is the Domain restricted in an orthogonal way (ie any of the usual ways)
 for such functions?
 
 Robby
 
 On Saturday, December 27, 2014, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 
 > On 2014-12-26 14:52:02 -0500, luke.whittlesey@gmail.com <javascript:;>
 > wrote:
 > > *** Description:
 > > I'm seeing an error when I try to export a typed polymorphic function.
 > > The function works as expected when run within typed/racket, but
 > > produces an error once I try to export the function with (provide
 > > list->values).
 >
 > Thanks for the report! I've pushed a short-term fix for this which
 > produces a real error message instead of an internal error.
 >
 > I think a long-term fix is trickier since in the general case we need to
 > support return types like (Values ConcreteType a ... a) which needs to
 > translate into a contract that checks that a function returns at least
 > one value matching ConcreteType but possibly arbitrarily more.
 >
 > I'm not sure if that's possible to encode in the current contract
 > system.
 >
 > Cheers,
 > Asumu
 >
 
 --001a113d094452387d050b32d3cc
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Right: there is not a contract that does that. It also doesn&#39;t seem lik=
 e a very common idiom in Racket!<div><br></div><div>Is the Domain restricte=
 d in an orthogonal way (ie any of=C2=A0the usual ways) for such functions?<=
 /div><div><br></div><div>Robby<span></span><br><br>On Saturday, December 27=
 , 2014, Asumu Takikawa &lt;<a href=3D"mailto:asumu@ccs.neu.edu">asumu@ccs.n=
 eu.edu</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:=
 0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">On 2014-12-26 14:52=
 :02 -0500, <a href=3D"javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, &#=
 39;luke.whittlesey@gmail.com&#39;)">luke.whittlesey@gmail.com</a> wrote:<br=
 >
 &gt; *** Description:<br>
 &gt; I&#39;m seeing an error when I try to export a typed polymorphic funct=
 ion.<br>
 &gt; The function works as expected when run within typed/racket, but<br>
 &gt; produces an error once I try to export the function with (provide<br>
 &gt; list-&gt;values).<br>
 <br>
 Thanks for the report! I&#39;ve pushed a short-term fix for this which<br>
 produces a real error message instead of an internal error.<br>
 <br>
 I think a long-term fix is trickier since in the general case we need to<br=
 >
 support return types like (Values ConcreteType a ... a) which needs to<br>
 translate into a contract that checks that a function returns at least<br>
 one value matching ConcreteType but possibly arbitrarily more.<br>
 <br>
 I&#39;m not sure if that&#39;s possible to encode in the current contract<b=
 r>
 system.<br>
 <br>
 Cheers,<br>
 Asumu<br>
 </blockquote></div>
 
 --001a113d094452387d050b32d3cc--
From: Luke Whittlesey <luke.whittlesey@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14894: typed/racket :: Error providing a typed
 polymorphic function.
Date: Sun, 28 Dec 2014 12:34:50 -0500

 --001a113ecad4c6c91d050b4a2ce1
 Content-Type: text/plain; charset=UTF-8
 
 I agree this is not a common idiom in racket. I'm using this as a utility
 function to easily unpack multiple values within *-values forms
 (define-values, let-values, letrec-values, etc..), somewhat like python
 tuple unpacking. This pattern is not absolutley necessary, but this example
 was the closest I've come to making it work in TR so far. It's interesting
 to find things that cannot be done in TR. A bit of a puzzle I guess.
 Since the limiting agent here is the contract (and not TR), and TR to TR
 requires don't need contracts, is it reasonable to generate an error
 contract? A contract the raises an error when used in #lang racket, but
 still allows other #lang typed/racket modules to use the provide.
 
 On Sat, Dec 27, 2014 at 8:43 AM, Robby Findler <robby@eecs.northwestern.edu>
 wrote:
 
 > Right: there is not a contract that does that. It also doesn't seem like a
 > very common idiom in Racket!
 >
 > Is the Domain restricted in an orthogonal way (ie any of the usual ways)
 > for such functions?
 >
 > Robby
 >
 >
 > On Saturday, December 27, 2014, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >
 >> On 2014-12-26 14:52:02 -0500, luke.whittlesey@gmail.com wrote:
 >> > *** Description:
 >> > I'm seeing an error when I try to export a typed polymorphic function.
 >> > The function works as expected when run within typed/racket, but
 >> > produces an error once I try to export the function with (provide
 >> > list->values).
 >>
 >> Thanks for the report! I've pushed a short-term fix for this which
 >> produces a real error message instead of an internal error.
 >>
 >> I think a long-term fix is trickier since in the general case we need to
 >> support return types like (Values ConcreteType a ... a) which needs to
 >> translate into a contract that checks that a function returns at least
 >> one value matching ConcreteType but possibly arbitrarily more.
 >>
 >> I'm not sure if that's possible to encode in the current contract
 >> system.
 >>
 >> Cheers,
 >> Asumu
 >>
 >
 
 --001a113ecad4c6c91d050b4a2ce1
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>I agree this is not a common idiom in racket. I&#39;m=
  using this as a utility function to easily unpack multiple values within *=
 -values forms (define-values, let-values, letrec-values, etc..), somewhat l=
 ike python tuple unpacking. This pattern is not absolutley necessary, but t=
 his example was the closest I&#39;ve come to making it work in TR so far. I=
 t&#39;s interesting to find things that cannot be done in TR. A bit of a pu=
 zzle I guess.<br></div>Since the limiting agent here is the contract (and n=
 ot TR), and TR to TR requires don&#39;t need contracts, is it reasonable to=
  generate an error contract? A contract the raises an error when used in #l=
 ang racket, but still allows other #lang typed/racket modules to use the pr=
 ovide.<br></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">O=
 n Sat, Dec 27, 2014 at 8:43 AM, Robby Findler <span dir=3D"ltr">&lt;<a href=
 =3D"mailto:robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northw=
 estern.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
 =3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Right: t=
 here is not a contract that does that. It also doesn&#39;t seem like a very=
  common idiom in Racket!<div><br></div><div>Is the Domain restricted in an =
 orthogonal way (ie any of=C2=A0the usual ways) for such functions?</div><sp=
 an class=3D"HOEnZb"><font color=3D"#888888"><div><br></div></font></span><d=
 iv><span class=3D"HOEnZb"><font color=3D"#888888">Robby</font></span><div><=
 div class=3D"h5"><span></span><br><br>On Saturday, December 27, 2014, Asumu=
  Takikawa &lt;<a href=3D"mailto:asumu@ccs.neu.edu" target=3D"_blank">asumu@=
 ccs.neu.edu</a>&gt; wrote:<br><blockquote class=3D"gmail_quote" style=3D"ma=
 rgin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">On 2014-12-26 =
 14:52:02 -0500, <a>luke.whittlesey@gmail.com</a> wrote:<br>
 &gt; *** Description:<br>
 &gt; I&#39;m seeing an error when I try to export a typed polymorphic funct=
 ion.<br>
 &gt; The function works as expected when run within typed/racket, but<br>
 &gt; produces an error once I try to export the function with (provide<br>
 &gt; list-&gt;values).<br>
 <br>
 Thanks for the report! I&#39;ve pushed a short-term fix for this which<br>
 produces a real error message instead of an internal error.<br>
 <br>
 I think a long-term fix is trickier since in the general case we need to<br=
 >
 support return types like (Values ConcreteType a ... a) which needs to<br>
 translate into a contract that checks that a function returns at least<br>
 one value matching ConcreteType but possibly arbitrarily more.<br>
 <br>
 I&#39;m not sure if that&#39;s possible to encode in the current contract<b=
 r>
 system.<br>
 <br>
 Cheers,<br>
 Asumu<br>
 </blockquote></div></div></div>
 </blockquote></div><br></div>
 
 --001a113ecad4c6c91d050b4a2ce1--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Luke Whittlesey <luke.whittlesey@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Asumu Takikawa <asumu@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14894: typed/racket :: Error providing a typed polymorphic function.
Date: Sun, 28 Dec 2014 12:37:49 -0500

 --Apple-Mail=_21FC9082-293C-4B01-8810-179C3B9C81B0
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 I think Robby meant to say that we use this idiom on occasion, but we =
 never use it in a way that is externally (from the pov of a module) =
 visible. While one could argue that this is an abstraction that is worth =
 packing into a library module, it's so short that you don't need a =
 general utility function. A plain old in-lined apply-values will do.=20
 
 -- Matthias
 
 
 
 
 
 
 
 On Dec 28, 2014, at 12:34 PM, Luke Whittlesey wrote:
 
 > I agree this is not a common idiom in racket. I'm using this as a =
 utility function to easily unpack multiple values within *-values forms =
 (define-values, let-values, letrec-values, etc..), somewhat like python =
 tuple unpacking. This pattern is not absolutley necessary, but this =
 example was the closest I've come to making it work in TR so far. It's =
 interesting to find things that cannot be done in TR. A bit of a puzzle =
 I guess.
 > Since the limiting agent here is the contract (and not TR), and TR to =
 TR requires don't need contracts, is it reasonable to generate an error =
 contract? A contract the raises an error when used in #lang racket, but =
 still allows other #lang typed/racket modules to use the provide.
 >=20
 > On Sat, Dec 27, 2014 at 8:43 AM, Robby Findler =
 <robby@eecs.northwestern.edu> wrote:
 > Right: there is not a contract that does that. It also doesn't seem =
 like a very common idiom in Racket!
 >=20
 > Is the Domain restricted in an orthogonal way (ie any of the usual =
 ways) for such functions?
 >=20
 > Robby
 >=20
 >=20
 > On Saturday, December 27, 2014, Asumu Takikawa <asumu@ccs.neu.edu> =
 wrote:
 > On 2014-12-26 14:52:02 -0500, luke.whittlesey@gmail.com wrote:
 > > *** Description:
 > > I'm seeing an error when I try to export a typed polymorphic =
 function.
 > > The function works as expected when run within typed/racket, but
 > > produces an error once I try to export the function with (provide
 > > list->values).
 >=20
 > Thanks for the report! I've pushed a short-term fix for this which
 > produces a real error message instead of an internal error.
 >=20
 > I think a long-term fix is trickier since in the general case we need =
 to
 > support return types like (Values ConcreteType a ... a) which needs to
 > translate into a contract that checks that a function returns at least
 > one value matching ConcreteType but possibly arbitrarily more.
 >=20
 > I'm not sure if that's possible to encode in the current contract
 > system.
 >=20
 > Cheers,
 > Asumu
 >=20
 
 
 --Apple-Mail=_21FC9082-293C-4B01-8810-179C3B9C81B0
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=us-ascii
 
 <html><head></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
 "><div><br></div><div>I think Robby meant to say that we use this idiom =
 on occasion, but we never use it in a way that is externally (from the =
 pov of a module) visible. While one could argue that this is an =
 abstraction that is worth packing into a library module, it's so short =
 that you don't need a general utility function. A plain old in-lined =
 apply-values will do.&nbsp;</div><div><br></div><div>-- =
 Matthias</div><div><br></div><div><br></div><div><br></div><div><br></div>=
 <div><br></div><div><br></div><br><div><div>On Dec 28, 2014, at 12:34 =
 PM, Luke Whittlesey wrote:</div><br =
 class=3D"Apple-interchange-newline"><blockquote type=3D"cite"><div =
 dir=3D"ltr"><div>I agree this is not a common idiom in racket. I'm using =
 this as a utility function to easily unpack multiple values within =
 *-values forms (define-values, let-values, letrec-values, etc..), =
 somewhat like python tuple unpacking. This pattern is not absolutley =
 necessary, but this example was the closest I've come to making it work =
 in TR so far. It's interesting to find things that cannot be done in TR. =
 A bit of a puzzle I guess.<br></div>Since the limiting agent here is the =
 contract (and not TR), and TR to TR requires don't need contracts, is it =
 reasonable to generate an error contract? A contract the raises an error =
 when used in #lang racket, but still allows other #lang typed/racket =
 modules to use the provide.<br></div><div class=3D"gmail_extra"><br><div =
 class=3D"gmail_quote">On Sat, Dec 27, 2014 at 8:43 AM, Robby Findler =
 <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" =
 target=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> =
 wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 =
 .8ex;border-left:1px #ccc solid;padding-left:1ex">Right: there is not a =
 contract that does that. It also doesn't seem like a very common idiom =
 in Racket!<div><br></div><div>Is the Domain restricted in an orthogonal =
 way (ie any of&nbsp;the usual ways) for such functions?</div><span =
 class=3D"HOEnZb"><font =
 color=3D"#888888"><div><br></div></font></span><div><span =
 class=3D"HOEnZb"><font color=3D"#888888">Robby</font></span><div><div =
 class=3D"h5"><span></span><br><br>On Saturday, December 27, 2014, Asumu =
 Takikawa &lt;<a href=3D"mailto:asumu@ccs.neu.edu" =
 target=3D"_blank">asumu@ccs.neu.edu</a>&gt; wrote:<br><blockquote =
 class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc =
 solid;padding-left:1ex">On 2014-12-26 14:52:02 -0500, =
 <a>luke.whittlesey@gmail.com</a> wrote:<br>
 &gt; *** Description:<br>
 &gt; I'm seeing an error when I try to export a typed polymorphic =
 function.<br>
 &gt; The function works as expected when run within typed/racket, =
 but<br>
 &gt; produces an error once I try to export the function with =
 (provide<br>
 &gt; list-&gt;values).<br>
 <br>
 Thanks for the report! I've pushed a short-term fix for this which<br>
 produces a real error message instead of an internal error.<br>
 <br>
 I think a long-term fix is trickier since in the general case we need =
 to<br>
 support return types like (Values ConcreteType a ... a) which needs =
 to<br>
 translate into a contract that checks that a function returns at =
 least<br>
 one value matching ConcreteType but possibly arbitrarily more.<br>
 <br>
 I'm not sure if that's possible to encode in the current contract<br>
 system.<br>
 <br>
 Cheers,<br>
 Asumu<br>
 </blockquote></div></div></div>
 </blockquote></div><br></div>
 </blockquote></div><br></body></html>=
 
 --Apple-Mail=_21FC9082-293C-4B01-8810-179C3B9C81B0--
From: Luke Whittlesey <luke.whittlesey@gmail.com>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Asumu Takikawa <asumu@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14894: typed/racket :: Error providing a typed
 polymorphic function.
Date: Sun, 28 Dec 2014 13:54:07 -0500

 --e89a8ffbae415bd337050b4b48a7
 Content-Type: text/plain; charset=UTF-8
 
 That makes sense. So I should use a macro instead of a function, which
 makes the Values contract unnecessary.
 
 #lang typed/racket
 (provide list->values)
 (define-syntax-rule (list->values lst)
   (apply values lst))
 
 Thanks for clarifying. My lesson here is never say "cannot be done" with
 anything involving racket.
 Thank you all for your responses.
 -Luke
 
 On Sun, Dec 28, 2014 at 12:37 PM, Matthias Felleisen <matthias@ccs.neu.edu>
 wrote:
 
 >
 > I think Robby meant to say that we use this idiom on occasion, but we
 > never use it in a way that is externally (from the pov of a module)
 > visible. While one could argue that this is an abstraction that is worth
 > packing into a library module, it's so short that you don't need a general
 > utility function. A plain old in-lined apply-values will do.
 >
 > -- Matthias
 >
 >
 >
 >
 >
 >
 >
 > On Dec 28, 2014, at 12:34 PM, Luke Whittlesey wrote:
 >
 > I agree this is not a common idiom in racket. I'm using this as a utility
 > function to easily unpack multiple values within *-values forms
 > (define-values, let-values, letrec-values, etc..), somewhat like python
 > tuple unpacking. This pattern is not absolutley necessary, but this example
 > was the closest I've come to making it work in TR so far. It's interesting
 > to find things that cannot be done in TR. A bit of a puzzle I guess.
 > Since the limiting agent here is the contract (and not TR), and TR to TR
 > requires don't need contracts, is it reasonable to generate an error
 > contract? A contract the raises an error when used in #lang racket, but
 > still allows other #lang typed/racket modules to use the provide.
 >
 > On Sat, Dec 27, 2014 at 8:43 AM, Robby Findler <
 > robby@eecs.northwestern.edu> wrote:
 >
 >> Right: there is not a contract that does that. It also doesn't seem like
 >> a very common idiom in Racket!
 >>
 >> Is the Domain restricted in an orthogonal way (ie any of the usual ways)
 >> for such functions?
 >>
 >> Robby
 >>
 >>
 >> On Saturday, December 27, 2014, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >>
 >>> On 2014-12-26 14:52:02 -0500, luke.whittlesey@gmail.com wrote:
 >>> > *** Description:
 >>> > I'm seeing an error when I try to export a typed polymorphic function.
 >>> > The function works as expected when run within typed/racket, but
 >>> > produces an error once I try to export the function with (provide
 >>> > list->values).
 >>>
 >>> Thanks for the report! I've pushed a short-term fix for this which
 >>> produces a real error message instead of an internal error.
 >>>
 >>> I think a long-term fix is trickier since in the general case we need to
 >>> support return types like (Values ConcreteType a ... a) which needs to
 >>> translate into a contract that checks that a function returns at least
 >>> one value matching ConcreteType but possibly arbitrarily more.
 >>>
 >>> I'm not sure if that's possible to encode in the current contract
 >>> system.
 >>>
 >>> Cheers,
 >>> Asumu
 >>>
 >>
 >
 >
 
 --e89a8ffbae415bd337050b4b48a7
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div>That makes sense. So I should use a macro instead of =
 a function, which makes the Values contract unnecessary.<br><br></div><div>=
 #lang typed/racket<br></div>(provide list-&gt;values)<br><div>(define-synta=
 x-rule (list-&gt;values lst)<br>=C2=A0 (apply values lst))<br><br></div><di=
 v>Thanks for clarifying. My lesson here is never say &quot;cannot be done&q=
 uot; with anything involving racket. <br></div><div>Thank you all for your =
 responses.<br></div><div>-Luke<br></div></div><div class=3D"gmail_extra"><b=
 r><div class=3D"gmail_quote">On Sun, Dec 28, 2014 at 12:37 PM, Matthias Fel=
 leisen <span dir=3D"ltr">&lt;<a href=3D"mailto:matthias@ccs.neu.edu" target=
 =3D"_blank">matthias@ccs.neu.edu</a>&gt;</span> wrote:<br><blockquote class=
 =3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=
 ing-left:1ex"><div style=3D"word-wrap:break-word"><div><br></div><div>I thi=
 nk Robby meant to say that we use this idiom on occasion, but we never use =
 it in a way that is externally (from the pov of a module) visible. While on=
 e could argue that this is an abstraction that is worth packing into a libr=
 ary module, it&#39;s so short that you don&#39;t need a general utility fun=
 ction. A plain old in-lined apply-values will do.=C2=A0</div><span class=3D=
 "HOEnZb"><font color=3D"#888888"><div><br></div><div>-- Matthias</div></fon=
 t></span><div><div class=3D"h5"><div><br></div><div><br></div><div><br></di=
 v><div><br></div><div><br></div><div><br></div><br><div><div>On Dec 28, 201=
 4, at 12:34 PM, Luke Whittlesey wrote:</div><br><blockquote type=3D"cite"><=
 div dir=3D"ltr"><div>I agree this is not a common idiom in racket. I&#39;m =
 using this as a utility function to easily unpack multiple values within *-=
 values forms (define-values, let-values, letrec-values, etc..), somewhat li=
 ke python tuple unpacking. This pattern is not absolutley necessary, but th=
 is example was the closest I&#39;ve come to making it work in TR so far. It=
 &#39;s interesting to find things that cannot be done in TR. A bit of a puz=
 zle I guess.<br></div>Since the limiting agent here is the contract (and no=
 t TR), and TR to TR requires don&#39;t need contracts, is it reasonable to =
 generate an error contract? A contract the raises an error when used in #la=
 ng racket, but still allows other #lang typed/racket modules to use the pro=
 vide.<br></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On=
  Sat, Dec 27, 2014 at 8:43 AM, Robby Findler <span dir=3D"ltr">&lt;<a href=
 =3D"mailto:robby@eecs.northwestern.edu" target=3D"_blank">robby@eecs.northw=
 estern.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
 =3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Right: t=
 here is not a contract that does that. It also doesn&#39;t seem like a very=
  common idiom in Racket!<div><br></div><div>Is the Domain restricted in an =
 orthogonal way (ie any of=C2=A0the usual ways) for such functions?</div><sp=
 an><font color=3D"#888888"><div><br></div></font></span><div><span><font co=
 lor=3D"#888888">Robby</font></span><div><div><span></span><br><br>On Saturd=
 ay, December 27, 2014, Asumu Takikawa &lt;<a href=3D"mailto:asumu@ccs.neu.e=
 du" target=3D"_blank">asumu@ccs.neu.edu</a>&gt; wrote:<br><blockquote class=
 =3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padd=
 ing-left:1ex">On 2014-12-26 14:52:02 -0500, <a>luke.whittlesey@gmail.com</a=
 > wrote:<br>
 &gt; *** Description:<br>
 &gt; I&#39;m seeing an error when I try to export a typed polymorphic funct=
 ion.<br>
 &gt; The function works as expected when run within typed/racket, but<br>
 &gt; produces an error once I try to export the function with (provide<br>
 &gt; list-&gt;values).<br>
 <br>
 Thanks for the report! I&#39;ve pushed a short-term fix for this which<br>
 produces a real error message instead of an internal error.<br>
 <br>
 I think a long-term fix is trickier since in the general case we need to<br=
 >
 support return types like (Values ConcreteType a ... a) which needs to<br>
 translate into a contract that checks that a function returns at least<br>
 one value matching ConcreteType but possibly arbitrarily more.<br>
 <br>
 I&#39;m not sure if that&#39;s possible to encode in the current contract<b=
 r>
 system.<br>
 <br>
 Cheers,<br>
 Asumu<br>
 </blockquote></div></div></div>
 </blockquote></div><br></div>
 </blockquote></div><br></div></div></div></blockquote></div><br></div>
 
 --e89a8ffbae415bd337050b4b48a7--

