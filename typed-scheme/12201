From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Sep 16 00:30:41 2011
Received: from mail-yx0-f172.google.com (mail-yx0-f172.google.com [209.85.213.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p8G4UcVw017892
	for <bugs@bugs.plt-scheme.org>; Fri, 16 Sep 2011 00:30:38 -0400
Message-Id: <201109160430.p8G4UZ4B017881@champlain.ccs.neu.edu>
Date: Fri, 16 Sep 2011 00:30:35 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Typed Racket lacks a cast operator

>Number:         12201
>Category:       typed-scheme
>Synopsis:       Typed Racket lacks a cast operator
>Class:          change-request
>Responsible:    samth
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Sep 16 00:32:01 -0400 2011
>Closed-Date:    Mon Aug 20 12:46:24 -0400 2012
>Last-Modified:  Mon Aug 20 12:46:24 -0400 2012
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27
>Description:
Currently TR supports an operator assert which allows one to enact a cast of an object from one type to another if there is a predicate for the result type. In some cases this is not enough, interesting function types cannot have predicates. But these interesting types can have contracts, and TR already constructs these contracts to implement require-typed. I am proposing a new form 'cast' (or maybe 'coerce'):

(cast <expr> <type>) is an expression whose type is <type> and <expr> must evaluate to a type that intersects <type>. The runtime value of a cast expression is the runtime value produced by <expr>, but wrapped in a contract that requires it to behave like <type>.


>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12201: Typed Racket lacks a cast operator
Date: Fri, 16 Sep 2011 08:44:48 -0400

 you want to use a regional contract here\? 
 
 
 On Sep 16, 2011, at 12:32 AM, eric.n.dobson@gmail.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12201
 > 
 > Reported by Eric Dobson for release: 5.1
 > 
 > *** Description:
 > Currently TR supports an operator assert which allows one to enact a cast of an object from one type to another if there is a predicate for the result type. In some cases this is not enough, interesting function types cannot have predicates. But these interesting types can have contracts, and TR already constructs these contracts to implement require-typed. I am proposing a new form 'cast' (or maybe 'coerce'):
 > 
 > (cast <expr> <type>) is an expression whose type is <type> and <expr> must evaluate to a type that intersects <type>. The runtime value of a cast expression is the runtime value produced by <expr>, but wrapped in a contract that requires it to behave like <type>.
 > 
 > 
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27
 > 
 
 

From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12201: Typed Racket lacks a cast operator
Date: Fri, 16 Sep 2011 08:55:51 -0400

 On Fri, Sep 16, 2011 at 12:32 AM,  <eric.n.dobson@gmail.com> wrote:
 >
 > Currently TR supports an operator assert which allows one to enact a cast of an object from one type to another if there is a predicate for the result type. In some cases this is not enough, interesting function types cannot have predicates. But these interesting types can have contracts, and TR already constructs these contracts to implement require-typed. I am proposing a new form 'cast' (or maybe 'coerce'):
 >
 > (cast <expr> <type>) is an expression whose type is <type> and <expr> must evaluate to a type that intersects <type>. The runtime value of a cast expression is the runtime value produced by <expr>, but wrapped in a contract that requires it to behave like <type>.
 
 This would be a good idea.  In the meantime, the paper "Cycles without
 pollution", by Tobin-Hochstadt and Findler, STOP 2009, is basically a
 design pattern for doing this sort of thing.
 -- 
 sam th
 samth@ccs.neu.edu
 
State changed from "open" to "closed" by samth@racket-lang.org at Mon, 20 Aug 2012 12:46:24 -0400
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/533920480e
