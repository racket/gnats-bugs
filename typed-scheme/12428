From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Dec  6 17:28:26 2011
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id pB6MSNBD019891
	for <bugs@bugs.plt-scheme.org>; Tue, 6 Dec 2011 17:28:23 -0500
Message-Id: <201112062228.pB6MSJ8m019879@champlain.ccs.neu.edu>
Date: Tue, 6 Dec 2011 17:28:19 -0500
From: shviller@gmail.com
To: bugs@racket-lang.org
Subject: Typed Racket: subtypes

>Number:         12428
>Category:       typed-scheme
>Synopsis:       Typed Racket: subtypes
>Class:          change-request
>Responsible:    samth
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Dec 06 17:32:01 -0500 2011
>Last-Modified:  Tue Dec 06 17:44:01 -0500 2011
>Originator:     Shviller
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
Windows 7 32bit, Windows XP 32 bit
>Description:
I would love to be able to define specialized subtypes, incuding ones differing from their parent type in name only. For example, a Speed type that is a subtype of Real, with the ability to define functions that take arguments of type Speed but not Real. Basically, a compiler-enforced Apps Hungarian notation: instead of me noticing prefix mismatches, Racket itself is noticing type mismatches, which is that much more reliable.

It seems it can be done using existential contracts (thanks to Asumu for pointing them out to me). The variation of this feature I would love to see the most, however, would be a compile-time check that adds no runtime performance costs. 
Thanks in advance!
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: shviller@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12428: Typed Racket: subtypes
Date: Tue, 6 Dec 2011 17:41:22 -0500

 Note that this feature is equivalent to `newtype' in Haskell.
 
 An implementation should look like this:
 
 (define-newtype Speed Real)
 
 (Speed 7) : Speed
 
  - the type constructor is pretty simple -- just a one-element type
 representation
  - the expression form would expand into:
 
 (syntax-property #'(#%expression 7) #'Speed)
 
 On Tue, Dec 6, 2011 at 5:32 PM,  <shviller@gmail.com> wrote:
 > A new problem report is waiting at
 > Â http://bugs.racket-lang.org/query/?cmd=view&pr=12428
 >
 > Reported by Shviller for release: 5.2.1
 >
 > *** Description:
 > I would love to be able to define specialized subtypes, incuding ones differing from their parent type in name only. For example, a Speed type that is a subtype of Real, with the ability to define functions that take arguments of type Speed but not Real. Basically, a compiler-enforced Apps Hungarian notation: instead of me noticing prefix mismatches, Racket itself is noticing type mismatches, which is that much more reliable.
 >
 > It seems it can be done using existential contracts (thanks to Asumu for pointing them out to me). The variation of this feature I would love to see the most, however, would be a compile-time check that adds no runtime performance costs.
 > Thanks in advance!
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > Windows 7 32bit, Windows XP 32 bit
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
