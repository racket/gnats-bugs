From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed May 29 15:03:51 2013
Received: from mail-ob0-f181.google.com (mail-ob0-f181.google.com [209.85.214.181])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r4TJ3m6k019369
	for <bugs@bugs.plt-scheme.org>; Wed, 29 May 2013 15:03:48 -0400
Message-Id: <201305291903.r4TJ3k81019364@champlain.ccs.neu.edu>
Date: Wed, 29 May 2013 15:03:46 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: TR: mutually recursive functions must be typed at the module level

>Number:         13799
>Category:       typed-scheme
>Synopsis:       TR: mutually recursive functions must be typed at the module level
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed May 29 15:04:01 -0400 2013
>Last-Modified:  Sat Jul 20 16:39:33 -0400 2013
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4.5--2013-04-25(b5b13222/d)
>Environment:
unix "Linux schroder 3.2.0-44-generic #69-Ubuntu SMP Thu May 16 17:35:01 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 1082881512
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.4.5):
 [none]



Collections:
("/home/neil/.racket/5.3.4.5/collects"
 (non-existent-path))
("/home/neil/plt/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "planet2" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "realm" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "l!
 ang" "raco" "gui-debugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred" "pkg"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Typed Racket gives an "untyped identifier" error when mutually recursive functions are defined using expression annotations. This makes it difficult to write, in a compositional way, robust macros that expand to module-level defines.
>How-To-Repeat:
#lang typed/racket/base

(define even?
  (ann (λ (n) (if (zero? n) #t (odd? (sub1 n))))
       (Natural -> Boolean)))

(define odd?
  (ann (λ (n) (if (zero? n) #f (even? (sub1 n))))
       (Natural -> Boolean)))


Type Checker: untyped identifier odd? in: odd?
Type Checker: untyped identifier odd? in: odd?
Type Checker: Summary: 2 errors encountered in:
  odd?
  odd?
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13799: TR: mutually recursive functions must be
 typed at the module level
Date: Wed, 29 May 2013 15:42:16 -0400

 On 2013-05-29 15:04:02 -0400, neil.toronto@gmail.com wrote:
 > #lang typed/racket/base
 > 
 > (define even?
 >   (ann (λ (n) (if (zero? n) #t (odd? (sub1 n))))
 >        (Natural -> Boolean)))
 > 
 > (define odd?
 >   (ann (λ (n) (if (zero? n) #f (even? (sub1 n))))
 >        (Natural -> Boolean)))
 
 For macros, you can write this as
 
 (define-values (even? odd?)
   (let ()
     (: even? (Natural -> Boolean))
     (define even?
       (λ (n) (if (zero? n) #t (odd? (sub1 n)))))
 
     (: odd? (Natural -> Boolean))
     (define odd?
       (λ (n) (if (zero? n) #f (even? (sub1 n)))))
     (values even? odd?)))
 
 and get the desired result, though it's more verbose. Or is this not
 compositional enough for your use case?
 
 Cheers,
 Asumu
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13799: TR: mutually recursive functions must be
 typed at the module level
Date: Wed, 29 May 2013 15:52:50 -0400

 On Wed, May 29, 2013 at 3:04 PM,  <neil.toronto@gmail.com> wrote:
 >
 > Typed Racket gives an "untyped identifier" error when mutually recursive functions are defined using expression annotations. This makes it difficult to write, in a compositional way, robust macros that expand to module-level defines.
 
 Is there a reason that `define:` doesn't do the right thing for you here?
 
 Sam
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13799: TR: mutually recursive functions must
 be typed at the module level
Date: Wed, 29 May 2013 14:59:54 -0600

 On 05/29/2013 01:52 PM, Sam Tobin-Hochstadt wrote:
 > On Wed, May 29, 2013 at 3:04 PM,  <neil.toronto@gmail.com> wrote:
 >>
 >> Typed Racket gives an "untyped identifier" error when mutually recursive functions are defined using expression annotations. This makes it difficult to write, in a compositional way, robust macros that expand to module-level defines.
 >
 > Is there a reason that `define:` doesn't do the right thing for you here?
 
 It does, at the cost of extra complexity.
 
 I originally started with a bunch of phase-1 `make-*' functions that 
 returned things like
 
    (ann (lambda (xs ...) body)
         (Ts ... -> T))
 
 For example, a helper function for a "make a set subtract function" 
 macro looked like this:
 
    (define-for-syntax (make-rect-subtract sig)
      .... <extract Rect type and function ids from sig> ....
      #`(ann
         (λ (A B) .... <use function ids from sig> ....)
         (Rect Rect -> (Listof Rect))))
 
 It was used to make a function that subtracted one rectangle from a list 
 of rectangles this way:
 
    (define-for-syntax (make-rect-list-subtract-one sig)
      (with-syntax ([(Rect _)  (rect-sig-types sig)])
        #`(let: ([rect-subtract  #,(make-rect-subtract sig)])
            (ann (λ (As B)
                   (append* (map (λ: ([A : Rect]) (rect-subtract A B))
                            As)))
                 ((Listof Rect) Rect -> (Listof Rect))))))
 
 Notice that both return the syntax of an annotated lambda. The 
 `make-set-subtract' function, which is for defining functions that 
 subtract a list of rectangles from a list of rectangles, was defined in 
 terms of `make-rect-list-subtract-one', and also returned the syntax of 
 an annotated lambda.
 
 To bind set functions at the module level, I had other macros that 
 returned syntax like this:
 
    #`(define subtract-name #,(make-set-subtract sig))
 
 This worked just fine until I tried to use it on a rectangle type 
 defined essentially like this:
 
    (struct: Rect1 ([fst : Rect2] [snd : Rect2]))
    (struct: Rect2 ([fst : Rect1] [snd : Rect1]))
 
 With these types, all the set operations are mutually recursive, and TR 
 complained. I had to change the helper functions to return expressions 
 and types in two different values, and return binding syntax like this:
 
    (begin (: name (Ts ... -> T))
           (define name (lambda (xs ...) body)))
 
 I also had to write a bunch of little adaptors for the new 
 two-value-return helpers.
 
 In general, I like to have my macros build *expressions* because 
 expressions are compositional. Module-level binding forms aren't 
 compositional, so I try to write macros that expand to them in terms of 
 macros that operate on expressions - i.e. do them as late as possible. 
 TR was totally with me on this until I came across this limitation.
 
 Neil ⊥
 

