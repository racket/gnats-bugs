From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Nov 11 00:31:10 2012
Received: from mail-ia0-f172.google.com (mail-ia0-f172.google.com [209.85.210.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id qAB5V88w020731
	for <bugs@bugs.plt-scheme.org>; Sun, 11 Nov 2012 00:31:08 -0500
Message-Id: <201211110531.qAB5V6Gx020726@champlain.ccs.neu.edu>
Date: Sun, 11 Nov 2012 00:31:06 -0500
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Apply doesn't work aswell when it is applied to polymorphic functions

>Number:         13247
>Category:       typed-scheme
>Synopsis:       Apply doesn't work aswell when it is applied to polymorphic functions
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Nov 11 00:32:01 -0500 2012
>Last-Modified:  Tue Mar 26 01:31:50 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
The following program applies a function that takes at least one argument to a list which it ensures has at least one element. It only errors out on polymorphic cases.

Error:
tmp/tmp2.rkt:14:2: Type Checker: Bad arguments to polymorphic function in apply:
Domain: a a *
Arguments: (Pairof (Setof Complex) (Listof (Setof Complex))) *

  in: (apply foo a)
tmp/tmp2.rkt:17:2: Type Checker: Bad arguments to polymorphic function in apply:
Domain: (Setof e) (Setof e) *
Arguments: (Pairof (Setof Complex) (Listof (Setof Complex))) *

  in: (apply set-union a)
Type Checker: Summary: 2 errors encountered
  context...:
   /Users/endobson/proj/racket/plt/collects/typed-racket/typecheck/tc-toplevel.rkt:295:0: type-check
   success
   /Users/endobson/proj/racket/plt/collects/typed-racket/typed-racket.rkt:38:4
   standard-module-name-resolver
>How-To-Repeat:
#lang typed/racket

(: a (Listof (Setof Number)))
(define a (list (set 1) (set 2)))

(: foo (All (a) (a a * -> Void)))
(define (foo a . b) (void))


(when (pair? a)
  (apply (inst foo (Setof Number)) a)) 

(when (pair? a)
  (apply foo a)) 

(when (pair? a)
  (apply set-union a)) 
>Fix:
