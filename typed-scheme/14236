From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Dec  9 12:04:54 2013
Received: from mail-oa0-f50.google.com (mail-oa0-f50.google.com [209.85.219.50])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rB9H4qXd027819
	for <bugs@bugs.plt-scheme.org>; Mon, 9 Dec 2013 12:04:52 -0500
Message-Id: <201312091704.rB9H4nMN027811@winooski.ccs.neu.edu>
Date: Mon, 9 Dec 2013 12:04:49 -0500
From: dfeltey@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Typed Racket infers wrong type for functions with optional keyword arguments

>Number:         14236
>Category:       typed-scheme
>Synopsis:       Typed Racket infers wrong type for functions with optional keyword arguments
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Dec 09 12:08:01 -0500 2013
>Closed-Date:    Fri Feb 14 17:53:11 -0500 2014
>Last-Modified:  Fri Feb 14 17:53:11 -0500 2014
>Originator:     Daniel Feltey
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.6
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17
>Description:
The following typed-racket program fails to type check seemingly due to inferring an incorrect type for the function application 
(foo k #:some-keyword? #t)

#lang typed/racket

(: foo (Integer [#:some-keyword? Boolean] -> Integer))
(define (foo n #:some-keyword? [some-keyword? #f])
  (if some-keyword?
      (* n n)
      (* 2 n)))
(: bar (Integer -> Integer))
(define (bar k)
  (let: ([n : Integer (foo k #:some-keyword? #t)])
    n))

Produces the errors:
Type Checker: Expected Integer, but got (Integer [#:some-keyword? Boolean] -> Integer) in: foo
Type Checker: Cannot apply expression of type Integer, since it is not a function type in: (foo k #:some-keyword? #t)
>How-To-Repeat:
Run the following program:

#lang typed/racket

(: foo (Integer [#:some-keyword? Boolean] -> Integer))
(define (foo n #:some-keyword? [some-keyword? #f])
  (if some-keyword?
      (* n n)
      (* 2 n)))
(: bar (Integer -> Integer))
(define (bar k)
  (let: ([n : Integer (foo k #:some-keyword? #t)])
    n))
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by asumu at Fri, 14 Feb 2014 17:53:11 -0500
Reason>>> Seems to be fixed in HEAD. Likely due to recent kw type
fixes (either subtyping or type-checking).

