From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Feb  8 17:20:17 2010
Received: from mail-yw0-f182.google.com (mail-yw0-f182.google.com [209.85.211.182])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o18MKFGo011688
	for <bugs@bugs.plt-scheme.org>; Mon, 8 Feb 2010 17:20:15 -0500
Message-Id: <201002082220.o18MKDgH011680@champlain.ccs.neu.edu>
Date: Mon, 8 Feb 2010 17:20:13 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: TS: Inferring types for boxes

>Number:         10749
>Category:       typed-scheme
>Synopsis:       TS: Inferring types for boxes
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Feb 08 17:24:01 -0500 2010
>Closed-Date:    Fri Sep 17 17:43:12 -0400 2010
>Last-Modified:  Fri Sep 17 17:43:12 -0400 2010
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.4
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 215915168

Collections:
(("/home/eli/pl/collects" ".svn" "pl1" "handin-server" "pl") ("/home/eli/.plt-scheme/4.2.4/collects" "info-domain" "pl") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "framework" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "unstable" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #() "#lang scheme\n" #f))
>Description:
The code below fails, it didn't in 4.2.3.

(It used to not work without `ann'.  So I had a chunk of
class time talking about why the problem is there, etc etc,
and motivated using `ann'.  Last semester, I went through
all of that and *then* I discovered that it worked without
it...  So I mumble some excuse about TS changing, and how
this was good news, and then I revised my class notes to
reflect this change.  Now I find that it regressed back to
the old thing again...  At least I found out about it in
advance to avoid that kind of in-class circus.  If it's
possible to fix it -- I'm happy, and even happier if it's
patchable.  In any case, please add a test that either
tests that it works if it's fixed, or test that it fails
if it isn't, with some comment to mail me when that test
changes.)
>How-To-Repeat:
#lang typed-scheme
(define-type-alias Register (Boxof Integer))
(: foo (Register -> Integer))
(define (foo r) (unbox r))
(foo (box 0))
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10749: TS: Inferring types for boxes
Date: Mon, 8 Feb 2010 17:30:23 -0500

 This code succeeds for me with current SVN.
 
 On Mon, Feb 8, 2010 at 5:24 PM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10749
 >
 > Reported by Eli Barzilay for release: 4.2.4
 >
 > *** Description:
 > The code below fails, it didn't in 4.2.3.
 >
 > (It used to not work without `ann'. =A0So I had a chunk of
 > class time talking about why the problem is there, etc etc,
 > and motivated using `ann'. =A0Last semester, I went through
 > all of that and *then* I discovered that it worked without
 > it... =A0So I mumble some excuse about TS changing, and how
 > this was good news, and then I revised my class notes to
 > reflect this change. =A0Now I find that it regressed back to
 > the old thing again... =A0At least I found out about it in
 > advance to avoid that kind of in-class circus. =A0If it's
 > possible to fix it -- I'm happy, and even happier if it's
 > patchable. =A0In any case, please add a test that either
 > tests that it works if it's fixed, or test that it fails
 > if it isn't, with some comment to mail me when that test
 > changes.)
 >
 > *** How to repeat:
 > #lang typed-scheme
 > (define-type-alias Register (Boxof Integer))
 > (: foo (Register -> Integer))
 > (define (foo r) (unbox r))
 > (foo (box 0))
 >
 > *** Environment:
 > unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02=
 :29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display=
 -depth) =3D 16
 > Human Language: english
 > (current-memory-use) 215915168
 >
 > Collections:
 > (("/home/eli/pl/collects" ".svn" "pl1" "handin-server" "pl") ("/home/eli/=
 .plt-scheme/4.2.4/collects" "info-domain" "pl") ("/home/eli/plt/collects" "=
 icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "opens=
 sl" "sgl" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine"=
  "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "synta=
 x-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recov=
 ery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "framework" "typ=
 ed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "syntax" "=
 combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" =
 "unstable" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "=
 xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drsch=
 eme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "te=
 x2page" "gui-debugger" "web-server" "r5rs" "redex"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (=
 default) #() "#lang scheme\n" #f))
 >
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10749: TS: Inferring types for boxes
Date: Mon, 8 Feb 2010 18:35:12 -0500

 OK, I oversimplified things to a point that it works on 4.2.4 for me
 too, so I might have had some confusion with the version numbers.
 Here's the code that works on 4.2.3 but not on 4.2.4 (and not in the
 recent nightly build too):
 
   #lang typed-scheme
   (define-type-alias Register (Boxof Integer))
   (: foo (Register -> Integer))
   (define (foo r) (unbox r))
   (let ([x (box 0)]) (foo x))
 
 
 
 On Feb  8, Sam Tobin-Hochstadt wrote:
 > This code succeeds for me with current SVN.
 >=20
 > On Mon, Feb 8, 2010 at 5:24 PM,  <eli@barzilay.org> wrote:
 > > A new problem report is waiting at
 > > =C2=A0http://bugs.plt-scheme.org/query/=3Fcmd=3Dview&pr=3D10749
 > >
 > > Reported by Eli Barzilay for release: 4.2.4
 > >
 > > *** Description:
 > > The code below fails, it didn't in 4.2.3.
 > >
 > > (It used to not work without `ann'. =C2=A0So I had a chunk of
 > > class time talking about why the problem is there, etc etc,
 > > and motivated using `ann'. =C2=A0Last semester, I went through
 > > all of that and *then* I discovered that it worked without
 > > it... =C2=A0So I mumble some excuse about TS changing, and how
 > > this was good news, and then I revised my class notes to
 > > reflect this change. =C2=A0Now I find that it regressed back to
 > > the old thing again... =C2=A0At least I found out about it in
 > > advance to avoid that kind of in-class circus. =C2=A0If it's
 > > possible to fix it -- I'm happy, and even happier if it's
 > > patchable. =C2=A0In any case, please add a test that either
 > > tests that it works if it's fixed, or test that it fails
 > > if it isn't, with some comment to mail me when that test
 > > changes.)
 > >
 > > *** How to repeat:
 > > #lang typed-scheme
 > > (define-type-alias Register (Boxof Integer))
 > > (: foo (Register -> Integer))
 > > (define (foo r) (unbox r))
 > > (foo (box 0))
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10749: TS: Inferring types for boxes
Date: Mon, 8 Feb 2010 18:49:39 -0500

 On Mon, Feb 8, 2010 at 6:35 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > OK, I oversimplified things to a point that it works on 4.2.4 for me
 > too, so I might have had some confusion with the version numbers.
 > Here's the code that works on 4.2.3 but not on 4.2.4 (and not in the
 > recent nightly build too):
 >
 > =A0#lang typed-scheme
 > =A0(define-type-alias Register (Boxof Integer))
 > =A0(: foo (Register -> Integer))
 > =A0(define (foo r) (unbox r))
 > =A0(let ([x (box 0)]) (foo x))
 
 Yes, this will break in 4.2.4.  In general, when you have a `box'
 expression (or a `vector' expression'), you should have an annotation.
  Otherwise, inference will not in general do what you want.
 
 >
 >
 >
 > On Feb =A08, Sam Tobin-Hochstadt wrote:
 >> This code succeeds for me with current SVN.
 >>
 >> On Mon, Feb 8, 2010 at 5:24 PM, =A0<eli@barzilay.org> wrote:
 >> > A new problem report is waiting at
 >> > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10749
 >> >
 >> > Reported by Eli Barzilay for release: 4.2.4
 >> >
 >> > *** Description:
 >> > The code below fails, it didn't in 4.2.3.
 >> >
 >> > (It used to not work without `ann'. =A0So I had a chunk of
 >> > class time talking about why the problem is there, etc etc,
 >> > and motivated using `ann'. =A0Last semester, I went through
 >> > all of that and *then* I discovered that it worked without
 >> > it... =A0So I mumble some excuse about TS changing, and how
 >> > this was good news, and then I revised my class notes to
 >> > reflect this change. =A0Now I find that it regressed back to
 >> > the old thing again... =A0At least I found out about it in
 >> > advance to avoid that kind of in-class circus. =A0If it's
 >> > possible to fix it -- I'm happy, and even happier if it's
 >> > patchable. =A0In any case, please add a test that either
 >> > tests that it works if it's fixed, or test that it fails
 >> > if it isn't, with some comment to mail me when that test
 >> > changes.)
 >> >
 >> > *** How to repeat:
 >> > #lang typed-scheme
 >> > (define-type-alias Register (Boxof Integer))
 >> > (: foo (Register -> Integer))
 >> > (define (foo r) (unbox r))
 >> > (foo (box 0))
 >
 > --
 > =A0 =A0 =A0 =A0 =A0((lambda (x) (x x)) (lambda (x) (x x))) =A0 =A0 =A0 =
 =A0 =A0Eli Barzilay:
 > =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0http://barzilay.org/ =A0 =A0 =A0 =
 =A0 =A0 =A0 =A0 =A0 =A0 Maze is Life!
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu


State changed from "open" to "closed" by samth at Fri, 17 Sep 2010 17:43:12 -0400
Reason>>> The particular example now works.  The problem is general is
not a bug.

