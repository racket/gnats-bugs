From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jul 11 22:27:05 2010
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o6C2R3XX029038
	for <bugs@bugs.plt-scheme.org>; Sun, 11 Jul 2010 22:27:03 -0400
Message-Id: <201007120227.o6C2R10v029031@champlain.ccs.neu.edu>
Date: Sun, 11 Jul 2010 22:27:01 -0400
From: sk@cs.brown.edu
To: bugs@racket-lang.org
Subject: Typed Racket: reconsider List constructor name

>Number:         11027
>Category:       typed-scheme
>Synopsis:       Typed Racket: reconsider List constructor name
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Jul 11 22:28:01 -0400 2010
>Last-Modified:  Tue May 03 17:46:34 -0400 2011
>Originator:     Shriram Krishnamurthi
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0
>Environment:
windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 120271128

Collections:
(("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0\\collects" non-existent-path) ("C:\\Program Files (x86)\\Racket\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" !
 "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
In

(: num-foo ((Setof Number) -> (Listof Number)))
(define (num-foo nums)
  (cond
    [(empty? nums) nums]
    [(cons? nums) (cons (first nums) (num-foo (rest nums)))]))

changing from List to Listof fixed a bunch of things that otherwise
yielded confusing-looking errors.  I'd like to suggest that the name
List is just too easy to confuse with ListOf (even though, yes, it is
the upper-case version of the corresponding constructor).  Could you
pick a different constructor name?
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: sk@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor name
Date: Mon, 12 Jul 2010 09:18:33 -0400

 Typed Racket is quite non-uniform. The names of structs are types and  
 constructors, while list is not.
 
 I think the names of constructors should be uniformly used for the  
 type language and with the exact same spelling. I would expect this  
 rule to apply to list.
 
 
 
 
 
 
 
 On Jul 11, 2010, at 10:28 PM, sk@cs.brown.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=11027
 >
 > Reported by Shriram Krishnamurthi for release: 5.0
 >
 > *** Description:
 > In
 >
 > (: num-foo ((Setof Number) -> (Listof Number)))
 > (define (num-foo nums)
 >  (cond
 >    [(empty? nums) nums]
 >    [(cons? nums) (cons (first nums) (num-foo (rest nums)))]))
 >
 > changing from List to Listof fixed a bunch of things that otherwise
 > yielded confusing-looking errors.  I'd like to suggest that the name
 > List is just too easy to confuse with ListOf (even though, yes, it is
 > the upper-case version of the corresponding constructor).  Could you
 > pick a different constructor name?
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display- 
 > depth) = 32
 > Human Language: english
 > (current-memory-use) 120271128
 >
 > Collections:
 > (("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0\\collects" non- 
 > existent-path) ("C:\\Program Files (x86)\\Racket\\collects" "2htdp"  
 > "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler"  
 > "config" "defaults" "deinprogramm" "drracket" "drscheme" "dynext"  
 > "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime"  
 > "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html"  
 > "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger"  
 > "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net"  
 > "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor"  
 > "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco"  
 > "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit"  
 > "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex"  
 > "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax"  
 > "syntax-color" "teachpack" "test-box-recovery" "test-engine"  
 > "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable"  
 > "version" "web-server" !
 > "wxme" "xml"))
 > Computer Language: (("Determine language from source") (#(#t print  
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: sk@cs.brown.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor  name
Date: Mon, 12 Jul 2010 09:25:56 -0400

 It is possible that vector is another example. And there are even more.
 
 I am okay with any uniform rule. Completely, totally uniform. 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: sk@cs.brown.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor 
	name
Date: Mon, 12 Jul 2010 08:23:10 -0500

 > http://bugs.racket-lang.org/query/?cmd=view&pr=11027
 
 
 On Mon, Jul 12, 2010 at 8:18 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Typed Racket is quite non-uniform. The names of structs are types and
 > constructors, while list is not.
 >
 > I think the names of constructors should be uniformly used for the type
 > language and with the exact same spelling. I would expect this rule to apply
 > to list.
 
 
 
 Just to be sure I understand, the only exception to this rule in the
 code from the PR is that "list" is written "List", right?
 
 IIUC, this is because things work better with our macro system if we
 don't overload things in this way (ie using "list" for both the value
 constructor and the type).
 
 Robby
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, sk@cs.brown.edu,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor 
	name
Date: Mon, 12 Jul 2010 11:14:55 -0400

 On Mon, Jul 12, 2010 at 9:25 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > It is possible that vector is another example. And there are even more.
 >
 > I am okay with any uniform rule. Completely, totally uniform.
 
 There are two possible uniform rules:
 
 1. Every type name is the same as the constructor name.  This has
 several problems: (1) it doesn't work for functions, or hash tables,
 or many other things, (2) Robby is right that the macro system is less
 happy (Check Syntax arrows won't work, for example), (3) many types
 can be constructed with the same value constructor (`cons', for
 example).
 
 2. Every type has a different name.  This is the general rule in TR,
 but with an exception for structs.  I could change `struct:' to
 require a type name, but that involves more change from the original
 untyped code.  I could change `struct:' to bind the capitalized
 version of the struct name, but that's pretty horribly unhygenic, and
 doesn't work with structs with capital letters.
 
 I agree that uniformity would be nice, but I haven't found a proposal
 that works nicely yet.
 -- 
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor  name
Date: Mon, 19 Jul 2010 09:29:52 -0400

 On Jul 12, 2010, at 11:14 AM, Sam Tobin-Hochstadt wrote:
 >=20
 > 1. Every type name is the same as the constructor name.  This has
 > several problems: (1) it doesn't work for functions, or hash tables,
 > or many other things,
 
 I don't understand (1).=20
 
 
 > (2) Robby is right that the macro system is less
 > happy (Check Syntax arrows won't work, for example),
 
 That suggests some research and/or programming but nothing bad as far as =
 I can tell.=20
 
 
 > (3) many types can be constructed with the same value constructor =
 (`cons', for example).
 
 Are you saying=20
 
  (cons Number empty)=20
  =3D=3D=20
  (list Number)
 
 How is this a problem?=20
 
 
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor 
	name
Date: Mon, 19 Jul 2010 10:18:53 -0500

 On Mon, Jul 19, 2010 at 8:29 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Jul 12, 2010, at 11:14 AM, Sam Tobin-Hochstadt wrote:
 >>
 >> 1. Every type name is the same as the constructor name. =A0This has
 >> several problems: (1) it doesn't work for functions, or hash tables,
 >> or many other things,
 >
 > I don't understand (1).
 
 There is no constructor name for functions.  There are many
 constructors for hash tables (`hash', `make-hash', `make-hash-eqv',
 etc).
 
 >> (2) Robby is right that the macro system is less
 >> happy (Check Syntax arrows won't work, for example),
 >
 > That suggests some research and/or programming but nothing bad as far as =
 I can tell.
 
 I don't think we can just assume that problems will be easily fixed.
 We try to avoid conflating bindings in general for good reasons.  I
 think the only other alternative is separate namespaces, which we've
 resisted.
 
 >> (3) many types can be constructed with the same value constructor (`cons=
 ', for example).
 >
 > Are you saying
 >
 > =A0(cons Number empty)
 > =A0=3D=3D
 > =A0(list Number)
 >
 > How is this a problem?
 
 If the goal is a 1-1 mapping between constructors and type names,
 what's the type name for lists? For pairs? For heterogenous lists?
 Racket doesn't have a 1-1 mapping between functions that construct
 data and "types".
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor 
	name
Date: Mon, 19 Jul 2010 10:26:50 -0500

 On Mon, Jul 19, 2010 at 10:18 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> w=
 rote:
 >>> (2) Robby is right that the macro system is less
 >>> happy (Check Syntax arrows won't work, for example),
 >>
 >> That suggests some research and/or programming but nothing bad as far as=
  I can tell.
 >
 > I don't think we can just assume that problems will be easily fixed.
 > We try to avoid conflating bindings in general for good reasons. =C2=A0I
 > think the only other alternative is separate namespaces, which we've
 > resisted.
 
 FWIW, I think that having a different syntax (but related in a simple
 way, eg by capitalization conventions) is a good idea for connecting
 types to value constructors. It makes the types stand out as different
 and the situation where you're copying code and turning a type into a
 value constructor (or vice versa) doesn't seem like it happens all
 that much to make that painful. (The same cannot be said for contracts
 vs types, tho.)
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor  name
Date: Mon, 19 Jul 2010 12:31:07 -0400

 1. I assume with 'functions' you mean -> types.=20
 
 2. Data comes with different constructors so that you can build in =
 different invariants. You will need equations to identify them when the =
 invariants are there anyway. I don't see how this affects uniformity.=20
 
 3. Lastly, I am beginning to think that type constructor names should =
 come with a colon at the end of the name, which might solve the problem =
 with cons vs cons:, list vs list: for everyone including check syntax.=20=
 
 
 
 
 On Jul 19, 2010, at 11:18 AM, Sam Tobin-Hochstadt wrote:
 
 > On Mon, Jul 19, 2010 at 8:29 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>=20
 >> On Jul 12, 2010, at 11:14 AM, Sam Tobin-Hochstadt wrote:
 >>>=20
 >>> 1. Every type name is the same as the constructor name.  This has
 >>> several problems: (1) it doesn't work for functions, or hash tables,
 >>> or many other things,
 >>=20
 >> I don't understand (1).
 >=20
 > There is no constructor name for functions.  There are many
 > constructors for hash tables (`hash', `make-hash', `make-hash-eqv',
 > etc).
 >=20
 >>> (2) Robby is right that the macro system is less
 >>> happy (Check Syntax arrows won't work, for example),
 >>=20
 >> That suggests some research and/or programming but nothing bad as far =
 as I can tell.
 >=20
 > I don't think we can just assume that problems will be easily fixed.
 > We try to avoid conflating bindings in general for good reasons.  I
 > think the only other alternative is separate namespaces, which we've
 > resisted.
 >=20
 >>> (3) many types can be constructed with the same value constructor =
 (`cons', for example).
 >>=20
 >> Are you saying
 >>=20
 >>  (cons Number empty)
 >>  =3D=3D
 >>  (list Number)
 >>=20
 >> How is this a problem?
 >=20
 > If the goal is a 1-1 mapping between constructors and type names,
 > what's the type name for lists? For pairs? For heterogenous lists?
 > Racket doesn't have a 1-1 mapping between functions that construct
 > data and "types".
 >=20
 > --=20
 > sam th
 > samth@ccs.neu.edu
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor 
	name
Date: Mon, 19 Jul 2010 20:11:08 -0500

 On Mon, Jul 19, 2010 at 10:26 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Mon, Jul 19, 2010 at 10:18 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>=
  wrote:
 >>>> (2) Robby is right that the macro system is less
 >>>> happy (Check Syntax arrows won't work, for example),
 >>>
 >>> That suggests some research and/or programming but nothing bad as far a=
 s I can tell.
 >>
 >> I don't think we can just assume that problems will be easily fixed.
 >> We try to avoid conflating bindings in general for good reasons. =A0I
 >> think the only other alternative is separate namespaces, which we've
 >> resisted.
 >
 > FWIW, I think that having a different syntax (but related in a simple
 > way, eg by capitalization conventions) is a good idea for connecting
 > types to value constructors. It makes the types stand out as different
 > and the situation where you're copying code and turning a type into a
 > value constructor (or vice versa) doesn't seem like it happens all
 > that much to make that painful. (The same cannot be said for contracts
 > vs types, tho.)
 
 I've tried to follow the contract library conventions for constructor
 names (list vs listof, etc), but you're right that it doesn't help as
 much when you have to copy between contracts and types, which does
 happen plenty.
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor 
	name
Date: Mon, 19 Jul 2010 20:42:10 -0500

 On Mon, Jul 19, 2010 at 8:11 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wr=
 ote:
 > On Mon, Jul 19, 2010 at 10:26 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Mon, Jul 19, 2010 at 10:18 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu=
 > wrote:
 >>>>> (2) Robby is right that the macro system is less
 >>>>> happy (Check Syntax arrows won't work, for example),
 >>>>
 >>>> That suggests some research and/or programming but nothing bad as far =
 as I can tell.
 >>>
 >>> I don't think we can just assume that problems will be easily fixed.
 >>> We try to avoid conflating bindings in general for good reasons. =C2=A0=
 I
 >>> think the only other alternative is separate namespaces, which we've
 >>> resisted.
 >>
 >> FWIW, I think that having a different syntax (but related in a simple
 >> way, eg by capitalization conventions) is a good idea for connecting
 >> types to value constructors. It makes the types stand out as different
 >> and the situation where you're copying code and turning a type into a
 >> value constructor (or vice versa) doesn't seem like it happens all
 >> that much to make that painful. (The same cannot be said for contracts
 >> vs types, tho.)
 >
 > I've tried to follow the contract library conventions for constructor
 > names (list vs listof, etc), but you're right that it doesn't help as
 > much when you have to copy between contracts and types, which does
 > happen plenty.
 
 Given that typed scheme depends on the contract library already, does
 it make sense to use the same names everywhere? (I wouldn't mind
 having neutral looking aliases for all of the contract names and
 making the current "/c" convention a backwards compatibility thing).
 
 Robby
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor 
	name
Date: Mon, 19 Jul 2010 23:05:21 -0400

 Please!  That would be a step towards having the contract language be
 a pure extension of the type language.
 
 On Mon, Jul 19, 2010 at 9:42 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Mon, Jul 19, 2010 at 8:11 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> =
 wrote:
 >> On Mon, Jul 19, 2010 at 10:26 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> On Mon, Jul 19, 2010 at 10:18 AM, Sam Tobin-Hochstadt <samth@ccs.neu.ed=
 u> wrote:
 >>>>>> (2) Robby is right that the macro system is less
 >>>>>> happy (Check Syntax arrows won't work, for example),
 >>>>>
 >>>>> That suggests some research and/or programming but nothing bad as far=
  as I can tell.
 >>>>
 >>>> I don't think we can just assume that problems will be easily fixed.
 >>>> We try to avoid conflating bindings in general for good reasons. =A0I
 >>>> think the only other alternative is separate namespaces, which we've
 >>>> resisted.
 >>>
 >>> FWIW, I think that having a different syntax (but related in a simple
 >>> way, eg by capitalization conventions) is a good idea for connecting
 >>> types to value constructors. It makes the types stand out as different
 >>> and the situation where you're copying code and turning a type into a
 >>> value constructor (or vice versa) doesn't seem like it happens all
 >>> that much to make that painful. (The same cannot be said for contracts
 >>> vs types, tho.)
 >>
 >> I've tried to follow the contract library conventions for constructor
 >> names (list vs listof, etc), but you're right that it doesn't help as
 >> much when you have to copy between contracts and types, which does
 >> happen plenty.
 >
 > Given that typed scheme depends on the contract library already, does
 > it make sense to use the same names everywhere? (I wouldn't mind
 > having neutral looking aliases for all of the contract names and
 > making the current "/c" convention a backwards compatibility thing).
 >
 > Robby
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11027: Typed Racket: reconsider List constructor  name
Date: Tue, 20 Jul 2010 08:59:03 -0400

 Sam, I guess moving on the TR syntax now is better than in 10 years  
 from now when 10,000s of people are using it. 

Responsible changed from "nobody" to "samth" by samth at Thu, 19 Aug 2010 11:51:28 -0400
Reason>>> tr


