From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Aug 11 21:41:36 2012
Received: from mail-ob0-f172.google.com (mail-ob0-f172.google.com [209.85.214.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q7C1fXgK010770
	for <bugs@bugs.plt-scheme.org>; Sat, 11 Aug 2012 21:41:33 -0400
Message-Id: <201208120141.q7C1fV63010759@champlain.ccs.neu.edu>
Date: Sat, 11 Aug 2012 21:41:31 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR constraint generation cannot deal with interesting lists

>Number:         13009
>Category:       typed-scheme
>Synopsis:       TR constraint generation cannot deal with interesting lists
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Aug 11 21:44:01 -0400 2012
>Last-Modified:  Tue Mar 26 00:53:12 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
The following program should type check but it doesn't.

f and g, show that TR understands that these types are subtypes, but h shows that the inference algorithm cannot generate the necessary types.

other-list is the same as list, except that TR special cases list so that this works.
>How-To-Repeat:
#lang typed/racket


(: other-list (All (a ...) (a ... a -> (List a ... a))))
(define (other-list . args) args)

(: f (Pair 'zzz (List String String String)))
(define f (other-list 'zzz "3" "4" "5"))


(: g (Pair 'zzz (Listof String)))
(define g f)

(: h (Pair 'zzz (Listof String)))
(define h (other-list 'zzz "3" "4" "5"))
>Fix:
