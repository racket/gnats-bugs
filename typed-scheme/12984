From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Aug  8 04:00:52 2012
Received: from mail-yw0-f44.google.com (mail-yw0-f44.google.com [209.85.213.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q7880nMx017954
	for <bugs@bugs.plt-scheme.org>; Wed, 8 Aug 2012 04:00:49 -0400
Message-Id: <201208080800.q7880k9h017944@champlain.ccs.neu.edu>
Date: Wed, 8 Aug 2012 04:00:46 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR subtype doesn't correctly handle case-lambdas

>Number:         12984
>Category:       typed-scheme
>Synopsis:       TR subtype doesn't correctly handle case-lambdas
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Aug 08 04:04:01 -0400 2012
>Last-Modified:  Thu Aug 09 17:57:55 -0400 2012
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
The following program doesn't typecheck but if the definition of g is switched it does.

The problem is that TR doesn't correctly expand out the cases of a case lambda to determine if only a subset of them help make the required type. The annotation helps it make the correct choice by allowing it to do it in two steps.
>How-To-Repeat:
#lang typed/racket/base

(: f (case->
       (Byte -> 'one)
       (Char -> 'one)
       (String -> 'two)))

(define (f x)
  (cond 
   ((byte? x) 'one)
   ((char? x) 'one)
   ((string? x ) 'two)))



(: g ((U Byte Char) -> 'one))
(define g f)
#;
(define g (ann f (case->
                   (Byte -> 'one)
                   (Char -> 'one))))
>Fix:
