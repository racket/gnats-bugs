From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Oct 15 11:04:11 2012
Received: from mail-ie0-f172.google.com (mail-ie0-f172.google.com [209.85.223.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q9FF48tF005088
	for <bugs@bugs.plt-scheme.org>; Mon, 15 Oct 2012 11:04:08 -0400
Message-Id: <201210151503.q9FF3q5c005036@champlain.ccs.neu.edu>
Date: Mon, 15 Oct 2012 11:03:52 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: TR: Can't convert recursive type to contract when used in require/typed

>Number:         13189
>Category:       typed-scheme
>Synopsis:       TR: Can't convert recursive type to contract when used in require/typed
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Oct 15 11:08:01 -0400 2012
>Last-Modified:  Tue Mar 26 01:24:41 -0400 2013
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1.1--2012-10-14(d9241d73/d)
>Environment:
unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 434829808
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/neil/.racket/5.3.1.1/collects"
 (non-existent-path))
("/home/neil/plt-math/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
See summary.

Using `require/typed' seems to be my last option for writing typed+untyped functions that operate on arbitarily nested lists, so I hope it's just a bug.
>How-To-Repeat:
#lang typed/racket/base

(define-type (Listof* A) (Rec T (U A (Listof T))))

(require/typed
 racket/function
 [identity  (All (A) ((Listof* A) -> (Listof* A)))])

(identity 2)


Gives this runtime error:

recursive-contract: expected a chaperone contract or a value that can be coerced into one, got #<impersonator-multi-or/c>
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13189: TR: Can't convert recursive type to
 contract when used in require/typed
Date: Mon, 15 Oct 2012 11:25:50 -0400

 On Mon, Oct 15, 2012 at 11:08 AM,  <neil.toronto@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13189
 >
 > Reported by Neil Toronto for release: 5.3.1.1--2012-10-14(d9241d73/d)
 >
 > *** Description:
 > See summary.
 >
 > Using `require/typed' seems to be my last option for writing typed+untyped functions that operate on arbitarily nested lists, so I hope it's just a bug.
 >
 > *** How to repeat:
 > #lang typed/racket/base
 >
 > (define-type (Listof* A) (Rec T (U A (Listof T))))
 
 This can't be converted to a contract because `(U A something-else)`
 doesn't make sense as a contract without a specific meaning for `A`.
 How would we know when we had gotten to `A`?
 
 > (require/typed
 >  racket/function
 >  [identity  (All (A) ((Listof* A) -> (Listof* A)))])
 >
 > (identity 2)
 >
 >
 > Gives this runtime error:
 >
 > recursive-contract: expected a chaperone contract or a value that can be coerced into one, got #<impersonator-multi-or/c>
 >
 > *** Environment:
 > unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 434829808
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/neil/.racket/5.3.1.1/collects"
 >  (non-existent-path))
 > ("/home/neil/plt-math/collects"
 >  ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 >  ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13189: TR: Can't convert recursive type to
 contract when used in require/typed
Date: Mon, 15 Oct 2012 10:33:42 -0500

 I don't really know if this works out, but given that one does
 wrapping for polymorphic values, maybe that's a way to get something
 out of such a contract?
 
 Robby
 
 On Mon, Oct 15, 2012 at 10:25 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Mon, Oct 15, 2012 at 11:08 AM,  <neil.toronto@gmail.com> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13189
 >>
 >> Reported by Neil Toronto for release: 5.3.1.1--2012-10-14(d9241d73/d)
 >>
 >> *** Description:
 >> See summary.
 >>
 >> Using `require/typed' seems to be my last option for writing typed+untyped functions that operate on arbitarily nested lists, so I hope it's just a bug.
 >>
 >> *** How to repeat:
 >> #lang typed/racket/base
 >>
 >> (define-type (Listof* A) (Rec T (U A (Listof T))))
 >
 > This can't be converted to a contract because `(U A something-else)`
 > doesn't make sense as a contract without a specific meaning for `A`.
 > How would we know when we had gotten to `A`?
 >
 >> (require/typed
 >>  racket/function
 >>  [identity  (All (A) ((Listof* A) -> (Listof* A)))])
 >>
 >> (identity 2)
 >>
 >>
 >> Gives this runtime error:
 >>
 >> recursive-contract: expected a chaperone contract or a value that can be coerced into one, got #<impersonator-multi-or/c>
 >>
 >> *** Environment:
 >> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 434829808
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>
 >>
 >> Collections:
 >> ("/home/neil/.racket/5.3.1.1/collects"
 >>  (non-existent-path))
 >> ("/home/neil/plt-math/collects"
 >>  ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 >>  ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13189: TR: Can't convert recursive type to
 contract when used in require/typed
Date: Mon, 15 Oct 2012 12:33:39 -0400

 On Mon, Oct 15, 2012 at 11:33 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I don't really know if this works out, but given that one does
 > wrapping for polymorphic values, maybe that's a way to get something
 > out of such a contract?
 
 The problem is knowing *when* to wrap.  Imagine that we converted that
 type to a contract, and then applied it to the value:
 
 (list (list 1 2 3) (list 4 5 6))
 
 When would we decide to wrap?
 
 Another way of seeing this is that the applicability check for type
 variables converted to contracts is always true, and so (or/c a ...)
 will always be a potential dynamic error.
 
 >
 > Robby
 >
 > On Mon, Oct 15, 2012 at 10:25 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> On Mon, Oct 15, 2012 at 11:08 AM,  <neil.toronto@gmail.com> wrote:
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=13189
 >>>
 >>> Reported by Neil Toronto for release: 5.3.1.1--2012-10-14(d9241d73/d)
 >>>
 >>> *** Description:
 >>> See summary.
 >>>
 >>> Using `require/typed' seems to be my last option for writing typed+untyped functions that operate on arbitarily nested lists, so I hope it's just a bug.
 >>>
 >>> *** How to repeat:
 >>> #lang typed/racket/base
 >>>
 >>> (define-type (Listof* A) (Rec T (U A (Listof T))))
 >>
 >> This can't be converted to a contract because `(U A something-else)`
 >> doesn't make sense as a contract without a specific meaning for `A`.
 >> How would we know when we had gotten to `A`?
 >>
 >>> (require/typed
 >>>  racket/function
 >>>  [identity  (All (A) ((Listof* A) -> (Listof* A)))])
 >>>
 >>> (identity 2)
 >>>
 >>>
 >>> Gives this runtime error:
 >>>
 >>> recursive-contract: expected a chaperone contract or a value that can be coerced into one, got #<impersonator-multi-or/c>
 >>>
 >>> *** Environment:
 >>> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 434829808
 >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>
 >>>
 >>> Collections:
 >>> ("/home/neil/.racket/5.3.1.1/collects"
 >>>  (non-existent-path))
 >>> ("/home/neil/plt-math/collects"
 >>>  ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 >>>  ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >>>
 >>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13189: TR: Can't convert recursive type to
 contract when used in require/typed
Date: Mon, 15 Oct 2012 11:41:48 -0500

 Oh, I see. (Like I'm imaginging that it is instantiated to
 
   (Rec T (U Something-Concrete (Listof T))))
 
 and that doesn't help at all!)
 
 Hm. Interesting. If you had a value that had the wrappers in it
 already, then you could just look at it and verify that it met such a
 contract. But when you're crossing from typed to untyped (or vice
 versa) you want to be inserting the wrappers and you don't know where
 they go.
 
 Robby
 
 On Mon, Oct 15, 2012 at 11:33 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Mon, Oct 15, 2012 at 11:33 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> I don't really know if this works out, but given that one does
 >> wrapping for polymorphic values, maybe that's a way to get something
 >> out of such a contract?
 >
 > The problem is knowing *when* to wrap.  Imagine that we converted that
 > type to a contract, and then applied it to the value:
 >
 > (list (list 1 2 3) (list 4 5 6))
 >
 > When would we decide to wrap?
 >
 > Another way of seeing this is that the applicability check for type
 > variables converted to contracts is always true, and so (or/c a ...)
 > will always be a potential dynamic error.
 >
 >>
 >> Robby
 >>
 >> On Mon, Oct 15, 2012 at 10:25 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>> On Mon, Oct 15, 2012 at 11:08 AM,  <neil.toronto@gmail.com> wrote:
 >>>> A new problem report is waiting at
 >>>>   http://bugs.racket-lang.org/query/?cmd=view&pr=13189
 >>>>
 >>>> Reported by Neil Toronto for release: 5.3.1.1--2012-10-14(d9241d73/d)
 >>>>
 >>>> *** Description:
 >>>> See summary.
 >>>>
 >>>> Using `require/typed' seems to be my last option for writing typed+untyped functions that operate on arbitarily nested lists, so I hope it's just a bug.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang typed/racket/base
 >>>>
 >>>> (define-type (Listof* A) (Rec T (U A (Listof T))))
 >>>
 >>> This can't be converted to a contract because `(U A something-else)`
 >>> doesn't make sense as a contract without a specific meaning for `A`.
 >>> How would we know when we had gotten to `A`?
 >>>
 >>>> (require/typed
 >>>>  racket/function
 >>>>  [identity  (All (A) ((Listof* A) -> (Listof* A)))])
 >>>>
 >>>> (identity 2)
 >>>>
 >>>>
 >>>> Gives this runtime error:
 >>>>
 >>>> recursive-contract: expected a chaperone contract or a value that can be coerced into one, got #<impersonator-multi-or/c>
 >>>>
 >>>> *** Environment:
 >>>> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>>> Human Language: english
 >>>> (current-memory-use) 434829808
 >>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>>
 >>>>
 >>>> Collections:
 >>>> ("/home/neil/.racket/5.3.1.1/collects"
 >>>>  (non-existent-path))
 >>>> ("/home/neil/plt-math/collects"
 >>>>  ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 >>>>  ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >>>>
 >>>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>>
 >>>
 >>>
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13189: TR: Can't convert recursive type to contract
 when used in require/typed
Date: Mon, 15 Oct 2012 13:27:35 -0400

 On 10/15/2012 12:33 PM, Sam Tobin-Hochstadt wrote:
 > On Mon, Oct 15, 2012 at 11:33 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> I don't really know if this works out, but given that one does
 >> wrapping for polymorphic values, maybe that's a way to get something
 >> out of such a contract?
 >
 > The problem is knowing *when* to wrap.  Imagine that we converted that
 > type to a contract, and then applied it to the value:
 >
 > (list (list 1 2 3) (list 4 5 6))
 >
 > When would we decide to wrap?
 >
 > Another way of seeing this is that the applicability check for type
 > variables converted to contracts is always true, and so (or/c a ...)
 > will always be a potential dynamic error.
 
 I don't understand the "wrapping" part above, but (or/c a ...) 
 potentially raising an error for values with the right type hasn't 
 stopped TR from generating a contract for
 
    (U (Vectorof Integer) (Vectorof Index))
 
 This raises an error given any vector of indexes.
 
 Is it the case that, for (Listof* A), runtime contract errors would only 
 be raised for A = (Listof B)? If so, it may not be a huge problem.
 
 Neil ⊥
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13189: TR: Can't convert recursive type to contract
 when used in require/typed
Date: Tue, 16 Oct 2012 11:21:58 -0600

 Is this PR related to the following error?
 
 #lang racket
 
 (module defs typed/racket
    (provide list-or)
 
    (: list-or (All (A B) ((Listof A) (Listof B) -> (Listof (U A B)))))
    (define (list-or xs ys)
      (map (λ: ([x : A] [y : B]) (or x y)) xs ys)))
 
 (require 'defs)
 list-or
 
 
 Type Checker: The type of list-or cannot be converted to a contract in: 
 list-or
 
 Neil ⊥
 
 On 10/15/2012 10:33 AM, Sam Tobin-Hochstadt wrote:
 > On Mon, Oct 15, 2012 at 11:33 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> I don't really know if this works out, but given that one does
 >> wrapping for polymorphic values, maybe that's a way to get something
 >> out of such a contract?
 >
 > The problem is knowing *when* to wrap.  Imagine that we converted that
 > type to a contract, and then applied it to the value:
 >
 > (list (list 1 2 3) (list 4 5 6))
 >
 > When would we decide to wrap?
 >
 > Another way of seeing this is that the applicability check for type
 > variables converted to contracts is always true, and so (or/c a ...)
 > will always be a potential dynamic error.
 >
 >>
 >> Robby
 >>
 >> On Mon, Oct 15, 2012 at 10:25 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>> On Mon, Oct 15, 2012 at 11:08 AM,  <neil.toronto@gmail.com> wrote:
 >>>> A new problem report is waiting at
 >>>>    http://bugs.racket-lang.org/query/?cmd=view&pr=13189
 >>>>
 >>>> Reported by Neil Toronto for release: 5.3.1.1--2012-10-14(d9241d73/d)
 >>>>
 >>>> *** Description:
 >>>> See summary.
 >>>>
 >>>> Using `require/typed' seems to be my last option for writing typed+untyped functions that operate on arbitarily nested lists, so I hope it's just a bug.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang typed/racket/base
 >>>>
 >>>> (define-type (Listof* A) (Rec T (U A (Listof T))))
 >>>
 >>> This can't be converted to a contract because `(U A something-else)`
 >>> doesn't make sense as a contract without a specific meaning for `A`.
 >>> How would we know when we had gotten to `A`?
 >>>
 >>>> (require/typed
 >>>>   racket/function
 >>>>   [identity  (All (A) ((Listof* A) -> (Listof* A)))])
 >>>>
 >>>> (identity 2)
 >>>>
 >>>>
 >>>> Gives this runtime error:
 >>>>
 >>>> recursive-contract: expected a chaperone contract or a value that can be coerced into one, got #<impersonator-multi-or/c>
 >>>>
 >>>> *** Environment:
 >>>> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>>> Human Language: english
 >>>> (current-memory-use) 434829808
 >>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>>>
 >>>>
 >>>> Collections:
 >>>> ("/home/neil/.racket/5.3.1.1/collects"
 >>>>   (non-existent-path))
 >>>> ("/home/neil/plt-math/collects"
 >>>>   ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-d!
 >>>>   ebugger" "framework" "web-server" "deinprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >>>>
 >>>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>>>
 >>>
 >>>
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >
 >
 >
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13189: TR: Can't convert recursive type to
 contract when used in require/typed
Date: Tue, 16 Oct 2012 13:28:28 -0400

 On Tue, Oct 16, 2012 at 1:21 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > Is this PR related to the following error?
 
 Yes, although the below program probably doesn't need to be an error,
 since the relevant union is in positive position only. In fact, the
 following contract is sufficient for the safety of `list-or`:
 
     (-> list? list? any)
 
 Sam
 
 > #lang racket
 >
 > (module defs typed/racket
 >   (provide list-or)
 >
 >   (: list-or (All (A B) ((Listof A) (Listof B) -> (Listof (U A B)))))
 >   (define (list-or xs ys)
 >     (map (λ: ([x : A] [y : B]) (or x y)) xs ys)))
 >
 > (require 'defs)
 > list-or
 >
 >
 > Type Checker: The type of list-or cannot be converted to a contract in:
 > list-or
 >
 > Neil ⊥
 >
 >
 > On 10/15/2012 10:33 AM, Sam Tobin-Hochstadt wrote:
 >>
 >> On Mon, Oct 15, 2012 at 11:33 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>>
 >>> I don't really know if this works out, but given that one does
 >>> wrapping for polymorphic values, maybe that's a way to get something
 >>> out of such a contract?
 >>
 >>
 >> The problem is knowing *when* to wrap.  Imagine that we converted that
 >> type to a contract, and then applied it to the value:
 >>
 >> (list (list 1 2 3) (list 4 5 6))
 >>
 >> When would we decide to wrap?
 >>
 >> Another way of seeing this is that the applicability check for type
 >> variables converted to contracts is always true, and so (or/c a ...)
 >> will always be a potential dynamic error.
 >>
 >>>
 >>> Robby
 >>>
 >>> On Mon, Oct 15, 2012 at 10:25 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>
 >>> wrote:
 >>>>
 >>>> On Mon, Oct 15, 2012 at 11:08 AM,  <neil.toronto@gmail.com> wrote:
 >>>>>
 >>>>> A new problem report is waiting at
 >>>>>    http://bugs.racket-lang.org/query/?cmd=view&pr=13189
 >>>>>
 >>>>> Reported by Neil Toronto for release: 5.3.1.1--2012-10-14(d9241d73/d)
 >>>>>
 >>>>> *** Description:
 >>>>> See summary.
 >>>>>
 >>>>> Using `require/typed' seems to be my last option for writing
 >>>>> typed+untyped functions that operate on arbitarily nested lists, so I hope
 >>>>> it's just a bug.
 >>>>>
 >>>>> *** How to repeat:
 >>>>> #lang typed/racket/base
 >>>>>
 >>>>> (define-type (Listof* A) (Rec T (U A (Listof T))))
 >>>>
 >>>>
 >>>> This can't be converted to a contract because `(U A something-else)`
 >>>> doesn't make sense as a contract without a specific meaning for `A`.
 >>>> How would we know when we had gotten to `A`?
 >>>>
 >>>>> (require/typed
 >>>>>   racket/function
 >>>>>   [identity  (All (A) ((Listof* A) -> (Listof* A)))])
 >>>>>
 >>>>> (identity 2)
 >>>>>
 >>>>>
 >>>>> Gives this runtime error:
 >>>>>
 >>>>> recursive-contract: expected a chaperone contract or a value that can
 >>>>> be coerced into one, got #<impersonator-multi-or/c>
 >>>>>
 >>>>> *** Environment:
 >>>>> unix "Linux schroder 2.6.38-15-generic #66-Ubuntu SMP Tue Aug 14
 >>>>> 17:24:44 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >>>>> (get-display-depth) = 32
 >>>>> Human Language: english
 >>>>> (current-memory-use) 434829808
 >>>>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >>>>> (links #:user? #f #:root? #t) = ()
 >>>>>
 >>>>>
 >>>>> Collections:
 >>>>> ("/home/neil/.racket/5.3.1.1/collects"
 >>>>>   (non-existent-path))
 >>>>> ("/home/neil/plt-math/collects"
 >>>>>   ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser"
 >>>>> "file" "readline" "dynext" "scribblings" "mzcom" "compatibility" "trace"
 >>>>> "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page"
 >>>>> "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client"
 >>>>> "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html"
 >>>>> "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme"
 >>>>> "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble"
 >>>>> "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help"
 >>>>> "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor"
 >>>>> "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex"
 >>>>> "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs"
 >>>>> "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher"
 >>>>> "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images"
 >>>>> "future-visualizer" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco"
 >>>>> "gui-d!
 >>>>>   ebugger" "framework" "web-server" "deinprogramm" "slideshow"
 >>>>> "macro-debugger" "typed-racket" "net" "mred"))
 >>>>>
 >>>>> Computer Language: (("Determine language from source") (#(#t print
 >>>>> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >>>>> (test))))
 >>>>>
 >>>>
 >>>>
 >>>>
 >>>> --
 >>>> sam th
 >>>> samth@ccs.neu.edu
 >>
 >>
 >>
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 

