From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Feb 25 07:04:25 2010
Received: from mail-yw0-f174.google.com (mail-yw0-f174.google.com [209.85.211.174])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o1PC4Nx8000702
	for <bugs@bugs.plt-scheme.org>; Thu, 25 Feb 2010 07:04:24 -0500
Message-Id: <201002251204.o1PC4LZe000695@champlain.ccs.neu.edu>
Date: Thu, 25 Feb 2010 07:04:21 -0500
From: noelwelsh@gmail.com
To: bugs@plt-scheme.org
Subject: in-vector sequences do not work in Typed Scheme

>Number:         10782
>Category:       typed-scheme
>Synopsis:       in-vector sequences do not work in Typed Scheme
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Feb 25 07:08:01 -0500 2010
>Closed-Date:    Wed Aug 18 10:02:53 -0400 2010
>Last-Modified:  Fri Sep 03 20:58:20 -0400 2010
>Originator:     Noel Welsh
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.4.3-svn24feb2010
>Environment:
unix "Linux hpc-005 2.6.18-164.2.1.el5 #1 SMP Wed Sep 30 12:55:19 EDT 2009 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 231621284

Collections:
(("/home/pg/nhw/collects") ("/home/pg/nhw/data/collects" non-existent-path) ("/home/pg/nhw/.plt-scheme/4.2.4.3/collects" non-existent-path) ("/bham/ums/linux/pd/packages/plt-scheme/collects" ".svn" "tex2page" "wxme" "string-constants" "test-engine" "planet" "mzcom" "typed-scheme" "drscheme" "r6rs" "s-exp" "framework" "srpersist" "at-exp" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "redex" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "typed" "frtime" "combinator-parser" "mred" "guibuilder" "htdp" "graphics" "profile" "setup" "reader" "afm" "scheme" "config" "gui-debugger" "defaults" "honu" "icons" "handin-client" "lazy" "texpict" "teachpack" "browser" "rnrs" "scriblib" "waterworld" "parser-tools" "r5rs" "games" "eopl" "tests" "html" "swindle" "handin-server" "repos-time-stamp" "compiler" "embedded-gui" "2htdp" "stepper" "readline" "hierlist" "deinprogramm" "sgl" "version" "preprocessor" "ne!
 t" "syntax" "help" "trace" "slatex" "xml" "launcher" "schemeunit" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "meta" "unstable" "plai"))
Computer Language: (("Determine language from source") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #f))
>Description:
Typed Scheme raises a mysterious type error when using in-vector sequences. The 4 errors are given below. The first error is because Typed Scheme lacks a type definition for the function version of in-vector. This is easy to fix. The remaining three errors are more vexing as the fully expanded code (expanded using the Macro Stepper in scheme/base) nowhere contains an application taking four arguments, for example.

The messages are:

. Type Checker: untyped identifier in-vector imported from module <for.ss> in: (define: foo : (Listof Integer) (for/list (((ann i : Integer) (in-vector (ann v : (Vectorof Integer))))) i))
. Type Checker: Expression should produce 4 values, but produces 1 values of types Nothing in: (for/list (((ann i : Integer) (in-vector (ann v : (Vectorof Integer))))) i)
. Type Checker: Wrong number of arguments, expected 1 and got 4 in: (for/list (((ann i : Integer) (in-vector (ann v : (Vectorof Integer))))) i)
. Type Checker: Wrong number of arguments, expected 2 and got 5 in: (for/list (((ann i : Integer) (in-vector (ann v : (Vectorof Integer))))) i)
>How-To-Repeat:
Evaluate this:

#lang typed/scheme

(define: v : (Vectorof Integer) (vector 1 2 3 4 5 6 7 8 9))
 
(define: foo : (Listof Integer)
  (for/list ((#{i :: Integer} (in-vector #{v :: (Vectorof Integer)})))
    i))
>Fix:
Removing the type declarations on i and v causes the code to work.

>Audit-Trail:
State changed from "open" to "closed" by samth at Wed, 18 Aug 2010 10:02:53 -0400
Reason>>> not a bug

From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: noelwelsh@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10782: in-vector sequences do not work in Typed Scheme
Date: Wed, 18 Aug 2010 10:02:36 -0400

 On Thu, Feb 25, 2010 at 8:08 AM,  <noelwelsh@gmail.com> wrote:
 >
 > Typed Scheme raises a mysterious type error when using in-vector sequence=
 s. The 4 errors are given below. The first error is because Typed Scheme la=
 cks a type definition for the function version of in-vector. This is easy t=
 o fix. The remaining three errors are more vexing as the fully expanded cod=
 e (expanded using the Macro Stepper in scheme/base) nowhere contains an app=
 lication taking four arguments, for example.
 >
 
 The problem is you wrote:
 
 #{i : Integer}
 
 but you should have written:
 
 #{i :: Integer}
 
 which produces something very different, that unfortunately the `for'
 macros interpret as legal syntax.  I don't think there's a way to fix
 this - there's a fundamental difference between annotating a binding
 and annotating an expression.
 --=20
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: noelwelsh@gmail.com, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10782: in-vector sequences do not work in Typed Scheme
Date: Wed, 18 Aug 2010 10:27:39 -0400

 Could you use the same syntax for both so that accidental mistakes don't =
 trip the type checker? It's usually clear what is a binding position and =
 what is an expression position.=20
 
 
 
 
 
 On Aug 18, 2010, at 10:02 AM, Sam Tobin-Hochstadt wrote:
 
 > On Thu, Feb 25, 2010 at 8:08 AM,  <noelwelsh@gmail.com> wrote:
 >>=20
 >> Typed Scheme raises a mysterious type error when using in-vector =
 sequences. The 4 errors are given below. The first error is because =
 Typed Scheme lacks a type definition for the function version of =
 in-vector. This is easy to fix. The remaining three errors are more =
 vexing as the fully expanded code (expanded using the Macro Stepper in =
 scheme/base) nowhere contains an application taking four arguments, for =
 example.
 >>=20
 >=20
 > The problem is you wrote:
 >=20
 > #{i : Integer}
 >=20
 > but you should have written:
 >=20
 > #{i :: Integer}
 >=20
 > which produces something very different, that unfortunately the `for'
 > macros interpret as legal syntax.  I don't think there's a way to fix
 > this - there's a fundamental difference between annotating a binding
 > and annotating an expression.
 > --=20
 > sam th
 > samth@ccs.neu.edu
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>,
        Ryan Michael Culpepper <ryanc@ccs.neu.edu>
Cc: noelwelsh@gmail.com, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10782: in-vector sequences do not work in Typed Scheme
Date: Wed, 18 Aug 2010 10:46:04 -0400

 On Wed, Aug 18, 2010 at 10:27 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 >
 > Could you use the same syntax for both so that accidental mistakes don't =
 trip the type checker? It's usually clear what is a binding position and wh=
 at is an expression position.
 
 Unfortunately, that doesn't work.  In expression position, it's
 important to keep the type expressions exposed to the macro expander
 for possible renaming.  For example, this expression:
 
 (let ([-> 5]) #{x :: (A -> B)})
 
 should properly respect lexical scope for `->'.  That means that we
 can't just use the reader macro to add (A -> B) as a syntax property,
 since that happens *before* the macro expander applies renamings to`
 ->'.  Thus, the above expression reads to:
 
 (let ([-> 5]) (ann x (A -> B)))
 
 which does the renaming as expected.
 
 However, this strategy can't work for bindings (since there are no
 binding-position macros).  Fortunately, there's a different trick that
 works here for other reasons (but doesn't work for expressions).
 
 Roughly, the situation is that #{x : T} works some but not all of the
 time in expression position, and #{x :: T} never works in binding
 position.
 
 To solve this, we'd need some special kind of syntax property that was
 (a) guaranteed to be a syntax object and (b) subject to renames by the
 macro expander.  Maybe that would be a good thing to add.  Ryan, would
 that be hard?
 
 sam th
 
 >
 > On Aug 18, 2010, at 10:02 AM, Sam Tobin-Hochstadt wrote:
 >
 >> On Thu, Feb 25, 2010 at 8:08 AM, =A0<noelwelsh@gmail.com> wrote:
 >>>
 >>> Typed Scheme raises a mysterious type error when using in-vector sequen=
 ces. The 4 errors are given below. The first error is because Typed Scheme =
 lacks a type definition for the function version of in-vector. This is easy=
  to fix. The remaining three errors are more vexing as the fully expanded c=
 ode (expanded using the Macro Stepper in scheme/base) nowhere contains an a=
 pplication taking four arguments, for example.
 >>>
 >>
 >> The problem is you wrote:
 >>
 >> #{i : Integer}
 >>
 >> but you should have written:
 >>
 >> #{i :: Integer}
 >>
 >> which produces something very different, that unfortunately the `for'
 >> macros interpret as legal syntax. =A0I don't think there's a way to fix
 >> this - there's a fundamental difference between annotating a binding
 >> and annotating an expression.
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Ryan Michael Culpepper <ryanc@ccs.neu.edu>, noelwelsh@gmail.com,
        bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10782: in-vector sequences do not work in Typed Scheme
Date: Wed, 18 Aug 2010 10:56:49 -0400

 Would macros for binding positions solve the problem?=20
 
 
 On Aug 18, 2010, at 10:46 AM, Sam Tobin-Hochstadt wrote:
 
 > On Wed, Aug 18, 2010 at 10:27 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>=20
 >>=20
 >> Could you use the same syntax for both so that accidental mistakes =
 don't trip the type checker? It's usually clear what is a binding =
 position and what is an expression position.
 >=20
 > Unfortunately, that doesn't work.  In expression position, it's
 > important to keep the type expressions exposed to the macro expander
 > for possible renaming.  For example, this expression:
 >=20
 > (let ([-> 5]) #{x :: (A -> B)})
 >=20
 > should properly respect lexical scope for `->'.  That means that we
 > can't just use the reader macro to add (A -> B) as a syntax property,
 > since that happens *before* the macro expander applies renamings to`
 > ->'.  Thus, the above expression reads to:
 >=20
 > (let ([-> 5]) (ann x (A -> B)))
 >=20
 > which does the renaming as expected.
 >=20
 > However, this strategy can't work for bindings (since there are no
 > binding-position macros).  Fortunately, there's a different trick that
 > works here for other reasons (but doesn't work for expressions).
 >=20
 > Roughly, the situation is that #{x : T} works some but not all of the
 > time in expression position, and #{x :: T} never works in binding
 > position.
 >=20
 > To solve this, we'd need some special kind of syntax property that was
 > (a) guaranteed to be a syntax object and (b) subject to renames by the
 > macro expander.  Maybe that would be a good thing to add.  Ryan, would
 > that be hard?
 >=20
 > sam th
 >=20
 >>=20
 >> On Aug 18, 2010, at 10:02 AM, Sam Tobin-Hochstadt wrote:
 >>=20
 >>> On Thu, Feb 25, 2010 at 8:08 AM,  <noelwelsh@gmail.com> wrote:
 >>>>=20
 >>>> Typed Scheme raises a mysterious type error when using in-vector =
 sequences. The 4 errors are given below. The first error is because =
 Typed Scheme lacks a type definition for the function version of =
 in-vector. This is easy to fix. The remaining three errors are more =
 vexing as the fully expanded code (expanded using the Macro Stepper in =
 scheme/base) nowhere contains an application taking four arguments, for =
 example.
 >>>>=20
 >>>=20
 >>> The problem is you wrote:
 >>>=20
 >>> #{i : Integer}
 >>>=20
 >>> but you should have written:
 >>>=20
 >>> #{i :: Integer}
 >>>=20
 >>> which produces something very different, that unfortunately the =
 `for'
 >>> macros interpret as legal syntax.  I don't think there's a way to =
 fix
 >>> this - there's a fundamental difference between annotating a binding
 >>> and annotating an expression.
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>=20
 >>=20
 >=20
 >=20
 >=20
 > --=20
 > sam th
 > samth@ccs.neu.edu
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Ryan Michael Culpepper <ryanc@ccs.neu.edu>, noelwelsh@gmail.com,
        bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10782: in-vector sequences do not work in Typed Scheme
Date: Wed, 18 Aug 2010 10:59:34 -0400

 On Wed, Aug 18, 2010 at 10:56 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Would macros for binding positions solve the problem?
 
 Yes, but every time I talk to Ryan, he convinces me that they don't
 make sense. :(
 
 > On Aug 18, 2010, at 10:46 AM, Sam Tobin-Hochstadt wrote:
 >
 >> On Wed, Aug 18, 2010 at 10:27 AM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >>>
 >>>
 >>> Could you use the same syntax for both so that accidental mistakes don'=
 t trip the type checker? It's usually clear what is a binding position and =
 what is an expression position.
 >>
 >> Unfortunately, that doesn't work. =A0In expression position, it's
 >> important to keep the type expressions exposed to the macro expander
 >> for possible renaming. =A0For example, this expression:
 >>
 >> (let ([-> 5]) #{x :: (A -> B)})
 >>
 >> should properly respect lexical scope for `->'. =A0That means that we
 >> can't just use the reader macro to add (A -> B) as a syntax property,
 >> since that happens *before* the macro expander applies renamings to`
 >> ->'. =A0Thus, the above expression reads to:
 >>
 >> (let ([-> 5]) (ann x (A -> B)))
 >>
 >> which does the renaming as expected.
 >>
 >> However, this strategy can't work for bindings (since there are no
 >> binding-position macros). =A0Fortunately, there's a different trick that
 >> works here for other reasons (but doesn't work for expressions).
 >>
 >> Roughly, the situation is that #{x : T} works some but not all of the
 >> time in expression position, and #{x :: T} never works in binding
 >> position.
 >>
 >> To solve this, we'd need some special kind of syntax property that was
 >> (a) guaranteed to be a syntax object and (b) subject to renames by the
 >> macro expander. =A0Maybe that would be a good thing to add. =A0Ryan, wou=
 ld
 >> that be hard?
 >>
 >> sam th
 >>
 >>>
 >>> On Aug 18, 2010, at 10:02 AM, Sam Tobin-Hochstadt wrote:
 >>>
 >>>> On Thu, Feb 25, 2010 at 8:08 AM, =A0<noelwelsh@gmail.com> wrote:
 >>>>>
 >>>>> Typed Scheme raises a mysterious type error when using in-vector sequ=
 ences. The 4 errors are given below. The first error is because Typed Schem=
 e lacks a type definition for the function version of in-vector. This is ea=
 sy to fix. The remaining three errors are more vexing as the fully expanded=
  code (expanded using the Macro Stepper in scheme/base) nowhere contains an=
  application taking four arguments, for example.
 >>>>>
 >>>>
 >>>> The problem is you wrote:
 >>>>
 >>>> #{i : Integer}
 >>>>
 >>>> but you should have written:
 >>>>
 >>>> #{i :: Integer}
 >>>>
 >>>> which produces something very different, that unfortunately the `for'
 >>>> macros interpret as legal syntax. =A0I don't think there's a way to fi=
 x
 >>>> this - there's a fundamental difference between annotating a binding
 >>>> and annotating an expression.
 >>>> --
 >>>> sam th
 >>>> samth@ccs.neu.edu
 >>>
 >>>
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Ryan Michael Culpepper <ryanc@ccs.neu.edu>, noelwelsh@gmail.com,
        bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10782: in-vector sequences do not work in Typed Scheme
Date: Wed, 18 Aug 2010 11:00:32 -0400

 Ryan, why don't they make sense?=20
 
 
 On Aug 18, 2010, at 10:59 AM, Sam Tobin-Hochstadt wrote:
 
 > On Wed, Aug 18, 2010 at 10:56 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>=20
 >> Would macros for binding positions solve the problem?
 >=20
 > Yes, but every time I talk to Ryan, he convinces me that they don't
 > make sense. :(
 >=20
 >> On Aug 18, 2010, at 10:46 AM, Sam Tobin-Hochstadt wrote:
 >>=20
 >>> On Wed, Aug 18, 2010 at 10:27 AM, Matthias Felleisen
 >>> <matthias@ccs.neu.edu> wrote:
 >>>>=20
 >>>>=20
 >>>> Could you use the same syntax for both so that accidental mistakes =
 don't trip the type checker? It's usually clear what is a binding =
 position and what is an expression position.
 >>>=20
 >>> Unfortunately, that doesn't work.  In expression position, it's
 >>> important to keep the type expressions exposed to the macro expander
 >>> for possible renaming.  For example, this expression:
 >>>=20
 >>> (let ([-> 5]) #{x :: (A -> B)})
 >>>=20
 >>> should properly respect lexical scope for `->'.  That means that we
 >>> can't just use the reader macro to add (A -> B) as a syntax =
 property,
 >>> since that happens *before* the macro expander applies renamings to`
 >>> ->'.  Thus, the above expression reads to:
 >>>=20
 >>> (let ([-> 5]) (ann x (A -> B)))
 >>>=20
 >>> which does the renaming as expected.
 >>>=20
 >>> However, this strategy can't work for bindings (since there are no
 >>> binding-position macros).  Fortunately, there's a different trick =
 that
 >>> works here for other reasons (but doesn't work for expressions).
 >>>=20
 >>> Roughly, the situation is that #{x : T} works some but not all of =
 the
 >>> time in expression position, and #{x :: T} never works in binding
 >>> position.
 >>>=20
 >>> To solve this, we'd need some special kind of syntax property that =
 was
 >>> (a) guaranteed to be a syntax object and (b) subject to renames by =
 the
 >>> macro expander.  Maybe that would be a good thing to add.  Ryan, =
 would
 >>> that be hard?
 >>>=20
 >>> sam th
 >>>=20
 >>>>=20
 >>>> On Aug 18, 2010, at 10:02 AM, Sam Tobin-Hochstadt wrote:
 >>>>=20
 >>>>> On Thu, Feb 25, 2010 at 8:08 AM,  <noelwelsh@gmail.com> wrote:
 >>>>>>=20
 >>>>>> Typed Scheme raises a mysterious type error when using in-vector =
 sequences. The 4 errors are given below. The first error is because =
 Typed Scheme lacks a type definition for the function version of =
 in-vector. This is easy to fix. The remaining three errors are more =
 vexing as the fully expanded code (expanded using the Macro Stepper in =
 scheme/base) nowhere contains an application taking four arguments, for =
 example.
 >>>>>>=20
 >>>>>=20
 >>>>> The problem is you wrote:
 >>>>>=20
 >>>>> #{i : Integer}
 >>>>>=20
 >>>>> but you should have written:
 >>>>>=20
 >>>>> #{i :: Integer}
 >>>>>=20
 >>>>> which produces something very different, that unfortunately the =
 `for'
 >>>>> macros interpret as legal syntax.  I don't think there's a way to =
 fix
 >>>>> this - there's a fundamental difference between annotating a =
 binding
 >>>>> and annotating an expression.
 >>>>> --
 >>>>> sam th
 >>>>> samth@ccs.neu.edu
 >>>>=20
 >>>>=20
 >>>=20
 >>>=20
 >>>=20
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>=20
 >>=20
 >=20
 >=20
 >=20
 > --=20
 > sam th
 > samth@ccs.neu.edu
 

