From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Oct 13 23:06:27 2013
Received: from mail-oa0-f45.google.com (mail-oa0-f45.google.com [209.85.219.45])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id r9E36Pdv011695
	for <bugs@bugs.plt-scheme.org>; Sun, 13 Oct 2013 23:06:25 -0400
Message-Id: <201310140306.r9E36MEZ011674@winooski.ccs.neu.edu>
Date: Sun, 13 Oct 2013 23:06:22 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: TR can't import cstructs as typed structs

>Number:         14094
>Category:       typed-scheme
>Synopsis:       TR can't import cstructs as typed structs
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Oct 13 23:08:01 -0400 2013
>Last-Modified:  Thu Nov 21 23:16:01 -0500 2013
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.90.0.9--2013-10-09(ae4f9c5f/d)
>Environment:
unix "Linux woodstock 3.8.0-31-generic #46-Ubuntu SMP Tue Sep 10 20:03:44 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 1083557248
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
/home/neil/plt/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [180 auto-installed packages not shown]
Installation-wide:
 [none]
User-specific for installation "development":
 [none]



Collections:
("/home/neil/.racket/development/collects"
 (non-existent-path))
("/home/neil/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: Saved 2 internal errors:

compiled/expanded code out of context; cannot find exports to restore imported renamings for module: "/home/neil/plt/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/types/struct-table.rkt"
  context...:
   /home/neil/plt/racket/collects/syntax/private/id-table.rkt:77:2: do-ref
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/syntax-browser/widget.rkt:184:26: for-loop
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/syntax-browser/widget.rkt:187:10: for-loop
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/view/step-display.rkt:93:4
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/view/stepper.rkt:437:4: update* method in macro-stepper-widget%
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/view/stepper.rkt:399:31
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/view/stepper.rkt:368:24


compiled/expanded code out of context; cannot find exports to restore imported renamings for module: "/home/neil/plt/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/types/struct-table.rkt"
  context...:
   /home/neil/plt/racket/collects/syntax/private/id-table.rkt:77:2: do-ref
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/syntax-browser/widget.rkt:184:26: for-loop
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/syntax-browser/widget.rkt:187:10: for-loop
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/view/step-display.rkt:93:4
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/view/stepper.rkt:437:4: update* method in macro-stepper-widget%
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/view/stepper.rkt:399:31
   /home/neil/plt/pkgs/macro-debugger-pkgs/macro-debugger/macro-debugger/view/stepper.rkt:368:24

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test)) #t))
>Description:
The problem is that cstructs aren't structs. But surely something could be done to avoid double wrapping.

Because of this limitation, `math/bigfloat' imports the _mpfr cstruct using the #:opaque keyword and a predicate. Therefore, TR rightly rejects this program:

#lang typed/racket

(require math/bigfloat)

(define-type Value (U (Pair Real Real) Bigfloat))

(: fst (Value -> Real))
(define (fst x)
  (cond [(pair? x)  (car x)]
        [else  (raise-argument-error 'fst "(Pair Real Real)" x)]))


Type Checker: Polymorphic function car could not be applied to arguments:
Types: (Pairof a b) -> (a : ((! False @ (car) (0 0)) | (False @ (car) (0 0))) : (car (0 0)))
       (Listof a) -> a
Arguments: (Pairof Any Any)
Expected result: Real
 in: (car x)


For all TR knows, `bigfloat?' could return #t for pairs. (Though you would never guess from the type (Any -> Boolean : Bigfloat) that `bigfloat?' doesn't exclude non-bigfloats.)
>How-To-Repeat:
#lang typed/racket

(require/typed
   math/private/bigfloat/mpfr
   [#:struct mpfr ()])


only-in: identifier `struct:mpfr' not included in nested require spec in: math/private/bigfloat/mpfr
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14094: TR can't import cstructs as typed structs
Date: Thu, 21 Nov 2013 23:12:32 -0500

 On 2013-10-13 23:08:02 -0400, neil.toronto@gmail.com wrote:
 > Because of this limitation, `math/bigfloat' imports the _mpfr cstruct using the #:opaque keyword and a predicate. Therefore, TR rightly rejects this program:
 > 
 > #lang typed/racket
 > 
 > (require math/bigfloat)
 > 
 > (define-type Value (U (Pair Real Real) Bigfloat))
 > 
 > (: fst (Value -> Real))
 > (define (fst x)
 >   (cond [(pair? x)  (car x)]
 >         [else  (raise-argument-error 'fst "(Pair Real Real)" x)]))
 > 
 > 
 > Type Checker: Polymorphic function car could not be applied to arguments:
 > Types: (Pairof a b) -> (a : ((! False @ (car) (0 0)) | (False @ (car) (0 0))) : (car (0 0)))
 >        (Listof a) -> a
 > Arguments: (Pairof Any Any)
 > Expected result: Real
 >  in: (car x)
 > 
 > 
 > For all TR knows, `bigfloat?' could return #t for pairs. (Though you would never guess from the type (Any -> Boolean : Bigfloat) that `bigfloat?' doesn't exclude non-bigfloats.)
 
 Now that I think about this, we might end up changing this in the future
 so that the `bigfloat?` can't return #t for pairs. It turns out that
 there's another PR about how Opaque types are currently unsound:
   http://bugs.racket-lang.org/query/?cmd=view&audit-trail&database=default&pr=13961
 
 The solution proposed there (wrap all Opaque values while they live in
 typed code, unwrap when they go back to untyped) would make bigfloats
 actually distinct from pairs. That would let your code type-check,
 though it doesn't solve the issue mentioned in this PR's title.
 
 Cheers,
 Asumu
