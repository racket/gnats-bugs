From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Dec 26 14:04:20 2014
Received: from mail-ig0-f174.google.com (mail-ig0-f174.google.com [209.85.213.174])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id sBQJ4In7014460
	for <bugs@bugs.plt-scheme.org>; Fri, 26 Dec 2014 14:04:19 -0500
Message-Id: <201412261904.sBQJ4G6s014453@winooski.ccs.neu.edu>
Date: Fri, 26 Dec 2014 14:04:16 -0500
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: TR: for*/fold raises internal error when fold variables are unannotated

>Number:         14893
>Category:       typed-scheme
>Synopsis:       TR: for*/fold raises internal error when fold variables are unannotated
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Dec 26 14:08:01 -0500 2014
>Closed-Date:    Tue Aug 25 13:40:37 -0400 2015
>Last-Modified:  Tue Aug 25 13:40:37 -0400 2015
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1.6--2014-12-21(-/f)
>Environment:
unix "Linux snoopy 3.13.0-37-generic #64-Ubuntu SMP Mon Sep 22 21:28:38 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 1034894764
raco pkg (show):
Installation-wide:
 Package                 Checksum           Source
 disassemble             cf0ee3a5...        catalog...ssemble
 drbayes                                    link...il/drbayes
 main-distribution       67868e03...        catalog...ibution
 main-distribution-test  ca4a870e...        catalog...on-test
 nonplussed              f6c06999...        url.../nonplussed
 optimization-coach      be5f7908...        catalog...n-coach
 pict3d                                     link...eil/pict3d
 plot                    e536986e...        clone...path=plot
 racket-lib                                 static-link...lib
 rsound                  4f5d4d15...        catalog rsound
 slideshow-latex         9275fecb...        catalog...w-latex
 [214 auto-installed packages not shown]
User-specific for installation "development":
 [none]



Collections:
("/home/neil/.racket/development/collects"
 (non-existent-path))
("/home/neil/plt-fresh/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f ((test) (main)) #t))
>Description:
The error is

var.ty: bad attribute value for syntax template
  attribute value: '(#f)
  expected for attribute: list of depth 1 of syntax
  sub-value: #f
  expected for sub-value: syntax in: var.ty
>How-To-Repeat:
#lang typed/racket

(for*/fold ([i 0]) ()
  1)
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14893: TR: for*/fold raises internal error when
 fold variables are unannotated
Date: Sun, 4 Jan 2015 18:13:42 -0500

 On 2014-12-26 14:08:02 -0500, neil.toronto@gmail.com wrote:
 > *** Description:
 > The error is
 >
 > var.ty: bad attribute value for syntax template
 >   attribute value: '(#f)
 >   expected for attribute: list of depth 1 of syntax
 >   sub-value: #f
 >   expected for sub-value: syntax in: var.ty
 
 I have a potential fix for this, but it's a little unclear what the
 right behavior should be so I'm going to follow up here.
 
 The internal error was probably introduced in commit 38c64fcdc6536d4bd0
 because two syntax-parse clauses were consolidated into one.
 
 Previously, you had to supply (1) a result type annotation XOR (2) a
 type annotation on all fold variables. Consolidating the two cases made
 it non-exclusive.
 
 So (Option 1) is to go back to the XOR behavior since that's how it was
 for v6.0.1 and v6.1.
 
 (Option 2) is to allow either, but to only use the fold variable
 annotations for the return type when all of the variables are annotated.
 This is the current behavior for `for/fold` (not `for*/fold`).
 
 (this option is a little confusing in retrospect because it means some
  type annotations are actually ignored)
 
 The funny thing is that (Option 1) was implemented but broken in v6.0
 and earlier probably because of a bug in a syntax class.
 
 Here are some examples that might help illustrate the choices.
 
 (for*/fold ([i 0] [j 0]) () i)           ; Accepted <=6.0, rejected >=6.0.1, error 6.1.1
 (for*/fold ([i : Integer 0] [j 0]) () i) ; Rejected <=6.1, error 6.1.1
 
 (for/fold ([i 0] [j 0]) () i)            ; Accepted in all
 (for/fold ([i : Integer 0] [j 0]) () 1)  ; Rejected <=6.0, accepted >=6.0.1
 
 Any thoughts?
 
 Cheers,
 Asumu
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>, neil.toronto@gmail.com,
        bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14893: TR: for*/fold raises internal error when
 fold variables are unannotated
Date: Fri, 16 Jan 2015 23:38:19 +0000

 --089e0160b8bcbd83a0050ccd7753
 Content-Type: text/plain; charset=UTF-8
 
 On Sun Jan 04 2015 at 6:13:53 PM Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 
 > On 2014-12-26 14:08:02 -0500, neil.toronto@gmail.com wrote:
 > > *** Description:
 > > The error is
 > >
 > > var.ty: bad attribute value for syntax template
 > >   attribute value: '(#f)
 > >   expected for attribute: list of depth 1 of syntax
 > >   sub-value: #f
 > >   expected for sub-value: syntax in: var.ty
 >
 > I have a potential fix for this, but it's a little unclear what the
 > right behavior should be so I'm going to follow up here.
 >
 > The internal error was probably introduced in commit 38c64fcdc6536d4bd0
 > because two syntax-parse clauses were consolidated into one.
 >
 > Previously, you had to supply (1) a result type annotation XOR (2) a
 > type annotation on all fold variables. Consolidating the two cases made
 > it non-exclusive.
 >
 > So (Option 1) is to go back to the XOR behavior since that's how it was
 > for v6.0.1 and v6.1.
 >
 > (Option 2) is to allow either, but to only use the fold variable
 > annotations for the return type when all of the variables are annotated.
 > This is the current behavior for `for/fold` (not `for*/fold`).
 >
 
 I'd like to choose Option 3, which is use all the annotations always. An
 important design goal we've stuck with in TR is believing the users
 annotations, and we should do that here too. Is there a reason we can't?
 
 Sam
 
 --089e0160b8bcbd83a0050ccd7753
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <br><br><div class=3D"gmail_quote">On Sun Jan 04 2015 at 6:13:53 PM Asumu T=
 akikawa &lt;<a href=3D"mailto:asumu@ccs.neu.edu">asumu@ccs.neu.edu</a>&gt; =
 wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bord=
 er-left:1px #ccc solid;padding-left:1ex">On 2014-12-26 14:08:02 -0500, <a h=
 ref=3D"mailto:neil.toronto@gmail.com" target=3D"_blank">neil.toronto@gmail.=
 com</a> wrote:<br>
 &gt; *** Description:<br>
 &gt; The error is<br>
 &gt;<br>
 &gt; var.ty: bad attribute value for syntax template<br>
 &gt;=C2=A0 =C2=A0attribute value: &#39;(#f)<br>
 &gt;=C2=A0 =C2=A0expected for attribute: list of depth 1 of syntax<br>
 &gt;=C2=A0 =C2=A0sub-value: #f<br>
 &gt;=C2=A0 =C2=A0expected for sub-value: syntax in: var.ty<br>
 <br>
 I have a potential fix for this, but it&#39;s a little unclear what the<br>
 right behavior should be so I&#39;m going to follow up here.<br>
 <br>
 The internal error was probably introduced in commit 38c64fcdc6536d4bd0<br>
 because two syntax-parse clauses were consolidated into one.<br>
 <br>
 Previously, you had to supply (1) a result type annotation XOR (2) a<br>
 type annotation on all fold variables. Consolidating the two cases made<br>
 it non-exclusive.<br>
 <br>
 So (Option 1) is to go back to the XOR behavior since that&#39;s how it was=
 <br>
 for v6.0.1 and v6.1.<br>
 <br>
 (Option 2) is to allow either, but to only use the fold variable<br>
 annotations for the return type when all of the variables are annotated.<br=
 >
 This is the current behavior for `for/fold` (not `for*/fold`).<br></blockqu=
 ote><div><br></div><div>I&#39;d like to choose Option 3, which is use all t=
 he annotations always. An important design goal we&#39;ve stuck with in TR =
 is believing the users annotations, and we should do that here too. Is ther=
 e a reason we can&#39;t?</div><div><br></div><div>Sam=C2=A0</div></div>
 
 --089e0160b8bcbd83a0050ccd7753--
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: neil.toronto@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14893: TR: for*/fold raises internal error when
 fold variables are unannotated
Date: Sun, 18 Jan 2015 14:20:30 -0500

 On 2015-01-16 23:38:19 +0000, Sam Tobin-Hochstadt wrote:
 >    I'd like to choose Option 3, which is use all the annotations always. An
 >    important design goal we've stuck with in TR is believing the users
 >    annotations, and we should do that here too. Is there a reason we can't?
 
 I suppose we could do that, but since the accumulator type annotations
 are used to annotate the return values of the entire fold expression
 what do we do if not all accumulators are annotated?
 
 We could make them `Any`, but that loses precision. Also, do you put
 `Any` if no annotations are provided? (that basically means you have to
 always put annotations in, which is a regression)
 
 (BTW, I've wished we had a `_` type annotation that would accept and
  then be replaced by whatever synthesized type TR comes up with.
  Especially if it worked inside of type constructors.)
 
 Cheers,
 Asumu
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14893: TR: for*/fold raises internal error when
 fold variables are unannotated
Date: Sun, 18 Jan 2015 14:34:59 -0500

 On Sun, Jan 18, 2015 at 2:20 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2015-01-16 23:38:19 +0000, Sam Tobin-Hochstadt wrote:
 >>    I'd like to choose Option 3, which is use all the annotations always. An
 >>    important design goal we've stuck with in TR is believing the users
 >>    annotations, and we should do that here too. Is there a reason we can't?
 >
 > I suppose we could do that, but since the accumulator type annotations
 > are used to annotate the return values of the entire fold expression
 > what do we do if not all accumulators are annotated?
 
 How about we use all the annotations for annotating the variables, but
 only use them for the return type if all of them are annotated?
 
 Sam
 
 >
 > We could make them `Any`, but that loses precision. Also, do you put
 > `Any` if no annotations are provided? (that basically means you have to
 > always put annotations in, which is a regression)
 >
 > (BTW, I've wished we had a `_` type annotation that would accept and
 >  then be replaced by whatever synthesized type TR comes up with.
 >  Especially if it worked inside of type constructors.)
 >
 > Cheers,
 > Asumu
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14893: TR: for*/fold raises internal error when
 fold variables are unannotated
Date: Sun, 18 Jan 2015 14:42:56 -0500

 On 2015-01-18 14:34:59 -0500, Sam Tobin-Hochstadt wrote:
 > How about we use all the annotations for annotating the variables, but
 > only use them for the return type if all of them are annotated?
 
 I think that's Option 2 in my original e-mail, that `for/fold`
 implements currently. Does the `for/fold` behavior match what you had in
 mind?
 
 Cheers,
 Asumu
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: Neil Toronto <neil.toronto@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14893: TR: for*/fold raises internal error when
 fold variables are unannotated
Date: Sun, 18 Jan 2015 20:02:25 +0000

 --001a11c1be0c46a06c050cf2afa2
 Content-Type: text/plain; charset=UTF-8
 
 On Sun Jan 18 2015 at 2:43:03 PM Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 
 > On 2015-01-18 14:34:59 -0500, Sam Tobin-Hochstadt wrote:
 > > How about we use all the annotations for annotating the variables, but
 > > only use them for the return type if all of them are annotated?
 >
 > I think that's Option 2 in my original e-mail, that `for/fold`
 > implements currently. Does the `for/fold` behavior match what you had in
 > mind?
 
 
  Yes, this makes sense now. I agree with Option 2.
 
 Sam
 
 --001a11c1be0c46a06c050cf2afa2
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div class=3D"gmail_quote">On Sun Jan 18 2015 at 2:43:03 PM Asumu Takikawa =
 &lt;<a href=3D"mailto:asumu@ccs.neu.edu">asumu@ccs.neu.edu</a>&gt; wrote:<b=
 r><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:=
 1px #ccc solid;padding-left:1ex">On 2015-01-18 14:34:59 -0500, Sam Tobin-Ho=
 chstadt wrote:<br>
 &gt; How about we use all the annotations for annotating the variables, but=
 <br>
 &gt; only use them for the return type if all of them are annotated?<br>
 <br>
 I think that&#39;s Option 2 in my original e-mail, that `for/fold`<br>
 implements currently. Does the `for/fold` behavior match what you had in<br=
 >
 mind?</blockquote><div><br></div><div>=C2=A0Yes, this makes sense now. I ag=
 ree with Option 2.</div><div><br></div><div>Sam=C2=A0</div></div>
 
 --001a11c1be0c46a06c050cf2afa2--


State changed from "open" to "closed" by asumu at Tue, 25 Aug 2015 13:40:37 -0400
Reason>>> Closed by commit f5f84c762530b45514db024a0e8482326e715ecd

