From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Nov 13 20:51:13 2013
Received: from mail-oa0-f46.google.com (mail-oa0-f46.google.com [209.85.219.46])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rAE1p5ra009848
	for <bugs@bugs.plt-scheme.org>; Wed, 13 Nov 2013 20:51:05 -0500
Message-Id: <201311140151.rAE1p2MH009840@winooski.ccs.neu.edu>
Date: Wed, 13 Nov 2013 20:51:02 -0500
From: spencer@florence.io
To: bugs@racket-lang.org
Subject: issues with REPL in typed/racket

>Number:         14152
>Category:       typed-scheme
>Synopsis:       issues with REPL in typed/racket
>Class:          sw-bug
>Responsible:    samth
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Nov 13 20:52:01 -0500 2013
>Last-Modified:  Thu Nov 21 22:59:36 -0500 2013
>Originator:     Spencer Florence
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.90.0.10--2013-11-08(ed4cbb80/d/local)
>Environment:
macosx "Darwin paperweight.local 13.0.0 Darwin Kernel Version 13.0.0: Thu Sep 19 22:22:27 PDT 2013; root:xnu-2422.1.72~6/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 450858364
Links: (links) = (); (links #:user? #f) = ("drracket-solarized"); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
/Applications/Racket/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [203 auto-installed packages not shown]
Installation-wide:
 Package               Checksum                                    Source
 drracket-solarized    3c7ac56e3bde4f52653c08ad1058188f9bc10184    (catalog drracket-solarized)
User-specific for installation "development":
 [none]



Collections:
("/Users/florence/Library/Racket/development/collects"
 (non-existent-path))
("/Applications/Racket/racket/collects"
 (".DS_Store" ".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test)) #t))
>Description:
Failing to define a value with a type in the REPL, then entering the correct value+type causes the value's type to print incorrectly.

Causes:

(define test (lambda: ([x : Integer]) x))

To print the type:

- : (Error -> Error)
>How-To-Repeat:
> (define test (lambda: ([x : Intege]) x))
. Type Checker: Unbound type name Intege in: Intege
. Type Checker: Unbound type name Intege in: Intege
. Type Checker: Summary: 2 errors encountered in:
  Intege
  Intege
> test
. . test: undefined;
 cannot reference an identifier before its definition
> (define test (lambda: ([x : Integer]) x))
> test
- : (Error -> Error)
#<procedure:test>
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: spencer@florence.io, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14152: issues with REPL in typed/racket
Date: Wed, 13 Nov 2013 21:15:43 -0500

 On 2013-11-13 20:52:02 -0500, spencer@florence.io wrote:
 > *** Description:
 > Failing to define a value with a type in the REPL, then entering the correct value+type causes the value's type to print incorrectly.
 > 
 > Causes:
 > 
 > (define test (lambda: ([x : Integer]) x))
 > 
 > To print the type:
 > 
 > - : (Error -> Error)
 
 Looks like this is my fault. :p
 
 Recently, I made re-definitions work in the REPL, and further made
 re-definitions use the previously synthesized type as the expected type.
 That doesn't work if the previously synthesized type was bogus due to an
 error.
 
 (it's also sort of unfortunate that Errors don't stop you from using the
  value like Nothing does)
 
 Cheers,
 Asumu
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: spencer@florence.io, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14152: issues with REPL in typed/racket
Date: Wed, 13 Nov 2013 21:45:27 -0500

 > On 2013-11-13 20:52:02 -0500, spencer@florence.io wrote:
 > Failing to define a value with a type in the REPL, then entering the correct value+type causes the value's type to print incorrectly.
 >
 > Causes:
 >
 > (define test (lambda: ([x : Integer]) x))
 >
 > To print the type:
 >
 > - : (Error -> Error)
 
 Also, looking into this a bit more, the (Error -> Error) type
 is actually bogus even without redefinition.
 
 Consider this interaction:
 
 　-> (define test (lambda: ([x : Intege]) x))
 　; readline-input:1:28: Type Checker: Unbound type name Intege
 　;   in: Intege
 　; [,bt for context]
 　; readline-input:1:28: Type Checker: Unbound type name Intege
 　;   in: Intege
 　; [,bt for context]
 　; Type Checker: Summary: 2 errors encountered [,bt for context]
 　-> ((lambda () (if (= (random 2) 0) test values)))
 　- : (Error -> Error)
 　#<procedure:values>
 
 You can use the resulting (Error -> Error) function to turn
 strings into integers or whatever.
 
 Cheers,
 Asumu

