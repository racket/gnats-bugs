From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar 11 09:40:42 2013
Received: from mail-oa0-f51.google.com (mail-oa0-f51.google.com [209.85.219.51])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2BDedTG006987
	for <bugs@bugs.plt-scheme.org>; Mon, 11 Mar 2013 09:40:39 -0400
Message-Id: <201303111340.r2BDebRa006982@champlain.ccs.neu.edu>
Date: Mon, 11 Mar 2013 09:40:37 -0400
From: norman@astro.gla.ac.uk
To: bugs@racket-lang.org
Subject: Typed Racket and input-port? misbehaving

>Number:         13594
>Category:       typed-scheme
>Synopsis:       Typed Racket and input-port? misbehaving
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Mar 11 09:44:01 -0400 2013
>Closed-Date:    Sat Apr 19 23:55:48 -0400 2014
>Last-Modified:  Sat Apr 19 23:56:02 -0400 2014
>Originator:     Norman Gray
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.3
>Environment:
macosx "Darwin coricopat.home 12.2.1 Darwin Kernel Version 12.2.1: Thu Oct 18 16:32:48 PDT 2012; root:xnu-2050.20.9~2/RELEASE_X86_64 x86_64" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 456349284
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (#<path:/tmp/audiotag/testing/templib> #<path:/checkouts/me/code/der-codec-typed-racket>); (links #:user? #f #:root? #t) = ()
Planet2 (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific:
 Package[*=auto]           Checksum    Source
 der-codec-typed-racket    #f          (link /checkouts/me/code/der-codec-typed-racket)



Collections:
("/Users/norman/Library/Racket/5.3.3/collects"
 (non-existent-path))
("/Data/LocalApplications/Racket/5.3.3/collects"
 ("2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Consider the attached program fragment.

With #lang typed/racket/no-check or #lang racket (and commenting out the type declaration), this produces

"b-> bytes"
"p-> port"

With #lang typed/racket, however, it produces

"b-> bytes"
"-> nothing"

Stepping through with the debugger appears to show that (input-port? p) evaluates to #t in the cond, but processing falls through to the next clause nonetheless.
>How-To-Repeat:
#lang typed/racket

(: f (case->
      (-> String)
      (Input-Port -> String)
      (Bytes -> String)))

(define (f (p #f))
  ;(eprintf "p=~s: ~s/~s~%" p (input-port? p) (bytes? p))
  (cond ((input-port? p)
         (format "p-> ~a" (read-bytes 100 p)))
        ((bytes? p)
         (format "b-> ~a" p))
        (else
         "-> nothing")))

(f #"bytes")
(call-with-input-bytes #"port" f)
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Norman Gray <norman@astro.gla.ac.uk>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13594: Typed Racket and input-port? misbehaving
Date: Mon, 11 Mar 2013 09:48:01 -0400

 On Mon, Mar 11, 2013 at 9:44 AM,  <norman@astro.gla.ac.uk> wrote:
 >
 > Consider the attached program fragment.
 >
 > With #lang typed/racket/no-check or #lang racket (and commenting out the type declaration), this produces
 >
 > "b-> bytes"
 > "p-> port"
 >
 > With #lang typed/racket, however, it produces
 >
 > "b-> bytes"
 > "-> nothing"
 >
 > Stepping through with the debugger appears to show that (input-port? p) evaluates to #t in the cond, but processing falls through to the next clause nonetheless.
 
 
 This is almost certainly a bug in the optimizer (or the information
 communicated to it) wrt whether `input-port?` is ever true there.
From: Norman Gray <norman@astro.gla.ac.uk>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13594: Typed Racket and input-port? misbehaving
Date: Mon, 11 Mar 2013 14:03:39 +0000

 Sam, hello.
 
 On 2013 Mar 11, at 13:48, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 
 > On Mon, Mar 11, 2013 at 9:44 AM,  <norman@astro.gla.ac.uk> wrote:
 >> 
 >> Consider the attached program fragment.
 > [...]
 > This is almost certainly a bug in the optimizer (or the information
 > communicated to it) wrt whether `input-port?` is ever true there.
 
 Thanks.  I wonder if this is related to the bug that led me here, which also appears to be related to Input-Port.
 
 I was going to send this to users@racket-lang-org, but it might make more sense here -- do tell me if I should redirect it.  I haven't submitted it as a bug as such, because I'm not positive I'm doing the right thing in the main-untyped.rkt below, given the various qualifications in the list message (and I know this is still undocumented/unreleased).  I'm happy to log it as a bug if that's appropriate.
 
 ----
 
 I'm having some perplexities (again) with Typed Racket.  Consider the following.
 
 I declare a struct, and a module which uses it:
 
     % cat thing.rkt
     #lang typed/racket
     
     (struct: thing ([s : String])
       #:transparent)
     
     (provide thing thing?)
     % cat f.rkt 
     #lang typed/racket
     
     (require "./thing.rkt")
     (provide f)
     
     (: f (case->
           (-> thing)
           (Input-Port -> thing)
           (Bytes -> thing)))
     (define (f (p #f))
       ;(eprintf "p=~s: ~s/~s~%" p (input-port? p) (bytes? p))
       (thing
        (cond ((input-port? p)
               (format "p-> ~a" (read-bytes 100 p)))
              ((bytes? p)
               (format "b-> ~a" p))
              (else
               "-> nothing"))))
 
 Then I create a main.rkt which uses these
 
     % cat main-typed.rkt 
     #lang typed/racket
     (require "./thing.rkt" "./f.rkt")
     (provide (all-from-out "./thing.rkt" "./f.rkt"))
     % cat try-tt.rkt    
     #lang typed/racket
     (require "./main-typed.rkt")
     (call-with-input-bytes #"tt" f)
     % 
 
 That works:
 
     % racket -t try-tt.rkt
     (thing "-> nothing")
     % 
 
 (well, it doesn't, actually, but the wrong answer is possibly because of a separate bug; but Racket doesn't object to this).
 
 Running this from untyped Racket, however, doesn't work:
 
     % cat try-ut.rkt                
     #lang racket
     (require "./main-typed.rkt")
     
     (call-with-input-bytes #"ut" f)
     % racket -t try-ut.rkt          
     try-ut.rkt:4:29: Type Checker: The type of f cannot be converted to a contract
       in: f
     %
 
 OK, disappointing, but I can deal with that, after reading http://lists.racket-lang.org/users/archive/2012-November/054951.html and eg collects/math/special-functions.rkt :
 
     % cat main-untyped.rkt    
     #lang racket/base
     (require typed/untyped-utils)
     (require racket/contract
              "./thing.rkt"
              (except-in "./f.rkt" f))
     (require/untyped-contract "./f.rkt"
                               (f (case->
                                   ([#:k (U Symbol Integer False)] -> thing)
                                   (Input-Port [#:k (U Symbol Integer False)] -> thing)
                                   (Bytes [#:k (U Symbol Integer False)] -> thing))))
     (provide (all-from-out "./thing.rkt" 
                            "./f.rkt"))
     % cat try-uu.rkt 
     #lang racket
     (require "./main-untyped.rkt")    
     (call-with-input-bytes #"uu" f)
     % racket -t try-uu.rkt          
     Type Checker: Unbound type name thing
       in: f2
       context...:
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/utils/tc-utils.rkt:95:12: for-loop
        f16
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/typecheck/tc-toplevel.rkt:295:0: type-check
        success
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/typed-racket.rkt:40:4
        standard-module-name-resolver
        standard-module-name-resolver
     Type Checker: Unbound type name thing
       in: f2
       context...:
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/utils/tc-utils.rkt:95:12: for-loop
        f16
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/typecheck/tc-toplevel.rkt:295:0: type-check
        success
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/typed-racket.rkt:40:4
        standard-module-name-resolver
        standard-module-name-resolver
     Type Checker: Unbound type name thing
       in: f2
       context...:
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/utils/tc-utils.rkt:95:12: for-loop
        f16
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/typecheck/tc-toplevel.rkt:295:0: type-check
        success
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/typed-racket.rkt:40:4
        standard-module-name-resolver
        standard-module-name-resolver
     Type Checker: Summary: 3 errors encountered
       context...:
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/typecheck/tc-toplevel.rkt:295:0: type-check
        success
        /Data/LocalApplications/Racket/5.3.3/collects/typed-racket/typed-racket.rkt:40:4
        standard-module-name-resolver
        standard-module-name-resolver
     % 
 
 Based on the reduction I've done, it appears to be the Input-Port in the type that causes the problem with generating the contract.
 
 Best wishes,
 
 Norman
 
 
 -- 
 Norman Gray  :  http://nxg.me.uk
 SUPA School of Physics and Astronomy, University of Glasgow, UK
 
 
From: Norman Gray <norman@astro.gla.ac.uk>
To: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org, norman@astro.gla.ac.uk
Cc: 
Subject: Re: all/13594: Typed Racket and input-port? misbehaving
Date: Sat, 16 Mar 2013 17:03:13 +0000

 Greetings.
 
 I added a followup to bug 13594, which seemed to report a separate bug.  In retrospect that wasn't sensible, so I've re-reported it as a new bug, <http://bugs.racket-lang.org/query/?cmd=view&pr=13608>; this email is the cross-reference to that one.  Sorry for the confusion.
 
 %3Fcmd%3Dview%2520audit-trail%26database%3Ddefault%26pr%3D13594 
 
 Best wishes,
 
 Norman  
 
 
 -- 
 Norman Gray  :  http://nxg.me.uk
 SUPA School of Physics and Astronomy, University of Glasgow, UK
 
 


State changed from "open" to "closed" by asumu at Sat, 19 Apr 2014 23:55:48 -0400
Reason>>> Fixed in v6.0 and newer versions.

From: Asumu Takikawa <asumu@ccs.neu.edu>
To: norman@astro.gla.ac.uk, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13594: Typed Racket and input-port? misbehaving
Date: Sat, 19 Apr 2014 23:54:37 -0400

 On 2013-03-11 09:44:02 -0400, norman@astro.gla.ac.uk wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13594
 >
 > Reported by Norman Gray for release: 5.3.3
 >
 > *** Description:
 > Consider the attached program fragment.
 >
 > With #lang typed/racket/no-check or #lang racket (and commenting out the type declaration), this produces
 >
 > "b-> bytes"
 > "p-> port"
 >
 > With #lang typed/racket, however, it produces
 >
 > "b-> bytes"
 > "-> nothing"
 
 JFYI, this bug appears to have been fixed in Racket v6.0 and on (was
 still broken in v5.3.6) so I will close the PR.
 
 Cheers,
 Asumu
