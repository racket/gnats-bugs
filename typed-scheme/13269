From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Nov 17 15:20:39 2012
Received: from mail-ie0-f172.google.com (mail-ie0-f172.google.com [209.85.223.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id qAHKKa2t026682
	for <bugs@bugs.plt-scheme.org>; Sat, 17 Nov 2012 15:20:36 -0500
Message-Id: <201211172020.qAHKKWAs026676@champlain.ccs.neu.edu>
Date: Sat, 17 Nov 2012 15:20:32 -0500
From: jensaxel@soegaard.net
To: bugs@racket-lang.org
Subject: A case where a Typed Racket type can't be converted to a contract

>Number:         13269
>Category:       typed-scheme
>Synopsis:       A case where a Typed Racket type can't be converted to a contract
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Nov 17 15:24:01 -0500 2012
>Last-Modified:  Tue Mar 26 01:36:33 -0400 2013
>Originator:     Jens Axel SÃ¸gaard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.1.7--2012-11-17(b8e84f6a/d/merging-math2)
>Environment:
macosx "Darwin mba-3.local 12.2.0 Darwin Kernel Version 12.2.0: Sat Aug 25 00:48:52 PDT 2012; root:xnu-2050.18.24~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: danish
(current-memory-use) 526390696
Links: (links) = ("scratchy"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/soegaard/Library/Racket/5.3.1.7/collects"
 (non-existent-path))
("/Users/soegaard/copy-soegaard/racket/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace" "typed" "typed-racket" "type!
 d-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
See http://www.mail-archive.com/users@racket-lang.org/msg14963.html

I have the following contract on next-prime :

    (: next-prime : (case-> (N -> N) (Z -> Z)) )

It says that for all primes p, positive or negative, (next-prime p)
will be an integer.
Furthermore if p is a natural number, then (next-prime p) will also be
a natural number.

This type can't be converted to a contract:
   Type Checker: The type of next-prime cannot be converted to a
contract in: (next-prime 4)

My understanding is that a since N is a subset of Z a predicate can't
determine whether
which case to use. Is there an alternative construct, that I can use
in order to get
a contract?

My temporary solution is to provide untyped-next-prime

   (: untyped-next-prime : Z -> Z)
   (define (untyped-next-prime z)
     (next-prime z))

whose type can be converted to a contract.


See details in:
https://github.com/plt/racket/blob/master/collects/math/private/number-theory/number-theory.rkt
>How-To-Repeat:
>Fix:
