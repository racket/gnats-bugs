From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Sep 18 14:54:11 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.227])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m8IIs4FD000799
	for <bugs@bugs.plt-scheme.org>; Thu, 18 Sep 2008 14:54:04 -0400
Message-Id: <200809181854.m8IIs1aN000793@champlain.ccs.neu.edu>
Date: Thu, 18 Sep 2008 14:54:01 -0400
From: pnkfelix@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: rest args bug in typed scheme?

>Number:         9767
>Category:       typed-scheme
>Synopsis:       rest args bug in typed scheme?
>Class:          sw-bug
>Responsible:    samth
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Sep 18 14:56:01 -0400 2008
>Closed-Date:    Wed Aug 12 16:42:37 -0400 2009
>Last-Modified:  Wed Aug 12 16:42:37 -0400 2009
>Originator:     Felix Klock
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1
>Environment:
macosx "Darwin Chimaera.local 9.4.0 Darwin Kernel Version 9.4.0: Mon Jun  9 19:30:53 PDT 2008; root:xnu-1228.5.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 119405180

Collections:
(("/Users/pnkfelix/Library/PLT Scheme/4.1/collects" non-existent-path) ("/Applications/PLT Scheme v4.1/collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n"))
>Description:
typed scheme does not allow me to ascribe (X -> X) 
type to a function with one+rest args
>How-To-Repeat:
#lang typed-scheme
(: f (Number -> Number))
(define (f x . rest)
  x)
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: pnkfelix@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9767: rest args bug in typed scheme?
Date: Thu, 18 Sep 2008 15:07:46 -0400

 On Sep 18, 2008, at 2:56 PM, pnkfelix@ccs.neu.edu wrote:
 
 > #lang typed-scheme
 > (: f (Number -> Number))
 > (define (f x . rest)
 >   x)
 
 
 
 but it's proper type is
 
 #lang typed-scheme
 
 (: f (Number Number * -> Number))
 (define (f x . rest)
    x)
 
 
 
From: Felix S Klock II <pnkfelix@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9767: rest args bug in typed scheme?
Date: Thu, 18 Sep 2008 15:23:29 -0400

 Matthias (and cc'ing a lot of people, some of whom I do not know;  
 Reply-all seemed appropriate here)-
 
 On Sep 18, 2008, at 3:07 PM, Matthias Felleisen wrote:
 
 >
 > On Sep 18, 2008, at 2:56 PM, pnkfelix@ccs.neu.edu wrote:
 >
 >> #lang typed-scheme
 >> (: f (Number -> Number))
 >> (define (f x . rest)
 >>  x)
 >
 >
 >
 > but it's proper type is
 >
 > #lang typed-scheme
 >
 > (: f (Number Number * -> Number))
 > (define (f x . rest)
 >  x)
 
 What you wrote certainly looks like a type for f.
 
 I do not know what f is supposed to do; based on the definition of f,  
 I could certainly ascribe a much more general type to it than even you  
 did.  For example:
 
 #lang typed-scheme
 (: f (All (X) (X Any * -> X)))
 (define (f x . rest)
    x)
 
 
 I just thought that I should be able to ascribe a more constrained  
 type to f, and when I asked Sam about this, he said it was a bug.
 
 -Felix
 
 

Responsible changed from "nobody" to "samth" by samth at Thu, 25 Sep 2008 13:12:56 -0400
Reason>>> ts



State changed from "open" to "closed" by samth at Wed, 12 Aug 2009 16:42:37 -0400
Reason>>> fixed in svn

