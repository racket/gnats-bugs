From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Oct  9 03:27:54 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.229])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m997RhZh012144
	for <bugs@bugs.plt-scheme.org>; Thu, 9 Oct 2008 03:27:44 -0400
Message-Id: <200810090725.m997PjxF012132@champlain.ccs.neu.edu>
Date: Thu, 9 Oct 2008 03:25:45 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: typed-scheme tries too hard?

>Number:         9816
>Category:       typed-scheme
>Synopsis:       typed-scheme tries too hard?
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Oct 09 03:28:01 -0400 2008
>Last-Modified:  Tue Oct 21 17:06:53 -0400 2008
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.1.1
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 205554520

Collections:
(("/home/eli/.plt-scheme/4.1.1.1/collects" "CSU660" "info-domain") ("/home/scheme/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "honu" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-coverage) (default) #() "#lang scheme\n"))
>Description:
Looks like TS just ignores extra
input types if there are too few
inputs for the function.  This
leads to an extra error when I
enter the code below -- which can
be confusing (for example, when the
first error scrolled up and you see
the second one).  I think that TS
ignores the extra input types
because swapping the types does not
throw the second error.

Now, I know that the principle is
to throw as many errors as possible
but it looks like in this case
there is no point in checking the
body.  (It actually sounds like a
recipe for internal errors...)
>How-To-Repeat:
(: foo : (Number String -> String))
(define (foo x)
  (string-append x ""))
>Fix:
>Audit-Trail:
From: "Sam TH" <samth@plt-scheme.org>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9816: typed-scheme tries too hard?
Date: Thu, 9 Oct 2008 08:00:09 -0400

 When you don't like an error message, please include the error message
 in your bug report.
 
 On Thu, Oct 9, 2008 at 3:28 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=9816
 >
 > Reported by Eli Barzilay for release: 4.1.1.1
 >
 > *** Description:
 > Looks like TS just ignores extra
 > input types if there are too few
 > inputs for the function.  This
 > leads to an extra error when I
 > enter the code below -- which can
 > be confusing (for example, when the
 > first error scrolled up and you see
 > the second one).  I think that TS
 > ignores the extra input types
 > because swapping the types does not
 > throw the second error.
 >
 > Now, I know that the principle is
 > to throw as many errors as possible
 > but it looks like in this case
 > there is no point in checking the
 > body.  (It actually sounds like a
 > recipe for internal errors...)
 >
 > *** How to repeat:
 > (: foo : (Number String -> String))
 > (define (foo x)
 >  (string-append x ""))
 >
 > *** Environment:
 > unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
 > Human Language: english
 > (current-memory-use) 205554520
 >
 > Collections:
 > (("/home/eli/.plt-scheme/4.1.1.1/collects" "CSU660" "info-domain") ("/home/scheme/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "honu" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-coverage) (default) #() "#lang scheme\n"))
 >
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: "Sam TH" <samth@plt-scheme.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9816: typed-scheme tries too hard?
Date: Thu, 9 Oct 2008 23:24:18 -0400

 On Oct  9, Sam TH wrote:
 > When you don't like an error message, please include the error
 > message in your bug report.
 
 I assumed that you can run the code.
 
 . typecheck: Expected function with 2 arguments, but got function with 1 argument in: (define (foo x) (string-append x ""))
 . typecheck: Rest argument had wrong type, expected: String and got: Number in: x
 . typecheck: Summary: 2 errors encountered in:
   (define (foo x) (string-append x ""))
   x
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Sam TH" <samth@plt-scheme.org>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9816: typed-scheme tries too hard?
Date: Fri, 10 Oct 2008 08:31:54 -0400

 See, this is why I wanted to see the error message.  There's no bug
 here.  It tells you two things that are wrong with the code.
 
 1. You're supposed to have a two argument function.
 2. `x' is a Number, but `string-append' expects a String.
 
 I disagree that there's no point in attempting to point this out, or
 that it's somehow a recipe for internal errors.  Why shouldn't we
 assume that you meant for the first argument to the function to have
 the first argument type?
 
 sam th
 
 On Thu, Oct 9, 2008 at 11:24 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Oct  9, Sam TH wrote:
 >> When you don't like an error message, please include the error
 >> message in your bug report.
 >
 > I assumed that you can run the code.
 >
 > . typecheck: Expected function with 2 arguments, but got function with 1 argument in: (define (foo x) (string-append x ""))
 > . typecheck: Rest argument had wrong type, expected: String and got: Number in: x
 > . typecheck: Summary: 2 errors encountered in:
 >  (define (foo x) (string-append x ""))
 >  x
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life!
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: "Sam TH" <samth@plt-scheme.org>
Cc: bugs@plt-scheme.org, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/9816: typed-scheme tries too hard?
Date: Fri, 10 Oct 2008 11:09:19 -0400

 On Oct 10, Sam TH wrote:
 > It tells you two things that are wrong with the code.
 > 
 > 1. You're supposed to have a two argument function.
 > 2. `x' is a Number, but `string-append' expects a String.
 > 
 > I disagree that there's no point in attempting to point this out,
 
 It is the presentation that is a problem -- imagine that the screen
 cuts things off so you see only:
 
   `x' is a Number, but `string-append' expects a String.
 
 I intentionally omitted the "2" here since the error message doesn't
 have it.  If there was a way to clarify that there are other errors
 that that might have caused the error that you now see on the screen,
 then things would be fine.  But the way things are now you must train
 yourself to always scroll back and read the errors from top to
 bottom.  I know that this is common enough -- but it is an exeption in
 the Scheme world since we're not used to error messages that are
 so long, and we're not used to having multiple errors.
 
 Obvious "easy" solutions like putting a number or listing the messages
 in reverse are obviously bad ideas (the first one doesn't help, the
 second can be even more confusing).  It might have worked if there was
 a way to point each error in the source with a little cartoon bubble
 or something.
 
 It could also be better if the errors that come from the body of such
 a function have some indication like "possibly a result of missing
 argument".
 
 
 > or that it's somehow a recipe for internal errors.
 
 That's a reference to the fact that you now have a function with one
 more input type than its actual inputs, which sounds like a good way
 to break internal invariants.  (I'm sure that it doesn't break any now
 -- but is there a big comment somewhere saying "Note: actual argument
 number might be different than the number of input types", so that
 whoever works on this code 5 years from now doesn't trip on it?)
 
 
 > Why shouldn't we assume that you meant for the first argument to the
 > function to have the first argument type?
 
 That's a reasonable assumption, of course.  But its consequence *if*
 you added the first type is a very confusing error message.  That's
 exactly what happened to me, and it was indeed confusing.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Sam TH" <samth@plt-scheme.org>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org, "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/9816: typed-scheme tries too hard?
Date: Fri, 10 Oct 2008 11:18:29 -0400

 On Fri, Oct 10, 2008 at 11:09 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Oct 10, Sam TH wrote:
 >> It tells you two things that are wrong with the code.
 >>
 >> 1. You're supposed to have a two argument function.
 >> 2. `x' is a Number, but `string-append' expects a String.
 >>
 >> I disagree that there's no point in attempting to point this out,
 >
 > It is the presentation that is a problem -- imagine that the screen
 > cuts things off so you see only:
 >
 >  `x' is a Number, but `string-append' expects a String.
 >
 > I intentionally omitted the "2" here since the error message doesn't
 > have it.  If there was a way to clarify that there are other errors
 > that that might have caused the error that you now see on the screen,
 > then things would be fine.  But the way things are now you must train
 > yourself to always scroll back and read the errors from top to
 > bottom.  I know that this is common enough -- but it is an exeption in
 > the Scheme world since we're not used to error messages that are
 > so long, and we're not used to having multiple errors.
 >
 > Obvious "easy" solutions like putting a number or listing the messages
 > in reverse are obviously bad ideas (the first one doesn't help, the
 > second can be even more confusing).  It might have worked if there was
 > a way to point each error in the source with a little cartoon bubble
 > or something.
 
 I've mentioned several times on plt-internal my desire for an API and
 UI for reporting multiple error messages.  As it is, I can only use
 the facilities available to me.  Fundamentally, a UI for such error
 reports needs to be added to DrScheme, so this should be taken up in
 that context.
 
 >
 > It could also be better if the errors that come from the body of such
 > a function have some indication like "possibly a result of missing
 > argument".
 
 I don't think that this error is the "result of a missing argument" -
 `x' has type Number, which is wrong.  That has nothing to do with a
 missing argument.
 
 >
 >
 >> or that it's somehow a recipe for internal errors.
 >
 > That's a reference to the fact that you now have a function with one
 > more input type than its actual inputs, which sounds like a good way
 > to break internal invariants.  (I'm sure that it doesn't break any now
 > -- but is there a big comment somewhere saying "Note: actual argument
 > number might be different than the number of input types", so that
 > whoever works on this code 5 years from now doesn't trip on it?)
 
 I don't see what the problem could possibly be.  The typechecker in
 the body doesn't look at the number of arguments at all - it has a
 type environment, which is populated when we start typechecking the
 function.  The rest of the code just looks at the declared type.
 
 >> Why shouldn't we assume that you meant for the first argument to the
 >> function to have the first argument type?
 >
 > That's a reasonable assumption, of course.  But its consequence *if*
 > you added the first type is a very confusing error message.
 
 I don't understand this sentence at all.
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: "Sam TH" <samth@plt-scheme.org>
Cc: bugs@plt-scheme.org, "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/9816: typed-scheme tries too hard?
Date: Fri, 10 Oct 2008 11:33:59 -0400

 On Oct 10, Sam TH wrote:
 > 
 > I've mentioned several times on plt-internal my desire for an API
 > and UI for reporting multiple error messages.  As it is, I can only
 > use the facilities available to me.  Fundamentally, a UI for such
 > error reports needs to be added to DrScheme, so this should be taken
 > up in that context.
 
 Irrelevant.  As helpful as such some cartoon-bubble-interface is, I
 don't see it justifying the work, since it's not going to be too
 useful in other cases.
 
 
 > > It could also be better if the errors that come from the body of
 > > such a function have some indication like "possibly a result of
 > > missing argument".
 > 
 > I don't think that this error is the "result of a missing argument"
 > - `x' has type Number, which is wrong.  That has nothing to do with
 > a missing argument.
 
 But it is -- as a human, when I look at this
 
   (: foo : (A B -> C))
   (define (foo x) ...)
 
 and try to describe what's wrong, I'll say:
 
   1. You're missing an input argument
   2. *BUT* if you meant x to have type A then you have a type error
 
 I'll have to say the "but" if A and B are different and if I my
 assumption is based on a guess.
 
 
 > >> or that it's somehow a recipe for internal errors.
 > >
 > > That's a reference to the fact that you now have a function with
 > > one more input type than its actual inputs, which sounds like a
 > > good way to break internal invariants.  (I'm sure that it doesn't
 > > break any now
 > > -- but is there a big comment somewhere saying "Note: actual argument
 > > number might be different than the number of input types", so that
 > > whoever works on this code 5 years from now doesn't trip on it?)
 > 
 > I don't see what the problem could possibly be.  The typechecker in
 > the body doesn't look at the number of arguments at all - it has a
 > type environment, which is populated when we start typechecking the
 > function.  The rest of the code just looks at the declared type.
 
 I'm curious then, what's the type that is assigned to `y' in:
 
   (: foo : (String -> Number))
   (define (foo x y)
     (+ y (string-length (string-append x y))))
 
 
 > >> Why shouldn't we assume that you meant for the first argument to the
 > >> function to have the first argument type?
 > >
 > > That's a reasonable assumption, of course.  But its consequence *if*
 > > you added the first type is a very confusing error message.
 > 
 > I don't understand this sentence at all.
 
 If you, the programmer, happened to add a type for a first argument,
 then the error message is very confusing.  But if you added a second
 type, then there the assumption that the checker is doing makes sense,
 and you're unlikely to be confused.  Since the latter is more common,
 the assumption that you describe makes sense.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Sam TH" <samth@plt-scheme.org>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org, "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/9816: typed-scheme tries too hard?
Date: Fri, 10 Oct 2008 11:54:07 -0400

 On Fri, Oct 10, 2008 at 11:33 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Oct 10, Sam TH wrote:
 >>
 >> I've mentioned several times on plt-internal my desire for an API
 >> and UI for reporting multiple error messages.  As it is, I can only
 >> use the facilities available to me.  Fundamentally, a UI for such
 >> error reports needs to be added to DrScheme, so this should be taken
 >> up in that context.
 >
 > Irrelevant.  As helpful as such some cartoon-bubble-interface is, I
 > don't see it justifying the work, since it's not going to be too
 > useful in other cases.
 
 I don't think cartoon bubbles are the right interface, but I don't see
 why this is irrelevant.  There's really nothing Typed Scheme can do to
 improve the error message UI.
 
 >> >> or that it's somehow a recipe for internal errors.
 >> >
 >> > That's a reference to the fact that you now have a function with
 >> > one more input type than its actual inputs, which sounds like a
 >> > good way to break internal invariants.  (I'm sure that it doesn't
 >> > break any now
 >> > -- but is there a big comment somewhere saying "Note: actual argument
 >> > number might be different than the number of input types", so that
 >> > whoever works on this code 5 years from now doesn't trip on it?)
 >>
 >> I don't see what the problem could possibly be.  The typechecker in
 >> the body doesn't look at the number of arguments at all - it has a
 >> type environment, which is populated when we start typechecking the
 >> function.  The rest of the code just looks at the declared type.
 >
 > I'm curious then, what's the type that is assigned to `y' in:
 >
 >  (: foo : (String -> Number))
 >  (define (foo x y)
 >    (+ y (string-length (string-append x y))))
 
 Bottom (which won't generate any type errors when used)
 
 >
 >
 >> >> Why shouldn't we assume that you meant for the first argument to the
 >> >> function to have the first argument type?
 >> >
 >> > That's a reasonable assumption, of course.  But its consequence *if*
 >> > you added the first type is a very confusing error message.
 >>
 >> I don't understand this sentence at all.
 >
 > If you, the programmer, happened to add a type for a first argument,
 > then the error message is very confusing.  But if you added a second
 > type, then there the assumption that the checker is doing makes sense,
 > and you're unlikely to be confused.  Since the latter is more common,
 > the assumption that you describe makes sense.
 
 There's only one type - my assumption is that it's the type of the
 first argument.  That's not always the correct assumption, but I don't
 think that assuming something else would be better.
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: "Sam TH" <samth@plt-scheme.org>
Cc: bugs@plt-scheme.org, "Matthias Felleisen" <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/9816: typed-scheme tries too hard?
Date: Mon, 13 Oct 2008 17:22:38 -0400

 On Oct 10, Sam TH wrote:
 > 
 > I don't think cartoon bubbles are the right interface, but I don't
 > see why this is irrelevant.  There's really nothing Typed Scheme can
 > do to improve the error message UI.
 
 I didn't suggest that you improve the error message interface.
 
 
 > > If you, the programmer, happened to add a type for a first
 > > argument, then the error message is very confusing.  But if you
 > > added a second type, then there the assumption that the checker is
 > > doing makes sense, and you're unlikely to be confused.  Since the
 > > latter is more common, the assumption that you describe makes
 > > sense.
 > 
 > There's only one type - my assumption is that it's the type of the
 > first argument.  That's not always the correct assumption, but I
 > don't think that assuming something else would be better.
 
 I also didn't suggest that you assume something else.
 
 What I did suggest is that either you drop the assumption altogether
 (meaning: not enough arguments liste, that error was shown, so don't
 typecheck the body), or that you clarify the error message (making it
 obvious that you see errors based on an assumption).
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Responsible changed from "nobody" to "samth" by samth at Tue, 21 Oct 2008 17:06:53 -0400
Reason>>> ts

State changed from "open" to "closed" by samth at Tue, 21 Oct 2008 17:06:53 -0400
Reason>>> long discussion, I believe Typed Scheme is behaving correctly

