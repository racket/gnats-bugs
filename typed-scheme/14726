From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Sep  6 20:11:19 2014
Received: from mail-ig0-f174.google.com (mail-ig0-f174.google.com [209.85.213.174])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s870BHHc011305
	for <bugs@bugs.plt-scheme.org>; Sat, 6 Sep 2014 20:11:18 -0400
Message-Id: <201409070011.s870BFot011298@winooski.ccs.neu.edu>
Date: Sat, 6 Sep 2014 20:11:15 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: Typed Racket internal error on class with public method with `->*` type

>Number:         14726
>Category:       typed-scheme
>Synopsis:       Typed Racket internal error on class with public method with `->*` type
>Class:          sw-bug
>Responsible:    asumu
>Severity:       critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Sep 06 20:12:01 -0400 2014
>Closed-Date:    Sun Sep 07 17:26:22 -0400 2014
>Last-Modified:  Mon Sep 08 16:32:58 -0400 2014
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.0.5--2014-01-11(-/f)
>Environment:
unix "Linux snoopy 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 1057098724
raco pkg (show):
/home/neil/old-neil/plt-fresh/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [219 auto-installed packages not shown]
Installation-wide:
 Package               Checksum                                    Source
 disassemble           cf0ee3a5f8463e0867eba4c964d742a29325a996    (catalog disassemble)
 nonplussed            f6c069990eb6b0b3356f872fcce82a3fb2fe805a    (url git://github.com/ntoronto/nonplussed)
 optimization-coach    be5f7908939c31a68d5c7dc9202315ffa8863180    (catalog optimization-coach)
 rsound                4f5d4d154eb7585b96b24298b79e3381bab8f1a5    (catalog rsound)
 slideshow-latex       9275fecbaaac14c6168f42cae73ed4c0cb7b2037    (catalog slideshow-latex)
 [1 auto-installed package not shown]
User-specific for installation "development":
 [none]



Collections:
("/home/neil/.racket/development/collects"
 (non-existent-path))
("/home/neil/old-neil/plt-fresh/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f ((test) (main)) #t))
>Description:
>How-To-Repeat:
#lang typed/racket

(require typed/racket/class)

(define-type A%
  (Class [foo (->* [Integer] Void)]))

(: a% A%)
(define a%
  (class object%
    (super-new)
    (define/public (foo [i #f]) (void))))



. . old-neil/plt-fresh/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/utils/tc-utils.rkt:206:0: Internal Typechecker Error: register-method-ids: internal error
while typechecking:
(let-values () (letrec-syntaxes+values () ((() (begin (quote-syntax (class-internal (#:forall) (#:all-inits) (#:init) (#:init-field) (#:init-rest) (#:optional-init) (#:field) (#:public (foo foo)) (#:override) (#:private) (#:private-field) (#:inherit) (#:inherit-field) (#:augment) (#:pubment))) (#%plain-app values)))) (#%app compose-class (quote a%) object% (#%app list) (#%app current-inspector) (quote #f) (quote #f) (quote 0) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote (foo)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote normal) (lambda (local-accessor local-mutator foo1) (let-values () (letrec-syntaxes+values (((this-param121) (convert-renamer (make-this-map (quote-syntax this-id) (quote-syntax find-self92568) (quote self92567)))) ((this%-param222) (convert-renamer (make-this%-map (quote-syntax (object-ref this)) (quote-syntax find-self92568))))) () (letrec-syntaxes+values ((!
 (this-param1) (values (make-rename-transformer (quote-syntax this-param121)))) ((this%-param2) (values (make-rename-transformer (quote-syntax this%-param222))))) () (letrec-syntaxes+values (((foo23) (values (make-method-map (quote-syntax find-self92568) (quote self92567) (quote-syntax foo) (quote-syntax foo) (quote-syntax foo1))))) () (letrec-syntaxes+values (((foo) (values (make-rename-transformer (quote-syntax foo23))))) () (letrec-syntaxes+values (((super-param324) (convert-renamer (lambda (stx) (syntax-case stx () ((_ id . args) (identifier? (syntax id)) (raise-syntax-error #f (string-append identifier for super call does not have an override,  override-final, overment, or inherit/super declaration) stx (syntax id))) (_else (raise-syntax-error #f expected an identifier after the keyword stx)))))) ((inner-param425) (convert-renamer (lambda (stx) (syntax-case stx () ((_ default-expr id . args) (identifier? (syntax id)) (raise-syntax-error #f (string-append identifier for !
 inner call does not have a pubment, augment,  overment, or inh!
 erit/inner declaration) stx (syntax id))) ((_) (raise-syntax-error #f expected a default-value expression after the keyword stx (syntax id))) (_else (raise-syntax-error #f expected an identifier after the keyword and default-value expression stx))))))) () (letrec-syntaxes+values (((super-param3) (values (make-rename-transformer (quote-syntax super-param324)))) ((inner-param4) (values (make-rename-transformer (quote-syntax inner-param425))))) () (letrec-values () (#%app values (#%app list (letrec-syntaxes+values (((super-instantiate-param626) (convert-renamer super-error-map)) ((super-make-object-param527) (convert-renamer super-error-map)) ((super-new-param728) (convert-renamer super-error-map))) () (letrec-syntaxes+values (((super-instantiate-param6) (values (make-rename-transformer (quote-syntax super-instantiate-param626)))) ((super-make-object-param5) (values (make-rename-transformer (quote-syntax super-make-object-param527)))) ((super-new-param7) (values (make-rename-t!
 ransformer (quote-syntax super-new-param728))))) () (letrec-syntaxes+values ((() (values))) () (let-values (((foo method in a%) (let-values (((core32) (lambda (self9256731 i29 i30) (let-values (((self92567) self9256731)) (let-values (((i) (if i30 i29 (letrec-syntaxes+values (((find-self9256834) (quote-syntax self92567))) () (letrec-syntaxes+values (((find-self92568) (values (make-rename-transformer (quote-syntax find-self9256834))))) () (#%expression (quote #f))))))) (let-values () (letrec-syntaxes+values (((find-self9256835) (quote-syntax self92567))) () (letrec-syntaxes+values (((find-self92568) (values (make-rename-transformer (quote-syntax find-self9256835))))) () (#%app void))))))))) (case-lambda ((self92567) (#%app core32 self92567 (quote #f) (quote #f))) ((self92567 i29) (#%app core32 self92567 i29 (quote #t))))))) foo method in a%))))) (#%app list) (#%app list) (lambda (self92567 super-go si_c si_inited? si_leftovers init-args) (letrec-syntaxes+values (((find-self92!
 56836) (quote-syntax self92567))) () (letrec-syntaxes+values (((find-se!
 lf92568) (values (make-rename-transformer (quote-syntax find-self9256836))))) () (letrec-syntaxes+values (((super-instantiate-param637) (convert-renamer (lambda (stx) (syntax-case stx () ((_ (arg ...) (kw kwarg) ...) (with-syntax ((stx stx)) (syntax (begin (quasiquote (declare-super-new)) (-instantiate super-go stx #f (self92567 si_c si_inited? si_leftovers) (list arg ...) (kw kwarg) ...))))))))) ((super-new-param738) (convert-renamer (lambda (stx) (syntax-case stx () ((_ (kw kwarg) ...) (with-syntax ((stx stx)) (syntax (begin (quasiquote (declare-super-new)) (-instantiate super-go stx #f (self92567 si_c si_inited? si_leftovers) null (kw kwarg) ...))))))))) ((super-make-object-param539) (convert-renamer (lambda (stx) (let ((code (quote-syntax (lambda args (super-go self92567 si_c si_inited? si_leftovers args null))))) (quasisyntax (begin (quasiquote (declare-super-new)) (unsyntax (if (identifier? stx) code (datum->syntax code (cons code (cdr (syntax-e stx))))))))))))) () (l!
 etrec-syntaxes+values (((super-instantiate-param6) (values (make-rename-transformer (quote-syntax super-instantiate-param637)))) ((super-new-param7) (values (make-rename-transformer (quote-syntax super-new-param738)))) ((super-make-object-param5) (values (make-rename-transformer (quote-syntax super-make-object-param539))))) () (letrec-syntaxes+values () () (#%app void) (quote (declare-field-use-start)) (quote (declare-super-new)) (#%app super-go self92567 si_c si_inited? si_leftovers null (#%app list)) (let-values (((foo) (#%app values (lambda () (quote (declare-this-escapes)) (#%app (#%app foo1 self92567) self92567)))) (() (#%app values)) (() (#%app values)) (() (#%app values)) (() (#%app values)) (() (#%app values)) (() (#%app values)) (() (#%app values)) (() (#%app values)) (() (#%app values))) (#%app void)))))))))))))))))) (quote #f) (quote #f))))
originally:
(class object% (super-new) (define/public (foo (i #f)) (void)))
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "asumu" by asumu@racket-lang.org at Sun, 07 Sep 2014 17:26:22 -0400
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/ab47d1bb25
State changed from "open" to "closed" by asumu@racket-lang.org at Sun, 07 Sep 2014 17:26:22 -0400
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/ab47d1bb25
  | Handle methods that have opt args but no kws
  | 
  | Closes PR 14726


From: Neil Toronto <neil.toronto@gmail.com>
To: bugs@racket-lang.org, asumu@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/14726: Typed Racket internal error on class
 with public method with `->*` type
Date: Mon, 08 Sep 2014 10:47:11 -0400

 I think this is still broken. Here's a test case:
 
 #lang typed/racket
 
 (require typed/racket/class)
 
 (define-type Not-A-Snip%
    (Class [get-extent  (->* [] [(U #f (Boxof Real))] Void)]
           [get-extent2 (->* [] [(U #f (Boxof Real))] Void)]))
 
 (: not-a-snip% Not-A-Snip%)
 (define not-a-snip%
    (class object%
      (super-new)
 
      (define/public (get-extent [#{w : (U #f (Boxof Real))} #f])
        (when (box? w) (set-box! w 10.0)))
 
      (define/public (get-extent2 [w #f])
        (when (box? w) (set-box! w 10.0)))))
 
 
 The types of `w` and `h` in `get-extent2` are both `Any`.
 
 Neil ⊥
 
 On 09/07/2014 05:26 PM, asumu@racket-lang.org wrote:
 > Responsible changed from "nobody" to "asumu" by asumu@racket-lang.org at Sun, 07 Sep 2014 17:26:22 -0400
 > Reason>>> A commit by asumu@racket-lang.org has resolved this report
 >    http://git.racket-lang.org/plt/commit/ab47d1bb25
 > State changed from "open" to "closed" by asumu@racket-lang.org at Sun, 07 Sep 2014 17:26:22 -0400
 > Reason>>> A commit by asumu@racket-lang.org has resolved this report
 >    http://git.racket-lang.org/plt/commit/ab47d1bb25
 >    | Handle methods that have opt args but no kws
 >    |
 >    | Closes PR 14726
 >
 >
 > View:
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=14726
 >
 

----------
A commit by asumu@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/3905334f28
  | Fix opt-lambda property on opt-lambda methods
  | 
  | Related to PR 14726

