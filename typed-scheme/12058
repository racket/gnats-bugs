From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jul 19 03:56:30 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p6J7uOu3013713
	for <bugs@bugs.plt-scheme.org>; Tue, 19 Jul 2011 03:56:24 -0400
Message-Id: <201107190756.p6J7uLDA013707@champlain.ccs.neu.edu>
Date: Tue, 19 Jul 2011 03:56:21 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: TR: +

>Number:         12058
>Category:       typed-scheme
>Synopsis:       TR: +
>Class:          sw-bug
>Responsible:    stamourv
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jul 19 04:00:01 -0400 2011
>Closed-Date:    Thu Jul 21 17:19:29 -0400 2011
>Last-Modified:  Thu Jul 21 17:19:29 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Any
>Description:
Enter `+' in TR.  Admire the 20K of its type.
Now imagine doing this in front of a class.  Or maybe in front of
a Haskeller.  Or even in front of one of those "static is bad" types.

Maybe give it a name?  (Assuming there are no cases where the huge
type will still pop up, or maybe not too many of them.)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Carl Eastlund <cce@plt-scheme.org>
To: eli@barzilay.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12058: TR: +
Date: Tue, 19 Jul 2011 04:07:52 -0400

 On Tue, Jul 19, 2011 at 4:00 AM,  <eli@barzilay.org> wrote:
 > Enter `+' in TR.  Admire the 20K of its type.
 
 Wow, I thought that was hyperbole.  Nope, it's 19,935 characters long.
  Impressive and disgusting at the same time.
 
 --Carl
 

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: eli@barzilay.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12058: TR: +
Date: Tue, 19 Jul 2011 06:58:14 -0400

 On Jul 19, 2011, at 4:00 AM, eli@barzilay.org wrote:
 
 > "static is bad" types
 
 That'll teach you! :-) 
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: eli@barzilay.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12058: TR: +
Date: Tue, 19 Jul 2011 07:46:17 -0400

 I agree that the current state of affairs is bad. We've thought about
 that, but we haven't found a good solution yet.
 
 We could display only the most general case(s), like we do for error
 messages, but then users have no way of knowing that, say, TR's `+'
 does float contagion, while `*' does not, since both their types would
 show as `Number * -> Number'. Or, if someone is wondering why he can't
 get `(+ Fixnum Fixnum)' to typecheck as Fixnum, he has no way of
 knowing why.
 
 Maybe the full types belong in the documentation instead. That would
 clean up the REPL, but move the problem elsewhere. Do you think that
 would help?
 
 Vincent
 
 
 
 At Tue, 19 Jul 2011 04:00:03 -0400,
 eli@barzilay.org wrote:
 > 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12058
 > 
 > Reported by Eli Barzilay for release: HEAD
 > 
 > *** Description:
 > Enter `+' in TR.  Admire the 20K of its type.
 > Now imagine doing this in front of a class.  Or maybe in front of
 > a Haskeller.  Or even in front of one of those "static is bad" types.
 > 
 > Maybe give it a name?  (Assuming there are no cases where the huge
 > type will still pop up, or maybe not too many of them.)
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > Any
 > 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: eli@barzilay.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12058: TR: +
Date: Tue, 19 Jul 2011 07:52:50 -0400

 On Tue, Jul 19, 2011 at 4:00 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12058
 >
 > Reported by Eli Barzilay for release: HEAD
 >
 > *** Description:
 > Enter `+' in TR.  Admire the 20K of its type.
 > Now imagine doing this in front of a class.  Or maybe in front of
 > a Haskeller.  Or even in front of one of those "static is bad" types.
 
 1.  This is a (very complete) specification of the behavior of
 Racket's `+' procedure.  It's complex in large part because Racket's
 arithmetic operations are complex, no pun intended.
 
 2. This sort of thing is why we have teaching languages, for your first case.
 
 > Maybe give it a name?  (Assuming there are no cases where the huge
 > type will still pop up, or maybe not too many of them.)
 
 Of course, the 20k type isn't great, but I think a name is worse.
 There's literally nothing to be learned from a name; the big type is
 just hard to learn things from.
 
 The major possibility, which we've discussed doing, is some form of
 lying.  For example:
 
 > +
 (Number * -> Number)
 >
 
 But then it's hard to know what to expect from `+'.  We could try to
 come up with some slightly more general version of this type, but then
 we have two versions of the type of `+', one of which isn't used in
 typechecking.  That sounds like a recipe for trouble.
 
 FWIW, Scala chooses the "show a simplified type in the documentation"
 approach, I don't know about the REPL.
 
 Another possibility would be to show a simplified type, but provide a
 way to get the full version, perhaps:
 
 > +
 (Number * -> Number)
 > (:full-type +)
 (case-> ... 20k here ...)
 
 For DrRacket, there are some interesting snip possibilities, but we
 can't rely on that always, of course.
 
 Other suggestions are welcome, too.
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: eli@barzilay.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12058: TR: +
Date: Tue, 19 Jul 2011 06:56:34 -0500

 How about something that looks like the simplified form, but with some
 kind of printed annotation that there is more (and in drracket you
 could have turn down thing to see the more perhaps):
 
   > +
   (Number * -> Number) ...and more
 
 Robby
 
 On Tue, Jul 19, 2011 at 6:52 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Tue, Jul 19, 2011 at 4:00 AM,  <eli@barzilay.org> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12058
 >>
 >> Reported by Eli Barzilay for release: HEAD
 >>
 >> *** Description:
 >> Enter `+' in TR.  Admire the 20K of its type.
 >> Now imagine doing this in front of a class.  Or maybe in front of
 >> a Haskeller.  Or even in front of one of those "static is bad" types.
 >
 > 1.  This is a (very complete) specification of the behavior of
 > Racket's `+' procedure.  It's complex in large part because Racket's
 > arithmetic operations are complex, no pun intended.
 >
 > 2. This sort of thing is why we have teaching languages, for your first case.
 >
 >> Maybe give it a name?  (Assuming there are no cases where the huge
 >> type will still pop up, or maybe not too many of them.)
 >
 > Of course, the 20k type isn't great, but I think a name is worse.
 > There's literally nothing to be learned from a name; the big type is
 > just hard to learn things from.
 >
 > The major possibility, which we've discussed doing, is some form of
 > lying.  For example:
 >
 >> +
 > (Number * -> Number)
 >>
 >
 > But then it's hard to know what to expect from `+'.  We could try to
 > come up with some slightly more general version of this type, but then
 > we have two versions of the type of `+', one of which isn't used in
 > typechecking.  That sounds like a recipe for trouble.
 >
 > FWIW, Scala chooses the "show a simplified type in the documentation"
 > approach, I don't know about the REPL.
 >
 > Another possibility would be to show a simplified type, but provide a
 > way to get the full version, perhaps:
 >
 >> +
 > (Number * -> Number)
 >> (:full-type +)
 > (case-> ... 20k here ...)
 >
 > For DrRacket, there are some interesting snip possibilities, but we
 > can't rely on that always, of course.
 >
 > Other suggestions are welcome, too.
 > --
 > sam th
 > samth@ccs.neu.edu
 >
 
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12058: TR: +
Date: Tue, 19 Jul 2011 12:15:34 -0400

 Four hours ago, Vincent St-Amour wrote:
 > I agree that the current state of affairs is bad. We've thought
 > about that, but we haven't found a good solution yet.
 > 
 > We could display only the most general case(s), like we do for error
 > messages, but then users have no way of knowing that, say, TR's `+'
 > does float contagion, while `*' does not, since both their types
 > would show as `Number * -> Number'. Or, if someone is wondering why
 > he can't get `(+ Fixnum Fixnum)' to typecheck as Fixnum, he has no
 > way of knowing why.
 
 Ooh, I should have used `*' -- that one is 26K long.
 
 
 > Maybe the full types belong in the documentation instead. That would
 > clean up the REPL, but move the problem elsewhere. Do you think that
 > would help?
 
 Yes -- in the documentation you have much more freedom, for example,
 you could have an itemized list of facts about the types describing
 all these potentially useful facts.  Obviously *not* listing the full
 type, since that takes (according to pprint's layout) about 16 pages.
 
 But looking at the types for the basic four arithmetic operations, I
 see that there is a *lot* of repetitions, so ideally there's a way to
 show the common part with a name and detail only the differences.  And
 if the differences are big, then give them a name too.  Then, the docs
 could describe these in human consumable form.
 
 
 
 Four hours ago, Sam Tobin-Hochstadt wrote:
 > 
 > 1.  This is a (very complete) specification of the behavior of
 > Racket's `+' procedure.  It's complex in large part because Racket's
 > arithmetic operations are complex, no pun intended.
 > 
 > 2. This sort of thing is why we have teaching languages, for your
 >    first case.
 
 This goes to ridiculous length, even beyond teaching languages.  If I
 measure it by how much information I *need* from it, divided by the
 number of characters that describe it, the utility of these monstrous
 types is a negligible delta above 0.  In fact, it's smaller than the
 damage of me being a good number of pages below my previous
 interaction.
 
 BTW, I *did* give it a chance and tried to read through some selected
 chapters of this N-page masterpiece...  Here's some weird things:
 
 Both `*' and `/' have two (One One -> One)s each.  Why is that?
 
   [Pre-warning: if you tell me that there's some fixable problem in
   the code that generates the type I'll reply that it's now obvious
   that you don't read the type but only the code and therefore the
   pain that you inflict is on everyone else.  OTOH, if you tell me
   that there's some difference between these two types that is not
   shown, then I'll reply that if you're already hiding details, then
   clearly you should hide more.]
 
 Here's another -- both of thes (`*' and `/') have these two types:
 
   (One Float-Zero -> Float-Zero)
   (Real-Zero One -> Real-Zero)
 
 Again, what's the difference between `Float-Zero' and `Real-Zero' and
 why are those asymmetric wrt them?
 
 Yet another, again for `*' and `/' there are:
 
   (Zero Number * -> Zero)
   (Zero One -> Zero)
 
 Does the first not cover the second?  What about `Zero' in the second
 argument -- isn't that worth fixing, or is my guess true that it will
 be added if it turns out that there's some need for it in the future
 which will add a few pages to the type?  I do see types like:
 
   ((U Ill-spare-the-long-list) Single-Flonum-Complex (U Same-long-list) *
    -> Single-Flonum-Complex)
 
 but I don't see it done for Zero.
 
 
 > > Maybe give it a name?  (Assuming there are no cases where the huge
 > > type will still pop up, or maybe not too many of them.)
 > 
 > Of course, the 20k type isn't great, but I think a name is worse.
 > There's literally nothing to be learned from a name; the big type is
 > just hard to learn things from.
 
 I'm tempted to paste it in and ask "what do you learn from it".  I
 won't though, it should be obvious for anyone looking at it that the
 chance of anyone actually reading it are zero.  My guess is that even
 interested people (= you & Vincent) just glance over some points when
 needed, and otherwise the "description" you use is the code that
 constructs that type.  And that's a good hook to see why it's so bad.
 A description of how you construct a type, like "if there's Zero
 anywhere in the type then the result is Zero" works much better: it
 gives me the content that is useful to me, and it's extensible in the
 sense of not blowing up once you decide to do it for three-argument
 multiplications too.
 
 
 > The major possibility, which we've discussed doing, is some form of
 > lying.  For example:
 > 
 > > +
 > (Number * -> Number)
 > 
 > But then it's hard to know what to expect from `+'.
 
 How about
 
   (case-lambda (Number * -> Number) ...and more...)
 
 ?
 
 
 > For DrRacket, there are some interesting snip possibilities, but we
 > can't rely on that always, of course.
 
 A non-gui "...and more..." is not as effective when you can't click
 it, but if it's useful in pointing me to some utility that prints the
 whole thing and/or to the docs to read about what I'm missing.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
 
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Vincent St-Amour <stamourv@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12058: TR: +
Date: Tue, 19 Jul 2011 14:32:35 -0400

 After some discussion, we came up with a potential solution:
 
 - In the REPL, only the most general cases are shown. For `+', `*' and
   others, that means `(Number * -> Number)'. That solves the problem
   for pretty much all numeric operations, but types that are large
   because the underlying function has a complicated interface
   (e.g. `regexp-match') may not have general cases. These are few and
   far between, but this would remain to be solved
 
 - I will write a "Type Explorer" tool (REPL-based, to have it work
   both inside and outside DrRacket), that would make it possible to
   query types using partial type assignments as a starting point.
   This would make it possible to get access to the information
   contained in the full types, without being exposed to them.
 
 - A new section will be added to the TR documentation that will
   contain the types for each binding provided by TR. These types would
   be pruned using some heuristics (I have yet to decide exactly how,
   but I have a couple of ideas), and would be larger than those
   displayed in the REPL, but nowhere near the existing types.
 
 I'll work on that.
 
 Vincent
 
 
 
 At Tue, 19 Jul 2011 12:15:34 -0400,
 Eli Barzilay wrote:
 > 
 > Four hours ago, Vincent St-Amour wrote:
 > > I agree that the current state of affairs is bad. We've thought
 > > about that, but we haven't found a good solution yet.
 > > 
 > > We could display only the most general case(s), like we do for error
 > > messages, but then users have no way of knowing that, say, TR's `+'
 > > does float contagion, while `*' does not, since both their types
 > > would show as `Number * -> Number'. Or, if someone is wondering why
 > > he can't get `(+ Fixnum Fixnum)' to typecheck as Fixnum, he has no
 > > way of knowing why.
 > 
 > Ooh, I should have used `*' -- that one is 26K long.
 > 
 > 
 > > Maybe the full types belong in the documentation instead. That would
 > > clean up the REPL, but move the problem elsewhere. Do you think that
 > > would help?
 > 
 > Yes -- in the documentation you have much more freedom, for example,
 > you could have an itemized list of facts about the types describing
 > all these potentially useful facts.  Obviously *not* listing the full
 > type, since that takes (according to pprint's layout) about 16 pages.
 > 
 > But looking at the types for the basic four arithmetic operations, I
 > see that there is a *lot* of repetitions, so ideally there's a way to
 > show the common part with a name and detail only the differences.  And
 > if the differences are big, then give them a name too.  Then, the docs
 > could describe these in human consumable form.
 > 
 > 
 > 
 > Four hours ago, Sam Tobin-Hochstadt wrote:
 > > 
 > > 1.  This is a (very complete) specification of the behavior of
 > > Racket's `+' procedure.  It's complex in large part because Racket's
 > > arithmetic operations are complex, no pun intended.
 > > 
 > > 2. This sort of thing is why we have teaching languages, for your
 > >    first case.
 > 
 > This goes to ridiculous length, even beyond teaching languages.  If I
 > measure it by how much information I *need* from it, divided by the
 > number of characters that describe it, the utility of these monstrous
 > types is a negligible delta above 0.  In fact, it's smaller than the
 > damage of me being a good number of pages below my previous
 > interaction.
 > 
 > BTW, I *did* give it a chance and tried to read through some selected
 > chapters of this N-page masterpiece...  Here's some weird things:
 > 
 > Both `*' and `/' have two (One One -> One)s each.  Why is that?
 > 
 >   [Pre-warning: if you tell me that there's some fixable problem in
 >   the code that generates the type I'll reply that it's now obvious
 >   that you don't read the type but only the code and therefore the
 >   pain that you inflict is on everyone else.  OTOH, if you tell me
 >   that there's some difference between these two types that is not
 >   shown, then I'll reply that if you're already hiding details, then
 >   clearly you should hide more.]
 > 
 > Here's another -- both of thes (`*' and `/') have these two types:
 > 
 >   (One Float-Zero -> Float-Zero)
 >   (Real-Zero One -> Real-Zero)
 > 
 > Again, what's the difference between `Float-Zero' and `Real-Zero' and
 > why are those asymmetric wrt them?
 > 
 > Yet another, again for `*' and `/' there are:
 > 
 >   (Zero Number * -> Zero)
 >   (Zero One -> Zero)
 > 
 > Does the first not cover the second?  What about `Zero' in the second
 > argument -- isn't that worth fixing, or is my guess true that it will
 > be added if it turns out that there's some need for it in the future
 > which will add a few pages to the type?  I do see types like:
 > 
 >   ((U Ill-spare-the-long-list) Single-Flonum-Complex (U Same-long-list) *
 >    -> Single-Flonum-Complex)
 > 
 > but I don't see it done for Zero.
 > 
 > 
 > > > Maybe give it a name?  (Assuming there are no cases where the huge
 > > > type will still pop up, or maybe not too many of them.)
 > > 
 > > Of course, the 20k type isn't great, but I think a name is worse.
 > > There's literally nothing to be learned from a name; the big type is
 > > just hard to learn things from.
 > 
 > I'm tempted to paste it in and ask "what do you learn from it".  I
 > won't though, it should be obvious for anyone looking at it that the
 > chance of anyone actually reading it are zero.  My guess is that even
 > interested people (= you & Vincent) just glance over some points when
 > needed, and otherwise the "description" you use is the code that
 > constructs that type.  And that's a good hook to see why it's so bad.
 > A description of how you construct a type, like "if there's Zero
 > anywhere in the type then the result is Zero" works much better: it
 > gives me the content that is useful to me, and it's extensible in the
 > sense of not blowing up once you decide to do it for three-argument
 > multiplications too.
 > 
 > 
 > > The major possibility, which we've discussed doing, is some form of
 > > lying.  For example:
 > > 
 > > > +
 > > (Number * -> Number)
 > > 
 > > But then it's hard to know what to expect from `+'.
 > 
 > How about
 > 
 >   (case-lambda (Number * -> Number) ...and more...)
 > 
 > ?
 > 
 > 
 > > For DrRacket, there are some interesting snip possibilities, but we
 > > can't rely on that always, of course.
 > 
 > A non-gui "...and more..." is not as effective when you can't click
 > it, but if it's useful in pointing me to some utility that prints the
 > whole thing and/or to the docs to read about what I'm missing.
 > 
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
 

Responsible changed from "samth" to "stamourv" by stamourv at Thu, 21 Jul 2011 17:19:29 -0400
Reason>>> Fixed.

State changed from "open" to "closed" by stamourv at Thu, 21 Jul 2011 17:19:29 -0400
Reason>>> Fix pushed. (1a66f60 and others.)

