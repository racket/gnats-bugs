From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Sep 28 17:13:46 2013
Received: from mail-wi0-f172.google.com (mail-wi0-f172.google.com [209.85.212.172])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id r8SLDgW8018075
	for <bugs@bugs.plt-scheme.org>; Sat, 28 Sep 2013 17:13:42 -0400
Message-Id: <201309282113.r8SLDdDm018066@winooski.ccs.neu.edu>
Date: Sat, 28 Sep 2013 17:13:39 -0400
From: dfeltey@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Bug in typed racket type checker

>Number:         14054
>Category:       typed-scheme
>Synopsis:       Bug in typed racket type checker
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Sep 28 17:16:01 -0400 2013
>Last-Modified:  Sat Oct 05 21:03:07 -0400 2013
>Originator:     Daniel Feltey
>Organization:
plt
>Submitter-Id:   unknown
>Release:        Racket v5.90.0.9
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17
>Description:
The following program:

#lang typed/racket

(: test (All (A ...) (All (B ...) (Any (A ... A -> (Values B ... B)) A ... A -> Any))))
(define (test expect f . args)
  (define v (apply f args))
    (void))

Produces the error:
match: no matching clause for (tc-results '() (cons B 'B))
  context...:
   /Users/dfeltey/racket/racket/racket/collects/racket/match/runtime.rkt:21:0: match:error
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-let-unit.rkt:138:63
   parse-loop37
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-let-unit.rkt:127:4: loop
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-expr-unit.rkt:115:4: loop
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-expr-unit.rkt:115:4: loop
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-lambda-unit.rkt:88:4: check-body210
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-lambda-unit.rkt:358:15: for-loop
   parse-loop493
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-lambda-unit.rkt:347:10: for-loop
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-lambda-unit.rkt:304:0: tc/mono-lambda
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-lambda-unit.rkt:362:0: tc/mono-lambda/type
   f730
   f730
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-lambda-unit.rkt:486:0: tc/lambda/internal
   /Users/dfeltey/racket/racket/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/typecheck/tc-expr-unit.rkt:115:4: loop...
>How-To-Repeat:
Put the program:
#lang typed/racket

(: test (All (A ...) (All (B ...) (Any (A ... A -> (Values B ... B)) A ... A -> Any))))
(define (test expect f . args)
  (define v (apply f args))
    (void))

in a file example.rkt

and run with racket example.rkt
>Fix:
