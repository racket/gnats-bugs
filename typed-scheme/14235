From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Dec  8 14:21:38 2013
Received: from mail-ob0-f181.google.com (mail-ob0-f181.google.com [209.85.214.181])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rB8JLYa0031708
	for <bugs@bugs.plt-scheme.org>; Sun, 8 Dec 2013 14:21:35 -0500
Message-Id: <201312081921.rB8JLVEl031701@winooski.ccs.neu.edu>
Date: Sun, 8 Dec 2013 14:21:31 -0500
From: asumu@ccs.neu.edu
To: bugs@racket-lang.org
Subject: TR: singleton types + cast unsound in some cases

>Number:         14235
>Category:       typed-scheme
>Synopsis:       TR: singleton types + cast unsound in some cases
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Dec 08 14:24:01 -0500 2013
>Last-Modified:  Fri Jan 10 17:00:51 -0500 2014
>Originator:     Asumu Takikawa
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0
>Environment:
linux-ubuntu
>Description:
For example:

$ racket
Welcome to Racket v6.0.0.1.
-> (module tr typed/racket
     (: c '#(1 2 3))                ; Note singleton type
     (: d (Vectorof Integer))
     (define d (vector 1 2 3))
     (define c (cast d '#(1 2 3)))  ; Flat contract here, whoops
     (: f (-> Integer))
     (define (f) (vector-ref d 0))
     (provide c f))
-> (require 'tr)
-> c
'#(1 2 3)
-> (vector-set! c 0 "foo")
-> (f)
; f: broke its contract
;   promised: Integer
;   produced: "foo"
;   in: the range of
;       (-> Integer)
;   contract from: tr
;   blaming: tr
;   at: readline-input:8.16
; [,bt for context]
>How-To-Repeat:
>Fix:
