From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jul 29 16:40:19 2014
Received: from mail-we0-f177.google.com (mail-we0-f177.google.com [74.125.82.177])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s6TKeGFN015751
	for <bugs@bugs.plt-scheme.org>; Tue, 29 Jul 2014 16:40:16 -0400
Message-Id: <201407292040.s6TKeDYn015745@winooski.ccs.neu.edu>
Date: Tue, 29 Jul 2014 16:40:13 -0400
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: wxn:break and typed racket

>Number:         14667
>Category:       typed-scheme
>Synopsis:       wxn:break and typed racket
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Jul 29 16:44:01 -0400 2014
>Last-Modified:  Wed Oct 08 02:00:07 -0400 2014
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.0.3--2014-07-29(753fb13d/d)
>Environment:
macosx "Darwin antarctica.ccs.neu.edu 12.5.0 Darwin Kernel Version 12.5.0: Sun Sep 29 13:33:47 PDT 2013; root:xnu-2050.48.12~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 580657236
raco pkg (show):
/Users/matthias/plt/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [219 auto-installed packages not shown]
Installation-wide:
 [none]
User-specific for installation "6.1.0.3":
 [none]



Collections:
("/Users/matthias/0Unison/collects/"
 (".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/6.1.0.3/collects"
 (non-existent-path))
("/Users/matthias/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket" #t #t ((test) (main)) #t))
>Description:
>How-To-Repeat:
ENTER: 
(: x exn:break)
(define x (let/ec k (make-exn:break "" (current-continuation-marks) (lambda (x) (k x)))))

RUN: 
exn:break: contract violation
  expected: escape-continuation?
  given: #<procedure>
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14667: wxn:break and typed racket
Date: Tue, 29 Jul 2014 13:50:51 -0700

 On Tue, Jul 29, 2014 at 1:44 PM,  <matthias@ccs.neu.edu> wrote:
 >
 > *** How to repeat:
 > ENTER:
 > (: x exn:break)
 > (define x (let/ec k (make-exn:break "" (current-continuation-marks) (lambda (x) (k x)))))
 >
 > RUN:
 > exn:break: contract violation
 >   expected: escape-continuation?
 >   given: #<procedure>
 
 I think this is not a bug. In general, Typed Racket doesn't
 distinguish escape-continuations (or other continuations) from other
 kinds of procedures.
 
 We could add this distinction, but I don't know that it would be very
 useful, and might make some programs harder to write.
 
 Sam
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14667: wxn:break and typed racket
Date: Tue, 29 Jul 2014 17:03:46 -0400

 On Jul 29, 2014, at 4:50 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 
 > On Tue, Jul 29, 2014 at 1:44 PM,  <matthias@ccs.neu.edu> wrote:
 >> 
 >> *** How to repeat:
 >> ENTER:
 >> (: x exn:break)
 >> (define x (let/ec k (make-exn:break "" (current-continuation-marks) (lambda (x) (k x)))))
 >> 
 >> RUN:
 >> exn:break: contract violation
 >>  expected: escape-continuation?
 >>  given: #<procedure>
 > 
 > I think this is not a bug. In general, Typed Racket doesn't
 > distinguish escape-continuations (or other continuations) from other
 > kinds of procedures.
 > 
 > We could add this distinction, but I don't know that it would be very
 > useful, and might make some programs harder to write.
 
 
 
 I think it is a bug but it's difficult to solve and not worth our while. 
 
 I wanted to file it so it is on record. 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14667: wxn:break and typed racket
Date: Tue, 29 Jul 2014 14:12:01 -0700

 I think we need some sort of criteria for deciding when a dynamic
 error is one we want to eliminate, and when we don't mind.
 
 We decided that this dynamic error isn't something we need to reject statically:
 
 (: v (Vectorof Integer))
 (define v (vector 0))
 
 (vector-ref v -1)
 
 whereas this one is:
 
 (vector-ref v 1.5)
 
 Which side do you think this error falls on?
 
 Sam
 
 
 On Tue, Jul 29, 2014 at 2:03 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Jul 29, 2014, at 4:50 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 >
 >> On Tue, Jul 29, 2014 at 1:44 PM,  <matthias@ccs.neu.edu> wrote:
 >>>
 >>> *** How to repeat:
 >>> ENTER:
 >>> (: x exn:break)
 >>> (define x (let/ec k (make-exn:break "" (current-continuation-marks) (lambda (x) (k x)))))
 >>>
 >>> RUN:
 >>> exn:break: contract violation
 >>>  expected: escape-continuation?
 >>>  given: #<procedure>
 >>
 >> I think this is not a bug. In general, Typed Racket doesn't
 >> distinguish escape-continuations (or other continuations) from other
 >> kinds of procedures.
 >>
 >> We could add this distinction, but I don't know that it would be very
 >> useful, and might make some programs harder to write.
 >
 >
 >
 > I think it is a bug but it's difficult to solve and not worth our while.
 >
 > I wanted to file it so it is on record.
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14667: wxn:break and typed racket
Date: Tue, 29 Jul 2014 17:41:00 -0400

 Yes, we have been through this before. Let's write down something and fix it over time. 
 
 
 
 
 On Jul 29, 2014, at 5:12 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 
 > I think we need some sort of criteria for deciding when a dynamic
 > error is one we want to eliminate, and when we don't mind.
 > 
 > We decided that this dynamic error isn't something we need to reject statically:
 > 
 > (: v (Vectorof Integer))
 > (define v (vector 0))
 > 
 > (vector-ref v -1)
 > 
 > whereas this one is:
 > 
 > (vector-ref v 1.5)
 > 
 > Which side do you think this error falls on?
 > 
 > Sam
 > 
 > 
 > On Tue, Jul 29, 2014 at 2:03 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >> 
 >> On Jul 29, 2014, at 4:50 PM, Sam Tobin-Hochstadt <samth@cs.indiana.edu> wrote:
 >> 
 >>> On Tue, Jul 29, 2014 at 1:44 PM,  <matthias@ccs.neu.edu> wrote:
 >>>> 
 >>>> *** How to repeat:
 >>>> ENTER:
 >>>> (: x exn:break)
 >>>> (define x (let/ec k (make-exn:break "" (current-continuation-marks) (lambda (x) (k x)))))
 >>>> 
 >>>> RUN:
 >>>> exn:break: contract violation
 >>>> expected: escape-continuation?
 >>>> given: #<procedure>
 >>> 
 >>> I think this is not a bug. In general, Typed Racket doesn't
 >>> distinguish escape-continuations (or other continuations) from other
 >>> kinds of procedures.
 >>> 
 >>> We could add this distinction, but I don't know that it would be very
 >>> useful, and might make some programs harder to write.
 >> 
 >> 
 >> 
 >> I think it is a bug but it's difficult to solve and not worth our while.
 >> 
 >> I wanted to file it so it is on record.
 
 
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14667: wxn:break and typed racket
Date: Tue, 29 Jul 2014 14:49:32 -0700

 On Tue, Jul 29, 2014 at 2:41 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Yes, we have been through this before. Let's write down something and fix it over time.
 
 I'm asking which category you think this dynamic error is in.
 
 Sam

