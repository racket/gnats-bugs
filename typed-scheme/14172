From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Nov 18 15:28:31 2013
Received: from mail-ob0-f170.google.com (mail-ob0-f170.google.com [209.85.214.170])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rAIKSSa0010161
	for <bugs@bugs.plt-scheme.org>; Mon, 18 Nov 2013 15:28:28 -0500
Message-Id: <201311182028.rAIKSQ5x010154@winooski.ccs.neu.edu>
Date: Mon, 18 Nov 2013 15:28:26 -0500
From: clements@racket-lang.org
To: bugs@racket-lang.org
Subject: Typed Racket signals case-lambda-procedure arity error on proc in struct unwrap

>Number:         14172
>Category:       typed-scheme
>Synopsis:       Typed Racket signals case-lambda-procedure arity error on proc in struct unwrap
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Nov 18 15:32:01 -0500 2013
>Last-Modified:  Thu Nov 21 22:58:58 -0500 2013
>Originator:     John Clements
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.90.0.9--2013-10-22(94e4941f/d)
>Environment:
macosx "Darwin pcp074888pcs.wireless.calpoly.edu 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 510422248
Links: (links) = (); (links #:user? #f) = ("drracket-solarized"); (links #:root? #t) = (); (links #:user? #f #:root? #t) = (#<path:/Users/clements/git-clements/clements/pkgs/badger> #<path:/Users/clements/git-clements/clements/pkgs/web-utilities> #<path:/Users/clements/git-clements/clements/pkgs/shelly> #<path:/Users/clements/git-clements/clements/pkgs/gradeserver> #<path:/Users/clements/plt/racket/share/pkgs/handin> #<path:/Users/clements/portaudio> #<path:/Users/clements/plt/racket/share/pkgs/sxml> #<path:/Users/clements/midi-readwrite> #<path:/Users/clements/rsound>)
raco pkg (show):
/Users/clements/plt/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [203 auto-installed packages not shown]
Installation-wide:
 Package               Checksum                                    Source
 badger                #f                                          (link ../../../../git-clements/clements/pkgs/badger)
 drracket-solarized    3c7ac56e3bde4f52653c08ad1058188f9bc10184    (catalog drracket-solarized)
 gradeserver           #f                                          (link ../../../../git-clements/clements/pkgs/gradeserver)
 handin                0fcbca1060053a4145630d3e5dc5189200b8db32    (catalog handin)
 midi-readwrite        #f                                          (link ../../../../midi-readwrite)
 portaudio             #f                                          (link ../../../../portaudio)
 rsound                #f                                          (link ../../../../rsound)
 shelly                #f                                          (link ../../../../git-clements/clements/pkgs/shelly)
 sxml                  b32608693e9ea39b873da11eabb6e2a4e7d5b600    (catalog sxml)
 web-utilities         #f                                          (link ../../../../git-clements/clements/pkgs/web-utilities)
User-specific for installation "development":
 [none]



Collections:
("/Users/clements/clements/collects"
 (".gitignore" "info-domain" "jbc-gnucash" "midi" "mnemisis" "projector" "template-tester" "txomp"))
("/Users/clements/clements/matthias/collects"
 ("info-domain" "web"))
("/Users/clements/Library/Racket/development/collects"
 (non-existent-path))
("/Users/clements/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test)) #t))
>Description:
I'm not sure whether this code should type-check, but I'm
confident that it shouldn't raise a runtime error. FWIW,
this code worked correctly in earlier versions of DrR. 
The problem goes away if you change the type of the maker
field from Procedure to Any.  I conjecture that the value 
placed in the structure is getting a wrapper from Typed
Racket that's not being properly removed when the value
travels to the untyped world.
>How-To-Repeat:
In file "mini-network.rkt" (n.b.: not typed): 

#lang racket

(provide
 (struct-out network/s)
 network-init)

(struct network/s (maker))

(define (network-init signal)
  ((network/s-maker signal)))

In file "uses-network.rkt":

#lang typed/racket

(require/typed "mini-network.rkt"
               [#:struct network/s ([maker : Procedure])]
               [network-init (network/s -> Any)])

(: testnet network/s)
(define testnet
  (network/s (lambda () 0.5)))

(network-init testnet)

Evaluate "uses-network.rkt" to see the error:
#<case-lambda-procedure>: arity mismatch;
 the expected number of arguments does not match the given number
  given: 0
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: clements@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14172: Typed Racket signals
 case-lambda-procedure arity error on proc in struct unwrap
Date: Mon, 18 Nov 2013 15:43:16 -0500

 On 2013-11-18 15:32:01 -0500, clements@racket-lang.org wrote:
 > *** Description:
 > I'm not sure whether this code should type-check, but I'm
 > confident that it shouldn't raise a runtime error. FWIW,
 > this code worked correctly in earlier versions of DrR. 
 > The problem goes away if you change the type of the maker
 > field from Procedure to Any.  I conjecture that the value 
 > placed in the structure is getting a wrapper from Typed
 > Racket that's not being properly removed when the value
 > travels to the untyped world.
 
 This is actually triggering an arity error due to the contract
 that was wrapped on the lambda. The `Procedure` type corresponds
 to the `(case->)` contract (i.e., the unapplyable function).
 
 The problem is that `(case->)` turns it into a function that
 has no arity, so you'll always get an arity error instead of a
 contract error.
 
 I do agree that it's confusing, so we should probably make a
 custom contract for TR that wraps the function, accepts any
 arguments, and then immediately errors and blames the party
 that tried to apply it.
 
 Cheers,
 Asumu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: clements@racket-lang.org, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14172: Typed Racket signals case-lambda-procedure
 arity error on proc in struct unwrap
Date: Mon, 18 Nov 2013 12:49:17 -0800

 Shouldn't this be fixed at the contract level instead?
 
 On Mon, Nov 18, 2013 at 12:43 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2013-11-18 15:32:01 -0500, clements@racket-lang.org wrote:
 >> *** Description:
 >> I'm not sure whether this code should type-check, but I'm
 >> confident that it shouldn't raise a runtime error. FWIW,
 >> this code worked correctly in earlier versions of DrR.
 >> The problem goes away if you change the type of the maker
 >> field from Procedure to Any.  I conjecture that the value
 >> placed in the structure is getting a wrapper from Typed
 >> Racket that's not being properly removed when the value
 >> travels to the untyped world.
 >
 > This is actually triggering an arity error due to the contract
 > that was wrapped on the lambda. The `Procedure` type corresponds
 > to the `(case->)` contract (i.e., the unapplyable function).
 >
 > The problem is that `(case->)` turns it into a function that
 > has no arity, so you'll always get an arity error instead of a
 > contract error.
 >
 > I do agree that it's confusing, so we should probably make a
 > custom contract for TR that wraps the function, accepts any
 > arguments, and then immediately errors and blames the party
 > that tried to apply it.
 >
 > Cheers,
 > Asumu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, clements@racket-lang.org,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14172: Typed Racket signals case-lambda-procedure
 arity error on proc in struct unwrap
Date: Mon, 18 Nov 2013 12:55:47 -0800

 Just off hand (will test later) but I think this is actually unsafe.
 
 (ann (ann (case-lambda [() (+ 1 "string")] [(x) x]) (Number -> Number)) Any)
 
 That typechecks as it should (given dead code elimination) but is not
 safe to call with zero arguments.
 
 On Mon, Nov 18, 2013 at 12:52 PM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > On Mon, Nov 18, 2013 at 3:43 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 >> On 2013-11-18 15:32:01 -0500, clements@racket-lang.org wrote:
 >>> *** Description:
 >>> I'm not sure whether this code should type-check, but I'm
 >>> confident that it shouldn't raise a runtime error. FWIW,
 >>> this code worked correctly in earlier versions of DrR.
 >>> The problem goes away if you change the type of the maker
 >>> field from Procedure to Any.  I conjecture that the value
 >>> placed in the structure is getting a wrapper from Typed
 >>> Racket that's not being properly removed when the value
 >>> travels to the untyped world.
 >>
 >> This is actually triggering an arity error due to the contract
 >> that was wrapped on the lambda. The `Procedure` type corresponds
 >> to the `(case->)` contract (i.e., the unapplyable function).
 >>
 >> The problem is that `(case->)` turns it into a function that
 >> has no arity, so you'll always get an arity error instead of a
 >> contract error.
 >>
 >> I do agree that it's confusing, so we should probably make a
 >> custom contract for TR that wraps the function, accepts any
 >> arguments, and then immediately errors and blames the party
 >> that tried to apply it.
 >
 > The other question is why this works with `Any` and not `Procedure`.
 > The answer is that if you pass a value of type `Any` to an untyped
 > module, it gets wrapped in a special contract [1] that prevents
 > higher-order values passed as `Any` from being misused. That contract
 > treats nullary procedures differently, since it's safe to apply them,
 > provided you protect the result (see line 90+ in the file).
 >
 > We could do something similar in the contract we generate for
 > `Procedure`, which would make this program work in both situations.
 >
 > However, the fact remains that using really big nominal types like
 > `Any` and `Procedure` is in general not a good idea in Typed Racket,
 > especially if you're passing around higher-order data.
 >
 > [1] https://github.com/plt/racket/blob/master/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/utils/any-wrap.rkt
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: clements@racket-lang.org, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14172: Typed Racket signals case-lambda-procedure
 arity error on proc in struct unwrap
Date: Mon, 18 Nov 2013 15:52:28 -0500

 On Mon, Nov 18, 2013 at 3:43 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2013-11-18 15:32:01 -0500, clements@racket-lang.org wrote:
 >> *** Description:
 >> I'm not sure whether this code should type-check, but I'm
 >> confident that it shouldn't raise a runtime error. FWIW,
 >> this code worked correctly in earlier versions of DrR.
 >> The problem goes away if you change the type of the maker
 >> field from Procedure to Any.  I conjecture that the value
 >> placed in the structure is getting a wrapper from Typed
 >> Racket that's not being properly removed when the value
 >> travels to the untyped world.
 >
 > This is actually triggering an arity error due to the contract
 > that was wrapped on the lambda. The `Procedure` type corresponds
 > to the `(case->)` contract (i.e., the unapplyable function).
 >
 > The problem is that `(case->)` turns it into a function that
 > has no arity, so you'll always get an arity error instead of a
 > contract error.
 >
 > I do agree that it's confusing, so we should probably make a
 > custom contract for TR that wraps the function, accepts any
 > arguments, and then immediately errors and blames the party
 > that tried to apply it.
 
 The other question is why this works with `Any` and not `Procedure`.
 The answer is that if you pass a value of type `Any` to an untyped
 module, it gets wrapped in a special contract [1] that prevents
 higher-order values passed as `Any` from being misused. That contract
 treats nullary procedures differently, since it's safe to apply them,
 provided you protect the result (see line 90+ in the file).
 
 We could do something similar in the contract we generate for
 `Procedure`, which would make this program work in both situations.
 
 However, the fact remains that using really big nominal types like
 `Any` and `Procedure` is in general not a good idea in Typed Racket,
 especially if you're passing around higher-order data.
 
 [1] https://github.com/plt/racket/blob/master/pkgs/typed-racket-pkgs/typed-racket-lib/typed-racket/utils/any-wrap.rkt

