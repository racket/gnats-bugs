From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Nov 17 13:05:35 2013
Received: from mail-ob0-f181.google.com (mail-ob0-f181.google.com [209.85.214.181])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rAHI5Xnx026963
	for <bugs@bugs.plt-scheme.org>; Sun, 17 Nov 2013 13:05:33 -0500
Message-Id: <201311171805.rAHI5V9W026956@winooski.ccs.neu.edu>
Date: Sun, 17 Nov 2013 13:05:31 -0500
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: TR forbids plain default values

>Number:         14158
>Category:       typed-scheme
>Synopsis:       TR forbids plain default values
>Class:          sw-bug
>Responsible:    endobson
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Nov 17 13:08:01 -0500 2013
>Closed-Date:    Sun Dec 01 14:31:33 -0500 2013
>Last-Modified:  Sun Dec 01 14:31:33 -0500 2013
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36
>Description:
IIUC, the type of `hash-ref' forbids a non-thunk as the default value.
This is lost useful functionality since it's allowed in R because of
performance...  It'd also be possible to cover up for it with
`hash-has-key?' if it wasn't broken, but that feels wrong and
potentially loses speed too(?).

Regardless, not allowing it forces changes in code.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Eli Barzilay <eli@barzilay.org>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14158: TR forbids plain default values
Date: Sun, 17 Nov 2013 10:25:18 -0800

 What type do you want for hash-ref?
 
 The type (All (k v) ((HashTable k v) k v -> v)) is incorrect. Imagine
 it instantiated as ((HashTable Boolean (-> Number)) Boolean (->
 Number) -> (-> Number)) because when called as such it may return a
 number instead of the thunk.
 
 The issue is the same as we see with flatten, we need non subtype
 constraints i.e. (not (v <: (-> Any))) and I don't think this is
 doable (without major research).
 
 On Sun, Nov 17, 2013 at 10:08 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14158
 >
 > Reported by Eli Barzilay for release: HEAD
 >
 > *** Description:
 > IIUC, the type of `hash-ref' forbids a non-thunk as the default value.
 > This is lost useful functionality since it's allowed in R because of
 > performance...  It'd also be possible to cover up for it with
 > `hash-has-key?' if it wasn't broken, but that feels wrong and
 > potentially loses speed too(?).
 >
 > Regardless, not allowing it forces changes in code.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36
 >
From: Eli Barzilay <eli@barzilay.org>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14158: TR forbids plain default values
Date: Sun, 17 Nov 2013 13:45:47 -0500

 --f46d04428172f1248804eb63d63b
 Content-Type: text/plain; charset=UTF-8
 
 I don't think that this needs to be as bad as the flatten case.  One
 limited but useful hack is to allow just #f -- it does mean a bit of extra
 work but just #f is common enough to knock out many cases.  Make it a union
 of Boolean/String/Number/other-non-functions and you cover even more cases.
 
 I'm assuming that it's possible to specify something simple like that, but
 I'm not sure.
 
 [BTW, I don't remember if the flatten discussion preceded Sexpof, but I'd
 expect it to work with
     (: flatten : (All (A) (Sexpof A) -> (Listof A)))
 and the errors that it gives me for that (and the implementation from
 `racket/list') are unreadable..  Still, isn't it possible to just declare
 that type for flatten?]
 
 
 
 On Sun, Nov 17, 2013 at 1:25 PM, Eric Dobson <eric.n.dobson@gmail.com>wrote:
 
 > What type do you want for hash-ref?
 >
 > The type (All (k v) ((HashTable k v) k v -> v)) is incorrect. Imagine
 > it instantiated as ((HashTable Boolean (-> Number)) Boolean (->
 > Number) -> (-> Number)) because when called as such it may return a
 > number instead of the thunk.
 >
 > The issue is the same as we see with flatten, we need non subtype
 > constraints i.e. (not (v <: (-> Any))) and I don't think this is
 > doable (without major research).
 >
 > On Sun, Nov 17, 2013 at 10:08 AM,  <eli@barzilay.org> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=14158
 > >
 > > Reported by Eli Barzilay for release: HEAD
 > >
 > > *** Description:
 > > IIUC, the type of `hash-ref' forbids a non-thunk as the default value.
 > > This is lost useful functionality since it's allowed in R because of
 > > performance...  It'd also be possible to cover up for it with
 > > `hash-has-key?' if it wasn't broken, but that feels wrong and
 > > potentially loses speed too(?).
 > >
 > > Regardless, not allowing it forces changes in code.
 > >
 > > *** How to repeat:
 > >
 > >
 > > *** Environment:
 > > Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML,
 > like Gecko) Chrome/28.0.1500.95 Safari/537.36
 > >
 >
 
 
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
 
 --f46d04428172f1248804eb63d63b
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I don&#39;t think that this needs to be as bad as the flat=
 ten case. =C2=A0One limited but useful hack is to allow just #f -- it does =
 mean a bit of extra work but just #f is common enough to knock out many cas=
 es. =C2=A0Make it a union of Boolean/String/Number/other-non-functions and =
 you cover even more cases.<div>
 <br></div><div>I&#39;m assuming that it&#39;s possible to specify something=
  simple like that, but I&#39;m not sure.</div><div><br></div><div>[BTW, I d=
 on&#39;t remember if the flatten discussion preceded Sexpof, but I&#39;d ex=
 pect it to work with</div>
 <div>=C2=A0 =C2=A0 (: flatten : (All (A) (Sexpof A) -&gt; (Listof A)))<br><=
 /div><div>and the errors that it gives me for that (and the implementation =
 from `racket/list&#39;) are unreadable.. =C2=A0Still, isn&#39;t it possible=
  to just declare that type for flatten?]</div>
 <div><br></div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail=
 _quote">On Sun, Nov 17, 2013 at 1:25 PM, Eric Dobson <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@=
 gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">What type do you want for hash-ref?<br>
 <br>
 The type (All (k v) ((HashTable k v) k v -&gt; v)) is incorrect. Imagine<br=
 >
 it instantiated as ((HashTable Boolean (-&gt; Number)) Boolean (-&gt;<br>
 Number) -&gt; (-&gt; Number)) because when called as such it may return a<b=
 r>
 number instead of the thunk.<br>
 <br>
 The issue is the same as we see with flatten, we need non subtype<br>
 constraints i.e. (not (v &lt;: (-&gt; Any))) and I don&#39;t think this is<=
 br>
 doable (without major research).<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Sun, Nov 17, 2013 at 10:08 AM, =C2=A0&lt;<a href=3D"mailto:eli@barzilay.=
 org">eli@barzilay.org</a>&gt; wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14158" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D14158</a><br>
 &gt;<br>
 &gt; Reported by Eli Barzilay for release: HEAD<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; IIUC, the type of `hash-ref&#39; forbids a non-thunk as the default va=
 lue.<br>
 &gt; This is lost useful functionality since it&#39;s allowed in R because =
 of<br>
 &gt; performance... =C2=A0It&#39;d also be possible to cover up for it with=
 <br>
 &gt; `hash-has-key?&#39; if it wasn&#39;t broken, but that feels wrong and<=
 br>
 &gt; potentially loses speed too(?).<br>
 &gt;<br>
 &gt; Regardless, not allowing it forces changes in code.<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt;<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML,=
  like Gecko) Chrome/28.0.1500.95 Safari/537.36<br>
 &gt;<br>
 </div></div></blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>=
 <div dir=3D"ltr"><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((lambda (x) (x x)=
 ) (lambda (x) (x x))) =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:</div>=
 <div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 <a href=3D"http://barzilay.org/" target=3D"_blank">http://barzilay.org/</a>=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze is Lif=
 e!</div>
 </div>
 </div>
 
 --f46d04428172f1248804eb63d63b--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14158: TR forbids plain default values
Date: Sun, 17 Nov 2013 10:51:39 -0800

 I can see #f working. I'll let Sam make the call on the design choice
 of including this. Including others would require a huge blow up in
 the type because it would need a case for every base type/combination
 of base type.
 
 For flatten no that doesn't work. Imagine instantiating A with (Listof
 Number): then ((inst flatten (Listof Nmuber)) (list (list 2))) has
 type (Listof (Listof Number)) but value (list 2).
 
 On Sun, Nov 17, 2013 at 10:45 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > I don't think that this needs to be as bad as the flatten case.  One limited
 > but useful hack is to allow just #f -- it does mean a bit of extra work but
 > just #f is common enough to knock out many cases.  Make it a union of
 > Boolean/String/Number/other-non-functions and you cover even more cases.
 >
 > I'm assuming that it's possible to specify something simple like that, but
 > I'm not sure.
 >
 > [BTW, I don't remember if the flatten discussion preceded Sexpof, but I'd
 > expect it to work with
 >     (: flatten : (All (A) (Sexpof A) -> (Listof A)))
 > and the errors that it gives me for that (and the implementation from
 > `racket/list') are unreadable..  Still, isn't it possible to just declare
 > that type for flatten?]
 >
 >
 >
 > On Sun, Nov 17, 2013 at 1:25 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 >>
 >> What type do you want for hash-ref?
 >>
 >> The type (All (k v) ((HashTable k v) k v -> v)) is incorrect. Imagine
 >> it instantiated as ((HashTable Boolean (-> Number)) Boolean (->
 >> Number) -> (-> Number)) because when called as such it may return a
 >> number instead of the thunk.
 >>
 >> The issue is the same as we see with flatten, we need non subtype
 >> constraints i.e. (not (v <: (-> Any))) and I don't think this is
 >> doable (without major research).
 >>
 >> On Sun, Nov 17, 2013 at 10:08 AM,  <eli@barzilay.org> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=14158
 >> >
 >> > Reported by Eli Barzilay for release: HEAD
 >> >
 >> > *** Description:
 >> > IIUC, the type of `hash-ref' forbids a non-thunk as the default value.
 >> > This is lost useful functionality since it's allowed in R because of
 >> > performance...  It'd also be possible to cover up for it with
 >> > `hash-has-key?' if it wasn't broken, but that feels wrong and
 >> > potentially loses speed too(?).
 >> >
 >> > Regardless, not allowing it forces changes in code.
 >> >
 >> > *** How to repeat:
 >> >
 >> >
 >> > *** Environment:
 >> > Win32 / Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML,
 >> > like Gecko) Chrome/28.0.1500.95 Safari/537.36
 >> >
 >
 >
 >
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14158: TR forbids plain default values
Date: Sun, 17 Nov 2013 13:54:36 -0500

 Just now, Eric Dobson wrote:
 > I can see #f working. I'll let Sam make the call on the design
 > choice of including this. Including others would require a huge blow
 > up in the type because it would need a case for every base
 > type/combination of base type.
 
 I'm surprised that it can't be just a union of a few useful types...
 
 
 > For flatten no that doesn't work. Imagine instantiating A with
 > (Listof Number): then ((inst flatten (Listof Nmuber)) (list (list
 > 2))) has type (Listof (Listof Number)) but value (list 2).
 
 [OK, that's the problem I remember -- but now I don't see what Sexp is
 useful for...]
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14158: TR forbids plain default values
Date: Sun, 17 Nov 2013 11:09:13 -0800

 On Sun, Nov 17, 2013 at 10:54 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > Just now, Eric Dobson wrote:
 >> I can see #f working. I'll let Sam make the call on the design
 >> choice of including this. Including others would require a huge blow
 >> up in the type because it would need a case for every base
 >> type/combination of base type.
 >
 > I'm surprised that it can't be just a union of a few useful types...
 Because it wouldn't be useful then, because the result would always be
 the union.
 
 Imagine that we go with (U Boolean Number).
 Then (one branch of) hash-ref has the type ((HashTable k v) k (U
 Boolean Number) -> (U k Boolean Number)).
 
 What I am saying is that you actually want a branch for each base type
 and one for each Union, and thats what leads to the blowup. TR could
 be smarter about applying functions to unions, but implementing that
 is tricky.
 
 
 >
 >
 >> For flatten no that doesn't work. Imagine instantiating A with
 >> (Listof Number): then ((inst flatten (Listof Nmuber)) (list (list
 >> 2))) has type (Listof (Listof Number)) but value (list 2).
 >
 > [OK, that's the problem I remember -- but now I don't see what Sexp is
 > useful for...]
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14158: TR forbids plain default values
Date: Sun, 17 Nov 2013 15:02:06 -0500

 50 minutes ago, Eric Dobson wrote:
 > On Sun, Nov 17, 2013 at 10:54 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > > Just now, Eric Dobson wrote:
 > >> I can see #f working. I'll let Sam make the call on the design
 > >> choice of including this. Including others would require a huge blow
 > >> up in the type because it would need a case for every base
 > >> type/combination of base type.
 > >
 > > I'm surprised that it can't be just a union of a few useful types...
 > 
 > Because it wouldn't be useful then, because the result would always
 > be the union.
 > [...]
 
 Bah ... and that's the connection to flatten.  Any chance of ever
 getting intersections or qualifiers or whatever that would make it
 possible?  (IIRC, at least one of them was planned, no?)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14158: TR forbids plain default values
Date: Sun, 17 Nov 2013 12:10:40 -0800

 On Sun, Nov 17, 2013 at 12:02 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 50 minutes ago, Eric Dobson wrote:
 >> On Sun, Nov 17, 2013 at 10:54 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > Just now, Eric Dobson wrote:
 >> >> I can see #f working. I'll let Sam make the call on the design
 >> >> choice of including this. Including others would require a huge blow
 >> >> up in the type because it would need a case for every base
 >> >> type/combination of base type.
 >> >
 >> > I'm surprised that it can't be just a union of a few useful types...
 >>
 >> Because it wouldn't be useful then, because the result would always
 >> be the union.
 >> [...]
 >
 > Bah ... and that's the connection to flatten.  Any chance of ever
 > getting intersections or qualifiers or whatever that would make it
 > possible?  (IIRC, at least one of them was planned, no?)
 
 AFAIK, nothing is being done on this front.
 
 
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14158: TR forbids plain default values
Date: Sun, 17 Nov 2013 16:12:47 -0500

 On Sun, Nov 17, 2013 at 3:02 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 50 minutes ago, Eric Dobson wrote:
 >> On Sun, Nov 17, 2013 at 10:54 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > Just now, Eric Dobson wrote:
 >> >> I can see #f working. I'll let Sam make the call on the design
 >> >> choice of including this. Including others would require a huge blow
 >> >> up in the type because it would need a case for every base
 >> >> type/combination of base type.
 >> >
 >> > I'm surprised that it can't be just a union of a few useful types...
 >>
 >> Because it wouldn't be useful then, because the result would always
 >> be the union.
 >> [...]
 >
 > Bah ... and that's the connection to flatten.  Any chance of ever
 > getting intersections or qualifiers or whatever that would make it
 > possible?  (IIRC, at least one of them was planned, no?)
 
 
 Bounded polymorphism would be sufficient here, but it's not something
 that I'm planning to work on in the near future.
 
 We should add the #f case explicitly though.
 
 Sam

Responsible changed from "samth" to "endobson" by endobson@racket-lang.org at Sun, 01 Dec 2013 14:31:33 -0500
Reason>>> A commit by endobson@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/258d9b8e2f
State changed from "open" to "closed" by endobson@racket-lang.org at Sun, 01 Dec 2013 14:31:33 -0500
Reason>>> A commit by endobson@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/258d9b8e2f
  | Add #f as a special case for hash-ref, fix hash-ref!.
  | 
  | Closes PR 14158.
  | 
  | Merge to 6.0.

