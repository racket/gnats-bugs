From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Apr  5 23:24:37 2010
Received: from mail-gx0-f228.google.com (mail-gx0-f228.google.com [209.85.217.228])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o363OY8v011387
	for <bugs@bugs.plt-scheme.org>; Mon, 5 Apr 2010 23:24:35 -0400
Message-Id: <201004060324.o363OQV1011379@champlain.ccs.neu.edu>
Date: Mon, 5 Apr 2010 23:24:26 -0400
From: dvanhorn@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Typed Scheme: untyped higher-order values and typed Any structures

>Number:         10845
>Category:       typed-scheme
>Synopsis:       Typed Scheme: untyped higher-order values and typed Any structures
>Class:          change-request
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Apr 05 23:28:01 -0400 2010
>Closed-Date:    Thu Aug 25 12:29:36 -0400 2011
>Last-Modified:  Thu Aug 25 12:29:36 -0400 2011
>Originator:     David Van Horn
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.5.4-svn2apr2010
>Environment:
macosx "Darwin doom 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov  3 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 282509700

Collections:
(("/Users/dvanhorn/Library/PLT Scheme/4.2.5.4/collects" non-existent-path) ("/Applications/plt/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-!
 scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
This has bitten me recently, and the more I think about it, the more
this seems untenable.

If I have a typed structure with a field of type Any, from an untyped
context I can't put a higher-order value in the structure, then
remove it and use it like a procedure (in fact, it is not a procedure
any more!).

This means, for example, that even something as simple as the
"Pare" library cannot be implemented in Typed Scheme for 
general untyped consumption.

#lang typed/scheme
(define-struct: pare ([left : Any] [right : Any]))
(provide (struct-out pare))

#lang scheme
(require "pare.ss")
(procedure? (pare-left (make-pare (Î» () 7) 8)))

At first I thought this was just an inconvenience, but now I am
beginning to think this is just plain wrong.  Look -- my example
program doesn't even blow up!  If I swap out an *equivalent* typed
module for an untyped module, #t goes to #f.  That's not good.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: dvanhorn@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10845: Typed Scheme: untyped higher-order values and typed Any structures
Date: Tue, 6 Apr 2010 09:27:17 -0400

 This is the known unsoundness bug.
 
 
 On Apr 5, 2010, at 11:28 PM, dvanhorn@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10845
 >
 > Reported by David Van Horn for release: 4.2.5.4-svn2apr2010
 >
 > *** Description:
 > This has bitten me recently, and the more I think about it, the more
 > this seems untenable.
 >
 > If I have a typed structure with a field of type Any, from an untyped
 > context I can't put a higher-order value in the structure, then
 > remove it and use it like a procedure (in fact, it is not a procedure
 > any more!).
 >
 > This means, for example, that even something as simple as the
 > "Pare" library cannot be implemented in Typed Scheme for
 > general untyped consumption.
 >
 > #lang typed/scheme
 > (define-struct: pare ([left : Any] [right : Any]))
 > (provide (struct-out pare))
 >
 > #lang scheme
 > (require "pare.ss")
 > (procedure? (pare-left (make-pare (=CE=BB () 7) 8)))
 >
 > At first I thought this was just an inconvenience, but now I am
 > beginning to think this is just plain wrong.  Look -- my example
 > program doesn't even blow up!  If I swap out an *equivalent* typed
 > module for an untyped module, #t goes to #f.  That's not good.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > macosx "Darwin doom 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov  3 =20=
 
 > 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386" (i386-=20
 > macosx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 282509700
 >
 > Collections:
 > (("/Users/dvanhorn/Library/PLT Scheme/4.2.5.4/collects" non-existent-=20=
 
 > path) ("/Applications/plt/collects" "2htdp" "afm" "algol60" "at-exp" =20=
 
 > "browser" "combinator-parser" "compiler" "config" "defaults" =20
 > "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" =20
 > "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" =20
 > "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" =20
 > "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" =20
 > "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" =20
 > "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" =20=
 
 > "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" =20
 > "reader" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" =20
 > "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" =20
 > "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" =20
 > "string-constants" "swindle" "syntax" "syntax-color" "teachpack" =20
 > "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" =20
 > "trace" "typed" "typed-!
 > scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
 > Computer Language: (("Determine language from source") (#(#t write =20
 > mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
 >
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: dvanhorn@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10845: Typed Scheme: untyped higher-order values 
	and typed Any structures
Date: Tue, 6 Apr 2010 09:51:01 -0400

 On Tue, Apr 6, 2010 at 9:27 AM, Matthias Felleisen <matthias@ccs.neu.edu> w=
 rote:
 >
 > This is the known unsoundness bug.
 
 I don't think this is unsoundness (depending on what we mean by
 unsoundness).  There's no way to avoid such a result.  Consider:
 
 #lang typed/scheme ;; m
 (define: (f [x : Number]) : Boolean #t)
 (provide f)
 
 #lang scheme
 (require m)
 (with-handlers ([exn:fail? (lambda _ #f)])
   (f 'nope))
 
 Produces #f with types, #t without them.
 
 >
 >
 > On Apr 5, 2010, at 11:28 PM, dvanhorn@ccs.neu.edu wrote:
 >
 >> A new problem report is waiting at
 >> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10845
 >>
 >> Reported by David Van Horn for release: 4.2.5.4-svn2apr2010
 >>
 >> *** Description:
 >> This has bitten me recently, and the more I think about it, the more
 >> this seems untenable.
 >>
 >> If I have a typed structure with a field of type Any, from an untyped
 >> context I can't put a higher-order value in the structure, then
 >> remove it and use it like a procedure (in fact, it is not a procedure
 >> any more!).
 >>
 >> This means, for example, that even something as simple as the
 >> "Pare" library cannot be implemented in Typed Scheme for
 >> general untyped consumption.
 >>
 >> #lang typed/scheme
 >> (define-struct: pare ([left : Any] [right : Any]))
 >> (provide (struct-out pare))
 >>
 >> #lang scheme
 >> (require "pare.ss")
 >> (procedure? (pare-left (make-pare (=CE=BB () 7) 8)))
 >>
 >> At first I thought this was just an inconvenience, but now I am
 >> beginning to think this is just plain wrong. =C2=A0Look -- my example
 >> program doesn't even blow up! =C2=A0If I swap out an *equivalent* typed
 >> module for an untyped module, #t goes to #f. =C2=A0That's not good.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> macosx "Darwin doom 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov =C2=A03
 >> 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386" (i386-macosx/=
 3m)
 >> (get-display-depth) =3D 32
 >> Human Language: english
 >> (current-memory-use) 282509700
 >>
 >> Collections:
 >> (("/Users/dvanhorn/Library/PLT Scheme/4.2.5.4/collects" non-existent-pat=
 h)
 >> ("/Applications/plt/collects" "2htdp" "afm" "algol60" "at-exp" "browser"
 >> "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drsch=
 eme"
 >> "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework"
 >> "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client"
 >> "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-dom=
 ain"
 >> "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib"
 >> "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "pla=
 i"
 >> "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader" "readlin=
 e"
 >> "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribbl=
 e"
 >> "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "s=
 rfi"
 >> "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-colo=
 r"
 >> "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpic=
 t"
 >> "trace" "typed" "typed-!
 >> scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
 >> Computer Language: (("Determine language from source") (#(#t write
 >> mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
 >>
 >
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu
From: David Van Horn <dvanhorn@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10845: Typed Scheme: untyped higher-order values
 	and typed Any structures
Date: Tue, 06 Apr 2010 09:59:49 -0400

 On 4/6/10 9:51 AM, Sam Tobin-Hochstadt wrote:
 > On Tue, Apr 6, 2010 at 9:27 AM, Matthias Felleisen<matthias@ccs.neu.edu>  wrote:
 >>
 >> This is the known unsoundness bug.
 >
 > I don't think this is unsoundness (depending on what we mean by
 > unsoundness).  There's no way to avoid such a result.  Consider:
 >
 > #lang typed/scheme ;; m
 > (define: (f [x : Number]) : Boolean #t)
 > (provide f)
 >
 > #lang scheme
 > (require m)
 > (with-handlers ([exn:fail? (lambda _ #f)])
 >    (f 'nope))
 >
 > Produces #f with types, #t without them.
 
 I think the difference is if I replace m with a contracted module, I 
 always get #f.  But in the pare example the contracted and typed modules 
 do different things.
 
 David
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        "dvanhorn@ccs.neu.edu" <dvanhorn@ccs.neu.edu>,
        "bugs@plt-scheme.org" <bugs@plt-scheme.org>,
        "nobody@plt-scheme.org" <nobody@plt-scheme.org>,
        "bug-notification@plt-scheme.org" <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10845: Typed Scheme: untyped higher-order values 
	and typed Any structures
Date: Tue, 6 Apr 2010 09:03:25 -0500

 That's a separate issue I'd say.
 
 Robby
 
 On Tuesday, April 6, 2010, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Tue, Apr 6, 2010 at 9:27 AM, Matthias Felleisen <matthias@ccs.neu.edu>=
  wrote:
 >>
 >> This is the known unsoundness bug.
 >
 > I don't think this is unsoundness (depending on what we mean by
 > unsoundness). =C2=A0There's no way to avoid such a result. =C2=A0Consider=
 :
 >
 > #lang typed/scheme ;; m
 > (define: (f [x : Number]) : Boolean #t)
 > (provide f)
 >
 > #lang scheme
 > (require m)
 > (with-handlers ([exn:fail? (lambda _ #f)])
 >  =C2=A0(f 'nope))
 >
 > Produces #f with types, #t without them.
 >
 >>
 >>
 >> On Apr 5, 2010, at 11:28 PM, dvanhorn@ccs.neu.edu wrote:
 >>
 >>> A new problem report is waiting at
 >>> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10845
 >>>
 >>> Reported by David Van Horn for release: 4.2.5.4-svn2apr2010
 >>>
 >>> *** Description:
 >>> This has bitten me recently, and the more I think about it, the more
 >>> this seems untenable.
 >>>
 >>> If I have a typed structure with a field of type Any, from an untyped
 >>> context I can't put a higher-order value in the structure, then
 >>> remove it and use it like a procedure (in fact, it is not a procedure
 >>> any more!).
 >>>
 >>> This means, for example, that even something as simple as the
 >>> "Pare" library cannot be implemented in Typed Scheme for
 >>> general untyped consumption.
 >>>
 >>> #lang typed/scheme
 >>> (define-struct: pare ([left : Any] [right : Any]))
 >>> (provide (struct-out pare))
 >>>
 >>> #lang scheme
 >>> (require "pare.ss")
 >>> (procedure? (pare-left (make-pare (=CE=BB () 7) 8)))
 >>>
 >>> At first I thought this was just an inconvenience, but now I am
 >>> beginning to think this is just plain wrong. =C2=A0Look -- my example
 >>> program doesn't even blow up! =C2=A0If I swap out an *equivalent* typed
 >>> module for an untyped module, #t goes to #f. =C2=A0That's not good.
 >>>
 >>> *** How to repeat:
 >>>
 >>>
 >>> *** Environment:
 >>> macosx "Darwin doom 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov =C2=A0=
 3
 >>> 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386" (i386-macosx=
 /3m)
 >>> (get-display-depth) =3D 32
 >>> Human Language: english
 >>> (current-memory-use) 282509700
 >>>
 >>> Collections:
 >>> (("/Users/dvanhorn/Library/PLT Scheme/4.2.5.4/collects" non-existent-pa=
 th)
 >>> ("/Applications/plt/collects" "2htdp" "afm" "algol60" "at-exp" "browser=
 "
 >>> "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drsc=
 heme"
 >>> "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework"
 >>> "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client"
 >>> "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-do=
 main"
 >>> "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib"
 >>> "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "pl=
 ai"
 >>> "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader" "readli=
 ne"
 >>> "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribb=
 le"
 >>> "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "=
 srfi"
 >>> "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-col=
 or"
 >>> "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpi=
 ct"
 >>> "trace" "typed" "typed-!
 >>> scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
 >>> Computer Language: (("Determine language from source") (#(#t write
 >>> mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
 >>>
 >>
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Christos Dimoulas <chrdimo@ccs.neu.edu>
Cc: David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10845: Typed Scheme: untyped higher-order values  and typed Any structures
Date: Tue, 6 Apr 2010 10:05:44 -0400

 What I meant was this:
 
   if you allow arbitrary manipulation of Any in Dave's example,
   you get an unsound system. But I am no longer sure that this
   is so.
 
 ;; ---
 
 The issue of contracts vs non-contracts (types are irrelevant here)
 and turning contract failures into recoverable exceptions is separate.
 
 Robby and I went through this and I don't know what to do. It is
 just another indication that 'contracts are projections' is a
 mathematical naivete just like the Scott-Plotkin-Milner quest for
 full abstraction. (Perhaps it's as useful as Newtonian mechanics,
 except that we have hit the lightspeed limit faster than physics :-)
 
 -- Matthias
 
 
 
 
 
 On Apr 6, 2010, at 9:51 AM, Sam Tobin-Hochstadt wrote:
 
 > On Tue, Apr 6, 2010 at 9:27 AM, Matthias Felleisen =
 <matthias@ccs.neu.edu=20
 > > wrote:
 >>
 >> This is the known unsoundness bug.
 >
 > I don't think this is unsoundness (depending on what we mean by
 > unsoundness).  There's no way to avoid such a result.  Consider:
 >
 > #lang typed/scheme ;; m
 > (define: (f [x : Number]) : Boolean #t)
 > (provide f)
 >
 > #lang scheme
 > (require m)
 > (with-handlers ([exn:fail? (lambda _ #f)])
 >  (f 'nope))
 >
 > Produces #f with types, #t without them.
 >
 >>
 >>
 >> On Apr 5, 2010, at 11:28 PM, dvanhorn@ccs.neu.edu wrote:
 >>
 >>> A new problem report is waiting at
 >>>  http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10845
 >>>
 >>> Reported by David Van Horn for release: 4.2.5.4-svn2apr2010
 >>>
 >>> *** Description:
 >>> This has bitten me recently, and the more I think about it, the more
 >>> this seems untenable.
 >>>
 >>> If I have a typed structure with a field of type Any, from an =20
 >>> untyped
 >>> context I can't put a higher-order value in the structure, then
 >>> remove it and use it like a procedure (in fact, it is not a =20
 >>> procedure
 >>> any more!).
 >>>
 >>> This means, for example, that even something as simple as the
 >>> "Pare" library cannot be implemented in Typed Scheme for
 >>> general untyped consumption.
 >>>
 >>> #lang typed/scheme
 >>> (define-struct: pare ([left : Any] [right : Any]))
 >>> (provide (struct-out pare))
 >>>
 >>> #lang scheme
 >>> (require "pare.ss")
 >>> (procedure? (pare-left (make-pare (=CE=BB () 7) 8)))
 >>>
 >>> At first I thought this was just an inconvenience, but now I am
 >>> beginning to think this is just plain wrong.  Look -- my example
 >>> program doesn't even blow up!  If I swap out an *equivalent* typed
 >>> module for an untyped module, #t goes to #f.  That's not good.
 >>>
 >>> *** How to repeat:
 >>>
 >>>
 >>> *** Environment:
 >>> macosx "Darwin doom 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov  3
 >>> 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386" (i386-=20
 >>> macosx/3m)
 >>> (get-display-depth) =3D 32
 >>> Human Language: english
 >>> (current-memory-use) 282509700
 >>>
 >>> Collections:
 >>> (("/Users/dvanhorn/Library/PLT Scheme/4.2.5.4/collects" non-=20
 >>> existent-path)
 >>> ("/Applications/plt/collects" "2htdp" "afm" "algol60" "at-exp" =20
 >>> "browser"
 >>> "combinator-parser" "compiler" "config" "defaults" "deinprogramm" =20=
 
 >>> "drscheme"
 >>> "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework"
 >>> "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-=20
 >>> client"
 >>> "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" =20
 >>> "info-domain"
 >>> "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" =20
 >>> "mrlib"
 >>> "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-=20
 >>> tools" "plai"
 >>> "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader" =20
 >>> "readline"
 >>> "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" =20
 >>> "scribble"
 >>> "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" =20
 >>> "slideshow" "srfi"
 >>> "srpersist" "stepper" "string-constants" "swindle" "syntax" =20
 >>> "syntax-color"
 >>> "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" =20
 >>> "texpict"
 >>> "trace" "typed" "typed-!
 >>> scheme" "unstable" "version" "waterworld" "web-server" "wxme" =20
 >>> "xml"))
 >>> Computer Language: (("Determine language from source") (#(#t write
 >>> mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
 >>>
 >>
 >>
 >
 >
 >
 > --=20
 > sam th
 > samth@ccs.neu.edu
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Christos Dimoulas <chrdimo@ccs.neu.edu>,
        David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10845: Typed Scheme: untyped higher-order values 
	and typed Any structures
Date: Tue, 6 Apr 2010 09:39:31 -0500

 I agree that we seem to have reached the limit of 'contracts are
 projections' but I wonder if there is something else simple that is
 similar that we should have been thinking about all along...
 
 Robby
 
 On Tue, Apr 6, 2010 at 9:05 AM, Matthias Felleisen <matthias@ccs.neu.edu> w=
 rote:
 >
 > What I meant was this:
 >
 > =C2=A0if you allow arbitrary manipulation of Any in Dave's example,
 > =C2=A0you get an unsound system. But I am no longer sure that this
 > =C2=A0is so.
 >
 > ;; ---
 >
 > The issue of contracts vs non-contracts (types are irrelevant here)
 > and turning contract failures into recoverable exceptions is separate.
 >
 > Robby and I went through this and I don't know what to do. It is
 > just another indication that 'contracts are projections' is a
 > mathematical naivete just like the Scott-Plotkin-Milner quest for
 > full abstraction. (Perhaps it's as useful as Newtonian mechanics,
 > except that we have hit the lightspeed limit faster than physics :-)
 >
 > -- Matthias
 >
 >
 >
 >
 >
 > On Apr 6, 2010, at 9:51 AM, Sam Tobin-Hochstadt wrote:
 >
 >> On Tue, Apr 6, 2010 at 9:27 AM, Matthias Felleisen <matthias@ccs.neu.edu=
 >
 >> wrote:
 >>>
 >>> This is the known unsoundness bug.
 >>
 >> I don't think this is unsoundness (depending on what we mean by
 >> unsoundness). =C2=A0There's no way to avoid such a result. =C2=A0Conside=
 r:
 >>
 >> #lang typed/scheme ;; m
 >> (define: (f [x : Number]) : Boolean #t)
 >> (provide f)
 >>
 >> #lang scheme
 >> (require m)
 >> (with-handlers ([exn:fail? (lambda _ #f)])
 >> =C2=A0(f 'nope))
 >>
 >> Produces #f with types, #t without them.
 >>
 >>>
 >>>
 >>> On Apr 5, 2010, at 11:28 PM, dvanhorn@ccs.neu.edu wrote:
 >>>
 >>>> A new problem report is waiting at
 >>>> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10845
 >>>>
 >>>> Reported by David Van Horn for release: 4.2.5.4-svn2apr2010
 >>>>
 >>>> *** Description:
 >>>> This has bitten me recently, and the more I think about it, the more
 >>>> this seems untenable.
 >>>>
 >>>> If I have a typed structure with a field of type Any, from an untyped
 >>>> context I can't put a higher-order value in the structure, then
 >>>> remove it and use it like a procedure (in fact, it is not a procedure
 >>>> any more!).
 >>>>
 >>>> This means, for example, that even something as simple as the
 >>>> "Pare" library cannot be implemented in Typed Scheme for
 >>>> general untyped consumption.
 >>>>
 >>>> #lang typed/scheme
 >>>> (define-struct: pare ([left : Any] [right : Any]))
 >>>> (provide (struct-out pare))
 >>>>
 >>>> #lang scheme
 >>>> (require "pare.ss")
 >>>> (procedure? (pare-left (make-pare (=CE=BB () 7) 8)))
 >>>>
 >>>> At first I thought this was just an inconvenience, but now I am
 >>>> beginning to think this is just plain wrong. =C2=A0Look -- my example
 >>>> program doesn't even blow up! =C2=A0If I swap out an *equivalent* type=
 d
 >>>> module for an untyped module, #t goes to #f. =C2=A0That's not good.
 >>>>
 >>>> *** How to repeat:
 >>>>
 >>>>
 >>>> *** Environment:
 >>>> macosx "Darwin doom 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov =C2=
 =A03
 >>>> 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386"
 >>>> (i386-macosx/3m)
 >>>> (get-display-depth) =3D 32
 >>>> Human Language: english
 >>>> (current-memory-use) 282509700
 >>>>
 >>>> Collections:
 >>>> (("/Users/dvanhorn/Library/PLT Scheme/4.2.5.4/collects"
 >>>> non-existent-path)
 >>>> ("/Applications/plt/collects" "2htdp" "afm" "algol60" "at-exp" "browse=
 r"
 >>>> "combinator-parser" "compiler" "config" "defaults" "deinprogramm"
 >>>> "drscheme"
 >>>> "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework"
 >>>> "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client=
 "
 >>>> "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons"
 >>>> "info-domain"
 >>>> "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib"
 >>>> "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools"
 >>>> "plai"
 >>>> "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader"
 >>>> "readline"
 >>>> "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit"
 >>>> "scribble"
 >>>> "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow"
 >>>> "srfi"
 >>>> "srpersist" "stepper" "string-constants" "swindle" "syntax"
 >>>> "syntax-color"
 >>>> "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page"
 >>>> "texpict"
 >>>> "trace" "typed" "typed-!
 >>>> scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
 >>>> Computer Language: (("Determine language from source") (#(#t write
 >>>> mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
 >>>>
 >>>
 >>>
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Christos Dimoulas <chrdimo@ccs.neu.edu>,
        David Van Horn <dvanhorn@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10845: Typed Scheme: untyped higher-order values  and typed Any structures
Date: Tue, 6 Apr 2010 10:44:39 -0400

 I asked Christos to look into something operational that also covers =20
 mutation nicely. We'll see.
 
 
 
 On Apr 6, 2010, at 10:39 AM, Robby Findler wrote:
 
 > I agree that we seem to have reached the limit of 'contracts are
 > projections' but I wonder if there is something else simple that is
 > similar that we should have been thinking about all along...
 >
 > Robby
 >
 > On Tue, Apr 6, 2010 at 9:05 AM, Matthias Felleisen =
 <matthias@ccs.neu.edu=20
 > > wrote:
 >>
 >> What I meant was this:
 >>
 >>  if you allow arbitrary manipulation of Any in Dave's example,
 >>  you get an unsound system. But I am no longer sure that this
 >>  is so.
 >>
 >> ;; ---
 >>
 >> The issue of contracts vs non-contracts (types are irrelevant here)
 >> and turning contract failures into recoverable exceptions is =20
 >> separate.
 >>
 >> Robby and I went through this and I don't know what to do. It is
 >> just another indication that 'contracts are projections' is a
 >> mathematical naivete just like the Scott-Plotkin-Milner quest for
 >> full abstraction. (Perhaps it's as useful as Newtonian mechanics,
 >> except that we have hit the lightspeed limit faster than physics :-)
 >>
 >> -- Matthias
 >>
 >>
 >>
 >>
 >>
 >> On Apr 6, 2010, at 9:51 AM, Sam Tobin-Hochstadt wrote:
 >>
 >>> On Tue, Apr 6, 2010 at 9:27 AM, Matthias Felleisen =
 <matthias@ccs.neu.edu=20
 >>> >
 >>> wrote:
 >>>>
 >>>> This is the known unsoundness bug.
 >>>
 >>> I don't think this is unsoundness (depending on what we mean by
 >>> unsoundness).  There's no way to avoid such a result.  Consider:
 >>>
 >>> #lang typed/scheme ;; m
 >>> (define: (f [x : Number]) : Boolean #t)
 >>> (provide f)
 >>>
 >>> #lang scheme
 >>> (require m)
 >>> (with-handlers ([exn:fail? (lambda _ #f)])
 >>>  (f 'nope))
 >>>
 >>> Produces #f with types, #t without them.
 >>>
 >>>>
 >>>>
 >>>> On Apr 5, 2010, at 11:28 PM, dvanhorn@ccs.neu.edu wrote:
 >>>>
 >>>>> A new problem report is waiting at
 >>>>>  http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10845
 >>>>>
 >>>>> Reported by David Van Horn for release: 4.2.5.4-svn2apr2010
 >>>>>
 >>>>> *** Description:
 >>>>> This has bitten me recently, and the more I think about it, the =20=
 
 >>>>> more
 >>>>> this seems untenable.
 >>>>>
 >>>>> If I have a typed structure with a field of type Any, from an =20
 >>>>> untyped
 >>>>> context I can't put a higher-order value in the structure, then
 >>>>> remove it and use it like a procedure (in fact, it is not a =20
 >>>>> procedure
 >>>>> any more!).
 >>>>>
 >>>>> This means, for example, that even something as simple as the
 >>>>> "Pare" library cannot be implemented in Typed Scheme for
 >>>>> general untyped consumption.
 >>>>>
 >>>>> #lang typed/scheme
 >>>>> (define-struct: pare ([left : Any] [right : Any]))
 >>>>> (provide (struct-out pare))
 >>>>>
 >>>>> #lang scheme
 >>>>> (require "pare.ss")
 >>>>> (procedure? (pare-left (make-pare (=CE=BB () 7) 8)))
 >>>>>
 >>>>> At first I thought this was just an inconvenience, but now I am
 >>>>> beginning to think this is just plain wrong.  Look -- my example
 >>>>> program doesn't even blow up!  If I swap out an *equivalent* typed
 >>>>> module for an untyped module, #t goes to #f.  That's not good.
 >>>>>
 >>>>> *** How to repeat:
 >>>>>
 >>>>>
 >>>>> *** Environment:
 >>>>> macosx "Darwin doom 10.2.0 Darwin Kernel Version 10.2.0: Tue =20
 >>>>> Nov  3
 >>>>> 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386"
 >>>>> (i386-macosx/3m)
 >>>>> (get-display-depth) =3D 32
 >>>>> Human Language: english
 >>>>> (current-memory-use) 282509700
 >>>>>
 >>>>> Collections:
 >>>>> (("/Users/dvanhorn/Library/PLT Scheme/4.2.5.4/collects"
 >>>>> non-existent-path)
 >>>>> ("/Applications/plt/collects" "2htdp" "afm" "algol60" "at-exp" =20
 >>>>> "browser"
 >>>>> "combinator-parser" "compiler" "config" "defaults" "deinprogramm"
 >>>>> "drscheme"
 >>>>> "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" =20
 >>>>> "framework"
 >>>>> "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-=20=
 
 >>>>> client"
 >>>>> "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons"
 >>>>> "info-domain"
 >>>>> "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" =20
 >>>>> "mrlib"
 >>>>> "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-=20
 >>>>> tools"
 >>>>> "plai"
 >>>>> "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader"
 >>>>> "readline"
 >>>>> "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit"
 >>>>> "scribble"
 >>>>> "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" =20
 >>>>> "slideshow"
 >>>>> "srfi"
 >>>>> "srpersist" "stepper" "string-constants" "swindle" "syntax"
 >>>>> "syntax-color"
 >>>>> "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page"
 >>>>> "texpict"
 >>>>> "trace" "typed" "typed-!
 >>>>> scheme" "unstable" "version" "waterworld" "web-server" "wxme" =20
 >>>>> "xml"))
 >>>>> Computer Language: (("Determine language from source") (#(#t write
 >>>>> mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
 >>>>>
 >>>>
 >>>>
 >>>
 >>>
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>
 >>
 

Responsible changed from "nobody" to "samth" by samth at Thu, 19 Aug 2010 11:27:53 -0400
Reason>>> tr



State changed from "open" to "closed" by samth at Thu, 25 Aug 2011 12:29:36 -0400
Reason>>> research not bug

