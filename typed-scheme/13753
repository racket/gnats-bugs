From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed May 15 12:31:07 2013
Received: from mail-oa0-f52.google.com (mail-oa0-f52.google.com [209.85.219.52])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r4FGV4Ra011627
	for <bugs@bugs.plt-scheme.org>; Wed, 15 May 2013 12:31:04 -0400
Message-Id: <201305151624.r4FGOYfl011419@champlain.ccs.neu.edu>
Date: Wed, 15 May 2013 12:24:34 -0400
From: asumu@ccs.neu.edu
To: bugs@racket-lang.org
Subject: TR: untyped macros can break typed code by setting ignore property

>Number:         13753
>Category:       typed-scheme
>Synopsis:       TR: untyped macros can break typed code by setting ignore property
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed May 15 12:32:01 -0400 2013
>Last-Modified:  Mon May 20 19:48:02 -0400 2013
>Originator:     Asumu Takikawa
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4.10--2013-05-14(efb88770/d)
>Environment:
unix "Linux willamette 3.2.0-2-amd64 #1 SMP Mon May 21 17:45:41 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 460604892
Links: (links) = ("pict-utils" "x11-racket" "rwind" "drracket-vim-tool" "tr-both"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/lang-slide> #<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/sweet-racket> #<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/taglib> #<path:/home/asumu/code/contract-repl>); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 Package[*=auto]    Checksum                                    Source
 contract-repl      #f                                          (link /home/asumu/code/contract-repl)
 lang-slide         40f30a8ce128493c887dc0c0bb0798fab6514837    (pns lang-slide)
 taglib             305a3ca74c2437e2bf6acabd2d130c0b0e59e304    (catalog taglib)
User-specific, version-specific (5.3.4.10):
 [none]



Collections:
("/home/asumu/plt/racket-git/add-on/5.3.4.10/collects"
 ("info-domain"))
("/home/asumu/plt/racket-git/collects"
 ("graphics" "future-visualizer" "frtime" "framework" "make" "sgl" "0001-Remove-duplicate-non-terminals-in-define-extended-la.patch" "waterworld" "launcher" "compiler" "planet2" "mred" "srfi" "setup" "wxme" "honu" "mrlib" "scriblib" "r5rs" "trace" "info-domain" "typed-racket" "racket" "net" "file" "slideshow" "string-constants" "racklog" "openssl" "macro-debugger" "xml" "combinator-parser" "foo2.gif" "mysterx" "html" "drscheme" "at-exp" "hierlist" "profile" "icons" "sirmail" "readline" "config" "syntax" "scribble" "texpict" "mzlib" "realm" "math" "typed" "web-server" "plai" "handin-client" "rnrs" "eopl" "drracket" "handin-server" "planet" "syntax-color" "repo-time-stamp" "test-engine" "games" "picturing-programs" "ffi" "xrepl" "tex2page" "images" "errortrace" "json" "foo.gif" "data" "unstable" "NormalizationTest.txt" "r6rs" "browser" "2htdp" "parser-tools" "slatex" "scheme" "compatibility" "algol60" "scribblings" "pkg" "stepper" "lazy" "rackunit" "gui-debugger" "plot" "help"!
  "pict" "meta" "redex" "version" "defaults" "s-exp" "test-box-recovery" "srpersist" "tests" "swindle" "mzscheme" "guibuilder" "deinprogramm" "raco" "preprocessor" "typed-scheme" "db" "embedded-gui" "lang" "dynext" "reader" ".gitignore" "htdp" "schemeunit" "teachpack" "mzcom" "datalog"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Consider the following example:

#lang racket

(module untyped racket
  (require (for-syntax syntax/parse))
  (provide m)

  (define-syntax (m stx)
    (syntax-parse stx
      [(_ x)
       (syntax-property #'(set! x "foo")
                        'typechecker:ignore #t)])))

(module typed typed/racket
  (require (submod ".." untyped))
  (: x Integer)
  (define x 3)
  (m x)
  (* 5.3 x))

(require (submod "." typed))

The untyped code has "guessed" the 'typechecker:ignore property and can now
inject arbitrary code into the typed module without type-checking.

Maybe a solution would be to use an uninterned property name in TR.
(this seems safe assuming that any functions that set the property on syntax
 are kept private to TR internal modules)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Asumu Takikawa <asumu@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13753: TR: untyped macros can break typed code
 by setting ignore property
Date: Wed, 15 May 2013 09:42:37 -0700

 What is the attack vector that we are trying to prevent against? What
 about untyped code which does (require typed-racket/typecheck/utils)
 or something? Or are we saying that if you do that then we provide no
 guarentees?
 
 On Wed, May 15, 2013 at 9:32 AM,  <asumu@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13753
 >
 > Reported by Asumu Takikawa for release: 5.3.4.10--2013-05-14(efb88770/d)
 >
 > *** Description:
 > Consider the following example:
 >
 > #lang racket
 >
 > (module untyped racket
 >   (require (for-syntax syntax/parse))
 >   (provide m)
 >
 >   (define-syntax (m stx)
 >     (syntax-parse stx
 >       [(_ x)
 >        (syntax-property #'(set! x "foo")
 >                         'typechecker:ignore #t)])))
 >
 > (module typed typed/racket
 >   (require (submod ".." untyped))
 >   (: x Integer)
 >   (define x 3)
 >   (m x)
 >   (* 5.3 x))
 >
 > (require (submod "." typed))
 >
 > The untyped code has "guessed" the 'typechecker:ignore property and can now
 > inject arbitrary code into the typed module without type-checking.
 >
 > Maybe a solution would be to use an uninterned property name in TR.
 > (this seems safe assuming that any functions that set the property on syntax
 >  are kept private to TR internal modules)
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux willamette 3.2.0-2-amd64 #1 SMP Mon May 21 17:45:41 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 460604892
 > Links: (links) = ("pict-utils" "x11-racket" "rwind" "drracket-vim-tool" "tr-both"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/lang-slide> #<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/sweet-racket> #<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/taglib> #<path:/home/asumu/code/contract-repl>); (links #:user? #f #:root? #t) = ()
 > raco pkg (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  Package[*=auto]    Checksum                                    Source
 >  contract-repl      #f                                          (link /home/asumu/code/contract-repl)
 >  lang-slide         40f30a8ce128493c887dc0c0bb0798fab6514837    (pns lang-slide)
 >  taglib             305a3ca74c2437e2bf6acabd2d130c0b0e59e304    (catalog taglib)
 > User-specific, version-specific (5.3.4.10):
 >  [none]
 >
 >
 >
 > Collections:
 > ("/home/asumu/plt/racket-git/add-on/5.3.4.10/collects"
 >  ("info-domain"))
 > ("/home/asumu/plt/racket-git/collects"
 >  ("graphics" "future-visualizer" "frtime" "framework" "make" "sgl" "0001-Remove-duplicate-non-terminals-in-define-extended-la.patch" "waterworld" "launcher" "compiler" "planet2" "mred" "srfi" "setup" "wxme" "honu" "mrlib" "scriblib" "r5rs" "trace" "info-domain" "typed-racket" "racket" "net" "file" "slideshow" "string-constants" "racklog" "openssl" "macro-debugger" "xml" "combinator-parser" "foo2.gif" "mysterx" "html" "drscheme" "at-exp" "hierlist" "profile" "icons" "sirmail" "readline" "config" "syntax" "scribble" "texpict" "mzlib" "realm" "math" "typed" "web-server" "plai" "handin-client" "rnrs" "eopl" "drracket" "handin-server" "planet" "syntax-color" "repo-time-stamp" "test-engine" "games" "picturing-programs" "ffi" "xrepl" "tex2page" "images" "errortrace" "json" "foo.gif" "data" "unstable" "NormalizationTest.txt" "r6rs" "browser" "2htdp" "parser-tools" "slatex" "scheme" "compatibility" "algol60" "scribblings" "pkg" "stepper" "lazy" "rackunit" "gui-debugger" "plot" "help"!
 >   "pict" "meta" "redex" "version" "defaults" "s-exp" "test-box-recovery" "srpersist" "tests" "swindle" "mzscheme" "guibuilder" "deinprogramm" "raco" "preprocessor" "typed-scheme" "db" "embedded-gui" "lang" "dynext" "reader" ".gitignore" "htdp" "schemeunit" "teachpack" "mzcom" "datalog"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: asumu@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13753: TR: untyped macros can break typed code
 by setting ignore property
Date: Wed, 15 May 2013 12:53:58 -0400

 IIRC, an uninterned symbol property can still be copied using 
 datum->syntax. A more secure solution might be to turn 
 'typechecker:ignore' into a procedure (equivalent in behavior to 
 'values') and protect ('syntax-protect') the application of 
 'typechecker:ignore' to ignorable expressions. That way ignorability 
 can't be extracted without getting tainted. That would only work for 
 expressions; it might take some creativity to extend it to definitions, 
 requires, etc, if that's necessary.
 
 Ryan
 
 
 On 05/15/2013 12:32 PM, asumu@ccs.neu.edu wrote:
 > A new problem report is waiting at
 >    http://bugs.racket-lang.org/query/?cmd=view&pr=13753
 >
 > Reported by Asumu Takikawa for release: 5.3.4.10--2013-05-14(efb88770/d)
 >
 > *** Description:
 > Consider the following example:
 >
 > #lang racket
 >
 > (module untyped racket
 >    (require (for-syntax syntax/parse))
 >    (provide m)
 >
 >    (define-syntax (m stx)
 >      (syntax-parse stx
 >        [(_ x)
 >         (syntax-property #'(set! x "foo")
 >                          'typechecker:ignore #t)])))
 >
 > (module typed typed/racket
 >    (require (submod ".." untyped))
 >    (: x Integer)
 >    (define x 3)
 >    (m x)
 >    (* 5.3 x))
 >
 > (require (submod "." typed))
 >
 > The untyped code has "guessed" the 'typechecker:ignore property and can now
 > inject arbitrary code into the typed module without type-checking.
 >
 > Maybe a solution would be to use an uninterned property name in TR.
 > (this seems safe assuming that any functions that set the property on syntax
 >   are kept private to TR internal modules)
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux willamette 3.2.0-2-amd64 #1 SMP Mon May 21 17:45:41 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 460604892
 > Links: (links) = ("pict-utils" "x11-racket" "rwind" "drracket-vim-tool" "tr-both"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/lang-slide> #<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/sweet-racket> #<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/taglib> #<path:/home/asumu/code/contract-repl>); (links #:user? #f #:root? #t) = ()
 > raco pkg (show):
 > Installation-wide:
 >   [none]
 > User-specific, all-version:
 >   Package[*=auto]    Checksum                                    Source
 >   contract-repl      #f                                          (link /home/asumu/code/contract-repl)
 >   lang-slide         40f30a8ce128493c887dc0c0bb0798fab6514837    (pns lang-slide)
 >   taglib             305a3ca74c2437e2bf6acabd2d130c0b0e59e304    (catalog taglib)
 > User-specific, version-specific (5.3.4.10):
 >   [none]
 >
 >
 >
 > Collections:
 > ("/home/asumu/plt/racket-git/add-on/5.3.4.10/collects"
 >   ("info-domain"))
 > ("/home/asumu/plt/racket-git/collects"
 >   ("graphics" "future-visualizer" "frtime" "framework" "make" "sgl" "0001-Remove-duplicate-non-terminals-in-define-extended-la.patch" "waterworld" "launcher" "compiler" "planet2" "mred" "srfi" "setup" "wxme" "honu" "mrlib" "scriblib" "r5rs" "trace" "info-domain" "typed-racket" "racket" "net" "file" "slideshow" "string-constants" "racklog" "openssl" "macro-debugger" "xml" "combinator-parser" "foo2.gif" "mysterx" "html" "drscheme" "at-exp" "hierlist" "profile" "icons" "sirmail" "readline" "config" "syntax" "scribble" "texpict" "mzlib" "realm" "math" "typed" "web-server" "plai" "handin-client" "rnrs" "eopl" "drracket" "handin-server" "planet" "syntax-color" "repo-time-stamp" "test-engine" "games" "picturing-programs" "ffi" "xrepl" "tex2page" "images" "errortrace" "json" "foo.gif" "data" "unstable" "NormalizationTest.txt" "r6rs" "browser" "2htdp" "parser-tools" "slatex" "scheme" "compatibility" "algol60" "scribblings" "pkg" "stepper" "lazy" "rackunit" "gui-debugger" "plot" "hel
  p"!
 >    "pict" "meta" "redex" "version" "defaults" "s-exp" "test-box-recovery" "srpersist" "tests" "swindle" "mzscheme" "guibuilder" "deinprogramm" "raco" "preprocessor" "typed-scheme" "db" "embedded-gui" "lang" "dynext" "reader" ".gitignore" "htdp" "schemeunit" "teachpack" "mzcom" "datalog"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13753: TR: untyped macros can break typed code
 by setting ignore property
Date: Wed, 15 May 2013 10:10:47 -0700

 I agree with Eric here.  If you use typed racket's internals, you can
 break typed racket.  This is unfixable without much bigger changes to
 Racket, and so I don't think it's worth worrying about.
 
 Sam
 
 On Wed, May 15, 2013 at 9:42 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > What is the attack vector that we are trying to prevent against? What
 > about untyped code which does (require typed-racket/typecheck/utils)
 > or something? Or are we saying that if you do that then we provide no
 > guarentees?
 >
 > On Wed, May 15, 2013 at 9:32 AM,  <asumu@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13753
 >>
 >> Reported by Asumu Takikawa for release: 5.3.4.10--2013-05-14(efb88770/d)
 >>
 >> *** Description:
 >> Consider the following example:
 >>
 >> #lang racket
 >>
 >> (module untyped racket
 >>   (require (for-syntax syntax/parse))
 >>   (provide m)
 >>
 >>   (define-syntax (m stx)
 >>     (syntax-parse stx
 >>       [(_ x)
 >>        (syntax-property #'(set! x "foo")
 >>                         'typechecker:ignore #t)])))
 >>
 >> (module typed typed/racket
 >>   (require (submod ".." untyped))
 >>   (: x Integer)
 >>   (define x 3)
 >>   (m x)
 >>   (* 5.3 x))
 >>
 >> (require (submod "." typed))
 >>
 >> The untyped code has "guessed" the 'typechecker:ignore property and can now
 >> inject arbitrary code into the typed module without type-checking.
 >>
 >> Maybe a solution would be to use an uninterned property name in TR.
 >> (this seems safe assuming that any functions that set the property on syntax
 >>  are kept private to TR internal modules)
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux willamette 3.2.0-2-amd64 #1 SMP Mon May 21 17:45:41 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 460604892
 >> Links: (links) = ("pict-utils" "x11-racket" "rwind" "drracket-vim-tool" "tr-both"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/lang-slide> #<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/sweet-racket> #<path:/home/asumu/plt/racket-git/add-on/pkgs/installed/taglib> #<path:/home/asumu/code/contract-repl>); (links #:user? #f #:root? #t) = ()
 >> raco pkg (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  Package[*=auto]    Checksum                                    Source
 >>  contract-repl      #f                                          (link /home/asumu/code/contract-repl)
 >>  lang-slide         40f30a8ce128493c887dc0c0bb0798fab6514837    (pns lang-slide)
 >>  taglib             305a3ca74c2437e2bf6acabd2d130c0b0e59e304    (catalog taglib)
 >> User-specific, version-specific (5.3.4.10):
 >>  [none]
 >>
 >>
 >>
 >> Collections:
 >> ("/home/asumu/plt/racket-git/add-on/5.3.4.10/collects"
 >>  ("info-domain"))
 >> ("/home/asumu/plt/racket-git/collects"
 >>  ("graphics" "future-visualizer" "frtime" "framework" "make" "sgl" "0001-Remove-duplicate-non-terminals-in-define-extended-la.patch" "waterworld" "launcher" "compiler" "planet2" "mred" "srfi" "setup" "wxme" "honu" "mrlib" "scriblib" "r5rs" "trace" "info-domain" "typed-racket" "racket" "net" "file" "slideshow" "string-constants" "racklog" "openssl" "macro-debugger" "xml" "combinator-parser" "foo2.gif" "mysterx" "html" "drscheme" "at-exp" "hierlist" "profile" "icons" "sirmail" "readline" "config" "syntax" "scribble" "texpict" "mzlib" "realm" "math" "typed" "web-server" "plai" "handin-client" "rnrs" "eopl" "drracket" "handin-server" "planet" "syntax-color" "repo-time-stamp" "test-engine" "games" "picturing-programs" "ffi" "xrepl" "tex2page" "images" "errortrace" "json" "foo.gif" "data" "unstable" "NormalizationTest.txt" "r6rs" "browser" "2htdp" "parser-tools" "slatex" "scheme" "compatibility" "algol60" "scribblings" "pkg" "stepper" "lazy" "rackunit" "gui-debugger" "plot" "help"!
 >>   "pict" "meta" "redex" "version" "defaults" "s-exp" "test-box-recovery" "srpersist" "tests" "swindle" "mzscheme" "guibuilder" "deinprogramm" "raco" "preprocessor" "typed-scheme" "db" "embedded-gui" "lang" "dynext" "reader" ".gitignore" "htdp" "schemeunit" "teachpack" "mzcom" "datalog"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13753: TR: untyped macros can break typed code
 by setting ignore property
Date: Wed, 15 May 2013 13:18:43 -0400

 On 2013-05-15 10:10:47 -0700, Sam Tobin-Hochstadt wrote:
 > I agree with Eric here.  If you use typed racket's internals, you can
 > break typed racket.
 
 I don't see how this is using TR's internals. It's just attaching a
 property using some symbol (not exported from TR, not protected in any
 way) that happens to be used by TR.
 
 OTOH, there are no guarantees if you require a private module because in
 principle you shouldn't be able to do that anyway.
 
 Cheers,
 Asumu
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13753: TR: untyped macros can break typed code
 by setting ignore property
Date: Wed, 15 May 2013 13:21:35 -0400

 On 2013-05-15 12:53:58 -0400, Ryan Culpepper wrote:
 > IIRC, an uninterned symbol property can still be copied using
 > datum->syntax.
 
 Even if the symbol is unexported? Or do you mean that you can extract
 the symbol by looking at the macro expansion?
 
 > That would only work for expressions; it might take some creativity
 > to extend it to definitions, requires, etc, if that's necessary.
 
 I think it would be necessary for definitions, at least.
 
 Cheers,
 Asumu

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13753: TR: untyped macros can break typed code by setting ignore property
Date: Tue, 21 May 2013 02:47:56 +0300

 I am in agreement with Asumu here that this specific problem deserves some minor attention, especially if a solution almost exists. 
 
 But I also agree with Sam's bigger point, namely, that the general problem is currently not worth our time. 
 
 
 On May 15, 2013, at 8:18 PM, Asumu Takikawa wrote:
 
 > On 2013-05-15 10:10:47 -0700, Sam Tobin-Hochstadt wrote:
 >> I agree with Eric here.  If you use typed racket's internals, you can
 >> break typed racket.
 > 
 > I don't see how this is using TR's internals. It's just attaching a
 > property using some symbol (not exported from TR, not protected in any
 > way) that happens to be used by TR.
 > 
 > OTOH, there are no guarantees if you require a private module because in
 > principle you shouldn't be able to do that anyway.
 > 
 > Cheers,
 > Asumu
 
 
