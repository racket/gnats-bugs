From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Feb  6 01:00:24 2010
Received: from mail-yw0-f176.google.com (mail-yw0-f176.google.com [209.85.211.176])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o1660NlI003626
	for <bugs@bugs.plt-scheme.org>; Sat, 6 Feb 2010 01:00:23 -0500
Message-Id: <201002060600.o1660HqA003616@champlain.ccs.neu.edu>
Date: Sat, 6 Feb 2010 01:00:17 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: TS: dirty hack

>Number:         10737
>Category:       typed-scheme
>Synopsis:       TS: dirty hack
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Feb 06 01:04:01 -0500 2010
>Closed-Date:    Wed Aug 24 15:58:36 -0400 2011
>Last-Modified:  Wed Aug 24 15:58:36 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.4
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 191770704

Collections:
(("/home/eli/.plt-scheme/4.2.4/collects" "info-domain" "pl") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "framework" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "unstable" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
This deserves some kind of an award.  Providing `number?' from TS as a rename of
`real?' broke my class code in several ways.  I've spent two hours trying all kinds
of counter hacks, but nothing works.  This is a nightmare.
>How-To-Repeat:
#lang typed-scheme
number?
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10737: TS: dirty hack
Date: Mon, 8 Feb 2010 11:53:51 -0500

 On Sat, Feb 6, 2010 at 1:04 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10737
 >
 > Reported by Eli Barzilay for release: 4.2.4
 >
 > *** Description:
 > This deserves some kind of an award. =A0Providing `number?' from TS as a =
 rename of
 > `real?' broke my class code in several ways. =A0I've spent two hours tryi=
 ng all kinds
 > of counter hacks, but nothing works. =A0This is a nightmare.
 >
 > *** How to repeat:
 > #lang typed-scheme
 > number?
 
 First, insulting bug reports are less likely to attract positive
 attention from the maintainer of the software.
 
 Second, it should be really easy to fix this - just provide the actual
 `number?' in your course language.
 
 Third, the problem here is that I made a serious error when initially
 creating the type environment.  I made the `Number' type mean `Real'
 in some places (as in, it was an acceptable input to `>'), but
 `Complex' in other cases (as in, its predicate was `number?').  The
 fix I came up with was as follows:
 
 1. Create a new version of Typed Scheme, with a saner location, at
 `typed/scheme' and `typed/scheme/base', which has the "correct" types.
 2. Change the meaning of `Number' to `Real' everywhere in
 `typed-scheme'.  I chose this since complex numbers are not as
 well-supported in Typed Scheme, and so I expected that this would
 break less code.
 3. Then change the meaning of `number?' to match the new meaning of
 `Number', to avoid breaking code that assumed they were related (see
 discussion on `integer?' vs `Integer').
 
 Because I screwed this up at the beginning, there isn't a perfect
 solution here, but I'm open to suggestions, and since you're the
 biggest customer, I'm happy to make a different choice if one would be
 better for you.
 --=20
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10737: TS: dirty hack
Date: Mon, 8 Feb 2010 11:06:56 -0600

 Hi Sam: is it important, in this case, to have backwards compatibility?
 
 Robby
 
 On Mon, Feb 8, 2010 at 10:53 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wr=
 ote:
 > On Sat, Feb 6, 2010 at 1:04 AM, =C2=A0<eli@barzilay.org> wrote:
 >> A new problem report is waiting at
 >> =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10737
 >>
 >> Reported by Eli Barzilay for release: 4.2.4
 >>
 >> *** Description:
 >> This deserves some kind of an award. =C2=A0Providing `number?' from TS a=
 s a rename of
 >> `real?' broke my class code in several ways. =C2=A0I've spent two hours =
 trying all kinds
 >> of counter hacks, but nothing works. =C2=A0This is a nightmare.
 >>
 >> *** How to repeat:
 >> #lang typed-scheme
 >> number?
 >
 > First, insulting bug reports are less likely to attract positive
 > attention from the maintainer of the software.
 >
 > Second, it should be really easy to fix this - just provide the actual
 > `number?' in your course language.
 >
 > Third, the problem here is that I made a serious error when initially
 > creating the type environment. =C2=A0I made the `Number' type mean `Real'
 > in some places (as in, it was an acceptable input to `>'), but
 > `Complex' in other cases (as in, its predicate was `number?'). =C2=A0The
 > fix I came up with was as follows:
 >
 > 1. Create a new version of Typed Scheme, with a saner location, at
 > `typed/scheme' and `typed/scheme/base', which has the "correct" types.
 > 2. Change the meaning of `Number' to `Real' everywhere in
 > `typed-scheme'. =C2=A0I chose this since complex numbers are not as
 > well-supported in Typed Scheme, and so I expected that this would
 > break less code.
 > 3. Then change the meaning of `number?' to match the new meaning of
 > `Number', to avoid breaking code that assumed they were related (see
 > discussion on `integer?' vs `Integer').
 >
 > Because I screwed this up at the beginning, there isn't a perfect
 > solution here, but I'm open to suggestions, and since you're the
 > biggest customer, I'm happy to make a different choice if one would be
 > better for you.
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10737: TS: dirty hack
Date: Mon, 8 Feb 2010 12:09:19 -0500

 On Mon, Feb 8, 2010 at 12:06 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Hi Sam: is it important, in this case, to have backwards compatibility?
 
 In general, I'd like to make life easier for anyone who's done me the
 favor of writing programs in Typed Scheme already, so I'd prefer not
 to break their working code.  Since I had, at the time, already
 planned to move to a different way of referring to the language, I
 didn't see the harm in not breaking people's code any more than
 necessary.
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10737: TS: dirty hack
Date: Mon, 8 Feb 2010 11:11:51 -0600

 On Mon, Feb 8, 2010 at 11:09 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wr=
 ote:
 > On Mon, Feb 8, 2010 at 12:06 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> Hi Sam: is it important, in this case, to have backwards compatibility?
 >
 > In general, I'd like to make life easier for anyone who's done me the
 > favor of writing programs in Typed Scheme already, so I'd prefer not
 > to break their working code. =C2=A0Since I had, at the time, already
 > planned to move to a different way of referring to the language, I
 > didn't see the harm in not breaking people's code any more than
 > necessary.
 
 Another, related question that comes to mind: is changing the meaning
 of the number? predicate more or less likely to break code than
 changing the meaning of the Number type?
 
 You have most of that code, right? Another alternative is to port it
 yourself (or make that offer for others' code).
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10737: TS: dirty hack
Date: Mon, 8 Feb 2010 12:19:58 -0500

 On Feb  8, Sam Tobin-Hochstadt wrote:
 > First, insulting bug reports are less likely to attract positive
 > attention from the maintainer of the software.
 
 Sorry, that was after a few hours of fighting with what should have
 had no work at all (=> I thought that there were no 4.2.4 changes that
 would be significant, and that's what I said in class).  That report
 has marked the beginning of a weekend lost for dealing with it, and
 I'm still not done.
 
 
 > Second, it should be really easy to fix this - just provide the actual
 > `number?' in your course language.
 
 I now think that this wasn't the actual problem I'm running with --
 I think that it's the new `typed-scheme/private/base-env-numeric' file
 that I was missing.  In any case, I can't tell now since I'm dealing
 with the first/rest/second/... problem.
 
 
 > Third, the problem here is that I made a serious error when
 > initially creating the type environment.  I made the `Number' type
 > mean `Real' in some places (as in, it was an acceptable input to
 > `>'), but `Complex' in other cases (as in, its predicate was
 > `number?').  The fix I came up with was as follows:
 > 
 > 1. Create a new version of Typed Scheme, with a saner location, at
 > `typed/scheme' and `typed/scheme/base', which has the "correct" types.
 > 2. Change the meaning of `Number' to `Real' everywhere in
 > `typed-scheme'.  I chose this since complex numbers are not as
 > well-supported in Typed Scheme, and so I expected that this would
 > break less code.
 > 3. Then change the meaning of `number?' to match the new meaning of
 > `Number', to avoid breaking code that assumed they were related (see
 > discussion on `integer?' vs `Integer').
 > 
 > Because I screwed this up at the beginning, there isn't a perfect
 > solution here, but I'm open to suggestions, and since you're the
 > biggest customer, I'm happy to make a different choice if one would be
 > better for you.
 
 I agree with Robby that backward incompatibility should be less
 important than getting the types right (TS looks more experimental,
 still, than I had thought).  But it would be nice to get a warning
 when there are significant changes.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!


State changed from "open" to "closed" by samth at Wed, 24 Aug 2011 15:58:36 -0400
Reason>>> not anymore

