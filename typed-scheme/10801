From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Mar  3 12:07:53 2010
Received: from mail-yw0-f174.google.com (mail-yw0-f174.google.com [209.85.211.174])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o23H7m55010439
	for <bugs@bugs.plt-scheme.org>; Wed, 3 Mar 2010 12:07:49 -0500
Message-Id: <201003031707.o23H7k3l010431@champlain.ccs.neu.edu>
Date: Wed, 3 Mar 2010 12:07:46 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: Bad typecheck error

>Number:         10801
>Category:       typed-scheme
>Synopsis:       Bad typecheck error
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Mar 03 12:08:01 -0500 2010
>Last-Modified:  Wed Mar 03 14:27:47 -0500 2010
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.4
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 223554864

Collections:
(("/home/eli/.plt-scheme/4.2.4/collects" "info-domain" "pl") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "framework" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "unstable" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
This produces the error below -- the second part of the error is correct (and
informative), but the first part looks very wrong.


. Type Checker: Polymorphic function member could not be applied to arguments:
Argument 1:
  Expected: a
  Given:    A
Argument 2:
  Expected: (Listof a)
  Given:    (Listof A)

Result type:     (U (Listof a) False)
Expected result: Boolean
 in: (member y (cdr r))
>How-To-Repeat:
#lang typed/scheme

(: precedes : (All (A) (A A (Listof A) -> Boolean)))
(define (precedes x y l)
  (let ([r (member x l)])
    (and r (member y (cdr r)))))
(precedes 1 2 '(1 2))
>Fix:
>Audit-Trail:
From: Carl Eastlund <cce@plt-scheme.org>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10801: Bad typecheck error
Date: Wed, 3 Mar 2010 12:27:09 -0500

 What's wrong with the error?  If member has the type (All (a) (a
 (Listof a) -> (U (Listof a) False))), this error message looks right
 to me.  Typed Scheme just hasn't guessed to instantiate the "a" of
 "member" with the "A" of "precedes".
 
 Carl Eastlund
 
 On Wed, Mar 3, 2010 at 12:08 PM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10801
 >
 > Reported by Eli Barzilay for release: 4.2.4
 >
 > *** Description:
 > This produces the error below -- the second part of the error is correct =
 (and
 > informative), but the first part looks very wrong.
 >
 >
 > . Type Checker: Polymorphic function member could not be applied to argum=
 ents:
 > Argument 1:
 > =A0Expected: a
 > =A0Given: =A0 =A0A
 > Argument 2:
 > =A0Expected: (Listof a)
 > =A0Given: =A0 =A0(Listof A)
 >
 > Result type: =A0 =A0 (U (Listof a) False)
 > Expected result: Boolean
 > =A0in: (member y (cdr r))
 >
 > *** How to repeat:
 > #lang typed/scheme
 >
 > (: precedes : (All (A) (A A (Listof A) -> Boolean)))
 > (define (precedes x y l)
 > =A0(let ([r (member x l)])
 > =A0 =A0(and r (member y (cdr r)))))
 > (precedes 1 2 '(1 2))
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10801: Bad typecheck error
Date: Wed, 3 Mar 2010 12:34:43 -0500

 It's Boolean vs (union False (Listof a)). As Sam always says, Scheme,  
 eh, Racket doesn't know booleans.
 
 
 On Mar 3, 2010, at 12:27 PM, Carl Eastlund wrote:
 
 > What's wrong with the error?  If member has the type (All (a) (a
 > (Listof a) -> (U (Listof a) False))), this error message looks right
 > to me.  Typed Scheme just hasn't guessed to instantiate the "a" of
 > "member" with the "A" of "precedes".
 >
 > Carl Eastlund
 >
 > On Wed, Mar 3, 2010 at 12:08 PM,  <eli@barzilay.org> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=10801
 >>
 >> Reported by Eli Barzilay for release: 4.2.4
 >>
 >> *** Description:
 >> This produces the error below -- the second part of the error is  
 >> correct (and
 >> informative), but the first part looks very wrong.
 >>
 >>
 >> . Type Checker: Polymorphic function member could not be applied to  
 >> arguments:
 >> Argument 1:
 >>  Expected: a
 >>  Given:    A
 >> Argument 2:
 >>  Expected: (Listof a)
 >>  Given:    (Listof A)
 >>
 >> Result type:     (U (Listof a) False)
 >> Expected result: Boolean
 >>  in: (member y (cdr r))
 >>
 >> *** How to repeat:
 >> #lang typed/scheme
 >>
 >> (: precedes : (All (A) (A A (Listof A) -> Boolean)))
 >> (define (precedes x y l)
 >>  (let ([r (member x l)])
 >>    (and r (member y (cdr r)))))
 >> (precedes 1 2 '(1 2))
 
From: Carl Eastlund <cce@plt-scheme.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10801: Bad typecheck error
Date: Wed, 3 Mar 2010 12:37:30 -0500

 Eli's error was about the first part of the error (a vs. A); he found
 the second part (Boolean vs (U ...)) informative.
 
 Carl Eastlund
 
 On Wed, Mar 3, 2010 at 12:34 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > It's Boolean vs (union False (Listof a)). As Sam always says, Scheme, eh,
 > Racket doesn't know booleans.
 >
 >
 > On Mar 3, 2010, at 12:27 PM, Carl Eastlund wrote:
 >
 >> What's wrong with the error? =A0If member has the type (All (a) (a
 >> (Listof a) -> (U (Listof a) False))), this error message looks right
 >> to me. =A0Typed Scheme just hasn't guessed to instantiate the "a" of
 >> "member" with the "A" of "precedes".
 >>
 >> Carl Eastlund
 >>
 >> On Wed, Mar 3, 2010 at 12:08 PM, =A0<eli@barzilay.org> wrote:
 >>>
 >>> A new problem report is waiting at
 >>> =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10801
 >>>
 >>> Reported by Eli Barzilay for release: 4.2.4
 >>>
 >>> *** Description:
 >>> This produces the error below -- the second part of the error is correc=
 t
 >>> (and
 >>> informative), but the first part looks very wrong.
 >>>
 >>>
 >>> . Type Checker: Polymorphic function member could not be applied to
 >>> arguments:
 >>> Argument 1:
 >>> =A0Expected: a
 >>> =A0Given: =A0 =A0A
 >>> Argument 2:
 >>> =A0Expected: (Listof a)
 >>> =A0Given: =A0 =A0(Listof A)
 >>>
 >>> Result type: =A0 =A0 (U (Listof a) False)
 >>> Expected result: Boolean
 >>> =A0in: (member y (cdr r))
 >>>
 >>> *** How to repeat:
 >>> #lang typed/scheme
 >>>
 >>> (: precedes : (All (A) (A A (Listof A) -> Boolean)))
 >>> (define (precedes x y l)
 >>> =A0(let ([r (member x l)])
 >>> =A0 (and r (member y (cdr r)))))
 >>> (precedes 1 2 '(1 2))
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10801: Bad typecheck error
Date: Wed, 3 Mar 2010 12:42:55 -0500

 Ah, it sure pays off to read the second line of his message. Mea culpa.
 
 
 On Mar 3, 2010, at 12:37 PM, Carl Eastlund wrote:
 
 > Eli's error was about the first part of the error (a vs. A); he found
 > the second part (Boolean vs (U ...)) informative.
 >
 > Carl Eastlund
 >
 > On Wed, Mar 3, 2010 at 12:34 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> It's Boolean vs (union False (Listof a)). As Sam always says,  
 >> Scheme, eh,
 >> Racket doesn't know booleans.
 >>
 >>
 >> On Mar 3, 2010, at 12:27 PM, Carl Eastlund wrote:
 >>
 >>> What's wrong with the error?  If member has the type (All (a) (a
 >>> (Listof a) -> (U (Listof a) False))), this error message looks right
 >>> to me.  Typed Scheme just hasn't guessed to instantiate the "a" of
 >>> "member" with the "A" of "precedes".
 >>>
 >>> Carl Eastlund
 >>>
 >>> On Wed, Mar 3, 2010 at 12:08 PM,  <eli@barzilay.org> wrote:
 >>>>
 >>>> A new problem report is waiting at
 >>>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=10801
 >>>>
 >>>> Reported by Eli Barzilay for release: 4.2.4
 >>>>
 >>>> *** Description:
 >>>> This produces the error below -- the second part of the error is  
 >>>> correct
 >>>> (and
 >>>> informative), but the first part looks very wrong.
 >>>>
 >>>>
 >>>> . Type Checker: Polymorphic function member could not be applied to
 >>>> arguments:
 >>>> Argument 1:
 >>>>  Expected: a
 >>>>  Given:    A
 >>>> Argument 2:
 >>>>  Expected: (Listof a)
 >>>>  Given:    (Listof A)
 >>>>
 >>>> Result type:     (U (Listof a) False)
 >>>> Expected result: Boolean
 >>>>  in: (member y (cdr r))
 >>>>
 >>>> *** How to repeat:
 >>>> #lang typed/scheme
 >>>>
 >>>> (: precedes : (All (A) (A A (Listof A) -> Boolean)))
 >>>> (define (precedes x y l)
 >>>>  (let ([r (member x l)])
 >>>>   (and r (member y (cdr r)))))
 >>>> (precedes 1 2 '(1 2))
 
From: Eli Barzilay <eli@barzilay.org>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10801: Bad typecheck error
Date: Wed, 3 Mar 2010 13:21:06 -0500

 On Mar  3, Carl Eastlund wrote:
 > What's wrong with the error=3F  If member has the type (All (a) (a
 > (Listof a) -> (U (Listof a) False))), this error message looks right
 > to me.  Typed Scheme just hasn't guessed to instantiate the "a" of
 > "member" with the "A" of "precedes".
 
 Reading through that error message, this part:
 
 > > Argument 1:
 > > =C2=A0Expected: a
 > > =C2=A0Given: =C2=A0 =C2=A0A
 > > Argument 2:
 > > =C2=A0Expected: (Listof a)
 > > =C2=A0Given: =C2=A0 =C2=A0(Listof A)
 
 looks suspicious because the expected/given types are obvious
 matches.  Even if I know where the `a' is coming from, it still
 doesn't explain why the two don't match.  As for the conclusion of
 that error message: "Polymorphic function member could not be applied
 to arguments", it is totally unhelpful.  To make this point more
 concrete, just use `a' in the code, and that error becomes:
 
   Argument 1:
     Expected: a
     Given:    a
   Argument 2:
     Expected: (Listof a)
     Given:    (Listof a)
 
 Now, looking again at the full error message, I think that the
 confusing part is the empty line -- it looked to me like *two* errors,
 one was something bogus about `member', and one about the result of
 the expression.  (There's no need to explain to me that it's the
 result of `member' that it's talking about -- it's still confusing.)
 
 So one way to make things better is to get rid of that empty line.
 But much more importantly, if there is a general type error around the
 use of `member', it would work much better to not tell me about all of
 the parts -- just the part that is really the error.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !

Responsible changed from "nobody" to "samth" by samth at Wed, 03 Mar 2010 14:27:47 -0500
Reason>>> ts

