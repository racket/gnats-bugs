From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Oct  5 11:16:00 2013
Received: from mail-ob0-f175.google.com (mail-ob0-f175.google.com [209.85.214.175])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id r95FFw3e008978
	for <bugs@bugs.plt-scheme.org>; Sat, 5 Oct 2013 11:15:58 -0400
Message-Id: <201310051515.r95FFrjg008954@winooski.ccs.neu.edu>
Date: Sat, 5 Oct 2013 11:15:53 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR cannot typecheck optional keyworded function correctly

>Number:         14077
>Category:       typed-scheme
>Synopsis:       TR cannot typecheck optional keyworded function correctly
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Oct 05 11:16:01 -0400 2013
>Last-Modified:  Wed Jan 22 21:44:01 -0500 2014
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
The following should typecheck but it doesn't.
>How-To-Repeat:
#lang racket

(module tr typed/racket

  #;
  (: foo (case-> (#:y Number -> Number)
                 (Number -> Number)))
  (: foo (Number -> Number))
  (define (foo [x 4] #:y [y 5])
    (+ x y)))
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14077: TR cannot typecheck optional keyworded
 function correctly
Date: Wed, 22 Jan 2014 21:41:50 -0500

 On 2013-10-05 11:16:02 -0400, eric.n.dobson@gmail.com wrote:
 > *** Description:
 > The following should typecheck but it doesn't.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (module tr typed/racket
 >
 >   #;
 >   (: foo (case-> (#:y Number -> Number)
 >                  (Number -> Number)))
 >   (: foo (Number -> Number))
 >   (define (foo [x 4] #:y [y 5])
 >     (+ x y)))
 
 BTW, this isn't documented anywhere but to make this typecheck you have
 to write the type like this:
 
   (: foo : (case-> ([#:y Number] -> Number)
                    (Number [#:y Number] -> Number)))
   (define (foo [x 4] #:y [y 5])
     (+ x y))
 
 Discovered this while wrestling with keyword types.
 
 Cheers,
 Asumu
