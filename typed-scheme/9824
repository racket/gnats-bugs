From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Oct 13 00:40:16 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.224])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m9D4eA9s014493
	for <bugs@bugs.plt-scheme.org>; Mon, 13 Oct 2008 00:40:10 -0400
Message-Id: <200810130440.m9D4e834014483@champlain.ccs.neu.edu>
Date: Mon, 13 Oct 2008 00:40:08 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: typed-scheme integers

>Number:         9824
>Category:       typed-scheme
>Synopsis:       typed-scheme integers
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Oct 13 00:44:01 -0400 2008
>Last-Modified:  Tue Oct 21 16:53:51 -0400 2008
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.1.1
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 150100696

Collections:
(("/home/eli/.plt-scheme/4.1.1.1/collects" "CSU660" "info-domain") ("/home/eli/src/plt660/collects" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "honu" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-coverage) (default) #() "#lang scheme\n"))
>Description:
`Integer' in typed-scheme include inexact ones
like 2.0.  Isn't it better to make it apply only
for exact integers?
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Cc: matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 00:59:29 -0400

 On Oct 13, eli@barzilay.org wrote:
 > `Integer' in typed-scheme include inexact ones
 > like 2.0.  Isn't it better to make it apply only
 > for exact integers?
 
 And BTW, I'm aware of the decision being
 
   make TS express most of MzScheme
     [For example, things like `modulo' are more common than things
     like `bitwise-and']
 
 vs
 
   make TS restricts code to a "good-code" subset
 
 
 which in this case happens to agree with
 
   make TS good enough to make it possible to optimize code
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Sam TH" <samth@plt-scheme.org>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 08:47:55 -0400

 Welcome to MzScheme v4.1.0.4 [3m], Copyright (c) 2004-2008 PLT Scheme Inc.
 > (integer? 2.0)
 #t
 
 `Integer' will continue to mean the same as `integer?'.
 
 On Mon, Oct 13, 2008 at 12:44 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=9824
 >
 > Reported by Eli Barzilay for release: 4.1.1.1
 >
 > *** Description:
 > `Integer' in typed-scheme include inexact ones
 > like 2.0.  Isn't it better to make it apply only
 > for exact integers?
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux winooski.ccs.neu.edu 2.6.23.15-80.fc7 #1 SMP Sun Feb 10 16:52:18 EST 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
 > Human Language: english
 > (current-memory-use) 150100696
 >
 > Collections:
 > (("/home/eli/.plt-scheme/4.1.1.1/collects" "CSU660" "info-domain") ("/home/eli/src/plt660/collects" "icons" "ffi" "mred" "dynext" "mzscheme" ".svn" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "guibuilder" "scheme" "frtime" "waterworld" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "trace" "mrlib" "algol60" "browser" "profj" "framework" "srpersist" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "sirmail" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "repos-time-stamp" "honu" "launcher" "htdp" "profjWizard" "lang" "rnrs" "setup" "plot" "teachpack" "tests" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "handin-server" "srfi" "afm" "handin-client" "r6rs" "version" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-coverage) (default) #() "#lang scheme\n"))
 >
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: "Sam TH" <samth@plt-scheme.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 09:20:04 -0400

 On Oct 13, Sam TH wrote:
 > Welcome to MzScheme v4.1.0.4 [3m], Copyright (c) 2004-2008 PLT Scheme Inc.
 > > (integer? 2.0)
 > #t
 
 I know.  I have been using plt for a little more than a week, you know.
 
 
 > `Integer' will continue to mean the same as `integer?'.
 
 See later comment.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, Sam TH <samth@plt-scheme.org>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 09:22:07 -0400

 P.S. As we work out the tower, we want to look into the exact/inexact  
 issue, too. 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, Sam TH <samth@plt-scheme.org>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 09:58:07 -0400

 On Oct 13, Matthias Felleisen wrote:
 > 
 > P.S. As we work out the tower, we want to look into the
 > exact/inexact issue, too.
 
 That would be ideal, but can be potentially messy...  I've had the
 same kind of issues with I made the primitive classes for Swindle: I
 ended up with:
 
 * toplevel class: <number>
 
 * subclasses of that: <exact>, <inexact>
 
 * the tower is a chain of subclasses, starting from <number>:
   <complex>, <real>, <rational>, <integer>
 
 * then there are 8 classes that are the cross product of the above two
   items, so it has <exact-integer>, for example
 
 And BTW, what I really like is the open-endedness of this (the TS
 thing, not Swindle): the fact that if it should be used for
 optimization than you can think of adding a Fixnum to that, if there's
 a way to make it work so that programmers that are not concerned about
 that level of optimization never need to deal with it.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, Sam TH <samth@plt-scheme.org>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 10:04:27 -0400

 I agree that TS could support all this. For now, we need to make sure  
 that TS is a pragmatic alternative to move Scheme modules over.
 
 -- Matthias
 
 
 
 
 
 On Oct 13, 2008, at 9:58 AM, Eli Barzilay wrote:
 
 > On Oct 13, Matthias Felleisen wrote:
 >>
 >> P.S. As we work out the tower, we want to look into the
 >> exact/inexact issue, too.
 >
 > That would be ideal, but can be potentially messy...  I've had the
 > same kind of issues with I made the primitive classes for Swindle: I
 > ended up with:
 >
 > * toplevel class: <number>
 >
 > * subclasses of that: <exact>, <inexact>
 >
 > * the tower is a chain of subclasses, starting from <number>:
 >   <complex>, <real>, <rational>, <integer>
 >
 > * then there are 8 classes that are the cross product of the above two
 >   items, so it has <exact-integer>, for example
 >
 > And BTW, what I really like is the open-endedness of this (the TS
 > thing, not Swindle): the fact that if it should be used for
 > optimization than you can think of adding a Fixnum to that, if there's
 > a way to make it work so that programmers that are not concerned about
 > that level of optimization never need to deal with it.
 >
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli  
 > Barzilay:
 >                   http://www.barzilay.org/                 Maze is  
 > Life!
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, Sam TH <samth@plt-scheme.org>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 10:09:11 -0400

 On Oct 13, Matthias Felleisen wrote:
 > 
 > I agree that TS could support all this. For now, we need to make
 > sure that TS is a pragmatic alternative to move Scheme modules over.
 
 +1
 
 (I was surprised to find a good chunk of things that are not given
 types -- the trigonometric and the bitwise functions.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, Sam TH <samth@plt-scheme.org>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 10:13:39 -0400

 Sam and I started discussing last week how to manage a collection  
 that supports the typing of the existing run-time library. We are  
 thinking of a collects
 
   typed/
 
 in which all standard collects -- converted or via adapters -- are  
 placed. Typed Scheme could even resolve its standard imports to this  
 collects and programmers could thus get a lot of the stuff  
 automatically.
 
 As for the core itself, I suspect this is simply a question of labor  
 and demand.
 
 -- Matthias
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, Sam TH <samth@plt-scheme.org>,
        bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9824: typed-scheme integers
Date: Mon, 13 Oct 2008 10:22:13 -0400

 On Oct 13, Matthias Felleisen wrote:
 > 
 > Sam and I started discussing last week how to manage a collection
 > that supports the typing of the existing run-time library. We are
 > thinking of a collects
 > 
 >   typed/
 > 
 > in which all standard collects -- converted or via adapters -- are
 > placed. Typed Scheme could even resolve its standard imports to this
 > collects and programmers could thus get a lot of the stuff
 > automatically.
 
 Whatever is done to that end should be done carefully.  One thing that
 might be useful is the "modes" of compilation that you get with
 errortrace (with compiled code going into a different subdirectory).
 ("Useful" in the conceptual sense, I don't think that the actual
 mechanism fits here...)
 
 That sounds like too much for TS, but there are at least two other
 cases where this would be helpful -- in lazy scheme (where I just made
 the language have the useful stuff from mzscheme in addition to some
 libraries like mzlib/list), and in frtime (where Greg has several
 frtime mirror versions of mzlib files).
 
 
 > As for the core itself, I suspect this is simply a question of labor
 > and demand.
 
 [Yes, that's clear...]
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Responsible changed from "nobody" to "samth" by samth at Tue, 21 Oct 2008 16:53:51 -0400
Reason>>> ts

State changed from "open" to "closed" by samth at Tue, 21 Oct 2008 16:53:51 -0400
Reason>>> not a bug

