From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Aug 24 16:48:27 2010
Received: from mail-gy0-f172.google.com (mail-gy0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o7OKmNT5024553
	for <bugs@bugs.plt-scheme.org>; Tue, 24 Aug 2010 16:48:23 -0400
Message-Id: <201008242048.o7OKmM5I024546@champlain.ccs.neu.edu>
Date: Tue, 24 Aug 2010 16:48:22 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Ugly `struct:' syntax

>Number:         11129
>Category:       typed-scheme
>Synopsis:       Ugly `struct:' syntax
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Aug 24 16:52:01 -0400 2010
>Last-Modified:  Fri Sep 03 21:09:14 -0400 2010
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        master
>Environment:
Linux i686 / Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.55 Safari/533.4
>Description:
For a polymorphic `struct:' definition, the type variable comes
before the defined name.  This is counter intuitive -- which becomes
very clear when you try to read something like

  (struct: (A) Foo ([x : Integer]))

out loud.  Since Racket's `struct' doesn't use parenthesis to indicate
a superstruct, a pair of parens could be used to indicate the type
variable:

  (struct: (Foo A) ([x : Integer]))

I know that `All' has the same order (`lambda' too), but since you
read the "All" there it doesn't suffer in the same way.
>How-To-Repeat:
>Fix:
