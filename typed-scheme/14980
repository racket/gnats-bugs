From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Feb 17 03:52:29 2015
Received: from mail-ob0-f170.google.com (mail-ob0-f170.google.com [209.85.214.170])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t1H8qMgW015260
	for <bugs@bugs.plt-scheme.org>; Tue, 17 Feb 2015 03:52:23 -0500
Message-Id: <201502170852.t1H8qJuF015253@winooski.ccs.neu.edu>
Date: Tue, 17 Feb 2015 03:52:19 -0500
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: TR: bogus `Module-Path' in type errors

>Number:         14980
>Category:       typed-scheme
>Synopsis:       TR: bogus `Module-Path' in type errors
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Feb 17 03:56:01 -0500 2015
>Last-Modified:  Wed Jun 10 11:59:16 -0400 2015
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1
>Environment:
Win32 / Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36
>Description:
See the code below, with the confusing type errors that change in
weird ways for each definition.

If `Module-Path' is a subtype of this `Sexpr', then why is it shown?
If it's not, then something is broken.  And if there is some part of
`Module-Path' that does happen to be the same as
(U Symbol String (Listof Sexpr)) then Module-Path is a confusing
name[*] (but it doesn't look like it).

([*] Confusing because I slap together some basic types and I get a
type error that talks about modules -- this is different from
something like `Path-String', where the name is made of what goes
in it, and there's no new unrelated term thrown into the error
message.)
>How-To-Repeat:
#lang typed/racket
(define-type Sexpr
  (Rec Sexpr (U Real String Symbol Boolean (Listof Sexpr))))
(: f : Sexpr -> Number)

;; ... and now:

;; (define (f x) (add1 x))
;; ... "given: Sexpr"

;; (define (f x) (if (list? x) (add1 x) 0))
;; ... "given: (Listof Sexpr)"

;; (define (f x) (match x [(list _ ...) (add1 x)]))
;; ... "given: (U Module-Path Real True (Listof Sexpr))"

;; (define (f x) (if (number? x) x (add1 x)))
;; ... "given: (U Module-Path Boolean (Listof Sexpr))"

;; (define (f x) (if (or (number? x) (boolean? x)) 0 (add1 x)))
;; ... "given: (U Module-Path (Listof Sexpr))"

;; (define (f x) (if (or (number? x) (boolean? x) (string? x)) 0 (add1 x)))
;; ... "given: (U Symbol (Listof Sexpr))"
>Fix:
