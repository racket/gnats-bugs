From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Apr  6 10:30:24 2010
Received: from mail-yx0-f198.google.com (mail-yx0-f198.google.com [209.85.210.198])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o36EUNBa004243
	for <bugs@bugs.plt-scheme.org>; Tue, 6 Apr 2010 10:30:23 -0400
Message-Id: <201004061430.o36EUJSk004234@champlain.ccs.neu.edu>
Date: Tue, 6 Apr 2010 10:30:19 -0400
From: dvanhorn@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Typed Scheme: Occurrence typing, accessor paths, and procedures

>Number:         10847
>Category:       typed-scheme
>Synopsis:       Typed Scheme: Occurrence typing, accessor paths, and procedures
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          suspended
>Confidential:   no
>Arrival-Date:   Tue Apr 06 10:32:01 -0400 2010
>Closed-Date:    
>Last-Modified:  Tue May 03 18:34:04 -0400 2011
>Originator:     David Van Horn
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.5.4-svn2apr2010
>Environment:
macosx "Darwin doom 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov  3 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 327034664

Collections:
(("/Users/dvanhorn/Library/PLT Scheme/4.2.5.4/collects" non-existent-path) ("/Applications/plt/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-!
 scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
This program type checks:

#lang typed/scheme
(define-struct: foo ([x : (U #f (-> Number))]))

(define: (f [y : foo]) : Number
  (let ((x (foo-x y)))
    (if (procedure? x)
        (x)
        7)))

This one doesnt':

#lang typed/scheme
(define-struct: foo ([x : (U #f (-> Number))]))

(define: (f [y : foo]) : Number
  (if (procedure? (foo-x y))
      ((foo-x y))
      7))
Type Checker: Cannot apply expression of type (U False (-> Complex)), since it is not a function type in: ((foo-x y))

[I don't see how this is related to applicable structs and subtyping, but maybe...?]
>How-To-Repeat:
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "samth" by samth at Wed, 18 Aug 2010 16:07:55 -0400
Reason>>> tt

State changed from "open" to "suspended" by samth at Wed, 18 Aug 2010 16:07:55 -0400
Reason>>> see email

From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: dvanhorn@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10847: Typed Scheme: Occurrence typing, accessor
 paths, and procedures
Date: Wed, 18 Aug 2010 16:07:03 -0400

 On Tue, Apr 6, 2010 at 10:32 AM,  <dvanhorn@ccs.neu.edu> wrote:
 >
 > This one doesnt':
 >
 > #lang typed/scheme
 > (define-struct: foo ([x : (U #f (-> Number))]))
 >
 > (define: (f [y : foo]) : Number
 > =A0(if (procedure? (foo-x y))
 > =A0 =A0 =A0((foo-x y))
 > =A0 =A0 =A07))
 > Type Checker: Cannot apply expression of type (U False (-> Complex)), sin=
 ce it is not a function type in: ((foo-x y))
 
 Note the following:
 
 > foo-x
 - : (foo -> (U False (-> Number)))
 
 That means that the result of this function will never be a procedure.
  You're imaging that every struct is implicitly boundedly-polymorphic
 for each field.  That's an interesting design idea (once we figure out
 how to add bounded polymorphism to TR) but it isn't how TR works.
 --=20
 sam th
 samth@ccs.neu.edu

