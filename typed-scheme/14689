From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Aug 16 18:23:21 2014
Received: from mail-ig0-f181.google.com (mail-ig0-f181.google.com [209.85.213.181])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s7GMNGBo008146
	for <bugs@bugs.plt-scheme.org>; Sat, 16 Aug 2014 18:23:16 -0400
Message-Id: <201408162223.s7GMNEcl008139@winooski.ccs.neu.edu>
Date: Sat, 16 Aug 2014 18:23:14 -0400
From: ianj@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Typed Racket: Polymorphism and rest args don't mix

>Number:         14689
>Category:       typed-scheme
>Synopsis:       Typed Racket: Polymorphism and rest args don't mix
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Aug 16 18:24:01 -0400 2014
>Last-Modified:  Fri Aug 29 14:55:15 -0400 2014
>Originator:     J. Ian Johnson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0.1.1
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:23.0) Gecko/20100101 Firefox/23.0
>Description:
When writing something like a typed version of data/gvector, you need access to at least of value of some default. I have tried case-> to try to tuss it out, but TR is losing type information.
>How-To-Repeat:
(: foo : (All (A) (case->
                        (-> A A * A)
                        (-> #f))))
(define (foo . e)
  (cond
   [(null? e) #f]
   [else (car e)]))
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: "J. Ian Johnson" <ianj@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14689: Typed Racket: Polymorphism and rest args
 don't mix
Date: Sat, 16 Aug 2014 18:33:33 -0400

 This definition for `foo` works and strikes me as nicer:
 
 (define foo
   (case-lambda
     [() #f]
     [(x . y) x]))
 
 Sam
 
 On Sat, Aug 16, 2014 at 6:24 PM,  <ianj@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14689
 >
 > Reported by J. Ian Johnson for release: 6.0.1.1
 >
 > *** Description:
 > When writing something like a typed version of data/gvector, you need access to at least of value of some default. I have tried case-> to try to tuss it out, but TR is losing type information.
 >
 > *** How to repeat:
 > (: foo : (All (A) (case->
 >                         (-> A A * A)
 >                         (-> #f))))
 > (define (foo . e)
 >   (cond
 >    [(null? e) #f]
 >    [else (car e)]))
 >
 > *** Environment:
 > Linux x86_64 / Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:23.0) Gecko/20100101 Firefox/23.0
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: "J. Ian Johnson" <ianj@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14689: Typed Racket: Polymorphism and rest args don't mix
Date: Sat, 16 Aug 2014 18:44:49 -0400

 I am willing to argue that TR's type system shouldn't recognize (foo . e) as a header for a case-> (at the moment) but I am willing to be proven wrong both now and in the future (with a research result). 
 
 
 On Aug 16, 2014, at 6:33 PM, Sam Tobin-Hochstadt wrote:
 
 > This definition for `foo` works and strikes me as nicer:
 > 
 > (define foo
 >  (case-lambda
 >    [() #f]
 >    [(x . y) x]))
 > 
 > Sam
 > 
 > On Sat, Aug 16, 2014 at 6:24 PM,  <ianj@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=14689
 >> 
 >> Reported by J. Ian Johnson for release: 6.0.1.1
 >> 
 >> *** Description:
 >> When writing something like a typed version of data/gvector, you need access to at least of value of some default. I have tried case-> to try to tuss it out, but TR is losing type information.
 >> 
 >> *** How to repeat:
 >> (: foo : (All (A) (case->
 >>                        (-> A A * A)
 >>                        (-> #f))))
 >> (define (foo . e)
 >>  (cond
 >>   [(null? e) #f]
 >>   [else (car e)]))
 >> 
 >> *** Environment:
 >> Linux x86_64 / Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:23.0) Gecko/20100101 Firefox/23.0
 >> 
 
 

