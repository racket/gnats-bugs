From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Aug 11 14:43:36 2012
Received: from mail-gh0-f172.google.com (mail-gh0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q7BIhW2t014151
	for <bugs@bugs.plt-scheme.org>; Sat, 11 Aug 2012 14:43:32 -0400
Message-Id: <201208111843.q7BIhUSs014141@champlain.ccs.neu.edu>
Date: Sat, 11 Aug 2012 14:43:30 -0400
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: error message is obscure 

>Number:         13008
>Category:       typed-scheme
>Synopsis:       error message is obscure
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Aug 11 14:44:01 -0400 2012
>Closed-Date:    Tue Jul 01 18:24:08 -0400 2014
>Last-Modified:  Tue Jul 01 18:24:08 -0400 2014
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.18--2012-08-10(0c37d094/d)
>Environment:
macosx "Darwin africa.westell.com 11.4.0 Darwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 615257504
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/matthias/0Unison/collects/"
 ("._.DS_Store" ".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/5.3.0.18/collects"
 (non-existent-path))
("/Users/matthias/plt/collects"
 (".gitignore" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compatibility" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mz" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raclog" "raco" "racunit" "reader" "readline" "redex" "repo-time-stamp" "repos-time-stamp" "rnrs" "s-exp" "schelog" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-!
 color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "tool" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket" #t #t ((main) (test))))
>Description:
#lang typed/racket

(define-type (To-Res I) (Rec To-Res (U I (I -> To-Res))))

(: repeatedly-apply (All (I) ((To-Res I) I -> I)))
(define (repeatedly-apply to-res x)
  (cond
    [(procedure? to-res) (repeatedly-apply (to-res x) x)]
    [else to-res]))

(repeatedly-apply (λ (i) i) 10)
(repeatedly-apply (λ (i) i) #f)

yields

Type Checker: Cannot apply expression of type Procedure, since it is not a function type in: (to-res x)

;; --- 

Since when is it impossible to apply Procedures? 
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: matthias@ccs.neu.edu, nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 11:58:12 -0700

 It is always impossible to apply a value of type Procedure, because
 you don't know what kind of arguments it takes.
 
 The problem is that the type I can also respond true to procedure, so
 the check procedure? only can tell that it is a value of type
 Procedure, not that it is the (I -> ToRes) case of your union.
 
 What is the error message that you would like to see in this case?
 Better explanation of why procedures cannot be applied?
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: matthias@ccs.neu.edu, nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 14:09:17 -0500

 On Sat, Aug 11, 2012 at 1:58 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > It is always impossible to apply a value of type Procedure, [ ... ]
 
 IMO, if this is a sentence that makes sense with the current TR
 terminology, then the TR terminology should be changed. Think of this
 from the perspective of someone who speaks, you know, English, and has
 programmed with TR a bit. This is not a helpful collection of words!
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: nobody@racket-lang.org, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 15:14:38 -0400

 --Apple-Mail=_524E8032-675C-4198-A1BB-8F74707728C1
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Aug 11, 2012, at 2:58 PM, Eric Dobson wrote:
 
 > It is always impossible to apply a value of type Procedure, because
 > you don't know what kind of arguments it takes.
 
 My bug report concerns the psychology of a Untyped Racketeer who is in =
 the process of discovering TR. Worse, I am imagining an unwashed =
 Schemer, and the reaction to "Procedure" cannot be applied. Take a look =
 at RnRS and see what 'applicable' things are called. This is an =
 unfortunate choice of type name for us.=20
 
 
 > The problem is that the type I can also respond true to procedure, so
 
 I know.=20
 
 
 > the check procedure? only can tell that it is a value of type
 > Procedure, not that it is the (I -> ToRes) case of your union.
 >=20
 > What is the error message that you would like to see in this case?
 > Better explanation of why procedures cannot be applied?
 
 
 Perhaps the name Procedure should be avoided. Alternatively, the type =
 T[I] =3D I u (I -> T[I]) should be flagged as dangerous (and perhaps not =
 admitted). Or we should be able to attach constraints to types that say =
 'where I =3D!=3D (t -> s) for any t, s'. Indeed, you could attach this =
 type to the function type of quasi-apply and leave the general type =
 open.=20
 
 ;; ---=20
 
 As much as I appreciate these puzzle games from my Soft Scheme (Fagan =
 and Wright days), I think they are less than important for actual code =
 bases so this is not a high priority issue -- unless we see more such =
 bug reports where people try to play these games.=20
 
 -- Matthias
 
 
 
 --Apple-Mail=_524E8032-675C-4198-A1BB-8F74707728C1
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgxMTE5MTQ0MFowIwYJKoZI
 hvcNAQkEMRYEFB6NeObvGiRhxoZyI5K1SWN+XyrpMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAC4i3xXMynrwDNsNhcu0N45SABLBkfrWxbnvcMjlNIeFz/kLB5bvV3XSwYv/sX3+zmwl
 tTr+eST01VgeUzrJhHqfGdVjdOe/+bYQiXyv8M54QSNSMZKv/3loBybe2iolukrr902hcpGP+FTC
 oSgMjHN9HXC7eaLlkHgfvUESLxcpZo4LtmLs2y1Yc0DfKyxKjeIYY2INJhYDOFpsHb71GEWH06S/
 IAFwmFP6FVd8/uZO/BvSTu7Qqiog3YcKv5P3n5mloxSlCv74PO3ne/Jb5y7VWYJ5l3tnIQvg1lVN
 ZLHGTnfD3FL+n/U5XeAMtWriQtmJA1bD5HPn+o+jVTi+cGsAAAAAAAA=
 
 --Apple-Mail=_524E8032-675C-4198-A1BB-8F74707728C1--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>, nobody@racket-lang.org,
        Eric Dobson <eric.n.dobson@gmail.com>, matthias@ccs.neu.edu
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 15:14:23 -0400

 --20cf3074b9d6b4751404c70244e8
 Content-Type: text/plain; charset=UTF-8
 
 On Aug 11, 2012 3:09 PM, "Robby Findler" <robby@eecs.northwestern.edu>
 wrote:
 >
 > On Sat, Aug 11, 2012 at 1:58 PM, Eric Dobson <eric.n.dobson@gmail.com>
 wrote:
 > > It is always impossible to apply a value of type Procedure, [ ... ]
 >
 > IMO, if this is a sentence that makes sense with the current TR
 > terminology, then the TR terminology should be changed. Think of this
 > from the perspective of someone who speaks, you know, English, and has
 > programmed with TR a bit. This is not a helpful collection of words!
 
 This error message is definitely confusing, and the fix is to explain more
 about why values with the type Procedure can't be applied safely. However,
 the name 'Procedure' is definitely the right one' as it corresponds exactly
 to the Racket 'procedure?'.
 
 Sam
 
 --20cf3074b9d6b4751404c70244e8
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr"><br>
 On Aug 11, 2012 3:09 PM, &quot;Robby Findler&quot; &lt;<a href=3D"mailto:ro=
 bby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt;<br>
 &gt; On Sat, Aug 11, 2012 at 1:58 PM, Eric Dobson &lt;<a href=3D"mailto:eri=
 c.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt; &gt; It is always impossible to apply a value of type Procedure, [ ...=
  ]<br>
 &gt;<br>
 &gt; IMO, if this is a sentence that makes sense with the current TR<br>
 &gt; terminology, then the TR terminology should be changed. Think of this<=
 br>
 &gt; from the perspective of someone who speaks, you know, English, and has=
 <br>
 &gt; programmed with TR a bit. This is not a helpful collection of words!<b=
 r></p>
 <p dir=3D"ltr">This error message is definitely confusing, and the fix is t=
 o explain more about why values with the type Procedure can&#39;t be applie=
 d safely. However, the name &#39;Procedure&#39; is definitely the right one=
 &#39; as it corresponds exactly to the Racket &#39;procedure?&#39;.</p>
 
 <p dir=3D"ltr">Sam<br>
 </p>
 
 --20cf3074b9d6b4751404c70244e8--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>, nobody@racket-lang.org,
        Eric Dobson <eric.n.dobson@gmail.com>, matthias@ccs.neu.edu
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 14:17:12 -0500

 On Sat, Aug 11, 2012 at 2:14 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >
 > On Aug 11, 2012 3:09 PM, "Robby Findler" <robby@eecs.northwestern.edu>
 > wrote:
 >>
 >> On Sat, Aug 11, 2012 at 1:58 PM, Eric Dobson <eric.n.dobson@gmail.com>
 >> wrote:
 >> > It is always impossible to apply a value of type Procedure, [ ... ]
 >>
 >> IMO, if this is a sentence that makes sense with the current TR
 >> terminology, then the TR terminology should be changed. Think of this
 >> from the perspective of someone who speaks, you know, English, and has
 >> programmed with TR a bit. This is not a helpful collection of words!
 >
 > This error message is definitely confusing, and the fix is to explain more
 > about why values with the type Procedure can't be applied safely. However,
 > the name 'Procedure' is definitely the right one' as it corresponds exactly
 > to the Racket 'procedure?'.
 
 I understand why you're saying that, and it makes me sad.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>, nobody@racket-lang.org,
        Eric Dobson <eric.n.dobson@gmail.com>
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 15:19:12 -0400

 --Apple-Mail=_D576FAC9-26A4-4949-A2D6-196684F8564C
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Aug 11, 2012, at 3:17 PM, Robby Findler wrote:
 
 > On Sat, Aug 11, 2012 at 2:14 PM, Sam Tobin-Hochstadt =
 <samth@ccs.neu.edu> wrote:
 >>=20
 >> On Aug 11, 2012 3:09 PM, "Robby Findler" =
 <robby@eecs.northwestern.edu>
 >> wrote:
 >>>=20
 >>> On Sat, Aug 11, 2012 at 1:58 PM, Eric Dobson =
 <eric.n.dobson@gmail.com>
 >>> wrote:
 >>>> It is always impossible to apply a value of type Procedure, [ ... ]
 >>>=20
 >>> IMO, if this is a sentence that makes sense with the current TR
 >>> terminology, then the TR terminology should be changed. Think of =
 this
 >>> from the perspective of someone who speaks, you know, English, and =
 has
 >>> programmed with TR a bit. This is not a helpful collection of words!
 >>=20
 >> This error message is definitely confusing, and the fix is to explain =
 more
 >> about why values with the type Procedure can't be applied safely. =
 However,
 >> the name 'Procedure' is definitely the right one' as it corresponds =
 exactly
 >> to the Racket 'procedure?'.
 >=20
 > I understand why you're saying that, and it makes me sad.
 
 
 I am in mourning too.=20=
 
 --Apple-Mail=_D576FAC9-26A4-4949-A2D6-196684F8564C
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgxMTE5MTkxM1owIwYJKoZI
 hvcNAQkEMRYEFMpPCcpsTv2lVhqZNFEZU88uCz3fMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBACSanE8t76pDLblCSKF084nAGDx0IUd0/nlByqBQMN8LnVdE5j5nsXsIT2njPFoSQ89F
 7hmW5Geqgpwm6Qra0lLbHaEvLLexWWqErR2fshhbNHoM8cqApG/L8ZpkRdSC9nPj1Qilq7NMCGyx
 Y5DaS3zRAptMYZdPrMDcdF8hnXOEso/tp71OkKV0JfvMeo5TzyUkeONqbT8EdD6V6ntnTIUOzi9z
 Vh0RtbUmX/2d5616S0dNShQ4UYcwqhbfI3Zt38iycvFZ/l697LTfytkNZqjeYCKmJ7Lqa/0YcwHi
 BEsCKj/piVxNNejwxZgFpa2HKVFlsRe3tgLjRqslB/DI4jUAAAAAAAA=
 
 --Apple-Mail=_D576FAC9-26A4-4949-A2D6-196684F8564C--
From: Neil Toronto <neil.toronto@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>, nobody@racket-lang.org,
        Eric Dobson <eric.n.dobson@gmail.com>, matthias@ccs.neu.edu
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 13:35:40 -0600

 On 08/11/2012 01:17 PM, Robby Findler wrote:
 > On Sat, Aug 11, 2012 at 2:14 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>
 >> On Aug 11, 2012 3:09 PM, "Robby Findler" <robby@eecs.northwestern.edu>
 >> wrote:
 >>>
 >>> On Sat, Aug 11, 2012 at 1:58 PM, Eric Dobson <eric.n.dobson@gmail.com>
 >>> wrote:
 >>>> It is always impossible to apply a value of type Procedure, [ ... ]
 >>>
 >>> IMO, if this is a sentence that makes sense with the current TR
 >>> terminology, then the TR terminology should be changed. Think of this
 >>> from the perspective of someone who speaks, you know, English, and has
 >>> programmed with TR a bit. This is not a helpful collection of words!
 >>
 >> This error message is definitely confusing, and the fix is to explain more
 >> about why values with the type Procedure can't be applied safely. However,
 >> the name 'Procedure' is definitely the right one' as it corresponds exactly
 >> to the Racket 'procedure?'.
 >
 > I understand why you're saying that, and it makes me sad.
 
 Is the possibility that a procedure returns multiple values the only 
 reason `Procedure' isn't an alias for (Any * -> Any)?
 
 Neil ⊥
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        bug-notification <bug-notification@racket-lang.org>,
        Eric Dobson <eric.n.dobson@gmail.com>, matthias@ccs.neu.edu
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 15:37:55 -0400

 --20cf303b3f7ddd495504c70298ef
 Content-Type: text/plain; charset=UTF-8
 
 For example, 'add1' is 'procedure?' but it isn't safe to give it that
 type.
 
 --20cf303b3f7ddd495504c70298ef
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">For example, &#39;add1&#39; is &#39;procedure?&#39; but it i=
 sn&#39;t safe to give it that type.=C2=A0 </p>
 
 --20cf303b3f7ddd495504c70298ef--
From: Stephen Bloch <bloch@adelphi.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 17:29:45 -0400

 On Aug 11, 2012, at 3:14 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 
 > 
 > On Aug 11, 2012, at 2:58 PM, Eric Dobson wrote:
 > 
 >> It is always impossible to apply a value of type Procedure, because
 >> you don't know what kind of arguments it takes.
 > 
 > My bug report concerns the psychology of a Untyped Racketeer who is in the process of discovering TR. Worse, I am imagining an unwashed Schemer, and the reaction to "Procedure" cannot be applied. Take a look at RnRS and see what 'applicable' things are called. This is an unfortunate choice of type name for us. 
 
 As I understand it, the problem is that TR knows that it's a procedure, but knows nothing about its input or output types or arities, so it can't safely apply it to anything in particular.  Right?
 
 Perhaps the name should be AbstractProcedure or the like; a novice TR-ist seeing "Cannot apply value of type AbstractProcedure to argument of type ..." would have a decent chance of figuring out what was wrong.
 
 Stephen Bloch
 sbloch@adelphi.edu
From: Neil Toronto <neil.toronto@gmail.com>
To: Stephen Bloch <bloch@adelphi.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 15:39:11 -0600

 On 08/11/2012 03:29 PM, Stephen Bloch wrote:
 >
 >
 > On Aug 11, 2012, at 3:14 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 >>
 >> On Aug 11, 2012, at 2:58 PM, Eric Dobson wrote:
 >>
 >>> It is always impossible to apply a value of type Procedure, because
 >>> you don't know what kind of arguments it takes.
 >>
 >> My bug report concerns the psychology of a Untyped Racketeer who is in the process of discovering TR. Worse, I am imagining an unwashed Schemer, and the reaction to "Procedure" cannot be applied. Take a look at RnRS and see what 'applicable' things are called. This is an unfortunate choice of type name for us.
 >
 > As I understand it, the problem is that TR knows that it's a procedure, but knows nothing about its input or output types or arities, so it can't safely apply it to anything in particular.  Right?
 >
 > Perhaps the name should be AbstractProcedure or the like; a novice TR-ist seeing "Cannot apply value of type AbstractProcedure to argument of type ..." would have a decent chance of figuring out what was wrong.
 
 I like this direction. How about `Any-Procedure' to correspond with `Any'?
 
 Neil ⊥
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Stephen Bloch <bloch@adelphi.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 17:39:37 -0400

 --Apple-Mail=_94337891-D3D0-47C9-ADCE-2457E2DFAF6A
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 On Aug 11, 2012, at 5:29 PM, Stephen Bloch wrote:
 
 >=20
 >=20
 > On Aug 11, 2012, at 3:14 PM, Matthias Felleisen <matthias@ccs.neu.edu> =
 wrote:
 >=20
 >>=20
 >> On Aug 11, 2012, at 2:58 PM, Eric Dobson wrote:
 >>=20
 >>> It is always impossible to apply a value of type Procedure, because
 >>> you don't know what kind of arguments it takes.
 >>=20
 >> My bug report concerns the psychology of a Untyped Racketeer who is =
 in the process of discovering TR. Worse, I am imagining an unwashed =
 Schemer, and the reaction to "Procedure" cannot be applied. Take a look =
 at RnRS and see what 'applicable' things are called. This is an =
 unfortunate choice of type name for us.=20
 >=20
 > As I understand it, the problem is that TR knows that it's a =
 procedure, but knows nothing about its input or output types or arities, =
 so it can't safely apply it to anything in particular.  Right?
 
 Yes but let's make this 100% precise. TR cannot type check the =
 application of a procedure f because it doesn't know the type. In this =
 particular case, (procedure? f) does not yield the usual knowledge =
 occurrence typing gives us because we fail to know its type. Given T[I] =
 =3D I u (I -> T[I]), f could be in (I -> T[I]) or in I. No matter what, =
 we don't have access to the type I in this scope because we don't have =
 Lambda to actually name I and bring it into scope. If we did have =
 Lambda, we might think we could say f is of type I -> T[I], meaning it =
 takes one argument (typed I) and produces one result (typed T[I]). BUT, =
 not even this is true, which brings us to the second part of the "f =
 could be in .. or .." sentence. If f has type I, then the dynamic check =
 (procedure? f) yields absolutely no knowledge at type checking time. =
 Since the type checker can prove "f in .. or .." much (this is one place =
 where I am adding a conjecture), it must reject the application of f.=20
 
 I spelled out the above to see whether it produces a better way of =
 phrasing the error message in terms of type checking.=20
 
 > Perhaps the name should be AbstractProcedure or the like; a novice =
 TR-ist seeing "Cannot apply value of type AbstractProcedure to argument =
 of type ..." would have a decent chance of figuring out what was wrong.
 
 I like AbstractProcedure because it is analogous to abstract class, =
 which we can't instantiate and use. But having spelled out the above in =
 detail, I am wondering whether we can do better and tell the programmer =
 to find a better type.=20=
 
 --Apple-Mail=_94337891-D3D0-47C9-ADCE-2457E2DFAF6A
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgxMTIxMzkzN1owIwYJKoZI
 hvcNAQkEMRYEFBY/m1beHmIn0b+6x2Yb/QzcERgdMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAMNYvzVI206W5FUJP9RNrZblDGsdRmg/eqtZ4kDtbRKXiFEUTfcKI1NRtB2n+7h7oEVs
 JW0nK6rhUCmcIhayyweSnAF+wF9uhuFItaNoN0o9//kEfkprTOZOfIL9en39XbIn5zsjwkrwMaAL
 nr2jkje5Eu3q6Hh8hCCLE2UkbHHwuzIwbIfEEsQZso+keW14eujT5DJOGFJoq/IEaNF6g9aSYMRR
 aaMLMu5QEgvGnWleJXqFGKXqoWPVYDGwT89Ua0+DL2aWG2XmrH96hONUKWLSmyzNAjgKbDaGPSc3
 BczOr4t4yX7cp8cdaST+eAonvEwnKfLq9Axn/TcbvLUybQYAAAAAAAA=
 
 --Apple-Mail=_94337891-D3D0-47C9-ADCE-2457E2DFAF6A--
From: Stephen Bloch <bloch@adelphi.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Stephen Bloch <bloch@adelphi.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sat, 11 Aug 2012 21:03:19 -0400

 On Aug 11, 2012, at 5:39 PM, Matthias Felleisen wrote:
 
 > On Aug 11, 2012, at 5:29 PM, Stephen Bloch wrote:
 >> As I understand it, the problem is that TR knows that it's a procedure, but knows nothing about its input or output types or arities, so it can't safely apply it to anything in particular.  Right?
 > 
 > Yes but let's make this 100% precise. TR cannot type check the application of a procedure f because it doesn't know the type. In this particular case, (procedure? f) does not yield the usual knowledge occurrence typing gives us because we fail to know its type. Given T[I] = I u (I -> T[I]), f could be in (I -> T[I]) or in I. No matter what, we don't have access to the type I in this scope because we don't have Lambda to actually name I and bring it into scope. If we did have Lambda, we might think we could say f is of type I -> T[I], meaning it takes one argument (typed I) and produces one result (typed T[I]). BUT, not even this is true, which brings us to the second part of the "f could be in .. or .." sentence. If f has type I, then the dynamic check (procedure? f) yields absolutely no knowledge at type checking time. Since the type checker can prove "f in .. or .." much (this is one place where I am adding a conjecture), it must reject the application of f.
 
 I was thinking more broadly, of other situations in which that error message might conceivably crop up, not necessarily T[i] = I U (I->T[I]).  There must be lots of situations -- e.g. those in which the code says (procedure? x) -- in which TR can tell that something is a procedure, but doesn't know anything about its input or output types or arities.  In which case AbstractProcedure seems like a reasonable type for it.
 
 >> Perhaps the name should be AbstractProcedure or the like; a novice TR-ist seeing "Cannot apply value of type AbstractProcedure to argument of type ..." would have a decent chance of figuring out what was wrong.
 > 
 > I like AbstractProcedure because it is analogous to abstract class, which we can't instantiate and use.
 
 Yes, that's the analogy I was thinking of, as the rankest of novice TR-ists.
 
 
 Stephen Bloch
 sbloch@adelphi.edu
 
 
From: David Van Horn <dvanhorn@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Stephen Bloch <bloch@adelphi.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sun, 12 Aug 2012 13:23:30 -0400

 On 8/11/12 5:39 PM, Matthias Felleisen wrote:
 >> Perhaps the name should be AbstractProcedure or the like; a novice TR-ist seeing "Cannot apply value of type AbstractProcedure to argument of type ..." would have a decent chance of figuring out what was wrong.
 >
 > I like AbstractProcedure because it is analogous to abstract class, which we can't instantiate and use. But having spelled out the above in detail, I am wondering whether we can do better and tell the programmer to find a better type.
 >
 
 There is a consistency between the name of types and names of predicates 
 that I think is worth preserving.  Even an unwashed, untyped, unhygienic 
 Schemer should know that `procedure?' does not imply applicability, in 
 the same way that `number?' doesn't imply comparability (in both cases, 
 you have to know more about the value, and some procedures are never 
 applicable in just the same way that some numbers are not comparable).
 
 So I think the problem is in the error message, *not* the type name, and 
 I'd be sad to see the type name change.
 
 David
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: David Van Horn <dvanhorn@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Stephen Bloch <bloch@adelphi.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sun, 12 Aug 2012 15:40:23 -0500

 Which procedures are never applicable?
 
 Robby
 
 On Sun, Aug 12, 2012 at 12:23 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 > On 8/11/12 5:39 PM, Matthias Felleisen wrote:
 >>>
 >>> Perhaps the name should be AbstractProcedure or the like; a novice TR-ist
 >>> seeing "Cannot apply value of type AbstractProcedure to argument of type
 >>> ..." would have a decent chance of figuring out what was wrong.
 >>
 >>
 >> I like AbstractProcedure because it is analogous to abstract class, which
 >> we can't instantiate and use. But having spelled out the above in detail, I
 >> am wondering whether we can do better and tell the programmer to find a
 >> better type.
 >>
 >
 > There is a consistency between the name of types and names of predicates
 > that I think is worth preserving.  Even an unwashed, untyped, unhygienic
 > Schemer should know that `procedure?' does not imply applicability, in the
 > same way that `number?' doesn't imply comparability (in both cases, you have
 > to know more about the value, and some procedures are never applicable in
 > just the same way that some numbers are not comparable).
 >
 > So I think the problem is in the error message, *not* the type name, and I'd
 > be sad to see the type name change.
 >
 > David
 >
From: David Van Horn <dvanhorn@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Stephen Bloch <bloch@adelphi.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sun, 12 Aug 2012 16:44:16 -0400

 On 8/12/12 4:40 PM, Robby Findler wrote:
 > Which procedures are never applicable?
 
 (case-lambda)
 
 > Robby
 >
 > On Sun, Aug 12, 2012 at 12:23 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 >> On 8/11/12 5:39 PM, Matthias Felleisen wrote:
 >>>>
 >>>> Perhaps the name should be AbstractProcedure or the like; a novice TR-ist
 >>>> seeing "Cannot apply value of type AbstractProcedure to argument of type
 >>>> ..." would have a decent chance of figuring out what was wrong.
 >>>
 >>>
 >>> I like AbstractProcedure because it is analogous to abstract class, which
 >>> we can't instantiate and use. But having spelled out the above in detail, I
 >>> am wondering whether we can do better and tell the programmer to find a
 >>> better type.
 >>>
 >>
 >> There is a consistency between the name of types and names of predicates
 >> that I think is worth preserving.  Even an unwashed, untyped, unhygienic
 >> Schemer should know that `procedure?' does not imply applicability, in the
 >> same way that `number?' doesn't imply comparability (in both cases, you have
 >> to know more about the value, and some procedures are never applicable in
 >> just the same way that some numbers are not comparable).
 >>
 >> So I think the problem is in the error message, *not* the type name, and I'd
 >> be sad to see the type name change.
 >>
 >> David
 >>
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: David Van Horn <dvanhorn@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Bloch <bloch@adelphi.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sun, 12 Aug 2012 16:45:04 -0400

 --Apple-Mail=_69F899FE-D20E-4ABE-9F31-ADC14222FBB9
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 Ouch, I consider this a syntax error.=20
 
 On Aug 12, 2012, at 4:44 PM, David Van Horn wrote:
 
 > On 8/12/12 4:40 PM, Robby Findler wrote:
 >> Which procedures are never applicable?
 >=20
 > (case-lambda)
 >=20
 >> Robby
 >>=20
 >> On Sun, Aug 12, 2012 at 12:23 PM, David Van Horn =
 <dvanhorn@ccs.neu.edu> wrote:
 >>> On 8/11/12 5:39 PM, Matthias Felleisen wrote:
 >>>>>=20
 >>>>> Perhaps the name should be AbstractProcedure or the like; a novice =
 TR-ist
 >>>>> seeing "Cannot apply value of type AbstractProcedure to argument =
 of type
 >>>>> ..." would have a decent chance of figuring out what was wrong.
 >>>>=20
 >>>>=20
 >>>> I like AbstractProcedure because it is analogous to abstract class, =
 which
 >>>> we can't instantiate and use. But having spelled out the above in =
 detail, I
 >>>> am wondering whether we can do better and tell the programmer to =
 find a
 >>>> better type.
 >>>>=20
 >>>=20
 >>> There is a consistency between the name of types and names of =
 predicates
 >>> that I think is worth preserving.  Even an unwashed, untyped, =
 unhygienic
 >>> Schemer should know that `procedure?' does not imply applicability, =
 in the
 >>> same way that `number?' doesn't imply comparability (in both cases, =
 you have
 >>> to know more about the value, and some procedures are never =
 applicable in
 >>> just the same way that some numbers are not comparable).
 >>>=20
 >>> So I think the problem is in the error message, *not* the type name, =
 and I'd
 >>> be sad to see the type name change.
 >>>=20
 >>> David
 >>>=20
 >=20
 
 
 --Apple-Mail=_69F899FE-D20E-4ABE-9F31-ADC14222FBB9
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgxMjIwNDUwNVowIwYJKoZI
 hvcNAQkEMRYEFHA5LK3lZPNm1/cQprqld/0R+P+UMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAK7maoVaA4C6+dVqTKrNSZPcRT5OncL4VkyvDKWYumhojrnYUcHnzxYgZooaV3B1w0ds
 dbWBI9F90l3PeTbSFWdPbSf4OL6v1/O91qYo0waUurfyKSIgvIo4x2BuShP6matv9/sxn86BX2DG
 aTR2x+fmZo/votfhXm5kKi0smzQomhpm9na9JjU1ve7SS/BbbejGuRoudA5tiqIzoTksb+zxM4pX
 FOddoaafILs8kVzygwmsC3Vi+vKNdRMlwXv+wCS7Hxw6WQAgVsd1SwS3WPNI8Cxut+uaAtruOrzF
 VEMADG2I2mOGjyID9FheA6T2Vji81umq2awNBROx1v5vNbIAAAAAAAA=
 
 --Apple-Mail=_69F899FE-D20E-4ABE-9F31-ADC14222FBB9--
From: David Van Horn <dvanhorn@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Bloch <bloch@adelphi.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sun, 12 Aug 2012 16:47:21 -0400

 On 8/12/12 4:43 PM, Matthias Felleisen wrote:
 >
 > I think David is saying that in
 >
 > (define (f x)
 >    (if (procedure? x) (x ...) 10))
 >
 > you don't know enough yet to fill in the dots.
 
 Yes, that's my main point.  (The fact that there are procedures that 
 cannot be applied is not really important.)
 
 David
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: David Van Horn <dvanhorn@ccs.neu.edu>, Stephen Bloch <bloch@adelphi.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sun, 12 Aug 2012 16:43:51 -0400

 --Apple-Mail=_8709FCBD-3564-4058-9C4A-7CC400E61209
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 I think David is saying that in=20
 
 (define (f x)
   (if (procedure? x) (x ...) 10))
 
 you don't know enough yet to fill in the dots.=20
 
 
 On Aug 12, 2012, at 4:40 PM, Robby Findler wrote:
 
 > Which procedures are never applicable?
 >=20
 > Robby
 >=20
 > On Sun, Aug 12, 2012 at 12:23 PM, David Van Horn =
 <dvanhorn@ccs.neu.edu> wrote:
 >> On 8/11/12 5:39 PM, Matthias Felleisen wrote:
 >>>>=20
 >>>> Perhaps the name should be AbstractProcedure or the like; a novice =
 TR-ist
 >>>> seeing "Cannot apply value of type AbstractProcedure to argument of =
 type
 >>>> ..." would have a decent chance of figuring out what was wrong.
 >>>=20
 >>>=20
 >>> I like AbstractProcedure because it is analogous to abstract class, =
 which
 >>> we can't instantiate and use. But having spelled out the above in =
 detail, I
 >>> am wondering whether we can do better and tell the programmer to =
 find a
 >>> better type.
 >>>=20
 >>=20
 >> There is a consistency between the name of types and names of =
 predicates
 >> that I think is worth preserving.  Even an unwashed, untyped, =
 unhygienic
 >> Schemer should know that `procedure?' does not imply applicability, =
 in the
 >> same way that `number?' doesn't imply comparability (in both cases, =
 you have
 >> to know more about the value, and some procedures are never =
 applicable in
 >> just the same way that some numbers are not comparable).
 >>=20
 >> So I think the problem is in the error message, *not* the type name, =
 and I'd
 >> be sad to see the type name change.
 >>=20
 >> David
 >>=20
 
 
 --Apple-Mail=_8709FCBD-3564-4058-9C4A-7CC400E61209
 Content-Disposition: attachment;
 	filename=smime.p7s
 Content-Type: application/pkcs7-signature;
 	name=smime.p7s
 Content-Transfer-Encoding: base64
 
 MIAGCSqGSIb3DQEHAqCAMIACAQExCzAJBgUrDgMCGgUAMIAGCSqGSIb3DQEHAQAAoIIMTDCCBVYw
 ggQ+oAMCAQICEHbDqMitQnj5Qd81mMX31uMwDQYJKoZIhvcNAQEFBQAwgd0xCzAJBgNVBAYTAlVT
 MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29y
 azE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEg
 KGMpMDkxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDE3MDUGA1UEAxMuVmVyaVNpZ24g
 Q2xhc3MgMSBJbmRpdmlkdWFsIFN1YnNjcmliZXIgQ0EgLSBHMzAeFw0xMjA3MjYwMDAwMDBaFw0x
 MzA3MjYyMzU5NTlaMIIBGTEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
 aWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsTPXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9S
 UEEgSW5jb3JwLiBieSBSZWYuLExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZh
 bGlkYXRlZDEzMDEGA1UECxMqRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUgRnVsbCBTZXJ2
 aWNlMRswGQYDVQQDFBJNYXR0aGlhcyBGZWxsZWlzZW4xIzAhBgkqhkiG9w0BCQEWFG1hdHRoaWFz
 QGNjcy5uZXUuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoivceU706ZnD2XD
 JfoNFd4KTbYA9AObozHkSZ6BJLC8oSGjakZu6m11azFwk5LfPOjd7dQIKw9uDhmT1e4q6jP+B1FC
 a1qqwm7Rw9PcFhqYFBlE8MbqJUXJW53Ynw3dK2XiUNqTXFcBa2otI8XxMtrQch4f9oMUy+aIn/fZ
 QQDbkkzuwz3884xSbm0IMDneYUC6FF1OJe2+fkMqHqEDsSgY97RFcjdgTCOB012odwGhxJ3rIGaX
 WUs7ttjnftzyGODVILMIx8RBJpGJ+Ur4R67SJygV8Clpg1RBuRUSNaZAN0tCjO9YSkb9HfF2tAx9
 POWmQXdTtNNjZfJPbTVnkQIDAQABo4HSMIHPMAkGA1UdEwQCMAAwRAYDVR0gBD0wOzA5BgtghkgB
 hvhFAQcXATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhMAsGA1Ud
 DwQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDBAYIKwYBBQUHAwIwUAYDVR0fBEkwRzBFoEOgQYY/
 aHR0cDovL2luZGMxZGlnaXRhbGlkLWczLWNybC52ZXJpc2lnbi5jb20vSW5kQzFEaWdpdGFsSUQt
 RzMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCeAXGCjjlMmU1wb3Ii4V0yNygujjQcvJstFh7IyVcM
 oD5/5Ar7b36JL1O2tpBosTf0pVZaORKCMPAf1IfBS48CvvqSoeVyXCFG1goXDjr7Ut+ZwosuFXdr
 2gD6u9EftuoUy+UBdz46NcN9YC0WbX7CrRE96XxvYwPfWnGIjsoNY7WqFI4f7HLlM5dCmAOXySsw
 EbPKpflzEGPU8aKf4FqTX9ne+hTzPbCf5CDJdzrdyn5bQkqvSzxw+P3tvQSU9lnyZkG7wZ1cibna
 QIuSNEe+HKOKcEfeTeD50JhLa43RE24nMsaXWdX61VTiPE/2Y9woEVLxXBp+AFpMZjGYsF/yMIIG
 7jCCBdagAwIBAgIQcRVmBUrkkSFN6bxE+azT3DANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMC
 VVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3
 b3JrMTowOAYDVQQLEzEoYykgMTk5OSBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVz
 ZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2lnbiBDbGFzcyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmlj
 YXRpb24gQXV0aG9yaXR5IC0gRzMwHhcNMDkwNTAxMDAwMDAwWhcNMTkwNDMwMjM1OTU5WjCB3TEL
 MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBU
 cnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNp
 Z24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQD
 Ey5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczMIIBIjANBgkq
 hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7cRH3yooHXwGa7vXITLJbBOP6bGNQU4099oL42r6ZYgg
 CxET6ZvgSU6Lb9UB0F8NR5GKWkx0Pj/GkQm7TDSejW6hglFi92l2WJYHr54UGAdPWr2f0jGyVBlz
 RmoZQhHsEnMhjfXcMM3l2VYKMcU2bSkUl70t2olHGYjYSwQ967Y8Zx50ABMN0Ibak2f4MwOuGjxr
 aXj2wCyO4YM/d/mZ//6fUlrCtIcK2GypR8FUKWVDPkrAlh/Brfd3r2yxBF6+wbaULZeQLSfSux7p
 g2qE9sSyriMGZSalJ1grByK0b6ZiSBp38tVQJ5op05b7KPW6JHZi44xZ6/tu1ULEvkHH9QIDAQAB
 o4ICuTCCArUwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2ln
 bi5jb20wEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CGSAGG+EUBBxcBMFYwKAYI
 KwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0
 cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTA0BgNVHR8ELTArMCmgJ6AlhiNodHRwOi8vY3JsLnZl
 cmlzaWduLmNvbS9wY2ExLWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwbgYIKwYBBQUHAQwEYjBgoV6g
 XDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYk
 aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMC4GA1UdEQQnMCWkIzAhMR8wHQYD
 VQQDExZQcml2YXRlTGFiZWw0LTIwNDgtMTE4MB0GA1UdDgQWBBR5R2EIQf04BKJL57XM9UP2SSsR
 +DCB8QYDVR0jBIHpMIHmoYHQpIHNMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24s
 IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5
 IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
 aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHM4IR
 AItbdVaEVIULAM+vOEjOsaQwDQYJKoZIhvcNAQEFBQADggEBADlNz0GZgbWpBbVSOOk5hIls5DSo
 WufYbAlMJBq6WaSHO3Mh8ZOBz79oY1pn/jWFK6HDXaNKwjoZ3TDWzE3v8dKBl8pUWkO/N4t6jhmN
 D0OojPKvYLMVirOVnDzgnrMnmKQ1chfl/Cpdh9OKDcLRRSr4wPSsKpM61a4ScAjr+zvid+zoK2Q1
 ds262uDRyxTWcVibvtU+fbbZ6CTFJGZMXZEfdrMXPn8NxiGJL7M3uKH/XLJtSd5lUkL7DojS7Uod
 v0vj+Mxy+kgOZY5JyNb4mZg7t5Q+MXEGh/psWVMu198r7V9jAKwV7QO4VRaMxmgD5yKocwuxvKDa
 UljdCg5/wYIxggSLMIIEhwIBATCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWdu
 LCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBv
 ZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwGA1UECxMVUGVy
 c29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIEluZGl2aWR1YWwg
 U3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMAkGBSsOAwIaBQCgggJtMBgGCSqG
 SIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEyMDgxMjIwNDM1MlowIwYJKoZI
 hvcNAQkEMRYEFFW4XArVmCrCEKIOwosohtOQa8dmMIIBAwYJKwYBBAGCNxAEMYH1MIHyMIHdMQsw
 CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRy
 dXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2ln
 bi5jb20vcnBhIChjKTA5MR4wHAYDVQQLExVQZXJzb25hIE5vdCBWYWxpZGF0ZWQxNzA1BgNVBAMT
 LlZlcmlTaWduIENsYXNzIDEgSW5kaXZpZHVhbCBTdWJzY3JpYmVyIENBIC0gRzMCEHbDqMitQnj5
 Qd81mMX31uMwggEFBgsqhkiG9w0BCRACCzGB9aCB8jCB3TELMAkGA1UEBhMCVVMxFzAVBgNVBAoT
 DlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQL
 EzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwOTEeMBwG
 A1UECxMVUGVyc29uYSBOb3QgVmFsaWRhdGVkMTcwNQYDVQQDEy5WZXJpU2lnbiBDbGFzcyAxIElu
 ZGl2aWR1YWwgU3Vic2NyaWJlciBDQSAtIEczAhB2w6jIrUJ4+UHfNZjF99bjMA0GCSqGSIb3DQEB
 AQUABIIBAIAlf6UQNc8pfYibuXYnvOR16HkumD4HlED3KkbHSh925dLb88dCUaXAwXMuItzEPZ2+
 K+k/ah9HbMxDWG4JNbfkJ9YibSbfufe1RxKx7kIaXWpoUwBw8GOEGuizHTCuVCeSjbWDgI48/0wO
 2JFP6wYAwvz+zQlFxY6i2uJAW8npV8JZd2DW3f5VYGDGM09pMuE5MK6txlXMcrdSTwZ3GiTIdClG
 HICGVSfiObFJLVeWhFFI5CykXrBaMEMGC+j12BcoVZdzJ378/iG6AagaPBt0ZWa5w1l5Mr4srQYV
 MmaeMSb5Yns2FTO+b4kdMWypSviiDSix8cnJX64PU/Lou1sAAAAAAAA=
 
 --Apple-Mail=_8709FCBD-3564-4058-9C4A-7CC400E61209--
From: Robby Findler <robby@eecs.northwestern.edu>
To: David Van Horn <dvanhorn@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Stephen Bloch <bloch@adelphi.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: all/13008: error message is obscure
Date: Sun, 12 Aug 2012 15:50:27 -0500

 On Sun, Aug 12, 2012 at 3:44 PM, David Van Horn <dvanhorn@ccs.neu.edu> wrote:
 > On 8/12/12 4:40 PM, Robby Findler wrote:
 >>
 >> Which procedures are never applicable?
 >
 >
 > (case-lambda)
 
 Ah. I guess I've washed too recently or something. :)
 
 Robby


State changed from "open" to "closed" by asumu at Tue, 01 Jul 2014 18:24:08 -0400
Reason>>> A better error message was added in commit 6629c99

