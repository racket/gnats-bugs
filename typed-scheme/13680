From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Apr 10 18:45:02 2013
Received: from mail-oa0-f47.google.com (mail-oa0-f47.google.com [209.85.219.47])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r3AMiwhd004968
	for <bugs@bugs.plt-scheme.org>; Wed, 10 Apr 2013 18:44:59 -0400
Message-Id: <201304102244.r3AMiugA004962@champlain.ccs.neu.edu>
Date: Wed, 10 Apr 2013 18:44:56 -0400
From: stchang@ccs.neu.edu
To: bugs@racket-lang.org
Subject: typed racket can't distinguish functions and structs

>Number:         13680
>Category:       typed-scheme
>Synopsis:       typed racket can't distinguish functions and structs
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Apr 10 18:48:01 -0400 2013
>Closed-Date:    Sun Apr 28 01:21:05 -0400 2013
>Last-Modified:  Thu Jun 13 14:00:01 -0400 2013
>Originator:     Stephen Chang
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.3.8
>Environment:
unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:42:16 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 371517240
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.3.8):
 [none]



Collections:
("/home/stchang/.racket/5.3.3.8/collects"
 ("info-domain"))
("/home/stchang/plt/collects"
 ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile" "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer" "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" "mred" "framework" "schemeunit" "scribble" "scribblings" "compatibility" "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" "tests" "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict" "repo-time-stamp" "parser-tools" "planet" "rackunit" "typed" "picturing-programs" "openssl" "swindle" "redex" "typed-racket" "json" "compiler" "eopl" "racklog" "mrlib" "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" "wxme" "net" "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace" "scheme" "stepper" "html" "drscheme" "plot" "handin-client" "reader" "mzlib" "help" "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline" "raco" "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket" "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!
 ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" "planet2"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
The following program:

#lang typed/racket

(struct: (A) S ([v : A]))

(define-type Tof (All (A) (U (-> A) (S A))))

(: f : (All (A) ((Tof A) -> A)))
(define (f t)
  (if (procedure? t)
      (t)
      (S-v t)))


results in the error:

Type Checker: Cannot apply expression of type Procedure, since it is not a function type in: (t)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: stchang@ccs.neu.edu, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Wed, 10 Apr 2013 16:27:09 -0700

 This is working as intended, it was a recent soundness fix. You could
 have a substructure of S with prop:procedure which would return #t to
 procedure?, and thus the type system cannot soundly do what you want
 it to do.
 
 On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13680
 >
 > Reported by Stephen Chang for release: 5.3.3.8
 >
 > *** Description:
 > The following program:
 >
 > #lang typed/racket
 >
 > (struct: (A) S ([v : A]))
 >
 > (define-type Tof (All (A) (U (-> A) (S A))))
 >
 > (: f : (All (A) ((Tof A) -> A)))
 > (define (f t)
 >   (if (procedure? t)
 >       (t)
 >       (S-v t)))
 >
 >
 > results in the error:
 >
 > Type Checker: Cannot apply expression of type Procedure, since it is not a function type in: (t)
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:42:16 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 371517240
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > raco pkg (show):
 > Installation-wide:
 >  [none]
 > User-specific, all-version:
 >  [none]
 > User-specific, version-specific (5.3.3.8):
 >  [none]
 >
 >
 >
 > Collections:
 > ("/home/stchang/.racket/5.3.3.8/collects"
 >  ("info-domain"))
 > ("/home/stchang/plt/collects"
 >  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile" "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer" "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" "mred" "framework" "schemeunit" "scribble" "scribblings" "compatibility" "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" "tests" "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict" "repo-time-stamp" "parser-tools" "planet" "rackunit" "typed" "picturing-programs" "openssl" "swindle" "redex" "typed-racket" "json" "compiler" "eopl" "racklog" "mrlib" "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" "wxme" "net" "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace" "scheme" "stepper" "html" "drscheme" "plot" "handin-client" "reader" "mzlib" "help" "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline" "raco" "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket" "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!
 >  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" "planet2"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Wed, 10 Apr 2013 18:42:03 -0500

 --089e011602288cbd2604da0a370f
 Content-Type: text/plain; charset=UTF-8
 
 I tried swapping the arms of the 'if' and I get a puzzling error (as
 below). Is the "Given" line buggy? And I'm not actually quite getting why
 this doesn't typecheck.
 
 #lang typed/racket
 
 (struct: (A) S ([v : A]))
 
 (define-type Tof (All (A) (U (-> A) (S A))))
 
 (: f : (All (A) ((Tof A) -> A)))
 (define (f t)
   (if (S? t)
       (S-v t)
       (t)))
 
 
 . Type Checker: Polymorphic function S-v could not be applied to arguments:
 Argument 1:
   Expected: (S A)
   Given:    #(struct:#<syntax:3:13 S> (Any))
 
 Result type:     (A : ((! False @ (((S A) 0)) 0) | (False @ (((S A) 0)) 0))
 : (((S A) 0) 0))
 Expected result: A52793
  in: (S-v t)
 
 
 
 
 On Wed, Apr 10, 2013 at 6:27 PM, Eric Dobson <eric.n.dobson@gmail.com>wrote:
 
 > This is working as intended, it was a recent soundness fix. You could
 > have a substructure of S with prop:procedure which would return #t to
 > procedure?, and thus the type system cannot soundly do what you want
 > it to do.
 >
 > On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=13680
 > >
 > > Reported by Stephen Chang for release: 5.3.3.8
 > >
 > > *** Description:
 > > The following program:
 > >
 > > #lang typed/racket
 > >
 > > (struct: (A) S ([v : A]))
 > >
 > > (define-type Tof (All (A) (U (-> A) (S A))))
 > >
 > > (: f : (All (A) ((Tof A) -> A)))
 > > (define (f t)
 > >   (if (procedure? t)
 > >       (t)
 > >       (S-v t)))
 > >
 > >
 > > results in the error:
 > >
 > > Type Checker: Cannot apply expression of type Procedure, since it is not
 > a function type in: (t)
 > >
 > > *** How to repeat:
 > >
 > >
 > > *** Environment:
 > > unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:42:16
 > UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > (get-display-depth) = 32
 > > Human Language: english
 > > (current-memory-use) 371517240
 > > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 > (links #:user? #f #:root? #t) = ()
 > > raco pkg (show):
 > > Installation-wide:
 > >  [none]
 > > User-specific, all-version:
 > >  [none]
 > > User-specific, version-specific (5.3.3.8):
 > >  [none]
 > >
 > >
 > >
 > > Collections:
 > > ("/home/stchang/.racket/5.3.3.8/collects"
 > >  ("info-domain"))
 > > ("/home/stchang/plt/collects"
 > >  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile"
 > "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer"
 > "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" "mred"
 > "framework" "schemeunit" "scribble" "scribblings" "compatibility"
 > "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" "tests"
 > "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict"
 > "repo-time-stamp" "parser-tools" "planet" "rackunit" "typed"
 > "picturing-programs" "openssl" "swindle" "redex" "typed-racket" "json"
 > "compiler" "eopl" "racklog" "mrlib" "xrepl" "db" "gui-debugger" "browser"
 > "config" "slideshow" "wxme" "net" "defaults" "realm" "rnrs" "algol60"
 > "syntax" "honu" "errortrace" "scheme" "stepper" "html" "drscheme" "plot"
 > "handin-client" "reader" "mzlib" "help" "trace" "scriblib" "teachpack"
 > "srfi" "handin-server" "readline" "raco" "htdp" "pkg" "r6rs" "web-server"
 > "plai" "data" "meta" "drracket" "deinprogramm" "at-exp" "preprocessor"
 > "games" "mysterx" "stri!
 > >  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" "planet2"))
 > >
 > > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 > (test))))
 > >
 >
 
 --089e011602288cbd2604da0a370f
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I tried swapping the arms of the &#39;if&#39; and I get a =
 puzzling error (as below). Is the &quot;Given&quot; line buggy? And I&#39;m=
  not actually quite getting why this doesn&#39;t typecheck.<div><br></div>
 <div><div>#lang typed/racket</div><div><br></div><div>(struct: (A) S ([v : =
 A]))</div><div><br></div><div>(define-type Tof (All (A) (U (-&gt; A) (S A))=
 ))</div><div><br></div><div>(: f : (All (A) ((Tof A) -&gt; A)))</div><div>
 (define (f t)</div><div>=C2=A0 (if (S? t)</div><div>=C2=A0 =C2=A0 =C2=A0 (S=
 -v t)</div><div>=C2=A0 =C2=A0 =C2=A0 (t)))</div></div><div><br></div><div><=
 br></div><div><div>. Type Checker: Polymorphic function S-v could not be ap=
 plied to arguments:<br></div><div>
 Argument 1:</div><div>=C2=A0 Expected: (S A)</div><div>=C2=A0 Given: =C2=A0=
  =C2=A0#(struct:#&lt;syntax:3:13 S&gt; (Any))</div><div><br></div><div>Resu=
 lt type: =C2=A0 =C2=A0 (A : ((! False @ (((S A) 0)) 0) | (False @ (((S A) 0=
 )) 0)) : (((S A) 0) 0))</div>
 <div>Expected result: A52793</div><div>=C2=A0in: (S-v t)</div><div></div></=
 div><div><br></div><div><br></div></div><div class=3D"gmail_extra"><br><br>=
 <div class=3D"gmail_quote">On Wed, Apr 10, 2013 at 6:27 PM, Eric Dobson <sp=
 an dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_bl=
 ank">eric.n.dobson@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">This is working as intended, it was a recent=
  soundness fix. You could<br>
 have a substructure of S with prop:procedure which would return #t to<br>
 procedure?, and thus the type system cannot soundly do what you want<br>
 it to do.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Wed, Apr 10, 2013 at 3:48 PM, =C2=A0&lt;<a href=3D"mailto:stchang@ccs.ne=
 u.edu">stchang@ccs.neu.edu</a>&gt; wrote:<br>
 &gt; A new problem report is waiting at<br>
 &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13680" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D13680</a><br>
 &gt;<br>
 &gt; Reported by Stephen Chang for release: 5.3.3.8<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; The following program:<br>
 &gt;<br>
 &gt; #lang typed/racket<br>
 &gt;<br>
 &gt; (struct: (A) S ([v : A]))<br>
 &gt;<br>
 &gt; (define-type Tof (All (A) (U (-&gt; A) (S A))))<br>
 &gt;<br>
 &gt; (: f : (All (A) ((Tof A) -&gt; A)))<br>
 &gt; (define (f t)<br>
 &gt; =C2=A0 (if (procedure? t)<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 (t)<br>
 &gt; =C2=A0 =C2=A0 =C2=A0 (S-v t)))<br>
 &gt;<br>
 &gt;<br>
 &gt; results in the error:<br>
 &gt;<br>
 &gt; Type Checker: Cannot apply expression of type Procedure, since it is n=
 ot a function type in: (t)<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt;<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; unix &quot;Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:=
 42:16 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-linux/3m) (get-=
 display-depth) =3D 32<br>
 &gt; Human Language: english<br>
 &gt; (current-memory-use) 371517240<br>
 &gt; Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =
 =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 &gt; raco pkg (show):<br>
 &gt; Installation-wide:<br>
 &gt; =C2=A0[none]<br>
 &gt; User-specific, all-version:<br>
 &gt; =C2=A0[none]<br>
 &gt; User-specific, version-specific (5.3.3.8):<br>
 &gt; =C2=A0[none]<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; Collections:<br>
 &gt; (&quot;/home/stchang/.racket/<a href=3D"http://5.3.3.8/collects" targe=
 t=3D"_blank">5.3.3.8/collects</a>&quot;<br>
 &gt; =C2=A0(&quot;info-domain&quot;))<br>
 &gt; (&quot;/home/stchang/plt/collects&quot;<br>
 &gt; =C2=A0(&quot;math&quot; &quot;datalog&quot; &quot;2htdp&quot; &quot;hi=
 erlist&quot; &quot;make&quot; &quot;launcher&quot; &quot;profile&quot; &quo=
 t;unstable&quot; &quot;s-exp&quot; &quot;file&quot; &quot;info-domain&quot;=
  &quot;setup&quot; &quot;future-visualizer&quot; &quot;macro-debugger&quot;=
  &quot;version&quot; &quot;.gitignore&quot; &quot;dynext&quot; &quot;typed-=
 scheme&quot; &quot;mred&quot; &quot;framework&quot; &quot;schemeunit&quot; =
 &quot;scribble&quot; &quot;scribblings&quot; &quot;compatibility&quot; &quo=
 t;embedded-gui&quot; &quot;racket&quot; &quot;syntax-color&quot; &quot;grap=
 hics&quot; &quot;sgl&quot; &quot;lang&quot; &quot;tests&quot; &quot;r5rs&qu=
 ot; &quot;mzcom&quot; &quot;frtime&quot; &quot;mzscheme&quot; &quot;icons&q=
 uot; &quot;xml&quot; &quot;texpict&quot; &quot;repo-time-stamp&quot; &quot;=
 parser-tools&quot; &quot;planet&quot; &quot;rackunit&quot; &quot;typed&quot=
 ; &quot;picturing-programs&quot; &quot;openssl&quot; &quot;swindle&quot; &q=
 uot;redex&quot; &quot;typed-racket&quot; &quot;json&quot; &quot;compiler&qu=
 ot; &quot;eopl&quot; &quot;racklog&quot; &quot;mrlib&quot; &quot;xrepl&quot=
 ; &quot;db&quot; &quot;gui-debugger&quot; &quot;browser&quot; &quot;config&=
 quot; &quot;slideshow&quot; &quot;wxme&quot; &quot;net&quot; &quot;defaults=
 &quot; &quot;realm&quot; &quot;rnrs&quot; &quot;algol60&quot; &quot;syntax&=
 quot; &quot;honu&quot; &quot;errortrace&quot; &quot;scheme&quot; &quot;step=
 per&quot; &quot;html&quot; &quot;drscheme&quot; &quot;plot&quot; &quot;hand=
 in-client&quot; &quot;reader&quot; &quot;mzlib&quot; &quot;help&quot; &quot=
 ;trace&quot; &quot;scriblib&quot; &quot;teachpack&quot; &quot;srfi&quot; &q=
 uot;handin-server&quot; &quot;readline&quot; &quot;raco&quot; &quot;htdp&qu=
 ot; &quot;pkg&quot; &quot;r6rs&quot; &quot;web-server&quot; &quot;plai&quot=
 ; &quot;data&quot; &quot;meta&quot; &quot;drracket&quot; &quot;deinprogramm=
 &quot; &quot;at-exp&quot; &quot;preprocessor&quot; &quot;games&quot; &quot;=
 mysterx&quot; &quot;stri!<br>
 
 &gt; =C2=A0ng-constants&quot; &quot;test-engine&quot; &quot;slatex&quot; &q=
 uot;lazy&quot; &quot;images&quot; &quot;ffi&quot; &quot;planet2&quot;))<br>
 &gt;<br>
 &gt; Computer Language: ((&quot;Determine language from source&quot;) (#(#t=
  print mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n&quo=
 t; #t #t ((main) (test))))<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --089e011602288cbd2604da0a370f--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, Stephen Chang <stchang@ccs.neu.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Wed, 10 Apr 2013 19:47:35 -0400

 The Given: line is printing poorly, which is a bug.
 
 The point about prop:procedure still holds here.  Consider a substruct
 of S which produces Strings from the procedure behavior, but whose v
 component is an Integer.  That would be an element of (Tof String),
 but would return an Integer from your version of `f`.
 
 Arbitrary extensibility is quite tricky to reason about soundly.
 
 Sam
 
 On Wed, Apr 10, 2013 at 7:42 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I tried swapping the arms of the 'if' and I get a puzzling error (as below).
 > Is the "Given" line buggy? And I'm not actually quite getting why this
 > doesn't typecheck.
 >
 > #lang typed/racket
 >
 > (struct: (A) S ([v : A]))
 >
 > (define-type Tof (All (A) (U (-> A) (S A))))
 >
 > (: f : (All (A) ((Tof A) -> A)))
 > (define (f t)
 >   (if (S? t)
 >       (S-v t)
 >       (t)))
 >
 >
 > . Type Checker: Polymorphic function S-v could not be applied to arguments:
 > Argument 1:
 >   Expected: (S A)
 >   Given:    #(struct:#<syntax:3:13 S> (Any))
 >
 > Result type:     (A : ((! False @ (((S A) 0)) 0) | (False @ (((S A) 0)) 0))
 > : (((S A) 0) 0))
 > Expected result: A52793
 >  in: (S-v t)
 >
 >
 >
 >
 > On Wed, Apr 10, 2013 at 6:27 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 >>
 >> This is working as intended, it was a recent soundness fix. You could
 >> have a substructure of S with prop:procedure which would return #t to
 >> procedure?, and thus the type system cannot soundly do what you want
 >> it to do.
 >>
 >> On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 >> > A new problem report is waiting at
 >> >   http://bugs.racket-lang.org/query/?cmd=view&pr=13680
 >> >
 >> > Reported by Stephen Chang for release: 5.3.3.8
 >> >
 >> > *** Description:
 >> > The following program:
 >> >
 >> > #lang typed/racket
 >> >
 >> > (struct: (A) S ([v : A]))
 >> >
 >> > (define-type Tof (All (A) (U (-> A) (S A))))
 >> >
 >> > (: f : (All (A) ((Tof A) -> A)))
 >> > (define (f t)
 >> >   (if (procedure? t)
 >> >       (t)
 >> >       (S-v t)))
 >> >
 >> >
 >> > results in the error:
 >> >
 >> > Type Checker: Cannot apply expression of type Procedure, since it is not
 >> > a function type in: (t)
 >> >
 >> > *** How to repeat:
 >> >
 >> >
 >> > *** Environment:
 >> > unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:42:16
 >> > UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >> > (get-display-depth) = 32
 >> > Human Language: english
 >> > (current-memory-use) 371517240
 >> > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >> > (links #:user? #f #:root? #t) = ()
 >> > raco pkg (show):
 >> > Installation-wide:
 >> >  [none]
 >> > User-specific, all-version:
 >> >  [none]
 >> > User-specific, version-specific (5.3.3.8):
 >> >  [none]
 >> >
 >> >
 >> >
 >> > Collections:
 >> > ("/home/stchang/.racket/5.3.3.8/collects"
 >> >  ("info-domain"))
 >> > ("/home/stchang/plt/collects"
 >> >  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile"
 >> > "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer"
 >> > "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" "mred"
 >> > "framework" "schemeunit" "scribble" "scribblings" "compatibility"
 >> > "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" "tests"
 >> > "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict" "repo-time-stamp"
 >> > "parser-tools" "planet" "rackunit" "typed" "picturing-programs" "openssl"
 >> > "swindle" "redex" "typed-racket" "json" "compiler" "eopl" "racklog" "mrlib"
 >> > "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" "wxme" "net"
 >> > "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace" "scheme"
 >> > "stepper" "html" "drscheme" "plot" "handin-client" "reader" "mzlib" "help"
 >> > "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline" "raco"
 >> > "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket"
 >> > "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!
 >> >  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" "planet2"))
 >> >
 >> > Computer Language: (("Determine language from source") (#(#t print
 >> > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >> > (test))))
 >> >
 >
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, Stephen Chang <stchang@ccs.neu.edu>,
        bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Wed, 10 Apr 2013 19:13:05 -0500

 --e89a8ff1cf8692d33204da0aa6ce
 Content-Type: text/plain; charset=UTF-8
 
 Ah, right thanks. And I love the fact that this type checks!
 
 #lang typed/racket
 
 (struct: (A) S ([v : A]))
 
 (define-type Tof (All (A) (U (-> A) (S A))))
 
 (: f : (All (A) ((Tof A) -> A)))
 (define (f t)
   (cond
     [(and (S? t) (procedure? t))
      (error 'no!)]
     [(procedure? t)
      (t)]
     [else
      (S-v t)]))
 
 
 
 On Wed, Apr 10, 2013 at 6:47 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu>wrote:
 
 > The Given: line is printing poorly, which is a bug.
 >
 > The point about prop:procedure still holds here.  Consider a substruct
 > of S which produces Strings from the procedure behavior, but whose v
 > component is an Integer.  That would be an element of (Tof String),
 > but would return an Integer from your version of `f`.
 >
 > Arbitrary extensibility is quite tricky to reason about soundly.
 >
 > Sam
 >
 
 --e89a8ff1cf8692d33204da0aa6ce
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Ah, right thanks. And I love the fact that this type check=
 s!<div><br></div><div><div>#lang typed/racket</div><div><br></div><div>(str=
 uct: (A) S ([v : A]))</div><div><br></div><div>(define-type Tof (All (A) (U=
  (-&gt; A) (S A))))</div>
 <div><br></div><div>(: f : (All (A) ((Tof A) -&gt; A)))</div><div>(define (=
 f t)</div><div>=C2=A0 (cond</div><div>=C2=A0 =C2=A0 [(and (S? t) (procedure=
 ? t))</div><div>=C2=A0 =C2=A0 =C2=A0(error &#39;no!)]</div><div>=C2=A0 =C2=
 =A0 [(procedure? t)</div><div>=C2=A0 =C2=A0 =C2=A0(t)]</div>
 <div>=C2=A0 =C2=A0 [else</div><div>=C2=A0 =C2=A0 =C2=A0(S-v t)]))</div><div=
 ><br></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On=
  Wed, Apr 10, 2013 at 6:47 PM, Sam Tobin-Hochstadt <span dir=3D"ltr">&lt;<a=
  href=3D"mailto:samth@ccs.neu.edu" target=3D"_blank">samth@ccs.neu.edu</a>&=
 gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
 left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;p=
 adding-left:1ex">The Given: line is printing poorly, which is a bug.<br>
 <br>
 The point about prop:procedure still holds here. =C2=A0Consider a substruct=
 <br>
 of S which produces Strings from the procedure behavior, but whose v<br>
 component is an Integer. =C2=A0That would be an element of (Tof String),<br=
 >
 but would return an Integer from your version of `f`.<br>
 <br>
 Arbitrary extensibility is quite tricky to reason about soundly.<br>
 <span class=3D""><font color=3D"#888888"><br>
 Sam<br></font></span></blockquote></div><br></div></div></div>
 
 --e89a8ff1cf8692d33204da0aa6ce--
From: Stephen Chang <stchang216@gmail.com>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Wed, 10 Apr 2013 20:55:13 -0400

 On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > This is working as intended, it was a recent soundness fix. You could
 > have a substructure of S with prop:procedure which would return #t to
 > procedure?, and thus the type system cannot soundly do what you want
 > it to do.
 
 But in this case, prop:procedure for the struct is #f. Maybe this is a
 dumb question but is there a way for typed racket to know when
 prop:procedure is #t or #f and distinguish accordingly?
 
 
 
 >
 > On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13680
 >>
 >> Reported by Stephen Chang for release: 5.3.3.8
 >>
 >> *** Description:
 >> The following program:
 >>
 >> #lang typed/racket
 >>
 >> (struct: (A) S ([v : A]))
 >>
 >> (define-type Tof (All (A) (U (-> A) (S A))))
 >>
 >> (: f : (All (A) ((Tof A) -> A)))
 >> (define (f t)
 >>   (if (procedure? t)
 >>       (t)
 >>       (S-v t)))
 >>
 >>
 >> results in the error:
 >>
 >> Type Checker: Cannot apply expression of type Procedure, since it is not a function type in: (t)
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:42:16 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 371517240
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >> raco pkg (show):
 >> Installation-wide:
 >>  [none]
 >> User-specific, all-version:
 >>  [none]
 >> User-specific, version-specific (5.3.3.8):
 >>  [none]
 >>
 >>
 >>
 >> Collections:
 >> ("/home/stchang/.racket/5.3.3.8/collects"
 >>  ("info-domain"))
 >> ("/home/stchang/plt/collects"
 >>  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile" "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer" "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" "mred" "framework" "schemeunit" "scribble" "scribblings" "compatibility" "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" "tests" "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict" "repo-time-stamp" "parser-tools" "planet" "rackunit" "typed" "picturing-programs" "openssl" "swindle" "redex" "typed-racket" "json" "compiler" "eopl" "racklog" "mrlib" "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" "wxme" "net" "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace" "scheme" "stepper" "html" "drscheme" "plot" "handin-client" "reader" "mzlib" "help" "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline" "raco" "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket" "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!
 >>  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" "planet2"))
 >>
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test))))
 >>
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stephen Chang <stchang216@gmail.com>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Wed, 10 Apr 2013 20:00:46 -0500

 --bcaec5523a561972d804da0b512f
 Content-Type: text/plain; charset=UTF-8
 
 There might be a substruct. That is, you can create a struct that would
 return #t from S? that has prop:procedure with a subsequent struct
 declaration.
 
 Robby
 
 
 On Wed, Apr 10, 2013 at 7:55 PM, Stephen Chang <stchang216@gmail.com> wrote:
 
 > On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 > > This is working as intended, it was a recent soundness fix. You could
 > > have a substructure of S with prop:procedure which would return #t to
 > > procedure?, and thus the type system cannot soundly do what you want
 > > it to do.
 >
 > But in this case, prop:procedure for the struct is #f. Maybe this is a
 > dumb question but is there a way for typed racket to know when
 > prop:procedure is #t or #f and distinguish accordingly?
 >
 >
 >
 > >
 > > On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13680
 > >>
 > >> Reported by Stephen Chang for release: 5.3.3.8
 > >>
 > >> *** Description:
 > >> The following program:
 > >>
 > >> #lang typed/racket
 > >>
 > >> (struct: (A) S ([v : A]))
 > >>
 > >> (define-type Tof (All (A) (U (-> A) (S A))))
 > >>
 > >> (: f : (All (A) ((Tof A) -> A)))
 > >> (define (f t)
 > >>   (if (procedure? t)
 > >>       (t)
 > >>       (S-v t)))
 > >>
 > >>
 > >> results in the error:
 > >>
 > >> Type Checker: Cannot apply expression of type Procedure, since it is
 > not a function type in: (t)
 > >>
 > >> *** How to repeat:
 > >>
 > >>
 > >> *** Environment:
 > >> unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:42:16
 > UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > (get-display-depth) = 32
 > >> Human Language: english
 > >> (current-memory-use) 371517240
 > >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 > (links #:user? #f #:root? #t) = ()
 > >> raco pkg (show):
 > >> Installation-wide:
 > >>  [none]
 > >> User-specific, all-version:
 > >>  [none]
 > >> User-specific, version-specific (5.3.3.8):
 > >>  [none]
 > >>
 > >>
 > >>
 > >> Collections:
 > >> ("/home/stchang/.racket/5.3.3.8/collects"
 > >>  ("info-domain"))
 > >> ("/home/stchang/plt/collects"
 > >>  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile"
 > "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer"
 > "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" "mred"
 > "framework" "schemeunit" "scribble" "scribblings" "compatibility"
 > "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" "tests"
 > "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict"
 > "repo-time-stamp" "parser-tools" "planet" "rackunit" "typed"
 > "picturing-programs" "openssl" "swindle" "redex" "typed-racket" "json"
 > "compiler" "eopl" "racklog" "mrlib" "xrepl" "db" "gui-debugger" "browser"
 > "config" "slideshow" "wxme" "net" "defaults" "realm" "rnrs" "algol60"
 > "syntax" "honu" "errortrace" "scheme" "stepper" "html" "drscheme" "plot"
 > "handin-client" "reader" "mzlib" "help" "trace" "scriblib" "teachpack"
 > "srfi" "handin-server" "readline" "raco" "htdp" "pkg" "r6rs" "web-server"
 > "plai" "data" "meta" "drracket" "deinprogramm" "at-exp" "preprocessor"
 > "games" "mysterx" "stri!
 > >>  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" "planet2"))
 > >>
 > >> Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 > (test))))
 > >>
 >
 
 --bcaec5523a561972d804da0b512f
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">There might be a substruct. That is, you can create a stru=
 ct that would return #t from S? that has prop:procedure with a subsequent s=
 truct declaration.<div><br>Robby</div></div><div class=3D"gmail_extra"><br>=
 <br>
 <div class=3D"gmail_quote">On Wed, Apr 10, 2013 at 7:55 PM, Stephen Chang <=
 span dir=3D"ltr">&lt;<a href=3D"mailto:stchang216@gmail.com" target=3D"_bla=
 nk">stchang216@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmai=
 l_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=
 :1ex">
 <div class=3D"im">On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson &lt;<a href=
 =3D"mailto:eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<=
 br>
 </div><div class=3D"im">&gt; This is working as intended, it was a recent s=
 oundness fix. You could<br>
 &gt; have a substructure of S with prop:procedure which would return #t to<=
 br>
 &gt; procedure?, and thus the type system cannot soundly do what you want<b=
 r>
 &gt; it to do.<br>
 <br>
 </div>But in this case, prop:procedure for the struct is #f. Maybe this is =
 a<br>
 dumb question but is there a way for typed racket to know when<br>
 prop:procedure is #t or #f and distinguish accordingly?<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 <br>
 <br>
 &gt;<br>
 &gt; On Wed, Apr 10, 2013 at 3:48 PM, =C2=A0&lt;<a href=3D"mailto:stchang@c=
 cs.neu.edu">stchang@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&am=
 p;pr=3D13680" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D13680</a><br>
 &gt;&gt;<br>
 &gt;&gt; Reported by Stephen Chang for release: 5.3.3.8<br>
 &gt;&gt;<br>
 &gt;&gt; *** Description:<br>
 &gt;&gt; The following program:<br>
 &gt;&gt;<br>
 &gt;&gt; #lang typed/racket<br>
 &gt;&gt;<br>
 &gt;&gt; (struct: (A) S ([v : A]))<br>
 &gt;&gt;<br>
 &gt;&gt; (define-type Tof (All (A) (U (-&gt; A) (S A))))<br>
 &gt;&gt;<br>
 &gt;&gt; (: f : (All (A) ((Tof A) -&gt; A)))<br>
 &gt;&gt; (define (f t)<br>
 &gt;&gt; =C2=A0 (if (procedure? t)<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (t)<br>
 &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (S-v t)))<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; results in the error:<br>
 &gt;&gt;<br>
 &gt;&gt; Type Checker: Cannot apply expression of type Procedure, since it =
 is not a function type in: (t)<br>
 &gt;&gt;<br>
 &gt;&gt; *** How to repeat:<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; *** Environment:<br>
 &gt;&gt; unix &quot;Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5=
  17:42:16 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-linux/3m) (=
 get-display-depth) =3D 32<br>
 &gt;&gt; Human Language: english<br>
 &gt;&gt; (current-memory-use) 371517240<br>
 &gt;&gt; Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #=
 t) =3D (); (links #:user? #f #:root? #t) =3D ()<br>
 &gt;&gt; raco pkg (show):<br>
 &gt;&gt; Installation-wide:<br>
 &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; User-specific, all-version:<br>
 &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; User-specific, version-specific (5.3.3.8):<br>
 &gt;&gt; =C2=A0[none]<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; Collections:<br>
 &gt;&gt; (&quot;/home/stchang/.racket/<a href=3D"http://5.3.3.8/collects" t=
 arget=3D"_blank">5.3.3.8/collects</a>&quot;<br>
 &gt;&gt; =C2=A0(&quot;info-domain&quot;))<br>
 &gt;&gt; (&quot;/home/stchang/plt/collects&quot;<br>
 &gt;&gt; =C2=A0(&quot;math&quot; &quot;datalog&quot; &quot;2htdp&quot; &quo=
 t;hierlist&quot; &quot;make&quot; &quot;launcher&quot; &quot;profile&quot; =
 &quot;unstable&quot; &quot;s-exp&quot; &quot;file&quot; &quot;info-domain&q=
 uot; &quot;setup&quot; &quot;future-visualizer&quot; &quot;macro-debugger&q=
 uot; &quot;version&quot; &quot;.gitignore&quot; &quot;dynext&quot; &quot;ty=
 ped-scheme&quot; &quot;mred&quot; &quot;framework&quot; &quot;schemeunit&qu=
 ot; &quot;scribble&quot; &quot;scribblings&quot; &quot;compatibility&quot; =
 &quot;embedded-gui&quot; &quot;racket&quot; &quot;syntax-color&quot; &quot;=
 graphics&quot; &quot;sgl&quot; &quot;lang&quot; &quot;tests&quot; &quot;r5r=
 s&quot; &quot;mzcom&quot; &quot;frtime&quot; &quot;mzscheme&quot; &quot;ico=
 ns&quot; &quot;xml&quot; &quot;texpict&quot; &quot;repo-time-stamp&quot; &q=
 uot;parser-tools&quot; &quot;planet&quot; &quot;rackunit&quot; &quot;typed&=
 quot; &quot;picturing-programs&quot; &quot;openssl&quot; &quot;swindle&quot=
 ; &quot;redex&quot; &quot;typed-racket&quot; &quot;json&quot; &quot;compile=
 r&quot; &quot;eopl&quot; &quot;racklog&quot; &quot;mrlib&quot; &quot;xrepl&=
 quot; &quot;db&quot; &quot;gui-debugger&quot; &quot;browser&quot; &quot;con=
 fig&quot; &quot;slideshow&quot; &quot;wxme&quot; &quot;net&quot; &quot;defa=
 ults&quot; &quot;realm&quot; &quot;rnrs&quot; &quot;algol60&quot; &quot;syn=
 tax&quot; &quot;honu&quot; &quot;errortrace&quot; &quot;scheme&quot; &quot;=
 stepper&quot; &quot;html&quot; &quot;drscheme&quot; &quot;plot&quot; &quot;=
 handin-client&quot; &quot;reader&quot; &quot;mzlib&quot; &quot;help&quot; &=
 quot;trace&quot; &quot;scriblib&quot; &quot;teachpack&quot; &quot;srfi&quot=
 ; &quot;handin-server&quot; &quot;readline&quot; &quot;raco&quot; &quot;htd=
 p&quot; &quot;pkg&quot; &quot;r6rs&quot; &quot;web-server&quot; &quot;plai&=
 quot; &quot;data&quot; &quot;meta&quot; &quot;drracket&quot; &quot;deinprog=
 ramm&quot; &quot;at-exp&quot; &quot;preprocessor&quot; &quot;games&quot; &q=
 uot;mysterx&quot; &quot;stri!<br>
 
 &gt;&gt; =C2=A0ng-constants&quot; &quot;test-engine&quot; &quot;slatex&quot=
 ; &quot;lazy&quot; &quot;images&quot; &quot;ffi&quot; &quot;planet2&quot;))=
 <br>
 &gt;&gt;<br>
 &gt;&gt; Computer Language: ((&quot;Determine language from source&quot;) (=
 #(#t print mixed-fraction-e #f #t debug) (default) #() &quot;#lang racket\n=
 &quot; #t #t ((main) (test))))<br>
 &gt;&gt;<br>
 </div></div></blockquote></div><br></div>
 
 --bcaec5523a561972d804da0b512f--
From: Stephen Chang <stchang@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Wed, 10 Apr 2013 21:03:38 -0400

 On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > There might be a substruct. That is, you can create a struct that would
 > return #t from S? that has prop:procedure with a subsequent struct
 > declaration.
 
 I see.
 
 (And I did not see your example before my last reply but that is a
 nice way to get around the restriction.)
 
 
 
 
 
 >
 > Robby
 >
 >
 > On Wed, Apr 10, 2013 at 7:55 PM, Stephen Chang <stchang216@gmail.com> wrote:
 >>
 >> On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson <eric.n.dobson@gmail.com>
 >> wrote:
 >> > This is working as intended, it was a recent soundness fix. You could
 >> > have a substructure of S with prop:procedure which would return #t to
 >> > procedure?, and thus the type system cannot soundly do what you want
 >> > it to do.
 >>
 >> But in this case, prop:procedure for the struct is #f. Maybe this is a
 >> dumb question but is there a way for typed racket to know when
 >> prop:procedure is #t or #f and distinguish accordingly?
 >>
 >>
 >>
 >> >
 >> > On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 >> >> A new problem report is waiting at
 >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13680
 >> >>
 >> >> Reported by Stephen Chang for release: 5.3.3.8
 >> >>
 >> >> *** Description:
 >> >> The following program:
 >> >>
 >> >> #lang typed/racket
 >> >>
 >> >> (struct: (A) S ([v : A]))
 >> >>
 >> >> (define-type Tof (All (A) (U (-> A) (S A))))
 >> >>
 >> >> (: f : (All (A) ((Tof A) -> A)))
 >> >> (define (f t)
 >> >>   (if (procedure? t)
 >> >>       (t)
 >> >>       (S-v t)))
 >> >>
 >> >>
 >> >> results in the error:
 >> >>
 >> >> Type Checker: Cannot apply expression of type Procedure, since it is
 >> >> not a function type in: (t)
 >> >>
 >> >> *** How to repeat:
 >> >>
 >> >>
 >> >> *** Environment:
 >> >> unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:42:16
 >> >> UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >> >> (get-display-depth) = 32
 >> >> Human Language: english
 >> >> (current-memory-use) 371517240
 >> >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >> >> (links #:user? #f #:root? #t) = ()
 >> >> raco pkg (show):
 >> >> Installation-wide:
 >> >>  [none]
 >> >> User-specific, all-version:
 >> >>  [none]
 >> >> User-specific, version-specific (5.3.3.8):
 >> >>  [none]
 >> >>
 >> >>
 >> >>
 >> >> Collections:
 >> >> ("/home/stchang/.racket/5.3.3.8/collects"
 >> >>  ("info-domain"))
 >> >> ("/home/stchang/plt/collects"
 >> >>  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile"
 >> >> "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer"
 >> >> "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" "mred"
 >> >> "framework" "schemeunit" "scribble" "scribblings" "compatibility"
 >> >> "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" "tests"
 >> >> "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict" "repo-time-stamp"
 >> >> "parser-tools" "planet" "rackunit" "typed" "picturing-programs" "openssl"
 >> >> "swindle" "redex" "typed-racket" "json" "compiler" "eopl" "racklog" "mrlib"
 >> >> "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" "wxme" "net"
 >> >> "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace" "scheme"
 >> >> "stepper" "html" "drscheme" "plot" "handin-client" "reader" "mzlib" "help"
 >> >> "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline" "raco"
 >> >> "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket"
 >> >> "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!
 >> >>  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" "planet2"))
 >> >>
 >> >> Computer Language: (("Determine language from source") (#(#t print
 >> >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)
 >> >> (test))))
 >> >>
 >
 >
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Stephen Chang <stchang@ccs.neu.edu>
Cc: endobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Wed, 10 Apr 2013 21:06:12 -0400

 --047d7b34308881753604da0b648b
 Content-Type: text/plain; charset=UTF-8
 
 We could think about adding a feature to struct that specified that
 substructs were not allowed.  Then TR could do a better job here.
  On Apr 10, 2013 9:03 PM, "Stephen Chang" <stchang@ccs.neu.edu> wrote:
 
 > On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > There might be a substruct. That is, you can create a struct that would
 > > return #t from S? that has prop:procedure with a subsequent struct
 > > declaration.
 >
 > I see.
 >
 > (And I did not see your example before my last reply but that is a
 > nice way to get around the restriction.)
 >
 >
 >
 >
 >
 > >
 > > Robby
 > >
 > >
 > > On Wed, Apr 10, 2013 at 7:55 PM, Stephen Chang <stchang216@gmail.com>
 > wrote:
 > >>
 > >> On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > >> wrote:
 > >> > This is working as intended, it was a recent soundness fix. You could
 > >> > have a substructure of S with prop:procedure which would return #t to
 > >> > procedure?, and thus the type system cannot soundly do what you want
 > >> > it to do.
 > >>
 > >> But in this case, prop:procedure for the struct is #f. Maybe this is a
 > >> dumb question but is there a way for typed racket to know when
 > >> prop:procedure is #t or #f and distinguish accordingly?
 > >>
 > >>
 > >>
 > >> >
 > >> > On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 > >> >> A new problem report is waiting at
 > >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13680
 > >> >>
 > >> >> Reported by Stephen Chang for release: 5.3.3.8
 > >> >>
 > >> >> *** Description:
 > >> >> The following program:
 > >> >>
 > >> >> #lang typed/racket
 > >> >>
 > >> >> (struct: (A) S ([v : A]))
 > >> >>
 > >> >> (define-type Tof (All (A) (U (-> A) (S A))))
 > >> >>
 > >> >> (: f : (All (A) ((Tof A) -> A)))
 > >> >> (define (f t)
 > >> >>   (if (procedure? t)
 > >> >>       (t)
 > >> >>       (S-v t)))
 > >> >>
 > >> >>
 > >> >> results in the error:
 > >> >>
 > >> >> Type Checker: Cannot apply expression of type Procedure, since it is
 > >> >> not a function type in: (t)
 > >> >>
 > >> >> *** How to repeat:
 > >> >>
 > >> >>
 > >> >> *** Environment:
 > >> >> unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5
 > 17:42:16
 > >> >> UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > >> >> (get-display-depth) = 32
 > >> >> Human Language: english
 > >> >> (current-memory-use) 371517240
 > >> >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) =
 > ();
 > >> >> (links #:user? #f #:root? #t) = ()
 > >> >> raco pkg (show):
 > >> >> Installation-wide:
 > >> >>  [none]
 > >> >> User-specific, all-version:
 > >> >>  [none]
 > >> >> User-specific, version-specific (5.3.3.8):
 > >> >>  [none]
 > >> >>
 > >> >>
 > >> >>
 > >> >> Collections:
 > >> >> ("/home/stchang/.racket/5.3.3.8/collects"
 > >> >>  ("info-domain"))
 > >> >> ("/home/stchang/plt/collects"
 > >> >>  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile"
 > >> >> "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer"
 > >> >> "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme"
 > "mred"
 > >> >> "framework" "schemeunit" "scribble" "scribblings" "compatibility"
 > >> >> "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang"
 > "tests"
 > >> >> "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict"
 > "repo-time-stamp"
 > >> >> "parser-tools" "planet" "rackunit" "typed" "picturing-programs"
 > "openssl"
 > >> >> "swindle" "redex" "typed-racket" "json" "compiler" "eopl" "racklog"
 > "mrlib"
 > >> >> "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" "wxme"
 > "net"
 > >> >> "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace"
 > "scheme"
 > >> >> "stepper" "html" "drscheme" "plot" "handin-client" "reader" "mzlib"
 > "help"
 > >> >> "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline"
 > "raco"
 > >> >> "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket"
 > >> >> "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!
 > >> >>  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi"
 > "planet2"))
 > >> >>
 > >> >> Computer Language: (("Determine language from source") (#(#t print
 > >> >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 > ((main)
 > >> >> (test))))
 > >> >>
 > >
 > >
 >
 
 --047d7b34308881753604da0b648b
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <p dir=3D"ltr">We could think about adding a feature to struct that specifi=
 ed that substructs were not allowed.=C2=A0 Then TR could do a better job he=
 re.<br>
 </p>
 <div class=3D"gmail_quote">On Apr 10, 2013 9:03 PM, &quot;Stephen Chang&quo=
 t; &lt;<a href=3D"mailto:stchang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt; w=
 rote:<br type=3D"attribution"><blockquote class=3D"gmail_quote" style=3D"ma=
 rgin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt; There might be a substruct. That is, you can create a struct that woul=
 d<br>
 &gt; return #t from S? that has prop:procedure with a subsequent struct<br>
 &gt; declaration.<br>
 <br>
 I see.<br>
 <br>
 (And I did not see your example before my last reply but that is a<br>
 nice way to get around the restriction.)<br>
 <br>
 <br>
 <br>
 <br>
 <br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Wed, Apr 10, 2013 at 7:55 PM, Stephen Chang &lt;<a href=3D"mailto:s=
 tchang216@gmail.com">stchang216@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson &lt;<a href=3D"mailto=
 :eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt;<br>
 &gt;&gt; wrote:<br>
 &gt;&gt; &gt; This is working as intended, it was a recent soundness fix. Y=
 ou could<br>
 &gt;&gt; &gt; have a substructure of S with prop:procedure which would retu=
 rn #t to<br>
 &gt;&gt; &gt; procedure?, and thus the type system cannot soundly do what y=
 ou want<br>
 &gt;&gt; &gt; it to do.<br>
 &gt;&gt;<br>
 &gt;&gt; But in this case, prop:procedure for the struct is #f. Maybe this =
 is a<br>
 &gt;&gt; dumb question but is there a way for typed racket to know when<br>
 &gt;&gt; prop:procedure is #t or #f and distinguish accordingly?<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Wed, Apr 10, 2013 at 3:48 PM, =C2=A0&lt;<a href=3D"mailto:=
 stchang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D13680" target=3D"_blank">http://bugs.racket-lang.org/query=
 /?cmd=3Dview&amp;pr=3D13680</a><br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Reported by Stephen Chang for release: 5.3.3.8<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Description:<br>
 &gt;&gt; &gt;&gt; The following program:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; #lang typed/racket<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (struct: (A) S ([v : A]))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (define-type Tof (All (A) (U (-&gt; A) (S A))))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (: f : (All (A) ((Tof A) -&gt; A)))<br>
 &gt;&gt; &gt;&gt; (define (f t)<br>
 &gt;&gt; &gt;&gt; =C2=A0 (if (procedure? t)<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (t)<br>
 &gt;&gt; &gt;&gt; =C2=A0 =C2=A0 =C2=A0 (S-v t)))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; results in the error:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Type Checker: Cannot apply expression of type Procedure, =
 since it is<br>
 &gt;&gt; &gt;&gt; not a function type in: (t)<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** How to repeat:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Environment:<br>
 &gt;&gt; &gt;&gt; unix &quot;Linux caprica 3.2.0-35-generic #55-Ubuntu SMP =
 Wed Dec 5 17:42:16<br>
 &gt;&gt; &gt;&gt; UTC 2012 x86_64 x86_64 x86_64 GNU/Linux&quot; (x86_64-lin=
 ux/3m)<br>
 &gt;&gt; &gt;&gt; (get-display-depth) =3D 32<br>
 &gt;&gt; &gt;&gt; Human Language: english<br>
 &gt;&gt; &gt;&gt; (current-memory-use) 371517240<br>
 &gt;&gt; &gt;&gt; Links: (links) =3D (); (links #:user? #f) =3D (); (links =
 #:root? #t) =3D ();<br>
 &gt;&gt; &gt;&gt; (links #:user? #f #:root? #t) =3D ()<br>
 &gt;&gt; &gt;&gt; raco pkg (show):<br>
 &gt;&gt; &gt;&gt; Installation-wide:<br>
 &gt;&gt; &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; &gt;&gt; User-specific, all-version:<br>
 &gt;&gt; &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; &gt;&gt; User-specific, version-specific (5.3.3.8):<br>
 &gt;&gt; &gt;&gt; =C2=A0[none]<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Collections:<br>
 &gt;&gt; &gt;&gt; (&quot;/home/stchang/.racket/<a href=3D"http://5.3.3.8/co=
 llects" target=3D"_blank">5.3.3.8/collects</a>&quot;<br>
 &gt;&gt; &gt;&gt; =C2=A0(&quot;info-domain&quot;))<br>
 &gt;&gt; &gt;&gt; (&quot;/home/stchang/plt/collects&quot;<br>
 &gt;&gt; &gt;&gt; =C2=A0(&quot;math&quot; &quot;datalog&quot; &quot;2htdp&q=
 uot; &quot;hierlist&quot; &quot;make&quot; &quot;launcher&quot; &quot;profi=
 le&quot;<br>
 &gt;&gt; &gt;&gt; &quot;unstable&quot; &quot;s-exp&quot; &quot;file&quot; &=
 quot;info-domain&quot; &quot;setup&quot; &quot;future-visualizer&quot;<br>
 &gt;&gt; &gt;&gt; &quot;macro-debugger&quot; &quot;version&quot; &quot;.git=
 ignore&quot; &quot;dynext&quot; &quot;typed-scheme&quot; &quot;mred&quot;<b=
 r>
 &gt;&gt; &gt;&gt; &quot;framework&quot; &quot;schemeunit&quot; &quot;scribb=
 le&quot; &quot;scribblings&quot; &quot;compatibility&quot;<br>
 &gt;&gt; &gt;&gt; &quot;embedded-gui&quot; &quot;racket&quot; &quot;syntax-=
 color&quot; &quot;graphics&quot; &quot;sgl&quot; &quot;lang&quot; &quot;tes=
 ts&quot;<br>
 &gt;&gt; &gt;&gt; &quot;r5rs&quot; &quot;mzcom&quot; &quot;frtime&quot; &qu=
 ot;mzscheme&quot; &quot;icons&quot; &quot;xml&quot; &quot;texpict&quot; &qu=
 ot;repo-time-stamp&quot;<br>
 &gt;&gt; &gt;&gt; &quot;parser-tools&quot; &quot;planet&quot; &quot;rackuni=
 t&quot; &quot;typed&quot; &quot;picturing-programs&quot; &quot;openssl&quot=
 ;<br>
 &gt;&gt; &gt;&gt; &quot;swindle&quot; &quot;redex&quot; &quot;typed-racket&=
 quot; &quot;json&quot; &quot;compiler&quot; &quot;eopl&quot; &quot;racklog&=
 quot; &quot;mrlib&quot;<br>
 &gt;&gt; &gt;&gt; &quot;xrepl&quot; &quot;db&quot; &quot;gui-debugger&quot;=
  &quot;browser&quot; &quot;config&quot; &quot;slideshow&quot; &quot;wxme&qu=
 ot; &quot;net&quot;<br>
 &gt;&gt; &gt;&gt; &quot;defaults&quot; &quot;realm&quot; &quot;rnrs&quot; &=
 quot;algol60&quot; &quot;syntax&quot; &quot;honu&quot; &quot;errortrace&quo=
 t; &quot;scheme&quot;<br>
 &gt;&gt; &gt;&gt; &quot;stepper&quot; &quot;html&quot; &quot;drscheme&quot;=
  &quot;plot&quot; &quot;handin-client&quot; &quot;reader&quot; &quot;mzlib&=
 quot; &quot;help&quot;<br>
 &gt;&gt; &gt;&gt; &quot;trace&quot; &quot;scriblib&quot; &quot;teachpack&qu=
 ot; &quot;srfi&quot; &quot;handin-server&quot; &quot;readline&quot; &quot;r=
 aco&quot;<br>
 &gt;&gt; &gt;&gt; &quot;htdp&quot; &quot;pkg&quot; &quot;r6rs&quot; &quot;w=
 eb-server&quot; &quot;plai&quot; &quot;data&quot; &quot;meta&quot; &quot;dr=
 racket&quot;<br>
 &gt;&gt; &gt;&gt; &quot;deinprogramm&quot; &quot;at-exp&quot; &quot;preproc=
 essor&quot; &quot;games&quot; &quot;mysterx&quot; &quot;stri!<br>
 &gt;&gt; &gt;&gt; =C2=A0ng-constants&quot; &quot;test-engine&quot; &quot;sl=
 atex&quot; &quot;lazy&quot; &quot;images&quot; &quot;ffi&quot; &quot;planet=
 2&quot;))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Computer Language: ((&quot;Determine language from source=
 &quot;) (#(#t print<br>
 &gt;&gt; &gt;&gt; mixed-fraction-e #f #t debug) (default) #() &quot;#lang r=
 acket\n&quot; #t #t ((main)<br>
 &gt;&gt; &gt;&gt; (test))))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;<br>
 &gt;<br>
 </blockquote></div>
 
 --047d7b34308881753604da0b648b--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Stephen Chang <stchang@ccs.neu.edu>, endobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions and structs
Date: Fri, 12 Apr 2013 16:43:10 -0400

 --Apple-Mail=_60CE53DC-F7DC-4A68-9E95-AAC2ADF49B7B
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 
 #:final?=20
 
 On Apr 10, 2013, at 9:06 PM, Sam Tobin-Hochstadt wrote:
 
 > We could think about adding a feature to struct that specified that =
 substructs were not allowed.  Then TR could do a better job here.
 > On Apr 10, 2013 9:03 PM, "Stephen Chang" <stchang@ccs.neu.edu> wrote:
 > On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > There might be a substruct. That is, you can create a struct that =
 would
 > > return #t from S? that has prop:procedure with a subsequent struct
 > > declaration.
 >=20
 > I see.
 >=20
 > (And I did not see your example before my last reply but that is a
 > nice way to get around the restriction.)
 >=20
 >=20
 >=20
 >=20
 >=20
 > >
 > > Robby
 > >
 > >
 > > On Wed, Apr 10, 2013 at 7:55 PM, Stephen Chang =
 <stchang216@gmail.com> wrote:
 > >>
 > >> On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson =
 <eric.n.dobson@gmail.com>
 > >> wrote:
 > >> > This is working as intended, it was a recent soundness fix. You =
 could
 > >> > have a substructure of S with prop:procedure which would return =
 #t to
 > >> > procedure?, and thus the type system cannot soundly do what you =
 want
 > >> > it to do.
 > >>
 > >> But in this case, prop:procedure for the struct is #f. Maybe this =
 is a
 > >> dumb question but is there a way for typed racket to know when
 > >> prop:procedure is #t or #f and distinguish accordingly?
 > >>
 > >>
 > >>
 > >> >
 > >> > On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 > >> >> A new problem report is waiting at
 > >> >>   http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D13680
 > >> >>
 > >> >> Reported by Stephen Chang for release: 5.3.3.8
 > >> >>
 > >> >> *** Description:
 > >> >> The following program:
 > >> >>
 > >> >> #lang typed/racket
 > >> >>
 > >> >> (struct: (A) S ([v : A]))
 > >> >>
 > >> >> (define-type Tof (All (A) (U (-> A) (S A))))
 > >> >>
 > >> >> (: f : (All (A) ((Tof A) -> A)))
 > >> >> (define (f t)
 > >> >>   (if (procedure? t)
 > >> >>       (t)
 > >> >>       (S-v t)))
 > >> >>
 > >> >>
 > >> >> results in the error:
 > >> >>
 > >> >> Type Checker: Cannot apply expression of type Procedure, since =
 it is
 > >> >> not a function type in: (t)
 > >> >>
 > >> >> *** How to repeat:
 > >> >>
 > >> >>
 > >> >> *** Environment:
 > >> >> unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 =
 17:42:16
 > >> >> UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 > >> >> (get-display-depth) =3D 32
 > >> >> Human Language: english
 > >> >> (current-memory-use) 371517240
 > >> >> Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? =
 #t) =3D ();
 > >> >> (links #:user? #f #:root? #t) =3D ()
 > >> >> raco pkg (show):
 > >> >> Installation-wide:
 > >> >>  [none]
 > >> >> User-specific, all-version:
 > >> >>  [none]
 > >> >> User-specific, version-specific (5.3.3.8):
 > >> >>  [none]
 > >> >>
 > >> >>
 > >> >>
 > >> >> Collections:
 > >> >> ("/home/stchang/.racket/5.3.3.8/collects"
 > >> >>  ("info-domain"))
 > >> >> ("/home/stchang/plt/collects"
 > >> >>  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" =
 "profile"
 > >> >> "unstable" "s-exp" "file" "info-domain" "setup" =
 "future-visualizer"
 > >> >> "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" =
 "mred"
 > >> >> "framework" "schemeunit" "scribble" "scribblings" =
 "compatibility"
 > >> >> "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" =
 "tests"
 > >> >> "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict" =
 "repo-time-stamp"
 > >> >> "parser-tools" "planet" "rackunit" "typed" "picturing-programs" =
 "openssl"
 > >> >> "swindle" "redex" "typed-racket" "json" "compiler" "eopl" =
 "racklog" "mrlib"
 > >> >> "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" =
 "wxme" "net"
 > >> >> "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace" =
 "scheme"
 > >> >> "stepper" "html" "drscheme" "plot" "handin-client" "reader" =
 "mzlib" "help"
 > >> >> "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline" =
 "raco"
 > >> >> "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket"
 > >> >> "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!
 > >> >>  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" =
 "planet2"))
 > >> >>
 > >> >> Computer Language: (("Determine language from source") (#(#t =
 print
 > >> >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t =
 #t ((main)
 > >> >> (test))))
 > >> >>
 > >
 > >
 
 
 --Apple-Mail=_60CE53DC-F7DC-4A68-9E95-AAC2ADF49B7B
 Content-Transfer-Encoding: 7bit
 Content-Type: text/html;
 	charset=us-ascii
 
 <html><head></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; "><div><br></div><div>#:final?&nbsp;</div><br><div><div>On Apr 10, 2013, at 9:06 PM, Sam Tobin-Hochstadt wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite"><p dir="ltr">We could think about adding a feature to struct that specified that substructs were not allowed.&nbsp; Then TR could do a better job here.<br>
 </p>
 <div class="gmail_quote">On Apr 10, 2013 9:03 PM, "Stephen Chang" &lt;<a href="mailto:stchang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt; wrote:<br type="attribution"><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler<br>
 &lt;<a href="mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt; There might be a substruct. That is, you can create a struct that would<br>
 &gt; return #t from S? that has prop:procedure with a subsequent struct<br>
 &gt; declaration.<br>
 <br>
 I see.<br>
 <br>
 (And I did not see your example before my last reply but that is a<br>
 nice way to get around the restriction.)<br>
 <br>
 <br>
 <br>
 <br>
 <br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Wed, Apr 10, 2013 at 7:55 PM, Stephen Chang &lt;<a href="mailto:stchang216@gmail.com">stchang216@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson &lt;<a href="mailto:eric.n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt;<br>
 &gt;&gt; wrote:<br>
 &gt;&gt; &gt; This is working as intended, it was a recent soundness fix. You could<br>
 &gt;&gt; &gt; have a substructure of S with prop:procedure which would return #t to<br>
 &gt;&gt; &gt; procedure?, and thus the type system cannot soundly do what you want<br>
 &gt;&gt; &gt; it to do.<br>
 &gt;&gt;<br>
 &gt;&gt; But in this case, prop:procedure for the struct is #f. Maybe this is a<br>
 &gt;&gt; dumb question but is there a way for typed racket to know when<br>
 &gt;&gt; prop:procedure is #t or #f and distinguish accordingly?<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Wed, Apr 10, 2013 at 3:48 PM, &nbsp;&lt;<a href="mailto:stchang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; &gt;&gt; &nbsp; <a href="http://bugs.racket-lang.org/query/?cmd=view&amp;pr=13680" target="_blank">http://bugs.racket-lang.org/query/?cmd=view&amp;pr=13680</a><br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Reported by Stephen Chang for release: 5.3.3.8<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Description:<br>
 &gt;&gt; &gt;&gt; The following program:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; #lang typed/racket<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (struct: (A) S ([v : A]))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (define-type Tof (All (A) (U (-&gt; A) (S A))))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; (: f : (All (A) ((Tof A) -&gt; A)))<br>
 &gt;&gt; &gt;&gt; (define (f t)<br>
 &gt;&gt; &gt;&gt; &nbsp; (if (procedure? t)<br>
 &gt;&gt; &gt;&gt; &nbsp; &nbsp; &nbsp; (t)<br>
 &gt;&gt; &gt;&gt; &nbsp; &nbsp; &nbsp; (S-v t)))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; results in the error:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Type Checker: Cannot apply expression of type Procedure, since it is<br>
 &gt;&gt; &gt;&gt; not a function type in: (t)<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** How to repeat:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Environment:<br>
 &gt;&gt; &gt;&gt; unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5 17:42:16<br>
 &gt;&gt; &gt;&gt; UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)<br>
 &gt;&gt; &gt;&gt; (get-display-depth) = 32<br>
 &gt;&gt; &gt;&gt; Human Language: english<br>
 &gt;&gt; &gt;&gt; (current-memory-use) 371517240<br>
 &gt;&gt; &gt;&gt; Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();<br>
 &gt;&gt; &gt;&gt; (links #:user? #f #:root? #t) = ()<br>
 &gt;&gt; &gt;&gt; raco pkg (show):<br>
 &gt;&gt; &gt;&gt; Installation-wide:<br>
 &gt;&gt; &gt;&gt; &nbsp;[none]<br>
 &gt;&gt; &gt;&gt; User-specific, all-version:<br>
 &gt;&gt; &gt;&gt; &nbsp;[none]<br>
 &gt;&gt; &gt;&gt; User-specific, version-specific (5.3.3.8):<br>
 &gt;&gt; &gt;&gt; &nbsp;[none]<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Collections:<br>
 &gt;&gt; &gt;&gt; ("/home/stchang/.racket/<a href="http://5.3.3.8/collects" target="_blank">5.3.3.8/collects</a>"<br>
 &gt;&gt; &gt;&gt; &nbsp;("info-domain"))<br>
 &gt;&gt; &gt;&gt; ("/home/stchang/plt/collects"<br>
 &gt;&gt; &gt;&gt; &nbsp;("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile"<br>
 &gt;&gt; &gt;&gt; "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer"<br>
 &gt;&gt; &gt;&gt; "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme" "mred"<br>
 &gt;&gt; &gt;&gt; "framework" "schemeunit" "scribble" "scribblings" "compatibility"<br>
 &gt;&gt; &gt;&gt; "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang" "tests"<br>
 &gt;&gt; &gt;&gt; "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict" "repo-time-stamp"<br>
 &gt;&gt; &gt;&gt; "parser-tools" "planet" "rackunit" "typed" "picturing-programs" "openssl"<br>
 &gt;&gt; &gt;&gt; "swindle" "redex" "typed-racket" "json" "compiler" "eopl" "racklog" "mrlib"<br>
 &gt;&gt; &gt;&gt; "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" "wxme" "net"<br>
 &gt;&gt; &gt;&gt; "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace" "scheme"<br>
 &gt;&gt; &gt;&gt; "stepper" "html" "drscheme" "plot" "handin-client" "reader" "mzlib" "help"<br>
 &gt;&gt; &gt;&gt; "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline" "raco"<br>
 &gt;&gt; &gt;&gt; "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket"<br>
 &gt;&gt; &gt;&gt; "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!<br>
 &gt;&gt; &gt;&gt; &nbsp;ng-constants" "test-engine" "slatex" "lazy" "images" "ffi" "planet2"))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Computer Language: (("Determine language from source") (#(#t print<br>
 &gt;&gt; &gt;&gt; mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main)<br>
 &gt;&gt; &gt;&gt; (test))))<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;<br>
 &gt;<br>
 </blockquote></div>
 </blockquote></div><br></body></html>
 --Apple-Mail=_60CE53DC-F7DC-4A68-9E95-AAC2ADF49B7B--
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Stephen Chang <stchang@ccs.neu.edu>, endobson <eric.n.dobson@gmail.com>,
        bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        nobody <nobody@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Fri, 12 Apr 2013 16:48:07 -0400

 Whatever syntax we choose is fine with me.  It'll have to be changed
 in `make-struct-type` though.
 
 On Fri, Apr 12, 2013 at 4:43 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > #:final?
 >
 > On Apr 10, 2013, at 9:06 PM, Sam Tobin-Hochstadt wrote:
 >
 > We could think about adding a feature to struct that specified that
 > substructs were not allowed.  Then TR could do a better job here.
 >
 > On Apr 10, 2013 9:03 PM, "Stephen Chang" <stchang@ccs.neu.edu> wrote:
 >>
 >> On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> > There might be a substruct. That is, you can create a struct that would
 >> > return #t from S? that has prop:procedure with a subsequent struct
 >> > declaration.
 >>
 >> I see.
 >>
 >> (And I did not see your example before my last reply but that is a
 >> nice way to get around the restriction.)
 >>
 >>
 >>
 >>
 >>
 >> >
 >> > Robby
 >> >
 >> >
 >> > On Wed, Apr 10, 2013 at 7:55 PM, Stephen Chang <stchang216@gmail.com>
 >> > wrote:
 >> >>
 >> >> On Wed, Apr 10, 2013 at 7:27 PM, Eric Dobson <eric.n.dobson@gmail.com>
 >> >> wrote:
 >> >> > This is working as intended, it was a recent soundness fix. You could
 >> >> > have a substructure of S with prop:procedure which would return #t to
 >> >> > procedure?, and thus the type system cannot soundly do what you want
 >> >> > it to do.
 >> >>
 >> >> But in this case, prop:procedure for the struct is #f. Maybe this is a
 >> >> dumb question but is there a way for typed racket to know when
 >> >> prop:procedure is #t or #f and distinguish accordingly?
 >> >>
 >> >>
 >> >>
 >> >> >
 >> >> > On Wed, Apr 10, 2013 at 3:48 PM,  <stchang@ccs.neu.edu> wrote:
 >> >> >> A new problem report is waiting at
 >> >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13680
 >> >> >>
 >> >> >> Reported by Stephen Chang for release: 5.3.3.8
 >> >> >>
 >> >> >> *** Description:
 >> >> >> The following program:
 >> >> >>
 >> >> >> #lang typed/racket
 >> >> >>
 >> >> >> (struct: (A) S ([v : A]))
 >> >> >>
 >> >> >> (define-type Tof (All (A) (U (-> A) (S A))))
 >> >> >>
 >> >> >> (: f : (All (A) ((Tof A) -> A)))
 >> >> >> (define (f t)
 >> >> >>   (if (procedure? t)
 >> >> >>       (t)
 >> >> >>       (S-v t)))
 >> >> >>
 >> >> >>
 >> >> >> results in the error:
 >> >> >>
 >> >> >> Type Checker: Cannot apply expression of type Procedure, since it is
 >> >> >> not a function type in: (t)
 >> >> >>
 >> >> >> *** How to repeat:
 >> >> >>
 >> >> >>
 >> >> >> *** Environment:
 >> >> >> unix "Linux caprica 3.2.0-35-generic #55-Ubuntu SMP Wed Dec 5
 >> >> >> 17:42:16
 >> >> >> UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m)
 >> >> >> (get-display-depth) = 32
 >> >> >> Human Language: english
 >> >> >> (current-memory-use) 371517240
 >> >> >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) =
 >> >> >> ();
 >> >> >> (links #:user? #f #:root? #t) = ()
 >> >> >> raco pkg (show):
 >> >> >> Installation-wide:
 >> >> >>  [none]
 >> >> >> User-specific, all-version:
 >> >> >>  [none]
 >> >> >> User-specific, version-specific (5.3.3.8):
 >> >> >>  [none]
 >> >> >>
 >> >> >>
 >> >> >>
 >> >> >> Collections:
 >> >> >> ("/home/stchang/.racket/5.3.3.8/collects"
 >> >> >>  ("info-domain"))
 >> >> >> ("/home/stchang/plt/collects"
 >> >> >>  ("math" "datalog" "2htdp" "hierlist" "make" "launcher" "profile"
 >> >> >> "unstable" "s-exp" "file" "info-domain" "setup" "future-visualizer"
 >> >> >> "macro-debugger" "version" ".gitignore" "dynext" "typed-scheme"
 >> >> >> "mred"
 >> >> >> "framework" "schemeunit" "scribble" "scribblings" "compatibility"
 >> >> >> "embedded-gui" "racket" "syntax-color" "graphics" "sgl" "lang"
 >> >> >> "tests"
 >> >> >> "r5rs" "mzcom" "frtime" "mzscheme" "icons" "xml" "texpict"
 >> >> >> "repo-time-stamp"
 >> >> >> "parser-tools" "planet" "rackunit" "typed" "picturing-programs"
 >> >> >> "openssl"
 >> >> >> "swindle" "redex" "typed-racket" "json" "compiler" "eopl" "racklog"
 >> >> >> "mrlib"
 >> >> >> "xrepl" "db" "gui-debugger" "browser" "config" "slideshow" "wxme"
 >> >> >> "net"
 >> >> >> "defaults" "realm" "rnrs" "algol60" "syntax" "honu" "errortrace"
 >> >> >> "scheme"
 >> >> >> "stepper" "html" "drscheme" "plot" "handin-client" "reader" "mzlib"
 >> >> >> "help"
 >> >> >> "trace" "scriblib" "teachpack" "srfi" "handin-server" "readline"
 >> >> >> "raco"
 >> >> >> "htdp" "pkg" "r6rs" "web-server" "plai" "data" "meta" "drracket"
 >> >> >> "deinprogramm" "at-exp" "preprocessor" "games" "mysterx" "stri!
 >> >> >>  ng-constants" "test-engine" "slatex" "lazy" "images" "ffi"
 >> >> >> "planet2"))
 >> >> >>
 >> >> >> Computer Language: (("Determine language from source") (#(#t print
 >> >> >> mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t
 >> >> >> ((main)
 >> >> >> (test))))
 >> >> >>
 >> >
 >> >
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        Stephen Chang <stchang@ccs.neu.edu>,
        endobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Robby Findler <robby@eecs.northwestern.edu>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Sat, 13 Apr 2013 10:45:24 -0400

 Quick and possibly misguided comment: I can see cases where it can be
 good to only forbid overriding some property, but allow extensions
 with just new fields or other properties.  So I think that should some
 restriction like this be added, it's better to put it on the property.
 Something that I can use to guarantee that some struct's behavior as a
 function is always what I put in my definition, and TR could use too.
 (And of course that behavior could depend on some other property that
 would need to be set as final too.)
 
 
 Yesterday, Sam Tobin-Hochstadt wrote:
 > Whatever syntax we choose is fine with me.  It'll have to be changed
 > in `make-struct-type` though.
 > 
 > On Fri, Apr 12, 2013 at 4:43 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 > >
 > > #:final?
 > >
 > > On Apr 10, 2013, at 9:06 PM, Sam Tobin-Hochstadt wrote:
 > >
 > > We could think about adding a feature to struct that specified that
 > > substructs were not allowed.  Then TR could do a better job here.
 > >
 > > On Apr 10, 2013 9:03 PM, "Stephen Chang" <stchang@ccs.neu.edu> wrote:
 > >>
 > >> On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler
 > >> <robby@eecs.northwestern.edu> wrote:
 > >> > There might be a substruct. That is, you can create a struct that would
 > >> > return #t from S? that has prop:procedure with a subsequent struct
 > >> > declaration.
 > >>
 > >> I see.
 > >>
 > >> (And I did not see your example before my last reply but that is a
 > >> nice way to get around the restriction.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Stephen Chang <stchang@ccs.neu.edu>,
        endobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Sat, 13 Apr 2013 09:51:24 -0500

 --e89a8fb200bc57c20004da3f2713
 Content-Type: text/plain; charset=UTF-8
 
 That sounds like a kind of general-purpose substructing contract.
 
 Right now substructs don't have many "behave the same as a parent" kinds of
 guarantees; just the field extension one. It might be nice if we trid to
 find a more general way to do that.
 
 Robby
 
 
 On Sat, Apr 13, 2013 at 9:45 AM, Eli Barzilay <eli@barzilay.org> wrote:
 
 > Quick and possibly misguided comment: I can see cases where it can be
 > good to only forbid overriding some property, but allow extensions
 > with just new fields or other properties.  So I think that should some
 > restriction like this be added, it's better to put it on the property.
 > Something that I can use to guarantee that some struct's behavior as a
 > function is always what I put in my definition, and TR could use too.
 > (And of course that behavior could depend on some other property that
 > would need to be set as final too.)
 >
 >
 > Yesterday, Sam Tobin-Hochstadt wrote:
 > > Whatever syntax we choose is fine with me.  It'll have to be changed
 > > in `make-struct-type` though.
 > >
 > > On Fri, Apr 12, 2013 at 4:43 PM, Matthias Felleisen
 > > <matthias@ccs.neu.edu> wrote:
 > > >
 > > > #:final?
 > > >
 > > > On Apr 10, 2013, at 9:06 PM, Sam Tobin-Hochstadt wrote:
 > > >
 > > > We could think about adding a feature to struct that specified that
 > > > substructs were not allowed.  Then TR could do a better job here.
 > > >
 > > > On Apr 10, 2013 9:03 PM, "Stephen Chang" <stchang@ccs.neu.edu> wrote:
 > > >>
 > > >> On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler
 > > >> <robby@eecs.northwestern.edu> wrote:
 > > >> > There might be a substruct. That is, you can create a struct that
 > would
 > > >> > return #t from S? that has prop:procedure with a subsequent struct
 > > >> > declaration.
 > > >>
 > > >> I see.
 > > >>
 > > >> (And I did not see your example before my last reply but that is a
 > > >> nice way to get around the restriction.)
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
 >
 
 --e89a8fb200bc57c20004da3f2713
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">That sounds like a kind of general-purpose substructing co=
 ntract.<div><br></div><div style>Right now substructs don&#39;t have many &=
 quot;behave the same as a parent&quot; kinds of guarantees; just the field =
 extension one. It might be nice if we trid to find a more general way to do=
  that.</div>
 <div><br></div><div style>Robby</div></div><div class=3D"gmail_extra"><br><=
 br><div class=3D"gmail_quote">On Sat, Apr 13, 2013 at 9:45 AM, Eli Barzilay=
  <span dir=3D"ltr">&lt;<a href=3D"mailto:eli@barzilay.org" target=3D"_blank=
 ">eli@barzilay.org</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">Quick and possibly misguided comment: I can =
 see cases where it can be<br>
 good to only forbid overriding some property, but allow extensions<br>
 with just new fields or other properties. =C2=A0So I think that should some=
 <br>
 restriction like this be added, it&#39;s better to put it on the property.<=
 br>
 Something that I can use to guarantee that some struct&#39;s behavior as a<=
 br>
 function is always what I put in my definition, and TR could use too.<br>
 (And of course that behavior could depend on some other property that<br>
 would need to be set as final too.)<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 <br>
 Yesterday, Sam Tobin-Hochstadt wrote:<br>
 &gt; Whatever syntax we choose is fine with me. =C2=A0It&#39;ll have to be =
 changed<br>
 &gt; in `make-struct-type` though.<br>
 &gt;<br>
 &gt; On Fri, Apr 12, 2013 at 4:43 PM, Matthias Felleisen<br>
 &gt; &lt;<a href=3D"mailto:matthias@ccs.neu.edu">matthias@ccs.neu.edu</a>&g=
 t; wrote:<br>
 &gt; &gt;<br>
 &gt; &gt; #:final?<br>
 &gt; &gt;<br>
 &gt; &gt; On Apr 10, 2013, at 9:06 PM, Sam Tobin-Hochstadt wrote:<br>
 &gt; &gt;<br>
 &gt; &gt; We could think about adding a feature to struct that specified th=
 at<br>
 &gt; &gt; substructs were not allowed. =C2=A0Then TR could do a better job =
 here.<br>
 &gt; &gt;<br>
 &gt; &gt; On Apr 10, 2013 9:03 PM, &quot;Stephen Chang&quot; &lt;<a href=3D=
 "mailto:stchang@ccs.neu.edu">stchang@ccs.neu.edu</a>&gt; wrote:<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; On Wed, Apr 10, 2013 at 9:00 PM, Robby Findler<br>
 &gt; &gt;&gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs=
 .northwestern.edu</a>&gt; wrote:<br>
 &gt; &gt;&gt; &gt; There might be a substruct. That is, you can create a st=
 ruct that would<br>
 &gt; &gt;&gt; &gt; return #t from S? that has prop:procedure with a subsequ=
 ent struct<br>
 &gt; &gt;&gt; &gt; declaration.<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; I see.<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; (And I did not see your example before my last reply but that=
  is a<br>
 &gt; &gt;&gt; nice way to get around the restriction.)<br>
 <br>
 </div></div><span class=3D"HOEnZb"><font color=3D"#888888">--<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 ((lambda (x) (x x)) (lambda (x) (x x))) =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Eli Barzilay:<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 <a hr=
 ef=3D"http://barzilay.org/" target=3D"_blank">http://barzilay.org/</a> =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Maze is Life!<b=
 r>
 </font></span></blockquote></div><br></div>
 
 --e89a8fb200bc57c20004da3f2713--
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Stephen Chang <stchang@ccs.neu.edu>,
        endobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Sat, 13 Apr 2013 10:56:59 -0400

 A few minutes ago, Robby Findler wrote:
 > That sounds like a kind of general-purpose substructing contract.
 > 
 > Right now substructs don't have many "behave the same as a parent"
 > kinds of guarantees; just the field extension one. It might be nice
 > if we trid to find a more general way to do that.
 
 It sounds to me like you're taking this in an even more general
 direction: if there's some contract that controls what values can be
 put on properties (which might be the rough equivalent of specifying
 types for properties), then what I was talking about becomes just one
 specialized case where the contract forces substructs to have a
 specific value.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Stephen Chang <stchang@ccs.neu.edu>,
        endobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions and structs
Date: Sat, 13 Apr 2013 12:00:49 -0400

 I think Eli was proposing a Java-style general final annotation (put finals on fields/properties). 
 
 Robby's idea is an interesting research idea -- optionally guarantee a number of things about substructuring. 
 
 
 
 
 
 
 On Apr 13, 2013, at 10:56 AM, Eli Barzilay wrote:
 
 > A few minutes ago, Robby Findler wrote:
 >> That sounds like a kind of general-purpose substructing contract.
 >> 
 >> Right now substructs don't have many "behave the same as a parent"
 >> kinds of guarantees; just the field extension one. It might be nice
 >> if we trid to find a more general way to do that.
 > 
 > It sounds to me like you're taking this in an even more general
 > direction: if there's some contract that controls what values can be
 > put on properties (which might be the rough equivalent of specifying
 > types for properties), then what I was talking about becomes just one
 > specialized case where the contract forces substructs to have a
 > specific value.
 > 
 > -- 
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                    http://barzilay.org/                   Maze is Life!
 
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Mon, 22 Apr 2013 21:00:00 -0700

 How should I mark this bug, the original issue is WAI and not a bug.
 Does someone want to change the title and take ownership of the
 requested change for structs?
 
 On Sat, Apr 13, 2013 at 9:00 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > I think Eli was proposing a Java-style general final annotation (put finals on fields/properties).
 >
 > Robby's idea is an interesting research idea -- optionally guarantee a number of things about substructuring.
 >
 >
 >
 >
 >
 >
 > On Apr 13, 2013, at 10:56 AM, Eli Barzilay wrote:
 >
 >> A few minutes ago, Robby Findler wrote:
 >>> That sounds like a kind of general-purpose substructing contract.
 >>>
 >>> Right now substructs don't have many "behave the same as a parent"
 >>> kinds of guarantees; just the field extension one. It might be nice
 >>> if we trid to find a more general way to do that.
 >>
 >> It sounds to me like you're taking this in an even more general
 >> direction: if there's some contract that controls what values can be
 >> put on properties (which might be the rough equivalent of specifying
 >> types for properties), then what I was talking about becomes just one
 >> specialized case where the contract forces substructs to have a
 >> specific value.
 >>
 >> --
 >>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>                    http://barzilay.org/                   Maze is Life!
 >
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Tue, 23 Apr 2013 07:01:17 -0400

 I think this bug should just be closed, and hopefully Matthew can
 provide some feedback on the struct idea.
 
 Sam
 
 On Tue, Apr 23, 2013 at 12:00 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > How should I mark this bug, the original issue is WAI and not a bug.
 > Does someone want to change the title and take ownership of the
 > requested change for structs?
 >
 > On Sat, Apr 13, 2013 at 9:00 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> I think Eli was proposing a Java-style general final annotation (put finals on fields/properties).
 >>
 >> Robby's idea is an interesting research idea -- optionally guarantee a number of things about substructuring.
 >>
 >>
 >>
 >>
 >>
 >>
 >> On Apr 13, 2013, at 10:56 AM, Eli Barzilay wrote:
 >>
 >>> A few minutes ago, Robby Findler wrote:
 >>>> That sounds like a kind of general-purpose substructing contract.
 >>>>
 >>>> Right now substructs don't have many "behave the same as a parent"
 >>>> kinds of guarantees; just the field extension one. It might be nice
 >>>> if we trid to find a more general way to do that.
 >>>
 >>> It sounds to me like you're taking this in an even more general
 >>> direction: if there's some contract that controls what values can be
 >>> put on properties (which might be the rough equivalent of specifying
 >>> types for properties), then what I was talking about becomes just one
 >>> specialized case where the contract forces substructs to have a
 >>> specific value.
 >>>
 >>> --
 >>>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>>                    http://barzilay.org/                   Maze is Life!
 >>

State changed from "open" to "closed" by endobson at Sun, 28 Apr 2013 01:21:05 -0400
Reason>>> Not a bug, working as intended.

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Mon, 29 Apr 2013 12:50:54 -0600

 We could add a `prop:final' structure type property.
 
 Another possibility is adding a new kind of guard to
 `make-struct-type-property' --- one that is applied to every structure
 subtype of a structure type that implements the property. Then,
 `prop:final' could be implemented using `make-struct-type-property'. I
 think that would also support the kind of thing that Eli describes.
 
 Or we could add a 12th argument to `make-struct-type', but adding
 `prop:final' or a way to implement `prop:final' seems better, if that's
 enough to help Typed Racket.
 
 At Tue, 23 Apr 2013 07:01:17 -0400, Sam Tobin-Hochstadt wrote:
 > I think this bug should just be closed, and hopefully Matthew can
 > provide some feedback on the struct idea.
 > 
 > Sam
 > 
 > On Tue, Apr 23, 2013 at 12:00 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > > How should I mark this bug, the original issue is WAI and not a bug.
 > > Does someone want to change the title and take ownership of the
 > > requested change for structs?
 > >
 > > On Sat, Apr 13, 2013 at 9:00 AM, Matthias Felleisen
 > > <matthias@ccs.neu.edu> wrote:
 > >>
 > >> I think Eli was proposing a Java-style general final annotation (put finals 
 > on fields/properties).
 > >>
 > >> Robby's idea is an interesting research idea -- optionally guarantee a 
 > number of things about substructuring.
 > >>
 > >>
 > >>
 > >>
 > >>
 > >>
 > >> On Apr 13, 2013, at 10:56 AM, Eli Barzilay wrote:
 > >>
 > >>> A few minutes ago, Robby Findler wrote:
 > >>>> That sounds like a kind of general-purpose substructing contract.
 > >>>>
 > >>>> Right now substructs don't have many "behave the same as a parent"
 > >>>> kinds of guarantees; just the field extension one. It might be nice
 > >>>> if we trid to find a more general way to do that.
 > >>>
 > >>> It sounds to me like you're taking this in an even more general
 > >>> direction: if there's some contract that controls what values can be
 > >>> put on properties (which might be the rough equivalent of specifying
 > >>> types for properties), then what I was talking about becomes just one
 > >>> specialized case where the contract forces substructs to have a
 > >>> specific value.
 > >>>
 > >>> --
 > >>>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 > >>>                    http://barzilay.org/                   Maze is Life!
 > >>
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Mon, 29 Apr 2013 14:55:33 -0400

 Either of these would be fine, although I think there should be a
 declarative syntax, such as `#:final`, rather than exposing the
 implementation.  That would be how TR would want to handle it.
 
 On Mon, Apr 29, 2013 at 2:50 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > We could add a `prop:final' structure type property.
 >
 > Another possibility is adding a new kind of guard to
 > `make-struct-type-property' --- one that is applied to every structure
 > subtype of a structure type that implements the property. Then,
 > `prop:final' could be implemented using `make-struct-type-property'. I
 > think that would also support the kind of thing that Eli describes.
 >
 > Or we could add a 12th argument to `make-struct-type', but adding
 > `prop:final' or a way to implement `prop:final' seems better, if that's
 > enough to help Typed Racket.
 >
 > At Tue, 23 Apr 2013 07:01:17 -0400, Sam Tobin-Hochstadt wrote:
 >> I think this bug should just be closed, and hopefully Matthew can
 >> provide some feedback on the struct idea.
 >>
 >> Sam
 >>
 >> On Tue, Apr 23, 2013 at 12:00 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> > How should I mark this bug, the original issue is WAI and not a bug.
 >> > Does someone want to change the title and take ownership of the
 >> > requested change for structs?
 >> >
 >> > On Sat, Apr 13, 2013 at 9:00 AM, Matthias Felleisen
 >> > <matthias@ccs.neu.edu> wrote:
 >> >>
 >> >> I think Eli was proposing a Java-style general final annotation (put finals
 >> on fields/properties).
 >> >>
 >> >> Robby's idea is an interesting research idea -- optionally guarantee a
 >> number of things about substructuring.
 >> >>
 >> >>
 >> >>
 >> >>
 >> >>
 >> >>
 >> >> On Apr 13, 2013, at 10:56 AM, Eli Barzilay wrote:
 >> >>
 >> >>> A few minutes ago, Robby Findler wrote:
 >> >>>> That sounds like a kind of general-purpose substructing contract.
 >> >>>>
 >> >>>> Right now substructs don't have many "behave the same as a parent"
 >> >>>> kinds of guarantees; just the field extension one. It might be nice
 >> >>>> if we trid to find a more general way to do that.
 >> >>>
 >> >>> It sounds to me like you're taking this in an even more general
 >> >>> direction: if there's some contract that controls what values can be
 >> >>> put on properties (which might be the rough equivalent of specifying
 >> >>> types for properties), then what I was talking about becomes just one
 >> >>> specialized case where the contract forces substructs to have a
 >> >>> specific value.
 >> >>>
 >> >>> --
 >> >>>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >> >>>                    http://barzilay.org/                   Maze is Life!
 >> >>
From: claire alvis <claire.alvis@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Eric Dobson
 <eric.n.dobson@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        Eli Barzilay <eli@barzilay.org>,
        Robby Findler
 <robby@eecs.northwestern.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification
 <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish
 functions and structs
Date: Mon, 29 Apr 2013 15:26:46 -0400

 --517ec976_643c9869_1b44
 Content-Type: text/plain; charset="utf-8"
 Content-Transfer-Encoding: 7bit
 Content-Disposition: inline
 
 If the guard in `make-struct-type-property' could return meaningful values, 
 we could also use it to solve an open problem in the generics implementation:
 at the moment, generic method tables in a parent are not passed on to its 
 children.  If the guard could return meaningful values, such as the parent's 
 method table, I think we could trivially implement generic method table 
 inheritance.
 
 Claire 
 
 
 On Monday, April 29, 2013 at 2:50 PM, Matthew Flatt wrote:
 
 > We could add a `prop:final' structure type property.
 > 
 > Another possibility is adding a new kind of guard to
 > `make-struct-type-property' --- one that is applied to every structure
 > subtype of a structure type that implements the property. Then,
 > `prop:final' could be implemented using `make-struct-type-property'. I
 > think that would also support the kind of thing that Eli describes.
 > 
 > Or we could add a 12th argument to `make-struct-type', but adding
 > `prop:final' or a way to implement `prop:final' seems better, if that's
 > enough to help Typed Racket.
 > 
 > At Tue, 23 Apr 2013 07:01:17 -0400, Sam Tobin-Hochstadt wrote:
 > > I think this bug should just be closed, and hopefully Matthew can
 > > provide some feedback on the struct idea.
 > > 
 > > Sam
 > > 
 > > On Tue, Apr 23, 2013 at 12:00 AM, Eric Dobson <eric.n.dobson@gmail.com (mailto:eric.n.dobson@gmail.com)> wrote:
 > > > How should I mark this bug, the original issue is WAI and not a bug.
 > > > Does someone want to change the title and take ownership of the
 > > > requested change for structs?
 > > > 
 > > > On Sat, Apr 13, 2013 at 9:00 AM, Matthias Felleisen
 > > > <matthias@ccs.neu.edu (mailto:matthias@ccs.neu.edu)> wrote:
 > > > > 
 > > > > I think Eli was proposing a Java-style general final annotation (put finals 
 > > on fields/properties).
 > > > > 
 > > > > Robby's idea is an interesting research idea -- optionally guarantee a 
 > > number of things about substructuring.
 > > > > 
 > > > > 
 > > > > 
 > > > > 
 > > > > 
 > > > > 
 > > > > On Apr 13, 2013, at 10:56 AM, Eli Barzilay wrote:
 > > > > 
 > > > > > A few minutes ago, Robby Findler wrote:
 > > > > > > That sounds like a kind of general-purpose substructing contract.
 > > > > > > 
 > > > > > > Right now substructs don't have many "behave the same as a parent"
 > > > > > > kinds of guarantees; just the field extension one. It might be nice
 > > > > > > if we trid to find a more general way to do that.
 > > > > > > 
 > > > > > 
 > > > > > 
 > > > > > It sounds to me like you're taking this in an even more general
 > > > > > direction: if there's some contract that controls what values can be
 > > > > > put on properties (which might be the rough equivalent of specifying
 > > > > > types for properties), then what I was talking about becomes just one
 > > > > > specialized case where the contract forces substructs to have a
 > > > > > specific value.
 > > > > > 
 > > > > > --
 > > > > > ((lambda (x) (x x)) (lambda (x) (x x))) Eli Barzilay:
 > > > > > http://barzilay.org/ Maze is Life!
 > > > > > 
 > > > > 
 > > > > 
 > > > 
 > > 
 > > 
 > 
 > 
 > 
 
 
 
 --517ec976_643c9869_1b44
 Content-Type: text/html; charset="utf-8"
 Content-Transfer-Encoding: quoted-printable
 Content-Disposition: inline
 
 
                 <div style=3D=22font-family: Helvetica; font-size: 13px; =
 =22>If the guard in =60make-struct-type-property' could return meaningful=
  values,&nbsp;<div>we could also use it to solve an open problem in the g=
 enerics implementation:</div><div>at the moment, generic method tables in=
  a parent are not passed on to its&nbsp;</div><div>children. &nbsp;If the=
  guard could return meaningful values, such as&nbsp;the parent's&nbsp;</d=
 iv><div>method table, I think we could trivially implement generic method=
  table&nbsp;</div><div>inheritance.</div><div><br></div><div>Claire</div>=
 </div>
                 <div></div>
                 =20
                 <p style=3D=22color: =23A0A0A8;=22>On Monday, April 29, 2=
 013 at 2:50 PM, Matthew =46latt wrote:</p>
                 <blockquote type=3D=22cite=22 style=3D=22border-left-styl=
 e:solid;border-width:1px;margin-left:0px;padding-left:10px;=22>
                     <span><div><div><div>We could add a =60prop:final' st=
 ructure type property.</div><div><br></div><div>Another possibility is ad=
 ding a new kind of guard to</div><div>=60make-struct-type-property' --- o=
 ne that is applied to every structure</div><div>subtype of a structure ty=
 pe that implements the property. Then,</div><div>=60prop:final' could be =
 implemented using =60make-struct-type-property'. I</div><div>think that w=
 ould also support the kind of thing that Eli describes.</div><div><br></d=
 iv><div>Or we could add a 12th argument to =60make-struct-type', but addi=
 ng</div><div>=60prop:final' or a way to implement =60prop:final' seems be=
 tter, if that's</div><div>enough to help Typed Racket.</div><div><br></di=
 v><div>At Tue, 23 Apr 2013 07:01:17 -0400, Sam Tobin-Hochstadt wrote:</di=
 v><blockquote type=3D=22cite=22><div><div>I think this bug should just be=
  closed, and hopefully Matthew can</div><div>provide some feedback on the=
  struct idea.</div><div><br></div><div>Sam</div><div><br></div><div>On Tu=
 e, Apr 23, 2013 at 12:00 AM, Eric Dobson &lt;<a href=3D=22mailto:eric.n.d=
 obson=40gmail.com=22>eric.n.dobson=40gmail.com</a>&gt; wrote:</div><block=
 quote type=3D=22cite=22><div><div>How should I mark this bug, the origina=
 l issue is WAI and not a bug.</div><div>Does someone want to change the t=
 itle and take ownership of the</div><div>requested change for structs=3F<=
 /div><div><br></div><div>On Sat, Apr 13, 2013 at 9:00 AM, Matthias =46ell=
 eisen</div><div>&lt;<a href=3D=22mailto:matthias=40ccs.neu.edu=22>matthia=
 s=40ccs.neu.edu</a>&gt; wrote:</div><blockquote type=3D=22cite=22><div><d=
 iv><br></div><div>I think Eli was proposing a Java-style general final an=
 notation (put finals </div></div></blockquote></div></blockquote><div>on =
 fields/properties).</div><blockquote type=3D=22cite=22><blockquote type=3D=
 =22cite=22><div><div><br></div><div>Robby's idea is an interesting resear=
 ch idea -- optionally guarantee a </div></div></blockquote></blockquote><=
 div>number of things about substructuring.</div><blockquote type=3D=22cit=
 e=22><blockquote type=3D=22cite=22><div><div><br></div><div><br></div><di=
 v><br></div><div><br></div><div><br></div><div><br></div><div>On Apr 13, =
 2013, at 10:56 AM, Eli Barzilay wrote:</div><div><br></div><blockquote ty=
 pe=3D=22cite=22><div><div>A few minutes ago, Robby =46indler wrote:</div>=
 <blockquote type=3D=22cite=22><div><div>That sounds like a kind of genera=
 l-purpose substructing contract.</div><div><br></div><div>Right now subst=
 ructs don't have many =22behave the same as a parent=22</div><div>kinds o=
 f guarantees; just the field extension one. It might be nice</div><div>if=
  we trid to find a more general way to do that.</div></div></blockquote><=
 div><br></div><div>It sounds to me like you're taking this in an even mor=
 e general</div><div>direction: if there's some contract that controls wha=
 t values can be</div><div>put on properties (which might be the rough equ=
 ivalent of specifying</div><div>types for properties), then what I was ta=
 lking about becomes just one</div><div>specialized case where the contrac=
 t forces substructs to have a</div><div>specific value.</div><div><br></d=
 iv><div>--</div><div>         ((lambda (x) (x x)) (lambda (x) (x x)))    =
       Eli Barzilay:</div><div>                   <a href=3D=22http://barz=
 ilay.org=22>http://barzilay.org</a>/                   Maze is Life=21</d=
 iv></div></blockquote></div></blockquote></blockquote></div></blockquote>=
 </div></div></span>
                 =20
                 =20
                 =20
                 =20
                 </blockquote>
                 =20
                 <div>
                     <br>
                 </div>
             
 --517ec976_643c9869_1b44--
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: claire alvis <claire.alvis@gmail.com>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions and structs
Date: Tue, 30 Apr 2013 10:11:10 -0400

 Can you propose a concrete signature for the guard? -- Matthias
 
 
 
 On Apr 29, 2013, at 3:26 PM, claire alvis <claire.alvis@gmail.com> wrote:
 
 > If the guard in `make-struct-type-property' could return meaningful values, 
 > we could also use it to solve an open problem in the generics implementation:
 > at the moment, generic method tables in a parent are not passed on to its 
 > children.  If the guard could return meaningful values, such as the parent's 
 > method table, I think we could trivially implement generic method table 
 > inheritance.
 > 
 > Claire
 > On Monday, April 29, 2013 at 2:50 PM, Matthew Flatt wrote:
 > 
 >> We could add a `prop:final' structure type property.
 >> 
 >> Another possibility is adding a new kind of guard to
 >> `make-struct-type-property' --- one that is applied to every structure
 >> subtype of a structure type that implements the property. Then,
 >> `prop:final' could be implemented using `make-struct-type-property'. I
 >> think that would also support the kind of thing that Eli describes.
 >> 
 >> Or we could add a 12th argument to `make-struct-type', but adding
 >> `prop:final' or a way to implement `prop:final' seems better, if that's
 >> enough to help Typed Racket.
 >> 
 >> At Tue, 23 Apr 2013 07:01:17 -0400, Sam Tobin-Hochstadt wrote:
 >>> I think this bug should just be closed, and hopefully Matthew can
 >>> provide some feedback on the struct idea.
 >>> 
 >>> Sam
 >>> 
 >>> On Tue, Apr 23, 2013 at 12:00 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>>> How should I mark this bug, the original issue is WAI and not a bug.
 >>>> Does someone want to change the title and take ownership of the
 >>>> requested change for structs?
 >>>> 
 >>>> On Sat, Apr 13, 2013 at 9:00 AM, Matthias Felleisen
 >>>> <matthias@ccs.neu.edu> wrote:
 >>>>> 
 >>>>> I think Eli was proposing a Java-style general final annotation (put finals
 >>> on fields/properties).
 >>>>> 
 >>>>> Robby's idea is an interesting research idea -- optionally guarantee a
 >>> number of things about substructuring.
 >>>>> 
 >>>>> 
 >>>>> 
 >>>>> 
 >>>>> 
 >>>>> 
 >>>>> On Apr 13, 2013, at 10:56 AM, Eli Barzilay wrote:
 >>>>> 
 >>>>>> A few minutes ago, Robby Findler wrote:
 >>>>>>> That sounds like a kind of general-purpose substructing contract.
 >>>>>>> 
 >>>>>>> Right now substructs don't have many "behave the same as a parent"
 >>>>>>> kinds of guarantees; just the field extension one. It might be nice
 >>>>>>> if we trid to find a more general way to do that.
 >>>>>> 
 >>>>>> It sounds to me like you're taking this in an even more general
 >>>>>> direction: if there's some contract that controls what values can be
 >>>>>> put on properties (which might be the rough equivalent of specifying
 >>>>>> types for properties), then what I was talking about becomes just one
 >>>>>> specialized case where the contract forces substructs to have a
 >>>>>> specific value.
 >>>>>> 
 >>>>>> --
 >>>>>> ((lambda (x) (x x)) (lambda (x) (x x))) Eli Barzilay:
 >>>>>> http://barzilay.org/ Maze is Life!
 > 
 
 
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: claire alvis <claire.alvis@gmail.com>, Matthew Flatt <mflatt@cs.utah.edu>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Sun, 12 May 2013 20:56:03 -0400

 On 2013-04-30 10:11:10 -0400, Matthias Felleisen wrote:
 > Can you propose a concrete signature for the guard? -- Matthias
 
 The same signature as the current struct type property guard should
 probably be enough. That is,
 
   "The guard must accept two arguments: a value for the property
    supplied to make-struct-type, and a list containing information about
    the new structure type."
 
   "The result of calling guard is associated with the property in the
    target structure type, instead of the value supplied to
    make-struct-type."
 
   http://pre.racket-lang.org/docs/html/reference/structprops.html
 
 i.e., (-> any/c (list ...) any/c)
 
 where the two `any/c`s are often the same "type".
 
 The new guard could work similarly: if a new struct type is created that
 *inherits* from an existing struct type with the guarded property and
 also tries to attach a value to the property, the inheritance guard is
 called (presumably after the normal guard) and the result of that is the
 final value on the property.
 
 This would potentially allow the generics library to construct an
 inheritance guard that would merge the method tables of the sub-struct
 and super-struct types (right now it always overwrites the entire
 table).
 
 Cheers,
 Asumu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: claire alvis <claire.alvis@gmail.com>, Matthew Flatt <mflatt@cs.utah.edu>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, Eli Barzilay <eli@barzilay.org>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Stephen Chang <stchang@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions and structs
Date: Tue, 21 May 2013 02:47:44 +0300

 Seems to make sense to me. 
 
 
 On May 13, 2013, at 3:56 AM, Asumu Takikawa wrote:
 
 > On 2013-04-30 10:11:10 -0400, Matthias Felleisen wrote:
 >> Can you propose a concrete signature for the guard? -- Matthias
 > 
 > The same signature as the current struct type property guard should
 > probably be enough. That is,
 > 
 >  "The guard must accept two arguments: a value for the property
 >   supplied to make-struct-type, and a list containing information about
 >   the new structure type."
 > 
 >  "The result of calling guard is associated with the property in the
 >   target structure type, instead of the value supplied to
 >   make-struct-type."
 > 
 >  http://pre.racket-lang.org/docs/html/reference/structprops.html
 > 
 > i.e., (-> any/c (list ...) any/c)
 > 
 > where the two `any/c`s are often the same "type".
 > 
 > The new guard could work similarly: if a new struct type is created that
 > *inherits* from an existing struct type with the guarded property and
 > also tries to attach a value to the property, the inheritance guard is
 > called (presumably after the normal guard) and the result of that is the
 > final value on the property.
 > 
 > This would potentially allow the generics library to construct an
 > inheritance guard that would merge the method tables of the sub-struct
 > and super-struct types (right now it always overwrites the entire
 > table).
 > 
 > Cheers,
 > Asumu
 
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions
 and structs
Date: Thu, 13 Jun 2013 01:02:18 -0400

 On 2013-05-12 20:56:03 -0400, Asumu Takikawa wrote:
 > The same signature as the current struct type property guard should
 > probably be enough.
 
 Since it didn't seem like it would take much time, I went ahead and
 implemented a prototype of this:
   https://github.com/takikawa/racket/tree/inherit-property-guard
 
 Also, I think I was wrong about the signature. The guard probably needs
 to take both the old value (from the superstruct) and the new value.
 
 I'm not necessarily suggesting we should adopt this feature, but I
 thought I'd put it up so that people can try it out.
 
 You can use this to implement struct type properties that can't be
 extended by sub-structs:
 
   #lang racket
 
   (define-values (prop:foo foo? foo-accessor)
     (make-struct-type-property
      'foo
      (λ (x _) (unless (number? x) (error "not a number")))
      null
      #t
      (λ (x old _) (error "this property is final"))))
 
   (struct foo1 ()
     #:property prop:foo 42)
 
   ;; regular guard is called first
   #;
   (struct foo2 foo1 ()
     #:property prop:foo "better than 42")
 
   (struct foo2 foo1 ()
     #:property prop:foo 82)
 
 This code evaluates to an error "this property is final" on my branch.
 If you comment out the last lambda in the struct property definition it
 does not error since there is no inheritance guard.
 
 It'd be interesting to see if this is sufficient to make generics +
 struct inheritance work better together.
 
 Cheers,
 Asumu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>, claire alvis <claire.alvis@gmail.com>
Cc: bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13680: typed racket can't distinguish functions and structs
Date: Thu, 13 Jun 2013 13:59:11 -0400

 On Jun 13, 2013, at 1:02 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 
 > It'd be interesting to see if this is sufficient to make generics +
 > struct inheritance work better together.
 
 
 Claire, could you explore this? 
