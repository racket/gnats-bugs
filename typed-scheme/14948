From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jan 22 17:37:41 2015
Received: from mail-ob0-f171.google.com (mail-ob0-f171.google.com [209.85.214.171])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t0MMbb5x031297
	for <bugs@bugs.plt-scheme.org>; Thu, 22 Jan 2015 17:37:38 -0500
Message-Id: <201501222237.t0MMbYe2031290@winooski.ccs.neu.edu>
Date: Thu, 22 Jan 2015 17:37:34 -0500
From: matthias@ccs.neu.edu
To: bugs@racket-lang.org
Subject: occurrence typing fails in strange ways for when/unless

>Number:         14948
>Category:       typed-scheme
>Synopsis:       occurrence typing fails in strange ways for when/unless
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Jan 22 17:40:01 -0500 2015
>Last-Modified:  Sat Jan 31 18:18:31 -0500 2015
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1.1.8--2015-01-03(-/f)
>Environment:
macosx "Darwin antarctica.ccs.neu.edu 12.5.0 Darwin Kernel Version 12.5.0: Sun Sep 29 13:33:47 PDT 2013; root:xnu-2050.48.12~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 840257332
raco pkg (show):
Installation-wide:
 Package                 Checksum     Source
 ansi                    2770248a...  catalog ansi github://github.com/tonyg/racket-ansi/master
 benchmark               45992763...  catalog benchmark git://github.com/stamourv/racket-benchmark#master
 graph                   9528fd5f...  catalog graph github://github.com/stchang/graph/master
 honu                    6a982c11...  catalog honu git://github.com/racket/honu
 htdp                    76ca9ca3...  clone /Users/matthias/plt/extra-pkgs/htdp/htdp git://github.com/racket/htdp/?path=htdp
 main-distribution       67868e03...  catalog main-distribution git://github.com/racket/main-distribution
 main-distribution-test  ca4a870e...  catalog main-distribution-test git://github.com/racket/main-distribution-test
 marketplace             e48aabc2...  catalog marketplace github://github.com/tonyg/marketplace/typeless
 racket-lib                           static-link /Users/matthias/plt/pkgs/racket-lib
 rackunit                466a679c...  clone /Users/matthias/plt/extra-pkgs/rackunit/rackunit git://github.com/racket/rackunit/?path=rackunit
 [217 auto-installed packages not shown]
User-specific for installation "development":
 [none]



Collections:
("/Users/matthias/0Unison/collects/"
 (".DS_Store" "compiled" "date" "finance" "info-domain" "info.ss" "pdf.ss~" "session" "short" "testing" "tll-collects" "utils" "web"))
("/Users/matthias/Library/Racket/development/collects"
 (non-existent-path))
("/Users/matthias/plt/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket" #t #t ((test) (main)) #t))
>Description:
#lang typed/racket

(: f (-> (U False [Listof String]) [Listof String]))
(define (f l)
  (unless l
    (error 'f ""))
  (define &^%$ l) ;; comment this line out and it type-checks 
  l)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: matthias@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14948: occurrence typing fails in strange ways
 for when/unless
Date: Thu, 22 Jan 2015 18:02:32 -0500

 On 2015-01-22 17:40:02 -0500, matthias@ccs.neu.edu wrote:
 > *** Description:
 > #lang typed/racket
 > 
 > (: f (-> (U False [Listof String]) [Listof String]))
 > (define (f l)
 >   (unless l
 >     (error 'f ""))
 >   (define &^%$ l) ;; comment this line out and it type-checks 
 >   l)
 
 I don't have a fix for this, but I do have an explanation for why it
 doesn't work.
 
 Without the extra definition, the expansion looks something like this:
 
   (define-values:4
    (f)
    (lambda:7
     (l)
     (if:8 l (#%app:8 void:8) (let-values:8 () (#%app:9 error 'f (quote ""))))
     l))
 
 which TR can deal with fine because the `if` expression and `l` come right
 after each other in the function body.
 
 With the extra definition, the expansion looks different:
 
   (define-values:4
    (f)
    (lambda:7
     (l)
     (letrec-values
      ((()
        (begin:13
         (if:8
          l
          (#%app:8 void:8)
          (let-values:8 () (#%app:14 error 'f (quote ""))))
         (#%app:13 values:13)))
       ((&^%$) l))
      l)))
 
 In this case, the `if` expression got stuck in a `letrec-values` RHS.
 The problem is that TR currently does not propagate the refinements from
 the RHS to the point where the body is typechecked.
 
 Cheers,
 Asumu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14948: occurrence typing fails in strange ways for when/unless
Date: Thu, 22 Jan 2015 18:15:12 -0500

 The workaround is this: 
 
 #lang typed/racket
 
 (: f (-> (U False [Listof String]) [Listof String]))
 (define (f l)
   (unless l
     (error 'f ""))
   (g l))
 (: g (-> [Listof String] [Listof String]))
 (define (g l)
   (define &^%$ l) 
   l)
 
 
 On Jan 22, 2015, at 6:02 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 
 > On 2015-01-22 17:40:02 -0500, matthias@ccs.neu.edu wrote:
 >> *** Description:
 >> #lang typed/racket
 >> 
 >> (: f (-> (U False [Listof String]) [Listof String]))
 >> (define (f l)
 >>  (unless l
 >>    (error 'f ""))
 >>  (define &^%$ l) ;; comment this line out and it type-checks 
 >>  l)
 > 
 > I don't have a fix for this, but I do have an explanation for why it
 > doesn't work.
 > 
 > Without the extra definition, the expansion looks something like this:
 > 
 >  (define-values:4
 >   (f)
 >   (lambda:7
 >    (l)
 >    (if:8 l (#%app:8 void:8) (let-values:8 () (#%app:9 error 'f (quote ""))))
 >    l))
 > 
 > which TR can deal with fine because the `if` expression and `l` come right
 > after each other in the function body.
 > 
 > With the extra definition, the expansion looks different:
 > 
 >  (define-values:4
 >   (f)
 >   (lambda:7
 >    (l)
 >    (letrec-values
 >     ((()
 >       (begin:13
 >        (if:8
 >         l
 >         (#%app:8 void:8)
 >         (let-values:8 () (#%app:14 error 'f (quote ""))))
 >        (#%app:13 values:13)))
 >      ((&^%$) l))
 >     l)))
 > 
 > In this case, the `if` expression got stuck in a `letrec-values` RHS.
 > The problem is that TR currently does not propagate the refinements from
 > the RHS to the point where the body is typechecked.
 > 
 > Cheers,
 > Asumu
 
 

