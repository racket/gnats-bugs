From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Aug 13 03:17:11 2012
Received: from mail-yw0-f44.google.com (mail-yw0-f44.google.com [209.85.213.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q7D7H6K6005719
	for <bugs@bugs.plt-scheme.org>; Mon, 13 Aug 2012 03:17:06 -0400
Message-Id: <201208130717.q7D7H4Rg005713@champlain.ccs.neu.edu>
Date: Mon, 13 Aug 2012 03:17:04 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: TR has issues combining predicates

>Number:         13016
>Category:       typed-scheme
>Synopsis:       TR has issues combining predicates
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Aug 13 03:20:01 -0400 2012
>Last-Modified:  Tue Mar 26 00:54:46 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1215.0 Safari/537.2
>Description:
If I apply two predicates to a value it should behave like both, not just like the later.

I expect the following to typecheck, but it only does when the predicates are simple.
>How-To-Repeat:
#lang typed/racket

(define (s x)
  (if (string? x)
    (if (symbol? x)
        (string-length x)
        -1)
    -1))


(define-predicate f1 (List "str"))
;(define-predicate f1 (List String))
(define-predicate f2 (List 'sym))

(define (r g)
  (if (f1 g)
    (if (f2 g)
        (string-length ((inst first String Nothing) g))
        -1)
    -1))
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13016: TR has issues combining predicates
Date: Mon, 13 Aug 2012 07:47:27 -0400

 On Mon, Aug 13, 2012 at 3:20 AM,  <eric.n.dobson@gmail.com> wrote:
 >
 > If I apply two predicates to a value it should behave like both, not just like the later.
 
 Unfortunately, this requires reifying intersections in the type
 system.  Right now, Typed Racket computes an intersection, or the best
 safe approximation it can, in this case.  See the `restrict` function
 for details here.  However, in general this isn't possible, so
 sometimes you'll see situations where one of the two types intersected
 is chosen as the best available choice.  Sadly, adding fully-general
 intersections to the type system makes it undecidable, I believe.
 
 It's possible that this specific case should work better, though.
 -- 
 sam th
 samth@ccs.neu.edu

