From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Feb  4 20:34:13 2010
Received: from mail-yx0-f171.google.com (mail-yx0-f171.google.com [209.85.210.171])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o151YAdM023205
	for <bugs@bugs.plt-scheme.org>; Thu, 4 Feb 2010 20:34:10 -0500
Message-Id: <201002050134.o151Y6Jh023197@champlain.ccs.neu.edu>
Date: Thu, 4 Feb 2010 20:34:06 -0500
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Typed Scheme takes forever to compile a file with a long quoted list of symbols

>Number:         10734
>Category:       typed-scheme
>Synopsis:       Typed Scheme takes forever to compile a file with a long quoted list of symbols
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Feb 04 20:36:02 -0500 2010
>Closed-Date:    Fri Aug 26 14:24:52 -0400 2011
>Last-Modified:  Fri Aug 26 14:24:52 -0400 2011
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.4.2-svn2feb2010
>Environment:
macosx "Darwin Kauai.ccs.neu.edu 9.7.0 Darwin Kernel Version 9.7.0: Tue Mar 31 22:54:29 PDT 2009; root:xnu-1228.12.14~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 143471444

Collections:
(("/Users/cce/svn/2010-02-02/dist/add-on/4.2.4.2/collects" non-existent-path) ("/Users/cce/svn/2010-02-02/dist/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace"!
  "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #f))
>Description:
The file below takes a long time to compile.  I gave up after about a minute.  Longer files with more complicated definitions take a matter of seconds; it seems clear there's some unnecessarily non-linear behavior going on.
>How-To-Repeat:
#lang typed/scheme

(provide imports)

(: imports (Listof Symbol))
(define imports
  '(&ALLOW-OTHER-KEYS
    *PRINT-MISER-WIDTH*
    &AUX *PRINT-PPRINT-DISPATCH*
    &BODY *PRINT-PRETTY*
    &ENVIRONMENT *PRINT-RADIX*
    &KEY *PRINT-READABLY* &OPTIONAL
    *PRINT-RIGHT-MARGIN* &REST *QUERY-IO*
    &WHOLE *RANDOM-STATE* * *READ-BASE*
    ** *READ-DEFAULT-FLOAT-FORMAT*
    *** *READ-EVAL* *BREAK-ON-SIGNALS*
    *READ-SUPPRESS* *COMPILE-FILE-PATHNAME*
    *READTABLE* *COMPILE-FILE-TRUENAME*
    *STANDARD-INPUT* *COMPILE-PRINT*
    *STANDARD-OUTPUT* *COMPILE-VERBOSE*
    *TERMINAL-IO* *DEBUG-IO*
    *TRACE-OUTPUT* *DEBUGGER-HOOK*
    + *DEFAULT-PATHNAME-DEFAULTS*
    ++ *ERROR-OUTPUT* +++ *FEATURES*
    - *GENSYM-COUNTER* / *LOAD-PATHNAME*
    // *LOAD-PRINT* /// *LOAD-TRUENAME*
    /= *LOAD-VERBOSE* 1+ *MACROEXPAND-HOOK*
    1- *MODULES* < *PACKAGE*
    <= *PRINT-ARRAY* = *PRINT-BASE*
    > *PRINT-CASE* >= *PRINT-CIRCLE*
    ABORT *PRINT-ESCAPE* ABS *PRINT-GENSYM*
    ACONS *PRINT-LENGTH* ACOS *PRINT-LEVEL*
    ACOSH *PRINT-LINES* ADD-METHOD ADJOIN
    ATOM BOUNDP ADJUST-ARRAY BASE-CHAR
    BREAK ADJUSTABLE-ARRAY-P BASE-STRING
    BROADCAST-STREAM ALLOCATE-INSTANCE
    BIGNUM BROADCAST-STREAM-STREAMS
    ALPHA-CHAR-P BIT BUILT-IN-CLASS
    ALPHANUMERICP BIT-AND BUTLAST
    AND BIT-ANDC1 BYTE APPEND BIT-ANDC2
    BYTE-POSITION APPLY BIT-EQV BYTE-SIZE
    APROPOS BIT-IOR CAAAAR APROPOS-LIST
    BIT-NAND CAAADR AREF BIT-NOR
    CAAAR ARITHMETIC-ERROR BIT-NOT CAADAR
    ARITHMETIC-ERROR-OPERANDS BIT-ORC1
    CAADDR ARITHMETIC-ERROR-OPERATION
    BIT-ORC2 CAADR ARRAY BIT-VECTOR
    CAAR ARRAY-DIMENSION BIT-VECTOR-P
    CADAAR ARRAY-DIMENSION-LIMIT
    BIT-XOR CADADR ARRAY-DIMENSIONS
    BLOCK CADAR ARRAY-DISPLACEMENT
    BOOLE CADDAR ARRAY-ELEMENT-TYPE
    BOOLE-1 CADDDR ARRAY-HAS-FILL-POINTER-P
    BOOLE-2 CADDR ARRAY-IN-BOUNDS-P
    BOOLE-AND CADR ARRAY-RANK
    BOOLE-ANDC1 CALL-ARGUMENTS-LIMIT
    ARRAY-RANK-LIMIT BOOLE-ANDC2 CALL-METHOD
    ARRAY-ROW-MAJOR-INDEX BOOLE-C1
    CALL-NEXT-METHOD ARRAY-TOTAL-SIZE
    BOOLE-C2 CAR ARRAY-TOTAL-SIZE-LIMIT
    BOOLE-CLR CASE ARRAYP
    BOOLE-EQV CATCH ASH BOOLE-IOR CCASE
    ASIN BOOLE-NAND CDAAAR ASINH BOOLE-NOR
    CDAADR ASSERT BOOLE-ORC1 CDAAR ASSOC
    BOOLE-ORC2 CDADAR ASSOC-IF BOOLE-SET
    CDADDR ASSOC-IF-NOT BOOLE-XOR CDADR
    ATAN BOOLEAN CDAR ATANH BOTH-CASE-P
    CDDAAR CDDADR CLEAR-INPUT COPY-TREE
    CDDAR CLEAR-OUTPUT COS CDDDAR CLOSE COSH
    CDDDDR CLRHASH COUNT CDDDR CODE-CHAR
    COUNT-IF CDDR COERCE COUNT-IF-NOT
    CDR COMPILATION-SPEED CTYPECASE
    CEILING COMPILE DEBUG CELL-ERROR
    COMPILE-FILE DECF CELL-ERROR-NAME
    COMPILE-FILE-PATHNAME DECLAIM
    CERROR COMPILED-FUNCTION DECLARATION
    CHANGE-CLASS COMPILED-FUNCTION-P
    DECLARE CHAR COMPILER-MACRO DECODE-FLOAT
    CHAR-CODE COMPILER-MACRO-FUNCTION
    DECODE-UNIVERSAL-TIME
    CHAR-CODE-LIMIT COMPLEMENT DEFCLASS
    CHAR-DOWNCASE COMPLEX DEFCONSTANT
    CHAR-EQUAL COMPLEXP DEFGENERIC
    CHAR-GREATERP COMPUTE-APPLICABLE-METHODS
    DEFINE-COMPILER-MACRO
    CHAR-INT COMPUTE-RESTARTS
    DEFINE-CONDITION CHAR-LESSP
    CONCATENATE DEFINE-METHOD-COMBINATION
    CHAR-NAME CONCATENATED-STREAM
    DEFINE-MODIFY-MACRO CHAR-NOT-EQUAL
    CONCATENATED-STREAM-STREAMS
    DEFINE-SETF-EXPANDER CHAR-NOT-GREATERP
    COND DEFINE-SYMBOL-MACRO CHAR-NOT-LESSP
    CONDITION DEFMACRO CHAR-UPCASE CONJUGATE
    DEFMETHOD CHAR/= CONS DEFPACKAGE
    CHAR< CONSP DEFPARAMETER CHAR<=
    CONSTANTLY DEFSETF CHAR= CONSTANTP
    DEFSTRUCT CHAR> CONTINUE DEFTYPE
    CHAR>= CONTROL-ERROR DEFUN CHARACTER
    COPY-ALIST DEFVAR CHARACTERP COPY-LIST
    DELETE CHECK-TYPE COPY-PPRINT-DISPATCH
    DELETE-DUPLICATES CIS COPY-READTABLE
    DELETE-FILE CLASS COPY-SEQ DELETE-IF
    CLASS-NAME COPY-STRUCTURE DELETE-IF-NOT
    CLASS-OF COPY-SYMBOL DELETE-PACKAGE
    DENOMINATOR EQ DEPOSIT-FIELD
    EQL DESCRIBE EQUAL DESCRIBE-OBJECT
    EQUALP DESTRUCTURING-BIND
    ERROR DIGIT-CHAR ETYPECASE
    DIGIT-CHAR-P EVAL DIRECTORY EVAL-WHEN
    DIRECTORY-NAMESTRING EVENP DISASSEMBLE
    EVERY DIVISION-BY-ZERO EXP DO EXPORT
    DO* EXPT DO-ALL-SYMBOLS EXTENDED-CHAR
    DO-EXTERNAL-SYMBOLS FBOUNDP DO-SYMBOLS
    FCEILING DOCUMENTATION FDEFINITION
    DOLIST FFLOOR DOTIMES FIFTH DOUBLE-FLOAT
    FILE-AUTHOR DOUBLE-FLOAT-EPSILON
    FILE-ERROR DOUBLE-FLOAT-NEGATIVE-EPSILON
    FILE-ERROR-PATHNAME DPB FILE-LENGTH
    DRIBBLE FILE-NAMESTRING DYNAMIC-EXTENT
    FILE-POSITION ECASE FILE-STREAM
    ECHO-STREAM FILE-STRING-LENGTH
    ECHO-STREAM-INPUT-STREAM FILE-WRITE-DATE
    ECHO-STREAM-OUTPUT-STREAM
    FILL ED FILL-POINTER
    EIGHTH FIND ELT FIND-ALL-SYMBOLS
    ENCODE-UNIVERSAL-TIME FIND-CLASS
    END-OF-FILE FIND-IF ENDP FIND-IF-NOT
    ENOUGH-NAMESTRING FIND-METHOD
    ENSURE-DIRECTORIES-EXIST FIND-PACKAGE
    ENSURE-GENERIC-FUNCTION FIND-RESTART
    FIND-SYMBOL GET-INTERNAL-RUN-TIME
    FINISH-OUTPUT GET-MACRO-CHARACTER
    FIRST GET-OUTPUT-STREAM-STRING FIXNUM
    GET-PROPERTIES FLET GET-SETF-EXPANSION
    FLOAT GET-UNIVERSAL-TIME FLOAT-DIGITS
    GETF FLOAT-PRECISION GETHASH
    FLOAT-RADIX GO FLOAT-SIGN GRAPHIC-CHAR-P
    FLOATING-POINT-INEXACT HANDLER-BIND
    FLOATING-POINT-INVALID-OPERATION
    HANDLER-CASE FLOATING-POINT-OVERFLOW
    HASH-TABLE FLOATING-POINT-UNDERFLOW
    HASH-TABLE-COUNT FLOATP HASH-TABLE-P
    FLOOR HASH-TABLE-REHASH-SIZE FMAKUNBOUND
    HASH-TABLE-REHASH-THRESHOLD FORCE-OUTPUT
    HASH-TABLE-SIZE FORMAT HASH-TABLE-TEST
    FORMATTER HOST-NAMESTRING
    FOURTH IDENTITY FRESH-LINE
    IF FROUND IGNORABLE FTRUNCATE IGNORE
    FTYPE IGNORE-ERRORS FUNCALL IMAGPART
    FUNCTION IMPORT FUNCTION-KEYWORDS
    IN-PACKAGE FUNCTION-LAMBDA-EXPRESSION
    INCF FUNCTIONP INITIALIZE-INSTANCE
    GCD INLINE GENERIC-FUNCTION
    INPUT-STREAM-P GENSYM INSPECT
    GENTEMP INTEGER GET INTEGER-DECODE-FLOAT
    GET-DECODED-TIME INTEGER-LENGTH
    GET-DISPATCH-MACRO-CHARACTER
    INTEGERP GET-INTERNAL-REAL-TIME
    INTERACTIVE-STREAM-P
    INTERN LISP-IMPLEMENTATION-TYPE
    INTERNAL-TIME-UNITS-PER-SECOND
    LISP-IMPLEMENTATION-VERSION
    INTERSECTION LIST INVALID-METHOD-ERROR
    LIST* INVOKE-DEBUGGER
    LIST-ALL-PACKAGES INVOKE-RESTART
    LIST-LENGTH INVOKE-RESTART-INTERACTIVELY
    LISTEN ISQRT LISTP KEYWORD LOAD KEYWORDP
    LOAD-LOGICAL-PATHNAME-TRANSLATIONS
    LABELS LOAD-TIME-VALUE
    LAMBDA LOCALLY LAMBDA-LIST-KEYWORDS
    LOG LAMBDA-PARAMETERS-LIMIT
    LOGAND LAST LOGANDC1 LCM
    LOGANDC2 LDB LOGBITP LDB-TEST LOGCOUNT
    LDIFF LOGEQV LEAST-NEGATIVE-DOUBLE-FLOAT
    LOGICAL-PATHNAME
    LEAST-NEGATIVE-LONG-FLOAT
    LOGICAL-PATHNAME-TRANSLATIONS
    LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT
    LOGIOR
    LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT
    LOGNAND
    LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT
    LOGNOR
    LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT
    LOGNOT LEAST-NEGATIVE-SHORT-FLOAT
    LOGORC1 LEAST-NEGATIVE-SINGLE-FLOAT
    LOGORC2 LEAST-POSITIVE-DOUBLE-FLOAT
    LOGTEST LEAST-POSITIVE-LONG-FLOAT LOGXOR
    LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT
    LONG-FLOAT
    LEAST-POSITIVE-NORMALIZED-LONG-FLOAT
    LONG-FLOAT-EPSILON
    LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT
    LONG-FLOAT-NEGATIVE-EPSILON
    LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT
    LONG-SITE-NAME
    LEAST-POSITIVE-SHORT-FLOAT LOOP
    LEAST-POSITIVE-SINGLE-FLOAT LOOP-FINISH
    LENGTH LOWER-CASE-P LET MACHINE-INSTANCE
    LET* MACHINE-TYPE MACHINE-VERSION
    MASK-FIELD MACRO-FUNCTION
    MAX MACROEXPAND MEMBER MACROEXPAND-1
    MEMBER-IF MACROLET MEMBER-IF-NOT
    MAKE-ARRAY MERGE MAKE-BROADCAST-STREAM
    MERGE-PATHNAMES MAKE-CONCATENATED-STREAM
    METHOD MAKE-CONDITION METHOD-COMBINATION
    MAKE-DISPATCH-MACRO-CHARACTER
    METHOD-COMBINATION-ERROR
    MAKE-ECHO-STREAM METHOD-QUALIFIERS
    MAKE-HASH-TABLE MIN MAKE-INSTANCE
    MINUSP MAKE-INSTANCES-OBSOLETE
    MISMATCH MAKE-LIST MOD MAKE-LOAD-FORM
    MOST-NEGATIVE-DOUBLE-FLOAT
    MAKE-LOAD-FORM-SAVING-SLOTS
    MOST-NEGATIVE-FIXNUM
    MAKE-METHOD MOST-NEGATIVE-LONG-FLOAT
    MAKE-PACKAGE MOST-NEGATIVE-SHORT-FLOAT
    MAKE-PATHNAME MOST-NEGATIVE-SINGLE-FLOAT
    MAKE-RANDOM-STATE
    MOST-POSITIVE-DOUBLE-FLOAT
    MAKE-SEQUENCE MOST-POSITIVE-FIXNUM
    MAKE-STRING MOST-POSITIVE-LONG-FLOAT
    MAKE-STRING-INPUT-STREAM
    MOST-POSITIVE-SHORT-FLOAT
    MAKE-STRING-OUTPUT-STREAM
    MOST-POSITIVE-SINGLE-FLOAT
    MAKE-SYMBOL MUFFLE-WARNING
    MAKE-SYNONYM-STREAM MULTIPLE-VALUE-BIND
    MAKE-TWO-WAY-STREAM MULTIPLE-VALUE-CALL
    MAKUNBOUND MULTIPLE-VALUE-LIST
    MAP MULTIPLE-VALUE-PROG1
    MAP-INTO MULTIPLE-VALUE-SETQ MAPC
    MULTIPLE-VALUES-LIMIT MAPCAN NAME-CHAR
    MAPCAR NAMESTRING MAPCON NBUTLAST
    MAPHASH NCONC MAPL NEXT-METHOD-P
    MAPLIST NIL NINTERSECTION PACKAGE-ERROR
    NINTH PACKAGE-ERROR-PACKAGE
    NO-APPLICABLE-METHOD PACKAGE-NAME
    NO-NEXT-METHOD PACKAGE-NICKNAMES
    NOT PACKAGE-SHADOWING-SYMBOLS
    NOTANY PACKAGE-USE-LIST NOTEVERY
    PACKAGE-USED-BY-LIST NOTINLINE PACKAGEP
    NRECONC PAIRLIS NREVERSE PARSE-ERROR
    NSET-DIFFERENCE PARSE-INTEGER
    NSET-EXCLUSIVE-OR PARSE-NAMESTRING
    NSTRING-CAPITALIZE PATHNAME
    NSTRING-DOWNCASE PATHNAME-DEVICE
    NSTRING-UPCASE PATHNAME-DIRECTORY
    NSUBLIS PATHNAME-HOST NSUBST
    PATHNAME-MATCH-P NSUBST-IF PATHNAME-NAME
    NSUBST-IF-NOT PATHNAME-TYPE NSUBSTITUTE
    PATHNAME-VERSION NSUBSTITUTE-IF
    PATHNAMEP NSUBSTITUTE-IF-NOT
    PEEK-CHAR NTH PHASE NTH-VALUE PI NTHCDR
    PLUSP NULL POP NUMBER POSITION NUMBERP
    POSITION-IF NUMERATOR POSITION-IF-NOT
    NUNION PPRINT ODDP PPRINT-DISPATCH
    OPEN PPRINT-EXIT-IF-LIST-EXHAUSTED
    OPEN-STREAM-P PPRINT-FILL
    OPTIMIZE PPRINT-INDENT OR PPRINT-LINEAR
    OTHERWISE PPRINT-LOGICAL-BLOCK
    OUTPUT-STREAM-P PPRINT-NEWLINE
    PACKAGE PPRINT-POP PPRINT-TAB READ-CHAR
    PPRINT-TABULAR READ-CHAR-NO-HANG
    PRIN1 READ-DELIMITED-LIST
    PRIN1-TO-STRING READ-FROM-STRING
    PRINC READ-LINE PRINC-TO-STRING
    READ-PRESERVING-WHITESPACE
    PRINT READ-SEQUENCE PRINT-NOT-READABLE
    READER-ERROR PRINT-NOT-READABLE-OBJECT
    READTABLE PRINT-OBJECT
    READTABLE-CASE PRINT-UNREADABLE-OBJECT
    READTABLEP PROBE-FILE
    REAL PROCLAIM REALP PROG REALPART
    PROG* REDUCE PROG1 REINITIALIZE-INSTANCE
    PROG2 REM PROGN REMF PROGRAM-ERROR
    REMHASH PROGV REMOVE PROVIDE
    REMOVE-DUPLICATES PSETF REMOVE-IF
    PSETQ REMOVE-IF-NOT PUSH REMOVE-METHOD
    PUSHNEW REMPROP QUOTE RENAME-FILE
    RANDOM RENAME-PACKAGE RANDOM-STATE
    REPLACE RANDOM-STATE-P REQUIRE RASSOC
    REST RASSOC-IF RESTART RASSOC-IF-NOT
    RESTART-BIND RATIO RESTART-CASE
    RATIONAL RESTART-NAME RATIONALIZE RETURN
    RATIONALP RETURN-FROM READ REVAPPEND
    READ-BYTE REVERSE ROOM SIMPLE-BIT-VECTOR
    ROTATEF SIMPLE-BIT-VECTOR-P
    ROUND SIMPLE-CONDITION ROW-MAJOR-AREF
    SIMPLE-CONDITION-FORMAT-ARGUMENTS
    RPLACA SIMPLE-CONDITION-FORMAT-CONTROL
    RPLACD SIMPLE-ERROR
    SAFETY SIMPLE-STRING SATISFIES
    SIMPLE-STRING-P SBIT SIMPLE-TYPE-ERROR
    SCALE-FLOAT SIMPLE-VECTOR SCHAR
    SIMPLE-VECTOR-P SEARCH SIMPLE-WARNING
    SECOND SIN SEQUENCE SINGLE-FLOAT
    SERIOUS-CONDITION SINGLE-FLOAT-EPSILON
    SET SINGLE-FLOAT-NEGATIVE-EPSILON
    SET-DIFFERENCE
    SINH SET-DISPATCH-MACRO-CHARACTER
    SIXTH SET-EXCLUSIVE-OR
    SLEEP SET-MACRO-CHARACTER SLOT-BOUNDP
    SET-PPRINT-DISPATCH SLOT-EXISTS-P
    SET-SYNTAX-FROM-CHAR SLOT-MAKUNBOUND
    SETF SLOT-MISSING SETQ SLOT-UNBOUND
    SEVENTH SLOT-VALUE SHADOW SOFTWARE-TYPE
    SHADOWING-IMPORT SOFTWARE-VERSION
    SHARED-INITIALIZE SOME SHIFTF SORT
    SHORT-FLOAT SPACE SHORT-FLOAT-EPSILON
    SPECIAL SHORT-FLOAT-NEGATIVE-EPSILON
    SPECIAL-OPERATOR-P SHORT-SITE-NAME
    SPEED SIGNAL SQRT SIGNED-BYTE
    STABLE-SORT SIGNUM STANDARD SIMPLE-ARRAY
    STANDARD-CHAR SIMPLE-BASE-STRING
    STANDARD-CHAR-P STANDARD-CLASS
    SUBLIS STANDARD-GENERIC-FUNCTION SUBSEQ
    STANDARD-METHOD SUBSETP STANDARD-OBJECT
    SUBST STEP SUBST-IF STORAGE-CONDITION
    SUBST-IF-NOT STORE-VALUE SUBSTITUTE
    STREAM SUBSTITUTE-IF STREAM-ELEMENT-TYPE
    SUBSTITUTE-IF-NOT STREAM-ERROR
    SUBTYPEP STREAM-ERROR-STREAM
    SVREF STREAM-EXTERNAL-FORMAT
    SXHASH STREAMP SYMBOL
    STRING SYMBOL-FUNCTION STRING-CAPITALIZE
    SYMBOL-MACROLET STRING-DOWNCASE
    SYMBOL-NAME STRING-EQUAL SYMBOL-PACKAGE
    STRING-GREATERP SYMBOL-PLIST
    STRING-LEFT-TRIM SYMBOL-VALUE
    STRING-LESSP SYMBOLP STRING-NOT-EQUAL
    SYNONYM-STREAM STRING-NOT-GREATERP
    SYNONYM-STREAM-SYMBOL STRING-NOT-LESSP T
    STRING-RIGHT-TRIM TAGBODY STRING-STREAM
    TAILP STRING-TRIM TAN STRING-UPCASE
    TANH STRING/= TENTH STRING< TERPRI
    STRING<= THE STRING= THIRD STRING>
    THROW STRING>= TIME STRINGP TRACE
    STRUCTURE TRANSLATE-LOGICAL-PATHNAME
    STRUCTURE-CLASS
    TRANSLATE-PATHNAME STRUCTURE-OBJECT
    TREE-EQUAL STYLE-WARNING TRUENAME
    TRUNCATE VALUES-LIST TWO-WAY-STREAM
    VARIABLE TWO-WAY-STREAM-INPUT-STREAM
    VECTOR TWO-WAY-STREAM-OUTPUT-STREAM
    VECTOR-POP TYPE VECTOR-PUSH TYPE-ERROR
    VECTOR-PUSH-EXTEND TYPE-ERROR-DATUM
    VECTORP TYPE-ERROR-EXPECTED-TYPE
    WARN TYPE-OF WARNING TYPECASE
    WHEN TYPEP WILD-PATHNAME-P UNBOUND-SLOT
    WITH-ACCESSORS UNBOUND-SLOT-INSTANCE
    WITH-COMPILATION-UNIT
    UNBOUND-VARIABLE WITH-CONDITION-RESTARTS
    UNDEFINED-FUNCTION
    WITH-HASH-TABLE-ITERATOR
    UNEXPORT WITH-INPUT-FROM-STRING UNINTERN
    WITH-OPEN-FILE UNION WITH-OPEN-STREAM
    UNLESS WITH-OUTPUT-TO-STRING UNREAD-CHAR
    WITH-PACKAGE-ITERATOR UNSIGNED-BYTE
    WITH-SIMPLE-RESTART UNTRACE WITH-SLOTS
    UNUSE-PACKAGE WITH-STANDARD-IO-SYNTAX
    UNWIND-PROTECT WRITE
    UPDATE-INSTANCE-FOR-DIFFERENT-CLASS
    WRITE-BYTE
    UPDATE-INSTANCE-FOR-REDEFINED-CLASS
    WRITE-CHAR UPGRADED-ARRAY-ELEMENT-TYPE
    WRITE-LINE UPGRADED-COMPLEX-PART-TYPE
    WRITE-SEQUENCE UPPER-CASE-P
    WRITE-STRING USE-PACKAGE WRITE-TO-STRING
    USE-VALUE Y-OR-N-P USER-HOMEDIR-PATHNAME
    YES-OR-NO-P VALUES ZEROP))
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: cce <cce@ccs.neu.edu>, bugs <bugs@plt-scheme.org>
Cc: nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10734: Typed Scheme takes forever to compile a file 
	with a long quoted list of symbols
Date: Thu, 4 Feb 2010 21:25:20 -0500

 On Thu, Feb 4, 2010 at 8:36 PM,  <cce@ccs.neu.edu> wrote:
 > The file below takes a long time to compile. =A0I gave up after about a m=
 inute. =A0Longer files with more complicated definitions take a matter of s=
 econds; it seems clear there's some unnecessarily non-linear behavior going=
  on.
 
 Are you sure the behavior is non-linear?  When I looked at this last,
 I thought it was linear but slow.
 --=20
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: cce <cce@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10734: Typed Scheme takes forever to compile a file 
	with a long quoted list of symbols
Date: Thu, 4 Feb 2010 20:31:04 -0600

 Also, fwiw, I'm not sure it is worth putting this file into TS, given
 how long it takes to compile and how complex it is. :)
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: cce <cce@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10734: Typed Scheme takes forever to compile a file 
	with a long quoted list of symbols
Date: Thu, 4 Feb 2010 20:30:12 -0600

 Shouldn't be hard to figure out. I started with the symbols up to the
 ones beginning with C and then for each line below I added a line's
 worth of symbols. Looks linear to me, but maybe it is worth a more
 systematic test.
 
 [chienshi] ~% time mzscheme tmp.ss
 2.227u 0.139s 0:02.40 97.9%	0+0k 0+0io 0pf+0w
 [chienshi] ~% time mzscheme tmp.ss
 2.336u 0.144s 0:02.55 96.8%	0+0k 0+0io 0pf+0w
 [chienshi] ~% time mzscheme tmp.ss
 2.495u 0.152s 0:02.69 98.1%	0+0k 0+0io 0pf+0w
 [chienshi] ~% time mzscheme tmp.ss
 2.631u 0.152s 0:02.88 96.5%	0+0k 0+0io 0pf+0w
 [chienshi] ~% time mzscheme tmp.ss
 2.684u 0.144s 0:02.90 97.2%	0+0k 0+0io 0pf+0w
 [chienshi] ~% time mzscheme tmp.ss
 2.858u 0.148s 0:03.13 95.5%	0+0k 0+0io 0pf+0w
 [chienshi] ~% time mzscheme tmp.ss
 2.942u 0.150s 0:03.19 96.8%	0+0k 0+0io 0pf+0w
 [chienshi] ~% time mzscheme tmp.ss
 3.146u 0.150s 0:03.44 95.6%	0+0k 0+0io 0pf+0w
 [chienshi] ~% time mzscheme tmp.ss
 3.238u 0.151s 0:03.47 97.4%	0+0k 0+0io 0pf+0w
 [chienshi] ~%
 
 
 Robby
 
 On Thu, Feb 4, 2010 at 8:25 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wro=
 te:
 > On Thu, Feb 4, 2010 at 8:36 PM, =C2=A0<cce@ccs.neu.edu> wrote:
 >> The file below takes a long time to compile. =C2=A0I gave up after about=
  a minute. =C2=A0Longer files with more complicated definitions take a matt=
 er of seconds; it seems clear there's some unnecessarily non-linear behavio=
 r going on.
 >
 > Are you sure the behavior is non-linear? =C2=A0When I looked at this last=
 ,
 > I thought it was linear but slow.
 > --
 > sam th
 > samth@ccs.neu.edu
 >
From: Carl Eastlund <cce@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10734: Typed Scheme takes forever to compile a file 
	with a long quoted list of symbols
Date: Fri, 5 Feb 2010 01:05:00 -0500

 Here's the program I wrote to compile a Typed Scheme module with a
 list of N quoted symbols:
 
 --------------------------------------------------
 
 #lang scheme
 
 [current-namespace (make-base-namespace)]
 
 (define (run n)
   (collect-garbage)
   (time (eval (mod n))))
 
 (define (mod n)
   `(module ,(gensym) typed/scheme
      (provide x)
      (: x (Listof Symbol))
      (define x (quote ,(syms n)))))
 
 (define (syms n)
   (build-list n (lambda (i) (gensym))))
 
 --------------------------------------------------
 
 and here's the output:
 
 --------------------------------------------------
 > (run 0)
 cpu time: 583 real time: 609 gc time: 0
 > (run 50)
 cpu time: 604 real time: 628 gc time: 0
 > (run 100)
 cpu time: 654 real time: 670 gc time: 0
 > (run 150)
 cpu time: 847 real time: 864 gc time: 0
 > (run 200)
 cpu time: 3553 real time: 3615 gc time: 1121
 > (run 250)
 cpu time: 7664 real time: 7766 gc time: 1185
 > (run 300)
 cpu time: 13864 real time: 14092 gc time: 1329
 > (run 350)
 cpu time: 22962 real time: 23266 gc time: 1507
 > (run 400)
 cpu time: 47020 real time: 47652 gc time: 5246
 > (run 450)
 cpu time: 73002 real time: 74002 gc time: 4737
 > (run 500)
 cpu time: 103932 real time: 105546 gc time: 6384
 > (run 550)
 cpu time: 141361 real time: 143468 gc time: 7208
 --------------------------------------------------
 
 Looks exponential to me.  The time doubles every 50-100 symbols, and
 while the first 100 symbols take under a second total, the 50 between
 500 and 550 take almost a second apiece.
 
 Carl Eastlund
 
 On Thu, Feb 4, 2010 at 9:30 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Shouldn't be hard to figure out. I started with the symbols up to the
 > ones beginning with C and then for each line below I added a line's
 > worth of symbols. Looks linear to me, but maybe it is worth a more
 > systematic test.
 >
 > [chienshi] ~% time mzscheme tmp.ss
 > 2.227u 0.139s 0:02.40 97.9% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~% time mzscheme tmp.ss
 > 2.336u 0.144s 0:02.55 96.8% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~% time mzscheme tmp.ss
 > 2.495u 0.152s 0:02.69 98.1% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~% time mzscheme tmp.ss
 > 2.631u 0.152s 0:02.88 96.5% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~% time mzscheme tmp.ss
 > 2.684u 0.144s 0:02.90 97.2% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~% time mzscheme tmp.ss
 > 2.858u 0.148s 0:03.13 95.5% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~% time mzscheme tmp.ss
 > 2.942u 0.150s 0:03.19 96.8% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~% time mzscheme tmp.ss
 > 3.146u 0.150s 0:03.44 95.6% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~% time mzscheme tmp.ss
 > 3.238u 0.151s 0:03.47 97.4% =A0 =A0 0+0k 0+0io 0pf+0w
 > [chienshi] ~%
 >
 >
 > Robby
 >
 > On Thu, Feb 4, 2010 at 8:25 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> w=
 rote:
 >> On Thu, Feb 4, 2010 at 8:36 PM, =A0<cce@ccs.neu.edu> wrote:
 >>> The file below takes a long time to compile. =A0I gave up after about a=
  minute. =A0Longer files with more complicated definitions take a matter of=
  seconds; it seems clear there's some unnecessarily non-linear behavior goi=
 ng on.
 >>
 >> Are you sure the behavior is non-linear? =A0When I looked at this last,
 >> I thought it was linear but slow.
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Carl Eastlund <cce@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10734: Typed Scheme takes forever to compile a file 
	with a long quoted list of symbols
Date: Fri, 5 Feb 2010 06:33:08 -0600

 Nice!
 
 Robby
 
 2010/2/5 Carl Eastlund <cce@ccs.neu.edu>:
 > Here's the program I wrote to compile a Typed Scheme module with a
 > list of N quoted symbols:
 >
 > --------------------------------------------------
 >
 > #lang scheme
 >
 > [current-namespace (make-base-namespace)]
 >
 > (define (run n)
 > =C2=A0(collect-garbage)
 > =C2=A0(time (eval (mod n))))
 >
 > (define (mod n)
 > =C2=A0`(module ,(gensym) typed/scheme
 > =C2=A0 =C2=A0 (provide x)
 > =C2=A0 =C2=A0 (: x (Listof Symbol))
 > =C2=A0 =C2=A0 (define x (quote ,(syms n)))))
 >
 > (define (syms n)
 > =C2=A0(build-list n (lambda (i) (gensym))))
 >
 > --------------------------------------------------
 >
 > and here's the output:
 >
 > --------------------------------------------------
 >> (run 0)
 > cpu time: 583 real time: 609 gc time: 0
 >> (run 50)
 > cpu time: 604 real time: 628 gc time: 0
 >> (run 100)
 > cpu time: 654 real time: 670 gc time: 0
 >> (run 150)
 > cpu time: 847 real time: 864 gc time: 0
 >> (run 200)
 > cpu time: 3553 real time: 3615 gc time: 1121
 >> (run 250)
 > cpu time: 7664 real time: 7766 gc time: 1185
 >> (run 300)
 > cpu time: 13864 real time: 14092 gc time: 1329
 >> (run 350)
 > cpu time: 22962 real time: 23266 gc time: 1507
 >> (run 400)
 > cpu time: 47020 real time: 47652 gc time: 5246
 >> (run 450)
 > cpu time: 73002 real time: 74002 gc time: 4737
 >> (run 500)
 > cpu time: 103932 real time: 105546 gc time: 6384
 >> (run 550)
 > cpu time: 141361 real time: 143468 gc time: 7208
 > --------------------------------------------------
 >
 > Looks exponential to me. =C2=A0The time doubles every 50-100 symbols, and
 > while the first 100 symbols take under a second total, the 50 between
 > 500 and 550 take almost a second apiece.
 >
 > Carl Eastlund
 >
 > On Thu, Feb 4, 2010 at 9:30 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> Shouldn't be hard to figure out. I started with the symbols up to the
 >> ones beginning with C and then for each line below I added a line's
 >> worth of symbols. Looks linear to me, but maybe it is worth a more
 >> systematic test.
 >>
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 2.227u 0.139s 0:02.40 97.9% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 2.336u 0.144s 0:02.55 96.8% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 2.495u 0.152s 0:02.69 98.1% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 2.631u 0.152s 0:02.88 96.5% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 2.684u 0.144s 0:02.90 97.2% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 2.858u 0.148s 0:03.13 95.5% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 2.942u 0.150s 0:03.19 96.8% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 3.146u 0.150s 0:03.44 95.6% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~% time mzscheme tmp.ss
 >> 3.238u 0.151s 0:03.47 97.4% =C2=A0 =C2=A0 0+0k 0+0io 0pf+0w
 >> [chienshi] ~%
 >>
 >>
 >> Robby
 >>
 >> On Thu, Feb 4, 2010 at 8:25 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> =
 wrote:
 >>> On Thu, Feb 4, 2010 at 8:36 PM, =C2=A0<cce@ccs.neu.edu> wrote:
 >>>> The file below takes a long time to compile. =C2=A0I gave up after abo=
 ut a minute. =C2=A0Longer files with more complicated definitions take a ma=
 tter of seconds; it seems clear there's some unnecessarily non-linear behav=
 ior going on.
 >>>
 >>> Are you sure the behavior is non-linear? =C2=A0When I looked at this la=
 st,
 >>> I thought it was linear but slow.
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>>
 >>
 >>
 >

From: Eric Dobson <eric.n.dobson@gmail.com>
To: bugs@racket-lang.org, cce@ccs.neu.edu
Cc: 
Subject: Re: typed-scheme/10734: Typed Scheme takes forever to compile a file with a long quoted list of symbols
Date: Thu, 28 Apr 2011 17:44:38 -0400

 I was working on trying to fix this bug and found the source of the problem but I don't understand enough to fix it.
 Here is a program that exhibits the cause of the non-linear behavior. Hope it helps whoever ends up fixing it.
 
 #lang racket
 (require typed-scheme/rep/type-rep)
 
 
 (define sym-type (make-Value (gensym)))
 (define (make-list-type n)
   (cond
     ((zero? n) sym-type)
     (else 
      (let ((rec (make-list-type (sub1 n))))
        (time (make-Pair sym-type rec))))))
 
 (void (time (make-list-type 350)))
 
 
 -Eric
State changed from "open" to "closed" by samth@racket-lang.org at Fri, 26 Aug 2011 14:24:52 -0400
Reason>>> A commit by samth@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/598d81671a
