From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Mar 26 13:02:09 2013
Received: from mail-ob0-f176.google.com (mail-ob0-f176.google.com [209.85.214.176])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r2QH26Wl008798
	for <bugs@bugs.plt-scheme.org>; Tue, 26 Mar 2013 13:02:06 -0400
Message-Id: <201303261702.r2QH20U5008792@champlain.ccs.neu.edu>
Date: Tue, 26 Mar 2013 13:02:00 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: min and max type with 0 arguments even though they don't support that.

>Number:         13635
>Category:       typed-scheme
>Synopsis:       min and max type with 0 arguments even though they don't support that.
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Mar 26 13:04:01 -0400 2013
>Last-Modified:  Thu May 02 10:52:01 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.2.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
Min and max have contracts (number? number? ... -> number?) yet have types like (Real * -> Real).

; min: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: at least 1
;   given: 0
>How-To-Repeat:
#lang typed/racket
(min)
>Fix:
>Audit-Trail:
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even though they don't support that.
Date: Tue, 26 Mar 2013 13:55:10 -0400

 I'm not sure what to do about this.
 
 If we change the type to require 1+ arguments, `(apply max <list>)'
 won't typecheck anymore. I've looked into that at some point, and that
 idiom was used by existing programs.
 
 Vincent
 
 
 
 At Tue, 26 Mar 2013 13:04:02 -0400,
 eric.n.dobson@gmail.com wrote:
 > 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 > 
 > Reported by Eric Dobson for release: 5.3.2.3
 > 
 > *** Description:
 > Min and max have contracts (number? number? ... -> number?) yet have types like (Real * -> Real).
 > 
 > ; min: arity mismatch;
 > ;  the expected number of arguments does not match the given number
 > ;   expected: at least 1
 > ;   given: 0
 > 
 > *** How to repeat:
 > #lang typed/racket
 > (min)
 > 
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even
 though they don't support that.
Date: Tue, 26 Mar 2013 12:56:18 -0500

 --f46d04479faf70de4504d8d7a37b
 Content-Type: text/plain; charset=UTF-8
 
 That idiom gets used in a buggy way a lot, tho.
 
 Robby
 
 
 On Tue, Mar 26, 2013 at 12:55 PM, Vincent St-Amour <stamourv@ccs.neu.edu>wrote:
 
 > I'm not sure what to do about this.
 >
 > If we change the type to require 1+ arguments, `(apply max <list>)'
 > won't typecheck anymore. I've looked into that at some point, and that
 > idiom was used by existing programs.
 >
 > Vincent
 >
 >
 >
 > At Tue, 26 Mar 2013 13:04:02 -0400,
 > eric.n.dobson@gmail.com wrote:
 > >
 > > A new problem report is waiting at
 > >   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 > >
 > > Reported by Eric Dobson for release: 5.3.2.3
 > >
 > > *** Description:
 > > Min and max have contracts (number? number? ... -> number?) yet have
 > types like (Real * -> Real).
 > >
 > > ; min: arity mismatch;
 > > ;  the expected number of arguments does not match the given number
 > > ;   expected: at least 1
 > > ;   given: 0
 > >
 > > *** How to repeat:
 > > #lang typed/racket
 > > (min)
 > >
 > > *** Environment:
 > > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > >
 >
 
 --f46d04479faf70de4504d8d7a37b
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">That idiom gets used in a buggy way a lot, tho.<div><br>Ro=
 bby</div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote=
 ">On Tue, Mar 26, 2013 at 12:55 PM, Vincent St-Amour <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:stamourv@ccs.neu.edu" target=3D"_blank">stamourv@ccs.neu.=
 edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I&#39;m not sure what to do about this.<br>
 <br>
 If we change the type to require 1+ arguments, `(apply max &lt;list&gt;)&#3=
 9;<br>
 won&#39;t typecheck anymore. I&#39;ve looked into that at some point, and t=
 hat<br>
 idiom was used by existing programs.<br>
 <br>
 Vincent<br>
 <br>
 <br>
 <br>
 At Tue, 26 Mar 2013 13:04:02 -0400,<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><a href=3D"mailto:eric.n.dobson@gma=
 il.com">eric.n.dobson@gmail.com</a> wrote:<br>
 &gt;<br>
 &gt; A new problem report is waiting at<br>
 &gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13635" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&a=
 mp;pr=3D13635</a><br>
 &gt;<br>
 &gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt;<br>
 &gt; *** Description:<br>
 &gt; Min and max have contracts (number? number? ... -&gt; number?) yet hav=
 e types like (Real * -&gt; Real).<br>
 &gt;<br>
 &gt; ; min: arity mismatch;<br>
 &gt; ; =C2=A0the expected number of arguments does not match the given numb=
 er<br>
 &gt; ; =C2=A0 expected: at least 1<br>
 &gt; ; =C2=A0 given: 0<br>
 &gt;<br>
 &gt; *** How to repeat:<br>
 &gt; #lang typed/racket<br>
 &gt; (min)<br>
 &gt;<br>
 &gt; *** Environment:<br>
 &gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/=
 537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --f46d04479faf70de4504d8d7a37b--
From: Jay McCarthy <jay.mccarthy@gmail.com>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even
 though they don't support that.
Date: Tue, 26 Mar 2013 11:55:58 -0600

 Doesn't that just mean that the type system is accurately finding that
 this idiom has a lurking error?
 
 On Tue, Mar 26, 2013 at 11:55 AM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 > I'm not sure what to do about this.
 >
 > If we change the type to require 1+ arguments, `(apply max <list>)'
 > won't typecheck anymore. I've looked into that at some point, and that
 > idiom was used by existing programs.
 >
 > Vincent
 >
 >
 >
 > At Tue, 26 Mar 2013 13:04:02 -0400,
 > eric.n.dobson@gmail.com wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 >>
 >> Reported by Eric Dobson for release: 5.3.2.3
 >>
 >> *** Description:
 >> Min and max have contracts (number? number? ... -> number?) yet have types like (Real * -> Real).
 >>
 >> ; min: arity mismatch;
 >> ;  the expected number of arguments does not match the given number
 >> ;   expected: at least 1
 >> ;   given: 0
 >>
 >> *** How to repeat:
 >> #lang typed/racket
 >> (min)
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >>
 
 
 
 -- 
 Jay McCarthy <jay@cs.byu.edu>
 Assistant Professor / Brigham Young University
 http://faculty.cs.byu.edu/~jay
 
 "The glory of God is Intelligence" - D&C 93
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Jay McCarthy <jay.mccarthy@gmail.com>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even though they don't support that.
Date: Tue, 26 Mar 2013 14:11:01 -0400

 In my mind, this is the same kind of issue as `first' not enforcing that
 its input list is non-empty. Yes, this means that the type system is not
 catching some cases where you take the first element of an empty list.
 But on the other hand, having to always explicitly guard calls to `first'
 with an `empty?' check is a usability issue.
 
 As with many things in TR, this is a compromise between checking and
 usability.
 
 Vincent
 
 
 
 At Tue, 26 Mar 2013 11:55:58 -0600,
 Jay McCarthy wrote:
 > 
 > Doesn't that just mean that the type system is accurately finding that
 > this idiom has a lurking error?
 > 
 > On Tue, Mar 26, 2013 at 11:55 AM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 > > I'm not sure what to do about this.
 > >
 > > If we change the type to require 1+ arguments, `(apply max <list>)'
 > > won't typecheck anymore. I've looked into that at some point, and that
 > > idiom was used by existing programs.
 > >
 > > Vincent
 > >
 > >
 > >
 > > At Tue, 26 Mar 2013 13:04:02 -0400,
 > > eric.n.dobson@gmail.com wrote:
 > >>
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 > >>
 > >> Reported by Eric Dobson for release: 5.3.2.3
 > >>
 > >> *** Description:
 > >> Min and max have contracts (number? number? ... -> number?) yet have types like (Real * -> Real).
 > >>
 > >> ; min: arity mismatch;
 > >> ;  the expected number of arguments does not match the given number
 > >> ;   expected: at least 1
 > >> ;   given: 0
 > >>
 > >> *** How to repeat:
 > >> #lang typed/racket
 > >> (min)
 > >>
 > >> *** Environment:
 > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > >>
 > 
 > 
 > 
 > -- 
 > Jay McCarthy <jay@cs.byu.edu>
 > Assistant Professor / Brigham Young University
 > http://faculty.cs.byu.edu/~jay
 > 
 > "The glory of God is Intelligence" - D&C 93
From: Robby Findler <robby@eecs.northwestern.edu>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Jay McCarthy <jay.mccarthy@gmail.com>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even
 though they don't support that.
Date: Tue, 26 Mar 2013 13:17:48 -0500

 --089e0149c37c5c85fa04d8d7f0b8
 Content-Type: text/plain; charset=UTF-8
 
 Every time (that comes to mind as I type) when I've written (apply max ...)
 I either had some very local information that told me that the ellipsis
 argument was a non-empty list, or I wrote (apply max 0 ...). So the other
 choice matches my expectation of what TR would do.
 
 But isn't one of the maxims of TR that this kind of decision should be
 backed up by actual evidence in our codebase?
 
 
 There are 4 in collects/framework. By my guess, 3 of them TR would be able
 to type. The fourth one is on an imported list that is known to be long
 (tex-shortcut-table). That could change and it would break that code, tho,
 so maybe there should be a guard there somehow anyways.
 
 But you should double check me. I'm not sure I can accurately predict TR's
 type-checking ability.
 
 Robby
 
 
 
 
 On Tue, Mar 26, 2013 at 1:11 PM, Vincent St-Amour <stamourv@ccs.neu.edu>wrote:
 
 > In my mind, this is the same kind of issue as `first' not enforcing that
 > its input list is non-empty. Yes, this means that the type system is not
 > catching some cases where you take the first element of an empty list.
 > But on the other hand, having to always explicitly guard calls to `first'
 > with an `empty?' check is a usability issue.
 >
 > As with many things in TR, this is a compromise between checking and
 > usability.
 >
 > Vincent
 >
 >
 >
 > At Tue, 26 Mar 2013 11:55:58 -0600,
 > Jay McCarthy wrote:
 > >
 > > Doesn't that just mean that the type system is accurately finding that
 > > this idiom has a lurking error?
 > >
 > > On Tue, Mar 26, 2013 at 11:55 AM, Vincent St-Amour <stamourv@ccs.neu.edu>
 > wrote:
 > > > I'm not sure what to do about this.
 > > >
 > > > If we change the type to require 1+ arguments, `(apply max <list>)'
 > > > won't typecheck anymore. I've looked into that at some point, and that
 > > > idiom was used by existing programs.
 > > >
 > > > Vincent
 > > >
 > > >
 > > >
 > > > At Tue, 26 Mar 2013 13:04:02 -0400,
 > > > eric.n.dobson@gmail.com wrote:
 > > >>
 > > >> A new problem report is waiting at
 > > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 > > >>
 > > >> Reported by Eric Dobson for release: 5.3.2.3
 > > >>
 > > >> *** Description:
 > > >> Min and max have contracts (number? number? ... -> number?) yet have
 > types like (Real * -> Real).
 > > >>
 > > >> ; min: arity mismatch;
 > > >> ;  the expected number of arguments does not match the given number
 > > >> ;   expected: at least 1
 > > >> ;   given: 0
 > > >>
 > > >> *** How to repeat:
 > > >> #lang typed/racket
 > > >> (min)
 > > >>
 > > >> *** Environment:
 > > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > > >>
 > >
 > >
 > >
 > > --
 > > Jay McCarthy <jay@cs.byu.edu>
 > > Assistant Professor / Brigham Young University
 > > http://faculty.cs.byu.edu/~jay
 > >
 > > "The glory of God is Intelligence" - D&C 93
 >
 
 --089e0149c37c5c85fa04d8d7f0b8
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Every time (that comes to mind as I type) when I&#39;ve wr=
 itten (apply max ...) I either had some very local information that told me=
  that the ellipsis argument was a non-empty list, or I wrote (apply max 0 .=
 ..). So the other choice matches my expectation of what TR would do.<div>
 <br></div><div style>But isn&#39;t one of the maxims of TR that this kind o=
 f decision should be backed up by actual evidence in our codebase?<br></div=
 ><div style><br></div><div style><br></div><div style>There are 4 in collec=
 ts/framework. By my guess, 3 of them TR would be able to type. The fourth o=
 ne is on an imported list that is known to be long (tex-shortcut-table). Th=
 at could change and it would break that code, tho, so maybe there should be=
  a guard there somehow anyways.<br>
 </div><div style><br></div><div style>But you should double check me. I&#39=
 ;m not sure I can accurately predict TR&#39;s type-checking ability.</div><=
 div style><br></div><div style>Robby</div><div style><br></div><div style>
 <br></div></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quot=
 e">On Tue, Mar 26, 2013 at 1:11 PM, Vincent St-Amour <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:stamourv@ccs.neu.edu" target=3D"_blank">stamourv@ccs.neu.=
 edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">In my mind, this is the same kind of issue a=
 s `first&#39; not enforcing that<br>
 its input list is non-empty. Yes, this means that the type system is not<br=
 >
 catching some cases where you take the first element of an empty list.<br>
 But on the other hand, having to always explicitly guard calls to `first&#3=
 9;<br>
 with an `empty?&#39; check is a usability issue.<br>
 <br>
 As with many things in TR, this is a compromise between checking and<br>
 usability.<br>
 <br>
 Vincent<br>
 <br>
 <br>
 <br>
 At Tue, 26 Mar 2013 11:55:58 -0600,<br>
 <div class=3D"HOEnZb"><div class=3D"h5">Jay McCarthy wrote:<br>
 &gt;<br>
 &gt; Doesn&#39;t that just mean that the type system is accurately finding =
 that<br>
 &gt; this idiom has a lurking error?<br>
 &gt;<br>
 &gt; On Tue, Mar 26, 2013 at 11:55 AM, Vincent St-Amour &lt;<a href=3D"mail=
 to:stamourv@ccs.neu.edu">stamourv@ccs.neu.edu</a>&gt; wrote:<br>
 &gt; &gt; I&#39;m not sure what to do about this.<br>
 &gt; &gt;<br>
 &gt; &gt; If we change the type to require 1+ arguments, `(apply max &lt;li=
 st&gt;)&#39;<br>
 &gt; &gt; won&#39;t typecheck anymore. I&#39;ve looked into that at some po=
 int, and that<br>
 &gt; &gt; idiom was used by existing programs.<br>
 &gt; &gt;<br>
 &gt; &gt; Vincent<br>
 &gt; &gt;<br>
 &gt; &gt;<br>
 &gt; &gt;<br>
 &gt; &gt; At Tue, 26 Mar 2013 13:04:02 -0400,<br>
 &gt; &gt; <a href=3D"mailto:eric.n.dobson@gmail.com">eric.n.dobson@gmail.co=
 m</a> wrote:<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; A new problem report is waiting at<br>
 &gt; &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D13635" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D13635</a><br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; Reported by Eric Dobson for release: 5.3.2.3<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; *** Description:<br>
 &gt; &gt;&gt; Min and max have contracts (number? number? ... -&gt; number?=
 ) yet have types like (Real * -&gt; Real).<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; ; min: arity mismatch;<br>
 &gt; &gt;&gt; ; =C2=A0the expected number of arguments does not match the g=
 iven number<br>
 &gt; &gt;&gt; ; =C2=A0 expected: at least 1<br>
 &gt; &gt;&gt; ; =C2=A0 given: 0<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; *** How to repeat:<br>
 &gt; &gt;&gt; #lang typed/racket<br>
 &gt; &gt;&gt; (min)<br>
 &gt; &gt;&gt;<br>
 &gt; &gt;&gt; *** Environment:<br>
 &gt; &gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) App=
 leWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28<br>
 &gt; &gt;&gt;<br>
 &gt;<br>
 &gt;<br>
 &gt;<br>
 &gt; --<br>
 &gt; Jay McCarthy &lt;<a href=3D"mailto:jay@cs.byu.edu">jay@cs.byu.edu</a>&=
 gt;<br>
 &gt; Assistant Professor / Brigham Young University<br>
 &gt; <a href=3D"http://faculty.cs.byu.edu/~jay" target=3D"_blank">http://fa=
 culty.cs.byu.edu/~jay</a><br>
 &gt;<br>
 &gt; &quot;The glory of God is Intelligence&quot; - D&amp;C 93<br>
 </div></div></blockquote></div><br></div>
 
 --089e0149c37c5c85fa04d8d7f0b8--
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even though they don't support that.
Date: Tue, 26 Mar 2013 17:10:35 -0400

 I completely back up Robby's post here, and I am grateful he wrote it so I didn't have to. 
 
 
 
 
 
 
 On Mar 26, 2013, at 2:17 PM, Robby Findler wrote:
 
 > Every time (that comes to mind as I type) when I've written (apply max ...) I either had some very local information that told me that the ellipsis argument was a non-empty list, or I wrote (apply max 0 ...). So the other choice matches my expectation of what TR would do.
 > 
 > But isn't one of the maxims of TR that this kind of decision should be backed up by actual evidence in our codebase?
 > 
 > 
 > There are 4 in collects/framework. By my guess, 3 of them TR would be able to type. The fourth one is on an imported list that is known to be long (tex-shortcut-table). That could change and it would break that code, tho, so maybe there should be a guard there somehow anyways.
 > 
 > But you should double check me. I'm not sure I can accurately predict TR's type-checking ability.
 > 
 > Robby
 > 
 > 
 > 
 > 
 > On Tue, Mar 26, 2013 at 1:11 PM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 > In my mind, this is the same kind of issue as `first' not enforcing that
 > its input list is non-empty. Yes, this means that the type system is not
 > catching some cases where you take the first element of an empty list.
 > But on the other hand, having to always explicitly guard calls to `first'
 > with an `empty?' check is a usability issue.
 > 
 > As with many things in TR, this is a compromise between checking and
 > usability.
 > 
 > Vincent
 > 
 > 
 > 
 > At Tue, 26 Mar 2013 11:55:58 -0600,
 > Jay McCarthy wrote:
 > >
 > > Doesn't that just mean that the type system is accurately finding that
 > > this idiom has a lurking error?
 > >
 > > On Tue, Mar 26, 2013 at 11:55 AM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 > > > I'm not sure what to do about this.
 > > >
 > > > If we change the type to require 1+ arguments, `(apply max <list>)'
 > > > won't typecheck anymore. I've looked into that at some point, and that
 > > > idiom was used by existing programs.
 > > >
 > > > Vincent
 > > >
 > > >
 > > >
 > > > At Tue, 26 Mar 2013 13:04:02 -0400,
 > > > eric.n.dobson@gmail.com wrote:
 > > >>
 > > >> A new problem report is waiting at
 > > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 > > >>
 > > >> Reported by Eric Dobson for release: 5.3.2.3
 > > >>
 > > >> *** Description:
 > > >> Min and max have contracts (number? number? ... -> number?) yet have types like (Real * -> Real).
 > > >>
 > > >> ; min: arity mismatch;
 > > >> ;  the expected number of arguments does not match the given number
 > > >> ;   expected: at least 1
 > > >> ;   given: 0
 > > >>
 > > >> *** How to repeat:
 > > >> #lang typed/racket
 > > >> (min)
 > > >>
 > > >> *** Environment:
 > > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > > >>
 > >
 > >
 > >
 > > --
 > > Jay McCarthy <jay@cs.byu.edu>
 > > Assistant Professor / Brigham Young University
 > > http://faculty.cs.byu.edu/~jay
 > >
 > > "The glory of God is Intelligence" - D&C 93
 > 
 
 
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even though they don't support that.
Date: Tue, 26 Mar 2013 18:00:28 -0400

 I'll survey the codebase, and look at other examples I have, to see how
 that idiom is used, and whether TR should be able to typecheck it.
 
 Vincent
 
 
 At Tue, 26 Mar 2013 13:17:48 -0500,
 Robby Findler wrote:
 > 
 > [1  <text/plain; UTF-8 (7bit)>]
 > Every time (that comes to mind as I type) when I've written (apply max ...)
 > I either had some very local information that told me that the ellipsis
 > argument was a non-empty list, or I wrote (apply max 0 ...). So the other
 > choice matches my expectation of what TR would do.
 > 
 > But isn't one of the maxims of TR that this kind of decision should be
 > backed up by actual evidence in our codebase?
 > 
 > 
 > There are 4 in collects/framework. By my guess, 3 of them TR would be able
 > to type. The fourth one is on an imported list that is known to be long
 > (tex-shortcut-table). That could change and it would break that code, tho,
 > so maybe there should be a guard there somehow anyways.
 > 
 > But you should double check me. I'm not sure I can accurately predict TR's
 > type-checking ability.
 > 
 > Robby
 > 
 > 
 > 
 > 
 > On Tue, Mar 26, 2013 at 1:11 PM, Vincent St-Amour <stamourv@ccs.neu.edu>wrote:
 > 
 > > In my mind, this is the same kind of issue as `first' not enforcing that
 > > its input list is non-empty. Yes, this means that the type system is not
 > > catching some cases where you take the first element of an empty list.
 > > But on the other hand, having to always explicitly guard calls to `first'
 > > with an `empty?' check is a usability issue.
 > >
 > > As with many things in TR, this is a compromise between checking and
 > > usability.
 > >
 > > Vincent
 > >
 > >
 > >
 > > At Tue, 26 Mar 2013 11:55:58 -0600,
 > > Jay McCarthy wrote:
 > > >
 > > > Doesn't that just mean that the type system is accurately finding that
 > > > this idiom has a lurking error?
 > > >
 > > > On Tue, Mar 26, 2013 at 11:55 AM, Vincent St-Amour <stamourv@ccs.neu.edu>
 > > wrote:
 > > > > I'm not sure what to do about this.
 > > > >
 > > > > If we change the type to require 1+ arguments, `(apply max <list>)'
 > > > > won't typecheck anymore. I've looked into that at some point, and that
 > > > > idiom was used by existing programs.
 > > > >
 > > > > Vincent
 > > > >
 > > > >
 > > > >
 > > > > At Tue, 26 Mar 2013 13:04:02 -0400,
 > > > > eric.n.dobson@gmail.com wrote:
 > > > >>
 > > > >> A new problem report is waiting at
 > > > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 > > > >>
 > > > >> Reported by Eric Dobson for release: 5.3.2.3
 > > > >>
 > > > >> *** Description:
 > > > >> Min and max have contracts (number? number? ... -> number?) yet have
 > > types like (Real * -> Real).
 > > > >>
 > > > >> ; min: arity mismatch;
 > > > >> ;  the expected number of arguments does not match the given number
 > > > >> ;   expected: at least 1
 > > > >> ;   given: 0
 > > > >>
 > > > >> *** How to repeat:
 > > > >> #lang typed/racket
 > > > >> (min)
 > > > >>
 > > > >> *** Environment:
 > > > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > > > >>
 > > >
 > > >
 > > >
 > > > --
 > > > Jay McCarthy <jay@cs.byu.edu>
 > > > Assistant Professor / Brigham Young University
 > > > http://faculty.cs.byu.edu/~jay
 > > >
 > > > "The glory of God is Intelligence" - D&C 93
 > >
 > [2  <text/html; UTF-8 (quoted-printable)>]
 > 

From: Eric Dobson <eric.n.dobson@gmail.com>
To: Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even
 though they don't support that.
Date: Wed, 1 May 2013 22:01:24 -0700

 Any update on the survey?
 
 On Tue, Mar 26, 2013 at 3:00 PM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 > I'll survey the codebase, and look at other examples I have, to see how
 > that idiom is used, and whether TR should be able to typecheck it.
 >
 > Vincent
 >
 >
 > At Tue, 26 Mar 2013 13:17:48 -0500,
 > Robby Findler wrote:
 >>
 >> [1  <text/plain; UTF-8 (7bit)>]
 >> Every time (that comes to mind as I type) when I've written (apply max ...)
 >> I either had some very local information that told me that the ellipsis
 >> argument was a non-empty list, or I wrote (apply max 0 ...). So the other
 >> choice matches my expectation of what TR would do.
 >>
 >> But isn't one of the maxims of TR that this kind of decision should be
 >> backed up by actual evidence in our codebase?
 >>
 >>
 >> There are 4 in collects/framework. By my guess, 3 of them TR would be able
 >> to type. The fourth one is on an imported list that is known to be long
 >> (tex-shortcut-table). That could change and it would break that code, tho,
 >> so maybe there should be a guard there somehow anyways.
 >>
 >> But you should double check me. I'm not sure I can accurately predict TR's
 >> type-checking ability.
 >>
 >> Robby
 >>
 >>
 >>
 >>
 >> On Tue, Mar 26, 2013 at 1:11 PM, Vincent St-Amour <stamourv@ccs.neu.edu>wrote:
 >>
 >> > In my mind, this is the same kind of issue as `first' not enforcing that
 >> > its input list is non-empty. Yes, this means that the type system is not
 >> > catching some cases where you take the first element of an empty list.
 >> > But on the other hand, having to always explicitly guard calls to `first'
 >> > with an `empty?' check is a usability issue.
 >> >
 >> > As with many things in TR, this is a compromise between checking and
 >> > usability.
 >> >
 >> > Vincent
 >> >
 >> >
 >> >
 >> > At Tue, 26 Mar 2013 11:55:58 -0600,
 >> > Jay McCarthy wrote:
 >> > >
 >> > > Doesn't that just mean that the type system is accurately finding that
 >> > > this idiom has a lurking error?
 >> > >
 >> > > On Tue, Mar 26, 2013 at 11:55 AM, Vincent St-Amour <stamourv@ccs.neu.edu>
 >> > wrote:
 >> > > > I'm not sure what to do about this.
 >> > > >
 >> > > > If we change the type to require 1+ arguments, `(apply max <list>)'
 >> > > > won't typecheck anymore. I've looked into that at some point, and that
 >> > > > idiom was used by existing programs.
 >> > > >
 >> > > > Vincent
 >> > > >
 >> > > >
 >> > > >
 >> > > > At Tue, 26 Mar 2013 13:04:02 -0400,
 >> > > > eric.n.dobson@gmail.com wrote:
 >> > > >>
 >> > > >> A new problem report is waiting at
 >> > > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 >> > > >>
 >> > > >> Reported by Eric Dobson for release: 5.3.2.3
 >> > > >>
 >> > > >> *** Description:
 >> > > >> Min and max have contracts (number? number? ... -> number?) yet have
 >> > types like (Real * -> Real).
 >> > > >>
 >> > > >> ; min: arity mismatch;
 >> > > >> ;  the expected number of arguments does not match the given number
 >> > > >> ;   expected: at least 1
 >> > > >> ;   given: 0
 >> > > >>
 >> > > >> *** How to repeat:
 >> > > >> #lang typed/racket
 >> > > >> (min)
 >> > > >>
 >> > > >> *** Environment:
 >> > > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >> > > >>
 >> > >
 >> > >
 >> > >
 >> > > --
 >> > > Jay McCarthy <jay@cs.byu.edu>
 >> > > Assistant Professor / Brigham Young University
 >> > > http://faculty.cs.byu.edu/~jay
 >> > >
 >> > > "The glory of God is Intelligence" - D&C 93
 >> >
 >> [2  <text/html; UTF-8 (quoted-printable)>]
 >>
From: Vincent St-Amour <stamourv@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Vincent St-Amour <stamourv@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        Jay McCarthy <jay.mccarthy@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13635: min and max type with 0 arguments even though they don't support that.
Date: Thu, 02 May 2013 09:33:14 -0400

 Not yet.
 
 Vincent
 
 
 At Wed, 1 May 2013 22:01:24 -0700,
 Eric Dobson wrote:
 > 
 > Any update on the survey?
 > 
 > On Tue, Mar 26, 2013 at 3:00 PM, Vincent St-Amour <stamourv@ccs.neu.edu> wrote:
 > > I'll survey the codebase, and look at other examples I have, to see how
 > > that idiom is used, and whether TR should be able to typecheck it.
 > >
 > > Vincent
 > >
 > >
 > > At Tue, 26 Mar 2013 13:17:48 -0500,
 > > Robby Findler wrote:
 > >>
 > >> [1  <text/plain; UTF-8 (7bit)>]
 > >> Every time (that comes to mind as I type) when I've written (apply max ...)
 > >> I either had some very local information that told me that the ellipsis
 > >> argument was a non-empty list, or I wrote (apply max 0 ...). So the other
 > >> choice matches my expectation of what TR would do.
 > >>
 > >> But isn't one of the maxims of TR that this kind of decision should be
 > >> backed up by actual evidence in our codebase?
 > >>
 > >>
 > >> There are 4 in collects/framework. By my guess, 3 of them TR would be able
 > >> to type. The fourth one is on an imported list that is known to be long
 > >> (tex-shortcut-table). That could change and it would break that code, tho,
 > >> so maybe there should be a guard there somehow anyways.
 > >>
 > >> But you should double check me. I'm not sure I can accurately predict TR's
 > >> type-checking ability.
 > >>
 > >> Robby
 > >>
 > >>
 > >>
 > >>
 > >> On Tue, Mar 26, 2013 at 1:11 PM, Vincent St-Amour <stamourv@ccs.neu.edu>wrote:
 > >>
 > >> > In my mind, this is the same kind of issue as `first' not enforcing that
 > >> > its input list is non-empty. Yes, this means that the type system is not
 > >> > catching some cases where you take the first element of an empty list.
 > >> > But on the other hand, having to always explicitly guard calls to `first'
 > >> > with an `empty?' check is a usability issue.
 > >> >
 > >> > As with many things in TR, this is a compromise between checking and
 > >> > usability.
 > >> >
 > >> > Vincent
 > >> >
 > >> >
 > >> >
 > >> > At Tue, 26 Mar 2013 11:55:58 -0600,
 > >> > Jay McCarthy wrote:
 > >> > >
 > >> > > Doesn't that just mean that the type system is accurately finding that
 > >> > > this idiom has a lurking error?
 > >> > >
 > >> > > On Tue, Mar 26, 2013 at 11:55 AM, Vincent St-Amour <stamourv@ccs.neu.edu>
 > >> > wrote:
 > >> > > > I'm not sure what to do about this.
 > >> > > >
 > >> > > > If we change the type to require 1+ arguments, `(apply max <list>)'
 > >> > > > won't typecheck anymore. I've looked into that at some point, and that
 > >> > > > idiom was used by existing programs.
 > >> > > >
 > >> > > > Vincent
 > >> > > >
 > >> > > >
 > >> > > >
 > >> > > > At Tue, 26 Mar 2013 13:04:02 -0400,
 > >> > > > eric.n.dobson@gmail.com wrote:
 > >> > > >>
 > >> > > >> A new problem report is waiting at
 > >> > > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13635
 > >> > > >>
 > >> > > >> Reported by Eric Dobson for release: 5.3.2.3
 > >> > > >>
 > >> > > >> *** Description:
 > >> > > >> Min and max have contracts (number? number? ... -> number?) yet have
 > >> > types like (Real * -> Real).
 > >> > > >>
 > >> > > >> ; min: arity mismatch;
 > >> > > >> ;  the expected number of arguments does not match the given number
 > >> > > >> ;   expected: at least 1
 > >> > > >> ;   given: 0
 > >> > > >>
 > >> > > >> *** How to repeat:
 > >> > > >> #lang typed/racket
 > >> > > >> (min)
 > >> > > >>
 > >> > > >> *** Environment:
 > >> > > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > >> > > >>
 > >> > >
 > >> > >
 > >> > >
 > >> > > --
 > >> > > Jay McCarthy <jay@cs.byu.edu>
 > >> > > Assistant Professor / Brigham Young University
 > >> > > http://faculty.cs.byu.edu/~jay
 > >> > >
 > >> > > "The glory of God is Intelligence" - D&C 93
 > >> >
 > >> [2  <text/html; UTF-8 (quoted-printable)>]
 > >>
