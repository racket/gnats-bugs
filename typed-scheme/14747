From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Sep 23 16:36:49 2014
Received: from mail-ie0-f176.google.com (mail-ie0-f176.google.com [209.85.223.176])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s8NKam6Y029417
	for <bugs@bugs.plt-scheme.org>; Tue, 23 Sep 2014 16:36:48 -0400
Message-Id: <201409232036.s8NKaikX029409@winooski.ccs.neu.edu>
Date: Tue, 23 Sep 2014 16:36:44 -0400
From: josephmcollard@gmail.com
To: bugs@racket-lang.org
Subject: Typed Racket Type Error when type is correct

>Number:         14747
>Category:       typed-scheme
>Synopsis:       Typed Racket Type Error when type is correct
>Class:          sw-bug
>Responsible:    asumu
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Sep 23 16:40:02 -0400 2014
>Closed-Date:    Thu Oct 23 23:03:54 -0400 2014
>Last-Modified:  Thu Oct 23 23:03:54 -0400 2014
>Originator:     Joseph Collard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.1
>Environment:
unix "Linux xenon 3.11.0-20-generic #35~precise1-Ubuntu SMP Fri May 2 21:32:55 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 713925896
raco pkg (show):
Installation-wide:
 Package              Checksum                                    Source
 main-distribution    f07e2d4bf2708c1085be38eca18aa9eb6755e547    (catalog main-distribution)
 racket-lib           41c7b3221006758c5a840a18dcc0d265632f14c2    (catalog racket-lib)
 [175 auto-installed packages not shown]
User-specific for installation "6.1":
 [none]



Collections:
("/home/jcollard/.racket/6.1/collects"
 (non-existent-path))
("/usr/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test)) #t))
>Description:
Given the following while using #typed/racket:

(define-type XExpr (U String 
                      Symbol 
                      Char
                      (Pairof Symbol (Pairof (Listof (List Symbol String)) (Listof XExpr)))
                      (Pairof Symbol (Listof XExpr))))
                       

(: okay (Pairof Symbol (Listof XExpr)))
(define okay
  (let: ([elem : XExpr "some xexpr"])
    `(li ,elem)))

(: bug XExpr)
(define bug
    (let: ([elem : XExpr "some xexpr"])
      `(li ,elem)))

An error occurs on the definition of bug. Notice that it has the same type as okay which falls under the union type of XExpr. If you change the order of the union type to:

(define-type XExpr (U String 
                      Symbol 
                      Char
                      (Pairof Symbol (Listof XExpr))
                      (Pairof Symbol (Pairof (Listof (List Symbol String)) (Listof XExpr)))))

The issue goes away but similar issues on the last type pop up.
>How-To-Repeat:
Try to run this code:

#lang typed/racket

(provide XExpr)
(define-type XExpr (U String 
                      Symbol 
                      Char
                      (Pairof Symbol (Pairof (Listof (List Symbol String)) (Listof XExpr)))
                      (Pairof Symbol (Listof XExpr))))
                       

(: okay (Pairof Symbol (Listof XExpr)))
(define okay
  (let: ([elem : XExpr "some xexpr"])
    `(li ,elem)))

(: bug XExpr)
(define bug
    (let: ([elem : XExpr "some xexpr"])
      `(li ,elem)))


It should type check but doesn't.
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: josephmcollard@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14747: Typed Racket Type Error when type is
 correct
Date: Tue, 21 Oct 2014 23:31:58 -0400

 Hi Joseph,
 
 Thanks for the bug report. After some investigating, it appears the root
 cause of this issue is the same as PR 14758:
   http://bugs.racket-lang.org/query/?cmd=view&audit-trail&database=default&pr=14758
 
 There's currently a pull request that fixes that bug.
   https://github.com/plt/racket/pull/789
 
 So once that is merged it should fix this too.
 
 In the meantime, if you need a workaround it seems to work if you use
 the equivalent form of (cons 'li (list elem)) instead.
 
 Cheers,
 Asumu
 
 On 2014-09-23 16:40:02 -0400, josephmcollard@gmail.com wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14747
 > 
 > Reported by Joseph Collard for release: 6.1
 > 
 > *** Description:
 > Given the following while using #typed/racket:
 > 
 > (define-type XExpr (U String 
 >                       Symbol 
 >                       Char
 >                       (Pairof Symbol (Pairof (Listof (List Symbol String)) (Listof XExpr)))
 >                       (Pairof Symbol (Listof XExpr))))
 >                        
 > 
 > (: okay (Pairof Symbol (Listof XExpr)))
 > (define okay
 >   (let: ([elem : XExpr "some xexpr"])
 >     `(li ,elem)))
 > 
 > (: bug XExpr)
 > (define bug
 >     (let: ([elem : XExpr "some xexpr"])
 >       `(li ,elem)))
 > 
 > An error occurs on the definition of bug. Notice that it has the same type as okay which falls under the union type of XExpr. If you change the order of the union type to:
 > 
 > (define-type XExpr (U String 
 >                       Symbol 
 >                       Char
 >                       (Pairof Symbol (Listof XExpr))
 >                       (Pairof Symbol (Pairof (Listof (List Symbol String)) (Listof XExpr)))))
 > 
 > The issue goes away but similar issues on the last type pop up.
 > 
 > *** How to repeat:
 > Try to run this code:
 > 
 > #lang typed/racket
 > 
 > (provide XExpr)
 > (define-type XExpr (U String 
 >                       Symbol 
 >                       Char
 >                       (Pairof Symbol (Pairof (Listof (List Symbol String)) (Listof XExpr)))
 >                       (Pairof Symbol (Listof XExpr))))
 >                        
 > 
 > (: okay (Pairof Symbol (Listof XExpr)))
 > (define okay
 >   (let: ([elem : XExpr "some xexpr"])
 >     `(li ,elem)))
 > 
 > (: bug XExpr)
 > (define bug
 >     (let: ([elem : XExpr "some xexpr"])
 >       `(li ,elem)))
 > 
 > 
 > It should type check but doesn't.
 > 
 > *** Environment:
 > unix "Linux xenon 3.11.0-20-generic #35~precise1-Ubuntu SMP Fri May 2 21:32:55 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 713925896
 > raco pkg (show):
 > Installation-wide:
 >  Package              Checksum                                    Source
 >  main-distribution    f07e2d4bf2708c1085be38eca18aa9eb6755e547    (catalog main-distribution)
 >  racket-lib           41c7b3221006758c5a840a18dcc0d265632f14c2    (catalog racket-lib)
 >  [175 auto-installed packages not shown]
 > User-specific for installation "6.1":
 >  [none]
 > 
 > 
 > 
 > Collections:
 > ("/home/jcollard/.racket/6.1/collects"
 >  (non-existent-path))
 > ("/usr/racket/collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))
 > 
 > Recent Internal Errors: 
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test)) #t))
Responsible changed from "samth" to "asumu" by asumu@racket-lang.org at Thu, 23 Oct 2014 23:03:54 -0400
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5138614aba
State changed from "open" to "closed" by asumu@racket-lang.org at Thu, 23 Oct 2014 23:03:54 -0400
Reason>>> A commit by asumu@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/5138614aba
  | Fix checking of (list ...) w/ union expected type
  | 
  | Closes PR 14758
  | Closes PR 14747

