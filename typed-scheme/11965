From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jun  9 13:04:21 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p59H4Jm5008053
	for <bugs@bugs.plt-scheme.org>; Thu, 9 Jun 2011 13:04:19 -0400
Message-Id: <201106091704.p59H4GZQ008048@champlain.ccs.neu.edu>
Date: Thu, 9 Jun 2011 13:04:16 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Typed Racket does not have a type for arbitrarily many valued return types

>Number:         11965
>Category:       typed-scheme
>Synopsis:       Typed Racket does not have a type for arbitrarily many valued return types
>Class:          change-request
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jun 09 13:08:01 -0400 2011
>Closed-Date:    Sun Apr 28 01:20:03 -0400 2013
>Last-Modified:  Sun Apr 28 01:20:03 -0400 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.1
>Environment:
Linux i686 / Mozilla/5.0 (X11; Linux i686) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.71 Safari/534.24
>Description:
The Any type corresponds to an arbitrary value, but some functions can return more than one value and there is no type to describe that. For example eval has the type (-> Any Any) yet it can return multiple values if the input is #'(values 1 2). I can not find a place where the optimizer uses the fact that a function returns only one value, but if such an optimization existed, this would lead to a soundness bug.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org,
        Vincent St-Amour <stamourv@ccs.neu.edu>
Cc: nobody@racket-lang.org
Subject: Re: [racket-bug] all/11965: Typed Racket does not have a type for
 arbitrarily many valued return types
Date: Fri, 10 Jun 2011 15:30:43 -0400

 On Thu, Jun 9, 2011 at 1:08 PM,  <eric.n.dobson@gmail.com> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=11965
 >
 > Reported by Eric Dobson for release: 5.1.1
 >
 > *** Description:
 > The Any type corresponds to an arbitrary value, but some functions can return more than one value and there is no type to describe that. For example eval has the type (-> Any Any) yet it can return multiple values if the input is #'(values 1 2). I can not find a place where the optimizer uses the fact that a function returns only one value, but if such an optimization existed, this would lead to a soundness bug.
 
 Can we use a type like:
 
 (All (i ...) Any -> (values Any ... i))
 
 The trouble is that almost every use of `eval' probably assumes the
 current type, and we can't typecheck the input to eval ...
 
 Hmmm.
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, Vincent St-Amour <stamourv@ccs.neu.edu>,
        nobody@racket-lang.org
Subject: Re: [racket-bug] all/11965: Typed Racket does not have a type for
 arbitrarily many valued return types
Date: Fri, 10 Jun 2011 15:46:04 -0400

 I had trouble actually implementing some functions with that type in
 5.1.1, got back weird error messages (soon to be in another PR). But
 the following is a function with that type
 
 #lang typed/racket
 
 (: f (All (i ...) Any -> (values Any ... i)))
 (define (f x) (error 'a))
 
 The problem is that the user can instantiate the number of values it
 returns. Thus in the REPL type f, (inst f Integer), (inst f Integer
 Integer) and see the types produced:
 
 (All (i ...) (Any -> (values Any ... i)))
 (Any -> Any)
 (Any -> (values Any Any))
 
 Thus I don't think this is a solution.
 
 
 
 -Eric
 
 On Fri, Jun 10, 2011 at 3:30 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Thu, Jun 9, 2011 at 1:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=11965
 >>
 >> Reported by Eric Dobson for release: 5.1.1
 >>
 >> *** Description:
 >> The Any type corresponds to an arbitrary value, but some functions can return more than one value and there is no type to describe that. For example eval has the type (-> Any Any) yet it can return multiple values if the input is #'(values 1 2). I can not find a place where the optimizer uses the fact that a function returns only one value, but if such an optimization existed, this would lead to a soundness bug.
 >
 > Can we use a type like:
 >
 > (All (i ...) Any -> (values Any ... i))
 >
 > The trouble is that almost every use of `eval' probably assumes the
 > current type, and we can't typecheck the input to eval ...
 >
 > Hmmm.
 > --
 > sam th
 > samth@ccs.neu.edu
 >
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs@racket-lang.org, Vincent St-Amour <stamourv@ccs.neu.edu>,
        nobody@racket-lang.org
Subject: Re: [racket-bug] all/11965: Typed Racket does not have a type for
 arbitrarily many valued return types
Date: Fri, 10 Jun 2011 15:50:15 -0400

 Right, of course.  It needs an existential over the number of values.
 But then it will be useless, as I said.
 
 On Fri, Jun 10, 2011 at 3:46 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > I had trouble actually implementing some functions with that type in
 > 5.1.1, got back weird error messages (soon to be in another PR). But
 > the following is a function with that type
 >
 > #lang typed/racket
 >
 > (: f (All (i ...) Any -> (values Any ... i)))
 > (define (f x) (error 'a))
 >
 > The problem is that the user can instantiate the number of values it
 > returns. Thus in the REPL type f, (inst f Integer), (inst f Integer
 > Integer) and see the types produced:
 >
 > (All (i ...) (Any -> (values Any ... i)))
 > (Any -> Any)
 > (Any -> (values Any Any))
 >
 > Thus I don't think this is a solution.
 >
 >
 >
 > -Eric
 >
 > On Fri, Jun 10, 2011 at 3:30 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> On Thu, Jun 9, 2011 at 1:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=view&pr=11965
 >>>
 >>> Reported by Eric Dobson for release: 5.1.1
 >>>
 >>> *** Description:
 >>> The Any type corresponds to an arbitrary value, but some functions can return more than one value and there is no type to describe that. For example eval has the type (-> Any Any) yet it can return multiple values if the input is #'(values 1 2). I can not find a place where the optimizer uses the fact that a function returns only one value, but if such an optimization existed, this would lead to a soundness bug.
 >>
 >> Can we use a type like:
 >>
 >> (All (i ...) Any -> (values Any ... i))
 >>
 >> The trouble is that almost every use of `eval' probably assumes the
 >> current type, and we can't typecheck the input to eval ...
 >>
 >> Hmmm.
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, Vincent St-Amour <stamourv@ccs.neu.edu>,
        nobody@racket-lang.org
Subject: Re: [racket-bug] all/11965: Typed Racket does not have a type for
 arbitrarily many valued return types
Date: Fri, 10 Jun 2011 16:00:21 -0400

 It might be useless in the case of eval, because the value is actually
 wanted. But there are other functions which should have this type
 whose purpose is to be executed for effect and the values are
 discarded (error-display-handler, arguments to make-security-guard).
 Such procedures can be used in a begin or call-with-values and are
 thus not entirely useless.
 
 -Eric
 
 On Fri, Jun 10, 2011 at 3:50 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > Right, of course.  It needs an existential over the number of values.
 > But then it will be useless, as I said.
 >
 > On Fri, Jun 10, 2011 at 3:46 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> I had trouble actually implementing some functions with that type in
 >> 5.1.1, got back weird error messages (soon to be in another PR). But
 >> the following is a function with that type
 >>
 >> #lang typed/racket
 >>
 >> (: f (All (i ...) Any -> (values Any ... i)))
 >> (define (f x) (error 'a))
 >>
 >> The problem is that the user can instantiate the number of values it
 >> returns. Thus in the REPL type f, (inst f Integer), (inst f Integer
 >> Integer) and see the types produced:
 >>
 >> (All (i ...) (Any -> (values Any ... i)))
 >> (Any -> Any)
 >> (Any -> (values Any Any))
 >>
 >> Thus I don't think this is a solution.
 >>
 >>
 >>
 >> -Eric
 >>
 >> On Fri, Jun 10, 2011 at 3:30 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>> On Thu, Jun 9, 2011 at 1:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >>>> A new problem report is waiting at
 >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=11965
 >>>>
 >>>> Reported by Eric Dobson for release: 5.1.1
 >>>>
 >>>> *** Description:
 >>>> The Any type corresponds to an arbitrary value, but some functions can return more than one value and there is no type to describe that. For example eval has the type (-> Any Any) yet it can return multiple values if the input is #'(values 1 2). I can not find a place where the optimizer uses the fact that a function returns only one value, but if such an optimization existed, this would lead to a soundness bug.
 >>>
 >>> Can we use a type like:
 >>>
 >>> (All (i ...) Any -> (values Any ... i))
 >>>
 >>> The trouble is that almost every use of `eval' probably assumes the
 >>> current type, and we can't typecheck the input to eval ...
 >>>
 >>> Hmmm.
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >>>
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
 

State changed from "open" to "closed" by endobson at Sun, 28 Apr 2013 01:20:03 -0400
Reason>>> Implemented.

