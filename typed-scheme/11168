From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Sep  7 10:30:43 2010
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o87EUfmL004934
	for <bugs@bugs.plt-scheme.org>; Tue, 7 Sep 2010 10:30:41 -0400
Message-Id: <201009071430.o87EUbjb004924@champlain.ccs.neu.edu>
Date: Tue, 7 Sep 2010 10:30:37 -0400
From: sk@cs.brown.edu
To: bugs@racket-lang.org
Subject: Typed Racket allows gratuitous extra cases

>Number:         11168
>Category:       typed-scheme
>Synopsis:       Typed Racket allows gratuitous extra cases
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Sep 07 10:32:02 -0400 2010
>Closed-Date:    Tue Sep 07 10:37:40 -0400 2010
>Last-Modified:  Tue Sep 07 18:32:01 -0400 2010
>Originator:     Shriram Krishnamurthi
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1
>Environment:
windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 296203760

Collections:
(("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0.1\\collects" "info-domain" "installed-teachpacks" "plai") ("C:\\Program Files (x86)\\Racket\\5.0.1\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typ!
 ed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
Even when there is sufficient static information to determine that a conditional has too many cases, Typed Racket doesn't signal a type error -- even though it does signal a run-time error, so clearly it doesn't consider this acceptable.
>How-To-Repeat:
#lang typed/racket

(define-type Expr (U Number String))
(define-type Val Boolean)

(: interp (Expr -> Val))
(define (interp e)
  (cond
    [(number? e) true]
    [(string? e) true]
    [(boolean? e) false]))

Welcome to DrRacket, version 5.0.1 [3m].
Language: typed/racket; memory limit: 128 MB.
> (interp 3)
 - : Val
#t
> (interp "x")
- : Val
#t
> (interp [[true]])  ;;[[...]] = highlighted
. Type Checker: Expected Expr, but got True in: true
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: sk@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 10:35:17 -0400

 I don't see a run-time error. I see a type error signaled from the REPL.=20=
 
 
 Did you mean to include something else?=20
 
 ;; ---=20
 
 It is arguable that this is a type error. Old-fashioned compilers issue =
 warnings for such code. I am opposed to warnings, but I would be happy =
 to combine TR with a coverage tool that displays such problems.=20
 
 
 
 On Sep 7, 2010, at 10:32 AM, sk@cs.brown.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11168
 >=20
 > Reported by Shriram Krishnamurthi for release: 5.0.1
 >=20
 > *** Description:
 > Even when there is sufficient static information to determine that a =
 conditional has too many cases, Typed Racket doesn't signal a type error =
 -- even though it does signal a run-time error, so clearly it doesn't =
 consider this acceptable.
 >=20
 > *** How to repeat:
 > #lang typed/racket
 >=20
 > (define-type Expr (U Number String))
 > (define-type Val Boolean)
 >=20
 > (: interp (Expr -> Val))
 > (define (interp e)
 >  (cond
 >    [(number? e) true]
 >    [(string? e) true]
 >    [(boolean? e) false]))
 >=20
 > Welcome to DrRacket, version 5.0.1 [3m].
 > Language: typed/racket; memory limit: 128 MB.
 >> (interp 3)
 > - : Val
 > #t
 >> (interp "x")
 > - : Val
 > #t
 >> (interp [[true]])  ;;[[...]] =3D highlighted
 > . Type Checker: Expected Expr, but got True in: true
 >=20
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) =
 (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 296203760
 >=20
 > Collections:
 > (("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0.1\\collects" =
 "info-domain" "installed-teachpacks" "plai") ("C:\\Program Files =
 (x86)\\Racket\\5.0.1\\collects" "2htdp" "afm" "algol60" "at-exp" =
 "browser" "combinator-parser" "compiler" "config" "datalog" "defaults" =
 "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" =
 "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" =
 "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" =
 "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" =
 "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" =
 "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" =
 "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" =
 "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" =
 "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" =
 "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" =
 "tex2page" "texpict" "trace" "typed" "typ!
 > ed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
 > Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
 >=20
 

Responsible changed from "nobody" to "samth" by samth at Tue, 07 Sep 2010 10:37:40 -0400
Reason>>> tr

State changed from "open" to "closed" by samth at Tue, 07 Sep 2010 10:37:40 -0400
Reason>>> not a bug

From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: sk@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 10:37:15 -0400

 On Tue, Sep 7, 2010 at 10:32 AM,  <sk@cs.brown.edu> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11168
 >
 > Reported by Shriram Krishnamurthi for release: 5.0.1
 >
 > *** Description:
 > Even when there is sufficient static information to determine that a cond=
 itional has too many cases, Typed Racket doesn't signal a type error -- eve=
 n though it does signal a run-time error, so clearly it doesn't consider th=
 is acceptable.
 
 There's no runtime error here - the error you see is a static error.
 
 Additionally, this can't be made into a type error at the definition
 point.  Many Racket macros (and programmers) expect to be able to
 write dead code that isn't considered erroneous.  For example, if you
 remove the `boolean?' case, there's still an implicit [else (void)]
 added at the end of the `cond' by the expansion of `cond'.
 
 Finally, TR attempts to determine when the user (as opposed to a
 macro) has written dead code and log that at the 'warning level.  You
 should be able to see this in DrRacket.
 --=20
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 10:52:28 -0400

 Correct. The application is ill-typed (supplying an expr of type boolean =
 when the formal-parameter type admits only numbers and strings). The =
 function itself is properly typed and contains dead code.=20
 
 
 On Sep 7, 2010, at 10:39 AM, Shriram Krishnamurthi wrote:
 
 > Sorry, my prose was wrong.  What I meant is that there is no type
 > error issued on interp itself, which is the real issue I'm trying to
 > raise.
 >=20
 > On Tue, Sep 7, 2010 at 10:35 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>=20
 >> I don't see a run-time error. I see a type error signaled from the =
 REPL.
 >>=20
 >> Did you mean to include something else?
 >>=20
 >> ;; ---
 >>=20
 >> It is arguable that this is a type error. Old-fashioned compilers =
 issue warnings for such code. I am opposed to warnings, but I would be =
 happy to combine TR with a coverage tool that displays such problems.
 >>=20
 >>=20
 >>=20
 >> On Sep 7, 2010, at 10:32 AM, sk@cs.brown.edu wrote:
 >>=20
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11168
 >>>=20
 >>> Reported by Shriram Krishnamurthi for release: 5.0.1
 >>>=20
 >>> *** Description:
 >>> Even when there is sufficient static information to determine that a =
 conditional has too many cases, Typed Racket doesn't signal a type error =
 -- even though it does signal a run-time error, so clearly it doesn't =
 consider this acceptable.
 >>>=20
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>>=20
 >>> (define-type Expr (U Number String))
 >>> (define-type Val Boolean)
 >>>=20
 >>> (: interp (Expr -> Val))
 >>> (define (interp e)
 >>>  (cond
 >>>    [(number? e) true]
 >>>    [(string? e) true]
 >>>    [(boolean? e) false]))
 >>>=20
 >>> Welcome to DrRacket, version 5.0.1 [3m].
 >>> Language: typed/racket; memory limit: 128 MB.
 >>>> (interp 3)
 >>> - : Val
 >>> #t
 >>>> (interp "x")
 >>> - : Val
 >>> #t
 >>>> (interp [[true]])  ;;[[...]] =3D highlighted
 >>> . Type Checker: Expected Expr, but got True in: true
 >>>=20
 >>> *** Environment:
 >>> windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) =
 (get-display-depth) =3D 32
 >>> Human Language: english
 >>> (current-memory-use) 296203760
 >>>=20
 >>> Collections:
 >>> (("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0.1\\collects" =
 "info-domain" "installed-teachpacks" "plai") ("C:\\Program Files =
 (x86)\\Racket\\5.0.1\\collects" "2htdp" "afm" "algol60" "at-exp" =
 "browser" "combinator-parser" "compiler" "config" "datalog" "defaults" =
 "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" =
 "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" =
 "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" =
 "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" =
 "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" =
 "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" =
 "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" =
 "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" =
 "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" =
 "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" =
 "tex2page" "texpict" "trace" "typed" "typ!
 >>> ed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
 >>> Computer Language: (("Determine language from source") (#(#t print =
 mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
 >>>=20
 >>=20
 >>=20
 
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 10:56:32 -0400

 Is there any chance of TR having a different mechanism (type-case
 instead of cond, say) that offers checking of over- and
 under-statement of cases?  Basically, for those who want an ML-like
 experience?  You seem to have all the information you need for
 reporting both.  I can understand why you don't want to mess with
 cond.  I'm happy to use a different construct.
 
 Shriram
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Shriram Krishnamurthi <sk@cs.brown.edu>
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 11:29:42 -0400

 Sam, say someone is willing to change a cond to a typed-cond. 
 Could you assign a type to typed-cond that rejects the kind of 
 programs Shriram wants to reject? 
 
 
 
 On Sep 7, 2010, at 10:56 AM, Shriram Krishnamurthi wrote:
 
 > Is there any chance of TR having a different mechanism (type-case
 > instead of cond, say) that offers checking of over- and
 > under-statement of cases?  Basically, for those who want an ML-like
 > experience?  You seem to have all the information you need for
 > reporting both.  I can understand why you don't want to mess with
 > cond.  I'm happy to use a different construct.
 > 
 > Shriram
 
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 11:32:18 -0400

 Doesn't your "types as propositions" work let you perform just such
 calculations?
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 11:46:59 -0400

 On Tue, Sep 7, 2010 at 10:56 AM, Shriram Krishnamurthi <sk@cs.brown.edu> wr=
 ote:
 > Is there any chance of TR having a different mechanism (type-case
 > instead of cond, say) that offers checking of over- and
 > under-statement of cases? =A0Basically, for those who want an ML-like
 > experience? =A0You seem to have all the information you need for
 > reporting both. =A0I can understand why you don't want to mess with
 > cond. =A0I'm happy to use a different construct.
 
 Yes, this is definitely possible, if you're willing to switch to a
 sums-of-products style.  Eli's PL course already uses a version of
 `define-datatype' and `cases' that does exactly this, and is typed.
 Hopefully you, he, and the maintainer of the PLAI collection (Jay?)
 can merge these implementations together and then I can adapt the code
 I used to make Eli's system work.
 
 Making this work beyond what the `cases' construct currently covers is
 somewhat trickier, but I have some ideas.
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 13:53:48 -0400

 On Sep  7, Sam Tobin-Hochstadt wrote:
 > On Tue, Sep 7, 2010 at 10:56 AM, Shriram Krishnamurthi <sk@cs.brown.e=
 du> wrote:
 > > Is there any chance of TR having a different mechanism (type-case
 > > instead of cond, say) that offers checking of over- and
 > > under-statement of cases=3F =C2=A0Basically, for those who want an
 > > ML-like experience=3F =C2=A0You seem to have all the information yo=
 u need
 > > for reporting both. =C2=A0I can understand why you don't want to me=
 ss
 > > with cond. =C2=A0I'm happy to use a different construct.
 >=20
 > Yes, this is definitely possible, if you're willing to switch to a
 > sums-of-products style.  Eli's PL course already uses a version of
 > `define-datatype' and `cases' that does exactly this, and is typed.
 > Hopefully you, he, and the maintainer of the PLAI collection (Jay=3F)=
 
 > can merge these implementations together and then I can adapt the
 > code I used to make Eli's system work.
 
 Yes, this is a major feature of my class languages (which I had
 implemented way before typed scheme was conceived), and I think it is
 effective enough that I'd really like to see something added to TR
 itself...
 
 
 > Making this work beyond what the `cases' construct currently covers
 > is somewhat trickier, but I have some ideas.
 
 ...but in a generic way, so it works with any unions, and it works
 when you use `cond' or `match' or whatever.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 14:00:38 -0400

 On Tue, Sep 7, 2010 at 1:53 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> Making this work beyond what the `cases' construct currently covers
 >> is somewhat trickier, but I have some ideas.
 >
 > ...but in a generic way, so it works with any unions, and it works
 > when you use `cond' or `match' or whatever.
 
 For the reasons I already described, `cond' and `match' insert
 catchall cases that are important for untyped code, but are often
 dead.  So these can't be made to error when dead code is discovered.
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 14:22:37 -0400

 On Sep  7, Sam Tobin-Hochstadt wrote:
 > On Tue, Sep 7, 2010 at 1:53 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > >> Making this work beyond what the `cases' construct currently
 > >> covers is somewhat trickier, but I have some ideas.
 > >
 > > ...but in a generic way, so it works with any unions, and it works
 > > when you use `cond' or `match' or whatever.
 > 
 > For the reasons I already described, `cond' and `match' insert
 > catchall cases that are important for untyped code, but are often
 > dead.
 
 Obviously.
 
 
 > So these can't be made to error when dead code is discovered.
 
 I don't see why this is necessarily true.  You do get the original
 code, so you should be able to find out if there's any dead code in
 the original source.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 14:28:14 -0400

 On Tue, Sep 7, 2010 at 2:22 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> So these can't be made to error when dead code is discovered.
 >
 > I don't see why this is necessarily true. =A0You do get the original
 > code, so you should be able to find out if there's any dead code in
 > the original source.
 
 The problem with this is that "the original code" is not well defined
 in Racket programs.  Is it "the original code before any expansion"?
 Or "the original code as written in this module"?  Or "the code I
 wrote, but not including libraries"?
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 14:36:20 -0400

 On Sep  7, Sam Tobin-Hochstadt wrote:
 > On Tue, Sep 7, 2010 at 2:22 PM, Eli Barzilay <eli@barzilay.org> wrote=
 :
 > >> So these can't be made to error when dead code is discovered.
 > >
 > > I don't see why this is necessarily true. =C2=A0You do get the orig=
 inal
 > > code, so you should be able to find out if there's any dead code
 > > in the original source.
 >=20
 > The problem with this is that "the original code" is not well
 > defined in Racket programs.  Is it "the original code before any
 > expansion"=3F  Or "the original code as written in this module"=3F  O=
 r
 > "the code I wrote, but not including libraries"=3F
 
 The original code as written in this module, before any expansion.
 And yes, you could easily fool it (for example writing your own macro
 in a different module, possibly untyped).  It would still be useful
 for the cases it would catch.  But of course having the other side is
 more important -- where the code is not handling some part of the
 union.  This is handled now, but the error messages could be much
 better if there's explicit intention signalled by saying that I want
 the code to handle a specific union.
 
 In any case, these are all details of a very desirable (IMO) feature
 -- I didn't say that it's easy, or hard, or possible, or impossible.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 14:44:45 -0400

 On Tue, Sep 7, 2010 at 2:36 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > but the error messages could be much
 > better if there's explicit intention signalled by saying that I want
 > the code to handle a specific union.
 
 Right, certainly.  I agree with that, and that's what `cases'
 provides.  But doing it for existing forms such as `cond' is missing
 precisely that explicit signaling.
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 14:57:56 -0400

 On Sep  7, Sam Tobin-Hochstadt wrote:
 > On Tue, Sep 7, 2010 at 2:36 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > but the error messages could be much better if there's explicit
 > > intention signalled by saying that I want the code to handle a
 > > specific union.
 > 
 > Right, certainly.  I agree with that, and that's what `cases'
 > provides.  But doing it for existing forms such as `cond' is missing
 > precisely that explicit signaling.
 
 I think that we've reached a fixpoint re the desirability, but just to
 point at the problem I have with `cases' in the class: it works very
 well, but it's restricted to work on defined (sum) types -- I often
 wished to eliminate this restriction, and for "real" programming this
 restriction makes it a mostly impractical tool.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11168: Typed Racket allows gratuitous extra cases
Date: Tue, 7 Sep 2010 10:39:16 -0400

 Sorry, my prose was wrong.  What I meant is that there is no type
 error issued on interp itself, which is the real issue I'm trying to
 raise.
 
 On Tue, Sep 7, 2010 at 10:35 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > I don't see a run-time error. I see a type error signaled from the REPL.
 >
 > Did you mean to include something else?
 >
 > ;; ---
 >
 > It is arguable that this is a type error. Old-fashioned compilers issue w=
 arnings for such code. I am opposed to warnings, but I would be happy to co=
 mbine TR with a coverage tool that displays such problems.
 >
 >
 >
 > On Sep 7, 2010, at 10:32 AM, sk@cs.brown.edu wrote:
 >
 >> A new problem report is waiting at
 >> =A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11168
 >>
 >> Reported by Shriram Krishnamurthi for release: 5.0.1
 >>
 >> *** Description:
 >> Even when there is sufficient static information to determine that a con=
 ditional has too many cases, Typed Racket doesn't signal a type error -- ev=
 en though it does signal a run-time error, so clearly it doesn't consider t=
 his acceptable.
 >>
 >> *** How to repeat:
 >> #lang typed/racket
 >>
 >> (define-type Expr (U Number String))
 >> (define-type Val Boolean)
 >>
 >> (: interp (Expr -> Val))
 >> (define (interp e)
 >> =A0(cond
 >> =A0 =A0[(number? e) true]
 >> =A0 =A0[(string? e) true]
 >> =A0 =A0[(boolean? e) false]))
 >>
 >> Welcome to DrRacket, version 5.0.1 [3m].
 >> Language: typed/racket; memory limit: 128 MB.
 >>> (interp 3)
 >> - : Val
 >> #t
 >>> (interp "x")
 >> - : Val
 >> #t
 >>> (interp [[true]]) =A0;;[[...]] =3D highlighted
 >> . Type Checker: Expected Expr, but got True in: true
 >>
 >> *** Environment:
 >> windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth=
 ) =3D 32
 >> Human Language: english
 >> (current-memory-use) 296203760
 >>
 >> Collections:
 >> (("C:\\Users\\sk\\AppData\\Roaming\\Racket\\5.0.1\\collects" "info-domai=
 n" "installed-teachpacks" "plai") ("C:\\Program Files (x86)\\Racket\\5.0.1\=
 \collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "=
 compiler" "config" "datalog" "defaults" "deinprogramm" "drracket" "drscheme=
 " "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frt=
 ime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "ico=
 ns" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "=
 mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" =
 "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "rac=
 klog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme"=
  "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "s=
 lideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-co=
 lor" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "tr=
 ace" "typed" "typ!
 >> ed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
 >> Computer Language: (("Determine language from source") (#(#t print mixed=
 -fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
 >>
 >
 >
