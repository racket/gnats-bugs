From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jul 13 12:28:50 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q6DGSlkh015862
	for <bugs@bugs.plt-scheme.org>; Fri, 13 Jul 2012 12:28:47 -0400
Message-Id: <201207131628.q6DGSjBq015831@champlain.ccs.neu.edu>
Date: Fri, 13 Jul 2012 12:28:45 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: Certain field types make parameterized struct type predicates hard to read and write

>Number:         12903
>Category:       typed-scheme
>Synopsis:       Certain field types make parameterized struct type predicates hard to read and write
>Class:          sw-bug
>Responsible:    samth
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Jul 13 12:32:01 -0400 2012
>Last-Modified:  Tue Mar 26 00:42:46 -0400 2013
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.14--2012-07-12(3b1da09d/d)
>Environment:
unix "Linux schroder 2.6.38-15-generic #61-Ubuntu SMP Tue Jun 12 19:43:39 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 557015720
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/neil/.racket/5.3.0.14/collects"
 (non-existent-path))
("/home/neil/plt-math/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-debugger" "framework" "web-server" "d!
 einprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f ((main) (test))))
>Description:
For days, this kept me from defining a predicate for a union type involving one of these struct types. Then I figured out that TR could infer its type, so I didn't have to declare it.

Possibly related: if `bar' is one of these parameterized struct types, `define-predicate' can't define a predicate for `(bar Any)'. (Actually for any parameterized struct type with a procedure in it.) It says it can't convert the type to a contract, but a contract exists: the struct type's predicate.
>How-To-Repeat:
#lang typed/racket
(struct: (A) foo ([proc : (Any -> A)]))
(struct: (A) bar ([proc : (A -> Any)]))

In the REPL, predicates for `foo' read and write fine:

> foo?
- : (Any -> Boolean : (foo Any))
#<procedure:foo?>
> (: -foo? (Any -> Boolean : (foo Any)))
> (define (-foo? x) (foo? x))

But predicates for `bar' expose internals, and these internals are apparently expected in user-written types:

> bar?
- : (Any -> Boolean : (((struct-top: #(struct:#<syntax:3:13 bar> ((A -> Any)))) @ 0) | (! (struct-top: #(struct:#<syntax:3:13 bar> ((A -> Any)))) @ 0)))
#<procedure:bar?>
> (: -bar? (Any -> Boolean : (bar Any)))
> (define (-bar? x) (bar? x))
. Type Checker: Expected result with filter (((bar Any) @ x) | (! (bar Any) @ x)), got filter (((struct-top: #(struct:#<syntax:3:13 bar> ((A -> Any)))) @ x) | (! (struct-top: #(struct:#<syntax:3:13 bar> ((A -> Any)))) @ x)) in: (bar? x)

In neither case can a predicate be defined, even though one exists:

> (define-predicate -foo? (foo Any))
Type Checker: Type Error could not be converted to a predicate. in: (foo Any)
> (define-predicate -bar? (bar Any))
Type Checker: Type Error could not be converted to a predicate. in: (bar Any)
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12903: Certain field types make parameterized
 struct type predicates hard to read and write
Date: Fri, 13 Jul 2012 12:45:06 -0400

 On Fri, Jul 13, 2012 at 12:32 PM,  <neil.toronto@gmail.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12903
 >
 > Reported by Neil Toronto for release: 5.3.0.14--2012-07-12(3b1da09d/d)
 >
 > *** Description:
 > For days, this kept me from defining a predicate for a union type involving one of these struct types. Then I figured out that TR could infer its type, so I didn't have to declare it.
 >
 > Possibly related: if `bar' is one of these parameterized struct types, `define-predicate' can't define a predicate for `(bar Any)'. (Actually for any parameterized struct type with a procedure in it.) It says it can't convert the type to a contract, but a contract exists: the struct type's predicate.
 
 No, that's not right -- `bar?` predicate doesn't decide if a value is
 a `(bar Any)`.  Imagine it was, and consider the following.
 
 (define: v : Any (bar (lambda: ([x : Integer]) (add1 x)))
 (when (bar? v) ;; check that `v` is a `(bar Any)`
    (define: f : (Any -> Any) (bar-proc v)) ;; type-correct: A = Any
    (f "not an integer"))
 
 `bar?` is more like a predicate for `(bar Nothing)`, because `A`
 occurs in contravariant position in the types inside `bar`.
 
 `struct-top` means the supertype of all instances of that struct,
 which aren't always related to each other in any way.  Here,
 `(struct-top foo)` is basically `(foo Any)`, and `(struct-top bar)` is
 basically `(bar Nothing)`, but for structs where the type variable
 appears in both co- and contra-variant position, `(struct-top
 that-struct)` may be inexpressible in any other way, and not so useful
 to have a value of.
 
 However, it does currently print poorly, and I'll fix that.
 
 >
 > *** How to repeat:
 > #lang typed/racket
 > (struct: (A) foo ([proc : (Any -> A)]))
 > (struct: (A) bar ([proc : (A -> Any)]))
 >
 > In the REPL, predicates for `foo' read and write fine:
 >
 >> foo?
 > - : (Any -> Boolean : (foo Any))
 > #<procedure:foo?>
 >> (: -foo? (Any -> Boolean : (foo Any)))
 >> (define (-foo? x) (foo? x))
 >
 > But predicates for `bar' expose internals, and these internals are apparently expected in user-written types:
 >
 >> bar?
 > - : (Any -> Boolean : (((struct-top: #(struct:#<syntax:3:13 bar> ((A -> Any)))) @ 0) | (! (struct-top: #(struct:#<syntax:3:13 bar> ((A -> Any)))) @ 0)))
 > #<procedure:bar?>
 >> (: -bar? (Any -> Boolean : (bar Any)))
 >> (define (-bar? x) (bar? x))
 > . Type Checker: Expected result with filter (((bar Any) @ x) | (! (bar Any) @ x)), got filter (((struct-top: #(struct:#<syntax:3:13 bar> ((A -> Any)))) @ x) | (! (struct-top: #(struct:#<syntax:3:13 bar> ((A -> Any)))) @ x)) in: (bar? x)
 >
 > In neither case can a predicate be defined, even though one exists:
 >
 >> (define-predicate -foo? (foo Any))
 > Type Checker: Type Error could not be converted to a predicate. in: (foo Any)
 >> (define-predicate -bar? (bar Any))
 > Type Checker: Type Error could not be converted to a predicate. in: (bar Any)
 >
 > *** Environment:
 > unix "Linux schroder 2.6.38-15-generic #61-Ubuntu SMP Tue Jun 12 19:43:39 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 557015720
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/home/neil/.racket/5.3.0.14/collects"
 >  (non-existent-path))
 > ("/home/neil/plt-math/collects"
 >  ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-debugger" "framework" "web-server" "d!
 >  einprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f ((main) (test))))
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12903: Certain field types make parameterized
 struct type predicates hard to read and write
Date: Fri, 13 Jul 2012 10:25:48 -0700

 On 07/13/2012 09:45 AM, Sam Tobin-Hochstadt wrote:
 > No, that's not right -- `bar?` predicate doesn't decide if a value is
 > a `(bar Any)`.  Imagine it was, and consider the following.
 >
 > (define: v : Any (bar (lambda: ([x : Integer]) (add1 x)))
 > (when (bar? v) ;; check that `v` is a `(bar Any)`
 >     (define: f : (Any -> Any) (bar-proc v)) ;; type-correct: A = Any
 >     (f "not an integer"))
 
 Thanks for the explanation!
 
 > `bar?` is more like a predicate for `(bar Nothing)`, because `A`
 > occurs in contravariant position in the types inside `bar`.
 >
 > `struct-top` means the supertype of all instances of that struct,
 > which aren't always related to each other in any way.  Here,
 > `(struct-top foo)` is basically `(foo Any)`, and `(struct-top bar)` is
 > basically `(bar Nothing)`, but for structs where the type variable
 > appears in both co- and contra-variant position, `(struct-top
 > that-struct)` may be inexpressible in any other way, and not so useful
 > to have a value of.
  >
  > However, it does currently print poorly, and I'll fix that.
 
 Could you make something like the following work?
 
 (: -bar? (Any -> Boolean : (struct-top bar)))
 (define -bar? bar?)
 
 Or `Struct' instead of `struct-top'?
 
 Could Bad Things happen if there were some way for users to write the 
 type of a predicate for `bar'?
 
 Neil ⊥
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12903: Certain field types make parameterized
 struct type predicates hard to read and write
Date: Fri, 13 Jul 2012 13:28:39 -0400

 On Fri, Jul 13, 2012 at 1:25 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > On 07/13/2012 09:45 AM, Sam Tobin-Hochstadt wrote:
 >>
 >> No, that's not right -- `bar?` predicate doesn't decide if a value is
 >> a `(bar Any)`.  Imagine it was, and consider the following.
 >>
 >> (define: v : Any (bar (lambda: ([x : Integer]) (add1 x)))
 >> (when (bar? v) ;; check that `v` is a `(bar Any)`
 >>     (define: f : (Any -> Any) (bar-proc v)) ;; type-correct: A = Any
 >>     (f "not an integer"))
 >
 >
 > Thanks for the explanation!
 >
 >
 >> `bar?` is more like a predicate for `(bar Nothing)`, because `A`
 >> occurs in contravariant position in the types inside `bar`.
 >>
 >> `struct-top` means the supertype of all instances of that struct,
 >> which aren't always related to each other in any way.  Here,
 >> `(struct-top foo)` is basically `(foo Any)`, and `(struct-top bar)` is
 >> basically `(bar Nothing)`, but for structs where the type variable
 >> appears in both co- and contra-variant position, `(struct-top
 >> that-struct)` may be inexpressible in any other way, and not so useful
 >> to have a value of.
 >
 >>
 >> However, it does currently print poorly, and I'll fix that.
 >
 > Could you make something like the following work?
 >
 > (: -bar? (Any -> Boolean : (struct-top bar)))
 > (define -bar? bar?)
 
 Yes, I can make this work.  But, like I said, it's not so useful -- if
 you have a value of type `(struct-top bar)`, you can't access the
 fields.
 
 >
 > Or `Struct' instead of `struct-top'?
 >
 > Could Bad Things happen if there were some way for users to write the type
 > of a predicate for `bar'?
 >
 > Neil ⊥
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12903: Certain field types make parameterized
 struct type predicates hard to read and write
Date: Fri, 13 Jul 2012 10:40:38 -0700

 On 07/13/2012 10:28 AM, Sam Tobin-Hochstadt wrote:
 > On Fri, Jul 13, 2012 at 1:25 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 >> Could you make something like the following work?
 >>
 >> (: -bar? (Any -> Boolean : (struct-top bar)))
 >> (define -bar? bar?)
 >
 > Yes, I can make this work.  But, like I said, it's not so useful -- if
 > you have a value of type `(struct-top bar)`, you can't access the
 > fields.
 
 There may be cases (though I can't think of any) where TR can't infer 
 the type of a predicate involving a struct-top, but can check it.
 
 If that's not possible, then it's not necessary. But we do prefer it 
 when our languages can read what they print.
 
 Neil ⊥
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12903: Certain field types make parameterized
 struct type predicates hard to read and write
Date: Fri, 13 Jul 2012 14:36:46 -0400

 On Fri, Jul 13, 2012 at 1:40 PM, Neil Toronto <neil.toronto@gmail.com> wrote:
 > On 07/13/2012 10:28 AM, Sam Tobin-Hochstadt wrote:
 >>
 >> On Fri, Jul 13, 2012 at 1:25 PM, Neil Toronto <neil.toronto@gmail.com>
 >> wrote:
 >>>
 >>> Could you make something like the following work?
 >>>
 >>> (: -bar? (Any -> Boolean : (struct-top bar)))
 >>> (define -bar? bar?)
 >>
 >>
 >> Yes, I can make this work.  But, like I said, it's not so useful -- if
 >> you have a value of type `(struct-top bar)`, you can't access the
 >> fields.
 >
 >
 > There may be cases (though I can't think of any) where TR can't infer the
 > type of a predicate involving a struct-top, but can check it.
 >
 > If that's not possible, then it's not necessary. But we do prefer it when
 > our languages can read what they print.
 
 Right, I agree that it should work, and I'll do that.  But I don't
 think that having these values is going to so useful for you.
 -- 
 sam th
 samth@ccs.neu.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Neil Toronto <neil.toronto@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12903: Certain field types make parameterized struct type predicates hard to read and write
Date: Fri, 13 Jul 2012 18:41:16 -0400

 On Jul 13, 2012, at 1:40 PM, Neil Toronto wrote:
 
 >  But we do prefer it when our languages can read what they print.
 
 
 More accurately, it would be wonderful if programmers could write types in the same language as the type checker. This does not hold for TR, and it may cause problems for programmers. Naturally this is a conjecture and I could be wrong in that eliminating this gap doesn't help much or at all. -- Matthias
 
 
Responsible changed from "nobody" to "samth" by samth@racket-lang.org at Sat, 14 Jul 2012 19:29:23 -0400
Reason>>> A commit by samth@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/546c12cf2a

----------
A commit by samth@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/418a0c311b

