From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Nov  1 03:52:04 2009
Received: from mail-yx0-f192.google.com (mail-yx0-f192.google.com [209.85.210.192])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id nA18pwk2000760
	for <bugs@bugs.plt-scheme.org>; Sun, 1 Nov 2009 03:51:58 -0500
Message-Id: <200911010851.nA18pufL000712@champlain.ccs.neu.edu>
Date: Sun, 1 Nov 2009 03:51:56 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: Context printout in type errors

>Number:         10555
>Category:       typed-scheme
>Synopsis:       Context printout in type errors
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Nov 01 03:56:01 -0500 2009
>Last-Modified:  Fri Sep 03 21:17:55 -0400 2010
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.2
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 138777912

Collections:
(("/home/eli/.plt-scheme/4.2.2/collects" "info-domain" "pl") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "scriblib" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "2htdp" "profile" "trace" "mrlib" "algol60" "browser" "framework" "typed-scheme" "at-exp" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "htdp" "lang" "rnrs" "setup" "deinprogramm" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
Any program with multiple type errors will throw the errors one by one, and
each of these comes with a context printout, including the last one.  In the
program below, this makes 4 context printouts.  However, these contexts are
never useful (except maybe for people who are working on the TS implementation).
>How-To-Repeat:
#lang typed-scheme
(: a Integer)
(define a "3")
(define b (lambda (x) (+ x a)))
(+ b)
>Fix:
>Audit-Trail:
From: Sam TH <samth@ccs.neu.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/10555: Context printout in type errors
Date: Sun, 1 Nov 2009 08:40:41 -0400

 On Sun, Nov 1, 2009 at 4:56 AM,  <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10555
 >
 > Reported by Eli Barzilay for release: 4.2.2
 >
 > *** Description:
 > Any program with multiple type errors will throw the errors one by one, a=
 nd
 > each of these comes with a context printout, including the last one. =A0I=
 n the
 > program below, this makes 4 context printouts. =A0However, these contexts=
  are
 > never useful (except maybe for people who are working on the TS implement=
 ation).
 >
 > *** How to repeat:
 > #lang typed-scheme
 > (: a Integer)
 > (define a "3")
 > (define b (lambda (x) (+ x a)))
 > (+ b)
 
 
 I don't understand why you think they're not useful.  It highlights
 the all of the type errors, and then gives a printout of all of them.
 Is your complaint that you don't want the additional, last printout
 that highlights all type errors at once?
 
 I should say that when I program in Typed Scheme (not on the
 implementation), I find all the printouts useful.
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam TH <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10555: Context printout in type errors
Date: Sun, 1 Nov 2009 13:12:03 -0500

 On Nov  1, Sam TH wrote:
 > On Sun, Nov 1, 2009 at 4:56 AM,  <eli@barzilay.org> wrote:
 > > A new problem report is waiting at
 > > =C2=A0http://bugs.plt-scheme.org/query/=3Fcmd=3Dview&pr=3D10555
 > >
 > > Reported by Eli Barzilay for release: 4.2.2
 > >
 > > *** Description:
 > > Any program with multiple type errors will throw the errors one by =
 one, and
 > > each of these comes with a context printout, including the last one=
 . =C2=A0In the
 > > program below, this makes 4 context printouts. =C2=A0However, these=
  contexts are
 > > never useful (except maybe for people who are working on the TS imp=
 lementation).
 > >
 > > *** How to repeat:
 > > #lang typed-scheme
 > > (: a Integer)
 > > (define a "3")
 > > (define b (lambda (x) (+ x a)))
 > > (+ b)
 >=20
 >=20
 > I don't understand why you think they're not useful.  It highlights
 > the all of the type errors, and then gives a printout of all of them.=
 
 > Is your complaint that you don't want the additional, last printout
 > that highlights all type errors at once=3F
 >=20
 > I should say that when I program in Typed Scheme (not on the
 > implementation), I find all the printouts useful.
 
 Sorry, the missing bit is "in mzscheme".  Each of the errors has a
 context printed, which gives no useful information.
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Sam TH <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10555: Context printout in type errors
Date: Sun, 1 Nov 2009 16:55:50 -0500

 On Sun, Nov 1, 2009 at 1:12 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Nov =A01, Sam TH wrote:
 >> On Sun, Nov 1, 2009 at 4:56 AM, =A0<eli@barzilay.org> wrote:
 >> > A new problem report is waiting at
 >> > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10555
 >> >
 >> > Reported by Eli Barzilay for release: 4.2.2
 >> >
 >> > *** Description:
 >> > Any program with multiple type errors will throw the errors one by one=
 , and
 >> > each of these comes with a context printout, including the last one. =
 =A0In the
 >> > program below, this makes 4 context printouts. =A0However, these conte=
 xts are
 >> > never useful (except maybe for people who are working on the TS implem=
 entation).
 >> >
 >> > *** How to repeat:
 >> > #lang typed-scheme
 >> > (: a Integer)
 >> > (define a "3")
 >> > (define b (lambda (x) (+ x a)))
 >> > (+ b)
 >>
 >>
 >> I don't understand why you think they're not useful. =A0It highlights
 >> the all of the type errors, and then gives a printout of all of them.
 >> Is your complaint that you don't want the additional, last printout
 >> that highlights all type errors at once?
 >>
 >> I should say that when I program in Typed Scheme (not on the
 >> implementation), I find all the printouts useful.
 >
 > Sorry, the missing bit is "in mzscheme". =A0Each of the errors has a
 > context printed, which gives no useful information.
 
 This is a bug in mzscheme, I believe.  Or, if it isn't, it's totally
 non-obvious what I need to do differently.  I've mentioned this to
 Matthew, but he's never responded.  I think it might have to do with
 the way multiple error locations are reported, but I'm not sure.
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam TH <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10555: Context printout in type errors
Date: Sun, 1 Nov 2009 17:00:53 -0500

 On Nov  1, Sam TH wrote:
 > On Sun, Nov 1, 2009 at 1:12 PM, Eli Barzilay <eli@barzilay.org> wrote=
 :
 > > On Nov =C2=A01, Sam TH wrote:
 > >> On Sun, Nov 1, 2009 at 4:56 AM, =C2=A0<eli@barzilay.org> wrote:
 > >> > A new problem report is waiting at
 > >> > =C2=A0http://bugs.plt-scheme.org/query/=3Fcmd=3Dview&pr=3D10555
 > >> >
 > >> > Reported by Eli Barzilay for release: 4.2.2
 > >> >
 > >> > *** Description:
 > >> > Any program with multiple type errors will throw the errors one =
 by one, and
 > >> > each of these comes with a context printout, including the last =
 one. =C2=A0In the
 > >> > program below, this makes 4 context printouts. =C2=A0However, th=
 ese contexts are
 > >> > never useful (except maybe for people who are working on the TS =
 implementation).
 > >> >
 > >> > *** How to repeat:
 > >> > #lang typed-scheme
 > >> > (: a Integer)
 > >> > (define a "3")
 > >> > (define b (lambda (x) (+ x a)))
 > >> > (+ b)
 > >>
 > >>
 > >> I don't understand why you think they're not useful. =C2=A0It high=
 lights
 > >> the all of the type errors, and then gives a printout of all of th=
 em.
 > >> Is your complaint that you don't want the additional, last printou=
 t
 > >> that highlights all type errors at once=3F
 > >>
 > >> I should say that when I program in Typed Scheme (not on the
 > >> implementation), I find all the printouts useful.
 > >
 > > Sorry, the missing bit is "in mzscheme". =C2=A0Each of the errors h=
 as a
 > > context printed, which gives no useful information.
 >=20
 > This is a bug in mzscheme, I believe.  Or, if it isn't, it's totally
 > non-obvious what I need to do differently.  I've mentioned this to
 > Matthew, but he's never responded.  I think it might have to do with
 > the way multiple error locations are reported, but I'm not sure.
 
 I don't think that this is related to mzscheme, *unless* you're
 raising a single exception with all of these sub-exceptions in some
 field.  IIRC, you're doing some trick that shows each of the errors in
 turn, and then you raise the summary exception in the end -- if this
 is still what you're doing, then you should just parameterize the
 printout of the sub-exceptions to print no context, and make the final
 exception a user-error which shows no context (but that one's more
 questionable).
 
 --=20
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay=
 :
                     http://barzilay.org/                   Maze is Life=
 !
From: Sam TH <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10555: Context printout in type errors
Date: Sun, 1 Nov 2009 17:05:12 -0500

 On Sun, Nov 1, 2009 at 5:00 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Nov =A01, Sam TH wrote:
 >> On Sun, Nov 1, 2009 at 1:12 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> > On Nov =A01, Sam TH wrote:
 >> >> On Sun, Nov 1, 2009 at 4:56 AM, =A0<eli@barzilay.org> wrote:
 >> >> > A new problem report is waiting at
 >> >> > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10555
 >> >> >
 >> >> > Reported by Eli Barzilay for release: 4.2.2
 >> >> >
 >> >> > *** Description:
 >> >> > Any program with multiple type errors will throw the errors one by =
 one, and
 >> >> > each of these comes with a context printout, including the last one=
 . =A0In the
 >> >> > program below, this makes 4 context printouts. =A0However, these co=
 ntexts are
 >> >> > never useful (except maybe for people who are working on the TS imp=
 lementation).
 >> >> >
 >> >> > *** How to repeat:
 >> >> > #lang typed-scheme
 >> >> > (: a Integer)
 >> >> > (define a "3")
 >> >> > (define b (lambda (x) (+ x a)))
 >> >> > (+ b)
 >> >>
 >> >>
 >> >> I don't understand why you think they're not useful. =A0It highlights
 >> >> the all of the type errors, and then gives a printout of all of them.
 >> >> Is your complaint that you don't want the additional, last printout
 >> >> that highlights all type errors at once?
 >> >>
 >> >> I should say that when I program in Typed Scheme (not on the
 >> >> implementation), I find all the printouts useful.
 >> >
 >> > Sorry, the missing bit is "in mzscheme". =A0Each of the errors has a
 >> > context printed, which gives no useful information.
 >>
 >> This is a bug in mzscheme, I believe. =A0Or, if it isn't, it's totally
 >> non-obvious what I need to do differently. =A0I've mentioned this to
 >> Matthew, but he's never responded. =A0I think it might have to do with
 >> the way multiple error locations are reported, but I'm not sure.
 >
 > I don't think that this is related to mzscheme, *unless* you're
 > raising a single exception with all of these sub-exceptions in some
 > field. =A0IIRC, you're doing some trick that shows each of the errors in
 > turn, and then you raise the summary exception in the end -- if this
 > is still what you're doing, then you should just parameterize the
 > printout of the sub-exceptions to print no context, and make the final
 > exception a user-error which shows no context (but that one's more
 > questionable).
 
 Ah, now I finally understand what you mean by context.  In general,
 I'm not sure that context is useful for syntax errors, but that's
 another discussion.  And the bug in mzscheme is something different.
 
 But how can I change the printout - remember, I'm not controlling the
 top-level exception printer.  Also, how can I determine that I'm in
 mzscheme, so as to do this?
 --=20
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: Sam TH <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10555: Context printout in type errors
Date: Sun, 1 Nov 2009 17:25:03 -0500

 On Nov  1, Sam TH wrote:
 > 
 > Ah, now I finally understand what you mean by context.  In general,
 > I'm not sure that context is useful for syntax errors, but that's
 > another discussion.
 
 Yes, that's a different question -- it depends on whether you're just
 a user of the syntax or its developer.  In any case, for type errors,
 the set of developers is extremely small (basically just you, and
 perhaps me when I hack my TS variant), so the context is never
 helpful.
 
 
 > And the bug in mzscheme is something different.
 
 Right.
 
 
 > But how can I change the printout - remember, I'm not controlling
 > the top-level exception printer.  Also, how can I determine that I'm
 > in mzscheme, so as to do this?
 
 First, it doesn't matter if you're in mzscheme or drscheme -- in the
 latter, there is code that is supposed to hide parts of the context
 that the user is not supposed to see.  If this code is working
 correctly (and there are issues with it, IIRC), then these contexts
 wouldn't be printed anyway.
 
 As for controlling the exceptions -- that depends on how you're
 raising them.  I'm not sure exactly how you do that, and I don't have
 time to dig into the code now, but there are two ways, that are very
 roughly these:
 
   (define (raise-additional-exns e es)
     (for ([e es]) (thread-wait (thread (lambda () (raise e)))))
     (raise e))
 
   (define (raise-additional-exns e es)
     (define disph (error-display-handler))
     (for ([e es]) (disph (exn-message e) e))
     (raise e))
 
 Now, IIRC, you're doing the first -- but the second would be better,
 since it allows you to do this:
 
   (define (raise-additional-exns e es)
     (define disph (error-display-handler))
     (parameterize ([error-print-context-length 0])
       (for ([e es]) (disph (exn-message e) e)))
     (raise e))
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

