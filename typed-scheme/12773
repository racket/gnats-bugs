From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed May 16 14:51:59 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q4GIptEt013420
	for <bugs@bugs.plt-scheme.org>; Wed, 16 May 2012 14:51:55 -0400
Message-Id: <201205161851.q4GIpqKs013408@champlain.ccs.neu.edu>
Date: Wed, 16 May 2012 14:51:52 -0400
From: jamesswaine@racket-lang.org
To: bugs@racket-lang.org
Subject: typed racket fails to type check this seemingly typecheckable program

>Number:         12773
>Category:       typed-scheme
>Synopsis:       typed racket fails to type check this seemingly typecheckable program
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed May 16 14:52:01 -0400 2012
>Last-Modified:  Sun Jun 03 21:40:01 -0400 2012
>Originator:     James Swaine
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.6--2012-05-11(4ac5da41/d/future-logging)
>Environment:
macosx "Darwin wireless-165-124-211-103.nuwlan.northwestern.edu 11.4.0 Darwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 883536120
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/jamesswaine/Library/Racket/5.3.0.6/collects"
 (non-existent-path))
("/Users/jamesswaine/plt/collects"
 (".DS_Store" ".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "type!
 d" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f ((main) (test))))
>Description:
Minor edits to the below (like removing the 'i' variable from the interaction and moving for/fold out of the let) make this code typecheck and it seems like it should be typechecking, just a priori. But it doesn't typecheck.

(Robby typed in the comment above, fyi)
>How-To-Repeat:
(: f ((Vectorof Float) Fixnum Float -> Void))
(define (f vec n pivot)
  (let*: ([pre : Fixnum
               (for/fold ([prev n]) ([i (in-range 10)])
                 prev)])
    (void)))
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: jamesswaine@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12773: typed racket fails to type check this
 seemingly typecheckable program
Date: Sun, 3 Jun 2012 08:42:36 -0400

 On Wed, May 16, 2012 at 2:52 PM,  <jamesswaine@racket-lang.org> wrote:
 >
 > *** Description:
 > Minor edits to the below (like removing the 'i' variable from the interaction and moving for/fold out of the let) make this code typecheck and it seems like it should be typechecking, just a priori. But it doesn't typecheck.
 >
 > (Robby typed in the comment above, fyi)
 >
 > *** How to repeat:
 > (: f ((Vectorof Float) Fixnum Float -> Void))
 > (define (f vec n pivot)
 >  (let*: ([pre : Fixnum
 >               (for/fold ([prev n]) ([i (in-range 10)])
 >                 prev)])
 >    (void)))
 
 This version, with one extra annotation, works:
 
 #lang typed/racket
 (: f ((Vectorof Float) Fixnum Float -> Void))
 (define (f vec n pivot)
   (let*: ([pre : Fixnum
                (for/fold: ([prev : Fixnum n]) ([i (in-range 10)])
                  prev)])
     (void)))
 
 In general, you need to use more annotations when you want the more
 precise numeric types, otherwise the simpler cases produce surprising
 errors. So I don't think this is a bug.
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: jamesswaine@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12773: typed racket fails to type check this
 seemingly typecheckable program
Date: Sun, 3 Jun 2012 08:02:35 -0500

 This explanation doesn't make sense to me. Where is the "pollution"
 coming from?
 
 Robby
 
 On Sun, Jun 3, 2012 at 7:42 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Wed, May 16, 2012 at 2:52 PM,  <jamesswaine@racket-lang.org> wrote:
 >>
 >> *** Description:
 >> Minor edits to the below (like removing the 'i' variable from the interaction and moving for/fold out of the let) make this code typecheck and it seems like it should be typechecking, just a priori. But it doesn't typecheck.
 >>
 >> (Robby typed in the comment above, fyi)
 >>
 >> *** How to repeat:
 >> (: f ((Vectorof Float) Fixnum Float -> Void))
 >> (define (f vec n pivot)
 >>  (let*: ([pre : Fixnum
 >>               (for/fold ([prev n]) ([i (in-range 10)])
 >>                 prev)])
 >>    (void)))
 >
 > This version, with one extra annotation, works:
 >
 > #lang typed/racket
 > (: f ((Vectorof Float) Fixnum Float -> Void))
 > (define (f vec n pivot)
 >  (let*: ([pre : Fixnum
 >               (for/fold: ([prev : Fixnum n]) ([i (in-range 10)])
 >                 prev)])
 >    (void)))
 >
 > In general, you need to use more annotations when you want the more
 > precise numeric types, otherwise the simpler cases produce surprising
 > errors. So I don't think this is a bug.
 > --
 > sam th
 > samth@ccs.neu.edu
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: jamesswaine@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12773: typed racket fails to type check this
 seemingly typecheckable program
Date: Sun, 3 Jun 2012 09:22:13 -0400

 What do you mean by "pollution", here?
 
 What I think you might mean is, why doesn't this work?
 
 (define: d : Fixnum
  (let loop ([n (ann 0 Fixnum)])
    (if (= 0 (random 10))
        n
        (loop n))))
 
 and why does the error message talk about `Integer`?
 
 Typed Racket heuristically generalizes the types of unannotated loop
 variables to supertypes of what it might otherwise infer.  The reason
 to do this is so that this works:
 
 (define: d : Integer
  (let loop ([n (ann 0 Fixnum)])
    (if (= 0 (random 10))
        n
        (loop (add1 n)))))
 
 Now, if we take the most specific type possible for `n`, we'll get an
 error because `Fixnum` isn't closed under increment. Things are even
 worse if we remove the annotation, because there's a singleton type
 for `0`.  Therefore, very specific types (such as `True` and `Zero`
 and `'some-symbol` and `Fixnum`) are generalized in a variety of
 contexts, including loop variables and the contents of mutable
 structures.
 
 A more global approach to inference would potentially resolve this
 successfully in more cases, at the cost of complexity.
 
 On Sun, Jun 3, 2012 at 9:02 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > This explanation doesn't make sense to me. Where is the "pollution"
 > coming from?
 >
 > Robby
 >
 > On Sun, Jun 3, 2012 at 7:42 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> On Wed, May 16, 2012 at 2:52 PM,  <jamesswaine@racket-lang.org> wrote:
 >>>
 >>> *** Description:
 >>> Minor edits to the below (like removing the 'i' variable from the interaction and moving for/fold out of the let) make this code typecheck and it seems like it should be typechecking, just a priori. But it doesn't typecheck.
 >>>
 >>> (Robby typed in the comment above, fyi)
 >>>
 >>> *** How to repeat:
 >>> (: f ((Vectorof Float) Fixnum Float -> Void))
 >>> (define (f vec n pivot)
 >>>  (let*: ([pre : Fixnum
 >>>               (for/fold ([prev n]) ([i (in-range 10)])
 >>>                 prev)])
 >>>    (void)))
 >>
 >> This version, with one extra annotation, works:
 >>
 >> #lang typed/racket
 >> (: f ((Vectorof Float) Fixnum Float -> Void))
 >> (define (f vec n pivot)
 >>  (let*: ([pre : Fixnum
 >>               (for/fold: ([prev : Fixnum n]) ([i (in-range 10)])
 >>                 prev)])
 >>    (void)))
 >>
 >> In general, you need to use more annotations when you want the more
 >> precise numeric types, otherwise the simpler cases produce surprising
 >> errors. So I don't think this is a bug.
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: jamesswaine@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12773: typed racket fails to type check this
 seemingly typecheckable program
Date: Sun, 3 Jun 2012 08:25:47 -0500

 Yes, thank you. That explains my confusion. And yes, you're right that
 I looked at the program and everywhere that I saw a way that 'prev'
 could get a value, there was a Fixnum annotation (or it was a
 reference to a variable that had the type Fixnum). In other words,
 this implicit generalization was unexpected, and thus confusing to me.
 
 Is there a way to take my particular confusion and improve the error message?
 
 Robby
 
 On Sun, Jun 3, 2012 at 8:22 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > What do you mean by "pollution", here?
 >
 > What I think you might mean is, why doesn't this work?
 >
 > (define: d : Fixnum
 >  (let loop ([n (ann 0 Fixnum)])
 >   (if (= 0 (random 10))
 >       n
 >       (loop n))))
 >
 > and why does the error message talk about `Integer`?
 >
 > Typed Racket heuristically generalizes the types of unannotated loop
 > variables to supertypes of what it might otherwise infer.  The reason
 > to do this is so that this works:
 >
 > (define: d : Integer
 >  (let loop ([n (ann 0 Fixnum)])
 >   (if (= 0 (random 10))
 >       n
 >       (loop (add1 n)))))
 >
 > Now, if we take the most specific type possible for `n`, we'll get an
 > error because `Fixnum` isn't closed under increment. Things are even
 > worse if we remove the annotation, because there's a singleton type
 > for `0`.  Therefore, very specific types (such as `True` and `Zero`
 > and `'some-symbol` and `Fixnum`) are generalized in a variety of
 > contexts, including loop variables and the contents of mutable
 > structures.
 >
 > A more global approach to inference would potentially resolve this
 > successfully in more cases, at the cost of complexity.
 >
 > On Sun, Jun 3, 2012 at 9:02 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> This explanation doesn't make sense to me. Where is the "pollution"
 >> coming from?
 >>
 >> Robby
 >>
 >> On Sun, Jun 3, 2012 at 7:42 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>> On Wed, May 16, 2012 at 2:52 PM,  <jamesswaine@racket-lang.org> wrote:
 >>>>
 >>>> *** Description:
 >>>> Minor edits to the below (like removing the 'i' variable from the interaction and moving for/fold out of the let) make this code typecheck and it seems like it should be typechecking, just a priori. But it doesn't typecheck.
 >>>>
 >>>> (Robby typed in the comment above, fyi)
 >>>>
 >>>> *** How to repeat:
 >>>> (: f ((Vectorof Float) Fixnum Float -> Void))
 >>>> (define (f vec n pivot)
 >>>>  (let*: ([pre : Fixnum
 >>>>               (for/fold ([prev n]) ([i (in-range 10)])
 >>>>                 prev)])
 >>>>    (void)))
 >>>
 >>> This version, with one extra annotation, works:
 >>>
 >>> #lang typed/racket
 >>> (: f ((Vectorof Float) Fixnum Float -> Void))
 >>> (define (f vec n pivot)
 >>>  (let*: ([pre : Fixnum
 >>>               (for/fold: ([prev : Fixnum n]) ([i (in-range 10)])
 >>>                 prev)])
 >>>    (void)))
 >>>
 >>> In general, you need to use more annotations when you want the more
 >>> precise numeric types, otherwise the simpler cases produce surprising
 >>> errors. So I don't think this is a bug.
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: jamesswaine@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12773: typed racket fails to type check this
 seemingly typecheckable program
Date: Sun, 3 Jun 2012 08:32:24 -0500

 Oh, another point wrt my confusion: it didn't even occur to me that I
 should look for a different syntactic form that would let me annotate
 that variable but if I had gotten a little bit of prompting from the
 system, I might have.
 
 With that in mind, would it work to have TR say "Oh, this type error
 involves a variable where I generalized the 'obvious' type that a
 variable would have gotten; let me signal an error suggesting that the
 user put a type annotation"?
 
 With a sufficiently good wording along those lines, I might have
 popped out of my rut and looked for ":"-variation of for/fold and
 tried that.
 
 Robby
 
 On Sun, Jun 3, 2012 at 8:25 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Yes, thank you. That explains my confusion. And yes, you're right that
 > I looked at the program and everywhere that I saw a way that 'prev'
 > could get a value, there was a Fixnum annotation (or it was a
 > reference to a variable that had the type Fixnum). In other words,
 > this implicit generalization was unexpected, and thus confusing to me.
 >
 > Is there a way to take my particular confusion and improve the error message?
 >
 > Robby
 >
 > On Sun, Jun 3, 2012 at 8:22 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> What do you mean by "pollution", here?
 >>
 >> What I think you might mean is, why doesn't this work?
 >>
 >> (define: d : Fixnum
 >>  (let loop ([n (ann 0 Fixnum)])
 >>   (if (= 0 (random 10))
 >>       n
 >>       (loop n))))
 >>
 >> and why does the error message talk about `Integer`?
 >>
 >> Typed Racket heuristically generalizes the types of unannotated loop
 >> variables to supertypes of what it might otherwise infer.  The reason
 >> to do this is so that this works:
 >>
 >> (define: d : Integer
 >>  (let loop ([n (ann 0 Fixnum)])
 >>   (if (= 0 (random 10))
 >>       n
 >>       (loop (add1 n)))))
 >>
 >> Now, if we take the most specific type possible for `n`, we'll get an
 >> error because `Fixnum` isn't closed under increment. Things are even
 >> worse if we remove the annotation, because there's a singleton type
 >> for `0`.  Therefore, very specific types (such as `True` and `Zero`
 >> and `'some-symbol` and `Fixnum`) are generalized in a variety of
 >> contexts, including loop variables and the contents of mutable
 >> structures.
 >>
 >> A more global approach to inference would potentially resolve this
 >> successfully in more cases, at the cost of complexity.
 >>
 >> On Sun, Jun 3, 2012 at 9:02 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> This explanation doesn't make sense to me. Where is the "pollution"
 >>> coming from?
 >>>
 >>> Robby
 >>>
 >>> On Sun, Jun 3, 2012 at 7:42 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>>> On Wed, May 16, 2012 at 2:52 PM,  <jamesswaine@racket-lang.org> wrote:
 >>>>>
 >>>>> *** Description:
 >>>>> Minor edits to the below (like removing the 'i' variable from the interaction and moving for/fold out of the let) make this code typecheck and it seems like it should be typechecking, just a priori. But it doesn't typecheck.
 >>>>>
 >>>>> (Robby typed in the comment above, fyi)
 >>>>>
 >>>>> *** How to repeat:
 >>>>> (: f ((Vectorof Float) Fixnum Float -> Void))
 >>>>> (define (f vec n pivot)
 >>>>>  (let*: ([pre : Fixnum
 >>>>>               (for/fold ([prev n]) ([i (in-range 10)])
 >>>>>                 prev)])
 >>>>>    (void)))
 >>>>
 >>>> This version, with one extra annotation, works:
 >>>>
 >>>> #lang typed/racket
 >>>> (: f ((Vectorof Float) Fixnum Float -> Void))
 >>>> (define (f vec n pivot)
 >>>>  (let*: ([pre : Fixnum
 >>>>               (for/fold: ([prev : Fixnum n]) ([i (in-range 10)])
 >>>>                 prev)])
 >>>>    (void)))
 >>>>
 >>>> In general, you need to use more annotations when you want the more
 >>>> precise numeric types, otherwise the simpler cases produce surprising
 >>>> errors. So I don't think this is a bug.
 >>>> --
 >>>> sam th
 >>>> samth@ccs.neu.edu
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: jamesswaine@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12773: typed racket fails to type check this
 seemingly typecheckable program
Date: Sun, 3 Jun 2012 09:34:18 -0400

 On Sun, Jun 3, 2012 at 9:25 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Yes, thank you. That explains my confusion. And yes, you're right that
 > I looked at the program and everywhere that I saw a way that 'prev'
 > could get a value, there was a Fixnum annotation (or it was a
 > reference to a variable that had the type Fixnum). In other words,
 > this implicit generalization was unexpected, and thus confusing to me.
 >
 > Is there a way to take my particular confusion and improve the error message?
 
 I'm not sure that it's easy to distinguish this particular confusion
 programmatically.  Consider:
 
 (define: d : Fixnum
  (let loop ([n 0])
    (if (= 0 (random 10))
        n
        (loop (add1 n)))))
 
 From the perspective of the type checker, this program is pretty much
 the same as yours.  There's a loop variable with initial type `Fixnum`
 (really even smaller here) which gets generalized to `Integer`, and
 then the overall type of the loop is supposed to be `Fixnum`, so the
 `n` in the then branch is a type error.  Distinguishing these two
 cases requires understanding something about the constraints imposed
 by `add1`, which sounds like the inference problem all over again.
 
 Do you have a suggestion for an error message change that would be
 appropriate in both cases?
 -- 
 sam th
 samth@ccs.neu.edu

From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        "jamesswaine@racket-lang.org" <jamesswaine@racket-lang.org>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/12773: typed racket fails to type check this
 seemingly typecheckable program
Date: Sun, 3 Jun 2012 20:38:54 -0500

 --20cf303dd2f4c8774504c19b98cd
 Content-Type: text/plain; charset=UTF-8
 
 I think I sent a more concrete suggestion in a later message-- I'm offline
 now, so apologies if, by the time you get this, you've already replied to
 that.
 
 On Sunday, June 3, 2012, Sam Tobin-Hochstadt wrote:
 
 > On Sun, Jun 3, 2012 at 9:25 AM, Robby Findler
 > <robby@eecs.northwestern.edu <javascript:;>> wrote:
 > > Yes, thank you. That explains my confusion. And yes, you're right that
 > > I looked at the program and everywhere that I saw a way that 'prev'
 > > could get a value, there was a Fixnum annotation (or it was a
 > > reference to a variable that had the type Fixnum). In other words,
 > > this implicit generalization was unexpected, and thus confusing to me.
 > >
 > > Is there a way to take my particular confusion and improve the error
 > message?
 >
 > I'm not sure that it's easy to distinguish this particular confusion
 > programmatically.  Consider:
 >
 > (define: d : Fixnum
 >  (let loop ([n 0])
 >   (if (= 0 (random 10))
 >       n
 >       (loop (add1 n)))))
 >
 > From the perspective of the type checker, this program is pretty much
 > the same as yours.  There's a loop variable with initial type `Fixnum`
 > (really even smaller here) which gets generalized to `Integer`, and
 > then the overall type of the loop is supposed to be `Fixnum`, so the
 > `n` in the then branch is a type error.  Distinguishing these two
 > cases requires understanding something about the constraints imposed
 > by `add1`, which sounds like the inference problem all over again.
 >
 > Do you have a suggestion for an error message change that would be
 > appropriate in both cases?
 >
 
 I think so. I think that you'd notice that you'd generalized the type of
 'n' and you'd notice that you cannot get a type for 'n' and then you'd say
 in the error message "I generalized the type of 'n' from Zero to Integer;
 this didn't help typecheck; it is possible that your program is fine and
 you just need to add an annotation to 'n' to tell me what I should really
 have done. Yours sincerely, the anthropomorphic type checker".
 
 Robby
 
 
 > --
 > sam th
 > samth@ccs.neu.edu <javascript:;>
 >
 
 --20cf303dd2f4c8774504c19b98cd
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I think I sent a more concrete suggestion in a later message-- I&#39;m offl=
 ine now, so apologies if, by the time you get this, you&#39;ve already repl=
 ied to that.<br><br>On Sunday, June 3, 2012, Sam Tobin-Hochstadt  wrote:<br=
 >
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">On Sun, Jun 3, 2012 at 9:25 AM, Robby Findle=
 r<br>
 &lt;<a href=3D"javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;robb=
 y@eecs.northwestern.edu&#39;)">robby@eecs.northwestern.edu</a>&gt; wrote:<b=
 r>
 &gt; Yes, thank you. That explains my confusion. And yes, you&#39;re right =
 that<br>
 &gt; I looked at the program and everywhere that I saw a way that &#39;prev=
 &#39;<br>
 &gt; could get a value, there was a Fixnum annotation (or it was a<br>
 &gt; reference to a variable that had the type Fixnum). In other words,<br>
 &gt; this implicit generalization was unexpected, and thus confusing to me.=
 <br>
 &gt;<br>
 &gt; Is there a way to take my particular confusion and improve the error m=
 essage?<br>
 <br>
 I&#39;m not sure that it&#39;s easy to distinguish this particular confusio=
 n<br>
 programmatically. =C2=A0Consider:<br>
 <br>
 (define: d : Fixnum<br>
 =C2=A0(let loop ([n 0])<br>
  =C2=A0 (if (=3D 0 (random 10))<br>
  =C2=A0 =C2=A0 =C2=A0 n<br>
  =C2=A0 =C2=A0 =C2=A0 (loop (add1 n)))))<br>
 <br>
 From the perspective of the type checker, this program is pretty much<br>
 the same as yours. =C2=A0There&#39;s a loop variable with initial type `Fix=
 num`<br>
 (really even smaller here) which gets generalized to `Integer`, and<br>
 then the overall type of the loop is supposed to be `Fixnum`, so the<br>
 `n` in the then branch is a type error. =C2=A0Distinguishing these two<br>
 cases requires understanding something about the constraints imposed<br>
 by `add1`, which sounds like the inference problem all over again.<br>
 <br>
 Do you have a suggestion for an error message change that would be<br>
 appropriate in both cases?<br></blockquote><div><br></div><div>I think so. =
 I think that you&#39;d notice that you&#39;d generalized the type of &#39;n=
 &#39; and you&#39;d notice that you cannot get a type for &#39;n&#39; and t=
 hen you&#39;d say in the error message &quot;I generalized the type of &#39=
 ;n&#39; from Zero to Integer; this didn&#39;t help typecheck; it is possibl=
 e that your program is fine and you just need to add an annotation to &#39;=
 n&#39; to tell me what I should really have done. Yours sincerely, the anth=
 ropomorphic type checker&quot;.</div>
 <div><br></div><div>Robby</div><div>=C2=A0</div><blockquote class=3D"gmail_=
 quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=
 ex">
 --<br>
 sam th<br>
 <a href=3D"javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;samth@cc=
 s.neu.edu&#39;)">samth@ccs.neu.edu</a><br>
 </blockquote>
 
 --20cf303dd2f4c8774504c19b98cd--
