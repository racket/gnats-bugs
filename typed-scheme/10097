From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Feb 26 04:41:02 2009
Received: from yx-out-2324.google.com (yx-out-2324.google.com [74.125.44.30])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n1Q9eppD032716
	for <bugs@bugs.plt-scheme.org>; Thu, 26 Feb 2009 04:40:51 -0500
Message-Id: <200902260940.n1Q9enU1032710@champlain.ccs.neu.edu>
Date: Thu, 26 Feb 2009 04:40:49 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: TS: ann and Void

>Number:         10097
>Category:       typed-scheme
>Synopsis:       TS: ann and Void
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Feb 26 04:44:01 -0500 2009
>Closed-Date:    Wed Aug 12 18:05:56 -0400 2009
>Last-Modified:  Wed Aug 12 18:05:56 -0400 2009
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.4
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.23.17-88.fc7 #1 SMP Thu May 15 00:02:29 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 202807328

Collections:
(("/home/eli/.plt-scheme/4.1.4/collects" "CSU660" "info-domain") ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "file" "openssl" "sgl" "htdch" "s-exp" "slideshow" "mysterx" "graphics" "test-engine" "scheme" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "scribble" "syntax-color" "mzcom" "help" "swindle" "config" "net" "hierlist" "test-box-recovery" "2htdp" "trace" "mrlib" "algol60" "browser" "profj" "framework" "typed-scheme" "info-domain" "compiler" "errortrace" "eopl" "syntax" "combinator-parser" "string-constants" "html" "slatex" "stepper" "launcher" "htdp" "lang" "rnrs" "setup" "plot" "teachpack" "xml" "scribblings" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "r6rs" "version" "typed" "texpict" "games" "tex2page" "gui-debugger" "web-server" "r5rs" "redex"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t test-coverage) (default) #() "#lang scheme\n" #t))
>Description:
If I enter (ann 3 : Void) at the repl, I get:

  typecheck: Expected Void, but got Integer in: 3

But if I put it in code, for example:

  (: foo : (Number -> Number))
  (define (foo x)
    (ann 3 : Void)
    (+ x 1))

then I get no complaints.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Cc: samth@plt-scheme.org
Subject: Re: [plt-bug] all/10097: TS: ann and Void
Date: Thu, 26 Feb 2009 04:47:44 -0500

 On Feb 26, eli@barzilay.org wrote:
 > If I enter (ann 3 : Void) at the repl, I get:
 > 
 >   typecheck: Expected Void, but got Integer in: 3
 > 
 > But if I put it in code, for example:
 > 
 >   (: foo : (Number -> Number))
 >   (define (foo x)
 >     (ann 3 : Void)
 >     (+ x 1))
 > 
 > then I get no complaints.
 
 I thought that it might be Void or to the fact that it's not the last
 in a `begin', but all types seem to be ignored, and no need for a
 following expression:
 
   #lang typed-scheme
   (: foo : (Number -> Number))
   (define (foo x)
     (ann x : (String -> String)))
 
 typechecks and runs fine.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Sam TH <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10097: TS: ann and Void
Date: Thu, 26 Feb 2009 08:40:44 -0500

 On Thu, Feb 26, 2009 at 4:47 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Feb 26, eli@barzilay.org wrote:
 >> If I enter (ann 3 : Void) at the repl, I get:
 >>
 >> =A0 typecheck: Expected Void, but got Integer in: 3
 >>
 >> But if I put it in code, for example:
 >>
 >> =A0 (: foo : (Number -> Number))
 >> =A0 (define (foo x)
 >> =A0 =A0 (ann 3 : Void)
 >> =A0 =A0 (+ x 1))
 >>
 >> then I get no complaints.
 >
 > I thought that it might be Void or to the fact that it's not the last
 > in a `begin', but all types seem to be ignored, and no need for a
 > following expression:
 >
 > =A0#lang typed-scheme
 > =A0(: foo : (Number -> Number))
 > =A0(define (foo x)
 > =A0 =A0(ann x : (String -> String)))
 >
 > typechecks and runs fine.
 
 Ok, I think I know what's going on here.  I'll work on fixing it.
 
 
 --=20
 sam th
 samth@ccs.neu.edu


State changed from "open" to "closed" by samth at Wed, 12 Aug 2009 18:05:56 -0400
Reason>>> fixed in svn

