From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon May 12 16:45:22 2014
Received: from mail-ob0-f169.google.com (mail-ob0-f169.google.com [209.85.214.169])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s4CKjKYN028035
	for <bugs@bugs.plt-scheme.org>; Mon, 12 May 2014 16:45:21 -0400
Message-Id: <201405122045.s4CKjGNl028028@winooski.ccs.neu.edu>
Date: Mon, 12 May 2014 16:45:16 -0400
From: greghendershott@gmail.com
To: bugs@racket-lang.org
Subject: Typed Racket: Can't use for/flvector with type, must use for/flvector:

>Number:         14504
>Category:       typed-scheme
>Synopsis:       Typed Racket: Can't use for/flvector with type, must use for/flvector:
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon May 12 16:48:01 -0400 2014
>Last-Modified:  Wed May 14 13:38:57 -0400 2014
>Originator:     Greg Hendershott
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0.1.5
>Environment:
mac-i386-osx
>Description:
Although most of the `for` forms now support optional types -- you don't have to use a `:` suffix named variant -- `for/flvector` does not.
>How-To-Repeat:
#lang typed/racket/base

(version)
;=> "6.0.1.5"

(for/vector: ([x : Float '(1.0 2.0 3.0)])
  x)
;=> '#(1.0 2.0 3.0)

;; More recently, don't need the `:` suffix:
(for/vector ([x : Float '(1.0 2.0 3.0)])
  x)
;=> '#(1.0 2.0 3.0)

(require racket/flonum)

(for/flvector: ([x : Float '(1.0 2.0 3.0)])
  x)
;=> (flvector 1.0 2.0 3.0)

;; Oops, this does not work:
(for/flvector ([x : Float '(1.0 2.0 3.0)])
  x)
; /tmp/tr.rkt:22:15: for/flvector: bad sequence binding clause
;   at: (x : Float (quote (1.0 2.0 3.0)))
;   in: (for/flvector ((x : Float (quote (1.0 2.0 3.0)))) x)
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: greghendershott@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14504: Typed Racket: Can't use for/flvector
 with type, must use for/flvector:
Date: Wed, 14 May 2014 02:00:02 -0400

 On 2014-05-12 16:48:02 -0400, greghendershott@gmail.com wrote:
 > (require racket/flonum)
 >
 > (for/flvector: ([x : Float '(1.0 2.0 3.0)])
 >   x)
 > ;=> (flvector 1.0 2.0 3.0)
 
 Hmm, thinking about this example, I think this is a little tricky to
 work around.
 
 Namely because the typed versions of these macros are usually provided
 by TR itself. But requiring `racket/flonum` will override the version of
 `for/flvector` from TR (if TR were to export it), since required
 bindings take precedence over language bindings.
 
 Not sure what a good solution to this problem is.
 
 Cheers,
 Asumu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: greghendershott@gmail.com, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14504: Typed Racket: Can't use for/flvector with
 type, must use for/flvector:
Date: Tue, 13 May 2014 23:04:19 -0700

 I would expect that it is working as intended. We only special case
 the ones that are in racket and for/flvector is not in that.
 
 On Tue, May 13, 2014 at 11:00 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2014-05-12 16:48:02 -0400, greghendershott@gmail.com wrote:
 >> (require racket/flonum)
 >>
 >> (for/flvector: ([x : Float '(1.0 2.0 3.0)])
 >>   x)
 >> ;=> (flvector 1.0 2.0 3.0)
 >
 > Hmm, thinking about this example, I think this is a little tricky to
 > work around.
 >
 > Namely because the typed versions of these macros are usually provided
 > by TR itself. But requiring `racket/flonum` will override the version of
 > `for/flvector` from TR (if TR were to export it), since required
 > bindings take precedence over language bindings.
 >
 > Not sure what a good solution to this problem is.
 >
 > Cheers,
 > Asumu
From: Greg Hendershott <greghendershott@gmail.com>
To: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/14504: Typed Racket: Can't use for/flvector with
 type, must use for/flvector:
Date: Wed, 14 May 2014 07:41:43 -0400

 I see.
 
 
 1. So I think need a doc update `for*/flvector:` and `for/flvector:`.
 They're listed with the other `for___:` forms -- all share this
 description:
 
 "Aliases for the same iteration forms without a :."
 
 Which isn't really true for `for*/flvector:` and `for/flvector:`.
 
 
 2. Should there maybe be a typed/racket/flonum, if only to provide its
 own flvector for forms (while re-providing the rest of racket/flonum
 as-is)?
 
 
 On Wed, May 14, 2014 at 2:00 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2014-05-12 16:48:02 -0400, greghendershott@gmail.com wrote:
 >> (require racket/flonum)
 >>
 >> (for/flvector: ([x : Float '(1.0 2.0 3.0)])
 >>   x)
 >> ;=> (flvector 1.0 2.0 3.0)
 >
 > Hmm, thinking about this example, I think this is a little tricky to
 > work around.
 >
 > Namely because the typed versions of these macros are usually provided
 > by TR itself. But requiring `racket/flonum` will override the version of
 > `for/flvector` from TR (if TR were to export it), since required
 > bindings take precedence over language bindings.
 >
 > Not sure what a good solution to this problem is.
 >
 > Cheers,
 > Asumu

