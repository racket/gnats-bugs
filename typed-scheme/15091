From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jun 11 09:07:53 2015
Received: from mail-ig0-f182.google.com (mail-ig0-f182.google.com [209.85.213.182])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id t5BD7gCW007034
	for <bugs@bugs.plt-scheme.org>; Thu, 11 Jun 2015 09:07:43 -0400
Message-Id: <201506111307.t5BD7cpa007027@winooski.ccs.neu.edu>
Date: Thu, 11 Jun 2015 09:07:38 -0400
From: akuhlens@indiana.edu
To: bugs@racket-lang.org
Subject: Unbound Identifiers Running Typed Racket

>Number:         15091
>Category:       typed-scheme
>Synopsis:       Unbound Identifiers Running Typed Racket
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Jun 11 09:08:01 -0400 2015
>Last-Modified:  Thu Jul 30 15:00:33 -0400 2015
>Originator:     Andre Kuhlenschmidt
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.2.0.4--2015-06-10(bf12a2b/a)
>Environment:
macosx "Darwin Star-glass.local 14.3.0 Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; root:xnu-2782.20.48~5/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 267271600
raco pkg (show):
Installation-wide:
 Package                 Checksum     Source
 games                   a667c4fe...  catalog games
 main-distribution       c1f147ab...  catalog main-distribution
 main-distribution-test  72040637...  catalog main-distribution-test
 optimization-coach      83a24d6e...  catalog optimization-coach
 racket-lib              c302f944...  catalog racket-lib
 [219 auto-installed packages not shown]
User-specific for installation "snapshot":
 Package  Checksum  Source
 schml              link /Users/akuhlens/work/gradual/schml



Collections:
("/Users/akuhlens/Library/Racket/snapshot/collects"
 (non-existent-path))
("/Users/akuhlens/Desktop/Racket v6.2.0.4/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "raco" "reader" "realm" "s-exp" "setup" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((test) (main)) #t))
>Description:
I have been able to get the two following errors to occur when running typed racket code.
I have include minimal test cases for both.

raco make -v test2.rkt
"test2.rkt":
  making #<path:/Users/akuhlens/work/gradual/schml/src/backend-c/test2.rkt>
n*30: unbound identifier;
 also, no #%top syntax transformer is bound
  in: n*30
  compilation context...:
   /Users/akuhlens/work/gradual/schml/src/backend-c/test2.rkt
  context...:
   /Users/akuhlens/Desktop/Racket v6.2.0.4/collects/compiler/cm.rkt:341:0: compile-zo*
   /Users/akuhlens/Desktop/Racket v6.2.0.4/collects/compiler/cm.rkt:556:26
   /Users/akuhlens/Desktop/Racket v6.2.0.4/collects/compiler/cm.rkt:548:42
   /Users/akuhlens/Desktop/Racket v6.2.0.4/collects/compiler/cm.rkt:513:0: maybe-compile-zo
   /Users/akuhlens/Desktop/Racket v6.2.0.4/collects/compiler/cm.rkt:628:2: do-check
   /Users/akuhlens/Desktop/Racket v6.2.0.4/collects/compiler/cm.rkt:708:4
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/compiler-lib/compiler/commands/make.rkt:81:8: for-loop
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/compiler-lib/compiler/commands/make.rkt: [running body]
   /Users/akuhlens/Desktop/Racket v6.2.0.4/collects/raco/raco.rkt: [running body]
   /Users/akuhlens/Desktop/Racket v6.2.0.4/collects/raco/main.rkt: [running body]




raco make -v test.rkt
"test.rkt":
  making #<path:/Users/akuhlens/work/gradual/schml/src/backend-c/test.rkt>
hash-ref: no value found for key
  key: #<syntax n*24>
  compilation context...:
   /Users/akuhlens/work/gradual/schml/src/backend-c/test.rkt
  context...:
   loop
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:88:10
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/static-contracts/equations.rkt:47:6: for-loop
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/static-contracts/equations.rkt:45:4: loop
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/static-contracts/equations.rkt:42:0: resolve-equations
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/static-contracts/instantiate.rkt:74:0: compute-recursive-kinds
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/private/type-contract.rkt:101:0: generate-contract-def/provide
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/private/type-contract.rkt:173:3: for-loop
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/private/type-contract.rkt:171:0: change-provide-fixups15
   fail-handler198
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/private/type-contract.rkt:173:3: for-loop
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/private/type-contract.rkt:171:0: change-provide-fixups15
   temp190
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/private/type-contract.rkt:173:3: for-loop
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/private/type-contract.rkt:171:0: change-provide-fixups15
   /Users/akuhlens/Desktop/Racket v6.2.0.4/share/pkgs/typed-racket-lib/typed-racket/core.rkt:30:10
>How-To-Repeat:
;;file test.rkt:
#lang typed/racket

(struct (A) B ([a : A]))

(define-type Fst (B Snd))

(define-type Snd (U (B Snd) 'Uneeded))

(provide (all-defined-out))

;; Basic driver for the entire backend
(: foo (Fst . -> . Any))
(define (foo fst)
  ;; Write the C code to a file
  (error 'fail))

(define x 0)

;; test2.rkt
#lang typed/racket

(struct (A B) R ([a : A][b : B]))

(define-type Fst (R Snd Fst))

(define-type Snd (U (R Snd 'baz) 'bang))

(provide (all-defined-out))

(: foo (Fst . -> . Any))
(define (foo uil)
  ;; Write the C code to a file
  (error 'fail))

(define x 0)
>Fix:
