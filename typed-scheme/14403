From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Mar 15 14:47:06 2014
Received: from mail-oa0-f52.google.com (mail-oa0-f52.google.com [209.85.219.52])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id s2FIl59b001289
	for <bugs@bugs.plt-scheme.org>; Sat, 15 Mar 2014 14:47:05 -0400
Message-Id: <201403151847.s2FIl24x001281@winooski.ccs.neu.edu>
Date: Sat, 15 Mar 2014 14:47:02 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Object types continue to hold on to init args

>Number:         14403
>Category:       typed-scheme
>Synopsis:       Object types continue to hold on to init args
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Mar 15 14:48:01 -0400 2014
>Last-Modified:  Mon Apr 07 14:31:41 -0400 2014
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.27 Safari/537.36
>Description:
I expect that object types that have classes with different inits would be equal. They currently print as equal. 
>How-To-Repeat:
endobson@yggdrasil () ~/proj/racket/plt % racket                                                                                                                                                                                          (0)
Welcome to Racket v6.0.0.4.
-> (require typed-racket/types/abbrev)
-> (-object)
(Object)
-> (-object #:init ([x Univ #f]))
(Object)
-> (equal? (-object) (-object #:init ([x Univ #f])))
#f
>Fix:
>Audit-Trail:
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14403: Object types continue to hold on to init
 args
Date: Sat, 15 Mar 2014 15:25:42 -0400

 On 2014-03-15 14:48:01 -0400, eric.n.dobson@gmail.com wrote:
 > Welcome to Racket v6.0.0.4.
 > -> (require typed-racket/types/abbrev)
 > -> (-object)
 > (Object)
 > -> (-object #:init ([x Univ #f]))
 > (Object)
 > -> (equal? (-object) (-object #:init ([x Univ #f])))
 > #f
 
 They are equal in the sense that they're subtypes of each other though:
 
   -> (subtype (-object) (-object #:init ([x Univ #f])))
   #t
   -> (subtype (-object #:init ([x Univ #f])) (-object))
   #t
 
 Do you know if not being `equal?` is a problem for the type-checker?
 
 Cheers,
 Asumu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14403: Object types continue to hold on to init args
Date: Sat, 15 Mar 2014 12:31:57 -0700

 It is a problem for the tests which check for equality not subtyping,
 the typecheck-tests and the class tests do this. I'd also be happy
 with them staying not equal if they printed differently.
 
 On Sat, Mar 15, 2014 at 12:25 PM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 > On 2014-03-15 14:48:01 -0400, eric.n.dobson@gmail.com wrote:
 >> Welcome to Racket v6.0.0.4.
 >> -> (require typed-racket/types/abbrev)
 >> -> (-object)
 >> (Object)
 >> -> (-object #:init ([x Univ #f]))
 >> (Object)
 >> -> (equal? (-object) (-object #:init ([x Univ #f])))
 >> #f
 >
 > They are equal in the sense that they're subtypes of each other though:
 >
 >   -> (subtype (-object) (-object #:init ([x Univ #f])))
 >   #t
 >   -> (subtype (-object #:init ([x Univ #f])) (-object))
 >   #t
 >
 > Do you know if not being `equal?` is a problem for the type-checker?
 >
 > Cheers,
 > Asumu

