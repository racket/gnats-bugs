From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Mar  8 17:39:49 2013
Received: from mail-oa0-f44.google.com (mail-oa0-f44.google.com [209.85.219.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r28MdkJB006070
	for <bugs@bugs.plt-scheme.org>; Fri, 8 Mar 2013 17:39:46 -0500
Message-Id: <201303082239.r28Mdiif006063@champlain.ccs.neu.edu>
Date: Fri, 8 Mar 2013 17:39:44 -0500
From: dented42@icloud.com
To: bugs@racket-lang.org
Subject: typed racket doesn't unfold union types properly

>Number:         13587
>Category:       typed-scheme
>Synopsis:       typed racket doesn't unfold union types properly
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Mar 08 17:40:01 -0500 2013
>Last-Modified:  Tue Mar 26 02:15:59 -0400 2013
>Originator:     Matias Eyzaguirre
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.3
>Environment:
mac-i386-osx
>Description:
Typed racket doesn't seem to be behaving properly. It's not connecting that one occurrence of an expression is equivalent to another, and therefore it's not realize that inferred constraints from one occurrence should apply to another. Or at least, that's what seems to be happening. I've put some steps to reproduce the error below.
>How-To-Repeat:
#lang typed/racket

(define-type Tree (U Null node))
(struct: node ([value : Real] [left : Tree] [right : Tree]))

;;; The following doesn't typecheck, but it seems to me that it should
(: leftmost (node -> Real))
(define (leftmost tree)
  (if (null? (node-left tree))
      (node-value tree)
      (leftmost (node-left tree))))

;;; the following equivalent implementation of the function /does/ typecheck, however
(: leftmost* (node -> Real))
(define (leftmost* tree)
  (let ([left (node-left tree)])
    (if (null? left)
        (node-value tree)
        (leftmost* left))))
>Fix:
>Audit-Trail:
From: Eric Dobson <eric.n.dobson@gmail.com>
To: dented42@icloud.com, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13587: typed racket doesn't unfold union types properly
Date: Fri, 8 Mar 2013 14:50:35 -0800

 This is an issue with structs not Unions. It is that we don't know
 that (node-left tree) always returns the same value, and that there is
 a connection between the value you tested against and the value you
 use later.
 
 On Fri, Mar 8, 2013 at 2:40 PM,  <dented42@icloud.com> wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13587
 >
 > Reported by Matias Eyzaguirre for release: 5.3.3
 >
 > *** Description:
 > Typed racket doesn't seem to be behaving properly. It's not connecting that one occurrence of an expression is equivalent to another, and therefore it's not realize that inferred constraints from one occurrence should apply to another. Or at least, that's what seems to be happening. I've put some steps to reproduce the error below.
 >
 > *** How to repeat:
 > #lang typed/racket
 >
 > (define-type Tree (U Null node))
 > (struct: node ([value : Real] [left : Tree] [right : Tree]))
 >
 > ;;; The following doesn't typecheck, but it seems to me that it should
 > (: leftmost (node -> Real))
 > (define (leftmost tree)
 >   (if (null? (node-left tree))
 >       (node-value tree)
 >       (leftmost (node-left tree))))
 >
 > ;;; the following equivalent implementation of the function /does/ typecheck, however
 > (: leftmost* (node -> Real))
 > (define (leftmost* tree)
 >   (let ([left (node-left tree)])
 >     (if (null? left)
 >         (node-value tree)
 >         (leftmost* left))))
 >
 > *** Environment:
 > mac-i386-osx
 >
 
From: Matias Eyzaguirre <dented42@icloud.com>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: dented42@icloud.com, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13587: typed racket doesn't unfold union types
 properly
Date: Fri, 08 Mar 2013 15:58:13 -0700

 But shouldn't it realize that they must be the same since the struct's fields are immutable?
 
 On Mar 8, 2013, at 3:50 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 
 > This is an issue with structs not Unions. It is that we don't know
 > that (node-left tree) always returns the same value, and that there is
 > a connection between the value you tested against and the value you
 > use later.
 > 
 > On Fri, Mar 8, 2013 at 2:40 PM,  <dented42@icloud.com> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=13587
 >> 
 >> Reported by Matias Eyzaguirre for release: 5.3.3
 >> 
 >> *** Description:
 >> Typed racket doesn't seem to be behaving properly. It's not connecting that one occurrence of an expression is equivalent to another, and therefore it's not realize that inferred constraints from one occurrence should apply to another. Or at least, that's what seems to be happening. I've put some steps to reproduce the error below.
 >> 
 >> *** How to repeat:
 >> #lang typed/racket
 >> 
 >> (define-type Tree (U Null node))
 >> (struct: node ([value : Real] [left : Tree] [right : Tree]))
 >> 
 >> ;;; The following doesn't typecheck, but it seems to me that it should
 >> (: leftmost (node -> Real))
 >> (define (leftmost tree)
 >>  (if (null? (node-left tree))
 >>      (node-value tree)
 >>      (leftmost (node-left tree))))
 >> 
 >> ;;; the following equivalent implementation of the function /does/ typecheck, however
 >> (: leftmost* (node -> Real))
 >> (define (leftmost* tree)
 >>  (let ([left (node-left tree)])
 >>    (if (null? left)
 >>        (node-value tree)
 >>        (leftmost* left))))
 >> 
 >> *** Environment:
 >> mac-i386-osx
 >> 
 
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Matias Eyzaguirre <dented42@icloud.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13587: typed racket doesn't unfold union types properly
Date: Fri, 8 Mar 2013 15:01:27 -0800

 Yes it should, but we don't currently, it is somewhere on the list of
 things to do.
 
 On Fri, Mar 8, 2013 at 2:58 PM, Matias Eyzaguirre <dented42@icloud.com> wrote:
 > But shouldn't it realize that they must be the same since the struct's fields are immutable?
 >
 > On Mar 8, 2013, at 3:50 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >
 >> This is an issue with structs not Unions. It is that we don't know
 >> that (node-left tree) always returns the same value, and that there is
 >> a connection between the value you tested against and the value you
 >> use later.
 >>
 >> On Fri, Mar 8, 2013 at 2:40 PM,  <dented42@icloud.com> wrote:
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=view&pr=13587
 >>>
 >>> Reported by Matias Eyzaguirre for release: 5.3.3
 >>>
 >>> *** Description:
 >>> Typed racket doesn't seem to be behaving properly. It's not connecting that one occurrence of an expression is equivalent to another, and therefore it's not realize that inferred constraints from one occurrence should apply to another. Or at least, that's what seems to be happening. I've put some steps to reproduce the error below.
 >>>
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>>
 >>> (define-type Tree (U Null node))
 >>> (struct: node ([value : Real] [left : Tree] [right : Tree]))
 >>>
 >>> ;;; The following doesn't typecheck, but it seems to me that it should
 >>> (: leftmost (node -> Real))
 >>> (define (leftmost tree)
 >>>  (if (null? (node-left tree))
 >>>      (node-value tree)
 >>>      (leftmost (node-left tree))))
 >>>
 >>> ;;; the following equivalent implementation of the function /does/ typecheck, however
 >>> (: leftmost* (node -> Real))
 >>> (define (leftmost* tree)
 >>>  (let ([left (node-left tree)])
 >>>    (if (null? left)
 >>>        (node-value tree)
 >>>        (leftmost* left))))
 >>>
 >>> *** Environment:
 >>> mac-i386-osx
 >>>
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matias Eyzaguirre <dented42@icloud.com>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13587: typed racket doesn't unfold union types properly
Date: Fri, 8 Mar 2013 18:13:35 -0500

 Path typing works for lists but not structs, as Eric wrote: 
 
 #lang typed/racket
 
 (: f (All (a) (a -> a)))
 (define (f x) x)
 
 (define-type Tree (mu Tree (U Null (List Real Tree Tree))))
 
 (define-type Node (List Real Tree Tree))
 
 (: leftmost (Node -> Real))
 (define (leftmost tree)
   (if (null? (second tree))
       (first tree)
       (leftmost (second tree))))
 
 (define t1 '(1.01 () ()))
 (define t2 `(2.02 ,t1 ()))
 (= (leftmost t1) 1.01)
 (= (leftmost t2) 1.01)
 
 It should eventually work for structs, too. 
 
 
 On Mar 8, 2013, at 5:58 PM, Matias Eyzaguirre wrote:
 
 > But shouldn't it realize that they must be the same since the struct's fields are immutable?
 > 
 > On Mar 8, 2013, at 3:50 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > 
 >> This is an issue with structs not Unions. It is that we don't know
 >> that (node-left tree) always returns the same value, and that there is
 >> a connection between the value you tested against and the value you
 >> use later.
 >> 
 >> On Fri, Mar 8, 2013 at 2:40 PM,  <dented42@icloud.com> wrote:
 >>> A new problem report is waiting at
 >>> http://bugs.racket-lang.org/query/?cmd=view&pr=13587
 >>> 
 >>> Reported by Matias Eyzaguirre for release: 5.3.3
 >>> 
 >>> *** Description:
 >>> Typed racket doesn't seem to be behaving properly. It's not connecting that one occurrence of an expression is equivalent to another, and therefore it's not realize that inferred constraints from one occurrence should apply to another. Or at least, that's what seems to be happening. I've put some steps to reproduce the error below.
 >>> 
 >>> *** How to repeat:
 >>> #lang typed/racket
 >>> 
 >>> (define-type Tree (U Null node))
 >>> (struct: node ([value : Real] [left : Tree] [right : Tree]))
 >>> 
 >>> ;;; The following doesn't typecheck, but it seems to me that it should
 >>> (: leftmost (node -> Real))
 >>> (define (leftmost tree)
 >>> (if (null? (node-left tree))
 >>>     (node-value tree)
 >>>     (leftmost (node-left tree))))
 >>> 
 >>> ;;; the following equivalent implementation of the function /does/ typecheck, however
 >>> (: leftmost* (node -> Real))
 >>> (define (leftmost* tree)
 >>> (let ([left (node-left tree)])
 >>>   (if (null? left)
 >>>       (node-value tree)
 >>>       (leftmost* left))))
 >>> 
 >>> *** Environment:
 >>> mac-i386-osx
 >>> 
 > 
 
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matias Eyzaguirre <dented42@icloud.com>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13587: typed racket doesn't unfold union types properly
Date: Sat, 9 Mar 2013 17:49:17 -0500

 Paths should indeed work for structs as well already.
 
 The difference here is that path refinement is about polymorphic
 containers, which pairs are, but `node` is not in this example.
 Therefore, accessing the `left` field of a node always produces a
 `Tree`, since that's the declared type.
 
 This does confuse people, it seems, so perhaps it's a design decision
 we should revisit.
 
 Sam
 
 On Fri, Mar 8, 2013 at 6:13 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > Path typing works for lists but not structs, as Eric wrote:
 >
 > #lang typed/racket
 >
 > (: f (All (a) (a -> a)))
 > (define (f x) x)
 >
 > (define-type Tree (mu Tree (U Null (List Real Tree Tree))))
 >
 > (define-type Node (List Real Tree Tree))
 >
 > (: leftmost (Node -> Real))
 > (define (leftmost tree)
 >   (if (null? (second tree))
 >       (first tree)
 >       (leftmost (second tree))))
 >
 > (define t1 '(1.01 () ()))
 > (define t2 `(2.02 ,t1 ()))
 > (= (leftmost t1) 1.01)
 > (= (leftmost t2) 1.01)
 >
 > It should eventually work for structs, too.
 >
 >
 > On Mar 8, 2013, at 5:58 PM, Matias Eyzaguirre wrote:
 >
 >> But shouldn't it realize that they must be the same since the struct's fields are immutable?
 >>
 >> On Mar 8, 2013, at 3:50 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>
 >>> This is an issue with structs not Unions. It is that we don't know
 >>> that (node-left tree) always returns the same value, and that there is
 >>> a connection between the value you tested against and the value you
 >>> use later.
 >>>
 >>> On Fri, Mar 8, 2013 at 2:40 PM,  <dented42@icloud.com> wrote:
 >>>> A new problem report is waiting at
 >>>> http://bugs.racket-lang.org/query/?cmd=view&pr=13587
 >>>>
 >>>> Reported by Matias Eyzaguirre for release: 5.3.3
 >>>>
 >>>> *** Description:
 >>>> Typed racket doesn't seem to be behaving properly. It's not connecting that one occurrence of an expression is equivalent to another, and therefore it's not realize that inferred constraints from one occurrence should apply to another. Or at least, that's what seems to be happening. I've put some steps to reproduce the error below.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang typed/racket
 >>>>
 >>>> (define-type Tree (U Null node))
 >>>> (struct: node ([value : Real] [left : Tree] [right : Tree]))
 >>>>
 >>>> ;;; The following doesn't typecheck, but it seems to me that it should
 >>>> (: leftmost (node -> Real))
 >>>> (define (leftmost tree)
 >>>> (if (null? (node-left tree))
 >>>>     (node-value tree)
 >>>>     (leftmost (node-left tree))))
 >>>>
 >>>> ;;; the following equivalent implementation of the function /does/ typecheck, however
 >>>> (: leftmost* (node -> Real))
 >>>> (define (leftmost* tree)
 >>>> (let ([left (node-left tree)])
 >>>>   (if (null? left)
 >>>>       (node-value tree)
 >>>>       (leftmost* left))))
 >>>>
 >>>> *** Environment:
 >>>> mac-i386-osx
 >>>>
 >>
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Matias Eyzaguirre <dented42@icloud.com>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13587: typed racket doesn't unfold union types properly
Date: Sat, 9 Mar 2013 17:56:14 -0500

 On Mar 9, 2013, at 5:49 PM, Sam Tobin-Hochstadt wrote:
 
 > This does confuse people, it seems, so perhaps it's a design decision
 > we should revisit.
 
 
 Confused me. I remember now that you explain it. 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matias Eyzaguirre <dented42@icloud.com>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/13587: typed racket doesn't unfold union types properly
Date: Sat, 9 Mar 2013 21:22:33 -0500

 Just to say a bit more here, the reason it would be design work is
 that it's not obvious what type `tree` should have in the else branch.
  For a type like (List Real Tree Tree), we can refine that to (List
 Real (List Real Tree Tree) Tree).  But there aren't any appropriate
 subtypes of `Tree` to choose in the struct version.
 
 What's being imagined here, I think, is that every struct is actually
 boundedly polymorphic in all of its immutable fields.  However, this
 would make for a lot of tricky issues (what's the type of the
 constructor, for example).
 
 It's worth thinking about, though.
 
 On Sat, Mar 9, 2013 at 5:56 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 >
 > On Mar 9, 2013, at 5:49 PM, Sam Tobin-Hochstadt wrote:
 >
 >> This does confuse people, it seems, so perhaps it's a design decision
 >> we should revisit.
 >
 >
 > Confused me. I remember now that you explain it.

