From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Dec 13 11:37:53 2013
Received: from mail-oa0-f47.google.com (mail-oa0-f47.google.com [209.85.219.47])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id rBDGbodA016391
	for <bugs@bugs.plt-scheme.org>; Fri, 13 Dec 2013 11:37:50 -0500
Message-Id: <201312131637.rBDGbmpQ016383@winooski.ccs.neu.edu>
Date: Fri, 13 Dec 2013 11:37:48 -0500
From: asumu@ccs.neu.edu
To: bugs@racket-lang.org
Subject: TR: : binding detection doesn't always work

>Number:         14249
>Category:       typed-scheme
>Synopsis:       TR: : binding detection doesn't always work
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Dec 13 11:40:01 -0500 2013
>Last-Modified:  Fri Jan 10 17:00:21 -0500 2014
>Originator:     Asumu Takikawa
>Organization:
plt
>Submitter-Id:   unknown
>Release:        6.0.0.1--2013-12-08(ec30c8c2/d)
>Environment:
unix "Linux porco 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10) x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 431360132
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = (#<path:/home/asumu/code/racket-rsvg> #<path:/home/asumu/code/find-collection> #<path:/home/asumu/plt/racket-git/racket/share/pkgs/taglib> #<path:/home/asumu/code/racket-gstreamer> #<path:/home/asumu/code/racket-player>)
raco pkg (show):
/home/asumu/plt/racket-git/racket/share/devel-pkgs:
 Package              Checksum    Source
 main-distribution    #f          (static-link ../../../pkgs/main-distribution)
 plt-services         #f          (static-link ../../../pkgs/plt-services)
 racket-lib           #f          (static-link ../../../pkgs/racket-pkgs/racket-lib)
 [202 auto-installed packages not shown]
Installation-wide:
 Package            Checksum                                    Source
 find-collection    #f                                          (link ../../../../../code/find-collection)
 gstreamer          #f                                          (link ../../../../../code/racket-gstreamer)
 racket-player      #f                                          (link ../../../../../code/racket-player)
 racket-rsvg        #f                                          (link ../../../../../code/racket-rsvg)
 taglib             d1ac7d35c58592f2674d817c8d9e59344dd16939    (url github://github.com/takikawa/taglib-racket/master)
User-specific for installation "development":
 [none]



Collections:
("/home/asumu/plt/racket-git/add-on/development/collects"
 (non-existent-path))
("/home/asumu/plt/racket-git/racket/collects"
 (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info" "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket" "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax" "unstable" "version" "xml"))

Recent Internal Errors: 
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default "/home/asumu") #() "#lang racket\n" #f #t ((main) (test)) #t))
>Description:
The (: ...) annotation form is supposed to detect
when the binding doesn't exist in the right scope,
but this doesn't always work:

#lang typed/racket
(define x "foo")
(let ()
  (: x String)
  0)

Here the binding for `x` at the module level is
showing up when (: ...) checks the identifier binding.
There should be an error raised, but there isn't.

I couldn't think of a way to make this work, but maybe
there is some syntax magic for this use case?
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14249: TR: : binding detection doesn't always work
Date: Fri, 13 Dec 2013 10:44:07 -0600

 --089e01184702b2927a04ed6d2bd4
 Content-Type: text/plain; charset=UTF-8
 
 Does it not work to just expand into (lambda () x) or something?
 
 Robby
 
 
 On Fri, Dec 13, 2013 at 10:40 AM, <asumu@ccs.neu.edu> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14249
 >
 > Reported by Asumu Takikawa for release: 6.0.0.1--2013-12-08(ec30c8c2/d)
 >
 > *** Description:
 > The (: ...) annotation form is supposed to detect
 > when the binding doesn't exist in the right scope,
 > but this doesn't always work:
 >
 > #lang typed/racket
 > (define x "foo")
 > (let ()
 >   (: x String)
 >   0)
 >
 > Here the binding for `x` at the module level is
 > showing up when (: ...) checks the identifier binding.
 > There should be an error raised, but there isn't.
 >
 > I couldn't think of a way to make this work, but maybe
 > there is some syntax magic for this use case?
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux porco 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10) x86_64
 > GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 431360132
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 > (links #:user? #f #:root? #t) = (#<path:/home/asumu/code/racket-rsvg>
 > #<path:/home/asumu/code/find-collection>
 > #<path:/home/asumu/plt/racket-git/racket/share/pkgs/taglib>
 > #<path:/home/asumu/code/racket-gstreamer>
 > #<path:/home/asumu/code/racket-player>)
 > raco pkg (show):
 > /home/asumu/plt/racket-git/racket/share/devel-pkgs:
 >  Package              Checksum    Source
 >  main-distribution    #f          (static-link
 > ../../../pkgs/main-distribution)
 >  plt-services         #f          (static-link ../../../pkgs/plt-services)
 >  racket-lib           #f          (static-link
 > ../../../pkgs/racket-pkgs/racket-lib)
 >  [202 auto-installed packages not shown]
 > Installation-wide:
 >  Package            Checksum                                    Source
 >  find-collection    #f                                          (link
 > ../../../../../code/find-collection)
 >  gstreamer          #f                                          (link
 > ../../../../../code/racket-gstreamer)
 >  racket-player      #f                                          (link
 > ../../../../../code/racket-player)
 >  racket-rsvg        #f                                          (link
 > ../../../../../code/racket-rsvg)
 >  taglib             d1ac7d35c58592f2674d817c8d9e59344dd16939    (url
 > github://github.com/takikawa/taglib-racket/master)
 > User-specific for installation "development":
 >  [none]
 >
 >
 >
 > Collections:
 > ("/home/asumu/plt/racket-git/add-on/development/collects"
 >  (non-existent-path))
 > ("/home/asumu/plt/racket-git/racket/collects"
 >  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info"
 > "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket"
 > "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax"
 > "unstable" "version" "xml"))
 >
 > Recent Internal Errors:
 > Computer Language: (("Determine language from source") (#(#t print
 > mixed-fraction-e #f #t debug) (default "/home/asumu") #() "#lang racket\n"
 > #f #t ((main) (test)) #t))
 >
 >
 
 --089e01184702b2927a04ed6d2bd4
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Does it not work to just expand into (lambda () x) or some=
 thing?<div><br>Robby</div></div><div class=3D"gmail_extra"><br><br><div cla=
 ss=3D"gmail_quote">On Fri, Dec 13, 2013 at 10:40 AM,  <span dir=3D"ltr">&lt=
 ;<a href=3D"mailto:asumu@ccs.neu.edu" target=3D"_blank">asumu@ccs.neu.edu</=
 a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 249" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14249</a><br>
 <br>
 Reported by Asumu Takikawa for release: 6.0.0.1--2013-12-08(ec30c8c2/d)<br>
 <br>
 *** Description:<br>
 The (: ...) annotation form is supposed to detect<br>
 when the binding doesn&#39;t exist in the right scope,<br>
 but this doesn&#39;t always work:<br>
 <br>
 #lang typed/racket<br>
 (define x &quot;foo&quot;)<br>
 (let ()<br>
 =C2=A0 (: x String)<br>
 =C2=A0 0)<br>
 <br>
 Here the binding for `x` at the module level is<br>
 showing up when (: ...) checks the identifier binding.<br>
 There should be an error raised, but there isn&#39;t.<br>
 <br>
 I couldn&#39;t think of a way to make this work, but maybe<br>
 there is some syntax magic for this use case?<br>
 <br>
 *** How to repeat:<br>
 <br>
 <br>
 *** Environment:<br>
 unix &quot;Linux porco 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10) x8=
 6_64 GNU/Linux&quot; (x86_64-linux/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 431360132<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D (#&lt;path:/home/asumu/code/racket-rsvg=
 &gt; #&lt;path:/home/asumu/code/find-collection&gt; #&lt;path:/home/asumu/p=
 lt/racket-git/racket/share/pkgs/taglib&gt; #&lt;path:/home/asumu/code/racke=
 t-gstreamer&gt; #&lt;path:/home/asumu/code/racket-player&gt;)<br>
 
 raco pkg (show):<br>
 /home/asumu/plt/racket-git/racket/share/devel-pkgs:<br>
 =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Checksum =C2=
 =A0 =C2=A0Source<br>
 =C2=A0main-distribution =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=
 static-link ../../../pkgs/main-distribution)<br>
 =C2=A0plt-services =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0(static-link ../../../pkgs/plt-services)<br>
 =C2=A0racket-lib =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0(static-link ../../../pkgs/racket-pkgs/racket-lib)<br>
 =C2=A0[202 auto-installed packages not shown]<br>
 Installation-wide:<br>
 =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Checksum =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Source<br>
 =C2=A0find-collection =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../../../../code/find-collec=
 tion)<br>
 =C2=A0gstreamer =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../../../../co=
 de/racket-gstreamer)<br>
 =C2=A0racket-player =C2=A0 =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../../../../code/racket-p=
 layer)<br>
 =C2=A0racket-rsvg =C2=A0 =C2=A0 =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../../../../code/rack=
 et-rsvg)<br>
 =C2=A0taglib =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 d1ac7d35c58592f2674d=
 817c8d9e59344dd16939 =C2=A0 =C2=A0(url github://<a href=3D"http://github.co=
 m/takikawa/taglib-racket/master" target=3D"_blank">github.com/takikawa/tagl=
 ib-racket/master</a>)<br>
 User-specific for installation &quot;development&quot;:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/home/asumu/plt/racket-git/add-on/development/collects&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/home/asumu/plt/racket-git/racket/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler&quot; &quot;d=
 ata&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &quot;file&quot=
 ; &quot;info&quot; &quot;info-domain&quot; &quot;json&quot; &quot;launcher&=
 quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet&quot=
 ; &quot;racket&quot; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quo=
 t; &quot;realm&quot; &quot;s-exp&quot; &quot;scheme&quot; &quot;setup&quot;=
  &quot;srfi&quot; &quot;syntax&quot; &quot;unstable&quot; &quot;version&quo=
 t; &quot;xml&quot;))<br>
 
 <br>
 Recent Internal Errors:<br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default &quot;/home/asumu&quot;) #() &quot=
 ;#lang racket\n&quot; #f #t ((main) (test)) #t))<br>
 <br>
 </blockquote></div><br></div>
 
 --089e01184702b2927a04ed6d2bd4--
From: Robby Findler <robby@eecs.northwestern.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14249: TR: : binding detection doesn't always work
Date: Fri, 13 Dec 2013 10:44:47 -0600

 --089e01182c7e17b70504ed6d2eab
 Content-Type: text/plain; charset=UTF-8
 
 Oh, wait: I think I must misunderstand your message, since that program
 looks like it shouldn't signal an error to me. Sorry for the noise.
 
 Robby
 
 
 On Fri, Dec 13, 2013 at 10:44 AM, Robby Findler <robby@eecs.northwestern.edu
 > wrote:
 
 > Does it not work to just expand into (lambda () x) or something?
 >
 > Robby
 >
 >
 > On Fri, Dec 13, 2013 at 10:40 AM, <asumu@ccs.neu.edu> wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14249
 >>
 >> Reported by Asumu Takikawa for release: 6.0.0.1--2013-12-08(ec30c8c2/d)
 >>
 >> *** Description:
 >> The (: ...) annotation form is supposed to detect
 >> when the binding doesn't exist in the right scope,
 >> but this doesn't always work:
 >>
 >> #lang typed/racket
 >> (define x "foo")
 >> (let ()
 >>   (: x String)
 >>   0)
 >>
 >> Here the binding for `x` at the module level is
 >> showing up when (: ...) checks the identifier binding.
 >> There should be an error raised, but there isn't.
 >>
 >> I couldn't think of a way to make this work, but maybe
 >> there is some syntax magic for this use case?
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> unix "Linux porco 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10)
 >> x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 431360132
 >> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >> (links #:user? #f #:root? #t) = (#<path:/home/asumu/code/racket-rsvg>
 >> #<path:/home/asumu/code/find-collection>
 >> #<path:/home/asumu/plt/racket-git/racket/share/pkgs/taglib>
 >> #<path:/home/asumu/code/racket-gstreamer>
 >> #<path:/home/asumu/code/racket-player>)
 >> raco pkg (show):
 >> /home/asumu/plt/racket-git/racket/share/devel-pkgs:
 >>  Package              Checksum    Source
 >>  main-distribution    #f          (static-link
 >> ../../../pkgs/main-distribution)
 >>  plt-services         #f          (static-link ../../../pkgs/plt-services)
 >>  racket-lib           #f          (static-link
 >> ../../../pkgs/racket-pkgs/racket-lib)
 >>  [202 auto-installed packages not shown]
 >> Installation-wide:
 >>  Package            Checksum                                    Source
 >>  find-collection    #f                                          (link
 >> ../../../../../code/find-collection)
 >>  gstreamer          #f                                          (link
 >> ../../../../../code/racket-gstreamer)
 >>  racket-player      #f                                          (link
 >> ../../../../../code/racket-player)
 >>  racket-rsvg        #f                                          (link
 >> ../../../../../code/racket-rsvg)
 >>  taglib             d1ac7d35c58592f2674d817c8d9e59344dd16939    (url
 >> github://github.com/takikawa/taglib-racket/master)
 >> User-specific for installation "development":
 >>  [none]
 >>
 >>
 >>
 >> Collections:
 >> ("/home/asumu/plt/racket-git/add-on/development/collects"
 >>  (non-existent-path))
 >> ("/home/asumu/plt/racket-git/racket/collects"
 >>  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info"
 >> "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket"
 >> "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax"
 >> "unstable" "version" "xml"))
 >>
 >> Recent Internal Errors:
 >> Computer Language: (("Determine language from source") (#(#t print
 >> mixed-fraction-e #f #t debug) (default "/home/asumu") #() "#lang racket\n"
 >> #f #t ((main) (test)) #t))
 >>
 >>
 >
 
 --089e01182c7e17b70504ed6d2eab
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Oh, wait: I think I must misunderstand your message, since=
  that program looks like it shouldn&#39;t signal an error to me. Sorry for =
 the noise.<div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><=
 br>
 <br><div class=3D"gmail_quote">On Fri, Dec 13, 2013 at 10:44 AM, Robby Find=
 ler <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" ta=
 rget=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><block=
 quote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc=
  solid;padding-left:1ex">
 <div dir=3D"ltr">Does it not work to just expand into (lambda () x) or some=
 thing?<span class=3D"HOEnZb"><font color=3D"#888888"><div><br>Robby</div></=
 font></span></div><div class=3D"HOEnZb"><div class=3D"h5"><div class=3D"gma=
 il_extra">
 <br><br><div class=3D"gmail_quote">On Fri, Dec 13, 2013 at 10:40 AM,  <span=
  dir=3D"ltr">&lt;<a href=3D"mailto:asumu@ccs.neu.edu" target=3D"_blank">asu=
 mu@ccs.neu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 249" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14249</a><br>
 <br>
 Reported by Asumu Takikawa for release: 6.0.0.1--2013-12-08(ec30c8c2/d)<br>
 <br>
 *** Description:<br>
 The (: ...) annotation form is supposed to detect<br>
 when the binding doesn&#39;t exist in the right scope,<br>
 but this doesn&#39;t always work:<br>
 <br>
 #lang typed/racket<br>
 (define x &quot;foo&quot;)<br>
 (let ()<br>
 =C2=A0 (: x String)<br>
 =C2=A0 0)<br>
 <br>
 Here the binding for `x` at the module level is<br>
 showing up when (: ...) checks the identifier binding.<br>
 There should be an error raised, but there isn&#39;t.<br>
 <br>
 I couldn&#39;t think of a way to make this work, but maybe<br>
 there is some syntax magic for this use case?<br>
 <br>
 *** How to repeat:<br>
 <br>
 <br>
 *** Environment:<br>
 unix &quot;Linux porco 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10) x8=
 6_64 GNU/Linux&quot; (x86_64-linux/3m) (get-display-depth) =3D 32<br>
 Human Language: english<br>
 (current-memory-use) 431360132<br>
 Links: (links) =3D (); (links #:user? #f) =3D (); (links #:root? #t) =3D ()=
 ; (links #:user? #f #:root? #t) =3D (#&lt;path:/home/asumu/code/racket-rsvg=
 &gt; #&lt;path:/home/asumu/code/find-collection&gt; #&lt;path:/home/asumu/p=
 lt/racket-git/racket/share/pkgs/taglib&gt; #&lt;path:/home/asumu/code/racke=
 t-gstreamer&gt; #&lt;path:/home/asumu/code/racket-player&gt;)<br>
 
 
 raco pkg (show):<br>
 /home/asumu/plt/racket-git/racket/share/devel-pkgs:<br>
 =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Checksum =C2=
 =A0 =C2=A0Source<br>
 =C2=A0main-distribution =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(=
 static-link ../../../pkgs/main-distribution)<br>
 =C2=A0plt-services =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0(static-link ../../../pkgs/plt-services)<br>
 =C2=A0racket-lib =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 #f =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0(static-link ../../../pkgs/racket-pkgs/racket-lib)<br>
 =C2=A0[202 auto-installed packages not shown]<br>
 Installation-wide:<br>
 =C2=A0Package =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Checksum =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Source<br>
 =C2=A0find-collection =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../../../../code/find-collec=
 tion)<br>
 =C2=A0gstreamer =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../../../../co=
 de/racket-gstreamer)<br>
 =C2=A0racket-player =C2=A0 =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../../../../code/racket-p=
 layer)<br>
 =C2=A0racket-rsvg =C2=A0 =C2=A0 =C2=A0 =C2=A0#f =C2=A0 =C2=A0 =C2=A0 =C2=A0=
  =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(link ../../../../../code/rack=
 et-rsvg)<br>
 =C2=A0taglib =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 d1ac7d35c58592f2674d=
 817c8d9e59344dd16939 =C2=A0 =C2=A0(url github://<a href=3D"http://github.co=
 m/takikawa/taglib-racket/master" target=3D"_blank">github.com/takikawa/tagl=
 ib-racket/master</a>)<br>
 User-specific for installation &quot;development&quot;:<br>
 =C2=A0[none]<br>
 <br>
 <br>
 <br>
 Collections:<br>
 (&quot;/home/asumu/plt/racket-git/add-on/development/collects&quot;<br>
 =C2=A0(non-existent-path))<br>
 (&quot;/home/asumu/plt/racket-git/racket/collects&quot;<br>
 =C2=A0(&quot;.gitignore&quot; &quot;acks&quot; &quot;compiler&quot; &quot;d=
 ata&quot; &quot;db&quot; &quot;dynext&quot; &quot;ffi&quot; &quot;file&quot=
 ; &quot;info&quot; &quot;info-domain&quot; &quot;json&quot; &quot;launcher&=
 quot; &quot;net&quot; &quot;openssl&quot; &quot;pkg&quot; &quot;planet&quot=
 ; &quot;racket&quot; &quot;rackunit&quot; &quot;raco&quot; &quot;reader&quo=
 t; &quot;realm&quot; &quot;s-exp&quot; &quot;scheme&quot; &quot;setup&quot;=
  &quot;srfi&quot; &quot;syntax&quot; &quot;unstable&quot; &quot;version&quo=
 t; &quot;xml&quot;))<br>
 
 
 <br>
 Recent Internal Errors:<br>
 Computer Language: ((&quot;Determine language from source&quot;) (#(#t prin=
 t mixed-fraction-e #f #t debug) (default &quot;/home/asumu&quot;) #() &quot=
 ;#lang racket\n&quot; #f #t ((main) (test)) #t))<br>
 <br>
 </blockquote></div><br></div>
 </div></div></blockquote></div><br></div>
 
 --089e01182c7e17b70504ed6d2eab--
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Asumu Takikawa <asumu@ccs.neu.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14249: TR: : binding detection doesn't always work
Date: Fri, 13 Dec 2013 11:47:58 -0500

 The program shouldn't work because you should annotate bindings at the
 same lexical level that you bind them.
 
 On Fri, Dec 13, 2013 at 11:44 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Oh, wait: I think I must misunderstand your message, since that program
 > looks like it shouldn't signal an error to me. Sorry for the noise.
 >
 > Robby
 >
 >
 > On Fri, Dec 13, 2013 at 10:44 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >>
 >> Does it not work to just expand into (lambda () x) or something?
 >>
 >> Robby
 >>
 >>
 >> On Fri, Dec 13, 2013 at 10:40 AM, <asumu@ccs.neu.edu> wrote:
 >>>
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=14249
 >>>
 >>> Reported by Asumu Takikawa for release: 6.0.0.1--2013-12-08(ec30c8c2/d)
 >>>
 >>> *** Description:
 >>> The (: ...) annotation form is supposed to detect
 >>> when the binding doesn't exist in the right scope,
 >>> but this doesn't always work:
 >>>
 >>> #lang typed/racket
 >>> (define x "foo")
 >>> (let ()
 >>>   (: x String)
 >>>   0)
 >>>
 >>> Here the binding for `x` at the module level is
 >>> showing up when (: ...) checks the identifier binding.
 >>> There should be an error raised, but there isn't.
 >>>
 >>> I couldn't think of a way to make this work, but maybe
 >>> there is some syntax magic for this use case?
 >>>
 >>> *** How to repeat:
 >>>
 >>>
 >>> *** Environment:
 >>> unix "Linux porco 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10)
 >>> x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 431360132
 >>> Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = ();
 >>> (links #:user? #f #:root? #t) = (#<path:/home/asumu/code/racket-rsvg>
 >>> #<path:/home/asumu/code/find-collection>
 >>> #<path:/home/asumu/plt/racket-git/racket/share/pkgs/taglib>
 >>> #<path:/home/asumu/code/racket-gstreamer>
 >>> #<path:/home/asumu/code/racket-player>)
 >>> raco pkg (show):
 >>> /home/asumu/plt/racket-git/racket/share/devel-pkgs:
 >>>  Package              Checksum    Source
 >>>  main-distribution    #f          (static-link
 >>> ../../../pkgs/main-distribution)
 >>>  plt-services         #f          (static-link
 >>> ../../../pkgs/plt-services)
 >>>  racket-lib           #f          (static-link
 >>> ../../../pkgs/racket-pkgs/racket-lib)
 >>>  [202 auto-installed packages not shown]
 >>> Installation-wide:
 >>>  Package            Checksum                                    Source
 >>>  find-collection    #f                                          (link
 >>> ../../../../../code/find-collection)
 >>>  gstreamer          #f                                          (link
 >>> ../../../../../code/racket-gstreamer)
 >>>  racket-player      #f                                          (link
 >>> ../../../../../code/racket-player)
 >>>  racket-rsvg        #f                                          (link
 >>> ../../../../../code/racket-rsvg)
 >>>  taglib             d1ac7d35c58592f2674d817c8d9e59344dd16939    (url
 >>> github://github.com/takikawa/taglib-racket/master)
 >>> User-specific for installation "development":
 >>>  [none]
 >>>
 >>>
 >>>
 >>> Collections:
 >>> ("/home/asumu/plt/racket-git/add-on/development/collects"
 >>>  (non-existent-path))
 >>> ("/home/asumu/plt/racket-git/racket/collects"
 >>>  (".gitignore" "acks" "compiler" "data" "db" "dynext" "ffi" "file" "info"
 >>> "info-domain" "json" "launcher" "net" "openssl" "pkg" "planet" "racket"
 >>> "rackunit" "raco" "reader" "realm" "s-exp" "scheme" "setup" "srfi" "syntax"
 >>> "unstable" "version" "xml"))
 >>>
 >>> Recent Internal Errors:
 >>> Computer Language: (("Determine language from source") (#(#t print
 >>> mixed-fraction-e #f #t debug) (default "/home/asumu") #() "#lang racket\n"
 >>> #f #t ((main) (test)) #t))
 >>>
 >>
 >
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14249: TR: : binding detection doesn't always
 work
Date: Fri, 13 Dec 2013 11:48:10 -0500

 On 2013-12-13 10:44:07 -0600, Robby Findler wrote:
 >    Does it not work to just expand into (lambda () x) or something?
 
 I should clarify, the (: x String) is supposed to provide a type
 annotation for definitions of `x` in the internal definition context
 inside `let`.
 
 If no definition is found at all, an error is raised saying the user
 forgot to define the annotated identifier.
 
 The implementation of `:`, though, isn't being very precise about when
 it errors and doesn't. So if you have a module binding, it doesn't error
 even though that annotation in the `let` is pointless.
 
 Hopefully that was a bit clearer.
 
 Cheers,
 Asumu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Asumu Takikawa <asumu@ccs.neu.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14249: TR: : binding detection doesn't always work
Date: Fri, 13 Dec 2013 11:28:38 -0600

 --089e0160c35eea725804ed6dcae5
 Content-Type: text/plain; charset=UTF-8
 
 Oh, I see. Thanks.
 
 If this were check syntax, it would just keep the set of variables for
 which annotations are allowed as an accumulator as it traversed the
 expression. I guess something like that doesn't work here?
 
 Robby
 
 
 On Fri, Dec 13, 2013 at 10:48 AM, Asumu Takikawa <asumu@ccs.neu.edu> wrote:
 
 > On 2013-12-13 10:44:07 -0600, Robby Findler wrote:
 > >    Does it not work to just expand into (lambda () x) or something?
 >
 > I should clarify, the (: x String) is supposed to provide a type
 > annotation for definitions of `x` in the internal definition context
 > inside `let`.
 >
 > If no definition is found at all, an error is raised saying the user
 > forgot to define the annotated identifier.
 >
 > The implementation of `:`, though, isn't being very precise about when
 > it errors and doesn't. So if you have a module binding, it doesn't error
 > even though that annotation in the `let` is pointless.
 >
 > Hopefully that was a bit clearer.
 >
 > Cheers,
 > Asumu
 >
 
 --089e0160c35eea725804ed6dcae5
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">Oh, I see. Thanks.<div><br></div><div>If this were check s=
 yntax, it would just keep the set of variables for which annotations are al=
 lowed as an accumulator as it traversed the expression. I guess something l=
 ike that doesn&#39;t work here?</div>
 <div><br>Robby</div></div><div class=3D"gmail_extra"><br><br><div class=3D"=
 gmail_quote">On Fri, Dec 13, 2013 at 10:48 AM, Asumu Takikawa <span dir=3D"=
 ltr">&lt;<a href=3D"mailto:asumu@ccs.neu.edu" target=3D"_blank">asumu@ccs.n=
 eu.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex"><div class=3D"im">On 2013-12-13 10:44:07 -06=
 00, Robby Findler wrote:<br>
 &gt; =C2=A0 =C2=A0Does it not work to just expand into (lambda () x) or som=
 ething?<br>
 <br>
 </div>I should clarify, the (: x String) is supposed to provide a type<br>
 annotation for definitions of `x` in the internal definition context<br>
 inside `let`.<br>
 <br>
 If no definition is found at all, an error is raised saying the user<br>
 forgot to define the annotated identifier.<br>
 <br>
 The implementation of `:`, though, isn&#39;t being very precise about when<=
 br>
 it errors and doesn&#39;t. So if you have a module binding, it doesn&#39;t =
 error<br>
 even though that annotation in the `let` is pointless.<br>
 <br>
 Hopefully that was a bit clearer.<br>
 <br>
 Cheers,<br>
 Asumu<br>
 </blockquote></div><br></div>
 
 --089e0160c35eea725804ed6dcae5--
From: Asumu Takikawa <asumu@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14249: TR: : binding detection doesn't always
 work
Date: Fri, 13 Dec 2013 12:48:30 -0500

 On 2013-12-13 11:28:38 -0600, Robby Findler wrote:
 >    If this were check syntax, it would just keep the set of variables for
 >    which annotations are allowed as an accumulator as it traversed the
 >    expression. I guess something like that doesn't work here?
 
 Right, because this is a local check being done as `:` is expanded.
 Maybe TR could be restructured to treat `:` like that, but it doesn't
 currently.
 
 Cheers,
 Asumu

