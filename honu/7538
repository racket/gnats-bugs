From apache@plt-scheme.org Tue Aug 16 17:40:56 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j7GLetZS006567
	for <bugs@plt-scheme.org>; Tue, 16 Aug 2005 17:40:55 -0400
Message-Id: <200508162140.j7GLetBT006565@champlain.ccs.neu.edu>
Date: Tue, 16 Aug 2005 17:40:55 -0400
From: cobbe@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Honu: unary minus sometimes confuses the type checker

>Number:         7538
>Category:       honu
>Synopsis:       Honu: type errors in statement position give poor error message
>Class:          sw-bug
>Responsible:    cce
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Aug 16 17:45:00 -0400 2005
>Closed-Date:    Wed Oct 17 16:48:47 -0400 2007
>Last-Modified:  Wed Oct 17 16:48:47 -0400 2007
>Originator:     Richard Cobbe
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.201-svn15aug2005
>Environment:
mac-ppc-osx
>Description:
Honu language.  This class type checks:

struct TestC() : Test
{
    int m()
    {
        -1;
    }
}

but this one doesn't:

struct TestC() : Test
{
    int m()
    {
        -1; 3;
    }
}

The error reads "expected type <>, got type int", and it highlights the -1.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        Richard Cobbe <cobbe@ccs.neu.edu>
Cc: 
Subject: Re: honu/7538: Honu: unary minus sometimes confuses the type checker
Date: Tue, 16 Aug 2005 17:53:42 -0400

 That's not the fault of unary minus.  A sequence of commands, at the  
 moment, _requires_ that each of the expressions that are done only  
 for effect (i.e. all but the last) be of "void" type.  That's the  
 error you're getting (<> is the same as "void"/unit).
 
 Stevie
From: Richard Cobbe <cobbe@ccs.neu.edu>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: honu/7538: Honu: unary minus sometimes confuses the type checker
Date: Tue, 16 Aug 2005 18:02:50 -0400

 On Tue, Aug 16, 2005 at 05:53:42PM -0400, Stevie Strickland wrote:
 > That's not the fault of unary minus.  A sequence of commands, at the  
 > moment, _requires_ that each of the expressions that are done only  
 > for effect (i.e. all but the last) be of "void" type.  That's the  
 > error you're getting (<> is the same as "void"/unit).
 
 Ok, that's reasonable, but two things:
 
   1) I think the error message should spell this out -- I don't know of
      anybody in CS who writes void or unit as "<>".
 
   2) Document this!
 
 Richard
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Richard Cobbe <cobbe@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: honu/7538: Honu: unary minus sometimes confuses the type checker
Date: Tue, 16 Aug 2005 18:10:01 -0400

 On Aug 16, 2005, at 6:02 PM, Richard Cobbe wrote:
 > On Tue, Aug 16, 2005 at 05:53:42PM -0400, Stevie Strickland wrote:
 >
 >> That's not the fault of unary minus.  A sequence of commands, at the
 >> moment, _requires_ that each of the expressions that are done only
 >> for effect (i.e. all but the last) be of "void" type.  That's the
 >> error you're getting (<> is the same as "void"/unit).
 >>
 >
 > Ok, that's reasonable, but two things:
 >
 >   1) I think the error message should spell this out -- I don't  
 > know of
 >      anybody in CS who writes void or unit as "<>".
 
 Yes, there needs to be some fixing up of type errors including ones  
 involving "void".  The problem is that an application of a void  
 function and the empty tuple both have the same type, so I just  
 picked <> instead of void.  You're right in that it's probably better  
 the other way, though.
 
 >   2) Document this!
 
 Will do when I get around to adding documentation for the operators  
 as well.
 
 Stevie

Class changed from "sw-bug" to "doc-bug" by sstrickl at Wed, 24 Aug 2005 17:15:04 -0400
Reason>>> Check audit trail

State changed from "open" to "analyzed" by sstrickl at Wed, 24 Aug 2005 17:15:04 -0400
Reason>>> analyzed


Responsible changed from "sstrickl" to "cce" by cce at Fri, 30 Sep 2005 16:51:28 -0400
Reason>>> Honu implementation transferred from Stevie to Carl.

State changed from "analyzed" to "open" by cce at Fri, 30 Sep 2005 16:51:28 -0400
Reason>>> Stevie has analyzed the problem; Carl has not.


From: Carl Eastlund <cce@ccs.neu.edu>
To: bugs@plt-scheme.org, Richard Cobbe <cobbe@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: honu/7538: Honu: type errors in statement position give poor error message
Date: Tue, 4 Oct 2005 17:18:58 -0400

 This bug report is about the following error:
 
 > Honu language.  This class type checks:
 >
 > struct TestC() : Test
 > {
 >     int m()
 >     {
 >         -1;
 >     }
 > }
 >
 > but this one doesn't:
 >
 > struct TestC() : Test
 > {
 >     int m()
 >     {
 >         -1; 3;
 >     }
 > }
 >
 > The error reads "expected type <>, got type int", and it highlights the -1.
 
 The actual problem is that the error message should, ideally, say
 something like "expected void type in statement position, found int
 instead".  I can easily make this say void instead of <>, but getting
 a description of context added requires changing more plumbing of the
 typechecker and error reporting.
 
 So I'm going to do that (the easy fix), but the question is, should I
 mark the bug as closed, or should I leave it open until I've had time
 to make the larger changes?  How important is it that we give a very
 precise error message on this now?
 
 --Carl
 

Class changed from "doc-bug" to "sw-bug" by cce at Tue, 04 Oct 2005 17:41:08 -0400
Reason>>> Real problem is poor error message, rather than undocumented behavior.
Currently, all behavior is undocumented.

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Carl Eastlund <cce@ccs.neu.edu>
Cc: Richard Cobbe <cobbe@ccs.neu.edu>, bugs@plt-scheme.org
Subject: Re: honu/7538: Honu: type errors in statement position give poor error message
Date: Tue, 4 Oct 2005 17:53:09 -0400

 Fix and then suspend it until we have the type checker under better 
 control.
 
 On Oct 4, 2005, at 5:18 PM, Carl Eastlund wrote:
 
 > This bug report is about the following error:
 >
 >> Honu language.  This class type checks:
 >>
 >> struct TestC() : Test
 >> {
 >>     int m()
 >>     {
 >>         -1;
 >>     }
 >> }
 >>
 >> but this one doesn't:
 >>
 >> struct TestC() : Test
 >> {
 >>     int m()
 >>     {
 >>         -1; 3;
 >>     }
 >> }
 >>
 >> The error reads "expected type <>, got type int", and it highlights 
 >> the -1.
 >
 > The actual problem is that the error message should, ideally, say
 > something like "expected void type in statement position, found int
 > instead".  I can easily make this say void instead of <>, but getting
 > a description of context added requires changing more plumbing of the
 > typechecker and error reporting.
 >
 > So I'm going to do that (the easy fix), but the question is, should I
 > mark the bug as closed, or should I leave it open until I've had time
 > to make the larger changes?  How important is it that we give a very
 > precise error message on this now?
 >
 > --Carl
 

State changed from "open" to "analyzed" by cce at Wed, 05 Oct 2005 12:25:07 -0400
Reason>>> Will fix type error message to say "void" in place of "<>" and add an appropriate 
test; fixing to specify "statement position" will take more time.


State changed from "analyzed" to "suspended" by cce at Wed, 05 Oct 2005 16:59:58 -0400
Reason>>> Type error changed to say "void" instead of "<>", behavior now included in 
tests.  Bug suspended until error messages can include program context (in this 
case, to mention statement context as reason for expected void type).


State changed from "suspended" to "closed" by cce at Wed, 17 Oct 2007 16:48:47 -0400
Reason>>> Honu no longer supported.

