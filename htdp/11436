From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Nov 15 12:15:44 2010
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id oAFHFffq011582
	for <bugs@bugs.plt-scheme.org>; Mon, 15 Nov 2010 12:15:41 -0500
Message-Id: <201011151715.oAFHFbh9011574@champlain.ccs.neu.edu>
Date: Mon, 15 Nov 2010 12:15:37 -0500
From: racket@blahedo.org
To: bugs@racket-lang.org
Subject: Bad error message in BSL/ISL: square brackets vs parens

>Number:         11436
>Category:       htdp
>Synopsis:       Bad error message in BSL/ISL: square brackets vs parens
>Class:          sw-bug
>Responsible:    matthias
>Severity:       non-critical
>Priority:       medium
>State:          suspended
>Confidential:   no
>Arrival-Date:   Mon Nov 15 12:16:01 -0500 2010
>Closed-Date:    
>Last-Modified:  Thu Nov 18 10:19:15 -0500 2010
>Originator:     Don Blaheta
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1
>Environment:
Win32 / x86 / Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3)
>Description:
There are a few interrelated issues here, but the core problem is that error messages refer to "parenthesis" even when the bracket in question is square (or curly).  This is a pretty minor problem in full Racket (where a programmer may be expected to know that they are all equivalent) but a bigger problem in the teaching languages (where some constructs, e.g. cond, are *only* expressed with square brackets, at least in HtDP and related curricula.

The most vicious instance of this is when the student typoes "cons" for "cond", e.g.

(cons [(empty? the-list) ...]
      [(cons? the-list) ...])

In an otherwise perfect solution, this typo causes DrRacket to highlight the entire phrase "(empty? the-list)" in pink and say:

function call: expected a defined name or a primitive operation name after an open parenthesis, but found something else

The incorrect error message causes the student to look after the actual open paren, see "empty?", which *is* a primitive operation name, and get very confused.  The relevant ISL error is similar:

function call: expected a name after an open parenthesis, but found a number

If one happens to know that for this error message, the pink highlights the *entire thing* that is supposed to be a function name (so if you type "(3 4)" it will only highlight the "3"), then this is maybe solvable.  But that "open parenthesis" is a huge red herring.

Possible solutions:
1. Disallow [] as markers for function calls and reserve for use in cond clauses and other special forms (in teaching languages only, of course).
  1a. *Require* the use of [] for cond clauses (I know there are political reasons this could be tricky).

2. Replace "something else" with a quotation of the actual thing found, e.g. "...but found (empty? the-list)."

3. Replace "parenthesis" with "parenthesis or bracket".

Possibly all 3.  I hesitate to even mention solution #3 because, while better than nothing, it doesn't really solve the problem of this being a very confusing situation for the students, and I'd rather not see that change made and considered to close the ticket.
>How-To-Repeat:
Set the language to BSL or ISL.
Type the following:

(define the-list (cons 4 empty))
(cons [(empty? the-list) 5]
      [(cons? the-list) 3])

Click Run.
>Fix:
>Audit-Trail:
State changed from "open" to "suspended" by matthias at Thu, 18 Nov 2010 10:19:15 -0500
Reason>>> that's correct but beyond me right now

