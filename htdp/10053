From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Feb  3 16:21:03 2009
Received: from an-out-0708.google.com (an-out-0708.google.com [209.85.132.247])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n13LKuDF009625
	for <bugs@bugs.plt-scheme.org>; Tue, 3 Feb 2009 16:20:56 -0500
Message-Id: <200902032120.n13LKqBE009619@champlain.ccs.neu.edu>
Date: Tue, 3 Feb 2009 16:20:52 -0500
From: corky.cartwright@gmail.com
To: bugs@plt-scheme.org
Subject: In student languages, floor, round and truncate can return inexact integers

>Number:         10053
>Category:       htdp
>Synopsis:       In student languages, floor, round and truncate can return inexact integers
>Class:          sw-bug
>Responsible:    matthias
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Feb 03 16:24:01 -0500 2009
>Closed-Date:    Mon Mar 16 14:22:32 -0400 2009
>Last-Modified:  Mon Mar 16 14:22:32 -0400 2009
>Originator:     Corky Cartwright
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.3
>Environment:
macosx "Darwin robert-cartwrights-computer.local 8.11.1 Darwin Kernel Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 111325480

Collections:
(("/Users/cork/Library/PLT Scheme/4.1.3/collects" non-existent-path) ("/Applications/PLT Scheme v4.1.3/collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Legacy Languages" "Pretty Big") #(#t write mixed-fraction-e #f #t debug #t))
>Description:
(floor (sqrt 5)) = #i2.0
(truncate (sqrt 5)) = #i2.0
(round (sqrt 5)) = #i2.0

The documentation states these function return type integer? (integer or error) as they should -- not inexact floating point numbers corresponding to integers. The whole point of taking the floor of a real number is to get an integer.

The same functions work correctly in the Pretty Big language.
>How-To-Repeat:
Evaluate the expressions given above in any student language.
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: corky.cartwright@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and truncate can return inexact integers
Date: Tue, 3 Feb 2009 14:32:56 -0700

 Pretty Big doesn't put a "#i" prefix on an inexact number. It's more
 like other Schemes, in that a decimal point implicitly indicates
 inexact. That's probably the confusion.
 
 `integer?' returns #t for inexact integers, and `floor', etc. return an
 inexact number in all languages when given an inexact number. In other
 words, "integer" does not mean "exact integer". The `inexact->exact'
 function converts an inexact number to an exact number.
 
 At Tue, 3 Feb 2009 16:24:01 -0500, corky.cartwright@gmail.com wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=10053
 > 
 > Reported by Corky Cartwright for release: 4.1.3
 > 
 > *** Description:
 > (floor (sqrt 5)) = #i2.0
 > (truncate (sqrt 5)) = #i2.0
 > (round (sqrt 5)) = #i2.0
 > 
 > The documentation states these function return type integer? (integer or 
 > error) as they should -- not inexact floating point numbers corresponding to 
 > integers. The whole point of taking the floor of a real number is to get an 
 > integer.
 > 
 > The same functions work correctly in the Pretty Big language.
 > 
 > *** How to repeat:
 > Evaluate the expressions given above in any student language.
 > 
 > *** Environment:
 > macosx "Darwin robert-cartwrights-computer.local 8.11.1 Darwin Kernel Version 
 > 8.11.1: Wed Oct 10 18:23:28 PDT 2007; root:xnu-792.25.20~1/RELEASE_I386 i386 
 > i386" (i386-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 111325480
 > 
 > Collections:
 > (("/Users/cork/Library/PLT Scheme/4.1.3/collects" non-existent-path) 
 > ("/Applications/PLT Scheme v4.1.3/collects" "afm" "algol60" "browser" 
 > "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" 
 > "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" 
 > "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" 
 > "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" 
 > "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" 
 > "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" 
 > "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" 
 > "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" 
 > "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-
 > scheme" "version" "web-server" "wxme" "xml"))
 > Computer Language: (("Legacy Languages" "Pretty Big") #(#t write mixed-
 > fraction-e #f #t debug #t))
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: corky.cartwright@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and truncate can return inexact integers
Date: Tue, 3 Feb 2009 16:34:03 -0500

 Corky, this is unfortunately Scheme standard:
 
 > denali 2> scheme
 > Chez Scheme Version 6.1
 > Copyright (c) 1998 Cadence Research Systems
 >
 > > (integer? #i1.0)
 > #t
 
 This is also true for the deprecated language Pretty Big:
 
 > Welcome to DrScheme, version 4.1.4.2-svn1feb2009 [3m].
 > Language: Pretty Big; memory limit: 128 megabytes.
 > > (inexact? (floor (sqrt 3)))
 > #t
 
 It just happens to suppress the #i prefix, which we emphasize in the  
 student language to make them aware of the inaccuracies in number  
 systems in PLs.
 
 -- Matthias
 
 
 
 
 
 
 
 On Feb 3, 2009, at 4:24 PM, corky.cartwright@gmail.com wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=10053
 >
 > Reported by Corky Cartwright for release: 4.1.3
 >
 > *** Description:
 > (floor (sqrt 5)) = #i2.0
 > (truncate (sqrt 5)) = #i2.0
 > (round (sqrt 5)) = #i2.0
 >
 > The documentation states these function return type integer?  
 > (integer or error) as they should -- not inexact floating point  
 > numbers corresponding to integers. The whole point of taking the  
 > floor of a real number is to get an integer.
 >
 > The same functions work correctly in the Pretty Big language.
 >
 > *** How to repeat:
 > Evaluate the expressions given above in any student language.
 >
 > *** Environment:
 > macosx "Darwin robert-cartwrights-computer.local 8.11.1 Darwin  
 > Kernel Version 8.11.1: Wed Oct 10 18:23:28 PDT 2007;  
 > root:xnu-792.25.20~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get- 
 > display-depth) = 32
 > Human Language: english
 > (current-memory-use) 111325480
 >
 > Collections:
 > (("/Users/cork/Library/PLT Scheme/4.1.3/collects" non-existent- 
 > path) ("/Applications/PLT Scheme v4.1.3/collects" "afm" "algol60"  
 > "browser" "combinator-parser" "compiler" "config" "defaults"  
 > "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file"  
 > "framework" "frtime" "games" "graphics" "gui-debugger" "help"  
 > "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang"  
 > "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx"  
 > "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet"  
 > "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex"  
 > "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl"  
 > "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle"  
 > "syntax" "syntax-color" "teachpack" "test-box-recovery" "test- 
 > engine" "tex2page" "texpict" "trace" "typed" "typed-scheme"  
 > "version" "web-server" "wxme" "xml"))
 > Computer Language: (("Legacy Languages" "Pretty Big") #(#t write  
 > mixed-fraction-e #f #t debug #t))
 >
 
From: Corky Cartwright <corky.cartwright@gmail.com>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and 
	truncate can return inexact integers
Date: Tue, 3 Feb 2009 17:16:11 -0600

 --001636164899644cf304620bdb37
 Content-Type: text/plain; charset=ISO-8859-1
 Content-Transfer-Encoding: 7bit
 
 Hi Matthias, Matthew, et al,
 
 Thanks for the explanation.   I guess I am too trusting of output formats.
 
 Nevertheless, I would claim the documentation for floor, truncate, and round
 is misleading.  If the type contract for a function states that integer is
 the return type, then the function should not return an inexact number.   (I
 would classify returning an inexact number as breaking the contract.) Does
 Scheme implicitly convert inexact numbers  corresponding to integers to
 unbounded integers to avoid loss of accuracy in subsequent computation?  I
 suspect that the answer is no.
 
 This issue arose when I tried to optimize the implementation of prime? in
 Exercise 11.4.7 in HTDP.  I need to compute the integer (not inexact
 integer) floor of (sqrt n) and use this (adjusted to get an odd number) as
 the upper bound for my sieve testing.  For really large numbers, I presume
 that Scheme sqrt is unreliable in that the integer floor of (sqrt n)) may
 not be the floor of the exact sqrt of n.   But I suspect that the
 computation becomes infeasibly large before this inaccuracy is reached.
 
 Dropping the #i annotation when outputing inexact numbers in standard Scheme
 strikes me as a bad idea.
 
 -- Corky
 
 --001636164899644cf304620bdb37
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 Hi Matthias, Matthew, et al,<br><br>Thanks for the explanation.&nbsp;&nbsp;=
  I guess I am too trusting of output formats.<br><br>Nevertheless, I would =
 claim the documentation for floor, truncate, and round is misleading.&nbsp;=
  If the type contract for a function states that integer is the return type=
 , then the function should not return an inexact number.&nbsp;&nbsp; (I wou=
 ld classify returning an inexact number as breaking the contract.) Does Sch=
 eme implicitly convert inexact numbers&nbsp; corresponding to integers to u=
 nbounded integers to avoid loss of accuracy in subsequent computation?&nbsp=
 ; I suspect that the answer is no.<br>
 <br>This issue arose when I tried to optimize the implementation of prime? =
 in Exercise 11.4.7 in HTDP.&nbsp; I need to compute the integer (not inexac=
 t integer) floor of (sqrt n) and use this (adjusted to get an odd number) a=
 s the upper bound for my sieve testing.&nbsp; For really large numbers, I p=
 resume that Scheme sqrt is unreliable in that the integer floor of (sqrt n)=
 ) may not be the floor of the exact sqrt of n.&nbsp;&nbsp; But I suspect th=
 at the computation becomes infeasibly large before this inaccuracy is reach=
 ed.<br>
 <br>Dropping the #i annotation when outputing inexact numbers in standard S=
 cheme strikes me as a bad idea.<br><br>-- Corky<br><br><br><br>
 
 --001636164899644cf304620bdb37--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Corky Cartwright <corky.cartwright@gmail.com>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and 
	truncate can return inexact integers
Date: Tue, 3 Feb 2009 16:58:12 -0700

 At Tue, 3 Feb 2009 17:16:11 -0600, Corky Cartwright wrote:
 > Nevertheless, I would claim the documentation for floor, truncate, and round
 > is misleading.  If the type contract for a function states that integer is
 > the return type, then the function should not return an inexact number.   (I
 > would classify returning an inexact number as breaking the contract.) 
 
 I concede that I don't know how someone would track down the legal
 definition of "integer" for the teaching-language contracts. The
 documentation should be improved. I am certain that the intended
 meaning of "integer" allows inexact numbers. :)
 
 The description of `integer?' for the teaching languages explicitly
 indicates that it can produce #t for an inexact number, at least. In
 the documentation of the `scheme/base' language, `integer' is well
 defined and appropriately hyperlinked.
 
 
 A separate question is whether "integer" *should* be defined to include
 inexact numbers. My sense is that it's a good idea, because it
 simplifies code that (for performance reasons) uses exclusively inexact
 numbers while also using `floor' (which is a sensible combination for
 drawing into bitmaps where drawing needs to end up pixel-aligned). At
 the same time, I've spent far too long looking at the numeric tower in
 Scheme to have a strong opinion about any of it; the details vary among
 use cases.
 
 > Does
 > Scheme implicitly convert inexact numbers  corresponding to integers to
 > unbounded integers to avoid loss of accuracy in subsequent computation?  I
 > suspect that the answer is no.
 
 Right, they stay inexact. Of course, inexactness is not confined to the
 part after a decimal point --- neither in the argument nor result of
 `floor'.
 
 > This issue arose when I tried to optimize the implementation of prime? in
 > Exercise 11.4.7 in HTDP.  I need to compute the integer (not inexact
 > integer) floor of (sqrt n) and use this (adjusted to get an odd number) as
 > the upper bound for my sieve testing.  For really large numbers, I presume
 > that Scheme sqrt is unreliable in that the integer floor of (sqrt n)) may
 > not be the floor of the exact sqrt of n.
 
 FWIW, the `scheme/base' and Pretty Big languages provide
 `integer-sqrt', which for an exact input returns the exact number that
 is the floor of the exact square. That's probably what you wanted, but
 it is a relatively new addition to PLT Scheme, and it never made it
 into the teaching languages.
 
 
 Matthew
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Corky Cartwright <corky.cartwright@gmail.com>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and 
 	truncate can return inexact integers
Date: Tue, 3 Feb 2009 19:10:48 -0500

 On Feb  3, Matthew Flatt wrote:
 > 
 > A separate question is whether "integer" *should* be defined to
 > include inexact numbers. My sense is that it's a good idea, because
 > it simplifies code that (for performance reasons) uses exclusively
 > inexact numbers while also using `floor' (which is a sensible
 > combination for drawing into bitmaps where drawing needs to end up
 > pixel-aligned). At the same time, I've spent far too long looking at
 > the numeric tower in Scheme to have a strong opinion about any of
 > it; the details vary among use cases.
 
 BTW (and unrelated to the original report), this was an issue with
 Typed Scheme: Sam defined `Integer' to be the same as `integer?', and
 also `*' as returning an Integer given two Integers.  Multiplying some
 big inexact integers will then lead to +inf.0, breaking TS.  (Sam's
 solution was to make `Integer' correspond to `exact-integer?')
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Corky Cartwright <corky.cartwright@gmail.com>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and  truncate can return inexact integers
Date: Tue, 3 Feb 2009 20:36:02 -0500

 On Feb 3, 2009, at 6:58 PM, Matthew Flatt wrote:
 
 > The documentation should be improved. I am certain that the intended
 > meaning of "integer" allows inexact numbers. :)
 
 How about we add (exact or inexact) to (almost) every occurrence of  
 "integer" in the docs of the teaching languages?
 
 > FWIW, the `scheme/base' and Pretty Big languages provide
 > `integer-sqrt', which for an exact input returns the exact number that
 > is the floor of the exact square. That's probably what you wanted, but
 > it is a relatively new addition to PLT Scheme, and it never made it
 > into the teaching languages.
 
 Should we add them? 
From: Corky Cartwright <corky.cartwright@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and 
	truncate can return inexact integers
Date: Tue, 3 Feb 2009 20:25:07 -0600

 --000e0cd291ba0de7b604620e7fd9
 Content-Type: text/plain; charset=ISO-8859-1
 Content-Transfer-Encoding: 7bit
 
 Hi Matthew,
 
 Thanks for the very helpful explanation.  I misinterpreted the meaning of
 integer? but I now understand the motivation; it means inexact integer.  You
 are right that the integer-sqrt function would completely solve my problem.
 My opinion is that it should be included in the student languages if for no
 other reason than to accommodate clean, more efficient solutions to exercise
 11.4.7.
 
 While I have your attention, my biggest frustration in using the latest
 version of  DrScheme after many years of disuse  is that I do not know any
 way to search the library API provided by the teaching languages.  A case in
 point is "check-expect" and "check-error", which I only stumbled over
 through google searching.  If I perform a "search manuals" command at the
 Help Desk for either "check-expect" or "check-error", no match is found.  In
 fact, check-expect and check-error are poorly documented in general within
 DrScheme.  I had to infer their existence from the fact that "Run" command
 reported that DrScheme expected tests to be included in the Definitions
 window.  Until I stumbled across some documentation of check-expect and
 check-error on the web, I was mystified as how I was supposed to express
 those tests.  Perhaps there is a different way to search the DrScheme
 documentation that I am missing.  check-error and check-expect are
 documented in the *How to Design Programs* Languages section of the Help
 Desk interface but you have to know that they are there and manually search
 for them.
 
 I like check-expect and check-error very much since they closely match the
 format of the JUnit testing framework for Java.  While I am listing my
 grievances,  I also  want to note that the student version of the  (error
 ...) function is strange.  It takes two arguments, a symbol and string, and
 prints an aborting error message consisting of these two strings
 concatenated with ": " in the middle.  I presume the argument format is
 consistent with more general versions of error in the non-student languages,
 but it is hard to explain to students why two arguments are used when one
 would suffice.
 
 -- Corky
 
 On Tue, Feb 3, 2009 at 5:58 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 
 > At Tue, 3 Feb 2009 17:16:11 -0600, Corky Cartwright wrote:
 > > Nevertheless, I would claim the documentation for floor, truncate, and
 > round
 > > is misleading.  If the type contract for a function states that integer
 > is
 > > the return type, then the function should not return an inexact number.
 > (I
 > > would classify returning an inexact number as breaking the contract.)
 >
 > I concede that I don't know how someone would track down the legal
 > definition of "integer" for the teaching-language contracts. The
 > documentation should be improved. I am certain that the intended
 > meaning of "integer" allows inexact numbers. :)
 >
 > The description of `integer?' for the teaching languages explicitly
 > indicates that it can produce #t for an inexact number, at least. In
 > the documentation of the `scheme/base' language, `integer' is well
 > defined and appropriately hyperlinked.
 >
 >
 > A separate question is whether "integer" *should* be defined to include
 > inexact numbers. My sense is that it's a good idea, because it
 > simplifies code that (for performance reasons) uses exclusively inexact
 > numbers while also using `floor' (which is a sensible combination for
 > drawing into bitmaps where drawing needs to end up pixel-aligned). At
 > the same time, I've spent far too long looking at the numeric tower in
 > Scheme to have a strong opinion about any of it; the details vary among
 > use cases.
 >
 > > Does
 > > Scheme implicitly convert inexact numbers  corresponding to integers to
 > > unbounded integers to avoid loss of accuracy in subsequent computation?
 >  I
 > > suspect that the answer is no.
 >
 > Right, they stay inexact. Of course, inexactness is not confined to the
 > part after a decimal point --- neither in the argument nor result of
 > `floor'.
 >
 > > This issue arose when I tried to optimize the implementation of prime? in
 > > Exercise 11.4.7 in HTDP.  I need to compute the integer (not inexact
 > > integer) floor of (sqrt n) and use this (adjusted to get an odd number)
 > as
 > > the upper bound for my sieve testing.  For really large numbers, I
 > presume
 > > that Scheme sqrt is unreliable in that the integer floor of (sqrt n)) may
 > > not be the floor of the exact sqrt of n.
 >
 > FWIW, the `scheme/base' and Pretty Big languages provide
 > `integer-sqrt', which for an exact input returns the exact number that
 > is the floor of the exact square. That's probably what you wanted, but
 > it is a relatively new addition to PLT Scheme, and it never made it
 > into the teaching languages.
 >
 >
 > Matthew
 >
 >
 
 --000e0cd291ba0de7b604620e7fd9
 Content-Type: text/html; charset=ISO-8859-1
 Content-Transfer-Encoding: quoted-printable
 
 Hi Matthew,<br><br>Thanks for the very helpful explanation.&nbsp; I misinte=
 rpreted the meaning of integer? but I now understand the motivation; it mea=
 ns inexact integer.&nbsp; You are right that the integer-sqrt function woul=
 d completely solve my problem.&nbsp; My opinion is that it should be includ=
 ed in the student languages if for no other reason than to accommodate clea=
 n, more efficient solutions to exercise 11.4.7.<br>
 <br>While I have your attention, my biggest frustration in using the latest=
  version of&nbsp; DrScheme after many years of disuse&nbsp; is that I do no=
 t know any way to search the library API provided by the teaching languages=
 .&nbsp; A case in point is &quot;check-expect&quot; and &quot;check-error&q=
 uot;, which I only stumbled over through google searching.&nbsp; If I perfo=
 rm a &quot;search manuals&quot; command at the Help Desk for either &quot;c=
 heck-expect&quot; or &quot;check-error&quot;, no match is found.&nbsp; In f=
 act, check-expect and check-error are poorly documented in general within D=
 rScheme.&nbsp; I had to infer their existence from the fact that &quot;Run&=
 quot; command reported that DrScheme expected tests to be included in the D=
 efinitions window.&nbsp; Until I stumbled across some documentation of chec=
 k-expect and check-error on the web, I was mystified as how I was supposed =
 to express those tests.&nbsp; Perhaps there is a different way to search th=
 e DrScheme documentation that I am missing.&nbsp; check-error and check-exp=
 ect are documented in the <i>How to Design Programs</i> Languages section o=
 f the Help Desk interface but you have to know that they are there and manu=
 ally search for them.<br>
 <br>I like check-expect and check-error very much since they closely match =
 the format of the JUnit testing framework for Java.&nbsp; While I am listin=
 g my grievances,&nbsp; I also&nbsp; want to note that the student version o=
 f the&nbsp; (error ...) function is strange.&nbsp; It takes two arguments, =
 a symbol and string, and prints an aborting error message consisting of the=
 se two strings concatenated with &quot;: &quot; in the middle.&nbsp; I pres=
 ume the argument format is consistent with more general versions of error i=
 n the non-student languages, but it is hard to explain to students why two =
 arguments are used when one would suffice.<br>
 <br>-- Corky<br><br><div class=3D"gmail_quote">On Tue, Feb 3, 2009 at 5:58 =
 PM, Matthew Flatt <span dir=3D"ltr">&lt;<a href=3D"mailto:mflatt@cs.utah.ed=
 u">mflatt@cs.utah.edu</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_q=
 uote" style=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0=
 pt 0.8ex; padding-left: 1ex;">
 <div class=3D"Ih2E3d">At Tue, 3 Feb 2009 17:16:11 -0600, Corky Cartwright w=
 rote:<br>
 &gt; Nevertheless, I would claim the documentation for floor, truncate, and=
  round<br>
 &gt; is misleading. &nbsp;If the type contract for a function states that i=
 nteger is<br>
 &gt; the return type, then the function should not return an inexact number=
 . &nbsp; (I<br>
 &gt; would classify returning an inexact number as breaking the contract.)<=
 br>
 <br>
 </div>I concede that I don&#39;t know how someone would track down the lega=
 l<br>
 definition of &quot;integer&quot; for the teaching-language contracts. The<=
 br>
 documentation should be improved. I am certain that the intended<br>
 meaning of &quot;integer&quot; allows inexact numbers. :)<br>
 <br>
 The description of `integer?&#39; for the teaching languages explicitly<br>
 indicates that it can produce #t for an inexact number, at least. In<br>
 the documentation of the `scheme/base&#39; language, `integer&#39; is well<=
 br>
 defined and appropriately hyperlinked.<br>
 <br>
 <br>
 A separate question is whether &quot;integer&quot; *should* be defined to i=
 nclude<br>
 inexact numbers. My sense is that it&#39;s a good idea, because it<br>
 simplifies code that (for performance reasons) uses exclusively inexact<br>
 numbers while also using `floor&#39; (which is a sensible combination for<b=
 r>
 drawing into bitmaps where drawing needs to end up pixel-aligned). At<br>
 the same time, I&#39;ve spent far too long looking at the numeric tower in<=
 br>
 Scheme to have a strong opinion about any of it; the details vary among<br>
 use cases.<br>
 <div class=3D"Ih2E3d"><br>
 &gt; Does<br>
 &gt; Scheme implicitly convert inexact numbers &nbsp;corresponding to integ=
 ers to<br>
 &gt; unbounded integers to avoid loss of accuracy in subsequent computation=
 ? &nbsp;I<br>
 &gt; suspect that the answer is no.<br>
 <br>
 </div>Right, they stay inexact. Of course, inexactness is not confined to t=
 he<br>
 part after a decimal point --- neither in the argument nor result of<br>
 `floor&#39;.<br>
 <div class=3D"Ih2E3d"><br>
 &gt; This issue arose when I tried to optimize the implementation of prime?=
  in<br>
 &gt; Exercise 11.4.7 in HTDP. &nbsp;I need to compute the integer (not inex=
 act<br>
 &gt; integer) floor of (sqrt n) and use this (adjusted to get an odd number=
 ) as<br>
 &gt; the upper bound for my sieve testing. &nbsp;For really large numbers, =
 I presume<br>
 &gt; that Scheme sqrt is unreliable in that the integer floor of (sqrt n)) =
 may<br>
 &gt; not be the floor of the exact sqrt of n.<br>
 <br>
 </div>FWIW, the `scheme/base&#39; and Pretty Big languages provide<br>
 `integer-sqrt&#39;, which for an exact input returns the exact number that<=
 br>
 is the floor of the exact square. That&#39;s probably what you wanted, but<=
 br>
 it is a relatively new addition to PLT Scheme, and it never made it<br>
 into the teaching languages.<br>
 <font color=3D"#888888"><br>
 <br>
 Matthew<br>
 <br>
 </font></blockquote></div><br>
 
 --000e0cd291ba0de7b604620e7fd9--
From: Eli Barzilay <eli@barzilay.org>
To: Corky Cartwright <corky.cartwright@gmail.com>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and 
 	truncate can return inexact integers
Date: Wed, 4 Feb 2009 00:23:02 -0500

 On Feb  3, Corky Cartwright wrote:
 > 
 > While I have your attention, my biggest frustration in using the
 > latest version of DrScheme after many years of disuse is that I do
 > not know any way to search the library API provided by the teaching
 > languages.  A case in point is "check-expect" and "check-error",
 > which I only stumbled over through google searching.  If I perform a
 > "search manuals" command at the Help Desk for either "check-expect"
 > or "check-error", no match is found.
 
 This sounds like a problem.  When you look at the search results page,
 does it say at the bottom "Context <something> [clear/modify]" or
 "[set context]"?  Does it also not find anything when you try this at
 http://docs.plt-scheme.org/search/ ?
 
 In any case, entering "M:htdp" in the search box should display only
 documentation entries for bindings from an htdp module.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>,
        Corky Cartwright <corky.cartwright@gmail.com>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/10053: In student languages, floor, round and  truncate can return inexact integers
Date: Sat, 14 Feb 2009 20:34:52 -0500

 On Feb 3, 2009, at 8:36 PM, Matthias Felleisen wrote:
 
 >
 > On Feb 3, 2009, at 6:58 PM, Matthew Flatt wrote:
 >
 >> The documentation should be improved. I am certain that the intended
 >> meaning of "integer" allows inexact numbers. :)
 >
 > How about we add (exact or inexact) to (almost) every occurrence of  
 > "integer" in the docs of the teaching languages?
 
 I have annotated almost all uses of integer in beginner-fun with  
 exact/inexact to remind students that these things come in two flavors.
 
 
 >> FWIW, the `scheme/base' and Pretty Big languages provide
 >> `integer-sqrt', which for an exact input returns the exact number  
 >> that
 >> is the floor of the exact square. That's probably what you wanted,  
 >> but
 >> it is a relatively new addition to PLT Scheme, and it never made it
 >> into the teaching languages.
 >
 > Should we add them?
 
 Added. No test added but tested in drscheme.
 


State changed from "open" to "closed" by matthias at Mon, 16 Mar 2009 14:22:32 -0400
Reason>>> i edited all documentations as appropriate

