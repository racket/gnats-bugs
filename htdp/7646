From apache@plt-scheme.org Wed Oct 19 13:41:44 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j634LIZT004396
	for <bugs@plt-scheme.org>; Wed, 19 Oct 2005 13:41:41 -0400
Message-Id: <200510191741.j9JHfftG004394@champlain.ccs.neu.edu>
Date: Wed, 19 Oct 2005 13:41:41 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: quote/quasiquote in beginner 

>Number:         7646
>Category:       htdp
>Synopsis:       quote/quasiquote in beginner
>Class:          change-request
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Oct 19 13:45:01 -0400 2005
>Last-Modified:  Thu Dec 01 23:00:35 -0500 2005
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.403-svn14oct2005
>Environment:
macosx "Darwin america.local 7.9.0 Darwin Kernel Version 7.9.0: Wed Mar 30 20:11:17 PST 2005; root:xnu/xnu-517.12.7.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Users/matthias/plt/collects/doc/web-server> #<path:/Users/matthias/plt/collects/doc/tour> #<path:/Users/matthias/plt/collects/doc/tools> #<path:/Users/matthias/plt/collects/doc/tex2page> #<path:/Users/matthias/plt/collects/doc/teachpack> #<path:/Users/matthias/plt/collects/doc/t-y-scheme> #<path:/Users/matthias/plt/collects/doc/swindle> #<path:/Users/matthias/plt/collects/doc/srfi> #<path:/Users/matthias/plt/collects/doc/r5rs> #<path:/Users/matthias/plt/collects/doc/profj-intermediate> #<path:/Users/matthias/plt/collects/doc/profj-beginner> #<path:/Users/matthias/plt/collects/doc/profj-advanced> #<path:/Users/matthias/plt/collects/doc/plot> #<path:/Users/matthias/plt/collects/doc/mzscheme> #<path:/Users/matthias/plt/collects/doc/mzlib> #<path:/Users/matthias/plt/collects/doc/mzc> #<path:/Users/matthias/plt/collects/doc/mrlib> #<path:/Users/matthias/plt/collects/doc/mred> #<path:/Users/matthias/plt/collects/doc/misclib> #<path:/Users/matthias/plt/collects/doc/intermediate-lambda> #<path:/Users/matthias/plt/collects/doc/intermediate> #<path:/Users/matthias/plt/collects/doc/insidemz> #<path:/Users/matthias/plt/collects/doc/help> #<path:/Users/matthias/plt/collects/doc/framework> #<path:/Users/matthias/plt/collects/doc/foreign> #<path:/Users/matthias/plt/collects/doc/drscheme> #<path:/Users/matthias/plt/collects/doc/beginning-abbr> #<path:/Users/matthias/plt/collects/doc/beginning> #<path:/Users/matthias/plt/collects/doc/advanced>)
Collections:
((#<path:/Users/matthias/Unison/collects/> (#<path:.DS_Store> #<path:date> #<path:finance> #<path:testing> #<path:utils> #<path:web>)) (#<path:/Users/matthias/Library/PLT Scheme/299.403/collects> "non-existent path") (#<path:/Users/matthias/plt/collects> (#<path:.svn> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:plai> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:profjWizard> #<path:r6rs> #<path:readline> #<path:reduction-semantics> #<path:repos-time-stamp> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student with List Abbreviations") (#6(#t constructor repeating-decimal #f #t none) #f))
>Description:
I'd like to see a different implementation of quote/backquote 
so that the false-s in this dialog become true-s: 

Welcome to DrScheme, version 299.403-svn14oct2005.
Language: Beginning Student with List Abbreviations.
> (boolean? (first '(true false)))
false
> (empty? (first '(empty)))
false
> 
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@plt-scheme.org
Cc: plt-internal List <plt-internal@list.cs.brown.edu>
Subject: Re: all/7646: quote/quasiquote in beginner 
Date: Wed, 19 Oct 2005 11:44:05 -0700

 On Oct 19, 2005, at 10:45 AM, matthias@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=7646
 >
 > Reported by matthias for release: 299.403-svn14oct2005
 >
 > *** Description:
 > I'd like to see a different implementation of quote/backquote
 > so that the false-s in this dialog become true-s:
 >
 > Welcome to DrScheme, version 299.403-svn14oct2005.
 > Language: Beginning Student with List Abbreviations.
 >
 >> (boolean? (first '(true false)))
 >>
 > false
 >
 >> (empty? (first '(empty)))
 >>
 > false
 
 what about
 
 (struct? (first '((make-monkey 13)))
 
 ... in other words, I don't think you can hope to get all the textual  
 representations into the language of quote, and this seems like a  
 slippery slope.
 
 along a different angle, what about
 
 (boolean? (first '(|true| false)))
 
 should this return true or false?
 
 John
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: plt-internal List <plt-internal@list.cs.brown.edu>, bugs@plt-scheme.org
Subject: Re: all/7646: quote/quasiquote in beginner 
Date: Wed, 19 Oct 2005 14:52:53 -0400

 On Oct 19, 2005, at 2:44 PM, John Clements wrote:
 
 > what about
 >
 > (struct? (first '((make-monkey 13)))
 
 false.
 
 > ... in other words, I don't think you can hope to get all the textual 
 > representations into the language of quote, and this seems like a 
 > slippery slope.
 >
 > along a different angle, what about
 >
 > (boolean? (first '(|true| false)))
 
 false.
 
 > should this return true or false?
 
 I just want true to truly stand for #t etc. Otherwise quote is fine by 
 me. -- Matthias
 
From: Eli Barzilay <eli@barzilay.org>
To: John Clements <clements@brinckerhoff.org>,
        Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, plt-internal List <plt-internal@list.cs.brown.edu>
Subject: Re: [plt-internal] Re: all/7646: quote/quasiquote in beginner 
Date: Wed, 19 Oct 2005 18:25:34 -0400

 On Oct 19, John Clements wrote:
 > 
 > what about
 > 
 > (struct? (first '((make-monkey 13)))
 > 
 > ... in other words, I don't think you can hope to get all the
 > textual representations into the language of quote, and this seems
 > like a slippery slope.
 
 I'm with John here...  Making `true' always be `true' reminds me of the
 Lisp feature I really don't miss.
 
 
 On Oct 19, Matthias Felleisen wrote:
 > 
 > On Oct 19, 2005, at 2:44 PM, John Clements wrote:
 > 
 > > ... in other words, I don't think you can hope to get all the textual 
 > > representations into the language of quote, and this seems like a 
 > > slippery slope.
 > >
 > > along a different angle, what about
 > >
 > > (boolean? (first '(|true| false)))
 > 
 > false.
 
 This seems odd...  What about
 
   (let ([true false]) true)
 
 and worse:
 
   (car (let ([true false]) '(true)))
 
 > I just want true to truly stand for #t etc. Otherwise quote is fine
 > by me. -- Matthias
 
 Then you want both of the above expressions to be syntax errors,
 right?  If so, then I think that a customized readtable is what you
 really want here, plus a printer that will display `true' and `false'
 as such.  The only slight problem in that is if you do
 `(string->symbol "true")'.  A real solution would probably be changing
 the language, in a way that adds that CL "feature"...
 
   CL-USER(1): (symbolp (cdr (list 1)))
   T
   CL-USER(2): (symbolp (< 1 2))
   T
   CL-USER(3): (funcall (lambda (r s t) r) 1 2 3)
   (funcall (lambda (r s t) r) 1 2 3)
   Error: Cannot bind T -- it is a constant.
     [condition type: PROGRAM-ERROR]
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: John Clements <clements@brinckerhoff.org>,
        plt-internal List <plt-internal@list.cs.brown.edu>,
        bugs@plt-scheme.org
Subject: Re: [plt-internal] Re: all/7646: quote/quasiquote in beginner 
Date: Wed, 19 Oct 2005 18:36:28 -0400

 Sorry but I think this is bogus.
 
 Quote is relying on accidental properties so that it turns () into the 
 empty list and #-thingies are not identifiers.
 
 We made a conscientious choice to name #t true, like normal human 
 beings would, car first, etc. Now we should go the rest of the way.
 
 I think you guys are forgetting that this is a request for BSL.
 
 -- Matthias
 
 
 On Oct 19, 2005, at 6:25 PM, Eli Barzilay wrote:
 
 > On Oct 19, John Clements wrote:
 >>
 >> what about
 >>
 >> (struct? (first '((make-monkey 13)))
 >>
 >> ... in other words, I don't think you can hope to get all the
 >> textual representations into the language of quote, and this seems
 >> like a slippery slope.
 >
 > I'm with John here...  Making `true' always be `true' reminds me of the
 > Lisp feature I really don't miss.
 >
 >
 > On Oct 19, Matthias Felleisen wrote:
 >>
 >> On Oct 19, 2005, at 2:44 PM, John Clements wrote:
 >>
 >>> ... in other words, I don't think you can hope to get all the textual
 >>> representations into the language of quote, and this seems like a
 >>> slippery slope.
 >>>
 >>> along a different angle, what about
 >>>
 >>> (boolean? (first '(|true| false)))
 >>
 >> false.
 >
 > This seems odd...  What about
 >
 >   (let ([true false]) true)
 
 Should be a syntax mistake in the same sense as
 
      (let ([5 6]) 5)
 
 > and worse:
 >
 >   (car (let ([true false]) '(true)))
 
 See above. I could live w/o car in BSL.
 
 >> I just want true to truly stand for #t etc. Otherwise quote is fine
 >> by me. -- Matthias
 >
 > Then you want both of the above expressions to be syntax errors,
 > right?  If so, then I think that a customized readtable is what you
 > really want here, plus a printer that will display `true' and `false'
 > as such.  The only slight problem in that is if you do
 > `(string->symbol "true")'.  A real solution would probably be changing
 > the language, in a way that adds that CL "feature"...
 >
 >   CL-USER(1): (symbolp (cdr (list 1)))
 >   T
 >   CL-USER(2): (symbolp (< 1 2))
 >   T
 >   CL-USER(3): (funcall (lambda (r s t) r) 1 2 3)
 >   (funcall (lambda (r s t) r) 1 2 3)
 >   Error: Cannot bind T -- it is a constant.
 >     [condition type: PROGRAM-ERROR]
 >
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli 
 > Barzilay:
 >                   http://www.barzilay.org/                 Maze is 
 > Life!
 


Responsible changed from "matthias" to "mflatt" by matthias at Thu, 01 Dec 2005 23:00:35 -0500
Reason>>> I think this is something that Matthew can deal with much better than me. 

