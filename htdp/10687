From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jan  8 12:26:22 2010
Received: from mail-yw0-f199.google.com (mail-yw0-f199.google.com [209.85.211.199])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id o08HQHX9007108
	for <bugs@bugs.plt-scheme.org>; Fri, 8 Jan 2010 12:26:17 -0500
Message-Id: <201001081726.o08HQEXB007100@champlain.ccs.neu.edu>
Date: Fri, 8 Jan 2010 12:26:14 -0500
From: sbloch@adelphi.edu
To: bugs@plt-scheme.org
Subject: What does set! return?

>Number:         10687
>Category:       htdp
>Synopsis:       What does set! return?
>Class:          support
>Responsible:    matthias
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jan 08 12:28:01 -0500 2010
>Closed-Date:    Wed Sep 08 14:54:23 -0400 2010
>Last-Modified:  Wed Sep 08 14:54:23 -0400 2010
>Originator:     Stephen Bloch
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6
>Description:
What does set! return?  I thought it returned a void value, so I figured I would write

(define groceries (list "milk" "eggs"))
(check-expect (set! groceries (cons "cereal" groceries)) (void))
(check-expect groceries (list "cereal" "milk" "eggs"))

It passes the second test, but fails the first.  I thought at first that check-expect wasn't recognizing separate void values as the same, but
(check-expect (void) (void))
and
(check-expect (display "hi") (void))
both pass, so that's not it.

(void? (set! groceries (cons "cereal" groceries)))
returns false.

So if set! doesn't return void, what DOES it return so I (and my students) can test it?
> (define blah (set! groceries (cons "cereal" groceries)))
> (void? blah)
false
> blah
(void)

Meanwhile,
> (define blerg (display "hi"))
hi
> (void? blerg)
true
> blerg
>

It appears that set! returns something that's kinda-voidish, but it actually prints out as "(void)", so it's not quite as void as what display returns, which doesn't print out at all.

WTF?
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: sbloch@adelphi.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10687: What does set! return?
Date: Fri, 8 Jan 2010 11:31:01 -0600

 I forget what is going on there exactly, but how about writing this instead=
 :
 
 (check-expect (begin (set! groceries ...) groceries) (list "cereal"
 "milk" "eggs"))
 
 Robby
 
 On Fri, Jan 8, 2010 at 11:28 AM,  <sbloch@adelphi.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10687
 >
 > Reported by Stephen Bloch for release: 4.2.3
 >
 > *** Description:
 > What does set! return? =C2=A0I thought it returned a void value, so I fig=
 ured I would write
 >
 > (define groceries (list "milk" "eggs"))
 > (check-expect (set! groceries (cons "cereal" groceries)) (void))
 > (check-expect groceries (list "cereal" "milk" "eggs"))
 >
 > It passes the second test, but fails the first. =C2=A0I thought at first =
 that check-expect wasn't recognizing separate void values as the same, but
 > (check-expect (void) (void))
 > and
 > (check-expect (display "hi") (void))
 > both pass, so that's not it.
 >
 > (void? (set! groceries (cons "cereal" groceries)))
 > returns false.
 >
 > So if set! doesn't return void, what DOES it return so I (and my students=
 ) can test it?
 >> (define blah (set! groceries (cons "cereal" groceries)))
 >> (void? blah)
 > false
 >> blah
 > (void)
 >
 > Meanwhile,
 >> (define blerg (display "hi"))
 > hi
 >> (void? blerg)
 > true
 >> blerg
 >>
 >
 > It appears that set! returns something that's kinda-voidish, but it actua=
 lly prints out as "(void)", so it's not quite as void as what display retur=
 ns, which doesn't print out at all.
 >
 > WTF?
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.=
 1.6) Gecko/20091201 Firefox/3.5.6
 >
 >
From: Stephen Bloch <sbloch@adelphi.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bug-notification@plt-scheme.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10687: What does set! return?
Date: Fri, 08 Jan 2010 14:59:31 -0500

 I'm trying to write up the "mutation" chapter (the LAST chapter!) of  
 my textbook, and would like to discuss "how to test functions that  
 change state" with as few technical complications as possible.
 
 My first impulse was to write
 
 (change-something! foo)
 (check-expect what-it-changed right-answer)
 (change-something! bar)
 (check-expect what-it-changed other-answer)
 
 but that doesn't work because all the check-expects in the window are  
 executed at once, AFTER everything else.  But I'd rather not have to  
 discuss that technical detail if I can avoid it.  The cleanest  
 solution seemed to me to be putting the change-something! in a check- 
 expect too (assuming that the check-expects are executed in the order  
 that they appear in the Definitions pane), regardless of whether  
 change-something! is actually supposed to return a value.  But then I  
 need to put something down as the right answer, and (void) isn't  
 working.
 
 Stephen Bloch
 sbloch@adelphi.edu
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Stephen Bloch <sbloch@adelphi.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        bug-notification@plt-scheme.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10687: What does set! return?
Date: Fri, 8 Jan 2010 15:04:06 -0500

 Robby gave you the right answer, also see my blog the MS-level HtDP  
 course.
 
 The idea is to write two kinds of tests:
 
 ;; some things should change
 (check-expect (local ([s ... set up state ...])
                  (begin
                    (state-changing s)
                    (observer s)))
                expected-answer)
 
 ;; ... and others shouldn't
 (check-expect (local ([s ... set up state ...])
                  (begin
                    (state-changing s)
                    (different-observer s)))
                expected-answer)
 
 
 
 
 
 
 
 On Jan 8, 2010, at 2:59 PM, Stephen Bloch wrote:
 
 > I'm trying to write up the "mutation" chapter (the LAST chapter!) of  
 > my textbook, and would like to discuss "how to test functions that  
 > change state" with as few technical complications as possible.
 >
 > My first impulse was to write
 >
 > (change-something! foo)
 > (check-expect what-it-changed right-answer)
 > (change-something! bar)
 > (check-expect what-it-changed other-answer)
 >
 > but that doesn't work because all the check-expects in the window  
 > are executed at once, AFTER everything else.  But I'd rather not  
 > have to discuss that technical detail if I can avoid it.  The  
 > cleanest solution seemed to me to be putting the change-something!  
 > in a check-expect too (assuming that the check-expects are executed  
 > in the order that they appear in the Definitions pane), regardless  
 > of whether change-something! is actually supposed to return a  
 > value.  But then I need to put something down as the right answer,  
 > and (void) isn't working.
 >
 > Stephen Bloch
 > sbloch@adelphi.edu
 
From: Stephen Bloch <sbloch@adelphi.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        bug-notification@plt-scheme.org, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10687: What does set! return?
Date: Sat, 09 Jan 2010 00:27:45 -0500

 On Jan 8, 2010, at 3:04 PM, Matthias Felleisen wrote:
 
 > ;; some things should change
 > (check-expect (local ([s ... set up state ...])
 >                (begin
 >                  (state-changing s)
 >                  (observer s)))
 >              expected-answer)
 
 Wait: I imagine this being used to test defined functions that mutate =
 external variables, like
 (define (birthday)
    (set! age (+ age 1)))
 But lexical scope says this refers to the "age" variable in the scope =
 where "birthday" was defined, not in the "local" where it's used.  So if =
 I want to test this sort of function, I need to either lose the "local" =
 or copy the function definition into the "local" of EACH TEST CASE, =
 which is of course lots of duplicate code and horribly error-prone.
 
 Now, eventually I want to discourage mutating a named external variable, =
 and instead encapsulate state so you're mutating something that the rest =
 of the world can't see.  But not yet: I'm just trying to explain how to =
 use and test mutation in the first place, before worrying about =
 encapsulation.
 
 
 
 Stephen Bloch
 sbloch@adelphi.edu
 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stephen Bloch <sbloch@adelphi.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        bug-notification <bug-notification@plt-scheme.org>,
        bugs <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/10687: What does set! return?
Date: Sat, 9 Jan 2010 08:59:29 -0600

 Yes, testing functions that mutate state is difficult!
 
 Robby
 
 On Fri, Jan 8, 2010 at 11:27 PM, Stephen Bloch <sbloch@adelphi.edu> wrote:
 >
 > On Jan 8, 2010, at 3:04 PM, Matthias Felleisen wrote:
 >
 >> ;; some things should change
 >> (check-expect (local ([s ... set up state ...])
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(begin
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(state-cha=
 nging s)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(observer =
 s)))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0expected-answer)
 >
 > Wait: I imagine this being used to test defined functions that mutate ext=
 ernal variables, like
 > (define (birthday)
 > =C2=A0 (set! age (+ age 1)))
 > But lexical scope says this refers to the "age" variable in the scope whe=
 re "birthday" was defined, not in the "local" where it's used. =C2=A0So if =
 I want to test this sort of function, I need to either lose the "local" or =
 copy the function definition into the "local" of EACH TEST CASE, which is o=
 f course lots of duplicate code and horribly error-prone.
 >
 > Now, eventually I want to discourage mutating a named external variable, =
 and instead encapsulate state so you're mutating something that the rest of=
  the world can't see. =C2=A0But not yet: I'm just trying to explain how to =
 use and test mutation in the first place, before worrying about encapsulati=
 on.
 >
 >
 >
 > Stephen Bloch
 > sbloch@adelphi.edu
 >
 >
 >
 >


State changed from "open" to "closed" by matthias at Wed, 08 Sep 2010 14:54:23 -0400
Reason>>> discussed 

