From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar 15 12:29:11 2010
Received: from mail-yx0-f198.google.com (mail-yx0-f198.google.com [209.85.210.198])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o2FGT9kC007260
	for <bugs@bugs.plt-scheme.org>; Mon, 15 Mar 2010 12:29:09 -0400
Message-Id: <201003151629.o2FGT6V0007252@champlain.ccs.neu.edu>
Date: Mon, 15 Mar 2010 12:29:06 -0400
From: tov@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: htdp/image images rendering slowly

>Number:         10821
>Category:       htdp
>Synopsis:       htdp/image images rendering slowly
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Mar 15 12:32:01 -0400 2010
>Last-Modified:  Thu Apr 29 19:20:01 -0400 2010
>Originator:     Jesse Tov
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.3
>Environment:
macosx "Darwin asnwer.local 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 139539412

Collections:
(("/Users/tov/Library/PLT Scheme/4.2.3/collects" non-existent-path) ("/Applications/PLT Scheme v4.2.3/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student with lambda") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
Images created using a large number of place-image or overlay operations take a long time to display, and it appears to show the image being composed, sometimes several times.  Refresh after scrolling is slow as well.  Applying image->color-list to the image fixes the problem for smaller images, though for a 250x250 image it makes my DrScheme hang.
>How-To-Repeat:
(require htdp/image)
(require 2htdp/universe)

;; Fill : Natural -> Image
;; To create a black square of the given size.
(define (fill size)
  (foldr (lambda (x img)
           (foldr (lambda (y img)
                    (place-image (rectangle 1 1 "solid" "black")
                                 x y img))
                  img
                  (build-list size identity)))
         (empty-scene size size)
         (build-list size identity)))

(check-expect (fill 1)  (nw:rectangle 1 1 "solid" "black"))
(check-expect (fill 10) (nw:rectangle 10 10 "solid" "black"))

(fill 200)
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Cc: Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Mon, 15 Mar 2010 11:39:20 -0500

 Does it make sense to create a cache bitmap for images (only at the
 top-level when they are being displayed)?
 
 Robby
 
 On Mon, Mar 15, 2010 at 11:32 AM,  <tov@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10821
 >
 > Reported by Jesse Tov for release: 4.2.3
 >
 > *** Description:
 > Images created using a large number of place-image or overlay operations =
 take a long time to display, and it appears to show the image being compose=
 d, sometimes several times. =C2=A0Refresh after scrolling is slow as well. =
 =C2=A0Applying image->color-list to the image fixes the problem for smaller=
  images, though for a 250x250 image it makes my DrScheme hang.
 >
 > *** How to repeat:
 > (require htdp/image)
 > (require 2htdp/universe)
 >
 > ;; Fill : Natural -> Image
 > ;; To create a black square of the given size.
 > (define (fill size)
 > =C2=A0(foldr (lambda (x img)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (foldr (lambda (y img)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(pla=
 ce-image (rectangle 1 1 "solid" "black")
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 x y img))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0img
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(build-list=
  size identity)))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 (empty-scene size size)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 (build-list size identity)))
 >
 > (check-expect (fill 1) =C2=A0(nw:rectangle 1 1 "solid" "black"))
 > (check-expect (fill 10) (nw:rectangle 10 10 "solid" "black"))
 >
 > (fill 200)
 >
 > *** Environment:
 > macosx "Darwin asnwer.local 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15=
  16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-maco=
 sx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 139539412
 >
 > Collections:
 > (("/Users/tov/Library/PLT Scheme/4.2.3/collects" non-existent-path) ("/Ap=
 plications/PLT Scheme v4.2.3/collects" "2htdp" "afm" "algol60" "at-exp" "br=
 owser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "d=
 rscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framewor=
 k" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "htm=
 l" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "=
 mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-=
 tools" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "readline" "r=
 edex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "=
 sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "sy=
 ntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2pag=
 e" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-serve=
 r" "wxme" "xml"))
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Inter=
 mediate Student with lambda") (#(#t constructor repeating-decimal #f #t non=
 e) #f ()))
 >
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Cc: Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Fri, 23 Apr 2010 11:52:59 -0500

 On Mon, Mar 15, 2010 at 11:39 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Does it make sense to create a cache bitmap for images (only at the
 > top-level when they are being displayed)?
 
 To answer myself: no. No, in practice there will be an image with a
 portion that shows up over and over and a portion that changes all the
 time and so just caching at the top won't help with that.
 
 Robby

Responsible changed from "nobody" to "robby" by robby at Thu, 29 Apr 2010 14:56:30 -0400
Reason>>> rbf

From: Robby Findler <robby@eecs.northwestern.edu>
To: tov@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 13:55:56 -0500

 After some thought, I don't see any straightforward way to fix this.
 It is possible to fix for the specific program below (and any program
 where the exact same image is rendered over and over), but for ones
 where most of the image is the same and only a little bit changes (say
 an animation that uses fill below as the background and just moves
 something around), I'm not sure what to do.
 
 The best I could come up with is something that notices "hey, I've
 rendered this huge image 10 times now; let me cache it" but the
 definition of 'huge' is a bit worrying and also you'd still see it
 draw slowly 10 times.
 
 Second best, I could add something that lets the programmer inform
 2htdp/image that some image was going to be drawn a lot and thus build
 a cache of the drawing (ala Stephen Bloch's request on the mailing
 lists), but I'm not sure if that is worthwhile from a pedagogic
 standpoint.
 
 If no other suggestions come along, I'll probably just do that under
 the rationale that if you don't tell students about it, you're no
 worse off than if it wasn't there in the first place.
 
 Opinions?
 
 Robby
 
 On Mon, Mar 15, 2010 at 11:32 AM,  <tov@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10821
 >
 > Reported by Jesse Tov for release: 4.2.3
 >
 > *** Description:
 > Images created using a large number of place-image or overlay operations =
 take a long time to display, and it appears to show the image being compose=
 d, sometimes several times. =C2=A0Refresh after scrolling is slow as well. =
 =C2=A0Applying image->color-list to the image fixes the problem for smaller=
  images, though for a 250x250 image it makes my DrScheme hang.
 >
 > *** How to repeat:
 > (require htdp/image)
 > (require 2htdp/universe)
 >
 > ;; Fill : Natural -> Image
 > ;; To create a black square of the given size.
 > (define (fill size)
 > =C2=A0(foldr (lambda (x img)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (foldr (lambda (y img)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(pla=
 ce-image (rectangle 1 1 "solid" "black")
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
 =A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 x y img))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0img
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(build-list=
  size identity)))
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 (empty-scene size size)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 (build-list size identity)))
 >
 > (check-expect (fill 1) =C2=A0(nw:rectangle 1 1 "solid" "black"))
 > (check-expect (fill 10) (nw:rectangle 10 10 "solid" "black"))
 >
 > (fill 200)
 >
 > *** Environment:
 > macosx "Darwin asnwer.local 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15=
  16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-maco=
 sx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 139539412
 >
 > Collections:
 > (("/Users/tov/Library/PLT Scheme/4.2.3/collects" non-existent-path) ("/Ap=
 plications/PLT Scheme v4.2.3/collects" "2htdp" "afm" "algol60" "at-exp" "br=
 owser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "d=
 rscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framewor=
 k" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "htm=
 l" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "=
 mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-=
 tools" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "readline" "r=
 edex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "=
 sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "sy=
 ntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2pag=
 e" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-serve=
 r" "wxme" "xml"))
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Inter=
 mediate Student with lambda") (#(#t constructor repeating-decimal #f #t non=
 e) #f ()))
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: tov@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 17:04:54 -0400

 Wouldn't a change to universe be better?=20
 
 
 On Apr 29, 2010, at 2:55 PM, Robby Findler wrote:
 
 > After some thought, I don't see any straightforward way to fix this.
 > It is possible to fix for the specific program below (and any program
 > where the exact same image is rendered over and over), but for ones
 > where most of the image is the same and only a little bit changes (say
 > an animation that uses fill below as the background and just moves
 > something around), I'm not sure what to do.
 >=20
 > The best I could come up with is something that notices "hey, I've
 > rendered this huge image 10 times now; let me cache it" but the
 > definition of 'huge' is a bit worrying and also you'd still see it
 > draw slowly 10 times.
 >=20
 > Second best, I could add something that lets the programmer inform
 > 2htdp/image that some image was going to be drawn a lot and thus build
 > a cache of the drawing (ala Stephen Bloch's request on the mailing
 > lists), but I'm not sure if that is worthwhile from a pedagogic
 > standpoint.
 >=20
 > If no other suggestions come along, I'll probably just do that under
 > the rationale that if you don't tell students about it, you're no
 > worse off than if it wasn't there in the first place.
 >=20
 > Opinions?
 >=20
 > Robby
 >=20
 > On Mon, Mar 15, 2010 at 11:32 AM,  <tov@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10821
 >>=20
 >> Reported by Jesse Tov for release: 4.2.3
 >>=20
 >> *** Description:
 >> Images created using a large number of place-image or overlay =
 operations take a long time to display, and it appears to show the image =
 being composed, sometimes several times.  Refresh after scrolling is =
 slow as well.  Applying image->color-list to the image fixes the problem =
 for smaller images, though for a 250x250 image it makes my DrScheme =
 hang.
 >>=20
 >> *** How to repeat:
 >> (require htdp/image)
 >> (require 2htdp/universe)
 >>=20
 >> ;; Fill : Natural -> Image
 >> ;; To create a black square of the given size.
 >> (define (fill size)
 >>  (foldr (lambda (x img)
 >>           (foldr (lambda (y img)
 >>                    (place-image (rectangle 1 1 "solid" "black")
 >>                                 x y img))
 >>                  img
 >>                  (build-list size identity)))
 >>         (empty-scene size size)
 >>         (build-list size identity)))
 >>=20
 >> (check-expect (fill 1)  (nw:rectangle 1 1 "solid" "black"))
 >> (check-expect (fill 10) (nw:rectangle 10 10 "solid" "black"))
 >>=20
 >> (fill 200)
 >>=20
 >> *** Environment:
 >> macosx "Darwin asnwer.local 9.8.0 Darwin Kernel Version 9.8.0: Wed =
 Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" =
 (i386-macosx/3m) (get-display-depth) =3D 32
 >> Human Language: english
 >> (current-memory-use) 139539412
 >>=20
 >> Collections:
 >> (("/Users/tov/Library/PLT Scheme/4.2.3/collects" non-existent-path) =
 ("/Applications/PLT Scheme v4.2.3/collects" "2htdp" "afm" "algol60" =
 "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" =
 "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" =
 "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" =
 "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" =
 "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" =
 "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" =
 "profile" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" =
 "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" =
 "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" =
 "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" =
 "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" =
 "xml"))
 >> Computer Language: (("Teaching Languages" "How to Design Programs" =
 "Intermediate Student with lambda") (#(#t constructor repeating-decimal =
 #f #t none) #f ()))
 >>=20
 >>=20
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: tov@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 16:31:16 -0500

 I'm still not getting it I think. I don't see how involving universe
 could help with this performance problem.
 
 On Thu, Apr 29, 2010 at 4:30 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > (I should have been clearer: Only for the case when this is used as an an=
 imation image.)
 >
 >
 > On Apr 29, 2010, at 5:28 PM, Robby Findler wrote:
 >
 >> On Thu, Apr 29, 2010 at 4:04 PM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >>>
 >>> Wouldn't a change to universe be better?
 >>
 >> How does universe help? Do you mean 2htdp/image? It has the same basic
 >> issue; you're iterating over a data structure with of size 40000*k
 >> words (for some small k) and each time drawing a single pixel. It is
 >> just much much faster to draw a rectangle.
 >>
 >> Of course, I imagine in this case you could just draw the rectangle;
 >> but in interesting cases you've got some kind of texture you're trying
 >> to draw that requires you to draw lots of individual pixels, like
 >> this:
 >>
 >> #lang scheme
 >> (require 2htdp/image
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 2htdp/universe)
 >>
 >> (define (fill size)
 >> (foldr (lambda (x img)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(foldr (lambda (y img)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (place-im=
 age (rectangle 1 1 "solid" (if (zero?
 >> (random 2)) "black" "red"))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0x y img))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 img
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (build-list size=
  values)))
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0(empty-scene size size)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0(build-list size values)))
 >>
 >> (fill 200)
 >>
 >> Robby
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: tov@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 17:30:10 -0400

 (I should have been clearer: Only for the case when this is used as an =
 animation image.)=20
 
 
 On Apr 29, 2010, at 5:28 PM, Robby Findler wrote:
 
 > On Thu, Apr 29, 2010 at 4:04 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>=20
 >> Wouldn't a change to universe be better?
 >=20
 > How does universe help? Do you mean 2htdp/image? It has the same basic
 > issue; you're iterating over a data structure with of size 40000*k
 > words (for some small k) and each time drawing a single pixel. It is
 > just much much faster to draw a rectangle.
 >=20
 > Of course, I imagine in this case you could just draw the rectangle;
 > but in interesting cases you've got some kind of texture you're trying
 > to draw that requires you to draw lots of individual pixels, like
 > this:
 >=20
 > #lang scheme
 > (require 2htdp/image
 >         2htdp/universe)
 >=20
 > (define (fill size)
 > (foldr (lambda (x img)
 >          (foldr (lambda (y img)
 >                   (place-image (rectangle 1 1 "solid" (if (zero?
 > (random 2)) "black" "red"))
 >                                x y img))
 >                 img
 >                 (build-list size values)))
 >        (empty-scene size size)
 >        (build-list size values)))
 >=20
 > (fill 200)
 >=20
 > Robby
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: tov@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 16:28:41 -0500

 On Thu, Apr 29, 2010 at 4:04 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Wouldn't a change to universe be better?
 
 How does universe help? Do you mean 2htdp/image? It has the same basic
 issue; you're iterating over a data structure with of size 40000*k
 words (for some small k) and each time drawing a single pixel. It is
 just much much faster to draw a rectangle.
 
 Of course, I imagine in this case you could just draw the rectangle;
 but in interesting cases you've got some kind of texture you're trying
 to draw that requires you to draw lots of individual pixels, like
 this:
 
 #lang scheme
 (require 2htdp/image
          2htdp/universe)
 
 (define (fill size)
  (foldr (lambda (x img)
           (foldr (lambda (y img)
                    (place-image (rectangle 1 1 "solid" (if (zero?
 (random 2)) "black" "red"))
                                 x y img))
                  img
                  (build-list size values)))
         (empty-scene size size)
         (build-list size values)))
 
 (fill 200)
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: tov@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 17:38:45 -0400

 (Ignore my stupid suggestion from before.)=20
 
 Different question. Since images are functionally represented in =
 2htdp/image, shouldn't some "hash consing" of rendering help here or am =
 I equally stupid again?=20=
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: tov@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 16:42:37 -0500

 On Thu, Apr 29, 2010 at 4:38 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > (Ignore my stupid suggestion from before.)
 >
 > Different question. Since images are functionally represented in 2htdp/image, shouldn't some "hash consing" of rendering help here or am I equally stupid again?
 
 In this case, it is traversing the big datastructure that is costing
 time (and it won't be smaller because there is no sharing to be had in
 the given example), so that won't help.
 
 I could, at some points, decide to turn the image into a bitmap that
 can be rendered efficiently. The problem is that if I do that for all
 of the intermediate images, it makes things cost O(n^2) for all that
 duplicated structure. This is what I was alluding to in my first
 message here today. If someone could just tell me which images are the
 ones that get drawn a alot then I could cache those, but I don't see
 how to just monitor the computatoin to figure it out without at least
 drawing slowly a few times. And that just seems strange. It would be
 something like the first few frames of a universe animation draw
 slowly and then the next N draw fast (until the background changes and
 this process repeats itself).
 
 Maybe it could be made to work, but it seems complex. And we don't
 have any real examples to test on (which seems crucial).
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: tov@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 16:44:26 -0500

 That is, a real example might suggest other alternatives.
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, tov@ccs.neu.edu,
        bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 16:45:55 -0500

 On Thu, Apr 29, 2010 at 4:44 PM, Carl Eastlund <cce@plt-scheme.org> wrote:
 > On Thu, Apr 29, 2010 at 5:42 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Thu, Apr 29, 2010 at 4:38 PM, Matthias Felleisen
 >> <matthias@ccs.neu.edu> wrote:
 >>>
 >>> (Ignore my stupid suggestion from before.)
 >>>
 >>> Different question. Since images are functionally represented in 2htdp/=
 image, shouldn't some "hash consing" of rendering help here or am I equally=
  stupid again?
 >>
 >> In this case, it is traversing the big datastructure that is costing
 >> time (and it won't be smaller because there is no sharing to be had in
 >> the given example), so that won't help.
 >>
 >> I could, at some points, decide to turn the image into a bitmap that
 >> can be rendered efficiently. The problem is that if I do that for all
 >> of the intermediate images, it makes things cost O(n^2) for all that
 >> duplicated structure. This is what I was alluding to in my first
 >> message here today. If someone could just tell me which images are the
 >> ones that get drawn a alot then I could cache those, but I don't see
 >> how to just monitor the computatoin to figure it out without at least
 >> drawing slowly a few times. And that just seems strange. It would be
 >> something like the first few frames of a universe animation draw
 >> slowly and then the next N draw fast (until the background changes and
 >> this process repeats itself).
 >
 > Why does caching intermediate results cost O(n^2)? =C2=A0Shouldn't you on=
 ly
 > have to recompute the diff at each intermediate step, with appropriate
 > choice of representation, and thus not recompute any of the parts of
 > the image that don't change?
 
 I'm thinking of a cache that is a bitmap of the image. If there are
 100 1x1 images that are built up one at a time into a 10x10 square,
 you have a bitmap of size 1, one of size 2, one of size 3, one of size
 4, etc up to 100.
 
 What kind of a cache are you thinking of?
 
 Robby
From: Carl Eastlund <cce@plt-scheme.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, tov@ccs.neu.edu,
        bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 17:44:03 -0400

 On Thu, Apr 29, 2010 at 5:42 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Thu, Apr 29, 2010 at 4:38 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> (Ignore my stupid suggestion from before.)
 >>
 >> Different question. Since images are functionally represented in 2htdp/image, shouldn't some "hash consing" of rendering help here or am I equally stupid again?
 >
 > In this case, it is traversing the big datastructure that is costing
 > time (and it won't be smaller because there is no sharing to be had in
 > the given example), so that won't help.
 >
 > I could, at some points, decide to turn the image into a bitmap that
 > can be rendered efficiently. The problem is that if I do that for all
 > of the intermediate images, it makes things cost O(n^2) for all that
 > duplicated structure. This is what I was alluding to in my first
 > message here today. If someone could just tell me which images are the
 > ones that get drawn a alot then I could cache those, but I don't see
 > how to just monitor the computatoin to figure it out without at least
 > drawing slowly a few times. And that just seems strange. It would be
 > something like the first few frames of a universe animation draw
 > slowly and then the next N draw fast (until the background changes and
 > this process repeats itself).
 
 Why does caching intermediate results cost O(n^2)?  Shouldn't you only
 have to recompute the diff at each intermediate step, with appropriate
 choice of representation, and thus not recompute any of the parts of
 the image that don't change?
 
 --Carl\
From: Carl Eastlund <cce@plt-scheme.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, tov@ccs.neu.edu,
        bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 17:47:40 -0400

 On Thu, Apr 29, 2010 at 5:45 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Thu, Apr 29, 2010 at 4:44 PM, Carl Eastlund <cce@plt-scheme.org> wrote=
 :
 >> On Thu, Apr 29, 2010 at 5:42 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> On Thu, Apr 29, 2010 at 4:38 PM, Matthias Felleisen
 >>> <matthias@ccs.neu.edu> wrote:
 >>>>
 >>>> (Ignore my stupid suggestion from before.)
 >>>>
 >>>> Different question. Since images are functionally represented in 2htdp=
 /image, shouldn't some "hash consing" of rendering help here or am I equall=
 y stupid again?
 >>>
 >>> In this case, it is traversing the big datastructure that is costing
 >>> time (and it won't be smaller because there is no sharing to be had in
 >>> the given example), so that won't help.
 >>>
 >>> I could, at some points, decide to turn the image into a bitmap that
 >>> can be rendered efficiently. The problem is that if I do that for all
 >>> of the intermediate images, it makes things cost O(n^2) for all that
 >>> duplicated structure. This is what I was alluding to in my first
 >>> message here today. If someone could just tell me which images are the
 >>> ones that get drawn a alot then I could cache those, but I don't see
 >>> how to just monitor the computatoin to figure it out without at least
 >>> drawing slowly a few times. And that just seems strange. It would be
 >>> something like the first few frames of a universe animation draw
 >>> slowly and then the next N draw fast (until the background changes and
 >>> this process repeats itself).
 >>
 >> Why does caching intermediate results cost O(n^2)? =A0Shouldn't you only
 >> have to recompute the diff at each intermediate step, with appropriate
 >> choice of representation, and thus not recompute any of the parts of
 >> the image that don't change?
 >
 > I'm thinking of a cache that is a bitmap of the image. If there are
 > 100 1x1 images that are built up one at a time into a 10x10 square,
 > you have a bitmap of size 1, one of size 2, one of size 3, one of size
 > 4, etc up to 100.
 >
 > What kind of a cache are you thinking of?
 >
 > Robby
 
 I'm thinking of a functional mapping from positions to colors, so if
 you have to use functional update to change a small region of one you
 get good data-sharing with the previous version, and only "spend" time
 and space proportional to the updated area.
 
 --Carl
From: Robby Findler <robby@eecs.northwestern.edu>
To: Carl Eastlund <cce@plt-scheme.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Matthias Felleisen <matthias@ccs.neu.edu>,
        "tov@ccs.neu.edu" <tov@ccs.neu.edu>,
        "bugs@plt-scheme.org" <bugs@plt-scheme.org>,
        "nobody@plt-scheme.org" <nobody@plt-scheme.org>,
        "bug-notification@plt-scheme.org" <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 18:10:55 -0500

 The speed comes from batching calls into te low level primitives
 (which I think turn into highly parallel calls on a graphics card). So
 things like that won't help I don't think.
 
 Robby
 
 On Thursday, April 29, 2010, Carl Eastlund <cce@plt-scheme.org> wrote:
 > On Thu, Apr 29, 2010 at 5:45 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Thu, Apr 29, 2010 at 4:44 PM, Carl Eastlund <cce@plt-scheme.org> wrot=
 e:
 >>> On Thu, Apr 29, 2010 at 5:42 PM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>> On Thu, Apr 29, 2010 at 4:38 PM, Matthias Felleisen
 >>>> <matthias@ccs.neu.edu> wrote:
 >>>>>
 >>>>> (Ignore my stupid suggestion from before.)
 >>>>>
 >>>>> Different question. Since images are functionally represented in 2htd=
 p/image, shouldn't some "hash consing" of rendering help here or am I equal=
 ly stupid again?
 >>>>
 >>>> In this case, it is traversing the big datastructure that is costing
 >>>> time (and it won't be smaller because there is no sharing to be had in
 >>>> the given example), so that won't help.
 >>>>
 >>>> I could, at some points, decide to turn the image into a bitmap that
 >>>> can be rendered efficiently. The problem is that if I do that for all
 >>>> of the intermediate images, it makes things cost O(n^2) for all that
 >>>> duplicated structure. This is what I was alluding to in my first
 >>>> message here today. If someone could just tell me which images are the
 >>>> ones that get drawn a alot then I could cache those, but I don't see
 >>>> how to just monitor the computatoin to figure it out without at least
 >>>> drawing slowly a few times. And that just seems strange. It would be
 >>>> something like the first few frames of a universe animation draw
 >>>> slowly and then the next N draw fast (until the background changes and
 >>>> this process repeats itself).
 >>>
 >>> Why does caching intermediate results cost O(n^2)? =C2=A0Shouldn't you =
 only
 >>> have to recompute the diff at each intermediate step, with appropriate
 >>> choice of representation, and thus not recompute any of the parts of
 >>> the image that don't change?
 >>
 >> I'm thinking of a cache that is a bitmap of the image. If there are
 >> 100 1x1 images that are built up one at a time into a 10x10 square,
 >> you have a bitmap of size 1, one of size 2, one of size 3, one of size
 >> 4, etc up to 100.
 >>
 >> What kind of a cache are you thinking of?
 >>
 >> Robby
 >
 > I'm thinking of a functional mapping from positions to colors, so if
 > you have to use functional update to change a small region of one you
 > get good data-sharing with the previous version, and only "spend" time
 > and space proportional to the updated area.
 >
 > --Carl
 >
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: tov <tov@ccs.neu.edu>, bugs <bugs@plt-scheme.org>,
        nobody <nobody@plt-scheme.org>,
        bug-notification <bug-notification@plt-scheme.org>
Subject: Re: [plt-bug] all/10821: htdp/image images rendering slowly
Date: Thu, 29 Apr 2010 19:17:48 -0400

 On Thu, Apr 29, 2010 at 2:55 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > After some thought, I don't see any straightforward way to fix this.
 > It is possible to fix for the specific program below (and any program
 > where the exact same image is rendered over and over), but for ones
 > where most of the image is the same and only a little bit changes (say
 > an animation that uses fill below as the background and just moves
 > something around), I'm not sure what to do.
 
 It wouldn't fix the overall slowness, but you could avoid the
 "animation effect" by rendering to a buffer and the rendering the
 buffer to the screen, right?
 -- 
 sam th
 samth@ccs.neu.edu
