From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Apr 15 09:52:59 2009
Received: from qw-out-2122.google.com (qw-out-2122.google.com [74.125.92.26])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n3FDqm8c008546
	for <bugs@bugs.plt-scheme.org>; Wed, 15 Apr 2009 09:52:48 -0400
Message-Id: <200904151352.n3FDqjXR008539@champlain.ccs.neu.edu>
Date: Wed, 15 Apr 2009 09:52:45 -0400
From: levice.a@gmail.com
To: bugs@plt-scheme.org
Subject: module: identifier already imported from a different source

>Number:         10203
>Category:       htdp
>Synopsis:       module: identifier already imported from a different source
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Apr 15 09:56:01 -0400 2009
>Last-Modified:  Wed May 20 10:28:29 -0400 2009
>Originator:     Levis
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.0.2
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 3" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 111648320

Collections:
(("C:\\Documents and Settings\\alevis\\Application Data\\PLT Scheme\\4.0.2\\collects" non-existent-path) ("C:\\Program Files\\PLT\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student with List Abbreviations") (#(#t constructor repeating-decimal #f #t none) #f ((lib "draw.ss" "teachpack" "htdp") (lib "image.ss" "teachpack" "htdp") (lib "testing.ss" "teachpack" "htdp") (lib "world.ss" "teachpack" "htdp"))))
>Description:
module: identifier already imported from a different source
>How-To-Repeat:
;CS lab 13
;Ross Lagoy & Levis Agaba.
;Section  B

;Constants
(define UFO-SPEED 3)
(define TOP 600)
(define BOTTOM 590)
(define WIDTH 200)
(define HEIGHT 600)
(define TANK-SPEED 7)
(define BULLET-SPEED 3)
(define UFO-SIZE 20)

;IMAGES
(define tank-image . )
(define bullet-image .)
(define UFO-image .)

;A tank is a structure.
;(make-tank number number)
(define-struct tank (x y))

;examples
(make-tank 12 BOTTOM)
(make-tank 70 BOTTOM)
(make-tank 54 BOTTOM)
 
;A UFO is a structure.
;(make-UFO number number number number))
(define-struct UFO (x y UFO-SPEED))

;examples
(make-UFO 345 10 UFO-SPEED)
(make-UFO 245 9 UFO-SPEED)
(make-UFO 445 20 UFO-SPEED)

;A bullet is a structure.
;(make-bullet number number)
(define-struct bullet (x y))
;examples 
(define bullet1 (make-bullet 150 10))
(define bullet2 (make-bullet 67 45))
(define bullet3 (make-bullet 174 100))
(define bullet4 (make-bullet 23 123))
(define bullet5 (make-bullet 179 92))

;Definition 
;a list-of-bullets are either 
;empty
; or 
;(cons item list-of-bullets)
;Examples:
(define LISTA (list bullet1 bullet2 bullet3 bullet4 bullet5))

;A world is a structure
;(make-world list-of-bullets tank UFO)
(define-struct world (LISTA tank UFO))

;examples
(make-world LISTA (make-tank 12 BOTTOM) (make-UFO 345 10 UFO-SPEED))
(make-world LISTA (make-tank 18 BOTTOM) (make-UFO 245 9 UFO-SPEED))
(make-world LISTA (make-tank 242 BOTTOM) (make-UFO 445 20 UFO-SPEED)) 

;Template
; (define (world-func aworld)
;       (... (UFO-x (world-UFO aworld))
;        ... (UFO-y (world-UFO aworld))
;        ... (UFO-y-speed (world-UFO aworld)
;        ... (tank-x (world-tank aworld)
;        ... (tank-y (world-tank aworld)
;        ... (bullet-y (world-bullet aworld)
;        ... (bullet-x (world-bullet aworld)
;        ... (bullet-y-speed (world-bullet aworld)))))))))



;contract: tank-create: number tank -> tank
;purpose: given a number, n, and an object, produce a tank that is n pixels to the right of the canvas' 
;         left margin                                    
;examples:(tank-create 5 (make-tank 12 590)) should produce (make-tank 205 590))
;         (tank-create 17 (make-tank 30 590)) should produce (make-tank 217 590))
(define (tank-create n atank)
  (make-tank (+ WIDTH n) BOTTOM))

;test cases
(check-expect (tank-create 5 (make-tank 12 590)) (make-tank 205 590))
(check-expect (tank-create 17(make-tank 30 590)) (make-tank 217 590))
(check-expect (tank-create 0 (make-tank 20 590)) (make-tank 200 590))

;contract: tank-move : tank KeyEvent -> tank                                          
;puprose: given a tank and a KeyEvent produce a tank that moved to the left or right by 
;         (3) pixels, if the player has pressed the left or right arrow key; otherwise returns 
;         the tank
;examples: (tank-move (make-tank 92 590) 'right) should produce (make-tank 95 590)
;          (tank-move (make-tank 59 590) 'left) should produce (make-tank 56 590)
(define (tank-move atank key)
  (cond [(symbol? key)
         (cond [(symbol=? key 'left)
                (make-tank (- (tank-x atank) TANK-SPEED)
                           (tank-y atank))]
               [(symbol=? key 'right)
                (make-tank (+ (tank-x atank) TANK-SPEED)
                           (tank-y atank))]
               [else atank])]
        [else atank]))

;;test-cases
(check-expect (tank-move (make-tank 92 BOTTOM) 'right) (make-tank 99 BOTTOM))
(check-expect (tank-move (make-tank 59 BOTTOM) 'left) (make-tank 52 BOTTOM))
(check-expect (tank-move (make-tank 2 BOTTOM) 'right) (make-tank 9 BOTTOM))
(check-expect (tank-move (make-tank 3 BOTTOM) 'mmm) (make-tank 3 BOTTOM))
(check-expect (tank-move (make-tank 100 BOTTOM) #\a) (make-tank 100 BOTTOM))

;contract: create-UFO: number ufo -> UFO
;purpose: consumes a number, n, and produces a UFO whose anchor point is 11 pixels from the top
;         of the canvas and n pixels to the right of the canvas orign.                                  
;examples: (create-UFO 5 (make-UFO 187 343 3 4)) should produce (make-UFO 184 339 3 4)
;          (create-UFO 19 (make-UFO 26 576 5 3)) should produce (make-UFO 23 572 5 3)
(define (create-UFO n aUFO)
  (make-UFO (+ WIDTH n) TOP UFO-SPEED))

;test cases
(check-expect (create-UFO 5 (make-UFO 12 TOP UFO-SPEED)) (make-UFO 205 TOP UFO-SPEED))
(check-expect (create-UFO 17(make-UFO 30 TOP UFO-SPEED)) (make-UFO 217 TOP UFO-SPEED))
(check-expect (create-UFO 0 (make-UFO 20 TOP UFO-SPEED)) (make-UFO 200 TOP UFO-SPEED))

;contract: new-scene: world ->image
;purpose: to consume a world and produce an image of the the UFO, and tank in the world 
;         in its given position on the canvas
;examples: (new-scene (make-world LISTA (make-tank 12) (make-UFO 345 10 4 
;          UFO-y-speed)))
;          "should produce a canvas (200x600) with a tank at 12,590 and a UFO 345,10 
;          (new-scene (make-world LISTA (make-tank 18) (make-UFO 245 9 6 
;          UFO-y-speed)))
;          "should produce a canvas (200x600) with a tank at 18,590 and a UFO 245,9 
; (define (new-scene aworld)
;   (place-image tank-image 
;         (tank-x (world-tank aworld)) BOTTOM
;   (place-image bullet-image
;         (bullet-x (world-bullet aworld))
;         (bullet-y (world-bullet aworld))
;   (place-image UFO-image 
;         (UFO-x (world-UFO aworld))
;         (UFO-y (world-UFO aworld))
;   (draw-bullets
;         ((empty-scene WIDTH HEIGHT)))))
; 
; ;test cases
; (new-scene (make-world LISTA (make-tank 12) (make-UFO 345 10 4 UFO-SPEED)))
; "should produce a canvas (200x600) with a tank at 12,590 and a UFO 345,10"
; (new-scene (make-world LISTA (make-tank 18) (make-UFO 245 9 6 UFO-SPEED)))
; "should produce a canvas (200x600) with a tank at 18,590 and a UFO 245,9"
; (new-scene (make-world LISTA (make-tank 29) (make-UFO 550 44 3 UFO-SPEED)))
; "should produce a canvas (200x600) with a tank at 29,590 and a UFO 550,44"


;contract: draw-bullets: list-of-bullets -> image
;purpose: Given a list-of-bullets, recursively produce an image of bullets.
;examples: (draw-bullets (list-of-bullets)) should produce an image of bullets.
(define (draw-bullets alob)
  (cond [(empty? empty-scene WIDTH HEIGHT) alob]
        [(cons? alob) (place-image bullet-image (bullet-x bullet1) (bullet-y bullet1) (draw-bullets (rest alob)))]))

  
;contract: update-world: world->world
;purpose: update the world with a list of bullets, tank and UFO on each tick of the clock.
;examples: (update-world (make-world LISTA (make-tank 12) (make-UFO 345 10 4 
;          UFO-y-speed)) should produce (make-world LISTA (make-tank 12) (make-UFO 145 10 4 
;          UFO-y-speed))
;          (update-world (make-world LISTA (make-tank 18) (make-UFO 245 9 6 
;          UFO-y-speed)) should produce (make-world LISTA (make-tank 18) (make-UFO 232 9 6 
;          UFO-y-speed))

;contract: update-world-keyevent: world KeyEvent -> world
;purpose: given the current world and a key event, update the world, which means move the tank
;         in the world based on the key event, and shoot a bullet on a specific key event. The UFO will remain unchanged.
;examples:(update-world-keyevent (make-world LISTA (make-tank 12 590) (make-UFO 345 10 4 
;         UFO-y-speed))'right) should produce (make-world LISTA (make-tank 15 590)(make-UFO 345 10 4 
;         UFO-y-speed))
;         (update-world-keyevent (make-world LISTA (make-tank 18 590) (make-UFO 245 9 6 
;         UFO-y-speed)) 'left) should produce (make-world LISTA (make-tank 16 590) (make-UFO 245 9 6 
;         UFO-y-speed)) 
(define (update-world-keyevent aworld ke)
  (make-world (world-LISTA aworld) 
              (tank-move (world-tank aworld) ke) 
              (world-UFO aworld)))

;contract: UFO-at-left?: UFO -> boolean
;purpose: returns true if the UFO is touching the left of the screen, false if not.
;examples: (UFO-at-left? (make-UFO 220 500 3 2))) should produce false
;          (UFO-at-left? (make-UFO 10 300 1 7))) should produce true
(define (UFO-at-left? aUFO)
  (<= (- (UFO-x aUFO) UFO-SIZE) 0))

;test cases
(check-expect (UFO-at-left? (make-UFO 210 500 3)) false)
(check-expect (UFO-at-left? (make-UFO 0 300 1)) true)

;contract: UFO-at-right?: UFO  -> boolean
;purpose: returns true if the UFO is completely off the left of the screen, false if not.
;examples: (UFO-at-right? (make-UFO 200 300 3 2))) should produce false
;          (UFO-at-right? (make-UFO 400 100 1 7))) should produce true 
(define (UFO-at-right? aUFO)
  (>= (- (UFO-x aUFO) (- WIDTH UFO-SIZE)) 0))

;test cases
(check-expect (UFO-at-right? (make-UFO 0 300 3)) false)
(check-expect (UFO-at-right? (make-UFO 400 100 1)) true)

;contract: UFO-at-bottom?: UFO -> boolean
;purpose: returns true if the UFO is touching the BOTTOM of the screen, false if not.
;examples: (UFO-at-bottom? (make-UFO 200 600 3 2))) should produce true
;          (UFO-at-bottom? (make-UFO 120 100 1 7))) should produce false
(define (UFO-at-bottom? aUFO)
  (>= (- (UFO-y aUFO) (- HEIGHT UFO-SIZE)) 0))

;test cases
(check-expect (UFO-at-bottom? (make-UFO 200 600 3)) true)
(check-expect (UFO-at-bottom? (make-UFO 120 100 1)) false)

;contract: UFO-move: UFO -> UFO                             
;purpose: given a UFO, move the UFOs x-position and y-position
;examples: (UFO-move (make-UFO 200 300 3 2))should produce (make-UFO 194 297 3 2)
;          (UFO-move (make-UFO 0 500 3 2))should produce (make-UFO 10 497 3 2)
(define (UFO-move aUFO) 
  (make-UFO (- WIDTH (- (random 11) 5)) (- HEIGHT 4) UFO-SPEED))

;test cases
(UFO-move (make-UFO 187 343 UFO-SPEED)) "should produce (make-UFO 184 339 UFO-SPEED)) with a random x-position"
(UFO-move (make-UFO 26 576 UFO-SPEED)) "should produce (make-UFO 23 572 UFO-SPEED)) with a random x-position"
(UFO-move (make-UFO 21 572 UFO-SPEED)) "should produce  (make-UFO 17 572 UFO-SPEED))with a random x-position"


;Helper function
;contract: collide?: list-of-bullets (alob), UFO -> boolean.
;purpose: Given a list-of-bullets and a UFO determine if any of them collide with the tank.
;examples

; (define (collide? alob) 
; (cond [(empty? (a-list-of-bullets alob)) empty]
;         [(and (<= (- (bullet-x-position (first (world-list-of-bullet aworld))) (tank-x (world-tank aworld))) 40)
;               (>= (- (bullet-x-position (first (world-list-of-bullet aworld))) (tank-x (world-tank aworld))) 0)
;               (<= (- TANK-Y (bullet-y-position (first (world-list-of-bullets aworld)))) 10)) 
;          (cons true (collide? (make-world (rest (world-list-of-bullets aworld)) (world-tank aworld))))]   
;         [else (cons false (collide? (make-world (rest (world-list-of-bullets aworld)) (world-tank aworld))))]))


;2nd helper function
;Contract: collide2?: bullet, UFO -> boolean
;Purpose: Given a bullet and a UFO, determine whether the bullet of the UFO collide together 
;Examples: (check-expect (collide? (make-world (make-bullet 5 590 2 1) (make-tank 5))) true)
;(check-expect (collide? (make-world (make-bullet 5 590 2 1) (make-tank 5))) true)

(define (collide? aworld)
  (and (<= (- (bullet-y (world-bullet aworld))
  (tank-x (world-tank aworld))) 40) 
  (<= (- TANK-Y (bullet-y (world-bullet aworld))) 10)))

;testcases
(check-expect (collide? (make-world (make-bullet 5 590 2 1) (make-tank 5))) true)
(check-expect (collide? (make-world (make-bullet 5 590 2 1) (make-tank 5))) true)
(check-expect (collide? (make-world (make-bullet 5 590 2 1) (make-tank 5))) true)


;contract: collide?: helper->boolean
;purpose: given a world, determine if the UFO and the bullets collide                                                                  
;examples: (collide? (make-world (make-bullet 174 10 5) (make-tank 12) 
;          should produce false
;          (collide? (make-world (make-bullet 100 200 10) (make-tank 18) 
;          should produce true 

; collide? will have to call a helper function that takes a list-of-bullets and a ufo as
; input. That function will be recursive and check if any bullet in the list collides with
; the ufo You will then need a 2nd helper function to test if a single bullet and the ufo collides
; Your recursive function will call the 2nd helper function.



;contract: bullet-move: bullet->bullet                          
;purpose: update bullet by moving the bullet up by 5 pixels in the y direction.
;examples: (bullet-move (make-bullet 150 10)) should produce (make-bullet 150 15)
;          (bullet-move (make-bullet 67 45)) should produce (make-bullet 67 50)
(define (bullet-move bullet)
  (bullet-move (make-bullet (bullet-x bullet) (- HEIGHT 5))))

;testcases
(check-expect (bullet-move (make-bullet 150 10)) (make-bullet 150 5))
(check-expect (bullet-move (make-bullet 67 45)) (make-bullet 67 40))
(check-expect (bullet-move (make-bullet 174 100)) (make-bullet 174 95))

;Contract: move-all-bullets: list-of-bullets -> bullet-move
;Purpose: Given a list of bullets move each bullet in the list
;Example: (move-all-bullets (list-of-bullets))


;contract: end-game?: world->boolean
;purpose: to determine when to end the game, when the UFO reaches a position of 590 of the screen or if the UFO and any bullet collide.
;examples: (end-game? (make-world (LISTA) (make-tank 12 BOTTOM))) "should produce 
;          true when the game ends"
;          (end-game? (make-world (LISTA) (make-tank 70 BOTTOM))) "should produce 
;          true when the game ends"

;contract: start-game: world-> world
;purpose: take a set of functions and put them together to create a UFO tank game.
;examples: (start-game (make-world (LISTA) (make-tank 12 590) (make-UFO 345 10 4 UFO-y-speed))
;          should produce a UFO game with 5 bullets and a tank at the bottom of the canvas
;          (start-game (make-world (LISTA) (make-tank 18 590) (make-UFO 245 9 6 UFO-y-speed)) 
;          should produce a UFO game with 5 bullets and a tank at the bottom of the canvas
; (define (start-game aworld)
;   (and (big-bang WIDTH HEIGHT .001 aworld)
;        (on-redraw new-scene)
;        (on-tick-event update-world)
;        (on-key-event update-world-keyevent)))
;        (stop-when end-game?)))
;          

;testcases
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: levice.a@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10203: module: identifier already imported from a different source
Date: Wed, 15 Apr 2009 10:13:56 -0400

 1. The draw teachpack is obsolete and should not be used anymore.
 
 2. Having said that, the error message (I verified it with requires)  
 is HORRIBLE. You're lucky you didn't try adding teachpacks in the  
 current version of drscheme because that would have given you
 
   Welcome to DrScheme, version 4.1.5.4-svn14apr2009 [3m].
 Language: Beginning Student custom; memory limit: 128 megabytes.
 Teachpacks: draw.ss and image.ss.
 define-compound-unit/infer: untagged initialization dependent  
 signature mred^ is supplied from a later unit with link temp4
  >
 
 I am keeping this one open.
 
 
 On Apr 15, 2009, at 9:56 AM, levice.a@gmail.com wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=10203
 >
 > Reported by Levis for release: 4.0.2
 >
 > *** Description:
 > module: identifier already imported from a different source
 >
 > *** How to repeat:
 > ;CS lab 13
 > ;Ross Lagoy & Levis Agaba.
 > ;Section  B
 >
 > ;Constants
 > (define UFO-SPEED 3)
 > (define TOP 600)
 > (define BOTTOM 590)
 > (define WIDTH 200)
 > (define HEIGHT 600)
 > (define TANK-SPEED 7)
 > (define BULLET-SPEED 3)
 > (define UFO-SIZE 20)
 >
 > ;IMAGES
 > (define tank-image . )
 > (define bullet-image .)
 > (define UFO-image .)
 >
 > ;A tank is a structure.
 > ;(make-tank number number)
 > (define-struct tank (x y))
 >
 > ;examples
 > (make-tank 12 BOTTOM)
 > (make-tank 70 BOTTOM)
 > (make-tank 54 BOTTOM)
 >
 > ;A UFO is a structure.
 > ;(make-UFO number number number number))
 > (define-struct UFO (x y UFO-SPEED))
 >
 > ;examples
 > (make-UFO 345 10 UFO-SPEED)
 > (make-UFO 245 9 UFO-SPEED)
 > (make-UFO 445 20 UFO-SPEED)
 >
 > ;A bullet is a structure.
 > ;(make-bullet number number)
 > (define-struct bullet (x y))
 > ;examples
 > (define bullet1 (make-bullet 150 10))
 > (define bullet2 (make-bullet 67 45))
 > (define bullet3 (make-bullet 174 100))
 > (define bullet4 (make-bullet 23 123))
 > (define bullet5 (make-bullet 179 92))
 >
 > ;Definition
 > ;a list-of-bullets are either
 > ;empty
 > ; or
 > ;(cons item list-of-bullets)
 > ;Examples:
 > (define LISTA (list bullet1 bullet2 bullet3 bullet4 bullet5))
 >
 > ;A world is a structure
 > ;(make-world list-of-bullets tank UFO)
 > (define-struct world (LISTA tank UFO))
 >
 > ;examples
 > (make-world LISTA (make-tank 12 BOTTOM) (make-UFO 345 10 UFO-SPEED))
 > (make-world LISTA (make-tank 18 BOTTOM) (make-UFO 245 9 UFO-SPEED))
 > (make-world LISTA (make-tank 242 BOTTOM) (make-UFO 445 20 UFO-SPEED))
 >
 > ;Template
 > ; (define (world-func aworld)
 > ;       (... (UFO-x (world-UFO aworld))
 > ;        ... (UFO-y (world-UFO aworld))
 > ;        ... (UFO-y-speed (world-UFO aworld)
 > ;        ... (tank-x (world-tank aworld)
 > ;        ... (tank-y (world-tank aworld)
 > ;        ... (bullet-y (world-bullet aworld)
 > ;        ... (bullet-x (world-bullet aworld)
 > ;        ... (bullet-y-speed (world-bullet aworld)))))))))
 >
 >
 >
 > ;contract: tank-create: number tank -> tank
 > ;purpose: given a number, n, and an object, produce a tank that is  
 > n pixels to the right of the canvas'
 > ;         left margin
 > ;examples:(tank-create 5 (make-tank 12 590)) should produce (make- 
 > tank 205 590))
 > ;         (tank-create 17 (make-tank 30 590)) should produce (make- 
 > tank 217 590))
 > (define (tank-create n atank)
 >   (make-tank (+ WIDTH n) BOTTOM))
 >
 > ;test cases
 > (check-expect (tank-create 5 (make-tank 12 590)) (make-tank 205 590))
 > (check-expect (tank-create 17(make-tank 30 590)) (make-tank 217 590))
 > (check-expect (tank-create 0 (make-tank 20 590)) (make-tank 200 590))
 >
 > ;contract: tank-move : tank KeyEvent -> tank
 > ;puprose: given a tank and a KeyEvent produce a tank that moved to  
 > the left or right by
 > ;         (3) pixels, if the player has pressed the left or right  
 > arrow key; otherwise returns
 > ;         the tank
 > ;examples: (tank-move (make-tank 92 590) 'right) should produce  
 > (make-tank 95 590)
 > ;          (tank-move (make-tank 59 590) 'left) should produce  
 > (make-tank 56 590)
 > (define (tank-move atank key)
 >   (cond [(symbol? key)
 >          (cond [(symbol=? key 'left)
 >                 (make-tank (- (tank-x atank) TANK-SPEED)
 >                            (tank-y atank))]
 >                [(symbol=? key 'right)
 >                 (make-tank (+ (tank-x atank) TANK-SPEED)
 >                            (tank-y atank))]
 >                [else atank])]
 >         [else atank]))
 >
 > ;;test-cases
 > (check-expect (tank-move (make-tank 92 BOTTOM) 'right) (make-tank  
 > 99 BOTTOM))
 > (check-expect (tank-move (make-tank 59 BOTTOM) 'left) (make-tank 52  
 > BOTTOM))
 > (check-expect (tank-move (make-tank 2 BOTTOM) 'right) (make-tank 9  
 > BOTTOM))
 > (check-expect (tank-move (make-tank 3 BOTTOM) 'mmm) (make-tank 3  
 > BOTTOM))
 > (check-expect (tank-move (make-tank 100 BOTTOM) #\a) (make-tank 100  
 > BOTTOM))
 >
 > ;contract: create-UFO: number ufo -> UFO
 > ;purpose: consumes a number, n, and produces a UFO whose anchor  
 > point is 11 pixels from the top
 > ;         of the canvas and n pixels to the right of the canvas orign.
 > ;examples: (create-UFO 5 (make-UFO 187 343 3 4)) should produce  
 > (make-UFO 184 339 3 4)
 > ;          (create-UFO 19 (make-UFO 26 576 5 3)) should produce  
 > (make-UFO 23 572 5 3)
 > (define (create-UFO n aUFO)
 >   (make-UFO (+ WIDTH n) TOP UFO-SPEED))
 >
 > ;test cases
 > (check-expect (create-UFO 5 (make-UFO 12 TOP UFO-SPEED)) (make-UFO  
 > 205 TOP UFO-SPEED))
 > (check-expect (create-UFO 17(make-UFO 30 TOP UFO-SPEED)) (make-UFO  
 > 217 TOP UFO-SPEED))
 > (check-expect (create-UFO 0 (make-UFO 20 TOP UFO-SPEED)) (make-UFO  
 > 200 TOP UFO-SPEED))
 >
 > ;contract: new-scene: world ->image
 > ;purpose: to consume a world and produce an image of the the UFO,  
 > and tank in the world
 > ;         in its given position on the canvas
 > ;examples: (new-scene (make-world LISTA (make-tank 12) (make-UFO  
 > 345 10 4
 > ;          UFO-y-speed)))
 > ;          "should produce a canvas (200x600) with a tank at 12,590  
 > and a UFO 345,10
 > ;          (new-scene (make-world LISTA (make-tank 18) (make-UFO  
 > 245 9 6
 > ;          UFO-y-speed)))
 > ;          "should produce a canvas (200x600) with a tank at 18,590  
 > and a UFO 245,9
 > ; (define (new-scene aworld)
 > ;   (place-image tank-image
 > ;         (tank-x (world-tank aworld)) BOTTOM
 > ;   (place-image bullet-image
 > ;         (bullet-x (world-bullet aworld))
 > ;         (bullet-y (world-bullet aworld))
 > ;   (place-image UFO-image
 > ;         (UFO-x (world-UFO aworld))
 > ;         (UFO-y (world-UFO aworld))
 > ;   (draw-bullets
 > ;         ((empty-scene WIDTH HEIGHT)))))
 > ;
 > ; ;test cases
 > ; (new-scene (make-world LISTA (make-tank 12) (make-UFO 345 10 4  
 > UFO-SPEED)))
 > ; "should produce a canvas (200x600) with a tank at 12,590 and a  
 > UFO 345,10"
 > ; (new-scene (make-world LISTA (make-tank 18) (make-UFO 245 9 6 UFO- 
 > SPEED)))
 > ; "should produce a canvas (200x600) with a tank at 18,590 and a  
 > UFO 245,9"
 > ; (new-scene (make-world LISTA (make-tank 29) (make-UFO 550 44 3  
 > UFO-SPEED)))
 > ; "should produce a canvas (200x600) with a tank at 29,590 and a  
 > UFO 550,44"
 >
 >
 > ;contract: draw-bullets: list-of-bullets -> image
 > ;purpose: Given a list-of-bullets, recursively produce an image of  
 > bullets.
 > ;examples: (draw-bullets (list-of-bullets)) should produce an image  
 > of bullets.
 > (define (draw-bullets alob)
 >   (cond [(empty? empty-scene WIDTH HEIGHT) alob]
 >         [(cons? alob) (place-image bullet-image (bullet-x bullet1)  
 > (bullet-y bullet1) (draw-bullets (rest alob)))]))
 >
 >
 > ;contract: update-world: world->world
 > ;purpose: update the world with a list of bullets, tank and UFO on  
 > each tick of the clock.
 > ;examples: (update-world (make-world LISTA (make-tank 12) (make-UFO  
 > 345 10 4
 > ;          UFO-y-speed)) should produce (make-world LISTA (make- 
 > tank 12) (make-UFO 145 10 4
 > ;          UFO-y-speed))
 > ;          (update-world (make-world LISTA (make-tank 18) (make-UFO  
 > 245 9 6
 > ;          UFO-y-speed)) should produce (make-world LISTA (make- 
 > tank 18) (make-UFO 232 9 6
 > ;          UFO-y-speed))
 >
 > ;contract: update-world-keyevent: world KeyEvent -> world
 > ;purpose: given the current world and a key event, update the  
 > world, which means move the tank
 > ;         in the world based on the key event, and shoot a bullet  
 > on a specific key event. The UFO will remain unchanged.
 > ;examples:(update-world-keyevent (make-world LISTA (make-tank 12  
 > 590) (make-UFO 345 10 4
 > ;         UFO-y-speed))'right) should produce (make-world LISTA  
 > (make-tank 15 590)(make-UFO 345 10 4
 > ;         UFO-y-speed))
 > ;         (update-world-keyevent (make-world LISTA (make-tank 18  
 > 590) (make-UFO 245 9 6
 > ;         UFO-y-speed)) 'left) should produce (make-world LISTA  
 > (make-tank 16 590) (make-UFO 245 9 6
 > ;         UFO-y-speed))
 > (define (update-world-keyevent aworld ke)
 >   (make-world (world-LISTA aworld)
 >               (tank-move (world-tank aworld) ke)
 >               (world-UFO aworld)))
 >
 > ;contract: UFO-at-left?: UFO -> boolean
 > ;purpose: returns true if the UFO is touching the left of the  
 > screen, false if not.
 > ;examples: (UFO-at-left? (make-UFO 220 500 3 2))) should produce false
 > ;          (UFO-at-left? (make-UFO 10 300 1 7))) should produce true
 > (define (UFO-at-left? aUFO)
 >   (<= (- (UFO-x aUFO) UFO-SIZE) 0))
 >
 > ;test cases
 > (check-expect (UFO-at-left? (make-UFO 210 500 3)) false)
 > (check-expect (UFO-at-left? (make-UFO 0 300 1)) true)
 >
 > ;contract: UFO-at-right?: UFO  -> boolean
 > ;purpose: returns true if the UFO is completely off the left of the  
 > screen, false if not.
 > ;examples: (UFO-at-right? (make-UFO 200 300 3 2))) should produce  
 > false
 > ;          (UFO-at-right? (make-UFO 400 100 1 7))) should produce true
 > (define (UFO-at-right? aUFO)
 >   (>= (- (UFO-x aUFO) (- WIDTH UFO-SIZE)) 0))
 >
 > ;test cases
 > (check-expect (UFO-at-right? (make-UFO 0 300 3)) false)
 > (check-expect (UFO-at-right? (make-UFO 400 100 1)) true)
 >
 > ;contract: UFO-at-bottom?: UFO -> boolean
 > ;purpose: returns true if the UFO is touching the BOTTOM of the  
 > screen, false if not.
 > ;examples: (UFO-at-bottom? (make-UFO 200 600 3 2))) should produce  
 > true
 > ;          (UFO-at-bottom? (make-UFO 120 100 1 7))) should produce  
 > false
 > (define (UFO-at-bottom? aUFO)
 >   (>= (- (UFO-y aUFO) (- HEIGHT UFO-SIZE)) 0))
 >
 > ;test cases
 > (check-expect (UFO-at-bottom? (make-UFO 200 600 3)) true)
 > (check-expect (UFO-at-bottom? (make-UFO 120 100 1)) false)
 >
 > ;contract: UFO-move: UFO -> UFO
 > ;purpose: given a UFO, move the UFOs x-position and y-position
 > ;examples: (UFO-move (make-UFO 200 300 3 2))should produce (make- 
 > UFO 194 297 3 2)
 > ;          (UFO-move (make-UFO 0 500 3 2))should produce (make-UFO  
 > 10 497 3 2)
 > (define (UFO-move aUFO)
 >   (make-UFO (- WIDTH (- (random 11) 5)) (- HEIGHT 4) UFO-SPEED))
 >
 > ;test cases
 > (UFO-move (make-UFO 187 343 UFO-SPEED)) "should produce (make-UFO  
 > 184 339 UFO-SPEED)) with a random x-position"
 > (UFO-move (make-UFO 26 576 UFO-SPEED)) "should produce (make-UFO 23  
 > 572 UFO-SPEED)) with a random x-position"
 > (UFO-move (make-UFO 21 572 UFO-SPEED)) "should produce  (make-UFO  
 > 17 572 UFO-SPEED))with a random x-position"
 >
 >
 > ;Helper function
 > ;contract: collide?: list-of-bullets (alob), UFO -> boolean.
 > ;purpose: Given a list-of-bullets and a UFO determine if any of  
 > them collide with the tank.
 > ;examples
 >
 > ; (define (collide? alob)
 > ; (cond [(empty? (a-list-of-bullets alob)) empty]
 > ;         [(and (<= (- (bullet-x-position (first (world-list-of- 
 > bullet aworld))) (tank-x (world-tank aworld))) 40)
 > ;               (>= (- (bullet-x-position (first (world-list-of- 
 > bullet aworld))) (tank-x (world-tank aworld))) 0)
 > ;               (<= (- TANK-Y (bullet-y-position (first (world-list- 
 > of-bullets aworld)))) 10))
 > ;          (cons true (collide? (make-world (rest (world-list-of- 
 > bullets aworld)) (world-tank aworld))))]
 > ;         [else (cons false (collide? (make-world (rest (world-list- 
 > of-bullets aworld)) (world-tank aworld))))]))
 >
 >
 > ;2nd helper function
 > ;Contract: collide2?: bullet, UFO -> boolean
 > ;Purpose: Given a bullet and a UFO, determine whether the bullet of  
 > the UFO collide together
 > ;Examples: (check-expect (collide? (make-world (make-bullet 5 590 2  
 > 1) (make-tank 5))) true)
 > ;(check-expect (collide? (make-world (make-bullet 5 590 2 1) (make- 
 > tank 5))) true)
 >
 > (define (collide? aworld)
 >   (and (<= (- (bullet-y (world-bullet aworld))
 >   (tank-x (world-tank aworld))) 40)
 >   (<= (- TANK-Y (bullet-y (world-bullet aworld))) 10)))
 >
 > ;testcases
 > (check-expect (collide? (make-world (make-bullet 5 590 2 1) (make- 
 > tank 5))) true)
 > (check-expect (collide? (make-world (make-bullet 5 590 2 1) (make- 
 > tank 5))) true)
 > (check-expect (collide? (make-world (make-bullet 5 590 2 1) (make- 
 > tank 5))) true)
 >
 >
 > ;contract: collide?: helper->boolean
 > ;purpose: given a world, determine if the UFO and the bullets collide
 > ;examples: (collide? (make-world (make-bullet 174 10 5) (make-tank 12)
 > ;          should produce false
 > ;          (collide? (make-world (make-bullet 100 200 10) (make- 
 > tank 18)
 > ;          should produce true
 >
 > ; collide? will have to call a helper function that takes a list-of- 
 > bullets and a ufo as
 > ; input. That function will be recursive and check if any bullet in  
 > the list collides with
 > ; the ufo You will then need a 2nd helper function to test if a  
 > single bullet and the ufo collides
 > ; Your recursive function will call the 2nd helper function.
 >
 >
 >
 > ;contract: bullet-move: bullet->bullet
 > ;purpose: update bullet by moving the bullet up by 5 pixels in the  
 > y direction.
 > ;examples: (bullet-move (make-bullet 150 10)) should produce (make- 
 > bullet 150 15)
 > ;          (bullet-move (make-bullet 67 45)) should produce (make- 
 > bullet 67 50)
 > (define (bullet-move bullet)
 >   (bullet-move (make-bullet (bullet-x bullet) (- HEIGHT 5))))
 >
 > ;testcases
 > (check-expect (bullet-move (make-bullet 150 10)) (make-bullet 150 5))
 > (check-expect (bullet-move (make-bullet 67 45)) (make-bullet 67 40))
 > (check-expect (bullet-move (make-bullet 174 100)) (make-bullet 174  
 > 95))
 >
 > ;Contract: move-all-bullets: list-of-bullets -> bullet-move
 > ;Purpose: Given a list of bullets move each bullet in the list
 > ;Example: (move-all-bullets (list-of-bullets))
 >
 >
 > ;contract: end-game?: world->boolean
 > ;purpose: to determine when to end the game, when the UFO reaches a  
 > position of 590 of the screen or if the UFO and any bullet collide.
 > ;examples: (end-game? (make-world (LISTA) (make-tank 12 BOTTOM)))  
 > "should produce
 > ;          true when the game ends"
 > ;          (end-game? (make-world (LISTA) (make-tank 70 BOTTOM)))  
 > "should produce
 > ;          true when the game ends"
 >
 > ;contract: start-game: world-> world
 > ;purpose: take a set of functions and put them together to create a  
 > UFO tank game.
 > ;examples: (start-game (make-world (LISTA) (make-tank 12 590) (make- 
 > UFO 345 10 4 UFO-y-speed))
 > ;          should produce a UFO game with 5 bullets and a tank at  
 > the bottom of the canvas
 > ;          (start-game (make-world (LISTA) (make-tank 18 590) (make- 
 > UFO 245 9 6 UFO-y-speed))
 > ;          should produce a UFO game with 5 bullets and a tank at  
 > the bottom of the canvas
 > ; (define (start-game aworld)
 > ;   (and (big-bang WIDTH HEIGHT .001 aworld)
 > ;        (on-redraw new-scene)
 > ;        (on-tick-event update-world)
 > ;        (on-key-event update-world-keyevent)))
 > ;        (stop-when end-game?)))
 > ;
 >
 > ;testcases
 >
 > *** Environment:
 > windows "Windows NT 5.1 (Build 2600) Service Pack 3" (win32\i386 
 > \3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 111648320
 >
 > Collections:
 > (("C:\\Documents and Settings\\alevis\\Application Data\\PLT Scheme\ 
 > \4.0.2\\collects" non-existent-path) ("C:\\Program Files\\PLT\ 
 > \collects" "afm" "algol60" "browser" "combinator-parser" "compiler"  
 > "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl"  
 > "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics"  
 > "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons"  
 > "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make"  
 > "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"  
 > "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs"  
 > "readline" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup"  
 > "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants"  
 > "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery"  
 > "test-engine" "tex2page" "texpict" "trace" "typed-scheme" "version"  
 > "web-server" "wxme" "xml"))
 > Computer Language: (("Teaching Languages" "How to Design Programs"  
 > "Beginning Student with List Abbreviations") (#(#t constructor  
 > repeating-decimal #f #t none) #f ((lib "draw.ss" "teachpack"  
 > "htdp") (lib "image.ss" "teachpack" "htdp") (lib "testing.ss"  
 > "teachpack" "htdp") (lib "world.ss" "teachpack" "htdp"))))
 >
 


Responsible changed from "matthias" to "mflatt" by matthias at Wed, 20 May 2009 10:28:29 -0400
Reason>>> this kind of error message is matthew's 

