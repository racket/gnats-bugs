From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Mar 20 13:07:03 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p2KH70ti012267
	for <bugs@bugs.plt-scheme.org>; Sun, 20 Mar 2011 13:07:00 -0400
Message-Id: <201103201706.p2KH6uqE012255@champlain.ccs.neu.edu>
Date: Sun, 20 Mar 2011 13:06:56 -0400
From: ibarland@radford.edu
To: bugs@racket-lang.org
Subject: check-within for +inf.0

>Number:         11814
>Category:       htdp
>Synopsis:       check-within for +inf.0
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Mar 20 13:08:01 -0400 2011
>Last-Modified:  Wed Jan 11 11:16:37 -0500 2017
>Originator:     Ian Barland
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1
>Environment:
macosx "Darwin ITEC-MB-E9614.local 10.6.0 Darwin Kernel Version 10.6.0: Wed Nov 10 18:13:17 PST 2010; root:xnu-1504.9.26~3/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 248988752

Collections:
("/Users/ibarland/Library/Racket/5.1/collects"
 ("Ian" "ibarland"))
("/Applications/Racket v5.1/collects"
 ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t constructor repeating-decimal-e #f #t test-coverage) (default) #() "#lang racket\n" #f #t))
>Description:
When a test's expected-result is +inf.0, it'd be nice to have a way to test for that; currently check-expect and check-within both fail.

Proposal:
If the `within` tolerance is +inf.0, then check-within passes
(as long as there aren't NaN's involved).


Right now,
  (check-within  +inf.0  +inf.0  5) ; fails (correctly, arguably)
even though
  (<=  (- +inf.0 5)  +inf.0  (+ +inf.0 5))
I presume this behavior is because an intermediate result is (- +inf.0 +inf.0).
BUT this leads to the non-intuitive result:
   (check-within +inf.0 +inf.0 +inf.0) ; fails
   (check-within +inf.0 -inf.0 +inf.0) ; passes!
I'll call that a bug -- they should either both pass or both fail.


[Aside: yeah, there might always be unexpected behaviors due to round-off:
  (define BIG #i1e308)

  ; Doesn't pass (and probably shouldn't): 
  (check-within (* 2 BIG) BIG BIG)

  ; But by my proposal this would pass (and probably shouldn't):
  (check-within BIG (- BIG) (* 1.8 BIG)) 

Perhaps nothing needs to be changed at all, and the lesson is that since the tolerance is inexact, then caveat emptor?
... but at the end of the day I still think there should be some way to expect infinity, directly using check-within.]
>How-To-Repeat:
(require test-engine/racket-tests)
(check-within +inf.0 +inf.0 +inf.0) ; fails
(check-within -inf.0 -inf.0 +inf.0) ; fails
(check-within +inf.0 -inf.0 +inf.0) ; passes!
; These should probably all fail, or all pass.
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "kathyg" by ryanc at Wed, 06 Apr 2011 08:47:25 -0400
Reason>>> testing


Responsible changed from "kathyg" to "mflatt" by mflatt at Wed, 11 Jan 2017 11:16:37 -0500
Reason>>> taking over Kathy's old reports

