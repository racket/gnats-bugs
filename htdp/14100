From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Oct 16 17:23:02 2013
Received: from mail-ob0-f175.google.com (mail-ob0-f175.google.com [209.85.214.175])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id r9GLMwEP006679
	for <bugs@bugs.plt-scheme.org>; Wed, 16 Oct 2013 17:22:58 -0400
Message-Id: <201310162122.r9GLMuWS006672@winooski.ccs.neu.edu>
Date: Wed, 16 Oct 2013 17:22:56 -0400
From: nr@cs.tufts.edu
To: bugs@racket-lang.org
Subject: `check-data` form for teaching languages

>Number:         14100
>Category:       htdp
>Synopsis:       `check-data` form for teaching languages
>Class:          change-request
>Responsible:    matthias
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Oct 16 17:24:01 -0400 2013
>Closed-Date:    Thu Oct 17 08:52:16 -0400 2013
>Last-Modified:  Mon Oct 21 08:12:02 -0400 2013
>Originator:     Norman Ramsey
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.6
>Environment:
unix "Linux labrador 3.2.0-4-686-pae #1 SMP Debian 3.2.46-1 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 157124208
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (#<path:/home/nr/.racket/5.3.6/pkgs/installed/handin>); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.6):
 Package[*=auto]    Checksum                                    Source
 handin             3c31daccf0f61bb06aa65e36d72acc0ef2f453da    (pnr handin)



Collections:
("/home/nr/.racket/5.3.6/collects"
 ("info-domain" "tufts-comp50-2013f"))
("/usr/local/lib/racket/collects"
 ("algol60" "scribble" "scriblib" "embedded-gui" "texpict" "r6rs" "at-exp" "graphics" "compatibility" "syntax" "version" "typed-racket" "rnrs" "datalog" "lazy" "net" "planet" "info-domain" "errortrace" "scheme" "profile" "ffi" "setup" "drscheme" "web-server" "typed" "2htdp" "data" "plot" "sgl" "test-engine" "mzlib" "picturing-programs" "htdp" "syntax-color" "teachpack" "help" "pkg" "realm" "math" "slideshow" "mzcom" "browser" "scribblings" "racket" "framework" "frtime" "wxme" "preprocessor" "parser-tools" "unstable" "eopl" "xrepl" "xml" "mred" "make" "icons" "dynext" "mysterx" "launcher" "images" "plai" "srfi" "games" "mrlib" "typed-scheme" "slatex" "stepper" "reader" "s-exp" "schemeunit" "mzscheme" "defaults" "future-visualizer" "lang" "readline" "openssl" "drracket" "raco" "html" "string-constants" "racklog" "file" "r5rs" "db" "json" "macro-debugger" "deinprogramm" "redex" "compiler" "config" "trace" "rackunit" "gui-debugger" "hierlist" "swindle" "tests"))

Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ((lib "image.rkt" "teachpack" "htdp") (lib "universe.rkt" "teachpack" "2htdp"))))
>Description:
I am spending a substantial amount of time explaining to my students the difference between data examples and functional examples.  DrRacket's Beginning Student Language has some special forms for functional examples, but not for data examples.  This difference is causing confusion among my students.  And because they can't write data examples *before* the relevant 'define-struct' forms, many of them routinely comment out *all* data examples.  I'm not happy because I am finding that data examples are at least as important as functional examples, and I'd like to see them on the same linguistic footing.

I think these issues could be addressed easily: I would like to propose a new form

  (check-data <expression>)

with the semantics that, like the other check-* forms, it is accumulated and carried to the end of the Definitions area, then evaluated after all definitions are in place.  The 'check-data' form succeeds if its expression is evaluated without error, and it would count as a test.

Having this form would put data examples on an equal footing with functional examples.  'Tis a consummation devoutly to be wished.

I am not sure if it would be useful to discuss this proposal on plt-edu, but in the end I decided just to file a change request.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: nr@cs.tufts.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14100: `check-data` form for teaching languages
Date: Wed, 16 Oct 2013 17:32:48 -0400

 I think you should be able to write 
 
   (check-data <DD> <expression>)
 
 where DD is a data definition and (the value of) <expression> is acclaimed to belong to DD. Otherwise what's there to check? For example, 
 
 ;; A LON is one of: 
 ;; -- empty 
 ;; -- (cons Number LON)
 
 (check-data 5)
 
 You'd really like to re-use these checked examples of data so you want 
 
 (check-data <DD> <identifier> <expression>)
 
 But now we realize we need a formal language for specifying data definitions, and we don't have that. So we should omit DD, which means we get 
 
 (check-data <identifier> <expression>) 
 
 And that means, we're really back to define. 
 
 So my data examples come like this from lecture 2: 
 
 (define-struct address (street city zip state))
 ;; Adress = (make-address ...)
 
 (define a1 (make-address ...))
 (define a2 (make-address ...))
 
 Did you try this? I am quite reluctant to provide a check-data feature w/o a formal language for specifying data types so that check-data actually checks that the thing students manufactured is a member of the specified collection. 
 
 
 
 
 
 
 On Oct 16, 2013, at 5:24 PM, nr@cs.tufts.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=14100
 > 
 > Reported by Norman Ramsey for release: 5.3.6
 > 
 > *** Description:
 > I am spending a substantial amount of time explaining to my students the difference between data examples and functional examples.  DrRacket's Beginning Student Language has some special forms for functional examples, but not for data examples.  This difference is causing confusion among my students.  And because they can't write data examples *before* the relevant 'define-struct' forms, many of them routinely comment out *all* data examples.  I'm not happy because I am finding that data examples are at least as important as functional examples, and I'd like to see them on the same linguistic footing.
 > 
 > I think these issues could be addressed easily: I would like to propose a new form
 > 
 >  (check-data <expression>)
 > 
 > with the semantics that, like the other check-* forms, it is accumulated and carried to the end of the Definitions area, then evaluated after all definitions are in place.  The 'check-data' form succeeds if its expression is evaluated without error, and it would count as a test.
 > 
 > Having this form would put data examples on an equal footing with functional examples.  'Tis a consummation devoutly to be wished.
 > 
 > I am not sure if it would be useful to discuss this proposal on plt-edu, but in the end I decided just to file a change request.
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > unix "Linux labrador 3.2.0-4-686-pae #1 SMP Debian 3.2.46-1 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 157124208
 > Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (#<path:/home/nr/.racket/5.3.6/pkgs/installed/handin>); (links #:user? #f #:root? #t) = ()
 > raco pkg (show):
 > Installation-wide:
 > [none]
 > User-specific, all-version:
 > [none]
 > User-specific, version-specific (5.3.6):
 > Package[*=auto]    Checksum                                    Source
 > handin             3c31daccf0f61bb06aa65e36d72acc0ef2f453da    (pnr handin)
 > 
 > 
 > 
 > Collections:
 > ("/home/nr/.racket/5.3.6/collects"
 > ("info-domain" "tufts-comp50-2013f"))
 > ("/usr/local/lib/racket/collects"
 > ("algol60" "scribble" "scriblib" "embedded-gui" "texpict" "r6rs" "at-exp" "graphics" "compatibility" "syntax" "version" "typed-racket" "rnrs" "datalog" "lazy" "net" "planet" "info-domain" "errortrace" "scheme" "profile" "ffi" "setup" "drscheme" "web-server" "typed" "2htdp" "data" "plot" "sgl" "test-engine" "mzlib" "picturing-programs" "htdp" "syntax-color" "teachpack" "help" "pkg" "realm" "math" "slideshow" "mzcom" "browser" "scribblings" "racket" "framework" "frtime" "wxme" "preprocessor" "parser-tools" "unstable" "eopl" "xrepl" "xml" "mred" "make" "icons" "dynext" "mysterx" "launcher" "images" "plai" "srfi" "games" "mrlib" "typed-scheme" "slatex" "stepper" "reader" "s-exp" "schemeunit" "mzscheme" "defaults" "future-visualizer" "lang" "readline" "openssl" "drracket" "raco" "html" "string-constants" "racklog" "file" "r5rs" "db" "json" "macro-debugger" "deinprogramm" "redex" "compiler" "config" "trace" "rackunit" "gui-debugger" "hierlist" "swindle" "tests"))
 > 
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ((lib "image.rkt" "teachpack" "htdp") (lib "universe.rkt" "teachpack" "2htdp"))))
 > 
 
 


State changed from "open" to "closed" by matthias at Thu, 17 Oct 2013 08:52:16 -0400
Reason>>> After sleeping on this for a night, I think my response nails it completely. 

From: Michael Sperber <sperber@deinprogramm.de>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: nr@cs.tufts.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14100: `check-data` form for teaching languages
Date: Sat, 19 Oct 2013 14:29:50 +0200

 Matthias Felleisen <matthias@ccs.neu.edu> writes:
 
 > Did you try this? I am quite reluctant to provide a check-data feature
 > w/o a formal language for specifying data types so that check-data
 > actually checks that the thing students manufactured is a member of
 > the specified collection.
 
 There is the language of contract signatures, which could be used for
 this ...
 
 -- 
 Regards,
 Mike
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Michael Sperber <sperber@deinprogramm.de>
Cc: nr@cs.tufts.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14100: `check-data` form for teaching languages
Date: Sat, 19 Oct 2013 09:01:41 -0400

 Signature checking is disabled in BSL but yes, I should have pointed
 you there. It was on my mind as I wrote the message but I forgot. Sorry. 
 
 
 On Oct 19, 2013, at 8:29 AM, Michael Sperber wrote:
 
 > 
 > Matthias Felleisen <matthias@ccs.neu.edu> writes:
 > 
 >> Did you try this? I am quite reluctant to provide a check-data feature
 >> w/o a formal language for specifying data types so that check-data
 >> actually checks that the thing students manufactured is a member of
 >> the specified collection.
 > 
 > There is the language of contract signatures, which could be used for
 > this ...
 > 
 > -- 
 > Regards,
 > Mike
 
From: Michael Sperber <sperber@deinprogramm.de>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: nr@cs.tufts.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14100: `check-data` form for teaching languages
Date: Sat, 19 Oct 2013 16:56:41 +0200

 Matthias Felleisen <matthias@ccs.neu.edu> writes:
 
 > Signature checking is disabled in BSL but yes, I should have pointed
 > you there. It was on my mind as I wrote the message but I forgot. Sorry. 
 
 So here's a crazy thought: Just enable it locally in `check-data'.
 Maybe that leads to a lightweight way to introduce the concept?
 
 -- 
 Regards,
 Mike
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Michael Sperber <sperber@deinprogramm.de>
Cc: nr@cs.tufts.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14100: `check-data` form for teaching languages
Date: Sat, 19 Oct 2013 11:04:47 -0400

 On Oct 19, 2013, at 10:56 AM, Michael Sperber wrote:
 
 > 
 > Matthias Felleisen <matthias@ccs.neu.edu> writes:
 > 
 >> Signature checking is disabled in BSL but yes, I should have pointed
 >> you there. It was on my mind as I wrote the message but I forgot. Sorry. 
 > 
 > So here's a crazy thought: Just enable it locally in `check-data'.
 > Maybe that leads to a lightweight way to introduce the concept?
 
 
 As my message explains, you need a formal language for specifying 
 data definitions to get this right. Let's say we define trees: 
 
 (struct branch (left right))
 (struct leaf (info))
 
 ;; A Tree is one of: 
 ;; -- (leaf Number)
 ;; -- (branch Tree Tree)
 
 (check-data t1 Tree (leaf 10))
 (check-data t2 Tree (branch (leaf 20) t1))
 (check-data t3 Tree (branch t2 t1))
 
 check-data can't locally enforce signatures: 
 -- We need the students to write down Tree formally. 
 -- And I believe we need to enable struct definitions to interoperate with that. 
 
 Now we get a whole slew of new error messages that we need to explain. 
 
 ;; --- 
 
 I have thought a lot about this. I know the world of types and logical assertions and contracts. But I also know that more than half (60%?) of our first-generation co-ops work with untyped scripting languages. Even the second generation is mostly confronted with these. The goal I have is to demonstrate that there is a mental discipline to cope with these languages (borrwed from logic and types) and that it can be done. It is a matter of training. 
 
 So to this day I want checked signatures in ISL and up and I am planning on having them in 3e. 
 
 -- Matthias
 
 
 
 
 
 
 
 
 
 
From: Michael Sperber <sperber@deinprogramm.de>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: nr@cs.tufts.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14100: `check-data` form for teaching languages
Date: Sun, 20 Oct 2013 13:57:11 +0200

 Matthias Felleisen <matthias@ccs.neu.edu> writes:
 
 > On Oct 19, 2013, at 10:56 AM, Michael Sperber wrote:
 >
 >> 
 >> Matthias Felleisen <matthias@ccs.neu.edu> writes:
 >> 
 >>> Signature checking is disabled in BSL but yes, I should have pointed
 >>> you there. It was on my mind as I wrote the message but I forgot. Sorry. 
 >> 
 >> So here's a crazy thought: Just enable it locally in `check-data'.
 >> Maybe that leads to a lightweight way to introduce the concept?
 >
 >
 > As my message explains, you need a formal language for specifying 
 > data definitions to get this right. Let's say we define trees: 
 >
 > (struct branch (left right))
 > (struct leaf (info))
 >
 > ;; A Tree is one of: 
 > ;; -- (leaf Number)
 > ;; -- (branch Tree Tree)
 >
 > (check-data t1 Tree (leaf 10))
 > (check-data t2 Tree (branch (leaf 20) t1))
 > (check-data t3 Tree (branch t2 t1))
 >
 > check-data can't locally enforce signatures: 
 > -- We need the students to write down Tree formally. 
 > -- And I believe we need to enable struct definitions to interoperate with that. 
 
 I'm getting lost somewhere here.  In the language of contract
 signatures, your definition of Tree is this:
 
 (mixed (leaf-of Number)
        (branch-of Tree Tree))
 
 So you could do this, for instance:
 
 (define Tree
   (signature 
     (mixed (leaf-of Number)
            (branch-of Tree Tree))))
 
 I'd argue this is worth writing down even if you won't be using it.  But
 you could also then do this:
 
 (check-data t1 Tree (leaf 10))
 
 -- 
 Regards,
 Mike
From: Norman Ramsey <nr@cs.tufts.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/14100: `check-data` form for teaching languages
Date: Sun, 20 Oct 2013 20:44:38 -0400

  > I think you should be able to write 
  > 
  >   (check-data <DD> <expression>)
  > 
  > where DD is a data definition and (the value of) <expression> is acclaimed
  > to belong to DD. 
 
 That sounds great, but it's way more ambitious than what I'm looking for.
 
 > Otherwise what's there to check? 
 
 I'll tell you what there is to check: *in the scope of all definitions
 in the file*, the expression evaluates without errors.
 
  > (check-data <identifier> <expression>) 
  > 
  > And that means, we're really back to define. 
 
 No, I failed to make my idea clear.  Perhaps an example will help:
 
   ; A *gps-posn* is a structure:
   ;   (make-gps number number)
   ;
   ; DATA EXAMPLES
   (check-data (make-gps 0 0))
 
   ; ...
   (define-struct gps (latitude longitude))
 
 My students are writing this code without check-data and then they
 think DrRacket hates them.  You can't write it with define.
 
  > So my data examples come like this from lecture 2: 
  > 
  > (define-struct address (street city zip state))
  > ;; Adress = (make-address ...)
  > 
  > (define a1 (make-address ...))
  > (define a2 (make-address ...))
  > 
  > Did you try this?
 
 I have surely failed to emphasize the possibilities of writing data
 examples using define.  In part because the define must follow every
 relevant define-struct.
 
  > I am quite reluctant to provide a check-data feature w/o a formal
  > language for specifying data types so that check-data actually
  > checks that the thing students manufactured is a member of the
  > specified collection.
 
 I won't try to overcome your reluctance.  (But doesn't the language of
 signatures and contracts include formal data description as a
 sublanguage?)
 
 
 What I'm really searching for is a way to put functional examples and
 data examples on the same footing, language-wise.   Right now I have
 too many students who try to write a data example, they get an error
 because things are in the wrong order, and their solution is to
 comment out the data example.  I would like to remove this failure
 mode, *without* the complexities of a formal, machine-checkable data
 description.  I'd be happy to call it something else besides
 'check-data'.
 
 
 Norman
From: Stephen Bloch <bloch@adelphi.edu>
To: Norman Ramsey <nr@cs.tufts.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        "bugs@racket-lang.org" <bugs@racket-lang.org>,
        "nobody@racket-lang.org" <nobody@racket-lang.org>,
        "bug-notification@racket-lang.org" <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14100: `check-data` form for teaching languages
Date: Mon, 21 Oct 2013 08:03:16 -0400

 Makes sense to me, Norman.  Yes, Matthias, it would be nice to also check that these expressions produce a value of the right type, but as already pointed out, that requires students to learn a whole new language of formal type definition.  I can't afford to do that in my "programming for non-majors" class.  There are surely lots of other teachers like Norman who would like students to write examples for data types in nearly the same way they write examples for functions, before they get to formal type definition (if they ever do).
 
 That said, I think a quick-and-dirty solution would be [UNTESTED CODE]
 
 (define-syntax-rule (check-data expr)
     (check-expect expr expr))
 
 Stephen Bloch
 sbloch@adelphi.edu
