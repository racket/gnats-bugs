From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Nov 28 15:30:53 2010
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id oASKUoxi006625
	for <bugs@bugs.plt-scheme.org>; Sun, 28 Nov 2010 15:30:50 -0500
Message-Id: <201011282030.oASKUlpf006617@champlain.ccs.neu.edu>
Date: Sun, 28 Nov 2010 15:30:47 -0500
From: gregor@cs.ubc.ca
To: bugs@racket-lang.org
Subject: check-true check-that check-assert

>Number:         11470
>Category:       htdp
>Synopsis:       check-true check-that check-assert
>Class:          change-request
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Nov 28 15:32:01 -0500 2010
>Last-Modified:  Wed Jan 11 11:16:30 -0500 2017
>Originator:     Gregor Kiczales
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1
>Environment:
macosx "Darwin Gregor-Kiczaless-MacBook-Pro-2.local 10.5.0 Darwin Kernel Version 10.5.0: Fri Nov  5 23:20:39 PDT 2010; root:xnu-1504.9.17~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 389143936

Collections:
(("/Users/gregorkiczales/Library/Racket/5.0.1/collects" "cpsc110-handin" "cpsc110-shared-buffer" "info-domain" "installed-teachpacks") ("/Applications/Racket v5.0.1/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "tr!
 ace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Advanced Student") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
It would be nice to have a check macro in the line of check-expect... that has one argument that should be true. Doing tests in the presence of mutation I find myself writing (check (begin ... (and ...)) true) a lot.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: gregor@cs.ubc.ca, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11470: check-true check-that check-assert
Date: Sun, 28 Nov 2010 15:38:02 -0500

 +1
 
 Even before state, this would be useful when using test oracles:
 
 (check-true (some-predicate input (f input)))
 
 Eg,
 
 http://www.cs.brown.edu/courses/cs019/2010/assignments/oracle
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: gregor@cs.ubc.ca, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11470: check-true check-that check-assert
Date: Sun, 28 Nov 2010 15:49:05 -0500

 Gregor: for effects, I'd recommend using a different style, something =
 akin to=20
 
  (check-expect (observer (mutator obj v))  w)
 
 (when mutators return the object to be mutated) or possibly=20
 
  (check-expect (begin (mutator obj v ...) (list (observer-1 obj) =
 (observer-2 obj)))
                (list w-1 w-2))
 
 if I wish to make more than one observation.=20
 
 
 ;; ---=20
 
 Kathy: I'd really like to see an implementation of some of your ideas =
 from ESOP '09 in the test-engine. It may allow students to check for =
 frameconditions, too. I mention them in HtD but I fail to set up tests =
 for them.=20
 
 ;; ---=20
 
 
 Shriram: I would have expected you to ask for (check-expect/predicate (f =
 x) y binary-predicate?)=20
 
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: gregor@cs.ubc.ca, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11470: check-true check-that check-assert
Date: Sun, 28 Nov 2010 15:51:29 -0500

 > Shriram: I would have expected you to ask for (check-expect/predicate (f x) y binary-predicate?)
 
 That's be great for *me*, but I think it'd be complicated for my
 students.  Recall that I do my oracle assignment early in the
 semester, even before they've seen HOFs, because I want them to be
 able to use the idea in almost all subsequent assignments.
 
 Shriram
From: Gregor Kiczales <gregor@cs.ubc.ca>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11470: check-true check-that check-assert
Date: Sun, 28 Nov 2010 13:13:42 -0800

 I thought of check w/ predicate, but its got the problem Shriram says.
 
 
 On 2010-11-28, at 12:51 PM, Shriram Krishnamurthi wrote:
 
 >> Shriram: I would have expected you to ask for (check-expect/predicate =
 (f x) y binary-predicate?)
 >=20
 > That's be great for *me*, but I think it'd be complicated for my
 > students.  Recall that I do my oracle assignment early in the
 > semester, even before they've seen HOFs, because I want them to be
 > able to use the idea in almost all subsequent assignments.
 >=20
 > Shriram
 >=20
 
From: Gregor Kiczales <gregor@cs.ubc.ca>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11470: check-true check-that check-assert
Date: Sun, 28 Nov 2010 13:17:43 -0800

 observers seem too heavyweight for a case like this but perhaps I'm =
 missing something?
 
 ;; -> void
 ;; always produces void
 ;; Effect: set all-balloons to list of 10 random balloons, =
 selected-balloon to false
 (check-expect (begin
                 (set! all-balloons     (void))
                 (set! selected-balloon (void))
                 (init)
                 (and (=3D (length all-balloons) 10)  ; test that 10=20
                      (ormap balloon? all-balloons) ; balloons made
                      (false? selected-balloon)))
               true)
 
 (define (init)
   (begin
     (set! all-balloons=20
           (build-list 10 (lambda (n)                       =20
                            (make-balloon (random SIZE)
                                          (random SIZE)
                                          0=20
                                          0=20
                                          (random-color)))))
     (set! selected-balloon false)))
 
 On 2010-11-28, at 12:49 PM, Matthias Felleisen wrote:
 
 >=20
 >=20
 > Gregor: for effects, I'd recommend using a different style, something =
 akin to=20
 >=20
 > (check-expect (observer (mutator obj v))  w)
 >=20
 > (when mutators return the object to be mutated) or possibly=20
 >=20
 > (check-expect (begin (mutator obj v ...) (list (observer-1 obj) =
 (observer-2 obj)))
 >               (list w-1 w-2))
 >=20
 > if I wish to make more than one observation.=20
 >=20
 >=20
 > ;; ---=20
 >=20
 > Kathy: I'd really like to see an implementation of some of your ideas =
 from ESOP '09 in the test-engine. It may allow students to check for =
 frameconditions, too. I mention them in HtD but I fail to set up tests =
 for them.=20
 >=20
 > ;; ---=20
 >=20
 >=20
 > Shriram: I would have expected you to ask for (check-expect/predicate =
 (f x) y binary-predicate?)=20
 >=20
 
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Gregor Kiczales <gregor@cs.ubc.ca>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11470: check-true check-that check-assert
Date: Sun, 28 Nov 2010 16:29:47 -0500

 Here's the kind of thing we did (to test a hash table):
 
 (check-expect (and (equal? (in? 10) false)
                    (begin
                      (put! 10)
                      (equal? (in? 10) true))
                    (begin
                      (put! 10)
                      (equal? (in? 10) true))
                    (begin
                      (put! (+ 10 19))
                      (equal? (in? (+ 10 19)) true))
                    (not (equal? (in? 10) false))
                    (not (equal? (in? (+ 10 19)) false)))
               true)
 
 In this particular (probably extreme) example, the true at the end is
 gratuitous, but the rest is pretty much as I'd expect it to be.
 
 Shriram
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Gregor Kiczales <gregor@cs.ubc.ca>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11470: check-true check-that check-assert
Date: Sun, 28 Nov 2010 16:59:48 -0500

 I would write it like the program below. If any of the three conditions =
 fails, I know which one. I call 'length' and 'ormap balloon? selectors =
 -- Matthias
 
 
 
 
 (define-struct balloon (w h x y c))
 ;; Balloon =3D (balloon N N N N CS)
 
 (define SIZE 10)
 
 ;; [Listof Balloon]
 (define all-balloons '())
 
 ;; Natural=20
 ;; the balloon selected for execution=20
 (define selected-balloon #false)
 
 ; -> void
 ;; always produces void
 ;; Effect: set all-balloons to list of 10 random balloons, =
 selected-balloon to false
 
 (check-expect=20
  (begin
    (init)
    (list (length all-balloons) (ormap balloon? all-balloons) =
 selected-balloon))
  (list 10 true false))
 
 (define (init)
   (begin
     (set! all-balloons=20
           (build-list 10 (lambda (n)                       =20
                            (make-balloon (random SIZE)
                                          (random SIZE)
                                          0=20
                                          0=20
                                          "yellow"))))
     (set! selected-balloon false)))=
From: Gregor Kiczales <gregor@cs.ubc.ca>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Shriram Krishnamurthi <sk@cs.brown.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11470: check-true check-that check-assert
Date: Sun, 28 Nov 2010 14:55:19 -0800

 That's nice.  I'll switch to that style.
 
 On 2010-11-28, at 1:59 PM, Matthias Felleisen wrote:
 
 >=20
 > I would write it like the program below. If any of the three =
 conditions fails, I know which one. I call 'length' and 'ormap balloon? =
 selectors -- Matthias
 >=20
 >=20
 >=20
 >=20
 > (define-struct balloon (w h x y c))
 > ;; Balloon =3D (balloon N N N N CS)
 >=20
 > (define SIZE 10)
 >=20
 > ;; [Listof Balloon]
 > (define all-balloons '())
 >=20
 > ;; Natural=20
 > ;; the balloon selected for execution=20
 > (define selected-balloon #false)
 >=20
 > ; -> void
 > ;; always produces void
 > ;; Effect: set all-balloons to list of 10 random balloons, =
 selected-balloon to false
 >=20
 > (check-expect=20
 > (begin
 >   (init)
 >   (list (length all-balloons) (ormap balloon? all-balloons) =
 selected-balloon))
 > (list 10 true false))
 >=20
 > (define (init)
 >  (begin
 >    (set! all-balloons=20
 >          (build-list 10 (lambda (n)                       =20
 >                           (make-balloon (random SIZE)
 >                                         (random SIZE)
 >                                         0=20
 >                                         0=20
 >                                         "yellow"))))
 >    (set! selected-balloon false)))
 


Responsible changed from "matthias" to "kathyg" by matthias at Wed, 08 Dec 2010 10:03:28 -0500
Reason>>> check-* are in Kathy's realm 


Responsible changed from "kathyg" to "mflatt" by mflatt at Wed, 11 Jan 2017 11:16:30 -0500
Reason>>> taking over Kathy's old reports

