From kfisler@cs.wpi.edu  Tue Mar  4 16:07:08 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id QAA16087
	for <bugs>; Tue, 4 Mar 2003 16:07:08 -0500
Message-Id: <200303042107.QAA16087@champlain.ccs.neu.edu>
Date: Tue, 4 Mar 2003 16:07:08 -0500
From: Kathi Fisler <kfisler@cs.wpi.edu>
To: bugs@plt-scheme.org
Subject: Bug in pingp.ss teachpack -- trace doesn't accept functions as args

>Number:         6139
>Category:       htdp
>Synopsis:       Bug in pingp.ss teachpack -- trace doesn't accept functions as args
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    matthias
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Mar 04 16:10:00 EST 2003
>Closed-Date:    Fri Mar 14 15:14:25 EST 2003
>Last-Modified:  Fri Mar 14 15:15:01 EST 2003
>Originator:     Kathi Fisler
>Release:        203
>Organization:
plt
>Environment:
windows "Windows NT 5.0 (Build 2195) Service Pack 3" (win32\i386)

Docs installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "icons" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")

Collections:
(("C:\\PROGRA~1\\PLT\\./collects/setup/..\\..\\collects\\mzlib\\..\\..\\collects" ("afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mzlib" "mzscheme" "net" "parser-tools" "setup" "slibinit" "stepper" "string-constants" "syntax" "test-suite" "tex2page" "texpict" "version" "web-server" "xml")))

Human language: english
Computer language: ("How to Design Programs" "Beginning Student")

>Description:
Jane Whitehurst (TS teacher) sent me mail that her old lesson for pingpong isn't working.  It appears that trace, trace-ball, and play need to be redefined with the higher-order-primitive macro to allow functions as arguments.  I've provided a code snippet that reproduces the problem.  

I tried to fix it myself but ran into problems with the define-signature not catching the name defined by the define-higher-order-primitive macro.  I'm also concerned that her code uses a non-standard name for the actual parameter to trace (the doc.txt file in collects/lang suggests that this may cause a problem).  This one needs more expertise than I have with the new teachpacks.

I have Jane's complete original source file, should that become necessary.  She's at JWHITEHURST@wcpss.net.

Kathi 
>How-To-Repeat:
Beginning lang level, include teachpack pingp.ss.  Then execute the following code (problem occurs in last line):

(define-struct vec (x y))
(define-struct ball (posn vec))

;to produce a new vec scaled a certain number of times
;scale-vec: vec number -> vec
(define (scale-vec a-vec factor)
  (make-vec (* (vec-x a-vec) factor)
            (* (vec-y a-vec) factor)))

;to produce a new posn that is changed by a scaled velocity
;new-posn: posn vec number -> posn
(define (new-posn a-posn a-vec factor)
  (make-posn (+ (posn-x a-posn) (vec-x (scale-vec a-vec factor)))
             (+ (posn-y a-posn) (vec-y (scale-vec a-vec factor)))))

(trace (make-ball (make-posn 100 100) (make-vec 10 -5)) new-posn 55)

>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->matthias
Responsible-Changed-By: matthias
Responsible-Changed-When: Fri Mar 14 15:14:25 2003
Responsible-Changed-Why:
    .
State-Changed-From-To: open->closed
State-Changed-By: matthias
State-Changed-When: Fri Mar 14 15:14:25 2003
State-Changed-Why:
    Modified pingp and sent to user
    The teachpack is no longer a part of the distribution

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Kathi Fisler <kfisler@cs.wpi.edu>, JWHITEHURST@wcpss.net
Cc: bugs@plt-scheme.org
Subject: Re: all/6139: Bug in pingp.ss teachpack -- trace doesn't accept functions as args
Date: Fri, 14 Mar 2003 15:12:53 -0500

 This is a multi-part message in MIME format.
 -----37714514088-----
 Content-Type: text/plain; charset=us-ascii
 Content-Transfer-Encoding: 7bit
 
 
 Sorry, it took me a while to get around to this one after Germany. 
 But the good news is that it took only 15 mins. 
 
 1. Jane, you need to know that I am phasing out the ping exercises
 as they stand. Since they didn't make the book, there is no real 
 demand. I will try to bring them up independently one day, like the
 Web exercises off my homepage. 
 
 2. I had to fix the call to trace. It takes four arguments according
 to the last published release: 
 
 (define-struct vec (x y))
 (define-struct ball (posn vec))
 
 ;to produce a new vec scaled a certain number of times
 ;scale-vec: vec number -> vec
 (define (scale-vec a-vec factor)
   (make-vec (* (vec-x a-vec) factor)
             (* (vec-y a-vec) factor)))
 
 ;to produce a new posn that is changed by a scaled velocity
 ;new-posn: posn vec number -> posn
 (define (new-posn a-posn a-vec factor)
   (make-posn (+ (posn-x a-posn) (vec-x (scale-vec a-vec factor)))
              (+ (posn-y a-posn) (vec-y (scale-vec a-vec factor)))))
 
 ;; fixed this call: MF
 (trace (make-posn 100 100) (make-vec 10 -5) new-posn 55)
 
 3. The attachment is the fixed teachpack. Please replace the existing
 pingp.ss teachpack with this new file. I have tested the code and it 
 works fine with your stuff. 
 
 Hope things are going okay in South Carolina. 
 
 -- Matthias
 
 
 
 -----37714514088-----
 Content-Type: text/plain;
 	name="pingp.ss"
 Content-Transfer-Encoding: quoted-printable
 
 #cs(module pingp mzscheme
      (require  (lib "unitsig.ss")
                (lib "error.ss" "htdp")
                (lib "pingp-sig.ss" "htdp")
                (lib "big-draw.ss" "htdp")
                (lib "prim.ss" "lang")
 	       (lib "posn.ss" "lang"))
 =20=20=20=20=20
      (provide pingpU)
 =20=20=20=20=20
      (define-higher-order-primitive trace trace/proc (_ _ move _))
      (define-higher-order-primitive play play/proc (make-ball ball-posn bal=
 l-speed move-in-box))
      (define-higher-order-primitive protect protect/proc (_ move-balls ball=
 s-posns balls-destroyed))
 =20=20=20=20=20
      (provide=20
       play=20
       ; ((posn posn -> ball) (ball -> posn) (ball -> posn) (ball -> ball) -=
 > void)
 =20=20=20=20=20=20
       protect
       ; ((balls: (listof ball)
       ;  (move-balls : (listof ball) -> (listof posn))
       ;  (balls-posns :(listof ball) -> (listof ball))
       ;  (balls-destroyed : (listof ball) -> (listof ball))) -> void)
 =20=20=20=20=20=20
       trace
       ;; Posn S (Posn S -> Posn) Number -> true
       )
 =20=20=20=20=20
 =20=20=20=20=20
      (define pingpU
        (unit/sig pingpS
          (import)
 =20=20=20=20=20=20=20=20=20
          ;; Exported Functions
          ;; ------------------
 =20=20=20=20=20=20=20=20=20
          ;; trace : posn S (posn S num -> posn) num -> #t
          (define (trace pos speed f e)
            ; --- error checking: redo
            (check-arg  'trace (posn? pos) 'posn '1st pos)
            ; the second arg is polymorphic
            (check-proc 'trace f 3 '3rd "3 arguments")
            (check-arg  'trace (and (number? e) (> e 0)) "positive number" '=
 4th e)
            ; ---=20
            (TT (make-bb pos speed)
                bb-p
                (lambda (b t) (let ((s (bb-s b))) (make-bb (f (bb-p b) s t) =
 s)))
                e))
 =20=20=20=20=20=20=20=20=20
          (define-struct bb (p s))
 =20=20=20=20=20=20=20=20=20
          ;; trace-ball : X (X -> posn) (X num -> X) number -> #t
          (define (trace-ball ball ball-posn f e)
            ; --- error checking
            ; the first arg is polymorphic
            (check-proc 'trace-ball ball-posn 1 '2nd "1 argument")
            (check-proc 'trace-ball f         2 '3rd "2 arguments")
            (check-arg  'trace-ball (and (number? e) (> e 0)) "positive numb=
 er" '4th e)
            ; ---
            (TT ball ball-posn f e))
 =20=20=20=20=20=20=20=20=20
          ;; play : (posn X -> B) (num num -> S) (B -> posn) (B num -> B) ->=
  #t
          (define (play make-ball make-speed ball-posn move)
            (check-proc 'play make-ball  2 '1st "2 arguments")
            (check-proc 'play make-speed 2 '2nd "2 arguments")
            (check-proc 'play ball-posn  1 '3rd "1 argument")
            (check-proc 'play move       2 '4th "2 arguments")
            (set-pad)
            (unset-trace)
            (play2 make-ball make-speed ball-posn move))
 =20=20=20=20=20=20=20=20=20
          ;; landed-on-paddle? : posn -> bool
          (define (%landed-on-paddle? x)
            (error 'landed-on-paddle? "can't happen"))
          (define (landed-on-paddle? aposn)
            (%landed-on-paddle? aposn))
 =20=20=20=20=20=20=20=20=20
          ;; change-speed : int[> 0] -> void
          (define (change-speed s)
            (check-arg 'change-speed (and (integer? s) (> s 0)) "positive in=
 teger" '1st s)
            (set! SLEEP (/ 10 s)))
 =20=20=20=20=20=20=20=20=20
          ;; change-wind : int[> 0] -> void
          (define (change-wind s)
            (check-arg 'change-wind (and (integer? s) (> s 0)) "positive int=
 eger" '1st s)
            (set! SWITCH s))
 =20=20=20=20=20=20=20=20=20
          ;    ;; change-width : int[> 200] -> void
          ;    (define (change-width s)
          ;      (check-arg 'change-width (and (integer? s) (> s 200)) "inte=
 ger [> 200]" '1st s)
          ;      (set! EAST s))
          ;
          ;    ;; change-height : int[> 200] -> void
          ;    (define (change-height s)
          ;      (check-arg 'change-height (and (integer? s) (> s 200)) "int=
 eger [> 200]" '1st s)
          ;      (set! SOUTH s))
 =20=20=20=20=20=20=20=20=20
          (define NORTH 0)
          (define SOUTH 400)
          (define WEST  0)
          (define EAST  400)
          (define FAR-WEST (* -1 EAST))
 =20=20=20=20=20=20=20=20=20
          ;; protect : (listof ball)
          ;;           ((listof ball) -> (listof ball))
          ;;           ((listof ball) -> (listof ball))
          ;;           ((listof ball) -> (listof ball))
          ;;           ((listof ball) -> (listof posn))
          ;;           -> void
          (define (protect objs move-objs remove-objs-hit-paddle remove-outs=
 ide-objs objs-posn)
            ; --- error checking
            (check-arg 'protect (list? objs) 'list        '1st objs)
            (check-proc 'protect move-objs              1 '2nd "1 argument")
            (check-proc 'protect remove-objs-hit-paddle 1 '3rd "1 argument")
            (check-proc 'protect remove-outside-objs    1 '4th "1 argument")
            (check-proc 'protect objs-posn              1 '5th "1 argument")
            ; ---=20
            (ready-to-go?)
            (let* ((objs#  (length objs))
                   (PAD_Y0 (- (quotient SOUTH 2) (quotient PAD_LENGTH 2)))
                   (west   (box (make-posn 0 0)));; fake: to reuse move-padd=
 le and make-landed
                   (east   (box (make-posn (- EAST (+ PAD_WIDTH PAD_DIST_WAL=
 L)) PAD_Y0))))
              (set! %landed-on-paddle? (make-landed-on-paddle east west))
              (draw-paddle (unbox east))
              ;; --- the loop
              (let PLAY ((ball0 objs) (p0 (objs-posn objs)) (hits 0))
                (if (null? ball0)
                    (cond
                      [(=3D hits 0) (printf "You didn't catch any balls.")]
                      [(=3D hits 1) (printf "You caught one ball. All others=
  hit the wall.")]
                      [else=20
                       (printf "You caught ~s balls, ~s hit the wall." hits =
 (- objs# hits))])
                    (begin
                      (for-each draw-ball p0)
                      (sleep SLEEP)
                      (for-each clear-ball p0)
                      (let* ((ball1 (move-objs ball0))
                             (ball2 (remove-objs-hit-paddle ball1))
                             (ball3 (remove-outside-objs ball2))
                             (p1    (objs-posn ball3)))
                        (move-paddle east west (ready-mouse-click (get-@VP))=
 )
                        (PLAY ball3 p1 (+ hits (- (length ball1) (length bal=
 l2))))))))
              ;; --- clean up
              (stop)))
 =20=20=20=20=20=20=20=20=20
          ;; Hidden Definitions
          ;; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 =20=20=20=20=20=20=20=20=20
          ;; Hidden Functions: Tracing and Playing
          ;; -------------------------------------
 =20=20=20=20=20=20=20=20=20
          ;; TT : X (X -> posn) (X -> X) num[n] -> #t
          ;; effect: trace X's movement for n steps on canvas
          (define (TT ball ball-posn f e)
            (start2 EAST SOUTH)
            (let dl ((ball0 ball) (s 1))
              (if (> s e) #t
                  (let ((ball1 (f ball0 1)))
                    (and
                     (draw-solid-disk (ball-posn ball1) 3 'red)
                     (draw-solid-line (ball-posn ball0) (ball-posn ball1))
                     (dl ball1 (+ s 1)))))))
 =20=20=20=20=20=20=20=20=20
          ;    (define (check s make-ball ball-posn move)
          ;      (check-proc s make-ball  2 '1st "2 arguments")
          ;      (check-proc s ball-posn  1 '2nd "1 argument")
          ;      (check-proc s move       2 '3rd "2 arguments"))
 =20=20=20=20=20=20=20=20=20
          (define (play2 make-ball make-speed ball-posn move)
            (ready-to-go?)
            (let* ((rn-10-10 (lambda ()
                               (let ((n (random 20)))
                                 (if (< n 10) (- n 10) (- n  9)))))
                   (posn0 (make-posn (quotient EAST 2) (quotient SOUTH 2)))
                   (PAD_Y0 (- (quotient SOUTH 2) (quotient PAD_LENGTH 2)))
                   (west (box (make-posn PAD_DIST_WALL                      =
   PAD_Y0)))
                   (east (box (make-posn (- EAST (+ PAD_WIDTH PAD_DIST_WALL)=
 ) PAD_Y0)))
                   (start-time (current-seconds)))
              (set! %landed-on-paddle? (make-landed-on-paddle east west))
              (draw-paddle (unbox west))
              (draw-paddle (unbox east))
              ;; --- the loop
              (let play ((ball0 (make-ball posn0 (make-speed (rn-10-10) (rn-=
 10-10)))) (p0 posn0) (i 1))
                (unless (or (< (posn-x p0) 0) (< EAST (posn-x p0)))
                  (draw-ball p0) (sleep SLEEP) (clear-ball p0)
                  (let* ((ball1 (move ball0 1)) (p1 (ball-posn ball1)))
                    (draw-solid-line p0 p1 TRACE-COLOR)
                    (move-paddle east west (ready-mouse-click (get-@VP)))
                    (if (zero? (modulo i SWITCH))
                        (play (make-ball p1 (make-speed (rn-10-10) (rn-10-10=
 ))) p1 1)
                        (play ball1 p1 (add1 i))))))
              ;; --- clean up
              (printf "You kept the ball in play for ~s seconds.\n" (- (curr=
 ent-seconds) start-time))
              (stop)))
 =20=20=20=20=20=20=20=20=20
          ;; move-paddle : (box posn) (box posn) (union #f mouse-click) -> v=
 oid
          ;; effect: modify the appropriate box, if mouse was clicked
          (define (move-paddle east west mc)
            (let ((new-posn (and mc (center-paddle (mouse-click-posn mc)))))
              (cond
                ((not new-posn) (void))
                ((in-west-zone? new-posn) (move-one-paddle west new-posn))
                ((in-east-zone? new-posn) (move-one-paddle east new-posn))))=
 )
 =20=20=20=20=20=20=20=20=20
          ;; move-one-paddle : (box posn) -> void
          ;; effect: modify the boxe, re-draw at appropriate place
          (define (move-one-paddle a-paddle a-posn)
            (clear-paddle (unbox a-paddle))
            (set-box! a-paddle (new-paddle (unbox a-paddle) (posn-y a-posn))=
 )
            (draw-paddle (unbox a-paddle)))
 =20=20=20=20=20=20=20=20=20
          ;; ready-to-go? : -> void
          ;; effect: set up window, make announcement, wait for user to star=
 t the game
          (define (ready-to-go?)
            (start2 EAST SOUTH)
            (draw-solid-rect   (make-posn (- (quotient EAST 2) 100) 10) 200 =
 20 BG-COLOR)
            ((draw-string (get-@VP)) (make-posn (- (quotient EAST 2)  65) 20=
 )
             "Click anywhere when ready!")
            (let loop () (unless (ready-mouse-click (get-@VP)) (loop)))
            (draw-solid-rect   (make-posn (- (quotient EAST 2) 100) 10) 200 =
 20 BG-COLOR))
 =20=20=20=20=20=20=20=20=20
          (define (start2 x y)
            (start x y)
            (draw-solid-rect (make-posn 0 0) EAST SOUTH BG-COLOR))
 =20=20=20=20=20=20=20=20=20
          ;; The Graphical Ball Representation
          ;; ---------------------------------
          (define BALL-RADIUS 5)
          (define (draw-ball p) (draw-solid-disk p BALL-RADIUS 'red))
          (define (clear-ball p) (draw-solid-disk p BALL-RADIUS 'white))
 =20=20=20=20=20=20=20=20=20
          ;(define (draw-ball p)
          ;  (set! draw-ball ((draw-pixmap-posn "Gifs/redball.gif") (get-@VP=
 )))
          ;  (draw-ball p))
          ;(define (clear-ball p)
          ;  (set! clear-ball ((clear-pixmap-posn "Gifs/redball.gif") (get-@=
 VP)))
          ;  (clear-ball p))
 =20=20=20=20=20=20=20=20=20
 =20=20=20=20=20=20=20=20=20
          ;; Global Properties (initialized by set-up!)
          ;; ------------------------------------------
 =20=20=20=20=20=20=20=20=20
          (define BG-COLOR   'green)
          (define BALL-COLOR 'red)
          (define PAD-COLOR  'blue)
          (define (set-pad)   (set! PAD-COLOR 'blue))=20
          (define (unset-pad) (set! PAD-COLOR 'white))=20
          (define TRACE-COLOR 'white)
          (define (set-trace) (set! TRACE-COLOR 'green))=20
          (define (unset-trace) (set! TRACE-COLOR 'white))=20
 =20=20=20=20=20=20=20=20=20
          (define SLEEP .15)
          (define SWITCH 10000)
          (define CENTER (quotient EAST 2))
          (define PADDLE-X EAST)
          (define PADDLE-Y (quotient SOUTH 2))
 =20=20=20=20=20=20=20=20=20
          ;; The Graphical Paddle Representation
          ;; ------------------------------------
          (define PAD_WIDTH  3)
          (define PAD_LENGTH 50)
          (define PAD_DIST_WALL  0)
 =20=20=20=20=20=20=20=20=20
          (define (draw-paddle paddle)=20
            (draw-solid-rect paddle PAD_WIDTH PAD_LENGTH PAD-COLOR))
          (define (clear-paddle paddle)
            (draw-solid-rect paddle PAD_WIDTH PAD_LENGTH BG-COLOR))
 =20=20=20=20=20=20=20=20=20
          ;; center-paddle : posn -> posn
          (define (center-paddle p)
            (make-posn (posn-x p) (- (posn-y p) (quotient PAD_LENGTH 2))))
 =20=20=20=20=20=20=20=20=20
          (define (new-paddle paddle new-y)
            (make-posn (posn-x paddle) new-y))
 =20=20=20=20=20=20=20=20=20
          (define (in-west-zone? p) (<=3D 0 (posn-x p) CENTER))
          (define (in-east-zone? p) (<=3D CENTER (posn-x p) EAST))
 =20=20=20=20=20=20=20=20=20
          ;; make-landed-on-paddle :
          ;;   (box posn) (box posn) -> ( ball -> boolean )
          ;; to set up landed on paddle=20
          (define (make-landed-on-paddle east west)
            (lambda (pball)
              (let ((y-pad (posn-y
                            (unbox
                             (cond
                               ((=3D EAST (posn-x pball)) east)
                               ((=3D WEST (posn-x pball)) west)
                               (else (error 'landed-on-paddle
                                            "this ball has not reached a wal=
 l: ~s" pball)))))))
                (<=3D y-pad (posn-y pball) (+ y-pad PAD_LENGTH)))))
 =20=20=20=20=20=20=20=20=20
          ;; landed-on-paddle : the paddles are initially in the middle of t=
 he
          ;; two walls
          (set! %landed-on-paddle?
                (make-landed-on-paddle
                 (box (make-posn
                       (- PAD_DIST_WALL WEST)
                       (- (quotient SOUTH 2) (quotient PAD_LENGTH 2))))
                 (box (make-posn
                       (- EAST (+ PAD_WIDTH PAD_DIST_WALL))
                       (- (quotient SOUTH 2) (quotient PAD_LENGTH 2))))))
 =20=20=20=20=20=20=20=20=20
          ))
 =20=20=20=20=20
      (define-values (trace/proc)
        (let ()
          (define-values/invoke-unit/sig pingpS pingpU)
          (values trace)))
      )
 =20=20=20
 -----37714514088-------
 
>Unformatted:

