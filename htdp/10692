From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jan 12 15:34:17 2010
Received: from mail-yw0-f199.google.com (mail-yw0-f199.google.com [209.85.211.199])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id o0CKYCXl019554
	for <bugs@bugs.plt-scheme.org>; Tue, 12 Jan 2010 15:34:12 -0500
Message-Id: <201001122034.o0CKYAO2019546@champlain.ccs.neu.edu>
Date: Tue, 12 Jan 2010 15:34:10 -0500
From: sbloch@adelphi.edu
To: bugs@plt-scheme.org
Subject: enforcement of scene-itude in world & universe

>Number:         10692
>Category:       htdp
>Synopsis:       enforcement of scene-itude in world & universe
>Class:          change-request
>Responsible:    matthias
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jan 12 15:36:01 -0500 2010
>Closed-Date:    Wed Jun 01 11:06:10 -0400 2011
>Last-Modified:  Wed Jun 01 11:06:10 -0400 2011
>Originator:     Stephen Bloch
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.3
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6
>Description:
In preparation for (a) the transition to 2htdp/image, which doesn't have pinholes, and (b) the completion of my textbook, which would rather not mention pinholes...

I propose that, ASAP, wherever the "world" and "universe" teachpacks expect a "scene", they actually accept ANY image, and _treat_ it as though its pinhole were at (0,0).

* place-image and scene+line would accept any image as the "background", and place the foreground image relative to the top-left corner of the background
* draw handlers and stop-when's "last-picture" callback would be allowed to return any image, and the results would be displayed as though their pinholes were at (0,0)

Any function that currently returns a Scene would return the same thing as it does now.

This shouldn't break any currently-legal world or universe animation, but would allow us to stop talking about scenes and pinholes, even before 2htdp/image is stable.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: sbloch@adelphi.edu, bugs@plt-scheme.org
Cc: Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10692: enforcement of scene-itude in world & 
	universe
Date: Tue, 12 Jan 2010 14:41:55 -0600

 I think that the easiest path for you to something like this is to
 distribute a modified version of plt scheme or to use your own
 teachpacks.
 
 I can't speak for Matthias, but I don't have time to do that,
 especially not with out a patch file to just look over, I'm sorry to
 say.
 
 Robby
 
 On Tue, Jan 12, 2010 at 2:36 PM,  <sbloch@adelphi.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10692
 >
 > Reported by Stephen Bloch for release: 4.2.3
 >
 > *** Description:
 > In preparation for (a) the transition to 2htdp/image, which doesn't have =
 pinholes, and (b) the completion of my textbook, which would rather not men=
 tion pinholes...
 >
 > I propose that, ASAP, wherever the "world" and "universe" teachpacks expe=
 ct a "scene", they actually accept ANY image, and _treat_ it as though its =
 pinhole were at (0,0).
 >
 > * place-image and scene+line would accept any image as the "background", =
 and place the foreground image relative to the top-left corner of the backg=
 round
 > * draw handlers and stop-when's "last-picture" callback would be allowed =
 to return any image, and the results would be displayed as though their pin=
 holes were at (0,0)
 >
 > Any function that currently returns a Scene would return the same thing a=
 s it does now.
 >
 > This shouldn't break any currently-legal world or universe animation, but=
  would allow us to stop talking about scenes and pinholes, even before 2htd=
 p/image is stable.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.=
 1.6) Gecko/20091201 Firefox/3.5.6
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: sbloch@adelphi.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10692: enforcement of scene-itude in world &  universe
Date: Tue, 12 Jan 2010 16:24:32 -0500

 I second this.
 
 Like DMdA (the German variant of HtDP), I would recommend that your  
 book rely on its own stable libraries. It's easily doable and can  
 share a lot with htdp/image and 2htdp/* (the stable parts).
 
 
 
 
 On Jan 12, 2010, at 3:41 PM, Robby Findler wrote:
 
 > I think that the easiest path for you to something like this is to
 > distribute a modified version of plt scheme or to use your own
 > teachpacks.
 >
 > I can't speak for Matthias, but I don't have time to do that,
 > especially not with out a patch file to just look over, I'm sorry to
 > say.
 >
 > Robby
 >
 > On Tue, Jan 12, 2010 at 2:36 PM,  <sbloch@adelphi.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=10692
 >>
 >> Reported by Stephen Bloch for release: 4.2.3
 >>
 >> *** Description:
 >> In preparation for (a) the transition to 2htdp/image, which doesn't  
 >> have pinholes, and (b) the completion of my textbook, which would  
 >> rather not mention pinholes...
 >>
 >> I propose that, ASAP, wherever the "world" and "universe"  
 >> teachpacks expect a "scene", they actually accept ANY image, and  
 >> _treat_ it as though its pinhole were at (0,0).
 >>
 >> * place-image and scene+line would accept any image as the  
 >> "background", and place the foreground image relative to the top- 
 >> left corner of the background
 >> * draw handlers and stop-when's "last-picture" callback would be  
 >> allowed to return any image, and the results would be displayed as  
 >> though their pinholes were at (0,0)
 >>
 >> Any function that currently returns a Scene would return the same  
 >> thing as it does now.
 >>
 >> This shouldn't break any currently-legal world or universe  
 >> animation, but would allow us to stop talking about scenes and  
 >> pinholes, even before 2htdp/image is stable.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US;  
 >> rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6
 >>
 >>
 
From: Stephen Bloch <sbloch@adelphi.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org, Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10692: enforcement of scene-itude in world &
 universe
Date: Tue, 12 Jan 2010 18:13:17 -0500

 On Jan 12, 2010, at 3:41 PM, Robby Findler wrote:
 
 > I think that the easiest path for you to something like this is to
 > distribute a modified version of plt scheme or to use your own
 > teachpacks.
 
 Working on it.  As far as I can tell, the only things in the public =
 interface of universe that talk about "scenes" are place-image, =
 scene+line, on-draw, and stop-when.  The first two are easy:
 
 ; scenify : image -> scene
 (define (scenify img)
   (put-pinhole img 0 0))
 
 ; my-place-image : image x y image -> scene
 (define (my-place-image fg x y bg)
   (place-image fg x y (scenify bg)))
 
 ; my-scene+line : image x0 y0 x1 y1 color -> scene
 (define (my-scene+line bg x0 y0 x1 y1 color)
   (scene+line (scenify bg) x0 y0 x1 y1 color))
 
 If on-draw were a function, I could write
 
 (define (my-on-draw f)
    (on-draw (compose scenify f)))
 
 but it isn't a function; it's a keyword of big-bang.  I don't suppose =
 it's possible to do something like the above as a macro, expanding the =
 "on-draw" syntax before big-bang ever sees it, without rewriting =
 big-bang?
 
 big-bang doesn't mention on-draw or stop-when specifically -- all the =
 keywords are just passed to methods of the aworld% and world% classes -- =
 so I would have to either put in an exception to handle those two =
 keywords differently, or dive into the innards of the aworld% and world% =
 classes.  I don't know Scheme macros well enough to do the former =
 easily, and the latter is a pain.  (Maybe it would suffice to redefine =
 check-scene-result... and re-provide everything that's defined from it.  =
 Yecch.)
 
 I have no doubt that I could figure this out, in time, and I really =
 should learn macros anyway... but this week is not the time to do it.  I =
 put in the change request on the guess that it would be an easy, =
 five-minute fix, and it's not -- at least not for me.
 
 
 You have a good point that whatever libraries my book relies on should =
 be under my control.  Within reason -- I'm not going to grab and =
 maintain my own copy of the complete DrScheme source code!  The question =
 is where to draw the line.  What can I reasonably rely on, and what do I =
 have to maintain for myself?
 
 
 Stephen Bloch
 sbloch@adelphi.edu
 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stephen Bloch <sbloch@adelphi.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org,
        Matthias Felleisen <matthias@ccs.neu.edu>
Subject: Re: [plt-bug] all/10692: enforcement of scene-itude in world & 
	universe
Date: Tue, 12 Jan 2010 17:20:39 -0600

 It's not five minutes for anyone. Writing out tests alone will take
 longer than that, not to mention docs etc.
 
 You proabably want scenify to crop so the
 pinhole that's there is now at(0,0).
 
 Robby
 
 On Tuesday, January 12, 2010, Stephen Bloch <sbloch@adelphi.edu> wrote:
 >
 > On Jan 12, 2010, at 3:41 PM, Robby Findler wrote:
 >
 >> I think that the easiest path for you to something like this is to
 >> distribute a modified version of plt scheme or to use your own
 >> teachpacks.
 >
 > Working on it. =C2=A0As far as I can tell, the only things in the public =
 interface of universe that talk about "scenes" are place-image, scene+line,=
  on-draw, and stop-when. =C2=A0The first two are easy:
 >
 > ; scenify : image -> scene
 > (define (scenify img)
 >  =C2=A0(put-pinhole img 0 0))
 >
 > ; my-place-image : image x y image -> scene
 > (define (my-place-image fg x y bg)
 >  =C2=A0(place-image fg x y (scenify bg)))
 >
 > ; my-scene+line : image x0 y0 x1 y1 color -> scene
 > (define (my-scene+line bg x0 y0 x1 y1 color)
 >  =C2=A0(scene+line (scenify bg) x0 y0 x1 y1 color))
 >
 > If on-draw were a function, I could write
 >
 > (define (my-on-draw f)
 >  =C2=A0 (on-draw (compose scenify f)))
 >
 > but it isn't a function; it's a keyword of big-bang. =C2=A0I don't suppos=
 e it's possible to do something like the above as a macro, expanding the "o=
 n-draw" syntax before big-bang ever sees it, without rewriting big-bang?
 >
 > big-bang doesn't mention on-draw or stop-when specifically -- all the key=
 words are just passed to methods of the aworld% and world% classes -- so I =
 would have to either put in an exception to handle those two keywords diffe=
 rently, or dive into the innards of the aworld% and world% classes. =C2=A0I=
  don't know Scheme macros well enough to do the former easily, and the latt=
 er is a pain. =C2=A0(Maybe it would suffice to redefine check-scene-result.=
 .. and re-provide everything that's defined from it. =C2=A0Yecch.)
 >
 > I have no doubt that I could figure this out, in time, and I really shoul=
 d learn macros anyway... but this week is not the time to do it. =C2=A0I pu=
 t in the change request on the guess that it would be an easy, five-minute =
 fix, and it's not -- at least not for me.
 >
 >
 > You have a good point that whatever libraries my book relies on should be=
  under my control. =C2=A0Within reason -- I'm not going to grab and maintai=
 n my own copy of the complete DrScheme source code! =C2=A0The question is w=
 here to draw the line. =C2=A0What can I reasonably rely on, and what do I h=
 ave to maintain for myself?
 >
 >
 > Stephen Bloch
 > sbloch@adelphi.edu
 >
 >
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Stephen Bloch <sbloch@adelphi.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10692: enforcement of scene-itude in world & universe
Date: Tue, 12 Jan 2010 19:02:39 -0500

 The keyword specification in big-bang spells out quasi-contracts on the =
 values that are permissible in each clause, the various shapes a clause =
 can assume, etc. Since these contracts are implemented as coercions, I =
 think you could write something like the compose that you want. But it's =
 more like a morning or an afternoon, and I just don't have that.=20
 
 
 On Jan 12, 2010, at 6:13 PM, Stephen Bloch wrote:
 
 >=20
 > On Jan 12, 2010, at 3:41 PM, Robby Findler wrote:
 >=20
 >> I think that the easiest path for you to something like this is to
 >> distribute a modified version of plt scheme or to use your own
 >> teachpacks.
 >=20
 > Working on it.  As far as I can tell, the only things in the public =
 interface of universe that talk about "scenes" are place-image, =
 scene+line, on-draw, and stop-when.  The first two are easy:
 >=20
 > ; scenify : image -> scene
 > (define (scenify img)
 >  (put-pinhole img 0 0))
 >=20
 > ; my-place-image : image x y image -> scene
 > (define (my-place-image fg x y bg)
 >  (place-image fg x y (scenify bg)))
 >=20
 > ; my-scene+line : image x0 y0 x1 y1 color -> scene
 > (define (my-scene+line bg x0 y0 x1 y1 color)
 >  (scene+line (scenify bg) x0 y0 x1 y1 color))
 >=20
 > If on-draw were a function, I could write
 >=20
 > (define (my-on-draw f)
 >   (on-draw (compose scenify f)))
 >=20
 > but it isn't a function; it's a keyword of big-bang.  I don't suppose =
 it's possible to do something like the above as a macro, expanding the =
 "on-draw" syntax before big-bang ever sees it, without rewriting =
 big-bang?
 >=20
 > big-bang doesn't mention on-draw or stop-when specifically -- all the =
 keywords are just passed to methods of the aworld% and world% classes -- =
 so I would have to either put in an exception to handle those two =
 keywords differently, or dive into the innards of the aworld% and world% =
 classes.  I don't know Scheme macros well enough to do the former =
 easily, and the latter is a pain.  (Maybe it would suffice to redefine =
 check-scene-result... and re-provide everything that's defined from it.  =
 Yecch.)
 >=20
 > I have no doubt that I could figure this out, in time, and I really =
 should learn macros anyway... but this week is not the time to do it.  I =
 put in the change request on the guess that it would be an easy, =
 five-minute fix, and it's not -- at least not for me.
 >=20
 >=20
 > You have a good point that whatever libraries my book relies on should =
 be under my control.  Within reason -- I'm not going to grab and =
 maintain my own copy of the complete DrScheme source code!  The question =
 is where to draw the line.  What can I reasonably rely on, and what do I =
 have to maintain for myself?
 >=20
 >=20
 > Stephen Bloch
 > sbloch@adelphi.edu
 >=20
 >=20
 >=20
 
From: Stephen Bloch <sbloch@adelphi.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10692: enforcement of scene-itude in world &
 universe
Date: Wed, 13 Jan 2010 09:44:25 -0500

 On Jan 12, 2010, at 4:24 PM, Matthias Felleisen wrote:
 
 > Like DMdA (the German variant of HtDP), I would recommend that your =
 book rely on its own stable libraries. It's easily doable and can share =
 a lot with htdp/image and 2htdp/* (the stable parts).
 
 OK, I think I've got something workable.  It's sorta inelegant -- it =
 involves nearly-identical copies of several files from the standard =
 collections, with only one or two lines changed in each file -- but I =
 think it'll work.
 
 Would you recommend taking 4.2.3 as a starting point, or a recent =
 nightly build?
 
 
 Stephen Bloch
 sbloch@adelphi.edu
 
 
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Stephen Bloch <sbloch@adelphi.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10692: enforcement of scene-itude in world & universe
Date: Wed, 13 Jan 2010 10:10:02 -0500

 I'd start with the nightly build to catch all recent bug fixes,  
 including a fix to a performance bug. You may wish to wait until Robby  
 has had a chance to look at the equality check for world updates.
 
 
 On Jan 13, 2010, at 9:44 AM, Stephen Bloch wrote:
 
 >
 > On Jan 12, 2010, at 4:24 PM, Matthias Felleisen wrote:
 >
 >> Like DMdA (the German variant of HtDP), I would recommend that your  
 >> book rely on its own stable libraries. It's easily doable and can  
 >> share a lot with htdp/image and 2htdp/* (the stable parts).
 >
 > OK, I think I've got something workable.  It's sorta inelegant -- it  
 > involves nearly-identical copies of several files from the standard  
 > collections, with only one or two lines changed in each file -- but  
 > I think it'll work.
 >
 > Would you recommend taking 4.2.3 as a starting point, or a recent  
 > nightly build?
 >
 >
 > Stephen Bloch
 > sbloch@adelphi.edu
 >
 >
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Stephen Bloch <sbloch@adelphi.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10692: enforcement of scene-itude in world & 
	universe
Date: Wed, 13 Jan 2010 09:21:04 -0600

 I would recommend 4.2.4, if you can wait that long.
 
 Robby
 
 On Wed, Jan 13, 2010 at 9:10 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > I'd start with the nightly build to catch all recent bug fixes, including=
  a
 > fix to a performance bug. You may wish to wait until Robby has had a chan=
 ce
 > to look at the equality check for world updates.
 >
 >
 > On Jan 13, 2010, at 9:44 AM, Stephen Bloch wrote:
 >
 >>
 >> On Jan 12, 2010, at 4:24 PM, Matthias Felleisen wrote:
 >>
 >>> Like DMdA (the German variant of HtDP), I would recommend that your boo=
 k
 >>> rely on its own stable libraries. It's easily doable and can share a lo=
 t
 >>> with htdp/image and 2htdp/* (the stable parts).
 >>
 >> OK, I think I've got something workable. =C2=A0It's sorta inelegant -- i=
 t
 >> involves nearly-identical copies of several files from the standard
 >> collections, with only one or two lines changed in each file -- but I th=
 ink
 >> it'll work.
 >>
 >> Would you recommend taking 4.2.3 as a starting point, or a recent nightl=
 y
 >> build?
 >>
 >>
 >> Stephen Bloch
 >> sbloch@adelphi.edu
 >>
 >>
 >>
 >
 >
From: Stephen Bloch <sbloch@adelphi.edu>
To: bugs@plt-scheme.org, Stephen Bloch <sbloch@adelphi.edu>
Cc: 
Subject: Re: all/10692: enforcement of scene-itude in world & universe
Date: Sun, 27 Jun 2010 15:11:25 -0400

 --Apple-Mail-2-858458671
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=US-ASCII;
 	format=flowed
 
 This can be closed; it's become irrelevant.
 
 Stephen Bloch
 sbloch@adelphi.edu
 
 
 
 
 --Apple-Mail-2-858458671
 Content-Transfer-Encoding: 7bit
 Content-Type: text/html;
 	charset=US-ASCII
 
 <html><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; ">This can be closed; it's become irrelevant.<br><br><div> <span class="Apple-style-span" style="border-collapse: separate; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0; "><div>Stephen Bloch</div><div><a href="mailto:sbloch@adelphi.edu">sbloch@adelphi.edu</a></div><div><br class="webkit-block-placeholder"></div></span><br class="Apple-interchange-newline"> </div><br></body></html>
 --Apple-Mail-2-858458671--


State changed from "open" to "analyzed" by matthias at Wed, 08 Sep 2010 14:53:33 -0400
Reason>>> docs 


State changed from "analyzed" to "closed" by matthias at Wed, 01 Jun 2011 11:06:10 -0400
Reason>>> fixed a while back 

