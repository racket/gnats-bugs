From gbitsch@freenet.de  Sat May 10 04:19:04 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id EAA15969
	for <bugs>; Sat, 10 May 2003 04:19:01 -0400
Message-Id: <200305100819.EAA15969@champlain.ccs.neu.edu>
Date: Sat, 10 May 2003 04:19:01 -0400
From: Gerhard Bitsch <gbitsch@freenet.de>
Reply-To:
To: bugs@plt-scheme.org
Subject: drawing program crashes windows2000

>Number:         6259
>Category:       mred
>Synopsis:       drawing program crashes windows2000
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       critical
>Priority:       high
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat May 10 04:20:01 -0400 2003
>Closed-Date:    Thu Jan 27 22:15:29 -0500 2005
>Last-Modified:  Thu Jan 27 22:15:29 -0500 2005
>Originator:     Gerhard Bitsch
>Organization:
titan
>Submitter-Id:   unknown
>Release:        204
>Environment:
windows "Windows NT 5.0 (Build 2195) Service Pack 3" (win32\i386) (get-display-depth) = 32
Docs Installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "icons" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("C:\\PROGRA~1\\PLT2\\./collects/setup/..\\..\\collects\\mzlib\\..\\..\\collects" ("afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "setup" "slibinit" "srfi" "srpersist" "stepper" "string-constants" "syntax" "test-suite" "tex2page" "version" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ("C:\\Programme\\PLT2\\gb\\gbini.ss")
Computer Language: (("Professional Languages" "PLT" "Graphical (MrEd, includes MzScheme)") #6(#f write mixed-fraction-e #f #t debug))
>Description:
a group of my students has written an implementation 
of a turtle system. attempting to draw a hilbert-curve
with this turtle-system I get a crash of my window2000
system. the curve is only partially drawn, the whole desktop
and taskbar are overwritten.
>How-To-Repeat:
execute the following code

(define bildflaeche% 
  (class canvas% 
    (inherit get-dc) 
    (override on-paint)
    
    (public set-double-buffer!)
    
    (init-field (double-buffer 0))
    
    (define set-double-buffer!
      (lambda (img)
        (set! double-buffer img)))
    
    (define on-paint
      (lambda ()
        (if (not (eq? double-buffer 0))
            (send (get-dc) draw-bitmap (send double-buffer get-bitmap) 0 0 'solid (make-object color% 0 0 0) #f)
            )))
    
    (super-instantiate ())
    ))

(define double-buffer%
  (class object% dc<%>
    (public 
      get-bitmap
      painting-done!
      ; dc<%>-interface
      clear draw-arc draw-bitmap draw-bitmap-section draw-ellipse draw-line draw-lines draw-point
      draw-polygon draw-rectangle draw-rounded-rectangle draw-spline draw-text end-doc end-page
      get-background get-brush get-char-height get-char-width get-clipping-region get-font get-origin
      get-pen get-scale get-size get-text-background get-text-extent get-text-foreground get-text-mode
      ok? set-background set-brush set-clipping-rect set-clipping-region set-font set-origin set-pen
      set-scale set-text-background set-text-foreground set-text-mode start-doc start-page try-color
      )
    
    ; double-buffer management
    (init-field (width 600))
    (init-field (height 600))
    (init-field (background-color "WHITE"))
    
    (define display-dc (instantiate bitmap-dc% () (bitmap (make-object bitmap% width height #f))))
    (define paintto-dc (instantiate bitmap-dc% () (bitmap (make-object bitmap% width height #f))))
    
    (define swap
      (lambda ()
;        (let ((tmp paintto-dc))
;          (set! paintto-dc display-dc)
;          (set! display-dc tmp)
        (send display-dc draw-bitmap (send paintto-dc get-bitmap) 0 0 'solid (make-object color% 0 0 0) #f)))
    
    (define get-bitmap 
      (lambda ()
        (send display-dc get-bitmap)))
    
    (define painting-done! 
      (lambda ()
        (swap)
        null))
    
    ; implementation of dc<%> interface
    (define clear (lambda () (send paintto-dc clear)))
    
    (define draw-arc
      (lambda (x y width height start-radians end-radians)
        (send paintto-dc draw-arc x y width height start-radians end-radians)))
    
    (define draw-bitmap
      (lambda (source xdest ydest style color mask)
        (send paintto-dc draw-bitmap source xdest ydest style color mask)))
    
    (define draw-bitmap-section
      (lambda (source xdest ydest xsrc ysrc width height style color mask)
        (send paintto-dc draw-bitmap-section source xdest ydest xsrc ysrc width height style color mask)))
    
    (define draw-ellipse
      (lambda (x y width height)
        (send paintto-dc draw-ellipse x y width height)))
    
    (define draw-line
      (lambda (x1 y1 x2 y2)
        (send paintto-dc draw-line x1 y1 x2 y2)))
    
    (define draw-lines
      (lambda (points xoffset yoffset)
        (send paintto-dc draw-lines points xoffset yoffset)))
    
    (define draw-point
      (lambda (x y)
        (send paintto-dc draw-point x y)))
    
    (define draw-polygon
      (lambda (points xoffset yoffset fill-style)
        (send paintto-dc draw-polygon points xoffset yoffset fill-style)))
    
    (define draw-rectangle
      (lambda (x y width height)
        (send paintto-dc draw-rectangle x y width height)))
    
    (define draw-rounded-rectangle
      (lambda (x y width height radius)
        (send paintto-dc draw-rounded-rectangle x y width height radius)))
    
    (define draw-spline 
      (lambda (x1 y1 x2 y2 x3 y3)
        (send paintto-dc draw-spline x1 y1 x2 y2 x3 y3)))
    
    (define draw-text 
      (lambda (text x y big-chars? offset)
        (send paintto-dc draw-text text x y big-chars? offset)))
    
    (define end-doc (lambda () (send paintto-dc end-doc)))
    (define end-page (lambda () (send paintto-dc end-page)))
    (define get-background (lambda () (send paintto-dc get-background)))
    (define get-brush (lambda () (send paintto-dc get-brush)))
    (define get-char-height (lambda () (send paintto-dc get-char-height)))
    (define get-char-width (lambda () (send paintto-dc get-char-width)))
    (define get-clipping-region (lambda () (send paintto-dc get-clipping-region)))
    (define get-font (lambda () (send paintto-dc get-font)))
    (define get-origin (lambda () (send paintto-dc get-origin)))
    (define get-pen (lambda () (send paintto-dc get-pen)))
    (define get-scale (lambda () (send paintto-dc get-scal)))
    (define get-size (lambda () (send paintto-dc get-size)))
    (define get-text-background (lambda () (send paintto-dc get-text-background)))
    
    (define get-text-extent
      (lambda (string font big-chars? offset)
        (send paintto-dc get-text-extent string font big-chars? offset)))
    
    (define get-text-foreground (lambda () (send paintto-dc get-text-foregroun)))
    (define get-text-mode (lambda () (send paintto-dc get-text-mode)))
    (define ok? (lambda () (send paintto-dc ok?)))
    
    (define set-background
      (lambda (color)
        (send paintto-dc set-background color)))
    
    (define set-brush
      (lambda ()
        (send paintto-dc set-brush brush)))
    
    (define set-clipping-rect
      (lambda (x y width height)
        (send paintto-dc set-clipping-rect x y width height)))
    
    (define set-clipping-region
      (lambda (rgn)
        (send paintto-dc set-clipping-region rgn)))
    
    (define set-font
      (lambda (font)
        (send paintto-dc set-font font)))
    
    (define set-origin
      (lambda (x y)
        (send paintto-dc set-origin x y)))
    
    (define set-pen
      (lambda (pen)
        (send paintto-dc set-pen pen)))
    
    (define set-scale
      (lambda (x-scale y-scale)
        (send paintto-dc set-scale x-scale y-scale)))
    
    (define set-text-background
      (lambda (color)
        (send paintto-dc set-text-background color)))
    
    (define set-text-foreground
      (lambda (color)
        (send paintto-dc set-text-foreground color)))
    
    (define set-text-mode
      (lambda (mode)
        (send paintto-dc set-text-mode mode)))
    
    (define start-doc
      (lambda (message)
        (send paintto-dc start-doc message)))
    
    (define start-page (lambda () (send paintto-dc start-page)))
    
    (define try-color
      (lambda (try result)
        (send paintto-dc try-color try result)))
    
    
    ; instantiate
    (super-instantiate ())
    ))



(define turtle%
  (class object%
    (public clear paint fd bk spc pc lt rt pu pd setheading heading xcor set-xcor! ycor set-ycor! set-pos!)
    
    ; Anfangsinitialisierungen
    (define xpos 0)
    (define ypos 0)
    (define angle 0)
    (define color 0)
    (define penup 0)
    (define punkte 0)
    
    (define turtlesize 15)
    
    (define clear
      (lambda ()
        (set! xpos 0)
        (set! ypos 0)
        (set! angle 0)
        (set! color "BLACK")
        (set! penup #f)
        (set! punkte (list (list xpos ypos color penup)))
        ))
    (clear)
    
    (define getxpos (lambda (punkt) (car punkt)))
    (define getypos (lambda (punkt) (cadr punkt)))
    (define getcolor (lambda (punkt) (caddr punkt)))
    (define getpenup (lambda (punkt) (cadddr punkt)))
    
    (define makepen (lambda (color) (make-object pen% color 1 'solid))) 
    
    (define addpoint
      (lambda (xpos ypos color penup)
        (set! punkte (cons (list xpos ypos color penup) punkte))
        ))
    
    (define pi (acos -1))
    (define dtg (lambda (winkel) (* Pi (/ winkel 180)))) 
    
    ; die ganzen funktionen
    (define fd
      (lambda (len)
        (set! xpos (+ xpos (* len (cos (dtg angle)))))
        (set! ypos (- ypos (* len (sin (dtg angle)))))
        (addpoint xpos ypos color penup)))
    
    (define bk
      (lambda (len)
        (fd (- len))))
    
    (define spc
      (lambda (new_color)
        (set! color new_color)))
    
    (define pc
      (lambda ()
        color))
    
    (define lt
      (lambda (winkel)
        (set! angle (remainder (+ angle winkel 360) 360))
        ))
    
    (define rt
      (lambda (ang)
        (lt (- ang))))
    
    (define pd
      (lambda ()
        (set! penup #f)))
    
    (define pu
      (lambda ()
        (set! penup #t)))
    
    (define setheading
      (lambda (winkel)
        (set! angle (remainder (+ winkel 360)))))
    
    (define heading
      (lambda ()
        angle))
    
    (define xcor
      (lambda ()
        xpos))
    
    (define ycor
      (lambda ()
        ypos))
    
    (define set-xcor!
      (lambda (xcor)
        (set! xpos xcor)
        (addpoint xpos ypos color penup)))
    
    (define set-ycor!
      (lambda (ycor)
        (set! ypos ycor)
        (addpoint xpos ypos color penup)))
    
    (define set-pos!
      (lambda (xcor ycor)
        (set! xpos xcor)
        (set! ypos ycor)
        (addpoint xpos ypos color penup)))
    
    ; anzeige
    
    (define paint
      (lambda (dc)
        ;(display punkte)
        ;(newline)
        (drawlines dc (reverse punkte))
        (drawturtle dc)
        ))
    
    (define drawlines
      (lambda (dc punkte)
        (if (> (length punkte) 1)
            (let ((p1 (car punkte))
                  (p2 (car (cdr punkte)))
                  )
              (if (getpenup p2)
                  (void)
                  (begin
                    (send dc set-pen (makepen (getcolor p2)))
                    (send dc draw-line (getxpos p1) (getypos p1) (getxpos p2) (getypos p2))
                    )
                  )
              (drawlines dc (cdr punkte))
              ))))
    
    (define drawturtle
      (lambda (dc)
        (send dc set-pen (makepen color))
        (send dc draw-line
              (- xpos (* turtlesize (sin (dtg angle))))    ; u.x
              (- ypos (* turtlesize (cos (dtg angle))))    ; u.y
              (+ xpos (* turtlesize (sin (dtg angle))))    ; v.x
              (+ ypos (* turtlesize (cos (dtg angle)))))   ; v.y
        
        (send dc draw-line
              (- xpos (* turtlesize (sin (dtg angle))))    ; u.x
              (- ypos (* turtlesize (cos (dtg angle))))    ; u.y
              (+ xpos (* 2 turtlesize (cos (dtg angle))))  ; w.x
              (- ypos (* 2 turtlesize (sin (dtg angle))))) ; w.y
        
        (send dc draw-line
              (+ xpos (* turtlesize (sin (dtg angle))))    ; v.x
              (+ ypos (* turtlesize (cos (dtg angle))))   ; v.y
              (+ xpos (* 2 turtlesize (cos (dtg angle))))  ; w.x
              (- ypos (* 2 turtlesize (sin (dtg angle))))) ; w.y
        ))
    
    (super-instantiate ())
    ))

; Tests...

(define t (make-object turtle%))
(send t spc (make-object color% 0 255 0))
(send t pu)

(define repeat
  (lambda (anz befehl)
    (do ((i 1 (+ i 1)))
      ((> i anz))
      (befehl))))
;(repeat 4 (lambda () (send t fd 100) (send t rt 90)))

; c-kurve
(define ckurve
  (lambda (lng stufe)
    (if (= stufe 0)
        (send t fd lng)
        (begin
          (ckurve lng (- stufe 1))
          (send t rt 90)
          (ckurve lng (- stufe 1))
          (send t lt 90)
          ))
    ))

;(send t set-pos! 200 160)
;(send t pd)
;(ckurve 10 10)
;(send t pu)
;(send t set-pos! -10 -10)

; dragon
(define rdragon
  (lambda (lng stufe)
    (if (zero? stufe)
        (send t fd lng)
        (begin
          (ldragon lng (- stufe 1))
          (send t rt 90)
          (rdragon lng (- stufe 1))))))

(define ldragon
  (lambda (lng stufe)
    (if (zero? stufe)
        (send t fd lng)
        (begin
          (ldragon lng (- stufe 1))
          (send t lt 90)
          (rdragon lng (- stufe 1))))))

;(send t set-pos! 500 300)
;(send t pd)
;(ldragon 4 13)
;(send t pu)
;(send t set-pos! -10 -10)

; hilbert
(define hilbert0
  (lambda (lng stufe faktor)
    (if (> stufe 0)
        (begin
          (send t lt (* faktor 90))
          (hilbert0 lng (- stufe 1) (- faktor))
          (send t fd lng)
          (send t rt (* faktor 90))
          (hilbert0 lng (- stufe 1) faktor)
          (send t fd lng)
          (hilbert0 lng (- stufe 1) faktor)
          (send t rt (* faktor 90))
          (send t fd lng)
          (hilbert0 lng (- stufe 1) (- faktor))
          (send t lt (* faktor 90))
          ))))
(define hilbert
  (lambda (stufe)
    (hilbert0 3 stufe 1)))
(send t set-pos! 100 600)
(send t pd)
(hilbert 7)
(send t pu)
(send t set-pos! -10 -10)
          
; Fenstergruscht...
(define frmMain (make-object frame% "Bildfenster" #f 800 700))
(define img (instantiate double-buffer% () (width 800) (height 700)))
(define bildflaeche (instantiate bildflaeche% () (parent frmMain) (double-buffer img)))
(send frmMain show #t)
(send img set-pen (make-object pen% (make-object color% 128 128 128) 4 'solid))
(send t paint img)
(send img painting-done!)
>Fix:
>Release-Note:
>Audit-Trail:
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon May 12 11:21:11 2003
Responsible-Changed-Why:
    mr

From: "Gerhard Bitsch" <gbitsch@freenet.de>
To: <bugs@plt-scheme.org>, <steck@ccs.neu.edu>
Cc:  
Subject: Re: all/6259: drawing program crashes windows2000
Date: Mon, 12 May 2003 18:50:34 +0200

 hello,
 
 we have located the origin of the bug. The students program constructs new
 pen-objects
 for every drawn line and this seems to exhaust the resources. Nonetheless
 there should be
 no system-crash.
 
 greetings
 
 Gerhard Bitsch
 
 ----- Original Message -----
 From: <bugs@plt-scheme.org>
 To: "Gerhard Bitsch" <gbitsch@freenet.de>
 Sent: Saturday, May 10, 2003 10:20 AM
 Subject: Re: all/6259: drawing program crashes windows2000
 
 
 > Thank you very much for your PLT problem report.
 > It has the internal identification `all/6259'.
 >
 > You can check on the status of your problem report at
 >
 >
 http://bugs.plt-scheme.org/cgi-bin/gnats-query?pr-number=6259&query-type=pr-
 number
 >
 > >Category:       all
 > >Responsible:    steck
 > >Synopsis:       drawing program crashes windows2000
 > >Arrival-Date:   Sat May 10 04:20:01 EDT 2003
 >
 
State changed from "open" to "closed" by mflatt at Thu, 27 Jan 2005 22:15:29 -0500
Reason>>> I've finally adjusted MrEd under Windows to use a
single GDI-level pen for equivalent pen% objects.

Thanks,
Matthew

>Unformatted:
