From nobody@cs.rice.edu  Mon Jul 12 20:56:35 1999
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id UAA13978
	for <plt-gnats@cs.rice.edu>; Mon, 12 Jul 1999 20:56:35 -0500 (CDT)
Message-Id: <199907130156.UAA24838@web.cs.rice.edu>
Date: Mon, 12 Jul 1999 20:56:34 -0500 (CDT)
From: robby@cs.rice.edu
Reply-To: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: mac: polygons and xor 

>Number:         1075
>Category:       mred
>Synopsis:       mac: polygons and xor
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Mon Jul 12 22:00:16 -0400 1999
>Last-Modified:  Sun Mar 28 02:39:50 -0500 2004
>Originator:     Robert Bruce Findler
>Release:        100alpha4
>Organization:
titan
>Environment:
Mac PowerPC
>Description:
I believe that this pr is worth delaying the release to fix (if it is fixable)
This bug stops the turtles from working on the macintosh, and I
believe we have teachers who are interested in using the turtles
on the macintosh.


There are two problems:

1) with the code as it stands, it should draw a triangle in the
canvas, but nothing appears.

2) if the draw-rectangle line is uncommented and draw-polygon line is
omitted, the rectangle is black. On both X and Windows, it is salmon color.
I understand that XORness is unspecified, but I think that the mac should
have at least as good a color scheme as windows and better than X. The
macintosh is the platform of choice for color-holics, after all.
>How-To-Repeat:
(define icon-brush (send the-brush-list find-or-create-brush "SALMON" 'xor))
(define blank-pen (send the-pen-list find-or-create-pen "BLACK" 1 'transparent))

(define points (list (make-object point% 10 10)
                     (make-object point% 90 10)
                     (make-object point% 90 10)))

(define frame (make-object frame% "frame"))
(define tcanvas%
  (class canvas% ()
    (inherit get-dc)
    (override
      [on-paint
       (lambda ()
         (let ([dc (get-dc)])
           (send dc set-pen blank-pen)
           (send dc set-brush icon-brush)
           ;(send dc draw-rectangle 20 20 60 60)
           (send dc draw-polygon points)))])
    (sequence
      (super-init frame))))

(define canvas (make-object tcanvas%))

(send canvas min-client-width 100)
(send canvas min-client-height 100)
(send frame show #t)

>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.rice.edu>
To: robby@cs.rice.edu
Cc: clements@cs.rice.edu, plt-gnats@cs.rice.edu
Subject: Re: all/1075: mac: polygons and xor 
Date: Mon, 12 Jul 1999 19:47:53 -0700 (PDT)

 Quoting robby@cs.rice.edu:
 > 1) with the code as it stands, it should draw a triangle in the
 > canvas, but nothing appears.
 
 No. `points' defines an empty area. Try commenting out the pen setting
 to see what I mean.
 
 Perhaps you meant ((10,10),(90,10),(10,90))
                                    ^^^^^^^ instead of (90,10)
 
 > 2) if the draw-rectangle line is uncommented and draw-polygon line is
 > omitted, the rectangle is black. On both X and Windows, it is salmon color.
 > I understand that XORness is unspecified, but I think that the mac should
 > have at least as good a color scheme as windows and better than X. The
 > macintosh is the platform of choice for color-holics, after all.
 
 Xor is The Mac's Xor, whatever that is. If you and John decide to
 change it, that's fine with me.
 
 > (define icon-brush (send the-brush-list find-or-create-brush "SALMON" 'xor))
 > (define blank-pen (send the-pen-list find-or-create-pen "BLACK" 1 'transparent))
 > 
 > (define points (list (make-object point% 10 10)
 >                      (make-object point% 90 10)
 >                      (make-object point% 90 10)))
 > 
 > (define frame (make-object frame% "frame"))
 > (define tcanvas%
 >   (class canvas% ()
 >     (inherit get-dc)
 >     (override
 >       [on-paint
 >        (lambda ()
 >          (let ([dc (get-dc)])
 >            (send dc set-pen blank-pen)
 >            (send dc set-brush icon-brush)
 >            ;(send dc draw-rectangle 20 20 60 60)
 >            (send dc draw-polygon points)))])
 >     (sequence
 >       (super-init frame))))
 > 
 > (define canvas (make-object tcanvas%))
 > 
 > (send canvas min-client-width 100)
 > (send canvas min-client-height 100)
 > (send frame show #t)
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.rice.edu>
Cc: clements@cs.rice.edu, plt-gnats@cs.rice.edu
Subject: Re: all/1075: mac: polygons and xor
Date: Mon, 12 Jul 1999 22:00:31 -0500

 Matthew Flatt wrote:
 
 > Xor is The Mac's Xor, whatever that is. If you and John decide to
 > change it, that's fine with me.
 
 According to IM V, "The Xor mode complements the bits in the
 destination corresponding to the bits equal to 1 in the source. When
 used on a colored destination, the color of the inverted destination
 isn't defined."
 
 The second sentence aside, I am not sure how to reconcile that with
 what I see. Does the brush color count as the source? If so, I would
 expect to see salmon, not black when I xor with a salmon brush. If
 not, does the brush color correspond to anything? What is the "source"?
 
 Robby

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.rice.edu>
Cc: clements@cs.rice.edu, plt-gnats@cs.rice.edu
Subject: Re: all/1075: mac: polygons and xor
Date: Mon, 12 Jul 1999 22:16:14 -0500

 Actually, it appears that I missed a bit in IM V. That description
 only applied to bw stuff. In VI, it says:
 
   The XOR mode inverts black in the source image but not white, at all
 destination dephs,
   including 16-bit and 32-bit direct pixels. 
 
   When you work with color pixels, transfer modes produce different
 results of indexed
   and direct devices.
 
 Sigh. I guess that there is no way. I think that Macintosh Common Lisp
 got xor to actually xor the bits in the colors, just like windows
 seems to do.
 
 Robby

From: Matthias Felleisen <matthias@cs.rice.edu>
To: robby@cs.rice.edu
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu, steck@cs.rice.edu,
        shriram@cs.rice.edu, mflatt@cs.rice.edu, robby@cs.rice.edu,
        clements@cs.rice.edu, ptg@cs.rice.edu
Subject: Re: all/1075: mac: polygons and xor
Date: Mon, 12 Jul 1999 22:20:19 -0500 (CDT)

 Hold it! There are two aspects: 
 
  1. Holding the alpha4 release scheduled for tomorrow morning. 
  2. Holding the release. 
 
 I strongly doubt that teachers will notice this bug. If you demo 
 Logo, demo it on a Windows machine. Then tell them that the Mac's
 Logo version is currently messed up. Ask them to hang in there until
 100 comes out. 
 
 Now, before we commit, I would like you to get on the phone tomorrow
 morning (9am latest) with Matthew and discuss how much work/how fixable
 that stupid bug is. Then we make a decision by 10am, when Paul comes in. 
 
 -- Matthias
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: matthias@rice.edu
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu, shriram@cs.rice.edu,
        mflatt@cs.rice.edu, clements@cs.rice.edu, ptg@cs.rice.edu
Subject: Re: all/1075: mac: polygons and xor
Date: Mon, 12 Jul 1999 22:26:25 -0500

 Bobby is a mac person who expressed interest in using DrScheme turtles
 next semester. Presumably she will want to test out turtles on her
 computers, since I have incorporated some new things at her request.
 
 We currently don't know what mred bug (mis-understanding?) is. It may
 be a platform-specific problem that won't be a mred bug, or it might
 actually be a mred bug.
 
 Robby
 
 Matthias Felleisen wrote:
 > 
 > Hold it! There are two aspects:
 > 
 >  1. Holding the alpha4 release scheduled for tomorrow morning.
 >  2. Holding the release.
 > 
 > I strongly doubt that teachers will notice this bug. If you demo
 > Logo, demo it on a Windows machine. Then tell them that the Mac's
 > Logo version is currently messed up. Ask them to hang in there until
 > 100 comes out.
 > 
 > Now, before we commit, I would like you to get on the phone tomorrow
 > morning (9am latest) with Matthew and discuss how much work/how fixable
 > that stupid bug is. Then we make a decision by 10am, when Paul comes in.
 > 
 > -- Matthias

From: Matthias Felleisen <matthias@cs.rice.edu>
To: robby@cs.rice.edu
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu, shriram@cs.rice.edu,
        mflatt@cs.rice.edu, clements@cs.rice.edu, ptg@cs.rice.edu
Subject: Re: all/1075: mac: polygons and xor
Date: Mon, 12 Jul 1999 22:34:37 -0500 (CDT)

 I don't care. In either case Bobby will download 100, not alpha4. 
 If she uses DrScheme to teach Logo, we have missed our goal anyway. 
 I think two hours will be enough for Matthew to take a look and to
 get a first idea. 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: matthias@rice.edu
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu, shriram@cs.rice.edu,
        mflatt@cs.rice.edu, clements@cs.rice.edu, ptg@cs.rice.edu
Subject: Re: all/1075: mac: polygons and xor
Date: Mon, 12 Jul 1999 22:39:36 -0500

 Matthias Felleisen wrote:
 > 
 > I don't care. In either case Bobby will download 100, not alpha4.
 > If she uses DrScheme to teach Logo, we have missed our goal anyway.
 > I think two hours will be enough for Matthew to take a look and to
 > get a first idea.
 
 No; it's not a "matthew ready" bug yet. He cannot make that decision
 until I have narrowed down the problem from several hundred lines to
 10 lines of Scheme code.
 
 I thought you might have that attitude towards Bobby's request. I
 don't want to get into a discussion about the virtues of Logo in an
 introduction to CS. We all know that you need a hook to get students
 excited about things. This can be one such thing. Again, we all agree
 that it should come in the generative recursion / imperative section. 
 
 I am pretty disappointed that this failure happens to come in this
 way, and I am going to sit here until I have figured something out.
 
 Robby

From: Robert Bruce Findler <robby@cs.rice.edu>
To: plt-gnats@cs.rice.edu
Cc:  Subject: Re: all/1075: mac: polygons and xor
Date: Mon, 12 Jul 1999 23:26:59 -0500

 This is the real "polgons" problem (the xor wish is unrelated).
 
 Mode 1) Run this program and evalute "(f)". a line is drawn.
 
 Mode 2) Uncomment the line below, run the program and evaluate "(f)".
 No line is drawn.
 
 Matthew conjectures that this is a bug with the settings on the
 grafport getting screwed.
 
 Robby
 
 
 (define b-pen (send the-pen-list find-or-create-pen "black" 1 'solid))
 
 (define width 100)
 (define height 100)
 
 [define bitmap (make-object bitmap% width height #t)]
 [define memory-dc (make-object bitmap-dc%)]
 
 (define plot-window%
   (class frame% (name)
     (inherit show)
 
     (sequence
       ;(send memory-dc set-bitmap bitmap)
       (super-init name #f width height))
     
     (public
       [canvas (make-object canvas% this)])
     (sequence
       (send canvas min-width width)
       (send canvas min-height height))))
 
 (define frame (make-object plot-window% "Turtles"))
 (send frame show #t)
 
 (define (f)
   (send (send (ivar frame canvas) get-dc) set-pen b-pen)
   (send (send (ivar frame canvas) get-dc) draw-line 0 0 100 100))

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Jul 13 17:38:41 1999
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Tue Jul 13 17:38:46 1999
State-Changed-Why:
Fixed interference between bitmaps and canvases.

>Unformatted:
