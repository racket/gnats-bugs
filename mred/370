From robby@cs.rice.edu  Mon Nov 10 22:50:27 1997
Received: from australia.cs.rice.edu (australia.cs.rice.edu [128.42.1.176]) by cs.rice.edu (8.8.5/8.7.1) with ESMTP id WAA08270 for <plt-gnats@cs.rice.edu>; Mon, 10 Nov 1997 22:50:26 -0600 (CST)
Message-Id: <199711110450.WAA13751@australia.cs.rice.edu>
Date: Mon, 10 Nov 1997 22:50:26 -0600 (CST)
From: Robert Bruce Findler <robby@cs.rice.edu>
Reply-To: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: line-start-position wrong
X-Send-Pr-Version: 3.101

>Number:         370
>Category:       mred
>Synopsis:       line-start-position wrong
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Mon Nov 10 23:55:01 -0500 1997
>Last-Modified:  Sun Mar 28 02:36:03 -0500 2004
>Originator:     Robert Bruce Findler
>Release:        unknown
>Organization:
titan
>Environment:
	
>Description:
	
line-start-position seems to return zero when it should be able to
calculate the correct answer.

Also the docss don't say "only valid when buffer is viewed" (or explain
viewed for that matter) but I think that restriction probably applies to
this function.

>How-To-Repeat:
(define f (make-object wx:frame% null "test" 10 10 200 200))
(define p (make-object wx:panel% f))
(define c (make-object wx:media-canvas% p))
(define e%
  (class-asi wx:media-edit%
    (inherit line-start-position)
    (rename [super-on-paint on-paint])
    (private [current-line 3])
    (public
      [on-paint
       (lambda args
	 (apply super-on-paint args)
	 (printf "on-paint: line-start-position ~a ~a~n"
		 current-line
		 (line-start-position current-line)))])))
(define e (make-object e%))
(send e insert (format "aaaaaa~naaaaaa~naaaaaa~naaaaaa~naaaaaa~n"))
(send c set-media e)
(send c set-size 0 0 150 150)
(send f show #t)

>Fix:
one way that I am using:

	[line-start-position
	 (lambda (line-number)
	   (find-position 0 (line-location line-number)))]

note that that way works -- which is what leads me to believe that this is
indeed a bug.

>Release-Note:

>Audit-Trail:

Responsible-Changed-From-To: ptg->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Nov 11 08:11:24 1997
Responsible-Changed-Why:

State-Changed-From-To: open-analyzed
State-Changed-By: mflatt
State-Changed-When: Sat Dec 13 11:11:02 1997
State-Changed-Why:
The bug was that line-start-position et al. checked the wrong locking
flags, returning 0 whenever the buffer was internally locked for
writing.

As for the validity of the result when the buffer is not viewed, the
result is indeed invalid in a sense of the buffer has a maximum width,
but it is completely valid when ther buffer does not have a maximum
width. A note has been added to the documentation explaining the case
where the buffer has a maximum width but no display.

Fixed but not released.

State-Changed-From-To: analyzed-closed
State-Changed-By: mflatt
State-Changed-When: Thu Dec 18 10:31:01 1997
State-Changed-Why:
Released.

>Unformatted:
