From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Dec  7 11:00:50 2010
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id oB7G0lh2026378
	for <bugs@bugs.plt-scheme.org>; Tue, 7 Dec 2010 11:00:47 -0500
Message-Id: <201012071600.oB7G0h6R026370@champlain.ccs.neu.edu>
Date: Tue, 7 Dec 2010 11:00:43 -0500
From: robby@eecs.northwestern.edu
To: bugs@racket-lang.org
Subject: win gr2: draw-bitmap & indexact dx,dy arguments

>Number:         11506
>Category:       mred
>Synopsis:       win gr2: draw-bitmap & indexact dx,dy arguments
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Dec 07 11:04:01 -0500 2010
>Closed-Date:    Mon Jan 17 19:45:10 -0500 2011
>Last-Modified:  Mon Jan 17 19:45:10 -0500 2011
>Originator:     Robby Findler
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.99.4--2010-12-06(39008f21/d)
>Environment:
windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 179586584

Collections:
(("C:\\Users\\Administrator\\AppData\\Roaming\\Racket\\5.0.99.4\\collects" non-existent-path) ("c:\\Users\\Administrator\\git\\exp\\plt\\collects" ".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" !
 "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
When passing inexact numbers as the dx/dy arguments to the draw-bitmap method, the bitmap doesn't seem to get drawn.

I can't paste into this form at the moment (another gr2 win bug but one that has been fixed, but this drracket doesn't have that fix yet) so I'll reply to the email with the program and the expected output.

(This appears to be the root cause of the last 2htdp/image test case failure.)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bug-notification <bug-notification@racket-lang.org>,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/11506: win gr2: draw-bitmap & indexact dx,dy arguments
Date: Tue, 7 Dec 2010 10:42:56 -0600

 Ugh. Back to the drawing board wrt to this problem in 2htdp/image.
 
 Thanks,
 Robby
 
 On Tue, Dec 7, 2010 at 10:40 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Tue, 7 Dec 2010 10:35:22 -0600, Robby Findler wrote:
 >> How did this work in gr1?
 >
 > I get the same answer in gr1 (after adjusting the program so that it
 > runs in both).
 >
 > ----------------------------------------
 >
 > #lang racket/gui
 >
 > (define (bitmap->bytes bm [mask (send bm get-loaded-mask)])
 > =C2=A0(let* ([w (send bm get-width)]
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 [h (send bm get-height)]
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 [bytes (make-bytes (* w h 4) 0)])
 > =C2=A0 =C2=A0(send bm get-argb-pixels 0 0 w h bytes #f)
 > =C2=A0 =C2=A0(when mask
 > =C2=A0 =C2=A0 =C2=A0(send mask get-argb-pixels 0 0 w h bytes #t))
 > =C2=A0 =C2=A0(values bytes w h)))
 >
 > (define (bytes->bitmap bytes w h)
 > =C2=A0(unless (=3D (bytes-length bytes) (* w h 4))
 > =C2=A0 =C2=A0(error 'bytes->bitmap "wrong sizes, got ~a bytes, w ~a h ~a =
 (which
 > should be ~a bytes)"
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (bytes-length bytes)
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 w
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 h
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (* w h 4)))
 > =C2=A0(let* ([bm (make-object bitmap% w h)]
 > =C2=A0 =C2=A0 =C2=A0 =C2=A0 [dc (make-object bitmap-dc% bm)])
 > =C2=A0 =C2=A0(send dc set-argb-pixels 0 0 w h bytes)
 > =C2=A0 =C2=A0(send dc set-bitmap #f)
 > =C2=A0 =C2=A0bm))
 >
 > (define bm (bytes->bitmap #"\377\0\377\0" 1 1))
 >
 > (define dc-bm (make-object bitmap% 1 1))
 > (define bdc (make-object bitmap-dc% dc-bm))
 > (send bdc clear)
 > (void (send bdc draw-bitmap bm 0.0 -1.1e-16))
 > (define-values (wrong-bytes _w1 _h1) (bitmap->bytes dc-bm))
 > (void (send bdc draw-bitmap bm 0 0))
 > (define-values (correct-bytes _w2 _h2) (bitmap->bytes dc-bm))
 > wrong-bytes
 > correct-bytes
 >
 >
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/11506: win gr2: draw-bitmap & indexact dx,dy arguments
Date: Wed, 8 Dec 2010 06:39:19 -0600

 Okay, is the third time going to be a charm? The code below produces
 #f under gr2 but #t under gr1 and is a closer approximation of the
 actual failing test case in 2htdp/image (but not a very close
 approximation overall)
 
 Robby
 
 #lang racket/gui
 
 (define NUM-CHANNELS 4)
 
 
 (define (bitmap->bytes bm [mask (send bm get-loaded-mask)])
   (let* ([w (send bm get-width)]
          [h (send bm get-height)]
          [bytes (make-bytes (* w h NUM-CHANNELS) 0)])
     (send bm get-argb-pixels 0 0 w h bytes #f)
     (when mask
       (send mask get-argb-pixels 0 0 w h bytes #t))
     (values bytes w h)))
 
 (define (bytes->bitmap bytes w h)
   (unless (=3D (bytes-length bytes) (* w h NUM-CHANNELS))
     (error 'bytes->bitmap "wrong sizes, got ~a bytes, w ~a h ~a (which
 should be ~a bytes)"
            (bytes-length bytes)
            w
            h
            (* w h NUM-CHANNELS)))
   (let* ([bm (make-object bitmap% w h)]
          [mask (make-object bitmap% w h)]
          [bdc (make-object bitmap-dc% bm)])
     (send bdc set-argb-pixels 0 0 w h bytes #f)
     (send bdc set-bitmap mask)
     (send bdc set-argb-pixels 0 0 w h bytes #t)
     (send bdc set-bitmap #f)
     (send bm set-loaded-mask mask)
     bm))
 
 (define to-draw
 (bytes->bitmap #"\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\3=
 77\377\0\0\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\=
 377\0\0\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377=
 \0\0\377"
                6 3))
 
 (define blank (bytes->bitmap
 #"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\=
 377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377=
 \377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\37=
 7\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\3=
 77\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\=
 377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377=
 "
 7 4))
 
 (define bdc (make-object bitmap-dc% blank))
 (void (send bdc draw-bitmap to-draw 0.0 -2.220446049250313e-016))
 (define-values (after w h) (bitmap->bytes blank))
 (equal? after
         #"\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\=
 0\0\377\377\377\377\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377=
 \0\0\377\377\0\0\377\377\377\377\377\377\0\377\0\377\0\377\0\377\0\377\0\37=
 7\0\0\377\377\0\0\377\377\0\0\377\377\377\377\377\377\377\377\377\377\377\3=
 77\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\=
 377\377\377")
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/11506: win gr2: draw-bitmap & indexact dx,dy arguments
Date: Wed, 8 Dec 2010 06:42:02 -0700

 I think the difference is the scaling algorithm.
 
 With y = -2.220446049250313e-016 and h = 3.0, then y + h = 3.0. That
 is, the small negative offset gets lost because it's too small relative
 to 3.0. After taking the floor of the top and bottom ends of the target
 rectangle, you get -1.0 to 3.0, which is 4.0 pixels high.
 
 So, the source and targets have different heights, and the scaling
 algorithm becomes relevant.
 
 At Wed, 8 Dec 2010 06:39:19 -0600, Robby Findler wrote:
 > Okay, is the third time going to be a charm? The code below produces
 > #f under gr2 but #t under gr1 and is a closer approximation of the
 > actual failing test case in 2htdp/image (but not a very close
 > approximation overall)
 > 
 > Robby
 > 
 > #lang racket/gui
 > 
 > (define NUM-CHANNELS 4)
 > 
 > 
 > (define (bitmap->bytes bm [mask (send bm get-loaded-mask)])
 >   (let* ([w (send bm get-width)]
 >          [h (send bm get-height)]
 >          [bytes (make-bytes (* w h NUM-CHANNELS) 0)])
 >     (send bm get-argb-pixels 0 0 w h bytes #f)
 >     (when mask
 >       (send mask get-argb-pixels 0 0 w h bytes #t))
 >     (values bytes w h)))
 > 
 > (define (bytes->bitmap bytes w h)
 >   (unless (= (bytes-length bytes) (* w h NUM-CHANNELS))
 >     (error 'bytes->bitmap "wrong sizes, got ~a bytes, w ~a h ~a (which
 > should be ~a bytes)"
 >            (bytes-length bytes)
 >            w
 >            h
 >            (* w h NUM-CHANNELS)))
 >   (let* ([bm (make-object bitmap% w h)]
 >          [mask (make-object bitmap% w h)]
 >          [bdc (make-object bitmap-dc% bm)])
 >     (send bdc set-argb-pixels 0 0 w h bytes #f)
 >     (send bdc set-bitmap mask)
 >     (send bdc set-argb-pixels 0 0 w h bytes #t)
 >     (send bdc set-bitmap #f)
 >     (send bm set-loaded-mask mask)
 >     bm))
 > 
 > (define to-draw
 > (bytes->bitmap 
 > #"\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\377\377\
 > 0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\377\377\0\377\0
 > \377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\377"
 >                6 3))
 > 
 > (define blank (bytes->bitmap
 > #"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\
 > 377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377
 > \377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\37
 > 7\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\3
 > 77\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\
 > 377\377\377\377\377\377\377\377\377\377\377\377\377\377"
 > 7 4))
 > 
 > (define bdc (make-object bitmap-dc% blank))
 > (void (send bdc draw-bitmap to-draw 0.0 -2.220446049250313e-016))
 > (define-values (after w h) (bitmap->bytes blank))
 > (equal? after
 >         
 > #"\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\377\377\
 > 377\377\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0
 > \377\377\377\377\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\37
 > 7\377\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\3
 > 77\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/11506: win gr2: draw-bitmap & indexact dx,dy arguments
Date: Wed, 8 Dec 2010 07:53:13 -0600

 Judging from the actual pixel values, it looks like one of them is not
 scaling the same amount as the other (ie, one actually seems to update
 only 3 pixels and the other 4 ... I think).
 
 But, ok. I think that this means that 2htdp/image needs to do
 something different when it computes where rotations go. Maybe. Or
 maybe just rotating bitmaps don't quite work (like lots of other
 things don't work due to inexacts).
 
 Robby
 
 On Wed, Dec 8, 2010 at 7:42 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > I think the difference is the scaling algorithm.
 >
 > With y =3D -2.220446049250313e-016 and h =3D 3.0, then y + h =3D 3.0. Tha=
 t
 > is, the small negative offset gets lost because it's too small relative
 > to 3.0. After taking the floor of the top and bottom ends of the target
 > rectangle, you get -1.0 to 3.0, which is 4.0 pixels high.
 >
 > So, the source and targets have different heights, and the scaling
 > algorithm becomes relevant.
 >
 > At Wed, 8 Dec 2010 06:39:19 -0600, Robby Findler wrote:
 >> Okay, is the third time going to be a charm? The code below produces
 >> #f under gr2 but #t under gr1 and is a closer approximation of the
 >> actual failing test case in 2htdp/image (but not a very close
 >> approximation overall)
 >>
 >> Robby
 >>
 >> #lang racket/gui
 >>
 >> (define NUM-CHANNELS 4)
 >>
 >>
 >> (define (bitmap->bytes bm [mask (send bm get-loaded-mask)])
 >> =C2=A0 (let* ([w (send bm get-width)]
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[h (send bm get-height)]
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[bytes (make-bytes (* w h NUM-CHANNELS=
 ) 0)])
 >> =C2=A0 =C2=A0 (send bm get-argb-pixels 0 0 w h bytes #f)
 >> =C2=A0 =C2=A0 (when mask
 >> =C2=A0 =C2=A0 =C2=A0 (send mask get-argb-pixels 0 0 w h bytes #t))
 >> =C2=A0 =C2=A0 (values bytes w h)))
 >>
 >> (define (bytes->bitmap bytes w h)
 >> =C2=A0 (unless (=3D (bytes-length bytes) (* w h NUM-CHANNELS))
 >> =C2=A0 =C2=A0 (error 'bytes->bitmap "wrong sizes, got ~a bytes, w ~a h ~=
 a (which
 >> should be ~a bytes)"
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(bytes-length bytes)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0w
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0h
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(* w h NUM-CHANNELS)))
 >> =C2=A0 (let* ([bm (make-object bitmap% w h)]
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[mask (make-object bitmap% w h)]
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[bdc (make-object bitmap-dc% bm)])
 >> =C2=A0 =C2=A0 (send bdc set-argb-pixels 0 0 w h bytes #f)
 >> =C2=A0 =C2=A0 (send bdc set-bitmap mask)
 >> =C2=A0 =C2=A0 (send bdc set-argb-pixels 0 0 w h bytes #t)
 >> =C2=A0 =C2=A0 (send bdc set-bitmap #f)
 >> =C2=A0 =C2=A0 (send bm set-loaded-mask mask)
 >> =C2=A0 =C2=A0 bm))
 >>
 >> (define to-draw
 >> (bytes->bitmap
 >> #"\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\3=
 77\377\
 >> 0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\377\377\=
 0\377\0
 >> \377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\377"
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A06 3))
 >>
 >> (define blank (bytes->bitmap
 >> #"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\3=
 77\377\
 >> 377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\=
 377\377
 >> \377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377=
 \377\37
 >> 7\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\37=
 7\377\3
 >> 77\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\3=
 77\377\
 >> 377\377\377\377\377\377\377\377\377\377\377\377\377\377"
 >> 7 4))
 >>
 >> (define bdc (make-object bitmap-dc% blank))
 >> (void (send bdc draw-bitmap to-draw 0.0 -2.220446049250313e-016))
 >> (define-values (after w h) (bitmap->bytes blank))
 >> (equal? after
 >>
 >> #"\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\3=
 77\377\
 >> 377\377\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\=
 377\0\0
 >> \377\377\377\377\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377=
 \0\0\37
 >> 7\377\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\37=
 7\377\3
 >> 77\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org,
        bugs <bugs@racket-lang.org>
Subject: Re: [racket-bug] all/11506: win gr2: draw-bitmap & indexact dx,dy arguments
Date: Wed, 8 Dec 2010 08:09:36 -0600

 Oh wait, I think I understand better now -- the y+h calculation is in
 one of the scaling algorithms and not in the other (or in some other
 way that makes the final bitmap appear to still be 3 pixels).
 
 This also explains why a 4x2 and smaller bitmap didn't work for my test cas=
 e :)
 
 (define small-thing -2.220446049250313e-016)
 
 > (=3D 3.0 (+ 3.0 small-thing))
 #t
 > (=3D 2.0 (+ 2.0 small-thing))
 #f
 
 
 Robby
 
 On Wed, Dec 8, 2010 at 7:42 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > I think the difference is the scaling algorithm.
 >
 > With y =3D -2.220446049250313e-016 and h =3D 3.0, then y + h =3D 3.0. Tha=
 t
 > is, the small negative offset gets lost because it's too small relative
 > to 3.0. After taking the floor of the top and bottom ends of the target
 > rectangle, you get -1.0 to 3.0, which is 4.0 pixels high.
 >
 > So, the source and targets have different heights, and the scaling
 > algorithm becomes relevant.
 >
 > At Wed, 8 Dec 2010 06:39:19 -0600, Robby Findler wrote:
 >> Okay, is the third time going to be a charm? The code below produces
 >> #f under gr2 but #t under gr1 and is a closer approximation of the
 >> actual failing test case in 2htdp/image (but not a very close
 >> approximation overall)
 >>
 >> Robby
 >>
 >> #lang racket/gui
 >>
 >> (define NUM-CHANNELS 4)
 >>
 >>
 >> (define (bitmap->bytes bm [mask (send bm get-loaded-mask)])
 >> =C2=A0 (let* ([w (send bm get-width)]
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[h (send bm get-height)]
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[bytes (make-bytes (* w h NUM-CHANNELS=
 ) 0)])
 >> =C2=A0 =C2=A0 (send bm get-argb-pixels 0 0 w h bytes #f)
 >> =C2=A0 =C2=A0 (when mask
 >> =C2=A0 =C2=A0 =C2=A0 (send mask get-argb-pixels 0 0 w h bytes #t))
 >> =C2=A0 =C2=A0 (values bytes w h)))
 >>
 >> (define (bytes->bitmap bytes w h)
 >> =C2=A0 (unless (=3D (bytes-length bytes) (* w h NUM-CHANNELS))
 >> =C2=A0 =C2=A0 (error 'bytes->bitmap "wrong sizes, got ~a bytes, w ~a h ~=
 a (which
 >> should be ~a bytes)"
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(bytes-length bytes)
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0w
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0h
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0(* w h NUM-CHANNELS)))
 >> =C2=A0 (let* ([bm (make-object bitmap% w h)]
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[mask (make-object bitmap% w h)]
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0[bdc (make-object bitmap-dc% bm)])
 >> =C2=A0 =C2=A0 (send bdc set-argb-pixels 0 0 w h bytes #f)
 >> =C2=A0 =C2=A0 (send bdc set-bitmap mask)
 >> =C2=A0 =C2=A0 (send bdc set-argb-pixels 0 0 w h bytes #t)
 >> =C2=A0 =C2=A0 (send bdc set-bitmap #f)
 >> =C2=A0 =C2=A0 (send bm set-loaded-mask mask)
 >> =C2=A0 =C2=A0 bm))
 >>
 >> (define to-draw
 >> (bytes->bitmap
 >> #"\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\3=
 77\377\
 >> 0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\377\377\=
 0\377\0
 >> \377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\377"
 >> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A06 3))
 >>
 >> (define blank (bytes->bitmap
 >> #"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\3=
 77\377\
 >> 377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\=
 377\377
 >> \377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377=
 \377\37
 >> 7\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\37=
 7\377\3
 >> 77\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\3=
 77\377\
 >> 377\377\377\377\377\377\377\377\377\377\377\377\377\377"
 >> 7 4))
 >>
 >> (define bdc (make-object bitmap-dc% blank))
 >> (void (send bdc draw-bitmap to-draw 0.0 -2.220446049250313e-016))
 >> (define-values (after w h) (bitmap->bytes blank))
 >> (equal? after
 >>
 >> #"\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\377\0\0\3=
 77\377\
 >> 377\377\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377\0\0\377\=
 377\0\0
 >> \377\377\377\377\377\377\0\377\0\377\0\377\0\377\0\377\0\377\0\0\377\377=
 \0\0\37
 >> 7\377\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\37=
 7\377\3
 >> 77\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")
 >



State changed from "open" to "closed" by eli at Mon, 17 Jan 2011 19:45:10 -0500
Reason>>> closed as "obsolete" with respect to v5.0.99.6 and later;
either the bug is long-since fixed, the relevant code
doesn't exist anymore, the relevant platform hasn't been
supported recently, or a new bug report is needed if the
problem really isn't fixed and someone actually cares

