From nobody@cs.rice.edu  Tue Dec 14 13:00:08 1999
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id NAA03741
	for <plt-gnats@cs.rice.edu>; Tue, 14 Dec 1999 13:00:08 -0600 (CST)
Message-Id: <199912141900.NAA07694@web.cs.rice.edu>
Date: Tue, 14 Dec 1999 13:00:07 -0600 (CST)
From: ptg@rice.edu
Reply-To: ptg@rice.edu
To: plt-gnats@cs.rice.edu
Subject: MrEd changes the terminal settings 

>Number:         1301
>Category:       mred
>Synopsis:       MrEd changes the terminal settings
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Dec 14 14:15:03 -0500 1999
>Last-Modified:  Sun Mar 28 02:40:57 -0500 2004
>Originator:     Paul Graunke
>Release:        102/3d1
>Organization:
titan
>Environment:
Solaris
>Description:
If I run mutt or vi in an xterm, it works fine.
If I start and the quit mred before running mutt or vi again, it works fine.
If I start mred in the background, then I run mutt or vi in the forground,
it doesn't wait for a character to be pressed, so I can't quit my mail
reader (mutt) and vi keeps re-prompting with an infinite stream of :'s.
When I exit mred with mutt still running, mutt then behaves normally.

I think the problem is that mred changes the terminal settings to not
block or something like that.  mzscheme doesn't have this problem.
This didn't used to happen.  Similar things happened with Kaffe.

>How-To-Repeat:
see above
>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: ptg@rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1301: MrEd changes the terminal settings 
Date: Thu, 16 Dec 1999 04:16:38 -0800

 Quoting ptg@rice.edu:
 > I think the problem is that mred changes the terminal settings to not
 > block or something like that.  mzscheme doesn't have this problem.
 > This didn't used to happen.  Similar things happened with Kaffe.
 
 This is a bug in Solaris. I don't see a workaround in this case.
 
 Both MzScheme and MrEd change stdout (and stderr, if it's different) to
 non-blocking. But that's not supposed to affect the tty shared by
 multiple programs; it's only supposed to affect the "file" as seen by
 MrEd and MzScheme.
 
 Matthias experienced the problem with Emacs on Europa. Interestingly,
 the bug didn't occur when logged in as `mflatt' instead of `matthias',
 even though we had the same .cshrc and .login setups.

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Thu Dec 16 07:33:58 1999
Responsible-Changed-Why:


From: Matthew Flatt <mflatt@cs.utah.edu>
To: ptg@rice.edu
Cc: matthias@cs.rice.edu, plt-gnats@cs.rice.edu
Subject: Re: all/1301: MrEd changes the terminal settings 
Date: Sat, 1 Jan 2000 08:52:55 -0800

 Quoting ptg@rice.edu:
 > >Synopsis:       MrEd changes the terminal settings
 
 I've been wrong to heap so much scorn on Solaris for its handling of
 non-blocking I/O.
 
 Actually, it seems that all unixes deserve equal scorn.
 
 The problem is that the relationship between file descriptors, streams,
 and devices is ill-defined. When you set a specific file descriptor to
 non-blocking I/O, you might be setting a *device* to non-blocking ---
 across applications! Unix programmers aren't supposed to care about the
 source of the stream, but sadly it doesn't work that way.
 
 I found a book that explains this in a *footnote*. It also explains how
 SVR4-derived systems (e.g., Solaris) differ from BSD-derived systems
 (e.g., FreeBSD, Linux sortof) in non-blocking I/O.
 
 I've changed MzScheme so that it makes output descriptors non-blocking
 only during the interval that MzScheme writes (instead of the whole
 time that MzScheme is running). In theory, this doesn't fix anything;
 race conditions are possible, and unixes are insufficiently defined to
 say what should happen to process A blocked on device D when process B
 temporarily makes D non-blocking. Nevertheless, the fix seems to work
 in practice. For example, with the change, `more' works correctly with
 output piped from MzScheme, even if MzScheme sends output to stderr in
 parallel. (Stderr is relevant because `more' reads user input from
 whatever device is attached to stderr - very strange.)
 
 Paul: When 102/5 is released, please let me know whether it fixes the
 problems you saw with MzScheme and vi.
 
 Thanks,
 Matthew

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Mon Jan 17 19:12:26 2000
State-Changed-Why:
Fix seems to work in practice.
 
>Unformatted:
