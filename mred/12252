From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Oct  3 11:58:45 2011
Received: from mail-qw0-f44.google.com (mail-qw0-f44.google.com [209.85.216.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p93FwcAS015685
	for <bugs@bugs.plt-scheme.org>; Mon, 3 Oct 2011 11:58:38 -0400
Message-Id: <201110031558.p93FwUk6015645@champlain.ccs.neu.edu>
Date: Mon, 3 Oct 2011 11:58:30 -0400
From: avilladsen@uchicago.edu
To: bugs@racket-lang.org
Subject: DrRacket Fails to Quit at Logout

>Number:         12252
>Category:       mred
>Synopsis:       DrRacket Fails to Quit at Logout
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Oct 03 12:00:02 -0400 2011
>Last-Modified:  Thu May 21 07:44:01 -0400 2015
>Originator:     Andrew Villadsen
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.3
>Environment:
macosx "Darwin nightingale.cs.uchicago.edu 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 242405000

Collections:
("/Users/visitor/Library/Racket/5.1.3/collects"
 (non-existent-path))
("/Applications/Racket v5.1.3/collects"
 ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))

Computer Language: (("Initial language" "No language chosen") #(#t print mixed-fraction-e #f #t debug))
>Description:
DrRacket will not quit at logout, regardless of whether any unsaved files are open. Sometimes need to force quit DrRacket, though it appears responsive.
>How-To-Repeat:
Open DrRacket. Attempt to logout.
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: avilladsen@uchicago.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12252: DrRacket Fails to Quit at Logout
Date: Mon, 3 Oct 2011 11:28:09 -0500

 On Mon, Oct 3, 2011 at 11:00 AM,  <avilladsen@uchicago.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12252
 >
 
 Running 'gracket' with the program below under Lion causes gracket to
 cancel logout, but after seeing the dialog box. The frame does not got
 away.
 
 The docs don't say what the default response from can-close? is
 supposed to be, but assuming it returns #t, then I think the program
 below should not cancelled the logout.
 
 #lang racket/gui
 (send (new frame% [label "frame"]) show #t)
 (let ([old (application-quit-handler)])
   (application-quit-handler
    (λ ()
      (message-box "hi" "hi")
      (old))))
 
 Robby
 

From: Michael Tiedtke <michael.tiedtke@o2online.de>
To: racket-users@googlegroups.com, bugs@racket-lang.org
Cc: 
Subject: Re: mred/12252: DrRacket Fails to Quit at Logout
Date: Thu, 21 May 2015 06:50:44 +0200

 Il giorno 20/mag/2015, alle ore 16.44, Matthew Flatt ha scritto:
 
 > It's been a few years since I last looked at this. If I remember
 > correctly, the problem is a mismatch between the `racket/gui` model of
 > eventspaces and the way that shutdown notifications and responses work
 > in Cocoa. The mismatch makes it difficult for `racket/gui` to defer its
 > answer to the OS while performing further GUI activity that might
 > involve events and/or threads.
 
 https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/NSApplicationDelegate/applicationShouldTerminate:
 
 
 > 
 > The `applicationShouldTerminate:` handler is in
 > 
 > gui-lib/mred/private/wx/cocoa/queue.rkt
 > 
 > While it may appear that returning `NSTerminateLater` is the solution,
 > I think that would leave Cocoa still driving the event loop, which
 > locks out Racket from changing threads (because it's not safe to change
 > Racket threads while Cocoa is on he stack), and so on.
 
 Is it really on the stack? I don't believe Cocoa's run loop does really exist as such, others say
 it has to do with the speed of sonic waves or windows but in fact there is a message
 passing protocol defined: NSApplicationDelegateProtocol
 https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/NSApplicationDelegate/applicationShouldTerminate:
 
 NSTerminateLater changes the mode of the run loop to NSModalPanelRunLoopMode
 which should work like [when showing] any other modal dialog.
 
 Eventually the application should answers with replyToApplicationShouldTerminate.
 
 Perhaps when someone really needs to ask the user ot wants to autosave sth before
 quitting than one migh try to operate from within that single thread event with the Cocoa
 thingy on the stack.
 
 BTW a subclass of dialog% may look like a modal dialog but clicking in the parent
 window changes focus. Well, it doesn't change completely but I get a kcg-warning
 about the focus and I can access the menu of the parent window again. 
From: Michael Tiedtke <michael.tiedtke@o2online.de>
To: racket-users@googlegroups.com, bugs@racket-lang.org
Cc: 
Subject: Re: [racket-users] Re: mred/12252: DrRacket Fails to Quit at Logout
Date: Thu, 21 May 2015 13:42:08 +0200

 After some more research into the issue I have found the following description which sounds familiar.
 
 http://www.cocoabuilder.com/archive/cocoa/235068-nsapplication-appleevent-and-cfrunloop-source-strange-interaction.html
 > It is working nicely, except for the quit sequencing.  In Linux/GTK, the analogous mechanism is installing the read end of a pipe using g_io_add_watch, writing to the pipe when a message is posted to my framework, and it works perfectly.
 > 
 > For the Cocoa implementation, I have implemented an applicationShouldTerminate app delegate notification handler which posts a quit request to my framework (triggering it by way of the CFRunLoopSource) and returns NSTerminateCancel.  That last detail is very unfortunate, but if I return NSTerminateLater the app goes into a modal state and neglects the CFRunLoop, with my framework's quit request not being received as a consequence.
 
 ...
 > It's not neglecting the run loop.  It's just running it in a different
 > mode.  The documentation for NSTerminateLater says it's running it in
 > the NSModalPanelRunLoopMode.  So, just add your run loop source in
 > that same mode, in addition to the default mode.  Then, you can use
 > NSTerminateLater and all of your headaches vanish.
 > 
 > Cheers,
 > Ken
 
 
 In Racket gui-lib "mred/.../cocoa/.../queue.rkt" line 264 adds the source via socket but I don't know how to recreate the solution in that way with the "new" modal run loop in the applicationShouldTerminate implementation. I especially can't tell which interactions there might be with the polling pumping system which I do not completely understand.  HTH nonetheless
 
 
 Il giorno 21/mag/2015, alle ore 06.50, Michael Tiedtke ha scritto:
 
 > 
 > Il giorno 20/mag/2015, alle ore 16.44, Matthew Flatt ha scritto:
 > 
 >> It's been a few years since I last looked at this. If I remember
 >> correctly, the problem is a mismatch between the `racket/gui` model of
 >> eventspaces and the way that shutdown notifications and responses work
 >> in Cocoa. The mismatch makes it difficult for `racket/gui` to defer its
 >> answer to the OS while performing further GUI activity that might
 >> involve events and/or threads.
 > 
 > https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/NSApplicationDelegate/applicationShouldTerminate:
 > 
 > 
 >> 
 >> The `applicationShouldTerminate:` handler is in
 >> 
 >> gui-lib/mred/private/wx/cocoa/queue.rkt
 >> 
 >> While it may appear that returning `NSTerminateLater` is the solution,
 >> I think that would leave Cocoa still driving the event loop, which
 >> locks out Racket from changing threads (because it's not safe to change
 >> Racket threads while Cocoa is on he stack), and so on.
 > 
 > Is it really on the stack? I don't believe Cocoa's run loop does really exist as such, others say
 > it has to do with the speed of sonic waves or windows but in fact there is a message
 > passing protocol defined: NSApplicationDelegateProtocol
 > https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/NSApplicationDelegate/applicationShouldTerminate:
 > 
 > NSTerminateLater changes the mode of the run loop to NSModalPanelRunLoopMode
 > which should work like [when showing] any other modal dialog.
 > 
 > Eventually the application should answers with replyToApplicationShouldTerminate.
 > 
 > Perhaps when someone really needs to ask the user ot wants to autosave sth before
 > quitting than one migh try to operate from within that single thread event with the Cocoa
 > thingy on the stack.
 > 
 > BTW a subclass of dialog% may look like a modal dialog but clicking in the parent
 > window changes focus. Well, it doesn't change completely but I get a kcg-warning
 > about the focus and I can access the menu of the parent window again. 
 > 
 > -- 
 > You received this message because you are subscribed to the Google Groups "Racket Users" group.
 > To unsubscribe from this group and stop receiving emails from it, send an email to racket-users+unsubscribe@googlegroups.com.
 > For more options, visit https://groups.google.com/d/optout.
 > 
 
 
