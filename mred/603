From matthias@cs.rice.edu  Fri May  8 08:20:40 1998
Received: from africa.cs.rice.edu (africa.cs.rice.edu [128.42.1.175])
          by cs.rice.edu (8.8.5/8.8.4) with ESMTP
	  id IAA15640 for <plt-gnats@cs.rice.edu>; Fri, 8 May 1998 08:20:39 -0500 (CDT)
Message-Id: <199805081320.IAA28837@africa.cs.rice.edu>
Date: Fri, 8 May 1998 08:20:39 -0500 (CDT)
From: Matthias Felleisen <matthias@cs.rice.edu>
Reply-To: matthias@rice.edu
To: plt-gnats@cs.rice.edu
Subject: mred seg faults predictably
X-Send-Pr-Version: 3.101

>Number:         603
>Category:       mred
>Synopsis:       mred seg faults predictably
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Fri May 08 09:30:02 -0400 1998
>Last-Modified:  Sun Mar 28 02:36:52 -0500 2004
>Originator:     Matthias Felleisen
>Release:        unknown
>Organization:
titan
>Environment:
	52

>Description:
	see ~matthias/Bug for files that cause seg-faults

>How-To-Repeat:
	edit HOST in bug.ss to "xxx"
	rcp files to machine "yyy"
	run bug-server on "xxx"
	run bug-client on "yyy" 
	bug-server seg-faults (at least on xxx = acer)

>Fix:

>Release-Note:

>Audit-Trail:

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Paul Steckler <steck@cs.rice.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/603: mred seg faults predictably
Date: Fri, 8 May 1998 08:59:46 -0500 (CDT)

 	`Robert Bruce Findler' made changes to this PR.
 
 --- /tmp/gnatsa0010u	Fri May  8 08:56:25 1998
 +++ /tmp/gnatsb0010u	Fri May  8 08:59:37 1998
 @@ -43,3 +43,85 @@
  
  >Audit-Trail:
  >Unformatted:
 +
 +That directories contains bug-client and bug-ship, which are executable
 +shell scripts. It also contains two scheme files, bug.ss and
 +driver-bug.ss. All four of those files are listed below. Als in the
 +directory is mars.gif. IT shouldn't matter what mars.gif is, but  that is
 +usually located in PLTHOME/collects/icons/mars.gif
 +
 +;; -- bug-client --
 +
 +#!/bin/sh
 +string=? ; exec mred -u -p mars.gif "Battle" 10 10 -- -f $0 "$@"
 +
 +(load "bug.ss")
 +
 +(define (mred:startup) (client))
 +
 +;; -- bug-ship --
 +
 +#!/bin/sh
 +string=? ; exec mred -u -p mars.gif "Battle" 10 10 -- -f $0 "$@"
 +;; string=? ; exec mred -x -u -p /home/scheme/plt/collects/icons/mars.gif "Battle" 10 10 -- -f $0 "$@"
 +
 +(load "bug.ss")
 +
 +(define (mred:startup) (server))
 +
 +;; -- bug.ss --
 +
 +(define (server) (make-peer (lambda () (tcp-accept (tcp-listen TCP-PORT 1)))))
 +
 +(define (client) (make-peer (lambda () (tcp-connect HOST TCP-PORT))))
 +
 +(define (make-peer foo)
 +  (printf "starting up~n")
 +  (call-with-values foo (lambda (ip op) (display 'GO op)))
 +  (mred:exit #f))
 +
 +(define TCP-PORT 30233)
 +
 +(define HOST "jam.rice.edu")
 +
 +;; -- driver-bug.ss --
 +
 +;; ---------------------------------------------------------------------------------------
 +;; Driver Module
 +
 +;; server
 +(define (server)
 +  (thread
 +   (lambda ()
 +     (let ((bridge (call-with-values (lambda () (tcp-accept (tcp-listen TCP-PORT 1))) bridge)))
 +       (make-peer apply bridge)))))
 +
 +;; client
 +(define (client)
 +  (thread
 +   (lambda ()
 +     (let ((bridge (call-with-values (lambda () (tcp-connect HOST TCP-PORT)) bridge)))
 +       (make-peer bridge apply)))))
 +
 +;; make-peer : (union apply (bridge input-port output-port))
 +;;             (union (bridge input-port output-port) apply) -> void
 +(define (make-peer use0 use1)
 +  (use0 player0:set-up (list 3 'SERVER))
 +  (use1 player1:set-up (list 3 'CLIENT))
 +  (mred:exit #f))
 +
 +;; bridge : input-port output-port -> (X -> void)
 +(define (bridge ip op)
 +  (local ((define (bridge player1:action arg)
 +	    (display arg op)
 +	    (let ((x (read ip)))
 +	      (printf "read: ~s~n" x)
 +	      (if (eof-object? x) (list #f 'hukairs) x))))
 +    bridge))
 +
 +;; TCP-PORT : an int between 1 and 2^16
 +(define TCP-PORT 40233)
 +
 +(define HOST "jam.rice.edu")
 +
 +(if (string=? (vector-ref argv 0) "client") (client) (server))

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Wed May 13 19:20:06 1998
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Wed May 13 19:20:15 1998
State-Changed-Why:
New exit handler released.

>Unformatted:
 
 That directories contains bug-client and bug-ship, which are executable
 shell scripts. It also contains two scheme files, bug.ss and
 driver-bug.ss. All four of those files are listed below. Als in the
 directory is mars.gif. IT shouldn't matter what mars.gif is, but  that is
 usually located in PLTHOME/collects/icons/mars.gif
 
 ;; -- bug-client --
 
 #!/bin/sh
 string=? ; exec mred -u -p mars.gif "Battle" 10 10 -- -f $0 "$@"
 
 (load "bug.ss")
 
 (define (mred:startup) (client))
 
 ;; -- bug-ship --
 
 #!/bin/sh
 string=? ; exec mred -u -p mars.gif "Battle" 10 10 -- -f $0 "$@"
 ;; string=? ; exec mred -x -u -p /home/scheme/plt/collects/icons/mars.gif "Battle" 10 10 -- -f $0 "$@"
 
 (load "bug.ss")
 
 (define (mred:startup) (server))
 
 ;; -- bug.ss --
 
 (define (server) (make-peer (lambda () (tcp-accept (tcp-listen TCP-PORT 1)))))
 
 (define (client) (make-peer (lambda () (tcp-connect HOST TCP-PORT))))
 
 (define (make-peer foo)
  (printf "starting up~n")
  (call-with-values foo (lambda (ip op) (display 'GO op)))
  (mred:exit #f))
 
 (define TCP-PORT 30233)
 
 (define HOST "jam.rice.edu")
 
 ;; -- driver-bug.ss --
 
 ;; ---------------------------------------------------------------------------------------
 ;; Driver Module
 
 ;; server
 (define (server)
  (thread
   (lambda ()
     (let ((bridge (call-with-values (lambda () (tcp-accept (tcp-listen TCP-PORT 1))) bridge)))
       (make-peer apply bridge)))))
 
 ;; client
 (define (client)
  (thread
   (lambda ()
     (let ((bridge (call-with-values (lambda () (tcp-connect HOST TCP-PORT)) bridge)))
       (make-peer bridge apply)))))
 
 ;; make-peer : (union apply (bridge input-port output-port))
 ;;             (union (bridge input-port output-port) apply) -> void
 (define (make-peer use0 use1)
  (use0 player0:set-up (list 3 'SERVER))
  (use1 player1:set-up (list 3 'CLIENT))
  (mred:exit #f))
 
 ;; bridge : input-port output-port -> (X -> void)
 (define (bridge ip op)
  (local ((define (bridge player1:action arg)
 	    (display arg op)
 	    (let ((x (read ip)))
 	      (printf "read: ~s~n" x)
 	      (if (eof-object? x) (list #f 'hukairs) x))))
    bridge))
 
 ;; TCP-PORT : an int between 1 and 2^16
 (define TCP-PORT 40233)
 
 (define HOST "jam.rice.edu")
 
 (if (string=? (vector-ref argv 0) "client") (client) (server))
