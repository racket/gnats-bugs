From apache@plt-scheme.org Fri Jan  7 13:34:36 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j07IYanN007392
	for <bugs@plt-scheme.org>; Fri, 7 Jan 2005 13:34:36 -0500
Message-Id: <200501071834.j07IYa1f007390@champlain.ccs.neu.edu>
Date: Fri, 7 Jan 2005 13:34:36 -0500
From: jacobm@cs.uchicago.edu
To: bugs@plt-scheme.org
Subject: "Seg fault (internal error) at 0xc" in 3m

>Number:         7168
>Category:       mred
>Synopsis:       "Seg fault (internal error) at 0xc" in 3m
>Class:          sw-bug
>Responsible:    awick
>Severity:       critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jan 07 13:35:01 -0500 2005
>Last-Modified:  Fri Feb 04 18:29:11 -0500 2005
>Originator:     Jacob Matthews
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.26
>Environment:
unix "Linux prelude.cs.uchicago.edu 2.4.18-1-686-smp #1 SMP Wed Apr 14 18:42:49 UTC 2004 i686 unknown" (i386-linux/3m) (get-display-depth) = 24
Docs Installed:
(#<path:/home/jacobm/plt299/plt/collects/doc/tools> #<path:/home/jacobm/plt299/plt/collects/doc/drscheme> #<path:/home/jacobm/plt299/plt/collects/doc/mred> #<path:/home/jacobm/plt299/plt/collects/doc/srfi> #<path:/home/jacobm/plt299/plt/collects/doc/web-server> #<path:/home/jacobm/plt299/plt/collects/doc/mzlib> #<path:/home/jacobm/plt299/plt/collects/doc/misclib> #<path:/home/jacobm/plt299/plt/collects/doc/mzscheme> #<path:/home/jacobm/plt299/plt/collects/doc/help>)
Collections:
((#<path:/home/jacobm/.plt-scheme/299.26/collects> "non-existent path") (#<path:/home/jacobm/plt299/plt/collects> (#<path:CVS> #<path:afm> #<path:algol60> #<path:info-domain> #<path:doc> #<path:browser> #<path:planet> #<path:alignment> #<path:backward> #<path:browser-repl> #<path:compiler> #<path:browser2> #<path:classbox> #<path:cvs-time-stamp> #<path:cogen> #<path:defaults> #<path:debug> #<path:dromedary> #<path:countdwn> #<path:drscheme> #<path:crocodile> #<path:dynext> #<path:drjava> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:drs-tools> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:embedded-gui> #<path:helpdoc> #<path:handin-client> #<path:handin-server> #<path:help> #<path:drscheme-jr> #<path:htdch> #<path:hierlist> #<path:file-browser> #<path:guserspce> #<path:htdp> #<path:html> #<path:gusrspce> #<path:hierarchy> #<path:icons> #<path:java> #<path:lang> #<path:launcher> #<path:libsndfile> #<path:make> #<path:mrdemo> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mrspidey> #<path:mysterx> #<path:mzcom> #<path:mzdynext> #<path:mzlib> #<path:mzos> #<path:mzscheme> #<path:net> #<path:homework-servlet> #<path:sml> #<path:openssl> #<path:parser-tools> #<path:homework-submission> #<path:preprocessor> #<path:profj> #<path:html-generate> #<path:icfp-robot-gui> #<path:newspidey> #<path:readline> #<path:reduction-semantics> #<path:plot> #<path:ollie-world> #<path:setup> #<path:sgl> #<path:sirmail> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:tll> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:profjBoxes> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:profjWizard> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:python> #<path:quasiquote> #<path:version> #<path:xml> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:release-notes> #<path:robotclient> #<path:stepper-graphical> #<path:system> #<path:test> #<path:typeset> #<p!
 ath:user
spce> #<path:zodiac>)))
Human Language: english
>Description:
I can repeatably cause DrScheme to crash with the error

Seg fault (internal error) at 0xc

in 3m. The non-3m DrScheme doesn't crash the same way,
but mred does eventually consume all available memory
and crash when it can't allocate any more. Both of
these things just started showing up with the CVS
build from a couple days ago, and are still present
in the code I just checked out.
>How-To-Repeat:
1. Make a file test.ss containing
(module test mzscheme with-output-to-file)

2. Run
$ drscheme3m test.ss

3. When DrScheme comes up, put the cursor on the word
with-output-to-file and then hit F1.

4. When help-desk appears, click on the first entry
for with-output-to-file. 

When I do this, the os kills mred and I get the
error message above.

---
This is one way to reproduce the bug, but
it seems to be happening all the time to me at random
moments when I'm using DrScheme3m or DrScheme (in which
case the os kills mred with an out of memory error).
It seems to come up especially often when I'm using
Help Desk.
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: jacobm@cs.uchicago.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7168: "Seg fault (internal error) at 0xc" in 3m
Date: Fri, 7 Jan 2005 13:11:37 -0700

 At Fri, 7 Jan 2005 13:35:01 -0500, jacobm@cs.uchicago.edu wrote:
 > I can repeatably cause DrScheme to crash with the error
 > 
 > Seg fault (internal error) at 0xc
 > 
 > in 3m.
 
 Thanks for the detailed instructions, but I haven't been able to
 generate a crash. Can you get a stack trace using gdb?:
 
  % cd <builddir>/mred
  % gdb mred
  (gdb) run -mvqM drscheme test.ss
  ... [crash]
  (gdb) where
 
 Thanks,
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: jacobm@cs.uchicago.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7168: "Seg fault (internal error) at 0xc" in 3m
Date: Fri, 7 Jan 2005 13:12:47 -0700

 Actually, when you run 3m through
 
  % gdb mred3m
 
 you'll need 
 
  (gdb) handle SIGSEGV nostop noprint
 
 before `run' to make progress and get to the real crash.
 
 
 Matthew
 
From: Jacob Matthews <jacobm@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/7168: "Seg fault (internal error) at 0xc" in 3m
Date: Fri, 07 Jan 2005 14:40:09 -0600

 Okay. Here's what it tells me:
 
 #0  0x40426781 in kill () from /lib/libc.so.6
 #1  0x40426464 in raise () from /lib/libc.so.6
 #2  0x40427be1 in abort () from /lib/libc.so.6
 #3  0x08295318 in designate_modified (p=0x10) at 
 ../../../mzscheme/gc2/newgc.c:1833
 #4  0x08295334 in fault_handler (sn=11, si=0xbfe0c498, ctx=0xbfe0c518)
     at ../../../mzscheme/gc2/sighand.c:22
 #5  0x4052302e in pthread_sighandler_rt () from /lib/libpthread.so.0
 #6  0x404266b0 in sigaction () from /lib/libc.so.6
 #7  0x0828c0e1 in cons_cell_MARK (p=0x45dbffe8) at xsrc/type.c:2305
 #8  0x08295e40 in propagate_marks () at ../../../mzscheme/gc2/newgc.c:2060
 #9  0x08296b9c in garbage_collect (force_full=0)
     at ../../../mzscheme/gc2/newgc.c:2548
 #10 0x08293f2a in allocate_big (sizeb=2029568, type=1)
     at ../../../mzscheme/gc2/newgc.c:344
 #11 0x0829430e in GC_malloc_atomic (s=2029568) at 
 ../../../mzscheme/gc2/newgc.c:395
 #12 0x08258077 in copy_stack (b=0x0, base=0x43dc7040, start=0xbfffc1e0,
     gc_var_stack_in=0xbfe0ca20) at xsrc/setjmpup.c:1473
 #13 0x082582ae in scheme_setjmpup_relative (b=0x43dc7044, base=0x43dc7040,
     start=0xbfffc1e0, c=0x0) at xsrc/setjmpup.c:1589
 #14 0x081ef59f in scheme_handle_stack_overflow (k=0x8252f84 <regmatch_k>)
     at xsrc/eval.c:2070
 #15 0x08253085 in regmatch (rw=0xbfe0cc14, prog=29) at xsrc/regexp.c:2687
 #16 0x08252bd1 in regtry (prog=0x42a0dc3c, string=0x0, stringpos=0, 
 stringlen=0,
     startp=0x43dc6ff4, endp=0x43dc6ffc, rw=0xbfe0cc14, atstart=1)
     at xsrc/regexp.c:2509
 #17 0x08252cf1 in regtry_port (prog=0x42a0dc3c, port=0x426fe2b8, 
 unless_evt=0x0,
     nonblock=0, startp=0x43dc6ff4, endp=0x43dc6ffc, work_string=0xbfe0cdbc,
     len=0xbfe0cccc, size=0xbfe0ccd0, skip=0, maxlen=0x0, peekskip=0x0, 
 atstart=1)
     at xsrc/regexp.c:2548
 #18 0x082525bd in regexec (who=0x82d639a "regexp-match", prog=0x42a0dc3c,
     string=0x0, stringpos=0, stringlen=-2, startp=0x43dc6ff4, 
 endp=0x43dc6ffc,
     port=0x426fe2b8, unless_evt=0x0, nonblock=0, stringp=0xbfe0cdbc, 
 peek=0,
     get_offsets=0, discard_oport=0x0, portstart=0x1, portend=0x0,
     _dropped=0xbfe0cdc0) at xsrc/regexp.c:2312
 #19 0x082556b1 in gen_compare (name=0x82d639a "regexp-match", pos=0, 
 argc=2,
     argv=0x452de804, peek=0, nonblock=0) at xsrc/regexp.c:4013
 #20 0x08255933 in compare (argc=2, argv=0x452de804) at xsrc/regexp.c:4100
 #21 0x081f6303 in scheme_do_eval (obj=0x84acc50, num_rands=-1, 
 rands=0x452de804,
     get_value=1) at xsrc/eval.c:5316
 #22 0x081f7005 in scheme_do_eval (obj=0x84c03b8, num_rands=-1, 
 rands=0x452de80c,
     get_value=1) at xsrc/eval.c:5908
 #23 0x081f7005 in scheme_do_eval (obj=0x84c32d8, num_rands=-1, 
 rands=0x452de810,
     get_value=1) at xsrc/eval.c:5908
 #24 0x081f75b8 in scheme_do_eval (obj=0x42a0db5c, num_rands=-1, 
 rands=0x452de81c,
     get_value=1) at xsrc/eval.c:6189
 #25 0x081f75b8 in scheme_do_eval (obj=0x42a0e744, num_rands=-1, 
 rands=0x452de848,
     get_value=1) at xsrc/eval.c:6189
 #26 0x081f75b8 in scheme_do_eval (obj=0x42a0fa48, num_rands=-1, 
 rands=0x83a8654,
     get_value=1) at xsrc/eval.c:6189
 #27 0x081f71f6 in scheme_do_eval (obj=0x84c0398, num_rands=-1, 
 rands=0x452de878,
     get_value=1) at xsrc/eval.c:6000
 #28 0x081f71f6 in scheme_do_eval (obj=0x84c0398, num_rands=-1, 
 rands=0x452de890,
     get_value=1) at xsrc/eval.c:6000
 #29 0x081f71f6 in scheme_do_eval (obj=0x84c0398, num_rands=-1, 
 rands=0x452de8a8,
     get_value=1) at xsrc/eval.c:6000
 #30 0x081f71f6 in scheme_do_eval (obj=0x84c0398, num_rands=-1, 
 rands=0x452de8c0,
     get_value=1) at xsrc/eval.c:6000
 #31 0x081f71f6 in scheme_do_eval (obj=0x84c0398, num_rands=-1, 
 rands=0x452de8d8,
     get_value=1) at xsrc/eval.c:6000
 #32 0x081f71f6 in scheme_do_eval (obj=0x84c0398, num_rands=-1, 
 rands=0x452de8f0,
     get_value=1) at xsrc/eval.c:6000
 #33 0x081f71f6 in scheme_do_eval (obj=0x84c0398, num_rands=-1, 
 rands=0x452de908,
     get_value=1) at xsrc/eval.c:6000
 
 ....
 
 etc, thousands of times. (I scrolled to #5630 and then stopped the 
 output.) I tried to find the outermost call
 using bt -20, but this happened:
 
 (gdb) bt -20
 Cannot access memory at address 0x15f4f939
 
 So I can't say for sure what's at the other end of the loop.
 
 If you need me to do anything else, just holler.
 
 -jacob
 
 Matthew Flatt wrote:
 
 >Actually, when you run 3m through
 >
 > % gdb mred3m
 >
 >you'll need 
 >
 > (gdb) handle SIGSEGV nostop noprint
 >
 >before `run' to make progress and get to the real crash.
 >
 >
 >Matthew
 >
 >
 >  
 >
 

Responsible changed from "nobody" to "awick" by eli at Fri, 21 Jan 2005 23:15:49 -0500
Reason>>> mred 3m

State changed from "open" to "closed" by awick at Fri, 04 Feb 2005 18:29:11 -0500
Reason>>> A machine set up problem, not a PLT bug

