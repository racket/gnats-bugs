From brl@cs.brown.edu  Tue Sep 23 16:02:44 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id QAA05756
	for <bugs>; Tue, 23 Sep 2003 16:02:44 -0400
Message-Id: <200309232002.QAA05756@champlain.ccs.neu.edu>
Date: Tue, 23 Sep 2003 16:02:44 -0400
From: Ben Landon <brl@cs.brown.edu>
To: bugs@plt-scheme.org
Subject: It takes a long time to break after pressing the 'Break' button 

>Number:         6468
>Category:       mred
>Synopsis:       It takes a long time to break after pressing the 'Break' button
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Sep 23 16:05:00 -0400 2003
>Closed-Date:    Fri Apr 02 03:06:55 -0500 2004
>Last-Modified:  Fri Apr 02 03:06:55 -0500 2004
>Originator:     Ben Landon
>Organization:
titan
>Submitter-Id:   unknown
>Release:        205
>Environment:
macosx "Darwin murky.local. 6.6 Darwin Kernel Version 6.6: Thu May  1 21:48:54 PDT 2003; root:xnu/xnu-344.34.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("/Users/brl/Library/PLT Scheme/205/collects" ("cs173")) ("/Applications/PLT v205/collects/mzlib/../../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" "afm" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mzlib" "mzscheme" "net" "parser-tools" "profj" "setup" "slibinit" "srfi" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tests" "tex2page" "version" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("CS173" "CS173 Advanced") #6(#f write mixed-fraction-e #f #t debug))
>Description:
I'm working on a program that unfortunately has an infinite 
loop.  While trying to debug this problem, I noticed that it takes
a while for DrScheme to break and stop execution after I hit the 
Break button.  By "a while", I mean over 60 seconds.

I asked Shriram Krishnamurthi about this, and apparently 30 seconds 
should be more than enough time for DrScheme to break/kill 
considering the complexity of programs I'm writing 
(i.e. not very complex).

Note - this is on PLT Scheme version 205 for
OS X.  I'm running OS X 10.2.6 (Jaguar) on 
a 450 MHz G4 Cube with 320 MB of RAM. 

Also Note - This is absolutely not a request
for help with my broken program.  I'm merely
mentioning this bug because > 30 seconds seems
like a long time to wait for a break/kill. 

>How-To-Repeat:
1.) Bring up Dr Scheme from PLT Scheme 205

2.) Open my lousy program - which is copied below this
 description.

3.) Select CS 173 Advanced from the Language/Choose Language
menu item.  If you don't have this language installed, it can
be installed from:
http://www.cs.brown.edu/courses/cs173/2003/cs173.plt 

4.) Hit Execute

5.) Hit the "Break" button in the toolbar/button bar. 

6.) On my machine you'll be waiting from between 2 or 3
seconds (which is rare) to more than a minute (which is
more common).

If you need additional information, please 
; Ben Landon
; brl@cs.brown.edu
; Homework assignment 2 - CS 173 
; This introduces conditionals, functions of zero or more parameters 
; for functions, and recursion. 
; 
; This is the lazy portion of homework assignment two. 
; 
; (define TODO-List
; '("1. Make sure that static scoping is preserved."
;   "2. Make sure that factorial can be computed with the lazy version" 
;   "3. Enforce the rule the expressions named by rec are procs only. )
; 

; 
; The BNF for this language is - 
; 
; <RCFWAE> ::= <num>
;            | {+ <RCFWAE> <RCFWAE> }
;            | {- <RCFWAE> <RCFWAE> }
;            | {* <RCFWAE> <RCFWAE> }
;            | <id> 
;            | {if <RCFWAE> <RCFWAE> <RCFWAE>}
;            | {with {<id> <RCFWAE>} <RCFWAE>}
;            | {rec {{<id> <proc>}*} <RCFWAE>}
;            | {fun {<id>*} <RCFWAE>}
;            | {<RCFWAE> <RCFWAE>*} ; This is an application of a function with zero or more
;                                   ; actual parameters.
; 
; 

; list-of-symbol:list -> boolean 
(define (list-of-symbols? los)
  (cond 
    ( (empty? los) #t )
    ( (and (symbol? (first los))
           (list-of-symbols? (rest los))) #t)
    ( else #f) ))

; list-of-RCFWAE?:list -> boolean 
(define (list-of-RCFWAE? lor)
  (cond
    ( (empty? lor) #t )
    ( (and (RCFWAE? (first lor))
           (list-of-RCFWAE? (rest lor))) #t)
    ( else #f )))

; This predicate is used when defining the data for 
; the rec entry in RCFWAE.
(define (hash-table-of-sym-to-RCFWAE? ht)
  (local ( (define result-list 
             (hash-table-map ht 
                             (lambda (key val)
                               (and (symbol? key)
                                    (RCFWAE? val))))))
    ; All of the elements in result-list should be #t
    (andmap (lambda (b) b) result-list)))

; Define the datatype for the RCFWAE language. 
(define-datatype RCFWAE RCFWAE?
                 [num (n number?)]
                 ; I don't think I could just call this "if" since (if) would then 
                 ; be ambiguous
                 [rcfwae_if (test RCFWAE?) (success-expr RCFWAE?) (fail-expr RCFWAE?)]
                 [id (v symbol?)]
                 [add (lhs RCFWAE?) (rhs RCFWAE?)]
                 [sub (lhs RCFWAE?) (rhs RCFWAE?)]
                 [mul (lhs RCFWAE?) (rhs RCFWAE?)]
                 [with (name symbol?) (named-expr RCFWAE?) (body-expr RCFWAE?)]
                 [fun (formal-param-list list-of-symbols?) 
                      (num-formal-params number?) 
                      (body-expr RCFWAE?)]
                 [app (function-expr RCFWAE?) (args-list list-of-RCFWAE?) (num-args number?)]
                 [rec (id-proc-ht hash-table-of-sym-to-RCFWAE?) (body-expr RCFWAE?)])


; Define the substitution cache datatype.  We're using SubCache rather
; than implementing closures using lambda for this assignment. 

; box-of-RCFWAE? This is a predicate used to enforce the datatype
; for the aRecSub variant of SubCache. 
(define (box-of-RCFWAE? boxed-expr)
  (and (box? boxed-expr)
       (RCFWAE? (unbox boxed-expr))))

; The actual SubCache definition.  Since this is the lazy
; version of asgn2, the cache holds RCFWAE expressions rather
; than FN-values. 
(define-datatype SubCache SubCache? 
                 [emptySub]
                 [aSub (name symbol?) 
                       (named-value RCFWAE?) ; Note that this an RCFWAE because we're lazy
                       (sc SubCache?)]
                 [aRecSub (name symbol?)
                          (boxed-expr box-of-RCFWAE?) ; Note that this is a boxed RCFWAE because we're lazy 
                          (sc SubCache?)])

; add-elements-to-sc 
; This procedure is invoked by the [app] handler in 
; (interp).  It adds the pairs (formal parameter, actual parameter)
; to the environment. 
; list-of-syms is a list of symbol, and list-of-vals is a list of RCFWAE.
; sc is the environment to which these (id,expr) pairs should be added. 
(define (add-elements-to-sc list-of-syms list-of-vals sc)
  (if (= (length list-of-syms) (length list-of-vals))
      (cond 
        ( (empty? list-of-syms) sc)
        ( else (aSub 
                 (first list-of-syms)
                 (first list-of-vals)
                 (add-elements-to-sc 
                  (rest list-of-syms)
                  (rest list-of-vals)
                  sc))))
      (error 'add-elements-to-env "List lengths must be equal")))
  
; Define the FN-value datatype.  This is the thing that is the 
; return value of interp.  
; The return value of interp is either a number of a function. 
(define-datatype FN-value FN-value? 
                 [numV (n number?)]
                 [closureV (formal-param-list list-of-symbols?)
                           (formal-param-count number?)
                           (body-expr RCFWAE?)
                           (env SubCache?)])

; The interpreter returns an FN-value, this is true for both eager 
; and lazy environments. 
; interp:RCFWAE SubCache -> FN-value 
(define (interp expr env)
  (cases RCFWAE expr
         [num (n) (numV n)]
         [rcfwae_if (test-expr s-expr f-expr)
             (local ( (define test-result (interp test-expr env) ) )
              (cases FN-value test-result
                      [numV (n) 
                            (if (> n 0)
                                (interp s-expr env)
                                (interp f-expr env))]
                      [else (error 'interp "Can't test a non-number in an if statement")]))]

         ; lookup calls interp with what I hope is the correct environment. 
         [id (name) (lookup name env)]
         
         [add (lhs rhs) (numV+ (interp lhs env) (interp rhs env))]
         
         [sub (lhs rhs) (numV- (interp lhs env) (interp rhs env))]
         
         [mul (lhs rhs) (numV* (interp lhs env) (interp rhs env))]
         
         [with (name named-expr body-expr)
               (interp body-expr 
                       (aSub name 
                             named-expr
                             env))]
         
         [fun (formal-param-list formal-param-count body-expr) 
              (closureV formal-param-list formal-param-count body-expr env)]
              
         [app (function-expr arg-expr-list actual-param-count)
              ; Both the function and the arg are interpreted in env. 
              ; We have to interp function-expr even in a lazy environment 
              ; This ism to find out which function we're executing.  There is no
              ; doubt that we're going to execute the function specified by function-expr
              ; so this still counts as lazy. 
              (local ( (define which-function (interp function-expr env)) )
                
                (cases FN-value which-function
                       [closureV (formal-param-list formal-param-count body-expr sc) 
                                 (begin 
                                   (if (not (= formal-param-count actual-param-count))
                                       (error 'interp "Mismatch number of formal and actual params")
                                       #t)
                       
                                   (local (( define new-env (add-elements-to-sc 
                                                             formal-param-list arg-expr-list sc)))
                                                                        ; Now make a SubCache that has all of the
                                     ; formal-param, actual-param-expr
                                     (display "interping a function")
                                     (newline)
                                     (dump-ids new-env)
                                     (interp body-expr new-env)))]

                       [else (error 'interp "Cannot apply something that isn't a function")]))]

         [rec (id-proc-ht rec-body-expr) 
           ; Maybe it would have been easier if the id/proc pairs were just implemented as lists. 
           ; instead of in a hash table.
           (local ( (define bound-id-list (hash-table-map id-proc-ht (lambda (key val) key ))) 
                    (define bound-proc-list (hash-table-map id-proc-ht (lambda (key val) val)))
                    (define new-env (cyclically-bind-ids bound-id-list env)))
             (begin 
               ; FIXME - I'm not sure what to do with this for lazy application. 
               (cyclically-bind-funs bound-id-list bound-proc-list new-env)
               (interp rec-body-expr new-env)))]))


(define (dump-ids env)
  (cases SubCache env
         [emptySub () 
                   (begin 
                     (display "Empty")
                     (newline)
                     #f)]
                   
         [aSub (sub-id body-expr sc)
               (begin 
                 (display "aSub - ")
                 (display sub-id)
                 (newline)
                 (dump-ids sc))]
         
         [aRecSub (rec-sub-id box-of-body-expr sc)
                  (begin
                    (display "aRecSub - ")
                    (display rec-sub-id)
                    (newline)
                    (dump-ids sc))]))
         
; cyclically-bind-ids:lo-id SubCache -> SubCache
; lo-id is "list of id"
; This is still correct even for lazy application - we're
; just adding identifiers to the environment.  Note that these
; identifiers are represented as Scheme symbols.
(define (cyclically-bind-ids lo-id env)
  (if (empty? lo-id)
      env
      (aRecSub (first lo-id) (box (num 1729)) (cyclically-bind-ids (rest lo-id) env))))

; cyclically-interp: <list-of symbol> <list-of RCFWAE> SubCache -> SubCache 
; lo-id = "list of id" 
; lo-bp = "list of bound proc"

(define (cyclically-bind-funs lo-id lo-bp sc-element-to-modify)
  (if (not (= (length lo-id) (length lo-bp)))
      (error 'cyclically-interp "id list and proc list MUST have the same length.")
       (if (empty? lo-id)
           sc-element-to-modify    ; No more elements to process, so the env doesn't need to be transformed
           (local ( (define bound-fun (first lo-bp)) ) 
             (cases RCFWAE bound-fun
                    [fun (formal-parameter-list formal-parameter-count body-expr)
                         ; The function must be interpreted in 'env' so that all the 
                         ; the bindings in the rec are available. 
                         (cases SubCache sc-element-to-modify 
                                [aRecSub (name boxed-val rest-sc)
                                         (set-box! boxed-val bound-fun)
                                         (cyclically-bind-funs (rest lo-id) (rest lo-bp) rest-sc)]
                                [else (error 'cyclically-interp "Cyclically binding must be done on aRecSub types only.")])
                         sc-element-to-modify]
                    [else (error 'cyclically-bind-funs "RCFWAE bound in rec must be a fun.")])))))
                      
; lookup:symbol SubCache -> RCFWAE 
; The return value from lookup is RCFWAE (intead of FN-value) because 
; this system is eager.
; Note that in the lazy approach to function application we have to now interp 
; the result of lookup.  This is the very essence of laziness.  We don't interp the value
; until we need it (e.g. look it up in a cache).  Eagerness is computing the value
; and placing the value in the substitution cache. 
(define (lookup want-id env)
  (cases SubCache env
         [emptySub () (error 'lookup "Could not find want-id in an empty environment")]
         [aSub (named-id named-value sc) 
               (if (symbol=? named-id want-id)
                   (interp named-value env)
                   (lookup want-id sc))]
         [aRecSub (named-id box-value sc) 
                  (if (symbol=? named-id want-id)
                      (interp (unbox box-value) env)
                      (lookup want-id sc))]))

   
; Utility functions for dealing with numV.

; numV-n:numV -> number
; Returns the number from a numV
(define (numV-n n)
  (cases FN-value n
         [numV (num) num]
         [closureV (param-list param-count body-expr env) 
                   (error 'numV-n "Cannot get number from a closure")]))


; numV+:numV numV -> numV 
; Adds two numVs and returns the result as a numV
(define (numV+ n1 n2) 
  (numV (+ (numV-n n1) (numV-n n2))))
 

; numV-:numV numV -> numV
; Subtracts two numVs and returns the result as a numV
(define (numV- n1 n2)
  (numV (- (numV-n n1) (numV-n n2))))

; numV*:numV numV -> numV
; Multiplies two numVs and returns the restuls as a numV
(define (numV* n1 n2)
  (numV (* (numV-n n1) (numV-n n2))))
  

; Parse an S-expression into an RCFWAE tree
(define (parse s-expr) 
  (cond 
    ( (symbol? s-expr) (id s-expr) )
    ( (number? s-expr) (num s-expr) )
    ( (cons? s-expr) (parse-cons s-expr) )
    ( else (error 'parse "Found unexpected S-expression.") ) ) ) 

; parse-cons
; Expects a cons of length 4
(define (parse-cons a-cons) 
  (local ( (define first-s-expr (first a-cons)) )
    (cond 
      ( (symbol=? '+ first-s-expr) (add (parse (second a-cons)) (parse (third a-cons))) )
      ( (symbol=? '- first-s-expr) (sub (parse (second a-cons)) (parse (third a-cons))) )
      ( (symbol=? '* first-s-expr) (mul (parse (second a-cons)) (parse (third a-cons))) )
      ( (symbol=? 'with first-s-expr) (parse-with (second a-cons) (third a-cons)) )
      ( (symbol=? 'fun first-s-expr) (parse-fun (second a-cons) (third a-cons)) ) 
      ( (symbol=? 'if first-s-expr) (rcfwae_if (parse (second a-cons))
                                               (parse (third a-cons))
                                               (parse (fourth a-cons)))) 
      ( (symbol=? 'rec first-s-expr) (parse-rec (rest a-cons)) )
      ; Must be a function application 
      ( else (parse-app a-cons)))))
        
(define (parse-with name-list body-expr)
  (if (= 2 (length name-list))
      (with (first name-list) (parse (second name-list)) (parse body-expr))
      (error 'parse-with "Only expected a single armed with.")))
  
(define (parse-fun param-list body-expr)
  (if (list? param-list)
      (fun param-list (length param-list) (parse body-expr))
      (error 'parse-fun "Expected a parameter list.")))

(define (parse-app a-cons)
  ; The cons must be at least of length 1.  The first element would 
  ; be the expression that interps to a closureV
  (cond 
    ( (= 0 (length a-cons)) (error 'parse-app "app must have at least one expression") ) 
    ( (= 1 (length a-cons)) (app (parse (first a-cons)) '() 0 ) )
    ( else (app (parse (first a-cons))
                 (map parse (rest a-cons)) 
                 (length (rest a-cons))))))

; The parameter handed to rec is a cons where the first element 
; (the symbol 'rec) has already been removed. 
; The first element of the cons 

(define (add-sym-proc-from-list-to-ht ht sym-proc-list)
  (if (empty? sym-proc-list) 
      #t ; Dummy variable 
      (begin
        (hash-table-put! ht (first (first sym-proc-list)) (parse (second (first sym-proc-list))))
        (add-sym-proc-from-list-to-ht ht (rest sym-proc-list)))))


; Process a list of pairs by calling the proc p. 
(define (foreach-pair list-of-pair p)
  (if (empty? list-of-pair)
      #t 
      (begin 
        (p (first (first list-of-pair)) (parse (second (first list-of-pair))))
        (foreach-pair (rest list-of-pair) p))))

(define (parse-rec a-cons)
  (if (not (= 2 (length a-cons)))
      (error 'parse-rec "Unexpected number of elements in parse-rec")
      (local ( (define ht (make-hash-table) ) )
        (begin 
          (foreach-pair (first a-cons) 
                        (lambda (key val)
                          (hash-table-put! ht key val)))
          (rec ht (parse (second a-cons)))))))
         

(display "OK, here we go")
(newline)

; Now make a stab at defining the recursive function for factorial 
; in the lazy environment. 
(interp (parse '(rec ((fact (fun (n)
                                 (if n 
                                     (* n (fact (- n 1)))
                                     1))))
                  (fact 1)))
        (emptySub))




   
         
>Fix:
>Release-Note:
>Audit-Trail:
Responsible-Changed-From-To: eli->nobody
Responsible-Changed-By: gnats@champlain.ccs.neu.edu
Responsible-Changed-When: Fri, 26 Mar 2004 05:00:23 -0500
Responsible-Changed-Why:


Responsible changed from "nobody" to "mflatt" by eli at Fri, 02 Apr 2004 03:06:55 -0500
Reason>>> mred (closed)

State changed from "open" to "closed" by eli at Fri, 02 Apr 2004 03:06:55 -0500
Reason>>> I've tried this about 20 times, I got between 1 and three 
seconds in all of them.  The thing that was causing it was 
probably fixed.

>Unformatted:
