From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jul 31 08:01:22 2013
Received: from mail-ob0-f180.google.com (mail-ob0-f180.google.com [209.85.214.180])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r6VC1IuU012311
	for <bugs@bugs.plt-scheme.org>; Wed, 31 Jul 2013 08:01:18 -0400
Message-Id: <201307311201.r6VC1FZE012306@champlain.ccs.neu.edu>
Date: Wed, 31 Jul 2013 08:01:15 -0400
From: jensaxel@soegaard.net
To: bugs@racket-lang.org
Subject: Documentation bug on transformations in dc<%>

>Number:         13939
>Category:       mred
>Synopsis:       Documentation bug on transformations in dc<%>
>Class:          doc-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jul 31 08:04:01 -0400 2013
>Last-Modified:  Mon Oct 21 10:16:22 -0400 2013
>Originator:     Jens Axel Søgaard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4.11--2013-06-11(e23b0b85/d)
>Environment:
macosx "Darwin mba-3.local 12.4.0 Darwin Kernel Version 12.4.0: Wed May  1 17:57:12 PDT 2013; root:xnu-2050.24.15~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: danish
(current-memory-use) 436749624
Links: (links) = ("minipascal" "curly" "readtable" "bind" "bracket" "octokit"); (links #:user? #f) = (); (links #:root? #t) = (#<path:/Users/soegaard/Library/Racket/5.3.4.11/pkgs/installed/markdown> #<path:/Users/soegaard/Library/Racket/5.3.4.11/pkgs/installed/rackjure> #<path:/Users/soegaard/Dropbox/GitHub/frog>); (links #:user? #f #:root? #t) = ()
raco pkg (show):
Installation-wide:
 [none]
User-specific, all-version:
 [none]
User-specific, version-specific (5.3.4.11):
 Package[*=auto]    Checksum                                    Source
 frog               #f                                          (link /Users/soegaard/Dropbox/GitHub/frog)
 markdown*          edc77aa6f1519fe0c581e401fdc9456334a2fae4    (catalog markdown)
 octokit            578f72a7ae7c20637fbae41d63f3dd91882e9017    (catalog octokit)
 rackjure*          a6d7c2fd9a266185d060e350d3f69e43c22d655a    (catalog rackjure)



Collections:
("/Users/soegaard/Library/Racket/5.3.4.11/collects"
 ("info-domain" "installed-teachpacks"))
("/Users/soegaard/release-candidate2/racket/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "compatibility" "compiler" "config" "contract-profile" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "future-visualizer" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "json" "lang" "launcher" "lazy" "macro-debugger" "make" "math" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "pict" "picturing-programs" "pkg" "plai" "planet" "planet2" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "realm" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-engine" "tests" "texpict" "trace!
 " "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t ((main) (test)) #t))
>Description:
The documentation on get-initial-matrix has xy and yx in the wrong order. Compare the order to the Cairo documentation:

http://www.cairographics.org/manual/cairo-cairo-matrix-t.html#cairo-matrix-t

Also see the program below.

http://docs.racket-lang.org/draw/dc___.html?q=dc#%28meth._%28%28%28lib._racket%2Fdraw..rkt%29._dc~3c~25~3e%29._get-initial-matrix%29%29
>How-To-Repeat:
#lang racket
(require racket/draw)

(define-syntax defv (make-rename-transformer #'define-values))
(define-syntax defm (make-rename-transformer #'match-define))
(define-syntax def  (make-rename-transformer #'define))

(define (dc-path->datum p)  ;convert dc-path to datum
  (def dc (new record-dc%))
  (send dc draw-path p)
  (send dc get-recorded-datum))

(define (make-dc-path points) ; make dc-path from 4 points
  (def p (new dc-path%))
  (defm (list (list a b) (list c d) (list e f) (list g h)) points)
  (send p move-to a b)
  (send p curve-to c d e f g h)
  p)

; a circle segment
(define curve '((1 0)
                (1.0 0.265216489839544) 
                (0.8946431596345822 0.5195704027385128)
                (0.7071067811865476 0.7071067811865475)))

; transform a point represented as a list of x and y
(define (transform T point)
  (defm (vector xx yx xy yy x0 y0) T) ; notice the order: yx xy
  (defm (list x y) point)
  (list (+ (* xx x) (* xy y) x0)   ; xnew = xx*x + xy*y + x0
        (+ (* yx x) (* yy y) y0))) ; ynew = yx*x + yy*y + y0

; the "rotate pi/4" transformation
(define rot45 '#(0.7071067811865476 -0.7071067811865475 
                 0.7071067811865475  0.7071067811865476 
                 0 0))

(define (use-builtin-transformation points T)
  (def p (make-dc-path points))
  (send p transform T)
  (dc-path->datum p))

(define (use-our-transformation points T)
  (define transformed-points (map (λ (point) (transform T point)) points))
  (dc-path->datum (make-dc-path transformed-points)))

(define (extract-draw-path recorded-datum)
  (filter (λ (x) (match x [(list 'draw-path _ ...) #t][_ #f])) recorded-datum))

(equal? (extract-draw-path (use-builtin-transformation curve rot45))
        (extract-draw-path (use-our-transformation curve rot45)))
>Fix:
