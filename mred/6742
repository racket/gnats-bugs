From matthias@ccs.neu.edu  Thu Mar  4 11:07:21 2004
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.9.3) with ESMTP id LAA25837
	for <bugs>; Thu, 4 Mar 2004 11:07:20 -0500
Message-Id: <200403041607.LAA25837@champlain.ccs.neu.edu>
Date: Thu, 4 Mar 2004 11:07:20 -0500
From: matthias <matthias@ccs.neu.edu>
To: bugs@plt-scheme.org
Subject: export program as text

>Number:         6742
>Category:       mred
>Synopsis:       export program as text
>Class:          change-request
>Responsible:    mflatt
>Severity:       critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Mar 04 11:10:00 -0500 2004
>Closed-Date:    
>Last-Modified:  Mon Apr 05 00:19:21 -0400 2004
>Originator:     matthias
>Organization:
titan
>Submitter-Id:   unknown
>Release:        206.1-cvs23feb2004
>Environment:
macosx "Darwin america.ccs.neu.edu 7.2.0 Darwin Kernel Version 7.2.0: Thu Dec 11 16:20:23 PST 2003; root:xnu/xnu-517.3.7.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
("/Users/matthias/plt/collects/doc/tour" "/Users/matthias/plt/collects/doc/tools" "/Users/matthias/plt/collects/doc/tex2page" "/Users/matthias/plt/collects/doc/teachpack" "/Users/matthias/plt/collects/doc/t-y-scheme" "/Users/matthias/plt/collects/doc/srfi" "/Users/matthias/plt/collects/doc/r5rs" "/Users/matthias/plt/collects/doc/profj-intermediate" "/Users/matthias/plt/collects/doc/profj-beginner" "/Users/matthias/plt/collects/doc/profj-advanced" "/Users/matthias/plt/collects/doc/mzscheme" "/Users/matthias/plt/collects/doc/mzlib" "/Users/matthias/plt/collects/doc/mzc" "/Users/matthias/plt/collects/doc/mred" "/Users/matthias/plt/collects/doc/misclib" "/Users/matthias/plt/collects/doc/intermediate-lambda" "/Users/matthias/plt/collects/doc/intermediate" "/Users/matthias/plt/collects/doc/insidemz" "/Users/matthias/plt/collects/doc/help" "/Users/matthias/plt/collects/doc/framework" "/Users/matthias/plt/collects/doc/drscheme" "/Users/matthias/plt/collects/doc/beginning-abbr" "/Users/matthias/plt/collects/doc/beginning" "/Users/matthias/plt/collects/doc/advanced")
Collections: 
(("/Users/matthias/Unison/collects/" ("date" "finance" "utils" "web")) ("/Users/matthias/plt/collects" ("afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "dromedary" "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "preprocessor" "profj" "python" "readline" "reduction-semantics" "setup" "sgl" "sirmail" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xelda" "xml")))
 
Human Language: english
 
Teachpack filenames: ("/Users/matthias/plt/teachpack/htdp/draw.ss")
Computer Language: (("Professional Languages" "(module ...)") (#6(#f write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
We need to add a "export as" functionality to DrScheme. 
The functionality should turn all embedded boxes into 
text so that programmers can use the text in some other
IDE in a pinch. (DrScheme may be broken or unavailable
due to a switch of programmer and/or a transition to 
Unicode.) 

The functionality is of mild importance in Scheme. 
We are the best IDE for this language market, so 
who cares. But for the ProfessorJ language, the 
menu is critical. We cannot pretend that we will
ever implement all of Java (1.5). We don't have the
manpower. So sooner or later, the students will want
to continue developing a program that they started
in DrScheme in a different IDE. Say Emacs. 

I propose that test cases receive highest priority
for this extension. They are something everyone 
should deal with and they are the most widely
used box extensions in DrScheme. For the Scheme
languages, I propose to use SchemeUnit (or some
extension) and to integrate SchemeUnit into the
releases. That would finally connect these two
obvious piecs of work. For the ProfessorJ language 
we should export test "fields" (Matthew's
name for them) as JUnit hooks. 

>How-To-Repeat:
>Fix:
>Release-Note:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: matthias <matthias@ccs.neu.edu>, mflatt@cs.utah.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/6742: export program as text
Date: Thu, 4 Mar 2004 09:23:33 -0600

 Does it make sense to change the "binary" file save format to a format
 that is directly readable by other editors (xml, say?). Clearly, the
 files wouldn't be directly usable in other editors, but I'm sure we can
 produce XML that would be easily hand-translatable into actual Java
 code (by stripping away the annotations that say "test case here" for
 example).
 
 Robby

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: all/6742: export program as text
Date: Thu, 4 Mar 2004 10:25:11 -0500

 Do you mean once and forall change BinarySave? This sounds like an 
 orthogonal functionality change to me but I let Matthew speak on that. 
 -- Matthias
 
 
 On Mar 4, 2004, at 10:23 AM, Robby Findler wrote:
 
 > Does it make sense to change the "binary" file save format to a format
 > that is directly readable by other editors (xml, say?). Clearly, the
 > files wouldn't be directly usable in other editors, but I'm sure we can
 > produce XML that would be easily hand-translatable into actual Java
 > code (by stripping away the annotations that say "test case here" for
 > example).
 >
 > Robby
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: all/6742: export program as text
Date: Thu, 4 Mar 2004 09:31:27 -0600

 Yes, that's what I mean. 
 
 Yes, it does seem orthogonal at first glance. Still, since we
 eventually want to "export" all such GUI snips at some point, perhaps
 it makes sense to only have to implement everything once for each snip
 (saving) rather than twice for each snip (saving and exporting).
 
 And, of course, if you have export, someone is going to ask for import
 eventually. Then we'll really be duplicating work with no apparent
 gain.
 
 Robby
 
 At Thu, 4 Mar 2004 10:25:11 -0500, Matthias Felleisen wrote:
 > Do you mean once and forall change BinarySave? This sounds like an 
 > orthogonal functionality change to me but I let Matthew speak on that. 
 > -- Matthias
 > 
 > 
 > On Mar 4, 2004, at 10:23 AM, Robby Findler wrote:
 > 
 > > Does it make sense to change the "binary" file save format to a format
 > > that is directly readable by other editors (xml, say?). Clearly, the
 > > files wouldn't be directly usable in other editors, but I'm sure we can
 > > produce XML that would be easily hand-translatable into actual Java
 > > code (by stripping away the annotations that say "test case here" for
 > > example).
 > >
 > > Robby
 > 
 > 
 

From: Paul Schlie <schlie@comcast.net>
To: Robby Findler <robby@cs.uchicago.edu>, matthias <matthias@ccs.neu.edu>,
        <mflatt@cs.utah.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6742: export program as text
Date: Thu, 04 Mar 2004 23:28:04 -0500

 Hi guys, As this is a subject that's been bugging me for a little while, I
 wonder if it would be reasonable to in lieu of saving "binary boxes", spit
 out it's declarative textual equivalent, such as I've tried to illustrate
 below for scheme based test and UI boxes, for which there may be Java based
 logical equivalents? (personally I'd prefer to avoid the gratuitous use of
 xml if possible, as it's not partially readable, nor is it native to either
 scheme or java based textual code).
 
 #(Test 'my-test
     (invoke <#t-or-#f>
     (title "my test")
     (code <some-test-code>)
     (expect <some-expected-result>)
     (status <passed-or-failed>))
 
 #(Window 'my-window
     (invoke <#t-or-#f>
     (show #t)
     (type 'non-modal)
     (title "my-window)
     (width 321)
     (height 523)
     (max-width 'screen)
     (min-width 'content)
     (max-height 'screen)
     (min-height 'content)
     (alignment 'vertical)
     (text-frame 'text
         (type 'editable)
         (max-height 'parent)
         (min-height 120))
     (layout-frame 'button
         (max-height 'content)
         (min-height 'content)
         (alignment 'horizontal)
         (button 'open
             (title "open")
             (action 'open-callback))
         (button 'close
             (title "close")
             (action 'close-callback))))
 
 Which within DrScheme are optionally displayed as either text, or its
 graphical editable "embedded box" counterpart; and when executed expands
 into a set of function definitions which correspond the objects defined
 within the parameterized "embedded box" template which can be used in
 procedural code, and is optionally automatically invoked (instantiated and
 executed) if parameterized to do so by default. Resulting in the following
 hypothetical corresponding definitions for example?
 
 (my-test) -> executes and updates display if (my-test 'invoke) -> #t
 (my-test 'invoke) -> #t or #f
 (my-test 'invoke <#t-or-#f>) ; sets parameter
 (my-test 'title) -> "my test"
 (my-test 'title <title>) ; sets parameter
 (my-test 'code) -> <some-test-code>
 (my-test 'code <code>) ; sets parameter
 (my-test 'expect) -> <some-expected-result>
 (my-test 'expect <expect>) ; sets parameter
 (my-test 'status) -> <passed-or-failed>
 (my-test 'status <status>) ; sets parameter
  
 (my-window) -> executes, and updates display if (my-window 'invoke) -> #t
 (my-window 'invoke) -> #t ; to auto-execute
 (my-window 'show) -> #t ; if window visible
 (my-window 'type) -> non-modal
 (my-window 'title) -> "my-window"
 (my-window:text 'type) -> editable
 (my-window:button 'alignment) -> horizontal
 (my-window:button:open 'title) -> "open"
 (my-window:button:open 'action) -> open-callback
 (my-window:button:close 'title) -> "close"
 (my-window:button:close 'action) -> close-callback
 ...
 
 [where corresponding hypothetical setters are not shown]
 
 Thanks again,
  -paul-
 
 
 
 

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Paul Schlie <schlie@comcast.net>
Cc: Robby Findler <robby@cs.uchicago.edu>, <mflatt@cs.utah.edu>,
        <bugs@plt-scheme.org>
Subject: Re: all/6742: export program as text
Date: Fri, 5 Mar 2004 10:03:48 -0500

 This is close to my hazy (!) idea of this issue, but I will let Matthew 
 stew on this.
 Thanks for the input though! -- Matthias
 
 
 On Mar 4, 2004, at 11:28 PM, Paul Schlie wrote:
 
 > Hi guys, As this is a subject that's been bugging me for a little 
 > while, I
 > wonder if it would be reasonable to in lieu of saving "binary boxes", 
 > spit
 > out it's declarative textual equivalent, such as I've tried to 
 > illustrate
 > below for scheme based test and UI boxes, for which there may be Java 
 > based
 > logical equivalents? (personally I'd prefer to avoid the gratuitous 
 > use of
 > xml if possible, as it's not partially readable, nor is it native to 
 > either
 > scheme or java based textual code).
 >
 > #(Test 'my-test
 >     (invoke <#t-or-#f>
 >     (title "my test")
 >     (code <some-test-code>)
 >     (expect <some-expected-result>)
 >     (status <passed-or-failed>))
 >
 > #(Window 'my-window
 >     (invoke <#t-or-#f>
 >     (show #t)
 >     (type 'non-modal)
 >     (title "my-window)
 >     (width 321)
 >     (height 523)
 >     (max-width 'screen)
 >     (min-width 'content)
 >     (max-height 'screen)
 >     (min-height 'content)
 >     (alignment 'vertical)
 >     (text-frame 'text
 >         (type 'editable)
 >         (max-height 'parent)
 >         (min-height 120))
 >     (layout-frame 'button
 >         (max-height 'content)
 >         (min-height 'content)
 >         (alignment 'horizontal)
 >         (button 'open
 >             (title "open")
 >             (action 'open-callback))
 >         (button 'close
 >             (title "close")
 >             (action 'close-callback))))
 >
 > Which within DrScheme are optionally displayed as either text, or its
 > graphical editable "embedded box" counterpart; and when executed 
 > expands
 > into a set of function definitions which correspond the objects defined
 > within the parameterized "embedded box" template which can be used in
 > procedural code, and is optionally automatically invoked (instantiated 
 > and
 > executed) if parameterized to do so by default. Resulting in the 
 > following
 > hypothetical corresponding definitions for example?
 >
 > (my-test) -> executes and updates display if (my-test 'invoke) -> #t
 > (my-test 'invoke) -> #t or #f
 > (my-test 'invoke <#t-or-#f>) ; sets parameter
 > (my-test 'title) -> "my test"
 > (my-test 'title <title>) ; sets parameter
 > (my-test 'code) -> <some-test-code>
 > (my-test 'code <code>) ; sets parameter
 > (my-test 'expect) -> <some-expected-result>
 > (my-test 'expect <expect>) ; sets parameter
 > (my-test 'status) -> <passed-or-failed>
 > (my-test 'status <status>) ; sets parameter
 >
 > (my-window) -> executes, and updates display if (my-window 'invoke) -> 
 > #t
 > (my-window 'invoke) -> #t ; to auto-execute
 > (my-window 'show) -> #t ; if window visible
 > (my-window 'type) -> non-modal
 > (my-window 'title) -> "my-window"
 > (my-window:text 'type) -> editable
 > (my-window:button 'alignment) -> horizontal
 > (my-window:button:open 'title) -> "open"
 > (my-window:button:open 'action) -> open-callback
 > (my-window:button:close 'title) -> "close"
 > (my-window:button:close 'action) -> close-callback
 > ...
 >
 > [where corresponding hypothetical setters are not shown]
 >
 > Thanks again,
 >  -paul-
 >
 >
 >
 
Responsible-Changed-From-To: eli->nobody
Responsible-Changed-By: gnats@champlain.ccs.neu.edu
Responsible-Changed-When: Fri, 26 Mar 2004 05:14:38 -0500
Responsible-Changed-Why:


Responsible changed from "nobody" to "mflatt" by eli at Mon, 05 Apr 2004 00:19:21 -0400
Reason>>> mred request.

>Unformatted:
