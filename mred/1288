From robby@cs.rice.edu  Mon Nov 29 08:44:47 1999
Received: from localhost (swb2a-176-77.rice.edu [128.42.176.77])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id IAA17712
	for <plt-gnats>; Mon, 29 Nov 1999 08:44:45 -0600 (CST)
Message-Id: <199911291444.IAA17712@cs.rice.edu>
Date: Mon, 29 Nov 1999 08:44:45 -0600 (CST)
From: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: extra space in stretchable area-container<%>s.

>Number:         1288
>Category:       mred
>Synopsis:       extra space in stretchable area-container<%>s.
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          suspended
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Mon Nov 29 09:45:04 -0500 1999
>Last-Modified:  Sun Mar 28 02:40:55 -0500 2004
>Originator:     Robert Bruce Findler
>Release:        102/1
>Organization:
titan
>Environment:
unix (i386-linux)
Tools: ("CVS" "analysis" "debug" "stepper" "syncheck" "unit-bundle")
Docs Installed:
("mzc" "icons" "drscheme" "framework" "help" "teachpack" "r5rs" "mzscheme" "mred" "misclib" "tools" "insidemz" "match" "mrspidey")
Collections:
(("/home/scheme/plt/collects" ("CVS" "afm" "doc" "browser" "cogen" "compiler" "countdwn" "drjava" "drscheme" "drscheme-jr" "dynext" "errortrace" "framework" "games" "graphics" "guibuilder" "help" "hierarchy" "hierlist" "htdp" "icons" "launcher" "make" "mred" "mrspidey" "mysterx" "mzlib" "mzscheme" "net" "quasiquote" "readline" "slatex" "slibinit" "srpersist" "stepper" "tests" "texpict" "userspce" "xml" "zodiac")) ("/home/robby/robby/collects" ("CVS" "account" "backgammon" "checkers" "doonesbury" "friendly" "icfp-pc-99" "mahjongg" "paper-utils" "pente" "pop-pop" "sample-solutions" "set-fonts" "solutions" "test-image-map" "xmahjongg")) ("/home/robby/robby/proj/talks" ("CVS" "bundle-proposal" "icfp98" "lc" "lunch1" "unit-patterns" "unit-proposal" "util")) ("/home/robby/robby/proj/papers" ("CVS" "c+u.save" "drafthead.sty" "dr" "dr-column" "geometric-control" "graphical-units" "include" "inputs" "sba-procedures" "senior-thesis" "signature-constraints" "type-safety" "typed-unit-calculus" "unit" "unit-semantics" "dr-journal")) ("/home/robby/mflatt/collects" ("CVS" "sirmail")))
>Description:
currrently, an area container divides its space
amoung it's children by first allocating the minimum
size to each child and then dividing up the leftovers
among its stretchable children. This means that if there
are two stretchable children in a vertical-panel, one with
min-height 100 and other with min-height 0 and there is 150
extra pixels of space, the first child will get 175 pixels 
and the second will get 75, total.

I think it would be better if both children got 125 pixels.
Can we change things so that the area-container first uses its
extra pixels to bring each stretchable child to the same size
and, once all stretchables are the same size, divides the remainder
equally amoung its children?
>How-To-Repeat:
;; resize the window to be fairly tall.
;; click on the show heights button.
;; I would like to see the two printed numbers
;; by equal.

(define frame (make-object frame% "frame"))

      (make-object button% "Show Heights" frame
		   (lambda x
		     (printf "top: ~s bottom: ~s~n"
			     (send to-load-files-panel get-height)
			     (send loaded-files-panel get-height))))
      (define top-panel (make-object horizontal-panel% frame))
      (define left-panel (make-object vertical-panel% top-panel))
      (define to-load-files-panel (make-object horizontal-panel% left-panel '(border)))
      (define files-list-box (make-object list-box% #f null to-load-files-panel void '(single)))
      (define to-load-button-panel (make-object vertical-panel% to-load-files-panel))
      (define up-button (make-object button% "Up" to-load-button-panel void))
      (define open-button (make-object button% "Open" to-load-button-panel void))
      (define remove-button (make-object button% "Remove" to-load-button-panel void))
      (define down-button (make-object button% "Down" to-load-button-panel void))
      (send to-load-button-panel stretchable-width #f)

      (define loaded-files-outer-panel (make-object vertical-panel% left-panel))
      (define loaded-files-panel (make-object horizontal-panel% loaded-files-outer-panel '(border)))
      (define loaded-files-canvas (make-object editor-canvas% loaded-files-panel))
      (define loaded-files-button-panel (make-object vertical-panel% loaded-files-panel))
      (define open-loaded-file-button (make-object button% "Open" loaded-files-button-panel void))
      (send loaded-files-button-panel set-alignment 'center 'center)
      (send loaded-files-button-panel stretchable-width #f)

(send frame show #t)

>Fix:
>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: robby@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1288: extra space in stretchable area-container<%>s.
Date: Tue, 30 Nov 1999 06:51:52 -0800

 Quoting robby@cs.rice.edu:
 > Can we change things so that the area-container first uses its
 > extra pixels to bring each stretchable child to the same size
 > and, once all stretchables are the same size, divides the remainder
 > equally amoung its children?
 
 I'm inclined to leave the MrEd containers alone because
 
  * I'm not convinced that the proposed algorithm would be better. I
    think I prefer the current algorithm, though I don't have compelling
    examples either way.
 
  * Changing the containers would affect all MrEd programs in a
    relatively subtle way for a widely-used part of the system. At this
    stage in the MrEd 100 cycle (i.e., people are actually writing GUI
    programs, if comp.lang.scheme is any indicator), a stable toolbox
    interface is important again.
 
  * The other behavior is always available through a new container
    class.
 
 Ok if we leave it alone?
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.rice.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1288: extra space in stretchable area-container<%>s.
Date: Thu, 2 Dec 1999 12:22:43 -0600 (CST)

 Quoting Matthew Flatt:
 > I'm inclined to leave the MrEd containers alone because
 > 
 >  * I'm not convinced that the proposed algorithm would be better. I
 >    think I prefer the current algorithm, though I don't have compelling
 >    examples either way.
 
 I sent you an example against the current algorithm. It is extracted
 from the project manager window.
 
 In general, I think that two sibling stretchable containers should be
 the same size, if the pixels are available.
 
 >  * Changing the containers would affect all MrEd programs in a
 >    relatively subtle way for a widely-used part of the system. At this
 >    stage in the MrEd 100 cycle (i.e., people are actually writing GUI
 >    programs, if comp.lang.scheme is any indicator), a stable toolbox
 >    interface is important again.
 
 If drs is any indicator, this does not come up much, but it looks bad
 when it does. (as in the project manager window).
 
 > Ok if we leave it alone?
 
 I think it is wrong. I guess we can leave it alone, but I would rather
 not. I am not a judge of the relative "market value" of a stable broken
 interface vs a moving fixed up interface (esp in this case, when the
 brokenness is small and the fixed-ness will probably not be noticed). I
 can always just make the stretchable siblings have the same minimum
 size, which would mostly solve the problem.
 
 Robby

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon Jan  3 08:10:50 2000
Responsible-Changed-Why:

State-Changed-From-To: open-suspended
State-Changed-By: mflatt
State-Changed-When: Fri May 12 14:35:03 2000
State-Changed-Why:


>Unformatted:
