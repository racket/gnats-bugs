From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jun  5 14:21:13 2007
Received: from wr-out-0506.google.com (wr-out-0506.google.com [64.233.184.224])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l55ILD18004903
	for <bugs@bugs.plt-scheme.org>; Tue, 5 Jun 2007 14:21:13 -0400
Message-Id: <200706051821.l55ILBHx004897@champlain.ccs.neu.edu>
Date: Tue, 5 Jun 2007 14:21:11 -0400
From: cartazio@yahoo.com
To: bugs@plt-scheme.org
Subject: nontermination in admit all for dracula

>Number:         8717
>Category:       acl2
>Synopsis:       nontermination in admit all for dracula
>Class:          sw-bug
>Responsible:    cce
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jun 05 14:25:01 -0400 2007
>Closed-Date:    Sun Jul 01 16:13:28 -0400 2007
>Last-Modified:  Sun Jul 01 16:13:28 -0400 2007
>Originator:     carter schonwald
>Organization:
plt
>Submitter-Id:   unknown
>Release:        370.2-svn30may2007
>Environment:
macosx "Darwin hawthorn.local 8.9.0 Darwin Kernel Version 8.9.0: Thu Feb 22 20:54:07 PST 2007; root:xnu-792.17.14~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/carter/plt/doc" "help" "guide" "quick" "reference" "release-notes" "scribble") (* "/Users/carter/Library/PLT Scheme/planet/300/370.2/cache/dalev/dracula-language.plt/1/0/acl2-html-docs"))
Human Language: english
(current-memory-use) 114420140

Collections:
(("/Users/carter/Library/PLT Scheme/370.2/collects" non-existent-path) ("/Users/carter/plt/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Dracula Languages" "Dracula ACL2 (beta 12)") (#2("~" #f) . #6(#t write mixed-fraction-e #f #t debug)))
>Description:
infinite recursion in repreatedly admitting the last definition of the acl2 script
>How-To-Repeat:
;; put the following code in the editor, start acl2 and press admit all

;; the constructors
(defun make-imp (a b) ; prop, prop -> prop
  (list 'imp a b))
(defun make-and  (a b) ; prop, prop -> prop
  (list 'and  a b))
(defun make-or (a b)  ; prop, prop -> prop
  (list 'or a b))
(defun make-not (a) ; prop , prop -> prop
  (list 'not a))
(defun make-bool (a) ; boolean -> prop
  (list 'bool a))
(defun make-base (a) ; A -> prop
  (list 'base a))

;; the destructors for the different prop cases and their associated equalities
(defun baseInv (a)  ; Prop -> A  , baseInv (make-base a)  = a
  (cadr a))
(defthm baseInvEq (equal (baseInv (make-base a)) a))

(defun impHyp (a)   ; Prop -> Prop,   impHyp (make-imp a b) = a
  (cadr a))
(defthm impHypEq (equal (impHyp (make-imp a b))a))

(defun impCon (a) ; Prop -> Prop , impCon (make-imp a b) = b
  (caddr a))
(defthm impConEq (equal (impCon (make-imp a b)) b))

(defun orLeft (a) ; prop ->prop , orLeft (make-or a b) = a
  (cadr a))
(defthm orLeftEq (equal (orLeft (make-or a b) ) a))

(defun orRight (a) ; prop -> prop , orRight(make-or a b) = b
  (caddr a))
(defthm orRightEq (equal (orRight (make-or a b)) b))

(defun notInv (a) ; prop -> prop, notInv (make-not a) = a
  (cadr a))
(defthm notInvEq (equal (notInv (make-not a)) a ))

(defun boolInv (a) ; prop -> bool , boolInv (make-bool a) = a
  (cadr a))
(defthm boolInvEq (equal (boolInv (make-bool a)) a))

(defun andLeft (a) ; prop -> prop, a = andLeft (make-and a b)
  (cadr a))

(defthm andLeftEq (equal  (andLeft (make-and a b)) a))

(defun andRight (a) ; prop -> prop , b = AndRight (make-and a b)
  (caddr a))

(defthm andRightEq (equal (andRight (make-and a b )) b))


;;;  the weak predicates for the different cases of prop

(defun impP (a)   ; Prop -> Boolean,  and  ImpP implies  ImpHypEq and ImpConEq
  (and (true-listp a)
       (equal (car a ) 'imp)
       (equal (len a) 3)))

(defun andP (a)  ; Prop -> Boolean , and Andp implies AndLeftEq and AndRightEq
  (and (true-listp a)
       (equal (car a) 'and)
       (equal (len a) 3)))

(defun orP (a)  ; prop -> Boolean, and OrP implies orLeft and orRight
  (and (true-listp a)
       (equal (car a) 'or)
       (equal (len a ) 3)))

(defun notP (a)  ; prop -> Boolean , and notP implies notInvEq
  (and (true-listp a)
       (equal (car a) 'not)
       (equal (len a) 2)))

(defun boolP (a)  ; prop -> Boolean and boolP implies boolInvEq
  (and (true-listp a)
       (equal (car a) 'bool)
       (equal (len a) 2)
       (or (equal (cadr a) 'true)
           (equal (cadr a) 'false))))

(defun baseP (a)  ; prop-> Boolean and baseP implies baseInvEq
  (and (true-listp a)
       (equal (car a) 'base)
       (equal (len a) 2)
       (symbolp (cadr a) )))

(DEFUN PROPP (A)
              (COND ((IMPP A)
                     (AND (PROPP (IMPHYP A))
                          (PROPP (IMPCON A))))
                    ((ANDP A)
                     (AND (PROPP (ANDLEFT A))
                          (PROPP (ANDRIGHT A))))
                    ((ORP A)
                     (AND (PROPP (ORLEFT A))
                          (PROPP (ORRIGHT A))))
                    ((NOTP A) (PROPP (NOTINV A)))
                    ((BOOLP A) (PROPP (BOOLINV A)))
                    ((BASEP A) (PROPP (BASEINV A)))))
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "cce" by cce at Tue, 05 Jun 2007 14:27:12 -0400
Reason>>> Dracula bug


State changed from "open" to "analyzed" by cce at Wed, 13 Jun 2007 12:30:12 -0400
Reason>>> analyzed - start-of-next miscalculated for s-expression position


State changed from "analyzed" to "closed" by cce at Sun, 01 Jul 2007 16:13:28 -0400
Reason>>> Attempted fix in SVN.  Bug not directly reproducible in the
original dracula source, without a complete test case.

