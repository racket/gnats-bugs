From apache@plt-scheme.org Thu Mar 30 18:12:37 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k2UNCOZ4022965
	for <bugs@plt-scheme.org>; Thu, 30 Mar 2006 18:12:24 -0500
Message-Id: <200603302312.k2UNCO6I022963@champlain.ccs.neu.edu>
Date: Thu, 30 Mar 2006 18:12:24 -0500
From: shadowfax@ou.edu
To: bugs@plt-scheme.org
Subject: DrScheme's interpretation of (case) is wrong

>Number:         7987
>Category:       acl2
>Synopsis:       DrScheme's interpretation of (case) is wrong
>Class:          sw-bug
>Responsible:    dalev
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Mar 30 18:15:01 -0500 2006
>Last-Modified:  Wed Jun 21 11:38:17 -0400 2006
>Originator:     Nicholas Lundgaard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301
>Environment:
macosx "Darwin shadowfax.local 8.5.0 Darwin Kernel Version 8.5.0: Sun Jan 22 10:38:46 PST 2006; root:xnu-792.6.61.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Applications/PLT Scheme v301/collects/doc/web-server> #<path:/Applications/PLT Scheme v301/collects/doc/tour> #<path:/Applications/PLT Scheme v301/collects/doc/tools> #<path:/Applications/PLT Scheme v301/collects/doc/tex2page> #<path:/Applications/PLT Scheme v301/collects/doc/teachpack> #<path:/Applications/PLT Scheme v301/collects/doc/t-y-scheme> #<path:/Applications/PLT Scheme v301/collects/doc/swindle> #<path:/Applications/PLT Scheme v301/collects/doc/srfi> #<path:/Applications/PLT Scheme v301/collects/doc/r5rs> #<path:/Applications/PLT Scheme v301/collects/doc/profj-intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/profj-beginner> #<path:/Applications/PLT Scheme v301/collects/doc/profj-advanced> #<path:/Applications/PLT Scheme v301/collects/doc/plot> #<path:/Applications/PLT Scheme v301/collects/doc/mzscheme> #<path:/Applications/PLT Scheme v301/collects/doc/mzlib> #<path:/Applications/PLT Scheme v301/collects/doc/mzc> #<path:/Applications/PLT Scheme v301/collects/doc/mrlib> #<path:/Applications/PLT Scheme v301/collects/doc/mred> #<path:/Applications/PLT Scheme v301/collects/doc/misclib> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate-lambda> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/insidemz> #<path:/Applications/PLT Scheme v301/collects/doc/help> #<path:/Applications/PLT Scheme v301/collects/doc/framework> #<path:/Applications/PLT Scheme v301/collects/doc/foreign> #<path:/Applications/PLT Scheme v301/collects/doc/drscheme> #<path:/Applications/PLT Scheme v301/collects/doc/beginning-abbr> #<path:/Applications/PLT Scheme v301/collects/doc/beginning> #<path:/Applications/PLT Scheme v301/collects/doc/advanced> #<path:/Applications/PLT Scheme v301/collects/doc/acl2>)
Collections:
((#<path:/Users/mithrandir/Library/PLT Scheme/301/collects> "non-existent path") (#<path:/Applications/PLT Scheme v301/collects> (#<path:.DS_Store> #<path:acl2> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:r5rs> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: (#<path:/Applications/PLT Scheme v301/collects/acl2/teachpacks/world.scm> #<path:/Applications/PLT Scheme v301/collects/acl2/teachpacks/rand.scm>)
Computer Language: (("ACL2 Languages" "ACL2 Beginner (beta 8)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
DrScheme's interpretation of case does not match single pieces of datum, 
only lists.

that is, it won't match characters or numbers (atoms). for example, 
DrScheme accepts and evaluates 
(case '(1 2) ('(1 2) nil)( '(2 1) t))

because case is matching on a list, '(1 2). 

but, DrScheme does not accept 
(case #\U (#\U nil)(#\F t))

because it is WRONGLY requiring case to match on lists only and not atoms. 

effectively, case is pretty useless in DrScheme. 
>How-To-Repeat:
input this code into ACL2 (not DrScheme): 

(case #\U (#\U nil)(#\F t))

It is valid syntax, and will return nil.

Now, when you try to run this code in DrScheme, it does not work, producing the error

case: bad syntax (not a datum sequence) in: #\U

and highlighting the second instance of #\U in the code. 
>Fix:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: shadowfax@ou.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@barzilay.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, gnats@brinckerhoff.org,
        jay@kenyamountain.com, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu, cce@ccs.neu.edu,
        dalev@ccs.neu.edu
Subject: Re: all/7987: DrScheme's interpretation of (case) is wrong
Date: Thu, 30 Mar 2006 17:21:26 -0600

 What language level are you using? In module and mzscheme, mred, and
 pretty-big, I get the correct behavior.
 
 This:
 
   (case '(1 2) ('(1 2) 1) ('(2 1) 2))
 
 produces void as expected and this produces a syntax error, also as
 expected:
 
 > (case #\U (#\U nil)(#\F t))
 case: bad syntax (not a datum sequence) in: #\U
 
 I don't know where you're getting your idea about case or what language
 you're running, but you may wish to consult r5rs for the actual
 behavior of case (search for `case' in Help Desk and follow the "case
 conditionals" link).
 
 To help a little bit, I guess that you actually wanted to do this for
 the second expression:
 
   (case #\U ((#\U) nil)((#\F) t))
 
 which produces the error:
 
   reference to an identifier before its definition: nil
 
 also as expected, since `nil' is not a part of Scheme.
 
 Apologies if you're using some langauge other than Scheme, but perhaps
 you can let us know what that language is and maybe we'll be able to
 help you more effectively.
 
 Robby
From: "Carl Eastlund" <carl.eastlund@gmail.com>
To: shadowfax@ou.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@barzilay.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, robby@cs.uchicago.edu,
        gnats@brinckerhoff.org, jay@kenyamountain.com, meunier@ccs.neu.edu,
        sowens@cs.utah.edu, kathyg@cs.utah.edu, awick@cs.utah.edu,
        goldberg@cs.utah.edu, dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu,
        dalev@ccs.neu.edu
Subject: Re: all/7987: DrScheme's interpretation of (case) is wrong
Date: Thu, 30 Mar 2006 18:23:03 -0500

 The case macro works a little differently than you are expecting. 
 Each clause begins with a set of automatically-quoted values on which
 to match, not a single value.  To match on the character U, you would
 write:
 
 (case my-value
   [(#\U) (print "Got it!")]
   [else (print "Lost it!")])
 
 This allows you to match on multiple values as in:
 
 (case my-value
   [(#\U 1 x) (print "Got the character U, the number 1, or the symbol 'x!")]
   [else (print "Got something else!")])
 
 I think in the case where you used a list, the reader expansion of
 quoting helped you out.  You wrote:
 
 (case '(1 2)
   ['(1 2) nil]
   ['(2 1) t])
 
 and DrScheme saw:
 
 (case (quote (1 2))
   [(quote (1 2)) nil]
   [(quote (2 1)) t])
 
 So it tried to match the list (1 2) against either the symbol 'quote
 or the list (1 2), and succeeded.  I hope this helps clear up the
 problem.
 
 On 3/30/06, shadowfax@ou.edu <shadowfax@ou.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=7987
 >
 > Reported by Nicholas Lundgaard for release: 301
 >
 > *** Description:
 > DrScheme's interpretation of case does not match single pieces of datum,
 > only lists.
 >
 > that is, it won't match characters or numbers (atoms). for example,
 > DrScheme accepts and evaluates
 > (case '(1 2) ('(1 2) nil)( '(2 1) t))
 >
 > because case is matching on a list, '(1 2).
 >
 > but, DrScheme does not accept
 > (case #\U (#\U nil)(#\F t))
 >
 > because it is WRONGLY requiring case to match on lists only and not atoms.
 >
 > effectively, case is pretty useless in DrScheme.
 >
 > *** How to repeat:
 > input this code into ACL2 (not DrScheme):
 >
 > (case #\U (#\U nil)(#\F t))
 >
 > It is valid syntax, and will return nil.
 >
 > Now, when you try to run this code in DrScheme, it does not work, producing the error
 >
 > case: bad syntax (not a datum sequence) in: #\U
 >
 > and highlighting the second instance of #\U in the code.
 >
 > *** Environment:
 > macosx "Darwin shadowfax.local 8.5.0 Darwin Kernel Version 8.5.0: Sun Jan 22 10:38:46 PST 2006; root:xnu-792.6.61.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
 > Docs Installed:
 > (#<path:/Applications/PLT Scheme v301/collects/doc/web-server> #<path:/Applications/PLT Scheme v301/collects/doc/tour> #<path:/Applications/PLT Scheme v301/collects/doc/tools> #<path:/Applications/PLT Scheme v301/collects/doc/tex2page> #<path:/Applications/PLT Scheme v301/collects/doc/teachpack> #<path:/Applications/PLT Scheme v301/collects/doc/t-y-scheme> #<path:/Applications/PLT Scheme v301/collects/doc/swindle> #<path:/Applications/PLT Scheme v301/collects/doc/srfi> #<path:/Applications/PLT Scheme v301/collects/doc/r5rs> #<path:/Applications/PLT Scheme v301/collects/doc/profj-intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/profj-beginner> #<path:/Applications/PLT Scheme v301/collects/doc/profj-advanced> #<path:/Applications/PLT Scheme v301/collects/doc/plot> #<path:/Applications/PLT Scheme v301/collects/doc/mzscheme> #<path:/Applications/PLT Scheme v301/collects/doc/mzlib> #<path:/Applications/PLT Scheme v301/collects/doc/mzc> #<path:/Applications/PLT Sche!
 >  me v301/collects/doc/mrlib> #<path:/Applications/PLT Scheme v301/collects/doc/mred> #<path:/Applications/PLT Scheme v301/collects/doc/misclib> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate-lambda> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/insidemz> #<path:/Applications/PLT Scheme v301/collects/doc/help> #<path:/Applications/PLT Scheme v301/collects/doc/framework> #<path:/Applications/PLT Scheme v301/collects/doc/foreign> #<path:/Applications/PLT Scheme v301/collects/doc/drscheme> #<path:/Applications/PLT Scheme v301/collects/doc/beginning-abbr> #<path:/Applications/PLT Scheme v301/collects/doc/beginning> #<path:/Applications/PLT Scheme v301/collects/doc/advanced> #<path:/Applications/PLT Scheme v301/collects/doc/acl2>)
 > Collections:
 > ((#<path:/Users/mithrandir/Library/PLT Scheme/301/collects> "non-existent path") (#<path:/Applications/PLT Scheme v301/collects> (#<path:.DS_Store> #<path:acl2> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:r5rs> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite>!
 >   #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
 > Human Language: english
 > Teachpack filenames: (#<path:/Applications/PLT Scheme v301/collects/acl2/teachpacks/world.scm> #<path:/Applications/PLT Scheme v301/collects/acl2/teachpacks/rand.scm>)
 > Computer Language: (("ACL2 Languages" "ACL2 Beginner (beta 8)") #6(#t write mixed-fraction-e #f #t debug))
 >
 >
 >
 
 
 --
 Carl Eastlund
 "Cynical, but technically correct."
 
From: Robby Findler <robby@cs.uchicago.edu>
To: shadowfax@ou.edu
Cc: "Carl Eastlund" <carl.eastlund@gmail.com>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@barzilay.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, gnats@brinckerhoff.org,
        jay@kenyamountain.com, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu, dalev@ccs.neu.edu
Subject: Re: all/7987: DrScheme's interpretation of (case) is wrong
Date: Thu, 30 Mar 2006 17:31:40 -0600

 At Thu, 30 Mar 2006 18:23:03 -0500, "Carl Eastlund" wrote:
 > (case '(1 2)
 >   ['(1 2) nil]
 >   ['(2 1) t])
 > 
 > and DrScheme saw:
 > 
 > (case (quote (1 2))
 >   [(quote (1 2)) nil]
 >   [(quote (2 1)) t])
 > 
 > So it tried to match the list (1 2) against either the symbol 'quote
 > or the list (1 2), and succeeded.  I hope this helps clear up the
 > problem.
 
 case uses eq? for comparison, not equal? so this returns void, since
 case expressions have an implicit else clause.
 
 That is, continuing Carl's "and DrScheme saw", perhaps this is a
 slightly more enlightening view of what DrScheme saw:
 
  (case (quote (1 2))
    [(quote (1 2)) nil]
    [(quote (2 1)) t]
    [else (void)])
 
 Still, those "t" and "nil"s in there make me suspect you're not using
 Scheme, but perhaps ACL2 in DrScheme? If that's the case, there may be
 more going on here. I'm not sure if the ACL2 case construct is the same
 as the Scheme one.
 
 Maybe Dale can say more?
 
 Robby
From: Nicholas Lundgaard <shadowfax@ou.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: Carl Eastlund <carl.eastlund@gmail.com>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@barzilay.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, gnats@brinckerhoff.org,
        jay@kenyamountain.com, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu, dalev@ccs.neu.edu
Subject: Re: all/7987: DrScheme's interpretation of (case) is wrong
Date: Thu, 30 Mar 2006 19:59:49 -0600

 Hmm, I'm a little lost, sorry.
 
 I'v been using DrScheme with language ACL2 Beginner (beta 8).
 
 I was under the impression that DrScheme should evaluate ACL2 code in  
 this mode in the same way as ACL2 itself would.
 
 I didn't send the bug report to the wrong place, did I?
 
 --Nicholas
 On Mar 30, 2006, at 5:31 PM, Robby Findler wrote:
 
 > At Thu, 30 Mar 2006 18:23:03 -0500, "Carl Eastlund" wrote:
 >> (case '(1 2)
 >>   ['(1 2) nil]
 >>   ['(2 1) t])
 >>
 >> and DrScheme saw:
 >>
 >> (case (quote (1 2))
 >>   [(quote (1 2)) nil]
 >>   [(quote (2 1)) t])
 >>
 >> So it tried to match the list (1 2) against either the symbol 'quote
 >> or the list (1 2), and succeeded.  I hope this helps clear up the
 >> problem.
 >
 > case uses eq? for comparison, not equal? so this returns void, since
 > case expressions have an implicit else clause.
 >
 > That is, continuing Carl's "and DrScheme saw", perhaps this is a
 > slightly more enlightening view of what DrScheme saw:
 >
 >  (case (quote (1 2))
 >    [(quote (1 2)) nil]
 >    [(quote (2 1)) t]
 >    [else (void)])
 >
 > Still, those "t" and "nil"s in there make me suspect you're not using
 > Scheme, but perhaps ACL2 in DrScheme? If that's the case, there may be
 > more going on here. I'm not sure if the ACL2 case construct is the  
 > same
 > as the Scheme one.
 >
 > Maybe Dale can say more?
 >
 > Robby
 

Responsible changed from "nobody" to "dalev" by dalev at Thu, 30 Mar 2006 21:43:10 -0500
Reason>>> ...

State changed from "open" to "analyzed" by dalev at Thu, 30 Mar 2006 21:43:10 -0500
Reason>>> This will be fixed in the next beta.  Thanks for the report!

From: "Carl Eastlund" <carl.eastlund@gmail.com>
To: "Nicholas Lundgaard" <shadowfax@ou.edu>
Cc: "Robby Findler" <robby@cs.uchicago.edu>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, eli@barzilay.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, gnats@brinckerhoff.org,
        jay@kenyamountain.com, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu, dalev@ccs.neu.edu
Subject: Re: all/7987: DrScheme's interpretation of (case) is wrong
Date: Thu, 30 Mar 2006 22:34:27 -0500

 On 3/30/06, Nicholas Lundgaard <shadowfax@ou.edu> wrote:
 > Hmm, I'm a little lost, sorry.
 >
 > I'v been using DrScheme with language ACL2 Beginner (beta 8).
 >
 > I was under the impression that DrScheme should evaluate ACL2 code in
 > this mode in the same way as ACL2 itself would.
 >
 > I didn't send the bug report to the wrong place, did I?
 >
 > --Nicholas
 
 No, this is the right place, but my response was less than helpful
 because I made a bad assumption about what language level you were
 using.  I'm not sure how ACL2 case statements work, but this bug will
 get assigned to someone who does and get sorted out promptly.  Sorry
 for the confusion.
 
 --Carl
 

State changed from "analyzed" to "closed" by dalev at Wed, 21 Jun 2006 11:38:17 -0400
Reason>>> Fixed in SVN.

