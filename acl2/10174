From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Apr  3 14:42:58 2009
Received: from mail-qy0-f130.google.com (mail-qy0-f130.google.com [209.85.221.130])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n33Igm7s010117
	for <bugs@bugs.plt-scheme.org>; Fri, 3 Apr 2009 14:42:48 -0400
Message-Id: <200904031842.n33Igk26010110@champlain.ccs.neu.edu>
Date: Fri, 3 Apr 2009 14:42:46 -0400
From: szwdsd@gmail.com
To: bugs@plt-scheme.org
Subject: error in dracula module acl2

>Number:         10174
>Category:       acl2
>Synopsis:       error in dracula module acl2
>Class:          sw-bug
>Responsible:    cce
>Severity:       serious
>Priority:       high
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Apr 03 14:44:01 -0400 2009
>Closed-Date:    Mon Mar 22 00:34:31 -0400 2010
>Last-Modified:  Mon Mar 22 00:34:31 -0400 2010
>Originator:     Zoe
>Organization:
plt
>Submitter-Id:   unknown
>Release:        version 4.1.5
>Environment:
mac-i386-osx
>Description:
highlight/save: start position 349 > end position 221

 === context ===
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-drscheme-tab.ss:138:6: update-proof-state method in ...cula-drscheme-tab.ss:27:4
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-proof-panel.ss:388:6: redraw method in dracula-proof-panel%
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-proof-panel.ss:241:6: admit-to method in dracula-proof-panel%
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-proof-panel.ss:182:6: admit-all method in dracula-proof-panel%
/Applications/PLT Scheme v4.1.5/collects/scheme/private/more-scheme.ss:155:2: call-with-break-parameterization
/Applications/PLT Scheme v4.1.5/collects/scheme/private/more-scheme.ss:271:2: call-with-exception-handler

highlight/save: start position 372 > end position 244

 === context ===
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-drscheme-tab.ss:138:6: update-proof-state method in ...cula-drscheme-tab.ss:27:4
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-proof-panel.ss:388:


highlight/save: start position 432 > end position 304

 === context ===
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-drscheme-tab.ss:138:6: update-proof-state method in ...cula-drscheme-tab.ss:27:4
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-proof-panel.ss:388:6: redraw method in dracula-proof-panel%
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-proof-panel.ss:241:6: admit-to method in dracula-proof-panel%
/Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/drscheme/dracula-proof-panel.ss:146:6: admit-one method in dracula-proof-panel%
/Applications/PLT Scheme v4.1.5/collects/scheme/private/more-scheme.ss:155:2: call-with-break-parameterization
/Applications/PLT Scheme v4.1.5/collects/scheme/private/more-scheme.ss:271:2: call-with-exception-handler
>How-To-Repeat:
;; helper in module
;; ----------------


;; interface helper
(Interface IHelper
           ; signiture for rev
           (sig rev (x))
           ;
           (con append-right-id
                (implies (true-listp a)
                         (equal (append a nil) a)))
           (con consp-append
             (implies (consp a)
                      (consp (append a b))))
           (con car-append
             (equal (car (append x y))
                    (if (consp x) (car x) (car y))))
           (con true-listp-append
             (equal (true-listp (append a b))
                    (true-listp b)))
           (con true-listp-rev
             (true-listp (rev x)))      
           (con subsetp-cons
             (implies (subsetp x y)
                      (subsetp x (cons e y))))
           (con subsetp-x-x
             (subsetp x x))
           
           (con assoc-of-append
             (equal (append (append a b) c)
                    (append a (append b c))))

           (con last-append
             (implies (consp b)
                      (equal (last (append a b))
                             (last b))))

           (con car-last-rev
             (equal (car (last (rev x))) (car x)))
           (con consp-rev
             (implies (consp x)
                      (consp (rev x))))
           (con car-rev
             (equal (car (rev x)) (car (last x))))
           
           (con member-append
             (iff (member x (append a b))
                  (or (member x a)
                      (member x b))))
           
           (con subsetp-append-2
             (and (implies (subsetp a b)
                           (subsetp a (append b c)))
                  (implies (subsetp a c)
                           (subsetp a (append b c)))))
           
           (con subsetp-append-1
             (iff (subsetp (append a b) c)
                  (and (subsetp a c)
                       (subsetp b c))))

           (con equal-append
             (equal (equal (append x y)
                           (append x z))
                    (equal y z)))

           (con duplicatesp-preserved-by-append
             (implies (not (no-duplicatesp y))
                      (not (no-duplicatesp (append x y)))))
           
           (con no-duplicatesp-append-cons
             (equal (no-duplicatesp (append a (cons e b)))
                    (and (not (member e a))
                         (not (member e b))
                         (no-duplicatesp (append a b)))))
           
           (con member-car-last
             (iff (member (car (last x)) x)
                  (consp x))))


;; module rev
(module MHelper
  (defun rev (x)
    (if (endp x)
        nil
      (append (rev (cdr x)) (list (car x)))))
  (export IHelper))

;; interface Graph
(require "MHelper.lisp")

(interface IGraph
  (sig all-nodes (g))
  (sig graph1p (g nodes))
  (sig graphp (g))
  (sig nodep (x g))
  (sig neighbors (node g))
  (sig pathp (p g))
  (sig path-from-to (p a b g))
  (con Example1
  (let ((g '((A B)
             (B B C)
             (C A C D)
             (D A B C))))

    (and (graphp g)
         (not (graphp (cdr g)))
         (nodep 'A g)
         (not (nodep 'E g))
         (pathp '(A B C D C A B B) g)
         (path-from-to '(A B B C) 'A 'C g)
         (not (pathp '(A B D) g))))))

;; module Graph
(module MGraph
  (import IHelper)
  (defun all-nodes (g)
    (cond ((endp g) nil)
          (t (cons (car (car g))
                   (all-nodes (cdr g))))))
  (defun graph1p (g nodes)
  (cond ((endp g) t)
        (t (and (consp (car g))
                (true-listp (cdr (car g)))
                (subsetp (cdr (car g)) nodes)
                (no-duplicatesp (cdr (car g)))
                (graph1p (cdr g) nodes)))))

  (defun graphp (g)
    (and (alistp g)
         (no-duplicatesp (all-nodes g))
         (graph1p g (all-nodes g))))
  
  (defun nodep (x g)
    (member x (all-nodes g)))
  
  (defun neighbors (node g)
    (cond ((endp g) nil)
          ((equal node (car (car g))) (cdr (car g)))
          (t (neighbors node (cdr g)))))
  
  (defun pathp (p g)
    (cond ((endp p) nil)
          ((endp (cdr p))
           (equal (cdr p) nil))
          (t (and (member (car (cdr p))
                          (neighbors (car p) g))
                  (pathp (cdr p) g)))))
  
  (defun path-from-to (p a b g)
    (and (pathp p g)
         (equal (car p) a)
         (equal (car (last p)) b)))
  (export IGraph))

;; Module Find Path
;; ----------------


(require "MHelper.lisp")
(require "MGraph.lisp")  

(interface IFindpath
  (sig count-non-members (x y))
  (sig measure (c stack g))
  (sig find-next-step (c stack b g))
  (sig find-path (a b g)))

(module MFindpath
  (include-book "arithmetic/top" :dir :system)
  (include-book "ordinals/e0-ordinal" :dir :system)
  (set-well-founded-relation e0-ord-<)
  (import IHelper)
  (import IGraph)

  (defun count-non-members (x y)
    (cond ((endp x) 0)
          ((member (car x) y) (count-non-members (cdr x) y))
          (t (+ 1 (count-non-members (cdr x) y)))))
  
  (defun measure (c stack g)
    (cons (+ 1 (count-non-members (all-nodes g) stack))
          (len c)))
  
  (defun find-next-step (c stack b g)
    (declare (xargs :measure (measure c stack g)))
    (cond
      ((endp c) 'failure)
      ((member (car c) stack)
       (find-next-step (cdr c) stack b g))
      ((equal (car c) b) (rev (cons b stack)))
      (t (let ((temp (find-next-step (neighbors (car c) g)
                                     (cons (car c) stack)
                                     b g)))
           (if (equal temp 'failure)
               (find-next-step (cdr c) stack b g)
               temp)))))
  
  (defun find-path (a b g)
    (cond ((equal a b) (list a))
          (t (find-next-step (neighbors a g)
                             (list a)
                             b g))))
  
  (export IFindpath))
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "cce" by cce at Fri, 03 Apr 2009 14:48:13 -0400
Reason>>> Dracula bug.

State changed from "open" to "analyzed" by cce at Fri, 03 Apr 2009 14:48:13 -0400
Reason>>> The proof highlighting code is getting itself confused.

From: Carl Eastlund <cce@plt-scheme.org>
To: szwdsd@gmail.com, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/10174: error in dracula module acl2
Date: Fri, 3 Apr 2009 18:10:39 -0400

 On Fri, Apr 3, 2009 at 2:44 PM,  <szwdsd@gmail.com> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.plt-scheme.org/query/?cmd=3Dview&pr=3D10174
 >
 > Reported by Zoe for release: version 4.1.5
 >
 > *** Description:
 > highlight/save: start position 349 > end position 221
 
 Zoe,
 
 My flight is delayed, so I'm working on this bug at the airport.  Can
 you send me the other file(s) you need for this?  The code you sent me
 seems to want an MHelper.lisp, at the very least.  Please reply-to-all
 so your response gets attached to the bug report.  Thanks.
 
 --Carl
From: Carl Eastlund <cce@plt-scheme.org>
To: szwdsd@gmail.com, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/10174: error in dracula module acl2
Date: Fri, 3 Apr 2009 18:13:27 -0400

 On Fri, Apr 3, 2009 at 6:10 PM, Carl Eastlund <cce@plt-scheme.org> wrote:
 >
 > Zoe,
 >
 > My flight is delayed, so I'm working on this bug at the airport. =A0Can
 > you send me the other file(s) you need for this? =A0The code you sent me
 > seems to want an MHelper.lisp, at the very least. =A0Please reply-to-all
 > so your response gets attached to the bug report. =A0Thanks.
 >
 > --Carl
 
 Never mind, my mistake.  You put it all in there, I just didn't notice
 the breaks between files.
 
 --=20
 Carl Eastlund

From: Carl Eastlund <cce@plt-scheme.org>
To: szwdsd@gmail.com, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/10174: error in dracula module acl2
Date: Fri, 3 Apr 2009 20:36:54 -0400

 On Fri, Apr 3, 2009 at 2:44 PM,  <szwdsd@gmail.com> wrote:
 >
 > highlight/save: start position 372 > end position 244
 >
 > =A0=3D=3D=3D context =3D=3D=3D
 > /Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/=
 drscheme/dracula-drscheme-tab.ss:138:6: update-proof-state method in ...cul=
 a-drscheme-tab.ss:27:4
 > /Users/ZOE/Library/PLT Scheme/planet/300/4.1.5/cache/cce/dracula.plt/8/2/=
 drscheme/dracula-proof-panel.ss:388:
 
 Okay, I've figured it out.  Right now, the module system rearranges
 the module to put the imports first, the exports last, and everything
 else in the middle.  It shouldn't be doing this, but it made the
 implementation easier and hadn't caused a problem up to now.
 Unfortunately, if you actually put things out of this order, the
 highlighting gets screwed up: first it highlights all the way to the
 first import, then after the imports it jumps back to the first
 definition, and so on.  The highlighting code was raising an error due
 to the out-of-order indices.
 
 The long term solution is for me to fix the module implementation to
 keep everything in order.
 
 The short term solution is for me to turn that error into a warning --
 the highlighting system doesn't really need to hang up the program.
 
 The *immediate* workaround is to always keep imports at the top and
 exports at the bottom.  Do that, and this error won't come up.
 
 --=20
 Carl Eastlund

State changed from "analyzed" to "closed" by cce at Mon, 22 Mar 2010 00:34:31 -0400
Reason>>> Dracula now ignores internal highlighting errors, so
out-of-order compilation of modules doesn't cause an error
during theorem proving.

