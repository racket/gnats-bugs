From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Nov  6 18:09:06 2009
Received: from mail-yx0-f192.google.com (mail-yx0-f192.google.com [209.85.210.192])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id nA6N91Re003255
	for <bugs@bugs.plt-scheme.org>; Fri, 6 Nov 2009 18:09:01 -0500
Message-Id: <200911062308.nA6N8xed003248@champlain.ccs.neu.edu>
Date: Fri, 6 Nov 2009 18:08:59 -0500
From: pnkfelix@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Student Language check-error should only catch student invocations of error

>Number:         10564
>Category:       test-suite
>Synopsis:       Student Language check-error should only catch student invocations of error
>Class:          change-request
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Nov 06 18:12:01 -0500 2009
>Last-Modified:  Fri Sep 03 21:44:04 -0400 2010
>Originator:     Felix Klock
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1
>Environment:
macosx "Darwin Chimaera.local 10.0.0 Darwin Kernel Version 10.0.0: Fri Jul 31 22:47:34 PDT 2009; root:xnu-1456.1.25~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 415937724

Collections:
(("/Users/pnkfelix/Library/PLT Scheme/4.2.1/collects" non-existent-path) ("/Applications/PLT Scheme v4.2.1/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Intermediate Student with lambda") (#(#t constructor repeating-decimal #f #t none) #f ()))
>Description:
When instructors using HtDP tell students
that certain cases should emit an error,
the (usual) intention is that the students
should detect the error explicitly and 
invoke the error procedure.

One would like to have some assurance that the
students are doing this when you see them 
testing their code via the (check-error ...)
special form.

Unfortunately, (check-error ...) catches all
exceptions generated from DrScheme: both
ones signalled by student invocations of error,
*and* ones signalled by student's violating 
the contracts of functions provided by DrScheme.

(check-error ...) should not be so "nice;" it 
reduces it pedagogical value.  It would be 
better if the error procedure exported by
the student languages produced a different 
kind of exception, and then check-error only
catches *that*, not all exceptions in general.
>How-To-Repeat:
;; Observe that the contract violation below
;; is treated as expected behavior and the
;; test passes, masking the underlying failure
;; of the student to properly check for the 
;; error condition.

(define err-msg
  (string-append "+: expects type <number> as 1st argument, given:"
                 " 'a; other arguments were: 'b"))
(check-error (f 'a 'b) err-msg)

;; A NS is one of:
;; - Number
;; - Symbol

;; f : NS NS -> Number
;; produces sum of x and y; errors if either is symbol.
(define (f x y) (+ x y))
>Fix:
