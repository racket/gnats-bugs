From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Dec  9 03:18:55 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.233])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id mB98IkSN002959
	for <bugs@bugs.plt-scheme.org>; Tue, 9 Dec 2008 03:18:46 -0500
Message-Id: <200812090818.mB98ITB9002948@champlain.ccs.neu.edu>
Date: Tue, 9 Dec 2008 03:18:29 -0500
From: ruzsa.balazs@interware.co.hu
To: bugs@plt-scheme.org
Subject: check-ec doesn't seem to work in srfi/78 (lightweight testing)

>Number:         9968
>Category:       srfi
>Synopsis:       check-ec doesn't seem to work in srfi/78 (lightweight testing)
>Class:          sw-bug
>Responsible:    noel
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Dec 09 03:20:01 -0500 2008
>Last-Modified:  Mon Feb 06 16:32:00 -0500 2012
>Originator:     Ruzsa BalÃ¡zs
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.3
>Environment:
windows-xp
>Description:
The check-ec form in srfi/78 doesn't seem to work as advertised.

Use the attached program fragment to reproduce the problem (copy/paste into DrScheme and run).

If I understood the srfi/78 documentation correctly, the expression

(check-ec (: i 16)
	  (digit-char i)
	  => (string-ref "0123456789ABCDEF" i))

should generate a list of values from 0..15, and check whether the predicate (equals (digit-char i) (string-ref "0123456789ABCDEF" i)) holds while i is bound to each generated value in succession.

Instead of the expected OK result, I get the following error:

:until: expected <generator> in  in: (if (not (equal-pred actual-result expected-result)))
>How-To-Repeat:
#lang scheme

(require srfi/78) ; lightweight testing

(define (integer->digit n)
  (integer->char
   (if (< n 10)
       (+ n (char->integer #\0))
       (+ (- n 10) (char->integer #\A)))))

(check-ec (: i 16)
	  (digit-char i)
	  => (string-ref "0123456789ABCDEF" i))
>Fix:
