From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Apr  3 02:30:11 2010
Received: from mail-yw0-f200.google.com (mail-yw0-f200.google.com [209.85.211.200])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o336U84w021974
	for <bugs@bugs.plt-scheme.org>; Sat, 3 Apr 2010 02:30:08 -0400
Message-Id: <201004030630.o336U5oj021966@champlain.ccs.neu.edu>
Date: Sat, 3 Apr 2010 02:30:05 -0400
From: kominek@gmail.com
To: bugs@plt-scheme.org
Subject: mzscheme crash with (lots of) futures

>Number:         10840
>Category:       mzscheme
>Synopsis:       mzscheme crash with (lots of) futures
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Apr 03 02:32:01 -0400 2010
>Closed-Date:    Fri Apr 15 12:01:39 -0400 2011
>Last-Modified:  Fri Apr 15 12:01:39 -0400 2011
>Originator:     Jay Kominek
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.5
>Environment:
unix "Linux nehwon 2.6.31-20-generic #58-Ubuntu SMP Fri Mar 12 04:38:19 UTC 2010 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 180989480

Collections:
(("/home/jkominek/.plt-scheme/4.2.5/collects" non-existent-path) ("/home/jkominek/plt/lib/plt/collects" "plai" "mysterx" "version" "lazy" "swindle" "r5rs" "ffi" "html" "framework" "help" "test-box-recovery" "test-engine" "make" "preprocessor" "drscheme" "teachpack" "typed-scheme" "srfi" "tex2page" "readline" "mred" "wxme" "typed" "texpict" "dynext" "plot" "compiler" "tests" "eopl" "net" "profile" "redex" "at-exp" "htdp" "hierlist" "syntax" "reader" "trace" "combinator-parser" "mzscheme" "openssl" "syntax-color" "schemeunit" "unstable" "gui-debugger" "slideshow" "file" "scheme" "lang" "scribble" "games" "macro-debugger" "frtime" "config" "deinprogramm" "mzlib" "r6rs" "icons" "graphics" "launcher" "string-constants" "defaults" "parser-tools" "algol60" "info-domain" "errortrace" "browser" "embedded-gui" "stepper" "scriblib" "2htdp" "mzcom" "planet" "web-server" "s-exp" "setup" "slatex" "afm" "scribblings" "sgl" "xml" "mrlib" "rnrs"))
Computer Language: (("Determine language from source") (#(#t write mixed-fraction-e #f #t debug/profile) (default) #() "#lang scheme\n" #f))
>Description:
Attached program crashes mzscheme every time for me. 64-bit Ubuntu (9.10). compiled plt-scheme myself, but --prefix was the only option given to configure. The 32-bit Ubuntu Jaunty mzscheme binary managed to run the program the one time I was willing to try it, but the corresponding drscheme crashed as well.

Not sure what else might be helpful, but here's a valgrind dump from my 64-bit version, just in case:

==31655== Memcheck, a memory error detector
==31655== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==31655== Using Valgrind-3.5.0-Debian and LibVEX; rerun with -h for copyright info
==31655== Command: mzscheme crash.ss
==31655== 
==31655== Invalid write of size 8
==31655==    at 0x4457F8: scheme_set_cont_mark (eval.c:8065)
==31655==    by 0x48619F: call_with_prompt (fun.c:6408)
==31655==    by 0x451863: scheme_do_eval (eval.c:8825)
==31655==    by 0x482310: do_call_with_prompt (fun.c:6636)
==31655==    by 0x48252E: do_apply_with_prompt (fun.c:2502)
==31655==    by 0x5536AA: do_load_handler (portfun.c:4156)
==31655==    by 0x475C90: scheme_dynamic_wind (fun.c:7937)
==31655==    by 0x552EBD: default_load (portfun.c:4271)
==31655==    by 0x40349CA: ???
==31655==    by 0x403A5F9: ???
==31655==    by 0x451D7A: scheme_do_eval (eval.c:9084)
==31655==    by 0x472929: apply_k (fun.c:2383)
==31655==  Address 0xa is not stack'd, malloc'd or (recently) free'd
==31655== 
SIGSEGV MAPERR si_code 1 fault on addr 0xa
==31655== 
==31655== HEAP SUMMARY:
==31655==     in use at exit: 4,294,356 bytes in 1,474 blocks
==31655==   total heap usage: 1,941 allocs, 467 frees, 5,236,280 bytes allocated
==31655== 
==31655== LEAK SUMMARY:
==31655==    definitely lost: 8,704 bytes in 15 blocks
==31655==    indirectly lost: 0 bytes in 0 blocks
==31655==      possibly lost: 288 bytes in 1 blocks
==31655==    still reachable: 4,285,364 bytes in 1,458 blocks
==31655==         suppressed: 0 bytes in 0 blocks
==31655== Rerun with --leak-check=full to see details of leaked memory
==31655== 
==31655== For counts of detected and suppressed errors, rerun with: -v
==31655== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)
zsh: killed     valgrind mzscheme crash.ss

If there is anything more I can do to help, don't hesitate to ask.
>How-To-Repeat:
#lang scheme
(require scheme/future)
(require (planet soegaard/math:1:4/math))

(define (necklace k n)
  (/ (for/fold ([sum 0])
       ([d (in-range 1 (add1 n))])
       (if (= 0 (modulo n d))
           (+ sum (* (phi d) (expt k (/ n d))))
           sum))
     n))

(apply + (map touch (for/list ([x (in-range 10 10000)])
                      (future (lambda () (necklace x x))))))
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: kominek@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10840: mzscheme crash with (lots of) futures
Date: Sat, 3 Apr 2010 07:27:46 -0600

 Thanks very much for the bug report!
 
 It crashes for me in 4.2.5, but not the latest version. Also, The
 valgrind dump suggests that the bug is one that I fixed a couple of
 days ago (too late for the 4.2.5 release, unfortunately).
 
 If you have time, could you try building the latest snapshot from
 here?:
 
    http://pre.plt-scheme.org/installers/
 
 Thanks,
 Matthew
 
 At Sat, 3 Apr 2010 02:32:02 -0400, kominek@gmail.com wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=10840
 > 
 > Reported by Jay Kominek for release: 4.2.5
 > 
 > *** Description:
 > Attached program crashes mzscheme every time for me. 64-bit Ubuntu (9.10). 
 > compiled plt-scheme myself, but --prefix was the only option given to 
 > configure. The 32-bit Ubuntu Jaunty mzscheme binary managed to run the program 
 > the one time I was willing to try it, but the corresponding drscheme crashed 
 > as well.
 > 
 > Not sure what else might be helpful, but here's a valgrind dump from my 64-bit 
 > version, just in case:
 > 
 > ==31655== Memcheck, a memory error detector
 > ==31655== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
 > ==31655== Using Valgrind-3.5.0-Debian and LibVEX; rerun with -h for copyright 
 > info
 > ==31655== Command: mzscheme crash.ss
 > ==31655== 
 > ==31655== Invalid write of size 8
 > ==31655==    at 0x4457F8: scheme_set_cont_mark (eval.c:8065)
 > ==31655==    by 0x48619F: call_with_prompt (fun.c:6408)
 > ==31655==    by 0x451863: scheme_do_eval (eval.c:8825)
 > ==31655==    by 0x482310: do_call_with_prompt (fun.c:6636)
 > ==31655==    by 0x48252E: do_apply_with_prompt (fun.c:2502)
 > ==31655==    by 0x5536AA: do_load_handler (portfun.c:4156)
 > ==31655==    by 0x475C90: scheme_dynamic_wind (fun.c:7937)
 > ==31655==    by 0x552EBD: default_load (portfun.c:4271)
 > ==31655==    by 0x40349CA: ???
 > ==31655==    by 0x403A5F9: ???
 > ==31655==    by 0x451D7A: scheme_do_eval (eval.c:9084)
 > ==31655==    by 0x472929: apply_k (fun.c:2383)
 > ==31655==  Address 0xa is not stack'd, malloc'd or (recently) free'd
 > ==31655== 
 > SIGSEGV MAPERR si_code 1 fault on addr 0xa
 > ==31655== 
 > ==31655== HEAP SUMMARY:
 > ==31655==     in use at exit: 4,294,356 bytes in 1,474 blocks
 > ==31655==   total heap usage: 1,941 allocs, 467 frees, 5,236,280 bytes 
 > allocated
 > ==31655== 
 > ==31655== LEAK SUMMARY:
 > ==31655==    definitely lost: 8,704 bytes in 15 blocks
 > ==31655==    indirectly lost: 0 bytes in 0 blocks
 > ==31655==      possibly lost: 288 bytes in 1 blocks
 > ==31655==    still reachable: 4,285,364 bytes in 1,458 blocks
 > ==31655==         suppressed: 0 bytes in 0 blocks
 > ==31655== Rerun with --leak-check=full to see details of leaked memory
 > ==31655== 
 > ==31655== For counts of detected and suppressed errors, rerun with: -v
 > ==31655== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)
 > zsh: killed     valgrind mzscheme crash.ss
 > 
 > If there is anything more I can do to help, don't hesitate to ask.
 > 
 > *** How to repeat:
 > #lang scheme
 > (require scheme/future)
 > (require (planet soegaard/math:1:4/math))
 > 
 > (define (necklace k n)
 >   (/ (for/fold ([sum 0])
 >        ([d (in-range 1 (add1 n))])
 >        (if (= 0 (modulo n d))
 >            (+ sum (* (phi d) (expt k (/ n d))))
 >            sum))
 >      n))
 > 
 > (apply + (map touch (for/list ([x (in-range 10 10000)])
 >                       (future (lambda () (necklace x x))))))
 > 
 > *** Environment:
 > unix "Linux nehwon 2.6.31-20-generic #58-Ubuntu SMP Fri Mar 12 04:38:19 UTC 
 > 2010 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 24
 > Human Language: english
 > (current-memory-use) 180989480
 > 
 > Collections:
 > (("/home/jkominek/.plt-scheme/4.2.5/collects" non-existent-path) 
 > ("/home/jkominek/plt/lib/plt/collects" "plai" "mysterx" "version" "lazy" 
 > "swindle" "r5rs" "ffi" "html" "framework" "help" "test-box-recovery" 
 > "test-engine" "make" "preprocessor" "drscheme" "teachpack" "typed-scheme" 
 > "srfi" "tex2page" "readline" "mred" "wxme" "typed" "texpict" "dynext" "plot" 
 > "compiler" "tests" "eopl" "net" "profile" "redex" "at-exp" "htdp" "hierlist" 
 > "syntax" "reader" "trace" "combinator-parser" "mzscheme" "openssl" 
 > "syntax-color" "schemeunit" "unstable" "gui-debugger" "slideshow" "file" 
 > "scheme" "lang" "scribble" "games" "macro-debugger" "frtime" "config" 
 > "deinprogramm" "mzlib" "r6rs" "icons" "graphics" "launcher" "string-constants" 
 > "defaults" "parser-tools" "algol60" "info-domain" "errortrace" "browser" 
 > "embedded-gui" "stepper" "scriblib" "2htdp" "mzcom" "planet" "web-server" 
 > "s-exp" "setup" "slatex" "afm" "scribblings" "sgl" "xml" "mrlib" "rnrs"))
 > Computer Language: (("Determine language from source") (#(#t write 
 > mixed-fraction-e #f #t debug/profile) (default) #() "#lang scheme\n" #f))
From: Jay Kominek <kominek@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10840: mzscheme crash with (lots of) futures
Date: Sat, 3 Apr 2010 11:39:59 -0600

 On Sat, Apr 3, 2010 at 7:27 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > It crashes for me in 4.2.5, but not the latest version. Also, The
 > valgrind dump suggests that the bug is one that I fixed a couple of
 > days ago (too late for the 4.2.5 release, unfortunately).
 >
 > If you have time, could you try building the latest snapshot from
 > here?:
 
 4.2.5.5 has the same problem, but not every time. Perhaps 1 out of 5
 tries, it runs to completion. (It almost tricked me by working the
 first two times.) The other times it fails in the first few seconds of
 execution, with one or the other of these:
 
 SIGSEGV ?????? SI_CODE 128 fault on addr (nil)
 SIGSEGV MAPERR si_code 1 fault on addr 0xb8
 
 Also, I noticed that mzscheme 4.2.5 fails under valgrind on my machine
 just trying to start the REPL, with the same dump I provided. So that
 is probably less helpful than I'd hoped, sorry.
 
 4.2.5.5 fails under valgrind every time with:
 Welcome to MzScheme v4.2.5.5 [3m], Copyright (c) 2004-2010 PLT Scheme Inc.
 ==20993== Invalid write of size 8
 ==20993==    at 0x49776A: scheme_hash_set (hash.c:346)
 ==20993==    by 0x5263DE: module_execute (module.c:5151)
 ==20993==    by 0x4538EF: scheme_do_eval (eval.c:9354)
 ==20993==    by 0x45417C: scheme_do_eval (eval.c:9289)
 ==20993==    by 0x47A50B: scheme_finish_apply_for_prompt (fun.c:6307)
 ==20993==    by 0x47A6B3: scheme_apply_for_prompt (fun.c:6387)
 ==20993==    by 0x489B2E: call_with_prompt (fun.c:6712)
 ==20993==    by 0x453D11: scheme_do_eval (eval.c:8932)
 ==20993==    by 0x485B00: do_call_with_prompt (fun.c:6904)
 ==20993==    by 0x485D1E: do_apply_with_prompt (fun.c:2509)
 ==20993==    by 0x55DD4A: do_load_handler (portfun.c:4199)
 ==20993==    by 0x478540: scheme_dynamic_wind (fun.c:8205)
 ==20993==  Address 0x12 is not stack'd, malloc'd or (recently) free'd
 ==20993==
 SIGSEGV MAPERR si_code 1 fault on addr 0x12
 
 -- 
 Jay Kominek
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Jay Kominek <kominek@gmail.com>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10840: mzscheme crash with (lots of) futures
Date: Tue, 6 Apr 2010 10:45:22 -0600

 Thanks for trying again!
 
 It took a while for me to replicate the crash, but I did finally get a
 crash today. Maybe it's the same one that you're seeing.
 
 I've committed a repair in the SVN repository. The snapshot page will
 catch up in about 16 hours.
 
 At Sat, 3 Apr 2010 11:39:59 -0600, Jay Kominek wrote:
 > On Sat, Apr 3, 2010 at 7:27 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > > It crashes for me in 4.2.5, but not the latest version. Also, The
 > > valgrind dump suggests that the bug is one that I fixed a couple of
 > > days ago (too late for the 4.2.5 release, unfortunately).
 > >
 > > If you have time, could you try building the latest snapshot from
 > > here?:
 > 
 > 4.2.5.5 has the same problem, but not every time. Perhaps 1 out of 5
 > tries, it runs to completion. (It almost tricked me by working the
 > first two times.) The other times it fails in the first few seconds of
 > execution, with one or the other of these:
 > 
 > SIGSEGV ?????? SI_CODE 128 fault on addr (nil)
 > SIGSEGV MAPERR si_code 1 fault on addr 0xb8
 > 
 > Also, I noticed that mzscheme 4.2.5 fails under valgrind on my machine
 > just trying to start the REPL, with the same dump I provided. So that
 > is probably less helpful than I'd hoped, sorry.
 > 
 > 4.2.5.5 fails under valgrind every time with:
 > Welcome to MzScheme v4.2.5.5 [3m], Copyright (c) 2004-2010 PLT Scheme Inc.
 > ==20993== Invalid write of size 8
 > ==20993==    at 0x49776A: scheme_hash_set (hash.c:346)
 > ==20993==    by 0x5263DE: module_execute (module.c:5151)
 > ==20993==    by 0x4538EF: scheme_do_eval (eval.c:9354)
 > ==20993==    by 0x45417C: scheme_do_eval (eval.c:9289)
 > ==20993==    by 0x47A50B: scheme_finish_apply_for_prompt (fun.c:6307)
 > ==20993==    by 0x47A6B3: scheme_apply_for_prompt (fun.c:6387)
 > ==20993==    by 0x489B2E: call_with_prompt (fun.c:6712)
 > ==20993==    by 0x453D11: scheme_do_eval (eval.c:8932)
 > ==20993==    by 0x485B00: do_call_with_prompt (fun.c:6904)
 > ==20993==    by 0x485D1E: do_apply_with_prompt (fun.c:2509)
 > ==20993==    by 0x55DD4A: do_load_handler (portfun.c:4199)
 > ==20993==    by 0x478540: scheme_dynamic_wind (fun.c:8205)
 > ==20993==  Address 0x12 is not stack'd, malloc'd or (recently) free'd
 > ==20993==
 > SIGSEGV MAPERR si_code 1 fault on addr 0x12
 > 
 > -- 
 > Jay Kominek
From: Jay Kominek <kominek@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org,
        bug-notification@plt-scheme.org
Subject: Re: [plt-bug] all/10840: mzscheme crash with (lots of) futures
Date: Tue, 6 Apr 2010 13:58:16 -0600

 On Tue, Apr 6, 2010 at 10:45 AM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > Thanks for trying again!
 
 Happy to help.
 
 > It took a while for me to replicate the crash, but I did finally get a
 > crash today. Maybe it's the same one that you're seeing.
 >
 > I've committed a repair in the SVN repository. The snapshot page will
 > catch up in about 16 hours.
 
 I built 18739 and ran the troublesome program >150 times, with 0
 failures. Seems fixed to me.
 
 Thanks.
 
 -- 
 Jay Kominek

State changed from "open" to "closed" by mflatt at Fri, 15 Apr 2011 12:01:39 -0400
Reason>>> Log says that we fixed it; program still seems to work
in the latest

