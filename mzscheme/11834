From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Apr  1 08:31:20 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p31CVIMS018309
	for <bugs@bugs.plt-scheme.org>; Fri, 1 Apr 2011 08:31:18 -0400
Message-Id: <201104011231.p31CVEiI018303@champlain.ccs.neu.edu>
Date: Fri, 1 Apr 2011 08:31:14 -0400
From: johnthescavenger@gmail.com
To: bugs@racket-lang.org
Subject: configure script gives bogus warning with --enable-mac64

>Number:         11834
>Category:       mzscheme
>Synopsis:       configure script gives bogus warning with --enable-mac64
>Class:          sw-bug
>Responsible:    eli
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Apr 01 08:32:01 -0400 2011
>Last-Modified:  Wed Apr 06 08:54:24 -0400 2011
>Originator:     John Boyle
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.0.4--2011-03-11(5a9d954/g)
>Environment:
macosx "Darwin Alvin.local 10.6.0 Darwin Kernel Version 10.6.0: Wed Nov 10 18:11:58 PST 2010; root:xnu-1504.9.26~3/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 259277440

Collections:
("/Users/john/Library/Racket/5.1.0.4/collects"
 (non-existent-path))
("/Applications/Racket/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-scheme" "un!
 stable" "version" "waterworld" "web-server" "wxme" "xml"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
When building Racket from git source, I use the "configure"/"make"/"make install" commands as usual.  I build 64-bit on my Mac, so I pass --enable-mac64 to "configure".  It gives a warning:

configure: WARNING: unrecognized options: --enable-mac64

However, this warning is bogus: the "configure" script finishes successfully, and with "make" and "make install", I get myself a working 64-bit Mac build of Racket.  The only problem is this unnecessary warning; probably this calls for a simple fix of adding "enable-mac64" to a list of recognized options in the "configure" script.
>How-To-Repeat:
On a Mac: (though this might 
git clone http://git.racket-lang.org/plt.git
cd plt/src
./configure --enable-mac64
>Fix:
>Audit-Trail:
From: John Boyle <johnthescavenger@gmail.com>
To: bugs@racket-lang.org, johnthescavenger@gmail.com
Cc: 
Subject: Re: all/11834: configure script gives bogus warning with --enable-mac64
Date: Sun, 3 Apr 2011 15:36:13 -0700

 As a matter of fact, it gives bogus "unrecognized" warnings for every option I've tested so far.
 
 Alvin:src john$ pwd
 /Users/john/plt-testing/src
 Alvin:src john$ ./configure --enable-mac64 --enable-places --enable-gcplacestest
 === Places enabled
 === 64-bit Mac OS X enabled
 [...]
 === configuring in foreign/libffi (/Users/john/plt-testing/src/foreign/libffi)
 configure: running /bin/sh ./configure '--prefix=/Users/john/plt-testing'  '--enable-mac64' '--enable-places' '--enable-gcplacestest' --cache-file=/dev/null --srcdir=.
 configure: WARNING: unrecognized options: --enable-mac64, --enable-places, --enable-gcplacestest
 [...]
 config.status: executing src commands
 configure: WARNING: unrecognized options: --enable-mac64, --enable-places, --enable-gcplacestest
 >>> Installation is in-place:
 [...]
 
 It gives similar warnings with --enable-futures (futures are enabled by default; I just did that as a test).  A bit of looking through Racket source indicates that there are at least three separate "configure" scripts (the main one in "src", and two subsidiary ones), and I suspect that the arguments from the main one are just shoved into the other two; these two probably don't know what those options mean, so they complain. Don't know if this is conveniently fixable.
From: Eli Barzilay <eli@barzilay.org>
To: John Boyle <johnthescavenger@gmail.com>, bugs@racket-lang.org
Cc: Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: all/11834: configure script gives bogus warning with --enable-mac64
Date: Sun, 3 Apr 2011 18:45:33 -0400

 Two minutes ago, John Boyle wrote:
 >  As a matter of fact, it gives bogus "unrecognized" warnings for
 >  every option I've tested so far.
 >  
 >  Alvin:src john$ pwd
 >  /Users/john/plt-testing/src
 >  Alvin:src john$ ./configure --enable-mac64 --enable-places --enable-gcplacestest
 >  === Places enabled
 >  === 64-bit Mac OS X enabled
 >  [...]
 >  === configuring in foreign/libffi (/Users/john/plt-testing/src/foreign/libffi)
 >  configure: running /bin/sh ./configure '--prefix=/Users/john/plt-testing'  '--enable-mac64' '--enable-places' '--enable-gcplacestest' --cache-file=/dev/null --srcdir=.
 >  configure: WARNING: unrecognized options: --enable-mac64, --enable-places, --enable-gcplacestest
 >  [...]
 >  config.status: executing src commands
 >  configure: WARNING: unrecognized options: --enable-mac64, --enable-places, --enable-gcplacestest
 >  >>> Installation is in-place:
 >  [...]
 >  
 >  It gives similar warnings with --enable-futures (futures are
 >  enabled by default; I just did that as a test).  A bit of looking
 >  through Racket source indicates that there are at least three
 >  separate "configure" scripts (the main one in "src", and two
 >  subsidiary ones), and I suspect that the arguments from the main
 >  one are just shoved into the other two; these two probably don't
 >  know what those options mean, so they complain. Don't know if this
 >  is conveniently fixable.
 
 If the warnings are all happenning in the foreign configure script
 then that's known, I think.  I don't know if there's a way to drop
 unknown configure options from the nested calls -- at least last time
 I looked for something I didn't find it.  (And it does need to pass
 flags, since some of them are known by all configures.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

Responsible changed from "nobody" to "eli" by ryanc at Wed, 06 Apr 2011 08:54:24 -0400
Reason>>> ffi

