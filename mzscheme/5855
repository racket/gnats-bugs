From nobody@champlain.ccs.neu.edu  Fri Sep 27 10:59:51 2002
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id KAA18522
	for bugs@plt-scheme.org; Fri, 27 Sep 2002 10:59:51 -0400
Message-Id: <200209271459.KAA18522@champlain.ccs.neu.edu>
Date: Fri, 27 Sep 2002 10:59:51 -0400
From: markj@cloaked.freeserve.co.uk
To: bugs@plt-scheme.org
Subject: Maths multiplication precision problems

>Number:         5855
>Category:       mzscheme
>Synopsis:       Maths multiplication precision problems
>Confidential:   no
>Severity:       serious
>Priority:       high
>Responsible:    clements
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Fri Sep 27 11:00:01 EDT 2002
>Closed-Date:    Fri Sep 27 11:47:21 EDT 2002
>Last-Modified:  Fri Sep 27 12:50:00 EDT 2002
>Originator:     MJR
>Release:        202.3
>Organization:
plt
>Environment:
linux-other
>Description:
Welcome to MzScheme version 202.3, Copyright (c) 1995-2002 PLT
> (* 17.35 25)
433.75000000000006

That hurts!

>How-To-Repeat:
Start mzscheme and do the above sum.  No, it's not a flawed pentium.  Reproduced in 200.2 and 200alpha14 too.

>Fix:

>Release-Note:

>Audit-Trail:

From: "Paul Steckler" <steck@ccs.neu.edu>
To: <markj@cloaked.freeserve.co.uk>, <bugs@plt-scheme.org>
Cc:  
Subject: RE: all/5855: Maths multiplication precision problems
Date: Fri, 27 Sep 2002 11:14:05 -0400

 > > (* 17.35 25)
 > 433.75000000000006
 > 
 > That hurts!
 
 This is due, I believe, to intrinsic limits of floating-point
 arithmetic.  I don't believe there's a bug involved.
 
 -- Paul
 
 

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: markj@cloaked.freeserve.co.uk
Cc: bugs@plt-scheme.org
Subject: Re: all/5855: Maths multiplication precision problems
Date: Fri, 27 Sep 2002 11:17:14 -0400 (EDT)

 What do you mean? 
 
 At Fri, 27 Sep 2002 10:59:51 -0400, markj@cloaked.freeserve.co.uk wrote:
 > You may claim or edit this problem report at
 > 
 > https://internal.plt-scheme.org/cgis-bin/gnatsweb.pl?cmd=edit&pr=5855&database=plt
 > 
 > >Number:         5855
 > >Category:       all
 > >Synopsis:       Maths multiplication precision problems
 > >Confidential:   no
 > >Severity:       serious
 > >Priority:       high
 > >Responsible:    steck
 > >State:          open
 > >Class:          sw-bug
 > >Submitter-Id:   unknown
 > >Arrival-Date:   Fri Sep 27 11:00:01 EDT 2002
 > >Closed-Date:
 > >Last-Modified:
 > >Originator:     MJR
 > >Release:        202.3
 > >Organization:
 > plt
 > >Environment:
 > linux-other
 > >Description:
 > Welcome to MzScheme version 202.3, Copyright (c) 1995-2002 PLT
 > > (* 17.35 25)
 > 433.75000000000006
 > 
 > That hurts!
 > 
 > >How-To-Repeat:
 > Start mzscheme and do the above sum.  No, it's not a flawed pentium.  Reproduced in 200.2 and 200alpha14 too.
 > 
 > >Fix:
 > >Release-Note:
 > >Audit-Trail:
 > >Unformatted:
 

From: John Clements <clements@brinckerhoff.org>
To: markj@cloaked.freeserve.co.uk
Cc: bugs@plt-scheme.org
Subject: Re: all/5855: Maths multiplication precision problems
Date: Fri, 27 Sep 2002 11:23:16 -0400

 On Friday, September 27, 2002, at 10:59  AM, 
 markj@cloaked.freeserve.co.uk wrote:
 > Welcome to MzScheme version 202.3, Copyright (c) 1995-2002 PLT
 >> (* 17.35 25)
 > 433.75000000000006
 >
 > That hurts!
 >
 >> How-To-Repeat:
 > Start mzscheme and do the above sum.  No, it's not a flawed pentium.  
 > Reproduced in 200.2 and 200alpha14 too.
 >
 
 
 It's not a flawed anything:
 
 [osterley:~] clements% less tmp.c
 #include <stdio.h>
 
 int main(int argc, char *argv[])
 {
    double e;
 
    e = 17.35 * 25;
 
    printf("%.20f\n",e);
 }
 [osterley:~] clements% gcc tmp.c
 [osterley:~] clements% ./a.out
 433.75000000000005684342
 [osterley:~] clements%
 
 
 That's just the way floating-point numbers are.  unless the denominator 
 is a power of two, you can't represent it exactly.
 
 john
 
Responsible-Changed-From-To: steck->clements
Responsible-Changed-By: clements
Responsible-Changed-When: Fri Sep 27 11:47:20 2002
Responsible-Changed-Why:
    I closed it
State-Changed-From-To: open->closed
State-Changed-By: clements
State-Changed-When: Fri Sep 27 11:47:20 2002
State-Changed-Why:
    Not a bug.

From: MJ Ray <markj@cloaked.freeserve.co.uk>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org, "Paul Steckler" <steck@ccs.neu.edu>
Subject: Re: all/5855: Maths multiplication precision problems 
Date: Fri, 27 Sep 2002 17:48:29 +0100

 John Clements wrote:
 > That's just the way floating-point numbers are.  unless the denominator 
 > is a power of two, you can't represent it exactly.
 
 Why is PLT Scheme the only implementation on this system to expose the
 problems of an underlying floating-point representation?  For example:
 
 ; bigloo
 ------------------------------------------------------------------------------
 Bigloo (2.5b)                                                           ,--^, 
 [...]
 Welcome to the interpreter
 
 1:=> (* 17.35 25)
 433.75
 
 
 ; guile
 guile> (* 17.35 25)
 433.75
 
 IIRC, one of these uses some heuristics when working with inexact numbers
 and the other uses a high-precision maths library.
 
 Maybe not an outright bug in the code, but this is an unwelcome surprise. 
 Can it really not be improved?
 -- 
 MJR
>Unformatted:

