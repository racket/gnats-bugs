From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed May  9 01:28:36 2007
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.173])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l495Sa4D016449
	for <bugs@bugs.plt-scheme.org>; Wed, 9 May 2007 01:28:36 -0400
Message-Id: <200705090528.l495SXu7016444@champlain.ccs.neu.edu>
Date: Wed, 9 May 2007 01:28:33 -0400
From: init@initerm.com
To: bugs@plt-scheme.org
Subject: speed change of RECEIVE according to module identifier, all-from

>Number:         8656
>Category:       mzscheme
>Synopsis:       speed change of RECEIVE according to module identifier, all-from
>Class:          not-a-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed May 09 01:30:01 -0400 2007
>Closed-Date:    Thu May 10 11:19:56 -0400 2007
>Last-Modified:  Thu May 10 11:19:56 -0400 2007
>Originator:     Joo ChurlSoo
>Organization:
plt
>Submitter-Id:   unknown
>Release:        Mzscheme 369.100
>Environment:
windows-xp
>Description:
In current module system of MzScheme,
if `(provide (all-from mzscheme))' is added to `receive.ss' file, the speed of
RECEIVE becomes two times or more faster.  The speed of CALL-WITH-VALUES also
becomes markedly faster in REPL.

>How-To-Repeat:
;;; tmp.scm
(define-syntax dotimes
  (syntax-rules ()
    ((dotimes (i count) b d ...)
     (do ((i 0 (+ i 1)))
	 ((= i count))
       b d ...))
    ((dotimes count b d ...)
     (do ((i 0 (+ i 1)))
	 ((= i count))
       b d ...))))
(define (test-r)
  (dotimes (i 10000000) (receive (x y z) (values 1 2 3) (+ i x y z))))
(define (test-v00)
  (dotimes (i 10000000)
	   (call-with-values (lambda () (values 1 2 3))
	     (lambda (x y z) (+ i x y z)))))
;;; eof

Welcome to MzScheme v369.100 [3m], Copyright (c) 2004-2007 PLT Scheme Inc.
> (load "tmp.scm")			;before change
> (time (test-v00))
cpu time: 20609 real time: 37964 gc time: 741
> (exit)


Welcome to MzScheme v369.100 [3m], Copyright (c) 2004-2007 PLT Scheme Inc.
> (require (lib "8.ss" "srfi"))		;before change
> (load "tmp.scm")
> (time (test-v00))
cpu time: 19698 real time: 39827 gc time: 620
> (time (test-r))
cpu time: 7912 real time: 16163 gc time: 0
> (exit)


Process scheme finished
Welcome to MzScheme v369.100 [3m], Copyright (c) 2004-2007 PLT Scheme Inc.
> (require (lib "8.ss" "srfi"))		;after change
> (load "tmp.scm")
> (time (test-v00))
cpu time: 3174 real time: 3265 gc time: 0
> (time (test-r))
cpu time: 3205 real time: 3234 gc time: 0
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: init@initerm.com, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/8656: speed change of RECEIVE according to module identifier, all-from
Date: Wed, 9 May 2007 16:26:10 +0800

 At Wed, 9 May 2007 01:30:01 -0400, init@initerm.com wrote:
 > In current module system of MzScheme,
 > if `(provide (all-from mzscheme))' is added to `receive.ss' file, the speed of
 > RECEIVE becomes two times or more faster.  The speed of CALL-WITH-VALUES also
 > becomes markedly faster in REPL.
 
 This doesn't have anything to do with SRFI 8, though. Simply adding
 `(require mzscheme)' to the front of the program does the same thing,
 which is to effectively declare that `+' should be compiled as
 MzScheme's `+' instead of a reference to a top-level binding that might
 be redefined later. You can also use `mzscheme --prim'.
 
 In general, if you care about performance, you should put the code in a
 `module'. In this case, a `(require mzscheme)' prefix gives you nearly
 all the benefit, but putting code in a module enables more
 optimizations in general.
 
 Matthew
 
From: <init@initerm.com>
To: <bugs@plt-scheme.org>, <init@initerm.com>, <mflatt@cs.utah.edu>
Cc: 
Subject: Re: all/8656: speed change of RECEIVE according to module identifier, all-from
Date: Thu, 10 May 2007 11:34:48 +0900

 I just reported a real occurrence.
 I'm a novice at MzScheme (and Scheme), especially module system.
 
 Thanks for your suggestion.
 
 --
 Joo ChurlSoo 
 
 
 
 
 

Class changed from "sw-bug" to "not-a-bug" by eli at Thu, 10 May 2007 11:19:56 -0400
Reason>>> See Matthew's reply

State changed from "open" to "closed" by eli at Thu, 10 May 2007 11:19:56 -0400
Reason>>> See Matthew's reply

