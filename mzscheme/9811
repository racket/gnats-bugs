From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Oct  5 00:58:52 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.232])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m954wiRu001985
	for <bugs@bugs.plt-scheme.org>; Sun, 5 Oct 2008 00:58:44 -0400
Message-Id: <200810050458.m954wdsC001978@champlain.ccs.neu.edu>
Date: Sun, 5 Oct 2008 00:58:39 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: compose-generated function names

>Number:         9811
>Category:       mzscheme
>Synopsis:       compose-generated function names
>Class:          sw-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Oct 05 01:00:01 -0400 2008
>Closed-Date:    Sat Feb 04 03:05:44 -0500 2012
>Last-Modified:  Sat Feb 04 03:05:44 -0500 2012
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.1
>Environment:
any
>Description:
As the below shows, functions that use `compose' have a generic
name, which means that it loses information that might be
important for debugging.  Changing the code to use a name is not
going to be too helpful, it can be something like
`composed-function' but that still doesn't have information about
the original functions.

A better solution is to make it into a macro that will use source
information so you can tell which composition expression caused the
problem.  It's even possible to make this work for `compose' by
making it expand into a version of compose with the location where
it was specified.

Still more: this should be done for other HO combinators like
`negate' and `curry'...

But all of this really points at a need for a run-time ability to
rename a function (preferably without the overhead that reduce-arity
creates).
>How-To-Repeat:
> (define (f x) x)
> (define (g x) x)
> (define h (compose f g))
> (h 1 2)
procedure .../private/list.ss:246:17: expects 1 argument, given 2: 1 2
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9811: compose-generated function names
Date: Sun, 5 Oct 2008 10:24:10 -0400

 Compose can remain a function and return an appropriately named  
 applicable struct :-)
 
 In general, it is an **awful idea** to use macros where functions work.
 
 
 
 On Oct 5, 2008, at 1:00 AM, eli@barzilay.org wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9811
 >
 > Reported by Eli Barzilay for release: 4.1.1
 >
 > *** Description:
 > As the below shows, functions that use `compose' have a generic
 > name, which means that it loses information that might be
 > important for debugging.  Changing the code to use a name is not
 > going to be too helpful, it can be something like
 > `composed-function' but that still doesn't have information about
 > the original functions.
 >
 > A better solution is to make it into a macro that will use source
 > information so you can tell which composition expression caused the
 > problem.  It's even possible to make this work for `compose' by
 > making it expand into a version of compose with the location where
 > it was specified.
 >
 > Still more: this should be done for other HO combinators like
 > `negate' and `curry'...
 >
 > But all of this really points at a need for a run-time ability to
 > rename a function (preferably without the overhead that reduce-arity
 > creates).
 >
 > *** How to repeat:
 >> (define (f x) x)
 >> (define (g x) x)
 >> (define h (compose f g))
 >> (h 1 2)
 > procedure .../private/list.ss:246:17: expects 1 argument, given 2: 1 2
 >
 > *** Environment:
 > any
 >
 
From: "Carl Eastlund" <cce@plt-scheme.org>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: eli@barzilay.org, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9811: compose-generated function names
Date: Sun, 5 Oct 2008 10:49:56 -0400

 Yes.  I want to be able to (apply curry f args), and I want it to have
 the same behavior as applying curry directly.  This proposal would
 not.  Lambda can play funny contextual games because it has to be a
 macro and you can't (apply lambda foo); higher order combinators just
 have to live with being (syntactically) second-class.
 
 On Sun, Oct 5, 2008 at 10:24 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > Compose can remain a function and return an appropriately named applicable
 > struct :-)
 >
 > In general, it is an **awful idea** to use macros where functions work.
 
 -- 
 Carl Eastlund
From: "Robby Findler" <robby@plt-scheme.org>
To: "Carl Eastlund" <cce@plt-scheme.org>
Cc: "Matthias Felleisen" <matthias@ccs.neu.edu>, eli@barzilay.org,
        bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9811: compose-generated function names
Date: Sun, 5 Oct 2008 10:03:06 -0500

 Or one could have a more efficient wrapper function generator that
 allowed you to change the name of the function (this can be done right
 now, but just not efficiently).
 
 Robby
 
 On Sun, Oct 5, 2008 at 9:49 AM, Carl Eastlund <cce@plt-scheme.org> wrote:
 > Yes.  I want to be able to (apply curry f args), and I want it to have
 > the same behavior as applying curry directly.  This proposal would
 > not.  Lambda can play funny contextual games because it has to be a
 > macro and you can't (apply lambda foo); higher order combinators just
 > have to live with being (syntactically) second-class.
 >
 > On Sun, Oct 5, 2008 at 10:24 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> Compose can remain a function and return an appropriately named applicable
 >> struct :-)
 >>
 >> In general, it is an **awful idea** to use macros where functions work.
 >
 > --
 > Carl Eastlund
 >
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>,
        "Carl Eastlund" <cce@plt-scheme.org>,
        "Robby Findler" <robby@plt-scheme.org>
Cc: bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9811: compose-generated function names
Date: Tue, 7 Oct 2008 02:34:02 -0400

 On Oct  5, Matthias Felleisen wrote:
 > 
 > Compose can remain a function and return an appropriately named
 > applicable struct :-)
 
 Right -- but that makes it more expensive to call.  (In addition,
 there should be some central facility for a "dynamically renamed"
 function for such things, instead of a per-function solution.)
 
 
 On Oct  5, Carl Eastlund wrote:
 > Yes.  I want to be able to (apply curry f args), and I want it to
 > have the same behavior as applying curry directly.  This proposal
 > would not.  Lambda can play funny contextual games because it has to
 > be a macro and you can't (apply lambda foo); higher order
 > combinators just have to live with being (syntactically)
 > second-class.
 
 Well, what I was trying to describe is a solution that works -- when
 you have
 
   (apply compose ...stuff...)
 
 then `compose' would expand to a composition function that always uses
 a name that indicates *that* location, so that composition results in
 something like #<procedure:compose-from-some-location>.  It's better
 than what you get now, but it was just a comment -- I definitely don't
 think that it's a good idea.
 
 
 On Oct  5, Robby Findler wrote:
 > Or one could have a more efficient wrapper function generator that
 > allowed you to change the name of the function (this can be done
 > right now, but just not efficiently).
 
 Right -- that's the summary of my original request.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Responsible changed from "nobody" to "eli" by samth at Fri, 03 Feb 2012 16:07:38 -0500
Reason>>> author of current `compose' implementation

State changed from "open" to "closed" by eli@racket-lang.org at Sat, 04 Feb 2012 03:05:44 -0500
Reason>>> A commit by eli@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/1c841e143f
