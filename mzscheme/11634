From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Jan 18 00:10:12 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id p0I5A9Du031186
	for <bugs@bugs.plt-scheme.org>; Tue, 18 Jan 2011 00:10:09 -0500
Message-Id: <201101180510.p0I5A6cp031179@champlain.ccs.neu.edu>
Date: Tue, 18 Jan 2011 00:10:06 -0500
From: endobson@cs.brown.edu
To: bugs@racket-lang.org
Subject: continuation marks are not captured properly

>Number:         11634
>Category:       mzscheme
>Synopsis:       continuation marks are not captured properly
>Class:          not-a-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Jan 18 00:12:01 -0500 2011
>Closed-Date:    Sun Mar 15 12:40:27 -0400 2015
>Last-Modified:  Sun Mar 15 12:40:27 -0400 2015
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.2
>Environment:
macosx "Darwin eric-dobsons-macbook.local 10.6.0 Darwin Kernel Version 10.6.0: Wed Nov 10 18:13:17 PST 2010; root:xnu-1504.9.26~3/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 186896860

Collections:
(("/Users/eric/Library/Racket/5.0.2/collects" non-existent-path) ("/Applications/Racket v5.0.2/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "!
 wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t))
>Description:
The following two lines should produce the similar outputs according to the documentation, but they dont.
>How-To-Repeat:
#lang racket
(void (void (void (display (continuation-mark-set->context (call/cc continuation-marks))))))
(newline)
(newline)
(void (void (void (display (continuation-mark-set->context (current-continuation-marks))))))
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: endobson@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11634: continuation marks are not captured properly
Date: Tue, 18 Jan 2011 06:20:34 -0700

 At Tue, 18 Jan 2011 00:12:02 -0500, endobson@cs.brown.edu wrote:
 > *** Description:
 > The following two lines should produce the similar outputs according to the 
 > documentation, but they dont.
 > 
 > *** How to repeat:
 > #lang racket
 > (void (void (void (display (continuation-mark-set->context (call/cc 
 > continuation-marks))))))
 > (newline)
 > (newline)
 > (void (void (void (display (continuation-mark-set->context 
 > (current-continuation-marks))))))
 
 Unlike other continuation-mark operations,
 `continuation-mark-set->context' isn't reliable and isn't intended to
 be reliable. In this case, at least on my machine, a relevant part of
 the approximation is that prompts are ignored.
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: endobson@cs.brown.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11634: continuation marks are not captured properly
Date: Tue, 18 Jan 2011 09:01:24 -0500

 --Apple-Mail-9--775495668
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain;
 	charset=us-ascii
 
 My issue was not that continuation-mark-set->context isn't reliable, it =
 is that the documentation says that current-continuation-marks says that =
 it is equivalent to=20
 
 (call-with-current-continuation
     (lambda (k)
       (continuation-marks k prompt-tag))
     prompt-tag)
 
 Now if they are equivalent then, I should not be able to make a context =
 that distinguishes them, but=20
 (void (void (void (display (continuation-mark-set->context [] ))))) =
 does.
 
 The following program shows that it is continuation-marks that is the =
 difference and not some of the default arguments.
 
 
 #lang racket
 (define-syntax (v1 x)
   #'(current-continuation-marks))
 
 (define-syntax (v2 x)
   #'(current-continuation-marks (default-continuation-prompt-tag)))
 (define-syntax (v3 x)
   #'(call-with-current-continuation (lambda (k) (continuation-marks =
 k))))
 (define-syntax (v4 x)
   #'(call-with-current-continuation (lambda (k) (continuation-marks k)) =
 (default-continuation-prompt-tag)))
 (define-syntax (v5 x)
   #'(call-with-current-continuation (lambda (k) (continuation-marks k =
 (default-continuation-prompt-tag)))))
 (define-syntax (v6 x)
   #'(call-with-current-continuation (lambda (k) (continuation-marks k =
 (default-continuation-prompt-tag)))=20
                                     (default-continuation-prompt-tag)))
 
 (define (make-stack-trace f)
   (foldr (lambda (x acc) (if acc (begin (f) #f) #f)) #t (list #f #f #f =
 #f)))
 
 (make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set->context v1))))
 (make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set->context v2))))
 (make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set->context v3))))
 (make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set->context v4))))
 (make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set->context v5))))
 (make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set->context v6))))
 
 -Eric
 
 
 
 On Jan 18, 2011, at 8:20 AM, Matthew Flatt wrote:
 
 > At Tue, 18 Jan 2011 00:12:02 -0500, endobson@cs.brown.edu wrote:
 >> *** Description:
 >> The following two lines should produce the similar outputs according =
 to the=20
 >> documentation, but they dont.
 >>=20
 >> *** How to repeat:
 >> #lang racket
 >> (void (void (void (display (continuation-mark-set->context (call/cc=20=
 
 >> continuation-marks))))))
 >> (newline)
 >> (newline)
 >> (void (void (void (display (continuation-mark-set->context=20
 >> (current-continuation-marks))))))
 >=20
 > Unlike other continuation-mark operations,
 > `continuation-mark-set->context' isn't reliable and isn't intended to
 > be reliable. In this case, at least on my machine, a relevant part of
 > the approximation is that prompts are ignored.
 >=20
 
 
 --Apple-Mail-9--775495668
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/html;
 	charset=us-ascii
 
 <html><head></head><body style=3D"word-wrap: break-word; =
 -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; =
 "><div>My issue was not that continuation-mark-set-&gt;context isn't =
 reliable, it is that the documentation says that =
 current-continuation-marks says that it is equivalent =
 to&nbsp;</div><div><br></div><div><span class=3D"Apple-style-span" =
 style=3D"font-family: serif; "><table cellspacing=3D"0" =
 class=3D"RktBlk"><tbody><tr><td style=3D"padding-left: 0px; =
 padding-right: 0px; vertical-align: baseline; "><span class=3D"RktPn" =
 style=3D"font-family: monospace; color: rgb(132, 60, 36); =
 ">(</span><span class=3D"RktSym" style=3D"font-family: monospace; color: =
 rgb(38, 38, 128); "><a =
 href=3D"http://docs.racket-lang.org/reference/cont.html?q=3Dcurrent-contin=
 uation-marks#(def._((quote._~23~25kernel)._call-with-current-continuation)=
 )" class=3D"RktValLink" pltdoc=3D"x" style=3D"text-decoration: none; =
 color: blue; =
 ">call-with-current-continuation</a></span></td></tr><tr><td =
 style=3D"padding-left: 0px; padding-right: 0px; vertical-align: =
 baseline; "><span class=3D"RktPlain"><span class=3D"hspace" =
 style=3D"font-family: monospace; ">&nbsp;&nbsp;</span></span><span =
 class=3D"hspace" style=3D"font-family: monospace; =
 ">&nbsp;&nbsp;</span><span class=3D"RktPn" style=3D"font-family: =
 monospace; color: rgb(132, 60, 36); ">(</span><span class=3D"RktSym" =
 style=3D"font-family: monospace; color: rgb(38, 38, 128); "><a =
 href=3D"http://docs.racket-lang.org/reference/lambda.html?q=3Dcurrent-cont=
 inuation-marks#(form._((lib._racket/private/base..rkt)._lambda))" =
 class=3D"RktStxLink" pltdoc=3D"x" style=3D"text-decoration: none; color: =
 black; font-weight: bold; ">lambda</a></span><span class=3D"hspace" =
 style=3D"font-family: monospace; ">&nbsp;</span><span class=3D"RktPn" =
 style=3D"font-family: monospace; color: rgb(132, 60, 36); =
 ">(</span><span class=3D"RktSym" style=3D"font-family: monospace; color: =
 rgb(38, 38, 128); ">k</span><span class=3D"RktPn" style=3D"font-family: =
 monospace; color: rgb(132, 60, 36); ">)</span></td></tr><tr><td =
 style=3D"padding-left: 0px; padding-right: 0px; vertical-align: =
 baseline; "><span class=3D"RktPlain"><span class=3D"hspace" =
 style=3D"font-family: monospace; ">&nbsp;&nbsp;</span></span><span =
 class=3D"hspace" style=3D"font-family: monospace; =
 ">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=3D"RktPn" =
 style=3D"font-family: monospace; color: rgb(132, 60, 36); =
 ">(</span><span class=3D"RktSym" style=3D"font-family: monospace; color: =
 rgb(38, 38, 128); "><a =
 href=3D"http://docs.racket-lang.org/reference/contmarks.html?q=3Dcurrent-c=
 ontinuation-marks#(def._((quote._~23~25kernel)._continuation-marks))" =
 class=3D"RktValLink" pltdoc=3D"x" style=3D"text-decoration: none; color: =
 blue; ">continuation-marks</a></span><span class=3D"hspace" =
 style=3D"font-family: monospace; ">&nbsp;</span><span class=3D"RktSym" =
 style=3D"font-family: monospace; color: rgb(38, 38, 128); =
 ">k</span><span class=3D"hspace" style=3D"font-family: monospace; =
 ">&nbsp;</span><span class=3D"RktVar" style=3D"font-family: monospace; =
 color: rgb(38, 38, 128); font-style: italic; ">prompt-tag</span><span =
 class=3D"RktPn" style=3D"font-family: monospace; color: rgb(132, 60, =
 36); ">)</span><span class=3D"RktPn" style=3D"font-family: monospace; =
 color: rgb(132, 60, 36); ">)</span></td></tr><tr><td =
 style=3D"padding-left: 0px; padding-right: 0px; vertical-align: =
 baseline; "><span class=3D"RktPlain"><span class=3D"hspace" =
 style=3D"font-family: monospace; ">&nbsp;&nbsp;</span></span><span =
 class=3D"hspace" style=3D"font-family: monospace; =
 ">&nbsp;&nbsp;</span><span class=3D"RktVar" style=3D"font-family: =
 monospace; color: rgb(38, 38, 128); font-style: italic; =
 ">prompt-tag</span><span class=3D"RktPn" style=3D"font-family: =
 monospace; color: rgb(132, 60, 36); =
 ">)</span></td></tr></tbody></table></span><div><br></div></div><div>Now =
 if they are equivalent then, I should not be able to make a context that =
 distinguishes them, but&nbsp;</div><div>(void (void (void (display =
 (continuation-mark-set-&gt;context&nbsp;[]&nbsp;))))) =
 does.</div><div><br></div><div>The following program shows that it is =
 continuation-marks that is the difference and not some of the default =
 arguments.</div><div><br></div><div><br></div><div><div>#lang =
 racket</div><div>(define-syntax (v1 =
 x)</div><div>&nbsp;&nbsp;#'(current-continuation-marks))</div><div><br></d=
 iv><div>(define-syntax (v2 =
 x)</div><div>&nbsp;&nbsp;#'(current-continuation-marks =
 (default-continuation-prompt-tag)))</div><div>(define-syntax (v3 =
 x)</div><div>&nbsp;&nbsp;#'(call-with-current-continuation (lambda (k) =
 (continuation-marks k))))</div><div>(define-syntax (v4 =
 x)</div><div>&nbsp;&nbsp;#'(call-with-current-continuation (lambda (k) =
 (continuation-marks k)) =
 (default-continuation-prompt-tag)))</div><div>(define-syntax (v5 =
 x)</div><div>&nbsp;&nbsp;#'(call-with-current-continuation (lambda (k) =
 (continuation-marks k =
 (default-continuation-prompt-tag)))))</div><div>(define-syntax (v6 =
 x)</div><div>&nbsp;&nbsp;#'(call-with-current-continuation (lambda (k) =
 (continuation-marks k =
 (default-continuation-prompt-tag)))&nbsp;</div><div>&nbsp;&nbsp; &nbsp; =
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
 &nbsp;(default-continuation-prompt-tag)))</div><div><br></div><div>(define=
  (make-stack-trace f)</div><div>&nbsp;&nbsp;(foldr (lambda (x acc) (if =
 acc (begin (f) #f) #f)) #t (list #f #f #f =
 #f)))</div><div><br></div><div>(make-stack-trace (lambda () =
 (pretty-write (continuation-mark-set-&gt;context =
 v1))))</div><div>(make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set-&gt;context v2))))</div><div>(make-stack-trace =
 (lambda () (pretty-write (continuation-mark-set-&gt;context =
 v3))))</div><div>(make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set-&gt;context v4))))</div><div>(make-stack-trace =
 (lambda () (pretty-write (continuation-mark-set-&gt;context =
 v5))))</div><div>(make-stack-trace (lambda () (pretty-write =
 (continuation-mark-set-&gt;context =
 v6))))</div></div><div><br></div><div>-Eric</div><div><br></div><div><br><=
 /div><div><br><div><div>On Jan 18, 2011, at 8:20 AM, Matthew Flatt =
 wrote:</div><br class=3D"Apple-interchange-newline"><blockquote =
 type=3D"cite"><div>At Tue, 18 Jan 2011 00:12:02 -0500, <a =
 href=3D"mailto:endobson@cs.brown.edu">endobson@cs.brown.edu</a> =
 wrote:<br><blockquote type=3D"cite">*** =
 Description:<br></blockquote><blockquote type=3D"cite">The following two =
 lines should produce the similar outputs according to the =
 <br></blockquote><blockquote type=3D"cite">documentation, but they =
 dont.<br></blockquote><blockquote =
 type=3D"cite"><br></blockquote><blockquote type=3D"cite">*** How to =
 repeat:<br></blockquote><blockquote type=3D"cite">#lang =
 racket<br></blockquote><blockquote type=3D"cite">(void (void (void =
 (display (continuation-mark-set-&gt;context (call/cc =
 <br></blockquote><blockquote =
 type=3D"cite">continuation-marks))))))<br></blockquote><blockquote =
 type=3D"cite">(newline)<br></blockquote><blockquote =
 type=3D"cite">(newline)<br></blockquote><blockquote type=3D"cite">(void =
 (void (void (display (continuation-mark-set-&gt;context =
 <br></blockquote><blockquote =
 type=3D"cite">(current-continuation-marks))))))<br></blockquote><br>Unlike=
  other continuation-mark =
 operations,<br>`continuation-mark-set-&gt;context' isn't reliable and =
 isn't intended to<br>be reliable. In this case, at least on my machine, =
 a relevant part of<br>the approximation is that prompts are =
 ignored.<br><br></div></blockquote></div><br></div></body></html>=
 
 --Apple-Mail-9--775495668--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: endobson@cs.brown.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11634: continuation marks are not captured properly
Date: Tue, 18 Jan 2011 07:21:10 -0700

 At Tue, 18 Jan 2011 09:01:24 -0500, Eric Dobson wrote:
 > My issue was not that continuation-mark-set->context isn't reliable, it is that 
 > the documentation says that current-continuation-marks says that it is 
 > equivalent to 
 > 
 > (call-with-current-continuation
 >     (lambda (k)
 >       (continuation-marks k prompt-tag))
 >     prompt-tag)
 
 True, but the documentation for `continuation-mark-set->context'
 explicitly says that its results "may merely approximate the correct
 answer". As soon as `continuation-mark-set->context' is involved, it
 can be blamed for the difference.
 
 > Now if they are equivalent then, I should not be able to make a context that 
 > distinguishes them, but 
 > (void (void (void (display (continuation-mark-set->context [] ))))) does.
 
 This line of reasoning doesn't really help with a function that offers
 so little guarantee about what it produces. After all, as far as you
 can tell, the implementation of `continuation-mark-set->context' flips
 a coin (as essentially allowed by its documentation), and you've just
 been exceedingly unlucky.
 
 In any case, it turns out that context information in a captured
 continuation is implemented differently than context information from
 the current continuation, and `continuation-mark-set->context' turns
 out to be sensitive to that difference, so you will indeed see
 differences from your two expressions.
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: endobson@cs.brown.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11634: continuation marks are not captured properly
Date: Tue, 18 Jan 2011 09:49:21 -0500

 Ok I agree that this is within the spec. For debugging purposes I would =
 want continuation-mark-set->context to give the same information. But I =
 tried experimenting with errortrace and I get a better information then =
 anyways. So I think this can be closed as not a bug.
 
 -Eric
 
 On Jan 18, 2011, at 9:21 AM, Matthew Flatt wrote:
 
 > At Tue, 18 Jan 2011 09:01:24 -0500, Eric Dobson wrote:
 >> My issue was not that continuation-mark-set->context isn't reliable, =
 it is that=20
 >> the documentation says that current-continuation-marks says that it =
 is=20
 >> equivalent to=20
 >>=20
 >> (call-with-current-continuation
 >>    (lambda (k)
 >>      (continuation-marks k prompt-tag))
 >>    prompt-tag)
 >=20
 > True, but the documentation for `continuation-mark-set->context'
 > explicitly says that its results "may merely approximate the correct
 > answer". As soon as `continuation-mark-set->context' is involved, it
 > can be blamed for the difference.
 >=20
 >> Now if they are equivalent then, I should not be able to make a =
 context that=20
 >> distinguishes them, but=20
 >> (void (void (void (display (continuation-mark-set->context [] ))))) =
 does.
 >=20
 > This line of reasoning doesn't really help with a function that offers
 > so little guarantee about what it produces. After all, as far as you
 > can tell, the implementation of `continuation-mark-set->context' flips
 > a coin (as essentially allowed by its documentation), and you've just
 > been exceedingly unlucky.
 >=20
 > In any case, it turns out that context information in a captured
 > continuation is implemented differently than context information from
 > the current continuation, and `continuation-mark-set->context' turns
 > out to be sensitive to that difference, so you will indeed see
 > differences from your two expressions.
 >=20
 


Class changed from "sw-bug" to "not-a-bug" by endobson at Sun, 08 Mar 2015 01:40:40 -0500
Reason>>> Satsified with Matthew's answer.


State changed from "open" to "closed" by endobson at Sun, 15 Mar 2015 12:40:27 -0400
Reason>>> Turns out not a bug isn't enough to close the issue.

