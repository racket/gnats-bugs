From: gregp@ccs.neu.edu
Reply-To: gregp@ccs.neu.edu
To: bugs
Cc:
Subject: serialize produces something that cannot deserialize
X-Send-Pr-Version: gnatsweb-4.00 (1.124.2.2)
X-GNATS-Notify:

>Number:         7261
>Category:       mzscheme
>Synopsis:       serialize produces something that cannot deserialize
>Class:          sw-bug
>Responsible:    mflatt
>Notify-List:    
>Severity:       critical
>Priority:       high
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Feb 25 12:54:11 -0500 2005
>Last-Modified:  Sun Feb 27 22:10:00 -0500 2005
>Originator:     gregp@ccs.neu.edu (Greg Pettyjohn)
>Organization:
>Submitter-Id:   unknown
>Release:        
>Environment:
>Description:
I can create a structure that will serialize, but the resulting s-expr
won't deserialize. This happens because identifier symbols in the output
will have extra crap appended to the end (see below.)
>How-To-Repeat:
1. define-closure.ss and closure.ss should be attached.
2. Create the following two files.
3. Execute the second file and observe the error.

;; FILE: ser-bug01

(module ser-bug01 mzscheme
  (require (lib "define-closure.ss" "prototype-web-server"))
  (provide id)
  (define-closure id (x) () x)
  (define id (make-id)))

;; CLIENT FILE:
(require "ser-bug01.ss"
         (lib "serialize.ss"))

(deserialize (serialize id))
>Fix:
The output of serialize contains identifier symbol(s) that look like this:
id:deserialize-info.1

BUT they should look like this:
id:deserialize-info

i.e. without the mysterious period+number appended to the end
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: gregp@ccs.neu.edu, bugs@plt-scheme.org
Cc: sk@cs.brown.edu
Subject: Re: mzscheme/7261: serialize produces something that cannot deserialize
Date: Sun, 27 Feb 2005 07:02:28 -0700

 At Fri, 25 Feb 2005 12:54:12 -0500, gregp@ccs.neu.edu wrote:
 > 1. define-closure.ss and closure.ss should be attached.
 
 The attachment seems not to have made it, and I'm having trouble
 reproducing the error with the code that you posted to plt-scheme.
 
 I think I know what the problem is, though, and this little example has
 the same problem:
 
  (module c mzscheme
    (require (lib "serialize.ss"))
   
    (define-syntax (foo stx) 
      #'(begin
          (define-serializable-struct a (b c))
          (provide make-a)))
 
    (foo))
 
 To fix this, I expect to change `make-serialize-info'. The identifier
 for the second argument will be replaced with a symbol argument and a
 module-path-index/symbol/#f argument. The symbol is the name of the
 module export or top-level definition, and the
 module-path-index/symbol/#f identifies the module (or #f for the top
 level).
 
 Matthew
 
State changed from "open" to "closed" by mflatt at Sun, 27 Feb 2005 22:07:55 -0500
Reason>>> Fixed, I think.

From: Matthew Flatt <mflatt@cs.utah.edu>
To: gregp@ccs.neu.edu, bugs@plt-scheme.org
Cc: sk@cs.brown.edu
Subject: Re: mzscheme/7261: serialize produces something that cannot deserialize
Date: Sun, 27 Feb 2005 20:06:53 -0700

 At Fri, 25 Feb 2005 12:54:12 -0500, gregp@ccs.neu.edu wrote:
 > I can create a structure that will serialize, but the resulting s-expr
 > won't deserialize. This happens because identifier symbols in the output
 > will have extra crap appended to the end (see below.)
 
 I changed slightly the way that `make-serialize-info' uses its second
 argument, and probably your macro will "just work". See the new MzLib
 docs for specific.
 
 Matthew
 
>Unformatted:
