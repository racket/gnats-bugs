From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue May 15 13:56:15 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.234])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l4FHuFnY026771
	for <bugs@bugs.plt-scheme.org>; Tue, 15 May 2007 13:56:15 -0400
Message-Id: <200705151756.l4FHuBco026766@champlain.ccs.neu.edu>
Date: Tue, 15 May 2007 13:56:11 -0400
From: matthias@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: bug in contract system

>Number:         8673
>Category:       mzscheme
>Synopsis:       contracts: case-> doesn't signal syntax errors when there are redundant cases
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue May 15 14:00:01 -0400 2007
>Last-Modified:  Tue May 15 19:44:09 -0400 2007
>Originator:     matthias
>Organization:
plt
>Submitter-Id:   unknown
>Release:        369.100-svn4may2007
>Environment:
macosx "Darwin america.local 8.9.0 Darwin Kernel Version 8.9.0: Thu Feb 22 20:54:07 PST 2007; root:xnu-792.17.14~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx/3m) (get-display-depth) = 32
Docs Installed:
(("/Users/matthias/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced") ("/Users/matthias/plt/collects/doc" "help" "acl2" "teachpack") (* "/Users/matthias/Library/PLT Scheme/planet/300/369.100/cache/plt/typed-scheme.plt/1/5/doc"))
Human Language: english
(current-memory-use) 125150340

Collections:
(("/Users/matthias/Unison/collects/" ".DS_Store" "date" "finance" "testing" "utils" "web") ("/Users/matthias/Library/PLT Scheme/369.100/collects" non-existent-path) ("/Users/matthias/plt/collects" ".DS_Store" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "doc" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "finish-install" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "reduction-semantics" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "ssax" "stepper" "string-constants" "swindle" "syntax" "syn!
 tax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "wxme" "xelda" "xml"))
Computer Language: (("Professional Languages" "PLT" "Pretty Big (includes MrEd and Advanced Student)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
(module m mzscheme

 (require (lib "contract.ss"))

 (define (f x) x)

 (provide/contract [f (case-> (number? . -> . number?) (string? . -> . string?))]))

(require m)

(f "hi")


I expected the above to work just fine.
>How-To-Repeat:
It raises the following error: 

. 11:1: top-level broke the contract 
  (case->
    (-> number? number?)
    (-> string? string?))
on f; expected <number?>, given: "hi"
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@cs.uchicago.edu>
To: matthias@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8673: bug in contract system
Date: Tue, 15 May 2007 13:50:46 -0500

 On 5/15/07, matthias@ccs.neu.edu <matthias@ccs.neu.edu> wrote:
 > (module m mzscheme
 >  (require (lib "contract.ss"))
 >  (define (f x) x)
 >  (provide/contract [f (case-> (number? . -> . number?) (string? . -> . string?))]))
 >
 > (require m)
 > (f "hi")
 >
 > I expected the above to work just fine.
 >
 > *** How to repeat:
 > It raises the following error:
 >
 > . 11:1: top-level broke the contract
 >   (case->
 >     (-> number? number?)
 >     (-> string? string?))
 > on f; expected <number?>, given: "hi"
 >
 
 Case-lambda is not union! It dispatches on the number of arguments at
 the application site. Period. Case-> is designed to be a contract for
 case-lambda.
 
 If you want union, you'll have to use and/c. But I can't, in general,
 union contracts unless there is some first-order test I can do to pick
 one of the branches of the union. There isn't one in that example.
 And, of course, it only gets worse as you get more higher-order.
 
 Anyways, there are two behaviors that seem reasonable to me for the
 code above. One is what you see, and it is working in parallel to
 mzscheme's case-lambda. That is, each case is considered in turn, and
 it masks out further cases.
 
 The other behavior is that the contract library raises a syntax error
 saying "the second case in this case-> cannot ever happen".
 
 I didn't implement the second because a), mzscheme accepts this function:
 
   Welcome to MzScheme v369.100 [3m], Copyright (c) 2004-2007 PLT Scheme Inc.
   > (case-lambda [(x) x][(y) (+ y 1)])
   #<procedure>
 
 and b), it is painful to compute.
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8673: bug in contract system
Date: Tue, 15 May 2007 16:23:30 -0400

 On May 15, 2007, at 2:50 PM, Robby Findler wrote:
 
 > The other behavior is that the contract library raises a syntax error
 > saying "the second case in this case-> cannot ever happen".
 >
 > I didn't implement the second because a), mzscheme accepts this  
 > function:
 >
 >  Welcome to MzScheme v369.100 [3m], Copyright (c) 2004-2007 PLT  
 > Scheme Inc.
 >  > (case-lambda [(x) x][(y) (+ y 1)])
 >  #<procedure>
 >
 > and b), it is painful to compute.
 
 I accept that case-> should provide contracts consistent with case- 
 lambda. But I would very much prefer this. I consider the situation  
 analogous to
 
 (module foo mzscheme
    (require (lib "contract.ss"))
 
    (define (foo x) x)
 
    (provide/contract
     [foo (-> string? string? string?)]))
 
 (module bar mzscheme
    (require foo)
    (printf "~s\n" (object-name foo)))
 
 (require bar)
 
 which signals an arity problem with foo without ever applying foo. --  
 Matthias
 

Responsible changed from "nobody" to "robby" by eli at Tue, 15 May 2007 16:44:37 -0400
Reason>>> contracts


Class changed from "sw-bug" to "not-a-bug" by robby at Tue, 15 May 2007 17:38:28 -0400
Reason>>> not a bug

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: bugs@plt-scheme.org
Cc: robby@plt-scheme.org
Subject: Re: [plt-bug] pending/8673 bug in contract system
Date: Tue, 15 May 2007 17:39:58 -0400

 Don't you want to fix the error behavior. I think this is flip.
 
 On May 15, 2007, at 5:38 PM, robby@plt-scheme.org wrote:
 
 >
 > Class changed from "sw-bug" to "not-a-bug" by robby at Tue, 15 May  
 > 2007 17:38:28 -0400
 > Reason>>> not a bug
 >
 >
 > View:
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8673
 >
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] pending/8673 bug in contract system
Date: Tue, 15 May 2007 16:41:32 -0500

 Is that what your last message was trying to say?
 
 Robby
 
 On 5/15/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > Don't you want to fix the error behavior. I think this is flip.
 >
 > On May 15, 2007, at 5:38 PM, robby@plt-scheme.org wrote:
 >
 > >
 > > Class changed from "sw-bug" to "not-a-bug" by robby at Tue, 15 May
 > > 2007 17:38:28 -0400
 > > Reason>>> not a bug
 > >
 > >
 > > View:
 > >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8673
 > >
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8673: bug in contract system
Date: Tue, 15 May 2007 18:04:14 -0400

 Yes.
 
 Why is it not analogous?
 
 On May 15, 2007, at 6:00 PM, Robby Findler wrote:
 
 > On 5/15/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >>
 >> On May 15, 2007, at 2:50 PM, Robby Findler wrote:
 >>
 >> > The other behavior is that the contract library raises a syntax  
 >> error
 >> > saying "the second case in this case-> cannot ever happen".
 >> >
 >> > I didn't implement the second because a), mzscheme accepts this
 >> > function:
 >> >
 >> >  Welcome to MzScheme v369.100 [3m], Copyright (c) 2004-2007 PLT
 >> > Scheme Inc.
 >> >  > (case-lambda [(x) x][(y) (+ y 1)])
 >> >  #<procedure>
 >> >
 >> > and b), it is painful to compute.
 >>
 >> I accept that case-> should provide contracts consistent with case-
 >> lambda. But I would very much prefer this. I consider the situation
 >> analogous to
 >>
 >> (module foo mzscheme
 >>    (require (lib "contract.ss"))
 >>
 >>    (define (foo x) x)
 >>
 >>    (provide/contract
 >>     [foo (-> string? string? string?)]))
 >>
 >> (module bar mzscheme
 >>    (require foo)
 >>    (printf "~s\n" (object-name foo)))
 >>
 >> (require bar)
 >>
 >> which signals an arity problem with foo without ever applying foo. --
 >> Matthias
 >
 > I'm proposing a syntax error, signalled by case->, which doesn't seem
 > analogous to the above. Is that what you still want?
 >
 > Robby
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8673: bug in contract system
Date: Tue, 15 May 2007 17:00:39 -0500

 On 5/15/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 > On May 15, 2007, at 2:50 PM, Robby Findler wrote:
 >
 > > The other behavior is that the contract library raises a syntax error
 > > saying "the second case in this case-> cannot ever happen".
 > >
 > > I didn't implement the second because a), mzscheme accepts this
 > > function:
 > >
 > >  Welcome to MzScheme v369.100 [3m], Copyright (c) 2004-2007 PLT
 > > Scheme Inc.
 > >  > (case-lambda [(x) x][(y) (+ y 1)])
 > >  #<procedure>
 > >
 > > and b), it is painful to compute.
 >
 > I accept that case-> should provide contracts consistent with case-
 > lambda. But I would very much prefer this. I consider the situation
 > analogous to
 >
 > (module foo mzscheme
 >    (require (lib "contract.ss"))
 >
 >    (define (foo x) x)
 >
 >    (provide/contract
 >     [foo (-> string? string? string?)]))
 >
 > (module bar mzscheme
 >    (require foo)
 >    (printf "~s\n" (object-name foo)))
 >
 > (require bar)
 >
 > which signals an arity problem with foo without ever applying foo. --
 > Matthias
 
 I'm proposing a syntax error, signalled by case->, which doesn't seem
 analogous to the above. Is that what you still want?
 
 Robby
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] pending/8673 bug in contract system
Date: Tue, 15 May 2007 18:03:50 -0400

 Yes.
 
 On May 15, 2007, at 5:41 PM, Robby Findler wrote:
 
 > Is that what your last message was trying to say?
 >
 > Robby
 >
 > On 5/15/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> Don't you want to fix the error behavior. I think this is flip.
 >>
 >> On May 15, 2007, at 5:38 PM, robby@plt-scheme.org wrote:
 >>
 >> >
 >> > Class changed from "sw-bug" to "not-a-bug" by robby at Tue, 15 May
 >> > 2007 17:38:28 -0400
 >> > Reason>>> not a bug
 >> >
 >> >
 >> > View:
 >> >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8673
 >> >
 >>
 >>
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8673: bug in contract system
Date: Tue, 15 May 2007 17:13:56 -0500

 It is a syntax error. What you write below is a contract violation. I
 can't imagine where the analogy could possibly be.
 
 On 5/15/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 > Yes.
 >
 > Why is it not analogous?
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, awick@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, dalev@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/8673: bug in contract system
Date: Tue, 15 May 2007 19:39:13 -0400

 Okay, good enough.
 
 
 On May 15, 2007, at 6:13 PM, Robby Findler wrote:
 
 > It is a syntax error. What you write below is a contract violation. I
 > can't imagine where the analogy could possibly be.
 >
 > On 5/15/07, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >> Yes.
 >>
 >> Why is it not analogous?
 

Class changed from "not-a-bug" to "sw-bug" by robby at Tue, 15 May 2007 19:44:09 -0400
Reason>>> rbf

