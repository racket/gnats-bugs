From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Sep 28 18:21:30 2010
Received: from mail-gy0-f172.google.com (mail-gy0-f172.google.com [209.85.160.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o8SMLSX9007983
	for <bugs@bugs.plt-scheme.org>; Tue, 28 Sep 2010 18:21:28 -0400
Message-Id: <201009282221.o8SMLO59007966@champlain.ccs.neu.edu>
Date: Tue, 28 Sep 2010 18:21:24 -0400
From: dbrown@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Struct always prints with sharing

>Number:         11265
>Category:       mzscheme
>Synopsis:       Struct always prints with sharing
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Sep 28 18:24:01 -0400 2010
>Last-Modified:  Wed Sep 29 23:10:04 -0400 2010
>Originator:     Dan Brown
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_4; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.55 Safari/534.3
>Description:
In the program below, instances of the `foo' structure always print with sharing, regardless of what I tell `print-graph' to do. Curiously, if I use #:prefab (in `bar') instead of #:transparent, then it prints correctly.
>How-To-Repeat:
#lang racket

(struct foo (x y) #:transparent)
(struct bar (x y) #:prefab)

(define a (cons 0 1))

(print-graph #f) ; (the default)

(list a a) ; '((0 . 1) (0 . 1))
(foo a a)  ; (foo #0='(0 . 1) #0#)
(bar a a)  ; '#s(bar (0 . 1) (0 . 1))

(print-graph #t)

(list a a) ; '(#0=(0 . 1) #0#)
(foo a a)  ; (foo #0='(0 . 1) #0#)
(bar a a)  ; '#s(bar #0=(0 . 1) #0#)
>Fix:
