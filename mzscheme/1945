From robby@cs.rice.edu  Wed May  9 09:27:47 2001
Received: from localhost (cupertino.cs.rice.edu [128.42.2.124])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id JAA14152
	for <plt-gnats>; Wed, 9 May 2001 09:27:46 -0500 (CDT)
Message-Id: <200105091427.JAA14152@cs.rice.edu>
Date: Wed, 9 May 2001 09:27:46 -0500 (CDT)
From: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: method arity error messages

>Number:         1945
>Category:       mzscheme
>Synopsis:       method arity error messages
>Confidential:   no
>Severity:       critical
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Wed May  9 14:30:01 GMT 2001
>Last-Modified:  Mon Sep 17 10:20:58 CDT 2001
>Originator:     Robert Bruce Findler
>Organization:
titan
>Release:        199.10
>Environment:
unix (ppc-linux) (get-display-depth) = 15
Tools: "collection-path: collection not found: \"drscheme\" in any of: (\"/home/robby/cvs/v200/plt/collects\" \"/home/robby/cvs/robby/collects\" \"/home/robby/cvs/robby/proj/talks\" \"/home/robby/cvs/robby/proj/papers\" \"/home/robby/cvs/mflatt/collects\")"
Docs Installed:
("help" "teachpack" "icons" "r5rs" "mzscheme" "mred" "drscheme" "misclib" "framework" "mrspidey" "tools" "mzc")
Collections:
(("/home/robby/cvs/v200/plt/collects" ("CVS" "icons" "doc" "browser" "compiler" "defaults" "dynext" "errortrace" "framework" "help" "hierlist" "launcher" "make" "mred" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "readline" "setup" "slatex" "srpersist" "syntax" "texpict" "tests" "xml")) ("/home/robby/cvs/robby/collects" ("CVS" "account" "backgammon" "checkers" "doonesbury" "friendly" "icfp-pc-99" "mac-cd-database" "magic" "mahjongg" "paper-utils" "pente" "pop-pop" "sample-solutions" "set-fonts" "solutions" "test-image-map" "xmahjongg")) ("/home/robby/cvs/robby/proj/talks" ("CVS" "bundle-proposal" "drscheme-architecture" "icfp98" "jcontracts" "lc" "lunch1" "unit-patterns" "unit-proposal" "util" "proposal")) ("/home/robby/cvs/robby/proj/papers" ("CVS" "c+u.save" "drafthead.sty" "contract-challenge" "dr" "dr-column" "dr-journal" "extensibility-problem" "geometric-control" "graphical-units" "include" "inputs" "java-blame" "java-blame-theory" "lw-strict" "proposal" "sba-procedures" "senior-thesis" "signature-constraints" "type-safety" "typed-unit-calculus" "unit" "unit-semantics")) ("/home/robby/cvs/mflatt/collects" ("CVS" "sirmail")))
>Description:
The method arity error messages in mzscheme 199 expose the
implementation details of the class system. In particular, 
the messages have the wrong numbers for the arguments to the 
method and they call the method a function.

I believe that they should not do either of these things.

I see one reasonable approach to fixing this problem. Methods
could be case-lambdas whose first clause is the current method
implementation and whose second clause accepts an arbitrary number
of arguments. Then, this second clause could construct and raise
an error that explains the problem in terms of the class system.

I ran some timing tests and found that there is a 1/7th slowdown
for applying the two-armed case lambda, as compared to the regular
single armed lambda. I suspect, however, that there are optimiziations
that could be made to mzscheme to compensate for this. I believe
that this form of case-lambda is generally useful for just this
reason (needing to give error messages that aren't application
error messages to preserve some kind of syntactic abstraction that 
expands to application) and so this form of case-lambda should be
considered an important special case just like single-case lambdas
currently are.

I also attempted to run some memory tests, but was only able to
discover that the memory use depends heavily on how the procedures
end up looking in more detail than I know. Based on my tests, however,
I suspect that the memory use can be made negligible.

;; timing test code begins here.

(module m mzscheme
  (provide times)
  (define-syntax (times stx)
    (syntax-case stx ()
      [(_ count-stx body)
       (with-syntax ([(bodies ...)
                      (let loop ([count (syntax-object->datum (syntax count-stx))])
                        (cond
                          [(zero? count) null]
                          [else (cons (syntax body)
                                      (loop (- count 1)))]))])
         (syntax (begin bodies ...)))])))
 
(require m)
 
(define (time-test f)
  (time
   (let loop ([n 500])
     (cond
       [(zero? n) (void)]
       [else (times 1000 (f 1 2 3))
             (loop (- n 1))]))))
 
(time-test (lambda (x y z) (void)))
(time-test (case-lambda [(x y z) (void)] [args (void)]))
>How-To-Repeat:
;; here's how to get the bad error message:
> (require (lib "class.ss"))
> (define o (instantiate (class object% (public x) (super-instantiate ()) (define (x y) y)) ()))
> (send o x 1 2)
procedure x method: expects 2 arguments, given 3: #<struct:object> 1 2

;; would prefer this error message:
send: method x of class derived-from-object% expects one argument, received two: 1 2

>Fix:
>Audit-Trail:

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Sun Jun 10 17:49:34 2001
Responsible-Changed-Why:

Responsible-Changed-From-To: mflatt->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon Sep 17 10:20:54 2001
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Mon Sep 17 10:20:56 2001
State-Changed-Why:



>Unformatted:
