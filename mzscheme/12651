From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar 26 19:09:28 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q2QN9OPG022827
	for <bugs@bugs.plt-scheme.org>; Mon, 26 Mar 2012 19:09:24 -0400
Message-Id: <201203262309.q2QN9IQf022820@champlain.ccs.neu.edu>
Date: Mon, 26 Mar 2012 19:09:18 -0400
From: bremner@debian.org
To: bugs@racket-lang.org
Subject: futures segmentation fault

>Number:         12651
>Category:       mzscheme
>Synopsis:       futures segmentation fault
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Mar 26 19:12:01 -0400 2012
>Last-Modified:  Wed Apr 18 16:52:28 -0400 2012
>Originator:     David Bremner
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.900.2--2012-03-26(e777796/g)
>Environment:
unix "Linux zancas 3.2.0-1-amd64 #1 SMP Fri Feb 17 05:17:36 UTC 2012 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 172292616
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/bremner/.racket/5.2.900.2/collects"
 (non-existent-path))
("/home/bremner/software/debian/racket/collects"
 ("make" "mzscheme" "file" "icons" "mzlib" "deinprogramm" "graphics" "parser-tools" "gui-debugger" "repo-time-stamp" "scribble" "slideshow" "htdp" "handin-client" "algol60" "profile" "xml" "typed" "json" "combinator-parser" "images" "slatex" "string-constants" "honu" "tex2page" "teachpack" "test-box-recovery" "2htdp" "scribblings" "framework" "defaults" "srfi" "at-exp" "mred" "db" "mzcom" "embedded-gui" "openssl" "raco" "swindle" "xrepl" "texpict" "drscheme" "s-exp" "r6rs" "meta" "rnrs" "hierlist" "frtime" "plot" "reader" "net" "datalog" "rackunit" "mrlib" "dynext" "planet" "handin-server" "help" "unstable" "lazy" "lang" "config" "version" "scriblib" "wxme" "test-engine" "drracket" "picturing-programs" "syntax" "syntax-color" "games" "racklog" "html" "tests" ".gitignore" "plai" "data" "schemeunit" "info-domain" "typed-scheme" "macro-debugger" "sgl" "launcher" "ffi" "scheme" "racket" "readline" "r5rs" "trace" "browser" "redex" "stepper" "compiler" "mysterx" "errortrace" "eopl!
 " "preprocessor" "typed-racket" "web-server" "sirmail" "setup"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang pl\n" #t #t))
>Description:
The code below crashes with 

SIGSEGV MAPERR si_code 1 fault on addr 0x2e

the last number varies, depending (I think) on the machine, but is always less than 255.

here is a backtrace from gdb

#0  scheme_gmp_tls_unload (s=0x7ffff4dc4bc8, data=0x0) at ./gmp/gmp.c:5813
#1  0x0000000000614d73 in done_with_GC () at ./../src/thread.c:8229
#2  0x0000000000650400 in garbage_collect (gc=<optimized out>, 
    force_full=<optimized out>, switching_master=0, lmi=0x0) at ./newgc.c:4642
#3  0x000000000065574e in allocate_slowpath (allocate_size=<optimized out>, 
    gc=<optimized out>, newptr=<optimized out>) at ./newgc.c:1265
#4  allocate (type=0, request_size=<optimized out>) at ./newgc.c:1303
#5  allocate (type=0, request_size=<optimized out>) at ./newgc.c:1411
#6  GC_malloc_one_tagged (s=<optimized out>) at ./newgc.c:1411
#7  0x0000000000632d40 in scheme_make_vector (size=9, fill=0x0)
    at ./../src/vector.c:266
#8  0x000000000063188a in validate_unclosed_procedure (port=0x7ffff4dc5598, 
    expr=0x7ffff4dc5550, stack=0x7ffff4bc1000 "", tls=0x7ffff4dc0260, depth=6, 
    delta=5, num_toplevels=16, num_stxes=0, num_lifts=3, tl_use_map=0x0, 
    app_rator=0x0, proc_with_refs_ok=1, self_pos=-1, procs=0x0)
    at ./../src/validate.c:835
#9  0x000000000062f305 in scheme_validate_expr (port=0x7ffff4dc5598, 
    expr=0x7ffff4dc5550, stack=0x7ffff4bc1000 "", tls=0x7ffff4dc0260, 
    depth=<optimized out>, letlimit=5, delta=<optimized out>, num_toplevels=16, 
    num_stxes=0, num_lifts=3, tl_use_map=0x0, app_rator=0x0, 
    proc_with_refs_ok=1, result_ignored=0, vc=0x7ffff4dc5618, tailpos=0, 
    need_flonum=0, procs=0x0) at ./../src/validate.c:1333
#10 0x000000000063029e in define_values_validate (vc=0x7ffff5f83e80, 
    tl_use_map=0x0, num_lifts=3, num_stxes=0, num_toplevels=16, 
    delta=<optimized out>, letlimit=<optimized out>, depth=<optimized out>, 
    tls=0x7ffff5f83e60, stack=0x7ffff5f83e50 "", port=0x7ffff5f58d48, 
    data=0x7ffff5f77718, result_ignored=<optimized out>, 
    tailpos=<optimized out>, procs=<optimized out>) at ./../src/validate.c:284
#11 scheme_validate_expr (port=0x7ffff4dc5598, expr=0x7ffff4dc5658, 
    stack=0x7ffff4bc1000 "", tls=0x7ffff4dc0260, depth=<optimized out>, 
    letlimit=<optimized out>, delta=<optimized out>, num_toplevels=16, 
    num_stxes=0, num_lifts=3, tl_use_map=0x0, app_rator=0x0, 
    proc_with_refs_ok=0, result_ignored=0, vc=0x7ffff4dc5618, tailpos=1, 
    need_flonum=0, procs=0x0) at ./../src/validate.c:1468
#12 0x0000000000631b44 in scheme_validate_code (port=0x7ffff4dc5598, 
    code=0x7ffff4dc5680, depth=6, num_toplevels=16, num_stxes=0, num_lifts=3, 
    tl_use_map=0x0, code_vec=1) at ./../src/validate.c:140
#13 0x000000000062f850 in module_validate (tl_use_map=0x0, num_lifts=0, 
    num_stxes=0, num_toplevels=1, delta=0, depth=1, tls=0x90b580, 
    stack=0x7ffff4bc1020 "\004", port=0x7ffff4dc5598, data=<optimized out>, 
    letlimit=<optimized out>, result_ignored=<optimized out>, 
    vc=<optimized out>, tailpos=<optimized out>, procs=<optimized out>)
    at ./../src/validate.c:890
#14 scheme_validate_expr (port=0x7ffff4dc5598, expr=0x7ffff4dc56f0, 
    stack=0x7ffff4bc1020 "\004", tls=0x90b580, depth=<optimized out>, 
    letlimit=0, delta=<optimized out>, num_toplevels=1, num_stxes=0, 
    num_lifts=0, tl_use_map=0x0, app_rator=0x0, proc_with_refs_ok=0, 
    result_ignored=0, vc=0x7ffff4dc57f0, tailpos=1, need_flonum=0, procs=0x0)
    at ./../src/validate.c:1528
#15 0x0000000000631c06 in scheme_validate_code (port=0x7ffff5f58d48, 
    code=0x7ffff5f790f0, depth=1, num_toplevels=1, num_stxes=0, num_lifts=0, 
    tl_use_map=0x0, code_vec=0) at ./../src/validate.c:150
#16 0x00000000005ae92f in read_compiled (params=0x7fffffffaa40, 
    ht=0x7ffff4dc0280, pos=1, col=-1, line=-1, stxsrc=0x7ffff4dc5870, 
    port=0x7ffff4dc5930) at ./../src/read.c:5346
#17 read_inner_inner (port=0x7ffff4dc5930, stxsrc=0x7ffff4dc5870, 
    ht=0x7ffff4dc0280, indentation=0x910920, params=0x7fffffffaa40, 
    comment_mode=<optimized out>, pre_char=<optimized out>, table=0x0, 
    get_info=0) at ./../src/read.c:1297
#18 0x00000000005b19bc in _internal_read (port=0x7ffff4dc5930, 
    stxsrc=0x7ffff4dc5870, crc=<optimized out>, cant_fail=<optimized out>, 
    recur=<optimized out>, expose_comment=0, extra_char=-1, init_readtable=0x0, 
    magic_sym=0x0, magic_val=0x0, delay_load_info=0x7ffff4dc5a80, get_info=0)
    at ./../src/read.c:2243
#19 0x00000000005b20d3 in scheme_internal_read_k () at ./../src/read.c:2317
#20 0x00000000004705b2 in scheme_top_level_do_worker (
    k=0x5b2010 <scheme_internal_read_k>, eb=<optimized out>, new_thread=0, 
    dyn_state=0x0) at ./../src/fun.c:1153
#21 0x00000000005b1eac in scheme_internal_read (port=0x7ffff5f53d08, 
    stxsrc=0x7ffff5f52c40, crc=1, cantfail=<optimized out>, recur=0, 
    expose_comment=0, pre_char=-1, init_readtable=0x0, magic_sym=0x0, 
    magic_val=0x0, delay_load_info=0x7ffff5f52850) at ./../src/read.c:2350
#22 0x000000000058a31a in do_load_handler (data=<optimized out>)
    at ./../src/portfun.c:4387
#23 0x000000000047aae9 in scheme_dynamic_wind (pre=0, 
    act=0x58a0d0 <do_load_handler>, post=0x5863b0 <post_load_handler>, 
    jmp_handler=0, data=0x7ffff4dc5aa0) at ./../src/fun.c:7945
#24 0x0000000000589f68 in default_load (argc=<optimized out>, 
    argv=0x7ffff5bbdbd0) at ./../src/portfun.c:4644
#25 0x00007ffff7ff218f in ?? ()
#26 0x00007fffffffb320 in ?? ()
#27 0x00007ffff7fd86f0 in ?? ()
#28 0x000000000094acf0 in ?? ()
#29 0x00007ffff5bbdca8 in ?? ()
#30 0x0000000000000009 in ?? ()
#31 0x00007ffff5bbdd80 in ?? ()
#32 0x00007ffff5efdbb0 in ?? ()
#33 0x00007ffff5bbdcb0 in ?? ()
#34 0x00007fffffffb3a0 in ?? ()
#35 0x00007ffff7feab10 in ?? ()
#36 0x00007fffffffb308 in ?? ()
#37 0x00007ffff7e537e1 in ?? ()
#38 0x00007fffffffb3b0 in ?? ()
#39 0x0000000000000007 in ?? ()
#40 0x00007fffffffb358 in ?? ()
#41 0x00007ffff5f50588 in ?? ()
#42 0x0000000000000007 in ?? ()
#43 0x00007ffff5bbdd80 in ?? ()
#44 0x00007fffffffb7c0 in ?? ()
#45 0xfffffffffffff468 in ?? ()
#46 0x0000000000000004 in ?? ()
#47 0x0000000000456b40 in scheme_do_eval (obj=0x0, num_rands=-19648, 
    rands=0x7fffffffb7c0, get_value=1) at ./../src/eval.c:2800
#48 0x0000000000468111 in apply_k () at ./../src/fun.c:1314
#49 0x00000000004705b2 in scheme_top_level_do_worker (k=0x468080 <apply_k>, 
    eb=<optimized out>, new_thread=0, dyn_state=0x0) at ./../src/fun.c:1153
#50 0x0000000000508add in _module_resolve (modidx=0x7ffff4dc5ba8, stx=0x0, 
    env=0x0, load_it=1) at ./../src/module.c:3617
#51 0x00000000005151b8 in compute_require_names (menv=0x7ffff4dc5c18, 
    phase=0x1, load_env=0x7ffff4dc4e00, syntax_idx=0x7ffff4dc5be0)
    at ./../src/module.c:4464
#52 0x000000000051b4cd in chain_start_module (menv=0x7ffff4dc5c18, 
    env=0x7ffff4dc4e00, eval_exp=0, eval_run=1, base_phase=0, 
    cycle_list=0x910920, syntax_idx=0x7ffff4dc5be0) at ./../src/module.c:4572
#53 0x000000000051d056 in scheme_module_start_finish (a=<optimized out>)
    at ./../src/module.c:4693
#54 0x00007ffff7ff6f75 in ?? ()
#55 0x0000000000000077 in ?? ()
#56 0x00007ffff5ef3168 in ?? ()
#57 0x00007fffffffb9f0 in ?? ()
#58 0x00007fffffffba90 in ?? ()
#59 0x00007fffffffba90 in ?? ()
#60 0x0000000000000001 in ?? ()
#61 0x0000000000000000 in ?? ()
>How-To-Repeat:
run this code, from the command line with "racket file.rkt"
On my machine that pretends to have 8 cores, it crashes reliably on the first iteration. On a different machine that is slower and has only two cores, it takes longer, typically between 3 and 5 iterations.


#lang racket/base
(require racket/future)

(define (fib x)
  (if (<= x 1)
      1
      (let ([x (future (lambda () (fib (- x 1))))]
	    [y (fib (- x 1))])
	(+ (touch x) y))))

(for ([i (build-list 100 values)])
  (begin 
    (printf "~a ~a ~a ~a\n" i (fib 25) (current-process-milliseconds #f)        
            (current-gc-milliseconds))
    (flush-output)))
>Fix:
