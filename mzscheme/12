From shriram@cs.rice.edu  Sat Mar  8 00:02:19 1997
Received: from new-world.cs.rice.edu (new-world.cs.rice.edu [128.42.6.103]) by cs.rice.edu (8.8.5/8.7.1) with ESMTP id AAA19776 for <plt-gnats@cs.rice.edu>; Sat, 8 Mar 1997 00:02:18 -0600 (CST)
Message-Id: <199703080602.AAA15332@new-world.cs.rice.edu>
Date: Sat, 8 Mar 1997 00:02:18 -0600 (CST)
From: Shriram Krishnamurthi <shriram@cs.rice.edu>
Reply-To: shriram@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: MzScheme expander gets confused
X-Send-Pr-Version: 3.101

>Number:         12
>Category:       mzscheme
>Synopsis:       MzScheme expander gets confused
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sat Mar  8 06:05:01 GMT 1997
>Last-Modified:  Mon May  5 14:52:37 CDT 1997
>Originator:     Shriram Krishnamurthi
>Organization:
titan
>Release:        unknown
>Environment:
MzScheme 49/13
>Description:
MzScheme gets confused with some expressions such as the one given
below.  Whereas it handles (let () (define define define) define) just
fine, what it produces for the example below doesn't even make sense.
>How-To-Repeat:
(expand-defmacro '(let () (define define cons) (define car 3)))
>Fix:
No fix. MzScheme's expand-defmacro often expands expressions where it
could apparently signal a syntax error. The reason it doesn't is
because the "macro" system is too weak. In the specific case of
`define-values' in an embedded context, no syntax error can be raised
because certain macro-based syntactic forms (noteably unit/sig) need
to expand `define-values' expressions that appear to be in an embedded
context; in fact, in these cases, the `define-values' expressions
actually legal due to some macro-specific context.

The macro expander has no way to tell the difference between these
situations, so it takes a "conservative" approach: it assumes that
definitions are allowed and lets a later pass (e.g., the compiler)
signal the error.

This is clearly very inelegant. However, the implementor's interest in
an improved built-in "macro" system for MzScheme remains very low. As
long as the syntatic correctness or incorrectness of a program is
preserved (and the semantics of a syntatcially correct program are not
changed), the current macro system should be deemed sufficent as a
low-level substrate for other work.
>Audit-Trail:

Responsible-Changed-From-To: krentel->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon Mar 17 07:38:50 1997
Responsible-Changed-Why:
MzScheme-specific

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Mon Mar 17 07:39:10 1997
State-Changed-Why:
Nothing can be done

>Unformatted:
