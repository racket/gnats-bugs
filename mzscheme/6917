From ethan.aubin@pobox.com Fri Jun 18 18:27:23 2004
Received: from localhost (h000393e64fbb.ne.client2.attbi.com [65.96.37.11])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id i5IMRM0u030908
	for <bugs>; Fri, 18 Jun 2004 18:27:23 -0400
Message-Id: <200406182227.i5IMRM0u030908@champlain.ccs.neu.edu>
Date: Fri, 18 Jun 2004 18:27:22 -0400
From: Ethan Aubin <ethan.aubin@pobox.com>
To: bugs@plt-scheme.org
Subject: define-values in class

>Number:         6917
>Category:       mzscheme
>Synopsis:       define-values in class
>Class:          change-request
>Responsible:    mflatt
>Notify-List:    robby@plt-scheme.org
>Severity:       non-critical
>Priority:       medium
>State:          suspended
>Confidential:   no
>Arrival-Date:   Fri Jun 18 18:30:00 -0400 2004
>Last-Modified:  Fri Jan 28 11:24:43 -0500 2005
>Originator:     Ethan Aubin
>Organization:
titan
>Submitter-Id:   unknown
>Release:        207
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 1" (win32\i386) (get-display-depth) = 32
Docs Installed:
("C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\web-server" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\tour" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\tools" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\tex2page" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\teachpack" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\t-y-scheme" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\srfi" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\r5rs" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\profj-intermediate" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\profj-beginner" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\profj-advanced" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\plot" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\mzscheme" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\mzlib" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\mzc" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\mred" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\misclib" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\intermediate-lambda" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\intermediate" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\insidemz" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\help" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\framework" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\drscheme" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\beginning-abbr" "C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\beginning" "C:\\Do
cuments and Settings\\Ethan Aubin\\Desktop\\PLT\\collects\\doc\\advanced")
Collections: 
(("C:\\Documents and Settings\\Ethan Aubin\\Application Data\\PLT Scheme\\207\\collects" "non-existent path") ("C:\\Documents and Settings\\Ethan Aubin\\Desktop\\PLT\\collects" ("afm" "algol60" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "frtime" "games" "graphics" "help" "hierlist" "htdch" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plot" "preprocessor" "profj" "setup" "sgl" "slatex" "slibinit" "slideshow" "srfi" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tex2page" "texpict" "version" "web-server" "xml")))
 
Human Language: english
 
>Description:
Hi, Could define-values be made to define multiple identifiers in a class? 

I'd like to make initial-once fields, e.g. outside of classes, I use 
something like:

(define-values (initialize-foo! get-foo)
  (letrec ([undefined undefined]
           [cell undefined]
           [initializer (lambda (v)
                          (unless (eq? cell undefined)
                            (error 'initialize-foo! "Already initialized"))
                          (set! cell v))]
           [getter (lambda ()
                     (when (eq? cell undefined)
                       (error 'get-foo "Undefined"))
                     cell)])
    (values initializer getter)))

In classes, I can use something similar to make public getters to simulate immutable 
fields, but not for initialize-once fields. Any ideas how I could use this idiom 
in classes? Thanks - EA
>How-To-Repeat:
(require (lib "class.ss"))

(define eg%
  (class object%
    (public initialize-foo!)
    (public get-foo)

    (define-values (initialize-foo! get-foo)
      (letrec ([undefined undefined]
               [cell undefined]
               [initializer (lambda (v)
                              (unless (eq? cell undefined)
                                (error 'initialize-foo! "Already initialized"))
                              (set! cell v))]
               [getter (lambda ()
                         (when (eq? cell undefined)
                           (error 'get-foo "Undefined"))
                         cell)])
        (values initializer getter)))

    (super-new)))

;; fails printing:

; class*/names: each method variable needs its own definition at:
; (define-values (initialize-foo! get-foo) (letrec ((undefined
; undefined) (cell undefined) (initial... in: (class*/names (this
; super-instantiate super-make-object super-new) object% () (public
; initialize-...
>Fix:
>Audit-Trail:
From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, mflatt@cs.utah.edu, laminatedwastrel@brinckerhoff.org,
        ptg@ccs.neu.edu, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu
Subject: Re: all/6917: define-values in class
Date: Mon, 21 Jun 2004 07:02:44 -0500

 The real question is: where does the state (cell) go? On the class or
 on each object? MzScheme's class system forces you to be explicit about
 this and so it rejects such programs. If you want the state on each
 object (likely so), use this:
 
 (class object%
   (define cell (letrec ([undefined undefined]) undefined))
   (define/public (initializer v) ...)
   (define/public (getter) ...)
   (super-new))
 
 If you want the state on the class (which is the unlikely case,
 typically) you can put cell in the closure of the class:
 
  (let ([cell (letrec ([undefined undefined]) undefined)])
    (class object%
      (define/public (initializer v) ...)
      (define/public (getter) ...)
      (super-new)))
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Ethan Aubin <ethan.aubin@pobox.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6917: define-values in class
Date: Mon, 21 Jun 2004 13:42:06 -0500

 [ I cc'd bugs this time. It is important to us to record conversations
 about bug reports for later and cc'ing bugs sticks this into the PR. ]
 
 At Mon, 21 Jun 2004 14:27:02 -0400, Ethan Aubin wrote:
 > On Mon, Jun 21, 2004 at 07:02:44AM -0500, Robby Findler wrote:
 > > The real question is: where does the state (cell) go? On the class
 > > or on each object? MzScheme's class system forces you to be explicit
 > > about this and so it rejects such programs. If you want the state on
 > > each object (likely so), use this:
 > > 
 > > (class object%
 > >   (define cell (letrec ([undefined undefined]) undefined))
 > >   (define/public (initializer v) ...)
 > >   (define/public (getter) ...)
 > >   (super-new))
 > 
 > This is fine, but then the scope of cell is visible throughout the
 > class and I still need be manually ensure that I use the
 > getter/initializer and don't access the cell directly.
 
 Keep your classes small, then. :)
 
 Seriously, trying to keep the classes small enough that you don't need
 such protections inside the class might well make your code easier to
 read.
 
 > I discovered I can jump through some hoops and get this to work though
 > 
 > (require (lib "class.ss"))
 > 
 > (define foo%
 >   (class object%
 > 
 >     (define-values (priv-initialize! priv-get)
 >       (letrec ([undefined undefined]
 >                [cell undefined])
 >         (values (lambda (v)
 >                   (unless (eq? cell undefined)
 >                     (error 'initialize-foo! "Already initialized"))
 >                   (set! cell v))
 >                 (lambda ()
 >                   (when (eq? cell undefined)
 >                     (error 'get-foo "Undefined"))
 >                   cell))))
 > 
 >     (define/public initialize! (lambda (v) (priv-initialize! v)))
 >     (define/public get (lambda () (priv-get)))
 >     (super-new)))
 
 That uses two fields and two closures per object, rather than one field
 and no closures per object.
 
 Robby
 
 
 

Responsible changed from "nobody" to "mflatt" by eli at Wed, 14 Jul 2004 14:29:02 -0400
Reason>>> mzscheme request (possibly ignorable?)

State changed from "open" to "suspended" by mflatt at Fri, 28 Jan 2005 11:24:43 -0500
Reason>>> Tedious enough to implement that it's unlikely to happen.

