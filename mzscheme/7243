From apache@plt-scheme.org Fri Feb 18 00:28:38 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j1I5SZnN000766
	for <bugs@plt-scheme.org>; Fri, 18 Feb 2005 00:28:35 -0500
Message-Id: <200502180528.j1I5SZTk000764@champlain.ccs.neu.edu>
Date: Fri, 18 Feb 2005 00:28:35 -0500
From: dherman@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: byte strings as paths

>Number:         7243
>Category:       mzscheme
>Synopsis:       byte strings as paths
>Class:          change-request
>Responsible:    mflatt
>Notify-List:    robby@plt-scheme.org
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Feb 18 00:30:00 -0500 2005
>Closed-Date:    Tue Jul 11 13:44:28 -0400 2006
>Last-Modified:  Tue Jul 11 13:44:28 -0400 2006
>Originator:     Dave Herman
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.30-cvs9feb2005
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
(#<path:C:\Program Files\plt-299\collects\doc\web-server> #<path:C:\Program Files\plt-299\collects\doc\tour> #<path:C:\Program Files\plt-299\collects\doc\tools> #<path:C:\Program Files\plt-299\collects\doc\tex2page> #<path:C:\Program Files\plt-299\collects\doc\teachpack> #<path:C:\Program Files\plt-299\collects\doc\t-y-scheme> #<path:C:\Program Files\plt-299\collects\doc\swindle> #<path:C:\Program Files\plt-299\collects\doc\srfi> #<path:C:\Program Files\plt-299\collects\doc\r5rs> #<path:C:\Program Files\plt-299\collects\doc\profj-intermediate> #<path:C:\Program Files\plt-299\collects\doc\profj-beginner> #<path:C:\Program Files\plt-299\collects\doc\profj-advanced> #<path:C:\Program Files\plt-299\collects\doc\plot> #<path:C:\Program Files\plt-299\collects\doc\mzscheme> #<path:C:\Program Files\plt-299\collects\doc\mzlib> #<path:C:\Program Files\plt-299\collects\doc\mzc> #<path:C:\Program Files\plt-299\collects\doc\mred> #<path:C:\Program Files\plt-299\collects\doc\misclib> #<path:C:\Program Files\plt-299\collects\doc\intermediate-lambda> #<path:C:\Program Files\plt-299\collects\doc\intermediate> #<path:C:\Program Files\plt-299\collects\doc\insidemz> #<path:C:\Program Files\plt-299\collects\doc\help> #<path:C:\Program Files\plt-299\collects\doc\framework> #<path:C:\Program Files\plt-299\collects\doc\foreign> #<path:C:\Program Files\plt-299\collects\doc\drscheme> #<path:C:\Program Files\plt-299\collects\doc\beginning-abbr> #<path:C:\Program Files\plt-299\collects\doc\beginning> #<path:C:\Program Files\plt-299\collects\doc\advanced>)
Collections:
((#<path:C:\Documents and Settings\dherman\Application Data\PLT Scheme\299.30\collects> (#<path:io>)) (#<path:C:\Program Files\plt-299\collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:cvs-time-stamp> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu-module> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mrdemo> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:readline> #<path:reduction-semantics> #<path:schemeunit> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
In 299, byte strings and paths are interconvertible
without loss of information, but the library procedures
that accept both strings and paths don't accept byte
strings. Would it be terribly hard to change these
procedures to accept byte strings as well, automatically
performing the bytes->path conversion when needed?

It seems inconsistent to accept strings but not byte
strings.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: dherman@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@ccs.neu.edu,
        sk@cs.brown.edu, robby@cs.uchicago.edu, gnats@brinckerhoff.org,
        gregp@ccs.neu.edu, meunier@ccs.neu.edu, sowens@cs.utah.edu,
        kathyg@cs.utah.edu, awick@cs.utah.edu, goldberg@cs.utah.edu,
        dskippy@ccs.neu.edu, jacobm@cs.uchicago.edu
Subject: Re: all/7243: byte strings as paths
Date: Fri, 18 Feb 2005 09:15:38 -0700

 At Fri, 18 Feb 2005 00:30:01 -0500, dherman@ccs.neu.edu wrote:
 > In 299, byte strings and paths are interconvertible
 > without loss of information, but the library procedures
 > that accept both strings and paths don't accept byte
 > strings. Would it be terribly hard to change these
 > procedures to accept byte strings as well, automatically
 > performing the bytes->path conversion when needed?
 > 
 > It seems inconsistent to accept strings but not byte
 > strings.
 
 Accepting strings is a concession to backward compatibility. For
 example, R5RS says that `open-input-file' accepts a string. If we were
 defining the language from scratch, then only paths would be accepted.
 
 Meanwhile, I actually think that accepting byte strings would be a bad
 idea. A string is a relatively portable way to identify path elements
 (if not actual paths), so it's often reasonable to include string
 literals in code. A byte string (and therefore a path) suffers from
 locale-specific decoding, and so it's less useful as a literal path.
 
 Matthew
 
From: Dave Herman <dherman@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org, Ryan Culpepper <ryanc@ccs.neu.edu>
Subject: Re: all/7243: byte strings as paths
Date: Fri, 18 Feb 2005 14:15:20 -0500

 > Accepting strings is a concession to backward compatibility. For
 > example, R5RS says that `open-input-file' accepts a string. If we were
 > defining the language from scratch, then only paths would be accepted.
 
 Ouch; yeah, I forgot about R5RS. I agree that it would be preferable 
 only to accept paths.
 
 > Meanwhile, I actually think that accepting byte strings would be a bad
 > idea. A string is a relatively portable way to identify path elements
 > (if not actual paths), so it's often reasonable to include string
 > literals in code. A byte string (and therefore a path) suffers from
 > locale-specific decoding, and so it's less useful as a literal path.
 
 I see. Of course, you can only rely on a string as a portable 
 specification of a path if your program is allowed to decide how to 
 encode it, i.e., not if you're trying to find some existing file that 
 you didn't create. But in that case you would use string->bytes with a 
 specific encoding. So, yeah, I agree.
 
 Thanks,
 Dave

Responsible changed from "nobody" to "mflatt" by eli at Mon, 14 Mar 2005 17:15:49 -0500
Reason>>> mzscheme (added robby to notify-list)


State changed from "open" to "closed" by mflatt at Tue, 11 Jul 2006 13:44:28 -0400
Reason>>> looks like I talked Dave out of it

