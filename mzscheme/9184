From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Feb  5 04:30:09 2008
Received: from nf-out-0910.google.com (nf-out-0910.google.com [64.233.182.187])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m159U9Fj030578
	for <bugs@bugs.plt-scheme.org>; Tue, 5 Feb 2008 04:30:09 -0500
Message-Id: <200802050930.m159U0CV030568@champlain.ccs.neu.edu>
Date: Tue, 5 Feb 2008 04:30:00 -0500
From: fabien.delorme@gmail.com
To: bugs@plt-scheme.org
Subject: infinite loop in hash tables

>Number:         9184
>Category:       mzscheme
>Synopsis:       infinite loop in hash tables
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Feb 05 04:35:01 -0500 2008
>Closed-Date:    Tue Feb 05 08:21:57 -0500 2008
>Last-Modified:  Tue Feb 05 08:21:57 -0500 2008
>Originator:     Fabien Delorme
>Organization:
plt
>Submitter-Id:   unknown
>Release:        360
>Environment:
Linux i686 / Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.11) Gecko/20071204 Ubuntu/7.10 (gutsy) Firefox/2.0.0.11
>Description:
When a reference to a hash table is used as a key in itself, accessing that element will loop forever, with no apparent reason
>How-To-Repeat:
> (define t (make-hash-table 'equal))
> (hash-table-put! t t 'foo)
> t
#<hash-table>
> (hash-table-get t t)
user break
> (if (hash-table-get t t) 'ok) 
user break
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: fabien.delorme@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9184: infinite loop in hash tables
Date: Tue, 5 Feb 2008 06:16:55 -0700

 At Tue, 5 Feb 2008 04:35:01 -0500, fabien.delorme@gmail.com wrote:
 > When a reference to a hash table is used as a key in itself, accessing that 
 > element will loop forever, with no apparent reason
 
 The process for generating an `equal?' hash key is defined to not
 terminate on circular objects, such as a hash table that contains
 itself. So `(hash-table-get <any-table> t)' loops trying to generate a
 key for `t'.
 
 The specification of hashing has changed for the next release to deal
 gracefully with cyclic data, just as `equal?' has changed so that it
 can compare cyclic data. In the current pre-release version,
 v3.99.0.10, your example returns immediately.
 
 (It returns with a "key not found" error. That's because the process of
 installing a hash table into itself changes the table's own `equal?'
 hash key.)
 
 Matthew
 

State changed from "open" to "closed" by mflatt at Tue, 05 Feb 2008 08:21:57 -0500
Reason>>> As specified --- though the docs for `hash-table-get' should explicitly
point to `equal-hash-code', which is where the behavior on cyclic data
is clarified. In any case, the specification is better for the next release.

