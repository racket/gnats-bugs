From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jul 11 13:32:26 2010
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o6BHWORd017038
	for <bugs@bugs.plt-scheme.org>; Sun, 11 Jul 2010 13:32:24 -0400
Message-Id: <201007111732.o6BHWLNa017031@champlain.ccs.neu.edu>
Date: Sun, 11 Jul 2010 13:32:21 -0400
From: vanmeule@roadrunner.com
To: bugs@racket-lang.org
Subject: letrec acts like let* (when it shouldn't)

>Number:         11026
>Category:       mzscheme
>Synopsis:       letrec acts like let* (when it shouldn't)
>Class:          sw-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jul 11 13:36:01 -0400 2010
>Closed-Date:    Sun Jul 11 15:52:17 -0400 2010
>Last-Modified:  Fri Sep 03 21:00:41 -0400 2010
>Originator:     Andre van Meulebrouck
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.2
>Environment:
windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 109395004

Collections:
(("C:\\Users\\vanmeule\\AppData\\Roaming\\PLT Scheme\\4.1.2\\collects" non-existent-path) ("C:\\Program Files\\PLT\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Legacy Languages" "Pretty Big") #(#t write mixed-fraction-e #f #t debug #t))
>Description:
This blows up (as well it should):

(letrec ((y (+ x 1)) (x 3)) y)

But this doesn't (and I think it should):

(letrec ((x 3)(y (+ x 1))) y)

To my way of thinking letrec has been implemented like let* (when it shouldn't have been).  Letrec should be implemented the exact same way as let (except for the way that closures get closed).  Since we don't have a closure here, the above letrec should be equivalent to a let (not a let*).

Or is there an error in my thinking here?

I need to know because I'm implementing my own embedded Scheme.  Normally I base my Scheme's behavior on Dr. Scheme, but in this case the behavior doesn't make any sense to me.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: vanmeule@roadrunner.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 13:32:51 -0500

 This is not a bug. I think you'll find more interesting discussion if
 you take this message to the mailing list:
 
 http://www.racket-lang.org/community.html
 
 (Also you're using a near 2 year old version.)
 
 Robby
 
 On Sun, Jul 11, 2010 at 12:36 PM,  <vanmeule@roadrunner.com> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11026
 >
 > Reported by Andre van Meulebrouck for release: 4.1.2
 >
 > *** Description:
 > This blows up (as well it should):
 >
 > (letrec ((y (+ x 1)) (x 3)) y)
 >
 > But this doesn't (and I think it should):
 >
 > (letrec ((x 3)(y (+ x 1))) y)
 >
 > To my way of thinking letrec has been implemented like let* (when it shou=
 ldn't have been). =C2=A0Letrec should be implemented the exact same way as =
 let (except for the way that closures get closed). =C2=A0Since we don't hav=
 e a closure here, the above letrec should be equivalent to a let (not a let=
 *).
 >
 > Or is there an error in my thinking here?
 >
 > I need to know because I'm implementing my own embedded Scheme. =C2=A0Nor=
 mally I base my Scheme's behavior on Dr. Scheme, but in this case the behav=
 ior doesn't make any sense to me.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth)=
  =3D 32
 > Human Language: english
 > (current-memory-use) 109395004
 >
 > Collections:
 > (("C:\\Users\\vanmeule\\AppData\\Roaming\\PLT Scheme\\4.1.2\\collects" no=
 n-existent-path) ("C:\\Program Files\\PLT\\collects" "afm" "algol60" "brows=
 er" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" =
 "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games=
 " "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons"=
  "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrl=
 ib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "pl=
 anet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs"=
  "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slidesho=
 w" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "t=
 eachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "t=
 yped-scheme" "version" "web-server" "wxme" "xml"))
 > Computer Language: (("Legacy Languages" "Pretty Big") #(#t write mixed-fr=
 action-e #f #t debug #t))
 >
 >
From: =?utf-8?Q?Andr=C3=A9_van_Meulebrouck?= <vanmeule@roadrunner.com>
To: "'Robby Findler'" <robby@eecs.northwestern.edu>, <bugs@racket-lang.org>
Cc: <nobody@racket-lang.org>, <bug-notification@racket-lang.org>
Subject: RE: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 12:43:25 -0700

 The new version behaves exactly the same way.
 
 You give no reference, citation, or other reason for claiming this is =
 not a bug.
 
 I have neither time nor desire to post on any forums.
 
 I will not implement behavior like this in my own implementation of =
 Scheme because I think it's just completely incorrect and totally =
 unreasonable.
 
 Until/unless I see some definitive justification for this behavior, I =
 will not change my stance.
 
 -----Original Message-----
 From: robby.findler@gmail.com [mailto:robby.findler@gmail.com] On Behalf =
 Of Robby Findler
 Sent: Sunday, July 11, 2010 11:33 AM
 To: vanmeule@roadrunner.com; bugs@racket-lang.org
 Cc: nobody@racket-lang.org; bug-notification@racket-lang.org
 Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it =
 shouldn't)
 
 This is not a bug. I think you'll find more interesting discussion if
 you take this message to the mailing list:
 
 http://www.racket-lang.org/community.html
 
 (Also you're using a near 2 year old version.)
 
 Robby
 
 On Sun, Jul 11, 2010 at 12:36 PM,  <vanmeule@roadrunner.com> wrote:
 > A new problem report is waiting at
 > =EF=BF=BDhttp://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11026
 >
 > Reported by Andre van Meulebrouck for release: 4.1.2
 >
 > *** Description:
 > This blows up (as well it should):
 >
 > (letrec ((y (+ x 1)) (x 3)) y)
 >
 > But this doesn't (and I think it should):
 >
 > (letrec ((x 3)(y (+ x 1))) y)
 >
 > To my way of thinking letrec has been implemented like let* (when it =
 shouldn't have been). =EF=BF=BDLetrec should be implemented the exact =
 same way as let (except for the way that closures get closed). =
 =EF=BF=BDSince we don't have a closure here, the above letrec should be =
 equivalent to a let (not a let*).
 >
 > Or is there an error in my thinking here?
 >
 > I need to know because I'm implementing my own embedded Scheme. =
 =EF=BF=BDNormally I base my Scheme's behavior on Dr. Scheme, but in this =
 case the behavior doesn't make any sense to me.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) =
 (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 109395004
 >
 > Collections:
 > (("C:\\Users\\vanmeule\\AppData\\Roaming\\PLT Scheme\\4.1.2\\collects" =
 non-existent-path) ("C:\\Program Files\\PLT\\collects" "afm" "algol60" =
 "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" =
 "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" =
 "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" =
 "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" =
 "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" =
 "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" =
 "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" =
 "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" =
 "stepper" "string-constants" "swindle" "syntax" "syntax-color" =
 "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" =
 "trace" "typed-scheme" "version" "web-server" "wxme" "xml"))
 > Computer Language: (("Legacy Languages" "Pretty Big") #(#t write =
 mixed-fraction-e #f #t debug #t))
 >
 >
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: =?UTF-8?Q?Andr=C3=A9_van_Meulebrouck?= <vanmeule@roadrunner.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 14:51:43 -0500

 Thank you for your comments.
 
 Robby
 
 On Sun, Jul 11, 2010 at 2:43 PM, Andr=C3=A9 van Meulebrouck
 <vanmeule@roadrunner.com> wrote:
 > The new version behaves exactly the same way.
 >
 > You give no reference, citation, or other reason for claiming this is not=
  a bug.
 >
 > I have neither time nor desire to post on any forums.
 >
 > I will not implement behavior like this in my own implementation of Schem=
 e because I think it's just completely incorrect and totally unreasonable.
 >
 > Until/unless I see some definitive justification for this behavior, I wil=
 l not change my stance.
 >
 > -----Original Message-----
 > From: robby.findler@gmail.com [mailto:robby.findler@gmail.com] On Behalf =
 Of Robby Findler
 > Sent: Sunday, July 11, 2010 11:33 AM
 > To: vanmeule@roadrunner.com; bugs@racket-lang.org
 > Cc: nobody@racket-lang.org; bug-notification@racket-lang.org
 > Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shoul=
 dn't)
 >
 > This is not a bug. I think you'll find more interesting discussion if
 > you take this message to the mailing list:
 >
 > http://www.racket-lang.org/community.html
 >
 > (Also you're using a near 2 year old version.)
 >
 > Robby
 >
 > On Sun, Jul 11, 2010 at 12:36 PM, =C2=A0<vanmeule@roadrunner.com> wrote:
 >> A new problem report is waiting at
 >> =EF=BF=BDhttp://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11026
 >>
 >> Reported by Andre van Meulebrouck for release: 4.1.2
 >>
 >> *** Description:
 >> This blows up (as well it should):
 >>
 >> (letrec ((y (+ x 1)) (x 3)) y)
 >>
 >> But this doesn't (and I think it should):
 >>
 >> (letrec ((x 3)(y (+ x 1))) y)
 >>
 >> To my way of thinking letrec has been implemented like let* (when it sho=
 uldn't have been). =EF=BF=BDLetrec should be implemented the exact same way=
  as let (except for the way that closures get closed). =EF=BF=BDSince we do=
 n't have a closure here, the above letrec should be equivalent to a let (no=
 t a let*).
 >>
 >> Or is there an error in my thinking here?
 >>
 >> I need to know because I'm implementing my own embedded Scheme. =EF=BF=
 =BDNormally I base my Scheme's behavior on Dr. Scheme, but in this case the=
  behavior doesn't make any sense to me.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth=
 ) =3D 32
 >> Human Language: english
 >> (current-memory-use) 109395004
 >>
 >> Collections:
 >> (("C:\\Users\\vanmeule\\AppData\\Roaming\\PLT Scheme\\4.1.2\\collects" n=
 on-existent-path) ("C:\\Program Files\\PLT\\collects" "afm" "algol60" "brow=
 ser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext"=
  "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "game=
 s" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons=
 " "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mr=
 lib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "p=
 lanet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs=
 " "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slidesh=
 ow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "=
 teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "=
 typed-scheme" "version" "web-server" "wxme" "xml"))
 >> Computer Language: (("Legacy Languages" "Pretty Big") #(#t write mixed-f=
 raction-e #f #t debug #t))
 >>
 >>
 >
 >
 >

State changed from "open" to "closed" by robby at Sun, 11 Jul 2010 15:52:17 -0400
Reason>>> .

From: Robby Findler <robby@eecs.northwestern.edu>
To: =?UTF-8?Q?Andr=C3=A9_van_Meulebrouck?= <vanmeule@roadrunner.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 14:55:33 -0500

 Sorry: one last attempt.
 
 I wasn't trying to get you to change your stance or your
 implementation. Your original message seemed to be after some
 discussion and I tried to point you to where you'd find it. Apologies
 if I misunderstood and you weren't after any discussion.
 
 As to the bugness or not: ultimately, this is not a bug because we
 define Racket to be how we want it to be and it is defined to work the
 way you have observed it works. You are, of course, free to do
 whatever you want in any language you define.
 
 Regards,
 Robby
 
 On Sun, Jul 11, 2010 at 2:43 PM, Andr=C3=A9 van Meulebrouck
 <vanmeule@roadrunner.com> wrote:
 > The new version behaves exactly the same way.
 >
 > You give no reference, citation, or other reason for claiming this is not=
  a bug.
 >
 > I have neither time nor desire to post on any forums.
 >
 > I will not implement behavior like this in my own implementation of Schem=
 e because I think it's just completely incorrect and totally unreasonable.
 >
 > Until/unless I see some definitive justification for this behavior, I wil=
 l not change my stance.
 >
 > -----Original Message-----
 > From: robby.findler@gmail.com [mailto:robby.findler@gmail.com] On Behalf =
 Of Robby Findler
 > Sent: Sunday, July 11, 2010 11:33 AM
 > To: vanmeule@roadrunner.com; bugs@racket-lang.org
 > Cc: nobody@racket-lang.org; bug-notification@racket-lang.org
 > Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shoul=
 dn't)
 >
 > This is not a bug. I think you'll find more interesting discussion if
 > you take this message to the mailing list:
 >
 > http://www.racket-lang.org/community.html
 >
 > (Also you're using a near 2 year old version.)
 >
 > Robby
 >
 > On Sun, Jul 11, 2010 at 12:36 PM, =C2=A0<vanmeule@roadrunner.com> wrote:
 >> A new problem report is waiting at
 >> =EF=BF=BDhttp://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11026
 >>
 >> Reported by Andre van Meulebrouck for release: 4.1.2
 >>
 >> *** Description:
 >> This blows up (as well it should):
 >>
 >> (letrec ((y (+ x 1)) (x 3)) y)
 >>
 >> But this doesn't (and I think it should):
 >>
 >> (letrec ((x 3)(y (+ x 1))) y)
 >>
 >> To my way of thinking letrec has been implemented like let* (when it sho=
 uldn't have been). =EF=BF=BDLetrec should be implemented the exact same way=
  as let (except for the way that closures get closed). =EF=BF=BDSince we do=
 n't have a closure here, the above letrec should be equivalent to a let (no=
 t a let*).
 >>
 >> Or is there an error in my thinking here?
 >>
 >> I need to know because I'm implementing my own embedded Scheme. =EF=BF=
 =BDNormally I base my Scheme's behavior on Dr. Scheme, but in this case the=
  behavior doesn't make any sense to me.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> windows "Windows NT 6.1 (Build 7600)" (win32\i386\3m) (get-display-depth=
 ) =3D 32
 >> Human Language: english
 >> (current-memory-use) 109395004
 >>
 >> Collections:
 >> (("C:\\Users\\vanmeule\\AppData\\Roaming\\PLT Scheme\\4.1.2\\collects" n=
 on-existent-path) ("C:\\Program Files\\PLT\\collects" "afm" "algol60" "brow=
 ser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext"=
  "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "game=
 s" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons=
 " "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mr=
 lib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "p=
 lanet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs=
 " "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slidesh=
 ow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "=
 teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "=
 typed-scheme" "version" "web-server" "wxme" "xml"))
 >> Computer Language: (("Legacy Languages" "Pretty Big") #(#t write mixed-f=
 raction-e #f #t debug #t))
 >>
 >>
 >
 >
 >
From: Carl Eastlund <cce@racket-lang.org>
To: vanmeule@roadrunner.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 17:11:56 -0400

 For reference, here is a link to the current documentation of letrec:
 
 http://docs.racket-lang.org/reference/let.html?q=3Dletrec#%28form._%28%28li=
 b._racket/private/letstx-scheme..rkt%29._letrec%29%29
 
 Carl Eastlund
 
 On Sun, Jul 11, 2010 at 1:36 PM,  <vanmeule@roadrunner.com> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11026
 >
 > Reported by Andre van Meulebrouck for release: 4.1.2
 >
 > *** Description:
 > This blows up (as well it should):
 >
 > (letrec ((y (+ x 1)) (x 3)) y)
 >
 > But this doesn't (and I think it should):
 >
 > (letrec ((x 3)(y (+ x 1))) y)
 >
 > To my way of thinking letrec has been implemented like let* (when it shou=
 ldn't have been). =A0Letrec should be implemented the exact same way as let=
  (except for the way that closures get closed). =A0Since we don't have a cl=
 osure here, the above letrec should be equivalent to a let (not a let*).
 >
 > Or is there an error in my thinking here?
 >
 > I need to know because I'm implementing my own embedded Scheme. =A0Normal=
 ly I base my Scheme's behavior on Dr. Scheme, but in this case the behavior=
  doesn't make any sense to me.
 >
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: =?ISO-8859-1?Q?Andr=E9_van_Meulebrouck?= <vanmeule@roadrunner.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 19:20:45 -0400

 Hi Andre,
 
 I think there's been more heat than light on this thread so far, so
 let me see whether I can change that.
 
 Racket's letrec is not the same as Scheme's letrec, and this is a
 consequence of Racket not being the same as Scheme.  Scheme leaves the
 order of evaluation undefined.  We Racketeers do not agree with this
 specification, and define the order of evaluation to be left-to-right.
 A consequence of this decision is that letrec can give a meaning to
 some programs that are not given a meaning by Scheme.
 
 Thus, there is no error in your thinking per se, but not in Racket
 either -- it's just that DrScheme (not "Dr. Scheme") behaves
 differently than you think.  Once you see the l->r evaluation order,
 it's perfectly reasonable for letrec to behave this way.
 
 Because of these conscious decisions, we do not regard this as a bug.
 
 One consequence of this behavior is that internal define's work more
 reasonably in Racket than they do in Scheme, which changes their
 semantics when they move to an internal context.
 
 As for Robby's message about forums, it's because we do not want our
 bug-report archive to turn into a discussion forum.  Once a thread
 ceases to be about a bug, we ask that discussions move out of here.
 
 Shriram
From: =?iso-8859-1?Q?Andr=E9_van_Meulebrouck?= <vanmeule@roadrunner.com>
To: "'Shriram Krishnamurthi'" <sk@cs.brown.edu>
Cc: "'Robby Findler'" <robby@eecs.northwestern.edu>, <bugs@racket-lang.org>,
        <nobody@racket-lang.org>, <bug-notification@racket-lang.org>
Subject: RE: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 17:23:07 -0700

 I still say this is inconsistent with your own documentation for =
 "DrRacket"
 or "DrScheme" (or whatever you want to call it...sheesh):
 
 > (let ((x 3) (y x)) y) ;not left to right
 . . reference to undefined identifier: x
 > (letrec ((x 3) (y x)) y)
 3
 
 I'm extremely disappointed.
 
 -----Original Message-----
 From: shriram@gmail.com [mailto:shriram@gmail.com] On Behalf Of Shriram
 Krishnamurthi
 Sent: Sunday, July 11, 2010 4:21 PM
 To: Andr=E9 van Meulebrouck
 Cc: Robby Findler; bugs@racket-lang.org; nobody@racket-lang.org;
 bug-notification@racket-lang.org
 Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it
 shouldn't)
 
 Hi Andre,
 
 I think there's been more heat than light on this thread so far, so
 let me see whether I can change that.
 
 Racket's letrec is not the same as Scheme's letrec, and this is a
 consequence of Racket not being the same as Scheme.  Scheme leaves the
 order of evaluation undefined.  We Racketeers do not agree with this
 specification, and define the order of evaluation to be left-to-right.
 A consequence of this decision is that letrec can give a meaning to
 some programs that are not given a meaning by Scheme.
 
 Thus, there is no error in your thinking per se, but not in Racket
 either -- it's just that DrScheme (not "Dr. Scheme") behaves
 differently than you think.  Once you see the l->r evaluation order,
 it's perfectly reasonable for letrec to behave this way.
 
 Because of these conscious decisions, we do not regard this as a bug.
 
 One consequence of this behavior is that internal define's work more
 reasonably in Racket than they do in Scheme, which changes their
 semantics when they move to an internal context.
 
 As for Robby's message about forums, it's because we do not want our
 bug-report archive to turn into a discussion forum.  Once a thread
 ceases to be about a bug, we ask that discussions move out of here.
 
 Shriram
 
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: =?ISO-8859-1?Q?Andr=E9?= van Meulebrouck <vanmeule@roadrunner.com>
Cc: "'Shriram Krishnamurthi'" <sk@cs.brown.edu>,
        "'Robby Findler'" <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: RE: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 18:39:13 -0600

 At Sun, 11 Jul 2010 17:23:07 -0700, Andr=C3=A9 van Meulebrouck wrote:
 > I still say this is inconsistent with your own documentation for "DrRacke=
 t"
 > or "DrScheme" (or whatever you want to call it...sheesh):
 >=20
 > > (let ((x 3) (y x)) y) ;not left to right
 > . . reference to undefined identifier: x
 
 I think you're confusing "evaluation" and "binding".
 
 Evaluation is left-to-right: the expression `3' is evaluated before the
 expression `x'.
 
 The `x' and `y' identifiers are bound, however, only in the body `y'.
 So, the `x' in the expression for the `y' binding doesn't refer to the
 `x' that is bound by `let'.
 
 For what it's worth, terms like "evaluate" and "binding" are introduced
 in chapter 1 of the Racket reference.
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: =?ISO-8859-1?Q?Andr=E9_van_Meulebrouck?= <vanmeule@roadrunner.com>,
        Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 21:37:31 -0400

 On Sun, Jul 11, 2010 at 7:20 PM, Shriram Krishnamurthi <sk@cs.brown.edu> wrote:
 
 [very good discussion of Racket's semantics snipped]
 
 > One consequence of this behavior is that internal define's work more
 > reasonably in Racket than they do in Scheme, which changes their
 > semantics when they move to an internal context.
 
 This is no longer the case - the current Scheme standard defines the
 evaluation order of internal `define's to be left-to-right.
 -- 
 sam th
 samth@ccs.neu.edu
From: =?iso-8859-1?Q?Andr=E9_van_Meulebrouck?= <vanmeule@roadrunner.com>
To: "'Sam Tobin-Hochstadt'" <samth@ccs.neu.edu>,
        "'Shriram Krishnamurthi'" <sk@cs.brown.edu>
Cc: "'Robby Findler'" <robby@eecs.northwestern.edu>, <bugs@racket-lang.org>,
        <nobody@racket-lang.org>, <bug-notification@racket-lang.org>
Subject: RE: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 19:09:39 -0700

 To me the issue is about when the side effects are allowed to be =
 visible,
 especially when an environment is being built but is not yet completed.
 (This might be more appropriate fodder for a forum discussion rather =
 than a
 bug report, but since this started here and I don't want to participate =
 in
 any forums...)
 
 Consider:
 
 > (letrec ((y (lambda () x)) (x 3)) (y))
 3
 > (letrec ((y x) (x 3)) y)
 #<undefined>
 
 If the standard is now left to right, I'm not sure I even like the =
 standard.
 
 In coding this in my own F# coded embedded Scheme, I noticed these =
 issues
 more than I would have merely using Scheme.
 
 The way I think the latter example should be coded, it would blow up =
 rather
 than returning #<undefined>.  It would be looking for the x in the =
 parent
 environment of the letrec (since the environment being built isn't yet
 completed).
 
 I could easily implement things as DrScheme has done, by updating the
 environment as evaluations are done left to right.
 
 However, by implementing it to do the evaluations behind the scenes (but =
 not
 update the environment in progress until the environment is fully ready) =
 it
 could be implemented so as to not make order matter (hence whether the
 evaluations were done left to right or in some random order shouldn't
 matter).
 
 Having order matter in a letrec really bothers me.  To me letrec should =
 be
 the same as let except for how closures are closed (i.e. lambdas get to
 reference the environment they are defined in).  This can be done by =
 putting
 an empty environment on the stack but not updating it (at all) until all
 bindings are computed.  The closures would reference the empty =
 environment
 (but by the time the body is reached it will be fully populated).  This
 would fail some of the evaluations that currently work in DrScheme, but =
 it
 would also get rid of the order matters issues that I don't like.
 
 In essence, right now DrScheme treats letrec like let* when you're not =
 using
 lambda definitions.  I think letrec should be the same as let when =
 you're
 not using lambda definitions.  This would then not be merely an
 implementation question, but also a semantic question pertaining to what =
 a
 letrec should really mean when you're not binding lambda definitions.
 
 -----Original Message-----
 From: samth0@gmail.com [mailto:samth0@gmail.com] On Behalf Of Sam
 Tobin-Hochstadt
 Sent: Sunday, July 11, 2010 6:38 PM
 To: Shriram Krishnamurthi
 Cc: Andr=E9 van Meulebrouck; Robby Findler; bugs@racket-lang.org;
 nobody@racket-lang.org; bug-notification@racket-lang.org
 Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it
 shouldn't)
 
 On Sun, Jul 11, 2010 at 7:20 PM, Shriram Krishnamurthi <sk@cs.brown.edu>
 wrote:
 
 [very good discussion of Racket's semantics snipped]
 
 > One consequence of this behavior is that internal define's work more
 > reasonably in Racket than they do in Scheme, which changes their
 > semantics when they move to an internal context.
 
 This is no longer the case - the current Scheme standard defines the
 evaluation order of internal `define's to be left-to-right.
 --=20
 sam th
 samth@ccs.neu.edu
 
 
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: =?ISO-8859-1?Q?Andr=E9_van_Meulebrouck?= <vanmeule@roadrunner.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11026: letrec acts like let* (when it shouldn't)
Date: Sun, 11 Jul 2010 22:19:25 -0400

 1. In student language levels, DrRacket really does blow up when you
 touch things prematurely.
 
 2. In a letrec, your RHSes really ought to be syntactic values.  If
 they are, the distinction that started this thread would not matter.
 
 Therefore, a discussion about what the meaning of letrec should be if
 the RHSes are arbitrary expressions seems to not be particularly
 germane.  And using the let*-like behavior fixes what we consider a
 bug in the internal-define semantics in older Schemes.
 
 It is now abundantly clear that this is NOT a bug, so I really think
 we should move this discussion elsewhere.
 
 Shriram

Responsible changed from "nobody" to "eli" by eli at Fri, 03 Sep 2010 21:00:41 -0400
Reason>>> .

