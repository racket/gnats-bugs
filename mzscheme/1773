From dimock@deas.harvard.edu  Tue Nov 14 21:10:15 2000
Received: from localhost (TYPES.BU.EDU [128.197.10.198])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id VAA21063
	for <plt-gnats>; Tue, 14 Nov 2000 21:10:14 -0600 (CST)
Message-Id: <200011150310.VAA21063@cs.rice.edu>
Date: Tue, 14 Nov 2000 21:10:14 -0600 (CST)
From: dimock@deas.harvard.edu
To: plt-gnats@cs.rice.edu
Subject: trouble running mzc

>Number:         1773
>Category:       mzscheme
>Synopsis:       trouble running mzc
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          support
>Submitter-Id:   unknown
>Arrival-Date:   Wed Nov 15 03:15:02 GMT 2000
>Last-Modified:  Sun May  6 12:25:05 CDT 2001
>Originator:     allyn dimock
>Organization:
titan
>Release:        103
>Environment:
unix (sparc-solaris) (get-display-depth) = 8
Tools: ("syncheck" "project-manager")
Docs Installed:
("help" "mzscheme" "r5rs" "icons" "drscheme" "teachpack" "misclib" "mred" "beginning" "intermediate" "advanced" "mzc")
Collections:
(("/home/church/dimock/lib/plt/collects" ("browser" "afm" "compiler" "drscheme" "graphics" "stepper" "hierlist" "icons" "make" "mzlib" "mred" "games" "mzscheme" "net" "help" "zodiac" "userspce" "dynext" "launcher" "drscheme-jr" "errortrace" "framework" "slibinit" "xml" "htdp" "setup" "defaults" "guserspce" "stepper-graphical" "doc")))
>Description:
.so file from mzc crashes:
mzscheme -gf  ~/codefest/bin/procStatDyn2.so -e '(main)' -- life_dyn life_stat
Welcome to MzScheme version 103, Copyright (c) 1995-2000 PLT (Matthew Flatt)
Identifiers and symbols are initially case-sensitive.
reference to undefined identifier: |^?ELF^A^B^A  (a lotlot of 
(a lot of invisible control characters ^A^@ ... in the identifier).

code was compiled as 
mzc -p casesens.ss --extension --prim procStatDyn2.ss
(require-libray "string.ss") and (require-library "function.ss")
were each wrapped in their own (begin-elaboration-time 

when compiled without --prim the result was similar, but with a
longer sequence of unprintable characters in the undefined 
identifier |^?ELF^A^B^A^@ ... forseveral hundred characters.

Any ideas without looking at the source?

If I am just compiling to a .zo file, I have to remove the 
(begin-elaboration-time forms.  Otherwise
mzc -p casesens.ss --zo procStatDyn2.ss
yields a program which when run gives:
mzscheme -gf  ~/codefest/bin/procStatDyn2.zo -e '(main)' -- life_dyn life_stat
Welcome to MzScheme version 103, Copyright (c) 1995-2000 PLT (Matthew Flatt)
Identifiers and symbols are initially case-sensitive.
reference to undefined identifier: read-from-string-all
> 

This latter sounds like a possible bug.  the former may just be my not 
understanding the switches for mzc, or some special form that the program needs to
be in [the program is currently a series of top level definitions with no forward
references].

All versions of the program are being run on Solaris 5.7 on a Sparc.
gcc --version
egcs-2.91.66

Let me know if you have any advice.  

Thanks.

-- Allyn
>How-To-Repeat:

>Fix:
>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: dimock@deas.harvard.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1773: trouble running mzc
Date: Wed, 15 Nov 2000 04:51:00 -0800

 Quoting dimock@deas.harvard.edu:
 > .so file from mzc crashes:
 > mzscheme -gf  ~/codefest/bin/procStatDyn2.so -e '(main)' -- life_dyn life_stat
 > Welcome to MzScheme version 103, Copyright (c) 1995-2000 PLT (Matthew Flatt)
 > Identifiers and symbols are initially case-sensitive.
 > reference to undefined identifier: |^?ELF^A^B^A  (a lotlot of 
 > (a lot of invisible control characters ^A^@ ... in the identifier).
 
 The -f flag won't work on .so files. It's like `load', as opposed to
 `load-extension'.
 
 There isn't currently a flag for loading .so files, though maybe there
 should be. Meanwhile, I recommend creating a file
 ~/codefest/bin/procStatDyn2Loader.ss that contains
 
  (load-relative-extension "procStatDyn2.so")
 
 > If I am just compiling to a .zo file, I have to remove the 
 > (begin-elaboration-time forms.  Otherwise
 > mzc -p casesens.ss --zo procStatDyn2.ss
 > yields a program which when run gives:
 > mzscheme -gf  ~/codefest/bin/procStatDyn2.zo -e '(main)' -- life_dyn life_stat
 > Welcome to MzScheme version 103, Copyright (c) 1995-2000 PLT (Matthew Flatt)
 > Identifiers and symbols are initially case-sensitive.
 > reference to undefined identifier: read-from-string-all
 
 `begin-elaboration-time' is a mess. We're in the process of getting rid
 of it (replacing it with a module system for namespace management).
 
 The problem is that mzc evaluates the code in a `begin-elaboration-time'
 while compiling, then throws it away. When the code is not in
 `begin-elaboration-time', mzc merely compiles at keeps the code, then
 its evaluated at run time.
 
 It sounds like you're getting different results when going to .so
 versus .zo, though. That's be a bug in the .so compiler (and shows how
 `begin-elaboration-time' is so broken that we don't understand it,
 either).
 
 Matthew

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon Nov 20 09:48:47 2000
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Sun May  6 12:25:01 2001
State-Changed-Why:


 
>Unformatted:
