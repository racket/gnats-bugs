From schlie@attbi.com  Thu Apr 24 22:20:54 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id WAA20515
	for <bugs>; Thu, 24 Apr 2003 22:20:54 -0400
Message-Id: <200304250220.WAA20515@champlain.ccs.neu.edu>
Date: Thu, 24 Apr 2003 22:20:54 -0400
From: Paul Schlie <schlie@attbi.com>
To: bugs@plt-scheme.org
Subject: MzScheme, was expecting (flush-output <output-string-port>) to clear string?

>Number:         6228
>Category:       mzscheme
>Synopsis:       MzScheme, was expecting (flush-output <output-string-port>) to clear string?
>Class:          sw-bug
>Responsible:    steck
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Apr 24 22:25:00 -0400 2003
>Closed-Date:    Thu Apr 24 22:28:56 -0400 2003
>Last-Modified:  Fri May 02 22:29:21 -0400 2008
>Originator:     Paul Schlie
>Organization:
titan
>Submitter-Id:   unknown
>Release:        203.9-cvs24apr2003
>Environment:
macosx "Darwin fusion.local. 6.5 Darwin Kernel Version 6.5: Mon Apr  7 17:05:38 PDT 2003; root:xnu/xnu-344.32.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 16
Docs Installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "CVS" "drscheme" "framework" "help" "icons" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
Collections: 
(("/Applications/plt-cvs/plt/collects/mzlib/../../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "dromedary" "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "readline" "reduction-semantics" "setup" "sirmail" "slatex" "slibinit" "srfi" "srpersist" "stepper" "string-constants" "syntax" "test-suite" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Graphical (MrEd, includes MzScheme)") #6(#f write mixed-fraction-e #t #t debug))
>Description:
 as in summary, otherwise how can an <output-string-port>
 be cleared, as in the small program below; which relies
 on the strings being buffered in the <ouput-string-port>
 either being consumed upon being read by (get-ouput-string s)
 or being cleared by (flush-output s), otherwise the strings
 continue to accumulate in the <output-string-port> ?
>How-To-Repeat:
Try: expecting ("a" "(b)" "3"), got ("a" "a(b)" "a(b)3"),

 (let ((x '(a (b) 3)) (s (open-output-string)))
    (let loop ((t x))
    (when (pair? t)
           (set-car! t (begin (display (car t) s) (get-output-string s)))
           (flush-output s)
           (loop (cdr t ))))
    x)
>Fix:
>Release-Note:
>Audit-Trail:
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Thu Apr 24 22:28:56 2003
State-Changed-Why:
    misunderstanding of get-output-string (it doesn't clear the output)

From: Robby Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6228: MzScheme, was expecting (flush-output <output-string-port>) to clear string?
Date: Thu, 24 Apr 2003 21:28:20 -0500

 get-output-string doesn't `read' the string -- it returns the entire
 string that has even been written to the buffer. I'm not sure of the
 larger context, but you might want look at the pipes section of the
 manual.
 
 hth,
 Robby
 
 At Thu, 24 Apr 2003 22:20:54 -0400, Paul Schlie wrote:
 > You may claim or edit this problem report at
 > 
 > https://internal.plt-scheme.org/cgis-bin/gnatsweb.pl?cmd=edit&pr=6228&database=plt
 > 
 > >Number:         6228
 > >Category:       all
 > >Synopsis:       MzScheme, was expecting (flush-output <output-string-port>) to clear 
 > string?
 > >Confidential:   no
 > >Severity:       serious
 > >Priority:       medium
 > >Responsible:    steck
 > >State:          open
 > >Class:          sw-bug
 > >Submitter-Id:   unknown
 > >Arrival-Date:   Thu Apr 24 22:25:00 EDT 2003
 > >Closed-Date:
 > >Last-Modified:
 > >Originator:     Paul Schlie
 > >Release:        203.9-cvs24apr2003
 > >Organization:
 > titan
 > >Environment:
 > macosx "Darwin fusion.local. 6.5 Darwin Kernel Version 6.5: Mon Apr  7 17:05:38 PDT 
 > 2003; root:xnu/xnu-344.32.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-
 > display-depth) = 16
 > Docs Installed:
 > (".DS_Store" "advanced" "beginning" "beginning-abbr" "CVS" "drscheme" "framework" "help" 
 > "icons" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" 
 > "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools" "tour")
 > Collections: 
 > (("/Applications/plt-
 > cvs/plt/collects/mzlib/../../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" 
 > "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "dromedary" 
 > "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "games" "graphics" 
 > "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" 
 > "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" 
 > "readline" "reduction-semantics" "setup" "sirmail" "slatex" "slibinit" "srfi" 
 > "srpersist" "stepper" "string-constants" "syntax" "test-suite" "tests" "tex2page" 
 > "texpict" "typeset" "version" "waterworld" "web-server" "xml")))
 >  
 > Human Language: english
 >  
 > Teachpack filenames: ()
 > Computer Language: (("Professional Languages" "PLT" "Graphical (MrEd, includes 
 > MzScheme)") #6(#f write mixed-fraction-e #t #t debug))
 > >Description:
 >  as in summary, otherwise how can an <output-string-port>
 >  be cleared, as in the small program below; which relies
 >  on the strings being buffered in the <ouput-string-port>
 >  either being consumed upon being read by (get-ouput-string s)
 >  or being cleared by (flush-output s), otherwise the strings
 >  continue to accumulate in the <output-string-port> ?
 > 
 > >How-To-Repeat:
 > Try: expecting ("a" "(b)" "3"), got ("a" "a(b)" "a(b)3"),
 > 
 >  (let ((x '(a (b) 3)) (s (open-output-string)))
 >     (let loop ((t x))
 >     (when (pair? t)
 >            (set-car! t (begin (display (car t) s) (get-output-string s)))
 >            (flush-output s)
 >            (loop (cdr t ))))
 >     x)
 > 
 > >Fix:
 > >Release-Note:
 > >Audit-Trail:
 > >Unformatted:
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6228: MzScheme, was expecting (flush-output
	<output-string-port>) to clear string?
Date: Thu, 24 Apr 2003 22:40:30 -0400

 yes, but shouldn't "flush-output" clear the <output-string-port>'s buffer?
 
 on 4/24/03 10:28 PM, Robby Findler wrote:
 >
 > get-output-string doesn't `read' the string -- it returns the entire
 > string that has even been written to the buffer. I'm not sure of the
 > larger context, but you might want look at the pipes section of the
 > manual.
 > 
 > hth,
 > Robby
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6228: MzScheme, was expecting (flush-output
	<output-string-port>) to clear string?
Date: Thu, 24 Apr 2003 21:43:32 -0500

 No, flush-output doesn't clear anything -- it just flushes the internal
 buffer (if any). There isn't an internal buffer in a string port.
 
 The internal buffer in a port corresponds to characters that have been
 put into the port but maybe aren't available to be read out yet. Think
 of a line of tty input. As you type at the prompt, the program reading
 information doesn't get those characters -- only when you hit return do
 they appear to the program. There are other, more sophisticated forms
 of buffering tcp/ip ports and custom ports support your own arbitrary
 buffering.
 
 Robby
 
 At Thu, 24 Apr 2003 22:40:30 -0400, Paul Schlie wrote:
 > yes, but shouldn't "flush-output" clear the <output-string-port>'s buffer?
 > 
 > on 4/24/03 10:28 PM, Robby Findler wrote:
 > >
 > > get-output-string doesn't `read' the string -- it returns the entire
 > > string that has even been written to the buffer. I'm not sure of the
 > > larger context, but you might want look at the pipes section of the
 > > manual.
 > > 
 > > hth,
 > > Robby
 > 
 > 
 

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6228: MzScheme, was expecting (flush-output
	<output-string-port>) to clear string?
Date: Thu, 24 Apr 2003 23:29:48 -0400

 Not a big deal, but feel compelled to explain my rational:
 
 From the docs on flush-output:
 
    ... Only file-stream ports and custom ports (see sectionÂ 11.1.6)
    use buffers; ...
 
 By implication, it would seem to apply to <string-ports> which are also
 "buffered" (where buffered to me implies temporary storage used prior to
 final disposition of its contents), and seem to be basic built-in custom
 ports; unless of course I'm mistaken? (as implemented, output-string-ports
 uniquely have only sources, and no sinks?, as such will infinitely
 accumulate input if not periodically closed? Where input-string-ports,
 are sourced with a "string", and use read as a sink. Which is why it would
 seem appropriate to expect that output-strings to have used
 (get-output-string ...) as it's sink, and not infinitely buffer it's input.
 
 But as stated, not a big deal, as it's easy enough to wrap the internals of
 a loop with another (let (s (open-output-string)) ...), which will create
 and destroy an <output-string-port> each iteration, but it seemed likely
 less efficient than allocating once, and clearing the buffer each iteration,
 although I recognize it may not be.
 
 Thanks, -paul-
 
 on 4/24/03 10:40 PM, Paul Schlie wrote:
 >
 > yes, but shouldn't "flush-output" clear the <output-string-port>'s buffer?
 > 
 > on 4/24/03 10:28 PM, Robby Findler wrote:
 >> 
 >> get-output-string doesn't `read' the string -- it returns the entire
 >> string that has even been written to the buffer. I'm not sure of the
 >> larger context, but you might want look at the pipes section of the
 >> manual.
 >> 
 >> hth,
 >> Robby
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Paul Schlie <schlie@attbi.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6228: MzScheme, was expecting (flush-output
	<output-string-port>) to clear string?
Date: Thu, 24 Apr 2003 23:08:07 -0500

 I'm not sure that it would be less efficient. For the particular
 example, you sent in the PR, I think something like this:
 
   (map (lambda (x) (format "~s" x)) '(a (b) 3))
 
 is probably easiest.
 
 Robby

From: Paul Schlie <schlie@attbi.com>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: <bugs@plt-scheme.org>
Subject: Re: all/6228: MzScheme, was expecting (flush-output
	<output-string-port>) to clear string?
Date: Fri, 25 Apr 2003 00:36:18 -0400

 Like it, much more elegant than what I was trying to do (which was
 making strings out of expressions for display as list-box entries).
 
 (but still suspect that output-string-ports should have a sink function)
 
 Thanks again, -paul-
 
 for display wit
 on 4/25/03 12:08 AM, Robby Findler wrote:
 >
 > I'm not sure that it would be less efficient. For the particular
 > example, you sent in the PR, I think something like this:
 > 
 > (map (lambda (x) (format "~s" x)) '(a (b) 3))
 > 
 > is probably easiest.
 > 
 > Robby
 
>Unformatted:
