From neil@neilvandyke.org  Sun May 18 10:47:24 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id KAA06464
	for <bugs>; Sun, 18 May 2003 10:47:23 -0400
Message-Id: <200305181447.KAA06464@champlain.ccs.neu.edu>
Date: Sun, 18 May 2003 10:47:23 -0400
From: "Neil W. Van Dyke" <neil@neilvandyke.org>
Reply-To:
To: bugs@plt-scheme.org
Subject: unitsig.ss resources

>Number:         6275
>Category:       mzscheme
>Synopsis:       unitsig.ss resources
>Confidential:   no
>Severity:       non-critical
>Priority:       low
>Responsible:    mflatt
>State:          open
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Sun May 18 10:50:00 EDT 2003
>Closed-Date:    
>Last-Modified:  Wed May 21 14:26:05 EDT 2003
>Originator:     Neil W. Van Dyke
>Release:        204-cvs28apr2003
>Organization:
titan
>Environment:
unix "Linux winona 2.2.20 #1 Wed May 29 05:19:18 EDT 2002 i686 unknown unknown GNU/Linux" (i386-linux) (get-display-depth) = 24
Docs Installed:
("advanced" "beginning-abbr" "CVS" "beginning" "drscheme" "framework" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "tex2page" "tools" "tour" "help")
Collections: 

 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#f write mixed-fraction-e #f #t debug))
>Description:
This is a wishlist item I kinda hate to even mention...

If there's a way to reduce the memory usage of unitsig.ss,
that'd be good.

The memory usage is negligible in large applications, but
it's very noticeable when writing small reusable libraries.

I'm finding that resource usage is one of the factors that
comes to mind lately when deciding whether to package a given
library as a plain module or to go to the trouble of making it
use unit/sig.  For some apps involving multiple OS processes,
unitsig.ss alone might double the incremental memory cost of
each process.

If there were a practical way to make unitsig.ss code shareable
among multiple "mzscheme" host OS processes, that'd work.

This is not a showstopper issue -- just thought I should mention
it in case you guys have a clever solution.
>How-To-Repeat:
Welcome to MzScheme version 204, Copyright (c) 1995-2003 PLT

;;   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  Command
;; 11165 neil       0   0  2224 2224  924 S  0.0  1.7   0:00.07 mzscheme

> (values (current-memory-use) (begin (collect-garbage) (current-memory-use)))
618496
618496

;; 11165 neil       0   0  2252 2252  948 S  0.0  1.8   0:00.08 mzscheme

> (require (lib "unitsig.ss"))

;; 11165 neil       0   0  2752 2752  964 S  0.0  2.1   0:00.14 mzscheme

> (values (current-memory-use) (begin (collect-garbage) (current-memory-use)))
1249280
1118208

;; 11165 neil       0   0  2756 2756  964 S  0.0  2.1   0:00.16 mzscheme

> (values (current-memory-use) (begin (collect-garbage) (current-memory-use)))
1118208
1081344

;; 11165 neil       1   0  2756 2756  964 S  0.0  2.1   0:00.18 mzscheme

> (values (current-memory-use) (begin (collect-garbage) (current-memory-use)))
1081344
1081344

;; 11165 neil       0   0  2756 2756  964 S  0.0  2.1   0:00.21 mzscheme

>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Wed May 21 14:26:05 2003
Responsible-Changed-Why:
    mz
>Unformatted:

