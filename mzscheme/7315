From apache@plt-scheme.org Wed Apr  6 16:54:05 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j36Ks5nN026998
	for <bugs@plt-scheme.org>; Wed, 6 Apr 2005 16:54:05 -0400
Message-Id: <200504062054.j36Ks57U026994@champlain.ccs.neu.edu>
Date: Wed, 6 Apr 2005 16:54:05 -0400
From: newton@mit.edu
To: bugs@plt-scheme.org
Subject: include.ss dependencies not respected by load/use-compiled when "../" is involved

>Number:         7315
>Category:       mzscheme
>Synopsis:       include.ss dependencies not respected by load/use-compiled when "../" is involved
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Apr 06 16:55:00 -0400 2005
>Closed-Date:    Sun Jan 16 19:54:31 -0500 2011
>Last-Modified:  Sun Jan 16 19:54:31 -0500 2011
>Originator:     Ryan Newton
>Organization:
plt
>Submitter-Id:   unknown
>Release:        2.99.100
>Environment:
mac-ppc-osx
>Description:
I'm using include.ss to cross-compile a project for multiple scheme systems.  Each file in my proj/generic/ tree has a counterpart in a proj/plt/ directory.  Accordingly I use a lot of '(include "../generic/file.ss")' statements.  However, when I modify the generic/ versions, the plt/ modules are not recompiled.

I compile the collection with: mzc --collection-zos ./plt

The resulting dependency (.dep) files in the compiled/ directory correctly reflect the dependency on the ../generic files.  For example:

("299.100" #"/usr/local/plt/collects/mzlib/include.ss" #"/Users/newton/cur/plt/constants.ss" #"/Users/newton/cur/plt/iu-match.ss" #"/Users/newton/cur/plt/helpers.ss" #"/usr/local/plt/collects/mzlib/trace.ss" (ext . #"/Users/newton/cur/plt/../generic/pass20_deglobalize.ss"))

I notice there is an (ext . <file>) form here.  But I also get the ext form if I place (or symlink) the generic directory *within* the plt/ directory -- and then my compilation dependencies are respected!  So I imagine that is not a relevant distinction.

For the time being, I will simply solve the problem by symlinking the generic/ directory into subdirectory of my plt/ directory.  But it seems like this is a bug to me.  I can't see why the directory organization should affect compilation behavior.
>How-To-Repeat:
Make two files:

a.ss:
 (module a mzscheme
   (require (lib "include.ss"))
   (include "../b.ss"))


b.ss:
 (printf "Loading B v1 ~n")


Compiling a.ss with "mzc --auto-dir --zo" will result in a file state which breaks require and load/use-compiled.  Modifications to b.ss will not be noticed by Drscheme/mzscheme.  However, the same thing is not true if b.ss is in the same directory as a.ss, or a subdirectory, but not "../".



>Fix:
>Audit-Trail:
State changed from "open" to "closed" by mflatt at Sun, 16 Jan 2011 19:54:31 -0500
Reason>>> apparently fixed at some point

