From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jan 25 22:19:36 2008
Received: from fg-out-1718.google.com (fg-out-1718.google.com [72.14.220.159])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m0Q3JZcU022952
	for <bugs@bugs.plt-scheme.org>; Fri, 25 Jan 2008 22:19:35 -0500
Message-Id: <200801260319.m0Q3JVZf022947@champlain.ccs.neu.edu>
Date: Fri, 25 Jan 2008 22:19:31 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: mzscheme hangs

>Number:         9168
>Category:       mzscheme
>Synopsis:       mzscheme hangs
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jan 25 22:20:01 -0500 2008
>Closed-Date:    Sat Jan 26 21:24:58 -0500 2008
>Last-Modified:  Sat Jan 26 21:24:58 -0500 2008
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.9
>Environment:
linux-redhat
>Description:
Running the code below (with `mzscheme -f x') gets mzscheme
in a loop.  This is the smallest version I could find from
the code that John posted, reduced to #%kernel code.  It seems
like there is some bad interaction between the loop and the
`call-with-values' which causes some problem.  Maybe in the
bytecode optimization?  (The problem is still there when the
jit is disabled.)
>How-To-Repeat:
(module foo '#%kernel
  (letrec-values ([(loop)
                   (lambda (a)
                     (if a
                       (loop a)
                       (add1 (call-with-values (lambda () (loop a)) list))))])
    (loop 1)))
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by mflatt at Sat, 26 Jan 2008 21:24:58 -0500
Reason>>> Yes, inlining in the bytecode compiler kept unrolling the loop, due
to the way the (call-with-values (lambda () V) F)) => (F V)
optimization is implemented, where V is essentially optimized
twice.

