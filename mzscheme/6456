From clements@brinckerhoff.org  Tue Sep 16 13:58:06 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id NAA21844
	for <bugs>; Tue, 16 Sep 2003 13:58:06 -0400
Message-Id: <200309161758.NAA21844@champlain.ccs.neu.edu>
Date: Tue, 16 Sep 2003 13:58:06 -0400
From: John Clements <clements@brinckerhoff.org>
To: bugs@plt-scheme.org
Subject: better contract-broken error message?

>Number:         6456
>Category:       mzscheme
>Synopsis:       better contract-broken error message?
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    robby
>State:          closed
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Tue Sep 16 14:00:00 EDT 2003
>Closed-Date:    Mon Jan 05 02:51:52 EST 2004
>Last-Modified:  Mon Jan 05 02:51:52 EST 2004
>Originator:     John Clements
>Release:        205.2-cvs1aug2003
>Organization:
titan
>Environment:
macosx "Darwin osterley.ccs.neu.edu 6.6 Darwin Kernel Version 6.6: Thu May  1 21:48:54 PDT 2003; root:xnu/xnu-344.34.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
("advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "tex2page" "tools" "tour")
Collections: 
(("/Users/clements/clements/collects" ("badger" "biff" "big-step-explorer" "clements-lib" "contour-letters" "CVS" "foo" "matrix-arithmetic" "mnemisis" "moshimoshi" "no-brainer" "single-stepper" "test-tool" "web-utilities")) ("/Users/clements/matthias/collects" ("web")) ("/Users/clements/Library/PLT Scheme/205.2/collects" "non-existent path") ("/Users/clements/plt/collects" (".DS_Store" ".gdb_history" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "dromedary" "drscheme" "dynext" "eopl" "errortrace" "finish-install" "framework" "games" "graphics" "guibuilder" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "libsndfile" "make" "mrdemo" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "profj" "readline" "reduction-semantics" "setup" "sgl" "sirmail" "slatex" "slibinit" "srfi" "srpersist" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tests" "tex2page" "texpict" "typeset" "vector" "version" "waterworld" "web-server" "xelda" "xml")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#f write mixed-fraction-e #f #t debug) (default)))
>Description:
When I get a message of the form "<a> broke <a>'s contract", I can't tell
whether this is an error caused by the negative side of a recursive call
by <a> to itself, or an error caused by the positive side of <a>'s contract.

As an aside, the following text in Help Desk appears to contain several typos,
highlighted with stars:

The provide/contract form treats modules as units of blame. The module that 
defines the provided variable is expected to meet the ***position*** 
(co-variant) positions of the contract. Each module that imports the 
provided variable must obey the negative (***contract-variant***) 
positions of the contract. 
>How-To-Repeat:

>Fix:

>Release-Note:

>Audit-Trail:

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 13:21:41 -0500

 At Tue, 16 Sep 2003 13:58:06 -0400, John Clements wrote:
 > When I get a message of the form "<a> broke <a>'s contract", I can't tell
 > whether this is an error caused by the negative side of a recursive call
 > by <a> to itself, or an error caused by the positive side of <a>'s contract.
 
 I agree, it's not very clear, but the intention was that this:
 
   <a>: <b> broke ...
 
 means that <b> failed and <a> "detected" the failure. So, in the
 original contract, either <a> or <b> could be the positive or negative
 side, but when the contract error was discovered, it was <b>'s fault.
 
 For example, with this contract:
 
   (int -> bool)
 
 and <p> originally positive and <n> originally negative, if a char goes
 in you'd see:
 
   <p>: <n> broke ...
 
 and if a char comes out, you'd see
 
   <n>: <p> broke ...
 
 hth,
 Robby
 

From: John Clements <clements@brinckerhoff.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 14:33:35 -0400

 On Tuesday, September 16, 2003, at 02:21  PM, Robby Findler wrote:
 
 > At Tue, 16 Sep 2003 13:58:06 -0400, John Clements wrote:
 >> When I get a message of the form "<a> broke <a>'s contract", I can't 
 >> tell
 >> whether this is an error caused by the negative side of a recursive 
 >> call
 >> by <a> to itself, or an error caused by the positive side of <a>'s 
 >> contract.
 >
 > I agree, it's not very clear, but the intention was that this:
 >
 >   <a>: <b> broke ...
 >
 > means that <b> failed and <a> "detected" the failure. So, in the
 > original contract, either <a> or <b> could be the positive or negative
 > side, but when the contract error was discovered, it was <b>'s fault.
 >
 > For example, with this contract:
 >
 >   (int -> bool)
 >
 > and <p> originally positive and <n> originally negative, if a char goes
 > in you'd see:
 >
 >   <p>: <n> broke ...
 >
 > and if a char comes out, you'd see
 >
 >   <n>: <p> broke ...
 >
 > hth,
 > Robby
 
 consider the following program, containing two different contract 
 violations:
 
 (require (lib "contract.ss"))
 
 (define/contract bad-recursive-call
    (number? . -> . number?)
    (lambda (x)
      (bad-recursive-call 'a)))
 
 (bad-recursive-call 13)
 
 (define/contract bad-return-value
    (number? . -> .  number?)
    (lambda (x)
      'a))
 
 (bad-return-value 3)
 
 here are the two error messages that result from a) the first 
 application and b) the second application:
 
 6.5: bad-recursive-call: 6.4 broke bad-recursive-call's contract: 
 expected type <number>, given: a
 
 15.1: 15.0: bad-return-value broke bad-return-value's contract: 
 expected type <number>, given: a
 
 
 If you quotient out the names of the procedures, the only difference 
 between the first and second error messages is the ordering of the 
 source position and the blamed party, even though these are very 
 different kinds of error.  This is the confusion I hope to alleviate.
 
 john
 
 
 

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 13:38:18 -0500

 The problem here is with define/contract. It doesn't really have a good
 name for the negative side of the contract. I see that it is
 spectularly failing in these cases, however :)
 
 I'll try to find something better.
 
 Still, if you reformulate these with provide/contract, I hope you'll
 find the messages much clearer.
 
 Robby

From: John Clements <clements@brinckerhoff.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 15:09:22 -0400

 On Tuesday, September 16, 2003, at 02:38  PM, Robby Findler wrote:
 
 > The problem here is with define/contract. It doesn't really have a good
 > name for the negative side of the contract. I see that it is
 > spectularly failing in these cases, however :)
 >
 > I'll try to find something better.
 
 Why not just something like "(negative side failure)" or "(positive 
 side failure)".  Are you concerned that this would confuse some users?
 
 > Still, if you reformulate these with provide/contract, I hope you'll
 > find the messages much clearer.
 
 Sorta but not really... Consider the following program:
 
 (module foo mzscheme
 
    (require (lib "contract.ss"))
 
    (provide/contract [a (procedure? number? . -> . number?)])
 
    (define (a loop-a num)
      (loop-a loop-a 'a)
      ;'a
      ))
 
 (require foo)
 
 (a a 13)
 
 Depending on which line in the body of 'a' is uncommented, you get:
 
 13.1: top-level: foo broke a's contract: expected type <number>, given: 
 a
 
 14.3: foo: top-level broke a's contract: expected type <number>, given: 
 a
 
 For me, neither of these error messages clearly indicates which side of 
 the contract is being violated.
 
 In fact, I'm having trouble seeing how the second error message makes 
 sense: The contract for 'a' says that it takes a procedure and a number 
 and returns a number.  How can you blame the top-level here?
 
 john
 

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 14:13:20 -0500

 At Tue, 16 Sep 2003 15:09:22 -0400, John Clements wrote:
 > For me, neither of these error messages clearly indicates which side
 > of the contract is being violated.
 
 What's not clear about "top-level broke" vs "foo broke"?
 
 > In fact, I'm having trouble seeing how the second error message makes 
 > sense: The contract for 'a' says that it takes a procedure and a number 
 > and returns a number.  How can you blame the top-level here?
 
 top-level passed the value "a" into a place (without a contract) where
 the value was abused. top-level shouldn't have agreed to only
 procedure? as the contract if that's what it really wanted to do.
 
 Robby

From: John Clements <clements@brinckerhoff.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 15:38:14 -0400

 On Tuesday, September 16, 2003, at 03:13  PM, Robby Findler wrote:
 
 > At Tue, 16 Sep 2003 15:09:22 -0400, John Clements wrote:
 >> For me, neither of these error messages clearly indicates which side
 >> of the contract is being violated.
 >
 > What's not clear about "top-level broke" vs "foo broke"?
 
 Well, maybe I just need practice in reading contract error messages.
 
 >> In fact, I'm having trouble seeing how the second error message makes
 >> sense: The contract for 'a' says that it takes a procedure and a 
 >> number
 >> and returns a number.  How can you blame the top-level here?
 >
 > top-level passed the value "a" into a place (without a contract) where
 > the value was abused. top-level shouldn't have agreed to only
 > procedure? as the contract if that's what it really wanted to do.
 
 If a procedure has contract (number? . -> . number?), it is promising 
 that given any number, it will produce a number, right?  So I would 
 expect a procedure with contract (procedure? . -> . number?) to be 
 promising that given any procedure, it will produce a number.  So I 
 would expect the procedure (lambda (f) (begin (f 21) 3)) to be blamed 
 for the contract failure when applied to a procedure that doesn't 
 accept numbers.
 
 Maybe what I'm really reaching for is that 'procedure?' should not be a 
 valid contract.
 
 
 john
 
   
 

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 14:57:32 -0500

 At Tue, 16 Sep 2003 15:38:14 -0400, John Clements wrote:
 > 
 > On Tuesday, September 16, 2003, at 03:13  PM, Robby Findler wrote:
 > 
 > > At Tue, 16 Sep 2003 15:09:22 -0400, John Clements wrote:
 > >> For me, neither of these error messages clearly indicates which side
 > >> of the contract is being violated.
 > >
 > > What's not clear about "top-level broke" vs "foo broke"?
 > 
 > Well, maybe I just need practice in reading contract error messages.
 > 
 > >> In fact, I'm having trouble seeing how the second error message makes
 > >> sense: The contract for 'a' says that it takes a procedure and a 
 > >> number
 > >> and returns a number.  How can you blame the top-level here?
 > >
 > > top-level passed the value "a" into a place (without a contract) where
 > > the value was abused. top-level shouldn't have agreed to only
 > > procedure? as the contract if that's what it really wanted to do.
 > 
 > If a procedure has contract (number? . -> . number?), it is promising 
 > that given any number, it will produce a number, right?  So I would 
 > expect a procedure with contract (procedure? . -> . number?) to be 
 > promising that given any procedure, it will produce a number.  So I 
 > would expect the procedure (lambda (f) (begin (f 21) 3)) to be blamed 
 > for the contract failure when applied to a procedure that doesn't 
 > accept numbers.
 >
 > Maybe what I'm really reaching for is that 'procedure?' should not be a 
 > valid contract.
 
 No, that's not it.
 
 You've almost got all the pieces up there, but (maybe?) you forget how
 contracts are attached to values -- they are little shields the get
 layered on the values and they float around. So, when the `a' got its
 contract, it was already "sealed" with the notion that if bad values
 flow into me, it's "x"'s fault. Then, when it goes back into itself,
 and gets applied to bad vlaues that "shield" kicks in and blames the
 original guy.
 
 Does that make more sense?
 
 Robby

From: John Clements <clements@brinckerhoff.org>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 16:32:34 -0400

 On Tuesday, September 16, 2003, at 03:57  PM, Robby Findler wrote:
 
 > At Tue, 16 Sep 2003 15:38:14 -0400, John Clements wrote:
 >>
 >> On Tuesday, September 16, 2003, at 03:13  PM, Robby Findler wrote:
 >>
 >>> At Tue, 16 Sep 2003 15:09:22 -0400, John Clements wrote:
 >>>> For me, neither of these error messages clearly indicates which side
 >>>> of the contract is being violated.
 >>>
 >>> What's not clear about "top-level broke" vs "foo broke"?
 >>
 >> Well, maybe I just need practice in reading contract error messages.
 >>
 >>>> In fact, I'm having trouble seeing how the second error message 
 >>>> makes
 >>>> sense: The contract for 'a' says that it takes a procedure and a
 >>>> number
 >>>> and returns a number.  How can you blame the top-level here?
 >>>
 >>> top-level passed the value "a" into a place (without a contract) 
 >>> where
 >>> the value was abused. top-level shouldn't have agreed to only
 >>> procedure? as the contract if that's what it really wanted to do.
 >>
 >> If a procedure has contract (number? . -> . number?), it is promising
 >> that given any number, it will produce a number, right?  So I would
 >> expect a procedure with contract (procedure? . -> . number?) to be
 >> promising that given any procedure, it will produce a number.  So I
 >> would expect the procedure (lambda (f) (begin (f 21) 3)) to be blamed
 >> for the contract failure when applied to a procedure that doesn't
 >> accept numbers.
 >>
 >> Maybe what I'm really reaching for is that 'procedure?' should not be 
 >> a
 >> valid contract.
 >
 > No, that's not it.
 >
 > You've almost got all the pieces up there, but (maybe?) you forget how
 > contracts are attached to values -- they are little shields the get
 > layered on the values and they float around. So, when the `a' got its
 > contract, it was already "sealed" with the notion that if bad values
 > flow into me, it's "x"'s fault. Then, when it goes back into itself,
 > and gets applied to bad vlaues that "shield" kicks in and blames the
 > original guy.
 >
 > Does that make more sense?
 
 yes.  Well, that and a discussion with Matthias :).
 
 In essence, I was under the impression that the contract (procedure? . 
 -> . number?) meant "If you give me a procedure, I'll give you a 
 number", when in fact it means "I'll only treat my argument as a 
 procedure, and you only treat my result as a number."
 
 john
 
Responsible-Changed-From-To: eli->robby
Responsible-Changed-By: robby
Responsible-Changed-When: Tue Sep 16 17:12:11 2003
Responsible-Changed-Why:
    rbf

From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/6456: better contract-broken error message?
Date: Tue, 16 Sep 2003 16:10:26 -0500

 At Tue, 16 Sep 2003 16:32:34 -0400, John Clements wrote:
 > 
 > On Tuesday, September 16, 2003, at 03:57  PM, Robby Findler wrote:
 > 
 > > At Tue, 16 Sep 2003 15:38:14 -0400, John Clements wrote:
 > >>
 > >> On Tuesday, September 16, 2003, at 03:13  PM, Robby Findler wrote:
 > >>
 > >>> At Tue, 16 Sep 2003 15:09:22 -0400, John Clements wrote:
 > >>>> For me, neither of these error messages clearly indicates which side
 > >>>> of the contract is being violated.
 > >>>
 > >>> What's not clear about "top-level broke" vs "foo broke"?
 > >>
 > >> Well, maybe I just need practice in reading contract error messages.
 > >>
 > >>>> In fact, I'm having trouble seeing how the second error message 
 > >>>> makes
 > >>>> sense: The contract for 'a' says that it takes a procedure and a
 > >>>> number
 > >>>> and returns a number.  How can you blame the top-level here?
 > >>>
 > >>> top-level passed the value "a" into a place (without a contract) 
 > >>> where
 > >>> the value was abused. top-level shouldn't have agreed to only
 > >>> procedure? as the contract if that's what it really wanted to do.
 > >>
 > >> If a procedure has contract (number? . -> . number?), it is promising
 > >> that given any number, it will produce a number, right?  So I would
 > >> expect a procedure with contract (procedure? . -> . number?) to be
 > >> promising that given any procedure, it will produce a number.  So I
 > >> would expect the procedure (lambda (f) (begin (f 21) 3)) to be blamed
 > >> for the contract failure when applied to a procedure that doesn't
 > >> accept numbers.
 > >>
 > >> Maybe what I'm really reaching for is that 'procedure?' should not be 
 > >> a
 > >> valid contract.
 > >
 > > No, that's not it.
 > >
 > > You've almost got all the pieces up there, but (maybe?) you forget how
 > > contracts are attached to values -- they are little shields the get
 > > layered on the values and they float around. So, when the `a' got its
 > > contract, it was already "sealed" with the notion that if bad values
 > > flow into me, it's "x"'s fault. Then, when it goes back into itself,
 > > and gets applied to bad vlaues that "shield" kicks in and blames the
 > > original guy.
 > >
 > > Does that make more sense?
 > 
 > yes.  Well, that and a discussion with Matthias :).
 
 :)
 
 > In essence, I was under the impression that the contract (procedure? . 
 > -> . number?) meant "If you give me a procedure, I'll give you a 
 > number", when in fact it means "I'll only treat my argument as a 
 > procedure, and you only treat my result as a number."
 
 Well, it does actually mean something close to that: "If you give me a
 procedure, I'll give you a number as long as I don't violate some other
 contract in the meantime", which seems to match your example more
 closely.
 
 Robby
State-Changed-From-To: open->closed
State-Changed-By: robby
State-Changed-When: Mon Jan  5 02:51:51 2004
State-Changed-Why:
    if you were using provide/contract, the recursive calls aren't checked.
    If you were using define/contract, probably you should switch
    to using provide/contract.
>Unformatted:

