From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Mar  4 16:03:47 2010
Received: from mail-yx0-f173.google.com (mail-yx0-f173.google.com [209.85.210.173])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o24L3iUl023931
	for <bugs@bugs.plt-scheme.org>; Thu, 4 Mar 2010 16:03:44 -0500
Message-Id: <201003042103.o24L3gpx023923@champlain.ccs.neu.edu>
Date: Thu, 4 Mar 2010 16:03:42 -0500
From: sstrickl@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Wrapping a method with a struct with prop:procedure changes arity errors

>Number:         10809
>Category:       mzscheme
>Synopsis:       Wrapping a method with a struct with prop:procedure changes arity errors
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Mar 04 16:04:01 -0500 2010
>Last-Modified:  Tue May 10 19:52:07 -0400 2011
>Originator:     Stevie Strickland
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.4.5-svn4mar2010
>Environment:
macosx "Darwin dublin.local 10.2.0 Darwin Kernel Version 10.2.0: Tue Nov  3 10:37:10 PST 2009; root:xnu-1486.2.11~1/RELEASE_I386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 137310568

Collections:
(("/Users/sstrickl/Library/PLT Scheme/4.2.4.5/collects" non-existent-path) ("/Users/sstrickl/plt/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "reader" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed!
 " "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
If we take a function that was compiled with the 'method-arity-error syntax property and apply it to the wrong number of arguments, we get an arity error that does not include the first (assumed to be the implicit this) argument.

If we take such a compiled function and wrap it in a struct that has an appropriate prop:procedure property, we get the "normal" arity error message instead of the method-adjusted one.
>How-To-Repeat:
#lang scheme

(define-syntax (method-arity stx)
  (syntax-case stx ()
    [(_ proc)
     (syntax-property #'proc 'method-arity-error #t)]))

(define f (method-arity (Î» (x) x)))

(with-handlers ([exn? (lambda (e) (printf "~a~n" (exn-message e)))])
  (f 3 4))

(define-struct foo (f)
  #:property prop:procedure 0)

(define g (make-foo f))

(with-handlers ([exn? (lambda (e) (printf "~a~n" (exn-message e)))])
  (g 3 4))
>Fix:
>Audit-Trail:
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: nobody@plt-scheme.org, bug-notification@plt-scheme.org,
        bugs <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/10809: Wrapping a method with a struct with prop:procedure changes arity errors
Date: Thu, 4 Mar 2010 18:27:47 -0500

 On Mar 4, 2010, at 4:04 PM, sstrickl@ccs.neu.edu wrote:
 > If we take a function that was compiled with the 'method-arity-error =
 syntax property and apply it to the wrong number of arguments, we get an =
 arity error that does not include the first (assumed to be the implicit =
 this) argument.
 >=20
 > If we take such a compiled function and wrap it in a struct that has =
 an appropriate prop:procedure property, we get the "normal" arity error =
 message instead of the method-adjusted one.
 
 Just as a clarification, I don't know if this has any relation to the =
 discussion we've had earlier about being able to add back the =
 method-arity-error behavior at runtime when applying arbitrary (instead =
 of syntactically apparent) contract values to methods in class/c and =
 object/c.  I do still need that, and so if the answer ends up being that =
 I need to do that here, also, I wouldn't mind having to do it.
 
 However, I thought this was different enough to be a separate issue.  =
 That is, should wrapping a value usable as a procedure in a struct like =
 this cause visible behaviors to change?
 
 Thanks,
 Stevie=

