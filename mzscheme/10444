From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Sep 11 00:19:37 2009
Received: from mail-yw0-f187.google.com (mail-yw0-f187.google.com [209.85.211.187])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n8B4JWvF019930
	for <bugs@bugs.plt-scheme.org>; Fri, 11 Sep 2009 00:19:32 -0400
Message-Id: <200909110419.n8B4JR83019922@champlain.ccs.neu.edu>
Date: Fri, 11 Sep 2009 00:19:27 -0400
From: gmarceau@gmail.com
To: bugs@plt-scheme.org
Subject: Various issues when running BSL program under scheme/sandbox (1 of 6, memory leak)

>Number:         10444
>Category:       mzscheme
>Synopsis:       Various issues when running BSL program under scheme/sandbox (1 of 6, memory leak)
>Class:          sw-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Sep 11 00:20:01 -0400 2009
>Closed-Date:    Fri May 13 02:24:37 -0400 2011
>Last-Modified:  Fri May 13 02:24:37 -0400 2011
>Originator:     Guillaume Marceau
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 3" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 193674632

Collections:
(("C:\\Documents and Settings\\Guillaume\\Application Data\\PLT Scheme\\4.2.1\\collects" non-existent-path) ("C:\\Program Files\\PLT\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Beginning Student") (#(#t constructor repeating-decimal #f #t none) #f ((lib "world.ss" "teachpack" "htdp"))))
>Description:
>How-To-Repeat:
#lang scheme
(require scheme/sandbox)

(define (sandbox-eval/get-output lang code)
  (parameterize ([sandbox-output 'string])
    (get-output (make-evaluator `(special ,lang)
                                code))))



;; [1] Memory leaks.

;; This code leaks memory:
(for ([i (in-range 10000)])
  (sandbox-eval/get-output 'beginner '(+ 5 6)))

;; This one doesn't:
(for ([i (in-range 10000)])
  (let ([c (make-custodian)])
    (parameterize ([current-custodian c])
      (sandbox-eval/get-output 'beginner '(+ 5 6)))
    (custodian-shutdown-all c)))
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: gmarceau@gmail.com, Matthew Flatt <mflatt@cs.utah.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/10444: Various issues when running BSL program under scheme/sandbox (1 of 6, memory leak)
Date: Fri, 11 Sep 2009 03:17:17 -0400

 I tried running this, and I saw a very small leak.  If you have
 something more noticeable inside drscheme, then it might be due to
 drscheme.
 
 As for the leak -- I tried various things, and it doesn't seem to be
 related to the sandbox in particular.
 
 * I've got a leak on a similar scale when I used just a 'scheme
   sandbox.
 
 * Switching it to 'scheme/base made it even smaller (at this point I
   got something like an extra 40 bytes every ~20 sandboxes).
 
 * I then changed it to just creating an empty namespace and doing a
   `dynamic-require' inside it -- and got a leak of roughly the same
   size.  (For both 'scheme and 'scheme/base.)  So it looks like there
   is something that goes wrong in there.
 
 My code is below, for reference.
 
   #lang scheme
   (require scheme/sandbox)
   (collect-garbage) (collect-garbage)
   (define first (current-memory-use))
   (define last  first)
   (define biggest 0)
   (for ([i (in-range 10000)])
     ;; (make-evaluator `scheme '(+ 5 6))
     (parameterize ([current-custodian (make-custodian)])
       (parameterize ([current-namespace (make-base-namespace)])
         (dynamic-require 'scheme #f))
       (custodian-shutdown-all (current-custodian)))
     (collect-garbage) (collect-garbage) (collect-garbage) (collect-garbage)
     (let ([m (current-memory-use)])
       (set! biggest (max (- m first) biggest))
       (when last (printf "~s ~s ~s ~s\n" i biggest (- m first) (- m last)))
       (set! last m)))
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

Responsible changed from "nobody" to "eli" by ryanc at Thu, 12 May 2011 17:47:35 -0400
Reason>>> sandbox -- or reassign to Matthew if you think this is a
racket problem


State changed from "open" to "closed" by eli at Fri, 13 May 2011 02:24:37 -0400
Reason>>> Filed a clearer bug report: PR11914.

