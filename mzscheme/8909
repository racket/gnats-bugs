From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Sep  3 13:28:16 2007
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.170])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l83HSG2K005066
	for <bugs@bugs.plt-scheme.org>; Mon, 3 Sep 2007 13:28:16 -0400
Message-Id: <200709031728.l83HSCxf005061@champlain.ccs.neu.edu>
Date: Mon, 3 Sep 2007 13:28:12 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: mzscheme -f

>Number:         8909
>Category:       mzscheme
>Synopsis:       mzscheme -f
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Sep 03 13:30:01 -0400 2007
>Closed-Date:    Thu May 15 15:26:31 -0400 2008
>Last-Modified:  Thu May 15 15:26:31 -0400 2008
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        370p2
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.22.1-27.fc7 #1 SMP Tue Jul 17 17:19:58 EDT 2007 x86_64 x86_64 x86_64 GNU/Linux" (i386-linux/3m) (get-display-depth) = 16
Docs Installed:
(("/home/eli/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 83883080

Collections:
(("/home/eli/.plt-scheme/370/collects" non-existent-path) ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "openssl" "sgl" "htdch" "slideshow" "graphics" "mztake" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "syntax-color" "help" "swindle" "config" "net" "hierlist" "trace" "mrlib" "algol60" "browser" "profj" "framework" "info-domain" "compiler" "errortrace" "eopl" "syntax" "string-constants" "html" "slatex" "stepper" "launcher" "htdp" "profjWizard" "lang" "setup" "plot" "teachpack" "xml" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "version" "texpict" "games" "tex2page" "web-server" "r5rs"))
Computer Language: (("Teaching Languages" "How to Design Programs" "Advanced Student") (#6(#t constructor repeating-decimal #t #t none) #f ()))
>Description:
The argument to -f is always expanded.  For example,

  mzscheme -f "~/x.scm"

should be the same as

  mzscheme -f "./~/x.scm"

(BTW: DrScheme also expands its argument, which is probably
      a different bug.)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@cs.uchicago.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 12:35:55 -0500

 I don't understand this bug or the comment about drscheme.
 
 What do you see? What do you expect?
 
 Thanks,
 Robby
 
 On 9/3/07, eli@barzilay.org <eli@barzilay.org> wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=8909
 >
 > Reported by Eli Barzilay for release: 370p2
 >
 > *** Description:
 > The argument to -f is always expanded.  For example,
 >
 >   mzscheme -f "~/x.scm"
 >
 > should be the same as
 >
 >   mzscheme -f "./~/x.scm"
 >
 > (BTW: DrScheme also expands its argument, which is probably
 >       a different bug.)
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux winooski.ccs.neu.edu 2.6.22.1-27.fc7 #1 SMP Tue Jul 17 17:19:58 EDT 2007 x86_64 x86_64 x86_64 GNU/Linux" (i386-linux/3m) (get-display-depth) = 16
 > Docs Installed:
 > (("/home/eli/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
 > Human Language: english
 > (current-memory-use) 83883080
 >
 > Collections:
 > (("/home/eli/.plt-scheme/370/collects" non-existent-path) ("/home/eli/plt/collects" "icons" "ffi" "mred" "dynext" "mzscheme" "make" "preprocessor" "openssl" "sgl" "htdch" "slideshow" "graphics" "mztake" "frtime" "wxme" "lazy" "mzlib" "macro-debugger" "syntax-color" "help" "swindle" "config" "net" "hierlist" "trace" "mrlib" "algol60" "browser" "profj" "framework" "info-domain" "compiler" "errortrace" "eopl" "syntax" "string-constants" "html" "slatex" "stepper" "launcher" "htdp" "profjWizard" "lang" "setup" "plot" "teachpack" "xml" "planet" "readline" "parser-tools" "embedded-gui" "drscheme" "defaults" "srfi" "afm" "version" "texpict" "games" "tex2page" "web-server" "r5rs"))
 > Computer Language: (("Teaching Languages" "How to Design Programs" "Advanced Student") (#6(#t constructor repeating-decimal #t #t none) #f ()))
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 13:41:59 -0400

 On Sep  3, Robby Findler wrote:
 > I don't understand this bug or the comment about drscheme.
 > 
 > What do you see? What do you expect?
 
 Try running these two commands in a terminal:
 
   echo "~/junk"
   echo ~/junk
 
 So, assuming that you have a "junk.scm" file in your home directory,
 running
 
   drscheme "~/junk.scm"
 
 should *not* open it.  Instead, it should open a "junk.scm" file in a
 directory called "~".
 
 (In other words, `expand-path' does not preserve the semantics of the
 path.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 12:53:45 -0500

 Are there other characters that have this problem besides "~"?
 
 Should there be a function in mzscheme that I should be calling to
 turn the string from the commandline into a suitable path?
 
 I don't see how to avoid expanding the ~, unless I'm supposed to avoid
 calling normalize path?
 
 > (normalize-path (build-path "~" "hi"))
 #<path:/Users/robby/hi>
 
 
 Robby
 
 On 9/3/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On Sep  3, Robby Findler wrote:
 > > I don't understand this bug or the comment about drscheme.
 > >
 > > What do you see? What do you expect?
 >
 > Try running these two commands in a terminal:
 >
 >   echo "~/junk"
 >   echo ~/junk
 >
 > So, assuming that you have a "junk.scm" file in your home directory,
 > running
 >
 >   drscheme "~/junk.scm"
 >
 > should *not* open it.  Instead, it should open a "junk.scm" file in a
 > directory called "~".
 >
 > (In other words, `expand-path' does not preserve the semantics of the
 > path.)
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 14:07:59 -0400

 On Sep  3, Robby Findler wrote:
 > Are there other characters that have this problem besides "~"?
 
 I don't think so.  But that shouldn't matter, since special-casing "~"
 at your level would be the wrong thing...  (Also, "~" is not special
 on Windows (which obviously has its own set of much more complex
 rules...).)
 
 
 > Should there be a function in mzscheme that I should be calling to
 > turn the string from the commandline into a suitable path?
 
 I don't know, but to have this behave correctly, no path expansion
 should be involved, which is why:
 
 > I don't see how to avoid expanding the ~, unless I'm supposed to
 > avoid calling normalize path?
 > 
 > > (normalize-path (build-path "~" "hi"))
 > #<path:/Users/robby/hi>
 
 `normalize-path' is probably a bad name.
 
 Maybe a correct solution for `normalize-path' is to add an argument
 that says whether you want expansion or not?  (And maybe make it *not*
 expand by default.)
 
 I'm not sure about that, tweaking these things is a subtle job...
 Maybe it's best to just change the name to force changing code?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 13:13:12 -0500

 I don't think it has anything to do with normalize path, actually.
 call-with-input-file does the expansion, for example. Do you know how
 to pass an argument to it that doesn't expand?
 
 Robby
 
 On 9/3/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On Sep  3, Robby Findler wrote:
 > > Are there other characters that have this problem besides "~"?
 >
 > I don't think so.  But that shouldn't matter, since special-casing "~"
 > at your level would be the wrong thing...  (Also, "~" is not special
 > on Windows (which obviously has its own set of much more complex
 > rules...).)
 >
 >
 > > Should there be a function in mzscheme that I should be calling to
 > > turn the string from the commandline into a suitable path?
 >
 > I don't know, but to have this behave correctly, no path expansion
 > should be involved, which is why:
 >
 > > I don't see how to avoid expanding the ~, unless I'm supposed to
 > > avoid calling normalize path?
 > >
 > > > (normalize-path (build-path "~" "hi"))
 > > #<path:/Users/robby/hi>
 >
 > `normalize-path' is probably a bad name.
 >
 > Maybe a correct solution for `normalize-path' is to add an argument
 > that says whether you want expansion or not?  (And maybe make it *not*
 > expand by default.)
 >
 > I'm not sure about that, tweaking these things is a subtle job...
 > Maybe it's best to just change the name to force changing code?
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 13:22:35 -0500

 On 9/3/07, Eli Barzilay <eli@barzilay.org> wrote:
 > On Sep  3, Robby Findler wrote:
 > > I don't think it has anything to do with normalize path, actually.
 > > call-with-input-file does the expansion, for example.
 >
 > Oh, right.  So all paths are considered expanded by default...
 
 I think the proper English way to say that is "all paths are
 considered unexpanded" ie, they all require expansion.
 
 Robby
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 14:20:34 -0400

 On Sep  3, Robby Findler wrote:
 > I don't think it has anything to do with normalize path, actually.
 > call-with-input-file does the expansion, for example.
 
 Oh, right.  So all paths are considered expanded by default...
 
 
 > Do you know how to pass an argument to it that doesn't expand?
 
 Well, the usual unix solution is to prepend a "./" prefix...  But
 that's not a solution like I said below.
 
 I don't know what would be a good solution now, but perhaps Matthew
 has some plan...?
 
 
 
 > On 9/3/07, Eli Barzilay <eli@barzilay.org> wrote:
 > > On Sep  3, Robby Findler wrote:
 > > > Are there other characters that have this problem besides "~"?
 > >
 > > I don't think so.  But that shouldn't matter, since special-casing "~"
 > > at your level would be the wrong thing...  (Also, "~" is not special
 > > on Windows (which obviously has its own set of much more complex
 > > rules...).)
 > >
 > >
 > > > Should there be a function in mzscheme that I should be calling to
 > > > turn the string from the commandline into a suitable path?
 > >
 > > I don't know, but to have this behave correctly, no path expansion
 > > should be involved, which is why:
 > >
 > > > I don't see how to avoid expanding the ~, unless I'm supposed to
 > > > avoid calling normalize path?
 > > >
 > > > > (normalize-path (build-path "~" "hi"))
 > > > #<path:/Users/robby/hi>
 > >
 > > `normalize-path' is probably a bad name.
 > >
 > > Maybe a correct solution for `normalize-path' is to add an argument
 > > that says whether you want expansion or not?  (And maybe make it *not*
 > > expand by default.)
 > >
 > > I'm not sure about that, tweaking these things is a subtle job...
 > > Maybe it's best to just change the name to force changing code?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "Robby Findler" <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 12:53:47 -0600

 I'll have to think about this one, since I don't see an easy solution
 right away.
 
 (The underlying problem is that I misunderstood "~" originally.)
 
 Matthew
 
 At Mon, 3 Sep 2007 13:41:59 -0400, Eli Barzilay wrote:
 > On Sep  3, Robby Findler wrote:
 > > I don't understand this bug or the comment about drscheme.
 > > 
 > > What do you see? What do you expect?
 > 
 > Try running these two commands in a terminal:
 > 
 >   echo "~/junk"
 >   echo ~/junk
 > 
 > So, assuming that you have a "junk.scm" file in your home directory,
 > running
 > 
 >   drscheme "~/junk.scm"
 > 
 > should *not* open it.  Instead, it should open a "junk.scm" file in a
 > directory called "~".
 > 
 > (In other words, `expand-path' does not preserve the semantics of the
 > path.)
 > 
 > -- 
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                   http://www.barzilay.org/                 Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "Robby Findler" <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 15:08:13 -0400

 On Sep  3, Matthew Flatt wrote:
 > I'll have to think about this one, since I don't see an easy
 > solution right away.
 > 
 > (The underlying problem is that I misunderstood "~" originally.)
 
 At least in my code, I kept calling `expand-path' when I should have
 (which is why I didn't even remember that primitives do that).  So
 perhaps it's best to just make things behave properly (no magic
 expansion anywhere, "~foo/bar" is not a complete path, etc) as part of
 other 4.0 incompatible changes?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "Robby Findler" <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 15:31:18 -0600

 At Mon, 3 Sep 2007 15:08:13 -0400, Eli Barzilay wrote:
 > On Sep  3, Matthew Flatt wrote:
 > > I'll have to think about this one, since I don't see an easy
 > > solution right away.
 > > 
 > > (The underlying problem is that I misunderstood "~" originally.)
 > 
 > At least in my code, I kept calling `expand-path' when I should have
 > (which is why I didn't even remember that primitives do that).  So
 > perhaps it's best to just make things behave properly (no magic
 > expansion anywhere, "~foo/bar" is not a complete path, etc) as part of
 > other 4.0 incompatible changes?
 
 Yes, that's probably what we'll have to do.
 
 Matthew
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 16:39:33 -0500

 That sounds like the Right Thing and consistent with some experience
 I've had somewhere (can't recall where tho). We could have some
 function that shell-like expansion, but I guess that expansion differs
 from shell to shell anyways, so it would be an approximation (altho I
 guess that people will want "~" expansion in some cases)
 
 On 9/3/07, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > At Mon, 3 Sep 2007 15:08:13 -0400, Eli Barzilay wrote:
 > > On Sep  3, Matthew Flatt wrote:
 > > > I'll have to think about this one, since I don't see an easy
 > > > solution right away.
 > > >
 > > > (The underlying problem is that I misunderstood "~" originally.)
 > >
 > > At least in my code, I kept calling `expand-path' when I should have
 > > (which is why I didn't even remember that primitives do that).  So
 > > perhaps it's best to just make things behave properly (no magic
 > > expansion anywhere, "~foo/bar" is not a complete path, etc) as part of
 > > other 4.0 incompatible changes?
 >
 > Yes, that's probably what we'll have to do.
 >
 > Matthew
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/8909: mzscheme -f
Date: Mon, 3 Sep 2007 19:07:25 -0400

 On Sep  3, Robby Findler wrote:
 > That sounds like the Right Thing and consistent with some experience
 > I've had somewhere (can't recall where tho). We could have some
 > function that shell-like expansion,
 
 That's what `expand-path' is supposed to do...  (And it should be
 clear if any other path-related procedure expands its path.)
 
 
 > but I guess that expansion differs from shell to shell anyways, so
 > it would be an approximation (altho I guess that people will want
 > "~" expansion in some cases)
 
 Expanding "~" paths is more basic than globbing.  (And for globbing
 there are many different versions in different shells.  I think that
 zsh's is the most complete.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!


State changed from "open" to "closed" by mflatt at Thu, 15 May 2008 15:26:31 -0400
Reason>>> fixed in v4

