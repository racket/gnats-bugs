From robby@cs.rice.edu  Thu Apr 27 13:18:59 2000
Received: from localhost (sun.cs.rice.edu [128.42.1.42])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id NAA01725
	for <plt-gnats>; Thu, 27 Apr 2000 13:18:58 -0500 (CDT)
Message-Id: <200004271818.NAA01725@cs.rice.edu>
Date: Thu, 27 Apr 2000 13:18:58 -0500 (CDT)
From: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: mred seg faults when executing program

>Number:         1434
>Category:       mzscheme
>Synopsis:       random-seed crashes
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Thu Apr 27 18:30:02 GMT 2000
>Last-Modified:  Fri May 12 14:32:20 CDT 2000
>Originator:     Robert Bruce Finder
>Organization:
titan
>Release:        102/11
>Environment:
unix (sparc-solaris)
Tools: ("CVS" "analysis" "debug" "syncheck" "unit-bundle" "project-manager" "typeset")
Docs Installed:
("index.html" "docindex.html" "doctable.html" "tools" "m3" "mzc" "teachpack" "mrspidey" "r5rs" "framework" "old" "help" "misclib" "drfaq" "drscheme" "icons" ".htaccess" "insidemz" "logo.gif" ".htaccess~" "match" "mred" "mzscheme" "old-logo.gif")
Collections:
(("/home/scheme/plt/collects" ("CVS" "browser" "afm" "compiler" "countdwn" "drscheme" "graphics" "guibuilder" "stepper" "hierlist" "icons" "make" "mrdemo" "mrspidey" "mzlib" "drjava" "mred" "games" "mzscheme" "net" "quasiquote" "help" "texpict" "zodiac" "userspce" "hierarchy" "dynext" "readline" "launcher" "drscheme-jr" "errortrace" "doc" "mysterx" "framework" "slatex" "slibinit" "srpersist" "xml" "tests" "htdp" "typeset" "setup" "defaults")) ("/home/robby/robby/collects" ("CVS" "account" "mahjongg" "pente" "pop-pop" "test-image-map" "xmahjongg" "checkers" "paper-utils" "doonesbury" "friendly" "set-fonts" "backgammon" "icfp-pc-99" "solutions" "magic")) ("/home/robby/robby/proj/talks" ("CVS" "lunch1" "unit-patterns" "icfp98" "unit-proposal" "lc" "util" "bundle-proposal" "Jcontracts.ppt")) ("/home/robby/robby/proj/papers" ("CVS" "c+u.save" "dr" "dr-column" "geometric-control" "graphical-units" "senior-thesis" "type-safety" "typed-unit-calculus" "unit" "unit-semantics" "drafthead.sty" "signature-constraints" "dr-journal" "java-blame" "sba-procedures" "include" "inputs")) ("/home/robby/mflatt/collects" ("CVS" "sirmail")))
>Description:
MrEd consistently segfaults when running the program below.
steps:

1) start up drscheme like this "drscheme tmp.ss" where tmp.ss
contains the text below.
2) click execute
3) segfault

This does not happen with mzscheme or mred, the program must be
running in drscheme. This is on sun.
>How-To-Repeat:
(random-seed 1000)

(require-library "functio.ss")

;; peval : clause sym bool -> exp
;; partial evaluation
;; forget about nice recursion, let's go fast and
;; test all possibilities at once...
(define (peval clause sym tv)
  (let ((l (length clause)))
    (cond
      [(= l 1)
       (let ((p (first clause)))
         (if (symbol? p)
             (if (eq? p sym) tv clause)
             (if (eq? (first p) sym) (not tv) clause)))]
      [(= l 2)
       (let ((p (first clause)))
         (if (symbol? p)
             (if (eq? p sym)
                 (if tv #t (rest clause))
                 (let ((q (second clause)))
                   (if (symbol? q)
                       (if (eq? q sym)
                           (if tv #t (list p))
                           clause)
                       (if (eq? (first q) sym)
                           (if tv (list p) #t)
                           clause))))
             (if (eq? (first p) sym)
                 (if tv (rest clause) #t)
                 (let ((q (second clause)))
                   (if (symbol? q)
                       (if (eq? q sym)
                           (if tv #t (list p))
                           clause)
                       (if (eq? (first q) sym)
                           (if tv (list p) #t)
                           clause))))))]
      [(= l 3)
       (let ((p (first clause)))
         (if (symbol? p)
             (if (eq? p sym)
                 (if tv #t (rest clause))
                 (let ((q (second clause)))
                   (if (symbol? q)
                       (if (eq? q sym)
                           (if tv #t (list p (third clause)))
                           (let ((r (third clause)))
                             (if (symbol? r)
                                 (if (eq? r sym)
                                     (if tv #t (list p q))
                                     clause)
                                 (if (eq? (first r) sym)
                                     (if tv (list p q) #t)
                                     clause))))
                       (if (eq? (first q) sym)
                           (if tv (list p (third clause)) #t)
                           (let ((r (third clause)))
                             (if (symbol? r)
                                 (if (eq? r sym)
                                     (if tv #t (list p q))
                                     clause)
                                 (if (eq? (first r) sym)
                                     (if tv (list p q) #t)
                                     clause)))))))
             (if (eq? (first p) sym)
                 (if tv (rest clause) #t)
                 (let ((q (second clause)))
                   (if (symbol? q)
                       (if (eq? q sym)
                           (if tv #t (list p (third clause)))
                           (let ((r (third clause)))
                             (if (symbol? r)
                                 (if (eq? r sym)
                                     (if tv #t (list p q))
                                     clause)
                                 (if (eq? (first r) sym)
                                     (if tv (list p q) #t)
                                     clause))))
                       (if (eq? (first q) sym)
                           (if tv (list p (third clause)) #t)
                           (let ((r (third clause)))
                             (if (symbol? r)
                                 (if (eq? r sym)
                                     (if tv #t (list p q))
                                     clause)
                                 (if (eq? (first r) sym)
                                     (if tv (list p q) #t)
                                     clause)))))))))]
      [else (error 'no-match "~s ~s ~s" clause sym tv)])))

;; map-peval-with-c: clause sym bool cont -> exp | bool
;; maps peval to each clause in turn
(define (map-peval-with-c form sym tv k)
  (if (empty? form)
      ;; all clauses have been satisfied, so formula is SAT,
      ;; we return empty to sat, and sat will call it's continuation
      ;; end of story for this formula
      empty
      ;; we have a clause, let's do the partial evaluation
      (let ((new-clause1 (peval (first form) sym tv)))
        (if (boolean? new-clause1)
            (if new-clause1
                ;; clause1 is satisfied, now look at other clauses
                (map-peval-with-c (rest form) sym tv k)
                ;; clause1 is unsat, so the whole formula is unsat
                ;; so we jump back to sat to try another truth assignment
                (k #f))
            ;; general case, we might have reduced clause1, let's
            ;; reduce the other ones.
            (cons new-clause1 (map-peval-with-c (rest form) sym tv k))))))

;; find-units: (listof clause) (listof (list sym bool)) -> (listof (list sym bool))
;; given a list of unit clauses, computes the list of propositions
;; and the list of truth assignments
(define (find-units unit-clauses acc)
  (cond
    [(empty? unit-clauses) acc]
    [else (let ((clause (first (first unit-clauses))))
            (find-units (rest unit-clauses)
                        (if (symbol? clause)
                            (cons (list clause #t) acc)
                            (cons (list (first clause) #f) acc))))]))

;; sat-dpp : formula (listof sym) (listof sym bool) cont -> bool
;; checks for satifiability of exp using Davis-Putnam
(define (sat-dpp form vars units k)
  (set! sat-calls (+ sat-calls 1))
  (if (empty? units)
      (let ((unit-clauses (filter (lambda (clause) (= (length clause) 1)) form)))
        (if (empty? unit-clauses)
            ;; no unit clauses, go for the general case
            (let ((p (first vars)))
              (let ((new-form (let/cc c (map-peval-with-c form p #f c))))
                (cond
                  ;; formula is SAT, jump back to main
                  [(empty? new-form) (k #t)]
                  ;; formula is UNSAT, try another truth assignment
                  [(boolean? new-form) #f]
                  ;; don't know -> do another partial evaluation
                  [else (sat-dpp new-form (rest vars) empty k)]))
              ;; same thing for other truth value.
              (let ((new-form (let/cc c (map-peval-with-c form p #t c))))
                (cond
                  [(empty? new-form) (k #t)]
                  [(boolean? new-form) #f]
                  [else (sat-dpp new-form (rest vars) empty k)])))
            ;; formula contains some unit clauses -> add them to unit, and recur
            (let ((new-units (find-units unit-clauses empty)))
              (sat-dpp form vars new-units k))))
      ;; satisfy unit clauses first
      (let ((new-form (let/cc c (map-peval-with-c form (first (first units)) (second (first units)) c))))
        (cond
          [(empty? new-form) (k #t)]
          [(boolean? new-form) #f]
          [else (sat-dpp new-form
                     (let ((p (first (first units)))) ;; remove the unit clause variable from list of vars
                       (filter (lambda (v) (not (eq? p v))) vars))
                     (rest units) k)]))))

;; sat-rand : formula (listof sym) cont -> bool
;; checks for satifiability of exp, using random choices
(define (sat-rand form vars k)
  (set! sat-calls (+ sat-calls 1))
  (let ((p (first vars)) ;; the prop is not chosen randomly, but the formula was generated randomly
        (t (zero? (random 2)))) ;; random truth assignment
    (let ((new-form (let/cc c (map-peval-with-c form p t c))))
      (cond
        ;; formula is SAT, jump back to main
        [(empty? new-form) (k #t)]
        ;; formula is UNSAT, try another truth assignment
        [(boolean? new-form) #f]
        ;; don't know -> do another partial evaluation
        [else (sat-rand new-form (rest vars) k)]))
    ;; same thing for other truth value.
    (let ((new-form (let/cc c (map-peval-with-c form p (not t) c))))
      (cond
        [(empty? new-form) (k #t)]
        [(boolean? new-form) #f]
        [else (sat-rand new-form (rest vars) k)]))))

;; sat-horn: formula (listof sym) cont -> bool
;; checks for satifiability of exp, using Hornm heuristic
;;(define (sat-horn form vars k)
  




;; gen-vars : num -> (listof (list sym num))
;; generates N random symbols and a count for each
(define (gen-vars N)
  (if (zero? N)
      empty
      (cons (list (gensym) 0) (gen-vars (sub1 N)))))

;; gen-clauses : num num (listof (list syn num)) -> exp
;; generates a 3-sat formula with L clauses
(define (gen-clauses L N vars)
  (if (zero? L)
      empty
      (cons (gen-clause N vars) (gen-clauses (sub1 L) N vars))))

;; gen-clause : num (listof (list sym num)) -> exp
;; generates a 3-sat clause and updates var counts
(define (gen-clause N vars)
  (let ((n1 (random N))
        (n2 (random N))
        (n3 (random N)))
    (if (or (= n1 n2) (= n2 n3) (= n1 n3))
        (gen-clause N vars)
        (letrec ((v1 (search-var vars n1))
                 (v2 (search-var vars n2))
                 (v3 (search-var vars n3)))
          (set-cdr! v1 (list (add1 (second v1))))
          (set-cdr! v2 (list (add1 (second v2))))
          (set-cdr! v3 (list (add1 (second v3))))
          (list (if (zero? (random 2))
                    (first v1)
                    (list (first v1)))
                (if (zero? (random 2))
                    (first v2)
                    (list (first v2)))
                (if (zero? (random 2))
                    (first v3)
                    (list (first v3))))))))
  
;; search-var : (listof (list sym num)) num -> (list sym num)
;; searches for n'th var in list
(define (search-var vars n)
  (if (zero? n)
      (first vars)
      (search-var (rest vars) (sub1 n))))

(define sat-calls 0)
(define sat-proba 0)

;; loop-stat
;; loops m times, gathering statistics...
(define (loop-stat L N m)
  (if (> m 0)
      (letrec ((vars (gen-vars N))
               (formula (gen-clauses L N vars))
               (used-vars (filter (lambda (p) (not (zero? (second p)))) vars)))
        (if (let/cc k (sat-rand formula (map first used-vars) k))
            ;;(let/cc k (sat-dpp formula (map first (quicksort used-vars
            ;;                                                 (lambda (p1 p2) (> (second p1) (second p2)))))
            ;;                   empty k))
            (set! sat-proba (+ sat-proba 1)))
        (loop-stat L N (- m 1)))))

;; loop
;; loops through different values of L for a given N
(define (loop N)
  (letrec ((loop-l (lambda (L N)
                     (if (and (>= L (* 3 N)) (<= L (* 6 N)))
                         (begin
                           (set! sat-calls 0)
                           (set! sat-proba 0)
                           (loop-stat L N 10)
                           (printf "N: ~s L: ~s calls: ~s proba: ~s~n" N L sat-calls sat-proba)
                           (loop-l (+ L (/ N 5)) N))))))
    (loop-l (* 3 N) N)))

;; main
(define (main)
  (loop 20))
>Fix:
>Audit-Trail:

From: robby <robby@cs.rice.edu>
To: plt-gnats@cs.rice.edu, steck@cs.rice.edu
Cc: mflatt@cs.rice.edu
Subject: Re: all/1434: mred seg faults when executing program
Date: Thu, 27 Apr 2000 13:53:09 -0500

 Note that I should have simplified this. Evaluating:
 
    (random-seed 1000)
 
 is enough to crash mz.
 
 Robby

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Thu Apr 27 14:38:37 2000
Responsible-Changed-Why:

State-Changed-From-To: open-analyzed
State-Changed-By: mflatt
State-Changed-When: Thu Apr 27 14:38:53 2000
State-Changed-Why:
Fixed for the next release.


From: Matthew Flatt <mflatt@cs.utah.edu>
To: robby <robby@cs.rice.edu>
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu
Subject: Re: all/1434: mred seg faults when executing program
Date: Thu, 27 Apr 2000 13:38:18 -0600 (MDT)

 Quoting robby:
 > Note that I should have simplified this. Evaluating:
 > 
 >    (random-seed 1000)
 > 
 > is enough to crash mz.
 
 Thanks. (Guess I need to change the test suite to ensure that
 `random-seed' returns void...)
 
 The problem was that I converted a bunch of
 
    return scheme_void;
 
 to
 
    return NULL; /* because evaluation never gets here */
 
 The one in `random-seed' shouldn't have been converted!
 
 Matthew

State-Changed-From-To: analyzed-closed
State-Changed-By: mflatt
State-Changed-When: Fri May 12 14:32:18 2000
State-Changed-Why:

 
>Unformatted:
