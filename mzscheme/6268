From neil@neilvandyke.org  Wed May 14 16:51:06 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id QAA15331
	for <bugs>; Wed, 14 May 2003 16:51:05 -0400
Message-Id: <200305142051.QAA15331@champlain.ccs.neu.edu>
Date: Wed, 14 May 2003 16:51:05 -0400
From: "Neil W. Van Dyke" <neil@neilvandyke.org>
Reply-To:
To: bugs@plt-scheme.org
Subject: with-regexp-match and with-regexp-match-positions

>Number:         6268
>Category:       mzscheme
>Synopsis:       with-regexp-match and with-regexp-match-positions
>Confidential:   no
>Severity:       non-critical
>Priority:       low
>Responsible:    mflatt
>State:          open
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Wed May 14 16:55:00 EDT 2003
>Closed-Date:    
>Last-Modified:  Wed May 21 14:26:59 EDT 2003
>Originator:     Neil W. Van Dyke
>Release:        204-cvs28apr2003
>Organization:
titan
>Environment:
unix "Linux winona 2.2.20 #1 Wed May 29 05:19:18 EDT 2002 i686 unknown unknown GNU/Linux" (i386-linux) (get-display-depth) = 16
Docs Installed:
("advanced" "beginning-abbr" "CVS" "beginning" "drscheme" "framework" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "tex2page" "tools" "tour" "help")
Collections: 

 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#f write mixed-fraction-e #f #t debug))
>Description:
One enhancement to the regexp support that I'd use all the time
would be a syntactic convenience for executing a regexp and
binding the submatches to variables, with an "else" clause
(or error) if the match failed.

Example definitions of "with-regexp-match" and
"with-regexp-match-positions" are attached below.

An additional enhancement, which these example implementations
don't offer, would be to accept the regexp in string form and
perform the regexp compilation only once.

Any chance of something like this being added to the "mzscheme"
language, or put in "etc.ss" or elsewhere in the official
distribution?

>How-To-Repeat:
;; Definitions:

(define-syntax with-regexp-match 
  (syntax-rules (else)
    ((_ rmp matched)
     (with-regexp-match
         rmp matched
         (else (error 'with-regexp-match "regexp match failed"))))
    ((_ (rmp-args ...) ((vars ...) matched-exps ...) (else else-exps ...))
     (let ((match (regexp-match rmp-args ...)))
       (if match
           (apply (lambda (vars ...) matched-exps ...) match)
           (begin else-exps ...))))))

(define-syntax with-regexp-match-positions 
  (syntax-rules (else)
    ((_ rmp matched)
     (with-regexp-match-positions
         rmp matched
         (else (error 'with-regexp-match-positions "regexp match failed"))))
    ((_ (rmp-args ...) ((vars ...) matched-exps ...) (else else-exps ...))
     (let ((match (regexp-match-positions rmp-args ...)))
       (if match
           (apply (lambda (vars ...) matched-exps ...) match)
           (begin else-exps ...))))))

;; An example use:

(define rx (regexp "^([a-z])([0-9])([a-z])$"))

(define str "a2b")

(with-regexp-match (rx str)
  ((whole alpha bravo charlie)
   (newline)
   (printf "Whole:   ~S\n" whole)
   (printf "Alpha:   ~S\n" alpha)
   (printf "Bravo:   ~S\n" bravo)
   (printf "Charlie: ~S\n" charlie)
   (newline)))

(with-regexp-match-positions (rx str)
  ((whole alpha bravo charlie)
   (newline)
   (printf "Whole:   ~S\n" whole)
   (printf "Alpha:   ~S\n" alpha)
   (printf "Bravo:   ~S\n" bravo)
   (printf "Charlie: ~S\n" charlie)
   (newline))
  (else (newline)
        (display "Nope!")
        (newline)))

>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Wed May 21 14:26:59 2003
Responsible-Changed-Why:
    mz, I guess
>Unformatted:

