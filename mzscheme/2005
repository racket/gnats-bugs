From nobody@cs.rice.edu  Sat Aug  4 04:18:28 2001
Return-Path: <nobody@cs.rice.edu>
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (Postfix) with ESMTP id 51AC0180B
	for <plt-gnats@cs.rice.edu>; Sat,  4 Aug 2001 04:18:28 -0500 (CDT)
Message-Id: <200108040918.EAA12949@web.cs.rice.edu>
Date: Sat, 4 Aug 2001 04:18:27 -0500 (CDT)
From: eli@cs.cornell.edu
Reply-To:
To: plt-gnats@cs.rice.edu
Subject: Documentation request 

>Number:         2005
>Category:       mzscheme
>Synopsis:       Documentation request
>Confidential:   no
>Severity:       non-critical
>Priority:       low
>Responsible:    mflatt
>State:          closed
>Class:          doc-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sat Aug  4 09:30:02 GMT 2001
>Closed-Date:    Thu Jan 10 16:15:58 EST 2002
>Last-Modified:  Thu Jan 10 16:15:58 EST 2002
>Originator:     Eli Barzilay
>Release:        199.19
>Organization:
titan
>Environment:
unknown
>Description:
[This is not a bug, but a feature request...]
Custodians were a puzzle for me for a long time, understanding what they
do was not a problem but I never made any connection with some case where
they would actually be useful.  What finally made it mke sense is looking
at the web server code: if the documentation for them would just give this
as simple case where they should be used, then the whole story would be
much clearer...
A related thing is will executors -- except that here I still don't see
any useful usage (besides the obvious function call before a value is
collected, but they have much more they can do).  I guess there is some
example which will make the purpose of having them clearer.

>How-To-Repeat:

>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: eli@cs.cornell.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2005: Documentation request 
Date: Sat, 4 Aug 2001 08:18:57 -0600 (MDT)

 Quoting eli@cs.cornell.edu:
 > Custodians were a puzzle for me for a long time, understanding what they
 > do was not a problem but I never made any connection with some case where
 > they would actually be useful.  What finally made it mke sense is looking
 > at the web server code: if the documentation for them would just give this
 > as simple case where they should be used, then the whole story would be
 > much clearer...
 
 Added.
 
 > A related thing is will executors -- except that here I still don't see
 > any useful usage (besides the obvious function call before a value is
 > collected, but they have much more they can do).  I guess there is some
 > example which will make the purpose of having them clearer.
 
 I don't think I've ever used them for anything except debugging
 (checking that certain values really are collected).
 
 One possible use is closing a port when the port becomes otherwise
 collectable. (Some Schemes implement that semantics, I think.) But I've
 never found a program where reclaiming open ports via GC was good
 enough.
 
 Matthew
 

From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/2005: Documentation request 
Date: Sat, 4 Aug 2001 17:12:36 -0400

 On Aug  4, Matthew Flatt wrote:
 > I don't think I've ever used them for anything except debugging
 > (checking that certain values really are collected).
 > 
 > One possible use is closing a port when the port becomes otherwise
 > collectable. (Some Schemes implement that semantics, I think.) But
 > I've never found a program where reclaiming open ports via GC was
 > good enough.
 
 So maybe a quick example will make it clearer, even if useless?  I
 suspect that other people have my problem of knowing about simple
 finalizers, and puzzle of the purpose of a will executor object that
 will handle them...  I can't even figure out if the excutor functions
 are called automatically or should be invoked manually...
 
 
 On Aug  4, Matthew Flatt wrote:
 > Quoting eli@cs.cornell.edu:
 > > In startup.ss, the regexp that is supposed to identify valid strings for
 > > module paths (line 2276 in the version I got from CVS) has the unintended
 > > restriction of forcing more than one character.  A better regexp would
 > > be "^[-a-zA-Z0-9_. ]+(/[-a-zA-Z0-9_. ]+)*$".
 > 
 > Thanks! (Minor tweak: I added a + after the / to allow multiple
 > slashes, which will be collapsed into one.)
 
 BTW, why the restriction on relative names only?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

From: "Paul Steckler" <steck@ccs.neu.edu>
To: "'Matthew Flatt'" <mflatt@cs.utah.edu>, <eli@cs.cornell.edu>
Cc: <plt-gnats@cs.rice.edu>
Subject: Re: all/2005: Documentation request 
Date: Mon, 6 Aug 2001 10:38:44 -0400

 > A related thing is will executors -- except that here I still don't
 see
  > any useful usage (besides the obvious function call before a value is
  > collected, but they have much more they can do).  I guess there is
 some
  > example which will make the purpose of having them clearer.
 
 MysterX uses will executors -- actually finalizers, which I think 
 is just the C implementation of them -- to manage reference counts
 and collect resources when COM objects are gc'd.  It's done in directly 
 in C, but could have been done in Scheme.
 
 -- Paul 
 

From: Eli Barzilay <eli@barzilay.org>
To: "Paul Steckler" <steck@ccs.neu.edu>
Cc: "'Matthew Flatt'" <mflatt@cs.utah.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/2005: Documentation request 
Date: Mon, 6 Aug 2001 14:59:21 -0400

 On Aug  6, Paul Steckler wrote:
 > MysterX uses will executors -- actually finalizers, which I think is
 > just the C implementation of them -- to manage reference counts and
 > collect resources when COM objects are gc'd.  It's done in directly
 > in C, but could have been done in Scheme.
 
 So, the problem is that finalizers are easy to understand - the simple
 operation of associating a function with an object, but will executors
 have more stuff which is where things are not clear: why is there a
 need for a will-executor object?  Are registered functions called
 automatically or manually?  If manually, then this is farther away
 from finalizers, and if automatically, then why is there a
 will-execute function?  The only way I can see now to answer these
 questions is to just try it, which is why I think there is a gap in
 the documentation...
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "Paul Steckler" <steck@ccs.neu.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/2005: Documentation request 
Date: Tue, 7 Aug 2001 06:59:03 -0600 (MDT)

 Quoting Eli Barzilay:
 > So, the problem is that finalizers are easy to understand - the simple
 > operation of associating a function with an object, but will executors
 > have more stuff which is where things are not clear: why is there a
 > need for a will-executor object?
 
 Ah - now I understand. I'll work on an explanation.
 
 Matthew

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Aug 21 16:52:01 2001
Responsible-Changed-Why:

 
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Thu Jan 10 16:15:58 2002
State-Changed-Why:
    docs improved
>Unformatted:

