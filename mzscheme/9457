From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jun  4 22:55:51 2008
Received: from fk-out-0910.google.com (fk-out-0910.google.com [209.85.128.191])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m552thlf017706
	for <bugs@bugs.plt-scheme.org>; Wed, 4 Jun 2008 22:55:43 -0400
Message-Id: <200806050255.m552tdVW017700@champlain.ccs.neu.edu>
Date: Wed, 4 Jun 2008 22:55:39 -0400
From: mark.engelberg@gmail.com
To: bugs@plt-scheme.org
Subject: range

>Number:         9457
>Category:       mzscheme
>Synopsis:       range
>Class:          change-request
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jun 04 22:56:01 -0400 2008
>Closed-Date:    Tue May 10 20:11:16 -0400 2011
>Last-Modified:  Tue May 10 20:11:16 -0400 2011
>Originator:     Mark Engelberg
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.26-svn3jun2008
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 125669736

Collections:
(("C:\\Documents and Settings\\Mark\\Application Data\\PLT Scheme\\3.99.0.26\\collects" non-existent-path) ("C:\\Program Files\\PLT-3.99.0.26\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "r5rs" "r6rs" "readline" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #()))
>Description:
Would like to see a range function built in to scheme/list, similar to in-range, but generating a list as opposed to a sequence.  Could implement as:
(define range (lambda args (for/list ((i (apply in-range args))) i)))
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: mark.engelberg@gmail.com, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org
Subject: Re: [plt-bug] all/9457: range
Date: Thu, 5 Jun 2008 08:38:08 -0400

 On Jun  4, mark.engelberg@gmail.com wrote:
 > Would like to see a range function built in to scheme/list, similar
 > to in-range, but generating a list as opposed to a sequence.  Could
 > implement as:
 > (define range (lambda args (for/list ((i (apply in-range args))) i)))
 
 How about something like (build-list 4 values)?  For more complex
 cases, `for/list' itself sounds to me like the right tool.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Mark Engelberg" <mark.engelberg@gmail.com>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org
Subject: Re: [plt-bug] all/9457: range
Date: Thu, 5 Jun 2008 10:42:22 -0700

 It's hard to memorize a large library of functions when all of the
 functions work a little differently, or take different kinds of
 arguments to accomplish similar things.  The main downside of throwing
 all sorts of functions into the main libraries is the cognitive burden
 of having to be aware of all of them, and trying to remember how they
 work.  Having functions that parallel one another is a good thing and
 creates little additional cognitive burden.  In fact, sometimes having
 a certain function *implies* the existence of other similar functions,
 and you can be surprised if they don't exist.
 
 I am aware that build-list and iota (from the srfi) are typically
 available in Scheme distributions to create ranges of numbers.  But
 once you have in-range, having range just makes good sense, imo.  I
 think it would be better to put in range to handle all the common
 range scenarios in a way that is consistent with in-range, and remove
 build-list, because the non-rangish things that build-list can do are
 better expressed by the new comprehension syntax.
 
 In the grand scheme of things, this is a minor nit... as I said, the
 definition of range is one line.  But still, I want to defend my
 assertion that range belongs in the standard library.
 
 --Mark
 
 On Thu, Jun 5, 2008 at 5:38 AM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jun  4, mark.engelberg@gmail.com wrote:
 >> Would like to see a range function built in to scheme/list, similar
 >> to in-range, but generating a list as opposed to a sequence.  Could
 >> implement as:
 >> (define range (lambda args (for/list ((i (apply in-range args))) i)))
 >
 > How about something like (build-list 4 values)?  For more complex
 > cases, `for/list' itself sounds to me like the right tool.
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life!
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Mark Engelberg" <mark.engelberg@gmail.com>
Cc: "Eli Barzilay" <eli@barzilay.org>, bugs@plt-scheme.org,
        nobody@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org
Subject: Re: [plt-bug] all/9457: range
Date: Thu, 5 Jun 2008 13:41:03 -0400

 I happen to agree.
 
 On Jun 5, 2008, at 1:42 PM, Mark Engelberg wrote:
 
 > It's hard to memorize a large library of functions when all of the
 > functions work a little differently, or take different kinds of
 > arguments to accomplish similar things.  The main downside of throwing
 > all sorts of functions into the main libraries is the cognitive burden
 > of having to be aware of all of them, and trying to remember how they
 > work.  Having functions that parallel one another is a good thing and
 > creates little additional cognitive burden.  In fact, sometimes having
 > a certain function *implies* the existence of other similar functions,
 > and you can be surprised if they don't exist.
 >
 > I am aware that build-list and iota (from the srfi) are typically
 > available in Scheme distributions to create ranges of numbers.  But
 > once you have in-range, having range just makes good sense, imo.  I
 > think it would be better to put in range to handle all the common
 > range scenarios in a way that is consistent with in-range, and remove
 > build-list, because the non-rangish things that build-list can do are
 > better expressed by the new comprehension syntax.
 >
 > In the grand scheme of things, this is a minor nit... as I said, the
 > definition of range is one line.  But still, I want to defend my
 > assertion that range belongs in the standard library.
 >
 > --Mark
 >
 > On Thu, Jun 5, 2008 at 5:38 AM, Eli Barzilay <eli@barzilay.org> wrote:
 >> On Jun  4, mark.engelberg@gmail.com wrote:
 >>> Would like to see a range function built in to scheme/list, similar
 >>> to in-range, but generating a list as opposed to a sequence.  Could
 >>> implement as:
 >>> (define range (lambda args (for/list ((i (apply in-range args)))  
 >>> i)))
 >>
 >> How about something like (build-list 4 values)?  For more complex
 >> cases, `for/list' itself sounds to me like the right tool.
 >>
 >> --
 >>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli  
 >> Barzilay:
 >>                  http://www.barzilay.org/                 Maze is  
 >> Life!
 >>
 
From: Eli Barzilay <eli@barzilay.org>
To: "Mark Engelberg" <mark.engelberg@gmail.com>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org
Subject: Re: [plt-bug] all/9457: range
Date: Thu, 5 Jun 2008 15:07:55 -0400

 On Jun  5, Mark Engelberg wrote:
 > It's hard to memorize a large library of functions when all of the
 > functions work a little differently, or take different kinds of
 > arguments to accomplish similar things.  The main downside of
 > throwing all sorts of functions into the main libraries is the
 > cognitive burden of having to be aware of all of them, and trying to
 > remember how they work.  Having functions that parallel one another
 > is a good thing and creates little additional cognitive burden.  In
 > fact, sometimes having a certain function *implies* the existence of
 > other similar functions, and you can be surprised if they don't
 > exist.
 
 (That's exactly the argument that makes me suspicious of adding new
 names, especially ones that are as generic as `range'.)
 
 
 > I am aware that build-list and iota (from the srfi) are typically
 > available in Scheme distributions to create ranges of numbers.  But
 > once you have in-range, having range just makes good sense, imo.  I
 > think it would be better to put in range to handle all the common
 > range scenarios in a way that is consistent with in-range, and
 > remove build-list, because the non-rangish things that build-list
 > can do are better expressed by the new comprehension syntax.
 
 One problem with it is that the same logic applies to any `in-*'
 functions, existing and new.  A second problem is that it will be very
 easy to have this typo:
 
   (for ([x (range 10000)]) ...)
 
 and wonder why your program gets too slow.
 
 So, how about this alternative?
 
   (define (sequence->list seq) (for/list ([x seq]) x))
 
 It has the nice property of being in-line with standard naming
 conventions (enough that you know what it's doing from its name), and
 the additional benefit that works with all (single-valued) sequences:
 
   (sequence->list (in-range 10))
   (sequence->list "foo")
   (sequence->list #(1 2 3))
   (sequence->list (open-input-string "123"))
 
 ?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Mark Engelberg" <mark.engelberg@gmail.com>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        sowens@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org
Subject: Re: [plt-bug] all/9457: range
Date: Thu, 5 Jun 2008 17:06:37 -0700

 I like sequence->list.
 
 I still think that range is sufficiently common, useful, and
 consistent to warrant direct inclusion, but obviously that's a call
 that you guys need to make.
 
 --Mark
 
 On Thu, Jun 5, 2008 at 12:07 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Jun  5, Mark Engelberg wrote:
 >> It's hard to memorize a large library of functions when all of the
 >> functions work a little differently, or take different kinds of
 >> arguments to accomplish similar things.  The main downside of
 >> throwing all sorts of functions into the main libraries is the
 >> cognitive burden of having to be aware of all of them, and trying to
 >> remember how they work.  Having functions that parallel one another
 >> is a good thing and creates little additional cognitive burden.  In
 >> fact, sometimes having a certain function *implies* the existence of
 >> other similar functions, and you can be surprised if they don't
 >> exist.
 >
 > (That's exactly the argument that makes me suspicious of adding new
 > names, especially ones that are as generic as `range'.)
 >
 >
 >> I am aware that build-list and iota (from the srfi) are typically
 >> available in Scheme distributions to create ranges of numbers.  But
 >> once you have in-range, having range just makes good sense, imo.  I
 >> think it would be better to put in range to handle all the common
 >> range scenarios in a way that is consistent with in-range, and
 >> remove build-list, because the non-rangish things that build-list
 >> can do are better expressed by the new comprehension syntax.
 >
 > One problem with it is that the same logic applies to any `in-*'
 > functions, existing and new.  A second problem is that it will be very
 > easy to have this typo:
 >
 >  (for ([x (range 10000)]) ...)
 >
 > and wonder why your program gets too slow.
 >
 > So, how about this alternative?
 >
 >  (define (sequence->list seq) (for/list ([x seq]) x))
 >
 > It has the nice property of being in-line with standard naming
 > conventions (enough that you know what it's doing from its name), and
 > the additional benefit that works with all (single-valued) sequences:
 >
 >  (sequence->list (in-range 10))
 >  (sequence->list "foo")
 >  (sequence->list #(1 2 3))
 >  (sequence->list (open-input-string "123"))
 >
 > ?
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life!
 >

State changed from "open" to "closed" by ryanc at Tue, 10 May 2011 20:11:16 -0400
Reason>>> resolved

