From offby1@blarg.net  Sat Nov 15 13:24:35 2003
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id NAA20482
	for <bugs>; Sat, 15 Nov 2003 13:24:34 -0500
Message-Id: <200311151824.NAA20482@champlain.ccs.neu.edu>
Date: Sat, 15 Nov 2003 13:24:34 -0500
From: Eric Hanchrow <offby1@blarg.net>
Reply-To:
To: bugs@plt-scheme.org
Subject: load-extension can't load my extension: "undefined symbol: scheme_intern_exact_symbol"

>Number:         6556
>Category:       mzscheme
>Synopsis:       load-extension can't load my extension: "undefined symbol: scheme_intern_exact_symbol"
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sat Nov 15 13:25:00 EST 2003
>Closed-Date:    Wed Dec 03 18:00:01 EST 2003
>Last-Modified:  Wed Dec 03 18:00:01 EST 2003
>Originator:     Eric Hanchrow
>Release:        203
>Organization:
plt
>Environment:
unix "Linux debian 2.4.22-1-686 #6 Sat Oct 4 14:09:08 EST 2003 i686 GNU/Linux" (i386-linux)

Docs installed:
("beginning-abbr" "mzscheme" "mzlib" "mzc" "r5rs" "misclib" "framework" "mred" "beginning" "intermediate-lambda" "intermediate" "schemeunit" "advanced" "tex2page" "tools" "tour" "t-y-scheme" "drscheme" "help" "icons" "teachpack" "insidemz")

Collections:
(("/usr/local/lib/plt/collects" ()) ("/usr/lib/plt/collects" ("string-constants" "compiler" "drscheme" "dynext" "errortrace" "framework" "graphics" "help" "html" "lang" "launcher" "make" "mred" "mzlib" "mzscheme" "net" "setup" "stepper" "parser-tools" "syntax" "slibinit" "xml" "web-server" "version" "schemeunit" "tex2page" "mrlib" "doc" "srpersist" "readline" "slatex" "afm" "browser" "defaults" "eopl" "games" "hierlist" "htdp" "icons" "test-suite" "srfi")))

Human language: english
Computer language: ("How to Design Programs" "Advanced Student")

>Description:
the summary above, and "short" sequence of steps below, describe the problem as precisely as can be done.
>How-To-Repeat:
unshar the rest of this message with "sh", then type "make check".  You'll see 
load-extension: couldn't open "/tmp/addone.so" (/tmp/addone.so: undefined symbol: scheme_intern_exact_symbol)
Oh hell.
make: *** [check] Error 1

#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.2.1).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `!/bin/sh' line above, then type `sh FILE'.
#
# Made on 2003-11-15 09:23 PST by <erich@debian>.
# Source directory was `/home/erich/work/mz/from-c'.
#
# Existing files will *not* be overwritten unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#    342 -rw------- Makefile
#    251 -rw------- addone.scm
#   1653 -rw------- simple.c
#     45 -rw------- simple.h
#    263 -rw------- test.c
#
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    set `$dir/gettext --version 2>&1`
    if test "$3" = GNU
    then
      gettext_dir=$dir
    fi
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
if touch -am -t 200112312359.59 $$.touch >/dev/null 2>&1 && test ! -f 200112312359.59 -a -f $$.touch; then
  shar_touch='touch -am -t $1$2$3$4$5$6.$7 "$8"'
elif touch -am 123123592001.59 $$.touch >/dev/null 2>&1 && test ! -f 123123592001.59 -a ! -f 123123592001.5 -a -f $$.touch; then
  shar_touch='touch -am $3$4$5$6$1$2.$7 "$8"'
elif touch -am 1231235901 $$.touch >/dev/null 2>&1 && test ! -f 1231235901 -a -f $$.touch; then
  shar_touch='touch -am $3$4$5$6$2 "$8"'
else
  shar_touch=:
  echo
  $echo 'WARNING: not restoring timestamps.  Consider getting and'
  $echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 200112312359.59 123123592001.59 123123592001.5 1231235901 $$.touch
#
if mkdir _sh12346; then
  $echo 'x -' 'creating lock directory'
else
  $echo 'failed to create lock directory'
  exit 1
fi
# ============= Makefile ==============
if test -f 'Makefile' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'Makefile' '(file already exists)'
else
  $echo 'x -' extracting 'Makefile' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'Makefile' &&
PLT		:= /usr
PLTLIB		:= $(PLT)/lib/plt/lib
MZC		:= $(PLT)/bin/mzc
LDFLAGS		:= -L$(PLTLIB)
LDLIBS		:= -lmzscheme -lmzgc -lm -ldl
X
%.so: %.scm
X	$(MZC) $^
X
%.o: %.c
X	$(MZC) --cc $^
X
test: test.o simple.o addone.so 
X	$(CC) $(LDFLAGS) test.o simple.o $(LDLIBS) -o $@
X
check: test
X	./$^
X
clean:
X	-rm -f *.o test addone.so core
X
X.PHONY: check clean
SHAR_EOF
  (set 20 03 11 15 09 11 12 'Makefile'; eval "$shar_touch") &&
  chmod 0600 'Makefile' ||
  $echo 'restore of' 'Makefile' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'Makefile:' 'MD5 check failed'
a65bc0c58aa162de1591acb6386259dc  Makefile
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'Makefile'`"
    test 342 -eq "$shar_count" ||
    $echo 'Makefile:' 'original size' '342,' 'current size' "$shar_count!"
  fi
fi
# ============= addone.scm ==============
if test -f 'addone.scm' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'addone.scm' '(file already exists)'
else
  $echo 'x -' extracting 'addone.scm' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'addone.scm' &&
(module addone
X  mzscheme
X  (require (lib "cffi.ss" "compiler"))
X
X  (provide add-one)
X
X  (define (add-one s)
X    (with-handlers ((not-break-exn? (lambda (exn) (cons #f (exn-message exn)))))
X      (cons #t (number->string (+ 1 (string->number s)))))))
SHAR_EOF
  (set 20 03 11 14 16 25 42 'addone.scm'; eval "$shar_touch") &&
  chmod 0600 'addone.scm' ||
  $echo 'restore of' 'addone.scm' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'addone.scm:' 'MD5 check failed'
9dded4f7cdedfc126792de4273b8975b  addone.scm
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'addone.scm'`"
    test 251 -eq "$shar_count" ||
    $echo 'addone.scm:' 'original size' '251,' 'current size' "$shar_count!"
  fi
fi
# ============= simple.c ==============
if test -f 'simple.c' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'simple.c' '(file already exists)'
else
  $echo 'x -' extracting 'simple.c' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'simple.c' &&
#include <scheme.h>
#include <stdio.h>
#include <assert.h>
#include "simple.h"
X
int
add_one (char *in,
X         char **out)
{
X  Scheme_Env *e = scheme_basic_env();
X
X  /* the scheme function we're calling is not supposed to throw
X     exceptions. */
X  if (scheme_setjmp(scheme_error_buf)) 
X    {
X      fprintf (stderr, "Oh hell.\n");
X      exit (1);
X    }
X
X  scheme_load_extension("addone.so"   , e);
X  scheme_eval_string ("(require addone)", e);
X
X  /* retrieve the function that does the real work */
X  Scheme_Object * func = scheme_eval_string ("add-one", e);
X
X  /* call the function with the input strings */
X  Scheme_Object *args[] = {scheme_make_string (in)};
X  
X  /* This is a combination of a status code, and returned data.  Like
X     the example in /usr/lib/plt/collects/mzscheme/examples/catch.c,
X     the car is #t if the function succeeded, in which case the
X     return is in the cdr; otherwise, the function failed, the car is
X     #f, and the cdr is a value that describes the problem.  */
X  Scheme_Object * blob = scheme_apply (func,
X                                       sizeof (args)/sizeof (args[0]),
X                                       args);
X
X  /* The function we just called acts a bit like a C function: it
X   * never throws exceptions, and instead reports errors in its
X   * return value.
X   */
X  if (SCHEME_TRUEP (SCHEME_CAR (blob)))
X    *out = strdup (SCHEME_STR_VAL (SCHEME_CDR (blob)));
X  else
X    {
X      /* we're assuming the description is in fact a string. */
X      fprintf (stderr, "Our scheme function returned an error: %s\n",
X               SCHEME_STR_VAL (SCHEME_CDR (blob)));
X      return 1;
X    }
X  return 0;
}
SHAR_EOF
  (set 20 03 11 14 16 28 56 'simple.c'; eval "$shar_touch") &&
  chmod 0600 'simple.c' ||
  $echo 'restore of' 'simple.c' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'simple.c:' 'MD5 check failed'
a4213ea5276bfb9a750e330651a9be70  simple.c
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'simple.c'`"
    test 1653 -eq "$shar_count" ||
    $echo 'simple.c:' 'original size' '1653,' 'current size' "$shar_count!"
  fi
fi
# ============= simple.h ==============
if test -f 'simple.h' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'simple.h' '(file already exists)'
else
  $echo 'x -' extracting 'simple.h' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'simple.h' &&
int
add_one (char *in,
X         char **out);
SHAR_EOF
  (set 20 03 11 14 16 05 05 'simple.h'; eval "$shar_touch") &&
  chmod 0600 'simple.h' ||
  $echo 'restore of' 'simple.h' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'simple.h:' 'MD5 check failed'
966ccb85dc2a8bcc3650f1082da0bc7b  simple.h
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'simple.h'`"
    test 45 -eq "$shar_count" ||
    $echo 'simple.h:' 'original size' '45,' 'current size' "$shar_count!"
  fi
fi
# ============= test.c ==============
if test -f 'test.c' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'test.c' '(file already exists)'
else
  $echo 'x -' extracting 'test.c' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'test.c' &&
#include <stdio.h>
#include "simple.h"
X
int
main ()
{
X  char *sum = NULL;
X  if (add_one ("3",
X               &sum))
X    {
X      fprintf (stderr, "add_one failed.\n");
X      exit (1);
X    }
X
X  printf ("add_one succeeded and returned `%s'\n", sum);
X  free (sum);
}
SHAR_EOF
  (set 20 03 11 14 16 05 54 'test.c'; eval "$shar_touch") &&
  chmod 0600 'test.c' ||
  $echo 'restore of' 'test.c' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'test.c:' 'MD5 check failed'
c624ddca9b584538b38046314cc4e17d  test.c
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'test.c'`"
    test 263 -eq "$shar_count" ||
    $echo 'test.c:' 'original size' '263,' 'current size' "$shar_count!"
  fi
fi
rm -fr _sh12346
exit 0

>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eric Hanchrow <offby1@blarg.net>
Cc: bugs@plt-scheme.org
Subject: Re: all/6556: load-extension can't load my extension: "undefined symbol: scheme_intern_exact_symbol"
Date: Sat, 15 Nov 2003 19:35:54 -0700

 I think you need to add -rdynamic to the end of your executable link
 line, so that the symbols that your .so expects are exported from the
 main executable.
 
 Matthew
 
Responsible-Changed-From-To: eli->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Wed Dec  3 18:00:00 2003
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Wed Dec  3 18:00:00 2003
State-Changed-Why:
    Worked with user to solve the problem.
>Unformatted:

