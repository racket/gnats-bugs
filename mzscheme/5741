From eli@barzilay.org  Sat Aug 17 00:10:05 2002
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id AAA14494
	for <bugs>; Sat, 17 Aug 2002 00:10:05 -0400
Message-Id: <200208170410.AAA14494@champlain.ccs.neu.edu>
Date: Sat, 17 Aug 2002 00:10:05 -0400
From: Eli Barzilay <eli@barzilay.org>
Reply-To:
To: bugs@plt-scheme.org
Subject: Weird behavior of `define' after `require'

>Number:         5741
>Category:       mzscheme
>Synopsis:       Weird behavior of `define' after `require'
>Confidential:   no
>Severity:       serious
>Priority:       high
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sat Aug 17 00:20:00 EDT 2002
>Closed-Date:    Thu Apr 03 17:53:51 EST 2003
>Last-Modified:  Thu Apr 03 17:53:51 EST 2003
>Originator:     Eli Barzilay
>Release:        201
>Organization:
plt
>Environment:
unix "Linux lambda.cs.cornell.edu 2.4.18-5 #1 Mon Jun 10 15:31:48 EDT 2002 i686 unknown" (i386-linux)

Docs Installed:
("help" "mzscheme" "mzlib" "mzc" "r5rs" "icons" "drscheme" "teachpack" "misclib" "framework" "mred" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "tex2page" "tools" "tour" "t-y-scheme" "insidemz")

Collections:
(("/home/eli/scheme/my-plt" ("pics" "swindle")) ("/home/eli/plt/collects" ("browser" "compiler" "defaults" "drscheme" "dynext" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mzlib" "mzscheme" "net" "setup" "stepper" "string-constants" "syntax" "parser-tools" "xml" "slibinit" "afm" "version" "eopl" "web-server" "tex2page" "doc")))

Human Language: english
>Description:
Normally, MzScheme behaves as expected when started with
nothing loaded:
  > (define (exp) exp)
  > (exp)
  #<procedure:exp>
but if, up startup, you do a (require mzscheme) then:
  > (require mzscheme)
  > (define (exp) exp)
  > (exp)
  #<primitive:exp>
So it looks like the `define' defined a new binding for
`exp' but its body still sees the old one instead.
This makes it dangerous to try to define a new module to
replace the existing mzscheme -- since `define' gets broken
in the same way.
>How-To-Repeat:
Start a fresh mzscheme (or drscheme), and enter:
  (require mzscheme)
  (define (exp) exp)
  (exp)
The wrong result is the primitive `exp' function.
>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Aug 20 16:38:38 2002
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->analyzed
State-Changed-By: mflatt
State-Changed-When: Tue Aug 20 16:38:38 2002
State-Changed-Why:
    There's not much we can do about this. The
    problem is that the top level is too broken. :)
    
    See section 8.1 in the MzScheme manual for an
    explanation of what is happening.
    
    Note that `namespace-require/copy' copies the bindings
    of a module into a namespace instead of requiring the
    module's bindings. That's how `mzscheme' is unpacked
    into the initial namespace.
    
    You may wonder why a top-level `require' doesn't also
    copy bindings. That might fit better with the traditional
    top level, but it interacts badly with `syntax',
    `module-binding=?', etc. Also, it breaks the connection
    between a name and the source module, so that 
    programming tools can't be as helpful as we'd like
    in the long run.
    
    Can I close the PR?
    
    Thanks,
    Matthew
State-Changed-From-To: analyzed->closed
State-Changed-By: mflatt
State-Changed-When: Thu Apr  3 17:53:51 2003
State-Changed-Why:
    It's "supposed" to be this way.
>Unformatted:

