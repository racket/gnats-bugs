From jensaxel@soegaard.net Fri Nov 26 15:47:43 2004
Received: from localhost (0x503e5363.hrnxx3.adsl-dhcp.tele.dk [80.62.83.99])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id iAQKlfnA007254
	for <bugs>; Fri, 26 Nov 2004 15:47:42 -0500
Message-Id: <200411262047.iAQKlfnA007254@champlain.ccs.neu.edu>
Date: Fri, 26 Nov 2004 15:47:41 -0500
From: Jens Axel Søgaard <jensaxel@soegaard.net>
To: bugs@plt-scheme.org
Subject: Problem with the module language

>Number:         7124
>Category:       mzscheme
>Synopsis:       Problem with the module language
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Nov 26 15:50:00 -0500 2004
>Last-Modified:  Sat Nov 27 16:50:00 -0500 2004
>Originator:     Jens Axel Søgaard
>Organization:
titan
>Submitter-Id:   unknown
>Release:        299.22-cvs25nov2004
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 16
Docs Installed:
(#<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\web-server> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\tour> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\tools> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\tex2page> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\teachpack> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\t-y-scheme> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\swindle> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\srfi> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\r5rs> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\profj-intermediate> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\profj-beginner> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\profj-advanced> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\plot> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\mzscheme> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\mzlib> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\mzc> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\mred> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\misclib> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\intermediate-lambda> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\intermediate> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\insidemz> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\help> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\framework> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\foreign> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\drscheme> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\beginning-abbr> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\beginning> #<path:C:\Programmer\PLT-FULLCVS-299.22\collects\doc\advanced>)
Collections: 
((#<path:C:\Documents and Settings\js\Application Data\PLT Scheme\299.22\collects> "non-existent path") (#<path:C:\Programmer\PLT-FULLCVS-299.22\collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:cvs-time-stamp> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mrdemo> #<path:mred> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:net> #<path:openssl> #<path:parser-tools> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:readline> #<path:reduction-semantics> #<path:setup> #<path:sgl> #<path:sirmail> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
 
Human Language: danish
 
Teachpack filenames: ()
Computer Language: (("Professionelle sprog" "PLT" "Temmelig omfattende Scheme (inklusiv MrEd og Avanceret)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
When run in the module language the following program
crashes DrScheme.

;;----------------------------------------------------------------------
;; basic syntax utilities

(module stx #%kernel

  ;; These utilities facilitate operations on syntax objects.
  ;; A syntax object that represents a parenthesized sequence
  ;; can contain a mixture of cons cells and syntax objects,
  ;; hence the need for `stx-null?', `stx-car', etc.

  ;; a syntax identifier?
  (define-values (identifier?)
    (lambda (p)
      (if (syntax? p)
	  (symbol? (syntax-e p))
	  #f)))

  ;; a syntax null?
  (define-values (stx-null?)
    (lambda (p)
      (if (null? p)
	  #t
	  (if (syntax? p) 
	      (null? (syntax-e p))
	      #f))))

  ;; null if a syntax null?, else #f
  (define-values (stx-null/#f)
    (lambda (p)
      (if (null? p)
	  null
	  (if (syntax? p) 
	      (if (null? (syntax-e p))
		  null
		  #f)
	      #f))))

  ;; a syntax pair?
  (define-values (stx-pair?)
    (lambda (p)
      (if (pair? p)
	  #t
	  (if (syntax? p)
	      (pair? (syntax-e p))
	      #f))))

  ;; a syntax list?
  (define-values (stx-list?)
    (lambda (p)
      (if (list? p)
	  #t
	  (if (syntax? p) 
	      (if (list? (syntax-e p))
		  #t
		  (let loop ([l (syntax-e p)])
		    (if (pair? l)
			(loop (cdr l))
			(stx-list? l))))
	      (if (pair? p)
		  (stx-list? (cdr p))
		  #f)))))

  ;; car of a syntax pair
  (define-values (stx-car)
    (lambda (p)
      (if (pair? p)
	  (car p)
	  (car (syntax-e p)))))

  ;; cdr of a syntax pair
  (define-values (stx-cdr)
    (lambda (p)
      (if (pair? p)
	  (cdr p)
	  (cdr (syntax-e p)))))

  ;; Flattens a syntax list into a list
  (define-values (stx->list)
    (lambda (e)
      (if (syntax? e)
	  (syntax->list e)
	  (let ([flat-end
		 (let loop ([l e])
		   (if (null? l) 
		       #f
		       (if (pair? l)
			   (loop (cdr l))
			   (if (syntax? l) 
			       (syntax->list l)
			       #f))))])
	    (if flat-end
		;; flatten
		(let loop ([l e])
		  (if (null? l) 
		      null
		      (if (pair? l) 
			  (cons (car l) (loop (cdr l)))
			  (if (syntax? l) 
			      flat-end))))
		e)))))

  ;; a syntax vector?
  (define-values (stx-vector?)
    (lambda (p len)
      (if (syntax? p) 
	  (if (vector? (syntax-e p))
	      (if len
		  (= len (vector-length (syntax-e p)))
		  #t)
	      #f)
	  #f)))

  ;; syntax vector reference
  (define-values (stx-vector-ref)
    (lambda (p pos)
      (vector-ref (syntax-e p) pos)))

  ;; used in pattern-matching with an escape proc
  (define-values (stx-check/esc)
    (lambda (v esc)
      (if v
	  v
	  (esc #f))))

  ;; used in pattern-matching where #f on the cdr
  ;; is a failure
  (define-values (cons/#f)
    (lambda (i l)
      (if l
	  (cons i l)
	  #f)))

  ;; used in pattern-matching where the second
  ;;  list can be a failure; if it's null, the first
  ;;  part might be an improper list
  (define-values (append/#f)
    (lambda (l1 l2)
      (if l2
	  (if (null? l2)
	      l1
	      (append l1 l2))
	  #f)))

  ;; The rotate procedures are used to
  ;;  rotate a list of matches with multiple variables to
  ;;  get a list of multiple matches for single variables

  (define-values (stx-rotate)
    (lambda (l)
      (apply map list l)))

  (define-values (stx-rotate*)
    (lambda (l)
      (apply list* (apply map list l))))

  ;; The split procedure is used when matching ellipses
  ;;  fiollowed by a certain number of patterns
  (define-values (split-stx-list)
    (lambda (s n prop?)
      (let-values ([(pre post m)
		    (let loop ([s s])
		      (if (stx-pair? s)
			  (let-values ([(pre post m) (loop (stx-cdr s))])
			    (if (< m n)
				(values '() s (add1 m))
				(values (cons (stx-car s) pre) post m)))
			  (values '() s (if prop?
					    (if (stx-null? s) 
						0 
						-inf.0)
					    (if (stx-null? s)
						-inf.0
						1)))))])
	(values pre post (= m n)))))

  (provide identifier? stx-null? stx-null/#f stx-pair? stx-list?
	   stx-car stx-cdr stx->list
	   stx-vector? stx-vector-ref
	   stx-check/esc cons/#f append/#f
	   stx-rotate stx-rotate*
	   split-stx-list))


>How-To-Repeat:
1. Save the program as "stx.scm"
2. Choose the module language
3. Run the program

>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "mflatt" by mflatt at Fri, 26 Nov 2004 16:29:05 -0500
Reason>>> mz

State changed from "open" to "closed" by mflatt at Fri, 26 Nov 2004 16:29:05 -0500
Reason>>> Fixed in CVS.

Thanks for the report,
Matthew

From: Robby Findler <robby@cs.uchicago.edu>
To: mflatt@cs.utah.edu
Cc: Jens Axel SXXgaard <jensaxel@soegaard.net>, bugs@plt-scheme.org
Subject: Re: all/7124: Problem with the module language
Date: Sat, 27 Nov 2004 13:20:00 -0600

 I just get the prompt back, under macos x (apologies if you already
 looked into this).
 
 Robby
From: Robby Findler <robby@cs.uchicago.edu>
To: Jens Axel =?ISO-8859-1?Q?S=F8gaard?= <jensaxel@soegaard.net>
Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: all/7124: Problem with the module language
Date: Sat, 27 Nov 2004 13:49:00 -0600

 At Sat, 27 Nov 2004 20:46:34 +0100, Jens Axel Søgaard wrote:
 > Robby Findler wrote:
 > 
 > >I just get the prompt back, under macos x (apologies if you already
 > >looked into this).
 > >
 > If it helps, older version of DrScheme also crash on this example (still 
 > WinXP-SP2).
 
 This is a real crash of the whole process, right? Not a Scheme-level
 error?
 
 Robby
From: =?UTF-8?B?SmVucyBBeGVsIFPDuGdhYXJk?= <jensaxel@soegaard.net>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: all/7124: Problem with the module language
Date: Sat, 27 Nov 2004 20:46:34 +0100

 Robby Findler wrote:
 
 >I just get the prompt back, under macos x (apologies if you already
 >looked into this).
 >
 If it helps, older version of DrScheme also crash on this example (still 
 WinXP-SP2).
 
 -- 
 Jens Axel Søgaard
 
 
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7124: Problem with the module language
Date: Sat, 27 Nov 2004 14:45:03 -0700

 At Sat, 27 Nov 2004 14:25:01 -0500, Robby Findler wrote:
 >  I just get the prompt back, under macos x
 
 Good - I fixed it yesterday.
 
 Matthew
 
