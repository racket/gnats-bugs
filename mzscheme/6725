From nobody@champlain.ccs.neu.edu  Mon Feb 23 17:56:22 2004
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.9.3) id RAA05410
	for bugs@plt-scheme.org; Mon, 23 Feb 2004 17:56:22 -0500
Message-Id: <200402232256.RAA05410@champlain.ccs.neu.edu>
Date: Mon, 23 Feb 2004 17:56:22 -0500
From: olivier.bellis@sgdl-sys.com
Reply-To:
To: bugs@plt-scheme.org
Subject: gcd on big numbers

>Number:         6725
>Category:       mzscheme
>Synopsis:       gcd on big numbers
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Mon Feb 23 18:00:00 EST 2004
>Closed-Date:    Mon Feb 23 18:24:35 EST 2004
>Last-Modified:  Tue Feb 24 09:54:32 EST 2004
>Originator:     Olivier Bellis
>Release:        206 and 206p1
>Organization:
plt
>Environment:
mzkernel
>Description:
Evaluation of gcd functions on list of integers fails for some values on versions 206 and 206p1 on Linux and WindowsNT, though it worked on previously tested v202 (I did not test the in between versions).

Olivier
>How-To-Repeat:
(gcd -40959999999999991611392 -81919999999999983222784 0 819199999999999865782272)
>Fix:
That should have been

 if (!n_size)
   return (Scheme_Object *)d
>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: eli->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon Feb 23 18:24:35 2004
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Mon Feb 23 18:24:35 2004
State-Changed-Why:
    Fixed for the next release. See reply for details.

From: Matthew Flatt <mflatt@cs.utah.edu>
To: olivier.bellis@sgdl-sys.com
Cc: bugs@plt-scheme.org
Subject: Re: all/6725: gcd on big numbers
Date: Mon, 23 Feb 2004 15:33:07 -0700

 At Mon, 23 Feb 2004 17:56:22 -0500, olivier.bellis@sgdl-sys.com wrote:
 > Evaluation of gcd functions on list of integers fails for some values on 
 > versions 206 and 206p1 on Linux and WindowsNT, though it worked on previously 
 > tested v202 (I did not test the in between versions).
 > 
 > Olivier
 > >How-To-Repeat:
 > (gcd -40959999999999991611392 -81919999999999983222784 0 
 > 819199999999999865782272)
 
 The problem is specific to gcd with 0 and a bignum.
 
 It's now fixed for the next version. If you'd like to patch the C
 source, add the following at line 1437 of
 plt/src/mzscheme/src/bignum.c:
 
   if (!n_size)
     return scheme_make_integer(0);
 
 Another possibility, of course, is to wrap `gcd' with your own Scheme
 function that checks for 0.
 
 Thanks very much for the report,
 Matthew
 
>Unformatted:

