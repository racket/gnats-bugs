From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Jul 14 18:26:22 2012
Received: from mail-vc0-f172.google.com (mail-vc0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q6EMQIIJ004631
	for <bugs@bugs.plt-scheme.org>; Sat, 14 Jul 2012 18:26:18 -0400
Message-Id: <201207142226.q6EMQDt5004624@champlain.ccs.neu.edu>
Date: Sat, 14 Jul 2012 18:26:13 -0400
From: dvanhorn@ccs.neu.edu
To: bugs@racket-lang.org
Subject: match feature: `set' and `set-rest' pattern constructor

>Number:         12906
>Category:       mzscheme
>Synopsis:       match feature: `set' and `set-rest' pattern constructor
>Class:          change-request
>Responsible:    samth
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Jul 14 18:28:01 -0400 2012
>Last-Modified:  Tue Jul 24 20:15:24 -0400 2012
>Originator:     David Van Horn
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1.6--2012-02-23(07dbfba/g)
>Environment:
macosx "Darwin doom.local 11.4.0 Darwin Kernel Version 11.4.0: Mon Apr  9 19:32:15 PDT 2012; root:xnu-1699.26.8~1/RELEASE_X86_64 x86_64" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 587056472
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/dvanhorn/Library/Racket/5.2.1.6/collects"
 ("info-domain"))
("/Users/dvanhorn/Documents/git/racket/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "images" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-scheme"!
  "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t test-coverage) (default) #() "#lang racket\n" #f #t))
>Description:
I'd like a `set' match pattern that worked
like `list-no-order' but for sets.

Here's a naive implementation:

#lang racket
(require (prefix-in r: (only-in racket set)))
(define-match-expander set
  (syntax-rules ()
    [(set p ...)
     (? set? (app set->list (list-no-order p ...)))])
  (syntax-rules ()
    [(set e ...)
     (r:set e ...)]))

(match (set 1 2 3)
  [(set x y z)
   (+ x y z)]) ;=> 6

It would also be nice to have `set-rest':

(match (set 1 2 3)
  [(set-rest 1 s)
   (match s
     [(set y z)
      (+ y z)])]) ;=> 5
>How-To-Repeat:
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "samth" by samth at Tue, 24 Jul 2012 20:15:24 -0400
Reason>>> match

