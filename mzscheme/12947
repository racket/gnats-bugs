From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Jul 28 09:33:04 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q6SDX0Af017727
	for <bugs@bugs.plt-scheme.org>; Sat, 28 Jul 2012 09:33:01 -0400
Message-Id: <201207281332.q6SDWxOb017721@champlain.ccs.neu.edu>
Date: Sat, 28 Jul 2012 09:32:59 -0400
From: vasishtha.spier@gmail.com
To: bugs@racket-lang.org
Subject: Regular expression documentation

>Number:         12947
>Category:       mzscheme
>Synopsis:       Regular expression documentation
>Class:          doc-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Jul 28 09:36:01 -0400 2012
>Last-Modified:  Sat Feb 23 22:04:01 -0500 2013
>Originator:     Harry Spier
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 176881140
Links: (links) = ("OCR_PROJECT" "racket-ocr"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("C:\\Users\\Harry\\AppData\\Roaming\\Racket\\5.2.1\\collects"
 (non-existent-path))
("C:\\Program Files\\Racket\\collects"
 ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "images" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f))
>Description:
In the regular expression section of the Racket reference (3.7)
1) It would be useful to explain that byte regexp matchers operating on byte-strings or input ports match iso-8859-1 characters in the input byte stream.

2) It would also be useful to mention that character regexp match utf-8 encodings (as documented) BUT it would be useful to mention that non utf-8 encodings in the input to the regexp are NEVER matched.

I.e. The regexp operator .  never matches a non-utf-8 encoding and a [^x] always matches a non-utf-8 encoding.

See the following examples of a character regexp operating on a byte-string containing a non-utf-8 encoding.

> (regexp-match #rx"ÿ" #"bbbÿbbb")
#f
> (regexp-match-positions* #rx"[^k]+" #"aaaÿbbb")
'((0 . 3) (4 . 7))

> (regexp-match #rx".+" #"ÿ")
#f
> 
THOUGH regexp-match seems to work in the following examples:
> (regexp-match #rx"[^k]+" #"ÿ")
#f
> (regexp-match #rx"[^k]+" #"ÿaaaa")
'(#"aaaa")
> 
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Harry Spier <vasishtha.spier@gmail.com>
To: bugs@racket-lang.org, bug-notification@racket-lang.org
Cc: 
Subject: CORRECTION: Re: [racket-bug] all/12947: Regular expression documentation
Date: Sat, 28 Jul 2012 11:29:45 -0400

 Should read as follows (i.e. I believe this only applies to
 byte-strings not input ports)
 In the regular expression section of the Racket reference (3.7)
  1) It would be useful to explain that byte regexp matchers operating
 on byte-strings match iso-8859-1 characters in the input byte stream.
 
  2) It would also be useful to mention that character regexp match
 utf-8 encodings (as documented) BUT it would be useful to mention that
 non utf-8 encodings in the input to the regexp are NEVER matched.
 
  I.e. The regexp operator .  never matches a non-utf-8 encoding and a
 [^x] always matches a non-utf-8 encoding.
 
  See the following examples of a character regexp operating on a
 byte-string containing a non-utf-8 encoding.
 
  > (regexp-match #rx"ÿ" #"bbbÿbbb")
  #f
  > (regexp-match-positions* #rx"[^k]+" #"aaaÿbbb")
  '((0 . 3) (4 . 7))
 
  > (regexp-match #rx".+" #"ÿ")
  #f
  >
  THOUGH regexp-match seems to work in the following examples:
  > (regexp-match #rx"[^k]+" #"ÿ")
  #f
  > (regexp-match #rx"[^k]+" #"ÿaaaa")
  '(#"aaaa")
  >
 
 On Sat, Jul 28, 2012 at 9:36 AM,  <bugs@racket-lang.org> wrote:
 > Thank you very much for your problem report.
 > It has the internal identification `all/12947'.
 > You can check on the status of your problem report at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12947
 >
 > If you wish to provide further information regarding this problem
 > you can do so as a reply to this message.  (But please make sure
 > that your mailer replies to both "bugs" and "bug-notification".)
 >
 

From: Danny Yoo <dyoo@hashcollision.org>
To: vasishtha.spier@gmail.com, bugs@racket-lang.org, mflatt@racket-lang.org
Cc: 
Subject: Re: mzscheme/12947: Regular expression documentation
Date: Sat, 23 Feb 2013 19:59:45 -0700

 This is related to PR 12620, which also notes that we should have
 examples to help disambiguate the regexp ".".
