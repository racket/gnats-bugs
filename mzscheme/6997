From apache@plt-scheme.org Tue Aug 17 14:26:41 2004
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id i7HIQf0u022619
	for <bugs@plt-scheme.org>; Tue, 17 Aug 2004 14:26:41 -0400
Message-Id: <200408171826.i7HIQf5d022617@champlain.ccs.neu.edu>
Date: Tue, 17 Aug 2004 14:26:41 -0400
From: norm@cap-lore.com
To: bugs@plt-scheme.org
Subject: Eval should reject unquoted procedure arguments.

>Number:         6997
>Category:       mzscheme
>Synopsis:       Eval should reject unquoted procedure arguments.
>Class:          doc-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Aug 17 14:30:00 -0400 2004
>Last-Modified:  Fri Jan 21 18:12:40 -0500 2005
>Originator:     Norman Hardy
>Organization:
plt
>Submitter-Id:   unknown
>Release:        ver. 207
>Environment:
mac-ppc-osx
>Description:
Eval should take expressions and reject procedures.
If this is an extension is should be documented.
>How-To-Repeat:
Welcome to MzScheme version 207, Copyright (c) 2004 PLT Scheme, Inc.
Identifiers and symbols are initially case-sensitive.
> (eval (lambda () 3))
#<procedure:STDIN::7>

boiled down from the following:
Welcome to MzScheme version 207, Copyright (c) 2004 PLT Scheme, Inc.
Identifiers and symbols are initially case-sensitive.
> (eval box? (scheme-report-environment 5))
#<primitive:box?>
> (eval 'box? (scheme-report-environment 5))
reference to undefined identifier: box?
> 
>Fix:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: bugs@plt-scheme.org, Matthew Flatt <mflatt@cs.utah.edu>,
        laminatedwastrel@brinckerhoff.org, norm@cap-lore.com,
        eli@plt-scheme.org, nobody@plt-scheme.org
Cc: 
Subject: Re: all/6997: Eval should reject unquoted procedure arguments.
Date: Sat, 21 Aug 2004 09:45:24 -0400

 %3Fcmd%3Dview%2520audit-trail%26database%3Ddefault%26pr%3D6997
 
 Sorry for the long response time.
 
 The behavior you've noticed is known as "3D" code.  That is, when the 
 evaluator encounters a value such as a procedure or structure in the 
 input syntax, it trivially "evaluates" that value to itself.  So, for 
 instance:
 
  > (eval `(apply ,(lambda (x y) (+ x y)) (list 3 4)))
 7
 
 This is a weak example, because it assumes you know how quasiquote 
 works, but your bug report's example suggests that you already 
 understand the issues involved.
 
 As you point out, this should appear in the documentation.  I cannot 
 find any reference to it by searching for "3d" or "3-d" in Help Desk.  
 If it's in there, I can't find it either.
 
 I did find one mention of this in the plt-scheme archives:
 http://list.cs.brown.edu/pipermail/plt-scheme/2004-June/006056.html
 
 john clements
 
 
Class changed from "sw-bug" to "doc-bug" by mflatt at Fri, 21 Jan 2005 18:12:40 -0500
Reason>>> Need to improve MzScheme docs.

Responsible changed from "nobody" to "mflatt" by mflatt at Fri, 21 Jan 2005 18:12:40 -0500
Reason>>> mz

