From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jul 13 14:33:50 2008
Received: from fk-out-0910.google.com (fk-out-0910.google.com [209.85.128.185])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m6DIXl1c032248
	for <bugs@bugs.plt-scheme.org>; Sun, 13 Jul 2008 14:33:47 -0400
Message-Id: <200807131833.m6DIXgJm032241@champlain.ccs.neu.edu>
Date: Sun, 13 Jul 2008 14:33:42 -0400
From: ari@debian.org
To: bugs@plt-scheme.org
Subject: MzScheme crashes on startup on Debian MIPS

>Number:         9603
>Category:       mzscheme
>Synopsis:       MzScheme crashes on startup on Debian MIPS
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jul 13 14:36:02 -0400 2008
>Closed-Date:    Mon Jan 17 19:43:38 -0500 2011
>Last-Modified:  Mon Jan 17 19:43:38 -0500 2011
>Originator:     Ari Pollak
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.0.1
>Environment:
linux-ubuntu
>Description:
After doing a normal build on Debian GNU/Linux for the MIPS architecture, running mzscheme3m by itself crashes on startup, which obviously prevents an installation from taking place. The build sequence is like this:
mkdir build; cd build; ../configure --prefix=/usr; make

% mzscheme/mzscheme3m
Welcome to MzScheme v4.0.1 [3m], Copyright (c) 2004-2008 PLT Scheme Inc.
Seg fault (internal error during gc) at 0x8282828
zsh: IOT instruction (core dumped)  ./mzscheme3m

% gdb mzscheme/mzscheme3m core
...
#0  0x2abb89b8 in raise () from /lib/libc.so.6
No symbol table info available.
#1  0x2abba62c in abort () from /lib/libc.so.6
No symbol table info available.
#2  0x0058cce8 in fault_handler (sn=<value optimized out>, 
    si=<value optimized out>, ctx=<value optimized out>)
    at ../../../src/mzscheme/gc2/sighand.c:21
No locals.
#3  <signal handler called>
No symbol table info available.
#4  0x08282828 in ?? ()
No symbol table info available.
#5  0x00591d94 in propagate_marks () at ../../../src/mzscheme/gc2/newgc.c:2346
	p = (void *) 0x2d898008
#6  0x0058e684 in garbage_collect (force_full=<value optimized out>)
    at ../../../src/mzscheme/gc2/newgc.c:3093
	old_mem_use = 28884804
	next_gc_full = 1
	number = 23
	since_last_full = 101
	running_finalizers = 0
	last_full_mem_use = 20971520
#7  0x00593410 in GC_malloc_one_tagged (s=<value optimized out>)
    at ../../../src/mzscheme/gc2/newgc.c:531
No locals.
#8  0x00593620 in GC_malloc_pair (car=0x2d99b404, cdr=0x2d898004)
    at ../../../src/mzscheme/gc2/newgc.c:630
	ptr = 7354112
	newptr = 763985928
	retval = <value optimized out>
#9  0x0047e46c in list_prim (argc=763985928, argv=0x2d99bf10)
    at xsrc/list.c:651
	l = (Scheme_Object *) 0x2d99bff0
	__gc_var_stack__ = {0x7fd686e0, 0x2, 0x7fd68694, 0x7fd68668}
#10 0x0043df0c in scheme_do_eval (obj=0x2c2d59f0, num_rands=6, 
    rands=0x2b305060, get_value=1) at xsrc/eval.c:7923
	prim = (Scheme_Primitive_Proc *) 0x2d898008
	f = (Scheme_Primitive_Closure_Proc *) 0x5f0880 <udata_cats>
	type = <value optimized out>
	v = (Scheme_Object *) 0x0
	old_cont_mark_stack = 42
	runstack = (Scheme_Object **) 0x2aaccd98
	pmstack = -1
	_stk_pos = 2144765620
	__ret__val__ = <value optimized out>
	__gc_var_stack__ = {0x7fd687c0, 0x3, 0x7fd686b0, 0x7fd68758, 
  0x7fd68760, 0x0, 0x7fd687d0, 0xe, 0x7fd686b8}
#11 0x00474094 in map (argc=7, argv=0x2d995e18) at xsrc/fun.c:3674
	i = <value optimized out>
	size = 2
	l = <value optimized out>
	quick1 = {0x0, 0x0, 0x0}
	quick2 = {0x0, 0x0, 0x0}
	working = (Scheme_Object **) 0x2d99bf30
	args = (Scheme_Object **) 0x2d898008
	quick3 = {0x2d99bfa0, 0x0, 0x0, 0x0, 0x0}
	resarray = (Scheme_Object **) 0x7fd687ac
	v = (Scheme_Object *) 0x2d99bfa0
	cc = 0
	__ret__val__ = <value optimized out>
	__gc_var_stack__ = {0x7fd68898, 0xe, 0x7fd68780, 0x0, 0x7fd68794, 0x3, 0x7fd6884c, 0x7fd68778, 0x0, 0x7fd687a0, 0x3, 0x7fd68784, 0x7fd6877c, 0x0, 0x7fd687ac, 0x5, 0x3}
#12 0x0043df0c in scheme_do_eval (obj=0x2c2d59f0, num_rands=7, 
    rands=0x2b305060, get_value=-1) at xsrc/eval.c:7923
	prim = (Scheme_Primitive_Proc *) 0x2d898008
	f = (Scheme_Primitive_Closure_Proc *) 0x5f0880 <udata_cats>
	type = <value optimized out>
	v = (Scheme_Object *) 0x4
	old_cont_mark_stack = 41
	runstack = (Scheme_Object **) 0x2aaccd98
	pmstack = 41
	_stk_pos = 2144766060
	__ret__val__ = <value optimized out>
	__gc_var_stack__ = {0x7fd68954, 0x3, 0x7fd68868, 0x7fd68910, 
  0x7fd68918, 0x7fd68888, 0x7fd68878, 0x7fd68874, 0x7fd68870}
#13 0x00468370 in scheme_call_ec (argc=<value optimized out>, argv=0x2aaccd98)
    at xsrc/fun.c:4227
	newbuf = {jb = {{__jmpbuf = {{__pc = 0x4682c4, __sp = 0x7fd68910, 
          __regs = {13, 2144766360, 2144766292, 6258976, 3, 6256028, -4, 
            6255568}, __fp = 0x7fd68acc, __gp = 0x2ad03950, __fpc_csr = 100, 
          __fpregs = {-nan(0xfffffffffffff), -nan(0xfffffffffffff), 
            -nan(0xfffffffffffff), -nan(0xfffffffffffff), 
            -nan(0xfffffffffffff), -nan(0xfffffffffffff)}}}, 
      __mask_was_saved = 0, __saved_mask = {__val = {8, 765048656, 724621104, 
          724621016, 5518060, 765048608, 740690840, 2144766528, 765048672, 
          2144766704, 3, 2144766456, 2144766624, 2144766632, 2144766476, 0, 
          765048848, 765048752, 0, 715967896, 4294967295, 40, 2144766488, 
          2144766500, 2144766484, 2144766492, 2144766488, 5, 0, 32, 1, 
          715967896}}}}, gcvs = 2144766292, gcvs_cnt = 13}
	cont = (Scheme_Escaping_Cont * volatile) 0x2d99b9d0
	p1 = (Scheme_Thread *) 0x2af2cc88
	v = (Scheme_Object * volatile) 0x0
	a = {0x2d99b9d0}
	cframe = {cont_mark_pos = 107, cont_mark_stack = 40, cache = 0x0}
	barrier_prompt = (Scheme_Prompt *) 0x2d9989b0
	__ret__val__ = <value optimized out>
	__gc_var_stack__ = {0x7fd68af0, 0xd, 0x7fd68934, 0x7fd68998, 
  0x7fd6899c, 0x7fd689c0, 0x7fd689c4, 0x7fd68aa4, 0x7fd68940, 0x0, 0x7fd6893c, 
  0x1, 0x7fd68950, 0x7fd68930, 0x7fd68938, 0x5fdd80}
#14 0x0043df0c in scheme_do_eval (obj=0x2c2d59f0, num_rands=1, 
    rands=0x2b305060, get_value=1) at xsrc/eval.c:7923
	prim = (Scheme_Primitive_Proc *) 0x2d898008
	f = (Scheme_Primitive_Closure_Proc *) 0x5f0880 <udata_cats>
	type = <value optimized out>
	v = (Scheme_Object *) 0x714958
	old_cont_mark_stack = 39
	runstack = (Scheme_Object **) 0x2aaccd98
	pmstack = 39
	_stk_pos = 2144766660
	__ret__val__ = <value optimized out>
	__gc_var_stack__ = {0x7fd68bb8, 0x3, 0x7fd68ac0, 0x7fd68b68, 
  0x7fd68b70, 0x7fd68ad4, 0x7fd68ad0, 0x2d9986b0, 0x5fdd80}

... (the backtrace appears to go on for 515 frames, so I'm cutting it off arbitrarily. If you want the full one, I can attach that upon request.)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: ari@debian.org, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9603: MzScheme crashes on startup on Debian MIPS
Date: Sun, 13 Jul 2008 17:53:26 -0600

 At Sun, 13 Jul 2008 14:36:02 -0400, ari@debian.org wrote:
 > After doing a normal build on Debian GNU/Linux for the MIPS architecture, 
 > running mzscheme3m by itself crashes on startup
 
 I don't have any ideas, yet.
 
 Is there a machine that I could log into? Otherwise, I can try using a
 simulator, which sometimes works well enough.
 
 Thanks,
 Matthew
 
From: Ari Pollak <ari@debian.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9603: MzScheme crashes on startup on Debian MIPS
Date: Sun, 13 Jul 2008 21:06:14 -0400

 Matthew Flatt wrote:
 > I don't have any ideas, yet.
 > 
 > Is there a machine that I could log into? Otherwise, I can try using a
 > simulator, which sometimes works well enough.
 > 
 
 Unfortunately I can't give out access to this machine. If it helps
 (probably not given how rare the architectures are for Linux usage), I
 think the same problem is happening on hppa and mipsel. Is there
 anything else I can run to help track it down?



State changed from "open" to "closed" by eli at Mon, 17 Jan 2011 19:43:38 -0500
Reason>>> closed as "obsolete" with respect to v5.0.99.6 and later;
either the bug is long-since fixed, the relevant code
doesn't exist anymore, the relevant platform hasn't been
supported recently, or a new bug report is needed if the
problem really isn't fixed and someone actually cares

