From robby@cs.rice.edu  Fri May  8 19:03:18 1998
Received: from new-world.cs.rice.edu (new-world.cs.rice.edu [128.42.6.103])
          by cs.rice.edu (8.8.5/8.8.4) with ESMTP
	  id TAA00763 for <plt-gnats@cs.rice.edu>; Fri, 8 May 1998 19:03:18 -0500 (CDT)
Message-Id: <199805090003.TAA03267@new-world.cs.rice.edu>
Date: Fri, 8 May 1998 19:03:18 -0500 (CDT)
From: Robert Bruce Findler <robby@cs.rice.edu>
Reply-To: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: newly created eventspace's threads not under custodian control
X-Send-Pr-Version: 3.101

>Number:         604
>Category:       mzscheme
>Synopsis:       newly created eventspace's threads not under custodian control
>Confidential:   no
>Severity:       critical
>Priority:       high
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sat May  9 00:15:02 GMT 1998
>Last-Modified:  Wed May 13 19:33:18 CDT 1998
>Originator:     Robert Bruce Findler
>Organization:
titan
>Release:        unknown
>Environment:
	
>Description:

Newly created eventspace's threads are not under the control of the current 
custodian (ie they cannot be killed)
	
>How-To-Repeat:

Put the gfollowing code in a system.ss file and use "-s" to startup
mred. Ie, in PLTHOME/collects/tmp/system.ss, and then run "mred -s tmp"

(define mred:initialize void)

;; the current custodian doesn't control the evtspce's thread
(parameterize ([current-custodian (make-custodian)])
  (parameterize ([wx:current-eventspace (wx:make-eventspace)])
    (let ([s (make-semaphore 0)])
      (semaphore-callback
       s
       (lambda ()
	 (printf "killing.1~n")
	 (kill-thread (current-thread))))
      (semaphore-post s))))

;; it's not the original custodian, either:
(let ([orig-custodian (make-custodian)])
  (parameterize ([current-custodian (make-custodian)])
    (parameterize ([wx:current-eventspace (wx:make-eventspace)])
      (let ([s (make-semaphore 0)])
	(semaphore-callback
	 s
	 (lambda ()
	   (parameterize ([current-custodian orig-custodian])
	     (printf "killing.2~n")
	     (kill-thread (current-thread)))))
	(semaphore-post s)))))


;; this case works
(parameterize ([wx:current-eventspace (wx:make-eventspace)])
  (let ([s (make-semaphore 0)])
    (semaphore-callback
     s
     (lambda ()
       (printf "killing.3~n")
       (kill-thread (current-thread))))
    (semaphore-post s)))


>Fix:
	
>Audit-Trail:

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri May  8 19:32:38 1998
Responsible-Changed-Why:


From: Matthew Flatt <mflatt@cs.rice.edu>
To: robby@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/604: newly created eventspace's threads not under custodian control
Date: Fri, 8 May 1998 19:32:14 -0500 (CDT)

 Quoting Robert Bruce Findler:
 > 
 > Newly created eventspace's threads are not under the control of the current 
 > custodian (ie they cannot be killed)
 > 	
 
 I see this bug. How soon do you need it fixed?
 
 Thanks,
 Matthew

From: "Robby Findler" <robby@cs.rice.edu>
To: mflatt@cs.rice.edu, robby@cs.rice.edu, plt-gnats@cs.rice.edu
Cc:  Subject: Re: all/604: newly created eventspace's threads not under custodi
Date: Fri, 8 May 1998 20:05:41 -0500 (CDT)

 Responding To:    Matthew Flatt <mflatt@cs.rice.edu>
 Original Date:    Fri, 8 May 1998 19:32:14 -0500 (CDT)
 > 
 > Quoting Robert Bruce Findler:
 > > 
 > > Newly created eventspace's threads are not under the control of the 
 > > current 
 > > custodian (ie they cannot be killed)
 > > 	
 > 
 > I see this bug. How soon do you need it fixed?
 
 Well, not tonight :)
 
 It does need to be fixed before the release, since this breaks breaking. I 
 only gave it a high priority to distinguish it from other non-release 
 related things.
 
 I would like to see it high on your priority list, since I am (slightly) 
 blocked on it.
 
 Thanks,
 Robby

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Wed May 13 19:33:10 1998
State-Changed-Why:
Fixed and released.
 
 
>Unformatted:
