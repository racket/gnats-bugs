From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Jul 13 11:59:40 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p6DFxbmk009486
	for <bugs@bugs.plt-scheme.org>; Wed, 13 Jul 2011 11:59:37 -0400
Message-Id: <201107131559.p6DFxYdK009480@champlain.ccs.neu.edu>
Date: Wed, 13 Jul 2011 11:59:34 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Feature request: string escape errors

>Number:         12040
>Category:       mzscheme
>Synopsis:       Feature request: string escape errors
>Class:          change-request
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Jul 13 12:00:01 -0400 2011
>Last-Modified:  Tue Jul 19 05:37:00 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Any
>Description:
I just realized what's been bugging be about read errors in string
parsing in particular: such errors are detected and aborted at the
"correct" time, but that usually leads to confused state.  See below
for example, for a sad story that I'm sure is very familiar.

(DrRacket avoids it by aborting the whole line.)
>How-To-Repeat:
> (define x "foo\Nbar")
stdin::10: read: unknown escape sequence \N in string
> reference to undefined identifier: bar
> x
hello?
anyone?
(define x "foo\nbar")
")\nx\nhello?\nanyone?\n(define x "
> reference to undefined identifier: foonbar
> x
(exit)
^D
stdin::58: read: expected a closing '"'
> ^D
>Fix:
