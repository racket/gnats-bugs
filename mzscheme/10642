From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Dec  5 15:14:31 2009
Received: from mail-yx0-f192.google.com (mail-yx0-f192.google.com [209.85.210.192])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id nB5KEQik030702
	for <bugs@bugs.plt-scheme.org>; Sat, 5 Dec 2009 15:14:26 -0500
Message-Id: <200912052014.nB5KEONC030693@champlain.ccs.neu.edu>
Date: Sat, 5 Dec 2009 15:14:24 -0500
From: wmfarr@gmail.com
To: bugs@plt-scheme.org
Subject: Typos in the scribblings for scheme/vector (svn diff attached)

>Number:         10642
>Category:       mzscheme
>Synopsis:       Typos in the scribblings for scheme/vector (svn diff attached)
>Class:          doc-bug
>Responsible:    eli
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Dec 05 15:16:01 -0500 2009
>Closed-Date:    Sat Dec 05 19:12:52 -0500 2009
>Last-Modified:  Sat Dec 05 19:12:52 -0500 2009
>Originator:     Will M. Farr
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.3.3 (Latest SVN)
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5
>Description:
There are some typos in the Scribblings for scheme/vector---some of the argument/return types are list? instead of vector? and there are a couple of "then"s missing in the exception parts of the contract.  The following diff contains a fix, and typesets cleanly on my system:

Index: vectors.scrbl
===================================================================
--- vectors.scrbl	(revision 17141)
+++ vectors.scrbl	(working copy)
@@ -184,7 +184,7 @@
v
]}

-@defproc[(vector-append [lst list?] ...) list?]{
+@defproc[(vector-append [vec vector?] ...) vector?]{

Creates a fresh vector that contains all
of the elements of the given vectors in order. 
@@ -194,19 +194,19 @@
}


-@defproc[(vector-take [vec vector?] [pos exact-nonnegative-integer?]) list?]{
+@defproc[(vector-take [vec vector?] [pos exact-nonnegative-integer?]) vector?]{
Returns a fresh vector whose elements are the first @scheme[pos] elements of
@scheme[vec].  If @scheme[vec] has fewer than
-@scheme[pos] elements, the @exnraise[exn:fail:contract].
+@scheme[pos] elements, then the @exnraise[exn:fail:contract].

@mz-examples[#:eval vec-eval
 (vector-take #(1 2 3 4) 2)
]}

-@defproc[(vector-take-right [vec vector?] [pos exact-nonnegative-integer?]) list?]{
+@defproc[(vector-take-right [vec vector?] [pos exact-nonnegative-integer?]) vector?]{
Returns a fresh vector whose elements are the last @scheme[pos] elements of
@scheme[vec].  If @scheme[vec] has fewer than
-@scheme[pos] elements, the @exnraise[exn:fail:contract].
+@scheme[pos] elements, then the @exnraise[exn:fail:contract].

@mz-examples[#:eval vec-eval
 (vector-take-right #(1 2 3 4) 2)
@@ -215,7 +215,7 @@
@defproc[(vector-drop [vec vector?] [pos exact-nonnegative-integer?]) vector?]{
Returns a fresh vector whose elements are the elements of @scheme[vec]
 after the first @scheme[pos] elements.  If @scheme[vec] has fewer
- than @scheme[pos] elements, the @exnraise[exn:fail:contract].
+ than @scheme[pos] elements, then the @exnraise[exn:fail:contract].

@mz-examples[#:eval vec-eval
 (vector-drop #(1 2 3 4) 2)
@@ -224,7 +224,7 @@
@defproc[(vector-drop-right [vec vector?] [pos exact-nonnegative-integer?]) vector?]{
Returns a fresh vector whose elements are the elements of @scheme[vec]
 before the first @scheme[pos] elements.  If @scheme[vec] has fewer
- than @scheme[pos] elements, the @exnraise[exn:fail:contract].
+ than @scheme[pos] elements, then the @exnraise[exn:fail:contract].

@mz-examples[#:eval vec-eval
 (vector-drop-right #(1 2 3 4) 2)
@@ -288,11 +288,11 @@
]}


-@defproc[(vector-count [proc procedure?] [lst list?] ...+)
-         list?]{
+@defproc[(vector-count [proc procedure?] [vec vector?] ...+)
+         exact-nonnegative-integer?]{

-Returns @scheme[(vector-length (vector-filter proc lst ...))], but
-without building the intermediate list.
+Returns the number of elements of the @scheme[vec ...] on which
+@scheme[proc] does not evaluate to @scheme[#f].

@mz-examples[#:eval vec-eval
(vector-count even? #(1 2 3 4 5))
>How-To-Repeat:
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "eli" by eli at Sat, 05 Dec 2009 19:12:52 -0500
Reason>>> Fixing.

State changed from "open" to "closed" by eli at Sat, 05 Dec 2009 19:12:52 -0500
Reason>>> Fixed in svn.

