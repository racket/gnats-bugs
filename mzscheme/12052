From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jul 17 18:33:03 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p6HMWxU6019387
	for <bugs@bugs.plt-scheme.org>; Sun, 17 Jul 2011 18:32:59 -0400
Message-Id: <201107172232.p6HMWtku019382@champlain.ccs.neu.edu>
Date: Sun, 17 Jul 2011 18:32:55 -0400
From: ryanc@racket-lang.org
To: bugs@racket-lang.org
Subject: racket crashes on out of memory

>Number:         12052
>Category:       mzscheme
>Synopsis:       racket crashes on out of memory
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Jul 17 18:36:01 -0400 2011
>Last-Modified:  Tue Jul 19 05:39:44 -0400 2011
>Originator:     Ryan Culpepper
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.2.3--2011-07-17(007c698/g)
>Environment:
unix "Linux artichoke 2.6.38-10-generic #46-Ubuntu SMP Tue Jun 28 15:07:17 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 213946576

Collections:
("/home/ryan/.racket/5.1.2.3/collects"
 (non-existent-path))
("/home/ryan/projects/racket/collects"
 (".gitignore" "slideshow" "config" "lang" "mrlib" "teachpack" "version" "dynext" "eopl" "trace" "racklog" "r6rs" "tex2page" "games" "rackunit" "guibuilder" "srfi" "schemeunit" "drracket" "picturing-programs" "typed" "string-constants" "datalog" "xrepl" "algol60" "compiler" "sirmail" "unstable" "combinator-parser" "deinprogramm" "file" "texpict" "gui-debugger" "handin-server" "2htdp" "openssl" "scheme" "r5rs" "icons" "lazy" "mzcom" "mzlib" "readline" "browser" "web-server" "make" "mysterx" "info-domain" "embedded-gui" "data" "preprocessor" "help" "test-engine" "planet" "handin-client" "slatex" "repo-time-stamp" "sgl" "s-exp" "typed-scheme" "frtime" "stepper" "at-exp" "redex" "plai" "test-box-recovery" "htdp" "xml" "setup" "swindle" "raco" "macro-debugger" "mred" "srpersist" "parser-tools" "graphics" "hierlist" "net" "scriblib" "syntax-color" "plot" "defaults" "errortrace" "reader" "meta" "tests" "launcher" "framework" "ffi" "profile" "afm" "drscheme" "scribble" "waterworld" !
 "scribblings" "html" "racket" "wxme" "mzscheme" "honu" "syntax" "rnrs"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #f #t))
>Description:
Racket currently crashes when it runs out of memory, as opposed to printing an "out of memory" message and aborting.

This bug also affects the current release branch.
>How-To-Repeat:
~$ ulimit -v 100000
~$ ./projects/racket/bin/racket
Welcome to Racket v5.1.2.3.
> (let loop () (cons 'a (loop)))
SIGSEGV MAPERR si_code 1 fault on addr 0x7fffa1671ff8
Aborted

contrast with an older version of racket:
~$ racket 
Welcome to Racket v5.1.1.
> (let loop () (cons 'a (loop)))
Racket virtual machine has run out of memory; aborting
Aborted
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: ryanc@racket-lang.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12052: racket crashes on out of memory
Date: Sun, 17 Jul 2011 17:13:12 -0600

 I get an out-of-memory message on the machines I've tried.
 
 Can you get a stack trace for the crash on your machine?
 
 At Sun, 17 Jul 2011 18:36:02 -0400, ryanc@racket-lang.org wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12052
 > 
 > Reported by Ryan Culpepper for release: 5.1.2.3--2011-07-17(007c698/g)
 > 
 > *** Description:
 > Racket currently crashes when it runs out of memory, as opposed to printing an 
 > "out of memory" message and aborting.
 > 
 > This bug also affects the current release branch.
 > 
 > *** How to repeat:
 > ~$ ulimit -v 100000
 > ~$ ./projects/racket/bin/racket
 > Welcome to Racket v5.1.2.3.
 > > (let loop () (cons 'a (loop)))
 > SIGSEGV MAPERR si_code 1 fault on addr 0x7fffa1671ff8
 > Aborted
 > 
 > contrast with an older version of racket:
 > ~$ racket 
 > Welcome to Racket v5.1.1.
 > > (let loop () (cons 'a (loop)))
 > Racket virtual machine has run out of memory; aborting
 > Aborted
 
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: ryanc@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12052: racket crashes on out of memory
Date: Sun, 17 Jul 2011 19:48:22 -0600

 On 07/17/2011 05:13 PM, Matthew Flatt wrote:
 > I get an out-of-memory message on the machines I've tried.
 >
 > Can you get a stack trace for the crash on your machine?
 
 Here's the stack trace for the crash at the repl:
 
 #0  0x00007f2380457d05 in raise () from /lib/x86_64-linux-gnu/libc.so.6
 #1  0x00007f238045bab6 in abort () from /lib/x86_64-linux-gnu/libc.so.6
 #2  0x0000000000642cf6 in fault_handler (sn=<value optimized out>, 
 si=0x1dc00f0, ctx=<value optimized out>) at 
 ../../../racket/gc2/sighand.c:118
 #3  <signal handler called>
 #4  0x00007f238001de74 in ?? ()
 #5  0x00007f237d365970 in ?? ()
 #6  0x00007f237bffefa0 in ?? ()
 #7  0x00007fffee048070 in ?? ()
 #8  0x00007f238001de96 in ?? ()
 #9  0x0000000000000000 in ?? ()
 
 
 I also tried putting an equivalent program in a file ("bad.rkt"):
 
 #lang racket
 (define (go)
    (cons 'a (go)))
 (go)
 
 ryan@artichoke:/tmp/ryan$ ~/projects/racket/bin/racket bad.rkt
 SIGSEGV MAPERR si_code 1 fault on addr (nil)
 Aborted (core dumped)
 
 Then the backtrace is:
 
 #0  0x00007fb0bdd81d05 in raise () from /lib/x86_64-linux-gnu/libc.so.6
 #1  0x00007fb0bdd85ab6 in abort () from /lib/x86_64-linux-gnu/libc.so.6
 #2  0x0000000000642cf6 in fault_handler (sn=<value optimized out>, 
 si=0x1b6d0f0, ctx=<value optimized out>) at 
 ../../../racket/gc2/sighand.c:118
 #3  <signal handler called>
 #4  bc_alloc_std_block (gc=<value optimized out>, len=<value optimized 
 out>, dirty=1, type=<value optimized out>, expect_mprotect=1, 
 src_block=0x1bb29e8, alignment=<value optimized out>)
      at ../../../racket/gc2/block_cache.c:125
 #5  bc_alloc_std_page (gc=<value optimized out>, len=<value optimized 
 out>, dirty=1, type=<value optimized out>, expect_mprotect=1, 
 src_block=0x1bb29e8, alignment=<value optimized out>)
      at ../../../racket/gc2/block_cache.c:155
 #6  block_cache_alloc_page (gc=<value optimized out>, len=<value 
 optimized out>, dirty=1, type=<value optimized out>, expect_mprotect=1, 
 src_block=0x1bb29e8, alignment=<value optimized out>)
      at ../../../racket/gc2/block_cache.c:213
 #7  mmu_alloc_page (gc=<value optimized out>, len=<value optimized out>, 
 dirty=1, type=<value optimized out>, expect_mprotect=1, 
 src_block=0x1bb29e8, alignment=<value optimized out>)
      at ../../../racket/gc2/vm.c:130
 #8  malloc_pages (gc=<value optimized out>, len=<value optimized out>, 
 dirty=1, type=<value optimized out>, expect_mprotect=1, 
 src_block=0x1bb29e8, alignment=<value optimized out>)
      at ../../../racket/gc2/newgc.c:377
 #9  0x0000000000648a38 in GC_mark2 (const_p=0x7fb0bad47568, 
 gc=0x1b55830) at ../../../racket/gc2/newgc.c:2967
 #10 0x0000000000648fff in propagate_marks_worker (gc=0x1b55830) at 
 ../../../racket/gc2/newgc.c:3074
 #11 propagate_marks (gc=0x1b55830) at ../../../racket/gc2/newgc.c:3099
 #12 0x000000000064910f in propagate_marks_plus_ephemerons (gc=0x1b55830) 
 at ../../../racket/gc2/newgc.c:3106
 #13 0x0000000000645f20 in garbage_collect (gc=<value optimized out>, 
 force_full=<value optimized out>, switching_master=0, lmi=0x0) at 
 ../../../racket/gc2/newgc.c:4325
 #14 0x000000000064bc42 in gc_if_needed_account_alloc_size 
 (request_size_bytes=<value optimized out>, type=1) at 
 ../../../racket/gc2/newgc.c:834
 #15 allocate_big (request_size_bytes=<value optimized out>, type=1) at 
 ../../../racket/gc2/newgc.c:880
 #16 0x00000000005cdcd9 in scheme_copy_stack (b=0x0, base=0x7fb0b9e31178, 
 start=<value optimized out>, gc_var_stack_in=0x7fff893ce060) at 
 ../../../racket/gc2/../src/setjmpup.c:298
 #17 0x00000000005ce089 in scheme_setjmpup_relative (b=0x0, 
 base=0x7fb0b9e31178, start=0x7fff89bbfb00, c=0x0) at 
 ../../../racket/gc2/../src/setjmpup.c:541
 #18 0x000000000043e646 in scheme_handle_stack_overflow (k=0x4474b0 
 <do_eval_k>) at ../../../racket/gc2/../src/eval.c:394
 #19 0x0000000000444781 in scheme_do_eval (obj=0x7fb0b9e309c8, 
 num_rands=0, rands=0x7fb0b94e3b88, get_value=1) at 
 ../../../racket/gc2/../src/eval.c:2291
 #20 0x000000000044773a in _scheme_apply_from_native (rator=<value 
 optimized out>, argc=0, argv=<value optimized out>)
 #21 0x00007fb0b9d4aa62 in ?? ()
 #22 0x0000000000000000 in ?? ()
 
 
 I tried running the program above a number of times, and I did get the 
 correct error message occasionally, but infrequently---maybe about 10% 
 of the time.
 
 Ryan
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: ryanc@racket-lang.org, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12052: racket crashes on out of memory
Date: Sun, 17 Jul 2011 20:08:41 -0600

 Thanks! The second trace highlights how a new "block cache" layer
 (related to implementing places) didn't handle allocation failure.
 
 I've pushed a change. Does it fix the problem on your machine?
 
 At Sun, 17 Jul 2011 19:48:22 -0600, Ryan Culpepper wrote:
 > On 07/17/2011 05:13 PM, Matthew Flatt wrote:
 > > I get an out-of-memory message on the machines I've tried.
 > >
 > > Can you get a stack trace for the crash on your machine?
 > 
 > Here's the stack trace for the crash at the repl:
 > 
 > #0  0x00007f2380457d05 in raise () from /lib/x86_64-linux-gnu/libc.so.6
 > #1  0x00007f238045bab6 in abort () from /lib/x86_64-linux-gnu/libc.so.6
 > #2  0x0000000000642cf6 in fault_handler (sn=<value optimized out>, 
 > si=0x1dc00f0, ctx=<value optimized out>) at 
 > ../../../racket/gc2/sighand.c:118
 > #3  <signal handler called>
 > #4  0x00007f238001de74 in ?? ()
 > #5  0x00007f237d365970 in ?? ()
 > #6  0x00007f237bffefa0 in ?? ()
 > #7  0x00007fffee048070 in ?? ()
 > #8  0x00007f238001de96 in ?? ()
 > #9  0x0000000000000000 in ?? ()
 > 
 > 
 > I also tried putting an equivalent program in a file ("bad.rkt"):
 > 
 > #lang racket
 > (define (go)
 >    (cons 'a (go)))
 > (go)
 > 
 > ryan@artichoke:/tmp/ryan$ ~/projects/racket/bin/racket bad.rkt
 > SIGSEGV MAPERR si_code 1 fault on addr (nil)
 > Aborted (core dumped)
 > 
 > Then the backtrace is:
 > 
 > #0  0x00007fb0bdd81d05 in raise () from /lib/x86_64-linux-gnu/libc.so.6
 > #1  0x00007fb0bdd85ab6 in abort () from /lib/x86_64-linux-gnu/libc.so.6
 > #2  0x0000000000642cf6 in fault_handler (sn=<value optimized out>, 
 > si=0x1b6d0f0, ctx=<value optimized out>) at 
 > ../../../racket/gc2/sighand.c:118
 > #3  <signal handler called>
 > #4  bc_alloc_std_block (gc=<value optimized out>, len=<value optimized 
 > out>, dirty=1, type=<value optimized out>, expect_mprotect=1, 
 > src_block=0x1bb29e8, alignment=<value optimized out>)
 >      at ../../../racket/gc2/block_cache.c:125
 > #5  bc_alloc_std_page (gc=<value optimized out>, len=<value optimized 
 > out>, dirty=1, type=<value optimized out>, expect_mprotect=1, 
 > src_block=0x1bb29e8, alignment=<value optimized out>)
 >      at ../../../racket/gc2/block_cache.c:155
 > #6  block_cache_alloc_page (gc=<value optimized out>, len=<value 
 > optimized out>, dirty=1, type=<value optimized out>, expect_mprotect=1, 
 > src_block=0x1bb29e8, alignment=<value optimized out>)
 >      at ../../../racket/gc2/block_cache.c:213
 > #7  mmu_alloc_page (gc=<value optimized out>, len=<value optimized out>, 
 > dirty=1, type=<value optimized out>, expect_mprotect=1, 
 > src_block=0x1bb29e8, alignment=<value optimized out>)
 >      at ../../../racket/gc2/vm.c:130
 > #8  malloc_pages (gc=<value optimized out>, len=<value optimized out>, 
 > dirty=1, type=<value optimized out>, expect_mprotect=1, 
 > src_block=0x1bb29e8, alignment=<value optimized out>)
 >      at ../../../racket/gc2/newgc.c:377
 > #9  0x0000000000648a38 in GC_mark2 (const_p=0x7fb0bad47568, 
 > gc=0x1b55830) at ../../../racket/gc2/newgc.c:2967
 > #10 0x0000000000648fff in propagate_marks_worker (gc=0x1b55830) at 
 > ../../../racket/gc2/newgc.c:3074
 > #11 propagate_marks (gc=0x1b55830) at ../../../racket/gc2/newgc.c:3099
 > #12 0x000000000064910f in propagate_marks_plus_ephemerons (gc=0x1b55830) 
 > at ../../../racket/gc2/newgc.c:3106
 > #13 0x0000000000645f20 in garbage_collect (gc=<value optimized out>, 
 > force_full=<value optimized out>, switching_master=0, lmi=0x0) at 
 > ../../../racket/gc2/newgc.c:4325
 > #14 0x000000000064bc42 in gc_if_needed_account_alloc_size 
 > (request_size_bytes=<value optimized out>, type=1) at 
 > ../../../racket/gc2/newgc.c:834
 > #15 allocate_big (request_size_bytes=<value optimized out>, type=1) at 
 > ../../../racket/gc2/newgc.c:880
 > #16 0x00000000005cdcd9 in scheme_copy_stack (b=0x0, base=0x7fb0b9e31178, 
 > start=<value optimized out>, gc_var_stack_in=0x7fff893ce060) at 
 > ../../../racket/gc2/../src/setjmpup.c:298
 > #17 0x00000000005ce089 in scheme_setjmpup_relative (b=0x0, 
 > base=0x7fb0b9e31178, start=0x7fff89bbfb00, c=0x0) at 
 > ../../../racket/gc2/../src/setjmpup.c:541
 > #18 0x000000000043e646 in scheme_handle_stack_overflow (k=0x4474b0 
 > <do_eval_k>) at ../../../racket/gc2/../src/eval.c:394
 > #19 0x0000000000444781 in scheme_do_eval (obj=0x7fb0b9e309c8, 
 > num_rands=0, rands=0x7fb0b94e3b88, get_value=1) at 
 > ../../../racket/gc2/../src/eval.c:2291
 > #20 0x000000000044773a in _scheme_apply_from_native (rator=<value 
 > optimized out>, argc=0, argv=<value optimized out>)
 > #21 0x00007fb0b9d4aa62 in ?? ()
 > #22 0x0000000000000000 in ?? ()
 > 
 > 
 > I tried running the program above a number of times, and I did get the 
 > correct error message occasionally, but infrequently---maybe about 10% 
 > of the time.
 > 
 > Ryan
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12052: racket crashes on out of memory
Date: Sun, 17 Jul 2011 21:21:48 -0600

 On 07/17/2011 08:08 PM, Matthew Flatt wrote:
 > Thanks! The second trace highlights how a new "block cache" layer
 > (related to implementing places) didn't handle allocation failure.
 >
 > I've pushed a change. Does it fix the problem on your machine?
 
 Racket no longer crashes if I run the file example, but I still get the 
 crash if I run the original example at the repl. I've tried some more 
 variations:
 
 I get the correct message with "ulimit -v 120000" but the crash with 
 "ulimit -v 100000".
 
 The address varies. Here are some of the addresses I've seen:
    SIGSEGV MAPERR si_code 1 fault on addr 0x7fffd3fd1ff8
    SIGSEGV MAPERR si_code 1 fault on addr 0x7fff0c4f4fe8
    SIGSEGV MAPERR si_code 1 fault on addr 0x7fff99e37ff8
    SIGSEGV MAPERR si_code 1 fault on addr 0x7fffd3fdcff8
    SIGSEGV MAPERR si_code 1 fault on addr 0x7fff9435eff0
 In contrast, before your latest commit, the file example always caused a 
 crash with an address of (nil).
 
 I still get the crash when I run racket with "--no-jit". Here are the 
 first few stack frames of a "--no-jit" crash. After that are a few 
 thousand more calls to scheme_do_eval.
 
 #0  0x00007f3d47703d05 in raise () from /lib/x86_64-linux-gnu/libc.so.6
 #1  0x00007f3d47707ab6 in abort () from /lib/x86_64-linux-gnu/libc.so.6
 #2  0x0000000000642cf6 in fault_handler (sn=<value optimized out>, 
 si=0x28eb0f0, ctx=<value optimized out>) at 
 ../../../racket/gc2/sighand.c:118
 #3  <signal handler called>
 #4  scheme_do_eval (obj=0x7f3d44dd4b08, num_rands=-1, rands=0x0, 
 get_value=1) at ../../../racket/gc2/../src/eval.c:2266
 #5  0x0000000000445d82 in scheme_do_eval (obj=0x28c3050, 
 num_rands=<value optimized out>, rands=0x7f3d43475d88, get_value=<value 
 optimized out>) at ../../../racket/gc2/../src/eval.c:3146
 #6  0x0000000000445d82 in scheme_do_eval (obj=0x28c3050, 
 num_rands=<value optimized out>, rands=0x7f3d43475d98, get_value=<value 
 optimized out>) at ../../../racket/gc2/../src/eval.c:3146
 #7  0x0000000000445d82 in scheme_do_eval (obj=0x28c3050, 
 num_rands=<value optimized out>, rands=0x7f3d43475da8, get_value=<value 
 optimized out>) at ../../../racket/gc2/../src/eval.c:3146
 
 
 I get the correct error message when I switch to a tail-recursive loop, 
 ie (let loop ([x null]) (loop (cons 'a x))).
 
 I get the correct error message when I run racket with "-q". My 
 .racketrc file conditionally dynamic-requires readline/rep.
 
 I also get the correct error message when I run racket with "-e" and 
 pass the program on the command line. IIUC, it's also skipping .racketrc 
 in that case, so perhaps readline/rep is involved somehow.
 
 Finally, racket occasionally spontaneously aborts with the "out of 
 memory" message immediately when I start it. This happens with and 
 without the JIT enabled, under "ulimit -v 120000" as well as "ulimit -v 
 100000". It even occurs with the "-q" flag. Here's a backtrace from a 
 spontaneous "out of memory" run with "-q --no-jit", "ulimit -v 120000":
 
 Core was generated by `/home/ryan/projects/racket/bin/racket -q --no-jit'.
 Program terminated with signal 6, Aborted.
 #0  0x00007fb4d9db1d05 in raise () from /lib/x86_64-linux-gnu/libc.so.6
 (gdb) bt
 #0  0x00007fb4d9db1d05 in raise () from /lib/x86_64-linux-gnu/libc.so.6
 #1  0x00007fb4d9db5ab6 in abort () from /lib/x86_64-linux-gnu/libc.so.6
 #2  0x0000000000425841 in scheme_out_of_memory_abort () at 
 ../../../racket/gc2/../src/salloc.c:330
 #3  0x0000000000641f22 in out_of_memory () at 
 ../../../racket/gc2/newgc.c:309
 #4  0x000000000064216f in ofm_malloc (size=<value optimized out>) at 
 ../../../racket/gc2/newgc.c:320
 #5  0x0000000000642196 in ofm_malloc_zero (size=40) at 
 ../../../racket/gc2/newgc.c:326
 #6  0x000000000045ae9a in make_prim_closure (fun=0x630af0 
 <foreign_malloc_immobile_cell>, eternal=<value optimized out>, 
 name=0x6a326a "malloc-immobile-cell", mina=1, maxa=1, flags=<value 
 optimized out>,
      minr=1, maxr=1, closed=0, count=0, vals=0x0) at 
 ../../../racket/gc2/../src/fun.c:663
 #7  0x000000000045d301 in scheme_make_prim_w_arity (fun=<value optimized 
 out>, name=<value optimized out>, mina=<value optimized out>, 
 maxa=<value optimized out>) at ../../../racket/gc2/../src/fun.c:726
 #8  0x000000000063556d in scheme_init_foreign (env=0x7fb4d8a63368) at 
 xsrc/foreign.c:5142
 #9  0x000000000042c9a4 in place_instance_init 
 (stack_base=0x7fffcd3d9300, initial_main_os_thread=1) at 
 ../../../racket/gc2/../src/env.c:482
 #10 0x000000000042ede3 in scheme_engine_instance_init () at 
 ../../../racket/gc2/../src/env.c:285
 #11 0x000000000042ef37 in scheme_basic_env () at 
 ../../../racket/gc2/../src/env.c:217
 #12 0x00000000004243a4 in run_from_cmd_line (argc=0, 
 _argv=0x7fffcd3d9448, cont_run=0x423ae0 <cont_run>, mk_basic_env=<value 
 optimized out>) at ../../../racket/gc2/../cmdline.inc:1211
 #13 0x000000000042537d in main_after_stack (data=<value optimized out>) 
 at ../../../racket/gc2/../main.c:365
 #14 0x0000000000425a04 in do_main_stack_setup (no_auto_statics=<value 
 optimized out>, _main=0x425300 <main_after_stack>, data=<value optimized 
 out>) at ../../../racket/gc2/../src/salloc.c:194
 #15 scheme_main_stack_setup (no_auto_statics=<value optimized out>, 
 _main=0x425300 <main_after_stack>, data=<value optimized out>) at 
 ../../../racket/gc2/../src/salloc.c:296
 #16 0x00000000004253ce in main_after_dlls (argc=<value optimized out>, 
 argv=<value optimized out>) at ../../../racket/gc2/../main.c:302
 #17 main (argc=<value optimized out>, argv=<value optimized out>) at 
 ../../../racket/gc2/../main.c:278
 
 Ryan

