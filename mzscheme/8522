From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Feb 11 18:15:02 2007
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.172])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l1BNF1mG009319
	for <bugs@bugs.plt-scheme.org>; Sun, 11 Feb 2007 18:15:01 -0500
Message-Id: <200702112314.l1BNEwaQ009310@champlain.ccs.neu.edu>
Date: Sun, 11 Feb 2007 18:14:58 -0500
From: gherson@snet.net
To: bugs@plt-scheme.org
Subject: structures unserializable 

>Number:         8522
>Category:       mzscheme
>Synopsis:       structures unserializable
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Feb 11 18:20:01 -0500 2007
>Closed-Date:    Fri May 04 05:38:53 -0400 2007
>Last-Modified:  Fri May 04 05:38:53 -0400 2007
>Originator:     George Herson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        360
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
(("C:\\Program Files\\PLT\\doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 160096256

Collections:
(("C:\\Documents and Settings\\gh32\\Application Data\\PLT Scheme\\360\\collects" non-existent-path) ("C:\\Program Files\\PLT\\collects" "afm" "algol60" "browser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "readline" "setup" "sgl" "slatex" "slibinit" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tex2page" "texpict" "trace" "version" "web-server" "xml"))
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Pretty Big (includes MrEd and Advanced Student)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
1. I can't seem to be able to print/display/write structures' data at all. Ie, (print-struct #t) as no effect. 2. This is also true when using define-serializable-struct. Please see below.
>How-To-Repeat:
(require (lib "serialize.ss"))
(print-struct #t) ; 1. Seems to have no effect: Print/display/write shows only #<struct:name-of-struct>.  This is contrary to what happens after (print-hash-table #t)--(print hash-table-name) actually prints hash table data, and the data is READable as structured data.

; Below taken from first example in the serialize.ss doc.

(define-serializable-struct point (x y))
(define ps (serialize (make-point 1 2)))
(deserialize ps) ; => (make-point 1 2).   

2. But instead of (make-point 1 2), only <struct:point> is shown from the last command above.
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: gherson@snet.net, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/8522: structures unserializable 
Date: Mon, 12 Feb 2007 08:29:33 +0800

 At Sun, 11 Feb 2007 18:20:01 -0500, gherson@snet.net wrote:
 > 1. I can't seem to be able to print/display/write structures' data at all. Ie, 
 > (print-struct #t) as no effect. 2. This is also true when using define-
 > serializable-struct. Please see below.
 
 Having `write' show the content of a struct is independent of whether
 the struct is serializable by``serialize' and `deserialize'.
 
 The simplest way to make the content visible via `write' is to make the
 struct transparent (to all inspectors) by supplying #f as the struct
 type's inspector:
 
   (define-struct point (x y) #f)
   (print-struct #t)
   (make-point 1 2)
 
 
 > (define-serializable-struct point (x y))
 > (define ps (serialize (make-point 1 2)))
 > (deserialize ps) ; => (make-point 1 2).   
 
 FWIW, our documentation convention is to put expressions after "=>',
 instead of external representations.
 
 Matthew
 

State changed from "open" to "closed" by eli at Fri, 04 May 2007 05:38:53 -0400
Reason>>> not a bug

