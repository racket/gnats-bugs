From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Mar 30 06:31:51 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q2UAVm0I002914
	for <bugs@bugs.plt-scheme.org>; Fri, 30 Mar 2012 06:31:48 -0400
Message-Id: <201203301031.q2UAViV6002907@champlain.ccs.neu.edu>
Date: Fri, 30 Mar 2012 06:31:44 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Missing a function to "parse" argument list

>Number:         12666
>Category:       mzscheme
>Synopsis:       Missing a function to "parse" argument list
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Mar 30 06:32:01 -0400 2012
>Last-Modified:  Wed Apr 18 16:44:58 -0400 2012
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Any
>Description:
It is sometimes useful to have argument lists as data.  This is
something that I used often enough that it's in swindle, as `mapply'
which takes a function and a list of lists of arguments for it.  The
thing is that this is not possible to do with keyword arguments, unless
I write a mini parser for them.  To clarify, this is doing, in a
horrible way, the thing that I'm talking about:

  -> (define (keyword-args args)
       (eval (cons (make-keyword-procedure list)
                   (map (Î» (a) (if (keyword? a) a `',a)) args))))
  -> (keyword-args '(1 2 #:x 3))
  '((#:x) (3) 1 2)

It's a cute exercise to figure out that it's not possible to do this,
and then it's obvious that another way to get what I want would be to
use a macro to create the argument-list data.  But the same logic could
apply to plain argument lists (that is, `rest' arguments could be
packaged in some way that is not lists, and instead you'd use macros
when you want to apply a function on a list).
>How-To-Repeat:
>Fix:
