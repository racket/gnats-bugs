From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar 17 23:03:26 2008
Received: from wr-out-0506.google.com (wr-out-0506.google.com [64.233.184.239])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m2I33Qqa010442
	for <bugs@bugs.plt-scheme.org>; Mon, 17 Mar 2008 23:03:26 -0400
Message-Id: <200803180303.m2I334cQ010436@champlain.ccs.neu.edu>
Date: Mon, 17 Mar 2008 23:03:04 -0400
From: samth@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: `except-out' should accept provide expanders

>Number:         9256
>Category:       mzscheme
>Synopsis:       `except-out' should accept provide expanders
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Mar 17 23:05:01 -0400 2008
>Closed-Date:    Tue Mar 18 09:38:11 -0400 2008
>Last-Modified:  Tue Mar 18 09:40:01 -0400 2008
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.18-svn17mar2008
>Environment:
unix "Linux punge 2.6.22-14-386 #1 Tue Feb 12 07:12:19 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 131214444

Collections:
(("/home/samth/scheme" "infix4.diff" "info-domain" "new-match" "beamer" "trace-syntax.diff") ("/home/samth/work/csu660/collects" ".svn" "CSU660" "handin-server" "typed-scheme" "info-domain" "svn.diff") ("/home/samth/.plt-scheme/3.99.0.18/collects" non-existent-path) ("/home/samth/sw/plt4/collects" ".svn" "tex2page" "string-constants" "wxme" "planet" "mzcom" "drscheme" "s-exp" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "scribblings" "test-box-recovery" "syntax-color" "srfi" "algol60" "dynext" "make" "plot" "file" "lang" "web-server" "openssl" "macro-debugger" "scribble" "frtime" "mred" "combinator-parser" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "scheme" "config" "gui-debugger" "defaults" "icons" "handin-client" "lazy" "texpict" "browser" "teachpack" "rnrs" "parser-tools" "waterworld" "r5rs" "games" "honu-module" "eopl" "tests" "html" "handin-server" "swindle" "repos-time-stamp" "little-helper" "compiler" "embedded-gui" "profj" "stepper" "readline"!
  "hierlist" "sgl" "version" "preprocessor" "net" "syntax" "help" "htdch" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "typed-scheme"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #()))
>Description:
The following should work:

#lang scheme
(define-struct X (y))
(provide (except-out (all-defined-out)
                     (struct X)))
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: samth@ccs.neu.edu, bugs@plt-scheme.org
Cc: matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9256: `except-out' should accept provide expanders
Date: Mon, 17 Mar 2008 23:30:43 -0400

 On Mar 17, samth@ccs.neu.edu wrote:
 > The following should work:
 > 
 > #lang scheme
 > (define-struct X (y))
 > (provide (except-out (all-defined-out)
 >                      (struct X)))
 
 Not as documented (and not as implemented, of course).
 
 I think that what you want is `subtract-out' -- see the code that is
 commented out in "collects/scheme/provide.ss", and the documentation
 is below.  I removed it after a short discussion with Matthew, where
 neither of us saw a use for such a form.  Matthew -- perhaps this is
 useful after all?
 
   @defsubform[(subtract-out provide-spec subtracted-spec ...)]{
     Like @scheme[provide-spec], but omitting exports that are provided
     by one of the @scheme[subtracted-spec]s.  Note that this form is not
     useful by itself: the specified bindings have already been required
     so they have no clashes.}
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Sam TH" <samth@ccs.neu.edu>
To: "Eli Barzilay" <eli@barzilay.org>
Cc: bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9256: `except-out' should accept provide expanders
Date: Tue, 18 Mar 2008 00:18:16 -0400

 On Mon, Mar 17, 2008 at 11:30 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Mar 17, samth@ccs.neu.edu wrote:
 >  > The following should work:
 >  >
 >  > #lang scheme
 >  > (define-struct X (y))
 >  > (provide (except-out (all-defined-out)
 >  >                      (struct X)))
 >
 >  Not as documented (and not as implemented, of course).
 
 Right, this was a feature request.
 
 >  I think that what you want is `subtract-out' -- see the code that is
 >  commented out in "collects/scheme/provide.ss", and the documentation
 >  is below.  I removed it after a short discussion with Matthew, where
 >  neither of us saw a use for such a form.  Matthew -- perhaps this is
 >  useful after all?
 >
 >   @defsubform[(subtract-out provide-spec subtracted-spec ...)]{
 >     Like @scheme[provide-spec], but omitting exports that are provided
 >     by one of the @scheme[subtracted-spec]s.  Note that this form is not
 >     useful by itself: the specified bindings have already been required
 >     so they have no clashes.}
 
 I don't see why `except-out' shouldn't just have this behavior -
 there's no need for two forms here.
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eli Barzilay <eli@barzilay.org>
To: "Sam TH" <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9256: `except-out' should accept provide expanders
Date: Tue, 18 Mar 2008 05:56:47 -0400

 On Mar 18, Sam TH wrote:
 > On Mon, Mar 17, 2008 at 11:30 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 
 > >  I think that what you want is `subtract-out' -- see the code that
 > >  is commented out in "collects/scheme/provide.ss", and the
 > >  documentation is below.  I removed it after a short discussion
 > >  with Matthew, where neither of us saw a use for such a form.
 > >  Matthew -- perhaps this is useful after all?
 > >
 > >   @defsubform[(subtract-out provide-spec subtracted-spec ...)]{
 > >     Like @scheme[provide-spec], but omitting exports that are provided
 > >     by one of the @scheme[subtracted-spec]s.  Note that this form is not
 > >     useful by itself: the specified bindings have already been required
 > >     so they have no clashes.}
 > 
 > I don't see why `except-out' shouldn't just have this behavior -
 > there's no need for two forms here.
 
 How do you propose to distinguish these two:
 
   (except-out (all-defined-out) foo)
 
   (subtract-out (all-defined-out) foo)
 
 ?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9256: `except-out' should accept provide expanders
Date: Tue, 18 Mar 2008 06:12:28 -0600

 At Tue, 18 Mar 2008 05:56:47 -0400, Eli Barzilay wrote:
 > On Mar 18, Sam TH wrote:
 > > On Mon, Mar 17, 2008 at 11:30 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > 
 > > >  I think that what you want is `subtract-out' -- see the code that
 > > >  is commented out in "collects/scheme/provide.ss", and the
 > > >  documentation is below.  I removed it after a short discussion
 > > >  with Matthew, where neither of us saw a use for such a form.
 > > >  Matthew -- perhaps this is useful after all?
 > > >
 > > >   @defsubform[(subtract-out provide-spec subtracted-spec ...)]{
 > > >     Like @scheme[provide-spec], but omitting exports that are provided
 > > >     by one of the @scheme[subtracted-spec]s.  Note that this form is not
 > > >     useful by itself: the specified bindings have already been required
 > > >     so they have no clashes.}
 > > 
 > > I don't see why `except-out' shouldn't just have this behavior -
 > > there's no need for two forms here.
 > 
 > How do you propose to distinguish these two:
 > 
 >   (except-out (all-defined-out) foo)
 > 
 >   (subtract-out (all-defined-out) foo)
 > 
 > ?
 
 Shouldn't the latter be written like this?:
 
     (subtract-out (all-defined-out) (all-from-out foo))
 
 In other words, if we generalize `except-out' to have arbitrary
 provide-specs for the exceptions, then I think we do get
 `subtract-out'. This seems like a good idea to me.
 
 
 Just to be clear, Sam's original example would need to use `struct-out'
 instead of `struct':
 
    (provide (except-out (all-defined-out)
                         (struct-out X)))
 
 
 Meanwhile, trying to generalize `except-in' the same way doesn't seem
 to work, which means that we still need both `except-in' and
 `subtract-in'.
 
 Matthew
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Eli Barzilay <eli@barzilay.org>, "Sam TH" <samth@ccs.neu.edu>,
        bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        awick@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        dalev@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9256: `except-out' should accept provide expanders
Date: Tue, 18 Mar 2008 08:20:54 -0400

 On a related but different note: not too long ago K Fisher & Ramsey  
 wrote a paper on manipulating signatures as if they were sets. (1) I  
 think the paper may have some hints for this general area. (2) You  
 may have a short pearl on this topic. -- Matthias
 
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9256: `except-out' should accept provide expanders
Date: Tue, 18 Mar 2008 09:22:53 -0400

 On Mar 18, Matthew Flatt wrote:
 > At Tue, 18 Mar 2008 05:56:47 -0400, Eli Barzilay wrote:
 > > On Mar 18, Sam TH wrote:
 > > > On Mon, Mar 17, 2008 at 11:30 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > > 
 > > > >  I think that what you want is `subtract-out' -- see the code that
 > > > >  is commented out in "collects/scheme/provide.ss", and the
 > > > >  documentation is below.  I removed it after a short discussion
 > > > >  with Matthew, where neither of us saw a use for such a form.
 > > > >  Matthew -- perhaps this is useful after all?
 > > > >
 > > > >   @defsubform[(subtract-out provide-spec subtracted-spec ...)]{
 > > > >     Like @scheme[provide-spec], but omitting exports that are provided
 > > > >     by one of the @scheme[subtracted-spec]s.  Note that this form is not
 > > > >     useful by itself: the specified bindings have already been required
 > > > >     so they have no clashes.}
 > > > 
 > > > I don't see why `except-out' shouldn't just have this behavior -
 > > > there's no need for two forms here.
 > > 
 > > How do you propose to distinguish these two:
 > > 
 > >   (except-out (all-defined-out) foo)
 > > 
 > >   (subtract-out (all-defined-out) foo)
 > > 
 > > ?
 > 
 > Shouldn't the latter be written like this?:
 > 
 >     (subtract-out (all-defined-out) (all-from-out foo))
 
 (Duh...)
 
 
 > In other words, if we generalize `except-out' to have arbitrary
 > provide-specs for the exceptions, then I think we do get
 > `subtract-out'. This seems like a good idea to me.
 
 Yes.
 
 
 > Just to be clear, Sam's original example would need to use `struct-out'
 > instead of `struct':
 > 
 >    (provide (except-out (all-defined-out)
 >                         (struct-out X)))
 > 
 > Meanwhile, trying to generalize `except-in' the same way doesn't seem
 > to work, which means that we still need both `except-in' and
 > `subtract-in'.
 
 Why not?
 
 Also, how about making `{except,only}-{in,out}' deal with regexps?
 That will eliminate the need for `matching-identifiers-{in,out}'.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9256: `except-out' should accept provide expanders
Date: Tue, 18 Mar 2008 07:33:05 -0600

 At Tue, 18 Mar 2008 09:22:53 -0400, Eli Barzilay wrote:
 > > > How do you propose to distinguish these two:
 > > > 
 > > > ?
 > > 
 > > Shouldn't the latter be written like this?:
 > > 
 > >     (subtract-out (all-defined-out) (all-from-out foo))
 > 
 > (Duh...)
 > 
 > 
 > > In other words, if we generalize `except-out' to have arbitrary
 > > provide-specs for the exceptions, then I think we do get
 > > `subtract-out'. This seems like a good idea to me.
 > 
 > Yes.
 > 
 > 
 > > Just to be clear, Sam's original example would need to use `struct-out'
 > > instead of `struct':
 > > 
 > >    (provide (except-out (all-defined-out)
 > >                         (struct-out X)))
 > > 
 > > Meanwhile, trying to generalize `except-in' the same way doesn't seem
 > > to work, which means that we still need both `except-in' and
 > > `subtract-in'.
 > 
 > Why not?
 
 These two really are different:
 
    (except-in .... foo)
    (subtract-in .... foo)
 
 and there's no `require-spec' that lets you just list identifiers
 (which wouldn't make sense).
 
 > Also, how about making `{except,only}-{in,out}' deal with regexps?
 > That will eliminate the need for `matching-identifiers-{in,out}'.
 
 That doesn't seem to me like the same class of generalization, and I
 think it's better to have the regexp forms separate, but I have no
 stronger argument than personal taste.
 
 Matthew
 

State changed from "open" to "closed" by mflatt at Tue, 18 Mar 2008 09:38:11 -0400
Reason>>> except-out generalized

From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "Sam TH" <samth@ccs.neu.edu>, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, robby@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, sowens@plt-scheme.org,
        kathyg@plt-scheme.org, awick@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, dalev@plt-scheme.org, ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9256: `except-out' should accept provide expanders
Date: Tue, 18 Mar 2008 09:38:19 -0400

 On Mar 18, Matthew Flatt wrote:
 > At Tue, 18 Mar 2008 09:22:53 -0400, Eli Barzilay wrote:
 > > > 
 > > > Meanwhile, trying to generalize `except-in' the same way doesn't seem
 > > > to work, which means that we still need both `except-in' and
 > > > `subtract-in'.
 > > 
 > > Why not?
 > 
 > These two really are different:
 > 
 >    (except-in .... foo)
 >    (subtract-in .... foo)
 > 
 > and there's no `require-spec' that lets you just list identifiers
 > (which wouldn't make sense).
 
 Well, that's exactly what I was thinking of -- something like:
 
   (except-in ... (all-from-in foo))
 
 where `all-from-in' is a kind of a no-op form unless used like that.
 
 
 > > Also, how about making `{except,only}-{in,out}' deal with regexps?
 > > That will eliminate the need for `matching-identifiers-{in,out}'.
 > 
 > That doesn't seem to me like the same class of generalization, and I
 > think it's better to have the regexp forms separate, but I have no
 > stronger argument than personal taste.
 
 (I agree...  Just checking if you prefer to overload functionality on
 existing forms or have more specialized forms.  I thought that you
 preferred the latter, and the `except-in' generalization is a step
 towards the former.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
