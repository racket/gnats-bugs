From apache@plt-scheme.org Wed Nov 29 17:32:38 2006
Received: from py-out-1112.google.com (py-out-1112.google.com [64.233.166.179])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id kATMWbCZ009120
	for <bugs@bugs.plt-scheme.org>; Wed, 29 Nov 2006 17:32:37 -0500
Message-Id: <200611292232.kATMWaJC009114@champlain.ccs.neu.edu>
Date: Wed, 29 Nov 2006 17:32:36 -0500
From: jensaxel@soegaard.net
To: bugs@plt-scheme.org
Subject: The syntax-checker and unbound variables.

>Number:         8414
>Category:       mzscheme
>Synopsis:       The syntax-checker and unbound variables.
>Class:          change-request
>Responsible:    mflatt
>Notify-List:    mflatt@plt-scheme.org
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Nov 29 17:35:01 -0500 2006
>Last-Modified:  Wed Dec 27 14:50:37 -0500 2006
>Originator:     Jens Axel SÃ¸gaard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        360.2-svn29nov2006
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
(("C:\\Programmer\\PLT-FULL-360.2\\doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 74784768

Collections:
(("C:\\Documents and Settings\\js\\Application Data\\PLT Scheme\\360.2\\collects" non-existent-path) ("C:\\Programmer\\PLT-FULL-360.2\\collects" "afm" "algol60" "browser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjBoxes" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "scribble" "setup" "sgl" "sirmail" "skipper" "slatex" "slibinit" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-suite" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-server" "xelda" "xml"))
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Pretty Big (includes MrEd and Advanced Student)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
In the the Pretty Big language hitting "Check Syntax" will color
all unbound variables red. This it quite handy, when rewriting
larger amounts of code.

Example:

  ; both bar and baz are colored red
  (+ bar baz)

In the module language, only the first unbound variable is colored red,
and a Check Syntax error message appear. In the case of the "unbound variable"
error message, would it be possible to color all unbound variables at once?

Example:

  ; baz is not colored red
  (module foo mzscheme
     (+ bar baz))

  
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: jensaxel@soegaard.net, bugs@plt-scheme.org
Cc: eli@plt-scheme.org, robby@plt-scheme.org,
        John Clements <clements@plt-scheme.org>
Subject: Re: [plt-bug] all/8414: The syntax-checker and unbound variables.
Date: Fri, 1 Dec 2006 10:32:02 -0800

 On Nov 29, 2006, at 2:35 PM, jensaxel@soegaard.net wrote:
 
 > Example:
 >
 >   ; both bar and baz are colored red
 >   (+ bar baz)
 >
 > In the module language, only the first unbound variable is colored  
 > red,
 > and a Check Syntax error message appear. In the case of the  
 > "unbound variable"
 > error message, would it be possible to color all unbound variables  
 > at once?
 >
 > Example:
 >
 >   ; baz is not colored red
 >   (module foo mzscheme
 >      (+ bar baz))
 
 <qualified>
 
 As I understand it, I believe this is something of a FAQ.
 
 As I understand it, the syntax checker works on the result of  
 expansion.  The problem is that in a module, expansion fails when  
 unbound variables occur.  This means that check syntax can't even get  
 the expanded source to run its checks.
 
 As I understand it, there's no obvious solution to this problem,  
 short of decomposing mzscheme's compiler into a two-pass system with  
 an explicit hook for check syntax in between the two.
 
 As I understand it, hope this helps!
 
 As I understand it, John Clements
 
 </qualified>
From: Robby Findler <robby@cs.uchicago.edu>
To: John Clements <clements@brinckerhoff.org>
Cc: =?ISO-8859-1?Q?Jens_Axel_S=F8gaard?= <jensaxel@soegaard.net>,
        bugs@plt-scheme.org, eli@plt-scheme.org, robby@plt-scheme.org,
        John Clements <clements@plt-scheme.org>,
        Matthew Flatt <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/8414: The syntax-checker and unbound variables.
Date: Fri, 1 Dec 2006 13:34:17 -0600

 As I understand it, it is possible for a syntax error to report  
 multiple locations so, as I understand it, mzscheme's error messages  
 could, as I understand it, report multiple (as) source (I) locations  
 (understand) for (it) unbound ids in a module.
 
 Robby
 
 On Dec 1, 2006, at 12:32 PM, John Clements wrote:
 
 >
 > On Nov 29, 2006, at 2:35 PM, jensaxel@soegaard.net wrote:
 >
 >> Example:
 >>
 >>   ; both bar and baz are colored red
 >>   (+ bar baz)
 >>
 >> In the module language, only the first unbound variable is colored  
 >> red,
 >> and a Check Syntax error message appear. In the case of the  
 >> "unbound variable"
 >> error message, would it be possible to color all unbound variables  
 >> at once?
 >>
 >> Example:
 >>
 >>   ; baz is not colored red
 >>   (module foo mzscheme
 >>      (+ bar baz))
 >
 > <qualified>
 >
 > As I understand it, I believe this is something of a FAQ.
 >
 > As I understand it, the syntax checker works on the result of  
 > expansion.  The problem is that in a module, expansion fails when  
 > unbound variables occur.  This means that check syntax can't even  
 > get the expanded source to run its checks.
 >
 > As I understand it, there's no obvious solution to this problem,  
 > short of decomposing mzscheme's compiler into a two-pass system  
 > with an explicit hook for check syntax in between the two.
 >
 > As I understand it, hope this helps!
 >
 > As I understand it, John Clements
 >
 > </qualified>
 >
 

Responsible changed from "nobody" to "robby" by eli at Wed, 27 Dec 2006 14:49:12 -0500
Reason>>> CCint Matthew too


Responsible changed from "robby" to "mflatt" by robby at Wed, 27 Dec 2006 14:50:37 -0500
Reason>>> This is really an issue of the syntax error raised by `module'.

