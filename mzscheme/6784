From nowgate@yahoo.com Mon Mar 29 15:14:32 2004
Received: from localhost (p17-142.tnt3.ij.net [209.4.17.142])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id i2TKETmv009761
	for <bugs>; Mon, 29 Mar 2004 15:14:31 -0500
Message-Id: <200403292014.i2TKETmv009761@champlain.ccs.neu.edu>
Date: Mon, 29 Mar 2004 15:14:29 -0500
From: Michael Rice <nowgate@yahoo.com>
To: bugs@plt-scheme.org
Subject: define-syntax for method macro in Dybvig

>Number:         6784
>Category:       mzscheme
>Synopsis:       define-syntax for method macro in Dybvig
>Class:          not-a-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Mar 29 15:15:01 -0500 2004
>Last-Modified:  Tue Mar 30 20:45:01 -0500 2004
>Originator:     Michael Rice
>Organization:
titan
>Submitter-Id:   unknown
>Release:        206p1
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 1" (win32\i386) (get-display-depth) = 16
Docs Installed:
("C:\\Program Files\\PLT\\collects\\doc\\tour" "C:\\Program Files\\PLT\\collects\\doc\\tools" "C:\\Program Files\\PLT\\collects\\doc\\tex2page" "C:\\Program Files\\PLT\\collects\\doc\\teachpack" "C:\\Program Files\\PLT\\collects\\doc\\t-y-scheme" "C:\\Program Files\\PLT\\collects\\doc\\srfi" "C:\\Program Files\\PLT\\collects\\doc\\r5rs" "C:\\Program Files\\PLT\\collects\\doc\\profj-intermediate" "C:\\Program Files\\PLT\\collects\\doc\\profj-beginner" "C:\\Program Files\\PLT\\collects\\doc\\profj-advanced" "C:\\Program Files\\PLT\\collects\\doc\\mzscheme" "C:\\Program Files\\PLT\\collects\\doc\\mzlib" "C:\\Program Files\\PLT\\collects\\doc\\mzc" "C:\\Program Files\\PLT\\collects\\doc\\mred" "C:\\Program Files\\PLT\\collects\\doc\\misclib" "C:\\Program Files\\PLT\\collects\\doc\\intermediate-lambda" "C:\\Program Files\\PLT\\collects\\doc\\intermediate" "C:\\Program Files\\PLT\\collects\\doc\\insidemz" "C:\\Program Files\\PLT\\collects\\doc\\help" "C:\\Program Files\\PLT\\collects\\doc\\framework" "C:\\Program Files\\PLT\\collects\\doc\\drscheme" "C:\\Program Files\\PLT\\collects\\doc\\beginning-abbr" "C:\\Program Files\\PLT\\collects\\doc\\beginning" "C:\\Program Files\\PLT\\collects\\doc\\advanced")
Collections: 
(("C:\\Documents and Settings\\Michael\\Application Data\\PLT Scheme\\206p1\\collects" "non-existent path") ("C:\\Program Files\\PLT\\collects" ("afm" "algol60" "browser" "compiler" "defaults" "doc" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "preprocessor" "profj" "setup" "sgl" "slatex" "slibinit" "slideshow" "srfi" "stepper" "string-constants" "syntax" "syntax-color" "test-suite" "tex2page" "texpict" "version" "web-server" "xml")))
 
Human Language: english
 
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Pretty Big (includes MrEd and Advanced)") #6(#f write mixed-fraction-e #f #t debug))
>Description:
Having a problem with define-syntax for the
method macro on pg. 180 of 2nd Ed. Dybvig.
It's flagging the cdr in the named let
function f. Says cdr can't digest syntax.
Copied same program from 3rd Ed. Dybvig
and got same error. I'm using Windows
version (XP Home).
>How-To-Repeat:
Copy method macro on pg. 180 of Dybvig 2nd
to definitions pane and press Execute button.
Then evaluate the first two lines of Dybvig,
pg. 181 as shown below:

(let ((m (method (a) (x) (list a x self))))
  (m #(1) 2)) => error! 
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: Michael Rice <nowgate@yahoo.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6784: define-syntax for method macro in Dybvig
Date: Tue, 30 Mar 2004 05:46:32 -0500

 On Mar 29, Michael Rice wrote:
 > Having a problem with define-syntax for the
 > method macro on pg. 180 of 2nd Ed. Dybvig.
 > It's flagging the cdr in the named let
 > function f. Says cdr can't digest syntax.
 > Copied same program from 3rd Ed. Dybvig
 > and got same error. I'm using Windows
 > version (XP Home).
 
 I don't have the Dybvig book in front of me now, but are you referring
 to taking the cdr of a syntax argument in a transformer?  If so, then
 MzScheme has a syntax objects that are more than just lists -- see
 chapter 12 in the MzScheme manual.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Class changed from "sw-bug" to "not-a-bug" by eli at Tue, 30 Mar 2004 20:39:49 -0500
Not a bug

View:
  http://bugs.plt-scheme.org/query/?cmd=view+audit-trail&pr=6784
Responsible changed from "nobody" to "eli" by eli at Tue, 30 Mar 2004 20:39:49 -0500
Answered

View:
  http://bugs.plt-scheme.org/query/?cmd=view+audit-trail&pr=6784
State changed from "open" to "closed" by eli at Tue, 30 Mar 2004 20:39:49 -0500
Sent explanation.

View:
  http://bugs.plt-scheme.org/query/?cmd=view+audit-trail&pr=6784
From: Eli Barzilay <eli@barzilay.org>
To: michael rice <nowgate@yahoo.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/6784: define-syntax for method macro in Dybvig
Date: Tue, 30 Mar 2004 20:38:02 -0500

 On Mar 30, michael rice wrote:
 > Yep. Taking the cdr of a syntax argument in a
 > transformer generates an error, at least for the
 > method define-syntax macro in Dybvig.
 
 OK, I am closing this bug then.
 
 
 > I understand that syntax arguments are more than just
 > lists. Not sure what part of Chap. 12  applies to this
 > particular problem though. Could you be more specific.
 
 Well, 12.2 seems like a good place to start.  Basically, the PLT
 Scheme syntax objects can be viewed as similar to s-expressions with
 lots of other infomation on them, like source location, properties
 related to syntax expansion like inferred names, data that is used for
 expansion etc etc.  To get a complete feeling of this, you'd need to
 go over the whole chapter, but that tends to be quite complicated.
 
 My guess is that there are two specific functions that can be helpful
 for you: syntax-e is the function that gets the actual data from a
 syntax object, for example -- it might get you a symbol, a string, a
 number, a list or a cons pair, and in the last two cases it will
 contain more syntax objects.  The second function is
 syntax-object->datum, which flattens out a syntax object into a simple
 Scheme datum (an s-expression).  Note that doing that will lose
 information.  Also, there is datum->syntax-object which goes the other
 way, but that requires more information to fill in things like the
 source information and other features, and usually you use another
 syntax object to copy such information from.
 
 If you have additional questions about this, the best place would be
 the mailing list, see the web site for details.
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
