From nobody@champlain.ccs.neu.edu  Sat Aug 23 19:23:11 2003
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id TAA25474
	for bugs@plt-scheme.org; Sat, 23 Aug 2003 19:23:11 -0400
Message-Id: <200308232323.TAA25474@champlain.ccs.neu.edu>
Date: Sat, 23 Aug 2003 19:23:11 -0400
From: agj@alum.mit.edu
Reply-To:
To: bugs@plt-scheme.org
Subject: intransitive =

>Number:         6420
>Category:       mzscheme
>Synopsis:       intransitive =
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sat Aug 23 19:25:00 EDT 2003
>Closed-Date:    Wed Dec 03 18:10:51 EST 2003
>Last-Modified:  Wed Dec 03 18:10:51 EST 2003
>Originator:     Aubrey Jaffer
>Release:        205
>Organization:
plt
>Environment:
unknown-platform
>Description:
"<" should return #t.  "=" should return #f.
(see session below)

>How-To-Repeat:
bash-2.05a$ /usr/local/src/plt/bin/mzscheme
Welcome to MzScheme version 205, Copyright (c) 1995-2003 PLT
> (< 1237940039285380274899124223 1.2379400392853803e+27 1237940039285380274899124225)
#f
> (= 1237940039285380274899124223 1.2379400392853803e+27 1237940039285380274899124225)
#t
> (= 1237940039285380274899124223 1237940039285380274899124225)
#f

>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: agj@alum.mit.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/6420: intransitive =
Date: Sat, 23 Aug 2003 20:29:47 -0700

 At Sat, 23 Aug 2003 19:23:11 -0400, agj@alum.mit.edu wrote:
 > > (< 1237940039285380274899124223 1.2379400392853803e+27 
 > 1237940039285380274899124225)
 > #f
 > > (= 1237940039285380274899124223 1.2379400392853803e+27 
 > 1237940039285380274899124225)
 > #t
 
 Thanks for pointing out this bug, which I believe is fixed for the next
 version (i.e., fixed in the CVSed code).
 
 The problem, of course, was that when MzScheme needs to combine an
 inexact and an exact, it converted the exact to inexact. (It's not
 quite so simple, due to special cases for infinities, NaNs and
 sometimes zeros, but that's the basic strategy.) I've changed MzScheme
 to do the opposite for comparison operations: it converts the inexact
 to exact.
 
 Please let me know if that isn't the right/obvious general strategy
 (because then I'm still missing something big).
 
 Thanks,
 Matthew
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Mon, 25 Aug 2003 22:26:14 -0400

 Hi guys, but it's not clear to me that:
 
 (< 1237940039285380274899124223
    1.2379400392853803e+27
    1237940039285380274899124225)
 
 should ever #t under any circumstances?
 
 As I would interpret 1.2379400392853803e+27 as
 == 1237940039285380300000000000 +/- 99999999999.99...
 
 Therefore the comparison is ambiguous?
 
 Sorry if I'm in error, and very confused myself.
 
 -paul-
 
 > From: Matthew Flatt <mflatt@cs.utah.edu>
 > To: agj@alum.mit.edu
 > Cc: bugs@plt-scheme.org
 > Subject: Re: all/6420: intransitive =
 > Date: Sat, 23 Aug 2003 20:29:47 -0700
 > 
 >  At Sat, 23 Aug 2003 19:23:11 -0400, agj@alum.mit.edu wrote:
 > > (< 1237940039285380274899124223 1.2379400392853803e+27
 > > 1237940039285380274899124225)
 > > #f
 > > (= 1237940039285380274899124223 1.2379400392853803e+27
 > > 1237940039285380274899124225)
 > > #t
 > 
 > Thanks for pointing out this bug, which I believe is fixed for the next
 > version (i.e., fixed in the CVSed code).
 > 
 > The problem, of course, was that when MzScheme needs to combine an
 > inexact and an exact, it converted the exact to inexact. (It's not
 > quite so simple, due to special cases for infinities, NaNs and
 > sometimes zeros, but that's the basic strategy.) I've changed MzScheme
 > to do the opposite for comparison operations: it converts the inexact
 > to exact.
 > 
 > Please let me know if that isn't the right/obvious general strategy
 > (because then I'm still missing something big).
 > 
 > Thanks,
 > Matthew 
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Mon, 25 Aug 2003 23:18:28 -0400

 Or rather:
 
  == 1237940039285380300000000000 +/- 49999999999.99...
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Mon, 25 Aug 2003 23:35:39 -0400

 So suspect that converting mixed exact/inexact comparisons to the
 representation with the least precision (i.e. inexact) would likely
 be the most correct simplest approach.
 
 (as otherwise representations with greater precision would be
  comparing their extended digits of precision against ambiguous
  digits of precision in lesser precise representations.)
 
 -paul-
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Mon, 25 Aug 2003 23:41:00 -0400

 Or alternatively, if all were converted to exact representation,
 then all of the values would need to be masked to remove digits
 of precision beyond the least precise inexact comparison value.
 
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 07:56:06 -0400

 WRT equality, they are all equivalent to the degree specified by
 the least precise compared value, nothing else can be concluded.
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Paul Schlie <schlie@comcast.net>
Cc: agj@alum.mit.edu, bugs@plt-scheme.org
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 00:28:15 -0700

 At Mon, 25 Aug 2003 23:35:39 -0400, Paul Schlie wrote:
 > So suspect that converting mixed exact/inexact comparisons to the
 > representation with the least precision (i.e. inexact) would likely
 > be the most correct simplest approach.
 
 For =, <=, and >=, this definitely doesn't work, as noted in the
 subject line. (The standard requires that each is transitive.)
 
 For < and >, I don't see a counterexample. I note that different
 approaches for < and > versus = would mean that there would exist
 non-NaN a and b such that
 
   (and (not (= a b))
        (not (< a b))
        (not (> a b)))
 
 Maybe that's bad, but maybe not. Or maybe there's another reason (that
 I don't see) for < and > to use the maximum relevant precision.
 
 In any case, I think that the following is a dangerous interpretation:
 
  1.2379400392853803e+27 as
  == 1237940039285380300000000000 +/- 49999999999.99...
 
 because you can add 1 1e+27 times and the result is still
 1.2379400392853803e+27.
 
 Using the maximum relevant precision certainly doesn't resolve the
 inherent ambiguity of inexact comparisons. But it's at least consistent
 with R5RS (again, as far as I can tell).
 
 Matthew
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 08:55:51 -0400

 The operations are transitive after all the original operands are
 converted to precision specified by the least precise source operand;
 which I believe is the only way to satisfy both r5rs and numeric reality.
 
 (i.e. Transitivity is tested against the converted, not raw operands)
 
 > From: Matthew Flatt <mflatt@cs.utah.edu>
 > Date: Tue, 26 Aug 2003 00:28:15 -0700
 > To: Paul Schlie <schlie@comcast.net>
 > Cc: agj@alum.mit.edu, bugs@plt-scheme.org
 > Subject: Re: all/6420: intransitive =
 > 
 > At Mon, 25 Aug 2003 23:35:39 -0400, Paul Schlie wrote:
 >> So suspect that converting mixed exact/inexact comparisons to the
 >> representation with the least precision (i.e. inexact) would likely
 >> be the most correct simplest approach.
 > 
 > For =, <=, and >=, this definitely doesn't work, as noted in the
 > subject line. (The standard requires that each is transitive.)
 > 
 > For < and >, I don't see a counterexample. I note that different
 > approaches for < and > versus = would mean that there would exist
 > non-NaN a and b such that
 > 
 > (and (not (= a b))
 >      (not (< a b))
 >      (not (> a b)))
 > 
 > Maybe that's bad, but maybe not. Or maybe there's another reason (that
 > I don't see) for < and > to use the maximum relevant precision.
 > 
 > In any case, I think that the following is a dangerous interpretation:
 > 
 > 1.2379400392853803e+27 as
 > == 1237940039285380300000000000 +/- 49999999999.99...
 > 
 > because you can add 1 1e+27 times and the result is still
 > 1.2379400392853803e+27.
 > 
 > Using the maximum relevant precision certainly doesn't resolve the
 > inherent ambiguity of inexact comparisons. But it's at least consistent
 > with R5RS (again, as far as I can tell).
 > 
 > Matthew
 > 
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 09:29:41 -0400

 For good or bad, that's the tradeoff when inexact values are utilized,
 
   (the choice is up to the programmer, I would think?)
 
 The only alternative I see is to not support reduced precision inexact
 numeric forms, which doesn't seem like a good idea? (although one could
 define a reader preference, which forces decimal/hex/binary/etc fractional
 point values to be read as exact numbers, as apposed to inexact values,
 unless specified as #i, but personally prefer the way it is now).
 
 -paul-
 
 > From: Paul Schlie <schlie@comcast.net>
 > Date: Tue, 26 Aug 2003 08:55:51 -0400
 > To: Matthew Flatt <mflatt@cs.utah.edu>
 > Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
 > Subject: Re: all/6420: intransitive =
 > 
 >> In any case, I think that the following is a dangerous interpretation:
 >> 
 >> 1.2379400392853803e+27 as
 >> == 1237940039285380300000000000 +/- 49999999999.99...
 >> 
 >> because you can add 1 1e+27 times and the result is still
 >> 1.2379400392853803e+27.
 >> 
 >> Using the maximum relevant precision certainly doesn't resolve the
 >> inherent ambiguity of inexact comparisons. But it's at least consistent
 >> with R5RS (again, as far as I can tell).
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 09:36:38 -0400

 In which case:
 
 (< 1237940039285380274899124223
    #e1.2379400392853803e+27
    1237940039285380274899124225)
 
 => #f.
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 10:46:47 -0400

 From a few cited R5RS passages, I basically conclude in general that:
 
 - mixed inexact exact operations degenerate to inexact operations producing
 an inexact result with at least as much precision as is used to express any
 of the inexact arguments to that operation.
 
 (therefore a comparison between an inexact and exact values, need only
  be computed to the precision as specified by the least precise inexact
  specified operand; implying to me the pre-conversion of exact operands)
 
 6.2.2 Exactness
 
 Scheme numbers are either exact or inexact. A number is exact if it was
 written as an exact constant or was derived from exact numbers using only
 exact operations. A number is inexact if it was written as an inexact
 constant, if it was derived using inexact ingredients, or if it was derived
 using inexact operations. Thus inexactness is a CONTAGIOUS property of a
 number. If two implementations produce exact results for a computation that
 did not involve inexact intermediate results, the two ultimate results will
 be mathematically equivalent. This is generally not true of computations
 involving inexact numbers since approximate methods such as floating point
 arithmetic may be used, but it is the duty of each implementation to make
 the result as close as practical to the mathematically ideal result.
 
 ...
 
 6.2.3 Implementation restrictions
 
 In particular, implementations that use flonum representations must follow
 these rules: A flonum result must be represented with at least as much
 precision as is used to express any of the inexact arguments to that
 operation. It is desirable (but not required) for potentially inexact
 operations such as sqrt, when applied to exact arguments, to produce exact
 answers whenever possible (for example the square root of an exact 4 ought
 to be an exact 2). If, however, an exact number is operated upon so as to
 produce an inexact result (as by sqrt), and if the result is represented as
 a flonum, then the most precise flonum format available must be used; but if
 the result is represented in some other way then the representation must
 have at least as much precision as the most precise flonum format available.
 
 ...
 
 In particular, implementations that use flonum representations must follow
 these rules: A flonum result must be represented with at least as much
 precision as is used to express any of the inexact arguments to that
 operation. It is desirable (but not required) for potentially inexact
 operations such as sqrt, when applied to exact arguments, to produce exact
 answers whenever possible (for example the square root of an exact 4 ought
 to be an exact 2). If, however, an exact number is operated upon so as to
 produce an inexact result (as by sqrt), and if the result is represented as
 a flonum, then the most precise flonum format available must be used; but if
 the result is represented in some other way then the representation must
 have at least as much precision as the most precise flonum format available.
 
 6.2.5 Numerical Operations
 
 ... The examples used in this section assume that any numerical constant
 written using an exact notation is indeed represented as an exact number.
 Some examples also assume that certain numerical constants written using an
 inexact notation can be represented without loss of accuracy; the inexact
 constants were chosen so that this is likely to be true in implementations
 that use flonums to represent inexact numbers.
 
 (basically skirting the issues associated with loss of flonum precision in
 examples)
 
 

From: Aubrey Jaffer <agj@alum.mit.edu>
To: schlie@comcast.net
Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 10:54:44 -0400 (EDT)

  | Date: Tue, 26 Aug 2003 08:55:51 -0400
  | From: Paul Schlie <schlie@comcast.net>
  | 
  | The operations are transitive after all the original operands are
  | converted to precision specified by the least precise source operand;
  | which I believe is the only way to satisfy both r5rs and numeric reality.
 
 Bigloo, Gambit, Kawa, MIT-Scheme, scheme48, and SCM all manage to get
 the correct answer (raw operands are transitive) -- so there is no
 deep mathematical issue here.

From: Paul Schlie <schlie@comcast.net>
To: Aubrey Jaffer <agj@alum.mit.edu>
Cc: <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 10:59:40 -0400

 Other than:
 
 (< 1237940039285380274899124223
    1.2379400392853803e+27
    1237940039285380274899124225)
 
 Is numerically false?
 
 > From: Aubrey Jaffer <agj@alum.mit.edu>
 > Date: Tue, 26 Aug 2003 10:54:44 -0400 (EDT)
 > To: schlie@comcast.net
 > Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
 > Subject: Re: all/6420: intransitive =
 > 
 > | Date: Tue, 26 Aug 2003 08:55:51 -0400
 > | From: Paul Schlie <schlie@comcast.net>
 > | 
 > | The operations are transitive after all the original operands are
 > | converted to precision specified by the least precise source operand;
 > | which I believe is the only way to satisfy both r5rs and numeric reality.
 > 
 > Bigloo, Gambit, Kawa, MIT-Scheme, scheme48, and SCM all manage to get
 > the correct answer (raw operands are transitive) -- so there is no
 > deep mathematical issue here.
 

From: Paul Schlie <schlie@comcast.net>
To: Aubrey Jaffer <agj@alum.mit.edu>
Cc: <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 11:12:44 -0400

 Under what set of rules can the following ever be correct?
 
 > (< 1.2379400392853803e+27 1237940039285380274899124225) => #t
 
 > (< 1.2379400392853803e+27 #i1237940039285380274899124225) => #f
 
 > (< #e1.2379400392853803e+27 1237940039285380274899124225) => #f
 
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Paul Schlie <schlie@comcast.net>
Cc: Aubrey Jaffer <agj@alum.mit.edu>, bugs@plt-scheme.org
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 03:12:44 -0700

 Hi Paul,
 
 I appreciate your enthusiasm for this topic, but I think Aubrey is
 right to point out that the other implementations agree.
 
 Inexactness is a difficult topic, and it could be defined in different
 ways. Many people have given the alternatives considerable thought, and
 without time myself to become an expert, I'm inclined to trust their
 conclusions.
 
 Have fun arguing with people who know what they're talking about, but I
 think it's best if I stay out of it from now on. :)
 
 Matthew
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Aubrey Jaffer <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 11:55:06 -0400

 Matthew, I do suspect you're correct, however can't rationalize:
  
  (< 1.2379400392853803e+27 1237940039285380274899124225) => #t
  
  (< 1.2379400392853803e+27 #i1237940039285380274899124225) => #f
  
  (< #e1.2379400392853803e+27 1237940039285380274899124225) => #f
 
 as it seems the only way to get #t for the first, would be to arbitrarily
 assume a loss of 1/2 lsb inexact precision for comparison; which doesn't
 seem desirable, or express itself in the two successive examples?
 
 (I'll just let it drop, and consider it wrong, until I see the light)
 

From: Paul Schlie <schlie@comcast.net>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Aubrey Jaffer <agj@alum.mit.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Tue, 26 Aug 2003 12:22:42 -0400

 Sorry all, saw the light, confused myself by not appreciating that inexact
 output was being rounding for display in scientific notation, which fully
 represented is 1237940039285380274899124224, which I now appreciate as
 being expected to yield the results Aubrey expected. again, sorry.
 

From: Paul Schlie <schlie@comcast.net>
To: Aubrey Jaffer <agj@alum.mit.edu>
Cc: <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Sun, 07 Sep 2003 11:32:12 -0400

 Sorry, one last thought:
 
 - as I suspect that it's likely undesirable to define language
 semantics which are dependant on implementation precision; it
 may be better to re-interpret/define the semantics of:
 
 (< 1237940039285380274899124223
   1.2379400392853803e+27
    1237940039285380274899124225)
 
 in such a way that the truth of the expression is not dependant
 on the bits of implementation precision for inexact numbers; as
 if inexact values are compared exactly, the expression will be
 "true" in implementations with inexact representation precision
 of < 56 bits, and "false" in implementations with inexact precision
 of > 56 bits; which would seem to make the expression ambiguous.
 (correspondingly, implementations utilizing lesser precision inexact
  implementations would have difference ambiguous comparison value
  thresholds)
 
 However if compared utilizing inexact representations, the expression
 would be unambiguously "false".
 
 Thanks again, -paul-
 
 > From: Paul Schlie <schlie@comcast.net>
 > Date: Tue, 26 Aug 2003 10:59:40 -0400
 > 
 > Other than:
 > 
 > (< 1237940039285380274899124223
 >  1.2379400392853803e+27
 >  1237940039285380274899124225)
 > 
 > Is numerically false?
 > 
 >> From: Aubrey Jaffer <agj@alum.mit.edu>
 >> Date: Tue, 26 Aug 2003 10:54:44 -0400 (EDT)
 >> To: schlie@comcast.net
 >> Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
 >> Subject: Re: all/6420: intransitive =
 >> 
 >> | Date: Tue, 26 Aug 2003 08:55:51 -0400
 >> | From: Paul Schlie <schlie@comcast.net>
 >> | 
 >> | The operations are transitive after all the original operands are
 >> | converted to precision specified by the least precise source operand;
 >> | which I believe is the only way to satisfy both r5rs and numeric reality.
 >> 
 >> Bigloo, Gambit, Kawa, MIT-Scheme, scheme48, and SCM all manage to get
 >> the correct answer (raw operands are transitive) -- so there is no
 >> deep mathematical issue here.
 

From: Paul Schlie <schlie@comcast.net>
To: Aubrey Jaffer <agj@alum.mit.edu>
Cc: <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Sat, 13 Sep 2003 01:12:46 -0400

 And to beat a dead horse, the following example utilizing
 exact comparisons of inexact values, seems unreasonable:
 
 (define (test x)
   (< (+  1237940039285380274899124223 x)
      (+ 1.2379400392853803e+27 x)
      (+  1237940039285380274899124225 x)))
 
 (test 0)   ; => #t
 (test 0.0) ; => #f
 (test 1)   ; => #f
 (test 1.0) ; => #f
 
 Which would be uniformly #f if compared inexactly to the
 implementation precision representing 1.2379400392853803e+27.
 
 (therefore suspect the language should define the semantics
  of what it means to perform arithmetic comparisons on mixed
  exact/inexact values; although to an extent it does by
  basically defining that operations should yield the most
  precise arithmetically correct result, but not more
  precise/exact as is known to be true; therefore seems
  that arithmetic comparisons can not be legitimately
  performed at a precision greater than the least precise
  value being compared, as otherwise it would be both
  inconsistent with the language's basic guidelines, and
  numerical analysis in general?
 
  As I don't believe the intent of intransitive rules should
  apply to mixed precision value comparison prior to their
  conversion to a uniform precision as defined by the least
  precise source operand; for what little that's worth.)
 
 So I guess I consider many scheme mixed precision comparison
 operator implementations to be inconsistent with the spirit
 of the the languages core arithmetic/numerical implementation
 guidelines.
 
 [now I'll shut up, and leave the issue, if there is one, to
  those with greater vested interest/experience/insight than I;
  & thanks for your time, if you had the patience to read this.]
 

From: Aubrey Jaffer <agj@alum.mit.edu>
To: schlie@comcast.net
Cc: mflatt@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: all/6420: intransitive =
Date: Sat, 13 Sep 2003 15:26:18 -0400 (EDT)

  | Date: Sat, 13 Sep 2003 01:12:46 -0400
  | From: Paul Schlie <schlie@comcast.net>
  | 
  | And to beat a dead horse, the following example utilizing
  | exact comparisons of inexact values, seems unreasonable:
  | 
  | (define (test x)
  |   (< (+  1237940039285380274899124223 x)
  |      (+ 1.2379400392853803e+27 x)
  |      (+  1237940039285380274899124225 x)))
  | 
  | (test 0)   ; => #t
  | (test 0.0) ; => #f
  | (test 1)   ; => #f
  | (test 1.0) ; => #f
  | 
  | Which would be uniformly #f if compared inexactly to the
  | implementation precision representing 1.2379400392853803e+27.
  | 
  | (therefore suspect the language should define the semantics
  |  of what it means to perform arithmetic comparisons on mixed
  |  exact/inexact values; although to an extent it does by
  |  basically defining that operations should yield the most
  |  precise arithmetically correct result, but not more
  |  precise/exact as is known to be true; therefore seems
  |  that arithmetic comparisons can not be legitimately
  |  performed at a precision greater than the least precise
  |  value being compared, as otherwise it would be both
  |  inconsistent with the language's basic guidelines, and
  |  numerical analysis in general?
  | 
  |  As I don't believe the intent of intransitive rules should
  |  apply to mixed precision value comparison prior to their
  |  conversion to a uniform precision as defined by the least
  |  precise source operand; for what little that's worth.)
 
 (< 235135.0 1237940039285380274899124223 1237940039285380274899124225)
 
 If this comparison is done using IEEE floating point, then it will
 return #f; which is just as unreasonable as the cases you are trying
 to eliminate.
 
  | So I guess I consider many scheme mixed precision comparison
  | operator implementations to be inconsistent with the spirit
  | of the the languages core arithmetic/numerical implementation
  | guidelines.
 
 We test limit cases to validate that our stated invariants apply to
 the entire range of inputs, not because we think those are acutally
 useful calculations.
 
 I believe that any consistent ruleset covering all Scheme subsets of
 numeric types will have limit cases which seem unreasonable.  If you
 can create a set which doesn't, fame awaits you.

From: Paul Schlie <schlie@comcast.net>
To: Aubrey Jaffer <agj@alum.mit.edu>
Cc: <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Sun, 14 Sep 2003 01:26:10 -0400

 I think the universal solution when comparing inexact and exact values is
 to replace inexact values with a pair of exact values representing extent
 of the ambiguous value range, ordered in the inequality's order to account
 for the effect of rounding during reader and/or exact-inexact conversion.
 
 For example, given your examples; when double precision ieee FP is used for
 inexact values, a 1/2 lsb (the 54th bit of the mantissa) was added during
 conversion for rounding, therefore needs to be subtracted to yield the
 second exact value representing the value range; therefore:
 
 (< 235135.0
    1237940039285380274899124223
    1237940039285380274899124225)
 
 As 235135 binary is #b111001011001111111, subtracting a 54th lsb becomes:
                     #b111001011001111110.11111111111111111111111111111111111
 which is as an exact 235134+34359738367/34359738368
 
 Becomes:
 
 (< (+ 235134 34359738367/34359738368)
    235135
    1237940039285380274899124223
    1237940039285380274899124225)
 
 Which is #t as you would expect. And then correspondingly:
 
 (< 1237940039285380274899124223
    1.2379400392853803e+27
    1237940039285380274899124225)
 
 As 1.2379400392853803e+27 as an exact is : 1237940039285380274899124224
 #b10000000000000000000000000000000000000000000000000000000000000000000000000
 00000000000000000, then subtracting a 54th bit of precision, yields:
 #b11111111111111111111111111111111111111111111111111110000000000000000000000
 0000000000000000, which as an exact is 1237940039285380000021217280
 
 Becomes:
 
 (< 1237940039285380274899124223
    1237940039285380000021217280
    1237940039285380274899124224
    1237940039285380274899124225)
 
 Which is #f, as I would expect.
 
 Baring I miscalculated a bit of precision here or there, what do you think?
 
 Thanks, -paul-
 
 

From: Paul Schlie <schlie@comcast.net>
To: Aubrey Jaffer <agj@alum.mit.edu>
Cc: <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Sun, 14 Sep 2003 02:55:49 -0400

 After somewhat more thought, as it's a little late or early as the case may
 be; it may be easiest to define and use two intrinsic functions which yield
 the minimum and maximum exact values which bound the range of an arbitrary
 value implementation/representation:
 
 (min-exact x) => minimum exact bound of an arbitrary value;
                  - if x is exact, x is returned.
                  - if x is inexact, (- (inexact->exact x) half-inexact-lsb)
 
 (max-exact x) => maximum exact bound of an arbitrary value;
                  - if x is exact, x is returned.
                  - if x is inexact, (+ (inexact->exact x) half-inexact-lsb)
 
 
 [where half-inexact-lsb is dependant on inexact and rounding implementation]
 
 
 Then comparisons may be basically defined as:
 
 (define (< a b) (< (max-exact a) (min-exact b)))   ; ranges don't overlap
 
 (define (> a b) (> (min-exact a) (max-exact b)))   ; ranges don't overlap
 
 (define (= a b) (and (< (min-exact a) (max-exact b))  ; ranges do overlap
                      (> (max-exact a) (min-exact b))))
 
 
 Which I think universally works, and satisfies transitivity,  -paul-
 

From: Paul Schlie <schlie@comcast.net>
To: Aubrey Jaffer <agj@alum.mit.edu>
Cc: <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Sun, 14 Sep 2003 11:33:38 -0400

 Sorry, I accept (although disappointed, but now more enlightened) that
 for = to be transitive, then all operands must be treated as having a
 uniform type; if that type is chosen to be inexact, then all comparisons
 will be limited in precision, which is likely worse than if the type were
 chosen to be exact, which would only inhibit the ability to determine if
 the all the values were to fall within the range of an inexact operand if
 present.
 
 And although believe that the below definitions of < > are more correct and
 are transitive, don't suspect that its worth the extra complexity vs more
 simply comparing values as exacts.
 
 So now also accept that if I want to compare values inexactly, I'll need
 to explicitly first assure that any potential exact operands that may exceed
 the precision of an inexact representation are first converted to inexact
 values, prior to being treated as exacts when being compared.
 
 Thanks, -paul-
 

From: Paul Schlie <schlie@comcast.net>
To: Aubrey Jaffer <agj@alum.mit.edu>
Cc: <mflatt@cs.utah.edu>, <bugs@plt-scheme.org>
Subject: Re: all/6420: intransitive =
Date: Sun, 14 Sep 2003 12:15:40 -0400

 And as for the precision ambiguity which may exist between different scheme
 inexact implementations, it is likely still desirable to have an intrinsic
 function defined which returns the the magnitude of the potential ambiguity
 which exists for an arbitrary value if it were represented as an
 inexact value.
 
 As the truth of comparisons such as:
 
  (< 1237940039285380274899124223
    1.2379400392853803e+27
     1237940039285380274899124225)
 
 are ambiguous, and only #t if the precision of an inexact implementation
 causes the value expressed to be rounded between the surrounding values; as
 the precision of inexact values are not dictated by the standard; therefore
 suspect a test case like:
 
  (< (- 1237940039285380274899124224
        (inexact->exact (inexact-error 1237940039285380274899124224)))
     1237940039285380274899124224
     (+ 1237940039285380274899124224
        (inexact->exact (inexact-error 1237940039285380274899124224))))
 
 would be more universally desirable; not to mention it would be occasionally
 nice to know what the error magnitude for an arbitrary inexact value was on
 occasion, and can't think of how to efficiently determine it without knowing
 the implementation's internal representation and default rounding behaviors.
 
 
 
Responsible-Changed-From-To: eli->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Wed Dec  3 18:10:51 2003
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Wed Dec  3 18:10:51 2003
State-Changed-Why:
    Fixed.
>Unformatted:

