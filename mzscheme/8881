From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Aug 20 12:29:48 2007
Received: from wx-out-0506.google.com (wx-out-0506.google.com [66.249.82.230])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id l7KGTmxn027052
	for <bugs@bugs.plt-scheme.org>; Mon, 20 Aug 2007 12:29:48 -0400
Message-Id: <200708201629.l7KGTgcG027047@champlain.ccs.neu.edu>
Date: Mon, 20 Aug 2007 12:29:42 -0400
From: jos.koot@telefonica.net
To: bugs@plt-scheme.org
Subject: tail-recursivity problem

>Number:         8881
>Category:       mzscheme
>Synopsis:       tail-recursivity problem
>Class:          duplicate
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Aug 20 12:30:01 -0400 2007
>Closed-Date:    Mon Sep 24 18:37:34 -0400 2007
>Last-Modified:  Mon Sep 24 18:37:34 -0400 2007
>Originator:     Jos Koot
>Organization:
plt
>Submitter-Id:   unknown
>Release:        371
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
Docs Installed:
(("C:\\Program Files\\PLT\\doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-intermediate-access" "profj-advanced"))
Human Language: english
(current-memory-use) 110836544

Collections:
(("C:\\Documents and Settings\\HP_Eigenaar\\Application Data\\PLT Scheme\\371\\collects" non-existent-path) ("C:\\Program Files\\PLT\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "framework" "frtime" "games" "graphics" "help" "hierlist" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "readline" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "tex2page" "texpict" "trace" "version" "web-server" "wxme" "xml"))
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#f write mixed-fraction-e #f #t none))
>Description:
Hi,
I am playing with my own versions of srfi 40, srfi 45 and the yet unfinished and unpublished srfi 41.
I currently have something like an srfi 41, but found a curious problem.
It is for even streams with tests on functions like filter, merge and map running in bound space.

The stripped version shown in "Steps to Reproduce" shows three definitions for force-stream two of which have been commented out.
See the <=====.
With the one actually selected the times3 test (last line) does not run in bound space.
With the other two the times3 test nicely runs in bound space.

I am fully aware of the possibility that the problem could be located in my own code, but nevertheless I cannot escape from thinking that the times3 test should run in bound space with all three versions of procedure force-stream.
Kind regards, Jos koot

PS
I am not trying to steal srfi 41 from Phil Bewig.
I have a mutual fruitful contact with him about my version.
I do not intend to publish my version unless Phil Bewig would like me to do so.
Anyway the ideas incorporated in my version are not of my own.
>How-To-Repeat:
(module stripped-streams mzscheme
 (provide make-stream stream-ref stream-filter)
 
 ; Elementary promises ; choose one of the following two begin forms
 
 (begin
  (define-syntax elementary-delay (syntax-rules () ((_ expr) (lambda () expr))))
  (define-syntax elementary-force (syntax-rules () ((_ prom) (prom)))))
 
; (begin
;  (define-syntax elementary-delay (syntax-rules () ((_ expr) (list (lambda () expr) 'expr)))) ; cdr is for display of promise contents;
;  (define-syntax elementary-force (syntax-rules () ((_ prom) ((car prom))))))
 
 ; Representation of streams ; choose one of the following two begin forms
 
; (begin
;  (define inspector #f #;(current-inspector) #;(make-inspector))
;  (define-values (stream-descr stream-constr stream? stream-acc stream-mut) (make-struct-type 'stream #f 1 0 'na () inspector #f () #f))
;  (define stream-content (make-struct-field-accessor stream-acc 0))
;  (define set-stream-content! (make-struct-field-mutator stream-mut 0)))
 
 (begin
  (define stream-tag "stream")
  (define (stream-constr x) (cons stream-tag x))
  (define (stream? obj) (and (pair? obj) (eq? (car obj) stream-tag)))
  (define stream-content cdr)
  (define set-stream-content! set-cdr!))
 
 (define stream-content-constr cons)
 (define stream-content-forced? car)
 (define set-stream-content-forced?! set-car!)
 (define stream-content-value cdr)
 (define set-stream-content-value! set-cdr!)
 (define (make-delayed-stream x) (stream-constr (stream-content-constr #f x)))
 (define (make-forced-stream x) (stream-constr (stream-content-constr #t x)))
 (define (stream-forced? strm) (stream-content-forced? (stream-content strm)))
 (define (stream-value strm) (stream-content-value (stream-content strm)))
 (define (set-stream-forced?! strm bool) (set-stream-content-forced?! (stream-content strm) bool))
 (define (set-stream-value! strm value) (set-stream-content-value! (stream-content strm) value))
 (define-syntax lazy-stream  (syntax-rules () ((_ expr) (make-delayed-stream (elementary-delay expr)))))
 (define-syntax stream-delay (syntax-rules () ((_ expr) (lazy-stream (make-forced-stream expr)))))
 (define (forced-stream? obj) (and (stream? obj) (stream-forced? obj)))
 
 ; choose one of the following three forms
 ; the second one (actually selected) does not run in bound space <======
 
; (begin ; run times3 in bound space
;  (define (force-stream strm)
;   (if (stream-forced? strm) (stream-value strm)
;    (let ((value (elementary-force (stream-value strm))))
;     (if (stream-forced? strm) (stream-value strm)
;      (lift-stream value strm)))))
; 
;  (define (lift-stream inner-strm strm)
;   (set-stream-forced?! strm (stream-forced? inner-strm))
;   (set-stream-value! strm (stream-value inner-strm))
;   (set-stream-content! inner-strm (stream-content strm))
;   (force-stream strm)))

 (define (force-stream strm) ; does not run times3 in bound space
  (let ((strm-content (stream-content strm)))
   (if (stream-content-forced? strm-content) (stream-content-value strm-content)
    (let* ((value (elementary-force (stream-content-value strm-content))) (strm-content (stream-content strm)))
     (if (stream-content-forced? strm-content) (stream-content-value strm-content)
      (let ((value-content (stream-content-value value)))
       (set-stream-content-value! strm-content (stream-content-value value-content))
       (set-stream-content-forced?! strm-content (stream-content-forced? value-content))
       (set-stream-content! value strm-content)
       (force-stream strm)))))))
 
; (begin ; same as preceding force-stream but with deferred definition ; runs times3 in bound space
;  (define (*force-stream strm)
;   (let ((strm-content (stream-content strm)))
;    (if (stream-content-forced? strm-content) (stream-content-value strm-content)
;     (let* ((value (elementary-force (stream-content-value strm-content))) (strm-content (stream-content strm)))
;      (if (stream-content-forced? strm-content) (stream-content-value strm-content)
;       (let ((value-content (stream-content-value value)))
;        (set-stream-content-value! strm-content (stream-content-value value-content))
;        (set-stream-content-forced?! strm-content (stream-content-forced? value-content))
;        (set-stream-content! value strm-content)
;        (*force-stream strm)))))))
;  (define force-stream *force-stream))
 
 ; Null-stream, pseudo predicate and elementary operators for stream-pairs
 
 (define null-stream (stream-delay ()))
 (force-stream null-stream)
 (define (stream-pair? obj) (and (stream? obj) (pair? (force-stream obj))))
 (define-syntax stream-cons (syntax-rules () ((stream-cons h t) (stream-delay (cons (stream-delay h) (stream-delay t))))))
 (define (stream-car strm) (force-stream (car (force-stream strm))))
 (define (stream-cdr strm) (force-stream (cdr (force-stream strm))))

 ; Derived procedures 
 
 (define (make-stream e s) (stream-cons e (make-stream (s e) s)))
 (define (stream-ref strm k) (if (zero? k) (stream-car strm) (stream-ref (stream-cdr strm) (sub1 k))))
 
 (define (stream-filter pred strm)
  (lazy-stream
   (if (not (stream-pair? strm)) null-stream
    (let ((kar (stream-car strm)))
     (if (pred kar) (stream-cons kar (stream-filter pred (stream-cdr strm)))
      (stream-filter pred (stream-cdr strm))))))))

(require stripped-streams)
(define (times3 n) (stream-ref (stream-filter (lambda (x) (zero? (modulo x n))) (make-stream 0 add1)) 3))
(times3 10) ;--> 30
(times3 1000000000) ; should run in bound space
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: jos.koot@telefonica.net, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/8881: tail-recursivity problem
Date: Mon, 20 Aug 2007 12:57:31 -0400

 I had a brief look at your code.  I have to first say that it is much
 too big to useful as a bug report -- if you think that there is some
 sort of space leak, then a much smaller example would be useful --
 something as big as this, and as delicate as this, is not too useful.
 
 In any case, I'm not sure why you're doing this, but there is srfi-45,
 with a thorough discussion of such space leaks and a promise
 implementation that works as expected.  There is a srfi-45
 implementation that you use in .../collects/lazy/promise.ss, and even
 that file has around 4 versions of fource that have slightly different
 tradeoffs.  I think that it would be reasonable to build on that
 (especially since that srfi was created due to problems with the
 streams srfi) -- and if you insist on reimplementing it, then at least
 use some of these ideas.
 
 Otherwise, I think that you'll need to somehow synthesize something
 smaller that exhibits a space problem...
 
 
 On Aug 20, jos.koot@telefonica.net wrote:
 > Hi,
 > I am playing with my own versions of srfi 40, srfi 45 and the yet unfinished and unpublished srfi 41.
 > I currently have something like an srfi 41, but found a curious problem.
 > It is for even streams with tests on functions like filter, merge and map running in bound space.
 > 
 > The stripped version shown in "Steps to Reproduce" shows three definitions for force-stream two of which have been commented out.
 > See the <=====.
 > With the one actually selected the times3 test (last line) does not run in bound space.
 > With the other two the times3 test nicely runs in bound space.
 > 
 > I am fully aware of the possibility that the problem could be located in my own code, but nevertheless I cannot escape from thinking that the times3 test should run in bound space with all three versions of procedure force-stream.
 > Kind regards, Jos koot
 > 
 > PS
 > I am not trying to steal srfi 41 from Phil Bewig.
 > I have a mutual fruitful contact with him about my version.
 > I do not intend to publish my version unless Phil Bewig would like me to do so.
 > Anyway the ideas incorporated in my version are not of my own.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Jos Koot" <jos.koot@telefonica.net>
To: <bugs@plt-scheme.org>, "Jos Koot" <jos.koot@telefonica.net>
Cc: 
Subject: Re: all/8881: tail-recursivity problem
Date: Mon, 20 Aug 2007 19:38:54 +0200

 This is a multi-part message in MIME format.
 
 ------=_NextPart_000_0026_01C7E361.BE63E8A0
 Content-Type: text/plain;
 	charset="iso-8859-1"
 Content-Transfer-Encoding: quoted-printable
 
 Apologies, when further stripping my code, I found a bug in my own code.
 Sorry to have bothered you.
 Yet I still don't understand why the deferred definition did not blow up =
 memory and the direct one did.
 The same bug was in both definitions.
 Nevertheless, I think you want to close this bug report.
 Again sorry and thanks for your attention.
 Jos Koot
 ------=_NextPart_000_0026_01C7E361.BE63E8A0
 Content-Type: text/html;
 	charset="iso-8859-1"
 Content-Transfer-Encoding: quoted-printable
 
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
 <HTML><HEAD>
 <META http-equiv=3DContent-Type content=3D"text/html; =
 charset=3Diso-8859-1">
 <META content=3D"MSHTML 6.00.6000.16525" name=3DGENERATOR>
 <STYLE></STYLE>
 </HEAD>
 <BODY bgColor=3D#ffffff>
 <DIV><FONT face=3D"Courier New" size=3D2>Apologies, when further =
 stripping my code,=20
 I found a bug in my own code.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>Sorry to have bothered =
 you.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>Yet I still don't understand =
 why the=20
 deferred definition did not&nbsp;blow up memory&nbsp;and the direct one=20
 did.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>The same bug was in both=20
 definitions.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>Nevertheless, I think you want =
 to close=20
 this bug report.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>Again sorry and thanks for your =
 
 attention.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>Jos =
 Koot</FONT></DIV></BODY></HTML>
 
 ------=_NextPart_000_0026_01C7E361.BE63E8A0--
 
From: "Jos Koot" <jos.koot@telefonica.net>
To: <bugs@plt-scheme.org>, "Jos Koot" <jos.koot@telefonica.net>
Cc: 
Subject: Re: all/8881: tail-recursivity problem
Date: Mon, 20 Aug 2007 21:54:52 +0200

 This is a multi-part message in MIME format.
 
 ------=_NextPart_000_0006_01C7E374.BCC9C600
 Content-Type: text/plain;
 	charset="iso-8859-1"
 Content-Transfer-Encoding: quoted-printable
 
 Hi,
 After correcting the bug the same fenomemon reappears.
 I have tried to strip the code as much as possible.
 The code runs space bound in the following cases:
 1 the definitions not wrapped in a module and indirect or direct =
 definition for force-stream
 2 the definitions wrapped in a module and indirect definition of =
 force-stream (cf 3)
 The code does not run space bound in the following case:
 3 the definitions wrapped in a module and direct definition of =
 force-stream (cf 2)
 4 after running version 3, versions 1 and 2 are no longer space bound, =
 but are again after restarting DrScheme.
 
 I work on this because my version can handle stream-merge (e.g. for =
 generating the Hamming sequence)
 I hope this information is useful.
 Kind regards, Jos Koot
 
 ;(module a mzscheme ; uncomment for module
 ; (provide stream-ref stream-filter make-stream) ; uncomment for module
  (define-syntax lazy-stream  (syntax-rules () ((_ expr) (box (cons #f =
 (lambda () expr))))))
  (define-syntax stream-delay (syntax-rules () ((_ expr) (lazy-stream =
 (box (cons #t expr))))))
 =20
  (define (force-stream strm) ; direct def (replace force-stream by =
 *force-stream for indirect def)
   (let ((strm-content (unbox strm)))
    (if (car strm-content) (cdr strm-content)
     (let* ((value ((cdr strm-content))) (strm-content (unbox strm)))
      (if (car strm-content) (cdr strm-content)
       (let ((value-content (unbox value)))
        (set-cdr! strm-content (cdr value-content))
        (set-car! strm-content (car value-content))
        (set-box! value strm-content)
        (force-stream strm))))))) ; direct def (replace force-stream by =
 *force-stream for indirect def)
 =20
 ; (define force-stream *force-stream) ; direct def (uncomment for =
 indirect def)
 =20
  (define null-stream (stream-delay ()))
  (define (stream-pair? obj) (pair? (force-stream obj)))
  (define-syntax stream-cons
   (syntax-rules () ((stream-cons h t) (stream-delay (cons (stream-delay =
 h) (stream-delay t))))))
  (define (stream-car strm) (force-stream (car (force-stream strm))))
  (define (stream-cdr strm) (force-stream (cdr (force-stream strm))))
  (define (make-stream e s) (stream-cons e (make-stream (s e) s)))
  (define (stream-ref strm k) (if (zero? k) (stream-car strm) (stream-ref =
 (stream-cdr strm) (sub1 k))))
 =20
  (define (stream-filter pred strm)
   (lazy-stream
    (if (not (stream-pair? strm)) null-stream
     (let ((kar (stream-car strm)))
      (if (pred kar) (stream-cons kar (stream-filter pred (stream-cdr =
 strm)))
       (stream-filter pred (stream-cdr strm)))))))
  ;) ; uncomment for module
 
 ;(require a) ; incomment for module
 (define (times3 n) (stream-ref (stream-filter (lambda (x) (zero? (modulo =
 x n))) (make-stream 0 add1)) 3))
 (times3 10) ; --> 30 ; ok
 (times3 1000000000)
 ------=_NextPart_000_0006_01C7E374.BCC9C600
 Content-Type: text/html;
 	charset="iso-8859-1"
 Content-Transfer-Encoding: quoted-printable
 
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
 <HTML><HEAD>
 <META http-equiv=3DContent-Type content=3D"text/html; =
 charset=3Diso-8859-1">
 <META content=3D"MSHTML 6.00.6000.16525" name=3DGENERATOR>
 <STYLE></STYLE>
 </HEAD>
 <BODY bgColor=3D#ffffff>
 <DIV><FONT face=3D"Courier New" size=3D2>Hi,</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>After correcting&nbsp;the bug =
 the same=20
 fenomemon reappears.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>I have tried to strip the code =
 as much as=20
 possible.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>The code runs space bound in =
 the following=20
 cases:</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>1 the definitions not wrapped =
 in a module=20
 and indirect or direct definition for force-stream</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>2 the definitions wrapped in a =
 module and=20
 indirect definition of force-stream (cf 3)</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>The code does not run space =
 bound in the=20
 following case:</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>3 the definitions wrapped in a =
 module and=20
 direct definition of force-stream (cf 2)</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>4 after running version 3, =
 versions 1 and 2=20
 are no longer space bound, but&nbsp;are again&nbsp;after restarting=20
 DrScheme.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2></FONT>&nbsp;</DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>I&nbsp;work on this because my=20
 version&nbsp;can handle&nbsp;stream-merge (e.g. for generating the =
 Hamming=20
 sequence)</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>I hope this information is=20
 useful.</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>Kind regards, Jos =
 Koot</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2></FONT>&nbsp;</DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>;(module a mzscheme ; uncomment =
 for=20
 module<BR>; (provide stream-ref stream-filter make-stream) ; uncomment =
 for=20
 module<BR>&nbsp;(define-syntax lazy-stream&nbsp; (syntax-rules () ((_ =
 expr) (box=20
 (cons #f (lambda () expr))))))<BR>&nbsp;(define-syntax stream-delay=20
 (syntax-rules () ((_ expr) (lazy-stream (box (cons #t=20
 expr))))))<BR>&nbsp;<BR>&nbsp;(define (force-stream strm) ; direct def =
 (replace=20
 force-stream by *force-stream for indirect def)<BR>&nbsp; (let =
 ((strm-content=20
 (unbox strm)))<BR>&nbsp;&nbsp; (if (car strm-content) (cdr=20
 strm-content)<BR>&nbsp;&nbsp;&nbsp; (let* ((value ((cdr strm-content)))=20
 (strm-content (unbox strm)))<BR>&nbsp;&nbsp;&nbsp;&nbsp; (if (car =
 strm-content)=20
 (cdr strm-content)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (let =
 ((value-content (unbox=20
 value)))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (set-cdr! strm-content =
 (cdr=20
 value-content))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (set-car! =
 strm-content=20
 (car value-content))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (set-box! =
 value=20
 strm-content)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (force-stream =
 strm)))))))=20
 ; direct def (replace force-stream by *force-stream for indirect=20
 def)<BR>&nbsp;<BR>; (define force-stream *force-stream) ; direct def =
 (uncomment=20
 for indirect def)<BR>&nbsp;<BR>&nbsp;(define null-stream (stream-delay=20
 ()))<BR>&nbsp;(define (stream-pair? obj) (pair? (force-stream=20
 obj)))<BR>&nbsp;(define-syntax stream-cons</FONT></DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>&nbsp;&nbsp;(syntax-rules () =
 ((stream-cons=20
 h t) (stream-delay (cons (stream-delay h) (stream-delay =
 t))))))<BR>&nbsp;(define=20
 (stream-car strm) (force-stream (car (force-stream =
 strm))))<BR>&nbsp;(define=20
 (stream-cdr strm) (force-stream (cdr (force-stream =
 strm))))<BR>&nbsp;(define=20
 (make-stream e s) (stream-cons e (make-stream (s e) =
 s)))<BR>&nbsp;(define=20
 (stream-ref strm k) (if (zero? k) (stream-car strm) (stream-ref =
 (stream-cdr=20
 strm) (sub1 k))))<BR>&nbsp;<BR>&nbsp;(define (stream-filter pred =
 strm)<BR>&nbsp;=20
 (lazy-stream<BR>&nbsp;&nbsp; (if (not (stream-pair? strm))=20
 null-stream<BR>&nbsp;&nbsp;&nbsp; (let ((kar (stream-car=20
 strm)))<BR>&nbsp;&nbsp;&nbsp;&nbsp; (if (pred kar) (stream-cons kar=20
 (stream-filter pred (stream-cdr =
 strm)))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
 (stream-filter pred (stream-cdr strm)))))))<BR>&nbsp;;) ; uncomment for=20
 module</FONT></DIV>
 <DIV>&nbsp;</DIV>
 <DIV><FONT face=3D"Courier New" size=3D2>;(require a) ; incomment for=20
 module<BR>(define (times3 n) (stream-ref (stream-filter (lambda (x) =
 (zero?=20
 (modulo x n))) (make-stream 0 add1)) 3))<BR>(times3 10) ; --&gt; 30 ;=20
 ok<BR>(times3 1000000000)</FONT></DIV></BODY></HTML>
 
 ------=_NextPart_000_0006_01C7E374.BCC9C600--
 

Class changed from "sw-bug" to "duplicate" by eli at Mon, 24 Sep 2007 18:37:34 -0400
Reason>>> Probably a duplicate of PR8963

Responsible changed from "nobody" to "eli" by eli at Mon, 24 Sep 2007 18:37:34 -0400
Reason>>> .

State changed from "open" to "closed" by eli at Mon, 24 Sep 2007 18:37:34 -0400
Reason>>> Probably a duplicate of PR8963

