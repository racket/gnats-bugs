From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar 14 15:52:24 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p2EJqLVO016872
	for <bugs@bugs.plt-scheme.org>; Mon, 14 Mar 2011 15:52:22 -0400
Message-Id: <201103141952.p2EJq5Xs016866@champlain.ccs.neu.edu>
Date: Mon, 14 Mar 2011 15:52:05 -0400
From: anthony.west.513@gmail.com
To: bugs@racket-lang.org
Subject: raise exceptions without explicitly referring to continuation-marks

>Number:         11805
>Category:       mzscheme
>Synopsis:       raise exceptions without explicitly referring to continuation-marks
>Class:          change-request
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Mar 14 15:56:01 -0400 2011
>Last-Modified:  Wed Apr 06 08:44:57 -0400 2011
>Originator:     Anthony West
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.2
>Environment:
unix "Linux awest-laptop 2.6.32-29-generic #58-Ubuntu SMP Fri Feb 11 19:00:09 UTC 2011 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 127611808

Collections:
(("/home/awest/.racket/5.0.2/collects" non-existent-path) ("/home/awest/racket/collects" "r6rs" "ffi" "syntax-color" "unstable" "mred" "test-engine" "make" "mysterx" "typed" "info-domain" "combinator-parser" "datalog" "eopl" "scribble" "launcher" "string-constants" "algol60" "teachpack" "redex" "rnrs" "mrlib" "embedded-gui" "slideshow" "errortrace" "openssl" "gui-debugger" "texpict" "scheme" "racklog" "raco" "planet" "hierlist" "s-exp" "graphics" "net" "slatex" "games" "xml" "plai" "rackunit" "parser-tools" "swindle" "schemeunit" "mzscheme" "icons" "test-box-recovery" "config" "defaults" "typed-scheme" "at-exp" "deinprogramm" "trace" "stepper" "r5rs" "lang" "preprocessor" "plot" "drscheme" "lazy" "reader" "version" "2htdp" "sgl" "dynext" "htdp" "racket" "scribblings" "wxme" "web-server" "setup" "scriblib" "browser" "help" "afm" "framework" "data" "syntax" "mzlib" "profile" "drracket" "frtime" "tex2page" "compiler" "mzcom" "readline" "macro-debugger" "file" "html" "srfi"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
Dear PLT, please consider adding a function (presumably to racket/base) that instantiates a user-defined exception and raises it, but that instantiates the exception using a suitable default value for continuation-marks, the 2nd arg of the exception constructor.  Thank you.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Jon Rafkind <rafkind@cs.utah.edu>
To: anthony.west.513@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11805: raise exceptions without explicitly referring
 to continuation-marks
Date: Tue, 15 Mar 2011 13:44:46 -0600

 (define (error* constructor message . args)
   (raise (apply constructor message (current-continuation-marks) args)))
 
 How about if this was added to racket/base? Is anyone super concerned
 that an extra stack frame is added?
 
 On 03/14/2011 01:56 PM, anthony.west.513@gmail.com wrote:
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=11805
 >
 > Reported by Anthony West for release: 5.0.2
 >
 > *** Description:
 > Dear PLT, please consider adding a function (presumably to racket/base) that instantiates a user-defined exception and raises it, but that instantiates the exception using a suitable default value for continuation-marks, the 2nd arg of the exception constructor.  Thank you.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux awest-laptop 2.6.32-29-generic #58-Ubuntu SMP Fri Feb 11 19:00:09 UTC 2011 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
 > Human Language: english
 > (current-memory-use) 127611808
 >
 > Collections:
 > (("/home/awest/.racket/5.0.2/collects" non-existent-path) ("/home/awest/racket/collects" "r6rs" "ffi" "syntax-color" "unstable" "mred" "test-engine" "make" "mysterx" "typed" "info-domain" "combinator-parser" "datalog" "eopl" "scribble" "launcher" "string-constants" "algol60" "teachpack" "redex" "rnrs" "mrlib" "embedded-gui" "slideshow" "errortrace" "openssl" "gui-debugger" "texpict" "scheme" "racklog" "raco" "planet" "hierlist" "s-exp" "graphics" "net" "slatex" "games" "xml" "plai" "rackunit" "parser-tools" "swindle" "schemeunit" "mzscheme" "icons" "test-box-recovery" "config" "defaults" "typed-scheme" "at-exp" "deinprogramm" "trace" "stepper" "r5rs" "lang" "preprocessor" "plot" "drscheme" "lazy" "reader" "version" "2htdp" "sgl" "dynext" "htdp" "racket" "scribblings" "wxme" "web-server" "setup" "scriblib" "browser" "help" "afm" "framework" "data" "syntax" "mzlib" "profile" "drracket" "frtime" "tex2page" "compiler" "mzcom" "readline" "macro-debugger" "file" "html" "srfi"))
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
 
 
 
From: Eli Barzilay <eli@barzilay.org>
To: rafkind@cs.utah.edu
Cc: anthony.west.513@gmail.com, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11805: raise exceptions without explicitly referring
 to continuation-marks
Date: Tue, 15 Mar 2011 15:54:15 -0400

 5 minutes ago, Jon Rafkind wrote:
 > (define (error* constructor message . args)
 >   (raise (apply constructor message (current-continuation-marks) args)))
 > 
 > How about if this was added to racket/base?
 
 There's a bunch of `error*'s in the tree (most of them are mine
 though).
 
 
 > Is anyone super concerned that an extra stack frame is added?
 
 I am.  (Not "super".)  It'll make it less useful, and potentially
 confusing.
 
 
 Since `error' is already overloaded in a weird way, how about
 extending it so that it does the above when the first argument is a
 constructor for an exn struct?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: rafkind <rafkind@cs.utah.edu>,
        "anthony.west.513" <anthony.west.513@gmail.com>,
        bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11805: raise exceptions without explicitly
 referring to continuation-marks
Date: Tue, 15 Mar 2011 15:13:24 -0500

 This fn needs better error checking.
 
 Robby
 
 On Tue, Mar 15, 2011 at 2:54 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 5 minutes ago, Jon Rafkind wrote:
 >> (define (error* constructor message . args)
 >>   (raise (apply constructor message (current-continuation-marks) args)))
 >>
 >> How about if this was added to racket/base?
 >
 > There's a bunch of `error*'s in the tree (most of them are mine
 > though).
 >
 >
 >> Is anyone super concerned that an extra stack frame is added?
 >
 > I am.  (Not "super".)  It'll make it less useful, and potentially
 > confusing.
 >
 >
 > Since `error' is already overloaded in a weird way, how about
 > extending it so that it does the above when the first argument is a
 > constructor for an exn struct?
 >
 > --
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                    http://barzilay.org/                   Maze is Life!
 >
 
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: rafkind <rafkind@cs.utah.edu>,
        "anthony.west.513" <anthony.west.513@gmail.com>,
        bugs <bugs@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11805: raise exceptions without explicitly
 referring to continuation-marks
Date: Tue, 15 Mar 2011 16:39:31 -0400

 To clarify, I talked about this with Jon yesterday, and it looks to me
 like extending the primitive `error' can work without the damage of
 doing (define (foo x) (error foo "blah")) by mistake if it can require
 the first arrgument to be an exn constructor (or the usual).  I think
 that his `error*' definition was just a sketch for doing the same
 under a different name.
 
 
 20 minutes ago, Robby Findler wrote:
 > This fn needs better error checking.
 > 
 > Robby
 > 
 > On Tue, Mar 15, 2011 at 2:54 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > 5 minutes ago, Jon Rafkind wrote:
 > >> (define (error* constructor message . args)
 > >>   (raise (apply constructor message (current-continuation-marks) args)))
 > >>
 > >> How about if this was added to racket/base?
 > >
 > > There's a bunch of `error*'s in the tree (most of them are mine
 > > though).
 > >
 > >
 > >> Is anyone super concerned that an extra stack frame is added?
 > >
 > > I am.  (Not "super".)  It'll make it less useful, and potentially
 > > confusing.
 > >
 > >
 > > Since `error' is already overloaded in a weird way, how about
 > > extending it so that it does the above when the first argument is a
 > > constructor for an exn struct?
 > >
 > > --
 > >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 > >                    http://barzilay.org/                   Maze is Life!
 > >
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: rafkind@cs.utah.edu, anthony.west.513@gmail.com, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11805: raise exceptions without explicitly referring
 to continuation-marks
Date: Tue, 15 Mar 2011 14:50:55 -0600

 At Tue, 15 Mar 2011 15:54:15 -0400, Eli Barzilay wrote:
 > > Is anyone super concerned that an extra stack frame is added?
 > 
 > I am.  (Not "super".)  It'll make it less useful, and potentially
 > confusing.
 > 
 > 
 > Since `error' is already overloaded in a weird way, how about
 > extending it so that it does the above when the first argument is a
 > constructor for an exn struct?
 
 Is changing `error' motivated by the stack-frame issue?
 
 Since stack traces are both unreliable and expose too much information
 already, piling on C code to tweak them doesn't sound like the right
 trade-off to me.
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: rafkind@cs.utah.edu, anthony.west.513@gmail.com, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11805: raise exceptions without explicitly referring
 to continuation-marks
Date: Tue, 15 Mar 2011 17:29:30 -0400

 25 minutes ago, Matthew Flatt wrote:
 > At Tue, 15 Mar 2011 15:54:15 -0400, Eli Barzilay wrote:
 > > > Is anyone super concerned that an extra stack frame is added?
 > > 
 > > I am.  (Not "super".)  It'll make it less useful, and potentially
 > > confusing.
 > > 
 > > 
 > > Since `error' is already overloaded in a weird way, how about
 > > extending it so that it does the above when the first argument is a
 > > constructor for an exn struct?
 > 
 > Is changing `error' motivated by the stack-frame issue?
 
 Yes.
 
 
 > Since stack traces are both unreliable and expose too much
 > information already, piling on C code to tweak them doesn't sound
 > like the right trade-off to me.
 
 Well, the more generic thing would be for a (reliable) way for a
 function to remove itself from the trace, in any form it might be
 recorded on the continuation marks.  So too much information is
 not a problem since it removes information.
 
 This would solve multiple problems: the overloaded `error' could be
 defined in racket based on the primitive one, and -- something that
 has bugged me for a while -- I'd be able to make my course language
 throw errors without exposing its own source location (when students
 see the path to my implementation they often conclude that it's some
 internal error and not their error).
 
 [
 
 BTW, I first thought that for cases where you want to use multiple
 function levels you'd need this supposed new functionality to be
 "composable" in the sense that I'll need
 
   (define (my-primitive-error blah)
     ... (current-continuation-marks #:without my-primitive-error) ...)
   (define (my-exposed-error-binding blah)
     ;; ***
     (my-primitive-error blah))
 
 to somehow make it so `my-exposed-error-binding' is also dropped from
 the top of the trace.  But that code could be arranged differently:
 
   (define (my-primitive-error blah cont-marks)
     ... cont-marks ...)
   (define (my-exposed-error-binding blah)
     (my-primitive-error
      blah
      (current-continuation-marks #:without my-exposed-error-binding)))
 
 so just a reliable way to get rid of the current function is probably
 enough.
 
 ]
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

