From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Oct 22 10:16:56 2009
Received: from mail-gx0-f227.google.com (mail-gx0-f227.google.com [209.85.217.227])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n9MEGpKm011562
	for <bugs@bugs.plt-scheme.org>; Thu, 22 Oct 2009 10:16:51 -0400
Message-Id: <200910221416.n9MEGn0P011555@champlain.ccs.neu.edu>
Date: Thu, 22 Oct 2009 10:16:49 -0400
From: czhu@cs.utah.edu
To: bugs@plt-scheme.org
Subject: scheme_add_managed with FFI

>Number:         10538
>Category:       mzscheme
>Synopsis:       scheme_add_managed with FFI
>Class:          not-a-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Oct 22 10:20:01 -0400 2009
>Closed-Date:    Fri Oct 23 08:46:16 -0400 2009
>Last-Modified:  Fri Oct 23 08:46:16 -0400 2009
>Originator:     Chongkai Zhu
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.1.900
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 3" (win32\i386\3m) (get-display-depth) = 16
Human Language: english
(current-memory-use) 95297184

Collections:
(("C:\\Documents and Settings\\Chongkai Zhu\\Application Data\\PLT Scheme\\4.2.1.900\\collects" "info-domain" "mrmathematica") ("C:\\Program Files\\PLT\\collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "readline" "redex" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "version" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
1 run the following code in DrScheme
2 switch to other program that uses some memory (for example open a brower with some big website, and browse for a while)
3 swith back to DrScheme, hit run again -> segfault (if not, please go back to step 2 and try again)
>How-To-Repeat:
#lang scheme

(require scheme/foreign)
(unsafe!)

(provide (all-defined-out))

(define add-managed
  (get-ffi-obj "scheme_add_managed" #f
               (_fun (_pointer = #f) _scheme (_fun _scheme _pointer -> _void) _pointer _bool -> _pointer)))

(define (my-free p _)
  (free p))

(define (make-p)
  (let ((p (malloc _pointer 'raw)))
    (add-managed p my-free #f #f)
    p))

(define p1 (make-p))
(define p2 (make-p))

(ptr-ref p1 _int)
(ptr-ref p2 _int)
>Fix:
>Audit-Trail:
Class changed from "sw-bug" to "not-a-bug" by mflatt at Fri, 23 Oct 2009 08:46:16 -0400
Reason>>> see reason changed

State changed from "open" to "closed" by mflatt at Fri, 23 Oct 2009 08:46:16 -0400
Reason>>> Copying from mailing list:

The key feature of that example is that a single Scheme
function is
registered as a callback twice. The default handling of
callbacks is
that only the most recently generated foreign callback is
retained with
the Scheme function used as a callback. So, the second call to
scheme_add_managed with the same function allows the foreign
callback
generated by the first call to be GCed.

The simplest solution is to provides a boxed empty list for
`#:keep' in
the callback type:

  (_fun #:keep (box null) _scheme _pointer -> _void)

