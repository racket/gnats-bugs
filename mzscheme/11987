From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jun 19 14:44:02 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p5JIhxWJ028110
	for <bugs@bugs.plt-scheme.org>; Sun, 19 Jun 2011 14:44:00 -0400
Message-Id: <201106191843.p5JIhsUu028105@champlain.ccs.neu.edu>
Date: Sun, 19 Jun 2011 14:43:54 -0400
From: eli@barzilay.org
To: bugs@racket-lang.org
Subject: Compilation problem

>Number:         11987
>Category:       mzscheme
>Synopsis:       Compilation problem
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Jun 19 14:48:01 -0400 2011
>Closed-Date:    Thu Jun 30 11:49:04 -0400 2011
>Last-Modified:  Thu Jun 30 11:49:04 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
Linux
>Description:
The two functions below are identical, the only difference is how
`doit' is invoked, and the results are different in an obviously broken
way...  Changing stuff like returning just `x' makes it work again.
(And BTW, it's broken with or without the jit.)

>How-To-Repeat:
#lang racket/base

(define (example-1 lst)
  (define x 0)
  (define (doit)
    (reverse (foldl (lambda (v store) (set! x (add1 x)) (cons v store))
                    '() lst)))
  (let ([results (doit)])
    (list x results)))

(define (example-2 lst)
  (define x 0)
  (define (doit)
    (reverse (foldl (lambda (v store) (set! x (add1 x)) (cons v store))
                    '() lst)))
  (define results (doit))
  (list x results))

(car (example-1 '(a b c)))
(car (example-2 '(a b c)))
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by mflatt@racket-lang.org at Thu, 30 Jun 2011 11:49:04 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/b86e96cf90
