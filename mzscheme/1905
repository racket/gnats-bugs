From latendre@cs.rice.edu  Wed Mar 21 16:48:27 2001
Received: from localhost (nunavut.cs.rice.edu [128.42.3.177])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id QAA08328
	for <plt-gnats>; Wed, 21 Mar 2001 16:48:27 -0600 (CST)
Message-Id: <200103212248.QAA08328@cs.rice.edu>
Date: Wed, 21 Mar 2001 16:48:27 -0600 (CST)
From: latendre@cs.rice.edu
Reply-To:
To: plt-gnats@cs.rice.edu
Subject: inexact->exact shows IEEE 64 bits imprecision.

>Number:         1905
>Category:       mzscheme
>Synopsis:       inexact->exact shows IEEE 64 bits imprecision.
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Wed Mar 21 23:00:07 GMT 2001
>Closed-Date:    Fri Apr 12 11:27:29 EDT 2002
>Last-Modified:  Fri Apr 12 11:27:29 EDT 2002
>Originator:     Mario Latendresse
>Release:        102
>Organization:
titan
>Environment:
unix (i386-linux) (get-display-depth) = 16
Tools: ("syncheck" "project-manager")
Docs Installed:
("help" "mzscheme" "r5rs" "icons" "drscheme" "teachpack" "misclib" "mred" "beginning" "intermediate" "advanced")
Collections:
(("/home/latendre/soft/plt/collects" ("browser" "afm" "compiler" "drscheme" "graphics" "stepper" "hierlist" "icons" "make" "mzlib" "mred" "games" "mzscheme" "net" "help" "zodiac" "userspce" "dynext" "launcher" "drscheme-jr" "errortrace" "framework" "slibinit" "xml" "htdp" "setup" "defaults" "guserspce" "doc")))
>Description:
The expression (inexact->exact 3152519739159347.0) returns 3152519739159346. I expected
3152519739159347.(By the way, Gambit returns 3152519739159347).

The function inexact->exact does not return precise results to encode 
double floatting-point numbers. This may be cause by the internal representation or some internal
C rounding function used to implement that function. (Does it always round towards even as shown
by the more complete test?)

The IEEE 64 bits uses a normalized 53 bits mantissa (store normalized 52 bits).
I think we should expect that integer numbers in the interval [-2^53, 2^53] be represented 
without lost of precision. By extension, that should be the case for all inexact 
integer numbers in that same interval.

The smallest number I have found which cause an imprecision is 2^51+1, that is

(inexact->exact 2251799813685249.0) gives 2251799813685248.

It looks as if two bits were missing in the mantissa of the internal representation. 
(Any internal tag there? Are the floating-points internally unboxed?)

I sympathize with the pain of being close to the IEEE standard in Scheme, but it would be nice to have these two extra bits
of precision to perform conversion from and into the IEEE 64 bits standard.

Mario
>How-To-Repeat:
(inexact->exact 3152519739159347.0)

gives 3152519739159346

A more complete test 

(map inexact->exact (map (lambda (x) (+ x 3152519739159340.0)) '(0 1 2 3 4 5 6 7 8 9)))

gives 

(3152519739159340 3152519739159340 3152519739159342 3152519739159342 
3152519739159344 3152519739159344 3152519739159346 3152519739159346 
3152519739159348 3152519739159348)
>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: latendre@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1905: inexact->exact shows IEEE 64 bits imprecision.
Date: Wed, 21 Mar 2001 19:19:04 -0700 (MST)

 Quoting latendre@cs.rice.edu:
 > The expression (inexact->exact 3152519739159347.0) returns 3152519739159346. 
 
 Fixed for 199.6.
 
 For some reason, the float->bignum converter was configured to use 51
 bits instead of 53. Simply changing the constant from 51 to 53 solves
 the problem.
 
  > (inexact->exact 3152519739159347.0)
  3152519739159347
  > (inexact->exact 31525197391593472.0)
  31525197391593472
  > (inexact->exact 31525197391593473.0)
  31525197391593472
 
 ... which matches Gambit.
 
 Thanks for the bug report,
 Matthew
 
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri Apr 12 11:27:29 2002
Responsible-Changed-Why:
    mz bug
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Fri Apr 12 11:27:29 2002
State-Changed-Why:
    fixed long ago
>Unformatted:

