From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Feb  5 15:12:36 2008
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.175])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m15KCZNl004922
	for <bugs@bugs.plt-scheme.org>; Tue, 5 Feb 2008 15:12:35 -0500
Message-Id: <200802052012.m15KCUiM004917@champlain.ccs.neu.edu>
Date: Tue, 5 Feb 2008 15:12:30 -0500
From: czhu@cs.utah.edu
Reply-To:
To: bugs@plt-scheme.org
Subject: check syntax fails on double syntax-local-introduce in another module

>Number:         9185
>Category:       mzscheme
>Synopsis:       check syntax fails on double syntax-local-introduce in another module
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue Feb 05 15:15:01 -0500 2008
>Last-Modified:  Wed Feb 13 12:40:01 -0500 2008
>Originator:     czhu@cs.utah.edu
>Organization:
plt
>Submitter-Id:   unknown
>Release:        
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
Docs Installed:
()
Human Language: english
(current-memory-use) 83484548

Collections:
(("C:\\Documents and Settings\\Chongkai Zhu\\Application Data\\PLT Scheme\\3.99.0.9\\collects" non-existent-path) ("C:\\Program Files\\PLT-FULL-3.99.0.9\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "readline" "repos-time-stamp" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-ser!
 ver" "wxme" "xelda" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #()))
>Description:
The following program runs fine, but Check Syntax fails on file y.scm
>How-To-Repeat:
#lang scheme ;file x.scm
(provide x)
(define-syntax (x stx)
  (syntax-local-introduce
   (syntax-case (syntax-local-introduce stx) ()
     ((x y)
      #'(add1 y)))))

;end of file

#lang scheme ;file y.scm
(require "x.scm")
(x 1)
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@cs.uchicago.edu>
To: czhu@cs.utah.edu, bugs@plt-scheme.org
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/9185: check syntax fails on double syntax-local-introduce in another module
Date: Tue, 5 Feb 2008 19:00:57 -0600

 Thanks for the clear and simple bug report, Chongkai!
 
 Matthew: from what I can tell here the problem is that Check Syntax is
 recording a varible whose source location is not from the definitions
 window.
 
 I'm not sure how the marks are relevant, but if I remove the marking,
 then the variable (add1 is the one with the problem) is no longer
 original.
 
 Is that the correct behavior of syntax-original? I'm willing to
 believe that it is, and that syntax-original? is not the right
 predicate for Check Syntax, but I thought I should check.
 
 Thanks,
 Robby
 
 On Feb 5, 2008 2:15 PM,  <czhu@cs.utah.edu> wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9185
 >
 > Reported by czhu@cs.utah.edu for release:
 >
 > *** Description:
 > The following program runs fine, but Check Syntax fails on file y.scm
 >
 > *** How to repeat:
 > #lang scheme ;file x.scm
 > (provide x)
 > (define-syntax (x stx)
 >   (syntax-local-introduce
 >    (syntax-case (syntax-local-introduce stx) ()
 >      ((x y)
 >       #'(add1 y)))))
 >
 > ;end of file
 >
 > #lang scheme ;file y.scm
 > (require "x.scm")
 > (x 1)
 >
 > *** Environment:
 > windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
 > Docs Installed:
 > ()
 > Human Language: english
 > (current-memory-use) 83484548
 >
 > Collections:
 > (("C:\\Documents and Settings\\Chongkai Zhu\\Application Data\\PLT Scheme\\3.99.0.9\\collects" non-existent-path) ("C:\\Program Files\\PLT-FULL-3.99.0.9\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "readline" "repos-time-stamp" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-ser!
 >  ver" "wxme" "xelda" "xml"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #()))
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: czhu@cs.utah.edu, bugs@plt-scheme.org
Cc: "Matthew Flatt" <mflatt@cs.utah.edu>
Subject: Re: [plt-bug] all/9185: check syntax fails on double syntax-local-introduce in another module
Date: Fri, 8 Feb 2008 23:51:21 -0600

 Matthew: any thoughts on this one? Would a small example help?
 
 Robby
 
 On Feb 5, 2008 7:00 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > Thanks for the clear and simple bug report, Chongkai!
 >
 > Matthew: from what I can tell here the problem is that Check Syntax is
 > recording a varible whose source location is not from the definitions
 > window.
 >
 > I'm not sure how the marks are relevant, but if I remove the marking,
 > then the variable (add1 is the one with the problem) is no longer
 > original.
 >
 > Is that the correct behavior of syntax-original? I'm willing to
 > believe that it is, and that syntax-original? is not the right
 > predicate for Check Syntax, but I thought I should check.
 >
 > Thanks,
 > Robby
 >
 >
 > On Feb 5, 2008 2:15 PM,  <czhu@cs.utah.edu> wrote:
 > > A new problem report is waiting at
 > >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9185
 > >
 > > Reported by czhu@cs.utah.edu for release:
 > >
 > > *** Description:
 > > The following program runs fine, but Check Syntax fails on file y.scm
 > >
 > > *** How to repeat:
 > > #lang scheme ;file x.scm
 > > (provide x)
 > > (define-syntax (x stx)
 > >   (syntax-local-introduce
 > >    (syntax-case (syntax-local-introduce stx) ()
 > >      ((x y)
 > >       #'(add1 y)))))
 > >
 > > ;end of file
 > >
 > > #lang scheme ;file y.scm
 > > (require "x.scm")
 > > (x 1)
 > >
 > > *** Environment:
 > > windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
 > > Docs Installed:
 > > ()
 > > Human Language: english
 > > (current-memory-use) 83484548
 > >
 > > Collections:
 > > (("C:\\Documents and Settings\\Chongkai Zhu\\Application Data\\PLT Scheme\\3.99.0.9\\collects" non-existent-path) ("C:\\Program Files\\PLT-FULL-3.99.0.9\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "readline" "repos-time-stamp" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version" "waterworld" "web-ser!
 > >  ver" "wxme" "xelda" "xml"))
 > > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #()))
 > >
 > >
 >
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: czhu@cs.utah.edu, bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9185: check syntax fails on double syntax-local-introduce in another module
Date: Sat, 9 Feb 2008 13:28:46 -0700

 I haven't looked into it as much as I want, but I think:
 
  1. You're right that we need to fix the macro so that it produces the
     right `original?' information. (I think I know how to do that,
     Chongkai, and I'll send more information later.)
 
  2. Check Syntax should protect itself against a macro that provides
     incorrect `original?' info.
 
 Matthew
 
 At Fri, 8 Feb 2008 23:51:21 -0600, "Robby Findler" wrote:
 > Matthew: any thoughts on this one? Would a small example help?
 > 
 > Robby
 > 
 > On Feb 5, 2008 7:00 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > > Thanks for the clear and simple bug report, Chongkai!
 > >
 > > Matthew: from what I can tell here the problem is that Check Syntax is
 > > recording a varible whose source location is not from the definitions
 > > window.
 > >
 > > I'm not sure how the marks are relevant, but if I remove the marking,
 > > then the variable (add1 is the one with the problem) is no longer
 > > original.
 > >
 > > Is that the correct behavior of syntax-original? I'm willing to
 > > believe that it is, and that syntax-original? is not the right
 > > predicate for Check Syntax, but I thought I should check.
 > >
 > > Thanks,
 > > Robby
 > >
 > >
 > > On Feb 5, 2008 2:15 PM,  <czhu@cs.utah.edu> wrote:
 > > > A new problem report is waiting at
 > > >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9185
 > > >
 > > > Reported by czhu@cs.utah.edu for release:
 > > >
 > > > *** Description:
 > > > The following program runs fine, but Check Syntax fails on file y.scm
 > > >
 > > > *** How to repeat:
 > > > #lang scheme ;file x.scm
 > > > (provide x)
 > > > (define-syntax (x stx)
 > > >   (syntax-local-introduce
 > > >    (syntax-case (syntax-local-introduce stx) ()
 > > >      ((x y)
 > > >       #'(add1 y)))))
 > > >
 > > > ;end of file
 > > >
 > > > #lang scheme ;file y.scm
 > > > (require "x.scm")
 > > > (x 1)
 > > >
 > > > *** Environment:
 > > > windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386\3m) (get-
 > display-depth) = 32
 > > > Docs Installed:
 > > > ()
 > > > Human Language: english
 > > > (current-memory-use) 83484548
 > > >
 > > > Collections:
 > > > (("C:\\Documents and Settings\\Chongkai Zhu\\Application Data\\PLT 
 > Scheme\\3.99.0.9\\collects" non-existent-path) ("C:\\Program Files\\PLT-FULL-
 > 3.99.0.9\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" 
 > "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" 
 > "ffi" "file" "framework" "frtime" "games" "graphics" "guibuilder" "handin-
 > client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" 
 > "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" 
 > "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake" "net" "openssl" 
 > "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" 
 > "readline" "repos-time-stamp" "s-exp" "scheme" "scribble" "scribblings" 
 > "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi" "srpersist" 
 > "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" 
 > "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version" 
 > "waterworld" "web-ser!
 > > >  ver" "wxme" "xelda" "xml"))
 > > > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) 
 > (default) #()))
 > > >
 > > >
 > >
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "czhu@cs.utah.edu" <czhu@cs.utah.edu>,
        "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/9185: check syntax fails on double syntax-local-introduce in another module
Date: Sat, 9 Feb 2008 13:50:23 -0800

 Sp the syntax objects that CS is getting are in fact valid syntax  
 objects (but aren't meaningful ones) and so CS should avoid crashing?
 
 Put another way: there is no missing contract here and CS is properly  
 being blamed.
 
 This in contrast to the idea that syntax objects should have some  
 invariant about the original field (perhaps in conjunction with other  
 fields) that is being violated but that is currently unchecked?
 
 It seems like the latter is preferable in this case since the syntax  
 objects seem to be nonsense, so if that's the answer can you say a  
 little bit about why it has to be that way?
 
 Thanks,
 Robby
 
 On Feb 9, 2008, at 12:28 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 
 > I haven't looked into it as much as I want, but I think:
 >
 > 1. You're right that we need to fix the macro so that it produces the
 >    right `original?' information. (I think I know how to do that,
 >    Chongkai, and I'll send more information later.)
 >
 > 2. Check Syntax should protect itself against a macro that provides
 >    incorrect `original?' info.
 >
 > Matthew
 >
 > At Fri, 8 Feb 2008 23:51:21 -0600, "Robby Findler" wrote:
 >> Matthew: any thoughts on this one? Would a small example help?
 >>
 >> Robby
 >>
 >> On Feb 5, 2008 7:00 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 >>> Thanks for the clear and simple bug report, Chongkai!
 >>>
 >>> Matthew: from what I can tell here the problem is that Check  
 >>> Syntax is
 >>> recording a varible whose source location is not from the  
 >>> definitions
 >>> window.
 >>>
 >>> I'm not sure how the marks are relevant, but if I remove the  
 >>> marking,
 >>> then the variable (add1 is the one with the problem) is no longer
 >>> original.
 >>>
 >>> Is that the correct behavior of syntax-original? I'm willing to
 >>> believe that it is, and that syntax-original? is not the right
 >>> predicate for Check Syntax, but I thought I should check.
 >>>
 >>> Thanks,
 >>> Robby
 >>>
 >>>
 >>> On Feb 5, 2008 2:15 PM,  <czhu@cs.utah.edu> wrote:
 >>>> A new problem report is waiting at
 >>>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9185
 >>>>
 >>>> Reported by czhu@cs.utah.edu for release:
 >>>>
 >>>> *** Description:
 >>>> The following program runs fine, but Check Syntax fails on file  
 >>>> y.scm
 >>>>
 >>>> *** How to repeat:
 >>>> #lang scheme ;file x.scm
 >>>> (provide x)
 >>>> (define-syntax (x stx)
 >>>>  (syntax-local-introduce
 >>>>   (syntax-case (syntax-local-introduce stx) ()
 >>>>     ((x y)
 >>>>      #'(add1 y)))))
 >>>>
 >>>> ;end of file
 >>>>
 >>>> #lang scheme ;file y.scm
 >>>> (require "x.scm")
 >>>> (x 1)
 >>>>
 >>>> *** Environment:
 >>>> windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386 
 >>>> \3m) (get-
 >> display-depth) = 32
 >>>> Docs Installed:
 >>>> ()
 >>>> Human Language: english
 >>>> (current-memory-use) 83484548
 >>>>
 >>>> Collections:
 >>>> (("C:\\Documents and Settings\\Chongkai Zhu\\Application Data\\PLT
 >> Scheme\\3.99.0.9\\collects" non-existent-path) ("C:\\Program Files\ 
 >> \PLT-FULL-
 >> 3.99.0.9\\collects" "afm" "algol60" "browser" "combinator-parser"  
 >> "compiler"
 >> "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl"  
 >> "errortrace"
 >> "ffi" "file" "framework" "frtime" "games" "graphics" "guibuilder"  
 >> "handin-
 >> client" "handin-server" "help" "hierlist" "honu-module" "htdch"  
 >> "htdp" "html"
 >> "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger"  
 >> "make" "mred"
 >> "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake"  
 >> "net" "openssl"
 >> "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard"  
 >> "r5rs"
 >> "readline" "repos-time-stamp" "s-exp" "scheme" "scribble"  
 >> "scribblings"
 >> "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi"  
 >> "srpersist"
 >> "stepper" "string-constants" "swindle" "syntax" "syntax-color"  
 >> "teachpack"
 >> "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version"
 >> "waterworld" "web-ser!
 >>>> ver" "wxme" "xelda" "xml"))
 >>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t  
 >>>> debug)
 >> (default) #()))
 >>>>
 >>>>
 >>>
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: "czhu@cs.utah.edu" <czhu@cs.utah.edu>,
        "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/9185: check syntax fails on double syntax-local-introduce in another module
Date: Sat, 9 Feb 2008 15:34:30 -0700

 This is essentially what I want to look into more.
 
 To improve blame and to make mzscheme consistent with the idea that
 `original?' has to be correct, I think the notion of a source would
 have to be more explicitly a part of evaluation and expansion. That is,
 `expand', `eval', etc. would have to take a source as well as a syntax
 object to decide whether the syntax object is ok. Meanwhile, checking
 at the transformer boundary (to blame specific macros) seems
 prohibitively expensive, since a mark on the outside of a syntax object
 can change the `original?'-ness of a sub-object deep inside.
 
 But I'm not sure.
 
 Matthew
 
 At Sat, 9 Feb 2008 13:50:23 -0800, Robby Findler wrote:
 > Sp the syntax objects that CS is getting are in fact valid syntax  
 > objects (but aren't meaningful ones) and so CS should avoid crashing?
 > 
 > Put another way: there is no missing contract here and CS is properly  
 > being blamed.
 > 
 > This in contrast to the idea that syntax objects should have some  
 > invariant about the original field (perhaps in conjunction with other  
 > fields) that is being violated but that is currently unchecked?
 > 
 > It seems like the latter is preferable in this case since the syntax  
 > objects seem to be nonsense, so if that's the answer can you say a  
 > little bit about why it has to be that way?
 > 
 > Thanks,
 > Robby
 > 
 > On Feb 9, 2008, at 12:28 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 > 
 > > I haven't looked into it as much as I want, but I think:
 > >
 > > 1. You're right that we need to fix the macro so that it produces the
 > >    right `original?' information. (I think I know how to do that,
 > >    Chongkai, and I'll send more information later.)
 > >
 > > 2. Check Syntax should protect itself against a macro that provides
 > >    incorrect `original?' info.
 > >
 > > Matthew
 > >
 > > At Fri, 8 Feb 2008 23:51:21 -0600, "Robby Findler" wrote:
 > >> Matthew: any thoughts on this one? Would a small example help?
 > >>
 > >> Robby
 > >>
 > >> On Feb 5, 2008 7:00 PM, Robby Findler <robby@cs.uchicago.edu> wrote:
 > >>> Thanks for the clear and simple bug report, Chongkai!
 > >>>
 > >>> Matthew: from what I can tell here the problem is that Check  
 > >>> Syntax is
 > >>> recording a varible whose source location is not from the  
 > >>> definitions
 > >>> window.
 > >>>
 > >>> I'm not sure how the marks are relevant, but if I remove the  
 > >>> marking,
 > >>> then the variable (add1 is the one with the problem) is no longer
 > >>> original.
 > >>>
 > >>> Is that the correct behavior of syntax-original? I'm willing to
 > >>> believe that it is, and that syntax-original? is not the right
 > >>> predicate for Check Syntax, but I thought I should check.
 > >>>
 > >>> Thanks,
 > >>> Robby
 > >>>
 > >>>
 > >>> On Feb 5, 2008 2:15 PM,  <czhu@cs.utah.edu> wrote:
 > >>>> A new problem report is waiting at
 > >>>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9185
 > >>>>
 > >>>> Reported by czhu@cs.utah.edu for release:
 > >>>>
 > >>>> *** Description:
 > >>>> The following program runs fine, but Check Syntax fails on file  
 > >>>> y.scm
 > >>>>
 > >>>> *** How to repeat:
 > >>>> #lang scheme ;file x.scm
 > >>>> (provide x)
 > >>>> (define-syntax (x stx)
 > >>>>  (syntax-local-introduce
 > >>>>   (syntax-case (syntax-local-introduce stx) ()
 > >>>>     ((x y)
 > >>>>      #'(add1 y)))))
 > >>>>
 > >>>> ;end of file
 > >>>>
 > >>>> #lang scheme ;file y.scm
 > >>>> (require "x.scm")
 > >>>> (x 1)
 > >>>>
 > >>>> *** Environment:
 > >>>> windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386 
 > >>>> \3m) (get-
 > >> display-depth) = 32
 > >>>> Docs Installed:
 > >>>> ()
 > >>>> Human Language: english
 > >>>> (current-memory-use) 83484548
 > >>>>
 > >>>> Collections:
 > >>>> (("C:\\Documents and Settings\\Chongkai Zhu\\Application Data\\PLT
 > >> Scheme\\3.99.0.9\\collects" non-existent-path) ("C:\\Program Files\ 
 > >> \PLT-FULL-
 > >> 3.99.0.9\\collects" "afm" "algol60" "browser" "combinator-parser"  
 > >> "compiler"
 > >> "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl"  
 > >> "errortrace"
 > >> "ffi" "file" "framework" "frtime" "games" "graphics" "guibuilder"  
 > >> "handin-
 > >> client" "handin-server" "help" "hierlist" "honu-module" "htdch"  
 > >> "htdp" "html"
 > >> "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger"  
 > >> "make" "mred"
 > >> "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake"  
 > >> "net" "openssl"
 > >> "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard"  
 > >> "r5rs"
 > >> "readline" "repos-time-stamp" "s-exp" "scheme" "scribble"  
 > >> "scribblings"
 > >> "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi"  
 > >> "srpersist"
 > >> "stepper" "string-constants" "swindle" "syntax" "syntax-color"  
 > >> "teachpack"
 > >> "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version"
 > >> "waterworld" "web-ser!
 > >>>> ver" "wxme" "xelda" "xml"))
 > >>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t  
 > >>>> debug)
 > >> (default) #()))
 > >>>>
 > >>>>
 > >>>
From: Robby Findler <robby@cs.uchicago.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "czhu@cs.utah.edu" <czhu@cs.utah.edu>,
        "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/9185: check syntax fails on double syntax-local-introduce in another module
Date: Sat, 9 Feb 2008 16:09:06 -0800

 Can this be done lazily? I doubt that it would be the right thing but  
 can you look and see if the ideas in define-contract-struct would be  
 appropriate? (I can send a paper if you want.)
 
 Robby
 
 On Feb 9, 2008, at 2:34 PM, Matthew Flatt <mflatt@cs.utah.edu> wrote:
 
 > This is essentially what I want to look into more.
 >
 > To improve blame and to make mzscheme consistent with the idea that
 > `original?' has to be correct, I think the notion of a source would
 > have to be more explicitly a part of evaluation and expansion. That  
 > is,
 > `expand', `eval', etc. would have to take a source as well as a syntax
 > object to decide whether the syntax object is ok. Meanwhile, checking
 > at the transformer boundary (to blame specific macros) seems
 > prohibitively expensive, since a mark on the outside of a syntax  
 > object
 > can change the `original?'-ness of a sub-object deep inside.
 >
 > But I'm not sure.
 >
 > Matthew
 >
 > At Sat, 9 Feb 2008 13:50:23 -0800, Robby Findler wrote:
 >> Sp the syntax objects that CS is getting are in fact valid syntax
 >> objects (but aren't meaningful ones) and so CS should avoid crashing?
 >>
 >> Put another way: there is no missing contract here and CS is properly
 >> being blamed.
 >>
 >> This in contrast to the idea that syntax objects should have some
 >> invariant about the original field (perhaps in conjunction with other
 >> fields) that is being violated but that is currently unchecked?
 >>
 >> It seems like the latter is preferable in this case since the syntax
 >> objects seem to be nonsense, so if that's the answer can you say a
 >> little bit about why it has to be that way?
 >>
 >> Thanks,
 >> Robby
 >>
 >> On Feb 9, 2008, at 12:28 PM, Matthew Flatt <mflatt@cs.utah.edu>  
 >> wrote:
 >>
 >>> I haven't looked into it as much as I want, but I think:
 >>>
 >>> 1. You're right that we need to fix the macro so that it produces  
 >>> the
 >>>   right `original?' information. (I think I know how to do that,
 >>>   Chongkai, and I'll send more information later.)
 >>>
 >>> 2. Check Syntax should protect itself against a macro that provides
 >>>   incorrect `original?' info.
 >>>
 >>> Matthew
 >>>
 >>> At Fri, 8 Feb 2008 23:51:21 -0600, "Robby Findler" wrote:
 >>>> Matthew: any thoughts on this one? Would a small example help?
 >>>>
 >>>> Robby
 >>>>
 >>>> On Feb 5, 2008 7:00 PM, Robby Findler <robby@cs.uchicago.edu>  
 >>>> wrote:
 >>>>> Thanks for the clear and simple bug report, Chongkai!
 >>>>>
 >>>>> Matthew: from what I can tell here the problem is that Check
 >>>>> Syntax is
 >>>>> recording a varible whose source location is not from the
 >>>>> definitions
 >>>>> window.
 >>>>>
 >>>>> I'm not sure how the marks are relevant, but if I remove the
 >>>>> marking,
 >>>>> then the variable (add1 is the one with the problem) is no longer
 >>>>> original.
 >>>>>
 >>>>> Is that the correct behavior of syntax-original? I'm willing to
 >>>>> believe that it is, and that syntax-original? is not the right
 >>>>> predicate for Check Syntax, but I thought I should check.
 >>>>>
 >>>>> Thanks,
 >>>>> Robby
 >>>>>
 >>>>>
 >>>>> On Feb 5, 2008 2:15 PM,  <czhu@cs.utah.edu> wrote:
 >>>>>> A new problem report is waiting at
 >>>>>> http://bugs.plt-scheme.org/query/?cmd=view&pr=9185
 >>>>>>
 >>>>>> Reported by czhu@cs.utah.edu for release:
 >>>>>>
 >>>>>> *** Description:
 >>>>>> The following program runs fine, but Check Syntax fails on file
 >>>>>> y.scm
 >>>>>>
 >>>>>> *** How to repeat:
 >>>>>> #lang scheme ;file x.scm
 >>>>>> (provide x)
 >>>>>> (define-syntax (x stx)
 >>>>>> (syntax-local-introduce
 >>>>>>  (syntax-case (syntax-local-introduce stx) ()
 >>>>>>    ((x y)
 >>>>>>     #'(add1 y)))))
 >>>>>>
 >>>>>> ;end of file
 >>>>>>
 >>>>>> #lang scheme ;file y.scm
 >>>>>> (require "x.scm")
 >>>>>> (x 1)
 >>>>>>
 >>>>>> *** Environment:
 >>>>>> windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386
 >>>>>> \3m) (get-
 >>>> display-depth) = 32
 >>>>>> Docs Installed:
 >>>>>> ()
 >>>>>> Human Language: english
 >>>>>> (current-memory-use) 83484548
 >>>>>>
 >>>>>> Collections:
 >>>>>> (("C:\\Documents and Settings\\Chongkai Zhu\\Application Data\ 
 >>>>>> \PLT
 >>>> Scheme\\3.99.0.9\\collects" non-existent-path) ("C:\\Program Files\
 >>>> \PLT-FULL-
 >>>> 3.99.0.9\\collects" "afm" "algol60" "browser" "combinator-parser"
 >>>> "compiler"
 >>>> "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl"
 >>>> "errortrace"
 >>>> "ffi" "file" "framework" "frtime" "games" "graphics" "guibuilder"
 >>>> "handin-
 >>>> client" "handin-server" "help" "hierlist" "honu-module" "htdch"
 >>>> "htdp" "html"
 >>>> "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger"
 >>>> "make" "mred"
 >>>> "mrflow" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "mztake"
 >>>> "net" "openssl"
 >>>> "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard"
 >>>> "r5rs"
 >>>> "readline" "repos-time-stamp" "s-exp" "scheme" "scribble"
 >>>> "scribblings"
 >>>> "setup" "sgl" "sirmail" "skipper" "slatex" "slideshow" "srfi"
 >>>> "srpersist"
 >>>> "stepper" "string-constants" "swindle" "syntax" "syntax-color"
 >>>> "teachpack"
 >>>> "test-box-recovery" "tests" "tex2page" "texpict" "trace" "version"
 >>>> "waterworld" "web-ser!
 >>>>>> ver" "wxme" "xelda" "xml"))
 >>>>>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t
 >>>>>> debug)
 >>>> (default) #()))
 >>>>>>
 >>>>>>
 >>>>>

Responsible changed from "nobody" to "mflatt" by robby at Wed, 13 Feb 2008 12:35:56 -0500
Reason>>> see email transcript.

From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: "czhu@cs.utah.edu" <czhu@cs.utah.edu>,
        "bugs@plt-scheme.org" <bugs@plt-scheme.org>
Subject: Re: [plt-bug] all/9185: check syntax fails on double syntax-local-introduce in another module
Date: Wed, 13 Feb 2008 11:36:01 -0600

 Okay, I've changed check syntax so that it silently ignores such bad
 information in original syntax objects.
 
 I'm not super happy about that, because it can mask bugs (I do agree
 that check syntax isn't really the place to be debugging macros).
 
 Robby
