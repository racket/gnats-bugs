From nobody@champlain.ccs.neu.edu  Fri Sep  6 15:34:59 2002
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id PAA27678
	for bugs@plt-scheme.org; Fri, 6 Sep 2002 15:34:59 -0400
Message-Id: <200209061934.PAA27678@champlain.ccs.neu.edu>
Date: Fri, 6 Sep 2002 15:34:59 -0400
From: renaud.desportes@sgdl-sys.com
Reply-To:
To: bugs@plt-scheme.org
Subject: starting scheme environment in a user thread crashes

>Number:         5794
>Category:       mzscheme
>Synopsis:       starting scheme environment in a user thread crashes
>Confidential:   no
>Severity:       critical
>Priority:       high
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Fri Sep 06 15:40:00 EDT 2002
>Closed-Date:    Sat Apr 05 17:18:42 EST 2003
>Last-Modified:  Sat Apr 05 17:18:42 EST 2003
>Originator:     Renaud Desportes
>Release:        2.02
>Organization:
plt
>Environment:
mac-ppc-osx
>Description:
When starting the basic scheme environment in a user thread (instead of the main thread), this leads to a 'Segmentation fault' error.
A simple test programme is shown below.
This problem is fully repeatable.
>How-To-Repeat:
follows the source code of a short programme that shows evidence of the problem :


// [1] compile this file:
//     c++ -I/usr/local/plt/include -o a.out debug_thread.cpp -lpthread /usr/local/plt/lib/mzdyn.o /usr/local/plt/lib/libmzgc.a /usr/local/plt/lib/libmzscheme.a
//    Static libraries libmzgc.a and libmzscheme.a are generated by the default './configure --prefix=/usr/local/plt ; make ; make install' of mzscheme.src.unix.tar.gz for MacOS X
// [2] run ./a.out

// Tested on MacOS 10.1
// with Apple Computer Inc. version gcc-934.3 based on gcc version 2.95.2 19991024 (release)

// * works if RUN_IN_MAIN is set to 1
// * fails (Segmentation fault) when RUN_IN_MAIN is set to 0
#define RUN_IN_MAIN 0

#include "scheme.h"
#include "pthread.h"

static void* start_scheme(void* arg) {
  // creating the basic scheme environment
  Scheme_Env* env = scheme_basic_env();
  // more stuff should go there, but code is never reached when run in a 'user' thread...
  printf("start_thread[done]\n"); fflush(stdout); getchar();
}

int main(int c, char* v[]) {
#if RUN_IN_MAIN==1
  // works in the main thread
  start_scheme(0);
  return 0;
#else
  // fails if run in a 'user' thread

  // [1] let's create our thread that will launch the scheme interpreter
  
  //     some attribute initialization
  pthread_attr_t attr;
  pthread_attr_init(&attr);
  pthread_attr_setinheritsched(&attr, PTHREAD_INHERIT_SCHED);
  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);

  //     creation of myThread
  pthread_t myThread;
  pthread_create(&myThread, &attr, start_scheme, 0);

  //     minor cleaning
  pthread_attr_destroy(&attr);

  // [2] forces main thread to go to sleep endlessly, for the purposes of this example,
  //     as if we were running an event handler...
  pthread_mutex_t myMutex = PTHREAD_MUTEX_INITIALIZER;
  pthread_cond_t myCond = PTHREAD_COND_INITIALIZER;

  pthread_cond_wait(&myCond, &myMutex);

  return 0;
#endif
}

>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: renaud.desportes@sgdl-sys.com
Cc: bugs@plt-scheme.org
Subject: Re: all/5794: starting scheme environment in a user thread crashes
Date: Fri, 6 Sep 2002 13:43:18 -0600 (MDT)

 At Fri, 6 Sep 2002 15:34:59 -0400, renaud.desportes@sgdl-sys.com wrote:
 > When starting the basic scheme environment in a user thread (instead of the 
 > main thread), this leads to a 'Segmentation fault' error.
 > A simple test programme is shown below.
 > This problem is fully repeatable.
 
 The problem is almost certainly that the GC doesn't probably handle
 threads and thread-specific stacks in Mac OS X. I'll check whether an
 updated GC is available.
 
 Meanwhile, if you're able to use scheme_set_stack_base(), I bet the
 problem goes away.
 
 Matthew
 

From: Renaud Desportes <renaud.desportes@sgdl-sys.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/5794: starting scheme environment in a user thread crashes
Date: Fri, 06 Sep 2002 17:53:39 -0400

 Many thanks for your help
 
 > Meanwhile, if you're able to use scheme_set_stack_base(), I bet the
 > problem goes away.
 We have added the following at the beginning of main function (before the #if RUN_IN_MAIN) :
 ------------------------- code added begin here ------------------------
 static int __my_stack_base__ = 0;     // ----> Bus error
 //int __my_stack_base__ = 0;    // ----> Segmentation fault
 scheme_set_stack_base(&__my_stack_base__, 0);
 ------------------------- code added ends here -------------------------
 
 Unfortunately, we still have errors (either Bus error for static int, or Segmentation fault for int declaration).
 
 Renaud
 -- 
 Renaud Desportes       renaud.desportes@sgdl-sys.com
 SGDL Systems Inc.     Montreal, Quebec, Canada
 tel  +1 514 948 0927         fax  +1 514 948 6497
 web  http://www.sgdl.com/
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Renaud Desportes <renaud.desportes@sgdl-sys.com>
Cc: bugs@plt-scheme.org
Subject: Re: all/5794: starting scheme environment in a user thread crashes
Date: Sat, 7 Sep 2002 06:21:33 -0600 (MDT)

 Sorry - my message wasn't clear.
 
 scheme_set_stack_base() must be called in the thread that will interact
 with MzScheme. So it needs to be in start_scheme(), before the call to
 scheme_basic_env(). That way, it's identifying the stack specifically
 used by MzScheme.
 
 You do want the non-static __my_stack_base__, not the static one.
 
 In other words, here's the code that works for me:
 
  static void* start_scheme(void* arg) {
    // creating the basic scheme environment
    int __my_stack_base__ = 0;
    scheme_set_stack_base(&__my_stack_base__, 0);
    Scheme_Env* env = scheme_basic_env();
    printf("start_thread[done]\n"); fflush(stdout); getchar();
  }
 
 Technically, if you're going to use env multiple times, it's safer to
 make sure that __my_stack_base__ lives earlier in the stack:
 
 
  static void* really_start_scheme(void* arg) {
    // creating the basic scheme environment
    Scheme_Env* env = scheme_basic_env();
    printf("start_thread[done]\n"); fflush(stdout); getchar();
  }
 
  static void* start_scheme(void* arg) {
    // creating the basic scheme environment
    int __my_stack_base__ = 0;
    scheme_set_stack_base(&__my_stack_base__, 0);
    return really_start_scheme(arg);
  }
 
 Matthew
 
 At Fri, 06 Sep 2002 17:53:39 -0400, Renaud Desportes wrote:
 > 
 > Many thanks for your help
 > 
 > > Meanwhile, if you're able to use scheme_set_stack_base(), I bet the
 > > problem goes away.
 > We have added the following at the beginning of main function (before the #if 
 > RUN_IN_MAIN) :
 > ------------------------- code added begin here ------------------------
 > static int __my_stack_base__ = 0;     // ----> Bus error
 > //int __my_stack_base__ = 0;    // ----> Segmentation fault
 > scheme_set_stack_base(&__my_stack_base__, 0);
 > ------------------------- code added ends here -------------------------
 > 
 > Unfortunately, we still have errors (either Bus error for static int, or 
 > Segmentation fault for int declaration).
 > 
 > Renaud
 > -- 
 > Renaud Desportes       renaud.desportes@sgdl-sys.com
 > SGDL Systems Inc.     Montreal, Quebec, Canada
 > tel  +1 514 948 0927         fax  +1 514 948 6497
 > web  http://www.sgdl.com/
 > 
 
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Sat Apr  5 17:18:42 2003
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Sat Apr  5 17:18:42 2003
State-Changed-Why:
    solved problem way back when
>Unformatted:

