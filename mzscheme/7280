From apache@plt-scheme.org Sun Mar 20 18:44:31 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j2KNiUnN028617
	for <bugs@plt-scheme.org>; Sun, 20 Mar 2005 18:44:30 -0500
Message-Id: <200503202344.j2KNiU8o028615@champlain.ccs.neu.edu>
Date: Sun, 20 Mar 2005 18:44:30 -0500
From: jensaxel@soegaard.net
To: bugs@plt-scheme.org
Subject: The definition of letrec in the R5RS language has a bug

>Number:         7280
>Category:       mzscheme
>Synopsis:       The definition of letrec in the R5RS language has a bug
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Mar 20 18:45:01 -0500 2005
>Last-Modified:  Mon Mar 21 14:14:10 -0500 2005
>Originator:     Jens Axel SÃ¸gaard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.33-cvs13mar2005
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 16
Docs Installed:
(#<path:C:\Programmer\PLT-299.33\collects\doc\web-server> #<path:C:\Programmer\PLT-299.33\collects\doc\tour> #<path:C:\Programmer\PLT-299.33\collects\doc\tools> #<path:C:\Programmer\PLT-299.33\collects\doc\tex2page> #<path:C:\Programmer\PLT-299.33\collects\doc\teachpack> #<path:C:\Programmer\PLT-299.33\collects\doc\t-y-scheme> #<path:C:\Programmer\PLT-299.33\collects\doc\swindle> #<path:C:\Programmer\PLT-299.33\collects\doc\srfi> #<path:C:\Programmer\PLT-299.33\collects\doc\r5rs> #<path:C:\Programmer\PLT-299.33\collects\doc\profj-intermediate> #<path:C:\Programmer\PLT-299.33\collects\doc\profj-beginner> #<path:C:\Programmer\PLT-299.33\collects\doc\profj-advanced> #<path:C:\Programmer\PLT-299.33\collects\doc\plot> #<path:C:\Programmer\PLT-299.33\collects\doc\mzscheme> #<path:C:\Programmer\PLT-299.33\collects\doc\mzlib> #<path:C:\Programmer\PLT-299.33\collects\doc\mzc> #<path:C:\Programmer\PLT-299.33\collects\doc\mred> #<path:C:\Programmer\PLT-299.33\collects\doc\misclib> #<path:C:\Programmer\PLT-299.33\collects\doc\intermediate-lambda> #<path:C:\Programmer\PLT-299.33\collects\doc\intermediate> #<path:C:\Programmer\PLT-299.33\collects\doc\insidemz> #<path:C:\Programmer\PLT-299.33\collects\doc\help> #<path:C:\Programmer\PLT-299.33\collects\doc\framework> #<path:C:\Programmer\PLT-299.33\collects\doc\foreign> #<path:C:\Programmer\PLT-299.33\collects\doc\drscheme> #<path:C:\Programmer\PLT-299.33\collects\doc\beginning-abbr> #<path:C:\Programmer\PLT-299.33\collects\doc\beginning> #<path:C:\Programmer\PLT-299.33\collects\doc\advanced>)
Collections:
((#<path:C:\Documents and Settings\js\Application Data\PLT Scheme\299.33\collects> "non-existent path") (#<path:C:\Programmer\PLT-299.33\collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:cvs-time-stamp> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Pretty Big (includes MrEd and Advanced)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
The definition of letrec in the r5rs language in the 299-series
(see bottom of startup.ss) has been copied from the appendix
of R5RS and thus doesn't handle internal defines. 

E.g.  (letrec ((x 2))
        (define x 1)
        x)

results in this error message:

    define: not allowed in an expression context in: (define x 1)

(There is a quick fix in the Scheme FAQ)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: =?ISO-8859-1?Q?Jens_Axel_S=F8gaard?= <jensaxel@soegaard.net>
To: bugs@plt-scheme.org
Cc: 
Subject: Re: all/7280: The definition of letrec in the R5RS language has a
 bug
Date: Mon, 21 Mar 2005 01:07:30 +0100

 Here is a suggestion for a pedantic version of the R5RS letrec.
 Note that mzscheme on purpose "fails" the first two tests 1.1
 and 1.2 with the normal letrec.
 
 /Jens Axel
 
 ;; tested on 209 in the pretty big language
 
 (module pedantic-letrec mzscheme
    (provide pedantic-letrec)
    (define-syntax (undefine-vars-in-expr/loc stx)
      (let ((build
             (lambda (loc vars-stx expr-stx)
               (with-syntax ( ((var ...) vars-stx) )
                 (quasisyntax
                  (let-syntax
                      ((var (make-set!-transformer
                             (lambda (stx)
                               (syntax-case stx (set!)
                                 ((set! var expr)
                                  (quasisyntax
                                   (raise-syntax-error 'letrec
                                                       "Letrec restriction violated, attempt to set! this variable:"
                                                       #,(syntax #'var))))
                                 (var
                                  (identifier? #'var)
                                  (quasisyntax
                                   (raise-syntax-error 'letrec
                                                       (string-append
                                                        "Letrec restriction violated, attempt to reference "
                                                        "uninitialized variable")
                                                       #,(syntax #'var))))
                                 (_
                                  (raise-syntax-error 'letrec
                                                      "Letrec restriction violated, w.r.t. the variable:"
                                                      #,(syntax #'stx)))))))
                       ...)
                    #,expr-stx))))))
        (syntax-case stx ()
          ((_ loc vars expr)
           (build #'loc #'vars #'expr)))))
 
 
    (define-syntax (pedantic-letrec stx)
      (syntax-case stx ()
        ((_ ((var init) ...) . body)
         (let ((vars #'(var ...)))
           (quasisyntax/loc stx
             (let ((var 'undefined)
                   ...)
               (let ((bod (lambda () . body))
                     (var (let ((temp (undefine-vars-in-expr/loc
                                       #'here
                                       #,vars
                                       init)))
                            (lambda () (set! var temp))))
                     ...)
                 (var) ... (bod))))))
        (_
         (raise-syntax-error #f "bad use of letrec in: " stx)))))
 
 
 (require pedantic-letrec)
 
 (pedantic-letrec () 1)
 (pedantic-letrec ((x 2)) x)
 
 ;;; These should (and does) all signal an informative error:
 ;(pedantic-letrec ((y 2) (x y)) x)
 ;(pedantic-letrec  ((x 5) (y x)) y)
 ;(pedantic-letrec ((x 5) (y (set! y 3))) y)
 
 
 ;;; Now for the letrec tests from
 ;;;  <http://sisc.sourceforge.net/r5rspitresults.html>
 
 
 (define-syntax letrec
    (syntax-rules ()
      ((_ . more) (pedantic-letrec . more))))
 
 
 (define-syntax should-be
    (syntax-rules ()
      ((_ test-id value expression)
       (let ((return-value expression))
           (if (not (equal? return-value value))
             (for-each (lambda (v) (display v))
                       `("Failure: " test-id ", expected '"
                       value "', got '" ,return-value "'." #\newline))
             (for-each (lambda (v) (display v))
                       '("Passed: " test-id #\newline)))))))
 
 (define call/cc call-with-current-continuation)
 
 ;; Section 1: Proper letrec implementation
 
 ;;Credits to Al Petrofsky
 ;; In thread:
 ;; defines in letrec body
 ;; http://groups.google.com/groups?selm=87bsoq0wfk.fsf%40app.dial.idiom.com
 (should-be 1.1 0
   (let ((cont #f))
     (letrec ((x (call-with-current-continuation (lambda (c) (set! cont c) 0)))
              (y (call-with-current-continuation (lambda (c) (set! cont c) 0))))
       (if cont
           (let ((c cont))
             (set! cont #f)
             (set! x 1)
             (set! y 1)
             (c 0))
           (+ x y)))))
 
 ;;Credits to Al Petrofsky
 ;; In thread:
 ;; Widespread bug (arguably) in letrec when an initializer returns twice
 ;; http://groups.google.com/groups?selm=87d793aacz.fsf_-_%40app.dial.idiom.com
 (should-be 1.2 #t
    (letrec ((x (call/cc list)) (y (call/cc list)))
      (cond ((procedure? x) (x (pair? y)))
 	  ((procedure? y) (y (pair? x))))
      (let ((x (car x)) (y (car y)))
        (and (call/cc x) (call/cc y) (call/cc x)))))
 
 ;;Credits to Alan Bawden
 ;; In thread:
 ;; LETREC + CALL/CC = SET! even in a limited setting
 ;; http://groups.google.com/groups?selm=19890302162742.4.ALAN%40PIGPEN.AI.MIT.EDU
 (should-be 1.3 #t
    (letrec ((x (call-with-current-continuation
 		  (lambda (c)
 		    (list #T c)))))
        (if (car x)
 	  ((cadr x) (list #F (lambda () x)))
 	  (eq? x ((cadr x))))))
 
 
 ;;Not really an error to fail this (Matthias Radestock)
 ;;If this returns (0 1 0), your map isn't call/cc safe, but is probably
 ;;tail-recursive.  If its (0 0 0), the opposite is true.
 (let ((result
         (let ()
           (define executed-k #f)
           (define cont #f)
           (define res1 #f)
           (define res2 #f)
           (set! res1 (map (lambda (x)
                             (if (= x 0)
                                 (call/cc (lambda (k) (set! cont k) 0))
                                 0))
                           '(1 0 2)))
           (if (not executed-k)
               (begin (set! executed-k #t)
                      (set! res2 res1)
                      (cont 1)))
           res2)))
    (if (equal? result '(0 0 0))
        (display "Map is call/cc safe, but probably not tail recursive or inefficient.")
        (display "Map is not call/cc safe, but probably tail recursive and efficient."))
    (newline))
 
 
 
 
Responsible changed from "nobody" to "mflatt" by mflatt at Mon, 21 Mar 2005 14:14:10 -0500
Reason>>> mz

State changed from "open" to "closed" by mflatt at Mon, 21 Mar 2005 14:14:10 -0500
Reason>>> Fixed in CVS.

Thanks!
Matthew

