From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue May  8 09:32:08 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q48DW50t012831
	for <bugs@bugs.plt-scheme.org>; Tue, 8 May 2012 09:32:05 -0400
Message-Id: <201205081332.q48DW2Kf012826@champlain.ccs.neu.edu>
Date: Tue, 8 May 2012 09:32:02 -0400
From: danking@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Set Equality with Cyclic Structure is not as Expected

>Number:         12756
>Category:       mzscheme
>Synopsis:       Set Equality with Cyclic Structure is not as Expected
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue May 08 09:36:01 -0400 2012
>Last-Modified:  Sun Jun 03 11:38:44 -0400 2012
>Originator:     Daniel King
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.1
>Environment:
linux-ubuntu
>Description:
The following code snippet is a bit confusing to me. Sets with cyclic structure are not equal? even though they meet my intuitive definition of equal.

Below, see a comparison of sets and lists with similar cyclic structure. The lists is equal? but the sets are not.

Welcome to Racket v5.2.1.
> (let* ((a-box (box #f))
               (b-box (box #f))
               (a (set 1 a-box))
               (b (set 1 b-box)))
          (set-box! a-box a)
          (set-box! b-box b)
          (displayln a)
          (displayln b)
          (equal? a b))
#0=#<set: 1 #&#0#>
#0=#<set: 1 #&#0#>
#f
> (let* ((a-box (box #f))
                (b-box (box #f))
                (a (list 1 a-box))
                (b (list 1 b-box)))
           (set-box! a-box a)
           (set-box! b-box b)
           (displayln a)
           (displayln b)
           (equal? a b))
#0=(1 #&#0#)
#0=(1 #&#0#)
#t
> 
>How-To-Repeat:
(let* ((a-box (box #f))
               (b-box (box #f))
               (a (set 1 a-box))
               (b (set 1 b-box)))
          (set-box! a-box a)
          (set-box! b-box b)
          (displayln a)
          (displayln b)
          (equal? a b))
>Fix:
