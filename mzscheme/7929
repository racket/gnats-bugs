From apache@plt-scheme.org Fri Mar  3 04:54:57 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k239suY1024014
	for <bugs@plt-scheme.org>; Fri, 3 Mar 2006 04:54:56 -0500
Message-Id: <200603030954.k239suru024012@champlain.ccs.neu.edu>
Date: Fri, 3 Mar 2006 04:54:56 -0500
From: la@iki.fi
To: bugs@plt-scheme.org
Subject: expt produces strange results with infinities

>Number:         7929
>Category:       mzscheme
>Synopsis:       expt produces strange results with infinities
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Mar 03 04:55:00 -0500 2006
>Last-Modified:  Fri Mar 03 09:39:12 -0500 2006
>Originator:     Lauri Alanko
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301.8
>Environment:
linux-other
>Description:
Here are some strange results from expt with infinities. I'm no expert in numerical stuff, but there's something fishy here.

> (expt +inf.0 2)
+inf.0 (OK)

> (expt +inf.0 -2)
+inf.0 (Should be +0.0)

> (expt -inf.0 2)
+inf.0 (Should be -inf.0)

> (expt -inf.0 -2)
+inf.0 (Should be -0.0)

> (expt 2 +inf.0)
+inf.0 (OK)

> (expt -2 +inf.0)
+inf.0 (Should be NaN)

> (expt 2 -inf.0) 
0.0 (OK)

> (expt -2 -inf.0)
0.0 (OK)

> (expt +inf.0 +inf.0)
+inf.0 (OK)

> (expt +inf.0 -inf.0)
0.0 (OK)

> (expt -inf.0 +inf.0)
+inf.0 (Should be NaN)

This is on an Athlon 64 machine, in case hardware is relevant.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: la@iki.fi, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7929: expt produces strange results with infinities
Date: Fri, 3 Mar 2006 06:53:35 -0700

 At Fri, 3 Mar 2006 04:55:08 -0500, la@iki.fi wrote:
 > > (expt +inf.0 -2)
 > +inf.0 (Should be +0.0)
 > [...]
 > > (expt -inf.0 -2)
 > +inf.0 (Should be -0.0)
 > [...]
 > > (expt -inf.0 +inf.0)
 > +inf.0 (Should be NaN)
 
 Yep, I've overlooked these cases. (They're not in my test suite).
 
 > > (expt -2 +inf.0)
 > +inf.0 (Should be NaN)
 
 I didn't entirely overlook this one (there's a test case for it), but
 +nan.0 does seem like the right answer. I'll investigate more.
 
 > > (expt -inf.0 2)
 > +inf.0 (Should be -inf.0)
 
 MzScheme is right on this one, because 2 is even. (There's a test
 case.)
 
 Thanks!
 Matthew
 

State changed from "open" to "closed" by mflatt at Fri, 03 Mar 2006 09:39:12 -0500
Reason>>> I fixed the problem with negative powers of
+inf.0 and -inf.0.

FWIW, (expt -inf.0 -2) is 0.0, but (exp -inf.0 3) is -0.0.

In the case of a +inf.0 power of negative numbers, the
answer is still +inf.0. This doesn't make sense to me, but
it's consistent with other standards and implementations.
(See Java's pow, for example. Probably this choice comes from IEEE,
but I didn't check.) I note that (atan +inf.0 +inf.0) is similar; it
goes to pi/4 according to IEEE, though +nan.0 makes more
sense to me.

Thanks,
Matthew

