From nobody@cs.rice.edu  Mon Oct 26 20:08:32 1998
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id UAA18490
	for <plt-gnats@cs.rice.edu>; Mon, 26 Oct 1998 20:08:32 -0600 (CST)
Message-Id: <199810270208.UAA06749@web.cs.rice.edu>
Date: Mon, 26 Oct 1998 20:08:31 -0600 (CST)
From: cobbe@hex.net
Reply-To: cobbe@hex.net
To: plt-gnats@cs.rice.edu
Subject: MzScheme docs incorrect 

>Number:         823
>Category:       mzscheme
>Synopsis:       MzScheme docs incorrect
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          doc-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Oct 27 02:15:02 GMT 1998
>Last-Modified:  Thu Dec  9 16:20:58 CST 1999
>Originator:     Richard Cobbe
>Organization:
titan
>Release:        53
>Environment:
unknown
>Description:
In the "Input Parsing" section of the docs for MzScheme 53 (release),
it states that "An input token constructed in this way is an identifier
when it is not a numerical constant (following the number syntax of R4RS
plus the special inexact numbers +inf.0, etc., discussed in section 4.3)."

This is not really correct, actually.  Here, as in many other things,
MzScheme accepts a far wider range of numbers than R4RS (or R5RS, for that
matter) allows.

[minbar (ttyp0):~]> mzscheme
Welcome to MzScheme version 53, Copyright (c) 1995-98 PLT (Matthew Flatt)
> #o10.34
8.4375
> #b11.0101
3.3125
> #xff.3f
read-number: bad number ff.3f

So -- in addition to accepting base-10 decimals, Mz also accepts "decimals"
in base 2 and 8, although not in base 16.  (The question of what one of
these "octal decimals" or "binary decimals" should be called is left as
an exercise to the reader. <grin>)

However, R4RS page 32 (sec 7.1.1) states: "There are no rules for
<decimal 2>, <decimal 8>, and <decimal 16>, which means that numbers
containing decimal points or exponents must be in decimal radix."  (It
turns out that Mz will also accept exponential notation in binary and
octal; in hex, the 'e' gets interpreted as '14'.)

For the record, section 7.1.1 of R5RS states the same thing.

For most of PLT's users, this isn't that big a deal.  Since I'm working
on the reader, though, it'd be nifty if there were a complete description
of the lexical structure of the language available.  (No hurries--I've
muddled through and I think I've got a regexp that will handle all of
MzScheme's numbers....)
>How-To-Repeat:

>Fix:

>Audit-Trail:

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri Dec 11 19:55:10 1998
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Thu Dec  9 16:20:32 1999
State-Changed-Why:
Fixed MzScheme to read "decimal" hex numbers correctly,
documented number syntax extensions.

>Unformatted:
