From apache@plt-scheme.org Thu Feb  2 21:54:00 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k132rvip028602
	for <bugs@plt-scheme.org>; Thu, 2 Feb 2006 21:53:57 -0500
Message-Id: <200602030253.k132rvPj028600@champlain.ccs.neu.edu>
Date: Thu, 2 Feb 2006 21:53:57 -0500
From: cobbe@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: and/c and or/c should specify order of evaluation

>Number:         7860
>Category:       mzscheme
>Synopsis:       and/c and or/c should specify order of evaluation
>Class:          doc-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Feb 02 21:55:13 -0500 2006
>Last-Modified:  Fri Feb 03 09:35:01 -0500 2006
>Originator:     Richard Cobbe
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301.4-svn2feb2006
>Environment:
macosx "Darwin Ridcully.local 8.4.0 Darwin Kernel Version 8.4.0: Tue Jan  3 18:22:10 PST 2006; root:xnu-792.6.56.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Users/cobbe/plt/trunk/collects/doc/r5rs> #<path:/Users/cobbe/plt/trunk/collects/doc/mzscheme> #<path:/Users/cobbe/plt/trunk/collects/doc/mred> #<path:/Users/cobbe/plt/trunk/collects/doc/help> #<path:/Users/cobbe/plt/trunk/collects/doc/tour> #<path:/Users/cobbe/plt/trunk/collects/doc/drscheme> #<path:/Users/cobbe/plt/trunk/collects/doc/srfi> #<path:/Users/cobbe/plt/trunk/collects/doc/mzlib> #<path:/Users/cobbe/plt/trunk/collects/doc/misclib> #<path:/Users/cobbe/plt/trunk/collects/doc/mrlib> #<path:/Users/cobbe/plt/trunk/collects/doc/framework> #<path:/Users/cobbe/plt/trunk/collects/doc/foreign> #<path:/Users/cobbe/plt/trunk/collects/doc/mzc> #<path:/Users/cobbe/plt/trunk/collects/doc/tools> #<path:/Users/cobbe/plt/trunk/collects/doc/insidemz> #<path:/Users/cobbe/plt/trunk/collects/doc/web-server> #<path:/Users/cobbe/plt/trunk/collects/doc/swindle> #<path:/Users/cobbe/plt/trunk/collects/doc/plot> #<path:/Users/cobbe/plt/trunk/collects/doc/t-y-scheme> #<path:/Users/cobbe/plt/trunk/collects/doc/tex2page> #<path:/Users/cobbe/plt/trunk/collects/doc/beginning> #<path:/Users/cobbe/plt/trunk/collects/doc/beginning-abbr> #<path:/Users/cobbe/plt/trunk/collects/doc/intermediate> #<path:/Users/cobbe/plt/trunk/collects/doc/intermediate-lambda> #<path:/Users/cobbe/plt/trunk/collects/doc/advanced> #<path:/Users/cobbe/plt/trunk/collects/doc/teachpack> #<path:/Users/cobbe/plt/trunk/collects/doc/profj-beginner> #<path:/Users/cobbe/plt/trunk/collects/doc/profj-intermediate> #<path:/Users/cobbe/plt/trunk/collects/doc/profj-advanced>)
Collections:
((#<path:/Users/cobbe/Library/PLT Scheme/301.4/collects> "non-existent path") (#<path:/Users/cobbe/plt/trunk/collects> (#<path:.svn> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-client> #<path:handin-server> #<path:help> #<path:hierlist> #<path:honu> #<path:honu-module> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrflow> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:plai> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:profjWizard> #<path:r5rs> #<path:r6rs> #<path:readline> #<path:reduction-semantics> #<path:repos-time-stamp> #<path:setup> #<path:sgl> #<path:sirmail> #<path:skipper> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
The and/c contract form needs to specify the order in which its argument
contracts are checked, and whether the resulting contract is
short-circuiting (like the built-in (and ...) form).

I'll also argue that and/c needs to guarantee that its result is
short-circuiting, otherwise one can't reliably write a contract that
recognizes all positive numbers and rejects all other values.  Without
guaranteed short-circuiting, I have to allow for the possibility that
(and/c number? positive?) will crash (as opposed to signaling a contract
violation) if the value in question is 'foo.  (Example inspired by the
draft HtUS chapter.)

Beyond that, I don't really much care what evaluation order you choose:
left-to-right, right-to-left, or the monster raving loony order that Chez
uses for procedure calls.  Of course, I have a mild preference for
left-to-right.

This entire argument also applies to or/c (and union, while it still
exists).

Incidentally, I agree with Matthias: if the monitoring system breaks
because a predicate throws an error, then that's a bug, or at least highly
undesirable.  Even if this bug gets fixed (tho I don't know how to do that,
or even what the desired behavior is), though, my arguments above still
apply, since the order of evaluation is still observable.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7860: and/c and or/c should specify order of evaluation
Date: Thu, 2 Feb 2006 22:12:23 -0500

 			
 On Feb 2, 2006, at 9:55 PM, cobbe@ccs.neu.edu wrote:
 
 > This entire argument also applies to or/c (and union, while it still
 > exists).
 
 Why does the order matter? (I want left to right, too.) -- Matthias
 
From: Robby Findler <robby@cs.uchicago.edu>
To: cobbe@ccs.neu.edu, bugs@plt-scheme.org
Cc: matthias@ccs.neu.edu
Subject: Re: all/7860: and/c and or/c should specify order of evaluation
Date: Thu, 2 Feb 2006 22:14:18 -0600

 At Thu, 2 Feb 2006 21:55:15 -0500, cobbe@ccs.neu.edu wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=7860
 > 
 > Reported by Richard Cobbe for release: 301.4-svn2feb2006
 > 
 > *** Description:
 > The and/c contract form needs to specify the order in which its argument
 > contracts are checked, and whether the resulting contract is
 > short-circuiting (like the built-in (and ...) form).
 > 
 > I'll also argue that and/c needs to guarantee that its result is
 > short-circuiting, otherwise one can't reliably write a contract that
 > recognizes all positive numbers and rejects all other values.  Without
 > guaranteed short-circuiting, I have to allow for the possibility that
 > (and/c number? positive?) will crash (as opposed to signaling a contract
 > violation) if the value in question is 'foo.  (Example inspired by the
 > draft HtUS chapter.)
 > 
 > Beyond that, I don't really much care what evaluation order you choose:
 > left-to-right, right-to-left, or the monster raving loony order that Chez
 > uses for procedure calls.  Of course, I have a mild preference for
 > left-to-right.
 > 
 > This entire argument also applies to or/c (and union, while it still
 > exists).
 
 and/c is short-circuiting from the left to the right, with the
 exception that it always moves the one non-flat contract (if there is
 one) to the end. Same for or/c. The non-flat contract has to be moved
 to the end for technical reasons.
 
 I've updated the docs (and added a test suite to guarantee this
 behavior going forward).
 
 > Incidentally, I agree with Matthias: if the monitoring system breaks
 > because a predicate throws an error, then that's a bug, or at least highly
 > undesirable.  Even if this bug gets fixed (tho I don't know how to do that,
 > or even what the desired behavior is), though, my arguments above still
 > apply, since the order of evaluation is still observable.
 
 Who disagrees with that?! (and I don't see how it affects the order of
 evaluation).
 
 Robby

Responsible changed from "nobody" to "robby" by robby at Thu, 02 Feb 2006 23:17:29 -0500
Reason>>> rbf

State changed from "open" to "closed" by robby at Thu, 02 Feb 2006 23:17:29 -0500
Reason>>> fixed and released to svn

From: Richard Cobbe <cobbe@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/7860: and/c and or/c should specify order of evaluation
Date: Fri, 3 Feb 2006 07:04:39 -0500

 On Thu, Feb 02, 2006 at 10:12:23PM -0500, Matthias Felleisen wrote:
 > 			
 > On Feb 2, 2006, at 9:55 PM, cobbe@ccs.neu.edu wrote:
 > 
 > >This entire argument also applies to or/c (and union, while it still
 > >exists).
 > 
 > Why does the order matter? (I want left to right, too.) -- Matthias
 
 I'm not entirely sure I understand the context of your question, but it
 matters because contracts created from arbitrary predicates can have
 side effects.  (That's probably a bad idea for software engineering
 reasons, but I'd still prefer that the language specify the resulting
 behavior.)
 
 Richard
From: Richard Cobbe <cobbe@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, matthias@ccs.neu.edu
Subject: Re: all/7860: and/c and or/c should specify order of evaluation
Date: Fri, 3 Feb 2006 07:09:35 -0500

 On Thu, Feb 02, 2006 at 10:14:18PM -0600, Robby Findler wrote:
 > At Thu, 2 Feb 2006 21:55:15 -0500, cobbe@ccs.neu.edu wrote:
 
 > and/c is short-circuiting from the left to the right, with the
 > exception that it always moves the one non-flat contract (if there is
 > one) to the end. Same for or/c. The non-flat contract has to be moved
 > to the end for technical reasons.
 > 
 > I've updated the docs (and added a test suite to guarantee this
 > behavior going forward).
 
 Great!  Thanks for taking care of that.
 
 > > Incidentally, I agree with Matthias: if the monitoring system breaks
 > > because a predicate throws an error, then that's a bug, or at least highly
 > > undesirable.  Even if this bug gets fixed (tho I don't know how to do that,
 > > or even what the desired behavior is), though, my arguments above still
 > > apply, since the order of evaluation is still observable.
 > 
 > Who disagrees with that?! (and I don't see how it affects the order of
 > evaluation).
 
 Oh -- I was simply going off Matthias's annotation to the HtUS draft
 chapter on contracts.  (Or was that Matthew's?)  It's not clear from
 that whether this is a controversial point or not.  I only mentioned it
 because the example
 
     (module foo mzscheme
         (require (lib "contract.ss"))
         (define a 'bar)
         (provide/contract [a positive?]))
 
 was what got me thinking about this -- how would I work around this
 problem with the contract system -- and generated the main example I
 used in the original report.  In the paragraph that you quoted above, I
 explain that, IMO, the problem still exists even if the contract system
 is changed to have a different behavior with the foo module.  Sorry for
 the confusion.
 
 Did I understand your question correctly?
 
 Richard
From: Robby Findler <robby@cs.uchicago.edu>
To: Richard Cobbe <cobbe@ccs.neu.edu>
Cc: bugs@plt-scheme.org, matthias@ccs.neu.edu
Subject: Re: all/7860: and/c and or/c should specify order of evaluation
Date: Fri, 3 Feb 2006 08:02:40 -0600

 At Fri, 3 Feb 2006 07:09:35 -0500, Richard Cobbe wrote:
 > Oh -- I was simply going off Matthias's annotation to the HtUS draft
 > chapter on contracts.  (Or was that Matthew's?)  It's not clear from
 > that whether this is a controversial point or not.  I only mentioned it
 > because the example
 > 
 >     (module foo mzscheme
 >         (require (lib "contract.ss"))
 >         (define a 'bar)
 >         (provide/contract [a positive?]))
 > 
 > was what got me thinking about this -- how would I work around this
 > problem with the contract system -- and generated the main example I
 > used in the original report.  In the paragraph that you quoted above, I
 > explain that, IMO, the problem still exists even if the contract system
 > is changed to have a different behavior with the foo module.  Sorry for
 > the confusion.
 
 It is still my contention that the correct interpretation of the
 behavior of that program is that mzscheme is signalling a contract
 violation, blaming foo for abusing positive?. It just doesn't have as
 good error reporting as (lib "contract.ss") does. (You can see that
 clearly if you put positive? into a separate module, add a contract to
 it, and import it into foo)
 
 Robby
From: Richard Cobbe <cobbe@ccs.neu.edu>
To: Robby Findler <robby@cs.uchicago.edu>
Cc: bugs@plt-scheme.org, matthias@ccs.neu.edu
Subject: Re: all/7860: and/c and or/c should specify order of evaluation
Date: Fri, 3 Feb 2006 09:31:28 -0500

 On Fri, Feb 03, 2006 at 08:02:40AM -0600, Robby Findler wrote:
 > At Fri, 3 Feb 2006 07:09:35 -0500, Richard Cobbe wrote:
 > > Oh -- I was simply going off Matthias's annotation to the HtUS draft
 > > chapter on contracts.  (Or was that Matthew's?)  It's not clear from
 > > that whether this is a controversial point or not.  I only mentioned it
 > > because the example
 > > 
 > >     (module foo mzscheme
 > >         (require (lib "contract.ss"))
 > >         (define a 'bar)
 > >         (provide/contract [a positive?]))
 > > 
 > > was what got me thinking about this -- how would I work around this
 > > problem with the contract system -- and generated the main example I
 > > used in the original report.  In the paragraph that you quoted above, I
 > > explain that, IMO, the problem still exists even if the contract system
 > > is changed to have a different behavior with the foo module.  Sorry for
 > > the confusion.
 > 
 > It is still my contention that the correct interpretation of the
 > behavior of that program is that mzscheme is signalling a contract
 > violation, blaming foo for abusing positive?. It just doesn't have as
 > good error reporting as (lib "contract.ss") does. (You can see that
 > clearly if you put positive? into a separate module, add a contract to
 > it, and import it into foo)
 
 Ok.  I think you and I are basically in agreement there.  In retrospect,
 this example isn't really related to the main point of the bug; it was
 just what got me thinking about the order of evaluation.
 
 For the curious, here was my thought process:
 
   - read HtUS draft
   - see the example in question
   - say "oh yuk"
   - think: "ok, until the contract system is fixed to do this right,
     how would I work around this?"
   - obvious answer: (and/c number? positive?)
   - but wait: is and/c guaranteed to go left-to-right and short-circuit?
     Because if not, that won't necessarily work either.
   - check help desk, notice lack of specification.
 
 In short, the whole discussion about the HtUS example is an artifact of
 this process, and we can safely ignore it in this context.
 
 Richard
