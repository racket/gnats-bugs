From schlie@attbi.com  Sat Jul 27 13:29:06 2002
Received: from localhost (IDENT:root@localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id NAA06487
	for <bugs>; Sat, 27 Jul 2002 13:29:06 -0400
Message-Id: <200207271729.NAA06487@champlain.ccs.neu.edu>
Date: Sat, 27 Jul 2002 13:29:06 -0400
From: Paul Schlie <schlie@attbi.com>
Reply-To:
To: bugs@plt-scheme.org
Subject: MzScheme define name-binding change request

>Number:         5692
>Category:       mzscheme
>Synopsis:       MzScheme define name-binding change request
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          suspended
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Sat Jul 27 13:30:00 EDT 2002
>Closed-Date:    
>Last-Modified:  Mon Apr 28 13:04:04 EDT 2003
>Originator:     Paul Schlie
>Release:        200.3
>Organization:
plt
>Environment:
macosx "Darwin localhost 5.5 Darwin Kernel Version 5.5: Thu May 30 14:51:26 PDT 2002; root:xnu/xnu-201.42.3.obj~1/RELEASE_PPC  Power Macintosh powerpc" (ppc-macosx)

Docs Installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "CVS" "drscheme" "framework" "help" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "tex2page" "tools" "tour")

Collections:
(("/Users/paul/Desktop/plt-cvs/plt/bin/../MrEd.app/Contents/MacOS/../../../collects" (".DS_Store" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "drjava" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mrdemo" "mred" "mrflow" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "parser-tools" "readline" "setup" "sirmail" "slatex" "slibinit" "srpersist" "stepper" "string-constants" "syntax" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))

Human Language: english
>Description:
Although I realize that 201 is likely immanent, is there any chance
to tweak the present define name-binding policy such that:

(define x (let ((y (lambda (z) z))) y))
 -> <procedure:x>
not <procedure:y>

But retains:
(define x (list (let ((y (lambda (z) z))) y)))
 -> (<procedure:y>)

And possibly when occurring within a source file "FILE":
(define x (list (lambda (z) z)))
 -> (<procedure:FILE:N:17>)
not (<procedure:N:17>)

(or alternativly, as in general I suspect there is likely value in
optionally retaining the FILE coordinates for all definitions when
processed in debug mode, but invisible when being displayed.)

Thereby possibly yielding in the above anonymous lambda example:
(define x (list (lambda (z) z)))
 -> (<procedure>)
not (<procedure:N:17>) or (<procedure:FILE:N:17>)

Where to extract an arbitrary definitions source file coordinates:
(#source-file-coordinate: x)
-> (FILE-PATH N 17)

Where FILE-PATH is either the relative path from the presently
displayed file within the definition window, or it's absolute path,
which ever is determined to be more sensible.

Which then could be further complemented by a new generalized
DrScheme feature to allow any displayed file name or coordinate
to be selected in either the definition or interaction window frame,
and be opened using a command-key short-cut (and/or explicitly via
"(#edit-file: (#source-file-coordinate: x))", or whatever which may
be useful for DrScheme scripting).

Thanks for your patience in reviewing this somewhat long request.

>How-To-Repeat:
(not applicable)
>Fix:

>Release-Note:

>Audit-Trail:

From: Paul Schlie <schlie@attbi.com>
To: <bugs@plt-scheme.org>
Cc:  
Subject: Re: all/5692: MzScheme define name-binding change request
Date: Sun, 28 Jul 2002 12:18:50 -0400

 As a possible refinement to anonymous lambda definitions, might it
 be possible to bind them to "(gensym)" symbols, such that they can
 uniquely displayed, and be correspondingly referenced through some
 magic "ref-uninterned" symbol procedure for debugging? i.e.:
 
 (define x (list (lambda (y) (+ y)) (lambda (y) (- y))))
  -> (#<procedure:gxxx> #<procedure:gyyy>)
 ((ref-uninterned gxxx) 1)
  -> 1
 ((ref-uninterned gyyy) 1)
  -> -1
 
 Thanks again, -paul-
 
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon Apr 28 13:04:03 2003
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->suspended
State-Changed-By: mflatt
State-Changed-When: Mon Apr 28 13:04:03 2003
State-Changed-Why:
    Need to revisit.
>Unformatted:

