From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jul 26 11:20:41 2013
Received: from mail-oa0-f51.google.com (mail-oa0-f51.google.com [209.85.219.51])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r6QFKb63021988
	for <bugs@bugs.plt-scheme.org>; Fri, 26 Jul 2013 11:20:38 -0400
Message-Id: <201307261520.r6QFKYr7021982@champlain.ccs.neu.edu>
Date: Fri, 26 Jul 2013 11:20:34 -0400
From: ultimatemacfanatic@gmail.com
To: bugs@racket-lang.org
Subject: #:guard option not sufficiently documented

>Number:         13934
>Category:       mzscheme
>Synopsis:       #:guard option not sufficiently documented
>Class:          doc-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Jul 26 11:24:01 -0400 2013
>Last-Modified:  Mon Oct 21 10:16:43 -0400 2013
>Originator:     Christopher
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.4
>Environment:
mac-i386-osx
>Description:
In the Racket Reference which, to me, is supposed to explain everything clearly in full detail, does not sufficiently explain how to use the #:guard option in the main section on structures.  

I have not used guards before and when I tried to use one, I found that my data structure field was getting filled up with #<void>.

The page http://docs.racket-lang.org/reference/structures.html?q=provide&q=generator&q=make-object&q=hash-set%21&q=set-field%21&q=predicate/c&q=apply&q=gvector&q=class/c&q=provide&q=member&q=eqv%3F&q=member&q=-%3Em*&q=exact&q=class/c&q=member&q=vector&q=struct&q=when&q=for does not explain what guards are and how to use them--only that they do not work with prefab structures.

The next page http://docs.racket-lang.org/reference/define-struct.html?q=provide&q=generator&q=make-object&q=hash-set%21&q=set-field%21&q=predicate/c&q=apply&q=gvector&q=class/c&q=provide&q=member&q=eqv%3F&q=member&q=-%3Em*&q=exact&q=class/c&q=member&q=vector&q=struct&q=when&q=for explains SOMETHING about guards, but (unless I missed something) does not detail the fact that Racket expects the guard procedure to return the values of the constructor arguments that are to be assigned to the data structure--thus by returning a void value from this guard procedure, I was inadvertently initializing every struct to have void values.

Finally in http://docs.racket-lang.org/reference/creatingmorestructs.html?q=provide&q=generator&q=make-object&q=hash-set%21&q=set-field%21&q=predicate/c&q=apply&q=gvector&q=class/c&q=provide&q=member&q=eqv%3F&q=member&q=-%3Em*&q=exact&q=class/c&q=member&q=vector&q=struct&q=when&q=for it finally says buried down in there that "The guard result must be n values, which become the actual values for the structureâ€™s fields".

This ought to be made cleared sooner in the Racket Reference documentation.
>How-To-Repeat:
>Fix:
