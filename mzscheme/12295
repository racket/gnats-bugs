From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Oct 16 21:52:41 2011
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p9H1qc4G009623
	for <bugs@bugs.plt-scheme.org>; Sun, 16 Oct 2011 21:52:38 -0400
Message-Id: <201110170152.p9H1qZEL009618@champlain.ccs.neu.edu>
Date: Sun, 16 Oct 2011 21:52:35 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Contract out does not support exporting struct-types before they are defined

>Number:         12295
>Category:       mzscheme
>Synopsis:       Contract out does not support exporting struct-types before they are defined
>Class:          change-request
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Oct 16 21:56:01 -0400 2011
>Closed-Date:    Mon Oct 24 09:16:56 -0400 2011
>Last-Modified:  Mon Oct 24 09:16:56 -0400 2011
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.0.1--2011-10-14(7270c27/g)
>Environment:
macosx "Darwin eric-dobsons-macbook.local 11.1.0 Darwin Kernel Version 11.1.0: Tue Jul 26 16:09:02 PDT 2011; root:xnu-1699.22.81~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 320926752
Links: (links) = ("rudybot" "raco-git"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/eric/Library/Racket/5.2.0.1/collects"
 ("info-domain"))
("/Users/eric/proj/racket/plt/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket!
 " "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
>Description:
My understanding of contract-out was that unlike provide/contract it could be written at the top of the module before definitions so that modules would look nicer. Currently the implementation's lack of support for struct types prevents this behavior.
>How-To-Repeat:
#lang racket
(provide
 (contract-out
  (struct foo ((bar number?)))))
(struct foo (bar))
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12295: Contract out does not support exporting
 struct-types before they are defined
Date: Sun, 23 Oct 2011 11:01:55 -0500

 On Sun, Oct 16, 2011 at 8:56 PM,  <eric.n.dobson@gmail.com> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12295
 >
 > Reported by Eric Dobson for release: 5.2.0.1--2011-10-14(7270c27/g)
 >
 > *** Description:
 > My understanding of contract-out was that unlike provide/contract it could be written at the top of the module before definitions so that modules would look nicer. Currently the implementation's lack of support for struct types prevents this behavior.
 >
 > *** How to repeat:
 > #lang racket
 > (provide
 >  (contract-out
 >  (struct foo ((bar number?)))))
 > (struct foo (bar))
 >
 
 After working on this a little bit, I think that maybe this is not
 possible. Specifically, when you make a struct declaration, you which
 fields have mutators and you (essentially) say if the constructor is
 using the "make-" prefix or not. This information is then put into the
 binding of the struct name ("foo" in the example above).  So if that
 binding is not available, then contract-out does not know which names
 it should be providing (and that is the piece of information it would
 need to be able to communicate before it gets to see the binding for
 the struct name).
 
 I see two possible resolutions:
 
   - document this limitation
 
   - change contract-out's 'struct' subclause syntax so it has the
 needed information.
 
 If the latter, then I would like to push a change before the release
 that makes 'struct' a syntax error in contract-out so I have some more
 time to decide on a good syntax (this will be the first release with
 'contract-out').
 
 Opinions?
 
 Robby
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12295: Contract out does not support exporting
 struct-types before they are defined
Date: Sun, 23 Oct 2011 13:42:29 -0400

 On Sun, Oct 23, 2011 at 12:01 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Sun, Oct 16, 2011 at 8:56 PM,  <eric.n.dobson@gmail.com> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12295
 >>
 >> Reported by Eric Dobson for release: 5.2.0.1--2011-10-14(7270c27/g)
 >>
 >> *** Description:
 >> My understanding of contract-out was that unlike provide/contract it could be written at the top of the module before definitions so that modules would look nicer. Currently the implementation's lack of support for struct types prevents this behavior.
 >>
 >> *** How to repeat:
 >> #lang racket
 >> (provide
 >>  (contract-out
 >>  (struct foo ((bar number?)))))
 >> (struct foo (bar))
 >>
 >
 > After working on this a little bit, I think that maybe this is not
 > possible. Specifically, when you make a struct declaration, you which
 > fields have mutators and you (essentially) say if the constructor is
 > using the "make-" prefix or not. This information is then put into the
 > binding of the struct name ("foo" in the example above).  So if that
 > binding is not available, then contract-out does not know which names
 > it should be providing (and that is the piece of information it would
 > need to be able to communicate before it gets to see the binding for
 > the struct name).
 >
 > I see two possible resolutions:
 >
 >  - document this limitation
 
 I vote for document.  That way, if we come up with a way around this
 limitation, we won't have restricted the syntax of the `struct'
 clause.
 
 >  - change contract-out's 'struct' subclause syntax so it has the
 > needed information.
 >
 > If the latter, then I would like to push a change before the release
 > that makes 'struct' a syntax error in contract-out so I have some more
 > time to decide on a good syntax (this will be the first release with
 > 'contract-out').
 >
 > Opinions?
 >
 > Robby
 >
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12295: Contract out does not support exporting
 struct-types before they are defined
Date: Sun, 23 Oct 2011 12:59:27 -0500

 On Sun, Oct 23, 2011 at 12:42 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Sun, Oct 23, 2011 at 12:01 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Sun, Oct 16, 2011 at 8:56 PM,  <eric.n.dobson@gmail.com> wrote:
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12295
 >>>
 >>> Reported by Eric Dobson for release: 5.2.0.1--2011-10-14(7270c27/g)
 >>>
 >>> *** Description:
 >>> My understanding of contract-out was that unlike provide/contract it could be written at the top of the module before definitions so that modules would look nicer. Currently the implementation's lack of support for struct types prevents this behavior.
 >>>
 >>> *** How to repeat:
 >>> #lang racket
 >>> (provide
 >>>  (contract-out
 >>>  (struct foo ((bar number?)))))
 >>> (struct foo (bar))
 >>>
 >>
 >> After working on this a little bit, I think that maybe this is not
 >> possible. Specifically, when you make a struct declaration, you which
 >> fields have mutators and you (essentially) say if the constructor is
 >> using the "make-" prefix or not. This information is then put into the
 >> binding of the struct name ("foo" in the example above).  So if that
 >> binding is not available, then contract-out does not know which names
 >> it should be providing (and that is the piece of information it would
 >> need to be able to communicate before it gets to see the binding for
 >> the struct name).
 >>
 >> I see two possible resolutions:
 >>
 >>  - document this limitation
 >
 > I vote for document.  That way, if we come up with a way around this
 > limitation, we won't have restricted the syntax of the `struct'
 > clause.
 
 That kind of thinking is what makes me prefer the second option (the
 one below).  That is, if I make 'struct' a syntax error in
 contract-out for this release, I can figure out the Right Thing for
 the next release.
 
 (Currently, I'm hoping that something that looks like the racket/base
 struct declaration where the field names are instead contracts would
 work out.)
 
 
 
 >>  - change contract-out's 'struct' subclause syntax so it has the
 >> needed information.
 >>
 >> If the latter, then I would like to push a change before the release
 >> that makes 'struct' a syntax error in contract-out so I have some more
 >> time to decide on a good syntax (this will be the first release with
 >> 'contract-out').
 >>
 >> Opinions?
 >>
 >> Robby
 >>
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: eric.n.dobson@gmail.com, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12295: Contract out does not support exporting
 struct-types before they are defined
Date: Sun, 23 Oct 2011 22:45:16 -0500

 I talked with Matthew about this more and I was imagining restrictions
 that just aren't in place.
 
 I can support the existing syntax just fine, with a slightly different
 technique for the implementation.
 
 So nevermind wrt to the release.
 
 Robby
 
 On Sun, Oct 23, 2011 at 12:59 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Sun, Oct 23, 2011 at 12:42 PM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> On Sun, Oct 23, 2011 at 12:01 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> On Sun, Oct 16, 2011 at 8:56 PM,  <eric.n.dobson@gmail.com> wrote:
 >>>> A new problem report is waiting at
 >>>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12295
 >>>>
 >>>> Reported by Eric Dobson for release: 5.2.0.1--2011-10-14(7270c27/g)
 >>>>
 >>>> *** Description:
 >>>> My understanding of contract-out was that unlike provide/contract it could be written at the top of the module before definitions so that modules would look nicer. Currently the implementation's lack of support for struct types prevents this behavior.
 >>>>
 >>>> *** How to repeat:
 >>>> #lang racket
 >>>> (provide
 >>>>  (contract-out
 >>>>  (struct foo ((bar number?)))))
 >>>> (struct foo (bar))
 >>>>
 >>>
 >>> After working on this a little bit, I think that maybe this is not
 >>> possible. Specifically, when you make a struct declaration, you which
 >>> fields have mutators and you (essentially) say if the constructor is
 >>> using the "make-" prefix or not. This information is then put into the
 >>> binding of the struct name ("foo" in the example above).  So if that
 >>> binding is not available, then contract-out does not know which names
 >>> it should be providing (and that is the piece of information it would
 >>> need to be able to communicate before it gets to see the binding for
 >>> the struct name).
 >>>
 >>> I see two possible resolutions:
 >>>
 >>>  - document this limitation
 >>
 >> I vote for document.  That way, if we come up with a way around this
 >> limitation, we won't have restricted the syntax of the `struct'
 >> clause.
 >
 > That kind of thinking is what makes me prefer the second option (the
 > one below).  That is, if I make 'struct' a syntax error in
 > contract-out for this release, I can figure out the Right Thing for
 > the next release.
 >
 > (Currently, I'm hoping that something that looks like the racket/base
 > struct declaration where the field names are instead contracts would
 > work out.)
 >
 >
 >
 >>>  - change contract-out's 'struct' subclause syntax so it has the
 >>> needed information.
 >>>
 >>> If the latter, then I would like to push a change before the release
 >>> that makes 'struct' a syntax error in contract-out so I have some more
 >>> time to decide on a good syntax (this will be the first release with
 >>> 'contract-out').
 >>>
 >>> Opinions?
 >>>
 >>> Robby
 >>>
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 >>
 >
 
Responsible changed from "mflatt" to "robby" by robby@racket-lang.org at Mon, 24 Oct 2011 09:16:56 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/a1654f1532
State changed from "open" to "closed" by robby@racket-lang.org at Mon, 24 Oct 2011 09:16:56 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/a1654f1532
