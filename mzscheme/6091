From nobody@champlain.ccs.neu.edu  Thu Jan 23 16:43:55 2003
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id QAA18296
	for bugs@plt-scheme.org; Thu, 23 Jan 2003 16:43:55 -0500
Message-Id: <200301232143.QAA18296@champlain.ccs.neu.edu>
Date: Thu, 23 Jan 2003 16:43:55 -0500
From: dsbauer@cogsci.ucsd.edu
Reply-To:
To: bugs@plt-scheme.org
Subject: 1) append! causes locally-scoped variable to behave as static; 2) doesn't append to null list

>Number:         6091
>Category:       mzscheme
>Synopsis:       1) append! causes locally-scoped variable to behave as static; 2) doesn't append to null list
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Thu Jan 23 16:45:00 EST 2003
>Closed-Date:    Fri Apr 04 12:32:48 EST 2003
>Last-Modified:  Fri Apr 04 12:32:48 EST 2003
>Originator:     Daniel Bauer
>Release:        202.5
>Organization:
plt
>Environment:
linux-redhat
>Description:
(append!...) works as expected in most cases, except the following:

1) When append!ing a list-variable local to a function (via (let...))
it causes that variable to keep its values between calls to the function,
even though it is unrecognized in global scope.

2)  In any scope, append!ing to a null list returns the correct value but
does not change the variable itself.
>How-To-Repeat:
Problem 1:

(define (test-append!)
   (let ((x '(foo)))
     (append! x (list 'bar))
     x))

(test-append!)   -->  (foo bar)
(test-append!)   -->  (foo bar bar)
(test-append!)   -->  (foo bar bar bar)
...
Should return (foo bar) after any number of calls, but appends to old x.

Problem 2:
(define x null)
(append! x '(foo))   -->  (foo)   [correct]
x  -->  ()                        [incorrect]
>Fix:

>Release-Note:

>Audit-Trail:

From: John Clements <clements@brinckerhoff.org>
To: dsbauer@cogsci.ucsd.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/6091: 1) append! causes locally-scoped variable to behave as static; 2) doesn't append to null list
Date: Thu, 23 Jan 2003 17:11:12 -0500

 On Thursday, January 23, 2003, at 04:43  PM, dsbauer@cogsci.ucsd.edu 
 wrote:
 > Problem 2:
 > (define x null)
 > (append! x '(foo))   -->  (foo)   [correct]
 > x  -->  ()                        [incorrect]
 
 This second one is not a bug, unless it's a documentation bug.  Append! 
 mutates the last cons pair in the first list to refer to the second 
 one.  In this case, there is no cons pair in the first one, so no 
 mutation can be performed.  In this case, Append! returns the second 
 list, but doesn't mutate anything.  What you seem to be suggesting is 
 that the binding should be changed to refer to a new value; that's not 
 how a call-by-value language works (unless you posit that Append! 
 should be a special form like set!).
 
 john
 

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: dsbauer@cogsci.ucsd.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/6091: 1) append! causes locally-scoped variable to behave as static; 2) doesn't append to null list
Date: Thu, 23 Jan 2003 16:38:27 -0600

 This has to do with the semantics of quote (the tick mark). It creates
 a single list as part of compiling the program. If you use (list 1)
 you'll get the expceted behavior.
 
 the other difference is the difference between variable and structure
 assignment. There's more about that difference in our online text:
 http://www.htdp.org/. 
 
 Hope that helps,
 Robby
 
 At Thu, 23 Jan 2003 16:43:55 -0500, dsbauer@cogsci.ucsd.edu wrote:
 > You may claim or edit this problem report at
 > 
 > https://internal.plt-scheme.org/cgis-bin/gnatsweb.pl?cmd=edit&pr=6091&database=plt
 > 
 > >Number:         6091
 > >Category:       all
 > >Synopsis:       1) append! causes locally-scoped variable to behave as static; 2) 
 > doesn't append to null list
 > >Confidential:   no
 > >Severity:       non-critical
 > >Priority:       medium
 > >Responsible:    steck
 > >State:          open
 > >Class:          sw-bug
 > >Submitter-Id:   unknown
 > >Arrival-Date:   Thu Jan 23 16:45:00 EST 2003
 > >Closed-Date:
 > >Last-Modified:
 > >Originator:     Daniel Bauer
 > >Release:        202.5
 > >Organization:
 > plt
 > >Environment:
 > linux-redhat
 > >Description:
 > (append!...) works as expected in most cases, except the following:
 > 
 > 1) When append!ing a list-variable local to a function (via (let...))
 > it causes that variable to keep its values between calls to the function,
 > even though it is unrecognized in global scope.
 > 
 > 2)  In any scope, append!ing to a null list returns the correct value but
 > does not change the variable itself.
 > >How-To-Repeat:
 > Problem 1:
 > 
 > (define (test-append!)
 >    (let ((x '(foo)))
 >      (append! x (list 'bar))
 >      x))
 > 
 > (test-append!)   -->  (foo bar)
 > (test-append!)   -->  (foo bar bar)
 > (test-append!)   -->  (foo bar bar bar)
 > ...
 > Should return (foo bar) after any number of calls, but appends to old x.
 > 
 > Problem 2:
 > (define x null)
 > (append! x '(foo))   -->  (foo)   [correct]
 > x  -->  ()                        [incorrect]
 > 
 > >Fix:
 > >Release-Note:
 > >Audit-Trail:
 > >Unformatted:
 

From: Robert Bruce Findler <robby@cs.uchicago.edu>
To: dsbauer@cogsci.ucsd.edu, steck@ccs.neu.edu, bugs@plt-scheme.org
Cc:  
Subject: Re: all/6091: 1) append! causes locally-scoped variable to behave as static; 2) doesn't append to null list
Date: Fri, 24 Jan 2003 06:52:46 -0600

 After a more careful reading of sections 3.4 and 1.3.2, it is clear
 that r5rs allows implementations to behave just like mzscheme does.
 R5rs does not fully specify this behavior and implemenations are free
 to choose what to do. Sadly.
 
 Robby
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri Apr  4 12:32:48 2003
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Fri Apr  4 12:32:48 2003
State-Changed-Why:
    not-a-bug
>Unformatted:

