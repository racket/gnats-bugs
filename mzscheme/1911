From robby@cs.rice.edu  Sun Mar 25 21:59:38 2001
Received: from sun.cs.rice.edu (sun.cs.rice.edu [128.42.1.42])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id VAA06380
	for <plt-gnats@cs.rice.edu>; Sun, 25 Mar 2001 21:59:38 -0600 (CST)
Message-Id: <200103260359.VAA26023@sun.cs.rice.edu>
Date: Sun, 25 Mar 2001 21:59:38 -0600 (CST)
From: Robert Findler <robby@cs.rice.edu>
Reply-To: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: empty string as directory
X-Send-Pr-Version: 3.101

>Number:         1911
>Category:       mzscheme
>Synopsis:       empty string as directory
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Mon Mar 26 04:00:07 GMT 2001
>Last-Modified:  Fri Apr 20 17:17:35 CDT 2001
>Originator:     Robert Findler
>Organization:
titan
>Release:        unknown
>Environment:
103.5 and 199.6, macos
>Description:

According to directory-exists? and directory-list,
the empty string is the current directory, 
but it is not a valid argument to build-path.

I hope that this can be fixed by
by making directory-exists? return #f
and directory-list raise an exception.
I would prefer that to making build-path
also treat "" as the current directory.

>How-To-Repeat:

;; empty string works for directory-list and directory-exists?:
> (directory-list "")
("CVS" "multi-file-search.ss" "multi-file-search.ss~" "unit.ss")
> (directory-list)
("CVS" "multi-file-search.ss" "multi-file-search.ss~" "unit.ss")
> (directory-exists? "")
#t

;; but build path doesn't like it:
> (build-path "" "CVS")
build-path: 1st pathname element is an empty string; other arguments were: "CVS"

>Fix:
	
>Audit-Trail:

From: "Paul A. Steckler" <steck@cs.rice.edu>
To: <robby@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Cc:  Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 10:30:15 -0600

 >I would prefer that to making build-path
 >also treat "" as the current directory.
 
 Hmmm, I'd worry that if an argument to
 build-path were computed, this strategy
 would result in surprises.
 
 -- Paul
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: "Paul A. Steckler" <steck@cs.rice.edu>
Cc: <plt-gnats@cs.rice.edu>, mflatt@cs.utah.edu
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 10:48:17 -0600

 We are in agreement: empty string should be illegal to build-path (I 
 just spoke with Steck about this to confirm)
 
 Robby
 
 At 10:30 AM -0600 3/26/01, Paul A. Steckler wrote:
 >  >I would prefer that to making build-path
 >>also treat "" as the current directory.
 >
 >Hmmm, I'd worry that if an argument to
 >build-path were computed, this strategy
 >would result in surprises.
 >
 >-- Paul
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: "Paul A. Steckler" <steck@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 10:23:17 -0700 (MST)

 In 199.7, empty strings will be rejected as path strings globally, in
 the same way that strings containing #\nul are rejected.
 
 Matthew
 

From: Matthew Flatt <mflatt@cs.utah.edu>
To: robby@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 10:26:23 -0700 (MST)

 Quoting Robert Findler:
 > I hope that this can be fixed by
 > by making directory-exists? return #f
 > and directory-list raise an exception.
 
 Just to clarify: `directory-exists?' and `directory-list' will *both*
 raise an exception. The empty string is an ill-formed path, as opposed
 to a well-formed path that never exists.
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "Paul A. Steckler" <steck@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 11:28:16 -0600

 At 10:23 AM -0700 3/26/01, Matthew Flatt wrote:
 >In 199.7, empty strings will be rejected as path strings globally, in
 >the same way that strings containing #\nul are rejected.
 
 Are there any other strings besides the empty string and strings with 
 #\nul in them that raise exceptions when passed to directory-exists?
 
 In practice, treating the exmpty string in this manner seems painful, 
 since every where that accepts a string from the user will have to 
 the check for empty string (I am assuming that people cannot type 
 string with the null charactr into them already; at least that isn't 
 a common thing to do!)
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: "Paul A. Steckler" <steck@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 10:33:25 -0700 (MST)

 Quoting Robert Bruce Findler:
 > At 10:23 AM -0700 3/26/01, Matthew Flatt wrote:
 > >In 199.7, empty strings will be rejected as path strings globally, in
 > >the same way that strings containing #\nul are rejected.
 > 
 > Are there any other strings besides the empty string and strings with 
 > #\nul in them that raise exceptions when passed to directory-exists?
 
 Yes: ~nosuchuser. Even ~robby could raise an error on certain
 platyforms if NFS flakes out at just the right time.
 
 Note that these errors are signalled as exn:i/o:filesystem instead of
 exn:application:type, for essentially the reasons you're getting at.
 
 > In practice, treating the exmpty string in this manner seems painful, 
 > since every where that accepts a string from the user will have to 
 > the check for empty string (I am assuming that people cannot type 
 > string with the null charactr into them already; at least that isn't 
 > a common thing to do!)
 
 Cut-and-paste can insert null characters.
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "Paul A. Steckler" <steck@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 13:25:58 -0600

 But, this all seems strange -- now the result of directory-list may 
 be an illegal input for directory-exists?.
 
 I guess that the world is imperfect, but this means that I should 
 really be checking at each step in the recursive traversal of a 
 directory for funny filenames?
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: "Paul A. Steckler" <steck@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 14:04:58 -0700 (MST)

 Quoting Robert Bruce Findler:
 > But, this all seems strange -- now the result of directory-list may 
 > be an illegal input for directory-exists?.
 
 I don't follow. A filename reported by `directory-list' will never be
 empty, and it will never contain null characters.
 
 Meanwhile, without changing anything, the result of `directory-list'
 may well cause `directory-exists?' to raise an exception if, for
 example, 1) the "file" is a link, and 2) the link is circular.
 
 More generally, because we're dealing with a filesystem that is
 generally shared between processes --- and likely shared between
 machines ---- any number of other things could go wrong between the
 `directory-list' and `directory-exists?'. Links change, directories
 move, and filesystems disappear.
 
 > I guess that the world is imperfect, but this means that I should 
 > really be checking at each step in the recursive traversal of a 
 > directory for funny filenames?
 
 No, you should be catching exn:i/o:filesystem exceptions at some level
 (though for most scripts, the implicit excaption handler is a
 reasonable one).
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "Paul A. Steckler" <steck@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 17:09:45 -0600

 At 2:04 PM -0700 3/26/01, Matthew Flatt wrote:
 >Meanwhile, without changing anything, the result of `directory-list'
 >may well cause `directory-exists?' to raise an exception if, for
 >example, 1) the "file" is a link, and 2) the link is circular.
 
 It seems like some filesystem somewhere must have the capability to 
 create filenames with #\nuls in them -- what does directory-list do 
 with that? Or, perhaps there aren't any (yet)?
 
 Are there any other such examples? I would like to have something 
 where the standard traversal of files and directories works properly 
 -- at least thru no fault of the implementation of mz's primitives. 
 If the filesystem supports other things that we can't deal with (like 
 the "multithreading" provided by simultaneous update).
 
 In the meantime, I have a nice way of just stopping as soon as I get 
 an error so I should be fine.
 
 >More generally, because we're dealing with a filesystem that is
 >generally shared between processes --- and likely shared between
 >machines ---- any number of other things could go wrong between the
 >`directory-list' and `directory-exists?'. Links change, directories
 >move, and filesystems disappear.
 
 I am willing to live with these kinds of errors, from a practical 
 point of view, there's not much we can do about them.
 
 Robby

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Robert Bruce Findler <robby@cs.rice.edu>
Cc: "Paul A. Steckler" <steck@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 16:20:53 -0700 (MST)

 Quoting Robert Bruce Findler:
 > At 2:04 PM -0700 3/26/01, Matthew Flatt wrote:
 > >Meanwhile, without changing anything, the result of `directory-list'
 > >may well cause `directory-exists?' to raise an exception if, for
 > >example, 1) the "file" is a link, and 2) the link is circular.
 > 
 > It seems like some filesystem somewhere must have the capability to 
 > create filenames with #\nuls in them
 
 They don't. 
 
 It wouldn't be useful in practice to create such a filesystem, because
 the a file with a #\nul wouldn't accessible through standard C
 interface.
 
 > I would like to have something 
 > where the standard traversal of files and directories works properly 
 > -- at least thru no fault of the implementation of mz's primitives. 
 
 You have them already. 
 
 In summary, `directory-list' cannot return a good path that MzScheme
 calls syntactically bad.
 
 Really!
 
 Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: "Paul A. Steckler" <steck@cs.rice.edu>, <plt-gnats@cs.rice.edu>
Subject: Re: all/1911: empty string as directory
Date: Mon, 26 Mar 2001 17:29:54 -0600

 At 4:20 PM -0700 3/26/01, Matthew Flatt wrote:
 >In summary, `directory-list' cannot return a good path that MzScheme
 >calls syntactically bad.
 >
 >Really!
 
 Syntax, semantics, sigh.
 
 I guess that this is a platform specific problem? You just report 
 what the underlying fs reports and it would require lots of work to 
 figure out exactly what situations raise what kinds of errors. I 
 think that I get it now.
 
 Thanks,
 Robby

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri Apr 20 17:17:24 2001
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Fri Apr 20 17:17:26 2001
State-Changed-Why:
Fixed in 199.x.

>Unformatted:
