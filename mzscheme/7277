From apache@plt-scheme.org Thu Mar 17 18:18:31 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j2HNIUnN003373
	for <bugs@plt-scheme.org>; Thu, 17 Mar 2005 18:18:30 -0500
Message-Id: <200503172318.j2HNIU6n003371@champlain.ccs.neu.edu>
Date: Thu, 17 Mar 2005 18:18:30 -0500
From: jensaxel@soegaard.net
To: bugs@plt-scheme.org
Subject: DrScheme crashes

>Number:         7277
>Category:       mzscheme
>Synopsis:       DrScheme crashes
>Class:          sw-bug
>Responsible:    eli
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Mar 17 18:20:00 -0500 2005
>Last-Modified:  Mon Apr 18 00:00:00 -0400 2005
>Originator:     Jens Axel Søgaard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.33-cvs13mar2005
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 16
Docs Installed:
(#<path:C:\Programmer\PLT-299.33\collects\doc\web-server> #<path:C:\Programmer\PLT-299.33\collects\doc\tour> #<path:C:\Programmer\PLT-299.33\collects\doc\tools> #<path:C:\Programmer\PLT-299.33\collects\doc\tex2page> #<path:C:\Programmer\PLT-299.33\collects\doc\teachpack> #<path:C:\Programmer\PLT-299.33\collects\doc\t-y-scheme> #<path:C:\Programmer\PLT-299.33\collects\doc\swindle> #<path:C:\Programmer\PLT-299.33\collects\doc\srfi> #<path:C:\Programmer\PLT-299.33\collects\doc\r5rs> #<path:C:\Programmer\PLT-299.33\collects\doc\profj-intermediate> #<path:C:\Programmer\PLT-299.33\collects\doc\profj-beginner> #<path:C:\Programmer\PLT-299.33\collects\doc\profj-advanced> #<path:C:\Programmer\PLT-299.33\collects\doc\plot> #<path:C:\Programmer\PLT-299.33\collects\doc\mzscheme> #<path:C:\Programmer\PLT-299.33\collects\doc\mzlib> #<path:C:\Programmer\PLT-299.33\collects\doc\mzc> #<path:C:\Programmer\PLT-299.33\collects\doc\mred> #<path:C:\Programmer\PLT-299.33\collects\doc\misclib> #<path:C:\Programmer\PLT-299.33\collects\doc\intermediate-lambda> #<path:C:\Programmer\PLT-299.33\collects\doc\intermediate> #<path:C:\Programmer\PLT-299.33\collects\doc\insidemz> #<path:C:\Programmer\PLT-299.33\collects\doc\help> #<path:C:\Programmer\PLT-299.33\collects\doc\framework> #<path:C:\Programmer\PLT-299.33\collects\doc\foreign> #<path:C:\Programmer\PLT-299.33\collects\doc\drscheme> #<path:C:\Programmer\PLT-299.33\collects\doc\beginning-abbr> #<path:C:\Programmer\PLT-299.33\collects\doc\beginning> #<path:C:\Programmer\PLT-299.33\collects\doc\advanced>)
Collections:
((#<path:C:\Documents and Settings\js\Application Data\PLT Scheme\299.33\collects> "non-existent path") (#<path:C:\Programmer\PLT-299.33\collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:cvs-time-stamp> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "Standard (R5RS)") #6(#f write mixed-fraction-e #f #t debug))
>Description:
DrScheme crashes when the program below is run in the R5RS language.

If the last expression is uncommented, the program runs fine.
>How-To-Repeat:
;;; pedantic-r5rs.scm  --  Jens Axel Søgaard  --  18th mar 2005

(#%require (rename mzscheme mz:begin-for-syntax begin-for-syntax))
(#%require (rename mzscheme mz:expand expand))
(#%require (rename mzscheme mz:lambda lambda))
(#%require (rename mzscheme define-syntaxes define-syntaxes))
(#%require (rename mzscheme mz:error error))
(#%require (rename mzscheme mz:syntax-case syntax-case))


(mz:begin-for-syntax  
 ;(require (rename mzscheme mz:expand-syntax-to-top-form expand-syntax-to-top-form))
 (require (rename mzscheme mz:local-expand local-expand))
 (require (rename mzscheme mz:syntax-local-context syntax-local-context))
 
 (define (expands-to-begin? stx)
   (let ((expanded (mz:local-expand stx (syntax-local-context) '())))
     (syntax-case expanded (begin)
                     ((begin . more) #t)
                     (_              #f)))))


; (simple-lambda <formals> <expr>)
(define-syntax simple-lambda 
  (syntax-rules ()
    ((_ formals body)
     (mz:lambda formals (begin #;(display "*") body)))))

; In contrast to simple-lambda a normal lambda allows
; a series of internal definitions followed by a series
; of expressions in the body.

; Since internal definitions expand into a letrec expression,
; which uses lambda in its expansion, we need to define
; letrec and lambda simultaneous. This construct
; define-syntaxes allows us to do this. Actually, the internal
; definitions expand into a letrec-expression, where the
; body is simple.


(define-syntaxes (lambda internal-defines letrec/simple-body )
  (let ((lambda-macro             
         ;;; <lambda expression> -> (lambda <formals> <body>)
          ;;; <body> -> <definition>* <sequence>
         (syntax-rules ()
           ((_ formals . bodies)
            (simple-lambda formals (internal-defines () bodies)))))
        
        (internal-defines-macro   
         ;;; (internal-defines (<definition> ...) (<definition-or-expr> ...))
         
         ; Moves <definition>s from the second list to the first, until
         ; there are no more definitions present. Then the list of
         ; internal definitions are rewritten into a letrec expression.
         
         ;;; <definition> -> (define (<variable> <def formals>) <body>)
         ;;;              -> (define <variable> <expression>)
         ;;;              -> (begin <definition*>)
         
         (lambda (stx) 
           (syntax-case stx (define begin)
             ((_ defs ((define (var1 . args) . body1) . more))
              (syntax (internal-defines ((define var1 (lambda args . body1)) . defs) more)))
             ((_ defs ((define var1 expr) . more))
              (syntax (internal-defines ((define var1 expr) . defs) more)))
             ((_ defs ((begin def ...) . more))
              (syntax (internal-defines defs (def ... . more))))
             ; The next one is tricky. If the first expression of bodies expands to
             ; a (begin ...) possibly containing more internal defines, then
             ; the one should expand the expression, and handle the resulting
             ; internal definitions.
             ((_ defs (expr . more))
              (expands-to-begin? (syntax expr))
              (syntax-case (expand-to-top-form (syntax expr)) (begin)
                ((begin def ...)
                 (syntax (internal-defines defs (def ... . more))))))
             ; finally, no more definitions in bodies; ready to generate the letrec/simple
             ((_ ((define var expr) ...) bodies)
              (syntax (letrec/simple-body ((var expr) ...)  . bodies))))))
        
        (letrec/simple-body-macro  
         (syntax-rules ()
           ((_ ((var init) ...) . body)
            (let ((var 'undefined) ...)
              (let ((var (let ((temp init)) (simple-lambda () (set! var temp))))
                    ...
                    (bod (simple-lambda () . body)))
                (var) ... (bod))))))
        )
    (values lambda-macro
            internal-defines-macro
            letrec/simple-body-macro)))

; A normal letrec expression allows a non-simple body, thus we need to define 
; a letrec such that it uses the above lambda in the expansion of the body.

(define-syntax letrec-macro
  ; Al* Petrofsky's letrec from the Scheme FAQ
  (syntax-rules ()
    ((_ ((var init) ...) . body)
     (let ((var 'undefined) ...)
       (let ((var (let ((temp init)) (simple-lambda () (set! var temp))))
             ...
             (bod (lambda () . body)))
         (var) ... (bod))))))

;;;----------------------------------------------------------------------------


((lambda (a) 
   a)
 42)

((lambda (a) 
   (define b (+ a 1))
   b)
 41)

((lambda (a)
   (define (b) 42)
   (b))
 1)

((lambda (a)
   (begin
     (begin (define (b) 42))
     (begin (b))))
   1)


; This is an error in R5RS, and thus an error should be signaled.
; --- hm - we signal an error at runtime.
; ((lambda (a) 
;   (define b (+ a 1)) 
;   (define c (+ b 1))  
;   c) 
; 40)



#;(
;;; R5RS
  
; This section gives macro definitions for the derived expression 
; types in terms of the primitive expression types (literal, variable,
; call, lambda, if, set!). See section 6.4 for a possible definition of delay.

(define-syntax cond
  (syntax-rules (else =>)
    ((cond (else result1 result2 ...))
     (begin result1 result2 ...))
    ((cond (test => result))
     (let ((temp test))
       (if temp (result temp))))
    ((cond (test => result) clause1 clause2 ...)
     (let ((temp test))
       (if temp
           (result temp)
           (cond clause1 clause2 ...))))
    ((cond (test)) test)
    ((cond (test) clause1 clause2 ...)
     (let ((temp test))
       (if temp
           temp
           (cond clause1 clause2 ...))))
    ((cond (test result1 result2 ...))
     (if test (begin result1 result2 ...)))
    ((cond (test result1 result2 ...)
           clause1 clause2 ...)
     (if test
         (begin result1 result2 ...)
         (cond clause1 clause2 ...)))))

(define-syntax case
  (syntax-rules (else)
    ((case (key ...)
       clauses ...)
     (let ((atom-key (key ...)))
       (case atom-key clauses ...)))
    ((case key
       (else result1 result2 ...))
     (begin result1 result2 ...))
    ((case key
       ((atoms ...) result1 result2 ...))
     (if (memv key '(atoms ...))
         (begin result1 result2 ...)))
    ((case key
       ((atoms ...) result1 result2 ...)
       clause clauses ...)
     (if (memv key '(atoms ...))
         (begin result1 result2 ...)
         (case key clause clauses ...)))))

(define-syntax and
  (syntax-rules ()
    ((and) #t)
    ((and test) test)
    ((and test1 test2 ...)
     (if test1 (and test2 ...) #f))))

(define-syntax or
  (syntax-rules ()
    ((or) #f)
    ((or test) test)
    ((or test1 test2 ...)
     (let ((x test1))
       (if x x (or test2 ...))))))

)

(define-syntax let
  (syntax-rules ()
    ((let ((name val) ...) body1 body2 ...)
     ((lambda (name ...) body1 body2 ...)
      val ...))
    ((let tag ((name val) ...) body1 body2 ...)
     ((letrec ((tag (lambda (name ...)
                      body1 body2 ...)))
        tag)
      val ...))))

(define-syntax let*
  (syntax-rules ()
    ((let* () body1 body2 ...)
     (let () body1 body2 ...))
    ((let* ((name1 val1) (name2 val2) ...)
       body1 body2 ...)
     (let ((name1 val1))
       (let* ((name2 val2) ...)
         body1 body2 ...)))))
;
;The following letrec macro uses the symbol <undefined> in place of an expression which returns something that when stored in a location makes it an error to try to obtain the value stored in the location (no such expression is defined in Scheme). A trick is used to generate the temporary names needed to avoid specifying the order in which the values are evaluated. This could also be accomplished by using an auxiliary macro.
;
;(define-syntax letrec
;  (syntax-rules ()
;    ((letrec ((var1 init1) ...) body ...)
;     (letrec "generate_temp_names"
;       (var1 ...)
;       ()
;       ((var1 init1) ...)
;       body ...))
;    ((letrec "generate_temp_names"
;       ()
;       (temp1 ...)
;       ((var1 init1) ...)
;       body ...)
;     (let ((var1 <undefined>) ...)
;       (let ((temp1 init1) ...)
;         (set! var1 temp1)
;         ...
;         body ...)))
;    ((letrec "generate_temp_names"
;       (x y ...)
;       (temp ...)
;       ((var1 init1) ...)
;       body ...)
;     (letrec "generate_temp_names"
;       (y ...)
;       (newtemp temp ...)
;       ((var1 init1) ...)
;       body ...))))

;(define-syntax begin
;  (syntax-rules ()
;    ((begin exp ...)
;     ((lambda () exp ...)))))
;
; The following alternative expansion for begin does not make use 
; of the ability to write more than one expression in the body of 
; a lambda expression. In any case, note that these rules apply only 
; if the body of the begin contains no definitions.

(define-syntax begin
  (syntax-rules ()
    ((begin exp)
     exp)
    ((begin exp1 exp2 ...)
     (let ((x exp1))
       (begin exp2 ...)))))

; The following definition of do uses a trick to expand the variable 
; clauses. As with letrec above, an auxiliary macro would also work. 
; The expression (if #f #f) is used to obtain an unspecific value.


(define-syntax do
  (syntax-rules ()
    ((do ((var init step ...) ...)
         (test expr ...)
         command ...)
     (letrec
       ((loop
         (lambda (var ...)
           (if test
               (begin
                 (if #f #f)
                 expr ...)
               (begin
                 command
                 ...
                 (loop (do "step" var step ...)
                       ...))))))
       (loop init ...)))
    ((do "step" x)
     x)
    ((do "step" x y)
     y)))

  
;(let ((cont #f))
;   (letrec ((x (call-with-current-continuation (lambda (c) (set! cont c) 0)))
;            (y (call-with-current-continuation (lambda (c) (set! cont c) 0))))
;     (if cont
;         (let ((c cont))
;           (set! cont #f)
;           (set! x 1)
;           (set! y 1)
;           (c 0))
;         (+ x y))))
;)

;(letrec ((x 5) (y x)) y)

;(define-syntax foo
;  (syntax-rules ()
;    ((_) (begin 42))))


(let () (define x 5) (define y x) y)
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: jensaxel@soegaard.net, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7277: DrScheme crashes
Date: Thu, 17 Mar 2005 16:38:04 -0700

 At Thu, 17 Mar 2005 18:20:01 -0500, jensaxel@soegaard.net wrote:
 > DrScheme crashes when the program below is run in the R5RS language.
 
 Does DrScheme run out of memory and then crash, or is it a more direct
 crash? (For me, it just seems to get stuck, and DrScheme is slow to let
 me break it, but it breaks eventuially and I haven't yet seen the
 crash.)
 
 Thanks,
 Matthew
 

Responsible changed from "nobody" to "eli" by eli at Sun, 17 Apr 2005 23:31:35 -0400
Reason>>> Replying.

State changed from "open" to "closed" by eli at Sun, 17 Apr 2005 23:31:35 -0400
Reason>>> I think that this is soved.  Will send more in a followup 
email.

From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Cc: jensaxel@soegaard.net
Subject: Re: mzscheme/7277 DrScheme crashes
Date: Sun, 17 Apr 2005 23:58:31 -0400

 On Apr 17, eli@plt-scheme.org wrote:
 > 
 > State changed from "open" to "closed" by eli at Sun, 17 Apr 2005 23:31:35 -0400
 > Reason>>> I think that this is soved.  Will send more in a followup 
 > email.
 
 Seems like now it only gets stuck, I minimized this to the program
 below which doesn't even have `simple-lambda' and I can see a syntax
 expansion loop even in mzscheme.
 
 ----------------------------------------------------------------------
 (#%require (rename mzscheme define-syntaxes define-syntaxes))
 
 (define-syntaxes (lambda internal-defines letrec/simple-body )
   (let ((lambda-macro
          (syntax-rules ()
            ((_ formals . bodies)
             (simple-lambda formals (internal-defines () bodies)))))
         (internal-defines-macro   
          (lambda (stx) 
            (syntax-case stx (define begin)
              ((_ defs ((define (var1 . args) . body1) . more))
               (syntax (internal-defines ((define var1 (lambda args . body1)) . defs) more)))
              ((_ defs ((define var1 expr) . more))
               (syntax (internal-defines ((define var1 expr) . defs) more)))
              ((_ defs ((begin def ...) . more))
               (syntax (internal-defines defs (def ... . more))))
              ((_ ((define var expr) ...) bodies)
               (syntax (letrec/simple-body ((var expr) ...)  . bodies))))))
         (letrec/simple-body-macro  
          (syntax-rules ()
            ((_ ((var init) ...) . body)
             (let ((var 'undefined) ...)
               (let ((var (let ((temp init)) (simple-lambda () (set! var temp))))
                     ...
                     (bod (simple-lambda () . body)))
                 (var) ... (bod)))))))
     (values lambda-macro internal-defines-macro letrec/simple-body-macro)))
 
 (define-syntax let
   (syntax-rules ()
     ((let ((name val) ...) body1 body2 ...)
      ((lambda (name ...) body1 body2 ...)
       val ...))))
 
 ((lambda () (define x 5) (define y x) y))
 ----------------------------------------------------------------------
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
