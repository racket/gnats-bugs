From nobody@cs.rice.edu  Sun Dec  6 16:46:30 1998
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id QAA26865
	for <plt-gnats@cs.rice.edu>; Sun, 6 Dec 1998 16:46:30 -0600 (CST)
Message-Id: <199812062246.QAA24796@web.cs.rice.edu>
Date: Sun, 6 Dec 1998 16:46:30 -0600 (CST)
From: cobbe@hex.net
Reply-To: cobbe@hex.net
To: plt-gnats@cs.rice.edu
Subject: Suggestions for mzc 

>Number:         848
>Category:       mzscheme
>Synopsis:       Suggestions for mzc
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sun Dec  6 23:00:02 GMT 1998
>Last-Modified:  Thu Jul  8 13:29:19 CDT 1999
>Originator:     Richard Cobbe
>Organization:
titan
>Release:        53
>Environment:
unknown
>Description:
Some problems I'm having with mzc that are results of design decisions
rather than programming errors: (I hope)

1) You can't use mzc to generate dependencies.  (The following pipeline is
taken from the GNU make info page and assumes (ba)sh.)

If you do: 

mzc --compiler /usr/bin/g++ ++ccf -MM <any other g++ options> foo.cc \
	| sed '\''s/\($*\)\.o[ :]*/\1.o foo.d : /g'\'' > foo.d; \
	[ -s foo.d ] || rm -f foo.d

you'll get an error message from mzc because it's trying to compile a
Scheme file to an .so, but foo.cc doesn't end in .ss.  Plus, the resulting
foo.d file contains the line:

MzScheme compiler version 53, Copyright (c) 1996-98 PLT

when you're really looking for something like

foo.o foo.d : foo.cc foo.h bar.h

To fix this: suppress the banner, and just pass the input file straight
through to the compiler, rather than doing post-processing on it manually.

Or, add an option to print out the necessary include path (which is really
the only reason I'm using mzc for this step anyway).


2) If there are errors in a C/C++ file, mzc puts a space character in front
of the error messages from gcc.  This confuses emacs: it can't read
the compiler output anymore, so the next-error command doesn't work.
Removing this space would be awfully nice.


3) Oh, while we're at it, "propogate" is misspelled in the --help output.
It's "propagate".
>How-To-Repeat:
N/A
>Fix:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.rice.edu>
To: cobbe@hex.net
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/848: Suggestions for mzc 
Date: Mon, 7 Dec 1998 09:01:23 -0600 (CST)

 Quoting cobbe@hex.net:
 > 1) You can't use mzc to generate dependencies.  (The following pipeline is
 > taken from the GNU make info page and assumes (ba)sh.)
 > 
 > If you do: 
 > 
 > mzc --compiler /usr/bin/g++ ++ccf -MM <any other g++ options> foo.cc \
 > 	| sed '\''s/\($*\)\.o[ :]*/\1.o foo.d : /g'\'' > foo.d; \
 > 	[ -s foo.d ] || rm -f foo.d
 > 
 > you'll get an error message from mzc because it's trying to compile a
 > Scheme file to an .so, but foo.cc doesn't end in .ss.  
 
 You need the --cc flag to tell MzScheme it's supposed to compile a C
 file. Of course, that won't help in 53 because .cc isn't recognized,
 but it will work in 100 (the next release).
 
 > Plus, the resulting
 > foo.d file contains the line:
 > 
 > MzScheme compiler version 53, Copyright (c) 1996-98 PLT
 > 
 > when you're really looking for something like
 > 
 > foo.o foo.d : foo.cc foo.h bar.h
 > 
 > To fix this: suppress the banner, and just pass the input file straight
 > through to the compiler, rather than doing post-processing on it manually.
 > 
 > Or, add an option to print out the necessary include path (which is really
 > the only reason I'm using mzc for this step anyway).
 
 Using the -v passes the compiler's stdout straight through rather than
 hiding it until an error is found. I didn't get any output from g++
 using -MM, though.
 
 Meanwhile, you could use MzScheme directly to get the include path:
 
  % mzscheme -emv '(printf "~a~n" (collection-path "mzscheme" "include"))'
  /home/mflatt/proj/plt/collects/mzscheme/include
 
 > 2) If there are errors in a C/C++ file, mzc puts a space character in front
 > of the error messages from gcc.  This confuses emacs: it can't read
 > the compiler output anymore, so the next-error command doesn't work.
 > Removing this space would be awfully nice.
 
 Using -v fixes this problem, but you get a lot of other junk, too. I
 got rid of the space for 100.
 
 Matthew

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri Dec 11 19:57:56 1998
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: steck
State-Changed-When: Thu Jul  8 13:29:15 1999
State-Changed-Why:
Per meeting.

>Unformatted:
