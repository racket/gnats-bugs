From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Jul 23 02:36:26 2012
Received: from mail-vc0-f172.google.com (mail-vc0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q6N6aNAg022603
	for <bugs@bugs.plt-scheme.org>; Mon, 23 Jul 2012 02:36:23 -0400
Message-Id: <201207230636.q6N6aKS1022598@champlain.ccs.neu.edu>
Date: Mon, 23 Jul 2012 02:36:20 -0400
From: neil.toronto@gmail.com
To: bugs@racket-lang.org
Subject: flexpt doesn't follow IEEE 754-2008 (also ISO C99) standard for pow

>Number:         12935
>Category:       mzscheme
>Synopsis:       flexpt doesn't follow IEEE 754-2008 (also ISO C99) standard for pow
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Jul 23 02:40:01 -0400 2012
>Closed-Date:    Mon Aug 06 15:00:54 -0400 2012
>Last-Modified:  Mon Aug 06 15:00:54 -0400 2012
>Originator:     Neil Toronto
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.14--2012-07-19(bb837fc6/d)
>Environment:
unix "Linux schroder 2.6.38-15-generic #64-Ubuntu SMP Fri Jul 6 18:51:28 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux" (x86_64-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 622644960
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/neil/.racket/5.3.0.14/collects"
 (non-existent-path))
("/home/neil/plt-math/collects"
 ("wxme" "texpict" "compiler" "typed" "games" "algol60" "browser" "file" "readline" "dynext" "scribblings" "mzcom" "trace" "profile" "data" "sirmail" "json" "parser-tools" "math" "tex2page" "scriblib" "swindle" "schemeunit" "r6rs" "xrepl" "mzlib" "handin-client" "repo-time-stamp" "mysterx" "mrlib" "scheme" "combinator-parser" "html" "test-engine" "version" ".gitignore" "make" "ffi" "mzscheme" "picturing-programs" "hierlist" "teachpack" "at-exp" "lazy" "scribble" "openssl" "defaults" "racket" "handin-server" "2htdp" "drscheme" "help" "eopl" "racklog" "drracket" "icons" "db" "errortrace" "preprocessor" "rackunit" "rnrs" "string-constants" "meta" "slatex" "graphics" "redex" "reader" "plai" "honu" "config" "stepper" "frtime" "unstable" "r5rs" "planet" "tests" "s-exp" "embedded-gui" "info-domain" "syntax" "launcher" "typed-scheme" "syntax-color" "srfi" "test-box-recovery" "xml" "images" "plot" "datalog" "sgl" "htdp" "setup" "lang" "raco" "gui-debugger" "framework" "web-server" "d!
 einprogramm" "slideshow" "macro-debugger" "typed-racket" "net" "mred"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #f ((main) (test))))
>Description:
In particular, it always returns +nan.0 when the first argument is -inf.0, 0.0, or -0.0.

These are the rules from the floating-point standards:

(flexpt -inf.0 y) = -0.0     if y is a negative odd integer    
(flexpt -inf.0 y) = +0.0     if y is negative and not an odd integer
(flexpt -inf.0 y) = -inf.0   if y is a positive odd integer
(flexpt -inf.0 y) = +inf.0   if y is positive and not an odd integer

(flexpt +0.0 y) = +inf.0     if y is negative
(flexpt +0.0 y) = +0.0       if y is positive

(flexpt -0.0 y) = -inf.0     if y is a negative odd integer
(flexpt -0.0 y) = +inf.0     if y is negative and not an odd integer
(flexpt -0.0 y) = -0.0       if y is a positive odd integer
(flexpt -0.0 y) = +0.0       if y is positive and not an odd integer

Found by testing against MPFR.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: neil.toronto@gmail.com, bugs@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/12935: flexpt doesn't follow IEEE 754-2008 (also ISO C99) standard for pow
Date: Mon, 23 Jul 2012 07:49:27 -0500

 At Mon, 23 Jul 2012 02:40:02 -0400, neil.toronto@gmail.com wrote:
 > In particular, it always returns +nan.0 when the first argument is
 > -inf.0, 0.0, or -0.0.
 
 I'm not able to replicate this result, so far.
 
 The implementation of `flexpt' (and `expt') depends on whether the CPP
 macro `POW_HANDLES_INF_CORRECTLY' is defined. If it's undefined, as I
 think it is in "sconfig.h" for Linux, then `flexpt' should be checking
 explicitly for the corner cases and returning the right answer.
 
 Can you determine whether `flexpt' gets to sch_pow() in "number.c" at
 line 2515, which is supposed to check those corners?
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/12935: flexpt doesn't follow IEEE 754-2008 (also
 ISO C99) standard for pow
Date: Mon, 23 Jul 2012 08:04:39 -0600

 On 07/23/2012 06:49 AM, Matthew Flatt wrote:
 > At Mon, 23 Jul 2012 02:40:02 -0400, neil.toronto@gmail.com wrote:
 >> In particular, it always returns +nan.0 when the first argument is
 >> -inf.0, 0.0, or -0.0.
 >
 > I'm not able to replicate this result, so far.
 >
 > The implementation of `flexpt' (and `expt') depends on whether the CPP
 > macro `POW_HANDLES_INF_CORRECTLY' is defined. If it's undefined, as I
 > think it is in "sconfig.h" for Linux, then `flexpt' should be checking
 > explicitly for the corner cases and returning the right answer.
 >
 > Can you determine whether `flexpt' gets to sch_pow() in "number.c" at
 > line 2515, which is supposed to check those corners?
 
 I added (printf "here\n"); to the top of that function and never saw it 
 print.
 
 Turns out it was a bit overstated for -inf.0. My system's `pow' seems to 
 handle integers just fine, but it produces +nan.0 for (flexpt -inf.0 y) 
 where `y' is non-integer. (It does produce +nan.0 for (flexpt 0.0 y) and 
 (flexpt -0.0 y) for every `y' I've tested.)
 
 FWIW, the C99 standard specifies behavior for -inf.0, but IEEE 754-2008 
 doesn't. The relevant bits are on page 44 here:
 
      http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935
 
 and page 461 here:
 
      http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf
 
 Neil ⊥
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/12935: flexpt doesn't follow IEEE 754-2008 (also
 ISO C99) standard for pow
Date: Mon, 23 Jul 2012 22:33:02 -0600

 This is a multi-part message in MIME format.
 --------------010409000804020707060101
 Content-Type: text/plain; charset=UTF-8; format=flowed
 Content-Transfer-Encoding: 8bit
 
 I've attached a module comprised of test cases that should pass, based 
 on the standards. It's comprehensive enough that any implementation that 
 passes them all is almost certainly correct on all special-valued inputs.
 
 This is currently only possible on my github fork, but they all pass 
 when I add the code
 
      (require math/bigfloat)
 
      (define (flexpt x y)
        (bigfloat->flonum (bfexpt (bf x) (bf y))))
 
 and remove (require racket/flonum).
 
 Neil ⊥
 
 
 --------------010409000804020707060101
 Content-Type: text/plain; charset=UTF-8;
  name="flexpt-tests.rkt"
 Content-Transfer-Encoding: base64
 Content-Disposition: attachment;
  filename="flexpt-tests.rkt"
 
 I2xhbmcgcmFja2V0CgoocmVxdWlyZSByYWNrZXQvZmxvbnVtIHJhY2t1bml0KQoKOzsgMl41
 MyBhbmQgZXZlcnkgbGFyZ2VyIGZsb251bSBpcyBldmVuOgooZGVmaW5lICtiaWctZXZlbi4w
 IChleHB0IDIuMCA1MykpCjs7IFRoZSBsYXJnZXN0IG9kZCBmbG9udW06CihkZWZpbmUgK21h
 eC1vZGQuMCAoLSArYmlnLWV2ZW4uMCAxLjApKQoKKGRlZmluZSAtYmlnLWV2ZW4uMCAoLSAr
 YmlnLWV2ZW4uMCkpCihkZWZpbmUgLW1heC1vZGQuMCAoLSArbWF4LW9kZC4wKSkKCihjaGVj
 ay1lcXVhbD8gKGZsZXhwdCArMC4wICswLjApICsxLjApCihjaGVjay1lcXVhbD8gKGZsZXhw
 dCArMC4wICsxLjApICswLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCArMC4wICszLjApICsw
 LjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCArMC4wICttYXgtb2RkLjApICswLjApCihjaGVj
 ay1lcXVhbD8gKGZsZXhwdCArMC4wICswLjUpICswLjApCihjaGVjay1lcXVhbD8gKGZsZXhw
 dCArMC4wICsxLjUpICswLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCArMC4wICsyLjApICsw
 LjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCArMC4wICsyLjUpICswLjApCihjaGVjay1lcXVh
 bD8gKGZsZXhwdCArMC4wICtiaWctZXZlbi4wKSArMC4wKQoKKGNoZWNrLWVxdWFsPyAoZmxl
 eHB0IC0wLjAgKzAuMCkgKzEuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC0wLjAgKzEuMCkg
 LTAuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC0wLjAgKzMuMCkgLTAuMCkKKGNoZWNrLWVx
 dWFsPyAoZmxleHB0IC0wLjAgK21heC1vZGQuMCkgLTAuMCkKKGNoZWNrLWVxdWFsPyAoZmxl
 eHB0IC0wLjAgKzAuNSkgKzAuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC0wLjAgKzEuNSkg
 KzAuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC0wLjAgKzIuMCkgKzAuMCkKKGNoZWNrLWVx
 dWFsPyAoZmxleHB0IC0wLjAgKzIuNSkgKzAuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC0w
 LjAgK2JpZy1ldmVuLjApICswLjApCgooY2hlY2stZXF1YWw/IChmbGV4cHQgKzEuMCArMC4w
 KSArMS4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgKzEuMCArMC41KSArMS4wKQooY2hlY2st
 ZXF1YWw/IChmbGV4cHQgKzEuMCAraW5mLjApICsxLjApCgooY2hlY2stZXF1YWw/IChmbGV4
 cHQgLTEuMCArMC4wKSArMS4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgLTEuMCArMC41KSAr
 bmFuLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAtMS4wICtpbmYuMCkgKzEuMCkKCihjaGVj
 ay1lcXVhbD8gKGZsZXhwdCArMC41ICtpbmYuMCkgKzAuMCkKKGNoZWNrLWVxdWFsPyAoZmxl
 eHB0ICsxLjUgK2luZi4wKSAraW5mLjApCgooY2hlY2stZXF1YWw/IChmbGV4cHQgK2luZi4w
 ICswLjApICsxLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAraW5mLjAgKzEuMCkgK2luZi4w
 KQooY2hlY2stZXF1YWw/IChmbGV4cHQgK2luZi4wICsyLjApICtpbmYuMCkKKGNoZWNrLWVx
 dWFsPyAoZmxleHB0ICtpbmYuMCAraW5mLjApICtpbmYuMCkKCihjaGVjay1lcXVhbD8gKGZs
 ZXhwdCAtaW5mLjAgKzAuMCkgKzEuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC1pbmYuMCAr
 MS4wKSAtaW5mLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAtaW5mLjAgKzMuMCkgLWluZi4w
 KQooY2hlY2stZXF1YWw/IChmbGV4cHQgLWluZi4wICttYXgtb2RkLjApIC1pbmYuMCkKKGNo
 ZWNrLWVxdWFsPyAoZmxleHB0IC1pbmYuMCArMC41KSAraW5mLjApCihjaGVjay1lcXVhbD8g
 KGZsZXhwdCAtaW5mLjAgKzEuNSkgK2luZi4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgLWlu
 Zi4wICsyLjApICtpbmYuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC1pbmYuMCArMi41KSAr
 aW5mLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAtaW5mLjAgK2JpZy1ldmVuLjApICtpbmYu
 MCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC1pbmYuMCAraW5mLjApICtpbmYuMCkKCjs7IFNh
 bWUgdGVzdHMgYXMgYWJvdmUsIGJ1dCB3aXRoIG5lZ2F0ZWQgeQo7OyBUaGlzIGlkZW50aXR5
 IHNob3VsZCBob2xkIGZvciB0aGVzZSB0ZXN0czogKGZsZXhwdCB4IHkpID0gKC8gMS4wIChm
 bGV4cHQgeCAoLSB5KSkpCgooY2hlY2stZXF1YWw/IChmbGV4cHQgKzAuMCAtMC4wKSArMS4w
 KQooY2hlY2stZXF1YWw/IChmbGV4cHQgKzAuMCAtMS4wKSAraW5mLjApCihjaGVjay1lcXVh
 bD8gKGZsZXhwdCArMC4wIC0zLjApICtpbmYuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0ICsw
 LjAgLW1heC1vZGQuMCkgK2luZi4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgKzAuMCAtMC41
 KSAraW5mLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCArMC4wIC0xLjUpICtpbmYuMCkKKGNo
 ZWNrLWVxdWFsPyAoZmxleHB0ICswLjAgLTIuMCkgK2luZi4wKQooY2hlY2stZXF1YWw/IChm
 bGV4cHQgKzAuMCAtMi41KSAraW5mLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCArMC4wIC1i
 aWctZXZlbi4wKSAraW5mLjApCgooY2hlY2stZXF1YWw/IChmbGV4cHQgLTAuMCAtMC4wKSAr
 MS4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgLTAuMCAtMS4wKSAtaW5mLjApCihjaGVjay1l
 cXVhbD8gKGZsZXhwdCAtMC4wIC0zLjApIC1pbmYuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0
 IC0wLjAgLW1heC1vZGQuMCkgLWluZi4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgLTAuMCAt
 MC41KSAraW5mLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAtMC4wIC0xLjUpICtpbmYuMCkK
 KGNoZWNrLWVxdWFsPyAoZmxleHB0IC0wLjAgLTIuMCkgK2luZi4wKQooY2hlY2stZXF1YWw/
 IChmbGV4cHQgLTAuMCAtMi41KSAraW5mLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAtMC4w
 IC1iaWctZXZlbi4wKSAraW5mLjApCgooY2hlY2stZXF1YWw/IChmbGV4cHQgKzEuMCAtMC4w
 KSArMS4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgKzEuMCAtMC41KSArMS4wKQooY2hlY2st
 ZXF1YWw/IChmbGV4cHQgKzEuMCAtaW5mLjApICsxLjApCgooY2hlY2stZXF1YWw/IChmbGV4
 cHQgLTEuMCAtMC4wKSArMS4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgLTEuMCAtMC41KSAr
 bmFuLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAtMS4wIC1pbmYuMCkgKzEuMCkKCihjaGVj
 ay1lcXVhbD8gKGZsZXhwdCArMC41IC1pbmYuMCkgK2luZi4wKQooY2hlY2stZXF1YWw/IChm
 bGV4cHQgKzEuNSAtaW5mLjApICswLjApCgooY2hlY2stZXF1YWw/IChmbGV4cHQgK2luZi4w
 IC0wLjApICsxLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAraW5mLjAgLTEuMCkgKzAuMCkK
 KGNoZWNrLWVxdWFsPyAoZmxleHB0ICtpbmYuMCAtMi4wKSArMC4wKQooY2hlY2stZXF1YWw/
 IChmbGV4cHQgK2luZi4wIC1pbmYuMCkgKzAuMCkKCihjaGVjay1lcXVhbD8gKGZsZXhwdCAt
 aW5mLjAgLTAuMCkgKzEuMCkKKGNoZWNrLWVxdWFsPyAoZmxleHB0IC1pbmYuMCAtMS4wKSAt
 MC4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgLWluZi4wIC0zLjApIC0wLjApCihjaGVjay1l
 cXVhbD8gKGZsZXhwdCAtaW5mLjAgLW1heC1vZGQuMCkgLTAuMCkKKGNoZWNrLWVxdWFsPyAo
 ZmxleHB0IC1pbmYuMCAtMC41KSArMC4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgLWluZi4w
 IC0xLjUpICswLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCAtaW5mLjAgLTIuMCkgKzAuMCkK
 KGNoZWNrLWVxdWFsPyAoZmxleHB0IC1pbmYuMCAtMi41KSArMC4wKQooY2hlY2stZXF1YWw/
 IChmbGV4cHQgLWluZi4wIC1iaWctZXZlbi4wKSArMC4wKQooY2hlY2stZXF1YWw/IChmbGV4
 cHQgLWluZi4wIC1pbmYuMCkgKzAuMCkKCjs7IE5hTiBpbnB1dAoKKGNoZWNrLWVxdWFsPyAo
 ZmxleHB0ICtuYW4uMCArMC4wKSArMS4wKQooY2hlY2stZXF1YWw/IChmbGV4cHQgK25hbi4w
 IC0wLjApICsxLjApCihjaGVjay1lcXVhbD8gKGZsZXhwdCArMS4wICtuYW4uMCkgKzEuMCkK
 KGNoZWNrLWVxdWFsPyAoZmxleHB0IC0xLjAgK25hbi4wKSArbmFuLjApCg==
 --------------010409000804020707060101--

From: Matthew Flatt <mflatt@cs.utah.edu>
To: Neil Toronto <neil.toronto@gmail.com>, stamourv@ccs.neu.edu
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/12935: flexpt doesn't follow IEEE 754-2008 (also
 ISO C99) standard for pow
Date: Mon, 6 Aug 2012 09:18:09 -0600

 Looking at this again, I see that I had it backwards: the results that
 don't match C99 come from Racket trying to handle special cases
 directly instead of using the system's pow() function.
 
 So, let's change `flexpt' to be consistent with C99 and `expt' to be
 consistent with `flexpt' in those cases that don't produce complex
 numbers.
 
 (I haven't quite sorted out the right behavior for `expt' and complex
 results in the corners, such as `(expt -inf.0 -2.5)'.)
 
From: Neil Toronto <neil.toronto@gmail.com>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: stamourv@ccs.neu.edu, bugs@racket-lang.org
Subject: Re: [racket-bug] all/12935: flexpt doesn't follow IEEE 754-2008 (also
 ISO C99) standard for pow
Date: Mon, 06 Aug 2012 12:28:48 -0600

 On 08/06/2012 09:18 AM, Matthew Flatt wrote:
 > So, let's change `flexpt' to be consistent with C99 and `expt' to be
 > consistent with `flexpt' in those cases that don't produce complex
 > numbers.
 
 Sounds good!
 
 > (I haven't quite sorted out the right behavior for `expt' and complex
 > results in the corners, such as `(expt -inf.0 -2.5)'.)
 
 Unfortunately, it looks like the C99 standard doesn't help much. This is 
 all I could find, on pg. 479:
 
 "The cpow functions raise floating-point exceptions if appropriate for 
 the calculation of the parts of the result, and may raise spurious 
 exceptions. [327]
 
 ...
 
 [327] This allows cpow(z, c) to be implemented as cexp(c * clog(z)) 
 without precluding implementations that treat special cases more carefully."
 
 I'd say leave complex cases out of the resolution for this bug report.
 
 Neil ⊥
 
State changed from "open" to "closed" by mflatt@racket-lang.org at Mon, 06 Aug 2012 15:00:54 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/13d7a37eb6
