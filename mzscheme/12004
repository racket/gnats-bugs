From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jun 24 18:31:59 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p5OMVuV6019598
	for <bugs@bugs.plt-scheme.org>; Fri, 24 Jun 2011 18:31:56 -0400
Message-Id: <201106242231.p5OMVqY0019588@champlain.ccs.neu.edu>
Date: Fri, 24 Jun 2011 18:31:52 -0400
From: samth@ccs.neu.edu
To: bugs@racket-lang.org
Subject: example place program segfaults racket

>Number:         12004
>Category:       mzscheme
>Synopsis:       example place program segfaults racket
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Jun 24 18:32:01 -0400 2011
>Last-Modified:  Mon Sep 05 15:31:46 -0400 2011
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.1.6--2011-06-24(19a7a37/g)
>Environment:
unix "Linux punge 2.6.38-8-generic #42-Ubuntu SMP Mon Apr 11 03:31:50 UTC 2011 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 115970264

Collections:
("/home/samth/work/teaching/213-11/trunk/"
 ("progs1" ".svn" "classN" "inarow.rkt~" "admin" "project-rubric.txt~" "class2" "svn_authz.conf~" "web" "progsN" "gen-pairs.rkt~" "quizzes" "class5" "bugs" "lab-solutions" "class4" "info-domain" "student-list~" "exam1" "exam2" "progs0" "progs2" "notes" "class3" "lol" "class1" "class-system-03-28.plt" "class0" "project-rubric.txt" "class0.plt"))
("/home/samth/sw/plt/add-on/5.1.1.6/collects"
 (non-existent-path))
("/home/samth/sw/plt/collects"
 ("honu" "eopl" "tests" "typed" "test-engine" "errortrace" "sgl" "plot" "combinator-parser" "mzcom" "test-box-recovery" "version" ".gitignore" "defaults" "deinprogramm" "s-exp" "handin-client" "srpersist" "launcher" "scriblib" "browser" "unstable" "r5rs" "gui-debugger" "at-exp" "swindle" "scheme" "reader" "frtime" "meta" "racket" "file" "racklog" "data" "slatex" "net" "wxme" "syntax" "scribblings" "parser-tools" "ffi" "hierlist" "handin-server" "2htdp" "framework" "mz" "openssl" "dynext" "datalog" "slideshow" "games" "raco" "picturing-programs" "xml" "texpict" "graphics" "mzscheme" "profile" "help" "web-server" "schelog" "trace" "make" "algol60" "mzlib" "rackunit" "icons" "plai" "sirmail" "lazy" "mrlib" "setup" "string-constants" "syntax-color" "r6rs" "drscheme" "lang" "repo-time-stamp" "afm" "planet" "typed-scheme" "info-domain" "config" "guibuilder" "stepper" "mred" "embedded-gui" "preprocessor" "readline" "htdp" "compiler" "srfi" "waterworld" "macro-debugger" "html" "scri!
 bble" "mysterx" "redex" "drracket" "rnrs" "teachpack" "tex2page" "schemeunit"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #("-n") "#lang racket\n" #t #t))
>Description:
This program, which is a translation of the places examples from the docs to use the `place' form, segfaults racket:

[samth@punge:~ plt] cat tmp/place-test.rkt
#lang racket

(let ([pls (for/list ([i (in-range 2)])
             (place pch (place-channel-put pch (format "Hello from place ~a"
                                                        (place-channel-get pch)))))])
   (for ([i (in-range 2)]
         [p pls])
      (place-channel-put p i)
      (printf "~a\n" (place-channel-get p)))
   (map place-wait pls))

[samth@punge:~ plt] r tmp/place-test.rkt
SIGSEGV MAPERR si_code 1 fault on addr (nil)
SIGSEGV MAPERR si_code 1 fault on addr (nil)
SIGSEGV MAPERR si_code 1 fault on addr (nil)
SIGSEGV MAPERR si_code 1 fault on addr (nil)
Aborted
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: samth@ccs.neu.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12004: example place program segfaults racket
Date: Sat, 25 Jun 2011 06:48:05 +0800

 Probably there should be better behavior that segfaulting, but this
 code is buggy in that it attempts to create an infinite number of
 places. To use 'place' you really need two files, since 'place' is
 implemented by using dynamic-place with the file containing the call
 to 'place'.
 
 Robby
 
 On Sat, Jun 25, 2011 at 6:32 AM,  <samth@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12004
 >
 > Reported by Sam TH for release: 5.1.1.6--2011-06-24(19a7a37/g)
 >
 > *** Description:
 > This program, which is a translation of the places examples from the docs to use the `place' form, segfaults racket:
 >
 > [samth@punge:~ plt] cat tmp/place-test.rkt
 > #lang racket
 >
 > (let ([pls (for/list ([i (in-range 2)])
 >             (place pch (place-channel-put pch (format "Hello from place ~a"
 >                                                        (place-channel-get pch)))))])
 >   (for ([i (in-range 2)]
 >         [p pls])
 >      (place-channel-put p i)
 >      (printf "~a\n" (place-channel-get p)))
 >   (map place-wait pls))
 >
 > [samth@punge:~ plt] r tmp/place-test.rkt
 > SIGSEGV MAPERR si_code 1 fault on addr (nil)
 > SIGSEGV MAPERR si_code 1 fault on addr (nil)
 > SIGSEGV MAPERR si_code 1 fault on addr (nil)
 > SIGSEGV MAPERR si_code 1 fault on addr (nil)
 > Aborted
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > unix "Linux punge 2.6.38-8-generic #42-Ubuntu SMP Mon Apr 11 03:31:50 UTC 2011 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 115970264
 >
 > Collections:
 > ("/home/samth/work/teaching/213-11/trunk/"
 >  ("progs1" ".svn" "classN" "inarow.rkt~" "admin" "project-rubric.txt~" "class2" "svn_authz.conf~" "web" "progsN" "gen-pairs.rkt~" "quizzes" "class5" "bugs" "lab-solutions" "class4" "info-domain" "student-list~" "exam1" "exam2" "progs0" "progs2" "notes" "class3" "lol" "class1" "class-system-03-28.plt" "class0" "project-rubric.txt" "class0.plt"))
 > ("/home/samth/sw/plt/add-on/5.1.1.6/collects"
 >  (non-existent-path))
 > ("/home/samth/sw/plt/collects"
 >  ("honu" "eopl" "tests" "typed" "test-engine" "errortrace" "sgl" "plot" "combinator-parser" "mzcom" "test-box-recovery" "version" ".gitignore" "defaults" "deinprogramm" "s-exp" "handin-client" "srpersist" "launcher" "scriblib" "browser" "unstable" "r5rs" "gui-debugger" "at-exp" "swindle" "scheme" "reader" "frtime" "meta" "racket" "file" "racklog" "data" "slatex" "net" "wxme" "syntax" "scribblings" "parser-tools" "ffi" "hierlist" "handin-server" "2htdp" "framework" "mz" "openssl" "dynext" "datalog" "slideshow" "games" "raco" "picturing-programs" "xml" "texpict" "graphics" "mzscheme" "profile" "help" "web-server" "schelog" "trace" "make" "algol60" "mzlib" "rackunit" "icons" "plai" "sirmail" "lazy" "mrlib" "setup" "string-constants" "syntax-color" "r6rs" "drscheme" "lang" "repo-time-stamp" "afm" "planet" "typed-scheme" "info-domain" "config" "guibuilder" "stepper" "mred" "embedded-gui" "preprocessor" "readline" "htdp" "compiler" "srfi" "waterworld" "macro-debugger" "html" "scri!
 >  bble" "mysterx" "redex" "drracket" "rnrs" "teachpack" "tex2page" "schemeunit"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #("-n") "#lang racket\n" #t #t))
 >
 >
 
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: samth@ccs.neu.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12004: example place program segfaults racket
Date: Fri, 24 Jun 2011 18:50:31 -0400

 On Jun 24, 2011, at 6:48 PM, Robby Findler wrote:
 
 > Probably there should be better behavior that segfaulting,
 
 
 I nominate this for the understatement of the year :-) 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12004: example place program segfaults racket
Date: Fri, 24 Jun 2011 18:51:55 -0400

 On Fri, Jun 24, 2011 at 6:48 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Probably there should be better behavior that segfaulting, but this
 > code is buggy in that it attempts to create an infinite number of
 > places. To use 'place' you really need two files, since 'place' is
 > implemented by using dynamic-place with the file containing the call
 > to 'place'.
 
 So, is it right to say that `place' should never be used in code
 that's run when the module is required?
 -- 
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12004: example place program segfaults racket
Date: Sat, 25 Jun 2011 08:07:23 +0800

 On Sat, Jun 25, 2011 at 6:51 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Fri, Jun 24, 2011 at 6:48 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> Probably there should be better behavior that segfaulting, but this
 >> code is buggy in that it attempts to create an infinite number of
 >> places. To use 'place' you really need two files, since 'place' is
 >> implemented by using dynamic-place with the file containing the call
 >> to 'place'.
 >
 > So, is it right to say that `place' should never be used in code
 > that's run when the module is required?
 
 That sounds right to me.
 
 Robby


----------
A commit by mflatt@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/6d944453a7
