From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Nov  2 20:56:28 2010
Received: from mail-yx0-f172.google.com (mail-yx0-f172.google.com [209.85.213.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id oA30uPhJ023838
	for <bugs@bugs.plt-scheme.org>; Tue, 2 Nov 2010 20:56:25 -0400
Message-Id: <201011030056.oA30uLfr023830@champlain.ccs.neu.edu>
Date: Tue, 2 Nov 2010 20:56:21 -0400
From: plt-scheme@akkartik.com
To: bugs@racket-lang.org
Subject: Incorrect evaluation result in mzscheme

>Number:         11380
>Category:       mzscheme
>Synopsis:       Incorrect evaluation result in mzscheme
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Nov 02 21:00:01 -0400 2010
>Closed-Date:    Wed Nov 03 08:48:53 -0400 2010
>Last-Modified:  Wed Nov 03 08:48:53 -0400 2010
>Originator:     Kartik Agaram
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1
>Environment:
macosx "Darwin dhcp-172-19-109-182.mtv.corp.google.com 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 113745024

Collections:
(("/Users/agaram/Library/Racket/5.0.1/collects" non-existent-path) ("/Users/agaram/Desktop/Racket v5.0.1/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "datalog" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server!
 " "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t))
>Description:
This mzscheme program executes incorrectly in racket v5.0.1's mzscheme on Linux and MacOS. I've also tested with PLT 4.0.25 on Mac, which works. It works in DrRacket and DrScheme, the GUI versions, but fails with mzscheme and racket, the commandline versions.

(define (x var params arglist)
  (if (equal? (car params) var)
    (car arglist)
    (x var (cdr params) (cdr arglist))))

(define (y . l)
  (let ((a (x 'a '(a b) l))
        (b (or (x 'b '(a b) l) #f)))
    a))

(display (y 3 4))(newline) ; => 4. Should be 3.

The following variants of y work fine:

a) Inserting a display:

(define (y . l)
  (let ((a (x 'a '(a b) l))
        (b (or (x 'b '(a b) l) #f)))
    (display "")
    a))

b) Getting rid of the (or .. #f)

(define (y . l)
  (let ((a (x 'a '(a b) l))
        (b (x 'b '(a b) l)))
    a))
>How-To-Repeat:
$ cat > x.scm
#lang mzscheme
(require mzscheme)

(define (x var params arglist)
  (if (equal? (car params) var)
    (car arglist)
    (x var (cdr params) (cdr arglist))))

(define (y . l)
  (let ((a (x 'a '(a b) l))
        (b (or (x 'b '(a b) l) #f)))
    a))

(display (y 3 4))(newline)

$ racket -t x.scm
4

Desired output: 3
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: plt-scheme@akkartik.com, bugs@racket-lang.org
Cc: bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11380: Incorrect evaluation result in mzscheme
Date: Tue, 2 Nov 2010 21:08:57 -0400

 8 minutes ago, plt-scheme@akkartik.com wrote:
 > #lang mzscheme
 > (require mzscheme)
 > 
 > (define (x var params arglist)
 >   (if (equal? (car params) var)
 >     (car arglist)
 >     (x var (cdr params) (cdr arglist))))
 > 
 > (define (y . l)
 >   (let ((a (x 'a '(a b) l))
 >         (b (or (x 'b '(a b) l) #f)))
 >     a))
 > 
 > (display (y 3 4))(newline)
 > 
 > $ racket -t x.scm
 > 4
 > 
 > Desired output: 3
 
 FWIW, I see the same -- and it's a jitter bug (try with/without a -j
 flag).
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

State changed from "open" to "analyzed" by mflatt at Wed, 03 Nov 2010 08:48:26 -0400
Reason>>>  The bug was triggered by code of the form
    (let ([x ....])
      (let ([unused (let ([y ....])
                      y)])
         x))
 where the JIT remembered that position 0 on the stack
 as in the return register the point that it generates
 return of `y'. Since the result of third `let' is
 unused, the JIT didn't do anything else before returning
 `x', but it should have reset the flag saying that the
 variable at position 0 is in the result register.

 This bug did not show up easily before because the
 bytecode compiler rarely generates code with that
 pattern. Usually it can see enough to get rid of
 the third `let'.

State changed from "analyzed" to "closed" by mflatt@racket-lang.org at Wed, 03 Nov 2010 08:48:53 -0400
Reason>>> A commit by mflatt@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/aaafe86dd0
