From nobody@cs.rice.edu  Sun Oct 14 17:18:52 2001
Return-Path: <nobody@cs.rice.edu>
Received: from localhost (localhost [127.0.0.1])
	by cs.rice.edu (Postfix) with ESMTP id 9B01517A8
	for <plt-gnats@cs.rice.edu>; Sun, 14 Oct 2001 17:18:51 -0500 (CDT)
Message-Id: <200110142218.RAA01542@web.cs.rice.edu>
Date: Sun, 14 Oct 2001 17:18:50 -0500 (CDT)
From: robby@cs.rice.edu
Reply-To: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: provide's struct clause and expanded programs 

>Number:         2107
>Category:       mzscheme
>Synopsis:       provide's struct clause and expanded programs
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Sun Oct 14 22:30:02 GMT 2001
>Last-Modified:  Sun Oct 28 13:49:39 CST 2001
>Originator:     Robert Bruce Findler
>Organization:
titan
>Release:        199
>Environment:
unknown
>Description:
in the expanded version of a module, why
does `struct' have to appear inside `provide'?

It seems to me that expansion of the module
could behave such that the struct case of
the provide became a series of variables.

Or, if that is not possible, is there a function in
mzscheme that accepts the syntax for a
provide-struct clause and returned the list of
variables that it corresponds to? This
avoids duplication of code (esp. in light
of the fact that this function recently changed!)
>How-To-Repeat:

>Fix:

>Audit-Trail:

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Sun Oct 28 13:49:07 2001
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Sun Oct 28 13:49:13 2001
State-Changed-Why:
property info provides expanded names; "struct.ss" library of
"syntax" provides callable expansion

>Unformatted:
