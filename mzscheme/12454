From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Dec 19 15:35:55 2011
Received: from mail-vx0-f172.google.com (mail-vx0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id pBJKZqJo026107
	for <bugs@bugs.plt-scheme.org>; Mon, 19 Dec 2011 15:35:52 -0500
Message-Id: <201112192035.pBJKZnbg026098@champlain.ccs.neu.edu>
Date: Mon, 19 Dec 2011 15:35:49 -0500
From: vasishtha.spier@gmail.com
To: bugs@racket-lang.org
Subject: Terminology in Racket Guide section 5.3

>Number:         12454
>Category:       mzscheme
>Synopsis:       Terminology in Racket Guide section 5.3
>Class:          doc-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Dec 19 15:36:01 -0500 2011
>Last-Modified:  Tue Feb 19 18:20:01 -0500 2013
>Originator:     Harry Spier
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2
>Environment:
windows "Windows NT 6.0 (Build 6002) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 192895836
Links: (links) = (); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("C:\\Users\\Harry\\AppData\\Roaming\\Racket\\5.2\\collects"
 (non-existent-path))
("C:\\Program Files\\Racket\\collects"
 ("2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-racket" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #() "#lang racket\n" #t #t))
>Description:
The Racket Guide section 5.3 says:
----------------------------
5.3 Structure Subtypes

An extended form of struct can be used to define a structure subtype, which is a structure type that extends an existing structure type:(struct struct-id super-id (field-id ...))


The super-id must be a structure type name bound by struct (i.e., the name that cannot be used directly as an expression).
-----------------------------------
I'm wondering if it might be a little clearer using different terminology than "structure sub-types" and "super-id"

The existing terminology works well with an example such as:
(struct point-in-plane (x y))
(struct coloured-point-in-plane point-in-plane (colour))

Since a coloured-point-in-plane is a particular kind of point-in-plane, i.e. a sub-type of its more generic super-type a point-in-plane.

But for the example:
(struct point-in-plane (x y))
(struct point-in-3d-space point-in-plane (z))
A point-in-3d-space is not a sub-type (a particular kind) of a point-in-plane, and a point-in-a-plane is not a super-type (a more generic kind) of a point-in-3d-space.

I don't off the top of my head have a terminology that would be clear for both cases, but perhaps there is one that works both ways.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Danny Yoo <dyoo@hashcollision.org>
To: vasishtha.spier@gmail.com, bugs@racket-lang.org, sk@racket-lang.org,
        mflatt@racket-lang.org
Cc: 
Subject: Re: mzscheme/12454: Terminology in Racket Guide section 5.3
Date: Tue, 19 Feb 2013 16:16:58 -0700

 I disagree with this, as Racket does treat structure subtyping in that way.
 
 The following interaction demonstrates:
 
 ---
 #lang racket
 (struct point-in-plane (x y))
 (struct point-in-3d-space point-in-plane (z))
 
 (point-in-plane? (point-in-3d-space 3 4 5))    ;; Evaluates to #t
 ---
 
 This may not match the intended semantic meaning that you want to
 express, but regardless, that's what Racket is doing.
 
 If you want to express point-in-3d-space as being a different
 classification than point-in-plane, then using the super-id here isn't
 appropriate.
 
 Ok to close this bug report?
