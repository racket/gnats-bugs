From apache@plt-scheme.org Thu Nov  2 17:55:32 2006
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.171])
	by champlain.ccs.neu.edu (8.13.7/8.13.7) with ESMTP id kA2MtQUN003255
	for <bugs@bugs.plt-scheme.org>; Thu, 2 Nov 2006 17:55:27 -0500
Message-Id: <200611022255.kA2MtPsW003249@champlain.ccs.neu.edu>
Date: Thu, 2 Nov 2006 17:55:25 -0500
From: samth@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: local-expand of define-values in 'module context should work

>Number:         8370
>Category:       mzscheme
>Synopsis:       local-expand of define-values in 'module context should work
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Nov 02 18:00:01 -0500 2006
>Closed-Date:    Wed Nov 15 16:59:51 -0500 2006
>Last-Modified:  Wed Nov 15 16:59:51 -0500 2006
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        359.100-svn1nov2006
>Environment:
unix "Linux punge 2.6.15-27-386 #1 PREEMPT Sat Sep 16 01:51:59 UTC 2006 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Docs Installed:
(("/home/samth/sw/plt/doc" "r5rs" "mzscheme" "mred" "help" "tour" "drscheme" "srfi" "mzlib" "misclib" "mrlib" "framework" "foreign" "mzc" "tools" "insidemz" "web-server" "swindle" "plot" "release-notes" "t-y-scheme" "tex2page" "beginning" "beginning-abbr" "intermediate" "intermediate-lambda" "advanced" "teachpack" "teachpack-htdc" "profj-beginner" "profj-intermediate" "profj-advanced"))
Human Language: english
(current-memory-use) 150509112

Collections:
(("/home/samth/scheme" "typed-scheme" "info-domain" "assembler") ("/home/samth/.plt-scheme/359.100/collects" non-existent-path) ("/home/samth/sw/plt/collects" ".svn" "tex2page" "string-constants" "planet" "mzcom" "drscheme" "r6rs" "framework" "srpersist" "sirmail" "slideshow" "syntax-color" "srfi" "algol60" "dynext" "slibinit" "make" "plot" "lang" "web-server" "openssl" "scribble" "frtime" "mred" "guibuilder" "htdp" "setup" "graphics" "profjWizard" "afm" "config" "defaults" "icons" "skipper" "handin-client" "texpict" "profjBoxes" "browser" "teachpack" "parser-tools" "waterworld" "r5rs" "mztake" "games" "honu-module" "eopl" "tests" "html" "swindle" "handin-server" "repos-time-stamp" "mrflow" "compiler" "embedded-gui" "profj" "stepper" "readline" "hierlist" "sgl" "version" "syntax" "preprocessor" "net" "help" "htdch" "xelda" "trace" "slatex" "xml" "launcher" "ffi" "mrlib" "test-suite" "errortrace" "mzscheme" "mysterx" "mzlib" "info-domain" "lazy" "macro-debugger"))
Teachpack filenames: ()
Computer Language: (("Professional Languages" "(module ...)") (#6(#t write mixed-fraction-e #f #t debug) (default) #0()))
>Description:
The following expression:

(begin-for-syntax (display (local-expand  #'(define x 4) 'module '())))

produces a syntax error, since the expansion of define-values in the context 'module produces an error.  This makes it very awkward to expand definitions in a module context.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: samth@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/8370: local-expand of define-values in 'module context should work
Date: Fri, 3 Nov 2006 07:02:09 0800

 At Thu, 2 Nov 2006 18:00:01 -0500, samth@ccs.neu.edu wrote:
 > The following expression:
 > 
 > (begin-for-syntax (display (local-expand  #'(define x 4) 'module '())))
 > 
 > produces a syntax error, since the expansion of define-values in the context 
 > 'module produces an error.  This makes it very awkward to expand definitions 
 > in a module context.
 
 To use the 'module context, you have to expand like `module' --- which
 means that you have to stop at `define-values' and handle the
 definition explicitly. (To behave teh same as `module', don't expand
 the RHS until all top-level forms have been processed, first.)
 
 Matthew
 
From: Sam TH <samth@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8370: local-expand of define-values in 'module context
	should work
Date: Thu, 02 Nov 2006 18:11:24 -0500

 On Fri, 2006-11-03 at 07:02 +0800, Matthew Flatt wrote:
 > At Thu, 2 Nov 2006 18:00:01 -0500, samth@ccs.neu.edu wrote:
 > > The following expression:
 > > 
 > > (begin-for-syntax (display (local-expand  #'(define x 4) 'module '())))
 > > 
 > > produces a syntax error, since the expansion of define-values in the context 
 > > 'module produces an error.  This makes it very awkward to expand definitions 
 > > in a module context.
 > 
 > To use the 'module context, you have to expand like `module' --- which
 > means that you have to stop at `define-values' and handle the
 > definition explicitly. (To behave teh same as `module', don't expand
 > the RHS until all top-level forms have been processed, first.)
 
 How should I do this then?  This doesn't work either:
 
 > (begin-for-syntax 
     (let ([x (local-expand  #'(define x 4) 'module (list #'define-values))])
       (local-expand x 'module '())))
 
 Do I need to reimplement the behavior of pass 2 in the expansion of module-begin?
 
 sam th
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Sam TH <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8370: local-expand of define-values in 'module context
	should work
Date: Fri, 3 Nov 2006 08:09:34 0800

 At Thu, 02 Nov 2006 18:11:24 -0500, Sam TH wrote:
 > On Fri, 2006-11-03 at 07:02 +0800, Matthew Flatt wrote:
 > > At Thu, 2 Nov 2006 18:00:01 -0500, samth@ccs.neu.edu wrote:
 > > > The following expression:
 > > > 
 > > > (begin-for-syntax (display (local-expand  #'(define x 4) 'module '())))
 > > > 
 > > > produces a syntax error, since the expansion of define-values in the 
 > context 
 > > > 'module produces an error.  This makes it very awkward to expand 
 > definitions 
 > > > in a module context.
 > > 
 > > To use the 'module context, you have to expand like `module' --- which
 > > means that you have to stop at `define-values' and handle the
 > > definition explicitly. (To behave teh same as `module', don't expand
 > > the RHS until all top-level forms have been processed, first.)
 > 
 > How should I do this then?  This doesn't work either:
 > 
 > > (begin-for-syntax 
 >     (let ([x (local-expand  #'(define x 4) 'module (list #'define-values))])
 >       (local-expand x 'module '())))
 > 
 > Do I need to reimplement the behavior of pass 2 in the expansion of module-
 > begin?
 
 I guess it's not clear to me what you're trying to do.
 
 Maybe the example below will help. It shows how to interleave
 `local-expand' with module's processing of imports and definitions.
 
 At the point where `a-expanded' is available, you can recognize
 definitions, and you can add a wrapper around expressions to work with
 them at the point where `module' starts dealing with expressions.
 
 Matthew
 
 ----------------------------------------
 
 (module top mzscheme
   (require-for-syntax (lib "kerncase.ss" "syntax"))
 
   (provide (all-from-except mzscheme #%module-begin)
 	   (rename top-module-begin #%module-begin))
 
   (define-syntax (top-module-begin stx)
     (syntax-case stx ()
       [(_ content ...)
        (datum->syntax-object
 	stx
 	`(,#'#%plain-module-begin
 	  (,#'require-for-syntax mzscheme)
 	  (,#'begin-process-each ,#'(content ...)))
 	stx)]))
   
   (define-for-syntax core (kernel-form-identifier-list #'here))
 
   (define-syntax (begin-process-each stx)
     (syntax-case stx (begin)
       [(_ ()) 
        ;; Done:
        #'(begin)]
       [(_ ((begin form ...) . rest))
        #'(begin-process-each (form ... . rest))]
       [(_ (a . rest))
        (with-syntax ([a-expanded (local-expand #'a 'module core)])
 	 #`(begin
 	     (printf "Expanded top: ~s\n" 'a-expanded)
 	     a-expanded
 	     (begin-process-each rest)))])))
 
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8370: local-expand of define-values in 'module context
	should work
Date: Thu, 02 Nov 2006 23:59:42 -0500

 On Fri, 2006-11-03 at 08:09 +0800, Matthew Flatt wrote:
 
 > 
 > I guess it's not clear to me what you're trying to do.
 > 
 > Maybe the example below will help. It shows how to interleave
 > `local-expand' with module's processing of imports and definitions.
 
 Sorry, I haven't been clear about what I'm trying to do.  Here's the
 macro I'm trying to write:
 
   (define-syntax (tc-tl stx)
     (syntax-case stx ()
       [(_ form)
        (with-syntax ([form* (local-expand #'form 'module '())])
          #'(test-not-exn (format "~a" 'expr) 
                          (lambda ()
                            (parameterize ([current-type-names initial-type-names])
                              (tc-toplevel #'form* initial-cenv)))))]))
 
 
 A similar macro works fine for expression contexts.  What I want to do
 is be able to write test expression like so:
 
 (tc-tl (define x 1))
 
 even though the tc-toplevel function works on fully-expanded syntax.  I
 know how to implement this by first local-expanding form with
 define-values in the stop list, and then destructuring the result and
 calling local-expand in 'expression context on the right hand side.
 However, I'm hoping I don't have to reimplement that portion of the
 expander.
 
 I hope that clarifies what I'm trying to do.
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8370: local-expand of define-values in 'module context
	should work
Date: Sat, 4 Nov 2006 09:05:54 0800

 I still don't understand. In particular, I don't understand where `tc-tl'
 is supposed to be used or the constraints on what it does.
 
 For example, if something like
 
  (module m ...
    (tc-tl (define x (foo (lambda 23))))
    (define-syntax foo (syntax-rules () [(_ any) 12]))
    ...)
 
 is supposed to be anything other than a syntax error, then you can't
 expand the RHS of the definition.
 
 If you're willing to say that the RHS is expanded early (and so certain
 things don't work that would with a normal `module'-level definition),
 then I think deconstructing `define-values' is the only option.
 
 Matthew
 
 At Thu, 02 Nov 2006 23:59:42 -0500, Sam Tobin-Hochstadt wrote:
 > On Fri, 2006-11-03 at 08:09 +0800, Matthew Flatt wrote:
 > 
 > > 
 > > I guess it's not clear to me what you're trying to do.
 > > 
 > > Maybe the example below will help. It shows how to interleave
 > > `local-expand' with module's processing of imports and definitions.
 > 
 > Sorry, I haven't been clear about what I'm trying to do.  Here's the
 > macro I'm trying to write:
 > 
 >   (define-syntax (tc-tl stx)
 >     (syntax-case stx ()
 >       [(_ form)
 >        (with-syntax ([form* (local-expand #'form 'module '())])
 >          #'(test-not-exn (format "~a" 'expr) 
 >                          (lambda ()
 >                            (parameterize ([current-type-names initial-type-
 > names])M
 >                              (tc-toplevel #'form* initial-cenv)))))]))
 > 
 > 
 > A similar macro works fine for expression contexts.  What I want to do
 > is be able to write test expression like so:
 > 
 > (tc-tl (define x 1))
 > 
 > even though the tc-toplevel function works on fully-expanded syntax.  I
 > know how to implement this by first local-expanding form with
 > define-values in the stop list, and then destructuring the result and
 > calling local-expand in 'expression context on the right hand side.
 > However, I'm hoping I don't have to reimplement that portion of the
 > expander.
 > 
 > I hope that clarifies what I'm trying to do.
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/8370: local-expand of define-values in 'module context
	should work
Date: Sat, 04 Nov 2006 08:22:01 -0500

 On Sat, 2006-11-04 at 09:05 +0800, Matthew Flatt wrote:
 > I still don't understand. In particular, I don't understand where `tc-tl'
 > is supposed to be used or the constraints on what it does.
 
 It's supposed to be used in a context like this:
 
 (test-suite "Tests"
    (tc-tl (definition goes here))
    (tc-tl (another definition))
    etc)
 
 The goal is to be able to test the tc-toplevel procedure, which expects
 fully-expanded code, without having to write fully expanded code in my
 test suite.  
 
 > 
 > For example, if something like
 > 
 >  (module m ...
 >    (tc-tl (define x (foo (lambda 23))))
 >    (define-syntax foo (syntax-rules () [(_ any) 12]))
 >    ...)
 > 
 > is supposed to be anything other than a syntax error, then you can't
 > expand the RHS of the definition.
 
 That is intended to be a syntax error.  Or rather, I don't care about
 supporting this.
 
 > If you're willing to say that the RHS is expanded early (and so certain
 > things don't work that would with a normal `module'-level definition),
 > then I think deconstructing `define-values' is the only option.
 
 I've now done that, it isn't very hard.  However, since I'm sure there's
 some complexity there that I'm probably going to get wrong, I was hoping
 there was a way to avoid it.  But it seems there isn't, so that's fine.
 
 Feel free to close the bug at this point.
 

State changed from "open" to "closed" by mflatt at Wed, 15 Nov 2006 16:59:51 -0500
Reason>>> clarified; the module+syntax system could provide better
support, but that's covered by other PRs and projects

