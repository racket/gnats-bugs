From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Apr  8 07:57:35 2008
Received: from el-out-1112.google.com (el-out-1112.google.com [209.85.162.179])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m38BvYrT029451
	for <bugs@bugs.plt-scheme.org>; Tue, 8 Apr 2008 07:57:34 -0400
Message-Id: <200804081157.m38Bv5WO029444@champlain.ccs.neu.edu>
Date: Tue, 8 Apr 2008 07:57:05 -0400
From: jos.koot@telefonica.net
To: bugs@plt-scheme.org
Subject: (real->decimal-string x 0) --> error

>Number:         9285
>Category:       mzscheme
>Synopsis:       (real->decimal-string x 0) --> error
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Apr 08 08:00:01 -0400 2008
>Closed-Date:    Tue Apr 08 19:05:12 -0400 2008
>Last-Modified:  Tue Apr 08 19:05:12 -0400 2008
>Originator:     Jos Koot
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.22-svn7apr2008
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 100853324

Collections:
(("C:\\Documents and Settings\\HP_Eigenaar\\Application Data\\PLT Scheme\\3.99.0.22\\collects" "my-scheme") ("C:\\Program Files\\PLT-FULL-3.99.0.22\\collects" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu-module" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "little-helper" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "type!
 d-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #()))
>Description:
Welcome to DrScheme, version 3.99.0.22-svn7apr2008 [3m].

> (real->decimal-string 0.6 0) --> error: make-string: expects type <non-negative exact integer> as 1st argument, given: -1; other arguments were: #\0

Can be fixed in string.ss as follows: (see <===)

  (define (real->decimal-string n [digits 2])
    (let* ([e (expt 10 digits)]
           [num (round (abs (* e (inexact->exact n))))])
      (format "~a~a.~a"
              (if (negative? n) "-" "")
              (quotient num e)
              (if (zero? digits) "" ;<=== because (number->string 0) --> "0"
                (let ([s (number->string (remainder num e))])
                  (if (= (string-length s) digits)
                    s
                    (string-append (make-string (- digits (string-length s)) #\0)
                                 s)))))))
Jos
>How-To-Repeat:
(real->decimal-string 0.6 0)
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: jos.koot@telefonica.net, bugs@plt-scheme.org
Cc: matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
Date: Tue, 8 Apr 2008 08:40:06 -0400

 On Apr  8, jos.koot@telefonica.net wrote:
 > Welcome to DrScheme, version 3.99.0.22-svn7apr2008 [3m].
 > 
 > > (real->decimal-string 0.6 0) --> error: make-string: expects type <non-negative exact integer> as 1st argument, given: -1; other arguments were: #\0
 > 
 > Can be fixed in string.ss as follows: (see <===)
 > [...]
 
 I fixed it a little differently -- I made it just do
 
   (number->string (inexact->exact (round n)))
 
 when `digits' is zero.  This means that it does not include the
 decimal digit, which seems to me to be a little more useful than a
 "N." -- but maybe it's better to have it?  (Someone say something if
 you think that it's better.)
 
 (BTW, it also outputs "0" for an input of -0.0, which is consistent
 with what it does with -0.0 and a positive `digits' value.)
 
 I also added tests for the function (and separated the tests for
 scheme/base stuff from the mzlib/string tests).
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: "Jos Koot" <jos.koot@telefonica.net>
To: "Eli Barzilay" <eli@barzilay.org>, <bugs@plt-scheme.org>
Cc: <matthias@plt-scheme.org>, <sk@plt-scheme.org>, <mflatt@plt-scheme.org>,
        <robby@plt-scheme.org>, <clements@plt-scheme.org>,
        <jay@plt-scheme.org>, <meunier@plt-scheme.org>,
        <sowens@plt-scheme.org>, <kathyg@plt-scheme.org>,
        <jacobm@plt-scheme.org>, <cce@plt-scheme.org>, <samth@plt-scheme.org>,
        <ryanc@plt-scheme.org>
Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
Date: Tue, 8 Apr 2008 15:23:25 +0200

 Thanks for the quick reply.
 
 I think I prefer always the period, certainly when n is not exact.
 May be (string-append (number->string (inexact->exact (round n))) ".") or
 (let ((s (number->string (inexact->exact (round n)))))
   (if (exact? n) s (string-append s ".")))
 
 I also prefer (real->decimal-string 1.e-10 0) --> -0. E.g.
 (let ((s (number->string (inexact->exact (round n)))))
   (if (exact? n) s (string-append (if (< n 0) "-" "") s ".")))
 
 Jos
 
 ----- Original Message ----- 
 From: "Eli Barzilay" <eli@barzilay.org>
 To: <jos.koot@telefonica.net>; <bugs@plt-scheme.org>
 Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; <mflatt@plt-scheme.org>; 
 <robby@plt-scheme.org>; <clements@plt-scheme.org>; <jay@plt-scheme.org>; 
 <meunier@plt-scheme.org>; <sowens@plt-scheme.org>; <kathyg@plt-scheme.org>; 
 <jacobm@plt-scheme.org>; <cce@plt-scheme.org>; <samth@plt-scheme.org>; 
 <ryanc@plt-scheme.org>
 Sent: Tuesday, April 08, 2008 2:40 PM
 Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 
 
 > On Apr  8, jos.koot@telefonica.net wrote:
 >> Welcome to DrScheme, version 3.99.0.22-svn7apr2008 [3m].
 >>
 >> > (real->decimal-string 0.6 0) --> error: make-string: expects type 
 >> > <non-negative exact integer> as 1st argument, given: -1; other 
 >> > arguments were: #\0
 >>
 >> Can be fixed in string.ss as follows: (see <===)
 >> [...]
 >
 > I fixed it a little differently -- I made it just do
 >
 >  (number->string (inexact->exact (round n)))
 >
 > when `digits' is zero.  This means that it does not include the
 > decimal digit, which seems to me to be a little more useful than a
 > "N." -- but maybe it's better to have it?  (Someone say something if
 > you think that it's better.)
 >
 > (BTW, it also outputs "0" for an input of -0.0, which is consistent
 > with what it does with -0.0 and a positive `digits' value.)
 >
 > I also added tests for the function (and separated the tests for
 > scheme/base stuff from the mzlib/string tests).
 >
 > -- 
 >          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                  http://www.barzilay.org/                 Maze is Life! 
 
From: "Jos Koot" <jos.koot@telefonica.net>
To: "Jos Koot" <jos.koot@telefonica.net>, "Eli Barzilay" <eli@barzilay.org>,
        <bugs@plt-scheme.org>
Cc: <matthias@plt-scheme.org>, <sk@plt-scheme.org>, <mflatt@plt-scheme.org>,
        <robby@plt-scheme.org>, <clements@plt-scheme.org>,
        <jay@plt-scheme.org>, <meunier@plt-scheme.org>,
        <sowens@plt-scheme.org>, <kathyg@plt-scheme.org>,
        <jacobm@plt-scheme.org>, <cce@plt-scheme.org>, <samth@plt-scheme.org>,
        <ryanc@plt-scheme.org>
Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
Date: Tue, 8 Apr 2008 15:26:16 +0200

 Oops Forgot abs in the last suggestion: (round (abs n))
 Apologies.
 Jos
 
 ----- Original Message ----- 
 From: "Jos Koot" <jos.koot@telefonica.net>
 To: "Eli Barzilay" <eli@barzilay.org>; <bugs@plt-scheme.org>
 Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; <mflatt@plt-scheme.org>; 
 <robby@plt-scheme.org>; <clements@plt-scheme.org>; <jay@plt-scheme.org>; 
 <meunier@plt-scheme.org>; <sowens@plt-scheme.org>; <kathyg@plt-scheme.org>; 
 <jacobm@plt-scheme.org>; <cce@plt-scheme.org>; <samth@plt-scheme.org>; 
 <ryanc@plt-scheme.org>
 Sent: Tuesday, April 08, 2008 3:23 PM
 Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 
 
 > Thanks for the quick reply.
 >
 > I think I prefer always the period, certainly when n is not exact.
 > May be (string-append (number->string (inexact->exact (round n))) ".") or
 > (let ((s (number->string (inexact->exact (round n)))))
 >  (if (exact? n) s (string-append s ".")))
 >
 > I also prefer (real->decimal-string 1.e-10 0) --> -0. E.g.
 > (let ((s (number->string (inexact->exact (round n)))))
 >  (if (exact? n) s (string-append (if (< n 0) "-" "") s ".")))
 >
 > Jos
 >
 > ----- Original Message ----- 
 > From: "Eli Barzilay" <eli@barzilay.org>
 > To: <jos.koot@telefonica.net>; <bugs@plt-scheme.org>
 > Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; 
 > <mflatt@plt-scheme.org>; <robby@plt-scheme.org>; 
 > <clements@plt-scheme.org>; <jay@plt-scheme.org>; <meunier@plt-scheme.org>; 
 > <sowens@plt-scheme.org>; <kathyg@plt-scheme.org>; <jacobm@plt-scheme.org>; 
 > <cce@plt-scheme.org>; <samth@plt-scheme.org>; <ryanc@plt-scheme.org>
 > Sent: Tuesday, April 08, 2008 2:40 PM
 > Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 >
 >
 >> On Apr  8, jos.koot@telefonica.net wrote:
 >>> Welcome to DrScheme, version 3.99.0.22-svn7apr2008 [3m].
 >>>
 >>> > (real->decimal-string 0.6 0) --> error: make-string: expects type 
 >>> > <non-negative exact integer> as 1st argument, given: -1; other 
 >>> > arguments were: #\0
 >>>
 >>> Can be fixed in string.ss as follows: (see <===)
 >>> [...]
 >>
 >> I fixed it a little differently -- I made it just do
 >>
 >>  (number->string (inexact->exact (round n)))
 >>
 >> when `digits' is zero.  This means that it does not include the
 >> decimal digit, which seems to me to be a little more useful than a
 >> "N." -- but maybe it's better to have it?  (Someone say something if
 >> you think that it's better.)
 >>
 >> (BTW, it also outputs "0" for an input of -0.0, which is consistent
 >> with what it does with -0.0 and a positive `digits' value.)
 >>
 >> I also added tests for the function (and separated the tests for
 >> scheme/base stuff from the mzlib/string tests).
 >>
 >> -- 
 >>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>                  http://www.barzilay.org/                 Maze is Life!
 > 
 
From: "Jos Koot" <jos.koot@telefonica.net>
To: "Jos Koot" <jos.koot@telefonica.net>, "Eli Barzilay" <eli@barzilay.org>,
        <bugs@plt-scheme.org>
Cc: <matthias@plt-scheme.org>, <sk@plt-scheme.org>, <mflatt@plt-scheme.org>,
        <robby@plt-scheme.org>, <clements@plt-scheme.org>,
        <jay@plt-scheme.org>, <meunier@plt-scheme.org>,
        <sowens@plt-scheme.org>, <kathyg@plt-scheme.org>,
        <jacobm@plt-scheme.org>, <cce@plt-scheme.org>, <samth@plt-scheme.org>,
        <ryanc@plt-scheme.org>
Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
Date: Tue, 8 Apr 2008 20:54:43 +0200

 Eli's (number->string (inexact->exact (round n))) and my variations on it 
 all go wrong on (real->decimal-string 1/2 0).
 My original suggestion does not have this bug.
 Jos
 
 ----- Original Message ----- 
 From: "Jos Koot" <jos.koot@telefonica.net>
 To: "Jos Koot" <jos.koot@telefonica.net>; "Eli Barzilay" <eli@barzilay.org>; 
 <bugs@plt-scheme.org>
 Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; <mflatt@plt-scheme.org>; 
 <robby@plt-scheme.org>; <clements@plt-scheme.org>; <jay@plt-scheme.org>; 
 <meunier@plt-scheme.org>; <sowens@plt-scheme.org>; <kathyg@plt-scheme.org>; 
 <jacobm@plt-scheme.org>; <cce@plt-scheme.org>; <samth@plt-scheme.org>; 
 <ryanc@plt-scheme.org>
 Sent: Tuesday, April 08, 2008 3:26 PM
 Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 
 
 > Oops Forgot abs in the last suggestion: (round (abs n))
 > Apologies.
 > Jos
 >
 > ----- Original Message ----- 
 > From: "Jos Koot" <jos.koot@telefonica.net>
 > To: "Eli Barzilay" <eli@barzilay.org>; <bugs@plt-scheme.org>
 > Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; 
 > <mflatt@plt-scheme.org>; <robby@plt-scheme.org>; 
 > <clements@plt-scheme.org>; <jay@plt-scheme.org>; <meunier@plt-scheme.org>; 
 > <sowens@plt-scheme.org>; <kathyg@plt-scheme.org>; <jacobm@plt-scheme.org>; 
 > <cce@plt-scheme.org>; <samth@plt-scheme.org>; <ryanc@plt-scheme.org>
 > Sent: Tuesday, April 08, 2008 3:23 PM
 > Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 >
 >
 >> Thanks for the quick reply.
 >>
 >> I think I prefer always the period, certainly when n is not exact.
 >> May be (string-append (number->string (inexact->exact (round n))) ".") or
 >> (let ((s (number->string (inexact->exact (round n)))))
 >>  (if (exact? n) s (string-append s ".")))
 >>
 >> I also prefer (real->decimal-string 1.e-10 0) --> -0. E.g.
 >> (let ((s (number->string (inexact->exact (round n)))))
 >>  (if (exact? n) s (string-append (if (< n 0) "-" "") s ".")))
 >>
 >> Jos
 >>
 >> ----- Original Message ----- 
 >> From: "Eli Barzilay" <eli@barzilay.org>
 >> To: <jos.koot@telefonica.net>; <bugs@plt-scheme.org>
 >> Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; 
 >> <mflatt@plt-scheme.org>; <robby@plt-scheme.org>; 
 >> <clements@plt-scheme.org>; <jay@plt-scheme.org>; 
 >> <meunier@plt-scheme.org>; <sowens@plt-scheme.org>; 
 >> <kathyg@plt-scheme.org>; <jacobm@plt-scheme.org>; <cce@plt-scheme.org>; 
 >> <samth@plt-scheme.org>; <ryanc@plt-scheme.org>
 >> Sent: Tuesday, April 08, 2008 2:40 PM
 >> Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 >>
 >>
 >>> On Apr  8, jos.koot@telefonica.net wrote:
 >>>> Welcome to DrScheme, version 3.99.0.22-svn7apr2008 [3m].
 >>>>
 >>>> > (real->decimal-string 0.6 0) --> error: make-string: expects type 
 >>>> > <non-negative exact integer> as 1st argument, given: -1; other 
 >>>> > arguments were: #\0
 >>>>
 >>>> Can be fixed in string.ss as follows: (see <===)
 >>>> [...]
 >>>
 >>> I fixed it a little differently -- I made it just do
 >>>
 >>>  (number->string (inexact->exact (round n)))
 >>>
 >>> when `digits' is zero.  This means that it does not include the
 >>> decimal digit, which seems to me to be a little more useful than a
 >>> "N." -- but maybe it's better to have it?  (Someone say something if
 >>> you think that it's better.)
 >>>
 >>> (BTW, it also outputs "0" for an input of -0.0, which is consistent
 >>> with what it does with -0.0 and a positive `digits' value.)
 >>>
 >>> I also added tests for the function (and separated the tests for
 >>> scheme/base stuff from the mzlib/string tests).
 >>>
 >>> -- 
 >>>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >>>                  http://www.barzilay.org/                 Maze is Life!
 >>
 > 
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Jos Koot" <jos.koot@telefonica.net>
Cc: "Jos Koot" <jos.koot@telefonica.net>, "Eli Barzilay" <eli@barzilay.org>,
        bugs@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        robby@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, sowens@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org
Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
Date: Tue, 8 Apr 2008 15:56:44 -0600

 I think that a trailing dot is the right thing, so I've changed it to
 the way that Jos suggested. Also, I added a minus sign for -0.0.
 
 Jos: I don't understand why you say that `(real->decimal-string 1/2 0)'
 doesn't work right. It should produce "0.", right?
 
 Matthew
 
 At Tue, 8 Apr 2008 20:54:43 +0200, "Jos Koot" wrote:
 > Eli's (number->string (inexact->exact (round n))) and my variations on it 
 > all go wrong on (real->decimal-string 1/2 0).
 > My original suggestion does not have this bug.
 > Jos
 > 
 > ----- Original Message ----- 
 > From: "Jos Koot" <jos.koot@telefonica.net>
 > To: "Jos Koot" <jos.koot@telefonica.net>; "Eli Barzilay" <eli@barzilay.org>; 
 > <bugs@plt-scheme.org>
 > Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; <mflatt@plt-scheme.org>; 
 > <robby@plt-scheme.org>; <clements@plt-scheme.org>; <jay@plt-scheme.org>; 
 > <meunier@plt-scheme.org>; <sowens@plt-scheme.org>; <kathyg@plt-scheme.org>; 
 > <jacobm@plt-scheme.org>; <cce@plt-scheme.org>; <samth@plt-scheme.org>; 
 > <ryanc@plt-scheme.org>
 > Sent: Tuesday, April 08, 2008 3:26 PM
 > Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 > 
 > 
 > > Oops Forgot abs in the last suggestion: (round (abs n))
 > > Apologies.
 > > Jos
 > >
 > > ----- Original Message ----- 
 > > From: "Jos Koot" <jos.koot@telefonica.net>
 > > To: "Eli Barzilay" <eli@barzilay.org>; <bugs@plt-scheme.org>
 > > Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; 
 > > <mflatt@plt-scheme.org>; <robby@plt-scheme.org>; 
 > > <clements@plt-scheme.org>; <jay@plt-scheme.org>; <meunier@plt-scheme.org>; 
 > > <sowens@plt-scheme.org>; <kathyg@plt-scheme.org>; <jacobm@plt-scheme.org>; 
 > > <cce@plt-scheme.org>; <samth@plt-scheme.org>; <ryanc@plt-scheme.org>
 > > Sent: Tuesday, April 08, 2008 3:23 PM
 > > Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 > >
 > >
 > >> Thanks for the quick reply.
 > >>
 > >> I think I prefer always the period, certainly when n is not exact.
 > >> May be (string-append (number->string (inexact->exact (round n))) ".") or
 > >> (let ((s (number->string (inexact->exact (round n)))))
 > >>  (if (exact? n) s (string-append s ".")))
 > >>
 > >> I also prefer (real->decimal-string 1.e-10 0) --> -0. E.g.
 > >> (let ((s (number->string (inexact->exact (round n)))))
 > >>  (if (exact? n) s (string-append (if (< n 0) "-" "") s ".")))
 > >>
 > >> Jos
 > >>
 > >> ----- Original Message ----- 
 > >> From: "Eli Barzilay" <eli@barzilay.org>
 > >> To: <jos.koot@telefonica.net>; <bugs@plt-scheme.org>
 > >> Cc: <matthias@plt-scheme.org>; <sk@plt-scheme.org>; 
 > >> <mflatt@plt-scheme.org>; <robby@plt-scheme.org>; 
 > >> <clements@plt-scheme.org>; <jay@plt-scheme.org>; 
 > >> <meunier@plt-scheme.org>; <sowens@plt-scheme.org>; 
 > >> <kathyg@plt-scheme.org>; <jacobm@plt-scheme.org>; <cce@plt-scheme.org>; 
 > >> <samth@plt-scheme.org>; <ryanc@plt-scheme.org>
 > >> Sent: Tuesday, April 08, 2008 2:40 PM
 > >> Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 > >>
 > >>
 > >>> On Apr  8, jos.koot@telefonica.net wrote:
 > >>>> Welcome to DrScheme, version 3.99.0.22-svn7apr2008 [3m].
 > >>>>
 > >>>> > (real->decimal-string 0.6 0) --> error: make-string: expects type 
 > >>>> > <non-negative exact integer> as 1st argument, given: -1; other 
 > >>>> > arguments were: #\0
 > >>>>
 > >>>> Can be fixed in string.ss as follows: (see <===)
 > >>>> [...]
 > >>>
 > >>> I fixed it a little differently -- I made it just do
 > >>>
 > >>>  (number->string (inexact->exact (round n)))
 > >>>
 > >>> when `digits' is zero.  This means that it does not include the
 > >>> decimal digit, which seems to me to be a little more useful than a
 > >>> "N." -- but maybe it's better to have it?  (Someone say something if
 > >>> you think that it's better.)
 > >>>
 > >>> (BTW, it also outputs "0" for an input of -0.0, which is consistent
 > >>> with what it does with -0.0 and a positive `digits' value.)
 > >>>
 > >>> I also added tests for the function (and separated the tests for
 > >>> scheme/base stuff from the mzlib/string tests).
 > >>>
 > >>> -- 
 > >>>          ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 > >>>                  http://www.barzilay.org/                 Maze is Life!
 > >>
 > > 
From: "Jos Koot" <jos.koot@telefonica.net>
To: "Matthew Flatt" <mflatt@cs.utah.edu>
Cc: "Eli Barzilay" <eli@barzilay.org>, <bugs@plt-scheme.org>,
        <matthias@plt-scheme.org>, <sk@plt-scheme.org>, <robby@plt-scheme.org>,
        <clements@plt-scheme.org>, <jay@plt-scheme.org>,
        <meunier@plt-scheme.org>, <sowens@plt-scheme.org>,
        <kathyg@plt-scheme.org>, <jacobm@plt-scheme.org>, <cce@plt-scheme.org>,
        <samth@plt-scheme.org>, <ryanc@plt-scheme.org>
Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
Date: Wed, 9 Apr 2008 00:44:26 +0200

 ----- Original Message ----- 
 From: "Matthew Flatt" <mflatt@cs.utah.edu>
 To: "Jos Koot" <jos.koot@telefonica.net>
 Cc: "Jos Koot" <jos.koot@telefonica.net>; "Eli Barzilay" <eli@barzilay.org>; 
 <bugs@plt-scheme.org>; <matthias@plt-scheme.org>; <sk@plt-scheme.org>; 
 <robby@plt-scheme.org>; <clements@plt-scheme.org>; <jay@plt-scheme.org>; 
 <meunier@plt-scheme.org>; <sowens@plt-scheme.org>; <kathyg@plt-scheme.org>; 
 <jacobm@plt-scheme.org>; <cce@plt-scheme.org>; <samth@plt-scheme.org>; 
 <ryanc@plt-scheme.org>
 Sent: Tuesday, April 08, 2008 11:56 PM
 Subject: Re: [plt-bug] all/9285: (real->decimal-string x 0) --> error
 
 
 >I think that a trailing dot is the right thing, so I've changed it to
 > the way that Jos suggested. Also, I added a minus sign for -0.0.
 
 Thanks Matthew.
 Thanks to you too, Eli.
 
 >
 > Jos: I don't understand why you say that `(real->decimal-string 1/2 0)'
 > doesn't work right. It should produce "0.", right?
 
 Yes, right!
 May be Eli's version did work, but my variations did not.
 Anyway, I am very pleased with the current version.
 Now I can remove duplicated code from my own formatter.
 Jos
 
 >
 > Matthew
 >
 > At Tue, 8 Apr 2008 20:54:43 +0200, "Jos Koot" wrote:
 >> Eli's (number->string (inexact->exact (round n))) and my variations on it
 >> all go wrong on (real->decimal-string 1/2 0).
 >> My original suggestion does not have this bug.
 >> Jos
 snip snip snip 
 

State changed from "open" to "closed" by mflatt at Tue, 08 Apr 2008 19:05:12 -0400
Reason>>> fixed

