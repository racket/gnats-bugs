From nobody@champlain.ccs.neu.edu  Mon May 12 08:02:42 2003
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id IAA30440
	for bugs@plt-scheme.org; Mon, 12 May 2003 08:02:42 -0400
Message-Id: <200305121202.IAA30440@champlain.ccs.neu.edu>
Date: Mon, 12 May 2003 08:02:42 -0400
From: sebastian.egner@philips.com
Reply-To:
To: bugs@plt-scheme.org
Subject: pattern (not <expr>) does not match properly in hygienic macro

>Number:         6261
>Category:       mzscheme
>Synopsis:       pattern (not <expr>) does not match properly in hygienic macro
>Confidential:   no
>Severity:       critical
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Mon May 12 08:05:01 EDT 2003
>Closed-Date:    Mon May 12 11:20:08 EDT 2003
>Last-Modified:  Mon May 12 11:20:08 EDT 2003
>Originator:     Sebastian Egner
>Release:        204
>Organization:
plt
>Environment:
windows-2000
>Description:
Hi!

When porting SRFI 42 to PLT 204, there Jens Axel SÃ¸gaard
had problems running the associated examples.

I have isolated the following problem: When a macro is
defined inside a module (and only then) such that it
matches the pattern (not <something>), with not being
declared in the list of constants, then the pattern is
not matched properly.

Please try the code below.

Kind regards,

Sebastian.
>How-To-Repeat:
(module |bug-demo1| mzscheme
  (provide m)

(define-syntax m
  (syntax-rules (not)
    ((m (not x))
     "ok")
    ((m x)
     "(not x) did not match as expected" ))) )

(require bug-demo1)

(m (not 1))
; => "(not x) did not match properly"
>Fix:

>Release-Note:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: sebastian.egner@philips.com
Cc: bugs@plt-scheme.org
Subject: Re: all/6261: pattern (not <expr>) does not match properly in hygienic macro
Date: Mon, 12 May 2003 07:29:58 -0600

 At Mon, 12 May 2003 08:02:42 -0400, sebastian.egner@philips.com wrote:
 > (module |bug-demo1| mzscheme
 >   (provide m)
 > 
 > (define-syntax m
 >   (syntax-rules (not)
 >     ((m (not x))
 >      "ok")
 >     ((m x)
 >      "(not x) did not match as expected" ))) )
 
 Inside the module `bug-demo1', `not' means "the `not' exported from the
 `mzscheme' module".
 
 > (require bug-demo1)
 > 
 > (m (not 1))
 > ; => "(not x) did not match properly"
 
 At the top level, `not' means "the top-level definition of `not', which
 is initialized to the same value as the `not' exported by `mzscheme'".
 
 This is confusing. The latter meaning is, unfortunately, required for
 conformance to R5RS. But `syntax-case' is working correctly.
 
 To make `m' work as expected both in a module and at the top level, use
 `syntax-case*', and supply as the comparison predicate
 `module-or-top-identifier=?' from `(lib "stx.ss" "syntax")'.
 
 See also
 
  http://list.cs.brown.edu/pipermail/plt-scheme/2002-November/001260.html
 
 Matthew
 

From: Robby Findler <robby@cs.uchicago.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Matthew Flatt <mflatt@cs.utah.edu>, bugs@plt-scheme.org
Subject: Re: all/6261: pattern (not <expr>) does not match properly in hygienic macro
Date: Mon, 12 May 2003 09:43:16 -0500

 At Mon, 12 May 2003 09:35:45 -0400, Matthias Felleisen wrote:
 > 
 > That's what I expected, except that I didn't know about syntax-case*. 
 > 
 > Is there any way that we can warn people that some keyword interferes
 > with existing definitions? 
 
 I think that this depends on the use context, right? Not the definition
 context?
 
 The r5 toplevel is just bad.
 
 > Indeed, I am willing to say this is an error
 > because warnings are silly of course. 
 
 Robby
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Mon May 12 11:20:08 2003
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Mon May 12 11:20:08 2003
State-Changed-Why:
    Not a bug, just a confusing top level.
>Unformatted:

