From nobody@cs.rice.edu  Fri Jan 19 03:52:53 2001
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id DAA00336
	for <plt-gnats@cs.rice.edu>; Fri, 19 Jan 2001 03:52:52 -0600 (CST)
Message-Id: <200101190952.DAA11605@web.cs.rice.edu>
Date: Fri, 19 Jan 2001 03:52:52 -0600 (CST)
From: pax@dedalo-ing.com
Reply-To: pax@dedalo-ing.com
To: plt-gnats@cs.rice.edu
Subject: Problem compiling mzscheme with gcc 2.96 

>Number:         1829
>Category:       mzscheme
>Synopsis:       Problem compiling mzscheme with gcc 2.96
>Confidential:   no
>Severity:       critical
>Priority:       high
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Fri Jan 19 10:00:01 GMT 2001
>Last-Modified:  Fri Jan 19 09:47:35 CST 2001
>Originator:     Paco Vides
>Organization:
titan
>Release:        103
>Environment:
Linux
>Description:
The compilation of mzscheme fails due to a problem with recursive macro
declaration. In file list.c, in line 1096 there is a macro wich expands
at preprocessing stage to some functions like cddr_prim and such. This
functions generate some macros names inside, that aren't preprocessed by
CPP, producing a compilation error in my platform and compiler version.

>How-To-Repeat:

>Fix:

>Audit-Trail:

From: Matthew Flatt <mflatt@cs.utah.edu>
To: pax@dedalo-ing.com
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1829: Problem compiling mzscheme with gcc 2.96 
Date: Fri, 19 Jan 2001 05:28:08 -0800

 Quoting pax@dedalo-ing.com:
 > The compilation of mzscheme fails due to a problem with recursive macro
 > declaration. In file list.c, in line 1096 there is a macro wich expands
 > at preprocessing stage to some functions like cddr_prim and such. This
 > functions generate some macros names inside, that aren't preprocessed by
 > CPP, producing a compilation error in my platform and compiler version.
 
 Thanks for the report. We've changed the source for the next release to
 avoid this problem. The relevant new code is below.
 
 Matthew
 
 ----------------------------------------
 
 #define LISTFUNC2(name, C, D) \
 static Scheme_Object * \
 name ## _prim (int argc, Scheme_Object *argv[]) \
 { \
   if (!(SCHEME_PAIRP(argv[0]) \
 	&& SCHEME_PAIRP(D(argv[0])))) \
       scheme_wrong_type(#name, #name "able value", 0, argc, argv); \
   return C(D(argv[0])); \
 }
 
 LISTFUNC2(cddr, SCHEME_CDR, SCHEME_CDR)
 LISTFUNC2(cadr, SCHEME_CAR, SCHEME_CDR)
 LISTFUNC2(cdar, SCHEME_CDR, SCHEME_CAR)
 LISTFUNC2(caar, SCHEME_CAR, SCHEME_CAR)
 
 #define LISTFUNC3(name, B, C, D) \
 static Scheme_Object * \
 name ## _prim (int argc, Scheme_Object *argv[]) \
 { \
   if (!((SCHEME_PAIRP(argv[0])) \
 	&& SCHEME_PAIRP(D(argv[0])) \
 	&& SCHEME_PAIRP(C(D(argv[0]))))) \
     scheme_wrong_type(#name, #name "able value", 0, argc, argv); \
   return B (C (D (argv[0]))); \
 }
 
 LISTFUNC3(cdddr, SCHEME_CDR, SCHEME_CDR, SCHEME_CDR)
 
 LISTFUNC3(caddr, SCHEME_CAR, SCHEME_CDR, SCHEME_CDR)
 LISTFUNC3(cdadr, SCHEME_CDR, SCHEME_CAR, SCHEME_CDR)
 LISTFUNC3(cddar, SCHEME_CDR, SCHEME_CDR, SCHEME_CAR)
 
 LISTFUNC3(cdaar, SCHEME_CDR, SCHEME_CAR, SCHEME_CAR)
 LISTFUNC3(cadar, SCHEME_CAR, SCHEME_CDR, SCHEME_CAR)
 LISTFUNC3(caadr, SCHEME_CAR, SCHEME_CAR, SCHEME_CDR)
 
 LISTFUNC3(caaar, SCHEME_CAR, SCHEME_CAR, SCHEME_CAR)
 
 
 #define LISTFUNC4(name, A, B, C, D) \
 static Scheme_Object * \
 name ## _prim (int argc, Scheme_Object *argv[]) \
 { \
   if (!(SCHEME_PAIRP(argv[0]) \
 	&& SCHEME_PAIRP(D (argv[0])) \
 	&& SCHEME_PAIRP(C(D(argv[0]))) \
 	&&SCHEME_PAIRP(B(C(D(argv[0]))))))\
     scheme_wrong_type(#name, #name "able value", 0, argc, argv); \
   return A(B(C(D(argv[0]))));\
 }
 
 LISTFUNC4(cddddr, SCHEME_CDR, SCHEME_CDR, SCHEME_CDR, SCHEME_CDR)
 
 LISTFUNC4(cadddr, SCHEME_CAR, SCHEME_CDR, SCHEME_CDR, SCHEME_CDR)
 LISTFUNC4(cdaddr, SCHEME_CDR, SCHEME_CAR, SCHEME_CDR, SCHEME_CDR)
 LISTFUNC4(cddadr, SCHEME_CDR, SCHEME_CDR, SCHEME_CAR, SCHEME_CDR)
 LISTFUNC4(cdddar, SCHEME_CDR, SCHEME_CDR, SCHEME_CDR, SCHEME_CAR)
 
 LISTFUNC4(caaddr, SCHEME_CAR, SCHEME_CAR, SCHEME_CDR, SCHEME_CDR)
 LISTFUNC4(cadadr, SCHEME_CAR, SCHEME_CDR, SCHEME_CAR, SCHEME_CDR)
 LISTFUNC4(caddar, SCHEME_CAR, SCHEME_CDR, SCHEME_CDR, SCHEME_CAR)
 LISTFUNC4(cdaadr, SCHEME_CDR, SCHEME_CAR, SCHEME_CAR, SCHEME_CDR)
 LISTFUNC4(cdadar, SCHEME_CDR, SCHEME_CAR, SCHEME_CDR, SCHEME_CAR)
 LISTFUNC4(cddaar, SCHEME_CDR, SCHEME_CDR, SCHEME_CAR, SCHEME_CAR)
 
 LISTFUNC4(cdaaar, SCHEME_CDR, SCHEME_CAR, SCHEME_CAR, SCHEME_CAR)
 LISTFUNC4(cadaar, SCHEME_CAR, SCHEME_CDR, SCHEME_CAR, SCHEME_CAR)
 LISTFUNC4(caadar, SCHEME_CAR, SCHEME_CAR, SCHEME_CDR, SCHEME_CAR)
 LISTFUNC4(caaadr, SCHEME_CAR, SCHEME_CAR, SCHEME_CAR, SCHEME_CDR)
 
 LISTFUNC4(caaaar, SCHEME_CAR, SCHEME_CAR, SCHEME_CAR, SCHEME_CAR)

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Fri Jan 19 09:47:30 2001
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Fri Jan 19 09:47:32 2001
State-Changed-Why:


 
 
>Unformatted:
