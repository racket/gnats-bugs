From nobody@champlain.ccs.neu.edu  Tue Oct 22 05:57:00 2002
Received: (from nobody@localhost)
	by champlain.ccs.neu.edu (8.9.3/8.8.7) id FAA21561
	for bugs@plt-scheme.org; Tue, 22 Oct 2002 05:57:00 -0400
Message-Id: <200210220957.FAA21561@champlain.ccs.neu.edu>
Date: Tue, 22 Oct 2002 05:57:00 -0400
From: eott@cs.washington.edu
To: bugs@plt-scheme.org
Subject: (* 100 8.8)  =>  880.000000001

>Number:         5901
>Category:       mzscheme
>Synopsis:       (* 100 8.8)  =>  880.000000001
>Class:          sw-bug
>Responsible:    steck
>Severity:       non-critical
>Priority:       low
>State:          closed
>Confidential:   no
>Arrival-Date:   Tue Oct 22 06:00:00 -0400 2002
>Closed-Date:    Tue Oct 22 16:11:42 -0400 2002
>Last-Modified:  Fri May 02 22:28:08 -0400 2008
>Originator:     Eric Ott
>Organization:
plt
>Submitter-Id:   unknown
>Release:        
>Environment:
windows-9x
>Description:
See below:
>How-To-Repeat:
> (* 100 8.8)
880.0000000000001
> (* 10 8.8)
88.0
> (* 1000 8.8)
8800.0
> (* 100 9.8)
980.0000000000001
> (* 100 7.8)
780.0
>Fix:
>Release-Note:
>Audit-Trail:
From: John Clements <clements@brinckerhoff.org>
To: eott@cs.washington.edu
Cc: bugs@plt-scheme.org
Subject: Re: all/5901: (* 100 8.8)  =>  880.000000001
Date: Tue, 22 Oct 2002 10:02:03 -0400

 --Apple-Mail-2--993934877
 Content-Transfer-Encoding: 7bit
 Content-Type: text/plain;
 	charset=US-ASCII;
 	format=flowed
 
 Thanks for your bug report.  Actually, this is not a bug, but rather a 
 simple fact of life with inexact numbers.  To see this in C, try the 
 following program.
 
   [osterley:~] clements% less tmp.c
   #include <stdio.h>
 
   int main(int argc, char *argv[])
   {
      double e;
 
      e = 17.35 * 25;
 
      printf("%.20f\n",e);
   }
   [osterley:~] clements% gcc tmp.c
   [osterley:~] clements% ./a.out
   433.75000000000005684342
   [osterley:~] clements%
 
 
   That's just the way floating-point numbers are.  unless the denominator
   is a power of two, you can't represent it exactly.
 
 
 For the record, if you want exact rather than inexact numbers, you can 
 specify them with #e, like this:
 
 [osterley:~] clements% mzscheme
 Welcome to MzScheme version 202.5, Copyright (c) 1995-2002 PLT
  > (* 100 8.8)
 880.0000000000001
  > (* 100 #e8.8)
 880
  >
 
 Hope this helps,
 
 john
 
 
 --Apple-Mail-2--993934877
 Content-Transfer-Encoding: 7bit
 Content-Type: text/enriched;
 	charset=US-ASCII
 
 <fixed><fontfamily><param>Courier New</param>Thanks for your bug
 report.  Actually, this is not a bug, but rather a simple fact of life
 with inexact numbers.  To see this in C, try the following program.
 
 
  [osterley:~] clements% less tmp.c
 
  #include <<stdio.h>
 
  
 
  int main(int argc, char *argv[])
 
  {
 
     double e;
 
  
 
     e = 17.35 * 25;
 
  
 
     printf("%.20f\n",e);
 
  }
 
  [osterley:~] clements% gcc tmp.c
 
  [osterley:~] clements% ./a.out
 
  433.75000000000005684342
 
  [osterley:~] clements%
 
  
 
  
 
  That's just the way floating-point numbers are.  unless the
 denominator 
 
  is a power of two, you can't represent it exactly.
 
  
 
 
 For the record, if you want exact rather than inexact numbers, you can
 specify them with #e, like this:
 
 
 [osterley:~] clements% mzscheme
 
 Welcome to MzScheme version 202.5, Copyright (c) 1995-2002 PLT
 
 > (* 100 8.8)
 
 880.0000000000001
 
 > (* 100 #e8.8)
 
 880
 
 > 
 
 
 Hope this helps,
 
 
 john
 
  
 
 </fontfamily></fixed>
 --Apple-Mail-2--993934877--
 
State-Changed-From-To: open->closed
State-Changed-By: steck
State-Changed-When: Tue Oct 22 16:11:42 2002
State-Changed-Why:
    Answered by J Clements
>Unformatted:
