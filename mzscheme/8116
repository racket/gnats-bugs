From apache@plt-scheme.org Thu Jun 15 00:08:55 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k5F48qqt032032
	for <bugs@plt-scheme.org>; Thu, 15 Jun 2006 00:08:52 -0400
Message-Id: <200606150408.k5F48qOo032030@champlain.ccs.neu.edu>
Date: Thu, 15 Jun 2006 00:08:52 -0400
From: hdg@cox.net
To: bugs@plt-scheme.org
Subject: weak boxes sometimes protect contents from garbage collection

>Number:         8116
>Category:       mzscheme
>Synopsis:       weak boxes sometimes protect contents from garbage collection
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jun 15 00:10:00 -0400 2006
>Closed-Date:    Mon Jan 17 17:46:51 -0500 2011
>Last-Modified:  Mon Jan 17 17:46:51 -0500 2011
>Originator:     David Goering
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301
>Environment:
macosx "Darwin ip68-103-47-84.ks.ok.cox.net 8.6.0 Darwin Kernel Version 8.6.0: Tue Mar  7 16:58:48 PST 2006; root:xnu-792.6.70.obj~1/RELEASE_PPC Power Macintosh powerpc" (ppc-macosx) (get-display-depth) = 32
Docs Installed:
(#<path:/Applications/PLT Scheme v301/collects/doc/web-server> #<path:/Applications/PLT Scheme v301/collects/doc/tour> #<path:/Applications/PLT Scheme v301/collects/doc/tools> #<path:/Applications/PLT Scheme v301/collects/doc/tex2page> #<path:/Applications/PLT Scheme v301/collects/doc/teachpack> #<path:/Applications/PLT Scheme v301/collects/doc/t-y-scheme> #<path:/Applications/PLT Scheme v301/collects/doc/swindle> #<path:/Applications/PLT Scheme v301/collects/doc/srfi> #<path:/Applications/PLT Scheme v301/collects/doc/r5rs> #<path:/Applications/PLT Scheme v301/collects/doc/profj-intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/profj-beginner> #<path:/Applications/PLT Scheme v301/collects/doc/profj-advanced> #<path:/Applications/PLT Scheme v301/collects/doc/plot> #<path:/Applications/PLT Scheme v301/collects/doc/mzscheme> #<path:/Applications/PLT Scheme v301/collects/doc/mzlib> #<path:/Applications/PLT Scheme v301/collects/doc/mzc> #<path:/Applications/PLT Scheme v301/collects/doc/mrlib> #<path:/Applications/PLT Scheme v301/collects/doc/mred> #<path:/Applications/PLT Scheme v301/collects/doc/misclib> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate-lambda> #<path:/Applications/PLT Scheme v301/collects/doc/intermediate> #<path:/Applications/PLT Scheme v301/collects/doc/insidemz> #<path:/Applications/PLT Scheme v301/collects/doc/help> #<path:/Applications/PLT Scheme v301/collects/doc/framework> #<path:/Applications/PLT Scheme v301/collects/doc/foreign> #<path:/Applications/PLT Scheme v301/collects/doc/drscheme> #<path:/Applications/PLT Scheme v301/collects/doc/beginning-abbr> #<path:/Applications/PLT Scheme v301/collects/doc/beginning> #<path:/Applications/PLT Scheme v301/collects/doc/advanced>)
Collections:
((#<path:/Users/david/Library/PLT Scheme/301/collects> "non-existent path") (#<path:/Applications/PLT Scheme v301/collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mzlib> #<path:mzscheme> #<path:mztake> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjBoxes> #<path:r5rs> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Textual (MzScheme, includes R5RS)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
1) Under various conditions a vector in a weak box is shielded
from garbage collection.  See "Steps to Reproduce"

2) I see similar behavior in weak boxes containing structs. The
structs are transient, so their weak boxes are expected to go to #f 
after gc. Sometimes they do not, but the behavior comes and goes as 
code not relative to these structs is edited.  The behavior is 
repeatable if no edits are made, but minor changes, including adding
diagnostics, changes it.  My conjecture: the state of a weak box's 
contents at the instant gc is invoked may break the weak box. 
>How-To-Repeat:
; A vector is put in a weak box under a top-level definition.
; The weak-box fails for a size 0 vector, succeeds otherwise.

(define t1-holder ())

(define (t1 size)
  (set! t1-holder (list (make-weak-box (make-vector size))))
  (collect-garbage)
  (display "trial t1; size ") 
    (display size)
    (display " => ")
    (display (weak-box-value (car t1-holder)))
    (newline)
)

(t1 0)  ; expect "trial t1; size 0 => #()"
(t1 1)  ; expect "trial t1; size 1 => #f"

;---------------------------
; A vector is put in a weak box under an inner definition.
; The weak-box fails.

(define (t2 size)
  (define t2-holder ())
  (set! t2-holder (list (make-weak-box (make-vector size))))
  (collect-garbage)
  (display "trial t2; size ") 
    (display size)
    (display " => ")
    (display (weak-box-value (car t2-holder)))
    (newline)
)

(t2 0)  ; expect "trial t2; size 0 => #()"
(t2 1)  ; expect "trial t2; size 1 => #(0)"

;---------------------------
; A vector is put in a weak box defined at the top-level
; The weak-box fails.

(define t3-holder ())

(define (t3 size)
  (set! t3-holder (make-weak-box (make-vector size)))
  (collect-garbage)
  (display "trial t3; size ") 
    (display size)
    (display " => ")
    (display (weak-box-value t3-holder))
    (newline)
)

(t3 0)  ; expect "trial t3; size 0 => #()"
(t3 1)  ; expect "trial t3; size 1 => #(0)"

;---------------------------
; A cons is put in a weak box under a top-level definition.
; The weak-box works.

(define t4-holder ())

(define (t4)
  (set! t4-holder (list (make-weak-box (cons #f #t))))
  (collect-garbage)
  (display "trial t4 ") 
    (display " => ")
    (display (weak-box-value (car t4-holder)))
    (newline)
)

(t4)  ; expect ""

;---------------------------
; A struct is put in a weak box under a top-level definition.
; The weak-box works.

(define-struct t5-struct (a b))

(define t5-holder ())

(define (t5)
  (set! t5-holder (list (make-weak-box (make-t5-struct #f #t))))
  (collect-garbage)
  (display "trial t5 ") 
    (display " => ")
    (display (weak-box-value (car t5-holder)))
    (newline)
)

(t5) ; expect ""
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: hdg@cox.net, bugs@plt-scheme.org
Cc: 
Subject: Re: all/8116: weak boxes sometimes protect contents from garbage collection
Date: Thu, 15 Jun 2006 10:32:26 -0600

 Hi,
 
 At Thu, 15 Jun 2006 00:10:07 -0400, hdg@cox.net wrote:
 > 1) Under various conditions a vector in a weak box is shielded
 > from garbage collection.  See "Steps to Reproduce"
 
 I think there are a couple of things going on:
 
  1. (make-vector 0) always returns the same value: a cached zero-length
     vector. Now that I look, this appears to be in conflict with R6RS,
     so I'll fix it (after the v350 release).
 
  2. Garbage collection is currently conservative in MzScheme (unless
     you build the 3m variant). The main source of conservatism is not
     so much interpreting numbers as pointers, but approximating the set
     of live registers and stack addresses.
 
 Also, MzScheme is not quite safe-for-space, but I don't think that's
 the issue in your case.
 
 > 2) I see similar behavior in weak boxes containing structs. The
 > structs are transient, so their weak boxes are expected to go to #f 
 > after gc. Sometimes they do not, but the behavior comes and goes as 
 > code not relative to these structs is edited.  The behavior is 
 > repeatable if no edits are made, but minor changes, including adding
 > diagnostics, changes it.  My conjecture: the state of a weak box's 
 > contents at the instant gc is invoked may break the weak box. 
 
 I think it has more to do with the patterns of stack and register use,
 and the effect of the other code on those patterns.
 
 > (t2 1)  ; expect "trial t2; size 1 => #(0)"
 
 FWIW, this one produces #f on my machine (an Intel Mac).
 
 > (t3 1)  ; expect "trial t3; size 1 => #(0)"
 
 Ditto. 
 
 In general, PowerPC fares less well than Intel in these cases, because
 there are more registers to incorrectly judge as live.
 
 
 Except for the zero-length-vector problem, I would expect all of your
 test programs to work right in DrScheme3m. If you'd like to try the
 examples --- and your real programs --- in 3m, download a "PLT Scheme
 Full" distribution from
 
   http://pre.plt-scheme.org/installers/
 
 If you see imprecision with 3m, I would be very interested to hear
 more.
 
 Most of the problems with making 3m the default build have been
 resolved, finally, so maybe we'll get away from conservative collection
 soon.
 
 Matthew
 


State changed from "open" to "closed" by eli at Mon, 17 Jan 2011 17:46:51 -0500
Reason>>> closed as "obsolete" with respect to v5.0.99.6 and later; 
either the bug
is long-since fixed, the relevant code doesn't exist 
anymore, the
relevant platform hasn't been supported recently, or a new 
bug report is
needed if the problem really isn't fixed and someone 
actually cares

