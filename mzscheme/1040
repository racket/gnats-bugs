From nobody@cs.rice.edu  Tue Jun 15 15:01:32 1999
Received: from web.cs.rice.edu (web.cs.rice.edu [128.42.1.163])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id PAA06261
	for <plt-gnats@cs.rice.edu>; Tue, 15 Jun 1999 15:01:32 -0500 (CDT)
Message-Id: <199906152001.PAA03250@web.cs.rice.edu>
Date: Tue, 15 Jun 1999 15:01:31 -0500 (CDT)
From: ptg@rice.edu
Reply-To: ptg@rice.edu
To: plt-gnats@cs.rice.edu
Subject: mzscheme dumps core (with hash-tables?) 

>Number:         1040
>Category:       mzscheme
>Synopsis:       mzscheme dumps core (with hash-tables?)
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Tue Jun 15 20:15:04 GMT 1999
>Last-Modified:  Thu Jun 17 17:28:19 CDT 1999
>Originator:     Paul Graunke
>Organization:
titan
>Release:        100alpha3
>Environment:
Solaris
>Description:
mzscheme consistantly dumps core when I run my (stripped down) program
on both linux and solaris.

antarctica:dag$ mzscheme -f t.ss
Welcome to MzScheme version 100alpha3, Copyright (c) 1995-99 PLT (Matthew Flatt)
> (test-internalize-dag)
Segmentation Fault (core dumped)

>How-To-Repeat:
make the file t.ss with this content, then run mzscheme as above.

;; Data Types:

;; DAG-ex = (listof (list Tag (listof Tag)))
;; Tag = Symbol
;; DAG = (make-dag Tag (listof DAG))
(define-struct dag (tag children))

;; function definitions

;; internalize-dag : DAG-ex -> DAG
;; more-here : handle arbitrary s-expressions gracefully
(define (internalize-dag dag-ex)
  (let ([table (make-hash-table)]
        [oops (lambda () (error 'internalize-dag "malformed input DAG"))])
    (for-each
     (lambda (item)
       (hash-table-put! table (car item) (cadr item)))
     dag-ex)
    (let ([dags (make-hash-table)])
      (let build-dag ([tag (caar dag-ex)])
        (hash-table-get
         dags tag
         (lambda ()
           (let ([new (make-dag tag (map build-dag (hash-table-get table tag oops)))])
             (hash-table-put! dags tag new)
             new)))))))

;; Tests

(define (test-internalize-dag)
  (print-struct #t)
  (internalize-dag '((hi (there yall))
                     (there (i am))
                     (yall (am i))
                     (i (am there))
                     (am (yall hi)))))

>Fix:

>Audit-Trail:

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Thu Jun 17 17:28:08 1999
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Thu Jun 17 17:28:09 1999
State-Changed-Why:
fixed (stack overflow handling problem)

>Unformatted:
