From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Apr 19 04:51:37 2008
Received: from wa-out-1112.google.com (wa-out-1112.google.com [209.85.146.180])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m3J8pa2j020570
	for <bugs@bugs.plt-scheme.org>; Sat, 19 Apr 2008 04:51:36 -0400
Message-Id: <200804190851.m3J8pUtR020564@champlain.ccs.neu.edu>
Date: Sat, 19 Apr 2008 04:51:30 -0400
From: ryanc@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: continuation marks and prompts

>Number:         9306
>Category:       mzscheme
>Synopsis:       continuation marks and prompts
>Class:          not-a-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Apr 19 04:55:01 -0400 2008
>Closed-Date:    Thu May 15 13:09:11 -0400 2008
>Last-Modified:  Thu May 15 13:09:11 -0400 2008
>Originator:     Ryan Culpepper
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.23-svn19apr2008
>Environment:
unix "Linux artichoke 2.6.22-14-generic #1 SMP Tue Feb 12 07:42:25 UTC 2008 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 24
Human Language: english
(current-memory-use) 46090448

Collections:
(("/home/ryan/.plt-scheme/3.99.0.23/collects" non-existent-path) ("/home/ryan/projects/fresh-plt/collects" "afm" "ffi" "net" "sgl" "xml" ".svn" "eopl" "file" "help" "htdp" "html" "lang" "lazy" "make" "r5rs" "r6rs" "mred" "plot" "rnrs" "srfi" "wxme" "framework" "teachpack" "handin-client" "mzscheme" "games" "icons" "htdch" "s-exp" "mrlib" "mzcom" "mzlib" "graphics" "profj" "setup" "tests" "trace" "test-engine" "combinator-parser" "waterworld" "preprocessor" "sirmail" "test-box-recovery" "handin-server" "tex2page" "texpict" "scribblings" "profjWizard" "stepper" "scribble" "typed-scheme" "web-server" "config" "compiler" "swindle" "dynext" "hierlist" "macro-debugger" "frtime" "defaults" "gui-debugger" "guibuilder" "drscheme" "syntax-color" "srpersist" "planet" "mysterx" "errortrace" "scheme" "slatex" "syntax" "version" "algol60" "honu-module" "parser-tools" "little-helper" "openssl" "embedded-gui" "slideshow" "repos-time-stamp" "info-domain" "readline" "launcher" "string-constan!
 ts" "browser"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t none) (default) #()))
>Description:
The default continuation prompt tag seems to behave specially with respect to continuation marks. A prompt with the default tag cuts short the continuation marks no matter what tag was supplied to 'continuation-mark-set->list'.
>How-To-Repeat:
#lang scheme/base

(define my-tag (make-continuation-prompt-tag))
(define other-tag (make-continuation-prompt-tag))

(define (fun n tag1 tag2)
  (if (zero? n)
      (continuation-mark-set->list (current-continuation-marks) 'key tag2)
      (with-continuation-mark 'key n
        (call-with-continuation-prompt 
         (lambda () (values (fun (sub1 n) tag1 tag2)))
         tag1))))

;; From the docs, I expect the following:
;;   Same tags => no marks visible
;;   Different tags => all marks visible

;; These make sense:
(fun 10 my-tag my-tag)
(fun 10 my-tag other-tag)
(fun 10 other-tag my-tag)
(fun 10 my-tag (default-continuation-prompt-tag))

;; But this does not:
(fun 10 (default-continuation-prompt-tag) my-tag)
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: ryanc@ccs.neu.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: [plt-bug] all/9306: continuation marks and prompts
Date: Sat, 19 Apr 2008 12:45:11 -0600

 At Sat, 19 Apr 2008 04:55:01 -0400, ryanc@ccs.neu.edu wrote:
 > The default continuation prompt tag seems to behave specially with respect to 
 > continuation marks. 
 
 Yes, in the sense that it's the default argument to
 `current-continuation-marks'.
 
 > A prompt with the default tag cuts short the continuation 
 > marks no matter what tag was supplied to 'continuation-mark-set->list'.
 
 It's cutting off the list at the time that `current-continuation-marks'
 is called.
 
 The revised example below is probably what you intended.
 
 ----------------------------------------
 
 #lang scheme/base
 
 (define my-tag (make-continuation-prompt-tag))
 (define other-tag (make-continuation-prompt-tag))
 
 (define (fun n tag1 tag2)
   (if (zero? n)
       (continuation-mark-set->list (current-continuation-marks tag2) 'key tag2)
       (with-continuation-mark 'key n
         (call-with-continuation-prompt 
          (lambda () (values (fun (sub1 n) tag1 tag2)))
          tag1))))
 
 (define (call-fun n tag1 tag2)
   (call-with-continuation-prompt 
    (lambda () (values (fun n tag1 tag2)))
    tag2))
 
 ;; From the docs, I expect the following:
 ;;   Same tags => no marks visible
 ;;   Different tags => all marks visible
 
 ;; These make sense:
 (call-fun 10 my-tag my-tag)
 (call-fun 10 my-tag other-tag)
 (call-fun 10 other-tag my-tag)
 (call-fun 10 my-tag (default-continuation-prompt-tag))
 (call-fun 10 (default-continuation-prompt-tag) my-tag)
 
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9306: continuation marks and prompts
Date: Sat, 19 Apr 2008 15:17:58 -0400

 Matthew Flatt wrote:
 > At Sat, 19 Apr 2008 04:55:01 -0400, ryanc@ccs.neu.edu wrote:
 >> The default continuation prompt tag seems to behave specially with respect to 
 >> continuation marks. 
 > 
 > Yes, in the sense that it's the default argument to
 > `current-continuation-marks'.
 
 I missed that entirely, that 'current-continuation-marks' took a tag 
 argument.
 
 >> A prompt with the default tag cuts short the continuation 
 >> marks no matter what tag was supplied to 'continuation-mark-set->list'.
 > 
 > It's cutting off the list at the time that `current-continuation-marks'
 > is called.
 > 
 > The revised example below is probably what you intended.
 
 Okay, I'm convinced that the behavior is consistent now.
 
 But it seems problematic for the following purpose (related to my PR 
 9306): I want my host program (say, SchemeUnit) to run an arbitrary 
 expression (call it the "guest" code). If the expression raises an 
 exception, I want to extract information from the continuation marks 
 corresponding to the entire execution of the given expression but not 
 any of the execution of the host program.
 
 I had thought I could do this by creating a fresh tag and installing a 
 prompt at the boundary between host and guest. But exceptions are 
 generally created with continuation marks delimited by the default tag, 
 IIRC, and so the guest expression could hide some of its information by 
 installing default-tagged prompts.
 
 For my purposes, it would be better if 'continuation-marks' was not 
 constrained by tags. But I haven't thought as much about other parts of 
 the system. Would that cause other problems?
 
 Ryan
 
 
 > 
 > ----------------------------------------
 > 
 > #lang scheme/base
 > 
 > (define my-tag (make-continuation-prompt-tag))
 > (define other-tag (make-continuation-prompt-tag))
 > 
 > (define (fun n tag1 tag2)
 >   (if (zero? n)
 >       (continuation-mark-set->list (current-continuation-marks tag2) 'key tag2)
 >       (with-continuation-mark 'key n
 >         (call-with-continuation-prompt 
 >          (lambda () (values (fun (sub1 n) tag1 tag2)))
 >          tag1))))
 > 
 > (define (call-fun n tag1 tag2)
 >   (call-with-continuation-prompt 
 >    (lambda () (values (fun n tag1 tag2)))
 >    tag2))
 > 
 > ;; From the docs, I expect the following:
 > ;;   Same tags => no marks visible
 > ;;   Different tags => all marks visible
 > 
 > ;; These make sense:
 > (call-fun 10 my-tag my-tag)
 > (call-fun 10 my-tag other-tag)
 > (call-fun 10 other-tag my-tag)
 > (call-fun 10 my-tag (default-continuation-prompt-tag))
 > (call-fun 10 (default-continuation-prompt-tag) my-tag)
 > 
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Ryan Culpepper <ryanc@ccs.neu.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9306: continuation marks and prompts
Date: Sat, 19 Apr 2008 13:46:49 -0600

 At Sat, 19 Apr 2008 15:17:58 -0400, Ryan Culpepper wrote:
 > But it seems problematic for the following purpose (related to my PR 
 > 9306): I want my host program (say, SchemeUnit) to run an arbitrary 
 > expression (call it the "guest" code). If the expression raises an 
 > exception, I want to extract information from the continuation marks 
 > corresponding to the entire execution of the given expression but not 
 > any of the execution of the host program.
 > 
 > I had thought I could do this by creating a fresh tag and installing a 
 > prompt at the boundary between host and guest. But exceptions are 
 > generally created with continuation marks delimited by the default tag, 
 > IIRC, and so the guest expression could hide some of its information by 
 > installing default-tagged prompts.
 
 A guest expression can also hide information by `(raise 7)', or by
 manufacturing an exception structure directly and using a
 continuation-mark set that is unrelated to the context of the `raise'.
 
 Maybe there are some additional constraints/assumptions where you know
 more about the call to `raise'?
 
 > For my purposes, it would be better if 'continuation-marks' was not 
 > constrained by tags. But I haven't thought as much about other parts of 
 > the system. Would that cause other problems?
 
 Yes, I think it could. One example that comes to mind has to do with
 GC; if a client (for some notion of "client") can grab continuation
 marks past an otherwise secure prompt, then the client can cause data
 to be retained that the host wants to be reclaimed.
 
 Matthew
 
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9306: continuation marks and prompts
Date: Sat, 19 Apr 2008 16:57:02 -0400

 Matthew Flatt wrote:
 > At Sat, 19 Apr 2008 15:17:58 -0400, Ryan Culpepper wrote:
 >> But it seems problematic for the following purpose (related to my PR 
 >> 9306): I want my host program (say, SchemeUnit) to run an arbitrary 
 >> expression (call it the "guest" code). If the expression raises an 
 >> exception, I want to extract information from the continuation marks 
 >> corresponding to the entire execution of the given expression but not 
 >> any of the execution of the host program.
 >>
 >> I had thought I could do this by creating a fresh tag and installing a 
 >> prompt at the boundary between host and guest. But exceptions are 
 >> generally created with continuation marks delimited by the default tag, 
 >> IIRC, and so the guest expression could hide some of its information by 
 >> installing default-tagged prompts.
 > 
 > A guest expression can also hide information by `(raise 7)', or by
 > manufacturing an exception structure directly and using a
 > continuation-mark set that is unrelated to the context of the `raise'.
 > 
 > Maybe there are some additional constraints/assumptions where you know
 > more about the call to `raise'?
 
 I expect that by far most things raised are "properly" constructed 
 exceptions. Other kinds of arguments to 'raise' are rare. On the other 
 hand, prompts are rare, too, so maybe I shouldn't worry.
 
 >> For my purposes, it would be better if 'continuation-marks' was not 
 >> constrained by tags. But I haven't thought as much about other parts of 
 >> the system. Would that cause other problems?
 > 
 > Yes, I think it could. One example that comes to mind has to do with
 > GC; if a client (for some notion of "client") can grab continuation
 > marks past an otherwise secure prompt, then the client can cause data
 > to be retained that the host wants to be reclaimed.
 
 Overall, it sounds like I should just use the default prompt tag to 
 protect the host code, and if the other code hides some of its context 
 then that's its problem. That works well enough for showing backtraces, 
 anyway.
 
 Thanks for the explanations.
 
 Ryan

Class changed from "sw-bug" to "not-a-bug" by mflatt at Thu, 15 May 2008 13:09:11 -0400
Reason>>> by design, though it doesn't support the desired use

State changed from "open" to "closed" by mflatt at Thu, 15 May 2008 13:09:11 -0400
Reason>>> clean up

