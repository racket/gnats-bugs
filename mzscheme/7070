From eli@barzilay.org Mon Oct 11 02:24:37 2004
Received: from localhost (h00501806c52f.ne.client2.attbi.com [65.96.164.212])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id i9B6ObnA025785
	for <bugs>; Mon, 11 Oct 2004 02:24:37 -0400
Message-Id: <200410110624.i9B6ObnA025785@champlain.ccs.neu.edu>
Date: Mon, 11 Oct 2004 02:24:37 -0400
From: Eli Barzilay <eli@barzilay.org>
To: bugs@plt-scheme.org
Subject: regexp-match with string regexp and an input port

>Number:         7070
>Category:       mzscheme
>Synopsis:       regexp-match with string regexp and an input port
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Oct 11 02:25:00 -0400 2004
>Closed-Date:    Mon Jan 17 16:11:57 -0500 2011
>Last-Modified:  Mon Jan 17 16:11:57 -0500 2011
>Originator:     Eli Barzilay
>Organization:
titan
>Submitter-Id:   unknown
>Release:        299.17
>Environment:
unix "Linux skyblue.barzilay.org 2.6.8-1.521smp #1 SMP Mon Aug 16 09:25:06 EDT 2004 i686 i686 i386 GNU/Linux" (i386-linux) (get-display-depth) = 24
Docs Installed:
(#<path:/home/eli/src/plt/collects/doc/tools> #<path:/home/eli/src/plt/collects/doc/mzscheme> #<path:/home/eli/src/plt/collects/doc/mzlib> #<path:/home/eli/src/plt/collects/doc/mred> #<path:/home/eli/src/plt/collects/doc/insidemz> #<path:/home/eli/src/plt/collects/doc/framework> #<path:/home/eli/src/plt/collects/doc/help>)
Collections: 
((#<path:/home/eli/.plt-scheme/299.17/collects> "non-existent path") (#<path:/home/eli/src/plt/collects> (#<path:CVS> #<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:cvs-time-stamp> #<path:defaults> #<path:ffi> #<path:drscheme> #<path:dynext> #<path:eopl> #<path:errortrace> #<path:finish-install> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:guibuilder> #<path:handin-server> #<path:help> #<path:hierlist> #<path:htdp> #<path:html> #<path:lang> #<path:launcher> #<path:make> #<path:mrdemo> #<path:mred> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:doc> #<path:mzscheme> #<path:net> #<path:openssl> #<path:parser-tools> #<path:profj> #<path:reduction-semantics> #<path:sgl> #<path:sirmail> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:srpersist> #<path:stepper> #<path:string-constants> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tests> #<path:tex2page> #<path:texpict> #<path:version> #<path:waterworld> #<path:web-server> #<path:xelda> #<path:xml> #<path:handin-client> #<path:icons> #<path:preprocessor> #<path:setup> #<path:swindle> #<path:info-domain> #<path:ssax> #<path:embedded-gui> #<path:mzlib> #<path:readline> #<path:trace>)))
 
Human Language: english
 
>Description:
Using regexp-match with a string regexp still returns bytes.  I think that the least
surprising way to deal with it is either convert the resulting bytes to a string in
that case, or raise an excepion.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7070: regexp-match with string regexp and an input port
Date: Mon, 11 Oct 2004 08:42:23 -0600

 At Mon, 11 Oct 2004 02:25:01 -0400, Eli Barzilay wrote:
 > Using regexp-match with a string regexp still returns bytes. I think
 > that the least surprising way to deal with it is either convert the
 > resulting bytes to a string in that case, or raise an excepion.
 
 Converting to a string sounds reasonable to me. (It wasn't possible
 originally, but I later changed the meaning of regexp matches so that
 a match is always a valid UTF-8 encoding).
 
 I'll take a more general poll before proceeding, though.
 
 Matthew
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7070: regexp-match with string regexp and an input port
Date: Mon, 11 Oct 2004 08:57:17 -0600

 At Mon, 11 Oct 2004 02:25:01 -0400, Eli Barzilay wrote:
 > Using regexp-match with a string regexp still returns bytes. I think
 > that the least surprising way to deal with it is either convert the
 > resulting bytes to a string in that case, or raise an excepion.
 
 I remember now why `regexp-match' returns bytes in this case; it's for
 consistency with `regexp-match-positions'.
 
 The problem with reporting position results in terms of characters is
 that the prefix for a match is not necessariy well-formed UTF-8:
 
  > (regexp-match #rx"." #"\347\347\210\270")
  (#"\347\210\270")
  > (regexp-match-positions #rx"." #"\347\347\210\270")
  ((1 . 4))
 
 I like the idea of changing `regexp-match', but I'm not sure it's a
 good idea to have `regexp-match' return strings when
 `regexp-match-positions' has to return byte counts.
 
 I definitely don't want to make it an error, because I think it's
 useful to regexp-match strings (or at least UTF-8 encoding sequences)
 within an input port.
 
 Any further thoughts?
 
 Matthew
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/7070: regexp-match with string regexp and an input port
Date: Mon, 11 Oct 2004 16:54:24 -0400

 On Oct 11, Matthew Flatt wrote:
 > At Mon, 11 Oct 2004 02:25:01 -0400, Eli Barzilay wrote:
 > > Using regexp-match with a string regexp still returns bytes. I
 > > think that the least surprising way to deal with it is either
 > > convert the resulting bytes to a string in that case, or raise an
 > > excepion.
 > 
 > I remember now why `regexp-match' returns bytes in this case; it's
 > for consistency with `regexp-match-positions'.
 
 So how about making regexp-match with a string pattern return a string
 and regexp-match positions raise an exception unless given a bytes
 regexp?  This will make sure that programs that try to use the same
 pattern for both -match and -match-positions will fail.
 
 
 > I definitely don't want to make it an error, because I think it's
 > useful to regexp-match strings (or at least UTF-8 encoding
 > sequences) within an input port.
 
 So I think that the above scheme makes sense -- the -positions
 function returns stuff to use as indexes into a string which work
 fine, but when you use it to return indexes in a port then you view
 the port as a byte-string.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: bugs@plt-scheme.org
Subject: Re: all/7070: regexp-match with string regexp and an input port
Date: Tue, 12 Oct 2004 13:42:40 -0600

 At Mon, 11 Oct 2004 16:54:24 -0400, Eli Barzilay wrote:
 > So how about making regexp-match with a string pattern return a string
 > and regexp-match positions raise an exception unless given a bytes
 > regexp?  This will make sure that programs that try to use the same
 > pattern for both -match and -match-positions will fail.
 
 But I think that it's useful to apply a string regexp to a port and get
 back byte positions. (It's not trivial to generate a byte regexp that's
 equivalent to the string regexp.)
 
 Matthew
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/7070: regexp-match with string regexp and an input port
Date: Tue, 12 Oct 2004 15:50:18 -0400

 On Oct 12, Matthew Flatt wrote:
 > At Mon, 11 Oct 2004 16:54:24 -0400, Eli Barzilay wrote:
 > > So how about making regexp-match with a string pattern return a
 > > string and regexp-match positions raise an exception unless given
 > > a bytes regexp?  This will make sure that programs that try to use
 > > the same pattern for both -match and -match-positions will fail.
 > 
 > But I think that it's useful to apply a string regexp to a port and
 > get back byte positions. (It's not trivial to generate a byte regexp
 > that's equivalent to the string regexp.)
 
 This sounds to me like the rare case where you would know that you're
 playing with things from two types.  I think that a much more common
 case would be for people to complain that regexp-match-positions with
 an input stream is inconsistent...  (I'd be surprised by such a
 behavior, except that using -match-positions is something I use rarely
 as a cheaper -match to just check if there's a match, and the cases
 where I did use it for its result were never with ports.)
 
 But then again, maybe the whole thing is delicate enough that you
 wouldn't expect people to use it without reading the docs, so some
 clear documentation would be fine?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
Responsible changed from "nobody" to "mflatt" by mflatt at Fri, 21 Jan 2005 18:15:31 -0500
Reason>>> mz


State changed from "open" to "closed" by mflatt at Mon, 17 Jan 2011 16:11:57 -0500
Reason>>> another good point on something that's unlikely to change

