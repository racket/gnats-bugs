From apache@plt-scheme.org Sun Apr  9 07:58:29 2006
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id k39BwRZ4017237
	for <bugs@plt-scheme.org>; Sun, 9 Apr 2006 07:58:27 -0400
Message-Id: <200604091158.k39BwRKZ017235@champlain.ccs.neu.edu>
Date: Sun, 9 Apr 2006 07:58:27 -0400
From: la@iki.fi
To: bugs@plt-scheme.org
Subject: srfi-60: monoidal bit operators don't allow zero arguments

>Number:         8003
>Category:       mzscheme
>Synopsis:       srfi-60: monoidal bit operators don't allow zero arguments
>Class:          change-request
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sun Apr 09 08:00:00 -0400 2006
>Last-Modified:  Thu Apr 27 16:53:21 -0400 2006
>Originator:     Lauri Alanko
>Organization:
plt
>Submitter-Id:   unknown
>Release:        301.9
>Environment:
linux-other
>Description:
Instead of returing 0 and -1, bitwise-ior and bitwise-and raise an error when called with zero arguments. This is inconsistent, since other monoidal operators return the identity element: +, *, append, string-append, and, or, etc.

Since the built-in operators are used directly in the implementation of SRFI-60, this makes the implementation non-conformant: SRFI-60 specifies that zero arguments are allowed, and 0 and -1 are used as seeds for fold in the reference implementation.
>How-To-Repeat:
> (bitwise-ior)
bitwise-ior: expects at least 1 argument, given 0
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: noelwelsh@yahoo.com, la@iki.fi, bugs@plt-scheme.org
Cc: 
Subject: Re: all/8003: srfi-60: monoidal bit operators don't allow zero arguments
Date: Sun, 9 Apr 2006 21:20:29 -0400

 Noel, is there anyone who is dealing with the SRFIs?  Alternatively,
 Lauri -- perhaps this one is easy to send a patch for?
 
 On Apr  9, la@iki.fi wrote:
 > Reported by Lauri Alanko for release: 301.9
 > 
 > *** Description:
 > Instead of returing 0 and -1, bitwise-ior and bitwise-and raise an
 > error when called with zero arguments. This is inconsistent, since
 > other monoidal operators return the identity element: +, *, append,
 > string-append, and, or, etc.
 > 
 > Since the built-in operators are used directly in the implementation
 > of SRFI-60, this makes the implementation non-conformant: SRFI-60
 > specifies that zero arguments are allowed, and 0 and -1 are used as
 > seeds for fold in the reference implementation.
 > 
 > *** How to repeat:
 > > (bitwise-ior)
 > bitwise-ior: expects at least 1 argument, given 0
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Lauri Alanko <la@iki.fi>
To: Eli Barzilay <eli@barzilay.org>
Cc: noelwelsh@yahoo.com, bugs@plt-scheme.org
Subject: Re: all/8003: srfi-60: monoidal bit operators don't allow zero arguments
Date: Mon, 10 Apr 2006 04:57:44 +0300

 On Sun, Apr 09, 2006 at 09:20:29PM -0400, Eli Barzilay wrote:
 > Noel, is there anyone who is dealing with the SRFIs?  Alternatively,
 > Lauri -- perhaps this one is easy to send a patch for?
 
 Fixing the SRFI alone is trivial, but then the bitwise-and in srfi-60
 would be different from the primitive bitwise-and, which is probably not
 a good idea. The primitive has some special treatment for inlining and
 JITting, so fixing it might require non-trivial modifications. Or then
 not, but I'm not really sure.
 
 
 Lauri
From: Eli Barzilay <eli@barzilay.org>
To: Lauri Alanko <la@iki.fi>
Cc: noelwelsh@yahoo.com, bugs@plt-scheme.org
Subject: Re: all/8003: srfi-60: monoidal bit operators don't allow zero arguments
Date: Sun, 9 Apr 2006 22:14:22 -0400

 On Apr 10, Lauri Alanko wrote:
 > On Sun, Apr 09, 2006 at 09:20:29PM -0400, Eli Barzilay wrote:
 > > Noel, is there anyone who is dealing with the SRFIs?
 > > Alternatively, Lauri -- perhaps this one is easy to send a patch
 > > for?
 > 
 > Fixing the SRFI alone is trivial, but then the bitwise-and in
 > srfi-60 would be different from the primitive bitwise-and, which is
 > probably not a good idea. The primitive has some special treatment
 > for inlining and JITting, so fixing it might require non-trivial
 > modifications. Or then not, but I'm not really sure.
 
 OK, so it looks like you chose a bad synopsis line...  IIUC, the
 problem is not in SRFi-60, but in the primitive implementation of the
 bitwise operations, right?  If so, then I'll move it to a change
 request and make it go to Matthew.
 
 (I didn't even see a requirement for zero or more arguments in the
 srfi text, but I didn't spend much time on it.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Lauri Alanko <la@iki.fi>
To: Eli Barzilay <eli@barzilay.org>
Cc: noelwelsh@yahoo.com, bugs@plt-scheme.org
Subject: Re: all/8003: srfi-60: monoidal bit operators don't allow zero arguments
Date: Mon, 10 Apr 2006 05:31:27 +0300

 On Sun, Apr 09, 2006 at 10:14:22PM -0400, Eli Barzilay wrote:
 > OK, so it looks like you chose a bad synopsis line...  IIUC, the
 > problem is not in SRFi-60, but in the primitive implementation of the
 > bitwise operations, right?  If so, then I'll move it to a change
 > request and make it go to Matthew.
 
 I initially meant to submit it as a change request, but then I noticed
 that it also violated the SRFI, which turned it into a real bug.
 
 > (I didn't even see a requirement for zero or more arguments in the
 > srfi text, but I didn't spend much time on it.)
 
 The synopses are:
 
 Function: bitwise-and n1 ... 
 Function: bitwise-ior n1 ... 
 
 and I think it's reasonable to assume that this is using the notation
 specified in R5RS, 1.3.3: "The notation <thing1> ... indicates zero or
 more occurrences of a <thing>".
 
 (And actually the same goes for bitwise-xor. Indeed, (xor, 0) is also a
 monoid. Obvious in hindsight, of course...)
 
 
 Lauri

Class changed from "sw-bug" to "change-request" by eli at Sun, 09 Apr 2006 22:55:41 -0400
Reason>>> This is a change request, only loosely related to srfi 60.
(also see trail)
The request is for the bitwise operators to accept zero
arguments: and=>-1, ior=>0, xor=>0.

From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Lauri Alanko <la@iki.fi>, bugs@plt-scheme.org
Subject: Re: all/8003: srfi-60: monoidal bit operators don't allow zero arguments
Date: Sun, 9 Apr 2006 23:07:39 -0400

 Matthew -- this turns out to be a change request -- to make the
 bitwise operators accept zero arguments.  I've change the PR
 accordingly.
 
 
 On Apr 10, Lauri Alanko wrote:
 > On Sun, Apr 09, 2006 at 10:14:22PM -0400, Eli Barzilay wrote:
 > > OK, so it looks like you chose a bad synopsis line...  IIUC, the
 > > problem is not in SRFi-60, but in the primitive implementation of the
 > > bitwise operations, right?  If so, then I'll move it to a change
 > > request and make it go to Matthew.
 > 
 > I initially meant to submit it as a change request, but then I noticed
 > that it also violated the SRFI, which turned it into a real bug.
 > 
 > > (I didn't even see a requirement for zero or more arguments in the
 > > srfi text, but I didn't spend much time on it.)
 > 
 > The synopses are:
 > 
 > Function: bitwise-and n1 ... 
 > Function: bitwise-ior n1 ... 
 > 
 > and I think it's reasonable to assume that this is using the notation
 > specified in R5RS, 1.3.3: "The notation <thing1> ... indicates zero or
 > more occurrences of a <thing>".
 > 
 > (And actually the same goes for bitwise-xor. Indeed, (xor, 0) is also a
 > monoid. Obvious in hindsight, of course...)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthew Flatt <mflatt@cs.utah.edu>
To: la@iki.fi, bugs@plt-scheme.org
Cc: 
Subject: Re: all/8003: srfi-60: monoidal bit operators don't allow zero arguments
Date: Tue, 11 Apr 2006 05:28:19 -0600

 At Sun, 9 Apr 2006 08:00:03 -0400, la@iki.fi wrote:
 > Instead of returing 0 and -1, bitwise-ior and bitwise-and raise an error when 
 > called with zero arguments. This is inconsistent, since other monoidal 
 > operators return the identity element: +, *, append, string-append, and, or, 
 > etc.
 
 I've changed them for v301.13, which will become available this weekend
 at the latest.
 
 Matthew
 
From: Noel Welsh <noelwelsh@yahoo.com>
To: Eli Barzilay <eli@barzilay.org>, la@iki.fi, bugs@plt-scheme.org
Cc: 
Subject: Re: all/8003: srfi-60: monoidal bit operators don't allow zero arguments
Date: Tue, 11 Apr 2006 05:27:02 -0700 (PDT)

 --- Eli Barzilay <eli@barzilay.org> wrote:
 
 > Noel, is there anyone who is dealing with the SRFIs? 
 > Alternatively,
 > Lauri -- perhaps this one is easy to send a patch for?
 
 I don't know anyone who would claim responsibility for all
 of them.  It is generally a free-for-all.
 
 N.
 
 Email: noelwelsh <at> yahoo <dot> com   noel <at> untyped <dot> com
 AIM: noelhwelsh
 Blogs: http://monospaced.blogspot.com/  http://www.untyped.com/untyping/
 
 __________________________________________________
 Do You Yahoo!?
 Tired of spam?  Yahoo! Mail has the best spam protection around 
 http://mail.yahoo.com 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: Noel Welsh <noelwelsh@yahoo.com>, bugs@plt-scheme.org
Cc: 
Subject: Re: all/8003: srfi-60: monoidal bit operators don't allow zero arguments
Date: Tue, 11 Apr 2006 06:32:15 -0600

 At Tue, 11 Apr 2006 08:30:01 -0400, Noel Welsh wrote:
 >  --- Eli Barzilay <eli@barzilay.org> wrote:
 >  
 >  > Noel, is there anyone who is dealing with the SRFIs? 
 >  > Alternatively,
 >  > Lauri -- perhaps this one is easy to send a patch for?
 >  
 >  I don't know anyone who would claim responsibility for all
 >  of them.  It is generally a free-for-all.
 
 In this case, though, I think changing MzScheme's `bitwise-' operators
 is the right thing.
 
 Matthew
 

State changed from "open" to "closed" by mflatt at Thu, 27 Apr 2006 16:53:21 -0400
Reason>>> changed in v301.13

