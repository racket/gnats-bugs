From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Oct 17 21:44:37 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.234])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m9I1iYUD015715
	for <bugs@bugs.plt-scheme.org>; Fri, 17 Oct 2008 21:44:34 -0400
Message-Id: <200810180144.m9I1iWKG015709@champlain.ccs.neu.edu>
Date: Fri, 17 Oct 2008 21:44:32 -0400
From: robby@cs.uchicago.edu
To: bugs@plt-scheme.org
Subject: shared & mutable structs

>Number:         9843
>Category:       mzscheme
>Synopsis:       shared & mutable structs
>Class:          change-request
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Fri Oct 17 21:48:01 -0400 2008
>Last-Modified:  Fri Feb 03 15:36:47 -0500 2012
>Originator:     Robby Findler
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.1.1.3-svn15oct2008
>Environment:
windows "Windows NT 6.0 (Build 6001) Service Pack 1" (win32\i386\3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 140016152

Collections:
(("C:\\Users\\robby\\AppData\\Roaming\\PLT Scheme\\4.1.1.3\\collects" non-existent-path) ("C:\\cygwin\\home\\robby\\svn\\exp\\plt\\collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed-scheme" "version" "water!
 world" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n"))
>Description:
Does it make sense to add additional error checking to shared so that it detects when it would be putting a #<undefined> in the middle or something it is constructing and signal an error? 

If not, maybe there is something better than can be done for this case?

#lang scheme
(define-struct s (a [b #:mutable]) #:inspector #f)
(shared ((x (make-s 1 y))
        (y (make-s 2 x)))
  x)

=>

#(struct:s 1 #<undefined>)
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: robby@cs.uchicago.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9843: shared & mutable structs
Date: Fri, 17 Oct 2008 22:33:12 -0400

 The checking is wrong. Eli, I suspect that this is another instance  
 of "lazy strict".
 
 
 On Oct 17, 2008, at 9:48 PM, robby@cs.uchicago.edu wrote:
 
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=9843
 >
 > Reported by Robby Findler for release: 4.1.1.3-svn15oct2008
 >
 > *** Description:
 > Does it make sense to add additional error checking to shared so  
 > that it detects when it would be putting a #<undefined> in the  
 > middle or something it is constructing and signal an error?
 >
 > If not, maybe there is something better than can be done for this  
 > case?
 >
 > #lang scheme
 > (define-struct s (a [b #:mutable]) #:inspector #f)
 > (shared ((x (make-s 1 y))
 >         (y (make-s 2 x)))
 >   x)
 >
 > =>
 >
 > #(struct:s 1 #<undefined>)
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > windows "Windows NT 6.0 (Build 6001) Service Pack 1" (win32\i386 
 > \3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 140016152
 >
 > Collections:
 > (("C:\\Users\\robby\\AppData\\Roaming\\PLT Scheme\\4.1.1.3\ 
 > \collects" non-existent-path) ("C:\\cygwin\\home\\robby\\svn\\exp\ 
 > \plt\\collects" ".svn" "afm" "algol60" "browser" "combinator- 
 > parser" "compiler" "config" "defaults" "drscheme" "dynext"  
 > "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework"  
 > "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin- 
 > client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp"  
 > "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro- 
 > debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib"  
 > "mzscheme" "net" "openssl" "parser-tools" "planet" "plot"  
 > "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline"  
 > "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble"  
 > "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi"  
 > "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax- 
 > color" "teachpack" "test-box-recovery" "test-engine" "tests"  
 > "tex2page" "texpict" "trace" "typed-scheme" "version" "water!
 >  world" "web-server" "wxme" "xml"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t  
 > debug) (default) #() "#lang scheme\n"))
 >
 
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: bugs@plt-scheme.org, nobody@plt-scheme.org, eli@plt-scheme.org,
        matthias@plt-scheme.org, sk@plt-scheme.org, mflatt@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9843: shared & mutable structs
Date: Fri, 17 Oct 2008 22:05:42 -0500

 What do you mean by the first sentence?
 
 Robby
 
 On Fri, Oct 17, 2008 at 9:33 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > The checking is wrong. Eli, I suspect that this is another instance of "lazy
 > strict".
 >
 >
 > On Oct 17, 2008, at 9:48 PM, robby@cs.uchicago.edu wrote:
 >
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9843
 >>
 >> Reported by Robby Findler for release: 4.1.1.3-svn15oct2008
 >>
 >> *** Description:
 >> Does it make sense to add additional error checking to shared so that it
 >> detects when it would be putting a #<undefined> in the middle or something
 >> it is constructing and signal an error?
 >>
 >> If not, maybe there is something better than can be done for this case?
 >>
 >> #lang scheme
 >> (define-struct s (a [b #:mutable]) #:inspector #f)
 >> (shared ((x (make-s 1 y))
 >>        (y (make-s 2 x)))
 >>  x)
 >>
 >> =>
 >>
 >> #(struct:s 1 #<undefined>)
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> windows "Windows NT 6.0 (Build 6001) Service Pack 1" (win32\i386\3m)
 >> (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 140016152
 >>
 >> Collections:
 >> (("C:\\Users\\robby\\AppData\\Roaming\\PLT Scheme\\4.1.1.3\\collects"
 >> non-existent-path) ("C:\\cygwin\\home\\robby\\svn\\exp\\plt\\collects"
 >> ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config"
 >> "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi"
 >> "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder"
 >> "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp"
 >> "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger"
 >> "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"
 >> "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs"
 >> "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme"
 >> "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi"
 >> "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color"
 >> "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict"
 >> "trace" "typed-scheme" "version" "water!
 >>  world" "web-server" "wxme" "xml"))
 >> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug)
 >> (default) #() "#lang scheme\n"))
 >>
 >
 >
 >
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: robby@cs.uchicago.edu, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9843: shared & mutable structs
Date: Fri, 17 Oct 2008 23:48:05 -0400

 On Oct 17, Matthias Felleisen wrote:
 > 
 > The checking is wrong. Eli, I suspect that this is another instance
 > of "lazy strict".
 
 I don't know what the first sentence is, but re the second sentence --
 I actually looked into shared a short while ago and wanted to say
 something about it.
 
 It's probably unrelated -- but anyway...  With the lack of plain
 mutation `shared' should become an actual useful tool -- and the
 syntactic approach is not too practical IMO.  When someone complained
 at some point about cyclic lists, I immediately tried these things:
 
   (shared ([x (list* 1 2 3 x)]) x)
   (shared ([x (append (list 1 2 3) x)]) x)
 
 and they both failed in the same way.  Fixing these two is probably a
 good stopgap for now (considering that they're needed for cyclic
 lists), but I'd like a more robust approach.
 
 I think that something similar to this is better (`letsubst' is the
 swindle thing that is used just to make it shorter):
 
   (define-syntax-rule (shared ([id val] ...) body ...)
     (let ([id (make-placeholder #f)] ...)
       (placeholder-set! id (letsubst ([id (placeholder-get id)] ...) val)) ...
       (let-values ([(id ...)
                     (apply values
                            (make-reader-graph (list id ...)))])
         body ...)))
 
 and even better is something that will use promises and simply force
 them (eg, using the `!!' from lazy/promise).  And that leads to
 another problem -- `make-reader-graph' should be improved by making it
 possible to specify the "unbox" operation that it uses (so by using
 `placeholder-get' as that argument you get the current behavior, but
 you can also use boxes or promises with `unbox' or `force' resp.).
 
 But the really big problem that is, uh, shared between all of these,
 things is finding some way to make it work with structs.  I'm not sure
 that there is some solution, but having one is IMO very important.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: robby@cs.uchicago.edu, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9843: shared & mutable structs
Date: Sat, 18 Oct 2008 10:26:50 -0400

 On Oct 17, 2008, at 11:48 PM, Eli Barzilay wrote:
 
 >   (shared ([x (list* 1 2 3 x)]) x)
 >   (shared ([x (append (list 1 2 3) x)]) x)
 >
 > and they both failed in the same way.
 
 They are supposed to!! And they should stay that way. Both append and  
 list* are computations, not value builders. Until we have a type  
 system that distinguishes terminating computations from arbitrary  
 ones, we're stuck. Uh, oh, I forgot, we don't have a type system.
 
 Eli, a bit less random hacking. 
From: Eli Barzilay <eli@barzilay.org>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: robby@cs.uchicago.edu, bugs@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9843: shared & mutable structs
Date: Tue, 21 Oct 2008 11:26:21 -0400

 On Oct 18, Matthias Felleisen wrote:
 > 
 > On Oct 17, 2008, at 11:48 PM, Eli Barzilay wrote:
 > 
 > >   (shared ([x (list* 1 2 3 x)]) x)
 > >   (shared ([x (append (list 1 2 3) x)]) x)
 > >
 > > and they both failed in the same way.
 > 
 > They are supposed to!!
 
 (Of course...  Not...)
 
 
 > And they should stay that way. Both append and list* are
 > computations, not value builders.
 
 `list*' should belong to a small subset of values that are known to be
 constructors -- for example, in lazy scheme it's not introducing a
 strictness point.  `append' is doing the kind of computation that
 doesn't touch the contents of the list so it works too.
 
 
 > Until we have a type system that distinguishes terminating
 > computations from arbitrary ones, we're stuck. Uh, oh, I forgot, we
 > don't have a type system.
 > 
 > Eli, a bit less random hacking. 
 
 Not random at all.  It's directly related to `make-reader-graph' which
 is a relatively painful issue for the lazy language which I ran into
 recently.
 
 As for the `shared' problem -- try the original motivation as a
 challenge:
 
   Write a function that takes in a list and returns a cyclic list of
   the same values.
 
 My guess is that you won't be able to do it without looking at the
 docs, and that with looking at the docs it will take a while, and even
 then it will not feel right.  (For example, `make-reader-graph'
 doesn't sound like it should be used for such purposes, so you'd
 usually never think about looking for it.)
 
 This makes the immutable pair thing look worse than it is, given that
 cyclic lists are a big part of the reason people want mutable pairs.
 When people ask that question, I want to say "here's how to make it
 work" with a one-liner -- and `shared' should have been (AFAICT) that
 one-liner.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

