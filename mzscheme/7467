From apache@plt-scheme.org Sat Jun 25 08:03:02 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j5PC2wv2024509
	for <bugs@plt-scheme.org>; Sat, 25 Jun 2005 08:02:58 -0400
Message-Id: <200506251202.j5PC2t03024507@champlain.ccs.neu.edu>
Date: Sat, 25 Jun 2005 08:02:55 -0400
From: jensaxel@soegaard.net
To: bugs@plt-scheme.org
Subject: Trashing when (make-inspector) is used

>Number:         7467
>Category:       mzscheme
>Synopsis:       Trashing when (make-inspector) is used
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Jun 25 08:05:01 -0400 2005
>Last-Modified:  Thu Jul 21 16:43:37 -0400 2005
>Originator:     Jens Axel SÃ¸gaard
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.100
>Environment:
windows "Windows NT 5.1 (Build 2600) Service Pack 2" (win32\i386) (get-display-depth) = 32
Docs Installed:
(#<path:C:\Programmer\PLT299-100\collects\doc\web-server> #<path:C:\Programmer\PLT299-100\collects\doc\tour> #<path:C:\Programmer\PLT299-100\collects\doc\tools> #<path:C:\Programmer\PLT299-100\collects\doc\tex2page> #<path:C:\Programmer\PLT299-100\collects\doc\teachpack> #<path:C:\Programmer\PLT299-100\collects\doc\t-y-scheme> #<path:C:\Programmer\PLT299-100\collects\doc\swindle> #<path:C:\Programmer\PLT299-100\collects\doc\srfi> #<path:C:\Programmer\PLT299-100\collects\doc\r5rs> #<path:C:\Programmer\PLT299-100\collects\doc\profj-intermediate> #<path:C:\Programmer\PLT299-100\collects\doc\profj-beginner> #<path:C:\Programmer\PLT299-100\collects\doc\profj-advanced> #<path:C:\Programmer\PLT299-100\collects\doc\plot> #<path:C:\Programmer\PLT299-100\collects\doc\mzscheme> #<path:C:\Programmer\PLT299-100\collects\doc\mzlib> #<path:C:\Programmer\PLT299-100\collects\doc\mzc> #<path:C:\Programmer\PLT299-100\collects\doc\mred> #<path:C:\Programmer\PLT299-100\collects\doc\misclib> #<path:C:\Programmer\PLT299-100\collects\doc\intermediate-lambda> #<path:C:\Programmer\PLT299-100\collects\doc\intermediate> #<path:C:\Programmer\PLT299-100\collects\doc\insidemz> #<path:C:\Programmer\PLT299-100\collects\doc\help> #<path:C:\Programmer\PLT299-100\collects\doc\framework> #<path:C:\Programmer\PLT299-100\collects\doc\foreign> #<path:C:\Programmer\PLT299-100\collects\doc\drscheme> #<path:C:\Programmer\PLT299-100\collects\doc\beginning-abbr> #<path:C:\Programmer\PLT299-100\collects\doc\beginning> #<path:C:\Programmer\PLT299-100\collects\doc\advanced>)
Collections:
((#<path:C:\Documents and Settings\js\Application Data\PLT Scheme\299.100\collects> (#<path:bdk> #<path:info-domain>)) (#<path:C:\Programmer\PLT299-100\collects> (#<path:afm> #<path:algol60> #<path:browser> #<path:compiler> #<path:defaults> #<path:doc> #<path:drscheme> #<path:dynext> #<path:embedded-gui> #<path:eopl> #<path:errortrace> #<path:ffi> #<path:framework> #<path:frtime> #<path:games> #<path:graphics> #<path:help> #<path:hierlist> #<path:htdch> #<path:htdp> #<path:html> #<path:icons> #<path:info-domain> #<path:lang> #<path:launcher> #<path:make> #<path:mred> #<path:mrlib> #<path:mysterx> #<path:mzcom> #<path:mzlib> #<path:mzscheme> #<path:net> #<path:openssl> #<path:parser-tools> #<path:planet> #<path:plot> #<path:preprocessor> #<path:profj> #<path:profjWizard> #<path:setup> #<path:sgl> #<path:slatex> #<path:slibinit> #<path:slideshow> #<path:srfi> #<path:ssax> #<path:stepper> #<path:string-constants> #<path:swindle> #<path:syntax> #<path:syntax-color> #<path:test-suite> #<path:tex2page> #<path:texpict> #<path:trace> #<path:version> #<path:web-server> #<path:xml>)))
Human Language: english
Teachpack filenames: ()
Computer Language: (("Professional Languages" "PLT" "Pretty Big (includes MrEd and Advanced)") #6(#t write mixed-fraction-e #f #t debug))
>Description:
The attached programs runs smoothly and fast.
However, when replacing

  (define-struct node (data edges tag))

with

  (define-struct node (data edges tag) (make-inspector))

my computer starts trashing and DrScheme becomes unresponsive.
Since the construction of the inspector only happens once (?)
I can't understand the difference in behaviour.
>How-To-Repeat:
(require (lib "list.ss" "srfi" "1"))

(define-struct node (data edges tag))
;(define-struct node (data edges tag) (make-inspector))
(define (construct-node data)
  (make-node data empty 'none))

(define (set-second! l x)
  (let ((s (cdr l)))
    (set-car! s x)))

;; connect `from' to `to' with the given `capacity' (creates a zero edge back
;; if none was added so far)
(define (connect-node from to capacity)
  (when (eq? from to)
    (error 'connect-node "cannot connect node ~s to itself" to))
  (let ((link (assoc to (node-edges from))))
    (when link
      (if (zero? (second link))
          (set-second! link capacity)
          (error 'connect-node "target ~s is already connected from source ~s"
                 to from)))
    (set-node-edges! from (cons (list to capacity 0) (node-edges from)))
    (unless (assoc from (node-edges to))
      (set-node-edges! to (cons (list from 0 0) (node-edges to))))))

;; same, but can connect multiple nodes
(define (connect-nodes from to capacity . more)
  (connect-node from to capacity)
  (unless (null? more) (apply connect-nodes more)))

;; expects a source name, a target name, and a list of node-node-capacity
;; triplets (nodes are identified by `equal' names), returns source and target


(define G1 (let ((src (construct-node 's))
               (tgt (construct-node 't))
               (v1  (construct-node 1))
               (v2  (construct-node 2))
               (v3  (construct-node 3))
               (v4  (construct-node 4))
               (v5  (construct-node 5))
               (v6  (construct-node 6))
               (v7  (construct-node 7))
               (v8  (construct-node 8))
               (v9  (construct-node 9)))
           (connect-nodes src v1  5
                          src v2  5
                          src v3  5
                          v1  v2  2
                          v2  v3  2
                          v1  v4  3
                          v2  v5  5
                          v3  v6  3
                          v1  v5  2
                          v2  v6  2
                          v5  v4  1
                          v6  v5  1
                          v4  v7  5
                          v5  v8  3
                          v6  v9  3
                          v5  v7  2
                          v5  v9  2
                          v7  v8  2
                          v8  v9  2
                          v7  tgt 5
                          v8  tgt 4
                          v9  tgt 4
                          )
             src))

(print-graph #t)
(print-struct #t)
G1
>Fix:
>Audit-Trail:
State changed from "open" to "closed" by mflatt at Thu, 21 Jul 2005 16:43:37 -0400
Reason>>> This program uses `assoc', which implies `equal?'
on keys. The keys in this case are cyclic graphs,
so the `equal?' test goes into a non-tail loop
when the cycles are visible. Without `(make-inspector)',
the records are opaque, and the cycles are hidden.

Changing the `assoc's to `assq's should make the
program behave the same without or without an
inspector.

Matthew

