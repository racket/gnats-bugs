From steck@ccs.neu.edu  Wed Jun  5 13:08:11 2002
Received: from localhost (localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id NAA16423
	for <plt-gnats>; Wed, 5 Jun 2002 13:08:11 -0400
Message-Id: <200206051708.NAA16423@champlain.ccs.neu.edu>
Date: Wed, 5 Jun 2002 13:08:11 -0400
From: Paul Steckler <steck@ccs.neu.edu>
To: bugs@plt-scheme.org
Subject: Misleading explanation of namespaces

>Number:         5460
>Category:       mzscheme
>Synopsis:       Misleading explanation of namespaces
>Class:          doc-bug
>Responsible:    steck
>Severity:       non-critical
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed Jun 05 13:10:00 -0400 2002
>Closed-Date:    Wed Jun 05 14:16:53 -0400 2002
>Last-Modified:  Mon May 05 15:46:03 -0400 2008
>Originator:     Paul Steckler
>Organization:
titan
>Submitter-Id:   unknown
>Release:        200alpha20-cvs5jun2002
>Environment:
unix "SunOS sulafat.ccs.neu.edu 5.8 Generic_108528-13 sun4u sparc SUNW,Sun-Blade-100" (sparc-solaris) (get-display-depth) = 24
Docs Installed:
("help" "beginning" "beginning-abbr" "advanced" "icons" "intermediate" "drscheme" "teachpack" "r5rs" "mzscheme" "mzlib" "mred" "framework" "misclib" "mrspidey" "mzc" "insidemz" "tools" "t-y-scheme" "intermediate-lambda" "recipes" "tex2page")
Collections: 
(("/proj/scheme/plt/collects" ("CVS" "browser" "compiler" "debug" "defaults" "drjava" "drscheme" "dynext" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "readline" "setup" "slatex" "srpersist" "stepper" "string-constants" "syntax" "tests" "texpict" "parser-tools" "xml" "doc" "mrflow" "sirmail" "slibinit" "afm" "version" "typeset" "eopl" "web-server" "algol60" "cvs-time-stamp" "waterworld" "tex2page")))
Human Language: english
>Description:
The Mz manual says about namespaces:

 The current namespace is used by eval, load, compile, expand, 
 and expand-once. After an expression is evaled, the 
 global variable references in the expression are permanently 
 attached to a particular namespace, so the current namespace 
 at the time that the code is executed is not used as the 
 namespace for referencing global variables in the expression.

I think this sentence is misleading, because lexical as well 
as global variables that become bound, and 
those bindings are not affected by a new namespace.  The example
there could have just as well been:

 (let ([x 'lexical]) 
   (let ([n (make-namespace)]) ; make new namespace  
    (parameterize ([current-namespace n])  
      (eval '(define x 'new)) ; evals in the new namespace  
      (display x) ; displays 'lexical 
      (display (eval 'x))))) ; displays 'new

>How-To-Repeat:
RTFineM

>Fix:
>Release-Note:
>Audit-Trail:
From: Robert Bruce Findler <robby@ccs.neu.edu>
To: Paul Steckler <steck@ccs.neu.edu>
Cc: bugs@plt-scheme.org, mflatt@cs.utah.edu
Subject: Re: all/5460: Misleading explanation of namespaces
Date: Wed, 05 Jun 2002 10:14:08 -0700

 > I think [the mz manual] is misleading, because lexical as well 
 > as global variables that become bound, and 
 > those bindings are not affected by a new namespace.  The example
 > there could have just as well been:
 > 
 >  (let ([x 'lexical]) 
 >    (let ([n (make-namespace)]) ; make new namespace  
 >     (parameterize ([current-namespace n])  
 >       (eval '(define x 'new)) ; evals in the new namespace  
 >       (display x) ; displays 'lexical 
 >       (display (eval 'x))))) ; displays 'new
 > 
 
 Sorry if I'm being desnse, but how is the lexical variable `x' being
 rebound in this example? As far as I can tell, it isn't.
 
 Roby

From: "Paul Steckler" <steck@ccs.neu.edu>
To: "'Robert Bruce Findler'" <robby@ccs.neu.edu>
Cc: <bugs@plt-scheme.org>, <mflatt@cs.utah.edu>
Subject: RE: all/5460: Misleading explanation of namespaces
Date: Wed, 5 Jun 2002 13:21:33 -0400

 > >  (let ([x 'lexical])
 > >    (let ([n (make-namespace)]) ; make new namespace
 > >     (parameterize ([current-namespace n])
 > >       (eval '(define x 'new)) ; evals in the new namespace
 > >       (display x) ; displays 'lexical
 > >       (display (eval 'x))))) ; displays 'new
 > >
 > 
 > Sorry if I'm being desnse, but how is the lexical variable `x' being
 > rebound in this example? As far as I can tell, it isn't.
 
 It's not being rebound, which I think is the point.
 
 If you had a set! instead of the define, you'd get an error, because the
 set! would not refer to the lexical x.
 
 -- Paul
 
 

From: Robert Bruce Findler <robby@ccs.neu.edu>
To: steck@ccs.neu.edu
Cc: bugs@plt-scheme.org, mflatt@cs.utah.edu
Subject: RE: all/5460: Misleading explanation of namespaces
Date: Wed, 05 Jun 2002 11:09:12 -0700

 At Wed, 5 Jun 2002 13:21:33 -0400, "Paul Steckler" wrote:
 > It's not being rebound, which I think is the point.
 >
 > If you had a set! instead of the define, you'd get an error, because the
 > set! would not refer to the lexical x.
 
 That's what the docs seemed to be saying too, I thought.
 
 Paul wrote:
 > I think this sentence is misleading, because lexical as well as
 > global variables that become bound, and those bindings are not
 > affected by a new namespace. The example there could have just as
 > well been: [ ...]
 
 There seems to be a typo in the above first sentence, but I thought you
 were complianing that they lexical variables *were* being rebound.
 
 Robby
State-Changed-From-To: open->closed
State-Changed-By: steck
State-Changed-When: Wed Jun  5 14:16:53 2002
State-Changed-Why:
    Never mind ...
>Unformatted:
