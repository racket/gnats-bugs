From apache@plt-scheme.org Wed May 11 06:18:27 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j4BAIRQ0006315
	for <bugs@plt-scheme.org>; Wed, 11 May 2005 06:18:27 -0400
Message-Id: <200505111018.j4BAIR4G006313@champlain.ccs.neu.edu>
Date: Wed, 11 May 2005 06:18:27 -0400
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: Command line flags for a reader

>Number:         7374
>Category:       mzscheme
>Synopsis:       Command line flags for a reader
>Class:          change-request
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Wed May 11 06:20:01 -0400 2005
>Last-Modified:  Mon Mar 16 01:13:35 -0400 2009
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299.105
>Environment:
unix "Linux winooski.ccs.neu.edu 2.6.10-1.771_FC2 #1 Mon Mar 28 00:50:14 EST 2005 i686 i686 i386 GNU/Linux" (i386-linux) (get-display-depth) = 16
Docs Installed:
(#<path:/proj/scheme/www/plt/collects/doc/misclib> #<path:/proj/scheme/www/plt/collects/doc/foreign> #<path:/proj/scheme/www/plt/collects/doc/plot> #<path:/proj/scheme/www/plt/collects/doc/tools> #<path:/proj/scheme/www/plt/collects/doc/srfi> #<path:/proj/scheme/www/plt/collects/doc/profj-advanced> #<path:/proj/scheme/www/plt/collects/doc/drscheme> #<path:/proj/scheme/www/plt/collects/doc/profj-beginner> #<path:/proj/scheme/www/plt/collects/doc/mrlib> #<path:/proj/scheme/www/plt/collects/doc/tour> #<path:/proj/scheme/www/plt/collects/doc/t-y-scheme> #<path:/proj/scheme/www/plt/collects/doc/teachpack> #<path:/proj/scheme/www/plt/collects/doc/tex2page> #<path:/proj/scheme/www/plt/collects/doc/profj-intermediate> #<path:/proj/scheme/www/plt/collects/doc/mzscheme> #<path:/proj/scheme/www/plt/collects/doc/beginning> #<path:/proj/scheme/www/plt/collects/doc/swindle> #<path:/proj/scheme/www/plt/collects/doc/mzlib> #<path:/proj/scheme/www/plt/collects/doc/help> #<path:/proj/scheme/www/plt/collects/doc/insidemz> #<path:/proj/scheme/www/plt/collects/doc/web-server> #<path:/proj/scheme/www/plt/collects/doc/framework> #<path:/proj/scheme/www/plt/collects/doc/mred> #<path:/proj/scheme/www/plt/collects/doc/intermediate> #<path:/proj/scheme/www/plt/collects/doc/advanced> #<path:/proj/scheme/www/plt/collects/doc/mzc> #<path:/proj/scheme/www/plt/collects/doc/beginning-abbr> #<path:/proj/scheme/www/plt/collects/doc/intermediate-lambda> #<path:/proj/scheme/www/plt/collects/doc/r5rs>)
Collections:
((#<path:/home/eli/.plt-scheme/299.105/collects> "non-existent path") (#<path:/proj/scheme/www/plt/collects> (#<path:browser> #<path:handin-server> #<path:errortrace> #<path:htdp> #<path:htdch> #<path:version> #<path:slideshow> #<path:setup> #<path:ffi> #<path:defaults> #<path:make> #<path:mrdemo> #<path:slatex> #<path:openssl> #<path:finish-install> #<path:embedded-gui> #<path:xelda> #<path:doc> #<path:mysterx> #<path:tests> #<path:mred> #<path:syntax-color> #<path:dynext> #<path:net> #<path:framework> #<path:games> #<path:ssax> #<path:web-server> #<path:profjWizard> #<path:help> #<path:srpersist> #<path:mzlib> #<path:swindle> #<path:mzcom> #<path:graphics> #<path:compiler> #<path:sirmail> #<path:mzscheme> #<path:eopl> #<path:xml> #<path:lang> #<path:honu-module> #<path:string-constants> #<path:handin-client> #<path:frtime> #<path:tex2page> #<path:slibinit> #<path:mrflow> #<path:CVS> #<path:hierlist> #<path:trace> #<path:syntax> #<path:html> #<path:mrlib> #<path:icons> #<path:profj> #<path:reduction-semantics> #<path:afm> #<path:launcher> #<path:readline> #<path:skipper> #<path:test-suite> #<path:drscheme> #<path:algol60> #<path:info-domain> #<path:parser-tools> #<path:srfi> #<path:sgl> #<path:planet> #<path:plot> #<path:profjBoxes> #<path:waterworld> #<path:cvs-time-stamp> #<path:preprocessor> #<path:texpict> #<path:stepper> #<path:guibuilder>)))
Human Language: english
>Description:
It would be nice to have a command-line flag that will
start mzscheme with a reader taken from a specified
module that provides the usual stuff #reader.  This
will be helpful for applications that extend Scheme.

It would also be nice to have a stronger version of
the -M flag that will start mzscheme, require
foo/foo.ss and use foo/reader.ss for the reader.

Same for the `scheme-<foo>' executable name, but I
don't think that that hack is useful...
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: eli@barzilay.org, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7374: Command line flags for a reader
Date: Thu, 12 May 2005 20:58:05 -0600

 At Wed, 11 May 2005 06:20:01 -0400, eli@barzilay.org wrote:
 > It would be nice to have a command-line flag that will
 > start mzscheme with a reader taken from a specified
 > module that provides the usual stuff #reader.
 
 It's not clear to me what the reader be applied to. Would the flag
 somehow cooperate with a -r/-f/... flag?
 
 Matthew
 
From: Eli Barzilay <eli@barzilay.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@plt-scheme.org
Subject: Re: all/7374: Command line flags for a reader
Date: Thu, 12 May 2005 23:44:15 -0400

 On May 12, Matthew Flatt wrote:
 > At Wed, 11 May 2005 06:20:01 -0400, eli@barzilay.org wrote:
 > > It would be nice to have a command-line flag that will
 > > start mzscheme with a reader taken from a specified
 > > module that provides the usual stuff #reader.
 > 
 > It's not clear to me what the reader be applied to. Would the flag
 > somehow cooperate with a -r/-f/... flag?
 
 I realize that it's bogus now.  What I was thinking of is something
 that modifies the behavior globally -- something that would support,
 for example, a syntax extension in Swindle for objects.  I have no
 plans for that, just used it as an example.
 
 So for this langauge-with-syntax-extension case, it could be achieved
 with modifying the readtable in the file that implements the language
 (foo/foo.ss).  I know that this is something you advise against in the
 documentation, and it does break things in the usual way -- for
 example, requiring modules will be inconsistent if there is no
 compiled version and your readtable changes the way normal Scheme
 reads.  Limiting this to only #foo constructs makes it a little better
 in a CL-kind of way (where things "usually work"...).  (Actually, this
 is a good example for a case where changing the readtable seems like a
 good idea but its not.)
 
 The only thing that seems to make sense is that such command line
 option will change only the current input port, like pre-feeding it
 with some #reader(...), so loading files etc still uses the default
 unless they have their own #reader.  Maybe this whole thing is an
 argument for attaching a readtable as a property of input ports like
 the printer settings of output ports?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

State changed from "open" to "closed" by eli at Mon, 16 Mar 2009 01:13:35 -0400
Reason>>> Should work with the reader for the language specified with
a -I flag

