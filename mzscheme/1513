From gregp@bsquare.com  Wed Jun 14 18:26:35 2000
Received: from localhost (firewall.bsquare.com [63.76.82.66])
	by cs.rice.edu (8.9.0/8.9.0) with ESMTP id SAA09530
	for <plt-gnats>; Wed, 14 Jun 2000 18:26:34 -0500 (CDT)
Message-Id: <200006142326.SAA09530@cs.rice.edu>
Date: Wed, 14 Jun 2000 18:26:34 -0500 (CDT)
From: gregp@bsquare.com
To: plt-gnats@cs.rice.edu
Subject: read-char doesn't report <eof-object> propperly when i-port is a named pipe

>Number:         1513
>Category:       mzscheme
>Synopsis:       read-char doesn't report <eof-object> propperly when i-port is a named pipe
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Wed Jun 14 23:30:03 GMT 2000
>Last-Modified:  Wed Sep 13 15:13:23 CDT 2000
>Originator:     Greg Pettyjohn
>Organization:
titan
>Release:        101
>Environment:
windows (win32\i386)
Tools: ("stepper" "syncheck" "unit-bundle")
Docs Installed:
("drscheme" "help" "icons" "insidemz" "misclib" "mred" "mzc" "mzscheme" "r5rs" "teachpack")
Collections:
(("D:\\PLT\\collects" ("afm" "browser" "cogen" "compiler" "doc" "drscheme" "drscheme-jr" "dynext" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "icons" "launcher" "make" "mred" "mzlib" "mzopengl" "mzscheme" "named_pipe" "net" "slibinit" "smart-extension" "srpersist" "stepper" "userspce" "vertex-array" "xml" "zodiac")))
>Description:
If you use the standard open-input-file and
   specify a named pipe then in certain situations
   read-char causes an error when it should be possibly
   be returning <eof-object>. Also, char-ready? returns #t
   when I suppose it should be #f.
>How-To-Repeat:
STEPS:
1. Create a named pipe (use Win32 API CreateNamedPipe)
2. Use Win32 API ConnectNamedPipe to connect a client.
2. Use Win32 API WriteFile to write a string to the pipe.
3. Use Win32 API FlushFileBuffers to flush the named pipe.
4. The Client is DrScheme running the following:
(define i-port (open-input-file <named pipe string goes here>))
(read-char i-port)
(read-char i-port)
(read-char i-port)
... several times ...

RESULTS:
1. Eventually read-char causes the following:
error reading from file port (22)

2. Also, char-ready? always returns #t

EXPECTED:
Ideally, the named pipe would behave like a file.
Realistically, this may not be possible.

Note: I have some code for a named-pipe-server if you would like it
>Fix:
>Audit-Trail:

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Thu Jun 15 13:16:22 2000
Responsible-Changed-Why:


From: Matthew Flatt <mflatt@cs.utah.edu>
To: gregp@bsquare.com
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/1513: read-char doesn't report <eof-object> propperly when i-port is a named pipe
Date: Sun, 25 Jun 2000 09:48:33 -0700

 Sorry - this one got lost.
 
 Quoting gregp@bsquare.com:
 > read-char doesn't report <eof-object> propperly when i-port is a named pipe
 
 I only have Windows 98, which doesn't support named ports, so I didn't
 get a chance to see the bug. It's quite likely, however, that the
 `char-ready?' problem is fixed in 102; depends on whether `stat' does
 the right thing with named pipes.
 
 As for the error 22 problem ("22" means "broken pipe"; version 102
 actually prints useful error messages instead of just the number), it
 wasn't entirely clear from your instructions that error 22 is the wrong
 result:
 
 > STEPS:
 > 1. Create a named pipe (use Win32 API CreateNamedPipe)
 > 2. Use Win32 API ConnectNamedPipe to connect a client.
 > 2. Use Win32 API WriteFile to write a string to the pipe.
 > 3. Use Win32 API FlushFileBuffers to flush the named pipe.
 > 4. The Client is DrScheme running the following:
 > (define i-port (open-input-file <named pipe string goes here>))
 > (read-char i-port)
 > (read-char i-port)
 > (read-char i-port)
 > ... several times ...
 
 In the above steps, you don't mention closing the pipe on the server
 side, so I wonder whether the server just exits. If it exits without
 closing the pipe, error 22 is probably the correct result.
 
 But, then, I wouldn't be surprised if the server in your test does
 close the pipe explicitly, and the result is still error 22. Maybe
 MzScheme is doing something wrong, or (just as likely, IMHO) maybe the
 MSVC C library is broken.
 
 In any case, please do let me know whether version 102 (to be released
 in a couple of days) is an improvement, and we'll take it from there.
 If there are still problems, then it's probably worth my time to
 upgrade to Windows 2K anyway.
 
 Thanks,
 Matthew

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Wed Sep 13 15:13:10 2000
State-Changed-Why:
This bug was indeed fixed in 102.
 
>Unformatted:
