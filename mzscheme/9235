From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Mar  3 00:11:56 2008
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.173])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m235Btjr017178
	for <bugs@bugs.plt-scheme.org>; Mon, 3 Mar 2008 00:11:56 -0500
Message-Id: <200803030511.m235BqBp017173@champlain.ccs.neu.edu>
Date: Mon, 3 Mar 2008 00:11:52 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: exit is too strong

>Number:         9235
>Category:       mzscheme
>Synopsis:       exit is too strong
>Class:          change-request
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Mar 03 00:15:01 -0500 2008
>Last-Modified:  Tue May 03 17:30:37 -0400 2011
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.9
>Environment:
linux-fedora
>Description:
I just realized that `exit' is even more dangerous than I though...
Besides not being able to run finalizers, it also bypasses all
unwinders.  for example, when you guard some expression with a
`dynamic-wind', you don't get the protection you usually assume.

Maybe a better way to organize things is to make `exit' throw some
new `exn:exit' value (or maybe not even an `exn', since there's no
need for a message and continuation marks, and it's not really a
"something bad happened" thing like most exceptions; but maybe it
will help with lots of existing handler code that expects an
`exn?').  Then have the toplevel exception handler respond to these
values by actually exiting.  This will also make things more uniform
by using the same exception mechanism instead of a separate exit
handler.  It can also be used with a custodian to reclaim memory etc
before quitting, so perhaps it can cover everything that might be
needed with exiting.
>How-To-Repeat:
>Fix:
