From robby@cs.rice.edu  Tue Feb 10 12:25:33 1998
Received: from australia.cs.rice.edu (australia.cs.rice.edu [128.42.1.176])
          by cs.rice.edu (8.8.5/8.8.4) with ESMTP
	  id MAA22171 for <plt-gnats@cs.rice.edu>; Tue, 10 Feb 1998 12:25:32 -0600 (CST)
Message-Id: <199802101825.MAA04419@australia.cs.rice.edu>
Date: Tue, 10 Feb 1998 12:25:32 -0600 (CST)
From: Robert Bruce Findler <robby@cs.rice.edu>
Reply-To: robby@cs.rice.edu
To: plt-gnats@cs.rice.edu
Subject: evcase
X-Send-Pr-Version: 3.101

>Number:         441
>Category:       mzscheme
>Synopsis:       evcase
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          change-request
>Submitter-Id:   unknown
>Arrival-Date:   Tue Feb 10 18:30:05 GMT 1998
>Last-Modified:  Tue Feb 10 14:36:26 CST 1998
>Originator:     Robert Bruce Findler
>Organization:
titan
>Release:        unknown
>Environment:
	
>Description:

Can we stick the "evcase" macro into plt/collects/mzlib/macro.ss? I don't
know the exact definition, but it should evaluate the "rhs" of each
case-line, instead of quoting them.

>How-To-Repeat:
	
>Fix:
	
>Audit-Trail:

From: Matthias Felleisen <matthias@cs.rice.edu>
To: plt-gnats@cs.rice.edu, robby@cs.rice.edu
Cc: steck@cs.rice.edu, shriram@cs.rice.edu, mflatt@cs.rice.edu,
        robby@cs.rice.edu, cormac@cs.rice.edu, cobbe@cs.rice.edu,
        four@cs.rice.edu
Subject: Re: all/441: evcase
Date: Tue, 10 Feb 1998 12:42:43 -0600 (CST)

 evcase evaluate the lhs of each line: 
 
 (evcase <exp>
   [<exp> <exp> ...]
   ...)
 

From: Matthew Flatt <mflatt@cs.rice.edu>
To: matthias@rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/441: evcase
Date: Tue, 10 Feb 1998 12:54:50 -0600 (CST)

 Quoting Matthias Felleisen:
 > 
 > evcase evaluate the lhs of each line: 
 > 
 > (evcase <exp>
 >   [<exp> <exp> ...]
 >   ...)
 
 What does evcase use to compare to the key the LHS? `eqv?' or `memv'?
 
 Thanks,
 Matthew

From: Matthias Felleisen <matthias@cs.rice.edu>
To: mflatt@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/441: evcase
Date: Tue, 10 Feb 1998 12:58:21 -0600 (CST)

 eqv? in the past. I wouldn't mind memv. 
 
    Date: Tue, 10 Feb 1998 12:54:50 -0600 (CST)
    From: Matthew Flatt <mflatt@cs.rice.edu>
    cc: plt-gnats@cs.rice.edu
    References: <199802101830.MAA02175@asia.cs.rice.edu>
 	   <199802101842.MAA07304@africa.cs.rice.edu>
 
    Quoting Matthias Felleisen:
    > 
    > evcase evaluate the lhs of each line: 
    > 
    > (evcase <exp>
    >   [<exp> <exp> ...]
    >   ...)
 
    What does evcase use to compare to the key the LHS? `eqv?' or `memv'?
 
    Thanks,
    Matthew
 

From: Robert Bruce Findler <robby@cs.rice.edu>
To: matthias@rice.edu
Cc: plt-gnats@cs.rice.edu, steck@cs.rice.edu, shriram@cs.rice.edu,
        mflatt@cs.rice.edu, cormac@cs.rice.edu, cobbe@cs.rice.edu,
        four@cs.rice.edu
Subject: Re: all/441: evcase
Date: Tue, 10 Feb 1998 13:11:17 -0600 (CST)

 Matthias Felleisen writes:
 > 
 > evcase evaluate the lhs of each line: 
 > 
 > (evcase <exp>
 >   [<exp> <exp> ...]
 >   ...)
 
 Like cond, (unlike case) there is only one condition per line?
 
 Robby

From: Robert Bruce Findler <robby@cs.rice.edu>
To: mflatt@cs.rice.edu
Cc: plt-gnats@cs.rice.edu
Subject: Re: all/441: evcase
Date: Tue, 10 Feb 1998 13:57:44 -0600 (CST)

 Actually, let me just mail you the macro def'n and test cases. I want to
 reuse t.ss.
 
 Robby
 
 (#%define-macro evcase 
  (#%lambda (v . tests-in)
   (#%let ([serror
 	   (#%lambda (msg at)
 	    (#%raise-syntax-error
 	     'evcase
 	     msg
 	     (#%list* 'case v tests-in)
 	     at))])
       (#%let ([gen (#%gensym "evcase")])
 	`(#%let ([,gen ,v])
 	   (#%cond
 	    ,@(#%let loop ([tests tests-in])
 		(#%cond
 		 [(#%null? tests) `()]
 		 [(#%pair? tests)
 		  (#%let ([test-value (#%car tests)]
 			  [rest (#%cdr tests)])
 		   `(,(#%if (#%or (#%not (#%pair? test-value))
 			     (#%not (#%pair? (#%cdr test-value))))
 		       (serror
 			"bad syntax (clause is not a test-value pair)"
 			test-value)
 		       (#%let ([test (#%car test-value)]
 			       [body (#%cdr test-value)])
 			(#%if (#%and (#%pair? body) (#%list? body))
 			 #t
 			 (serror
 			  "bad syntax (improper clause body)"
 			  body))
 			(let ([condition 
 			       (#%cond
 				[(#%and (#%eq? test 'else)
 				  (#%not (#%local-expansion-time-bound? 'else)))
 				 (#%if (#%null? rest)
 				  'else
 				  (serror
 				   "bad syntax (`else' clause must be last)"
 				   test-value))]
 				[else `(#%eqv? ,gen ,test)])])
 			  `(,condition
 			    (begin ,@body)))))
 		     .
 		     ,(loop rest)))]
 		 [else (serror
 			"bad syntax (body must contain a list of pairs)"
 			tests)]))))))))
 
 ;; failling tests:
 
 (for-each syntax-test 
 	  (list '(evcase)
 		'(evcase 1 (a))
 		'(evcase 1 (a b) a)
 		'(evcase 1 (a . b) a)))
 
 ;; good tests
 
 (andmap (lambda (x) (= x 17))
 	(list
 	 (evcase 3 [3 17])
 	 (evcase 3 [(+ 1 2) 17] [3 1])
 	 (evcase 3 [3 4 5 17])
 	 (evcase 3 [4 1] [3 4 5 17])
 	 (evcase 3 [4 1 2 3 4] [3 4 5 17])
 	 (with-handlers ([(lambda (x) #t) (lambda (x) 17)]) (evcase 1))
 	 (let ([=> 12]) (evcase 3 [3 => 17]))
 	 (let ([=> 17]) (evcase 3 [3 =>]))))

Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Feb 10 14:36:06 1998
Responsible-Changed-Why:

State-Changed-From-To: open-closed
State-Changed-By: mflatt
State-Changed-When: Tue Feb 10 14:36:09 1998
State-Changed-Why:
Moved into MzLib and documented.

>Unformatted:
