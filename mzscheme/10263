From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue May 26 17:39:28 2009
Received: from qw-out-2122.google.com (qw-out-2122.google.com [74.125.92.25])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id n4QLdFeg013231
	for <bugs@bugs.plt-scheme.org>; Tue, 26 May 2009 17:39:15 -0400
Message-Id: <200905262139.n4QLdDx9013225@champlain.ccs.neu.edu>
Date: Tue, 26 May 2009 17:39:13 -0400
From: cce@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: bad interaction among generate-temporaries, top-level require, and top-level define-syntaxes

>Number:         10263
>Category:       mzscheme
>Synopsis:       bad interaction among generate-temporaries, top-level require, and top-level define-syntaxes
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue May 26 17:40:01 -0400 2009
>Last-Modified:  Thu May 12 18:50:53 -0400 2011
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.2.0.2-svn22may2009
>Environment:
macosx "Darwin Kauai.ccs.neu.edu 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:39:01 PST 2008; root:xnu-1228.9.59~1/RELEASE_PPC Power Macintosh" (ppc-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 102279672

Collections:
(("/Users/cce/Library/PLT Scheme/4.2.0.2/collects" non-existent-path) ("/Users/cce/plt/trunk/collects" ".svn" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profile" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "stxclass" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" !
 "trace" "typed" "typed-scheme" "version" "waterworld" "web-server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n" #t))
>Description:
The code (module + two REPL expressions) under "Steps to Reproduce" provides a thin wrapper around require, then requires scheme/function in the REPL and attempts to refer to one of the imported bindings.  The final expression results in the following error message:

reference to an identifier before its definition: curry3.3

If the use of generate-temporaries is replaced with my-generate-temporaries, the error goes away and the final expression yields the curry procedure.  Other formulations of my-generate-temporaries, such as a fairly naive combination of gensym and datum->syntax, fix the problem as well.
>How-To-Repeat:
Enter this module (delimited by 20 -'s):

--------------------

#lang scheme

(require (for-syntax syntax/stx scheme/require-transform))

(define-for-syntax (my-generate-temporaries stxs)
  (for/list ([id (in-list (stx->list stxs))]
             [generated (in-list (generate-temporaries stxs))])
    ((make-syntax-introducer) (datum->syntax id (syntax-e generated)))))

(define-syntax (require-indirect stx)
  (syntax-case stx ()
    [(_ spec ...)
     (let*-values ([(spec-stx) (syntax/loc stx (only-meta-in 0 spec ...))]
                   [(imports sources) (expand-import spec-stx)]
                   [(names) (map import-local-id imports)])
       (with-syntax ([(name ...) names]
                     [(temp ...) (generate-temporaries names)]
                     [the-spec spec-stx])
         (syntax/loc stx
           (begin
             (require (rename-in the-spec [name temp] ...))
             (define-syntaxes [name ...]
               (values (make-rename-transformer #'temp) ...))))))]))

--------------------

Then enter these two REPL expressions:

(require-indirect scheme/function)
curry
>Fix:
>Audit-Trail:
From: Ryan Culpepper <ryanc@ccs.neu.edu>
To: cce@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, robby@plt-scheme.org,
        clements@plt-scheme.org, jay@plt-scheme.org, meunier@plt-scheme.org,
        kathyg@plt-scheme.org, jacobm@plt-scheme.org, cce@plt-scheme.org,
        samth@plt-scheme.org, ryanc@plt-scheme.org, gcooper@plt-scheme.org,
        sstrickl@plt-scheme.org, sperber@deinprogramm.de
Subject: Re: [plt-bug] all/10263: bad interaction among generate-temporaries, top-level require, and top-level define-syntaxes
Date: Tue, 26 May 2009 18:26:41 -0400

 On May 26, 2009, at 5:40 PM, cce@ccs.neu.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=10263
 >
 > Reported by Carl Eastlund for release: 4.2.0.2-svn22may2009
 >
 > *** Description:
 > The code (module + two REPL expressions) under "Steps to Reproduce"  
 > provides a thin wrapper around require, then requires scheme/ 
 > function in the REPL and attempts to refer to one of the imported  
 > bindings.  The final expression results in the following error  
 > message:
 >
 > reference to an identifier before its definition: curry3.3
 >
 > If the use of generate-temporaries is replaced with my-generate- 
 > temporaries, the error goes away and the final expression yields the  
 > curry procedure.  Other formulations of my-generate-temporaries,  
 > such as a fairly naive combination of gensym and datum->syntax, fix  
 > the problem as well.
 
 I assume that the reason 'generate-temporaries' uses a #f context is  
 to prevent the generated identifiers from being used to make  
 references to some module's members via 'datum->syntax'. That is, a  
 generated identifier should not start out with any "as reference"  
 meaning. But having a #f context seems to cause problems.
 
 Would this be a good use of the new syntax pruning operations? Give  
 the identifiers a module context and then prune it away completely? Or  
 perhaps better yet, give it a context with a special version of #%top  
 defined and prune away everything else?
 
 (Actually, now I seem to remember another reason for using #f as the  
 context... the expander used to complain if the identifier being  
 defined in a definition in module X already had a module context from  
 module Y. But that seems to have been fixed/changed. Is the use of #f  
 an artifact of that era?)
 
 Ryan
 

