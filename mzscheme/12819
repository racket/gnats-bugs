From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sun Jun  3 16:45:38 2012
Received: from mail-vb0-f44.google.com (mail-vb0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q53KjZS0032147
	for <bugs@bugs.plt-scheme.org>; Sun, 3 Jun 2012 16:45:35 -0400
Message-Id: <201206032045.q53KjWIs032141@champlain.ccs.neu.edu>
Date: Sun, 3 Jun 2012 16:45:32 -0400
From: samth@ccs.neu.edu
To: bugs@racket-lang.org
Subject: Optimizer fails to beta-reduce kw & case-lambda functions

>Number:         12819
>Category:       mzscheme
>Synopsis:       Optimizer fails to beta-reduce kw & case-lambda functions
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sun Jun 03 16:48:01 -0400 2012
>Last-Modified:  Tue Jul 24 19:55:07 -0400 2012
>Originator:     Sam Tobin-Hochstadt
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.8--2012-05-21(1eec136c/d)
>Environment:
unix "Linux hermes 3.0.0-16-generic-pae #29-Ubuntu SMP Tue Feb 14 13:56:31 UTC 2012 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 271646736
Links: (links) = ("caper" "var" "disassemble"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/samth/.racket/5.3.0.8/collects"
 (non-existent-path))
("/home/samth/sw/plt/collects"
 ("drscheme" "scribblings" "lang" "plot" "srpersist" "mrlib" "r6rs" "sgl" "waterworld" "db" "rackunit" "defaults" "test-engine" "net" "syntax" ".gitignore" "games" "test-box-recovery" "html" "parser-tools" "drracket" "trace" "redex" "gui-debugger" "afm" "meta" "planet" "openssl" "guibuilder" "readline" "version" "web-server" "ffi" "eopl" "s-exp" "picturing-programs" "graphics" "compiler" "make" "file" "errortrace" "handin-client" "json" "scribble" "repos-time-stamp" "mred" "tex2page" "repo-time-stamp" "srfi" "htdp" "r5rs" "images" "ts" "sirmail" "rnrs" "dynext" "mz" "xrepl" "texpict" "syntax-color" "embedded-gui" "racket" "data" "reader" "wxme" "setup" "typed-scheme" "mzlib" "string-constants" "raco" "tests" "stepper" "mzcom" "plai" "scriblib" "preprocessor" "handin-server" "lazy" "config" "schemeunit" "browser" "xml" "scheme" "deinprogramm" "macro-debugger" "info-domain" "2htdp" "racklog" "at-exp" "mysterx" "frtime" "slatex" "algol60" "swindle" "typed-racket" "icons" "hierl!
 ist" "mzscheme" "help" "racunit" "typed" "teachpack" "framework" "datalog" "honu" "unstable" "slideshow" "launcher" "profile" "raclog" "combinator-parser"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t ((main) (test))))
>Description:
Neither of these function calls are optimized to just `2`, which I think violates the macro-writer's bill of rights.

#lang racket
;; this doesn't beta-reduce at all
((lambda (x #:z [y (+ x 1)]) y) 7 #:z 2)
;; this indirection lets it beta reduce,
;; but still produces the kw function
;; and throws it away
(let () (define (d x #:z [y (+ x 1)]) y)
  (d 7 #:z 2))

;; these are both simplified, but 
;; don't beta-reduce
((lambda (x  [y (+ x 1)]) y) 7  2)

(let () (define (d x  [y (+ x 1)]) y)
  (d 7  2))
>How-To-Repeat:
>Fix:
