From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Oct 14 15:34:40 2010
Received: from mail-yx0-f172.google.com (mail-yx0-f172.google.com [209.85.213.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o9EJYaEE030038
	for <bugs@bugs.plt-scheme.org>; Thu, 14 Oct 2010 15:34:36 -0400
Message-Id: <201010141934.o9EJYXCa030029@champlain.ccs.neu.edu>
Date: Thu, 14 Oct 2010 15:34:33 -0400
From: rafkind@cs.utah.edu
To: bugs@racket-lang.org
Subject: curried functions accept more values than parameters

>Number:         11321
>Category:       mzscheme
>Synopsis:       curried functions accept more values than parameters
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Oct 14 15:36:01 -0400 2010
>Last-Modified:  Wed Oct 20 18:00:32 -0400 2010
>Originator:     Jon Rafkind
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.1.5
>Environment:
Linux i686 / Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.8 Safari/534.7
>Description:
When `curry' is used with `compose' I can supply more parameters than to a curried function than required and not get an error.

(define (x) (values 1 2 3))
(define-curry (y a b)
  (printf "a is ~a\n" a))
(define g (compose y x))

(g)
==
#<procedure:curried>
((g) 1)
==
procedure /home/jon/tmp/q.rkt:4:40: expects 2 arguments, given 4: 1 2 3 1

Whereas other situations works fine

(define (x) (values 1))
(define-curry (y a b)
  (printf "a is ~a\n" a))
(define g (compose y x))

(g) ;; should be a function that wants 1 argument for `b'
==
#<procedure:curried>

((g) 1)
==
a is 1

And passing two arguments

(define (x) (values 1 2))
(define-curry (y a b)
  (printf "a is ~a\n" a))
(define g (compose y x))

(g)
==
a is 1
>How-To-Repeat:
>Fix:
