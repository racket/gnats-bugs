From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Jul 10 20:12:55 2010
Received: from mail-gw0-f53.google.com (mail-gw0-f53.google.com [74.125.83.53])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o6B0CqpA015101
	for <bugs@bugs.plt-scheme.org>; Sat, 10 Jul 2010 20:12:53 -0400
Message-Id: <201007110012.o6B0Co1H015094@champlain.ccs.neu.edu>
Date: Sat, 10 Jul 2010 20:12:50 -0400
From: vladimir@acm.org
To: bugs@racket-lang.org
Subject: make fails on Fedora 12 with SIGSEGV MAPERR si_code 1 fault on addr 0x8e4000

>Number:         11023
>Category:       mzscheme
>Synopsis:       make fails on Fedora 12 with SIGSEGV MAPERR si_code 1 fault on addr 0x8e4000
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat Jul 10 20:16:01 -0400 2010
>Last-Modified:  Tue May 03 17:48:21 -0400 2011
>Originator:     Vladimir G. Ivanovic
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0
>Environment:
Linux x86_64 / Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.4) Gecko/20100622 Fedora/3.6.4-1.fc13 Firefox/3.6.4 GTB7.0
>Description:
'make install' fails on up-to-date Fedora 12 (Linux 2.6.33.5-124.fc13.x86_64 x86_64 GNU/Linux)

raco setup: running: scribblings/gui/gui.scrbl
raco setup: running: scribblings/guide/guide.scrbl
SIGSEGV MAPERR si_code 1 fault on addr 0x8e4000
make[1]: *** [install-3m] Aborted (core dumped)
make[1]: Leaving directory `/usr/local/src/plt-5.0/src'
make: *** [install] Error 2
>How-To-Repeat:
From my history file:

  840  untar /downloads/racket-5.0-src-unix.tgz 
  841  pd plt-5.0/src
  842  ./configure --help
  843  ./configure
  844  ./configure --prefix=/usr/local
  845  pwd
  846  make
  847  make install
  848  sudo make install
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: vladimir@acm.org, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV 
	MAPERR si_code 1 fault on addr 0x8e4000
Date: Sat, 10 Jul 2010 20:25:47 -0400

 This appears to be similar to the recurring bug that DrDr finds in
 zo-parse.rkt (although DrDr is down, so I can't check).
 
 On Sat, Jul 10, 2010 at 8:16 PM,  <vladimir@acm.org> wrote:
 > A new problem report is waiting at
 > =A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11023
 >
 > Reported by Vladimir G. Ivanovic for release: 5.0
 >
 > *** Description:
 > 'make install' fails on up-to-date Fedora 12 (Linux 2.6.33.5-124.fc13.x86=
 _64 x86_64 GNU/Linux)
 >
 > raco setup: running: scribblings/gui/gui.scrbl
 > raco setup: running: scribblings/guide/guide.scrbl
 > SIGSEGV MAPERR si_code 1 fault on addr 0x8e4000
 > make[1]: *** [install-3m] Aborted (core dumped)
 > make[1]: Leaving directory `/usr/local/src/plt-5.0/src'
 > make: *** [install] Error 2
 >
 > *** How to repeat:
 > From my history file:
 >
 > =A0840 =A0untar /downloads/racket-5.0-src-unix.tgz
 > =A0841 =A0pd plt-5.0/src
 > =A0842 =A0./configure --help
 > =A0843 =A0./configure
 > =A0844 =A0./configure --prefix=3D/usr/local
 > =A0845 =A0pwd
 > =A0846 =A0make
 > =A0847 =A0make install
 > =A0848 =A0sudo make install
 >
 > *** Environment:
 > Linux x86_64 / Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.4) Geck=
 o/20100622 Fedora/3.6.4-1.fc13 Firefox/3.6.4 GTB7.0
 >
 >
 
 
 
 --=20
 sam th
 samth@ccs.neu.edu
From: Matthew Flatt <mflatt@cs.utah.edu>
To: vladimir@acm.org
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV 
	MAPERR si_code 1 fault on addr 0x8e4000
Date: Sun, 11 Jul 2010 06:42:39 -0600

 At Sat, 10 Jul 2010 20:25:47 -0400, Sam Tobin-Hochstadt wrote:
 > This appears to be similar to the recurring bug that DrDr finds in
 > zo-parse.rkt (although DrDr is down, so I can't check).
 
 I don't think it's related to that bug (which is now fixed), because
 the bug was a problem with ill-formed bytecode files generated by the
 `compiler/zo-marshal' library.
 
 Otherwise, I don't have any good guesses at the moment. Does it happen
 reliably so that you can get a core dump and extract a stack trace?
 
 Thanks,
 Matthew
 
From: "Vladimir G. Ivanovic" <vladimir@acm.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Fri, 16 Jul 2010 14:40:47 -0700

 This is an OpenPGP/MIME signed message (RFC 2440 and 3156)
 --------------enig08F3598EB796972489A4EC0A
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I cloned the git repository and the bug still happens, reliably.
 
 How do get a core dump? I know how to run gdb, etc. It's not obvious
 what exactly was running and in what directory. Running
 
     $ raco setup ../../collects/scribblings/guide/guide.scrbl
 
 from the build directory didn't work.
 
 --- Vladimir
 
 on 07/11/2010 05:42 AM Matthew Flatt said the following:
 > At Sat, 10 Jul 2010 20:25:47 -0400, Sam Tobin-Hochstadt wrote:
 >  =20
 >> This appears to be similar to the recurring bug that DrDr finds in
 >> zo-parse.rkt (although DrDr is down, so I can't check).
 >>    =20
 > I don't think it's related to that bug (which is now fixed), because
 > the bug was a problem with ill-formed bytecode files generated by the
 > `compiler/zo-marshal' library.
 >
 > Otherwise, I don't have any good guesses at the moment. Does it happen
 > reliably so that you can get a core dump and extract a stack trace?
 >
 > Thanks,
 > Matthew
 >
 >  =20
 
 --=20
 Vladimir G. Ivanovic                            http://www.leonora.org
 +1 650 450 4101                                       vladimir@acm.org
 
 
 
 --------------enig08F3598EB796972489A4EC0A
 Content-Type: application/pgp-signature; name="signature.asc"
 Content-Description: OpenPGP digital signature
 Content-Disposition: attachment; filename="signature.asc"
 
 -----BEGIN PGP SIGNATURE-----
 Version: GnuPG v2.0.14 (GNU/Linux)
 Comment: Using GnuPG with Fedora - http://enigmail.mozdev.org/
 
 iEYEARECAAYFAkxA0eAACgkQ+7fzz8ZmTJMqPQCeO4KMwKjC1a8s+60BnE49h2xr
 O4oAn23U/vdWNtKZAFHCyGZMexMyXOHY
 =Af14
 -----END PGP SIGNATURE-----
 
 --------------enig08F3598EB796972489A4EC0A--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Vladimir G. Ivanovic" <vladimir@acm.org>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Sat, 17 Jul 2010 08:15:33 -0600

 To enable core dumps:
   In sh: ulimit -c unlimited
   In csh: unlimit core
 
 When you get a core file, then
 
  gdb <executable> <core>
 
 and use `where' to get a stack trace.
 
 Thanks!
 Matthew
 
 At Fri, 16 Jul 2010 14:40:47 -0700, "Vladimir G. Ivanovic" wrote:
 > I cloned the git repository and the bug still happens, reliably.
 > 
 > How do get a core dump? I know how to run gdb, etc. It's not obvious
 > what exactly was running and in what directory. Running
 > 
 >     $ raco setup ../../collects/scribblings/guide/guide.scrbl
 > 
 > from the build directory didn't work.
 > 
 > --- Vladimir
 > 
 > on 07/11/2010 05:42 AM Matthew Flatt said the following:
 > > At Sat, 10 Jul 2010 20:25:47 -0400, Sam Tobin-Hochstadt wrote:
 > >   
 > >> This appears to be similar to the recurring bug that DrDr finds in
 > >> zo-parse.rkt (although DrDr is down, so I can't check).
 > >>     
 > > I don't think it's related to that bug (which is now fixed), because
 > > the bug was a problem with ill-formed bytecode files generated by the
 > > `compiler/zo-marshal' library.
 > >
 > > Otherwise, I don't have any good guesses at the moment. Does it happen
 > > reliably so that you can get a core dump and extract a stack trace?
 > >
 > > Thanks,
 > > Matthew
 > >
 > >   
 > 
 > -- 
 > Vladimir G. Ivanovic                            http://www.leonora.org
 > +1 650 450 4101                                       vladimir@acm.org
 
From: "Vladimir G. Ivanovic" <vladimir@acm.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Sun, 18 Jul 2010 04:09:17 -0700

 This is an OpenPGP/MIME signed message (RFC 2440 and 3156)
 --------------enig1690A069A4BBED2D38DCA471
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Let me know if you'd like me to examine some variables.
 
 --- Vladimir
 
 $ gdb racket/racketcgc core.3234
 GNU gdb (GDB) Fedora (7.1-28.fc13)
 Copyright (C) 2010 Free Software Foundation, Inc.
 License GPLv3+: GNU GPL version 3 or later
 <http://gnu.org/licenses/gpl.html>
 This is free software: you are free to change and redistribute it.
 There is NO WARRANTY, to the extent permitted by law.  Type "show copying=
 "
 and "show warranty" for details.
 This GDB was configured as "x86_64-redhat-linux-gnu".
 For bug reporting instructions, please see:
 <http://www.gnu.org/software/gdb/bugs/>...
 Reading symbols from
 /usr/local/src/racket/src/build/racket/racketcgc...done.
 [New Thread 3234]
 [New Thread 3235]
 [New Thread 3236]
 Missing separate debuginfo for
 /usr/local/racket/lib/racket/collects/sgl/compiled/native/x86_64-linux/ma=
 ke-gl-info-helper_rkt.so
 Try: yum --disablerepo=3D'*' --enablerepo=3D'*-debuginfo' install
 /usr/lib/debug/.build-id/82/83840080da02ea0a6028ed0f77a643b92649d2
 Missing separate debuginfo for
 Try: yum --disablerepo=3D'*' --enablerepo=3D'*-debuginfo' install
 /usr/lib/debug/.build-id/7f/1e55698a06c6b97141f4c0165133012565e56a
 Reading symbols from /lib64/libdl-2.12.so...Reading symbols from
 /usr/lib/debug/lib64/libdl-2.12.so.debug...done.
 done.
 Loaded symbols for /lib64/libdl-2.12.so
 Reading symbols from /lib64/libm-2.12.so...Reading symbols from
 /usr/lib/debug/lib64/libm-2.12.so.debug...done.
 done.
 Loaded symbols for /lib64/libm-2.12.so
 Reading symbols from /lib64/libpthread-2.12.so...Reading symbols from
 /usr/lib/debug/lib64/libpthread-2.12.so.debug...done.
 done.
 Loaded symbols for /lib64/libpthread-2.12.so
 Reading symbols from /lib64/libc-2.12.so...Reading symbols from
 /usr/lib/debug/lib64/libc-2.12.so.debug...done.
 done.
 Loaded symbols for /lib64/libc-2.12.so
 Reading symbols from /lib64/ld-2.12.so...Reading symbols from
 /usr/lib/debug/lib64/ld-2.12.so.debug...done.
 done.
 Loaded symbols for /lib64/ld-2.12.so
 Reading symbols from /lib64/libcrypto.so.1.0.0a...Reading symbols from
 /usr/lib/debug/lib64/libcrypto.so.1.0.0a.debug...done.
 done.
 Loaded symbols for /lib64/libcrypto.so.1.0.0a
 Reading symbols from /lib64/libz.so.1.2.3...Reading symbols from
 /usr/lib/debug/lib64/libz.so.1.2.3.debug...done.
 done.
 Loaded symbols for /lib64/libz.so.1.2.3
 Reading symbols from
 /usr/local/racket/lib/racket/collects/sgl/compiled/native/x86_64-linux/ma=
 ke-gl-info-helper_rkt.so...done.
 Loaded symbols for
 /usr/local/racket/lib/racket/collects/sgl/compiled/native/x86_64-linux/ma=
 ke-gl-info-helper_rkt.so
 Core was generated by `racket/racketcgc -X
 /usr/local/racket/lib/racket/collects -N raco setup -l- set'.
 Program terminated with signal 11, Segmentation fault.
 #0  locale_recase (to_up=3D1, in=3D<value optimized out>, out=3D0x7fff851=
 c8950
 "", oolen=3D0x7fff851c89a0,
     iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
 =2E./../../racket/src/string.c:2964
 2964          wc[j] =3D cwc;
 (gdb) where
 #0  locale_recase (to_up=3D1, in=3D<value optimized out>, out=3D0x7fff851=
 c8950
 "", oolen=3D0x7fff851c89a0,
     iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
 =2E./../../racket/src/string.c:2964
 #1  0x000000000052eee1 in do_locale_recase (to_up=3D1, in=3D0x7f9de837ff0=
 0,
 delta=3D6, len=3D0, olen=3D0x7fff851c89f8)
     at ../../../racket/src/string.c:3270
 #2  0x000000000052f0e4 in mz_recase (who=3D<value optimized out>, to_up=3D=
 1,
 argc=3D<value optimized out>,
     argv=3D<value optimized out>) at ../../../racket/src/string.c:3406
 #3  unicode_recase (who=3D<value optimized out>, to_up=3D1, argc=3D<value=
 
 optimized out>, argv=3D<value optimized out>)
     at ../../../racket/src/string.c:3450
 #4  0x0000000000443d35 in scheme_do_eval (obj=3D0xda7bb0, num_rands=3D1,
 rands=3D0x7f9de7dfbdf0, get_value=3D-1)
     at ../../../racket/src/eval.c:9205
 #5  0x000000000045dd18 in scheme_finish_apply_for_prompt (prompt=3D0x0,
 _prompt_tag=3D0x7f9e04756f20, proc=3D0x7f9df7471b80,
     argc=3D0, argv=3D0x0) at ../../../racket/src/fun.c:6410
 #6  0x000000000045de0d in scheme_apply_for_prompt (prompt=3D<value
 optimized out>, prompt_tag=3D<value optimized out>,
     proc=3D<value optimized out>, argc=3D<value optimized out>, argv=3D<v=
 alue
 optimized out>)
     at ../../../racket/src/fun.c:6490
 #7  0x000000000046821a in call_with_prompt (in_argc=3D3, in_argv=3D<value=
 
 optimized out>) at ../../../racket/src/fun.c:6815
 #8  0x00007f9e048a7bb8 in ?? ()
 #9  0x0000000000000000 in ?? ()
 (gdb) list
 2959      /* ---- re-case ---- */
 2960  =20
 2961      if (to_up) {
 2962        for (j =3D 0; j < wl; j++) {
 2963          cwc =3D towupper(wc[j]);
 2964          wc[j] =3D cwc;
 2965        }
 2966      } else {
 2967        for (j =3D 0; j < wl; j++) {
 2968          cwc =3D towlower(wc[j]);
 (gdb) up
 #1  0x000000000052eee1 in do_locale_recase (to_up=3D1, in=3D0x7f9de837ff0=
 0,
 delta=3D6, len=3D0, olen=3D0x7fff851c89f8)
     at ../../../racket/src/string.c:3270
 3270        c =3D locale_recase(to_up, c, 0, clen,
 (gdb) list
 3265  =20
 3266        used >>=3D 2;
 3267        delta +=3D used;
 3268        len -=3D used;
 3269  =20
 3270        c =3D locale_recase(to_up, c, 0, clen,
 3271                  case_buf, 0, MZ_SC_BUF_SIZE - 1,
 3272                  &clen);
 3273        if (!c)
 3274          clen =3D 0;
 (gdb) up
 #2  0x000000000052f0e4 in mz_recase (who=3D<value optimized out>, to_up=3D=
 1,
 argc=3D<value optimized out>,
     argv=3D<value optimized out>) at ../../../racket/src/string.c:3406
 3406        us1 =3D mz_do_recase(to_up, us, delta, i - delta, &ulen1);
 (gdb) list
 3401          break;
 3402          } else if (!us[i])
 3403        break;
 3404        }
 3405  =20
 3406        us1 =3D mz_do_recase(to_up, us, delta, i - delta, &ulen1);
 3407  =20
 3408        if (utf16) {
 3409          us1 =3D scheme_utf16_to_ucs4((unsigned short *)us1, 0,
 ulen1, NULL, 0, &ulen1, 1);
 3410          us1[ulen1] =3D 0;
 (gdb) up
 #3  unicode_recase (who=3D<value optimized out>, to_up=3D1, argc=3D<value=
 
 optimized out>, argv=3D<value optimized out>)
     at ../../../racket/src/string.c:3450
 3450      return mz_recase(who, to_up, chars, len);
 (gdb) list
 3445        scheme_wrong_type(who, "string", 0, argc, argv);
 3446  =20
 3447      chars =3D SCHEME_CHAR_STR_VAL(argv[0]);
 3448      len =3D SCHEME_CHAR_STRTAG_VAL(argv[0]);
 3449  =20
 3450      return mz_recase(who, to_up, chars, len);
 3451    }
 3452  =20
 3453    static Scheme_Object *
 3454    string_locale_upcase(int argc, Scheme_Object *argv[])
 (gdb) up
 #4  0x0000000000443d35 in scheme_do_eval (obj=3D0xda7bb0, num_rands=3D1,
 rands=3D0x7f9de7dfbdf0, get_value=3D-1)
     at ../../../racket/src/eval.c:9205
 9205          v =3D f(num_rands, rands, (Scheme_Object *)prim);
 (gdb) list
 9200        return NULL; /* Shouldn't get here */
 9201          }
 9202  =20
 9203          f =3D prim->prim_val;
 9204  =20
 9205          v =3D f(num_rands, rands, (Scheme_Object *)prim);
 9206  =20
 9207          DEBUG_CHECK_TYPE(v);
 9208        } else if (type =3D=3D scheme_closure_type) {
 9209          Scheme_Closure_Data *data;
 (gdb) up
 #5  0x000000000045dd18 in scheme_finish_apply_for_prompt (prompt=3D0x0,
 _prompt_tag=3D0x7f9e04756f20, proc=3D0x7f9df7471b80,
     argc=3D0, argv=3D0x0) at ../../../racket/src/fun.c:6410
 6410        val =3D _scheme_apply_multi(proc, argc, argv);
 (gdb) list
 6405               is unset.
 6406               [This is a jump in the normal error/abort chain.]
 6407        */
 6408        val =3D NULL;
 6409      } else {
 6410        val =3D _scheme_apply_multi(proc, argc, argv);
 6411      }
 6412  =20
 6413      p =3D scheme_current_thread;
 6414      p->error_buf =3D savebuf;
 (gdb) up
 #6  0x000000000045de0d in scheme_apply_for_prompt (prompt=3D<value
 optimized out>, prompt_tag=3D<value optimized out>,
     proc=3D<value optimized out>, argc=3D<value optimized out>, argv=3D<v=
 alue
 optimized out>)
     at ../../../racket/src/fun.c:6490
 6490      proc =3D scheme_finish_apply_for_prompt(prompt, prompt_tag,
 proc, argc, argv);
 (gdb) list
 6485                                           Scheme_Object *proc, int
 argc, Scheme_Object **argv)
 6486    {
 6487      /* Grab stack address, then continue on with final step: */
 6488      prompt->stack_boundary =3D PROMPT_STACK(proc);
 6489  =20
 6490      proc =3D scheme_finish_apply_for_prompt(prompt, prompt_tag,
 proc, argc, argv);
 6491  =20
 6492      return proc;
 6493    }
 6494  =20
 (gdb) up
 #7  0x000000000046821a in call_with_prompt (in_argc=3D3, in_argv=3D<value=
 
 optimized out>) at ../../../racket/src/fun.c:6815
 6815        v =3D scheme_apply_for_prompt(prompt, prompt_tag, proc, argc,=
 
 argv);
 (gdb) list
 6810        }
 6811  =20
 6812        p->next_meta =3D 0;
 6813        p->dw =3D prompt_dw;
 6814  =20
 6815        v =3D scheme_apply_for_prompt(prompt, prompt_tag, proc, argc,=
 
 argv);
 6816  =20
 6817        /* >> An escape can jump directly here, instead of going
 through the
 6818           usual escape chain of setjmps. That means we need to
 reset everything,
 6819           such as the runstack pointer. The information we need is
 in the
 (gdb) up
 #8  0x00007f9e048a7bb8 in ?? ()
 (gdb) list
 6820           prompt record. */
 6821  =20
 6822        p =3D scheme_current_thread;
 6823  =20
 6824        restore_from_prompt(prompt);
 6825  =20
 6826        p->suspend_break =3D 0;
 6827  =20
 6828        if (!v) {
 6829          /* There was an escape. See scheme_finish_apply_for_prompt
 for the possibilities. */
 (gdb) up
 #9  0x0000000000000000 in ?? ()
 (gdb) list
 6830          if (SAME_OBJ((Scheme_Object *)p->cjs.jumping_to_continuatio=
 n,
 6831                       (Scheme_Object *)prompt)) {
 6832            /* Jumping to this prompt, maybe to apply a different
 6833               continuation... */
 6834            if (p->cjs.is_escape) {
 6835              /* Yes, a different continuation. That is, apply a
 non-functional continuation
 6836                 that is based on a (potentially) different prompt.
 The d-w record
 6837                 is already removed as necessary at the cont call
 site in "eval.c".
 6838                 Loop, in case we have a kind of tail-call to
 another such contionuation: */
 6839              Scheme_Cont *target;
 (gdb) quit
 
 --=20
 Vladimir G. Ivanovic                            http://www.leonora.org
 +1 650 450 4101                                       vladimir@acm.org
 
 
 
 --------------enig1690A069A4BBED2D38DCA471
 Content-Type: application/pgp-signature; name="signature.asc"
 Content-Description: OpenPGP digital signature
 Content-Disposition: attachment; filename="signature.asc"
 
 -----BEGIN PGP SIGNATURE-----
 Version: GnuPG v2.0.14 (GNU/Linux)
 Comment: Using GnuPG with Fedora - http://enigmail.mozdev.org/
 
 iEYEARECAAYFAkxC4N4ACgkQ+7fzz8ZmTJO9jQCfV86FRQXYbxac380vOoFigIor
 AKsAnRzzg3ZjSzwuZTc9L+beAXIH3bZD
 =w3WM
 -----END PGP SIGNATURE-----
 
 --------------enig1690A069A4BBED2D38DCA471--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Vladimir G. Ivanovic" <vladimir@acm.org>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Sun, 18 Jul 2010 06:22:24 -0600

 Thanks for the very useful stack trace!
 
  * Does evaluating
      (string-locale-upcase "Stra\xDFe")
    in Racket always (or often) crash?
 
  * What is your LC_ALL, LC_CTYPE, or LANG environment variable setting?
 
 
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Vladimir G. Ivanovic" <vladimir@acm.org>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Sun, 18 Jul 2010 06:26:15 -0600

 At Sun, 18 Jul 2010 06:22:24 -0600, Matthew Flatt wrote:
 > Thanks for the very useful stack trace!
 > 
 >  * Does evaluating
 >      (string-locale-upcase "Stra\xDFe")
 >    in Racket always (or often) crash?
 > 
 >  * What is your LC_ALL, LC_CTYPE, or LANG environment variable setting?
 
 Actually, it may be that your locale isn't relevant and that
 
  (parameterize ([current-locale "C"])
    (string-locale-upcase "Stra\xDFe"))
 
 is the expression to try.
 
From: "Vladimir G. Ivanovic" <vladimir@acm.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Sun, 18 Jul 2010 12:39:04 -0700

 This is an OpenPGP/MIME signed message (RFC 2440 and 3156)
 --------------enig97517E6B8EA1F6F7FB3199C5
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Yup. The stack trace is not identical, but the place where it crashes is
 the same.
 
     Core was generated by `racket/racketcgc'.
     Program terminated with signal 11, Segmentation fault.
     #0  locale_recase (to_up=3D1, in=3D<value optimized out>,
     out=3D0x7fff33ef4d80 "", oolen=3D0x7fff33ef4dd0,
         iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
     ../../../racket/src/string.c:2964
     2964          wc[j] =3D cwc;
     (gdb) where
     #0  locale_recase (to_up=3D1, in=3D<value optimized out>,
     out=3D0x7fff33ef4d80 "", oolen=3D0x7fff33ef4dd0,
         iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
     ../../../racket/src/string.c:2964
     #1  0x000000000052eee1 in do_locale_recase (to_up=3D1,
     in=3D0x7f2d275a0220, delta=3D6, len=3D0, olen=3D0x7fff33ef4e28)
         at ../../../racket/src/string.c:3270
     #2  0x000000000052f0e4 in mz_recase (who=3D<value optimized out>,
     to_up=3D1, argc=3D<value optimized out>,
         argv=3D<value optimized out>) at ../../../racket/src/string.c:340=
 6
     #3  unicode_recase (who=3D<value optimized out>, to_up=3D1, argc=3D<v=
 alue
     optimized out>, argv=3D<value optimized out>)
         at ../../../racket/src/string.c:3450
     #4  0x0000000000443d35 in scheme_do_eval (obj=3D0x20c8b90,
     num_rands=3D1, rands=3D0x7f2d33973ef8, get_value=3D-1)
         at ../../../racket/src/eval.c:9205
     #5  0x0000000000445478 in _scheme_apply_multi_from_native
     (rator=3D<value optimized out>, argc=3D0, argv=3D0x0)
         at ../../../racket/src/schnapp.inc:84
     #6  0x00007f2d324c3b42 in ?? ()
     #7  0xfffffffffffff590 in ?? ()
     #8  0x00007f2d33949f20 in ?? ()
     #9  0x00007f2d33973f08 in ?? ()
     #10 0x0000000000483d8a in scheme_native_arity_check (closure=3D<value=
 
     optimized out>, argc=3D<value optimized out>)
         at ../../../racket/src/jit.c:13514
     #11 0x0000000000444112 in scheme_do_eval (obj=3D0x0,
     num_rands=3D865550088, rands=3D0x70, get_value=3D-1)
         at ../../../racket/src/eval.c:9464
     #12 0x000000000045dd18 in scheme_finish_apply_for_prompt
     (prompt=3D0x0, _prompt_tag=3D0x7f2d33949f20, proc=3D0x7f2d268a6c40,
         argc=3D0, argv=3D0x0) at ../../../racket/src/fun.c:6410
     #13 0x000000000045de0d in scheme_apply_for_prompt (prompt=3D<value
     optimized out>, prompt_tag=3D<value optimized out>,
         proc=3D<value optimized out>, argc=3D<value optimized out>,
     argv=3D<value optimized out>)
         at ../../../racket/src/fun.c:6490
     #14 0x000000000046821a in call_with_prompt (in_argc=3D3,
     in_argv=3D<value optimized out>) at ../../../racket/src/fun.c:6815
     #15 0x00007f2d324bdcaf in ?? ()
     #16 0x00007f2d33973f00 in ?? ()
     #17 0x00007f2d27ce2dbd in ?? ()
     #18 0x0000000000000000 in ?? ()
     (gdb) list
     2959      /* ---- re-case ---- */
     2960  =20
     2961      if (to_up) {
     2962        for (j =3D 0; j < wl; j++) {
     2963          cwc =3D towupper(wc[j]);
     2964          wc[j] =3D cwc;
     2965        }
     2966      } else {
     2967        for (j =3D 0; j < wl; j++) {
     2968          cwc =3D towlower(wc[j]);
 
 BTW, if it's interesting,
 
     $ locale
     LANG=3Den_US.UTF-8
     LC_CTYPE=3D"en_US.UTF-8"
     LC_NUMERIC=3D"en_US.UTF-8"
     LC_TIME=3D"en_US.UTF-8"
     LC_COLLATE=3D"en_US.UTF-8"
     LC_MONETARY=3D"en_US.UTF-8"
     LC_MESSAGES=3D"en_US.UTF-8"
     LC_PAPER=3D"en_US.UTF-8"
     LC_NAME=3D"en_US.UTF-8"
     LC_ADDRESS=3D"en_US.UTF-8"
     LC_TELEPHONE=3D"en_US.UTF-8"
     LC_MEASUREMENT=3D"en_US.UTF-8"
     LC_IDENTIFICATION=3D"en_US.UTF-8"
     LC_ALL=3D
 
 Finally, again, if it's interesting,
 
     http://stage.opensuse.org/repositories/home:/sublymn8r:/Racket/openSU=
 SE_11.2/
 
 
 has builds of racket for x86_64, so I assume that he/she has solved or
 worked around the problem I'm having, although he/she didn't build
 'racketcgc', only 'racket'. Running
 
     $ racket
     Welcome to Racket v5.0.
     > (parameterize ([current-locale "C"])
        (string-locale-upcase "Stra\xDFe"))
     "STRA=C3=9FE"
 
 does not crash. (I confess I don't yet know the difference between
 racket, racket3m and racketcgc.)
 
 --- Vladimir
 
 on 07/18/2010 05:26 AM Matthew Flatt said the following:
 > At Sun, 18 Jul 2010 06:22:24 -0600, Matthew Flatt wrote:
 >  =20
 >> Thanks for the very useful stack trace!
 >>
 >>  * Does evaluating
 >>      (string-locale-upcase "Stra\xDFe")
 >>    in Racket always (or often) crash?
 >>
 >>  * What is your LC_ALL, LC_CTYPE, or LANG environment variable setting=
 ?
 >>    =20
 > Actually, it may be that your locale isn't relevant and that
 >
 >  (parameterize ([current-locale "C"])
 >    (string-locale-upcase "Stra\xDFe"))
 >
 > is the expression to try.
 >
 >  =20
 
 --=20
 Vladimir G. Ivanovic                            http://www.leonora.org
 +1 650 450 4101                                       vladimir@acm.org
 
 
 
 --------------enig97517E6B8EA1F6F7FB3199C5
 Content-Type: application/pgp-signature; name="signature.asc"
 Content-Description: OpenPGP digital signature
 Content-Disposition: attachment; filename="signature.asc"
 
 -----BEGIN PGP SIGNATURE-----
 Version: GnuPG v2.0.14 (GNU/Linux)
 Comment: Using GnuPG with Fedora - http://enigmail.mozdev.org/
 
 iEYEARECAAYFAkxDWFgACgkQ+7fzz8ZmTJPoxgCfX7CjBl/O9BpJfeg7keRzUVB2
 j7EAn01GmhX8gsZAoq9YfgBB5i0p04dM
 =aRPp
 -----END PGP SIGNATURE-----
 
 --------------enig97517E6B8EA1F6F7FB3199C5--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Vladimir G. Ivanovic" <vladimir@acm.org>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Mon, 19 Jul 2010 17:11:45 -0600

 Unfortunately, all of your answers are the opposite of what I hoped,
 and I haven't been able to replicate the error.
 
 We set up an x86_64 Fedora 12 installation (thanks to Kevin Tew), and
 the build and examples worked ok. Also, I'm having trouble seeing how a
 crash at that point in the code is possible, since `j' is bounded by
 `wl', and `wl' is used for the size of allocating `wc'.
 
 Shooting in the dark, but what does `ldd' produce on `racket' or
 `racket3m'? For me, it's
 
 	linux-vdso.so.1 =3D>  (0x00007fffa7bc5000)
 	libdl.so.2 =3D> /lib64/libdl.so.2 (0x00000034e5c00000)
 	libm.so.6 =3D> /lib64/libm.so.6 (0x00000034e6800000)
 	libpthread.so.0 =3D> /lib64/libpthread.so.0 (0x00000034e6000000)
 	libc.so.6 =3D> /lib64/libc.so.6 (0x00000034e5800000)
 	/lib64/ld-linux-x86-64.so.2 (0x00000034e5400000)
 
 
 At Sun, 18 Jul 2010 12:39:04 -0700, "Vladimir G. Ivanovic" wrote:
 > Yup. The stack trace is not identical, but the place where it crashes is
 > the same.
 >=20
 >     Core was generated by `racket/racketcgc'.
 >     Program terminated with signal 11, Segmentation fault.
 >     #0  locale_recase (to_up=3D1, in=3D<value optimized out>,
 >     out=3D0x7fff33ef4d80 "", oolen=3D0x7fff33ef4dd0,
 >         iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
 >     ../../../racket/src/string.c:2964
 >     2964          wc[j] =3D cwc;
 >     (gdb) where
 >     #0  locale_recase (to_up=3D1, in=3D<value optimized out>,
 >     out=3D0x7fff33ef4d80 "", oolen=3D0x7fff33ef4dd0,
 >         iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
 >     ../../../racket/src/string.c:2964
 >     #1  0x000000000052eee1 in do_locale_recase (to_up=3D1,
 >     in=3D0x7f2d275a0220, delta=3D6, len=3D0, olen=3D0x7fff33ef4e28)
 >         at ../../../racket/src/string.c:3270
 >     #2  0x000000000052f0e4 in mz_recase (who=3D<value optimized out>,
 >     to_up=3D1, argc=3D<value optimized out>,
 >         argv=3D<value optimized out>) at ../../../racket/src/string.c:340=
 6
 >     #3  unicode_recase (who=3D<value optimized out>, to_up=3D1, argc=3D<v=
 alue
 >     optimized out>, argv=3D<value optimized out>)
 >         at ../../../racket/src/string.c:3450
 >     #4  0x0000000000443d35 in scheme_do_eval (obj=3D0x20c8b90,
 >     num_rands=3D1, rands=3D0x7f2d33973ef8, get_value=3D-1)
 >         at ../../../racket/src/eval.c:9205
 >     #5  0x0000000000445478 in _scheme_apply_multi_from_native
 >     (rator=3D<value optimized out>, argc=3D0, argv=3D0x0)
 >         at ../../../racket/src/schnapp.inc:84
 >     #6  0x00007f2d324c3b42 in ?? ()
 >     #7  0xfffffffffffff590 in ?? ()
 >     #8  0x00007f2d33949f20 in ?? ()
 >     #9  0x00007f2d33973f08 in ?? ()
 >     #10 0x0000000000483d8a in scheme_native_arity_check (closure=3D<value=
 
 >     optimized out>, argc=3D<value optimized out>)
 >         at ../../../racket/src/jit.c:13514
 >     #11 0x0000000000444112 in scheme_do_eval (obj=3D0x0,
 >     num_rands=3D865550088, rands=3D0x70, get_value=3D-1)
 >         at ../../../racket/src/eval.c:9464
 >     #12 0x000000000045dd18 in scheme_finish_apply_for_prompt
 >     (prompt=3D0x0, _prompt_tag=3D0x7f2d33949f20, proc=3D0x7f2d268a6c40,
 >         argc=3D0, argv=3D0x0) at ../../../racket/src/fun.c:6410
 >     #13 0x000000000045de0d in scheme_apply_for_prompt (prompt=3D<value
 >     optimized out>, prompt_tag=3D<value optimized out>,
 >         proc=3D<value optimized out>, argc=3D<value optimized out>,
 >     argv=3D<value optimized out>)
 >         at ../../../racket/src/fun.c:6490
 >     #14 0x000000000046821a in call_with_prompt (in_argc=3D3,
 >     in_argv=3D<value optimized out>) at ../../../racket/src/fun.c:6815
 >     #15 0x00007f2d324bdcaf in ?? ()
 >     #16 0x00007f2d33973f00 in ?? ()
 >     #17 0x00007f2d27ce2dbd in ?? ()
 >     #18 0x0000000000000000 in ?? ()
 >     (gdb) list
 >     2959      /* ---- re-case ---- */
 >     2960  =20
 >     2961      if (to_up) {
 >     2962        for (j =3D 0; j < wl; j++) {
 >     2963          cwc =3D towupper(wc[j]);
 >     2964          wc[j] =3D cwc;
 >     2965        }
 >     2966      } else {
 >     2967        for (j =3D 0; j < wl; j++) {
 >     2968          cwc =3D towlower(wc[j]);
 >=20
 > BTW, if it's interesting,
 >=20
 >     $ locale
 >     LANG=3Den_US.UTF-8
 >     LC_CTYPE=3D"en_US.UTF-8"
 >     LC_NUMERIC=3D"en_US.UTF-8"
 >     LC_TIME=3D"en_US.UTF-8"
 >     LC_COLLATE=3D"en_US.UTF-8"
 >     LC_MONETARY=3D"en_US.UTF-8"
 >     LC_MESSAGES=3D"en_US.UTF-8"
 >     LC_PAPER=3D"en_US.UTF-8"
 >     LC_NAME=3D"en_US.UTF-8"
 >     LC_ADDRESS=3D"en_US.UTF-8"
 >     LC_TELEPHONE=3D"en_US.UTF-8"
 >     LC_MEASUREMENT=3D"en_US.UTF-8"
 >     LC_IDENTIFICATION=3D"en_US.UTF-8"
 >     LC_ALL=3D
 >=20
 > Finally, again, if it's interesting,
 >=20
 >    =20
 > http://stage.opensuse.org/repositories/home:/sublymn8r:/Racket/openSUSE_1=
 1.2/
 >=20
 >=20
 > has builds of racket for x86_64, so I assume that he/she has solved or
 > worked around the problem I'm having, although he/she didn't build
 > 'racketcgc', only 'racket'. Running
 >=20
 >     $ racket
 >     Welcome to Racket v5.0.
 >     > (parameterize ([current-locale "C"])
 >        (string-locale-upcase "Stra\xDFe"))
 >     "STRA=C3=9FE"
 >=20
 > does not crash. (I confess I don't yet know the difference between
 > racket, racket3m and racketcgc.)
 >=20
 > --- Vladimir
 >=20
 > on 07/18/2010 05:26 AM Matthew Flatt said the following:
 > > At Sun, 18 Jul 2010 06:22:24 -0600, Matthew Flatt wrote:
 > >  =20
 > >> Thanks for the very useful stack trace!
 > >>
 > >>  * Does evaluating
 > >>      (string-locale-upcase "Stra\xDFe")
 > >>    in Racket always (or often) crash?
 > >>
 > >>  * What is your LC_ALL, LC_CTYPE, or LANG environment variable setting=
 ?
 > >>    =20
 > > Actually, it may be that your locale isn't relevant and that
 > >
 > >  (parameterize ([current-locale "C"])
 > >    (string-locale-upcase "Stra\xDFe"))
 > >
 > > is the expression to try.
 > >
 > >  =20
 >=20
 > --=20
 > Vladimir G. Ivanovic                            http://www.leonora.org
 > +1 650 450 4101                                       vladimir@acm.org
 >=20
 >=20
 >=20
 > -------------------------------------------------------------------------=
 -----
 > [application/#f "signature.asc"] [~/Desktop & open] [~/Temp & open]
From: "Vladimir G. Ivanovic" <vladimir@acm.org>
To: Matthew Flatt <mflatt@cs.utah.edu>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Mon, 19 Jul 2010 21:22:05 -0700

 This is an OpenPGP/MIME signed message (RFC 2440 and 3156)
 --------------enig982C439138ADEDB50F62F5A3
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Ooops... I meant Fedora 13. It probably doesn't matter, but still...
 
     $ ldd racket/racket
     ldd: racket/racket: No such file or directory
     chopin build $ ldd racket/racketcgc
         linux-vdso.so.1 =3D>  (0x00007fff7fbff000)
         libdl.so.2 =3D> /lib64/libdl.so.2 (0x000000377b400000)
         libm.so.6 =3D> /lib64/libm.so.6 (0x000000377ac00000)
         libpthread.so.0 =3D> /lib64/libpthread.so.0 (0x000000377b000000)
         libc.so.6 =3D> /lib64/libc.so.6 (0x000000377a800000)
         /lib64/ld-linux-x86-64.so.2 (0x000000377a400000)
 
 
 Identical to yours, except that I'm running 'racketcgc' and you're using
 just plain ole 'racket'. (I configured with "--prefix=3D/usr/local/racket=
 
 --enable-places --enable-cgcdefault --enable-backtrace
 --enable-gcplacestest".)
 
 But it seems there's something fishy with the call to locate_recase().
 The arg 'c' has been optimized away ??? (So. what was the result of calli=
 ng
 
     do_convert((iconv_t)-1, MZ_UCS4_NAME, NULL, 1,
                (char *)in, 4 * delta, 4 * len,
                buf, 0, MZ_SC_BUF_SIZE - 1,
                1 /* grow */, 0, 1 /* terminator size */,
                &used, &clen,
                &status);
 
 which should have been the value of 'c' used in the call to locale_recase=
 ()?
 
 I'm going to clean everything, pull down the latest sources, and run
 just '../configure'.
 
 --- Vladimir
 
 
 on 07/19/2010 04:11 PM Matthew Flatt said the following:
 > Unfortunately, all of your answers are the opposite of what I hoped,
 > and I haven't been able to replicate the error.
 >
 > We set up an x86_64 Fedora 12 installation (thanks to Kevin Tew), and
 > the build and examples worked ok. Also, I'm having trouble seeing how a=
 
 > crash at that point in the code is possible, since `j' is bounded by
 > `wl', and `wl' is used for the size of allocating `wc'.
 >
 > Shooting in the dark, but what does `ldd' produce on `racket' or
 > `racket3m'? For me, it's
 >
 > 	linux-vdso.so.1 =3D>  (0x00007fffa7bc5000)
 > 	libdl.so.2 =3D> /lib64/libdl.so.2 (0x00000034e5c00000)
 > 	libm.so.6 =3D> /lib64/libm.so.6 (0x00000034e6800000)
 > 	libpthread.so.0 =3D> /lib64/libpthread.so.0 (0x00000034e6000000)
 > 	libc.so.6 =3D> /lib64/libc.so.6 (0x00000034e5800000)
 > 	/lib64/ld-linux-x86-64.so.2 (0x00000034e5400000)
 >
 >
 > At Sun, 18 Jul 2010 12:39:04 -0700, "Vladimir G. Ivanovic" wrote:
 >  =20
 >> Yup. The stack trace is not identical, but the place where it crashes =
 is
 >> the same.
 >>
 >>     Core was generated by `racket/racketcgc'.
 >>     Program terminated with signal 11, Segmentation fault.
 >>     #0  locale_recase (to_up=3D1, in=3D<value optimized out>,
 >>     out=3D0x7fff33ef4d80 "", oolen=3D0x7fff33ef4dd0,
 >>         iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
 >>     ../../../racket/src/string.c:2964
 >>     2964          wc[j] =3D cwc;
 >>     (gdb) where
 >>     #0  locale_recase (to_up=3D1, in=3D<value optimized out>,
 >>     out=3D0x7fff33ef4d80 "", oolen=3D0x7fff33ef4dd0,
 >>         iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
 >>     ../../../racket/src/string.c:2964
 >>     #1  0x000000000052eee1 in do_locale_recase (to_up=3D1,
 >>     in=3D0x7f2d275a0220, delta=3D6, len=3D0, olen=3D0x7fff33ef4e28)
 >>         at ../../../racket/src/string.c:3270
 >>     #2  0x000000000052f0e4 in mz_recase (who=3D<value optimized out>,
 >>     to_up=3D1, argc=3D<value optimized out>,
 >>         argv=3D<value optimized out>) at ../../../racket/src/string.c:=
 3406
 >>     #3  unicode_recase (who=3D<value optimized out>, to_up=3D1, argc=3D=
 <value
 >>     optimized out>, argv=3D<value optimized out>)
 >>         at ../../../racket/src/string.c:3450
 >>     #4  0x0000000000443d35 in scheme_do_eval (obj=3D0x20c8b90,
 >>     num_rands=3D1, rands=3D0x7f2d33973ef8, get_value=3D-1)
 >>         at ../../../racket/src/eval.c:9205
 >>     #5  0x0000000000445478 in _scheme_apply_multi_from_native
 >>     (rator=3D<value optimized out>, argc=3D0, argv=3D0x0)
 >>         at ../../../racket/src/schnapp.inc:84
 >>     #6  0x00007f2d324c3b42 in ?? ()
 >>     #7  0xfffffffffffff590 in ?? ()
 >>     #8  0x00007f2d33949f20 in ?? ()
 >>     #9  0x00007f2d33973f08 in ?? ()
 >>     #10 0x0000000000483d8a in scheme_native_arity_check (closure=3D<va=
 lue
 >>     optimized out>, argc=3D<value optimized out>)
 >>         at ../../../racket/src/jit.c:13514
 >>     #11 0x0000000000444112 in scheme_do_eval (obj=3D0x0,
 >>     num_rands=3D865550088, rands=3D0x70, get_value=3D-1)
 >>         at ../../../racket/src/eval.c:9464
 >>     #12 0x000000000045dd18 in scheme_finish_apply_for_prompt
 >>     (prompt=3D0x0, _prompt_tag=3D0x7f2d33949f20, proc=3D0x7f2d268a6c40=
 ,
 >>         argc=3D0, argv=3D0x0) at ../../../racket/src/fun.c:6410
 >>     #13 0x000000000045de0d in scheme_apply_for_prompt (prompt=3D<value=
 
 >>     optimized out>, prompt_tag=3D<value optimized out>,
 >>         proc=3D<value optimized out>, argc=3D<value optimized out>,
 >>     argv=3D<value optimized out>)
 >>         at ../../../racket/src/fun.c:6490
 >>     #14 0x000000000046821a in call_with_prompt (in_argc=3D3,
 >>     in_argv=3D<value optimized out>) at ../../../racket/src/fun.c:6815=
 
 >>     #15 0x00007f2d324bdcaf in ?? ()
 >>     #16 0x00007f2d33973f00 in ?? ()
 >>     #17 0x00007f2d27ce2dbd in ?? ()
 >>     #18 0x0000000000000000 in ?? ()
 >>     (gdb) list
 >>     2959      /* ---- re-case ---- */
 >>     2960  =20
 >>     2961      if (to_up) {
 >>     2962        for (j =3D 0; j < wl; j++) {
 >>     2963          cwc =3D towupper(wc[j]);
 >>     2964          wc[j] =3D cwc;
 >>     2965        }
 >>     2966      } else {
 >>     2967        for (j =3D 0; j < wl; j++) {
 >>     2968          cwc =3D towlower(wc[j]);
 >>
 >> BTW, if it's interesting,
 >>
 >>     $ locale
 >>     LANG=3Den_US.UTF-8
 >>     LC_CTYPE=3D"en_US.UTF-8"
 >>     LC_NUMERIC=3D"en_US.UTF-8"
 >>     LC_TIME=3D"en_US.UTF-8"
 >>     LC_COLLATE=3D"en_US.UTF-8"
 >>     LC_MONETARY=3D"en_US.UTF-8"
 >>     LC_MESSAGES=3D"en_US.UTF-8"
 >>     LC_PAPER=3D"en_US.UTF-8"
 >>     LC_NAME=3D"en_US.UTF-8"
 >>     LC_ADDRESS=3D"en_US.UTF-8"
 >>     LC_TELEPHONE=3D"en_US.UTF-8"
 >>     LC_MEASUREMENT=3D"en_US.UTF-8"
 >>     LC_IDENTIFICATION=3D"en_US.UTF-8"
 >>     LC_ALL=3D
 >>
 >> Finally, again, if it's interesting,
 >>
 >>    =20
 >> http://stage.opensuse.org/repositories/home:/sublymn8r:/Racket/openSUS=
 E_11.2/
 >>
 >>
 >> has builds of racket for x86_64, so I assume that he/she has solved or=
 
 >> worked around the problem I'm having, although he/she didn't build
 >> 'racketcgc', only 'racket'. Running
 >>
 >>     $ racket
 >>     Welcome to Racket v5.0.
 >>     > (parameterize ([current-locale "C"])
 >>        (string-locale-upcase "Stra\xDFe"))
 >>     "STRA=C3=9FE"
 >>
 >> does not crash. (I confess I don't yet know the difference between
 >> racket, racket3m and racketcgc.)
 >>
 >> --- Vladimir
 >>
 >> on 07/18/2010 05:26 AM Matthew Flatt said the following:
 >>    =20
 >>> At Sun, 18 Jul 2010 06:22:24 -0600, Matthew Flatt wrote:
 >>>  =20
 >>>      =20
 >>>> Thanks for the very useful stack trace!
 >>>>
 >>>>  * Does evaluating
 >>>>      (string-locale-upcase "Stra\xDFe")
 >>>>    in Racket always (or often) crash?
 >>>>
 >>>>  * What is your LC_ALL, LC_CTYPE, or LANG environment variable setti=
 ng?
 >>>>    =20
 >>>>        =20
 >>> Actually, it may be that your locale isn't relevant and that
 >>>
 >>>  (parameterize ([current-locale "C"])
 >>>    (string-locale-upcase "Stra\xDFe"))
 >>>
 >>> is the expression to try.
 >>>
 >>>  =20
 >>>      =20
 >> --=20
 >> Vladimir G. Ivanovic                            http://www.leonora.org=
 
 >> +1 650 450 4101                                       vladimir@acm.org=
 
 >>
 >>
 >>
 >> ----------------------------------------------------------------------=
 --------
 >> [application/#f "signature.asc"] [~/Desktop & open] [~/Temp & open]
 >>    =20
 
 --=20
 Vladimir G. Ivanovic                            http://www.leonora.org
 +1 650 450 4101                                       vladimir@acm.org
 
 
 
 --------------enig982C439138ADEDB50F62F5A3
 Content-Type: application/pgp-signature; name="signature.asc"
 Content-Description: OpenPGP digital signature
 Content-Disposition: attachment; filename="signature.asc"
 
 -----BEGIN PGP SIGNATURE-----
 Version: GnuPG v2.0.14 (GNU/Linux)
 Comment: Using GnuPG with Fedora - http://enigmail.mozdev.org/
 
 iEYEARECAAYFAkxFJG0ACgkQ+7fzz8ZmTJMUzQCdHUf20hfTxq5zFYw36NimbaXp
 XUMAnRgAiyjDhD8X+8CxJNsmCVNSaCyv
 =8AWY
 -----END PGP SIGNATURE-----
 
 --------------enig982C439138ADEDB50F62F5A3--
From: Matthew Flatt <mflatt@cs.utah.edu>
To: "Vladimir G. Ivanovic" <vladimir@acm.org>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11023: make fails on Fedora 12 with SIGSEGV
 MAPERR si_code 1 fault on addr 0x8e4000
Date: Tue, 20 Jul 2010 12:26:15 -0600

 Still no crash for me with Fedora 13.
 
 I have one idea about how a crash might happen, though. I wonder if
 it's possible that mbsrtowcs() has a different idea about the size of
 `mbstate_t' than Racket. Since Racket stack-allocates `state', if
 mbsrtowcs() thinks that it's bigger and overwrites the object, then
 maybe it could corrupt the `wc' pointer.
 
 This is another long shot, but does changing the `state' declaration
 to, say, `state[10]' have any effect?
 
 At Mon, 19 Jul 2010 21:22:05 -0700, "Vladimir G. Ivanovic" wrote:
 > Ooops... I meant Fedora 13. It probably doesn't matter, but still...
 >=20
 >     $ ldd racket/racket
 >     ldd: racket/racket: No such file or directory
 >     chopin build $ ldd racket/racketcgc
 >         linux-vdso.so.1 =3D>  (0x00007fff7fbff000)
 >         libdl.so.2 =3D> /lib64/libdl.so.2 (0x000000377b400000)
 >         libm.so.6 =3D> /lib64/libm.so.6 (0x000000377ac00000)
 >         libpthread.so.0 =3D> /lib64/libpthread.so.0 (0x000000377b000000)
 >         libc.so.6 =3D> /lib64/libc.so.6 (0x000000377a800000)
 >         /lib64/ld-linux-x86-64.so.2 (0x000000377a400000)
 >=20
 >=20
 > Identical to yours, except that I'm running 'racketcgc' and you're using
 > just plain ole 'racket'. (I configured with "--prefix=3D/usr/local/racket=
 
 > --enable-places --enable-cgcdefault --enable-backtrace
 > --enable-gcplacestest".)
 >=20
 > But it seems there's something fishy with the call to locate_recase().
 > The arg 'c' has been optimized away ??? (So. what was the result of calli=
 ng
 >=20
 >     do_convert((iconv_t)-1, MZ_UCS4_NAME, NULL, 1,
 >                (char *)in, 4 * delta, 4 * len,
 >                buf, 0, MZ_SC_BUF_SIZE - 1,
 >                1 /* grow */, 0, 1 /* terminator size */,
 >                &used, &clen,
 >                &status);
 >=20
 > which should have been the value of 'c' used in the call to locale_recase=
 ()?
 >=20
 > I'm going to clean everything, pull down the latest sources, and run
 > just '../configure'.
 >=20
 > --- Vladimir
 >=20
 >=20
 > on 07/19/2010 04:11 PM Matthew Flatt said the following:
 > > Unfortunately, all of your answers are the opposite of what I hoped,
 > > and I haven't been able to replicate the error.
 > >
 > > We set up an x86_64 Fedora 12 installation (thanks to Kevin Tew), and
 > > the build and examples worked ok. Also, I'm having trouble seeing how a=
 
 > > crash at that point in the code is possible, since `j' is bounded by
 > > `wl', and `wl' is used for the size of allocating `wc'.
 > >
 > > Shooting in the dark, but what does `ldd' produce on `racket' or
 > > `racket3m'? For me, it's
 > >
 > > 	linux-vdso.so.1 =3D>  (0x00007fffa7bc5000)
 > > 	libdl.so.2 =3D> /lib64/libdl.so.2 (0x00000034e5c00000)
 > > 	libm.so.6 =3D> /lib64/libm.so.6 (0x00000034e6800000)
 > > 	libpthread.so.0 =3D> /lib64/libpthread.so.0 (0x00000034e6000000)
 > > 	libc.so.6 =3D> /lib64/libc.so.6 (0x00000034e5800000)
 > > 	/lib64/ld-linux-x86-64.so.2 (0x00000034e5400000)
 > >
 > >
 > > At Sun, 18 Jul 2010 12:39:04 -0700, "Vladimir G. Ivanovic" wrote:
 > >  =20
 > >> Yup. The stack trace is not identical, but the place where it crashes =
 is
 > >> the same.
 > >>
 > >>     Core was generated by `racket/racketcgc'.
 > >>     Program terminated with signal 11, Segmentation fault.
 > >>     #0  locale_recase (to_up=3D1, in=3D<value optimized out>,
 > >>     out=3D0x7fff33ef4d80 "", oolen=3D0x7fff33ef4dd0,
 > >>         iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
 > >>     ../../../racket/src/string.c:2964
 > >>     2964          wc[j] =3D cwc;
 > >>     (gdb) where
 > >>     #0  locale_recase (to_up=3D1, in=3D<value optimized out>,
 > >>     out=3D0x7fff33ef4d80 "", oolen=3D0x7fff33ef4dd0,
 > >>         iilen=3D<value optimized out>, iolen=3D31, od=3D0, id=3D0) at
 > >>     ../../../racket/src/string.c:2964
 > >>     #1  0x000000000052eee1 in do_locale_recase (to_up=3D1,
 > >>     in=3D0x7f2d275a0220, delta=3D6, len=3D0, olen=3D0x7fff33ef4e28)
 > >>         at ../../../racket/src/string.c:3270
 > >>     #2  0x000000000052f0e4 in mz_recase (who=3D<value optimized out>,
 > >>     to_up=3D1, argc=3D<value optimized out>,
 > >>         argv=3D<value optimized out>) at ../../../racket/src/string.c:=
 3406
 > >>     #3  unicode_recase (who=3D<value optimized out>, to_up=3D1, argc=
 =3D<value
 > >>     optimized out>, argv=3D<value optimized out>)
 > >>         at ../../../racket/src/string.c:3450
 > >>     #4  0x0000000000443d35 in scheme_do_eval (obj=3D0x20c8b90,
 > >>     num_rands=3D1, rands=3D0x7f2d33973ef8, get_value=3D-1)
 > >>         at ../../../racket/src/eval.c:9205
 > >>     #5  0x0000000000445478 in _scheme_apply_multi_from_native
 > >>     (rator=3D<value optimized out>, argc=3D0, argv=3D0x0)
 > >>         at ../../../racket/src/schnapp.inc:84
 > >>     #6  0x00007f2d324c3b42 in ?? ()
 > >>     #7  0xfffffffffffff590 in ?? ()
 > >>     #8  0x00007f2d33949f20 in ?? ()
 > >>     #9  0x00007f2d33973f08 in ?? ()
 > >>     #10 0x0000000000483d8a in scheme_native_arity_check (closure=3D<va=
 lue
 > >>     optimized out>, argc=3D<value optimized out>)
 > >>         at ../../../racket/src/jit.c:13514
 > >>     #11 0x0000000000444112 in scheme_do_eval (obj=3D0x0,
 > >>     num_rands=3D865550088, rands=3D0x70, get_value=3D-1)
 > >>         at ../../../racket/src/eval.c:9464
 > >>     #12 0x000000000045dd18 in scheme_finish_apply_for_prompt
 > >>     (prompt=3D0x0, _prompt_tag=3D0x7f2d33949f20, proc=3D0x7f2d268a6c40=
 ,
 > >>         argc=3D0, argv=3D0x0) at ../../../racket/src/fun.c:6410
 > >>     #13 0x000000000045de0d in scheme_apply_for_prompt (prompt=3D<value=
 
 > >>     optimized out>, prompt_tag=3D<value optimized out>,
 > >>         proc=3D<value optimized out>, argc=3D<value optimized out>,
 > >>     argv=3D<value optimized out>)
 > >>         at ../../../racket/src/fun.c:6490
 > >>     #14 0x000000000046821a in call_with_prompt (in_argc=3D3,
 > >>     in_argv=3D<value optimized out>) at ../../../racket/src/fun.c:6815=
 
 > >>     #15 0x00007f2d324bdcaf in ?? ()
 > >>     #16 0x00007f2d33973f00 in ?? ()
 > >>     #17 0x00007f2d27ce2dbd in ?? ()
 > >>     #18 0x0000000000000000 in ?? ()
 > >>     (gdb) list
 > >>     2959      /* ---- re-case ---- */
 > >>     2960  =20
 > >>     2961      if (to_up) {
 > >>     2962        for (j =3D 0; j < wl; j++) {
 > >>     2963          cwc =3D towupper(wc[j]);
 > >>     2964          wc[j] =3D cwc;
 > >>     2965        }
 > >>     2966      } else {
 > >>     2967        for (j =3D 0; j < wl; j++) {
 > >>     2968          cwc =3D towlower(wc[j]);
 > >>
 > >> BTW, if it's interesting,
 > >>
 > >>     $ locale
 > >>     LANG=3Den_US.UTF-8
 > >>     LC_CTYPE=3D"en_US.UTF-8"
 > >>     LC_NUMERIC=3D"en_US.UTF-8"
 > >>     LC_TIME=3D"en_US.UTF-8"
 > >>     LC_COLLATE=3D"en_US.UTF-8"
 > >>     LC_MONETARY=3D"en_US.UTF-8"
 > >>     LC_MESSAGES=3D"en_US.UTF-8"
 > >>     LC_PAPER=3D"en_US.UTF-8"
 > >>     LC_NAME=3D"en_US.UTF-8"
 > >>     LC_ADDRESS=3D"en_US.UTF-8"
 > >>     LC_TELEPHONE=3D"en_US.UTF-8"
 > >>     LC_MEASUREMENT=3D"en_US.UTF-8"
 > >>     LC_IDENTIFICATION=3D"en_US.UTF-8"
 > >>     LC_ALL=3D
 > >>
 > >> Finally, again, if it's interesting,
 > >>
 > >>    =20
 > >>=20
 > http://stage.opensuse.org/repositories/home:/sublymn8r:/Racket/openSUSE_1=
 1.2/
 > >>
 > >>
 > >> has builds of racket for x86_64, so I assume that he/she has solved or=
 
 > >> worked around the problem I'm having, although he/she didn't build
 > >> 'racketcgc', only 'racket'. Running
 > >>
 > >>     $ racket
 > >>     Welcome to Racket v5.0.
 > >>     > (parameterize ([current-locale "C"])
 > >>        (string-locale-upcase "Stra\xDFe"))
 > >>     "STRA=C3=9FE"
 > >>
 > >> does not crash. (I confess I don't yet know the difference between
 > >> racket, racket3m and racketcgc.)
 > >>
 > >> --- Vladimir
 > >>
 > >> on 07/18/2010 05:26 AM Matthew Flatt said the following:
 > >>    =20
 > >>> At Sun, 18 Jul 2010 06:22:24 -0600, Matthew Flatt wrote:
 > >>>  =20
 > >>>      =20
 > >>>> Thanks for the very useful stack trace!
 > >>>>
 > >>>>  * Does evaluating
 > >>>>      (string-locale-upcase "Stra\xDFe")
 > >>>>    in Racket always (or often) crash?
 > >>>>
 > >>>>  * What is your LC_ALL, LC_CTYPE, or LANG environment variable setti=
 ng?
 > >>>>    =20
 > >>>>        =20
 > >>> Actually, it may be that your locale isn't relevant and that
 > >>>
 > >>>  (parameterize ([current-locale "C"])
 > >>>    (string-locale-upcase "Stra\xDFe"))
 > >>>
 > >>> is the expression to try.
 > >>>
 > >>>  =20
 > >>>      =20
 > >> --=20
 > >> Vladimir G. Ivanovic                            http://www.leonora.org=
 
 > >> +1 650 450 4101                                       vladimir@acm.org=
 
 > >>
 > >>
 > >>
 > >>=20
 > -------------------------------------------------------------------------=
 -----
 > >> [application/#f "signature.asc"] [~/Desktop & open] [~/Temp & open]
 > >>    =20
 >=20
 > --=20
 > Vladimir G. Ivanovic                            http://www.leonora.org
 > +1 650 450 4101                                       vladimir@acm.org
 >=20
 >=20
 >=20
 > -------------------------------------------------------------------------=
 -----
 > [application/#f "signature.asc"] [~/Desktop & open] [~/Temp & open]

