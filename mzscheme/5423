From schlie@attbi.com  Sun May 26 10:49:33 2002
Received: from localhost (localhost.localdomain [127.0.0.1])
	by champlain.ccs.neu.edu (8.9.3/8.8.7) with ESMTP id KAA02348
	for <plt-gnats>; Sun, 26 May 2002 10:49:32 -0400
Message-Id: <200205261449.KAA02348@champlain.ccs.neu.edu>
Date: Sun, 26 May 2002 10:49:32 -0400
From: Paul Schlie <schlie@attbi.com>
To: bugs@plt-scheme.org
Subject: toplevel procedure name inherits local let/letrec symbolic name binding

>Number:         5423
>Category:       mzscheme
>Synopsis:       toplevel procedure name inherits local let/letrec symbolic name binding
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    mflatt
>State:          closed
>Class:          sw-bug
>Submitter-Id:   unknown
>Arrival-Date:   Sun May 26 10:50:01 EDT 2002
>Closed-Date:    Tue Jun 11 13:37:23 EDT 2002
>Last-Modified:  Tue Jun 11 13:37:23 EDT 2002
>Originator:     Paul Schlie
>Release:        200alpha19-cvs26may2002
>Organization:
titan
>Environment:
macosx "10.14 <unknown machine>" (ppc-macosx) (get-display-depth) = 16
Docs Installed:
(".DS_Store" "advanced" "beginning" "beginning-abbr" "drscheme" "framework" "help" "icons" "insidemz" "intermediate" "intermediate-lambda" "misclib" "mred" "mzc" "mzlib" "mzscheme" "r5rs" "t-y-scheme" "teachpack" "tex2page" "tools")
Collections: 
(("/Users/paul/Desktop/plt-cvs/plt/bin/MrEd.app/Contents/MacOS/../../../../collects" (".DS_Store" "afm" "algol60" "browser" "compiler" "CVS" "cvs-time-stamp" "defaults" "doc" "drjava" "drscheme" "dynext" "eopl" "errortrace" "framework" "games" "graphics" "help" "hierlist" "htdp" "html" "icons" "lang" "launcher" "make" "mred" "mrflow" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "parser-tools" "readline" "setup" "sirmail" "slatex" "slibinit" "srpersist" "stepper" "string-constants" "syntax" "tests" "tex2page" "texpict" "typeset" "version" "waterworld" "web-server" "xml")))
Human Language: english
>Description:
- as defined in summary,
(but uncertain if it is the desired behavior for some reason)

>How-To-Repeat:
enter:
> (define x (let ((y (lambda (a) a))) y))
> x
> #<procedure:y>

was expecting #<procedure:x>

> (+ 3 (x))
> procedure y: expects 1 argument, given 0

was expecting "procedure x: ..." error message

>Fix:

>Release-Note:

>Audit-Trail:
Responsible-Changed-From-To: steck->mflatt
Responsible-Changed-By: mflatt
Responsible-Changed-When: Tue Jun 11 13:37:23 2002
Responsible-Changed-Why:
    mz
State-Changed-From-To: open->closed
State-Changed-By: mflatt
State-Changed-When: Tue Jun 11 13:37:23 2002
State-Changed-Why:
    This behavior is now documented. 
    
    The argument in favor is
    that it always gives you local control over the
    name. For exaple, we often add an extra `let' around a
    procedure just to set its name, because the
    `define'd name is private but the value is exposed.
    
    Thanks for pointing out the documentation hole,
    Matthew
>Unformatted:

