From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat May 19 23:48:04 2012
Received: from mail-ob0-f172.google.com (mail-ob0-f172.google.com [209.85.214.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q4K3m0vN003775
	for <bugs@bugs.plt-scheme.org>; Sat, 19 May 2012 23:48:00 -0400
Message-Id: <201205200347.q4K3lvAJ003769@champlain.ccs.neu.edu>
Date: Sat, 19 May 2012 23:47:57 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: Match does not support or patterns binding different variables well

>Number:         12776
>Category:       mzscheme
>Synopsis:       Match does not support or patterns binding different variables well
>Class:          sw-bug
>Responsible:    samth
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Sat May 19 23:52:01 -0400 2012
>Last-Modified:  Sun Jun 03 13:44:36 -0400 2012
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.2.0.1
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27
>Description:
I want to be able to match two variants in one pattern using an or pattern. In one of the variants there are more identifiers to bind, so in the other one I want those variables to be bound to false. There is not an easy way to do this that is sensible.

Example: Match one or two element lists, bind x and y to the elements and if there is only one element bind y to #f.

(match (list 2)
 ((or (list x) (list x y))
  (printf "X=~a, Y=~a~n" x y)))

The is no nice pattern to use instead of (list x) that gets what I want.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12776: Match does not support or patterns
 binding different variables well
Date: Sun, 3 Jun 2012 11:52:01 -0400

 On Sat, May 19, 2012 at 11:52 PM,  <eric.n.dobson@gmail.com> wrote:
 >
 > I want to be able to match two variants in one pattern using an or pattern. In one of the variants there are more identifiers to bind, so in the other one I want those variables to be bound to false. There is not an easy way to do this that is sensible.
 >
 > Example: Match one or two element lists, bind x and y to the elements and if there is only one element bind y to #f.
 >
 > (match (list 2)
 >  ((or (list x) (list x y))
 >  (printf "X=~a, Y=~a~n" x y)))
 >
 > The is no nice pattern to use instead of (list x) that gets what I want.
 
 How about:
 
 #lang racket
 
 (define-match-expander bind
   (λ (stx)
     (syntax-case stx ()
       [(_ pat expr) #'(app (λ (x) expr) pat)]
       [(_ pat) #'(app (λ (x) #f) pat)])))
 
 (match (list 2)
  ((or (and (bind y) (list x)) (list x y))
  (printf "X=~a, Y=~a~n" x y)))
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
 

Responsible changed from "nobody" to "samth" by samth at Sun, 03 Jun 2012 13:44:36 -0400
Reason>>> match

