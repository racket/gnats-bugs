From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue May 10 00:46:50 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p4A4klgx028712
	for <bugs@bugs.plt-scheme.org>; Tue, 10 May 2011 00:46:47 -0400
Message-Id: <201105100446.p4A4kgu3028707@champlain.ccs.neu.edu>
Date: Tue, 10 May 2011 00:46:42 -0400
From: dyoo@cs.wpi.edu
To: bugs@racket-lang.org
Subject: compiler/zo-parse: the name of lams and case-lams can be '()

>Number:         11909
>Category:       mzscheme
>Synopsis:       compiler/zo-parse: the name of lams and case-lams can be '()
>Class:          doc-bug
>Responsible:    mflatt
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Tue May 10 00:48:01 -0400 2011
>Last-Modified:  Tue May 10 19:21:12 -0400 2011
>Originator:     Danny Yoo
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.1
>Environment:
unix "Linux thunderclap 2.6.35-28-generic #50-Ubuntu SMP Fri Mar 18 19:00:26 UTC 2011 i686 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 430938324

Collections:
("/home/dyoo/.racket/5.1.1/collects"
 (non-existent-path))
("/home/dyoo/local/racket-5.1.1/lib/racket/collects"
 ("htdp" "teachpack" "string-constants" "macro-debugger" "preprocessor" "algol60" "version" "xml" "hierlist" "info-domain" "unstable" "2htdp" "dynext" "rackunit" "r5rs" "scheme" "web-server" "readline" "defaults" "sgl" "graphics" "net" "framework" "embedded-gui" "data" "profile" "tex2page" "gui-debugger" "reader" "file" "combinator-parser" "launcher" "test-box-recovery" "s-exp" "racket" "typed" "lang" "trace" "help" "datalog" "scribble" "frtime" "lazy" "drracket" "browser" "setup" "openssl" "swindle" "mzscheme" "compiler" "tests" "syntax" "ffi" "mred" "schemeunit" "test-engine" "texpict" "r6rs" "redex" "parser-tools" "icons" "slideshow" "drscheme" "slatex" "scriblib" "typed-scheme" "stepper" "wxme" "plai" "raco" "games" "scribblings" "mzcom" "html" "picturing-programs" "racklog" "rnrs" "deinprogramm" "mrlib" "srfi" "syntax-color" "at-exp" "plot" "make" "errortrace" "mzlib" "eopl" "planet" "mysterx" "config"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #t #t))
>Description:
The documentation for case-lam says that the name must be a symbol or a vector, but there are cases where zo-parse will give the empty list.  Here's the case I'm using the exercise this:



> (run-zo-parse #'(case-lambda [(x) x]
                               [(x y) x]
                               [(x y) y]))
'#s((compilation-top zo 0)
    0
    #s((prefix zo 0) 0 () ())
    #s((case-lam expr 0 form 0 zo 0)
       ()
       (#s((lam expr 0 form 0 zo 0)
           ()
           (preserves-marks single-result)
           1
           (val)
           #f
           #()
           ()
           6
           #s((localref expr 0 form 0 zo 0) #f 0 #f #f #f))
        #s((lam expr 0 form 0 zo 0)
           ()
           (preserves-marks single-result)
           2
           (val val)
           #f
           #()
           ()
           7
           #s((localref expr 0 form 0 zo 0) #f 0 #f #f #f))
        #s((lam expr 0 form 0 zo 0)
           ()
           (preserves-marks single-result)
           2
           (val val)
           #f
           #()
           ()
           7
           #s((localref expr 0 form 0 zo 0) #f 1 #f #f #f)))))



The definition of run-zo-parse is the following:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require compiler/zo-parse)

(define (run-zo-parse stx)
  (parameterize ([current-namespace (make-base-namespace)])
    (let ([bc (compile stx)]
          [op (open-output-bytes)])
      (write bc op)
      (zo-parse (open-input-bytes (get-output-bytes op))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


One thing to notice is the code needs to be executed at the interactions window to exhibit the behavior.  If executed in definitions, the compiler can derive a vector for the debugging information.
>How-To-Repeat:
Execute the following in the interactions window of a clean session:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require compiler/zo-parse)

(define (run-zo-parse stx)
  (parameterize ([current-namespace (make-base-namespace)])
    (let ([bc (compile stx)]
          [op (open-output-bytes)])
      (write bc op)
      (zo-parse (open-input-bytes (get-output-bytes op))))))

(run-zo-parse #'(case-lambda [(x) x]
                             [(x y) x]
                             [(x y) y]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

The name fields of the case-lam and lams will be the empty list.
>Fix:
