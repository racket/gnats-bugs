From apache@plt-scheme.org Mon Sep  5 03:55:26 2005
Received: from champlain.ccs.neu.edu (champlain.ccs.neu.edu [127.0.0.1])
	by champlain.ccs.neu.edu (8.12.10/8.12.10) with ESMTP id j857tEZS014698
	for <bugs@plt-scheme.org>; Mon, 5 Sep 2005 03:55:14 -0400
Message-Id: <200509050755.j857tEHX014696@champlain.ccs.neu.edu>
Date: Mon, 5 Sep 2005 03:55:14 -0400
From: dyoo@hkn.eecs.berkeley.edu
To: bugs@plt-scheme.org
Subject: running mzscheme3m under gdb raises immediate segfault

>Number:         7566
>Category:       mzscheme
>Synopsis:       running mzscheme3m under gdb raises immediate segfault
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Sep 05 04:00:00 -0400 2005
>Last-Modified:  Mon Sep 05 12:05:48 -0400 2005
>Originator:     Danny Yoo
>Organization:
plt
>Submitter-Id:   unknown
>Release:        299
>Environment:
linux-other
>Description:
I was trying to trace a segfaulting condition on mzscheme3m, but to my surprise, running mzscheme3m through gdb itself raised a segfault.  This seems platform specific: I see this on my Linux Gentoo system, but not on my Apple Powerbook.

Here's what I see:

------------------------------------------------------------------

dyoo@shoebox ~/local/plt-exp $ gdb bin/mzscheme3m
GNU gdb 6.0
Copyright 2003 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "i686-pc-linux-gnu"...Using host libthread_db library "/li\
b/libthread_db.so.1".

(gdb) run
Starting program: /home/dyoo/local/plt-exp/bin/mzscheme3m
Welcome to MzScheme3m version 299.201, Copyright (c) 2004-2005 PLT Scheme, Inc.

Program received signal SIGSEGV, Segmentation fault.
do_hash (table=0x40384ca4, key=0x40381838, set=2, val=0x4038444c) at xsrc/hash.c:1658
1658          table -> keys = ba ;
(gdb) bt
#0  do_hash (table=0x40384ca4, key=0x40381838, set=2, val=0x4038444c)
    at xsrc/hash.c:1658
#1  0x0808a849 in scheme_hash_set (table=0x40244ac4, key=0x40168b9c, val=0x40258b30)
    at xsrc/hash.c:1703
#2  0x08105886 in do_append_module_rename (src=0x40384d18, dest=0x40384cfc,
    old_midx=0x0, new_midx=0x0) at xsrc/stxobj.c:2388
#3  0x08105ae4 in scheme_append_module_rename (src=0x40164020, dest=0x40164020)
    at xsrc/stxobj.c:2420
#4  0x080a32d0 in top_level_require_execute (data=0x40384ca4) at xsrc/module.c:7423
#5  0x08076d76 in scheme_do_eval (obj=0x40384d34, num_rands=-1, rands=0x0,
    get_value=1) at xsrc/eval.c:5889
#6  0x08077fcd in eval_k () at xsrc/eval.c:6462
#7  0x0807807d in _eval (obj=0x40164020, env=0x40164020, isexpr=1075200032,
    multi=1075200032, top=0) at xsrc/eval.c:6490
#8  0x0807812a in _scheme_eval_compiled (obj=0x40164020, env=0x40164020)
    at xsrc/eval.c:6506
#9  0x08147bb0 in scheme_eval_compiled_sized_string (
    str=0x8177800 "#~\a299.201\003I\201\037\023^\200\017\001\023\0272begin", len=0,
    env=0x40189dbc) at xsrc/builtin.c:1452
#10 0x08147e3f in scheme_add_embedded_builtins (env=0x40384d44)
    at xsrc/builtin.c:1633
#11 0x0805f572 in scheme_basic_env () at xsrc/env.c:1793
#12 0x0805dec7 in run_from_cmd_line (argc=0, _argv=0xbfffebe4,
    mk_basic_env=0x805f2f0 <scheme_basic_env>, cont_run=0x805e2c0 <cont_run>)
    at xsrc/main.c:1829
#13 0x0805e297 in actual_main (argc=1075200032, argv=0xbfffebe4) at xsrc/main.c:1936
#14 0x0808cce9 in scheme_image_main (argc=1075200032, argv=0x40164020)
    at xsrc/image.c:1526
#15 0x0805e215 in main (argc=1075200032, argv=0xbfffebe4) at xsrc/main.c:1917
(gdb) info locals
ba = (Scheme_Object **) 0x40164020
i = 0
oldsize = 521
oldkeys = (Scheme_Object **) 0x402795fc
oldvals = (Scheme_Object **) 0x40279e24
tkey = (Scheme_Object *) 0x0
keys = (Scheme_Object **) 0x402795fc
h = 438
h2 = 192
useme = 0
size = 1031
__ret__val__ = (Scheme_Object *) 0x4016401c
__gc_var_stack__ = {0xbfffe6b0, 0x8, 0xbfffe63c, 0xbfffe630, 0xbfffe634, 0xbfffe5dc,
  0xbfffe5d8, 0xbfffe5cc, 0xbfffe5c8, 0xbfffe5c4}
------------------------------------------------------------------

Is there any other debugging information I can provide?  Hope this helps!
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Matthew Flatt <mflatt@cs.utah.edu>
To: dyoo@hkn.eecs.berkeley.edu, bugs@plt-scheme.org
Cc: 
Subject: Re: all/7566: running mzscheme3m under gdb raises immediate segfault
Date: Mon, 5 Sep 2005 05:59:45 -0600

 Yes, because MzScheme3m uses page protection to implement write
 barriers, and Linux signals a SEGFAULT for protection violations. This
 signal will be caught and handled by MzScheme3m.
 
 Use
 
  handle SIGSEGV nostop noprint
 
 and the continue.
 
 Under Mac OS, meanwhile, MzScheme3m handles the protection violation
 (through a Mach service) before it's turned into a FreeBSD bus-error
 signal.
 
 Matthew
 
 At Mon, 5 Sep 2005 04:00:06 -0400, dyoo@hkn.eecs.berkeley.edu wrote:
 > A new problem report is waiting at
 >   http://bugs.plt-scheme.org/query/?cmd=view&pr=7566
 > 
 > Reported by Danny Yoo for release: 299
 > 
 > *** Description:
 > I was trying to trace a segfaulting condition on mzscheme3m, but to my 
 > surprise, running mzscheme3m through gdb itself raised a segfault.  This seems 
 > platform specific: I see this on my Linux Gentoo system, but not on my Apple 
 > Powerbook.
 > 
 > Here's what I see:
 > 
 > ------------------------------------------------------------------
 > 
 > dyoo@shoebox ~/local/plt-exp $ gdb bin/mzscheme3m
 > GNU gdb 6.0
 > Copyright 2003 Free Software Foundation, Inc.
 > GDB is free software, covered by the GNU General Public License, and you are
 > welcome to change it and/or distribute copies of it under certain conditions.
 > Type "show copying" to see the conditions.
 > There is absolutely no warranty for GDB.  Type "show warranty" for details.
 > This GDB was configured as "i686-pc-linux-gnu"...Using host libthread_db 
 > library "/li\
 > b/libthread_db.so.1".
 > 
 > (gdb) run
 > Starting program: /home/dyoo/local/plt-exp/bin/mzscheme3m
 > Welcome to MzScheme3m version 299.201, Copyright (c) 2004-2005 PLT Scheme, Inc.
 > 
 > Program received signal SIGSEGV, Segmentation fault.
 > do_hash (table=0x40384ca4, key=0x40381838, set=2, val=0x4038444c) at 
 > xsrc/hash.c:1658
 > 1658          table -> keys = ba ;
 > (gdb) bt
 > #0  do_hash (table=0x40384ca4, key=0x40381838, set=2, val=0x4038444c)
 >     at xsrc/hash.c:1658
 > #1  0x0808a849 in scheme_hash_set (table=0x40244ac4, key=0x40168b9c, 
 > val=0x40258b30)
 >     at xsrc/hash.c:1703
 > #2  0x08105886 in do_append_module_rename (src=0x40384d18, dest=0x40384cfc,
 >     old_midx=0x0, new_midx=0x0) at xsrc/stxobj.c:2388
 > #3  0x08105ae4 in scheme_append_module_rename (src=0x40164020, dest=0x40164020)
 >     at xsrc/stxobj.c:2420
 > #4  0x080a32d0 in top_level_require_execute (data=0x40384ca4) at 
 > xsrc/module.c:7423
 > #5  0x08076d76 in scheme_do_eval (obj=0x40384d34, num_rands=-1, rands=0x0,
 >     get_value=1) at xsrc/eval.c:5889
 > #6  0x08077fcd in eval_k () at xsrc/eval.c:6462
 > #7  0x0807807d in _eval (obj=0x40164020, env=0x40164020, isexpr=1075200032,
 >     multi=1075200032, top=0) at xsrc/eval.c:6490
 > #8  0x0807812a in _scheme_eval_compiled (obj=0x40164020, env=0x40164020)
 >     at xsrc/eval.c:6506
 > #9  0x08147bb0 in scheme_eval_compiled_sized_string (
 >     str=0x8177800 "#~\a299.201\003I\201\037\023^\200\017\001\023\0272begin", 
 > len=0,
 >     env=0x40189dbc) at xsrc/builtin.c:1452
 > #10 0x08147e3f in scheme_add_embedded_builtins (env=0x40384d44)
 >     at xsrc/builtin.c:1633
 > #11 0x0805f572 in scheme_basic_env () at xsrc/env.c:1793
 > #12 0x0805dec7 in run_from_cmd_line (argc=0, _argv=0xbfffebe4,
 >     mk_basic_env=0x805f2f0 <scheme_basic_env>, cont_run=0x805e2c0 <cont_run>)
 >     at xsrc/main.c:1829
 > #13 0x0805e297 in actual_main (argc=1075200032, argv=0xbfffebe4) at 
 > xsrc/main.c:1936
 > #14 0x0808cce9 in scheme_image_main (argc=1075200032, argv=0x40164020)
 >     at xsrc/image.c:1526
 > #15 0x0805e215 in main (argc=1075200032, argv=0xbfffebe4) at xsrc/main.c:1917
 > (gdb) info locals
 > ba = (Scheme_Object **) 0x40164020
 > i = 0
 > oldsize = 521
 > oldkeys = (Scheme_Object **) 0x402795fc
 > oldvals = (Scheme_Object **) 0x40279e24
 > tkey = (Scheme_Object *) 0x0
 > keys = (Scheme_Object **) 0x402795fc
 > h = 438
 > h2 = 192
 > useme = 0
 > size = 1031
 > __ret__val__ = (Scheme_Object *) 0x4016401c
 > __gc_var_stack__ = {0xbfffe6b0, 0x8, 0xbfffe63c, 0xbfffe630, 0xbfffe634, 
 > 0xbfffe5dc,
 >   0xbfffe5d8, 0xbfffe5cc, 0xbfffe5c8, 0xbfffe5c4}
 > ------------------------------------------------------------------
 > 
 > Is there any other debugging information I can provide?  Hope this helps!
 > 
 > *** How to repeat:
 > 
 > 
 > *** Environment:
 > linux-other

State changed from "open" to "closed" by mflatt at Mon, 05 Sep 2005 12:05:48 -0400
Reason>>> Not a bug - just a surprising implementation of write barriers.

