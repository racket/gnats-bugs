From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Fri Jan 25 21:42:57 2008
Received: from fg-out-1718.google.com (fg-out-1718.google.com [72.14.220.154])
	by champlain.ccs.neu.edu (8.13.8/8.13.7) with ESMTP id m0Q2guhU022736
	for <bugs@bugs.plt-scheme.org>; Fri, 25 Jan 2008 21:42:57 -0500
Message-Id: <200801260242.m0Q2goZj022730@champlain.ccs.neu.edu>
Date: Fri, 25 Jan 2008 21:42:50 -0500
From: eli@barzilay.org
To: bugs@plt-scheme.org
Subject: segfault

>Number:         9167
>Category:       mzscheme
>Synopsis:       segfault
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Fri Jan 25 21:45:01 -0500 2008
>Last-Modified:  Thu Jun 05 11:25:04 -0400 2008
>Originator:     Eli Barzilay
>Organization:
plt
>Submitter-Id:   unknown
>Release:        3.99.0.9
>Environment:
Win32 / x86 / Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648)
>Description:
Running `mzscheme -f x' with the below contents of "x" leads to
a segfault.  GDB shows this stack trace:

(gdb) bt
#0  0x00000036794305c5 in raise () from /lib64/libc.so.6
#1  0x0000003679432070 in abort () from /lib64/libc.so.6
#2  0x00000000005899eb in fault_handler ()
#3  <signal handler called>
#4  0x00000000005438ca in scheme_search_shared_pes ()
#5  0x000000000054f44a in resolve_env ()
#6  0x0000000000552ddd in scheme_stx_module_name ()
#7  0x0000000000423729 in scheme_lookup_binding ()
#8  0x00000000004407f4 in scheme_check_immediate_macro ()
#9  0x0000000000557226 in scheme_compile_sequence ()
#10 0x0000000000465c9c in scheme_make_closure_compilation ()
#11 0x0000000000567808 in lambda_syntax ()
#12 0x000000000043ff8d in scheme_compile_expand_expr ()
#13 0x000000000056490a in define_values_syntax ()
#14 0x000000000043ff8d in scheme_compile_expand_expr ()
#15 0x00000000004bd589 in do_module_begin ()
#16 0x000000000043ff8d in scheme_compile_expand_expr ()
#17 0x00000000004c3f08 in do_module ()
#18 0x000000000043ff8d in scheme_compile_expand_expr ()
#19 0x000000000044637d in compile_k ()
#20 0x00000000004648f3 in top_level_do ()
#21 0x0000000000464b66 in scheme_top_level_do ()
#22 0x0000000000433bc4 in scheme_default_compile_handler ()
#23 0x000000000043ce44 in scheme_do_eval ()
#24 0x0000000000459a36 in apply_k ()
#25 0x00000000004648f3 in top_level_do ()
#26 0x0000000000464b66 in scheme_top_level_do ()
#27 0x00000000004342d0 in call_compile_handler ()
#28 0x00000000004467fe in compile_k ()
#29 0x00000000004648f3 in top_level_do ()
#30 0x0000000000464b66 in scheme_top_level_do ()
#31 0x000000000043d8f3 in scheme_default_eval_handler ()
#32 0x000000000043ce44 in scheme_do_eval ()
#33 0x000000000043cf18 in scheme_do_eval ()
#34 0x000000000045f234 in scheme_finish_apply_for_prompt ()
#35 0x000000000045f3e6 in scheme_apply_for_prompt ()
#36 0x000000000046be50 in call_with_prompt ()
#37 0x000000000043ce44 in scheme_do_eval ()
#38 0x00000000004682be in do_call_with_prompt ()
#39 0x0000000000468489 in do_apply_with_prompt ()
#40 0x00000000004f4b8e in do_load_handler ()
#41 0x000000000045c401 in scheme_dynamic_wind ()
#42 0x00000000004f4486 in default_load ()
#43 0x000000000043ce44 in scheme_do_eval ()
#44 0x00000000004efc42 in scheme_load_with_clrd ()
#45 0x000000000043ce44 in scheme_do_eval ()
#46 0x0000000000459a36 in apply_k ()
#47 0x00000000004648f3 in top_level_do ()
#48 0x0000000000464b66 in scheme_top_level_do ()
#49 0x00000000004ef810 in scheme_load ()
#50 0x000000000041a797 in finish_cmd_line_run ()
#51 0x000000000041925e in actual_main ()
#52 0x000000000041b343 in main ()

>How-To-Repeat:
(module mz '#%kernel
  (#%require scheme/private/qq-and-or
             scheme/private/define-et-al
             scheme/promise)
  (#%provide (all-from scheme/private/define-et-al)
             (all-from '#%kernel)
             delay))

(module foo 'mz
  (define-values (foo)
    (lambda (x)
      (let loop ((a 1))
        (if a
          (loop a)
          (add1 (delay (loop a))))))))
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: mflatt@plt-scheme.org
Cc: bugs@plt-scheme.org
Subject: Re: [plt-bug] all/9167: segfault
Date: Sun, 6 Apr 2008 12:09:45 -0400

 FWIW, the problem is still there, and a smaller example is:
 
   (module m '#%kernel (#%provide (all-from '#%kernel)))
   (module n 'm (define-values (x) (let loop () 1)))
 
 
 
 On Jan 25, eli@barzilay.org wrote:
 > 
 > Reported by Eli Barzilay for release: 3.99.0.9
 > 
 > *** Description:
 > Running `mzscheme -f x' with the below contents of "x" leads to
 > a segfault.  GDB shows this stack trace:
 > 
 > (gdb) bt
 > #0  0x00000036794305c5 in raise () from /lib64/libc.so.6
 > #1  0x0000003679432070 in abort () from /lib64/libc.so.6
 > #2  0x00000000005899eb in fault_handler ()
 > #3  <signal handler called>
 > #4  0x00000000005438ca in scheme_search_shared_pes ()
 > #5  0x000000000054f44a in resolve_env ()
 > #6  0x0000000000552ddd in scheme_stx_module_name ()
 > #7  0x0000000000423729 in scheme_lookup_binding ()
 > #8  0x00000000004407f4 in scheme_check_immediate_macro ()
 > #9  0x0000000000557226 in scheme_compile_sequence ()
 > #10 0x0000000000465c9c in scheme_make_closure_compilation ()
 > #11 0x0000000000567808 in lambda_syntax ()
 > #12 0x000000000043ff8d in scheme_compile_expand_expr ()
 > #13 0x000000000056490a in define_values_syntax ()
 > #14 0x000000000043ff8d in scheme_compile_expand_expr ()
 > #15 0x00000000004bd589 in do_module_begin ()
 > #16 0x000000000043ff8d in scheme_compile_expand_expr ()
 > #17 0x00000000004c3f08 in do_module ()
 > #18 0x000000000043ff8d in scheme_compile_expand_expr ()
 > #19 0x000000000044637d in compile_k ()
 > #20 0x00000000004648f3 in top_level_do ()
 > #21 0x0000000000464b66 in scheme_top_level_do ()
 > #22 0x0000000000433bc4 in scheme_default_compile_handler ()
 > #23 0x000000000043ce44 in scheme_do_eval ()
 > #24 0x0000000000459a36 in apply_k ()
 > #25 0x00000000004648f3 in top_level_do ()
 > #26 0x0000000000464b66 in scheme_top_level_do ()
 > #27 0x00000000004342d0 in call_compile_handler ()
 > #28 0x00000000004467fe in compile_k ()
 > #29 0x00000000004648f3 in top_level_do ()
 > #30 0x0000000000464b66 in scheme_top_level_do ()
 > #31 0x000000000043d8f3 in scheme_default_eval_handler ()
 > #32 0x000000000043ce44 in scheme_do_eval ()
 > #33 0x000000000043cf18 in scheme_do_eval ()
 > #34 0x000000000045f234 in scheme_finish_apply_for_prompt ()
 > #35 0x000000000045f3e6 in scheme_apply_for_prompt ()
 > #36 0x000000000046be50 in call_with_prompt ()
 > #37 0x000000000043ce44 in scheme_do_eval ()
 > #38 0x00000000004682be in do_call_with_prompt ()
 > #39 0x0000000000468489 in do_apply_with_prompt ()
 > #40 0x00000000004f4b8e in do_load_handler ()
 > #41 0x000000000045c401 in scheme_dynamic_wind ()
 > #42 0x00000000004f4486 in default_load ()
 > #43 0x000000000043ce44 in scheme_do_eval ()
 > #44 0x00000000004efc42 in scheme_load_with_clrd ()
 > #45 0x000000000043ce44 in scheme_do_eval ()
 > #46 0x0000000000459a36 in apply_k ()
 > #47 0x00000000004648f3 in top_level_do ()
 > #48 0x0000000000464b66 in scheme_top_level_do ()
 > #49 0x00000000004ef810 in scheme_load ()
 > #50 0x000000000041a797 in finish_cmd_line_run ()
 > #51 0x000000000041925e in actual_main ()
 > #52 0x000000000041b343 in main ()
 > 
 > 
 > *** How to repeat:
 > (module mz '#%kernel
 >   (#%require scheme/private/qq-and-or
 >              scheme/private/define-et-al
 >              scheme/promise)
 >   (#%provide (all-from scheme/private/define-et-al)
 >              (all-from '#%kernel)
 >              delay))
 > 
 > (module foo 'mz
 >   (define-values (foo)
 >     (lambda (x)
 >       (let loop ((a 1))
 >         (if a
 >           (loop a)
 >           (add1 (delay (loop a))))))))
 > 
 > *** Environment:
 > Win32 / x86 / Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                   http://www.barzilay.org/                 Maze is Life!

Responsible changed from "nobody" to "mflatt" by eli at Tue, 06 May 2008 14:39:29 -0400
Reason>>> (I just checked -- and this segfault is still there.)


State changed from "open" to "closed" by mflatt at Thu, 05 Jun 2008 11:25:04 -0400
Reason>>> fixed in SVN

