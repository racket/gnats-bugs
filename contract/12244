From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Oct  1 00:37:33 2011
Received: from mail-yw0-f44.google.com (mail-yw0-f44.google.com [209.85.213.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p914bVej021097
	for <bugs@bugs.plt-scheme.org>; Sat, 1 Oct 2011 00:37:31 -0400
Message-Id: <201110010437.p914bSps021086@champlain.ccs.neu.edu>
Date: Sat, 1 Oct 2011 00:37:28 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: ->i contract is too strict when there is a rest argument

>Number:         12244
>Category:       contract
>Synopsis:       ->i contract is too strict when there is a rest argument
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Oct 01 00:40:02 -0400 2011
>Closed-Date:    Sat Oct 01 16:59:01 -0400 2011
>Last-Modified:  Sat Oct 01 16:59:01 -0400 2011
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.3.9--2011-09-15(743c846/g)
>Environment:
macosx "Darwin eric-dobsons-macbook.local 11.1.0 Darwin Kernel Version 11.1.0: Tue Jul 26 16:09:02 PDT 2011; root:xnu-1699.22.81~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 276484144
Links: (links) = ("rudybot" "raco-git"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/Users/eric/Library/Racket/5.1.3.9/collects"
 ("info-domain" "pl"))
("/Users/eric/proj/racket/plt/collects"
 (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket!
 " "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
>Description:
A contract generated by ->i incorrectly finds a self-contract violation because it does not understand the #:rest argument.

Users/eric/proj/racket/plt/collects/racket/contract/private/blame.rkt:58:0: foo: self-contract violation, expected a procedure that accepts no arguments and arbitrarily more without any keywords, given: #<procedure:foo>
  contract from: anonymous-module, blaming: anonymous-module
  contract: 
    (->i
     ()
     #:rest
     (rest (non-empty-listof integer?))
     (result any/c))
  at: unsaved-editor2508:7.2
>How-To-Repeat:
#lang racket


(define (foo x . args) args)

(provide/contract
 (foo (->i () ()
         #:rest (rest (non-empty-listof integer?))
         (result any/c))))
>Fix:
>Audit-Trail:
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is a rest argument
Date: Sat, 1 Oct 2011 00:43:42 -0400

 No, it sees the #:rest fine.  The problem is that you've provided a contract that says "The function can take any number of arguments" (as is stated in the error message), but then attempted to use that contract to protect a function that requires at least one argument.  What will then happen when a user, following the contract, calls the function with no arguments?
 
 Stevie
 
 On Oct 1, 2011, at 12:40 AM, eric.n.dobson@gmail.com wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12244
 > 
 > Reported by Eric Dobson for release: 5.1.3.9--2011-09-15(743c846/g)
 > 
 > *** Description:
 > A contract generated by ->i incorrectly finds a self-contract violation because it does not understand the #:rest argument.
 > 
 > Users/eric/proj/racket/plt/collects/racket/contract/private/blame.rkt:58:0: foo: self-contract violation, expected a procedure that accepts no arguments and arbitrarily more without any keywords, given: #<procedure:foo>
 >  contract from: anonymous-module, blaming: anonymous-module
 >  contract: 
 >    (->i
 >     ()
 >     #:rest
 >     (rest (non-empty-listof integer?))
 >     (result any/c))
 >  at: unsaved-editor2508:7.2
 > 
 > *** How to repeat:
 > #lang racket
 > 
 > 
 > (define (foo x . args) args)
 > 
 > (provide/contract
 > (foo (->i () ()
 >         #:rest (rest (non-empty-listof integer?))
 >         (result any/c))))
 > 
 > *** Environment:
 > macosx "Darwin eric-dobsons-macbook.local 11.1.0 Darwin Kernel Version 11.1.0: Tue Jul 26 16:09:02 PDT 2011; root:xnu-1699.22.81~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 276484144
 > Links: (links) = ("rudybot" "raco-git"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 > 
 > 
 > Collections:
 > ("/Users/eric/Library/Racket/5.1.3.9/collects"
 > ("info-domain" "pl"))
 > ("/Users/eric/proj/racket/plt/collects"
 > (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket!
 > " "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 > 
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 > 
 
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is a rest argument
Date: Fri, 30 Sep 2011 21:49:44 -0700

 That is not following the contract, because that would be breaking the contract on the rest argument (in this case empty does not meet the contract of (non-empty-listof integer?)).
 
 -Eric
 
 On Sep 30, 2011, at 9:43 PM, Stevie Strickland wrote:
 
 > No, it sees the #:rest fine.  The problem is that you've provided a contract that says "The function can take any number of arguments" (as is stated in the error message), but then attempted to use that contract to protect a function that requires at least one argument.  What will then happen when a user, following the contract, calls the function with no arguments?
 > 
 > Stevie
 > 
 > On Oct 1, 2011, at 12:40 AM, eric.n.dobson@gmail.com wrote:
 > 
 >> A new problem report is waiting at
 >> http://bugs.racket-lang.org/query/?cmd=view&pr=12244
 >> 
 >> Reported by Eric Dobson for release: 5.1.3.9--2011-09-15(743c846/g)
 >> 
 >> *** Description:
 >> A contract generated by ->i incorrectly finds a self-contract violation because it does not understand the #:rest argument.
 >> 
 >> Users/eric/proj/racket/plt/collects/racket/contract/private/blame.rkt:58:0: foo: self-contract violation, expected a procedure that accepts no arguments and arbitrarily more without any keywords, given: #<procedure:foo>
 >> contract from: anonymous-module, blaming: anonymous-module
 >> contract: 
 >>   (->i
 >>    ()
 >>    #:rest
 >>    (rest (non-empty-listof integer?))
 >>    (result any/c))
 >> at: unsaved-editor2508:7.2
 >> 
 >> *** How to repeat:
 >> #lang racket
 >> 
 >> 
 >> (define (foo x . args) args)
 >> 
 >> (provide/contract
 >> (foo (->i () ()
 >>        #:rest (rest (non-empty-listof integer?))
 >>        (result any/c))))
 >> 
 >> *** Environment:
 >> macosx "Darwin eric-dobsons-macbook.local 11.1.0 Darwin Kernel Version 11.1.0: Tue Jul 26 16:09:02 PDT 2011; root:xnu-1699.22.81~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 276484144
 >> Links: (links) = ("rudybot" "raco-git"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >> 
 >> 
 >> Collections:
 >> ("/Users/eric/Library/Racket/5.1.3.9/collects"
 >> ("info-domain" "pl"))
 >> ("/Users/eric/proj/racket/plt/collects"
 >> (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket!
 >> " "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 >> 
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 >> 
 > 
 
 
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs@racket-lang.org
Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is a rest argument
Date: Sat, 1 Oct 2011 00:55:02 -0400

 Oh, my apologies.  I didn't notice the "non-empty-listof" there, and should have.
 
 So yes, if the #:rest contract is the equivalent of (cons/c a (cons/c b (cons/c c ... (listof z)))), we could treat that as if it was the contract which has those additional (mandatory) arguments with contracts a, b, c, etc. and a #:rest of (listof z).  To be honest, I'm not sure whether any of the arrow contracts will end up having enough smarts to do that in the near future, though, given their current architecture.  Still, it's a reasonable bug report to keep around in case.
 
 Stevie
 
 On Oct 1, 2011, at 12:49 AM, Eric Dobson wrote:
 
 > That is not following the contract, because that would be breaking the contract on the rest argument (in this case empty does not meet the contract of (non-empty-listof integer?)).
 > 
 > -Eric
 > 
 > On Sep 30, 2011, at 9:43 PM, Stevie Strickland wrote:
 > 
 >> No, it sees the #:rest fine.  The problem is that you've provided a contract that says "The function can take any number of arguments" (as is stated in the error message), but then attempted to use that contract to protect a function that requires at least one argument.  What will then happen when a user, following the contract, calls the function with no arguments?
 >> 
 >> Stevie
 >> 
 >> On Oct 1, 2011, at 12:40 AM, eric.n.dobson@gmail.com wrote:
 >> 
 >>> A new problem report is waiting at
 >>> http://bugs.racket-lang.org/query/?cmd=view&pr=12244
 >>> 
 >>> Reported by Eric Dobson for release: 5.1.3.9--2011-09-15(743c846/g)
 >>> 
 >>> *** Description:
 >>> A contract generated by ->i incorrectly finds a self-contract violation because it does not understand the #:rest argument.
 >>> 
 >>> Users/eric/proj/racket/plt/collects/racket/contract/private/blame.rkt:58:0: foo: self-contract violation, expected a procedure that accepts no arguments and arbitrarily more without any keywords, given: #<procedure:foo>
 >>> contract from: anonymous-module, blaming: anonymous-module
 >>> contract: 
 >>>  (->i
 >>>   ()
 >>>   #:rest
 >>>   (rest (non-empty-listof integer?))
 >>>   (result any/c))
 >>> at: unsaved-editor2508:7.2
 >>> 
 >>> *** How to repeat:
 >>> #lang racket
 >>> 
 >>> 
 >>> (define (foo x . args) args)
 >>> 
 >>> (provide/contract
 >>> (foo (->i () ()
 >>>       #:rest (rest (non-empty-listof integer?))
 >>>       (result any/c))))
 >>> 
 >>> *** Environment:
 >>> macosx "Darwin eric-dobsons-macbook.local 11.1.0 Darwin Kernel Version 11.1.0: Tue Jul 26 16:09:02 PDT 2011; root:xnu-1699.22.81~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 276484144
 >>> Links: (links) = ("rudybot" "raco-git"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >>> 
 >>> 
 >>> Collections:
 >>> ("/Users/eric/Library/Racket/5.1.3.9/collects"
 >>> ("info-domain" "pl"))
 >>> ("/Users/eric/proj/racket/plt/collects"
 >>> (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket!
 >>> " "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 >>> 
 >>> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 >>> 
 >> 
 > 
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is
 a rest argument
Date: Sat, 1 Oct 2011 07:29:00 -0500

 Unfortunately, I think you have to write that contract like this:
 
   (-> (integer?) #:rest (listof integer?) (result any/c))
 
 Is there some reason that's problematic in the larger context?
 
 Robby
 
 On Fri, Sep 30, 2011 at 11:40 PM,  <eric.n.dobson@gmail.com> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12244
 >
 > Reported by Eric Dobson for release: 5.1.3.9--2011-09-15(743c846/g)
 >
 > *** Description:
 > A contract generated by ->i incorrectly finds a self-contract violation because it does not understand the #:rest argument.
 >
 > Users/eric/proj/racket/plt/collects/racket/contract/private/blame.rkt:58:0: foo: self-contract violation, expected a procedure that accepts no arguments and arbitrarily more without any keywords, given: #<procedure:foo>
 >  contract from: anonymous-module, blaming: anonymous-module
 >  contract:
 >    (->i
 >     ()
 >     #:rest
 >     (rest (non-empty-listof integer?))
 >     (result any/c))
 >  at: unsaved-editor2508:7.2
 >
 > *** How to repeat:
 > #lang racket
 >
 >
 > (define (foo x . args) args)
 >
 > (provide/contract
 >  (foo (->i () ()
 >         #:rest (rest (non-empty-listof integer?))
 >         (result any/c))))
 >
 > *** Environment:
 > macosx "Darwin eric-dobsons-macbook.local 11.1.0 Darwin Kernel Version 11.1.0: Tue Jul 26 16:09:02 PDT 2011; root:xnu-1699.22.81~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 276484144
 > Links: (links) = ("rudybot" "raco-git"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >
 >
 > Collections:
 > ("/Users/eric/Library/Racket/5.1.3.9/collects"
 >  ("info-domain" "pl"))
 > ("/Users/eric/proj/racket/plt/collects"
 >  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket!
 >  " "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 >
 > Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 >
 >
 

From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is
 a rest argument
Date: Sat, 1 Oct 2011 15:07:50 -0500

 On Sat, Oct 1, 2011 at 3:05 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > This not actually a problem for me in a larger context, I rewrote the code because of this and it turned out better.
 >
 > The main point of the bug is that for a function contract with a rest argument contract, checking that the arity of the contracted function correctly requires understanding the rest argument contract (which is undecidable in the general case). I don't think the self-contract violation should appear until the function contract allows a number of values through that is incongruent with the actual arity of the function.
 >
 
 If I understand you correctly, I think that this would have a
 significant performance penalty, so I'm hesitant to do it, especially
 since it doesn't affect the expressiveness of the contract system.
 
 Robby
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is a rest argument
Date: Sat, 1 Oct 2011 13:05:04 -0700

 This not actually a problem for me in a larger context, I rewrote the code because of this and it turned out better. 
 
 The main point of the bug is that for a function contract with a rest argument contract, checking that the arity of the contracted function correctly requires understanding the rest argument contract (which is undecidable in the general case). I don't think the self-contract violation should appear until the function contract allows a number of values through that is incongruent with the actual arity of the function.
 
 -Eric
 
 On Oct 1, 2011, at 5:29 AM, Robby Findler wrote:
 
 > Unfortunately, I think you have to write that contract like this:
 > 
 >  (-> (integer?) #:rest (listof integer?) (result any/c))
 > 
 > Is there some reason that's problematic in the larger context?
 > 
 > Robby
 > 
 > On Fri, Sep 30, 2011 at 11:40 PM,  <eric.n.dobson@gmail.com> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12244
 >> 
 >> Reported by Eric Dobson for release: 5.1.3.9--2011-09-15(743c846/g)
 >> 
 >> *** Description:
 >> A contract generated by ->i incorrectly finds a self-contract violation because it does not understand the #:rest argument.
 >> 
 >> Users/eric/proj/racket/plt/collects/racket/contract/private/blame.rkt:58:0: foo: self-contract violation, expected a procedure that accepts no arguments and arbitrarily more without any keywords, given: #<procedure:foo>
 >>  contract from: anonymous-module, blaming: anonymous-module
 >>  contract:
 >>    (->i
 >>     ()
 >>     #:rest
 >>     (rest (non-empty-listof integer?))
 >>     (result any/c))
 >>  at: unsaved-editor2508:7.2
 >> 
 >> *** How to repeat:
 >> #lang racket
 >> 
 >> 
 >> (define (foo x . args) args)
 >> 
 >> (provide/contract
 >>  (foo (->i () ()
 >>         #:rest (rest (non-empty-listof integer?))
 >>         (result any/c))))
 >> 
 >> *** Environment:
 >> macosx "Darwin eric-dobsons-macbook.local 11.1.0 Darwin Kernel Version 11.1.0: Tue Jul 26 16:09:02 PDT 2011; root:xnu-1699.22.81~1/RELEASE_I386 i386" (x86_64-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 276484144
 >> Links: (links) = ("rudybot" "raco-git"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()
 >> 
 >> 
 >> Collections:
 >> ("/Users/eric/Library/Racket/5.1.3.9/collects"
 >>  ("info-domain" "pl"))
 >> ("/Users/eric/proj/racket/plt/collects"
 >>  (".gitignore" "2htdp" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "data" "datalog" "db" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "meta" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "repo-time-stamp" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed" "typed-racket!
 >>  " "typed-scheme" "unstable" "version" "waterworld" "web-server" "wxme" "xml" "xrepl"))
 >> 
 >> Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t none) (default) #() "#lang racket\n" #f #f))
 >> 
 >> 
 
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is a rest argument
Date: Sat, 1 Oct 2011 13:18:45 -0700

 I agree that the performance penalty is probably large, and that it is better not to implement what I suggest. The bug as I see it is that the implementation of the function contracts differs from the model as I understand it. The solution might just be to document something about this, or mark this bug as will-not-fix and If I want this behavior I will have to write my own function-contract combinator.
 
 
 On Oct 1, 2011, at 1:07 PM, Robby Findler wrote:
 
 > On Sat, Oct 1, 2011 at 3:05 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> This not actually a problem for me in a larger context, I rewrote the code because of this and it turned out better.
 >> 
 >> The main point of the bug is that for a function contract with a rest argument contract, checking that the arity of the contracted function correctly requires understanding the rest argument contract (which is undecidable in the general case). I don't think the self-contract violation should appear until the function contract allows a number of values through that is incongruent with the actual arity of the function.
 >> 
 > 
 > If I understand you correctly, I think that this would have a
 > significant performance penalty, so I'm hesitant to do it, especially
 > since it doesn't affect the expressiveness of the contract system.
 > 
 > Robby
 
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs@racket-lang.org
Cc: 
Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is
 a rest argument
Date: Sat, 1 Oct 2011 15:33:21 -0500

 Good idea. I'll add some clarification to the docs.
 
 Robby
 
 On Sat, Oct 1, 2011 at 3:20 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > The following reply was made to PR contract/12244 (noted by Gnats).
 >
 > View this PR at:
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12244
 >
 > ====================
 > From: Eric Dobson <eric.n.dobson@gmail.com>
 > To: Robby Findler <robby@eecs.northwestern.edu>
 > Cc: bugs@racket-lang.org, nobody@racket-lang.org,
 >        bug-notification@racket-lang.org
 > Subject: Re: [racket-bug] all/12244: ->i contract is too strict when there is a rest argument
 > Date: Sat, 1 Oct 2011 13:18:45 -0700
 >
 >  I agree that the performance penalty is probably large, and that it is better not to implement what I suggest. The bug as I see it is that the implementation of the function contracts differs from the model as I understand it. The solution might just be to document something about this, or mark this bug as will-not-fix and If I want this behavior I will have to write my own function-contract combinator.
 >
 >
 >  On Oct 1, 2011, at 1:07 PM, Robby Findler wrote:
 >
 >  > On Sat, Oct 1, 2011 at 3:05 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >  >> This not actually a problem for me in a larger context, I rewrote the code because of this and it turned out better.
 >  >>
 >  >> The main point of the bug is that for a function contract with a rest argument contract, checking that the arity of the contracted function correctly requires understanding the rest argument contract (which is undecidable in the general case). I don't think the self-contract violation should appear until the function contract allows a number of values through that is incongruent with the actual arity of the function.
 >  >>
 >  >
 >  > If I understand you correctly, I think that this would have a
 >  > significant performance penalty, so I'm hesitant to do it, especially
 >  > since it doesn't affect the expressiveness of the contract system.
 >  >
 >  > Robby
 >
 >
 >
 
State changed from "open" to "closed" by robby@racket-lang.org at Sat, 01 Oct 2011 16:59:01 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/533b898277
