From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Wed Aug  6 18:25:37 2008
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.224])
	by champlain.ccs.neu.edu (8.14.2/8.14.2) with ESMTP id m76MPZ8v000413
	for <bugs@bugs.plt-scheme.org>; Wed, 6 Aug 2008 18:25:35 -0400
Message-Id: <200808062225.m76MPW1E000403@champlain.ccs.neu.edu>
Date: Wed, 6 Aug 2008 18:25:32 -0400
From: sstrickl@ccs.neu.edu
To: bugs@plt-scheme.org
Subject: Methods/fields not mentioned in object-contract are accessible

>Number:         9661
>Category:       contract
>Synopsis:       Methods/fields not mentioned in object-contract are accessible
>Class:          sw-bug
>Responsible:    robby
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Wed Aug 06 18:28:01 -0400 2008
>Last-Modified:  Thu May 12 19:11:55 -0400 2011
>Originator:     Stevie Strickland
>Organization:
plt
>Submitter-Id:   unknown
>Release:        4.0.2.6-svn6aug2008
>Environment:
macosx "Darwin america.local 9.4.0 Darwin Kernel Version 9.4.0: Mon Jun  9 19:36:17 PDT 2008; root:xnu-1228.5.20~1/RELEASE_PPC Power Macintosh" (ppc-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 170134184

Collections:
(("/Users/sstrickl/Library/PLT Scheme/4.0.2.6/collects" non-existent-path) ("/Users/sstrickl/plt/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "foo" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "little-helper" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed-scheme" "version" "waterworld" "web-!
 server" "wxme" "xml"))
Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n"))
>Description:
Currently one can access fields and methods from a contract-wrapped object that are not mentioned in the contract.  If this is valid, then please close this bug, though some reasoning as to why the current behavior is correct would be handy.
>How-To-Repeat:
Take the following two modules, put them in the same dir, then run use-account.ss.  Notice that no errors occur on calling the balance method or getting the balance field.

---------------
account-imp.ss:
---------------

#lang scheme

(define account%
  (class object%
    (super-new)
    (init-field [balance 0])
    (define/public (deposit n)
      (set! balance (+ n balance)))
    (define/public (withdraw n)
      (set! balance (- balance n)))))

(define (account-factory balance)
  (new account% [balance balance]))

(provide/contract [account-factory
                   (exact-nonnegative-integer?
                    . -> .
                    (object-contract
                     (withdraw (exact-positive-integer? . -> . void?))))])

---------------
use-account.ss:
---------------

#lang scheme

(require "account-imp.ss")

(let ([obj (account-factory 0)])
  (send obj deposit 10)
  (send obj withdraw 25)
  (printf "~a\n" (get-field balance obj)))
>Fix:
>Audit-Trail:
From: "Robby Findler" <robby@cs.uchicago.edu>
To: sstrickl@ccs.neu.edu, bugs@plt-scheme.org
Cc: nobody@plt-scheme.org, eli@plt-scheme.org, matthias@plt-scheme.org,
        sk@plt-scheme.org, mflatt@plt-scheme.org, clements@plt-scheme.org,
        jay@plt-scheme.org, meunier@plt-scheme.org, kathyg@plt-scheme.org,
        jacobm@plt-scheme.org, cce@plt-scheme.org, samth@plt-scheme.org,
        ryanc@plt-scheme.org, gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9661: Methods/fields not mentioned in object-contract are accessible
Date: Wed, 6 Aug 2008 17:37:51 -0500

 This is correct because I needed it to work that way. I would say that
 object-contract is something that needs to be thought out more
 carefully, tho.
 
 Robby
 
 On Wed, Aug 6, 2008 at 5:28 PM,  <sstrickl@ccs.neu.edu> wrote:
 > A new problem report is waiting at
 >  http://bugs.plt-scheme.org/query/?cmd=view&pr=9661
 >
 > Reported by Stevie Strickland for release: 4.0.2.6-svn6aug2008
 >
 > *** Description:
 > Currently one can access fields and methods from a contract-wrapped object that are not mentioned in the contract.  If this is valid, then please close this bug, though some reasoning as to why the current behavior is correct would be handy.
 >
 > *** How to repeat:
 > Take the following two modules, put them in the same dir, then run use-account.ss.  Notice that no errors occur on calling the balance method or getting the balance field.
 >
 > ---------------
 > account-imp.ss:
 > ---------------
 >
 > #lang scheme
 >
 > (define account%
 >  (class object%
 >    (super-new)
 >    (init-field [balance 0])
 >    (define/public (deposit n)
 >      (set! balance (+ n balance)))
 >    (define/public (withdraw n)
 >      (set! balance (- balance n)))))
 >
 > (define (account-factory balance)
 >  (new account% [balance balance]))
 >
 > (provide/contract [account-factory
 >                   (exact-nonnegative-integer?
 >                    . -> .
 >                    (object-contract
 >                     (withdraw (exact-positive-integer? . -> . void?))))])
 >
 > ---------------
 > use-account.ss:
 > ---------------
 >
 > #lang scheme
 >
 > (require "account-imp.ss")
 >
 > (let ([obj (account-factory 0)])
 >  (send obj deposit 10)
 >  (send obj withdraw 25)
 >  (printf "~a\n" (get-field balance obj)))
 >
 > *** Environment:
 > macosx "Darwin america.local 9.4.0 Darwin Kernel Version 9.4.0: Mon Jun  9 19:36:17 PDT 2008; root:xnu-1228.5.20~1/RELEASE_PPC Power Macintosh" (ppc-macosx/3m) (get-display-depth) = 32
 > Human Language: english
 > (current-memory-use) 170134184
 >
 > Collections:
 > (("/Users/sstrickl/Library/PLT Scheme/4.0.2.6/collects" non-existent-path) ("/Users/sstrickl/plt/collects" ".svn" "afm" "algol60" "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "foo" "framework" "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client" "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "little-helper" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict" "trace" "typed-scheme" "version" "waterworld" "web-!
 >  server" "wxme" "xml"))
 > Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug) (default) #() "#lang scheme\n"))
 >
 >
From: "Robby Findler" <robby@cs.uchicago.edu>
To: "Matthias Felleisen" <matthias@ccs.neu.edu>
Cc: sstrickl@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9661: Methods/fields not mentioned in object-contract are accessible
Date: Wed, 6 Aug 2008 17:59:11 -0500

 Right. Just confirming.
 
 On Wed, Aug 6, 2008 at 5:58 PM, Matthias Felleisen <matthias@ccs.neu.edu> wrote:
 >
 >
 > I wouldn't call this, eh, sentence an explanation but an English restatement
 > of "object contacts work the way they work because I made them work that
 > way" :-]
 >
 >
 > On Aug 6, 2008, at 6:37 PM, Robby Findler wrote:
 >
 >> This is correct because I needed it to work that way. I would say that
 >> object-contract is something that needs to be thought out more
 >> carefully, tho.
 >>
 >> Robby
 >>
 >> On Wed, Aug 6, 2008 at 5:28 PM,  <sstrickl@ccs.neu.edu> wrote:
 >>>
 >>> A new problem report is waiting at
 >>>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9661
 >>>
 >>> Reported by Stevie Strickland for release: 4.0.2.6-svn6aug2008
 >>>
 >>> *** Description:
 >>> Currently one can access fields and methods from a contract-wrapped
 >>> object that are not mentioned in the contract.  If this is valid, then
 >>> please close this bug, though some reasoning as to why the current behavior
 >>> is correct would be handy.
 >>>
 >>> *** How to repeat:
 >>> Take the following two modules, put them in the same dir, then run
 >>> use-account.ss.  Notice that no errors occur on calling the balance method
 >>> or getting the balance field.
 >>>
 >>> ---------------
 >>> account-imp.ss:
 >>> ---------------
 >>>
 >>> #lang scheme
 >>>
 >>> (define account%
 >>>  (class object%
 >>>   (super-new)
 >>>   (init-field [balance 0])
 >>>   (define/public (deposit n)
 >>>     (set! balance (+ n balance)))
 >>>   (define/public (withdraw n)
 >>>     (set! balance (- balance n)))))
 >>>
 >>> (define (account-factory balance)
 >>>  (new account% [balance balance]))
 >>>
 >>> (provide/contract [account-factory
 >>>                  (exact-nonnegative-integer?
 >>>                   . -> .
 >>>                   (object-contract
 >>>                    (withdraw (exact-positive-integer? . -> . void?))))])
 >>>
 >>> ---------------
 >>> use-account.ss:
 >>> ---------------
 >>>
 >>> #lang scheme
 >>>
 >>> (require "account-imp.ss")
 >>>
 >>> (let ([obj (account-factory 0)])
 >>>  (send obj deposit 10)
 >>>  (send obj withdraw 25)
 >>>  (printf "~a\n" (get-field balance obj)))
 >>>
 >>> *** Environment:
 >>> macosx "Darwin america.local 9.4.0 Darwin Kernel Version 9.4.0: Mon Jun
 >>>  9 19:36:17 PDT 2008; root:xnu-1228.5.20~1/RELEASE_PPC Power Macintosh"
 >>> (ppc-macosx/3m) (get-display-depth) = 32
 >>> Human Language: english
 >>> (current-memory-use) 170134184
 >>>
 >>> Collections:
 >>> (("/Users/sstrickl/Library/PLT Scheme/4.0.2.6/collects"
 >>> non-existent-path) ("/Users/sstrickl/plt/collects" ".svn" "afm" "algol60"
 >>> "browser" "combinator-parser" "compiler" "config" "defaults" "drscheme"
 >>> "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "foo" "framework"
 >>> "frtime" "games" "graphics" "gui-debugger" "guibuilder" "handin-client"
 >>> "handin-server" "help" "hierlist" "honu" "htdch" "htdp" "html" "icons"
 >>> "info-domain" "lang" "launcher" "lazy" "little-helper" "macro-debugger"
 >>> "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl"
 >>> "parser-tools" "planet" "plot" "preprocessor" "profj" "profjWizard" "r5rs"
 >>> "r6rs" "readline" "redex" "repos-time-stamp" "rnrs" "s-exp" "scheme"
 >>> "scribble" "scribblings" "setup" "sgl" "sirmail" "slatex" "slideshow" "srfi"
 >>> "srpersist" "stepper" "string-constants" "swindle" "syntax" "syntax-color"
 >>> "teachpack" "test-box-recovery" "test-engine" "tests" "tex2page" "texpict"
 >>> "trace" "typed-scheme" "version" "waterworld" "web
 >>
 >>  -!
 >>>
 >>>  server" "wxme" "xml"))
 >>> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t debug)
 >>> (default) #() "#lang scheme\n"))
 >>>
 >>>
 >
 >
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: "Robby Findler" <robby@cs.uchicago.edu>
Cc: sstrickl@ccs.neu.edu, bugs@plt-scheme.org, nobody@plt-scheme.org,
        eli@plt-scheme.org, matthias@plt-scheme.org, sk@plt-scheme.org,
        mflatt@plt-scheme.org, clements@plt-scheme.org, jay@plt-scheme.org,
        meunier@plt-scheme.org, kathyg@plt-scheme.org, jacobm@plt-scheme.org,
        cce@plt-scheme.org, samth@plt-scheme.org, ryanc@plt-scheme.org,
        gcooper@plt-scheme.org, sstrickl@plt-scheme.org
Subject: Re: [plt-bug] all/9661: Methods/fields not mentioned in object-contract are accessible
Date: Wed, 6 Aug 2008 18:58:12 -0400

 I wouldn't call this, eh, sentence an explanation but an English  
 restatement of "object contacts work the way they work because I made  
 them work that way" :-]
 
 
 On Aug 6, 2008, at 6:37 PM, Robby Findler wrote:
 
 > This is correct because I needed it to work that way. I would say that
 > object-contract is something that needs to be thought out more
 > carefully, tho.
 >
 > Robby
 >
 > On Wed, Aug 6, 2008 at 5:28 PM,  <sstrickl@ccs.neu.edu> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.plt-scheme.org/query/?cmd=view&pr=9661
 >>
 >> Reported by Stevie Strickland for release: 4.0.2.6-svn6aug2008
 >>
 >> *** Description:
 >> Currently one can access fields and methods from a contract- 
 >> wrapped object that are not mentioned in the contract.  If this is  
 >> valid, then please close this bug, though some reasoning as to why  
 >> the current behavior is correct would be handy.
 >>
 >> *** How to repeat:
 >> Take the following two modules, put them in the same dir, then run  
 >> use-account.ss.  Notice that no errors occur on calling the  
 >> balance method or getting the balance field.
 >>
 >> ---------------
 >> account-imp.ss:
 >> ---------------
 >>
 >> #lang scheme
 >>
 >> (define account%
 >>  (class object%
 >>    (super-new)
 >>    (init-field [balance 0])
 >>    (define/public (deposit n)
 >>      (set! balance (+ n balance)))
 >>    (define/public (withdraw n)
 >>      (set! balance (- balance n)))))
 >>
 >> (define (account-factory balance)
 >>  (new account% [balance balance]))
 >>
 >> (provide/contract [account-factory
 >>                   (exact-nonnegative-integer?
 >>                    . -> .
 >>                    (object-contract
 >>                     (withdraw (exact-positive-integer? . -> .  
 >> void?))))])
 >>
 >> ---------------
 >> use-account.ss:
 >> ---------------
 >>
 >> #lang scheme
 >>
 >> (require "account-imp.ss")
 >>
 >> (let ([obj (account-factory 0)])
 >>  (send obj deposit 10)
 >>  (send obj withdraw 25)
 >>  (printf "~a\n" (get-field balance obj)))
 >>
 >> *** Environment:
 >> macosx "Darwin america.local 9.4.0 Darwin Kernel Version 9.4.0:  
 >> Mon Jun  9 19:36:17 PDT 2008; root:xnu-1228.5.20~1/RELEASE_PPC  
 >> Power Macintosh" (ppc-macosx/3m) (get-display-depth) = 32
 >> Human Language: english
 >> (current-memory-use) 170134184
 >>
 >> Collections:
 >> (("/Users/sstrickl/Library/PLT Scheme/4.0.2.6/collects" non- 
 >> existent-path) ("/Users/sstrickl/plt/collects" ".svn" "afm"  
 >> "algol60" "browser" "combinator-parser" "compiler" "config"  
 >> "defaults" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace"  
 >> "ffi" "file" "foo" "framework" "frtime" "games" "graphics" "gui- 
 >> debugger" "guibuilder" "handin-client" "handin-server" "help"  
 >> "hierlist" "honu" "htdch" "htdp" "html" "icons" "info-domain"  
 >> "lang" "launcher" "lazy" "little-helper" "macro-debugger" "make"  
 >> "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net"  
 >> "openssl" "parser-tools" "planet" "plot" "preprocessor" "profj"  
 >> "profjWizard" "r5rs" "r6rs" "readline" "redex" "repos-time-stamp"  
 >> "rnrs" "s-exp" "scheme" "scribble" "scribblings" "setup" "sgl"  
 >> "sirmail" "slatex" "slideshow" "srfi" "srpersist" "stepper"  
 >> "string-constants" "swindle" "syntax" "syntax-color" "teachpack"  
 >> "test-box-recovery" "test-engine" "tests" "tex2page" "texpict"  
 >> "trace" "typed-scheme" "version" "waterworld" "web
 >  -!
 >>  server" "wxme" "xml"))
 >> Computer Language: (("Module") (#(#t write mixed-fraction-e #f #t  
 >> debug) (default) #() "#lang scheme\n"))
 >>
 >>
 

