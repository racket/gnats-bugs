From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Sat Aug  3 15:27:46 2013
Received: from mail-oa0-f48.google.com (mail-oa0-f48.google.com [209.85.219.48])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id r73JRhxg014155
	for <bugs@bugs.plt-scheme.org>; Sat, 3 Aug 2013 15:27:43 -0400
Message-Id: <201308031927.r73JRfkk014149@champlain.ccs.neu.edu>
Date: Sat, 3 Aug 2013 15:27:41 -0400
From: cce@racket-lang.org
To: bugs@racket-lang.org
Subject: contract-out is not affected by enclosing provide forms like prefix-out

>Number:         13946
>Category:       contract
>Synopsis:       contract-out is not affected by enclosing provide forms like prefix-out
>Class:          sw-bug
>Responsible:    robby
>Notify-List:    lwoodman@vlifesystems.com
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Sat Aug 03 15:28:01 -0400 2013
>Closed-Date:    Wed Aug 07 16:49:41 -0400 2013
>Last-Modified:  Wed Aug 07 16:52:01 -0400 2013
>Originator:     Carl Eastlund
>Organization:
plt
>Submitter-Id:   unknown
>Release:        v5.90.0.4
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0
>Description:
The program below compiles, but it shouldn't.  The expression (function 0) should be (my-function 0).  The implementation of contract-out lifts the entire provide to the end of the module; what it needs to do is generate the temporary names for the contract-wrapped values, lift their definitions to the end of the module, and produce their names in a provide spec directly.
>How-To-Repeat:
#lang racket

(module provider racket
  (define (function x) x)
  (provide
    (prefix-out my-
      (contract-out
        [function (-> number? string?)]))))

(require (submod "." provider))

(function 0)
>Fix:
>Audit-Trail:
Responsible changed from "nobody" to "robby" by cce at Sat, 03 Aug 2013 18:31:33 -0400
Reason>>> Contract-related.


From: Robby Findler <robby@eecs.northwestern.edu>
To: Carl Eastlund <cce@racket-lang.org>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Lawrence Woodman <lwoodman@vlifesystems.com>
Subject: Re: [racket-bug] all/13946: contract-out is not affected by enclosing
 provide forms like prefix-out
Date: Mon, 5 Aug 2013 02:02:22 -0500

 --089e01537580d6b65704e32de3f5
 Content-Type: text/plain; charset=UTF-8
 
 I'm not seeing how to make this work, unfortunately.
 
 Consider this example:
 
   #lang racket
   (provide (contract-out (struct s ())))
   (define-struct s ())
 
 In order to determine what goes into the provide, 'contract-out' has to
 look at the binding of 's', but that binding is not available yet. (And, I
 believe, this example is supposed to work.)
 
 Robby
 
 
 On Sat, Aug 3, 2013 at 2:28 PM, <cce@racket-lang.org> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=13946
 >
 > Reported by Carl Eastlund for release: v5.90.0.4
 >
 > *** Description:
 > The program below compiles, but it shouldn't.  The expression (function 0)
 > should be (my-function 0).  The implementation of contract-out lifts the
 > entire provide to the end of the module; what it needs to do is generate
 > the temporary names for the contract-wrapped values, lift their definitions
 > to the end of the module, and produce their names in a provide spec
 > directly.
 >
 > *** How to repeat:
 > #lang racket
 >
 > (module provider racket
 >   (define (function x) x)
 >   (provide
 >     (prefix-out my-
 >       (contract-out
 >         [function (-> number? string?)]))))
 >
 > (require (submod "." provider))
 >
 > (function 0)
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0)
 > Gecko/20100101 Firefox/21.0
 >
 >
 
 --089e01537580d6b65704e32de3f5
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I&#39;m not seeing how to make this work, unfortunately.=
 =C2=A0<div><br></div><div>Consider this example:</div><div><br></div><div>=
 =C2=A0 #lang racket</div><div><div>=C2=A0 (provide (contract-out (struct s =
 ())))<br></div><div>
 
 =C2=A0 (define-struct s ())</div></div><div><br></div><div>In order to dete=
 rmine what goes into the provide, &#39;contract-out&#39; has to look at the=
  binding of &#39;s&#39;, but that binding is not available yet. (And, I bel=
 ieve, this example is supposed to work.)</div>
 
 <div><br></div><div>Robby</div><div><br></div><div class=3D"gmail_extra"><b=
 r><div class=3D"gmail_quote">On Sat, Aug 3, 2013 at 2:28 PM,  <span dir=3D"=
 ltr">&lt;<a href=3D"mailto:cce@racket-lang.org" target=3D"_blank">cce@racke=
 t-lang.org</a>&gt;</span> wrote:<br>
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 946" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13946</a><br>
 <br>
 Reported by Carl Eastlund for release: v5.90.0.4<br>
 <br>
 *** Description:<br>
 The program below compiles, but it shouldn&#39;t. =C2=A0The expression (fun=
 ction 0) should be (my-function 0). =C2=A0The implementation of contract-ou=
 t lifts the entire provide to the end of the module; what it needs to do is=
  generate the temporary names for the contract-wrapped values, lift their d=
 efinitions to the end of the module, and produce their names in a provide s=
 pec directly.<br>
 
 
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (module provider racket<br>
 =C2=A0 (define (function x) x)<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0 (prefix-out my-<br>
 =C2=A0 =C2=A0 =C2=A0 (contract-out<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [function (-&gt; number? string?)]))))<br>
 <br>
 (require (submod &quot;.&quot; provider))<br>
 <br>
 (function 0)<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/2010=
 0101 Firefox/21.0<br>
 <br>
 </blockquote></div><br></div></div>
 
 --089e01537580d6b65704e32de3f5--
From: Carl Eastlund <cce@racket-lang.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Lawrence Woodman <lwoodman@vlifesystems.com>
Subject: Re: [racket-bug] all/13946: contract-out is not affected by enclosing
 provide forms like prefix-out
Date: Mon, 5 Aug 2013 03:29:36 -0400

 --089e0153686c9ac73204e32e4796
 Content-Type: text/plain; charset=UTF-8
 
 Oh, here's what I'd suggest.  I've done something similar with require and
 provide transformers that might work here.  Let's say we start with
 (contract-out spec ...).  Create a fresh name, let's call it TMP.  Lift a
 new form to the end of the module: (define-and-record-contracted TMP spec
 ...).  Expand into (provide-recorded TMP).  The new
 define-and-record-contracted macro should define contracted forms based on
 the specs, and bind TMP using define-syntax as the rename-out form to
 ultimately produce.  Then provide-recorded should be a regular (non-"pre")
 provide transformer that can just get that result using syntax-local-value
 and return it.
 
 Carl Eastlund
 
 On Mon, Aug 5, 2013 at 3:02 AM, Robby Findler
 <robby@eecs.northwestern.edu>wrote:
 
 > I'm not seeing how to make this work, unfortunately.
 >
 > Consider this example:
 >
 >   #lang racket
 >   (provide (contract-out (struct s ())))
 >   (define-struct s ())
 >
 > In order to determine what goes into the provide, 'contract-out' has to
 > look at the binding of 's', but that binding is not available yet. (And, I
 > believe, this example is supposed to work.)
 >
 > Robby
 >
 >
 > On Sat, Aug 3, 2013 at 2:28 PM, <cce@racket-lang.org> wrote:
 >
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=13946
 >>
 >> Reported by Carl Eastlund for release: v5.90.0.4
 >>
 >> *** Description:
 >> The program below compiles, but it shouldn't.  The expression (function
 >> 0) should be (my-function 0).  The implementation of contract-out lifts the
 >> entire provide to the end of the module; what it needs to do is generate
 >> the temporary names for the contract-wrapped values, lift their definitions
 >> to the end of the module, and produce their names in a provide spec
 >> directly.
 >>
 >> *** How to repeat:
 >> #lang racket
 >>
 >> (module provider racket
 >>   (define (function x) x)
 >>   (provide
 >>     (prefix-out my-
 >>       (contract-out
 >>         [function (-> number? string?)]))))
 >>
 >> (require (submod "." provider))
 >>
 >> (function 0)
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0)
 >> Gecko/20100101 Firefox/21.0
 >>
 >>
 >
 
 --089e0153686c9ac73204e32e4796
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr"><div><div><div><div>Oh, here&#39;s what I&#39;d suggest.=
 =C2=A0 I&#39;ve done something similar with require and provide transformer=
 s that might work here.=C2=A0 Let&#39;s say we start with (contract-out spe=
 c ...).=C2=A0 Create a fresh name, let&#39;s call it TMP.=C2=A0 Lift a new =
 form to the end of the module: (define-and-record-contracted TMP spec ...).=
 =C2=A0 Expand into (provide-recorded TMP).=C2=A0 The new define-and-record-=
 contracted macro should define contracted forms based on the specs, and bin=
 d TMP using define-syntax as the rename-out form to ultimately produce.=C2=
 =A0 Then provide-recorded should be a regular (non-&quot;pre&quot;) provide=
  transformer that can just get that result using syntax-local-value and ret=
 urn it.<br clear=3D"all">
 
 </div></div></div></div><div><div><div><div><div><div><div><div class=3D"gm=
 ail_extra"><br><div>Carl Eastlund</div>
 <br><div class=3D"gmail_quote">On Mon, Aug 5, 2013 at 3:02 AM, Robby Findle=
 r <span dir=3D"ltr">&lt;<a href=3D"mailto:robby@eecs.northwestern.edu" targ=
 et=3D"_blank">robby@eecs.northwestern.edu</a>&gt;</span> wrote:<br><blockqu=
 ote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc s=
 olid;padding-left:1ex">
 
 <div dir=3D"ltr">I&#39;m not seeing how to make this work, unfortunately.=
 =C2=A0<div><br></div><div>Consider this example:</div><div><br></div><div>=
 =C2=A0 #lang racket</div><div><div>=C2=A0 (provide (contract-out (struct s =
 ())))<br></div>
 <div>
 
 
 =C2=A0 (define-struct s ())</div></div><div><br></div><div>In order to dete=
 rmine what goes into the provide, &#39;contract-out&#39; has to look at the=
  binding of &#39;s&#39;, but that binding is not available yet. (And, I bel=
 ieve, this example is supposed to work.)</div>
 
 <span class=3D"HOEnZb"><font color=3D"#888888">
 
 <div><br></div><div>Robby</div></font></span><div><div class=3D"h5"><div><b=
 r></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Sat, A=
 ug 3, 2013 at 2:28 PM,  <span dir=3D"ltr">&lt;<a href=3D"mailto:cce@racket-=
 lang.org" target=3D"_blank">cce@racket-lang.org</a>&gt;</span> wrote:<br>
 
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 946" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13946</a><br>
 <br>
 Reported by Carl Eastlund for release: v5.90.0.4<br>
 <br>
 *** Description:<br>
 The program below compiles, but it shouldn&#39;t. =C2=A0The expression (fun=
 ction 0) should be (my-function 0). =C2=A0The implementation of contract-ou=
 t lifts the entire provide to the end of the module; what it needs to do is=
  generate the temporary names for the contract-wrapped values, lift their d=
 efinitions to the end of the module, and produce their names in a provide s=
 pec directly.<br>
 
 
 
 
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (module provider racket<br>
 =C2=A0 (define (function x) x)<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0 (prefix-out my-<br>
 =C2=A0 =C2=A0 =C2=A0 (contract-out<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [function (-&gt; number? string?)]))))<br>
 <br>
 (require (submod &quot;.&quot; provider))<br>
 <br>
 (function 0)<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/2010=
 0101 Firefox/21.0<br>
 <br>
 </blockquote></div><br></div></div></div></div>
 </blockquote></div><br></div></div></div></div></div></div></div></div></di=
 v>
 
 --089e0153686c9ac73204e32e4796--
State changed from "open" to "closed" by robby@racket-lang.org at Wed, 07 Aug 2013 16:49:41 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/a8405eb77d
  | Adjust contract-out so it uses the provide transformer machinery properly
  | 
  | closes PR 13946
  | 
  | This is probably not the optimal way to make this change; better would
  | have been to refactor the existing provide/contract implementation so
  | it does not glom the provides all together in the first place (instead
  | of pulling them out afterwards). Do it this way anyways, because I
  | have a big pile of contract-system changes in another branch that also
  | changes around how provide/contract works: this way will be much
  | easier to rebase those changes off of.

From: Robby Findler <robby@eecs.northwestern.edu>
To: Carl Eastlund <cce@racket-lang.org>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>,
        Lawrence Woodman <lwoodman@vlifesystems.com>
Subject: Re: [racket-bug] all/13946: contract-out is not affected by enclosing
 provide forms like prefix-out
Date: Wed, 7 Aug 2013 15:48:35 -0500

 --047d7bf187545821df04e361aabd
 Content-Type: text/plain; charset=UTF-8
 
 Oh, thanks! This worked out great. I hadn't really explored provide
 transformers before. Cool.
 
 Robby
 
 On Monday, August 5, 2013, Carl Eastlund wrote:
 
 > Oh, here's what I'd suggest.  I've done something similar with require and
 > provide transformers that might work here.  Let's say we start with
 > (contract-out spec ...).  Create a fresh name, let's call it TMP.  Lift a
 > new form to the end of the module: (define-and-record-contracted TMP spec
 > ...).  Expand into (provide-recorded TMP).  The new
 > define-and-record-contracted macro should define contracted forms based on
 > the specs, and bind TMP using define-syntax as the rename-out form to
 > ultimately produce.  Then provide-recorded should be a regular (non-"pre")
 > provide transformer that can just get that result using syntax-local-value
 > and return it.
 >
 > Carl Eastlund
 >
 > On Mon, Aug 5, 2013 at 3:02 AM, Robby Findler <robby@eecs.northwestern.edu<javascript:_e({}, 'cvml', 'robby@eecs.northwestern.edu');>
 > > wrote:
 >
 >> I'm not seeing how to make this work, unfortunately.
 >>
 >> Consider this example:
 >>
 >>   #lang racket
 >>   (provide (contract-out (struct s ())))
 >>    (define-struct s ())
 >>
 >> In order to determine what goes into the provide, 'contract-out' has to
 >> look at the binding of 's', but that binding is not available yet. (And, I
 >> believe, this example is supposed to work.)
 >>
 >> Robby
 >>
 >>
 >> On Sat, Aug 3, 2013 at 2:28 PM, <cce@racket-lang.org <javascript:_e({},
 >> 'cvml', 'cce@racket-lang.org');>> wrote:
 >>
 >>> A new problem report is waiting at
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=13946
 >>>
 >>> Reported by Carl Eastlund for release: v5.90.0.4
 >>>
 >>> *** Description:
 >>> The program below compiles, but it shouldn't.  The expression (function
 >>> 0) should be (my-function 0).  The implementation of contract-out lifts the
 >>> entire provide to the end of the module; what it needs to do is generate
 >>> the temporary names for the contract-wrapped values, lift their definitions
 >>> to the end of the module, and produce their names in a provide spec
 >>> directly.
 >>>
 >>> *** How to repeat:
 >>> #lang racket
 >>>
 >>> (module provider racket
 >>>   (define (function x) x)
 >>>   (provide
 >>>     (prefix-out my-
 >>>       (contract-out
 >>>         [function (-> number? string?)]))))
 >>>
 >>> (require (submod "." provider))
 >>>
 >>> (function 0)
 >>>
 >>> *** Environment:
 >>> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0)
 >>> Gecko/20100101 Firefox/21.0
 >>>
 >>>
 >>
 >
 
 --047d7bf187545821df04e361aabd
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Oh, thanks! This worked out great. I hadn&#39;t really explored provide tra=
 nsformers before. Cool.<div><br></div><div>Robby<br><br>On Monday, August 5=
 , 2013, Carl Eastlund  wrote:<br><blockquote class=3D"gmail_quote" style=3D=
 "margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 <div dir=3D"ltr"><div><div><div><div>Oh, here&#39;s what I&#39;d suggest.=
 =C2=A0 I&#39;ve done something similar with require and provide transformer=
 s that might work here.=C2=A0 Let&#39;s say we start with (contract-out spe=
 c ...).=C2=A0 Create a fresh name, let&#39;s call it TMP.=C2=A0 Lift a new =
 form to the end of the module: (define-and-record-contracted TMP spec ...).=
 =C2=A0 Expand into (provide-recorded TMP).=C2=A0 The new define-and-record-=
 contracted macro should define contracted forms based on the specs, and bin=
 d TMP using define-syntax as the rename-out form to ultimately produce.=C2=
 =A0 Then provide-recorded should be a regular (non-&quot;pre&quot;) provide=
  transformer that can just get that result using syntax-local-value and ret=
 urn it.<br clear=3D"all">
 
 
 </div></div></div></div><div><div><div><div><div><div><div><div class=3D"gm=
 ail_extra"><br><div>Carl Eastlund</div>
 <br><div class=3D"gmail_quote">On Mon, Aug 5, 2013 at 3:02 AM, Robby Findle=
 r <span dir=3D"ltr">&lt;<a href=3D"javascript:_e({}, &#39;cvml&#39;, &#39;r=
 obby@eecs.northwestern.edu&#39;);" target=3D"_blank">robby@eecs.northwester=
 n.edu</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">
 
 <div dir=3D"ltr">I&#39;m not seeing how to make this work, unfortunately.=
 =C2=A0<div><br></div><div>Consider this example:</div><div><br></div><div>=
 =C2=A0 #lang racket</div><div><div>=C2=A0 (provide (contract-out (struct s =
 ())))<br></div>
 
 <div>
 
 
 =C2=A0 (define-struct s ())</div></div><div><br></div><div>In order to dete=
 rmine what goes into the provide, &#39;contract-out&#39; has to look at the=
  binding of &#39;s&#39;, but that binding is not available yet. (And, I bel=
 ieve, this example is supposed to work.)</div>
 
 
 <span><font color=3D"#888888">
 
 <div><br></div><div>Robby</div></font></span><div><div><div><br></div><div =
 class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Sat, Aug 3, 2013 at=
  2:28 PM,  <span dir=3D"ltr">&lt;<a href=3D"javascript:_e({}, &#39;cvml&#39=
 ;, &#39;cce@racket-lang.org&#39;);" target=3D"_blank">cce@racket-lang.org</=
 a>&gt;</span> wrote:<br>
 
 
 
 
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D13=
 946" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D13946</a><br>
 <br>
 Reported by Carl Eastlund for release: v5.90.0.4<br>
 <br>
 *** Description:<br>
 The program below compiles, but it shouldn&#39;t. =C2=A0The expression (fun=
 ction 0) should be (my-function 0). =C2=A0The implementation of contract-ou=
 t lifts the entire provide to the end of the module; what it needs to do is=
  generate the temporary names for the contract-wrapped values, lift their d=
 efinitions to the end of the module, and produce their names in a provide s=
 pec directly.<br>
 
 
 
 
 
 <br>
 *** How to repeat:<br>
 #lang racket<br>
 <br>
 (module provider racket<br>
 =C2=A0 (define (function x) x)<br>
 =C2=A0 (provide<br>
 =C2=A0 =C2=A0 (prefix-out my-<br>
 =C2=A0 =C2=A0 =C2=A0 (contract-out<br>
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 [function (-&gt; number? string?)]))))<br>
 <br>
 (require (submod &quot;.&quot; provider))<br>
 <br>
 (function 0)<br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/2010=
 0101 Firefox/21.0<br>
 <br>
 </blockquote></div><br></div></div></div></div>
 </blockquote></div><br></div></div></div></div></div></div></div></div></di=
 v>
 </blockquote></div>
 
 --047d7bf187545821df04e361aabd--
