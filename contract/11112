From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Aug 19 00:28:40 2010
Received: from mail-gx0-f172.google.com (mail-gx0-f172.google.com [209.85.161.172])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o7J4SbP3005707
	for <bugs@bugs.plt-scheme.org>; Thu, 19 Aug 2010 00:28:38 -0400
Message-Id: <201008190428.o7J4SZFx005700@champlain.ccs.neu.edu>
Date: Thu, 19 Aug 2010 00:28:35 -0400
From: endobson@cs.brown.edu
To: bugs@racket-lang.org
Subject: class/c gives wrong source location for contract errors

>Number:         11112
>Category:       contract
>Synopsis:       class/c gives wrong source location for contract errors
>Class:          not-a-bug
>Responsible:    sstrickl
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Aug 19 00:32:01 -0400 2010
>Closed-Date:    Fri Dec 02 15:06:12 -0500 2011
>Last-Modified:  Fri Dec 02 15:06:12 -0500 2011
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0
>Environment:
macosx "Darwin eric-dobsons-macbook.local 10.4.0 Darwin Kernel Version 10.4.0: Fri Apr 23 18:28:53 PDT 2010; root:xnu-1504.7.4~1/RELEASE_I386 i386 i386" (i386-macosx/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 98970320

Collections:
(("/Users/eric/Library/Racket/5.0/collects" "endobson" "info-domain") ("/Applications/Racket v5.0/collects" "2htdp" "afm" "algol60" "at-exp" "browser" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drracket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "framework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htdp" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s-exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sgl" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "syntax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page" "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server" "wxme" "xml"))
Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug/profile) (default) #() "#lang scheme\n" #f))
>Description:
The attached code does not blame bar% or the construction of the foo% for passing in illegal arguments. The errors are correctly assigning blame to the 'number?' predicate but failing to get the correct source location. 
>How-To-Repeat:
#lang racket
(provide (all-defined-out))

(define/contract foo%
 (class/c
  (init
   (fun (-> number?)))
  (funM (->m integer?)))
 (class object%
  (init fun)
  (define fun-field fun)
  (super-new)
  (define/public (funM) (fun-field))))

(define bar% 
 (class foo%
  (init)
  (super-new (fun (lambda () #f)))))

; Correct Source Location
;(send (new foo% (fun (lambda () 2.4))) funM)

; Wrong Source Location
;(send (new bar%) funM)

; Wrong Source Location
(send (new foo% (fun (lambda () #f))) funM)
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 07:34:02 -0500

 Are you running this in drracket? I did, and I see the call to
 fun-field being highlighted, which seems like a fine source location,
 given how source locations for exceptions work. That is, the first
 position on the stack is highlighted. (Note that the stack sometimes
 is not what you think it is due to the various optimizations that the
 compiler is doing, but stack hurting optimizations are disabled when
 running inside drracket, at least with the default settings.)
 
 In any case, perhaps you can say more about what you expected to
 happen (and why)?
 
 Robby
 
 On Wed, Aug 18, 2010 at 11:32 PM,  <endobson@cs.brown.edu> wrote:
 > A new problem report is waiting at
 > =C2=A0http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11112
 >
 > Reported by Eric Dobson for release: 5.0
 >
 > *** Description:
 > The attached code does not blame bar% or the construction of the foo% for=
  passing in illegal arguments. The errors are correctly assigning blame to =
 the 'number?' predicate but failing to get the correct source location.
 >
 > *** How to repeat:
 > #lang racket
 > (provide (all-defined-out))
 >
 > (define/contract foo%
 > =C2=A0(class/c
 > =C2=A0(init
 > =C2=A0 (fun (-> number?)))
 > =C2=A0(funM (->m integer?)))
 > =C2=A0(class object%
 > =C2=A0(init fun)
 > =C2=A0(define fun-field fun)
 > =C2=A0(super-new)
 > =C2=A0(define/public (funM) (fun-field))))
 >
 > (define bar%
 > =C2=A0(class foo%
 > =C2=A0(init)
 > =C2=A0(super-new (fun (lambda () #f)))))
 >
 > ; Correct Source Location
 > ;(send (new foo% (fun (lambda () 2.4))) funM)
 >
 > ; Wrong Source Location
 > ;(send (new bar%) funM)
 >
 > ; Wrong Source Location
 > (send (new foo% (fun (lambda () #f))) funM)
 >
 > *** Environment:
 > macosx "Darwin eric-dobsons-macbook.local 10.4.0 Darwin Kernel Version 10=
 .4.0: Fri Apr 23 18:28:53 PDT 2010; root:xnu-1504.7.4~1/RELEASE_I386 i386 i=
 386" (i386-macosx/3m) (get-display-depth) =3D 32
 > Human Language: english
 > (current-memory-use) 98970320
 >
 > Collections:
 > (("/Users/eric/Library/Racket/5.0/collects" "endobson" "info-domain") ("/=
 Applications/Racket v5.0/collects" "2htdp" "afm" "algol60" "at-exp" "browse=
 r" "combinator-parser" "compiler" "config" "defaults" "deinprogramm" "drrac=
 ket" "drscheme" "dynext" "embedded-gui" "eopl" "errortrace" "ffi" "file" "f=
 ramework" "frtime" "games" "graphics" "gui-debugger" "help" "hierlist" "htd=
 p" "html" "icons" "info-domain" "lang" "launcher" "lazy" "macro-debugger" "=
 make" "mred" "mrlib" "mysterx" "mzcom" "mzlib" "mzscheme" "net" "openssl" "=
 parser-tools" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs"=
  "racket" "racklog" "rackunit" "raco" "reader" "readline" "redex" "rnrs" "s=
 -exp" "scheme" "schemeunit" "scribble" "scribblings" "scriblib" "setup" "sg=
 l" "slatex" "slideshow" "srfi" "stepper" "string-constants" "swindle" "synt=
 ax" "syntax-color" "teachpack" "test-box-recovery" "test-engine" "tex2page"=
  "texpict" "trace" "typed" "typed-scheme" "unstable" "version" "web-server"=
  "wxme" "xml"))
 > Computer Language: (("Determine language from source") (#(#t print mixed-=
 fraction-e #f #t debug/profile) (default) #() "#lang scheme\n" #f))
 >
 >
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 08:46:12 -0500

 On Thu, Aug 19, 2010 at 7:34 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Are you running this in drracket? I did, and I see the call to
 > fun-field being highlighted, which seems like a fine source location,
 > given how source locations for exceptions work. That is, the first
 > position on the stack is highlighted. (Note that the stack sometimes
 > is not what you think it is due to the various optimizations that the
 > compiler is doing, but stack hurting optimizations are disabled when
 > running inside drracket, at least with the default settings.)
 >
 > In any case, perhaps you can say more about what you expected to
 > happen (and why)?
 >
 
 He wants these contract violations to show the location of the (new
 foo% ...) expression because this is the code that needs to be fixed.
 The current behavior uses the location associated with the exception
 to pinpoint the site that *happened* to uncover the violation, but
 this site doesn't help you find the broken code. (It would be helpful,
 however, if the violation blamed the positive party.)
 
 (This is the same complaint I made in your office a few weeks ago, in
 case that helps you recall the issue.)
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 09:17:27 -0500

 On Thu, Aug 19, 2010 at 8:46 AM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > He wants these contract violations to show the location of the (new
 > foo% ...) expression because this is the code that needs to be fixed.
 > The current behavior uses the location associated with the exception
 > to pinpoint the site that *happened* to uncover the violation, but
 > this site doesn't help you find the broken code. (It would be helpful,
 > however, if the violation blamed the positive party.)
 
 I don't think that's one of the legitimate possibilities. The
 possibilities seem to be:
 
   1) the stack (which we don't want to give up)
   2) the location of one of the parties being blamed
   3) the source location of the contract
 
 This is the error message I get:
 
 Welcome to DrRacket, version 5.0.1.2--2010-07-25(-/f) [3m].
 Language: racket [custom]; memory limit: 128 MB.
 . . unsaved-editor1018:4.17: 'anonymous-module broke the contract
   (class/c
    (funM (-> integer?))
    (init (fun (-> number?))))
  on foo%; expected <number?>, given: #f
 >
 
 and I see that it contains the first and the third.
 
 You are asking for the second one, right? (Note that for
 provide/contract that second one isn't as immediately obviously
 useful, since the 3rd one kind of gives that to you already.)
 
 First off, note how this program looks when you change it to use
 modules & provide/contract (as below). Here's the error:
 
 Welcome to DrRacket, version 5.0.1.2--2010-07-25(-/f) [3m].
 Language: racket/load [custom]; memory limit: 128 MB.
 . . unsaved-editor1018:10.4: 'B broke the contract
   (class/c
    (funM (-> integer?))
    (init (fun (-> number?))))
  on foo%; expected <number?>, given: #f
 >
 
 In this case, you do get the party being blamed, since 'B is a
 canonical reference to the module (and you shoudl be able to find the
 module's text from that thing; if it was in a file, you'd see the file
 name there).
 
 Perhaps define/contract, then, needs to put more information into the
 way it names parties so that the "anonymous module" bit in the
 original error would include more information.
 
 And perhaps also we need to put something in the Guide that dissects
 the contract error messages.
 
 Robby
 
 #lang racket/load
 (module A racket
   (define foo%
     (class object%
       (init fun)
       (define fun-field fun)
       (super-new)
       (define/public (funM) (fun-field))))
   (provide/contract
    [foo%
     (class/c
      (init
       (fun (-> number?)))
      (funM (->m integer?)))]))
 
 (module B racket
   (require 'A)
 
   (define bar%
     (class foo%
       (init)
       (super-new (fun (lambda () #f)))))
 
   ; Correct Source Location
   ;(send (new foo% (fun (lambda () 2.4))) funM)
 
   ; Wrong Source Location
   ;(send (new bar%) funM)
 
   ; Wrong Source Location
   (send (new foo% (fun (lambda () #f))) funM))
 
 (require 'B)
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: endobson@cs.brown.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for contract errors
Date: Thu, 19 Aug 2010 11:13:07 -0400

 On Aug 19, 2010, at 12:32 AM, endobson@cs.brown.edu wrote:
 
 > The attached code does not blame bar%
 
 This is the essence of contracts, which dynamically monitor whether =
 values satisfy properties when they cross boundaries. Since it is =
 impossible to decide properties for higher-order values (objects, =
 classes, functions), monitoring means 'delay checks until used but make =
 sure you blame the proper parties.'=20
 
 Perhaps this could be better explained in the Contract docs/faq, but I =
 am pretty sure it is well explained. Could you point to something in the =
 contract docs that gives you the impression Racket should catch this =
 violation?=20
 
 
 > or the construction of the foo% for passing in illegal arguments.
 
 See above. But also see below.=20
 
 
 > The errors are correctly assigning blame to the 'number?' predicate =
 but failing to get the correct source location.=20
 
 
 Perhaps DrRacket should use different words but all the information is =
 actually in there.=20
 
 1. the module contains one boundary, your contract
 
 2. 'anonymous-module refers to the code outside of the boundary=20
 
 3. it is being blamed for creating an instance of foo%=20
 
 Specifically, you're told that the boundary monitor says
 
    the fun init parameter should produce a number=20
    every time it is used
 
 and the message says it didn't (on some use)
 
 4. the higlighting and the arrow explain how the violation was =
 discovered. When fun-field was called the aliased fun function produced =
 #f and that #f would have emerged from the last expression in your =
 buffer.=20
 
 ;; ---=20
 
 There is nothing wrong with the idea of the reporting. I can see you =
 asking for two kinds of changes:=20
 
 A: use words that I understand when you report a contract violation =
 (anonymous module is weird and ambiguous)
 
 B: do not show me silly information about how the contract system =
 discovered the violation and what damage would have been caused had the =
 evaluation continued.=20
 
 Could you explain which option you were thinking of? Or could you =
 explain what you think is wrong in the sense that these error message =
 violate the principles of our contract documentation (which I assume you =
 have read)?=20
 
 Thanks. Feedback appreciated -- Matthias
 
 
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: endobson@cs.brown.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for contract errors
Date: Thu, 19 Aug 2010 11:25:00 -0400

 On Aug 19, 2010, at 11:13 AM, Matthias Felleisen wrote:
 > A: use words that I understand when you report a contract violation =
 (anonymous module is weird and ambiguous)
 
 Just to make it clear, 'anonymous-module is the module name returned for =
 any unsaved buffer in DrRacket.
 
 Otherwise, Matthias's response is an excellent summation of my own view =
 on this particular piece of code, and I would be interested in the =
 answers to his questions as well.
 
 Stevie=
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, endobson@cs.brown.edu,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for contract errors
Date: Thu, 19 Aug 2010 11:27:27 -0400

 On Aug 19, 2010, at 11:25 AM, Stevie Strickland wrote:
 > On Aug 19, 2010, at 11:13 AM, Matthias Felleisen wrote:
 >> A: use words that I understand when you report a contract violation =
 (anonymous module is weird and ambiguous)
 >=20
 > Just to make it clear, 'anonymous-module is the module name returned =
 for any unsaved buffer in DrRacket.
 
 ... which is provided by the underlying module system, not concocted by =
 the contract system.  I meant to make it clear I'm not making up some =
 random name for the blame party in that instance, and forgot to actually =
 _say_ that.
 
 Stevie=
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 10:33:56 -0500

 On Thu, Aug 19, 2010 at 9:17 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Thu, Aug 19, 2010 at 8:46 AM, Casey Klein
 > <clklein@eecs.northwestern.edu> wrote:
 >> He wants these contract violations to show the location of the (new
 >> foo% ...) expression because this is the code that needs to be fixed.
 >> The current behavior uses the location associated with the exception
 >> to pinpoint the site that *happened* to uncover the violation, but
 >> this site doesn't help you find the broken code. (It would be helpful,
 >> however, if the violation blamed the positive party.)
 >
 > I don't think that's one of the legitimate possibilities. The
 > possibilities seem to be:
 >
 > =A01) the stack (which we don't want to give up)
 > =A02) the location of one of the parties being blamed
 > =A03) the source location of the contract
 >
 > This is the error message I get:
 >
 > Welcome to DrRacket, version 5.0.1.2--2010-07-25(-/f) [3m].
 > Language: racket [custom]; memory limit: 128 MB.
 > . . unsaved-editor1018:4.17: 'anonymous-module broke the contract
 > =A0(class/c
 > =A0 (funM (-> integer?))
 > =A0 (init (fun (-> number?))))
 > =A0on foo%; expected <number?>, given: #f
 >>
 >
 > and I see that it contains the first and the third.
 >
 > You are asking for the second one, right? (Note that for
 > provide/contract that second one isn't as immediately obviously
 > useful, since the 3rd one kind of gives that to you already.)
 
 I want more than the identity of the blamed party. The blamed party
 might be a huge region; I want the location within the region that
 pushed the illegal value across the boundary. In Eric's third example,
 that location is (new foo% (fun (lambda () #f))), specifically the
 `fun' argument.
 
 > First off, note how this program looks when you change it to use
 > modules & provide/contract (as below). Here's the error:
 >
 > Welcome to DrRacket, version 5.0.1.2--2010-07-25(-/f) [3m].
 > Language: racket/load [custom]; memory limit: 128 MB.
 > . . unsaved-editor1018:10.4: 'B broke the contract
 > =A0(class/c
 > =A0 (funM (-> integer?))
 > =A0 (init (fun (-> number?))))
 > =A0on foo%; expected <number?>, given: #f
 >>
 >
 > In this case, you do get the party being blamed, since 'B is a
 > canonical reference to the module (and you shoudl be able to find the
 > module's text from that thing; if it was in a file, you'd see the file
 > name there).
 >
 > Perhaps define/contract, then, needs to put more information into the
 > way it names parties so that the "anonymous module" bit in the
 > original error would include more information.
 >
 > And perhaps also we need to put something in the Guide that dissects
 > the contract error messages.
 >
 > Robby
 >
 > #lang racket/load
 > (module A racket
 > =A0(define foo%
 > =A0 =A0(class object%
 > =A0 =A0 =A0(init fun)
 > =A0 =A0 =A0(define fun-field fun)
 > =A0 =A0 =A0(super-new)
 > =A0 =A0 =A0(define/public (funM) (fun-field))))
 > =A0(provide/contract
 > =A0 [foo%
 > =A0 =A0(class/c
 > =A0 =A0 (init
 > =A0 =A0 =A0(fun (-> number?)))
 > =A0 =A0 (funM (->m integer?)))]))
 >
 > (module B racket
 > =A0(require 'A)
 >
 > =A0(define bar%
 > =A0 =A0(class foo%
 > =A0 =A0 =A0(init)
 > =A0 =A0 =A0(super-new (fun (lambda () #f)))))
 >
 > =A0; Correct Source Location
 > =A0;(send (new foo% (fun (lambda () 2.4))) funM)
 >
 > =A0; Wrong Source Location
 > =A0;(send (new bar%) funM)
 >
 > =A0; Wrong Source Location
 > =A0(send (new foo% (fun (lambda () #f))) funM))
 >
 > (require 'B)
 >
 >

Responsible changed from "nobody" to "sstrickl" by sstrickl at Thu, 19 Aug 2010 11:53:28 -0400
Reason>>> class/c => sstrickl

State changed from "open" to "feedback" by sstrickl at Thu, 19 Aug 2010 11:53:28 -0400
Reason>>> I haven't seen anything requiring change yet, but we're still discussing it.

From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for contract errors
Date: Thu, 19 Aug 2010 11:59:58 -0400

 On Aug 19, 2010, at 11:33 AM, Casey Klein wrote:
 
 > I want more than the identity of the blamed party. The blamed party
 > might be a huge region; I want the location within the region that
 > pushed the illegal value across the boundary. In Eric's third example,
 > that location is (new foo% (fun (lambda () #f))), specifically the
 > `fun' argument.
 
 
 This change has nothing to do whatsoever with 
 class contracts. You should file a separate 
 feature request and immediately assign it to 
 your busy advisor just so that he doesn't think 
 there's end of the light of the tunnel. 
 
 (Imagine a thousand line module and some closure
 flowing out of it and across some monitored channel.
 You won't get the source of this function; only that
 the 1000 line module did bad by you.) 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 11:04:37 -0500

 On the bright side, if we had that, we'd be one step closer to
 automatically producing test cases from contract violations.
 
 Robby
 
 On Thu, Aug 19, 2010 at 10:59 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Aug 19, 2010, at 11:33 AM, Casey Klein wrote:
 >
 >> I want more than the identity of the blamed party. The blamed party
 >> might be a huge region; I want the location within the region that
 >> pushed the illegal value across the boundary. In Eric's third example,
 >> that location is (new foo% (fun (lambda () #f))), specifically the
 >> `fun' argument.
 >
 >
 > This change has nothing to do whatsoever with
 > class contracts. You should file a separate
 > feature request and immediately assign it to
 > your busy advisor just so that he doesn't think
 > there's end of the light of the tunnel.
 >
 > (Imagine a thousand line module and some closure
 > flowing out of it and across some monitored channel.
 > You won't get the source of this function; only that
 > the 1000 line module did bad by you.)
 >
From: Casey Klein <clklein@eecs.northwestern.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 11:13:09 -0500

 On Thu, Aug 19, 2010 at 10:59 AM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Aug 19, 2010, at 11:33 AM, Casey Klein wrote:
 >
 >> I want more than the identity of the blamed party. The blamed party
 >> might be a huge region; I want the location within the region that
 >> pushed the illegal value across the boundary. In Eric's third example,
 >> that location is (new foo% (fun (lambda () #f))), specifically the
 >> `fun' argument.
 >
 >
 > This change has nothing to do whatsoever with
 > class contracts. You should file a separate
 > feature request
 
 It's not a separate request. Eric is complaining that violations of
 non-flat contracts report unhelpful source locations. He happened to
 observe it with a class contract, but I predict he would have filed a
 nearly identical bug report if he instead observed the behavior
 through a function contract.
 
 But maybe I'm misreading his report.
From: Robby Findler <robby@eecs.northwestern.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 11:15:09 -0500

 I think Matthias meant to say "This change has nothing to do
 whatsoever with class contracts. We should change the title of this
 PR." and then what he said afterwards. :)
 
 Robby
 
 On Thu, Aug 19, 2010 at 11:13 AM, Casey Klein
 <clklein@eecs.northwestern.edu> wrote:
 > On Thu, Aug 19, 2010 at 10:59 AM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>
 >> On Aug 19, 2010, at 11:33 AM, Casey Klein wrote:
 >>
 >>> I want more than the identity of the blamed party. The blamed party
 >>> might be a huge region; I want the location within the region that
 >>> pushed the illegal value across the boundary. In Eric's third example,
 >>> that location is (new foo% (fun (lambda () #f))), specifically the
 >>> `fun' argument.
 >>
 >>
 >> This change has nothing to do whatsoever with
 >> class contracts. You should file a separate
 >> feature request
 >
 > It's not a separate request. Eric is complaining that violations of
 > non-flat contracts report unhelpful source locations. He happened to
 > observe it with a class contract, but I predict he would have filed a
 > nearly identical bug report if he instead observed the behavior
 > through a function contract.
 >
 > But maybe I'm misreading his report.
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Casey Klein <clklein@eecs.northwestern.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for contract errors
Date: Thu, 19 Aug 2010 12:36:03 -0400

 On Aug 19, 2010, at 12:13 PM, Casey Klein wrote:
 
 > But maybe I'm misreading his report.
 
 
 Casey, your generosity qualifies you for sainthood :-) 
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 12:40:14 -0400

 So, usually, does Eric. (-:
 
 Shriram (being nice to his upcoming head TA...)
 
 On Thu, Aug 19, 2010 at 12:36 PM, Matthias Felleisen
 <matthias@ccs.neu.edu> wrote:
 >
 > On Aug 19, 2010, at 12:13 PM, Casey Klein wrote:
 >
 >> But maybe I'm misreading his report.
 >
 >
 > Casey, your generosity qualifies you for sainthood :-)
 >
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for contract errors
Date: Thu, 19 Aug 2010 12:44:12 -0400

 Two saints on one team? Man, other than in football you can't find this =
 anywhere, right?=20
 
 
 On Aug 19, 2010, at 12:40 PM, Shriram Krishnamurthi wrote:
 
 > So, usually, does Eric. (-:
 >=20
 > Shriram (being nice to his upcoming head TA...)
 >=20
 > On Thu, Aug 19, 2010 at 12:36 PM, Matthias Felleisen
 > <matthias@ccs.neu.edu> wrote:
 >>=20
 >> On Aug 19, 2010, at 12:13 PM, Casey Klein wrote:
 >>=20
 >>> But maybe I'm misreading his report.
 >>=20
 >>=20
 >> Casey, your generosity qualifies you for sainthood :-)
 >>=20
 
From: Shriram Krishnamurthi <sk@cs.brown.edu>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 12:49:50 -0400

 I love how Matthias slips in these references to make it sound like he
 knows something about the USA, a place he usually otherwise refers to
 as "Where's that?"  They probably gave him a book of such one-liners
 after his citizenship interview.
From: Matthias Felleisen <matthias@ccs.neu.edu>
To: Shriram Krishnamurthi <sk@cs.brown.edu>
Cc: Casey Klein <clklein@eecs.northwestern.edu>,
        Robby Findler <robby@eecs.northwestern.edu>,
        endobson <endobson@cs.brown.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for contract errors
Date: Thu, 19 Aug 2010 13:01:01 -0400

 On Aug 19, 2010, at 12:49 PM, Shriram Krishnamurthi wrote:
 
 > I love how Matthias slips in these references to make it sound like he
 > knows something about the USA, a place he usually otherwise refers to
 > as "Where's that?"  They probably gave him a book of such one-liners
 > after his citizenship interview.
 
 
 When you get your passport, you will find a cheat sheet of such phrases =
 in between page 2 and page 2 1/2. It's intended for naturalized guys, =
 with a natural style and difficult to find but no big deal for =
 herr-professor-doctors like yourself.=20=
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Matthias Felleisen <matthias@ccs.neu.edu>
Cc: endobson@cs.brown.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for contract errors
Date: Thu, 19 Aug 2010 23:21:31 -0400

 This is an OpenPGP/MIME signed message (RFC 2440 and 3156)
 --Apple-Mail-1--975386478
 Content-Transfer-Encoding: quoted-printable
 Content-Type: text/plain; charset=us-ascii
 
 Going over this 'bug' again I do not believe there is anything wrong.
 
 The problem was that in my original code the construction of bar% was in =
 a different module, and the contract error was blaming the module that =
 contained foo%. This looked like somewhere a positive and negative side =
 of the contract were inverted. What was actually happening was the =
 boundary was not the module (as with provide/contract) but within it at =
 the define/contract, and thus the foo% module was correctly blamed.
 
 
 
 But for changes I would like the reverse of number 2. I use the command =
 line racket to run my code and looking at the output of drracket with =
 the arrows it seems that there exists a more useful stack trace than the =
 current command line provides:
 
 /Users/eric/tmp/test2.rkt:4.17:=20
   (file /Users/eric/tmp/test2.rkt)
  broke the contract=20
   (class/c
    (funM (-> integer?))
    (init (fun (-> number?))))
  on foo%; expected <number?>, given: #f
 
  =3D=3D=3D context =3D=3D=3D
 /Applications/Racket =
 v5.0.1/collects/racket/contract/private/blame.rkt:54:0: =
 raise-blame-error
 /Applications/Racket =
 v5.0.1/collects/racket/contract/private/arrow.rkt:1445:3
 /Users/eric/tmp/test2.rkt: [running body]
 
 Maybe by expanding out the '[running body]' which looks like what =
 drracket is reporting.
 
 -Eric
 
 On Aug 19, 2010, at 11:13 AM, Matthias Felleisen wrote:
 
 >=20
 > On Aug 19, 2010, at 12:32 AM, endobson@cs.brown.edu wrote:
 >=20
 >> The attached code does not blame bar%
 >=20
 > This is the essence of contracts, which dynamically monitor whether =
 values satisfy properties when they cross boundaries. Since it is =
 impossible to decide properties for higher-order values (objects, =
 classes, functions), monitoring means 'delay checks until used but make =
 sure you blame the proper parties.'=20
 >=20
 > Perhaps this could be better explained in the Contract docs/faq, but I =
 am pretty sure it is well explained. Could you point to something in the =
 contract docs that gives you the impression Racket should catch this =
 violation?=20
 >=20
 >=20
 >> or the construction of the foo% for passing in illegal arguments.
 >=20
 > See above. But also see below.=20
 >=20
 >=20
 >> The errors are correctly assigning blame to the 'number?' predicate =
 but failing to get the correct source location.=20
 >=20
 >=20
 > Perhaps DrRacket should use different words but all the information is =
 actually in there.=20
 >=20
 > 1. the module contains one boundary, your contract
 >=20
 > 2. 'anonymous-module refers to the code outside of the boundary=20
 >=20
 > 3. it is being blamed for creating an instance of foo%=20
 >=20
 > Specifically, you're told that the boundary monitor says
 >=20
 >   the fun init parameter should produce a number=20
 >   every time it is used
 >=20
 > and the message says it didn't (on some use)
 >=20
 > 4. the higlighting and the arrow explain how the violation was =
 discovered. When fun-field was called the aliased fun function produced =
 #f and that #f would have emerged from the last expression in your =
 buffer.=20
 >=20
 > ;; ---=20
 >=20
 > There is nothing wrong with the idea of the reporting. I can see you =
 asking for two kinds of changes:=20
 >=20
 > A: use words that I understand when you report a contract violation =
 (anonymous module is weird and ambiguous)
 >=20
 > B: do not show me silly information about how the contract system =
 discovered the violation and what damage would have been caused had the =
 evaluation continued.=20
 >=20
 > Could you explain which option you were thinking of? Or could you =
 explain what you think is wrong in the sense that these error message =
 violate the principles of our contract documentation (which I assume you =
 have read)?=20
 >=20
 > Thanks. Feedback appreciated -- Matthias
 >=20
 >=20
 
 
 --Apple-Mail-1--975386478
 content-type: application/pgp-signature; x-mac-type=70674453;
 	name=PGP.sig
 content-description: This is a digitally signed message part
 content-disposition: inline; filename=PGP.sig
 content-transfer-encoding: 7bit
 
 -----BEGIN PGP SIGNATURE-----
 Version: GnuPG/MacGPG2 v2.0.14 (Darwin)
 
 iF4EAREIAAYFAkxt9OMACgkQZe43gSIOLf5zmgD6A0vf/bxc8gokeHh6XBmJao2v
 r9Gd/UvMjUqqkVGj1gIA/jOt7Xte2ILycQ/ssekQBd8tchkAZPwfNQdV83G/DrP+
 =3qt6
 -----END PGP SIGNATURE-----
 
 --Apple-Mail-1--975386478--

Class changed from "sw-bug" to "not-a-bug" by robby at Thu, 19 Aug 2010 23:24:30 -0400
Reason>>> no-a-bug

From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Matthias Felleisen <matthias@ccs.neu.edu>, endobson@cs.brown.edu,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11112: class/c gives wrong source location for
 contract errors
Date: Thu, 19 Aug 2010 22:24:06 -0500

 DrRacket provides a stack trace with a lot more information, but with
 a correspondingly higher cost in runtime to maintain. You can achieve
 some of that by using the errortrace library.
 
 Robby
 
 On Thu, Aug 19, 2010 at 10:21 PM, Eric Dobson <eric.n.dobson@gmail.com> wro=
 te:
 > Going over this 'bug' again I do not believe there is anything wrong.
 >
 > The problem was that in my original code the construction of bar% was in =
 a different module, and the contract error was blaming the module that cont=
 ained foo%. This looked like somewhere a positive and negative side of the =
 contract were inverted. What was actually happening was the boundary was no=
 t the module (as with provide/contract) but within it at the define/contrac=
 t, and thus the foo% module was correctly blamed.
 >
 >
 >
 > But for changes I would like the reverse of number 2. I use the command l=
 ine racket to run my code and looking at the output of drracket with the ar=
 rows it seems that there exists a more useful stack trace than the current =
 command line provides:
 >
 > /Users/eric/tmp/test2.rkt:4.17:
 > =C2=A0(file /Users/eric/tmp/test2.rkt)
 > =C2=A0broke the contract
 > =C2=A0(class/c
 > =C2=A0 (funM (-> integer?))
 > =C2=A0 (init (fun (-> number?))))
 > =C2=A0on foo%; expected <number?>, given: #f
 >
 > =C2=A0=3D=3D=3D context =3D=3D=3D
 > /Applications/Racket v5.0.1/collects/racket/contract/private/blame.rkt:54=
 :0: raise-blame-error
 > /Applications/Racket v5.0.1/collects/racket/contract/private/arrow.rkt:14=
 45:3
 > /Users/eric/tmp/test2.rkt: [running body]
 >
 > Maybe by expanding out the '[running body]' which looks like what drracke=
 t is reporting.
 >
 > -Eric
 >
 > On Aug 19, 2010, at 11:13 AM, Matthias Felleisen wrote:
 >
 >>
 >> On Aug 19, 2010, at 12:32 AM, endobson@cs.brown.edu wrote:
 >>
 >>> The attached code does not blame bar%
 >>
 >> This is the essence of contracts, which dynamically monitor whether valu=
 es satisfy properties when they cross boundaries. Since it is impossible to=
  decide properties for higher-order values (objects, classes, functions), m=
 onitoring means 'delay checks until used but make sure you blame the proper=
  parties.'
 >>
 >> Perhaps this could be better explained in the Contract docs/faq, but I a=
 m pretty sure it is well explained. Could you point to something in the con=
 tract docs that gives you the impression Racket should catch this violation=
 ?
 >>
 >>
 >>> or the construction of the foo% for passing in illegal arguments.
 >>
 >> See above. But also see below.
 >>
 >>
 >>> The errors are correctly assigning blame to the 'number?' predicate but=
  failing to get the correct source location.
 >>
 >>
 >> Perhaps DrRacket should use different words but all the information is a=
 ctually in there.
 >>
 >> 1. the module contains one boundary, your contract
 >>
 >> 2. 'anonymous-module refers to the code outside of the boundary
 >>
 >> 3. it is being blamed for creating an instance of foo%
 >>
 >> Specifically, you're told that the boundary monitor says
 >>
 >> =C2=A0 the fun init parameter should produce a number
 >> =C2=A0 every time it is used
 >>
 >> and the message says it didn't (on some use)
 >>
 >> 4. the higlighting and the arrow explain how the violation was discovere=
 d. When fun-field was called the aliased fun function produced #f and that =
 #f would have emerged from the last expression in your buffer.
 >>
 >> ;; ---
 >>
 >> There is nothing wrong with the idea of the reporting. I can see you ask=
 ing for two kinds of changes:
 >>
 >> A: use words that I understand when you report a contract violation (ano=
 nymous module is weird and ambiguous)
 >>
 >> B: do not show me silly information about how the contract system discov=
 ered the violation and what damage would have been caused had the evaluatio=
 n continued.
 >>
 >> Could you explain which option you were thinking of? Or could you explai=
 n what you think is wrong in the sense that these error message violate the=
  principles of our contract documentation (which I assume you have read)?
 >>
 >> Thanks. Feedback appreciated -- Matthias
 >>
 >>
 >
 >


State changed from "feedback" to "closed" by samth at Fri, 02 Dec 2011 15:06:12 -0500
Reason>>> not a bug

