From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Tue Oct 26 17:48:15 2010
Received: from mail-yw0-f44.google.com (mail-yw0-f44.google.com [209.85.213.44])
	by champlain.ccs.neu.edu (8.14.3/8.14.3) with ESMTP id o9QLmCcS023122
	for <bugs@bugs.plt-scheme.org>; Tue, 26 Oct 2010 17:48:12 -0400
Message-Id: <201010262148.o9QLm96F023114@champlain.ccs.neu.edu>
Date: Tue, 26 Oct 2010 17:48:09 -0400
From: rafkind@cs.utah.edu
To: bugs@racket-lang.org
Subject: or/c only reports make/contract violations

>Number:         11359
>Category:       contract
>Synopsis:       or/c only reports make/contract violations
>Class:          sw-bug
>Responsible:    sstrickl
>Severity:       serious
>Priority:       medium
>State:          analyzed
>Confidential:   no
>Arrival-Date:   Tue Oct 26 17:52:01 -0400 2010
>Closed-Date:    
>Last-Modified:  Wed Dec 15 14:48:41 -0500 2010
>Originator:     Jon Rafkind
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.0.2.1
>Environment:
Linux i686 / Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.8 Safari/534.7
>Description:
A contract violation on an `or/c' expression only lists contracts made by `make-contract' when they are used.

;; begin
(define my-number? (make-contract #:name 'my-number
                                  #:first-order (lambda (x)
                                                  (number? x))))

(define/contract (foo a)
                 (-> (or/c number? string?) number?)
                 5)

; (foo 'x)

(define/contract (foo/mine a)
                 (-> (or/c string? my-number?) number?)
                 5)
(foo/mine 'x)
;; end

Evaluating (foo 'x) yields
/home/jon/tmp/m.rkt:7.18: (file /home/jon/tmp/m.rkt) broke the contract 
  (-> (or/c number? string?) number?)
 on foo; expected <(or/c number? string?)>, given: 'x

While evaluating (foo/mine 'x) yields
/home/jon/tmp/m.rkt:13.18: (file /home/jon/tmp/m.rkt) broke the contract 
  (-> (or/c my-number string?) number?)
 on foo/mine; expected <my-number>, given: 'x

The `string?' contract was dropped from the list of expected things.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: rafkind@cs.utah.edu, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11359: or/c only reports make/contract violations
Date: Tue, 26 Oct 2010 18:08:19 -0400

 What you're seeing is the difference between higher-order contracts and =
 flat contracts in or/c.  If you change `make-contract' to =
 `make-flat-contract', you'll notice the behavior you expected.
 
 IIRC, this is because when a single higher-order contract is involved, =
 it checks all the flat contracts and then, if they fail, it applies the =
 projection for the higher-order contract to the value.  (For multiple =
 ho-contracts, it's a similar process, but it checks the first-order =
 properties of the higher-order contracts to decide which to apply, if =
 any.)  So the "expected <(or/c ...)>" error is coming from or/c itself, =
 and the "expected <my-number>" error is coming from the projection =
 generated by make-contract (since you didn't provide one yourself).
 
 Stevie
 
 On Oct 26, 2010, at 5:52 PM, rafkind@cs.utah.edu wrote:
 
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11359
 >=20
 > Reported by Jon Rafkind for release: 5.0.2.1
 >=20
 > *** Description:
 > A contract violation on an `or/c' expression only lists contracts made =
 by `make-contract' when they are used.
 >=20
 > ;; begin
 > (define my-number? (make-contract #:name 'my-number
 >                                  #:first-order (lambda (x)
 >                                                  (number? x))))
 >=20
 > (define/contract (foo a)
 >                 (-> (or/c number? string?) number?)
 >                 5)
 >=20
 > ; (foo 'x)
 >=20
 > (define/contract (foo/mine a)
 >                 (-> (or/c string? my-number?) number?)
 >                 5)
 > (foo/mine 'x)
 > ;; end
 >=20
 > Evaluating (foo 'x) yields
 > /home/jon/tmp/m.rkt:7.18: (file /home/jon/tmp/m.rkt) broke the =
 contract=20
 >  (-> (or/c number? string?) number?)
 > on foo; expected <(or/c number? string?)>, given: 'x
 >=20
 > While evaluating (foo/mine 'x) yields
 > /home/jon/tmp/m.rkt:13.18: (file /home/jon/tmp/m.rkt) broke the =
 contract=20
 >  (-> (or/c my-number string?) number?)
 > on foo/mine; expected <my-number>, given: 'x
 >=20
 > The `string?' contract was dropped from the list of expected things.
 >=20
 > *** How to repeat:
 >=20
 >=20
 > *** Environment:
 > Linux i686 / Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/534.7 =
 (KHTML, like Gecko) Chrome/7.0.517.8 Safari/534.7
 >=20
 
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: rafkind@cs.utah.edu, bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/11359: or/c only reports make/contract violations
Date: Tue, 26 Oct 2010 18:32:34 -0400

 To be clear, while it would be great if the higher-order case reported a =
 similar error message as the flat case, I don't see a good way of doing =
 this without some large reengineering.  Thus, I don't think this is a =
 bug that will get fixed in the near future, if at all.
 
 However, in further discussion over IRC Jon has pointed out that there =
 doesn't seem to be a short, clear section in the docs about the =
 differences between flat and higher-order contracts, much less chaperone =
 and proxy contracts.  I think such a section should be added and pointed =
 at in appropriate places, such as the documentation for make-contract =
 and friends.
 
 I'll make another bug report for the documentation issue, and leave this =
 one open (though analyzed) just in case it ever gets revisited and/or =
 possible to fix.
 
 Stevie
 
 On Oct 26, 2010, at 6:08 PM, Stevie Strickland wrote:
 
 > What you're seeing is the difference between higher-order contracts =
 and flat contracts in or/c.  If you change `make-contract' to =
 `make-flat-contract', you'll notice the behavior you expected.
 >=20
 > IIRC, this is because when a single higher-order contract is involved, =
 it checks all the flat contracts and then, if they fail, it applies the =
 projection for the higher-order contract to the value.  (For multiple =
 ho-contracts, it's a similar process, but it checks the first-order =
 properties of the higher-order contracts to decide which to apply, if =
 any.)  So the "expected <(or/c ...)>" error is coming from or/c itself, =
 and the "expected <my-number>" error is coming from the projection =
 generated by make-contract (since you didn't provide one yourself).
 >=20
 > Stevie
 >=20
 > On Oct 26, 2010, at 5:52 PM, rafkind@cs.utah.edu wrote:
 >=20
 >> A new problem report is waiting at
 >> http://bugs.racket-lang.org/query/?cmd=3Dview&pr=3D11359
 >>=20
 >> Reported by Jon Rafkind for release: 5.0.2.1
 >>=20
 >> *** Description:
 >> A contract violation on an `or/c' expression only lists contracts =
 made by `make-contract' when they are used.
 >>=20
 >> ;; begin
 >> (define my-number? (make-contract #:name 'my-number
 >>                                 #:first-order (lambda (x)
 >>                                                 (number? x))))
 >>=20
 >> (define/contract (foo a)
 >>                (-> (or/c number? string?) number?)
 >>                5)
 >>=20
 >> ; (foo 'x)
 >>=20
 >> (define/contract (foo/mine a)
 >>                (-> (or/c string? my-number?) number?)
 >>                5)
 >> (foo/mine 'x)
 >> ;; end
 >>=20
 >> Evaluating (foo 'x) yields
 >> /home/jon/tmp/m.rkt:7.18: (file /home/jon/tmp/m.rkt) broke the =
 contract=20
 >> (-> (or/c number? string?) number?)
 >> on foo; expected <(or/c number? string?)>, given: 'x
 >>=20
 >> While evaluating (foo/mine 'x) yields
 >> /home/jon/tmp/m.rkt:13.18: (file /home/jon/tmp/m.rkt) broke the =
 contract=20
 >> (-> (or/c my-number string?) number?)
 >> on foo/mine; expected <my-number>, given: 'x
 >>=20
 >> The `string?' contract was dropped from the list of expected things.
 >>=20
 >> *** How to repeat:
 >>=20
 >>=20
 >> *** Environment:
 >> Linux i686 / Mozilla/5.0 (X11; U; Linux i686; en-US) =
 AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.8 Safari/534.7
 >>=20
 >=20
 

Responsible changed from "nobody" to "sstrickl" by sstrickl at Tue, 26 Oct 2010 18:37:56 -0400
Reason>>> Might as well take it since I've at least given a little thought to it.

State changed from "open" to "analyzed" by sstrickl at Tue, 26 Oct 2010 18:37:56 -0400
Reason>>> Explanation is in the audit trail. A solution is not immediately forthcoming.


