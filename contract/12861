From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Jun 21 00:07:03 2012
Received: from mail-vc0-f172.google.com (mail-vc0-f172.google.com [209.85.220.172])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id q5L46x2N007126
	for <bugs@bugs.plt-scheme.org>; Thu, 21 Jun 2012 00:06:59 -0400
Message-Id: <201206210406.q5L46twj007116@champlain.ccs.neu.edu>
Date: Thu, 21 Jun 2012 00:06:55 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: promise/c does not maintain equality

>Number:         12861
>Category:       contract
>Synopsis:       promise/c does not maintain equality
>Class:          sw-bug
>Responsible:    sstrickl
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Thu Jun 21 00:08:01 -0400 2012
>Closed-Date:    Sat Mar 09 11:32:54 -0500 2013
>Last-Modified:  Sat Mar 09 11:32:54 -0500 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.3.0.11
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27
>Description:
Contracts are supposed to not change the result of a program but promise/c does not maintain equality.

>How-To-Repeat:
#lang racket
(define a (delay 7))

(define/contract b
    (promise/c integer?)
    a)

(define c a)

(equal? a b)
(equal? a c)
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: eric.n.dobson@gmail.com, bugs@racket-lang.org
Cc: nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Thu, 21 Jun 2012 07:27:46 -0500

 In order for this to work, I think that the promise library would have
 to be extended by adding chaperone-promise and impersonate-promise
 functions (like chaperone-procedure and presumably implemented in
 terms of them).
 
 Robby
 
 On Wed, Jun 20, 2012 at 11:08 PM,  <eric.n.dobson@gmail.com> wrote:
 > A new problem report is waiting at
 >  http://bugs.racket-lang.org/query/?cmd=view&pr=12861
 >
 > Reported by Eric Dobson for release: 5.3.0.11
 >
 > *** Description:
 > Contracts are supposed to not change the result of a program but promise/c does not maintain equality.
 >
 >
 > *** How to repeat:
 > #lang racket
 > (define a (delay 7))
 >
 > (define/contract b
 >    (promise/c integer?)
 >    a)
 >
 > (define c a)
 >
 > (equal? a b)
 > (equal? a c)
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27
 >
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Thu, 21 Jun 2012 08:47:49 -0700

 Why could this not be implemented as
 
 Inside of the #:higher-order part of a contract where blame, p, and value/c are bound to the obvious things.
  
 (chaperone-struct 
   p
   prop:force (lambda (p f)
    (define new-blame (blame-add-context "in the value of" blame))
    (define value-proj ((contract-projection value/c) new-blame))
    (chaperone-procedure f (lambda () (lambda (ret) (value-proj ret))))
 
 The only thing that needs to be exported is prop:force which is already exported from racket/private/promise.rkt. I'm not sure what you would wrap with chaperone-promise/impersonate-promise, so I'm not sure how that is different.
 
 On Jun 21, 2012, at 5:27 AM, Robby Findler wrote:
 
 > In order for this to work, I think that the promise library would have
 > to be extended by adding chaperone-promise and impersonate-promise
 > functions (like chaperone-procedure and presumably implemented in
 > terms of them).
 > 
 > Robby
 > 
 > On Wed, Jun 20, 2012 at 11:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >> A new problem report is waiting at
 >>  http://bugs.racket-lang.org/query/?cmd=view&pr=12861
 >> 
 >> Reported by Eric Dobson for release: 5.3.0.11
 >> 
 >> *** Description:
 >> Contracts are supposed to not change the result of a program but promise/c does not maintain equality.
 >> 
 >> 
 >> *** How to repeat:
 >> #lang racket
 >> (define a (delay 7))
 >> 
 >> (define/contract b
 >>    (promise/c integer?)
 >>    a)
 >> 
 >> (define c a)
 >> 
 >> (equal? a b)
 >> (equal? a c)
 >> 
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27
 >> 
 
 
Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/467bde3a25
State changed from "open" to "closed" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
Reason>>> A commit by robby@racket-lang.org has resolved this report
  http://git.racket-lang.org/plt/commit/467bde3a25
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Wed, 4 Jul 2012 18:43:32 -0500

 Thanks. And sorry for the delay getting to this.
 
 Eli: I provided promise-forcer from racket/private/promise.rkt (and
 then use it in racket/contract/private/misc.rkt). Hope that's okay.
 
 Robby
 
 On Thu, Jun 21, 2012 at 10:47 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > Why could this not be implemented as
 >
 > Inside of the #:higher-order part of a contract where blame, p, and value/c are bound to the obvious things.
 >
 > (chaperone-struct
 >   p
 >   prop:force (lambda (p f)
 >    (define new-blame (blame-add-context "in the value of" blame))
 >    (define value-proj ((contract-projection value/c) new-blame))
 >    (chaperone-procedure f (lambda () (lambda (ret) (value-proj ret))))
 >
 > The only thing that needs to be exported is prop:force which is already exported from racket/private/promise.rkt. I'm not sure what you would wrap with chaperone-promise/impersonate-promise, so I'm not sure how that is different.
 >
 > On Jun 21, 2012, at 5:27 AM, Robby Findler wrote:
 >
 >> In order for this to work, I think that the promise library would have
 >> to be extended by adding chaperone-promise and impersonate-promise
 >> functions (like chaperone-procedure and presumably implemented in
 >> terms of them).
 >>
 >> Robby
 >>
 >> On Wed, Jun 20, 2012 at 11:08 PM,  <eric.n.dobson@gmail.com> wrote:
 >>> A new problem report is waiting at
 >>>  http://bugs.racket-lang.org/query/?cmd=view&pr=12861
 >>>
 >>> Reported by Eric Dobson for release: 5.3.0.11
 >>>
 >>> *** Description:
 >>> Contracts are supposed to not change the result of a program but promise/c does not maintain equality.
 >>>
 >>>
 >>> *** How to repeat:
 >>> #lang racket
 >>> (define a (delay 7))
 >>>
 >>> (define/contract b
 >>>    (promise/c integer?)
 >>>    a)
 >>>
 >>> (define c a)
 >>>
 >>> (equal? a b)
 >>> (equal? a c)
 >>>
 >>> *** Environment:
 >>> MacIntel / Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27
 >>>
 >
 
From: Eric Dobson <eric.n.dobson@gmail.com>
To: bugs@racket-lang.org
Cc: robby@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 00:31:42 -0700

 This is not fixed. It is only fixed for chaperone contracts not
 impersonator contracts.
 
 Shown below (object/c) maintains equality but (promise/c (object/c)) does not.
 
 #lang racket
 
 (define v (delay 3))
 (define/contract v2 (promise/c number?) v)
 
 (equal? v v2)
 
 
 (define o (new object%))
 (define o/c (object/c))
 (define/contract o2 o/c o)
 
 (define o3 (delay o))
 (define/contract o4 (promise/c o/c) o3)
 
 (equal? o o2)
 (equal? o3 o4)
 
 
 
 On Wed, Jul 4, 2012 at 4:43 PM,  <robby@racket-lang.org> wrote:
 >
 > Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 > Reason>>> A commit by robby@racket-lang.org has resolved this report
 >   http://git.racket-lang.org/plt/commit/467bde3a25
 > State changed from "open" to "closed" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 > Reason>>> A commit by robby@racket-lang.org has resolved this report
 >   http://git.racket-lang.org/plt/commit/467bde3a25
 >
 > View:
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=12861
 >

State changed from "closed" to "open" by samth at Tue, 10 Jul 2012 07:20:04 -0400
Reason>>> Submitter reports not fixed.

From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org,
        Stevie Strickland <sstrickl@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 07:15:09 -0500

 But actually I'm not sure why (object/c) is not a chaperone contract, actually.
 
 Robby
 
 On Tue, Jul 10, 2012 at 2:31 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > This is not fixed. It is only fixed for chaperone contracts not
 > impersonator contracts.
 >
 > Shown below (object/c) maintains equality but (promise/c (object/c)) does not.
 >
 > #lang racket
 >
 > (define v (delay 3))
 > (define/contract v2 (promise/c number?) v)
 >
 > (equal? v v2)
 >
 >
 > (define o (new object%))
 > (define o/c (object/c))
 > (define/contract o2 o/c o)
 >
 > (define o3 (delay o))
 > (define/contract o4 (promise/c o/c) o3)
 >
 > (equal? o o2)
 > (equal? o3 o4)
 >
 >
 >
 > On Wed, Jul 4, 2012 at 4:43 PM,  <robby@racket-lang.org> wrote:
 >>
 >> Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 >> Reason>>> A commit by robby@racket-lang.org has resolved this report
 >>   http://git.racket-lang.org/plt/commit/467bde3a25
 >> State changed from "open" to "closed" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 >> Reason>>> A commit by robby@racket-lang.org has resolved this report
 >>   http://git.racket-lang.org/plt/commit/467bde3a25
 >>
 >> View:
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12861
 >>
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 07:13:20 -0500

 Generative structs (like promises) cannot be impersonated so I'm not
 sure how you'd fix this.
 
 Robby
 
 On Tue, Jul 10, 2012 at 2:31 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > This is not fixed. It is only fixed for chaperone contracts not
 > impersonator contracts.
 >
 > Shown below (object/c) maintains equality but (promise/c (object/c)) does not.
 >
 > #lang racket
 >
 > (define v (delay 3))
 > (define/contract v2 (promise/c number?) v)
 >
 > (equal? v v2)
 >
 >
 > (define o (new object%))
 > (define o/c (object/c))
 > (define/contract o2 o/c o)
 >
 > (define o3 (delay o))
 > (define/contract o4 (promise/c o/c) o3)
 >
 > (equal? o o2)
 > (equal? o3 o4)
 >
 >
 >
 > On Wed, Jul 4, 2012 at 4:43 PM,  <robby@racket-lang.org> wrote:
 >>
 >> Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 >> Reason>>> A commit by robby@racket-lang.org has resolved this report
 >>   http://git.racket-lang.org/plt/commit/467bde3a25
 >> State changed from "open" to "closed" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 >> Reason>>> A commit by robby@racket-lang.org has resolved this report
 >>   http://git.racket-lang.org/plt/commit/467bde3a25
 >>
 >> View:
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=12861
 >>

Responsible changed from "robby" to "sstrickl" by robby at Tue, 10 Jul 2012 08:22:14 -0400
Reason>>> object/c

From: Carl Eastlund <cce@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 08:49:33 -0400

 I believe the impersonate-struct procedure allows that, actually.
 Unless I've misunderstood something.  And I suspect object/c is an
 impersonator so that method wrappers can be impersonators, as well.
 Otherwise they would be restricted to only chaperones.
 
 http://docs.racket-lang.org/reference/chaperones.html#%28def._%28%28quote._~23~25kernel%29._impersonate-struct%29%29
 
 Carl Eastlund
 
 On Tue, Jul 10, 2012 at 8:13 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > Generative structs (like promises) cannot be impersonated so I'm not
 > sure how you'd fix this.
 >
 > Robby
 >
 > On Tue, Jul 10, 2012 at 2:31 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> This is not fixed. It is only fixed for chaperone contracts not
 >> impersonator contracts.
 >>
 >> Shown below (object/c) maintains equality but (promise/c (object/c)) does not.
 >>
 >> #lang racket
 >>
 >> (define v (delay 3))
 >> (define/contract v2 (promise/c number?) v)
 >>
 >> (equal? v v2)
 >>
 >>
 >> (define o (new object%))
 >> (define o/c (object/c))
 >> (define/contract o2 o/c o)
 >>
 >> (define o3 (delay o))
 >> (define/contract o4 (promise/c o/c) o3)
 >>
 >> (equal? o o2)
 >> (equal? o3 o4)
 >>
 >>
 >>
 >> On Wed, Jul 4, 2012 at 4:43 PM,  <robby@racket-lang.org> wrote:
 >>>
 >>> Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 >>> Reason>>> A commit by robby@racket-lang.org has resolved this report
 >>>   http://git.racket-lang.org/plt/commit/467bde3a25
 >>> State changed from "open" to "closed" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 >>> Reason>>> A commit by robby@racket-lang.org has resolved this report
 >>>   http://git.racket-lang.org/plt/commit/467bde3a25
 >>>
 >>> View:
 >>>   http://bugs.racket-lang.org/query/?cmd=view&pr=12861
 >>>
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Carl Eastlund <cce@ccs.neu.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 07:54:29 -0500

 On Tue, Jul 10, 2012 at 7:49 AM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 > I believe the impersonate-struct procedure allows that, actually.
 
 Welcome to Racket v5.3.0.13.
 > (define-struct s (a))
 > (impersonate-struct (s 1) s-a (lambda (x y) 5))
 impersonate-struct: cannot replace operation for an immutable field
   operation kind: accessor
   operation procedure: #<procedure:s-a>
   context...:
    /Users/robby/git/exp/plt/collects/racket/private/misc.rkt:87:7
 >
 
 In the particular implementation needed for promises, the error comes
 from a struct property impersonation attempt, but it is similar
 rationale to the above.
 
 The general principle is that impersonators and generativity do not
 mix well, because the code that creates the struct can ensure
 invaraints about the struct just be being careful about how they are
 created, and impersonators could destroy those invariants.
 
 Stevie & Sam have a draft of our forthcoming OOPSLA paper that
 explains this in more detail.
 
 > Unless I've misunderstood something.  And I suspect object/c is an
 > impersonator so that method wrappers can be impersonators, as well.
 > Otherwise they would be restricted to only chaperones.
 
 Well, there are no methods in this case. And, in general, if the
 method contracts are all chaperones, it would seem that the object
 contract can be too, unless I'm missing something?
 
 Robby
 
 > http://docs.racket-lang.org/reference/chaperones.html#%28def._%28%28quote._~23~25kernel%29._impersonate-struct%29%29
 >
 > Carl Eastlund
 >
 > On Tue, Jul 10, 2012 at 8:13 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> Generative structs (like promises) cannot be impersonated so I'm not
 >> sure how you'd fix this.
 >>
 >> Robby
 >>
 >> On Tue, Jul 10, 2012 at 2:31 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>> This is not fixed. It is only fixed for chaperone contracts not
 >>> impersonator contracts.
 >>>
 >>> Shown below (object/c) maintains equality but (promise/c (object/c)) does not.
 >>>
 >>> #lang racket
 >>>
 >>> (define v (delay 3))
 >>> (define/contract v2 (promise/c number?) v)
 >>>
 >>> (equal? v v2)
 >>>
 >>>
 >>> (define o (new object%))
 >>> (define o/c (object/c))
 >>> (define/contract o2 o/c o)
 >>>
 >>> (define o3 (delay o))
 >>> (define/contract o4 (promise/c o/c) o3)
 >>>
 >>> (equal? o o2)
 >>> (equal? o3 o4)
 >>>
 >>>
 >>>
 >>> On Wed, Jul 4, 2012 at 4:43 PM,  <robby@racket-lang.org> wrote:
 >>>>
 >>>> Responsible changed from "nobody" to "robby" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 >>>> Reason>>> A commit by robby@racket-lang.org has resolved this report
 >>>>   http://git.racket-lang.org/plt/commit/467bde3a25
 >>>> State changed from "open" to "closed" by robby@racket-lang.org at Wed, 04 Jul 2012 19:43:47 -0400
 >>>> Reason>>> A commit by robby@racket-lang.org has resolved this report
 >>>>   http://git.racket-lang.org/plt/commit/467bde3a25
 >>>>
 >>>> View:
 >>>>   http://bugs.racket-lang.org/query/?cmd=view&pr=12861
 >>>>
 >>
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Carl Eastlund <cce@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 08:58:14 -0400

 On Tue, Jul 10, 2012 at 8:54 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Tue, Jul 10, 2012 at 7:49 AM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 
 >> Unless I've misunderstood something.  And I suspect object/c is an
 >> impersonator so that method wrappers can be impersonators, as well.
 >> Otherwise they would be restricted to only chaperones.
 >
 > Well, there are no methods in this case. And, in general, if the
 > method contracts are all chaperones, it would seem that the object
 > contract can be too, unless I'm missing something?
 
 I'm pretty sure that Stevie has said that `object/c` could be a
 chaperone contract in some cases, but isn't currently.
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Carl Eastlund <cce@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 08:24:14 -0700

 Why is it not safe to allow impersonations of prop:force? You just
 should need to ensure that all impersonations are
 impersonate-procedure wrappers that only wrap the return value of the
 procedure. It seems like that could be done by providing something
 more specialized from private/promise.rkt instead of prop:force. It
 doesn't seem like there should be any invariants of the promise
 implementation on the value inside the promise.
 
 Also what do you mean by generative structs cannot be impersonated? I
 thought all non prefab structs were generative.
 
 
 
 
 
 
 On Tue, Jul 10, 2012 at 5:58 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Tue, Jul 10, 2012 at 8:54 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Tue, Jul 10, 2012 at 7:49 AM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >
 >>> Unless I've misunderstood something.  And I suspect object/c is an
 >>> impersonator so that method wrappers can be impersonators, as well.
 >>> Otherwise they would be restricted to only chaperones.
 >>
 >> Well, there are no methods in this case. And, in general, if the
 >> method contracts are all chaperones, it would seem that the object
 >> contract can be too, unless I'm missing something?
 >
 > I'm pretty sure that Stevie has said that `object/c` could be a
 > chaperone contract in some cases, but isn't currently.
 >
 > --
 > sam th
 > samth@ccs.neu.edu
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Carl Eastlund <cce@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Eli Barzilay <eli@barzilay.org>
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 11:33:10 -0400

 On Tue, Jul 10, 2012 at 11:24 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > Why is it not safe to allow impersonations of prop:force? You just
 > should need to ensure that all impersonations are
 > impersonate-procedure wrappers that only wrap the return value of the
 > procedure. It seems like that could be done by providing something
 > more specialized from private/promise.rkt instead of prop:force. It
 > doesn't seem like there should be any invariants of the promise
 > implementation on the value inside the promise.
 
 I think all that needs to be done is to create the `prop:force`
 property with `'can-impersonate` for the guard, if that's indeed safe.
  I've cc'ed Eli, who can speak to the safety of this.
 
 However, note that this would mean that:
 
   (equal? (force a) (force a))
 
 might produce `#f`, which I think would be a change to the guarantees
 that promises currently provide.
 
 > Also what do you mean by generative structs cannot be impersonated? I
 > thought all non prefab structs were generative.
 
 More specificially, immutable fields of structs that are not prefab
 can't be impersonated.
 
 >
 >
 >
 >
 >
 >
 > On Tue, Jul 10, 2012 at 5:58 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> On Tue, Jul 10, 2012 at 8:54 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> On Tue, Jul 10, 2012 at 7:49 AM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >>
 >>>> Unless I've misunderstood something.  And I suspect object/c is an
 >>>> impersonator so that method wrappers can be impersonators, as well.
 >>>> Otherwise they would be restricted to only chaperones.
 >>>
 >>> Well, there are no methods in this case. And, in general, if the
 >>> method contracts are all chaperones, it would seem that the object
 >>> contract can be too, unless I'm missing something?
 >>
 >> I'm pretty sure that Stevie has said that `object/c` could be a
 >> chaperone contract in some cases, but isn't currently.
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
 
 
 
 -- 
 sam th
 samth@ccs.neu.edu
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, Carl Eastlund <cce@ccs.neu.edu>,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org, Eli Barzilay <eli@barzilay.org>
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 10:43:22 -0500

 Eli: if you okay this, I can make the change.
 
 Robby
 
 On Tue, Jul 10, 2012 at 10:42 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 > On Tue, Jul 10, 2012 at 8:33 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >> On Tue, Jul 10, 2012 at 11:24 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>> Why is it not safe to allow impersonations of prop:force? You just
 >>> should need to ensure that all impersonations are
 >>> impersonate-procedure wrappers that only wrap the return value of the
 >>> procedure. It seems like that could be done by providing something
 >>> more specialized from private/promise.rkt instead of prop:force. It
 >>> doesn't seem like there should be any invariants of the promise
 >>> implementation on the value inside the promise.
 >>
 >> I think all that needs to be done is to create the `prop:force`
 >> property with `'can-impersonate` for the guard, if that's indeed safe.
 >>  I've cc'ed Eli, who can speak to the safety of this.
 >>
 > That was what I was thinking.
 >
 >> However, note that this would mean that:
 >>
 >>   (equal? (force a) (force a))
 >>
 >> might produce `#f`, which I think would be a change to the guarantees
 >> that promises currently provide.
 >>
 > It is not, this is already possible with delay/name
 >
 > (define a (delay/name (random a)))
 > (equal? (force a) (force a)) ; => #f (most likely)
 >
 >
 >>> Also what do you mean by generative structs cannot be impersonated? I
 >>> thought all non prefab structs were generative.
 >>
 >> More specificially, immutable fields of structs that are not prefab
 >> can't be impersonated.
 >>
 > Ah, ok.
 >
 >>>
 >>>
 >>>
 >>>
 >>>
 >>>
 >>> On Tue, Jul 10, 2012 at 5:58 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>>> On Tue, Jul 10, 2012 at 8:54 AM, Robby Findler
 >>>> <robby@eecs.northwestern.edu> wrote:
 >>>>> On Tue, Jul 10, 2012 at 7:49 AM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >>>>
 >>>>>> Unless I've misunderstood something.  And I suspect object/c is an
 >>>>>> impersonator so that method wrappers can be impersonators, as well.
 >>>>>> Otherwise they would be restricted to only chaperones.
 >>>>>
 >>>>> Well, there are no methods in this case. And, in general, if the
 >>>>> method contracts are all chaperones, it would seem that the object
 >>>>> contract can be too, unless I'm missing something?
 >>>>
 >>>> I'm pretty sure that Stevie has said that `object/c` could be a
 >>>> chaperone contract in some cases, but isn't currently.
 >>>>
 >>>> --
 >>>> sam th
 >>>> samth@ccs.neu.edu
 >>
 >>
 >>
 >> --
 >> sam th
 >> samth@ccs.neu.edu
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Carl Eastlund <cce@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Eli Barzilay <eli@barzilay.org>
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 08:42:35 -0700

 On Tue, Jul 10, 2012 at 8:33 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 > On Tue, Jul 10, 2012 at 11:24 AM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >> Why is it not safe to allow impersonations of prop:force? You just
 >> should need to ensure that all impersonations are
 >> impersonate-procedure wrappers that only wrap the return value of the
 >> procedure. It seems like that could be done by providing something
 >> more specialized from private/promise.rkt instead of prop:force. It
 >> doesn't seem like there should be any invariants of the promise
 >> implementation on the value inside the promise.
 >
 > I think all that needs to be done is to create the `prop:force`
 > property with `'can-impersonate` for the guard, if that's indeed safe.
 >  I've cc'ed Eli, who can speak to the safety of this.
 >
 That was what I was thinking.
 
 > However, note that this would mean that:
 >
 >   (equal? (force a) (force a))
 >
 > might produce `#f`, which I think would be a change to the guarantees
 > that promises currently provide.
 >
 It is not, this is already possible with delay/name
 
 (define a (delay/name (random a)))
 (equal? (force a) (force a)) ; => #f (most likely)
 
 
 >> Also what do you mean by generative structs cannot be impersonated? I
 >> thought all non prefab structs were generative.
 >
 > More specificially, immutable fields of structs that are not prefab
 > can't be impersonated.
 >
 Ah, ok.
 
 >>
 >>
 >>
 >>
 >>
 >>
 >> On Tue, Jul 10, 2012 at 5:58 AM, Sam Tobin-Hochstadt <samth@ccs.neu.edu> wrote:
 >>> On Tue, Jul 10, 2012 at 8:54 AM, Robby Findler
 >>> <robby@eecs.northwestern.edu> wrote:
 >>>> On Tue, Jul 10, 2012 at 7:49 AM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >>>
 >>>>> Unless I've misunderstood something.  And I suspect object/c is an
 >>>>> impersonator so that method wrappers can be impersonators, as well.
 >>>>> Otherwise they would be restricted to only chaperones.
 >>>>
 >>>> Well, there are no methods in this case. And, in general, if the
 >>>> method contracts are all chaperones, it would seem that the object
 >>>> contract can be too, unless I'm missing something?
 >>>
 >>> I'm pretty sure that Stevie has said that `object/c` could be a
 >>> chaperone contract in some cases, but isn't currently.
 >>>
 >>> --
 >>> sam th
 >>> samth@ccs.neu.edu
 >
 >
 >
 > --
 > sam th
 > samth@ccs.neu.edu
From: Stevie Strickland <sstrickl@ccs.neu.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>,
        Carl Eastlund <cce@ccs.neu.edu>, Eric Dobson <eric.n.dobson@gmail.com>,
        bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 12:35:22 -0400

 On Jul 10, 2012, at 8:58 AM, Sam Tobin-Hochstadt wrote:
 
 > On Tue, Jul 10, 2012 at 8:54 AM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >> On Tue, Jul 10, 2012 at 7:49 AM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 > 
 >>> Unless I've misunderstood something.  And I suspect object/c is an
 >>> impersonator so that method wrappers can be impersonators, as well.
 >>> Otherwise they would be restricted to only chaperones.
 >> 
 >> Well, there are no methods in this case. And, in general, if the
 >> method contracts are all chaperones, it would seem that the object
 >> contract can be too, unless I'm missing something?
 > 
 > I'm pretty sure that Stevie has said that `object/c` could be a
 > chaperone contract in some cases, but isn't currently.
 
 Right.  Currently the heavy lifting in object/c is done by just deferring to class/c.  However, class/c is always an impersonator contract, which means that we have to impersonate the class property that corresponds to the class in an object, which restricts object/c to impersonators.
 
 Now, class/c _should_ be changed to appropriately be a chaperone/impersonator contract as needed, but that's a much larger change than the equivalent change for object/c and so I haven't done it yet, or even completely thought through what needs to be changed to make that happen.
 
 Stevie
From: Robby Findler <robby@eecs.northwestern.edu>
To: Stevie Strickland <sstrickl@ccs.neu.edu>
Cc: Sam Tobin-Hochstadt <samth@ccs.neu.edu>, Carl Eastlund <cce@ccs.neu.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12861 promise/c does not maintain equality
Date: Tue, 10 Jul 2012 11:46:06 -0500

 Okay, so assuming that Eli replies in the positive, I'll fix that and
 then we can just leave this PR open as yours for the class/c
 impersonator issue.
 
 Robby
 
 On Tue, Jul 10, 2012 at 11:35 AM, Stevie Strickland
 <sstrickl@ccs.neu.edu> wrote:
 >
 > On Jul 10, 2012, at 8:58 AM, Sam Tobin-Hochstadt wrote:
 >
 >> On Tue, Jul 10, 2012 at 8:54 AM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >>> On Tue, Jul 10, 2012 at 7:49 AM, Carl Eastlund <cce@ccs.neu.edu> wrote:
 >>
 >>>> Unless I've misunderstood something.  And I suspect object/c is an
 >>>> impersonator so that method wrappers can be impersonators, as well.
 >>>> Otherwise they would be restricted to only chaperones.
 >>>
 >>> Well, there are no methods in this case. And, in general, if the
 >>> method contracts are all chaperones, it would seem that the object
 >>> contract can be too, unless I'm missing something?
 >>
 >> I'm pretty sure that Stevie has said that `object/c` could be a
 >> chaperone contract in some cases, but isn't currently.
 >
 > Right.  Currently the heavy lifting in object/c is done by just deferring to class/c.  However, class/c is always an impersonator contract, which means that we have to impersonate the class property that corresponds to the class in an object, which restricts object/c to impersonators.
 >
 > Now, class/c _should_ be changed to appropriately be a chaperone/impersonator contract as needed, but that's a much larger change than the equivalent change for object/c and so I haven't done it yet, or even completely thought through what needs to be changed to make that happen.
 >
 > Stevie
 
From: Eli Barzilay <eli@barzilay.org>
To: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>,
        Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs@racket-lang.org, nobody@racket-lang.org,
        bug-notification@racket-lang.org, Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 23:06:17 -0400

 On Wednesday, Robby Findler wrote:
 > Thanks. And sorry for the delay getting to this.
 > 
 > Eli: I provided promise-forcer from racket/private/promise.rkt (and
 > then use it in racket/contract/private/misc.rkt). Hope that's okay.
 
 Yeah, that sounds as fine as having the property provided, especially
 given that it's a private module.
 
 
 11 hours ago, Sam Tobin-Hochstadt wrote:
 > 
 > I think all that needs to be done is to create the `prop:force`
 > property with `'can-impersonate` for the guard, if that's indeed
 > safe.  I've cc'ed Eli, who can speak to the safety of this.
 
 Pre-apologies, but I know almost nothing about impersonators an
 related things.  Can someone summarize what this change leads to?
 
 
 11 hours ago, Eric Dobson wrote:
 > On Tue, Jul 10, 2012 at 8:33 AM, Sam Tobin-Hochstadt
 > <samth@ccs.neu.edu> wrote:
 > > However, note that this would mean that:
 > >
 > >   (equal? (force a) (force a))
 > >
 > > might produce `#f`, which I think would be a change to the guarantees
 > > that promises currently provide.
 > >
 > It is not, this is already possible with delay/name
 > 
 > (define a (delay/name (random a)))
 > (equal? (force a) (force a)) ; => #f (most likely)
 
 Yes, since force dispatches on a property (and should really be done
 with the new generics, IIUC, but they didn't get to it), there is no
 such guarantee in general.  But of course for most of the popular
 promises you do get it.
 
 
 11 hours ago, Robby Findler wrote:
 > Eli: if you okay this, I can make the change.
 
 I have a vague intuition that if this just allows something to be done
 with the property then there's nothing in existing functionality that
 is affected, but perhaps there's some implications on the kind of
 guarantees that are given or that it should expect?  In any case you
 should consider me as agreeing by default.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 22:08:22 -0500

 On Tue, Jul 10, 2012 at 10:06 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > On Wednesday, Robby Findler wrote:
 >> Thanks. And sorry for the delay getting to this.
 >>
 >> Eli: I provided promise-forcer from racket/private/promise.rkt (and
 >> then use it in racket/contract/private/misc.rkt). Hope that's okay.
 >
 > Yeah, that sounds as fine as having the property provided, especially
 > given that it's a private module.
 >
 >
 > 11 hours ago, Sam Tobin-Hochstadt wrote:
 >>
 >> I think all that needs to be done is to create the `prop:force`
 >> property with `'can-impersonate` for the guard, if that's indeed
 >> safe.  I've cc'ed Eli, who can speak to the safety of this.
 >
 > Pre-apologies, but I know almost nothing about impersonators an
 > related things.  Can someone summarize what this change leads to?
 >
 >
 > 11 hours ago, Eric Dobson wrote:
 >> On Tue, Jul 10, 2012 at 8:33 AM, Sam Tobin-Hochstadt
 >> <samth@ccs.neu.edu> wrote:
 >> > However, note that this would mean that:
 >> >
 >> >   (equal? (force a) (force a))
 >> >
 >> > might produce `#f`, which I think would be a change to the guarantees
 >> > that promises currently provide.
 >> >
 >> It is not, this is already possible with delay/name
 >>
 >> (define a (delay/name (random a)))
 >> (equal? (force a) (force a)) ; => #f (most likely)
 >
 > Yes, since force dispatches on a property (and should really be done
 > with the new generics, IIUC, but they didn't get to it), there is no
 > such guarantee in general.  But of course for most of the popular
 > promises you do get it.
 >
 >
 > 11 hours ago, Robby Findler wrote:
 >> Eli: if you okay this, I can make the change.
 >
 > I have a vague intuition that if this just allows something to be done
 > with the property then there's nothing in existing functionality that
 > is affected, but perhaps there's some implications on the kind of
 > guarantees that are given or that it should expect?  In any case you
 > should consider me as agreeing by default.
 
 It allows the contract library to put impersonator contracts on
 promises. Impersonator contracts allow you to actually change the
 values. For example an impersonator contract could change a 1 into a 2
 (instead of just signalling an error). None of the ones in the library
 currently do this, however, impersonator contracts are used just to
 put opaque wrappers on values to get a dynamic form of parametricity.
 
 I'll go ahead and make the change.
 
 Robby
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 22:13:58 -0500

 Note that this means the guard on there is now going to be gone (as it
 is meaningless since impersonators can arbitrarily change it).
 
 Robby
 
 On Tue, Jul 10, 2012 at 10:08 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > On Tue, Jul 10, 2012 at 10:06 PM, Eli Barzilay <eli@barzilay.org> wrote:
 >> On Wednesday, Robby Findler wrote:
 >>> Thanks. And sorry for the delay getting to this.
 >>>
 >>> Eli: I provided promise-forcer from racket/private/promise.rkt (and
 >>> then use it in racket/contract/private/misc.rkt). Hope that's okay.
 >>
 >> Yeah, that sounds as fine as having the property provided, especially
 >> given that it's a private module.
 >>
 >>
 >> 11 hours ago, Sam Tobin-Hochstadt wrote:
 >>>
 >>> I think all that needs to be done is to create the `prop:force`
 >>> property with `'can-impersonate` for the guard, if that's indeed
 >>> safe.  I've cc'ed Eli, who can speak to the safety of this.
 >>
 >> Pre-apologies, but I know almost nothing about impersonators an
 >> related things.  Can someone summarize what this change leads to?
 >>
 >>
 >> 11 hours ago, Eric Dobson wrote:
 >>> On Tue, Jul 10, 2012 at 8:33 AM, Sam Tobin-Hochstadt
 >>> <samth@ccs.neu.edu> wrote:
 >>> > However, note that this would mean that:
 >>> >
 >>> >   (equal? (force a) (force a))
 >>> >
 >>> > might produce `#f`, which I think would be a change to the guarantees
 >>> > that promises currently provide.
 >>> >
 >>> It is not, this is already possible with delay/name
 >>>
 >>> (define a (delay/name (random a)))
 >>> (equal? (force a) (force a)) ; => #f (most likely)
 >>
 >> Yes, since force dispatches on a property (and should really be done
 >> with the new generics, IIUC, but they didn't get to it), there is no
 >> such guarantee in general.  But of course for most of the popular
 >> promises you do get it.
 >>
 >>
 >> 11 hours ago, Robby Findler wrote:
 >>> Eli: if you okay this, I can make the change.
 >>
 >> I have a vague intuition that if this just allows something to be done
 >> with the property then there's nothing in existing functionality that
 >> is affected, but perhaps there's some implications on the kind of
 >> guarantees that are given or that it should expect?  In any case you
 >> should consider me as agreeing by default.
 >
 > It allows the contract library to put impersonator contracts on
 > promises. Impersonator contracts allow you to actually change the
 > values. For example an impersonator contract could change a 1 into a 2
 > (instead of just signalling an error). None of the ones in the library
 > currently do this, however, impersonator contracts are used just to
 > put opaque wrappers on values to get a dynamic form of parametricity.
 >
 > I'll go ahead and make the change.
 >
 > Robby
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 23:16:22 -0400

 Just now, Robby Findler wrote:
 > 
 > It allows the contract library to put impersonator contracts on
 > promises. Impersonator contracts allow you to actually change the
 > values. For example an impersonator contract could change a 1 into a
 > 2 (instead of just signalling an error). None of the ones in the
 > library currently do this, however, impersonator contracts are used
 > just to put opaque wrappers on values to get a dynamic form of
 > parametricity.
 
 I'm not following much of the terminology, but it sounds more than
 fine -- part of my design for the promises is to allow things like
 proxy promises that delegate to other promises.  For example, think
 about a promise that pulls out a value from a file (for example, a
 hash table from a preference file), and polls the file on subsequent
 forces to check for changes, and then a second promise that builds on
 the first promise to get the polling feature but provide just one
 entry from it or perhaps a value that is computed from entries.
 Something similar to what I used to make the handin server poll
 configuration files.  IOW, some form of an explicit-reactive-
 programming-like thing that is cheaper than a whole frp language like
 frtime in the same way that explicit delaying and forcing can be
 cheaper than a lazy language.
 
 
 > I'll go ahead and make the change.
 
 But that's just random rambling, the bottom line is "sounds like I
 intended to allow just that in an even less restricted way, so sure".
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

----------
A commit by robby@racket-lang.org was marked as relevant
  http://git.racket-lang.org/plt/commit/dcdc2aea02
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 22:22:30 -0500

 No. They'll fall thru to arity errors elsewhere.
 
 But these were internal errors, right?
 
 Robby
 
 On Tue, Jul 10, 2012 at 10:19 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > A few minutes ago, Robby Findler wrote:
 >> Note that this means the guard on there is now going to be gone (as
 >> it is meaningless since impersonators can arbitrarily change it).
 >
 > And is there some other way to avoid the obvious errors that it guards
 > against?  (Without contracts, that is.)
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 23:19:58 -0400

 A few minutes ago, Robby Findler wrote:
 > Note that this means the guard on there is now going to be gone (as
 > it is meaningless since impersonators can arbitrarily change it).
 
 And is there some other way to avoid the obvious errors that it guards
 against?  (Without contracts, that is.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 23:38:00 -0400

 10 minutes ago, Robby Findler wrote:
 > No. They'll fall thru to arity errors elsewhere.
 > 
 > But these were internal errors, right?
 
 I'm not sure what you'd define as internal errors...  To make this
 more concrete, see the definitions on `racket/promise' -- they all use
 the property to define new promise types, and the guard would make
 sure that these new things have well behaved forcers.  IIUC, then now
 it's possible that a typo there would turn up as an error later--?
 
 
 > On Tue, Jul 10, 2012 at 10:19 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > > A few minutes ago, Robby Findler wrote:
 > >> Note that this means the guard on there is now going to be gone
 > >> (as it is meaningless since impersonators can arbitrarily change
 > >> it).
 > >
 > > And is there some other way to avoid the obvious errors that it
 > > guards against?  (Without contracts, that is.)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>,
        Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Cc: 
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 23:46:09 -0400

 A few minutes ago, Eli Barzilay wrote:
 > 10 minutes ago, Robby Findler wrote:
 > > No. They'll fall thru to arity errors elsewhere.
 > > 
 > > But these were internal errors, right?
 > 
 > I'm not sure what you'd define as internal errors...
 
 (Um, one point that Asumu brought up -- maybe you mean that it's
 internal since `prop:force' is not provided from the non-private
 module.)
 
 > To make this more concrete, see the definitions on `racket/promise'
 > -- they all use the property to define new promise types, and the
 > guard would make sure that these new things have well behaved
 > forcers.  IIUC, then now it's possible that a typo there would turn
 > up as an error later--?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 22:49:40 -0500

 I mean that, assuming there are no bugs in the implementation of
 promises, this error cannot happen.
 
 That is, that check was not something that would show up as part of
 the API of promises.
 
 (At least that's what I think.)
 
 Robby
 
 On Tue, Jul 10, 2012 at 10:46 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > A few minutes ago, Eli Barzilay wrote:
 >> 10 minutes ago, Robby Findler wrote:
 >> > No. They'll fall thru to arity errors elsewhere.
 >> >
 >> > But these were internal errors, right?
 >>
 >> I'm not sure what you'd define as internal errors...
 >
 > (Um, one point that Asumu brought up -- maybe you mean that it's
 > internal since `prop:force' is not provided from the non-private
 > module.)
 >
 >> To make this more concrete, see the definitions on `racket/promise'
 >> -- they all use the property to define new promise types, and the
 >> guard would make sure that these new things have well behaved
 >> forcers.  IIUC, then now it's possible that a typo there would turn
 >> up as an error later--?
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Tue, 10 Jul 2012 23:54:49 -0400

 Just now, Robby Findler wrote:
 > I mean that, assuming there are no bugs in the implementation of
 > promises, this error cannot happen.
 > 
 > That is, that check was not something that would show up as part of
 > the API of promises.
 
 Yeah, that's the same as that other comment.
 
 One more thing from talking to Asumu about it -- I asked why they
 didn't convert promises to use generics too, and he said that there's
 little point in that because the property is not part of the interface
 of `racket/promise' so extensions are only things that can be done
 internally, by adding new promises there, and not by random end-user
 code.
 
 And IIRC, I originally wanted to have the property exposed and you had
 an objection to that--?  Maybe it's time to revisit this and expose it
 via generics instead of the raw property?  (Possibly doing the guard
 check there?)
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eli Barzilay <eli@barzilay.org>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        nobody@racket-lang.org, bug-notification@racket-lang.org,
        Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Wed, 11 Jul 2012 07:28:38 -0500

 I haven't thought through the ramifications of that, but it sounds
 like it would work fine with contracts.
 
 Robby
 
 On Tue, Jul 10, 2012 at 10:54 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > Just now, Robby Findler wrote:
 >> I mean that, assuming there are no bugs in the implementation of
 >> promises, this error cannot happen.
 >>
 >> That is, that check was not something that would show up as part of
 >> the API of promises.
 >
 > Yeah, that's the same as that other comment.
 >
 > One more thing from talking to Asumu about it -- I asked why they
 > didn't convert promises to use generics too, and he said that there's
 > little point in that because the property is not part of the interface
 > of `racket/promise' so extensions are only things that can be done
 > internally, by adding new promises there, and not by random end-user
 > code.
 >
 > And IIRC, I originally wanted to have the property exposed and you had
 > an objection to that--?  Maybe it's time to revisit this and expose it
 > via generics instead of the raw property?  (Possibly doing the guard
 > check there?)
 >
 > --
 >           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
 >                     http://barzilay.org/                   Maze is Life!
From: Eli Barzilay <eli@barzilay.org>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>,
        Sam Tobin-Hochstadt <samth@ccs.neu.edu>, bugs@racket-lang.org,
        bug-notification@racket-lang.org, Carl Eastlund <cce@ccs.neu.edu>
Subject: Re: [racket-bug] all/12861: promise/c does not maintain equality
Date: Thu, 12 Jul 2012 01:53:17 -0400

 Yesterday, Robby Findler wrote:
 > I haven't thought through the ramifications of that, but it sounds
 > like it would work fine with contracts.
 
 OK.  Asumu/Vincent: can you do that?
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!

State changed from "open" to "closed" by sstrickl at Sat, 09 Mar 2013 11:32:54 -0500
Reason>>> At this point, this bug is a duplicate of 11477 (which also comes from the 
impersonator-only aspect of class/c as it currently is implemented)

