From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Oct  7 23:14:10 2013
Received: from mail-oa0-f42.google.com (mail-oa0-f42.google.com [209.85.219.42])
	by winooski.ccs.neu.edu (8.14.7/8.14.7) with ESMTP id r983E9jD003671
	for <bugs@bugs.plt-scheme.org>; Mon, 7 Oct 2013 23:14:09 -0400
Message-Id: <201310080314.r983E6ho003664@winooski.ccs.neu.edu>
Date: Mon, 7 Oct 2013 23:14:06 -0400
From: eric.n.dobson@gmail.com
To: bugs@racket-lang.org
Subject: raco make -j N is slower than raco make

>Number:         14083
>Category:       setup-plt
>Synopsis:       raco make -j N is slower than raco make
>Class:          sw-bug
>Responsible:    mflatt
>Severity:       serious
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Mon Oct 07 23:16:01 -0400 2013
>Last-Modified:  Wed Dec 04 11:04:02 -0500 2013
>Originator:     Eric Dobson
>Organization:
plt
>Submitter-Id:   unknown
>Release:        HEAD
>Environment:
MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
>Description:
When attempting to rebuild a file that is already built raco make -j 10 is about twice as slow as raco make. I expect that passing in a higher number of parallel workers would only improve performance.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>
Cc: nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Mon, 7 Oct 2013 22:19:43 -0500

 --089e0118470a7492aa04e8323db0
 Content-Type: text/plain; charset=UTF-8
 
 If only that were so .... most implementations of parallel algorithms have
 graphs that do that (especially when N is larger than the amount of
 parallelism the hardware supports, in case that's relevant here).
 
 Robby
 
 
 On Mon, Oct 7, 2013 at 10:16 PM, <eric.n.dobson@gmail.com> wrote:
 
 > A new problem report is waiting at
 >   http://bugs.racket-lang.org/query/?cmd=view&pr=14083
 >
 > Reported by Eric Dobson for release: HEAD
 >
 > *** Description:
 > When attempting to rebuild a file that is already built raco make -j 10 is
 > about twice as slow as raco make. I expect that passing in a higher number
 > of parallel workers would only improve performance.
 >
 > *** How to repeat:
 >
 >
 > *** Environment:
 > MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >
 >
 
 --089e0118470a7492aa04e8323db0
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">If only that were so .... most implementations of parallel=
  algorithms have graphs that do that (especially when N is larger than the =
 amount of parallelism the hardware supports, in case that&#39;s relevant he=
 re).<div>
 <br></div><div>Robby</div></div><div class=3D"gmail_extra"><br><br><div cla=
 ss=3D"gmail_quote">On Mon, Oct 7, 2013 at 10:16 PM,  <span dir=3D"ltr">&lt;=
 <a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@=
 gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">A new problem report is waiting at<br>
 =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=3D14=
 083" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dview&amp;pr=
 =3D14083</a><br>
 <br>
 Reported by Eric Dobson for release: HEAD<br>
 <br>
 *** Description:<br>
 When attempting to rebuild a file that is already built raco make -j 10 is =
 about twice as slow as raco make. I expect that passing in a higher number =
 of parallel workers would only improve performance.<br>
 <br>
 *** How to repeat:<br>
 <br>
 <br>
 *** Environment:<br>
 MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.2=
 8 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28<br>
 <br>
 </blockquote></div><br></div>
 
 --089e0118470a7492aa04e8323db0--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Mon, 7 Oct 2013 20:29:29 -0700

 I see the issue with -j2 as well. I understand that parallel
 algorithms cannot always improve it, but the issue here is that the
 overhead of starting up the other workers before figuring out that
 there is no work to do. The real issue is that I want raco make to use
 up to the parallelism number that I give it, but if it thinks it will
 be faster to use less than it should.
 
 On Mon, Oct 7, 2013 at 8:19 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > If only that were so .... most implementations of parallel algorithms have
 > graphs that do that (especially when N is larger than the amount of
 > parallelism the hardware supports, in case that's relevant here).
 >
 > Robby
 >
 >
 > On Mon, Oct 7, 2013 at 10:16 PM, <eric.n.dobson@gmail.com> wrote:
 >>
 >> A new problem report is waiting at
 >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14083
 >>
 >> Reported by Eric Dobson for release: HEAD
 >>
 >> *** Description:
 >> When attempting to rebuild a file that is already built raco make -j 10 is
 >> about twice as slow as raco make. I expect that passing in a higher number
 >> of parallel workers would only improve performance.
 >>
 >> *** How to repeat:
 >>
 >>
 >> *** Environment:
 >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >>
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Tue, 8 Oct 2013 03:40:25 -0500

 --089e0149c3c058fc4904e836b88c
 Content-Type: text/plain; charset=UTF-8
 
 You see -j 2 being slower than -j 1 on a machine with (at least) two cores?
 
 Robby
 
 
 On Mon, Oct 7, 2013 at 10:29 PM, Eric Dobson <eric.n.dobson@gmail.com>wrote:
 
 > I see the issue with -j2 as well. I understand that parallel
 > algorithms cannot always improve it, but the issue here is that the
 > overhead of starting up the other workers before figuring out that
 > there is no work to do. The real issue is that I want raco make to use
 > up to the parallelism number that I give it, but if it thinks it will
 > be faster to use less than it should.
 >
 > On Mon, Oct 7, 2013 at 8:19 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > If only that were so .... most implementations of parallel algorithms
 > have
 > > graphs that do that (especially when N is larger than the amount of
 > > parallelism the hardware supports, in case that's relevant here).
 > >
 > > Robby
 > >
 > >
 > > On Mon, Oct 7, 2013 at 10:16 PM, <eric.n.dobson@gmail.com> wrote:
 > >>
 > >> A new problem report is waiting at
 > >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14083
 > >>
 > >> Reported by Eric Dobson for release: HEAD
 > >>
 > >> *** Description:
 > >> When attempting to rebuild a file that is already built raco make -j 10
 > is
 > >> about twice as slow as raco make. I expect that passing in a higher
 > number
 > >> of parallel workers would only improve performance.
 > >>
 > >> *** How to repeat:
 > >>
 > >>
 > >> *** Environment:
 > >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 > >>
 > >
 >
 
 --089e0149c3c058fc4904e836b88c
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">You see -j 2 being slower than -j 1 on a machine with (at =
 least) two cores?<br><br>Robby<br></div><div class=3D"gmail_extra"><br><br>=
 <div class=3D"gmail_quote">On Mon, Oct 7, 2013 at 10:29 PM, Eric Dobson <sp=
 an dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_bl=
 ank">eric.n.dobson@gmail.com</a>&gt;</span> wrote:<br>
 <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
 x #ccc solid;padding-left:1ex">I see the issue with -j2 as well. I understa=
 nd that parallel<br>
 algorithms cannot always improve it, but the issue here is that the<br>
 overhead of starting up the other workers before figuring out that<br>
 there is no work to do. The real issue is that I want raco make to use<br>
 up to the parallelism number that I give it, but if it thinks it will<br>
 be faster to use less than it should.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Mon, Oct 7, 2013 at 8:19 PM, Robby Findler<br>
 &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwestern.=
 edu</a>&gt; wrote:<br>
 &gt; If only that were so .... most implementations of parallel algorithms =
 have<br>
 &gt; graphs that do that (especially when N is larger than the amount of<br=
 >
 &gt; parallelism the hardware supports, in case that&#39;s relevant here).<=
 br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Mon, Oct 7, 2013 at 10:16 PM, &lt;<a href=3D"mailto:eric.n.dobson@g=
 mail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=3Dview&am=
 p;pr=3D14083" target=3D"_blank">http://bugs.racket-lang.org/query/?cmd=3Dvi=
 ew&amp;pr=3D14083</a><br>
 &gt;&gt;<br>
 &gt;&gt; Reported by Eric Dobson for release: HEAD<br>
 &gt;&gt;<br>
 &gt;&gt; *** Description:<br>
 &gt;&gt; When attempting to rebuild a file that is already built raco make =
 -j 10 is<br>
 &gt;&gt; about twice as slow as raco make. I expect that passing in a highe=
 r number<br>
 &gt;&gt; of parallel workers would only improve performance.<br>
 &gt;&gt;<br>
 &gt;&gt; *** How to repeat:<br>
 &gt;&gt;<br>
 &gt;&gt;<br>
 &gt;&gt; *** Environment:<br>
 &gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)<br>
 &gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/5=
 37.28<br>
 &gt;&gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --089e0149c3c058fc4904e836b88c--

From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: bugs <bugs@racket-lang.org>, nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Tue, 8 Oct 2013 08:53:41 -0700

 Yep my machine has 4 (8 counting hyper threads).
 
 endobson@yggdrasil () ~/tmp % echo "#lang racket/base" > tmp.rkt
 endobson@yggdrasil () ~/tmp % time raco make  tmp.rkt
 raco make tmp.rkt  0.33s user 0.18s system 59% cpu 0.849 total
 endobson@yggdrasil () ~/tmp % time raco make  tmp.rkt
 raco make tmp.rkt  0.28s user 0.08s system 91% cpu 0.392 total
 endobson@yggdrasil () ~/tmp % time raco make -j 2 tmp.rkt
 raco make -j 2 tmp.rkt  0.61s user 0.17s system 124% cpu 0.633 total
 endobson@yggdrasil () ~/tmp % time raco make  tmp.rkt
 raco make tmp.rkt  0.27s user 0.08s system 91% cpu 0.389 total
 endobson@yggdrasil () ~/tmp % time raco make -j 2 tmp.rkt
 raco make -j 2 tmp.rkt  0.61s user 0.18s system 125% cpu 0.623 total
 
 On Tue, Oct 8, 2013 at 1:40 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > You see -j 2 being slower than -j 1 on a machine with (at least) two cores?
 >
 > Robby
 >
 >
 > On Mon, Oct 7, 2013 at 10:29 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 >>
 >> I see the issue with -j2 as well. I understand that parallel
 >> algorithms cannot always improve it, but the issue here is that the
 >> overhead of starting up the other workers before figuring out that
 >> there is no work to do. The real issue is that I want raco make to use
 >> up to the parallelism number that I give it, but if it thinks it will
 >> be faster to use less than it should.
 >>
 >> On Mon, Oct 7, 2013 at 8:19 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> > If only that were so .... most implementations of parallel algorithms
 >> > have
 >> > graphs that do that (especially when N is larger than the amount of
 >> > parallelism the hardware supports, in case that's relevant here).
 >> >
 >> > Robby
 >> >
 >> >
 >> > On Mon, Oct 7, 2013 at 10:16 PM, <eric.n.dobson@gmail.com> wrote:
 >> >>
 >> >> A new problem report is waiting at
 >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14083
 >> >>
 >> >> Reported by Eric Dobson for release: HEAD
 >> >>
 >> >> *** Description:
 >> >> When attempting to rebuild a file that is already built raco make -j 10
 >> >> is
 >> >> about twice as slow as raco make. I expect that passing in a higher
 >> >> number
 >> >> of parallel workers would only improve performance.
 >> >>
 >> >> *** How to repeat:
 >> >>
 >> >>
 >> >> *** Environment:
 >> >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 >> >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2 Safari/537.28
 >> >>
 >> >
 >
 >
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Tue, 8 Oct 2013 14:05:06 -0500

 --089e01538bc45fcb5e04e83f72b0
 Content-Type: text/plain; charset=UTF-8
 
 Oh I'm sorry! I read 'raco make' as 'raco setup' until now. I could have
 saved us lots of time here....
 
 The basic problem here is that raco make cannot find any potential
 parallelism until it starts expanding a program and, in this case,
 discovering there is no parallelism to be had. So you are seeing that the
 parallelism support's cost as compared to the cost of compiling a trivial
 file. That is, the parallelism is happening at the level of different files
 And so you won't get any speed up until you have two different dependencies
 that both need recompilation.
 
 I suppose it might be possible to create some of the parallelism
 infrastructure more lazily to avoid most of this cost but that isn't
 trivial. Overall, it seems better to just document how this -j is working
 so people know what to expect in general.
 
 Robby
 
 On Tuesday, October 8, 2013, Eric Dobson wrote:
 
 > Yep my machine has 4 (8 counting hyper threads).
 >
 > endobson@yggdrasil () ~/tmp % echo "#lang racket/base" > tmp.rkt
 > endobson@yggdrasil () ~/tmp % time raco make  tmp.rkt
 > raco make tmp.rkt  0.33s user 0.18s system 59% cpu 0.849 total
 > endobson@yggdrasil () ~/tmp % time raco make  tmp.rkt
 > raco make tmp.rkt  0.28s user 0.08s system 91% cpu 0.392 total
 > endobson@yggdrasil () ~/tmp % time raco make -j 2 tmp.rkt
 > raco make -j 2 tmp.rkt  0.61s user 0.17s system 124% cpu 0.633 total
 > endobson@yggdrasil () ~/tmp % time raco make  tmp.rkt
 > raco make tmp.rkt  0.27s user 0.08s system 91% cpu 0.389 total
 > endobson@yggdrasil () ~/tmp % time raco make -j 2 tmp.rkt
 > raco make -j 2 tmp.rkt  0.61s user 0.18s system 125% cpu 0.623 total
 >
 > On Tue, Oct 8, 2013 at 1:40 AM, Robby Findler
 > <robby@eecs.northwestern.edu <javascript:;>> wrote:
 > > You see -j 2 being slower than -j 1 on a machine with (at least) two
 > cores?
 > >
 > > Robby
 > >
 > >
 > > On Mon, Oct 7, 2013 at 10:29 PM, Eric Dobson <eric.n.dobson@gmail.com<javascript:;>
 > >
 > > wrote:
 > >>
 > >> I see the issue with -j2 as well. I understand that parallel
 > >> algorithms cannot always improve it, but the issue here is that the
 > >> overhead of starting up the other workers before figuring out that
 > >> there is no work to do. The real issue is that I want raco make to use
 > >> up to the parallelism number that I give it, but if it thinks it will
 > >> be faster to use less than it should.
 > >>
 > >> On Mon, Oct 7, 2013 at 8:19 PM, Robby Findler
 > >> <robby@eecs.northwestern.edu <javascript:;>> wrote:
 > >> > If only that were so .... most implementations of parallel algorithms
 > >> > have
 > >> > graphs that do that (especially when N is larger than the amount of
 > >> > parallelism the hardware supports, in case that's relevant here).
 > >> >
 > >> > Robby
 > >> >
 > >> >
 > >> > On Mon, Oct 7, 2013 at 10:16 PM, <eric.n.dobson@gmail.com<javascript:;>>
 > wrote:
 > >> >>
 > >> >> A new problem report is waiting at
 > >> >>   http://bugs.racket-lang.org/query/?cmd=view&pr=14083
 > >> >>
 > >> >> Reported by Eric Dobson for release: HEAD
 > >> >>
 > >> >> *** Description:
 > >> >> When attempting to rebuild a file that is already built raco make -j
 > 10
 > >> >> is
 > >> >> about twice as slow as raco make. I expect that passing in a higher
 > >> >> number
 > >> >> of parallel workers would only improve performance.
 > >> >>
 > >> >> *** How to repeat:
 > >> >>
 > >> >>
 > >> >> *** Environment:
 > >> >> MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)
 > >> >> AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2
 > Safari/537.28
 > >> >>
 > >> >
 > >
 > >
 >
 
 --089e01538bc45fcb5e04e83f72b0
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 Oh I&#39;m sorry! I read &#39;raco make&#39; as &#39;raco setup&#39; until =
 now. I could have saved us lots of time here....<div><br></div><div>The bas=
 ic problem here is that raco make cannot find any potential parallelism unt=
 il it starts expanding a program and, in this case, discovering there is no=
  parallelism to be had. So you are seeing that the parallelism support&#39;=
 s cost as compared to the cost of compiling a trivial file. That is, the pa=
 rallelism is happening at the level of different files And so you won&#39;t=
  get any speed up until you have two different dependencies that both need =
 recompilation.=C2=A0</div>
 <div><br></div><div>I suppose it might be possible to create some of the pa=
 rallelism infrastructure more lazily to avoid most of=C2=A0this cost=C2=A0b=
 ut that isn&#39;t trivial. Overall, it=C2=A0seems better to just=C2=A0docum=
 ent how this -j is working so people know what to expect in general.</div>
 <div><br></div><div>Robby<br><br>On Tuesday, October 8, 2013, Eric Dobson  =
 wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bord=
 er-left:1px #ccc solid;padding-left:1ex">Yep my machine has 4 (8 counting h=
 yper threads).<br>
 
 <br>
 endobson@yggdrasil () ~/tmp % echo &quot;#lang racket/base&quot; &gt; tmp.r=
 kt<br>
 endobson@yggdrasil () ~/tmp % time raco make =C2=A0tmp.rkt<br>
 raco make tmp.rkt =C2=A00.33s user 0.18s system 59% cpu 0.849 total<br>
 endobson@yggdrasil () ~/tmp % time raco make =C2=A0tmp.rkt<br>
 raco make tmp.rkt =C2=A00.28s user 0.08s system 91% cpu 0.392 total<br>
 endobson@yggdrasil () ~/tmp % time raco make -j 2 tmp.rkt<br>
 raco make -j 2 tmp.rkt =C2=A00.61s user 0.17s system 124% cpu 0.633 total<b=
 r>
 endobson@yggdrasil () ~/tmp % time raco make =C2=A0tmp.rkt<br>
 raco make tmp.rkt =C2=A00.27s user 0.08s system 91% cpu 0.389 total<br>
 endobson@yggdrasil () ~/tmp % time raco make -j 2 tmp.rkt<br>
 raco make -j 2 tmp.rkt =C2=A00.61s user 0.18s system 125% cpu 0.623 total<b=
 r>
 <br>
 On Tue, Oct 8, 2013 at 1:40 AM, Robby Findler<br>
 &lt;<a href=3D"javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;robb=
 y@eecs.northwestern.edu&#39;)">robby@eecs.northwestern.edu</a>&gt; wrote:<b=
 r>
 &gt; You see -j 2 being slower than -j 1 on a machine with (at least) two c=
 ores?<br>
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Mon, Oct 7, 2013 at 10:29 PM, Eric Dobson &lt;<a href=3D"javascript=
 :;" onclick=3D"_e(event, &#39;cvml&#39;, &#39;eric.n.dobson@gmail.com&#39;)=
 ">eric.n.dobson@gmail.com</a>&gt;<br>
 &gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; I see the issue with -j2 as well. I understand that parallel<br>
 &gt;&gt; algorithms cannot always improve it, but the issue here is that th=
 e<br>
 &gt;&gt; overhead of starting up the other workers before figuring out that=
 <br>
 &gt;&gt; there is no work to do. The real issue is that I want raco make to=
  use<br>
 &gt;&gt; up to the parallelism number that I give it, but if it thinks it w=
 ill<br>
 &gt;&gt; be faster to use less than it should.<br>
 &gt;&gt;<br>
 &gt;&gt; On Mon, Oct 7, 2013 at 8:19 PM, Robby Findler<br>
 &gt;&gt; &lt;<a href=3D"javascript:;" onclick=3D"_e(event, &#39;cvml&#39;, =
 &#39;robby@eecs.northwestern.edu&#39;)">robby@eecs.northwestern.edu</a>&gt;=
  wrote:<br>
 &gt;&gt; &gt; If only that were so .... most implementations of parallel al=
 gorithms<br>
 &gt;&gt; &gt; have<br>
 &gt;&gt; &gt; graphs that do that (especially when N is larger than the amo=
 unt of<br>
 &gt;&gt; &gt; parallelism the hardware supports, in case that&#39;s relevan=
 t here).<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Robby<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; On Mon, Oct 7, 2013 at 10:16 PM, &lt;<a href=3D"javascript:;"=
  onclick=3D"_e(event, &#39;cvml&#39;, &#39;eric.n.dobson@gmail.com&#39;)">e=
 ric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; A new problem report is waiting at<br>
 &gt;&gt; &gt;&gt; =C2=A0 <a href=3D"http://bugs.racket-lang.org/query/?cmd=
 =3Dview&amp;pr=3D14083" target=3D"_blank">http://bugs.racket-lang.org/query=
 /?cmd=3Dview&amp;pr=3D14083</a><br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; Reported by Eric Dobson for release: HEAD<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Description:<br>
 &gt;&gt; &gt;&gt; When attempting to rebuild a file that is already built r=
 aco make -j 10<br>
 &gt;&gt; &gt;&gt; is<br>
 &gt;&gt; &gt;&gt; about twice as slow as raco make. I expect that passing i=
 n a higher<br>
 &gt;&gt; &gt;&gt; number<br>
 &gt;&gt; &gt;&gt; of parallel workers would only improve performance.<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** How to repeat:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; *** Environment:<br>
 &gt;&gt; &gt;&gt; MacIntel / Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2)=
 <br>
 &gt;&gt; &gt;&gt; AppleWebKit/537.28 (KHTML, like Gecko) Chrome/26.0.1397.2=
  Safari/537.28<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;<br>
 &gt;<br>
 &gt;<br>
 </blockquote></div>
 
 --089e01538bc45fcb5e04e83f72b0--
From: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Eric Dobson <eric.n.dobson@gmail.com>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Tue, 8 Oct 2013 15:18:41 -0400

 On Tue, Oct 8, 2013 at 3:05 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 >
 > I suppose it might be possible to create some of the parallelism
 > infrastructure more lazily to avoid most of this cost but that isn't
 > trivial. Overall, it seems better to just document how this -j is working so
 > people know what to expect in general.
 
 I think we should be able to do better than this. Can't we just start
 the new place _after_ the check for "already done"?
 
 Sam
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Sam Tobin-Hochstadt <samth@cs.indiana.edu>
Cc: Robby Findler <robby@eecs.northwestern.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Tue, 8 Oct 2013 14:48:25 -0700

 I do not think that we should punt on this even if it requires work.
 My use case is a very common one, I am running incremental tests and
 want to run the same command if I modify the test file or the library.
 Because compiling all the modules in between the test and library is
 non trivial I need parallelism, but do not need that if only changing
 the one test file. And in the edit/compile/debug cycle half a second
 is actually a long time.
 
 On Tue, Oct 8, 2013 at 12:18 PM, Sam Tobin-Hochstadt
 <samth@cs.indiana.edu> wrote:
 > On Tue, Oct 8, 2013 at 3:05 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 >>
 >> I suppose it might be possible to create some of the parallelism
 >> infrastructure more lazily to avoid most of this cost but that isn't
 >> trivial. Overall, it seems better to just document how this -j is working so
 >> people know what to expect in general.
 >
 > I think we should be able to do better than this. Can't we just start
 > the new place _after_ the check for "already done"?
 >
 > Sam
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Tue, 8 Oct 2013 17:01:36 -0500

 --047d7b471e6a9601a004e841e9ac
 Content-Type: text/plain; charset=UTF-8
 
 I am not personally familiar with this code to the point that I think me
 doing this would be any faster than any of you guys doing it. FWIW.
 
 Robby
 
 
 On Tue, Oct 8, 2013 at 4:48 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 
 > I do not think that we should punt on this even if it requires work.
 > My use case is a very common one, I am running incremental tests and
 > want to run the same command if I modify the test file or the library.
 > Because compiling all the modules in between the test and library is
 > non trivial I need parallelism, but do not need that if only changing
 > the one test file. And in the edit/compile/debug cycle half a second
 > is actually a long time.
 >
 > On Tue, Oct 8, 2013 at 12:18 PM, Sam Tobin-Hochstadt
 > <samth@cs.indiana.edu> wrote:
 > > On Tue, Oct 8, 2013 at 3:05 PM, Robby Findler
 > > <robby@eecs.northwestern.edu> wrote:
 > >>
 > >> I suppose it might be possible to create some of the parallelism
 > >> infrastructure more lazily to avoid most of this cost but that isn't
 > >> trivial. Overall, it seems better to just document how this -j is
 > working so
 > >> people know what to expect in general.
 > >
 > > I think we should be able to do better than this. Can't we just start
 > > the new place _after_ the check for "already done"?
 > >
 > > Sam
 >
 
 --047d7b471e6a9601a004e841e9ac
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I am not personally familiar with this code to the point t=
 hat I think me doing this would be any faster than any of you guys doing it=
 . FWIW.<div><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br>=
 <br>
 <div class=3D"gmail_quote">On Tue, Oct 8, 2013 at 4:48 PM, Eric Dobson <spa=
 n dir=3D"ltr">&lt;<a href=3D"mailto:eric.n.dobson@gmail.com" target=3D"_bla=
 nk">eric.n.dobson@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"g=
 mail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
 eft:1ex">
 I do not think that we should punt on this even if it requires work.<br>
 My use case is a very common one, I am running incremental tests and<br>
 want to run the same command if I modify the test file or the library.<br>
 Because compiling all the modules in between the test and library is<br>
 non trivial I need parallelism, but do not need that if only changing<br>
 the one test file. And in the edit/compile/debug cycle half a second<br>
 is actually a long time.<br>
 <div class=3D"HOEnZb"><div class=3D"h5"><br>
 On Tue, Oct 8, 2013 at 12:18 PM, Sam Tobin-Hochstadt<br>
 &lt;<a href=3D"mailto:samth@cs.indiana.edu">samth@cs.indiana.edu</a>&gt; wr=
 ote:<br>
 &gt; On Tue, Oct 8, 2013 at 3:05 PM, Robby Findler<br>
 &gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs.northwes=
 tern.edu</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; I suppose it might be possible to create some of the parallelism<b=
 r>
 &gt;&gt; infrastructure more lazily to avoid most of this cost but that isn=
 &#39;t<br>
 &gt;&gt; trivial. Overall, it seems better to just document how this -j is =
 working so<br>
 &gt;&gt; people know what to expect in general.<br>
 &gt;<br>
 &gt; I think we should be able to do better than this. Can&#39;t we just st=
 art<br>
 &gt; the new place _after_ the check for &quot;already done&quot;?<br>
 &gt;<br>
 &gt; Sam<br>
 </div></div></blockquote></div><br></div>
 
 --047d7b471e6a9601a004e841e9ac--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Tue, 3 Dec 2013 21:06:32 -0800

 Ok, its even worse than I thought.
 
 From the docs:
 -j ‹n› — Compiles argument modules in parallel, using up to ‹n› parallel tasks.
 
 During my experiments and looking at the code, I don't think there is
 any parallelism to be gained if there is only one file, since you can
 never know that two new modules are needed at once. Thus it is always
 single threaded. I think this needs to be called out more in the docs,
 since I was doing -j 10 for a while, assuming it would be faster.
 
 On Tue, Oct 8, 2013 at 3:01 PM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I am not personally familiar with this code to the point that I think me
 > doing this would be any faster than any of you guys doing it. FWIW.
 >
 > Robby
 >
 >
 > On Tue, Oct 8, 2013 at 4:48 PM, Eric Dobson <eric.n.dobson@gmail.com> wrote:
 >>
 >> I do not think that we should punt on this even if it requires work.
 >> My use case is a very common one, I am running incremental tests and
 >> want to run the same command if I modify the test file or the library.
 >> Because compiling all the modules in between the test and library is
 >> non trivial I need parallelism, but do not need that if only changing
 >> the one test file. And in the edit/compile/debug cycle half a second
 >> is actually a long time.
 >>
 >> On Tue, Oct 8, 2013 at 12:18 PM, Sam Tobin-Hochstadt
 >> <samth@cs.indiana.edu> wrote:
 >> > On Tue, Oct 8, 2013 at 3:05 PM, Robby Findler
 >> > <robby@eecs.northwestern.edu> wrote:
 >> >>
 >> >> I suppose it might be possible to create some of the parallelism
 >> >> infrastructure more lazily to avoid most of this cost but that isn't
 >> >> trivial. Overall, it seems better to just document how this -j is
 >> >> working so
 >> >> people know what to expect in general.
 >> >
 >> > I think we should be able to do better than this. Can't we just start
 >> > the new place _after_ the check for "already done"?
 >> >
 >> > Sam
 >
 >
 
From: Robby Findler <robby@eecs.northwestern.edu>
To: Eric Dobson <eric.n.dobson@gmail.com>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Wed, 4 Dec 2013 09:54:55 -0600

 --089e0158ab202d21cd04ecb76f6e
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 I think that an edit to the docs makes sense. I presume that passing
 multiple files on the command-line does something in parallel?
 
 Robby
 
 
 On Tue, Dec 3, 2013 at 11:06 PM, Eric Dobson <eric.n.dobson@gmail.com>wrote=
 :
 
 > Ok, its even worse than I thought.
 >
 > From the docs:
 > -j =E2=80=B9n=E2=80=BA =E2=80=94 Compiles argument modules in parallel, u=
 sing up to =E2=80=B9n=E2=80=BA parallel
 > tasks.
 >
 > During my experiments and looking at the code, I don't think there is
 > any parallelism to be gained if there is only one file, since you can
 > never know that two new modules are needed at once. Thus it is always
 > single threaded. I think this needs to be called out more in the docs,
 > since I was doing -j 10 for a while, assuming it would be faster.
 >
 > On Tue, Oct 8, 2013 at 3:01 PM, Robby Findler
 > <robby@eecs.northwestern.edu> wrote:
 > > I am not personally familiar with this code to the point that I think m=
 e
 > > doing this would be any faster than any of you guys doing it. FWIW.
 > >
 > > Robby
 > >
 > >
 > > On Tue, Oct 8, 2013 at 4:48 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 > >>
 > >> I do not think that we should punt on this even if it requires work.
 > >> My use case is a very common one, I am running incremental tests and
 > >> want to run the same command if I modify the test file or the library.
 > >> Because compiling all the modules in between the test and library is
 > >> non trivial I need parallelism, but do not need that if only changing
 > >> the one test file. And in the edit/compile/debug cycle half a second
 > >> is actually a long time.
 > >>
 > >> On Tue, Oct 8, 2013 at 12:18 PM, Sam Tobin-Hochstadt
 > >> <samth@cs.indiana.edu> wrote:
 > >> > On Tue, Oct 8, 2013 at 3:05 PM, Robby Findler
 > >> > <robby@eecs.northwestern.edu> wrote:
 > >> >>
 > >> >> I suppose it might be possible to create some of the parallelism
 > >> >> infrastructure more lazily to avoid most of this cost but that isn'=
 t
 > >> >> trivial. Overall, it seems better to just document how this -j is
 > >> >> working so
 > >> >> people know what to expect in general.
 > >> >
 > >> > I think we should be able to do better than this. Can't we just star=
 t
 > >> > the new place _after_ the check for "already done"?
 > >> >
 > >> > Sam
 > >
 > >
 >
 
 --089e0158ab202d21cd04ecb76f6e
 Content-Type: text/html; charset=UTF-8
 Content-Transfer-Encoding: quoted-printable
 
 <div dir=3D"ltr">I think that an edit to the docs makes sense. I presume th=
 at passing multiple files on the command-line does something in parallel?<d=
 iv><br></div><div>Robby</div></div><div class=3D"gmail_extra"><br><br><div =
 class=3D"gmail_quote">
 On Tue, Dec 3, 2013 at 11:06 PM, Eric Dobson <span dir=3D"ltr">&lt;<a href=
 =3D"mailto:eric.n.dobson@gmail.com" target=3D"_blank">eric.n.dobson@gmail.c=
 om</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"marg=
 in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 Ok, its even worse than I thought.<br>
 <br>
 From the docs:<br>
 -j =E2=80=B9n=E2=80=BA =E2=80=94 Compiles argument modules in parallel, usi=
 ng up to =E2=80=B9n=E2=80=BA parallel tasks.<br>
 <br>
 During my experiments and looking at the code, I don&#39;t think there is<b=
 r>
 any parallelism to be gained if there is only one file, since you can<br>
 never know that two new modules are needed at once. Thus it is always<br>
 single threaded. I think this needs to be called out more in the docs,<br>
 since I was doing -j 10 for a while, assuming it would be faster.<br>
 <br>
 On Tue, Oct 8, 2013 at 3:01 PM, Robby Findler<br>
 <div class=3D"HOEnZb"><div class=3D"h5">&lt;<a href=3D"mailto:robby@eecs.no=
 rthwestern.edu">robby@eecs.northwestern.edu</a>&gt; wrote:<br>
 &gt; I am not personally familiar with this code to the point that I think =
 me<br>
 &gt; doing this would be any faster than any of you guys doing it. FWIW.<br=
 >
 &gt;<br>
 &gt; Robby<br>
 &gt;<br>
 &gt;<br>
 &gt; On Tue, Oct 8, 2013 at 4:48 PM, Eric Dobson &lt;<a href=3D"mailto:eric=
 .n.dobson@gmail.com">eric.n.dobson@gmail.com</a>&gt; wrote:<br>
 &gt;&gt;<br>
 &gt;&gt; I do not think that we should punt on this even if it requires wor=
 k.<br>
 &gt;&gt; My use case is a very common one, I am running incremental tests a=
 nd<br>
 &gt;&gt; want to run the same command if I modify the test file or the libr=
 ary.<br>
 &gt;&gt; Because compiling all the modules in between the test and library =
 is<br>
 &gt;&gt; non trivial I need parallelism, but do not need that if only chang=
 ing<br>
 &gt;&gt; the one test file. And in the edit/compile/debug cycle half a seco=
 nd<br>
 &gt;&gt; is actually a long time.<br>
 &gt;&gt;<br>
 &gt;&gt; On Tue, Oct 8, 2013 at 12:18 PM, Sam Tobin-Hochstadt<br>
 &gt;&gt; &lt;<a href=3D"mailto:samth@cs.indiana.edu">samth@cs.indiana.edu</=
 a>&gt; wrote:<br>
 &gt;&gt; &gt; On Tue, Oct 8, 2013 at 3:05 PM, Robby Findler<br>
 &gt;&gt; &gt; &lt;<a href=3D"mailto:robby@eecs.northwestern.edu">robby@eecs=
 .northwestern.edu</a>&gt; wrote:<br>
 &gt;&gt; &gt;&gt;<br>
 &gt;&gt; &gt;&gt; I suppose it might be possible to create some of the para=
 llelism<br>
 &gt;&gt; &gt;&gt; infrastructure more lazily to avoid most of this cost but=
  that isn&#39;t<br>
 &gt;&gt; &gt;&gt; trivial. Overall, it seems better to just document how th=
 is -j is<br>
 &gt;&gt; &gt;&gt; working so<br>
 &gt;&gt; &gt;&gt; people know what to expect in general.<br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; I think we should be able to do better than this. Can&#39;t w=
 e just start<br>
 &gt;&gt; &gt; the new place _after_ the check for &quot;already done&quot;?=
 <br>
 &gt;&gt; &gt;<br>
 &gt;&gt; &gt; Sam<br>
 &gt;<br>
 &gt;<br>
 </div></div></blockquote></div><br></div>
 
 --089e0158ab202d21cd04ecb76f6e--
From: Eric Dobson <eric.n.dobson@gmail.com>
To: Robby Findler <robby@eecs.northwestern.edu>
Cc: Sam Tobin-Hochstadt <samth@cs.indiana.edu>, bugs <bugs@racket-lang.org>,
        nobody <nobody@racket-lang.org>,
        bug-notification <bug-notification@racket-lang.org>
Subject: Re: [racket-bug] all/14083: raco make -j N is slower than raco make
Date: Wed, 4 Dec 2013 08:03:02 -0800

 That is my reading of the code, but I haven't tested it.
 
 On Wed, Dec 4, 2013 at 7:54 AM, Robby Findler
 <robby@eecs.northwestern.edu> wrote:
 > I think that an edit to the docs makes sense. I presume that passing
 > multiple files on the command-line does something in parallel?
 >
 > Robby
 >
 >
 > On Tue, Dec 3, 2013 at 11:06 PM, Eric Dobson <eric.n.dobson@gmail.com>
 > wrote:
 >>
 >> Ok, its even worse than I thought.
 >>
 >> From the docs:
 >> -j ‹n› — Compiles argument modules in parallel, using up to ‹n› parallel
 >> tasks.
 >>
 >> During my experiments and looking at the code, I don't think there is
 >> any parallelism to be gained if there is only one file, since you can
 >> never know that two new modules are needed at once. Thus it is always
 >> single threaded. I think this needs to be called out more in the docs,
 >> since I was doing -j 10 for a while, assuming it would be faster.
 >>
 >> On Tue, Oct 8, 2013 at 3:01 PM, Robby Findler
 >> <robby@eecs.northwestern.edu> wrote:
 >> > I am not personally familiar with this code to the point that I think me
 >> > doing this would be any faster than any of you guys doing it. FWIW.
 >> >
 >> > Robby
 >> >
 >> >
 >> > On Tue, Oct 8, 2013 at 4:48 PM, Eric Dobson <eric.n.dobson@gmail.com>
 >> > wrote:
 >> >>
 >> >> I do not think that we should punt on this even if it requires work.
 >> >> My use case is a very common one, I am running incremental tests and
 >> >> want to run the same command if I modify the test file or the library.
 >> >> Because compiling all the modules in between the test and library is
 >> >> non trivial I need parallelism, but do not need that if only changing
 >> >> the one test file. And in the edit/compile/debug cycle half a second
 >> >> is actually a long time.
 >> >>
 >> >> On Tue, Oct 8, 2013 at 12:18 PM, Sam Tobin-Hochstadt
 >> >> <samth@cs.indiana.edu> wrote:
 >> >> > On Tue, Oct 8, 2013 at 3:05 PM, Robby Findler
 >> >> > <robby@eecs.northwestern.edu> wrote:
 >> >> >>
 >> >> >> I suppose it might be possible to create some of the parallelism
 >> >> >> infrastructure more lazily to avoid most of this cost but that isn't
 >> >> >> trivial. Overall, it seems better to just document how this -j is
 >> >> >> working so
 >> >> >> people know what to expect in general.
 >> >> >
 >> >> > I think we should be able to do better than this. Can't we just start
 >> >> > the new place _after_ the check for "already done"?
 >> >> >
 >> >> > Sam
 >> >
 >> >
 >
 >
 
