From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Mon Aug 29 15:49:05 2011
Received: from mail-vw0-f44.google.com (mail-vw0-f44.google.com [209.85.212.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p7TJn2rn024625
	for <bugs@bugs.plt-scheme.org>; Mon, 29 Aug 2011 15:49:02 -0400
Message-Id: <201108291948.p7TJmtF2024619@champlain.ccs.neu.edu>
Date: Mon, 29 Aug 2011 15:48:55 -0400
From: samth@ccs.neu.edu
To: bugs@racket-lang.org
Subject: strange output from check-requires

>Number:         12139
>Category:       macro-stepper
>Synopsis:       strange output from check-requires
>Class:          sw-bug
>Responsible:    ryanc
>Severity:       serious
>Priority:       medium
>State:          closed
>Confidential:   no
>Arrival-Date:   Mon Aug 29 15:52:01 -0400 2011
>Closed-Date:    Tue Sep 27 23:30:28 -0400 2011
>Last-Modified:  Tue Sep 27 23:30:28 -0400 2011
>Originator:     Sam TH
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1.3.6--2011-08-29(8bcbaa1/g)
>Environment:
unix "Linux punge 2.6.38-11-generic #48-Ubuntu SMP Fri Jul 29 19:05:14 UTC 2011 i686 i686 i386 GNU/Linux" (i386-linux/3m) (get-display-depth) = 32
Human Language: english
(current-memory-use) 373234284
Links: (links) = ("raco-git"); (links #:user? #f) = (); (links #:root? #t) = (); (links #:user? #f #:root? #t) = ()


Collections:
("/home/samth/sw/plt/add-on/5.1.3.6/collects"
 ("info-domain"))
("/home/samth/sw/plt/collects"
 ("db" "honu" "eopl" "tests" "typed" "test-engine" "errortrace" "sgl" "plot" "combinator-parser" "0001-Give-appropriate-inferred-names-to-big-bang-clause-R.patch" "mzcom" "test-box-recovery" "version" ".gitignore" "defaults" "deinprogramm" "s-exp" "handin-client" "srpersist" "launcher" "scriblib" "browser" "unstable" "r5rs" "gui-debugger" "at-exp" "swindle" "scheme" "reader" "frtime" "meta" "racket" "file" "racklog" "data" "slatex" "net" "wxme" "syntax" "scribblings" "parser-tools" "ffi" "hierlist" "handin-server" "2htdp" "framework" "mz" "openssl" "dynext" "datalog" "slideshow" "games" "raco" "picturing-programs" "xml" "texpict" "graphics" "mzscheme" "profile" "help" "web-server" "schelog" "trace" "make" "algol60" "mzlib" "rackunit" "icons" "plai" "sirmail" "lazy" "mrlib" "setup" "xrepl" "string-constants" "syntax-color" "r6rs" "drscheme" "lang" "repo-time-stamp" "afm" "planet" "typed-scheme" "info-domain" "config" "guibuilder" "stepper" "mred" "embedded-gui" "preprocessor"!
  "readline" "htdp" "compiler" "srfi" "waterworld" "macro-debugger" "html" "scribble" "mysterx" "redex" "drracket" "rnrs" "teachpack" "tex2page" "schemeunit"))

Computer Language: (("Determine language from source") (#(#t print mixed-fraction-e #f #t debug) (default) #("stopwords.txt") "#lang racket\n" #t #t))
>Description:
Using the xrepl interface to `check-requires', I get this strange output:

-> ,ckreq typed-scheme/utils/utils
; Keep: racket/base, racket/string, racket/base, racket/require-syntax,
;   racket/provide-syntax, unstable/debug, racket/pretty, mzlib/pconvert.
; Bypass: syntax/parse, racket/contract, racket/unit, racket/struct-info,
;   syntax/parse.
-> 

First, it's not at all clear how to bypass `racket/unit' or `syntax/parse', and second `syntax/parse' appears twice.
>How-To-Repeat:
>Fix:
>Audit-Trail:
From: Eli Barzilay <eli@barzilay.org>
To: samth@ccs.neu.edu, bugs@racket-lang.org
Cc: bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12139: strange output from check-requires
Date: Mon, 29 Aug 2011 16:02:28 -0400

 7 minutes ago, samth@ccs.neu.edu wrote:
 > Using the xrepl interface to `check-requires', I get this strange output:
 > 
 > -> ,ckreq typed-scheme/utils/utils
 > ; Keep: racket/base, racket/string, racket/base, racket/require-syntax,
 > ;   racket/provide-syntax, unstable/debug, racket/pretty, mzlib/pconvert.
 > ; Bypass: syntax/parse, racket/contract, racket/unit, racket/struct-info,
 > ;   syntax/parse.
 > -> 
 > 
 > First, it's not at all clear how to bypass `racket/unit' or
 > `syntax/parse', and second `syntax/parse' appears twice.
 
 Second issue is probably because I decided to omit the phase level,
 and will be easy to solve.  The first is because Ryan doesn't provide
 that information.  So the options are:
 
 1. Keep things as they are, nag Ryan to add the "how to" information.
 
 2. Treat the bypass entries as keeps.
 
 3. Treat the bypass entries as keeps, and don't show either -- so you
    get just a generic "all fine", or a list of things to remove.  Then
    also add the phase levels.
 
 I'll go with #3, if there are no objections.
 
 -- 
           ((lambda (x) (x x)) (lambda (x) (x x)))          Eli Barzilay:
                     http://barzilay.org/                   Maze is Life!
From: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
To: Eli Barzilay <eli@barzilay.org>, Ryan Culpepper <ryan@cs.utah.edu>
Cc: bugs@racket-lang.org, bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12139: strange output from check-requires
Date: Mon, 29 Aug 2011 16:04:03 -0400

 On Mon, Aug 29, 2011 at 4:02 PM, Eli Barzilay <eli@barzilay.org> wrote:
 > 7 minutes ago, samth@ccs.neu.edu wrote:
 >> Using the xrepl interface to `check-requires', I get this strange output:
 >>
 >> -> ,ckreq typed-scheme/utils/utils
 >> ; Keep: racket/base, racket/string, racket/base, racket/require-syntax,
 >> ;   racket/provide-syntax, unstable/debug, racket/pretty, mzlib/pconvert.
 >> ; Bypass: syntax/parse, racket/contract, racket/unit, racket/struct-info,
 >> ;   syntax/parse.
 >> ->
 >>
 >> First, it's not at all clear how to bypass `racket/unit' or
 >> `syntax/parse', and second `syntax/parse' appears twice.
 >
 > Second issue is probably because I decided to omit the phase level,
 > and will be easy to solve.  The first is because Ryan doesn't provide
 > that information.  So the options are:
 >
 > 1. Keep things as they are, nag Ryan to add the "how to" information.
 >
 > 2. Treat the bypass entries as keeps.
 >
 > 3. Treat the bypass entries as keeps, and don't show either -- so you
 >   get just a generic "all fine", or a list of things to remove.  Then
 >   also add the phase levels.
 >
 > I'll go with #3, if there are no objections.
 
 I'd prefer
 
 4. Show the bypass entries, but not the keep entries, and add phase
 levels.  Plus nagging Ryan.
 -- 
 sam th
 samth@ccs.neu.edu
 
From: Ryan Culpepper <ryan@cs.utah.edu>
To: Sam Tobin-Hochstadt <samth@ccs.neu.edu>
Cc: Eli Barzilay <eli@barzilay.org>, bugs@racket-lang.org,
        bug-notification@racket-lang.org
Subject: Re: [racket-bug] all/12139: strange output from check-requires
Date: Mon, 29 Aug 2011 15:27:52 -0600

 On 08/29/2011 02:04 PM, Sam Tobin-Hochstadt wrote:
 > On Mon, Aug 29, 2011 at 4:02 PM, Eli Barzilay<eli@barzilay.org>  wrote:
 >> 7 minutes ago, samth@ccs.neu.edu wrote:
 >>> Using the xrepl interface to `check-requires', I get this strange output:
 >>>
 >>> ->  ,ckreq typed-scheme/utils/utils
 >>> ; Keep: racket/base, racket/string, racket/base, racket/require-syntax,
 >>> ;   racket/provide-syntax, unstable/debug, racket/pretty, mzlib/pconvert.
 >>> ; Bypass: syntax/parse, racket/contract, racket/unit, racket/struct-info,
 >>> ;   syntax/parse.
 >>> ->
 >>>
 >>> First, it's not at all clear how to bypass `racket/unit' or
 >>> `syntax/parse', and second `syntax/parse' appears twice.
 >>
 >> Second issue is probably because I decided to omit the phase level,
 >> and will be easy to solve.  The first is because Ryan doesn't provide
 >> that information.  So the options are:
 >>
 >> 1. Keep things as they are, nag Ryan to add the "how to" information.
 >>
 >> 2. Treat the bypass entries as keeps.
 >>
 >> 3. Treat the bypass entries as keeps, and don't show either -- so you
 >>    get just a generic "all fine", or a list of things to remove.  Then
 >>    also add the phase levels.
 >>
 >> I'll go with #3, if there are no objections.
 >
 > I'd prefer
 >
 > 4. Show the bypass entries, but not the keep entries, and add phase
 > levels.  Plus nagging Ryan.
 
 I think 3 would be best for now. BYPASS currently produces too many 
 false positives.
 
 The ideal output for BYPASS would be something like "BYPASS racket, 
 replace with racket/base, racket/match, racket/list".
 
 Of course, you probably wouldn't want to see "BYPASS racket, replace 
 with <24 of the 29 modules it aggregates>". But that constraint is a 
 blessing in disguise, because without some size limit the problem is 
 equivalent to the set cover problem.
 
 You definitely wouldn't want to see modules that are in other 
 collections' private directories, maybe even modules that are in other 
 subcollection's private directories---but your own private directory is 
 okay.
 
 I'm not sure when I'll get to fixing BYPASS. If anyone else wants to 
 take a crack at it, let me know.
 
 Ryan


State changed from "open" to "closed" by ryanc at Tue, 27 Sep 2011 23:30:28 -0400
Reason>>> check-requires is now 50% more awesome

