From bugs+caf_=bugs=bugs.plt-scheme.org@plt-scheme.org Thu Feb 17 09:02:02 2011
Received: from mail-fx0-f44.google.com (mail-fx0-f44.google.com [209.85.161.44])
	by champlain.ccs.neu.edu (8.14.4/8.14.4) with ESMTP id p1HE1uYA001373
	for <bugs@bugs.plt-scheme.org>; Thu, 17 Feb 2011 09:01:57 -0500
Message-Id: <201102171401.p1HE1pNR001367@champlain.ccs.neu.edu>
Date: Thu, 17 Feb 2011 09:01:51 -0500
From: olopierpa@gmail.com
To: bugs@racket-lang.org
Subject: Internal error while using the macro stepper

>Number:         11753
>Category:       macro-stepper
>Synopsis:       Internal error while using the macro stepper
>Class:          sw-bug
>Responsible:    ryanc
>Severity:       non-critical
>Priority:       medium
>State:          open
>Confidential:   no
>Arrival-Date:   Thu Feb 17 09:04:01 -0500 2011
>Last-Modified:  Fri Feb 25 15:29:25 -0500 2011
>Originator:     Pierpaolo BERNARDI
>Organization:
plt
>Submitter-Id:   unknown
>Release:        5.1
>Environment:
Win32 / x86 / Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; InfoPath.2; .NET CLR 2.0.50727; .NET4.0C; .NET4.0E; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)
>Description:
sequence-contract-violation: negative: method insert cannot be called, except in states (unlocked), args 11818 "(module cages racket\n  (#%module-begin\n   (provide perm-dimension\n            perm-equal?\n            perm-identity\n            perm-random\n            perm-lex-successor!\n            perm-lex-successor\n            perm-lex-rank\n            pe... 23565

 === context ===
C:\Programmi\Racket\collects\macro-debugger\view\step-display.rkt:73:4: core
C:\Programmi\Racket\collects\macro-debugger\view\stepper.rkt:389:4: update* method in macro-stepper-widget%
C:\Programmi\Racket\collects\macro-debugger\view\stepper.rkt:351:31
C:\Programmi\Racket\collects\macro-debugger\view\stepper.rkt:320:24

>How-To-Repeat:
Received the above error while using the macro stepper on a buffer containing:

====================================
#lang racket

(provide perm-dimension perm-equal? perm-identity perm-random
         perm-lex-successor! perm-lex-successor perm-lex-rank perm-lex-unrank
         trotter-johnson-rank trotter-johnson-unrank trotter-johnson-successor! trotter-johnson-successor
         write-perm 
         )

(define-syntax for
  (syntax-rules (← from to downto do)
    ((for var ← i to j do expr ...)
     (let ((jj j))
       (let loop ((var i))
         (unless (> var jj)
           expr ...
           (loop (+ var 1))))))
    ((for var ← i downto j do expr ...)
     (let ((jj j))
       (let loop ((var i))
         (unless (< var jj)
           expr ...
           (loop (- var 1))))))
    ((for var from i to j do expr ...)
     (for var ← i downto j do expr ...))
    ((for var from i downto j do expr ...)
     (for var ← i downto j do expr ...))))

(define-syntax while 
  (syntax-rules ()
    ((while cond expr ...)
     (let loop ()
       (when cond
         expr ...
         (loop))))))

(define-syntax incr
  (syntax-rules ()
    ((incr var q)
     (set! var (+ var q)))
    ((incr var)
     (incr var 1))))

(define-syntax decr
  (syntax-rules ()
    ((decr var q)
     (set! var (- var q)))
    ((decr var)
     (decr var 1))))

;;; ================================================================

(define make-perm 
  (case-lambda 
    ((n) 
     (make-vector (+ n 1)))
    ((n init) 
     (make-vector (+ n 1) init))))

(define (perm-dimension perm)
  (- (vector-length perm) 1))

(define (perm-equal? p1 p2)
  (and (= (vector-length p1)
          (vector-length p2))
       (let ((dim (vector-length p1)))
         (let again ((i 1))
           (or (= i dim)
               (and (= (vector-ref p1 i)
                       (vector-ref p2 i))
                    (again (+ i 1))))))))

(define perm-identity
  (case-lambda
    ((n)
     (perm-identity n (make-perm n)))
    ((n perm)
     (for i ← 1 to n do
       (vector-set! perm i i))
     perm)))

(define perm-random
  (case-lambda
    ((n)
     (perm-random n (make-perm n)))
    ((n perm)
     (perm-identity n perm)
     (for i ← n downto 2 do
       (swap perm i (+ 1 (random i))))
     perm)))

;;; Algorithm 2.14 / Page 53.
(define perm-lex-successor! 
  (case-lambda
    ((perm)
     (perm-lex-successor! perm (make-perm (perm-dimension perm))))
    ((perm ro)
     (vector-set! perm 0 0)
     (let* ((n (perm-dimension perm))
            (i (- n 1)))
       (while (< (vector-ref perm (+ i 1))
                 (vector-ref perm i))
         (decr i))
       (if (zero? i)
           #f
           (let ((j n))
             (while (< (vector-ref perm j)
                       (vector-ref perm i))
               (decr j))
             (swap perm i j)
             (for h ← (+ i 1) to n do
               (vector-set! ro h (vector-ref perm h)))
             (for h ← (+ i 1) to n do
               (vector-set! perm h (vector-ref ro (+ n i 1 (- h)))))
             #t))))))

(define perm-lex-successor
  (case-lambda 
    ((perm ans scratch1)
     (for i ← 1 to (perm-dimension perm) do
       (vector-set! ans i (vector-ref perm i)))
     (perm-lex-successor! ans scratch1)
     scratch1)
    ((perm ans)
     (perm-lex-successor perm ans (make-perm (perm-dimension perm))))
    ((perm)
     (perm-lex-successor perm (make-perm (perm-dimension perm))))))

;;; Algorithm 2.15 / Page 55.
(define perm-lex-rank
  (case-lambda
    ((perm)
     (perm-lex-rank perm (vector-copy perm)))
    ((perm ro)
     (let ((r 0)
           (n (perm-dimension perm)))
       (for i ← 1 to n do
         (vector-set! ro i (vector-ref perm i)))
       (for j ← 1 to n do
         (incr r (* (- (vector-ref ro j) 1) (factorial (- n j))))
         (for i ← (+ j 1) to n do
           (when (> (vector-ref ro i)
                    (vector-ref ro j))
             (vector-incr! ro i -1))))
       r))))

;;; Algorithm 2.16 / Page 56.
(define perm-lex-unrank
  (case-lambda
    ((n r)
     (perm-lex-unrank n r (make-perm n)))
    ((n r perm)
     (vector-set! perm n 1)
     (for j ← 1  to (- n 1) do
       (let ((d (/ (modulo r (factorial (+ j 1)))
                   (factorial j))))
         (decr r (* d (factorial j)))
         (vector-set! perm (- n j) (+ d 1))
         (for i ← (- n j -1) to n do
           (when (> (vector-ref perm i) d)
             (vector-incr! perm i 1)))))
     perm)))

;;; ================================================================

;;; Algorithm 2.17 / Page 60.
(define (trotter-johnson-rank perm)
  (let ((r 0)
        (n (perm-dimension perm)))
    (for j ← 2 to n do
      (let ((k 1)
            (i 1))
        (while (not (= (vector-ref perm i) j))
          (when (< (vector-ref perm i) j)
            (incr k))
          (incr i))
        (set! r
              (if (even? r)
                  (+ (* j r) j (- k))
                  (+ (* j r) k -1)))))
    r))

;;; Algorithm 2.18 / Page 61.
(define trotter-johnson-unrank
  (case-lambda
    ((n r)
     (trotter-johnson-unrank n r (make-perm n)))
    ((n r perm)
     (let ((r2 0))
       (vector-set! perm 1 1)
       (for j ← 2 to n do
         (let* ((r1 (floor (/ (* r (factorial j)) 
                              (factorial n))))
                (k (- r1 (* j r2))))
           (cond ((even? r2)
                  (for i ← (- j 1) downto (- j k) do
                    (vector-set! perm (+ i 1) (vector-ref perm i)))
                  (vector-set! perm (- j k) j))
                 (else (for i ← (- j 1) downto (+ k 1) do
                         (vector-set! perm (+ i 1) (vector-ref perm i)))
                       (vector-set! perm (+ k 1) j)))
           (set! r2 r1)))
       perm))))

;;; Algorithm 2.19 / Page 63.
(define (perm-parity n perm)
  (let ((a (make-perm n 0))
        (c 0))
    (for j ← 1 to n do
      (when (zero? (vector-ref a j))
        (incr c)
        (vector-set! a j 1)
        (let ((i j))
          (while (not (= (vector-ref perm i) j))
            (set! i (vector-ref perm i))
            (vector-set! a i 1)))))
    (modulo (- n c) 2)))

;;; Algorithm 2.20 / Page 63.
(define (trotter-johnson-successor! n perm)
  (let ((st 0)
        (ro (vector-copy perm))
        (done #f)
        (m n))
    (while (and (> m 1) (not done))
      (let ((d 1))
        (while (not (= (vector-ref ro d) m))
          (incr d))
        (for i ← d to (- m 1) do
          (vector-set! ro i (vector-ref ro (+ i 1))))
        (let ((par (perm-parity (- m 1) ro)))
          (if (= par 1)
              (if (= d m)
                  (decr m)
                  (begin
                    (swap perm (+ st d) (+ st d 1))
                    (set! done #t)))
              (if (= d 1)
                  (begin
                    (decr m)
                    (incr st))
                  (begin
                    (swap perm (+ st d) (+ st d -1))
                    (set! done #t)))))))
    (if (= m 1)
        #f
        #t)))

(define trotter-johnson-successor
  (case-lambda 
    ((perm ans scratch1)
     (for i ← 1 to (perm-dimension perm) do
       (vector-set! ans i (vector-ref perm i)))
     (trotter-johnson-successor! ans scratch1)
     scratch1)
    ((perm ans)
     (trotter-johnson-successor perm ans (make-perm (perm-dimension perm))))
    ((perm)
     (trotter-johnson-successor perm (make-perm (perm-dimension perm))))))

;;; ================================================================

(define (write-perm perm)
  (display "| ")
  (for i ← 1 to (perm-dimension perm) do
    (display (vector-ref perm i))
    (display " "))
  (display "|"))

(define (fact-vect n)
  (let ((v (make-vector n 1)))
    (let again ((i 1) (p 1))
      (unless (= i n)
        (let ((pp (* i p)))
          (vector-set! v i pp)
          (again (+ i 1) pp))))
    v))

(define factorial
  (let ((dim-cache 10)
        (factor 1.5)
        (cache #()))
    
    (define (modify-cache n)
      (let ((nn (+ 1 (inexact->exact (floor n)))))
        (set! dim-cache nn)
        (set! cache (fact-vect nn))))
    
    (modify-cache 10)
    
    (lambda (n)
      (when (>= n dim-cache)
        (modify-cache (max n (* dim-cache factor))))
      (vector-ref cache n))))

;;; ================================================================
;;; Vector utilities

(define (vector-incr! v i incr)
  (vector-set! v i (+ (vector-ref v i) incr)))

(define (swap v i j)
  (let ((temp (vector-ref v i)))
    (vector-set! v i (vector-ref v j))
    (vector-set! v j temp)))

;;; ================================================================
;;; Tests

(define (perm-lex-successor-test n)
  (let again ((p (trotter-johnson-unrank n 0))
              (c 0))
    (begin
      (display c)
      (display " ")
      (write-perm p)
      (newline))
    (if (perm-lex-successor! p)
        (again p (+ c 1))
        c)))

(define (perm-lex-test1 n i p)
  (= i 
     (perm-lex-rank
      (perm-lex-unrank n i p))))

(define (perm-lex-test n)
  (let ((p (make-vector (+ n 1) #f))
        (q 0))
    (for i ← 0 to (- (factorial n) 1) do
      (incr q)
      (unless (perm-lex-test1 n i p)
        (print i)
        (error 'nogood)))
    q))

(define (trotter-johnson-successor-test n)
  (let again ((p (trotter-johnson-unrank n 0))
              (c 0))
    (begin
      (display c)
      (display " ")
      (write-perm p)
      (newline))
    (if (trotter-johnson-successor! n p)
        (again p (+ c 1))
        c)))

(define (trotter-johnson-test1 n i p)
  (= i 
     (trotter-johnson-rank
      (trotter-johnson-unrank n i p))))

(define (trotter-johnson-test n)
  (let ((p (make-vector (+ n 1) #f))
        (q 0))
    (for i ← 0 to (- (factorial n) 1) do
      (incr q)
      (unless (trotter-johnson-test1 n i p)
        (print i)
        (error 'nogood)))
    q))

;;; ================================================================

(define (perm->cycles perm)
  
  (define (estract-cycle seen i)
    (let again ((i i) (cycle (list i)))
      (vector-set! seen i #t)
      (let ((nexti (vector-ref perm i)))
        (if (vector-ref seen nexti)
            (reverse cycle) ; or even not
            (again nexti (cons nexti cycle))))))
  
  (let ((dim (perm-dimension perm)))
    (let again ((seen (make-vector (+ dim 1) #f))
                (i 1)
                (cycles '()))
      (if (> i dim)
          (reverse cycles) ; or even not
          (if (vector-ref seen i)
              (again seen (+ i 1) cycles)
              (again seen (+ i 1) (cons (estract-cycle seen i) cycles)))))))

(define cycles->perm
  (case-lambda
    ((n cycles)
     (cycles->perm n cycles (make-perm n)))
    ((n cycles perm)
     
     (define (do-one-cycle cycle)
       (let ((start (car cycle)))
         (let again ((first start)
                     (rest (cdr cycle)))
           (if (null? rest)
               (vector-set! perm first start)
               (let ((second (car rest)))
                 (vector-set! perm first second)
                 (again second (cdr rest)))))))
     
     (for-each do-one-cycle cycles)
     perm)))

(define (test-cycles n)
  (let ((scratch (make-perm n)))
    (let again ((perm (perm-lex-unrank n 0)) (i 0))
      (cond ((perm-equal? perm (cycles->perm n (perm->cycles perm) scratch))
             (if (perm-lex-successor! perm scratch)
                 (again perm (+ i 1))
                 i))
            (else
             (print (list i perm 'nogood)))))))

====================================
>Fix:
